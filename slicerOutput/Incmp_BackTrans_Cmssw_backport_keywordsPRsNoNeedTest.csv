"tauGenJetsForNano = tauGenJets.clone(
GenParticles = ""finalGenParticles"",
includeNeutrinos = False


enJetsSelectorAllHadronsForNano = tauGenJetsSelectorAllHadrons.clone(
src = ""tauGenJetsForNano""

src = cms.InputTag(""tauGenJetsSelectorAllHadronsForNano""),
"
-------------------------------------------------------------------------
"```python
tauGenJetsForNano = tauGenJets.clone(
    GenParticles = ""finalGenParticles"",
    includeNeutrinos = False
)

tauGenJetsSelectorAllHadronsForNano = tauGenJetsSelectorAllHadrons.clone(
    src = ""tauGenJetsForNano""
)
```"
-------------------------------------------------------------------------
"tauMC = cms.Sequence(tauGenJetsForNano  tauGenJetsSelectorAllHadronsForNano  genVisTaus  genVisTauTable  tausMCMatchLepTauForTable  tausMCMatchHadTauForTable  tauMCTable)
"
-------------------------------------------------------------------------
"Recom
PRs: 33522, 33525"
-------------------------------------------------------------------------
=========================================================================
"'run1_design'                  : '113X_mcRun1_design_v3',
'run1_mc'                      : '113X_mcRun1_realistic_v3',
'run1_mc_hi'                   : '113X_mcRun1_HeavyIon_v3',
'run1_mc_pa'                   : '113X_mcRun1_pA_v3',
'run2_mc_50ns'                 : '113X_mcRun2_startup_v3',
'run2_mc_l1stage1'             : '113X_mcRun2_asymptotic_l1stage1_v4',
'run2_design'                  : '113X_mcRun2_design_v4',
'run2_mc_pre_vfp'              : '113X_mcRun2_asymptotic_preVFP_v4',
'run2_mc'                      : '113X_mcRun2_asymptotic_v4',
'run2_mc_cosmics'              : '113X_mcRun2cosmics_asymptotic_deco_v4',
'run2_mc_hi'                   : '113X_mcRun2_HeavyIon_v4',
'run2_mc_pa'                   : '113X_mcRun2_pA_v4',
'run2_data'                    : '113X_dataRun2_v6',
'run2_data_HEfail'             : '113X_dataRun2_HEfail_v6',
'run2_data_relval'             : '113X_dataRun2_relval_v6',
'run2_data_promptlike_hi'      : '113X_dataRun2_PromptLike_HI_v6',
'run3_hlt'                     : '113X_dataRun3_HLT_v1',
'run2_hlt_relval'              : '113X_dataRun2_HLT_relval_v1',
'run3_data_express'            : '113X_dataRun3_Express_v1',
'run3_data_prompt'             : '113X_dataRun3_Prompt_v1',
'phase1_2017_design'           : '113X_mc2017_design_v5',
'phase1_2017_realistic'        : '113X_mc2017_realistic_v5',
'phase1_2017_cosmics'          : '113X_mc2017cosmics_realistic_deco_v5',
'phase1_2017_cosmics_peak'     : '113X_mc2017cosmics_realistic_peak_v5',
'phase1_2018_design'           : '113X_upgrade2018_design_v5',
'phase1_2018_realistic'        : '113X_upgrade2018_realistic_v5',
'phase1_2018_realistic_rd'     : '113X_upgrade2018_realistic_RD_v4',
'phase1_2018_realistic_hi'     : '113X_upgrade2018_realistic_HI_v5',
'phase1_2018_realistic_HEfail' : '113X_upgrade2018_realistic_HEfail_v5',
'phase1_2018_cosmics'          : '113X_upgrade2018cosmics_realistic_deco_v5',
'phase1_2018_cosmics_peak'     : '113X_upgrade2018cosmics_realistic_peak_v5',
'phase1_2021_design'           : '113X_mcRun3_2021_design_v8', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'        : '113X_mcRun3_2021_realistic_v10', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'          : '113X_mcRun3_2021cosmics_realistic_deco_v9',
'phase1_2021_realistic_hi'     : '113X_mcRun3_2021_realistic_HI_v8',
'phase1_2023_realistic'        : '113X_mcRun3_2023_realistic_v8', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'        : '113X_mcRun3_2024_realistic_v8', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'             : '113X_mcRun4_realistic_v7'
"
-------------------------------------------------------------------------
"autoCond = {
    ### NEW KEYS ###
    'run1_design'       : '113X_mcRun1_design_v3',
    'run1_mc'           : '113X_mcRun1_realistic_v3',
    'run1_mc_hi'        : '113X_mcRun1_HeavyIon_v3',
    'run1_mc_pa'        : '113X_mcRun1_pA_v3',
    'run2_mc_50ns'      : '113X_mcRun2_startup_v3',
    'run2_mc_l1stage1'  : '113X_mcRun2_asymptotic_l1stage1_v4',
    'run2_design'       : '113X_mcRun2_design_v4',
    'run2_mc_pre_vfp'   : '113X_mcRun2_asymptotic_preVFP_v4',
    'run2_mc'           : '113X_mcRun2_asymptotic_v4',
    'run2_mc_cosmics'   : '113X_mcRun2cosmics_asymptotic_deco_v4',
    'run2_mc_hi'        : '113X_mcRun2_HeavyIon_v4',
    'run2_mc_pa'        : '113X_mcRun2_pA_v4',
    'run2_data'         : '113X_dataRun2_v6',
    'run2_data_HEfail'  : '113X_dataRun2_HEfail_v6',
    'run2_data_relval'  : '113X_dataRun2_relval_v6',
    'run2_data_promptlike_hi' : '113X_dataRun2_PromptLike_HI_v6',
    'run3_hlt'          : '113X_dataRun3_HLT_v1',
    'run2_hlt_relval'   : '113X_dataRun2_HLT_relval_v1',
    'run3_data_express' : '113X_dataRun3_Express_v1',
    'run3_data_prompt'  : '113X_dataRun3_Prompt_v1',
    'phase1_2017_design' : '113X_mc2017_design_v5',
    'phase1_2017_realistic' : '113X_mc2017_realistic_v5',
    'phase1_2017_cosmics' : '113X_mc2017cosmics_realistic_deco_v5',
    'phase1_2017_cosmics_peak' : '113X_mc2017cosmics_realistic_peak_v5',
    'phase1_2018_design' : '113X_upgrade2018_design_v5',
    'phase1_2018_realistic' : '113X_upgrade2018_realistic_v5',
    'phase1_2018_realistic_rd' : '113X_upgrade2018_realistic_RD_v4',
    'phase1_2018_realistic_hi' : '113X_upgrade2018_realistic_HI_v5',
    'phase1_2018_realistic_HEfail' : '113X_upgrade2018_realistic_HEfail_v5',
    'phase1_2018_cosmics' : '113X_upgrade2018cosmics_realistic_deco_v5',
    'phase1_2018_cosmics_peak' : '113X_upgrade2018cosmics_realistic_peak_v5',
    'phase1_2021_design' : '113X_mcRun3_2021_design_v8', 
    'phase1_2021_realistic' : '113X_mcRun3_2021_realistic_v10', 
    'phase1_2021_cosmics' : '113X_mcRun3_2021cosmics_realistic_deco_v9',
    'phase1_2021_realistic_hi' : '113X_mcRun3_2021_realistic_HI_v8',
    'phase1_2023_realistic' : '113X_mcRun3_2023_realistic_v8', 
    'phase1_2024_realistic' : '113X_mcRun3_2024_realistic_v8', 
    'phase2_realistic' : '113X_mcRun4_realistic_v7'
}
"
-------------------------------------------------------------------------
"'run1_design'                  : '113X_mcRun1_design_v3',
'run1_mc'                      : '113X_mcRun1_realistic_v3',
'run1_mc_hi'                   : '113X_mcRun1_HeavyIon_v3',
'run1_mc_pa'                   : '113X_mcRun1_pA_v3',
'run2_mc_50ns'                 : '113X_mcRun2_startup_v3',
'run2_mc_l1stage1'             : '113X_mcRun2_asymptotic_l1stage1_v4',
'run2_design'                  : '113X_mcRun2_design_v4',
'run2_mc_pre_vfp'              : '113X_mcRun2_asymptotic_preVFP_v4',
'run2_mc'                      : '113X_mcRun2_asymptotic_v4',
'run2_mc_cosmics'              : '113X_mcRun2cosmics_asymptotic_deco_v4',
'run2_mc_hi'                   : '113X_mcRun2_HeavyIon_v4',
'run2_mc_pa'                   : '113X_mcRun2_pA_v4',
'run2_data'                    : '113X_dataRun2_v6',
'run2_data_HEfail'             : '113X_dataRun2_HEfail_v6',
'run2_data_relval'             : '113X_dataRun2_relval_v6',
'run2_data_promptlike_hi'      : '113X_dataRun2_PromptLike_HI_v6',
'run3_hlt'                     : '113X_dataRun3_HLT_v1',
'run2_hlt_relval'              : '113X_dataRun2_HLT_relval_v1',
'run3_data_express'            : '113X_dataRun3_Express_v1',
'run3_data_prompt'             : '113X_dataRun3_Prompt_v1',
'phase1_2017_design'           : '113X_mc2017_design_v5',
'phase1_2017_realistic'        : '113X_mc2017_realistic_v5',
'phase1_2017_cosmics'          : '113X_mc2017cosmics_realistic_deco_v5',
'phase1_2017_cosmics_peak'     : '113X_mc2017cosmics_realistic_peak_v5',
'phase1_2018_design'           : '113X_upgrade2018_design_v5',
'phase1_2018_realistic'        : '113X_upgrade2018_realistic_v5',
'phase1_2018_realistic_rd'     : '113X_upgrade2018_realistic_RD_v4',
'phase1_2018_realistic_hi'     : '113X_upgrade2018_realistic_HI_v5',
'phase1_2018_realistic_HEfail' : '113X_upgrade2018_realistic_HEfail_v5',
'phase1_2018_cosmics'          : '113X_upgrade2018cosmics_realistic_deco_v5',
'phase1_2018_cosmics_peak'     : '113X_upgrade2018cosmics_realistic_peak_v5',
'phase1_2021_design'           : '113X_mcRun3_2021_design_v8', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'        : '113X_mcRun3_2021_realistic_v10', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'          : '113X_mcRun3_2021cosmics_realistic_deco_v9',
'phase1_2021_realistic_hi'     : '113X_mcRun3_2021_realistic_HI_v8',
'phase1_2023_realistic'        : '113X_mcRun3_2023_realistic_v8', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'        : '113X_mcRun3_2024_realistic_v8', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'             : '113X_mcRun4_realistic_v7'
"
-------------------------------------------------------------------------
"Recom
PRs: 33507, 33509"
-------------------------------------------------------------------------
=========================================================================
")
"
-------------------------------------------------------------------------
"```python
if __name__ == ""__main__"":
    foo = cms.VPSet(cms.PSet(
        type = cms.string('Foo2')
    ))
```"
-------------------------------------------------------------------------
")
"
-------------------------------------------------------------------------
"Recom
PRs: 33449, 33450"
-------------------------------------------------------------------------
=========================================================================
"return '\n'.join(resultList)  '\n'  options.indentation()  ')'
"
-------------------------------------------------------------------------
"```python
return options.indentation() + ')\n'.join(resultList)
```"
-------------------------------------------------------------------------
"return '\n'.join(resultList)  '\n'  options.indentation()  ')'
"
-------------------------------------------------------------------------
"Recom
PRs: 33449, 33450"
-------------------------------------------------------------------------
=========================================================================
"# 13/04/2021 Felice: MultiClusters will be deprecated soon
"
-------------------------------------------------------------------------
"```python
import FWCore.ParameterSet.Config as cms
from RecoHGCal.TICL.SimTracksters_cff import *

Expr(value=Tuple(elts=[Constant(value='keep *_ticlMultiClustersFromSimTracksters_*_*')], ctx=Load()))

subdirsSim.extend(['HGCAL/HGCalValidator/simClusters/ticlSimTracksters'])

subdirsMult = ['HGCAL/HGCalValidator/hgcalMultiClusters/', 'HGCAL/HGCalValidator/ticlMultiClustersFromSimTracksters/']

simClustersIters = ['ClusterLevel', 'ticlTrackstersTrkEM', 'ticlTrackstersEM', 'ticlTrackstersTrk', 'ticlTrackstersHAD', 'ticlSimTracksters']

Expr(value=Tuple(elts=[Constant(value='ticlMultiClustersFromTrackstersEM'), Constant(value='ticlMultiClustersFromTrackstersHAD')], ctx=Load())

Expr(value=Tuple(elts=[Constant(value='keep *_ticlSimTracksters_*_*')], ctx=Load()))

globalPrevalidationHGCal = cms.Sequence(hgcalAssociators, ticlSimTrackstersTask)

from RecoHGCal.TICL.SimTracksters_cff import *
```"
-------------------------------------------------------------------------
"# 13/04/2021 Felice: MultiClusters will be deprecated soon
"
-------------------------------------------------------------------------
"Recom
PRs: 33318, 33447"
-------------------------------------------------------------------------
=========================================================================
"BSOnlineOmsServiceUrl = 'http://cmsoms-services.cms:9949/urn:xdaq-application:lid=100/getRunAndLumiSection'
"
-------------------------------------------------------------------------
"```python
BSOnlineOmsServiceUrl = ''
omsServiceUrl = cms.untracked.string(BSOnlineOmsServiceUrl)
```"
-------------------------------------------------------------------------
"BSOnlineOmsServiceUrl = 'http://cmsoms-services.cms:9949/urn:xdaq-application:lid=100/getRunAndLumiSection'
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"BSOnlineOmsServiceUrl = ''
"
-------------------------------------------------------------------------
BSOnlineOmsServiceUrl = ''
-------------------------------------------------------------------------
"BSOnlineOmsServiceUrl = ''
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"omsServiceUrl = cms.untracked.string(BSOnlineOmsServiceUrl),
"
-------------------------------------------------------------------------
omsServiceUrl = cms.untracked.string('')
-------------------------------------------------------------------------
"omsServiceUrl = cms.untracked.string(BSOnlineOmsServiceUrl),
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"BSOnlineOmsServiceUrl = 'http://cmsoms-services.cms:9949/urn:xdaq-application:lid=100/getRunAndLumiSection'
"
-------------------------------------------------------------------------
BSOnlineOmsServiceUrl = ''
-------------------------------------------------------------------------
"BSOnlineOmsServiceUrl = 'http://cmsoms-services.cms:9949/urn:xdaq-application:lid=100/getRunAndLumiSection'
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"BSOnlineOmsServiceUrl = ''
"
-------------------------------------------------------------------------
BSOnlineOmsServiceUrl = ''
-------------------------------------------------------------------------
"BSOnlineOmsServiceUrl = ''
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"omsServiceUrl = cms.untracked.string(BSOnlineOmsServiceUrl),
"
-------------------------------------------------------------------------
omsServiceUrl = cms.untracked.string(BSOnlineOmsServiceUrl)
-------------------------------------------------------------------------
"omsServiceUrl = cms.untracked.string(BSOnlineOmsServiceUrl),
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"BSOnlineOmsServiceUrl = 'http://cmsoms-services.cms:9949/urn:xdaq-application:lid=100/getRunAndLumiSection'
"
-------------------------------------------------------------------------
BSOnlineOmsServiceUrl = ''
-------------------------------------------------------------------------
"BSOnlineOmsServiceUrl = 'http://cmsoms-services.cms:9949/urn:xdaq-application:lid=100/getRunAndLumiSection'
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"BSOnlineOmsServiceUrl = ''
"
-------------------------------------------------------------------------
BSOnlineOmsServiceUrl = ''
-------------------------------------------------------------------------
"BSOnlineOmsServiceUrl = ''
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"omsServiceUrl = cms.untracked.string(BSOnlineOmsServiceUrl),
"
-------------------------------------------------------------------------
omsServiceUrl = cms.untracked.string('http://cmsoms-services.cms:9949/urn:xdaq-application:lid=100/getRunAndLumiSection')
-------------------------------------------------------------------------
"omsServiceUrl = cms.untracked.string(BSOnlineOmsServiceUrl),
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"BSOnlineOmsServiceUrl = 'http://cmsoms-services.cms:9949/urn:xdaq-application:lid=100/getRunAndLumiSection'
"
-------------------------------------------------------------------------
"```python
BSOnlineOmsServiceUrl = ''
omsServiceUrl = cms.untracked.string(BSOnlineOmsServiceUrl)
```"
-------------------------------------------------------------------------
"BSOnlineOmsServiceUrl = 'http://cmsoms-services.cms:9949/urn:xdaq-application:lid=100/getRunAndLumiSection'
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"BSOnlineOmsServiceUrl = ''
"
-------------------------------------------------------------------------
"```python
BSOnlineOmsServiceUrl = ''
```"
-------------------------------------------------------------------------
"BSOnlineOmsServiceUrl = ''
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"omsServiceUrl = cms.untracked.string(BSOnlineOmsServiceUrl),
"
-------------------------------------------------------------------------
omsServiceUrl = cms.untracked.string('http://cmsoms-services.cms:9949/urn:xdaq-application:lid=100/getRunAndLumiSection')
-------------------------------------------------------------------------
"omsServiceUrl = cms.untracked.string(BSOnlineOmsServiceUrl),
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"'run1_design'       :   '113X_mcRun1_design_v2',
'run1_mc'           :   '113X_mcRun1_realistic_v2',
'run1_mc_hi'        :   '113X_mcRun1_HeavyIon_v2',
'run1_mc_pa'        :   '113X_mcRun1_pA_v2',
"
-------------------------------------------------------------------------
"    'run1_design'       :   '113X_mcRun1_design_v2',
    'run1_mc'           :   '113X_mcRun1_realistic_v2',
    'run1_mc_hi'        :   '113X_mcRun1_HeavyIon_v2',
    'run1_mc_pa'        :   '113X_mcRun1_pA_v2',"
-------------------------------------------------------------------------
"'run1_design'       :   '112X_mcRun1_design_v2',
'run1_mc'           :   '112X_mcRun1_realistic_v2',
'run1_mc_hi'        :   '112X_mcRun1_HeavyIon_v2',
'run1_mc_pa'        :   '112X_mcRun1_pA_v3',
"
-------------------------------------------------------------------------
"Recom
PRs: 33142, 33158"
-------------------------------------------------------------------------
=========================================================================
"'run2_hlt_relval'      :   '112X_dataRun2_HLT_relval_v4',
'run2_hlt_relval_hi'   :   '112X_dataRun2_HLT_relval_HI_v3',
'run3_data_express'        :   '112X_dataRun3_Express_v3',
'run3_data_promptlike'     :   '112X_dataRun3_Prompt_v3',
"
-------------------------------------------------------------------------
"'run2_hlt_relval'      :   '112X_dataRun2_HLT_relval_v4',
'run2_hlt_relval_hi'   :   '112X_dataRun2_HLT_relval_HI_v3',
'run3_data_express'        :   '112X_dataRun3_Express_v3',
'run3_data_promptlike'     :   '112X_dataRun3_Prompt_v3',"
-------------------------------------------------------------------------
"'run2_hlt_relval'      :   '112X_dataRun2_HLT_relval_v4',
'run2_hlt_relval_hi'   :   '112X_dataRun2_HLT_relval_HI_v3',
'run3_data_express'        :   '112X_dataRun3_Express_v3',
'run3_data_promptlike'     :   '112X_dataRun3_Prompt_v3',
"
-------------------------------------------------------------------------
"Recom
PRs: 33142, 33158"
-------------------------------------------------------------------------
=========================================================================
"'phase2_realistic'         : '113X_mcRun4_realistic_v6'
"
-------------------------------------------------------------------------
'phase2_realistic' : '113X_mcRun4_realistic_v7'
-------------------------------------------------------------------------
"'phase2_realistic'         : '112X_mcRun4_realistic_v7'
"
-------------------------------------------------------------------------
"Recom
PRs: 33142, 33158"
-------------------------------------------------------------------------
=========================================================================
"def customiseHCALFor2018Input(process):
""""""Customise the HLT to run on Run 2 data/MC using the old readout for the HCAL barel""""""
for producer in producers_by_type(process, ""HBHEPhase1Reconstructor""):
    # switch on the QI8 processing for 2018 HCAL barrel
    producer.processQIE8 = True
# adapt CaloTowers threshold for 2018 HCAL barrel with only one depth
for producer in producers_by_type(process, ""CaloTowersCreator""):
    producer.HBThreshold1  = 0.7
    producer.HBThreshold2  = 0.7
    producer.HBThreshold   = 0.7

# adapt Particle Flow threshold for 2018 HCAL barrel with only one depth
from RecoParticleFlow.PFClusterProducer.particleFlowClusterHBHE_cfi import _thresholdsHB, _thresholdsHEphase1, _seedingThresholdsHB

logWeightDenominatorHCAL2018 = cms.VPSet(
    cms.PSet(
        depths = cms.vint32(1, 2, 3, 4),
        detector = cms.string('HCAL_BARREL1'),
        logWeightDenominator = _thresholdsHB
    cms.PSet(
        depths = cms.vint32(1, 2, 3, 4, 5, 6, 7),
        detector = cms.string('HCAL_ENDCAP'),
        logWeightDenominator = _thresholdsHEphase1
    )
        producer.producers[0].qualityTests[0].cuts[0].threshold = _thresholdsHB
    if producer.seedFinder.thresholdsByDetector[0].detector.value() == 'HCAL_BARREL1':
        producer.seedFinder.thresholdsByDetector[0].seedingThreshold = _seedingThresholdsHB
        producer.initialClusteringStep.thresholdsByDetector[0].gatheringThreshold = _thresholdsHB
        producer.pfClusterBuilder.recHitEnergyNorms[0].recHitEnergyNorm = _thresholdsHB
# done
"
-------------------------------------------------------------------------
"from HLTrigger.Configuration.common import *
from RecoParticleFlow.PFClusterProducer.particleFlowClusterHCAL_cfi import _thresholdsHB, _thresholdsHEphase1, _seedingThresholdsHB
from FWCore.ParameterSet.Config import *


def customiseHCALFor2018Input(process):
    """"""Customise the HLT to run on Run 2 data/MC using the old readout for the HCAL barrel""""""
    
    for producer in producers_by_type(process, ""HBHEPhase1Reconstructor""):
        # switch on the QI8 processing for 2018 HCAL barrel
        producer.processQIE8 = True

    # adapt CaloTowers threshold for 2018 HCAL barrel with only one depth
    for producer in producers_by_type(process, ""CaloTowersCreator""):
        producer.HBThreshold1 = 0.7
        producer.HBThreshold2 = 0.7
        producer.HBThreshold = 0.7

    # adapt Particle Flow threshold for 2018 HCAL barrel with only one depth
    logWeightDenominatorHCAL2018 = cms.VPSet(
        cms.PSet(
            depths=cms.vint32(1, 2, 3, 4),
            detector=cms.string('HCAL_BARREL1'),
            logWeightDenominator=_thresholdsHB
        ),
        cms.PSet(
            depths=cms.vint32(1, 2, 3, 4, 5, 6, 7),
            detector=cms.string('HCAL_ENDCAP'),
            logWeightDenominator=_thresholdsHEphase1
        )
    )

    for producer in producers_by_type(process, ""PFRecHitProducer""):
        if producer.producers[0].name.value() == 'PFHBHERecHitCreator':
            for consumer in producers_by_type(process, ""Producer""):
                if hasattr(producer, 'allCellsPositionCalc'):
                    producer.allCellsPositionCalc = logWeightDenominatorHCAL2018
                if hasattr(producer, 'positionCalc'):
                    producer.positionCalc = logWeightDenominatorHCAL2018

    for producer in producers_by_type(process, ""PFClusterProducer""):
        producer.pfClusterBuilder.positionCalc.logWeightDenominatorByDetector = logWeightDenominatorHCAL2018
        producer.pfClusterBuilder.allCellsPositionCalc.logWeightDenominatorByDetector = logWeightDenominatorHCAL2018

    for producer in producers_by_type(process, ""PFMultiDepthClusterProducer""):
        producer.pfClusterBuilder.allCellsPositionCalc.logWeightDenominatorByDetector = logWeightDenominatorHCAL2018

    return process"
-------------------------------------------------------------------------
"def customiseHCALFor2018Input(process):
""""""Customise the HLT to run on Run 2 data/MC using the old readout for the HCAL barel""""""
for producer in producers_by_type(process, ""HBHEPhase1Reconstructor""):
    # switch on the QI8 processing for 2018 HCAL barrel
    producer.processQIE8 = True
# adapt CaloTowers threshold for 2018 HCAL barrel with only one depth
for producer in producers_by_type(process, ""CaloTowersCreator""):
    producer.HBThreshold1  = 0.7
    producer.HBThreshold2  = 0.7
    producer.HBThreshold   = 0.7

# adapt Particle Flow threshold for 2018 HCAL barrel with only one depth
from RecoParticleFlow.PFClusterProducer.particleFlowClusterHBHE_cfi import _thresholdsHB, _thresholdsHEphase1, _seedingThresholdsHB

logWeightDenominatorHCAL2018 = cms.VPSet(
    cms.PSet(
        depths = cms.vint32(1, 2, 3, 4),
        detector = cms.string('HCAL_BARREL1'),
        logWeightDenominator = _thresholdsHB
    cms.PSet(
        depths = cms.vint32(1, 2, 3, 4, 5, 6, 7),
        detector = cms.string('HCAL_ENDCAP'),
        logWeightDenominator = _thresholdsHEphase1
    )
        producer.producers[0].qualityTests[0].cuts[0].threshold = _thresholdsHB
    if producer.seedFinder.thresholdsByDetector[0].detector.value() == 'HCAL_BARREL1':
        producer.seedFinder.thresholdsByDetector[0].seedingThreshold = _seedingThresholdsHB
        producer.initialClusteringStep.thresholdsByDetector[0].gatheringThreshold = _thresholdsHB
        producer.pfClusterBuilder.recHitEnergyNorms[0].recHitEnergyNorm = _thresholdsHB
# done
"
-------------------------------------------------------------------------
"Recom
PRs: 33133, 33134"
-------------------------------------------------------------------------
=========================================================================
"process = customiseHCALFor2018Input(process)
"
-------------------------------------------------------------------------
process = customiseHCALFor2018Input(process)
-------------------------------------------------------------------------
"process = customiseHCALFor2018Input(process)
"
-------------------------------------------------------------------------
"Recom
PRs: 33133, 33134"
-------------------------------------------------------------------------
=========================================================================
"seedingPSet = _ticlSeedingRegionProducer.seedingPSet.clone(type=""SeedingRegionGlobal"")
seedingPSet = _ticlSeedingRegionProducer.seedingPSet.clone(type=""SeedingRegionByTracks"")
seedingPSet = _ticlSeedingRegionProducer.seedingPSet.clone(type=""SeedingRegionGlobal"")
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='seedingPSet', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_ticlSeedingRegionProducer', ctx=Load()), attr='seedingPSet', ctx=Load()), attr='clone', ctx=Load()), args=[], keywords=[keyword(arg='type', value=Constant(value='SeedingRegionGlobal'))])

Assign(targets=[Name(id='seedingPSet', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_ticlSeedingRegionProducer', ctx=Load()), attr='seedingPSet', ctx=Load()), attr='clone', ctx=Load()), args=[], keywords=[keyword(arg='type', value=Constant(value='SeedingRegionByTracks'))])

Assign(targets=[Name(id='seedingPSet', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_ticlSeedingRegionProducer', ctx=Load()), attr='seedingPSet', ctx=Load()), attr='clone', ctx=Load()), args=[], keywords=[keyword(arg='type', value=Constant(value='SeedingRegionGlobal'))])"
-------------------------------------------------------------------------
"seedingPSet = _ticlSeedingRegionProducer.seedingPSet.clone(type=""SeedingRegionGlobal"")
seedingPSet = _ticlSeedingRegionProducer.seedingPSet.clone(type=""SeedingRegionByTracks"")
seedingPSet = _ticlSeedingRegionProducer.seedingPSet.clone(type=""SeedingRegionGlobal"")
"
-------------------------------------------------------------------------
"Recom
PRs: 32978, 33028"
-------------------------------------------------------------------------
=========================================================================
"'run2_mc_50ns'      :   '113X_mcRun2_startup_v2',
'run2_mc_l1stage1'  :   '113X_mcRun2_asymptotic_l1stage1_v3',
'run2_design'       :   '113X_mcRun2_design_v3',
'run2_mc_pre_vfp'   :   '113X_mcRun2_asymptotic_preVFP_v3',
'run2_mc'           :   '113X_mcRun2_asymptotic_v3',
'run2_mc_cosmics'   :   '113X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'        :   '113X_mcRun2_HeavyIon_v3',
'run2_mc_pa'        :   '113X_mcRun2_pA_v3',
'run1_data'         :   '113X_dataRun2_v4',
'run2_data'         :   '113X_dataRun2_v4',
'run2_data_HEfail'  :   '113X_dataRun2_HEfail_v4',
'run2_data_relval'  :   '113X_dataRun2_relval_v4',
'run2_data_promptlike_hi' : '113X_dataRun2_PromptLike_HI_v4',
"
-------------------------------------------------------------------------
"'run2_mc_50ns'          :   '113X_mcRun2_startup_v2',
'run2_mc_l1stage1'      :   '113X_mcRun2_asymptotic_l1stage1_v3',
'run2_design'           :   '113X_mcRun2_design_v3',
'run2_mc_pre_vfp'       :   '113X_mcRun2_asymptotic_preVFP_v3',
'run2_mc'               :   '113X_mcRun2_asymptotic_v3',
'run2_mc_cosmics'       :   '113X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'            :   '113X_mcRun2_HeavyIon_v3',
'run2_mc_pa'            :   '113X_mcRun2_pA_v3',
'run1_data'             :   '113X_dataRun2_v4',
'run2_data'             :   '113X_dataRun2_v4',
'run2_data_HEfail'      :   '113X_dataRun2_HEfail_v4',
'run2_data_relval'      :   '113X_dataRun2_relval_v4',
'run2_data_promptlike_hi' : '113X_dataRun2_PromptLike_HI_v4',"
-------------------------------------------------------------------------
"'run2_mc_l1stage1'  :   '112X_mcRun2_asymptotic_l1stage1_v3',
'run2_design'       :   '112X_mcRun2_design_v3',
'run2_mc_pre_vfp'   :   '112X_mcRun2_asymptotic_preVFP_v4',
'run2_mc'           :   '112X_mcRun2_asymptotic_v4',
'run2_mc_cosmics'   :   '112X_mcRun2cosmics_asymptotic_deco_v4',
'run2_mc_hi'        :   '112X_mcRun2_HeavyIon_v3',
'run2_mc_pa'        :   '112X_mcRun2_pA_v3',
'run1_data'         :   '112X_dataRun2_v9',
'run2_data'         :   '112X_dataRun2_v9',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v9',
'run2_data_relval'  :   '112X_dataRun2_relval_v9',
'run2_data_promptlike_hi' : '112X_dataRun2_PromptLike_HI_v7',
"
-------------------------------------------------------------------------
"Recom
PRs: 32959, 33011"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2017_design'       :  '113X_mc2017_design_v4',
'phase1_2017_realistic'    :  '113X_mc2017_realistic_v4',
'phase1_2017_cosmics'      :  '113X_mc2017cosmics_realistic_deco_v4',
'phase1_2017_cosmics_peak' :  '113X_mc2017cosmics_realistic_peak_v4',
'phase1_2018_design'       :  '113X_upgrade2018_design_v4',
'phase1_2018_realistic'    :  '113X_upgrade2018_realistic_v4',
'phase1_2018_realistic_rd' :  '113X_upgrade2018_realistic_RD_v2',
'phase1_2018_realistic_hi' :  '113X_upgrade2018_realistic_HI_v4',
'phase1_2018_realistic_HEfail' :  '113X_upgrade2018_realistic_HEfail_v4',
'phase1_2018_cosmics'      :  '113X_upgrade2018cosmics_realistic_deco_v4',
'phase1_2018_cosmics_peak' :  '113X_upgrade2018cosmics_realistic_peak_v4',
'phase1_2021_design'       : '113X_mcRun3_2021_design_v5', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '113X_mcRun3_2021_realistic_v7', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '113X_mcRun3_2021cosmics_realistic_deco_v6',
'phase1_2021_realistic_hi' : '113X_mcRun3_2021_realistic_HI_v5',
'phase1_2023_realistic'    : '113X_mcRun3_2023_realistic_v5', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '113X_mcRun3_2024_realistic_v5', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"```
autoCond = {
    'run3_data_promptlike'    : '112X_dataRun3_Prompt_v2',
    'phase1_2017_design'      : '113X_mc2017_design_v4',
    'phase1_2017_realistic'   : '113X_mc2017_realistic_v4',
    'phase1_2017_cosmics'     : '113X_mc2017cosmics_realistic_deco_v4',
    'phase1_2017_cosmics_peak': '113X_mc2017cosmics_realistic_peak_v4',
    'phase1_2018_design'      : '113X_upgrade2018_design_v4',
    'phase1_2018_realistic'   : '113X_upgrade2018_realistic_v4',
    'phase1_2018_realistic_rd': '113X_upgrade2018_realistic_RD_v2',
    'phase1_2018_realistic_hi': '113X_upgrade2018_realistic_HI_v4',
    'phase1_2018_realistic_HEfail': '113X_upgrade2018_realistic_HEfail_v4',
    'phase1_2018_cosmics'     : '113X_upgrade2018cosmics_realistic_deco_v4',
    'phase1_2018_cosmics_peak': '113X_upgrade2018cosmics_realistic_peak_v4',
    'phase1_2021_design'      : '113X_mcRun3_2021_design_v5',
    'phase1_2021_realistic'   : '113X_mcRun3_2021_realistic_v7',
    'phase1_2021_cosmics'     : '113X_mcRun3_2021cosmics_realistic_deco_v6',
    'phase1_2021_realistic_hi': '113X_mcRun3_2021_realistic_HI_v5',
    'phase1_2023_realistic'   : '113X_mcRun3_2023_realistic_v5',
    'phase1_2024_realistic'   : '113X_mcRun3_2024_realistic_v5',
    'phase2_realistic'        : '113X_mcRun4_realistic_v3'
}
```"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '112X_mc2017_design_v4',
'phase1_2017_realistic'    :  '112X_mc2017_realistic_v6',
'phase1_2017_cosmics'      :  '112X_mc2017cosmics_realistic_deco_v6',
'phase1_2017_cosmics_peak' :  '112X_mc2017cosmics_realistic_peak_v6',
'phase1_2018_design'       :  '112X_upgrade2018_design_v6',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v9',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v9',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v9',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v9',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v9',
'phase1_2021_design'       : '112X_mcRun3_2021_design_v14', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v17', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v17',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v17',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v17', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v17', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"Recom
PRs: 32959, 33011"
-------------------------------------------------------------------------
=========================================================================
"run2_nanoAOD_102Xv1.toModify( jetTable.variables, puId = Var(""userInt('pileupJetId:fullId')"",int,doc=""Pileup ID flags for pre-UL trainings"") )
run2_jme_2016.toModify( jetTable.variables, puId = Var(""userInt('pileupJetId:fullId')"",int,doc=""Pileup ID flags for pre-UL trainings""))
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='puId106XUL18Disc', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='pileupJetId106XUL18:fullDiscriminant')], keywords=[])], ctx=Load()))
- Assign(targets=[Name(id='puId106XUL18Id', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='pileupJetId106XUL18:fullId')], keywords=[])], ctx=Load()))
- Expr(value=Call(func=Attribute(value=Name(id='run2_jme_2018', ctx=Load()), attr='toModify', ctx=Load()), args=[Attribute(value=Name(id='jetTable', ctx=Load()), attr='variables', ctx=Load())], keywords=[keyword(arg='puIdDisc', value=Call(func=Name(id='Var', ctx=Load()), args=[Constant(value=""userFloat('puId106XUL18Disc')""), Name(id='float', ctx=Load())], keywords=[keyword(arg='doc', value=Constant(value='Pileup ID discriminant with 106X (2017) training')), keyword(arg='precision', value=Constant(value=10))]))])
- ImportFrom(module='RecoJets.JetProducers.PileupJetID_cfi', names=[alias(name='pileupJetId'), alias(name='_chsalgos_94x'), alias(name='_chsalgos_102x'), alias(name='_chsalgos_106X_UL17'), alias(name='_chsalgos_106X_UL18')], level=0)
- Assign(targets=[Name(id='pileupJetId106XUL18', ctx=Store())], value=Call(func=Attribute(value=Name(id='pileupJetId', ctx=Load()), attr='clone', ctx=Load()), args=[], keywords=[keyword(arg='jets', value=Constant(value='updatedJets')), keyword(arg='algos', value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='VPSet', ctx=Load()), args=[Name(id='_chsalgos_106X_UL18', ctx=Load())], keywords=[])), keyword(arg='inputIsCorrected', value=Constant(value=True)), keyword(arg='applyJec', value=Constant(value=False)), keyword(arg='vertexes', value=Constant(value='offlineSlimmedPrimaryVertices'))])
- Assign(targets=[Name(id='jetSequence', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[Name(id='jetCorrFactorsNanoupdatedJetstightJetIdtightJetIdLepVetobJetVarsqgtaggerjercVarspileupJetId94XpileupJetId102XpileupJetId106XUL17pileupJetId106XUL87updatedJetsWithUserDatajetCorrFactorsAK8updatedJetsAK8tightJetIdAK8tightJetIdLepVetoAK8updatedJetsAK8WithUserDatachsForSATkJetssoftActivityJetssoftActivityJets2softActivityJets5softActivityJets10finalJetsfinalJetsAK8', ctx=Load())], keywords=[])
- Assign(targets=[Name(id='puIdDisc', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='Var', ctx=Load()), args=[Constant(value=""userFloat('puId106XUL18Disc')""), Name(id='float', ctx=Load())], keywords=[keyword(arg='doc', value=Constant(value='Pileup ID discriminant with 106X (2018) training')), keyword(arg='precision', value=Constant(value=10))])], ctx=Load())
- ImportFrom(module='RecoJets.JetProducers.PileupJetID_cfi', names=[alias(name='pileupJetId'), alias(name='_chsalgos_94x'), alias(name='_chsalgos_102x'), alias(name='_chsalgos_106X_UL17'), alias(name='_chsalgos_106X_UL18')], level=0)
- Assign(targets=[Name(id='pileupJetId106XUL18', ctx=Store())], value=Call(func=Attribute(value=Name(id='pileupJetId', ctx=Load()), attr='clone', ctx=Load()), args=[], keywords=[keyword(arg='jets', value=Constant(value='updatedJets')), keyword(arg='algos', value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='VPSet', ctx=Load()), args=[Name(id='_chsalgos_106X_UL18', ctx=Load())], keywords=[])), keyword(arg='inputIsCorrected', value=Constant(value=True)), keyword(arg='applyJec', value=Constant(value=False)), keyword(arg='vertexes', value=Constant(value='offlineSlimmedPrimaryVertices'))])
- Assign(targets=[Name(id='jetSequence', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[Name(id='jetCorrFactorsNanoupdatedJetstightJetIdtightJetIdLepVetobJetVarsqgtaggerjercVarspileupJetId94XpileupJetId102XpileupJetId106XUL17pileupJetId106XUL87updatedJetsWithUserDatajetCorrFactorsAK8updatedJetsAK8tightJetIdAK8tightJetIdLepVetoAK8updatedJetsAK8WithUserDatachsForSATkJetssoftActivityJetssoftActivityJets2softActivityJets5softActivityJets10finalJetsfinalJetsAK8', ctx=Load())], keywords=[])
- Assign(targets=[Name(id='puIdDisc', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='Var', ctx=Load()), args=[Constant(value=""userFloat('puId106XUL18Disc')""), Name(id='float', ctx=Load())], keywords=[keyword(arg='doc', value=Constant(value='Pileup ID discriminant with 106X (2018) training')), keyword(arg='precision', value=Constant(value=10))])], ctx=Load())
- ImportFrom(module='RecoJets.JetProducers.PileupJetID_cfi', names=[alias(name='pileupJetId'), alias(name='_chsalgos_94x'), alias(name='_chsalgos_102x'), alias(name='_chsalgos_106X_UL17'), alias(name='_chsalgos_106X_UL18')], level=0)
- Assign(targets=[Name(id='pileupJetId106XUL18', ctx=Store())], value=Call(func=Attribute(value=Name(id='pileupJetId', ctx=Load()), attr='clone', ctx=Load()), args=[], keywords=[keyword(arg='jets', value=Constant(value='updatedJets')), keyword(arg='algos', value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='VPSet', ctx=Load()), args=[Name(id='_chsalgos_106X_UL18', ctx=Load())], keywords=[])), keyword(arg='inputIsCorrected', value=Constant(value=True)), keyword(arg='applyJec', value=Constant(value=False)), keyword(arg='vertexes', value=Constant(value='offlineSlimmedPrimaryVertices'))])
- Assign(targets=[Name(id='jetSequence', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[Name(id='jetCorrFactorsNanoupdatedJetstightJetIdtightJetIdLepVetobJetVarsqgtaggerjercVarspileupJetId94XpileupJetId102XpileupJetId106XUL17pileupJetId106XUL87updatedJetsWithUserDatajetCorrFactorsAK8updatedJetsAK8tightJetIdAK8tightJetIdLepVetoAK8updatedJetsAK8WithUserDatachsForSATkJetssoftActivityJetssoftActivityJets2softActivityJets5softActivityJets10finalJetsfinalJetsAK8', ctx=Load())], keywords=[])"
-------------------------------------------------------------------------
"puId106XUL18Disc = cms.InputTag('pileupJetId106XUL18:fullDiscriminant'),
"
-------------------------------------------------------------------------
"Recom
PRs: 32887, 32995"
-------------------------------------------------------------------------
=========================================================================
"if not self.config.hilton:
    # keep the original Source when running on Hilton
    args.append('--noedsources')
"
-------------------------------------------------------------------------
"```python
if not self.config.hilton:
    # keep the original Source when running on Hilton
    args.append('--noedsources')
```"
-------------------------------------------------------------------------
"if not self.config.hilton:
    # keep the original Source when running on Hilton
    args.append('--noedsources')
"
-------------------------------------------------------------------------
"Recom
PRs: 32961, 32962"
-------------------------------------------------------------------------
=========================================================================
"elif self.config.hilton:
  # do not apply the STORM-specific customisation
  pass
"
-------------------------------------------------------------------------
"```python
elif self.config.type == ""hilton"":
    # do not apply the STORM-specific customisation
    pass
```"
-------------------------------------------------------------------------
"elif self.config.hilton:
  # do not apply the STORM-specific customisation
  pass
"
-------------------------------------------------------------------------
"Recom
PRs: 32961, 32962"
-------------------------------------------------------------------------
=========================================================================
"
"
-------------------------------------------------------------------------
"```python
# customize the configuration according to the options
def customize(self):
    customiseValues = [""dummy"", ""customizeHLTforCMSSW""]
    self.data += ""from ""+customiseValues[0]+"" import ""+customiseValues[1]+""\n""
    self.data += ""process = ""+customiseValues[1]+""(process)\n""
```"
-------------------------------------------------------------------------
"
"
-------------------------------------------------------------------------
"Recom
PRs: 32961, 32962"
-------------------------------------------------------------------------
=========================================================================
"# dummify hltGetConditions in cff's
"
-------------------------------------------------------------------------
"```python
if self.config.fragment:
    self.data += """"""
if 'hltGetConditions' in %(dict)s and 'HLTriggerFirstPath' in %(dict)s :
    %(process)s.hltDummyConditions = cms.EDFilter( ""HLTBool"",
        result = cms.bool( True )
```"
-------------------------------------------------------------------------
"# dummify hltGetConditions in cff's
"
-------------------------------------------------------------------------
"Recom
PRs: 32961, 32962"
-------------------------------------------------------------------------
=========================================================================
"# if not runnign on Hilton, override the ""online"" ShmStreamConsumer output modules with ""offline"" PoolOutputModule's
if not self.config.hilton:
  self.data = re.sub(
    r'\b(process\.)?hltOutput(\w) *= *cms\.OutputModule\( *""ShmStreamConsumer"" *,',
    r'%(process)s.hltOutput\2 = cms.OutputModule( ""PoolOutputModule"",\n    fileName = cms.untracked.string( ""output\2.root"" ),\n    fastCloning = cms.untracked.bool( False ),\n    dataset = cms.untracked.PSet(\n        filterName = cms.untracked.string( """" ),\n        dataTier = cms.untracked.string( ""RAW"" )\n    ),',
    self.data
  )
"
-------------------------------------------------------------------------
"```python
# if not running on Hilton, override the ""online"" ShmStreamConsumer output modules with ""offline"" PoolOutputModule's
if not self.config.hilton:
    self.data = re.sub(
        r'\b(process\.)?hltOutput(\w) *= *cms\.OutputModule\( *""ShmStreamConsumer"" *,',
        r'%(process)s.hltOutput\2 = cms.OutputModule( ""PoolOutputModule"",\n    fileName = cms.untracked.string( ""output\2.root"" ),\n    fastCloning = cms.untracked.bool( False ),\n    dataset = cms.untracked.PSet(\n        filterName = cms.untracked.string( """" ),\n        dataTier = cms.untracked.string( ""RAW"" )\n    ),',
        self.data
    )
```"
-------------------------------------------------------------------------
"# if not runnign on Hilton, override the ""online"" ShmStreamConsumer output modules with ""offline"" PoolOutputModule's
if not self.config.hilton:
  self.data = re.sub(
    r'\b(process\.)?hltOutput(\w) *= *cms\.OutputModule\( *""ShmStreamConsumer"" *,',
    r'%(process)s.hltOutput\2 = cms.OutputModule( ""PoolOutputModule"",\n    fileName = cms.untracked.string( ""output\2.root"" ),\n    fastCloning = cms.untracked.bool( False ),\n    dataset = cms.untracked.PSet(\n        filterName = cms.untracked.string( """" ),\n        dataTier = cms.untracked.string( ""RAW"" )\n    ),',
    self.data
  )
"
-------------------------------------------------------------------------
"Recom
PRs: 32961, 32962"
-------------------------------------------------------------------------
=========================================================================
"%(process)s.MessageLogger.TriggerSummaryProducerAOD = cms.untracked.PSet()
%(process)s.MessageLogger.L1GtTrigReport = cms.untracked.PSet()
%(process)s.MessageLogger.L1TGlobalSummary = cms.untracked.PSet()
%(process)s.MessageLogger.HLTrigReport = cms.untracked.PSet()
%(process)s.MessageLogger.FastReport = cms.untracked.PSet()
%(process)s.MessageLogger.ThroughputService = cms.untracked.PSet()
"
-------------------------------------------------------------------------
"```python
if 'PrescaleService' in process.__dict__:
    # request summary informations from the MessageLogger
    self.data += """"""
    if 'MessageLogger' in %(dict)s:
        %(process)s.MessageLogger.TriggerSummaryProducerAOD = cms.untracked.PSet()
        %(process)s.MessageLogger.L1GtTrigReport = cms.untracked.PSet()
        %(process)s.MessageLogger.L1TGlobalSummary = cms.untracked.PSet()
        %(process)s.MessageLogger.HLTrigReport = cms.untracked.PSet()
        %(process)s.MessageLogger.FastReport = cms.untracked.PSet()
        %(process)s.MessageLogger.ThroughputService = cms.untracked.PSet()
    """"""
```"
-------------------------------------------------------------------------
"
"
-------------------------------------------------------------------------
"Recom
PRs: 32961, 32962"
-------------------------------------------------------------------------
=========================================================================
"if self.config.hilton:
  # use the DAQ source
  return

"
-------------------------------------------------------------------------
"if self.config.hilton:
  # use the DAQ source
  return files"
-------------------------------------------------------------------------
"if self.config.hilton:
  # use the DAQ source
  return

"
-------------------------------------------------------------------------
"Recom
PRs: 32961, 32962"
-------------------------------------------------------------------------
=========================================================================
"run2_nanoAOD_102Xv1.toModify( jetTable.variables, puId = Var(""userInt('pileupJetId:fullId')"",int,doc=""Pileup ID flags for pre-UL trainings"") )
run2_jme_2016.toModify( jetTable.variables, puId = Var(""userInt('pileupJetId:fullId')"",int,doc=""Pileup ID flags for pre-UL trainings""))
"
-------------------------------------------------------------------------
"- run2_nanoAOD_102Xv1.toModify(jetTable.variables, puId = Var(""userInt('puId106XUL18Id')"", int, doc=""Pileup ID flags for pre-UL trainings""))
- run2_jme_2016.toModify(jetTable.variables, puId = Var(""userInt('puId106XUL18Id')"", int, doc=""Pileup ID flags for pre-UL trainings""))"
-------------------------------------------------------------------------
"( (run2_nanoAOD_106Xv1 & ~run2_nanoAOD_devel) | run2_nanoAOD_102Xv1 ).toModify( jetTable.variables, puIdDisc = Var(""userFloat('puId102XDisc')"",float,doc=""Pileup ID discriminant with 102X (2018) training"", precision=10)  )
( (run2_nanoAOD_106Xv1 & ~run2_nanoAOD_devel) | run2_nanoAOD_102Xv1 ).toModify( jetTable.variables, puId = Var(""userInt('pileupJetId:fullId')"",int,doc=""Pileup ID flags for pre-UL trainings"")  )
"
-------------------------------------------------------------------------
"Recom
PRs: 32887, 32951"
-------------------------------------------------------------------------
=========================================================================
"nConstituents = Var(""numberOfDaughters()"",""uint8"",doc=""Number of particles in the jet""),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='nConstituents', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='Var', ctx=Load()), args=[Constant(value='numberOfDaughters()'), Constant(value='uint8')], keywords=[keyword(arg='doc', value=Constant(value='Number of particles in the jet'))])], ctx=Load()))"
-------------------------------------------------------------------------
"nConstituents = Var(""numberOfDaughters()"",""uint8"",doc=""Number of particles in the jet""),
"
-------------------------------------------------------------------------
"Recom
PRs: 32927, 32928"
-------------------------------------------------------------------------
=========================================================================
"nConstituents = Var(""numberOfDaughters()"",""uint8"",doc=""Number of particles in the jet""),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='nConstituents', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='Var', ctx=Load()), args=[Constant(value='numberOfDaughters()'), Constant(value='uint8')], keywords=[keyword(arg='doc', value=Constant(value='Number of particles in the jet'))])], ctx=Load())"
-------------------------------------------------------------------------
"nConstituents = Var(""numberOfDaughters()"",""uint8"",doc=""Number of particles in the jet""),
"
-------------------------------------------------------------------------
"Recom
PRs: 32927, 32928"
-------------------------------------------------------------------------
=========================================================================
"Plot1D('nConstituents', 'nConstituents', 20, 0, 80, 'Number of particles in the jet'),
"
-------------------------------------------------------------------------
"Expr(value=Tuple(elts=[Call(func=Name(id='Plot1D', ctx=Load()), args=[Constant(value='nConstituents'), Constant(value='nConstituents'), Constant(value=20), Constant(value=0), Constant(value=80), Constant(value='Number of particles in the jet')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"Plot1D('nConstituents', 'nConstituents', 20, 0, 80, 'Number of particles in the jet'),
"
-------------------------------------------------------------------------
"Recom
PRs: 32927, 32928"
-------------------------------------------------------------------------
=========================================================================
"# case insensitive sort by subfolder and module name
parts = sorted(parts.items(), key = lambda nsc: (nsc[1][0].lower() if nsc[1][0] else '', nsc[0].lower()))

for (name, (subfolder, code)) in parts:
"
-------------------------------------------------------------------------
"```python
parts = sorted(parts.items(), key=lambda nsc: (nsc[1][0].lower() if nsc[1][0] else '', nsc[0].lower()))

for name, (subfolder, code) in parts:
```"
-------------------------------------------------------------------------
"# case insensitive sort by subfolder and module name
parts = sorted(parts.items(), key = lambda nsc: (nsc[1][0].lower() if nsc[1][0] else '', nsc[0].lower()))

for (name, (subfolder, code)) in parts:
"
-------------------------------------------------------------------------
"Recom
PRs: 32754, 32904"
-------------------------------------------------------------------------
=========================================================================
"result = '\nprocess.schedule = '  self.schedule.dumpPython(options)
"
-------------------------------------------------------------------------
"```python
result = '\nprocess.schedule = ' + self.schedule.dumpPython(options)
```"
-------------------------------------------------------------------------
"result = '\nprocess.schedule = '  self.schedule.dumpPython(options)
"
-------------------------------------------------------------------------
"Recom
PRs: 32754, 32904"
-------------------------------------------------------------------------
=========================================================================
"dependencies = set()
"
-------------------------------------------------------------------------
"dependencies = set()
for item in collection:
            # skip null items
            if item in knownDeps:
                dependencies.add(item)"
-------------------------------------------------------------------------
"dependencies = set()
"
-------------------------------------------------------------------------
"Recom
PRs: 32754, 32904"
-------------------------------------------------------------------------
=========================================================================
"dependencies.update(item.directDependencies())
ndencies.update(item.directDependencies())
dependencies.update(item.directDependencies())
dependencies.update(item.directDependencies())
"
-------------------------------------------------------------------------
"```python
dependencies.update(item.directDependencies().dependencies)
dependencies.update(item.directDependencies().dependencies)
dependencies.update(item.directDependencies().dependencies)
dependencies.update(item.directDependencies().dependencies)
```"
-------------------------------------------------------------------------
"dependencies.update(item.directDependencies())
ndencies.update(item.directDependencies())
dependencies.update(item.directDependencies())
dependencies.update(item.directDependencies())
"
-------------------------------------------------------------------------
"Recom
PRs: 32754, 32904"
-------------------------------------------------------------------------
=========================================================================
"dependencies.add((t, item.label_()))
rn sorted(dependencies, key = lambda t_item: (t_item[0].lower(), t_item[1].lower().replace('_cfi', '')))
"
-------------------------------------------------------------------------
"```python
dependencies.add((t, item.label_()))
sorted_dependencies = sorted(dependencies, key=lambda t_item: (t_item[0].lower(), t_item[1].lower().replace('_cfi', '')))
```"
-------------------------------------------------------------------------
"dependencies.add((t, item.label_()))
rn sorted(dependencies, key = lambda t_item: (t_item[0].lower(), t_item[1].lower().replace('_cfi', '')))
"
-------------------------------------------------------------------------
"Recom
PRs: 32754, 32904"
-------------------------------------------------------------------------
=========================================================================
"# GlobalTag for MC production (2015 L1 Trigger Stage1) with startup-like alignment and calibrations for Run2, L1 trigger in Stage1 mode
"
-------------------------------------------------------------------------
"autoCond = {
     'run1_mc_pa'        :   '113X_mcRun1_pA_v1',
     'run2_mc_50ns'      :   '113X_mcRun2_startup_v1',  # GlobalTag for MC production (2015 L1 Trigger Stage1) with startup-like alignment and calibrations for Run2, L1 trigger in Stage1 mode
     'run2_mc_l1stage1'  :   '113X_mcRun2_asymptotic_l1stage1_v2',
     'run2_design'       :   '113X_mcRun2_design_v2',
}"
-------------------------------------------------------------------------
"'run2_mc_l1stage1'  :   '112X_mcRun2_asymptotic_l1stage1_v2',
'run2_design'       :   '112X_mcRun2_design_v2',
'run2_mc_pre_vfp'   :   '112X_mcRun2_asymptotic_preVFP_v3',
'run2_mc'           :   '112X_mcRun2_asymptotic_v3',
'run2_mc_cosmics'   :   '112X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'        :   '112X_mcRun2_HeavyIon_v2',
'run2_mc_pa'        :   '112X_mcRun2_pA_v2',
'run1_data'         :   '112X_dataRun2_v8',
'run2_data'         :   '112X_dataRun2_v8',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v8',
'run2_data_relval'  :   '112X_dataRun2_relval_v8',
'run2_data_promptlike_hi' : '112X_dataRun2_PromptLike_HI_v6',
'run2_hlt_relval'      :   '112X_dataRun2_HLT_relval_v3',
'run2_hlt_relval_hi'   :   '112X_dataRun2_HLT_relval_HI_v2',
'run3_data_express'        :   '112X_dataRun3_Express_v2',
'run3_data_promptlike'     :   '112X_dataRun3_Prompt_v2',
'phase1_2017_design'       :  '112X_mc2017_design_v3',
'phase1_2017_realistic'    :  '112X_mc2017_realistic_v5',
'phase1_2017_cosmics'      :  '112X_mc2017cosmics_realistic_deco_v5',
'phase1_2017_cosmics_peak' :  '112X_mc2017cosmics_realistic_peak_v5',
'phase1_2018_design'       :  '112X_upgrade2018_design_v5',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v8',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v8',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v8',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v8',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v8',
'phase1_2021_design'       : '112X_mcRun3_2021_design_v13', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v16', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v16',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v16',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v16', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v16', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '112X_mcRun4_realistic_v6'
"
-------------------------------------------------------------------------
"Recom
PRs: 32758, 32772"
-------------------------------------------------------------------------
=========================================================================
"result = options.indentation()  ""_external_process_waitTime_ = ""  self._external_process_waitTime_.dumpPython(options)  ',\n'
result = options.indentation()  ""_external_process_verbose_ = ""  self._external_process_verbose_.dumpPython(options)  ','
"
-------------------------------------------------------------------------
"result += options.indentation() + ""_external_process_waitTime_ = "" + self._external_process_waitTime_.dumpPython(options) + "",\n""
result += options.indentation() + ""_external_process_verbose_ = "" + self._external_process_verbose_.dumpPython(options) + "","""
-------------------------------------------------------------------------
"result = options.indentation()  ""_external_process_waitTime_ = ""  self._external_process_waitTime_.dumpPython(options)  ',\n'
result = options.indentation()  ""_external_process_verbose_ = ""  self._external_process_verbose_.dumpPython(options)  ','
"
-------------------------------------------------------------------------
"Recom
PRs: 32636, 32639"
-------------------------------------------------------------------------
=========================================================================
"result = options.indentation()  ""_external_process_waitTime_ = ""  self._external_process_waitTime_.dumpPython(options)  ',\n'
result = options.indentation()  ""_external_process_verbose_ = ""  self._external_process_verbose_.dumpPython(options)  ','
"
-------------------------------------------------------------------------
"result += options.indentation() + ""_external_process_waitTime_ = "" + self._external_process_waitTime_.dumpPython(options) + "",\n""
result += options.indentation() + ""_external_process_verbose_ = "" + self._external_process_verbose_.dumpPython(options) + "","""
-------------------------------------------------------------------------
"result = options.indentation()  ""_external_process_waitTime_ = ""  self._external_process_waitTime_.dumpPython(options)  ',\n'
result = options.indentation()  ""_external_process_verbose_ = ""  self._external_process_verbose_.dumpPython(options)  ','
"
-------------------------------------------------------------------------
"Recom
PRs: 32636, 32638"
-------------------------------------------------------------------------
=========================================================================
"result = options.indentation()  ""_external_process_waitTime_ = ""  self._external_process_waitTime_.dumpPython(options)  ',\n'
result = options.indentation()  ""_external_process_verbose_ = ""  self._external_process_verbose_.dumpPython(options)  ','
"
-------------------------------------------------------------------------
"result += options.indentation() + ""_external_process_waitTime_ = "" + self._external_process_waitTime_.dumpPython(options) + "",\n""
result += options.indentation() + ""_external_process_verbose_ = "" + self._external_process_verbose_.dumpPython(options) + "","""
-------------------------------------------------------------------------
"result = options.indentation()  ""_external_process_waitTime_ = ""  self._external_process_waitTime_.dumpPython(options)  ',\n'
result = options.indentation()  ""_external_process_verbose_ = ""  self._external_process_verbose_.dumpPython(options)  ','
"
-------------------------------------------------------------------------
"Recom
PRs: 32636, 32637"
-------------------------------------------------------------------------
=========================================================================
"'run1_design'       :   '106X_mcRun1_design_v4',
'run1_mc'           :   '106X_mcRun1_realistic_v4',
'run1_mc_hi'        :   '106X_mcRun1_HeavyIon_v4',
'run1_mc_pa'        :   '106X_mcRun1_pA_v4',
'run2_mc_50ns'      :   '106X_mcRun2_startup_v5',
'run2_mc_l1stage1'  :   '106X_mcRun2_asymptotic_l1stage1_v5',
'run2_design'       :   '106X_mcRun2_design_v8',
'run2_mc_pre_vfp'   :   '106X_mcRun2_asymptotic_preVFP_v10',
'run2_mc'           :   '106X_mcRun2_asymptotic_v16',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'        :   '106X_mcRun2_HeavyIon_v5',
'run2_mc_pa'        :   '106X_mcRun2_pA_v6',
'run1_data'         :   '106X_dataRun2_v33',
'run2_data'         :   '106X_dataRun2_v33',
'run2_data_relval'  :   '106X_dataRun2_relval_v31',
'run2_data_promptlike_HEfail' : '106X_dataRun2_PromptLike_HEfail_v14',
'run2_data_promptlike'    : '106X_dataRun2_PromptLike_v15',
'run2_data_promptlike_hi' : '106X_dataRun2_PromptLike_HI_v15',
"
-------------------------------------------------------------------------
"autoCond = { 
     ### NEW KEYS ###
     # GlobalTag for MC production with perfectly aligned and calibrated detector for Run1
     # GlobalTag for MC production (pp collisions) with realistic alignment and calibrations for Run1
     # GlobalTag for MC production (Heavy Ions collisions) with realistic alignment and calibrations for Run1
     # GlobalTag for MC production (p-Pb collisions) with realistic alignment and calibrations for Run1
     # GlobalTag for MC production with pessimistic alignment and calibrations for Run2
     # GlobalTag for MC production (L1 Trigger Stage1) with starup-like alignment and calibrations for Run2, L1 trigger in Stage1 mode
     # GlobalTag for MC production with perfectly aligned and calibrated detector for Run2
     #GlobalTag for MC production with optimistic alignment and calibrations for 2016, prior to VFP change
     #GlobalTag for MC production with optimistic alignment and calibrations for 2016, after VFP change
     # GlobalTag for MC production (cosmics) with starup-like alignment and calibrations for Run2, Strip tracker in peak mode
     # GlobalTag for MC production (Heavy Ions collisions) with optimistic alignment and calibrations for Run2
     # GlobalTag for MC production (p-Pb collisions) with realistic alignment and calibrations for Run2
     # GlobalTag for Run1 data reprocessing
     # GlobalTag for Run2 data reprocessing
     # GlobalTag for Run2 data relvals: allows customization to run with fixed L1 menu
     # GlobalTag for Run2 data 2018B relvals only: HEM-15-16 fail
     # GlobalTag for Run2 data 2016H relvals only: Prompt Conditions + fixed L1 menu (to be removed)
     # GlobalTag for Run1 HLT: it points to the online GT
     # GlobalTag for Run2 HLT: it points to the online GT
     
     'run1_hlt'          :   '101X_dataRun2_HLT_frozen_v9',
     'run1_design'       :   '106X_mcRun1_design_v4',
     'run1_mc'           :   '106X_mcRun1_realistic_v4',
     'run1_mc_hi'        :   '106X_mcRun1_HeavyIon_v4',
     'run1_mc_pa'        :   '106X_mcRun1_pA_v4',
     'run2_mc_50ns'      :   '106X_mcRun2_startup_v5',
     'run2_mc_l1stage1'  :   '106X_mcRun2_asymptotic_l1stage1_v5',
     'run2_design'       :   '106X_mcRun2_design_v8',
     'run2_mc_pre_vfp'   :   '106X_mcRun2_asymptotic_preVFP_v10',
     'run2_mc'           :   '106X_mcRun2_asymptotic_v16',
     'run2_mc_cosmics'   :   '106X_mcRun2cosmics_asymptotic_deco_v3',
     'run2_mc_hi'        :   '106X_mcRun2_HeavyIon_v5',
     'run2_mc_pa'        :   '106X_mcRun2_pA_v6',
     'run1_data'         :   '106X_dataRun2_v33',
     'run2_data'         :   '106X_dataRun2_v33',
     'run2_data_relval'  :   '106X_dataRun2_relval_v31',
     'run2_data_promptlike_HEfail' : '106X_dataRun2_PromptLike_HEfail_v14',
     'run2_data_promptlike'    : '106X_dataRun2_PromptLike_v15',
     'run2_data_promptlike_hi' : '106X_dataRun2_PromptLike_HI_v15',
}"
-------------------------------------------------------------------------
"'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v5',
"
-------------------------------------------------------------------------
"Recom
PRs: 32435, 32581"
-------------------------------------------------------------------------
=========================================================================
"'run1_design'       :   '106X_mcRun1_design_v4',
'run1_mc'           :   '106X_mcRun1_realistic_v4',
'run1_mc_hi'        :   '106X_mcRun1_HeavyIon_v4',
'run1_mc_pa'        :   '106X_mcRun1_pA_v4',
'run2_mc_50ns'      :   '106X_mcRun2_startup_v5',
'run2_mc_l1stage1'  :   '106X_mcRun2_asymptotic_l1stage1_v5',
'run2_design'       :   '106X_mcRun2_design_v8',
'run2_mc_pre_vfp'   :   '106X_mcRun2_asymptotic_preVFP_v10',
'run2_mc'           :   '106X_mcRun2_asymptotic_v16',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'        :   '106X_mcRun2_HeavyIon_v5',
'run2_mc_pa'        :   '106X_mcRun2_pA_v6',
'run1_data'         :   '106X_dataRun2_v33',
'run2_data'         :   '106X_dataRun2_v33',
'run2_data_relval'  :   '106X_dataRun2_relval_v31',
'run2_data_promptlike_HEfail' : '106X_dataRun2_PromptLike_HEfail_v14',
'run2_data_promptlike'    : '106X_dataRun2_PromptLike_v15',
'run2_data_promptlike_hi' : '106X_dataRun2_PromptLike_HI_v15',
"
-------------------------------------------------------------------------
"'run1_design'       :   '106X_mcRun1_design_v4',
'run1_mc'           :   '106X_mcRun1_realistic_v4',
'run1_mc_hi'        :   '106X_mcRun1_HeavyIon_v4',
'run1_mc_pa'        :   '106X_mcRun1_pA_v4',
'run2_mc_50ns'      :   '106X_mcRun2_startup_v5',
'run2_mc_l1stage1'  :   '106X_mcRun2_asymptotic_l1stage1_v5',
'run2_design'       :   '106X_mcRun2_design_v8',
'run2_mc_pre_vfp'   :   '106X_mcRun2_asymptotic_preVFP_v10',
'run2_mc'           :   '106X_mcRun2_asymptotic_v16',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'        :   '106X_mcRun2_HeavyIon_v5',
'run2_mc_pa'        :   '106X_mcRun2_pA_v6',
'run1_data'         :   '106X_dataRun2_v33',
'run2_data'         :   '106X_dataRun2_v33',
'run2_data_relval'  :   '106X_dataRun2_relval_v31',
'run2_data_promptlike_HEfail' : '106X_dataRun2_PromptLike_HEfail_v14',
'run2_data_promptlike'    : '106X_dataRun2_PromptLike_v15',
'run2_data_promptlike_hi' : '106X_dataRun2_PromptLike_HI_v15',"
-------------------------------------------------------------------------
"'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v5',
"
-------------------------------------------------------------------------
"Recom
PRs: 32435, 32580"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2017_design'       :  '113X_mc2017_design_v2',
'phase1_2017_realistic'    :  '113X_mc2017_realistic_v2',
'phase1_2017_cosmics'      :  '113X_mc2017cosmics_realistic_deco_v2',
'phase1_2017_cosmics_peak' :  '113X_mc2017cosmics_realistic_peak_v2',
'phase1_2018_design'       :  '113X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '113X_upgrade2018_realistic_v2',
'phase1_2018_realistic_hi' :  '113X_upgrade2018_realistic_HI_v2',
'phase1_2018_realistic_HEfail' :  '113X_upgrade2018_realistic_HEfail_v2',
'phase1_2018_cosmics'      :  '113X_upgrade2018cosmics_realistic_deco_v2',
'phase1_2018_cosmics_peak' :  '113X_upgrade2018cosmics_realistic_peak_v2',
'phase1_2021_design'       : '113X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '113X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '113X_mcRun3_2021cosmics_realistic_deco_v3',
'phase1_2021_realistic_hi' : '113X_mcRun3_2021_realistic_HI_v2',
'phase1_2023_realistic'    : '113X_mcRun3_2023_realistic_v2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '113X_mcRun3_2024_realistic_v2', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '113X_mcRun4_realistic_v2'
"
-------------------------------------------------------------------------
"autoCond = {
     # GlobalTag for Run3 data relvals
     'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v5',
     # GlobalTag for MC production with perfectly aligned and calibrated detector for Phase1 2017 (and 0,0,~0-centred beamspot)
     'phase1_2017_design'       :  '113X_mc2017_design_v3',
     'phase1_2017_realistic'    :  '113X_mc2017_realistic_v3',
     'phase1_2017_cosmics'      :  '113X_mc2017cosmics_realistic_deco_v2',
     'phase1_2017_cosmics_peak' :  '113X_mc2017cosmics_realistic_peak_v2',
     'phase1_2018_design'       :  '113X_upgrade2018_design_v3',
     'phase1_2018_realistic'    :  '113X_upgrade2018_realistic_v3',
     'phase1_2018_realistic_hi' :  '113X_upgrade2018_realistic_HI_v2',
     'phase1_2018_realistic_HEfail' :  '113X_upgrade2018_realistic_HEfail_v3',
     'phase1_2018_cosmics'      :  '113X_upgrade2018cosmics_realistic_deco_v3',
     'phase1_2018_cosmics_peak' :  '113X_upgrade2018cosmics_realistic_peak_v3',
     'phase1_2021_design'       : '113X_mcRun3_2021_design_v8', # GT containing design conditions for Phase1 2021
     'phase1_2021_realistic'    : '113X_mcRun3_2021_realistic_v8', # GT containing realistic conditions for Phase1 2021
     'phase1_2021_cosmics'      : '113X_mcRun3_2021cosmics_realistic_deco_v8',
     'phase1_2021_realistic_hi' : '113X_mcRun3_2021_realistic_HI_v10',
     'phase1_2023_realistic'    : '113X_mcRun3_2023_realistic_v7', # GT containing realistic conditions for Phase1 2023
     'phase1_2024_realistic'    : '113X_mcRun3_2024_realistic_v7', # GT containing realistic conditions for Phase1 2024
     'phase2_realistic'         : '113X_mcRun4_realistic_T15_v3'
 }
 
aliases = {
Required dependency: Configuration.AlCa.autoCondPhase2, Configuration.HLT.autoCondHLT,
Original metadata: Use correct L1TMuonEndCapParams tag for 2017, 2018, Run 3 and Phase 2 MC [11_1_X]"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '111X_mc2017_design_v3',
'phase1_2017_realistic'    :  '111X_mc2017_realistic_v3',
'phase1_2017_cosmics'      :  '111X_mc2017cosmics_realistic_deco_v2',
'phase1_2017_cosmics_peak' :  '111X_mc2017cosmics_realistic_peak_v2',
'phase1_2018_design'       :  '111X_upgrade2018_design_v3',
'phase1_2018_realistic'    :  '111X_upgrade2018_realistic_v3',
'phase1_2018_realistic_hi' :  '111X_upgrade2018_realistic_HI_v2',
'phase1_2018_realistic_HEfail' :  '111X_upgrade2018_realistic_HEfail_v3',
'phase1_2018_cosmics'      :   '111X_upgrade2018cosmics_realistic_deco_v3',
'phase1_2018_cosmics_peak' :   '111X_upgrade2018cosmics_realistic_peak_v3',
'phase1_2021_design'       : '111X_mcRun3_2021_design_v8', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '111X_mcRun3_2021_realistic_v8', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '111X_mcRun3_2021cosmics_realistic_deco_v8',
'phase1_2021_realistic_hi' : '111X_mcRun3_2021_realistic_HI_v10',
'phase1_2023_realistic'    : '111X_mcRun3_2023_realistic_v7', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '111X_mcRun3_2024_realistic_v7', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '111X_mcRun4_realistic_T15_v3'
"
-------------------------------------------------------------------------
"Recom
PRs: 32513, 32533"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2017_design'       :  '113X_mc2017_design_v2',
'phase1_2017_realistic'    :  '113X_mc2017_realistic_v2',
'phase1_2017_cosmics'      :  '113X_mc2017cosmics_realistic_deco_v2',
'phase1_2017_cosmics_peak' :  '113X_mc2017cosmics_realistic_peak_v2',
'phase1_2018_design'       :  '113X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '113X_upgrade2018_realistic_v2',
'phase1_2018_realistic_hi' :  '113X_upgrade2018_realistic_HI_v2',
'phase1_2018_realistic_HEfail' :  '113X_upgrade2018_realistic_HEfail_v2',
'phase1_2018_cosmics'      :  '113X_upgrade2018cosmics_realistic_deco_v2',
'phase1_2018_cosmics_peak' :  '113X_upgrade2018cosmics_realistic_peak_v2',
'phase1_2021_design'       : '113X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '113X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '113X_mcRun3_2021cosmics_realistic_deco_v3',
'phase1_2021_realistic_hi' : '113X_mcRun3_2021_realistic_HI_v2',
'phase1_2023_realistic'    : '113X_mcRun3_2023_realistic_v2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '113X_mcRun3_2024_realistic_v2', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '113X_mcRun4_realistic_v2'
"
-------------------------------------------------------------------------
"autoCond = {
     # GlobalTag for Run3 data relvals
     'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v5',
     # GlobalTag for MC production with perfectly aligned and calibrated detector for Phase1 2017 (and 0,0,~0-centred beamspot)
     'phase1_2017_design'       :  '113X_mc2017_design_v2',
     # GlobalTag for MC production with realistic conditions for Phase1 2017 detector
     'phase1_2017_realistic'    :  '113X_mc2017_realistic_v2',
     # GlobalTag for MC production (cosmics) with realistic alignment and calibrations for Phase1 2017 detector, Strip tracker in DECO mode
     'phase1_2017_cosmics'      :  '113X_mc2017cosmics_realistic_deco_v2',
     # GlobalTag for MC production (cosmics) with realistic alignment and calibrations for Phase1 2017 detector, Strip tracker in PEAK mode
     'phase1_2017_cosmics_peak' :  '113X_mc2017cosmics_realistic_peak_v2',
     # GlobalTag for MC production with perfectly aligned and calibrated detector for full Phase1 2018 (and 0,0,0-centred beamspot)
     'phase1_2018_design'       :  '113X_upgrade2018_design_v2',
     # GlobalTag for MC production with realistic conditions for full Phase1 2018 detector
     'phase1_2018_realistic'    :  '113X_upgrade2018_realistic_v2',
     # GlobalTag for MC production with realistic conditions for full Phase1 2018 detector for Heavy Ion
     'phase1_2018_realistic_hi' :  '113X_upgrade2018_realistic_HI_v2',
     # GlobalTag for MC production with realistic conditions for full Phase1 2018 detector: HEM-15-16 fail
     'phase1_2018_realistic_HEfail' :  '113X_upgrade2018_realistic_HEfail_v2',
     # GlobalTag for MC production (cosmics) with realistic conditions for full Phase1 2018 detector,  Strip tracker in DECO mode
     'phase1_2018_cosmics'      :  '113X_upgrade2018cosmics_realistic_deco_v2',
     # GlobalTag for MC production (cosmics) with realistic conditions for full Phase1 2018 detector,  Strip tracker in PEAK mode
     'phase1_2018_cosmics_peak' :  '113X_upgrade2018cosmics_realistic_peak_v2',
     # GlobalTag for MC production with perfectly aligned and calibrated detector for Phase1 2021
     'phase1_2021_design'       : '113X_mcRun3_2021_design_v2',
     # GlobalTag for MC production with realistic conditions for Phase1 2021
     'phase1_2021_realistic'    : '113X_mcRun3_2021_realistic_v2',
     # GlobalTag for MC production (cosmics) with realistic conditions for Phase1 2021,  Strip tracker in DECO mode
     'phase1_2021_cosmics'      : '113X_mcRun3_2021cosmics_realistic_deco_v3',
     # GlobalTag for MC production with realistic conditions for Phase1 2021 detector for Heavy Ion
     'phase1_2021_realistic_hi' : '113X_mcRun3_2021_realistic_HI_v2',
     # GlobalTag for MC production with realistic conditions for Phase1 2023
     'phase1_2023_realistic'    : '113X_mcRun3_2023_realistic_v2',
     # GlobalTag for MC production with realistic conditions for Phase1 2024
     'phase1_2024_realistic'    : '113X_mcRun3_2024_realistic_v2',
     # GlobalTag for MC production with realistic conditions for Phase2
     'phase2_realistic'         : '113X_mcRun4_realistic_v2'
 }
 
 aliases = {
Required dependency: Configuration.AlCa.autoCondModifiers, Configuration.AlCa.autoCondPhase2, Configuration.HLT.autoCondHLT, 
Original metadata: Use correct L1TMuonEndCapParams tag for 2017, 2018, Run 3 and Phase 2 MC [11_2_X]"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '112X_mc2017_design_v2',
'phase1_2017_realistic'    :  '112X_mc2017_realistic_v4',
'phase1_2017_cosmics'      :  '112X_mc2017cosmics_realistic_deco_v4',
'phase1_2017_cosmics_peak' :  '112X_mc2017cosmics_realistic_peak_v4',
'phase1_2018_design'       :  '112X_upgrade2018_design_v4',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v7',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v7',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v7',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v7',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v7',
'phase1_2021_design'       : '112X_mcRun3_2021_design_v12', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v14', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v14',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v14',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v14', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v14', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '112X_mcRun4_realistic_v5'
"
-------------------------------------------------------------------------
"Recom
PRs: 32513, 32532"
-------------------------------------------------------------------------
=========================================================================
"'run2_data_promptlike_hi' : '112X_dataRun2_PromptLike_HI_v5',
"
-------------------------------------------------------------------------
"autoCond = {
     'run2_data_promptlike_hi'  :   '112X_dataRun2_PromptLike_HI_v5',
     'run1_hlt'          :   '101X_dataRun2_HLT_frozen_v11',
}"
-------------------------------------------------------------------------
"'run2_data_promptlike_hi' : '112X_dataRun2_PromptLike_HI_v5',
"
-------------------------------------------------------------------------
"Recom
PRs: 32375, 32453"
-------------------------------------------------------------------------
=========================================================================
"'run1_design'       :   '113X_mcRun1_design_v1',
'run1_mc'           :   '113X_mcRun1_realistic_v1',
'run1_mc_hi'        :   '113X_mcRun1_HeavyIon_v1',
'run1_mc_pa'        :   '113X_mcRun1_pA_v1',
'run2_mc_50ns'      :   '113X_mcRun2_startup_v1',
'run2_mc_l1stage1'  :   '113X_mcRun2_asymptotic_l1stage1_v1',
'run2_design'       :   '113X_mcRun2_design_v1',
"
-------------------------------------------------------------------------
"'run1_design'       :   '113X_mcRun1_design_v4',
'run1_mc'           :   '113X_mcRun1_realistic_v4',
'run1_mc_hi'        :   '113X_mcRun1_HeavyIon_v4',
'run1_mc_pa'        :   '113X_mcRun1_pA_v4',
'run2_mc_50ns'      :   '113X_mcRun2_startup_v5',
'run2_mc_l1stage1'  :   '113X_mcRun2_asymptotic_l1stage1_v5',
'run2_design'       :   '113X_mcRun2_design_v8',"
-------------------------------------------------------------------------
"'run1_design'       :   '106X_mcRun1_design_v4',
'run1_mc'           :   '106X_mcRun1_realistic_v4',
'run1_mc_hi'        :   '106X_mcRun1_HeavyIon_v4',
'run1_mc_pa'        :   '106X_mcRun1_pA_v4',
'run2_mc_50ns'      :   '106X_mcRun2_startup_v5',
'run2_mc_l1stage1'  :   '106X_mcRun2_asymptotic_l1stage1_v5',
'run2_design'       :   '106X_mcRun2_design_v8',
'run2_mc_pre_vfp'   :   '106X_mcRun2_asymptotic_preVFP_v10',
'run2_mc'           :   '106X_mcRun2_asymptotic_v16',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'        :   '106X_mcRun2_HeavyIon_v5',
'run2_mc_pa'        :   '106X_mcRun2_pA_v6',
'run1_data'         :   '106X_dataRun2_v33',
'run2_data'         :   '106X_dataRun2_v33',
'run2_data_relval'  :   '106X_dataRun2_relval_v31',
'run2_data_promptlike_HEfail' : '106X_dataRun2_PromptLike_HEfail_v14',
'run2_data_promptlike'    : '106X_dataRun2_PromptLike_v15',
'run2_data_promptlike_hi' : '106X_dataRun2_PromptLike_HI_v15',
"
-------------------------------------------------------------------------
"Recom
PRs: 32421, 32435"
-------------------------------------------------------------------------
=========================================================================
"'run2_mc_hi'        :   '113X_mcRun2_HeavyIon_v1',
'run2_mc_pa'        :   '113X_mcRun2_pA_v1',
"
-------------------------------------------------------------------------
"'run2_mc_hi'        :   '113X_mcRun2_HeavyIon_v5',
'run2_mc_pa'        :   '113X_mcRun2_pA_v6',"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '106X_mc2017_design_IdealBS_v6',
'phase1_2017_realistic'    :  '106X_mc2017_realistic_v9',
'phase1_2017_cosmics'      :  '106X_mc2017cosmics_realistic_deco_v4',
'phase1_2017_cosmics_peak' :  '106X_mc2017cosmics_realistic_peak_v4',
'phase1_2018_design'       :  '106X_upgrade2018_design_v8',
'phase1_2018_realistic'    :  '106X_upgrade2018_realistic_v16',
'phase1_2018_realistic_hi' :  '106X_upgrade2018_realistic_HI_v7',
'phase1_2018_realistic_HEfail' :  '106X_upgrade2018_realistic_HEfail_v16',
'phase1_2018_cosmics'      :   '106X_upgrade2018cosmics_realistic_deco_v13',
'phase1_2018_cosmics_peak' :   '106X_upgrade2018cosmics_realistic_peak_v13',
'phase1_2021_design'       : '106X_upgrade2021_design_v6', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '106X_upgrade2021_realistic_v12', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '106X_upgrade2021cosmics_realistic_deco_v5',
'phase2_realistic'         : '106X_upgrade2023_realistic_v6'
"
-------------------------------------------------------------------------
"Recom
PRs: 32421, 32435"
-------------------------------------------------------------------------
=========================================================================
"process.GlobalTag.DBParameters.authenticationPath = cms.untracked.string('.')
"
-------------------------------------------------------------------------
process.GlobalTag.DBParameters.authenticationPath = cms.untracked.string('.')
-------------------------------------------------------------------------
"process.GlobalTag.DBParameters.authenticationPath = cms.untracked.string('.')
"
-------------------------------------------------------------------------
"Recom
PRs: 32408, 32415"
-------------------------------------------------------------------------
=========================================================================
"process.GlobalTag.DBParameters.authenticationPath = cms.untracked.string('.')
"
-------------------------------------------------------------------------
"Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='process', ctx=Load()), attr='GlobalTag', ctx=Load()), attr='DBParameters', ctx=Load()), attr='authenticationPath', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='cms', ctx=Load()), attr='untracked', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='.')], keywords=[]))"
-------------------------------------------------------------------------
"process.GlobalTag.DBParameters.authenticationPath = cms.untracked.string('.')
"
-------------------------------------------------------------------------
"Recom
PRs: 32408, 32415"
-------------------------------------------------------------------------
=========================================================================
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"upgradeWFs['PatatrackPixelOnlyCPU'] = UpgradeWorkflowPatatrack_PixelOnlyCPU(
     steps = [
         'Reco',
         'HARVEST',
         'RecoGlobal',
         'HARVESTGlobal',
         'RecoFakeHLT',
         'HARVESTFakeHLT'
     ],
     dependencies = ['six', 're', 'copy', 'MatrixUtil', 'collections']
)"
-------------------------------------------------------------------------
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"Recom
PRs: 32333, 32350"
-------------------------------------------------------------------------
=========================================================================
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"upgradeWFs['PatatrackPixelOnlyGPU'] = UpgradeWorkflowPatatrack_PixelOnlyGPU(
     steps = [
         'Reco',
         'HARVEST',
         'RecoFakeHLT',
         'HARVESTFakeHLT',
         'RecoGlobal',
         'HARVESTGlobal',
     ],
     dependencies = ['six', 're', 'copy', 'MatrixUtil', 'collections']
)"
-------------------------------------------------------------------------
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"Recom
PRs: 32333, 32350"
-------------------------------------------------------------------------
=========================================================================
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"upgradeWFs['PatatrackECALOnlyCPU'] = UpgradeWorkflowPatatrack_ECALOnlyCPU(
     steps = [
         'Reco',
         'HARVEST',
         'RecoGlobal',
         'HARVESTGlobal',
         'RecoFakeHLT',
         'HARVESTFakeHLT'
     ],
     dependencies = ['six', 're', 'copy', 'MatrixUtil', 'collections']
)"
-------------------------------------------------------------------------
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"Recom
PRs: 32333, 32350"
-------------------------------------------------------------------------
=========================================================================
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"UpgradeWorkflowPatatrackECALOnlyGPU(
    steps = [
        'Reco',
        'HARVEST',
        'RecoGlobal',
        'HARVESTGlobal',
        'RecoFakeHLT',
        'HARVESTFakeHLT'
    ],
    dependencies = [
        'six',
        're',
        'copy',
        'MatrixUtil',
        'collections'
    ],
)"
-------------------------------------------------------------------------
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"Recom
PRs: 32333, 32350"
-------------------------------------------------------------------------
=========================================================================
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"upgradeWFs['PatatrackHCALOnlyCPU'] = UpgradeWorkflowPatatrack_HCALOnlyCPU(
     steps = [
         'RecoFakeHLT',
         'HARVESTFakeHLT',
         'Reco',
         'HARVEST',
         'RecoGlobal',
         'HARVESTGlobal',
     ],"
-------------------------------------------------------------------------
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"Recom
PRs: 32333, 32350"
-------------------------------------------------------------------------
=========================================================================
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"Current context: upgradeWFs['PatatrackHCALOnlyGPU'] = UpgradeWorkflowPatatrack_HCALOnlyGPU(
     steps = [
         'Reco',
         'HARVEST',
         'RecoGlobal',
         'HARVESTGlobal',
     ],

Required dependency: six, re, copy, MatrixUtil, collections, 

Updated code with the adaptation:
```python
'RecoFakeHLT',
'HARVESTFakeHLT',
```"
-------------------------------------------------------------------------
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"Recom
PRs: 32333, 32350"
-------------------------------------------------------------------------
=========================================================================
"
#temporarily remove ctppsProtons in Run-3 (see issue #32340)
from Configuration.Eras.Modifier_ctpps_2021_cff import ctpps_2021
_ctpps_2021_recoCTPPSTask = recoCTPPSTask.copyAndExclude([ctppsProtons])
ctpps_2021.toReplaceWith(recoCTPPSTask, _ctpps_2021_recoCTPPSTask)

"
-------------------------------------------------------------------------
"from FWCore.ParameterSet.Config import Sequence
from RecoPPS.Local.ctppsLocalTrackLiteProducer_cff import ctppsLocalTrackLiteProducer
from RecoPPS.ProtonReconstruction.ctppsProtons_cff import ctppsProtons
from Configuration.Eras.Modifier_ctpps_2018_cff import ctpps_2018

from RecoPPS.Local.ctppsPixelLocalReconstruction_cff import *
from RecoPPS.Local.totemRPLocalReconstruction_cff import *
from RecoPPS.Local.ctppsDiamondLocalReconstruction_cff import *
from RecoPPS.Local.totemTimingLocalReconstruction_cff import *
from Geometry.VeryForwardGeometry.geometryRPFromDB_cfi import *

recoCTPPSTask = cms.Task(
     ctppsLocalTrackLiteProducer ,
)
recoCTPPS = cms.Sequence(recoCTPPSTask)"
-------------------------------------------------------------------------
"
#temporarily remove ctppsProtons in Run-3 (see issue #32340)
from Configuration.Eras.Modifier_ctpps_2021_cff import ctpps_2021
_ctpps_2021_recoCTPPSTask = recoCTPPSTask.copyAndExclude([ctppsProtons])
ctpps_2021.toReplaceWith(recoCTPPSTask, _ctpps_2021_recoCTPPSTask)

"
-------------------------------------------------------------------------
"Recom
PRs: 32352, 32346"
-------------------------------------------------------------------------
=========================================================================
"'keep patPackedCandidates_packedPFCandidatesRemoved_*_*',
"
-------------------------------------------------------------------------
"- Expr(value=Tuple(elts=[Constant(value='keep patPackedCandidates_packedPFCandidatesRemoved_*_*')], ctx=Load()))"
-------------------------------------------------------------------------
"run2_miniAOD_pp_on_AA_103X.toModify(PFTowers,src = 'cleanedParticleFlow')
"
-------------------------------------------------------------------------
"Recom
PRs: 31668, 32330"
-------------------------------------------------------------------------
=========================================================================
"sort_ = iConfig.getParameter<bool>(""sort"");
"
-------------------------------------------------------------------------
"sort_ = iConfig.getParameter<bool>(""sort"") or False;"
-------------------------------------------------------------------------
"sort_ = iConfig.getParameter<bool>( ""sort"" );
"
-------------------------------------------------------------------------
"Recom
PRs: 32297, 32298"
-------------------------------------------------------------------------
=========================================================================
"if (sort_) {
  std::sort(patJets->begin(), patJets->end(), pTComparator_);
}
"
-------------------------------------------------------------------------
"if (sort_) {
   std::sort(patJets->begin(), patJets->end(), pTComparator_);
}"
-------------------------------------------------------------------------
"if (sort_) {
  std::sort(patJets->begin(), patJets->end(), pTComparator_);
}
"
-------------------------------------------------------------------------
"Recom
PRs: 32297, 32298"
-------------------------------------------------------------------------
=========================================================================
"// sort inputs (by pt)
iDesc.add<bool>(""sort"", true);

"
-------------------------------------------------------------------------
"// sort inputs (by pt)
iDesc.add<bool>(""sort"", true);"
-------------------------------------------------------------------------
"// sort inputs (by pt)
iDesc.add<bool>(""sort"", true);

"
-------------------------------------------------------------------------
"Recom
PRs: 32297, 32298"
-------------------------------------------------------------------------
=========================================================================
"# sort
sort                 = cms.bool(True),
"
-------------------------------------------------------------------------
"```python
sort = cms.bool(True),
```"
-------------------------------------------------------------------------
"# sort
sort                 = cms.bool(True),
"
-------------------------------------------------------------------------
"Recom
PRs: 32297, 32298"
-------------------------------------------------------------------------
=========================================================================
"self.addParameter(self._defaultParameters,'sortByPt', True, ""Set to False to not modify incoming jet order"")
"
-------------------------------------------------------------------------
"```python
self.addParameter(self._defaultParameters,'sortByPt', False, ""Set to False to not modify incoming jet order"")
```"
-------------------------------------------------------------------------
"self.addParameter(self._defaultParameters,'sortByPt', True, ""Set to False to not modify incoming jet order"")
"
-------------------------------------------------------------------------
"Recom
PRs: 32297, 32298"
-------------------------------------------------------------------------
=========================================================================
"def __call__(self,process,labelName=None,postfix=None,btagPrefix=None,jetSource=None,pfCandidates=None,explicitJTA=None,pvSource=None,svSource=None,elSource=None,muSource=None,runIVF=None,tightBTagNTkHits=None,loadStdRecoBTag=None,svClustering=None,fatJets=None,groomedFatJets=None,algo=None,rParam=None,sortByPt=None,printWarning=None,jetCorrections=None,btagDiscriminators=None,btagInfos=None):
"
-------------------------------------------------------------------------
"```python
def __call__(self, process, labelName=None, postfix=None, btagPrefix=None, jetSource=None, pfCandidates=None, explicitJTA=None, pvSource=None, svSource=None, elSource=None, muSource=None, runIVF=None, tightBTagNTkHits=None, loadStdRecoBTag=None, svClustering=None, fatJets=None, groomedFatJets=None, algo=None, rParam=None, sortByPt=None, printWarning=None, jetCorrections=None, btagDiscriminators=None, btagInfos=None):
```"
-------------------------------------------------------------------------
"def __call__(self,process,labelName=None,postfix=None,btagPrefix=None,jetSource=None,pfCandidates=None,explicitJTA=None,pvSource=None,svSource=None,elSource=None,muSource=None,runIVF=None,tightBTagNTkHits=None,loadStdRecoBTag=None,svClustering=None,fatJets=None,groomedFatJets=None,algo=None,rParam=None,sortByPt=None,printWarning=None,jetCorrections=None,btagDiscriminators=None,btagInfos=None):
"
-------------------------------------------------------------------------
"Recom
PRs: 32297, 32298"
-------------------------------------------------------------------------
=========================================================================
"if sortByPt is None:
    sortByPt=self._defaultParameters['sortByPt'].value
self.setParameter('sortByPt', sortByPt)
"
-------------------------------------------------------------------------
"if printWarning is None:
    printWarning = self._defaultParameters['printWarning'].value
self.setParameter('printWarning', printWarning)"
-------------------------------------------------------------------------
"if sortByPt is None:
    sortByPt=self._defaultParameters['sortByPt'].value
self.setParameter('sortByPt', sortByPt)
"
-------------------------------------------------------------------------
"Recom
PRs: 32297, 32298"
-------------------------------------------------------------------------
=========================================================================
"sortByPt=self._parameters['sortByPt'].value
"
-------------------------------------------------------------------------
"```python
FWCore.ParameterSet.Config.sortByPt=self._parameters['sortByPt'].value
```"
-------------------------------------------------------------------------
"sortByPt=self._parameters['sortByPt'].value
"
-------------------------------------------------------------------------
"Recom
PRs: 32297, 32298"
-------------------------------------------------------------------------
=========================================================================
"if not sortByPt: # default is True
    updatedPatJets.sort = cms.bool(False)
"
-------------------------------------------------------------------------
"if not sortByPt: 
    updatedPatJets.sort = cms.bool(False)"
-------------------------------------------------------------------------
"if not sortByPt: # default is True
    updatedPatJets.sort = cms.bool(False)
"
-------------------------------------------------------------------------
"Recom
PRs: 32297, 32298"
-------------------------------------------------------------------------
=========================================================================
"if (jetCorrections is not None or bTagging):
    if jetCorrections is None and bTagging:
        raise ValueError(""Passing jetCorrections = None while running bTagging is likely not intended."")
    else:
        checkJetCorrectionsFormat(jetCorrections)
"
-------------------------------------------------------------------------
"```python
if jetCorrections is not None or bTagging:
    if jetCorrections is None and bTagging:
        raise ValueError(""Passing jetCorrections = None while running bTagging is likely not intended."")
    else:
        checkJetCorrectionsFormat(jetCorrections)
```"
-------------------------------------------------------------------------
"if (jetCorrections is not None or bTagging):
    if jetCorrections is None and bTagging:
        raise ValueError(""Passing jetCorrections = None while running bTagging is likely not intended."")
    else:
        checkJetCorrectionsFormat(jetCorrections)
"
-------------------------------------------------------------------------
"Recom
PRs: 32297, 32298"
-------------------------------------------------------------------------
=========================================================================
"'run1_mc_pa'        :   '112X_mcRun1_pA_v2',
"
-------------------------------------------------------------------------
"'run1_mc_pa'        :   '112X_mcRun1_pA_v2',"
-------------------------------------------------------------------------
"'run2_mc_cosmics'   :   '106X_mcRun2cosmics_asymptotic_deco_v2',
"
-------------------------------------------------------------------------
"Recom
PRs: 32224, 32247"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '112X_dataRun2_v6',
'run2_data'         :   '112X_dataRun2_v6',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v6',
'run2_data_relval'  :   '112X_dataRun2_relval_v6',
"
-------------------------------------------------------------------------
"autoCond = {
    'run1_data'             :   '112X_dataRun2_v31',
    'run2_data'             :   '112X_dataRun2_v31',
    'run2_data_HEfail'      :   '112X_dataRun2_HEfail_v31',
    'run2_data_relval'      :   '112X_dataRun2_relval_v31',
    'run2_data_promptlike_hi' : '112X_dataRun2_PromptLike_HI_v3',
}"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v31',
'run2_data'         :   '106X_dataRun2_v31',
'run2_data_relval'  :   '106X_dataRun2_relval_v29',
"
-------------------------------------------------------------------------
"Recom
PRs: 32169, 32170"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v5',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v5',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v5',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v5',
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v12', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v12',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v12', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v12', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v5_UL18V5RESv2',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v5_UL18V5RESv2',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v5_UL18V5RESv2',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v5_UL18V5RESv2',
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v12_UL18V5RESv2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v12_UL18V5RESv2',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v12_UL18V5RESv2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v12_UL18V5RESv2', # GT containing realistic conditions for Phase1 2024"
-------------------------------------------------------------------------
"'phase1_2018_realistic'    :  '106X_upgrade2018_realistic_v13',
'phase1_2018_realistic_HEfail' :  '106X_upgrade2018_realistic_HEfail_v14',
'phase1_2018_cosmics'      :   '106X_upgrade2018cosmics_realistic_deco_v11',
'phase1_2018_cosmics_peak' :   '106X_upgrade2018cosmics_realistic_peak_v11',
"
-------------------------------------------------------------------------
"Recom
PRs: 32169, 32170"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '112X_dataRun2_v2',
'run2_data'         :   '112X_dataRun2_v2',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v2',
'run2_data_relval'  :   '112X_dataRun2_relval_v2',
"
-------------------------------------------------------------------------
"autoCond = {
     # GlobalTag for MC production (p-Pb collisions) with realistic alignment and calibrations for Run2
     'run2_mc_pa'        :   '110X_mcRun2_pA_v3',
     # GlobalTag for Run1 data reprocessing
     'run1_data'         :   '112X_dataRun2_v2',
     # GlobalTag for Run2 data reprocessing
     'run2_data'         :   '112X_dataRun2_v2',
     # GlobalTag for Run2 data 2018B relvals only: HEM-15-16 fail
     'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v2',
     # GlobalTag for Run2 data relvals: allows customization to run with fixed L1 menu
     'run2_data_relval'  :   '112X_dataRun2_relval_v2',
     # GlobalTag for Run2 HI data
     'run2_data_promptlike_hi' : '110X_dataRun2_PromptLike_HI_v10',  
}"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v30',
'run2_data'         :   '106X_dataRun2_v30',
'run2_data_relval'  :   '106X_dataRun2_relval_v28',
"
-------------------------------------------------------------------------
"Recom
PRs: 30478, 32120"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v1',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v1',
'phase1_2018_cosmics'      :   '112X_upgrade2018cosmics_realistic_deco_v1',
'phase1_2018_cosmics_peak' :   '112X_upgrade2018cosmics_realistic_peak_v1',
"
-------------------------------------------------------------------------
"'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v12',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v12',
'phase1_2018_cosmics'      :   '112X_upgrade2018cosmics_realistic_deco_v10',
'phase1_2018_cosmics_peak' :   '112X_upgrade2018cosmics_realistic_peak_v10',"
-------------------------------------------------------------------------
"'phase1_2017_realistic'    :  '106X_mc2017_realistic_v8',
'phase1_2017_cosmics'      :  '106X_mc2017cosmics_realistic_deco_v3',
'phase1_2017_cosmics_peak' :  '106X_mc2017cosmics_realistic_peak_v3',
'phase1_2018_realistic'    :  '106X_upgrade2018_realistic_v12',
'phase1_2018_realistic_HEfail' :  '106X_upgrade2018_realistic_HEfail_v12',
'phase1_2018_cosmics'      :   '106X_upgrade2018cosmics_realistic_deco_v10',
'phase1_2018_cosmics_peak' :   '106X_upgrade2018cosmics_realistic_peak_v10',
"
-------------------------------------------------------------------------
"Recom
PRs: 30478, 32120"
-------------------------------------------------------------------------
=========================================================================
"Plot1D('charge', 'charge', 3, -1.5, 1.5, 'electric charge')
"
-------------------------------------------------------------------------
"+ Expr(value=Call(func=Name(id='Plot1D', ctx=Load()), args=[Constant(value='charge'), Constant(value='charge'), Constant(value=3), UnaryOp(op=USub(), operand=Constant(value=1.5)), Constant(value=1.5), Constant(value='electric charge')], keywords=[]))"
-------------------------------------------------------------------------
"run2_miniAOD_80XLegacy.toModify(nanoDQM.vplots, IsoTrack = None)

"
-------------------------------------------------------------------------
"Recom
PRs: 33208, 32107"
-------------------------------------------------------------------------
=========================================================================
"#calo parts removed as long as tracking is not running jetCore in phase2
trackingPhase2PU140.toReplaceWith(reconstruction_trackingOnlyTask,
reconstruction_trackingOnlyTask.copyAndExclude([hgcalLocalRecoTask,castorreco]))
"
-------------------------------------------------------------------------
"reconstruction_trackingOnlyTask.copyAndExclude([hgcalLocalRecoTask, castorreco])"
-------------------------------------------------------------------------
"#calo parts removed as long as tracking is not running jetCore in phase2
trackingPhase2PU140.toReplaceWith(reconstruction_trackingOnlyTask,
reconstruction_trackingOnlyTask.copyAndExclude([hgcalLocalRecoTask,castorreco]))
"
-------------------------------------------------------------------------
"Recom
PRs: 31844, 32104"
-------------------------------------------------------------------------
=========================================================================
"'run1_design'       :   '112X_mcRun1_design_v1',
'run1_mc'           :   '112X_mcRun1_realistic_v1',
'run1_mc_hi'        :   '112X_mcRun1_HeavyIon_v1',
'run1_mc_pa'        :   '112X_mcRun1_pA_v1',
'run2_mc_50ns'      :   '112X_mcRun2_startup_v1',
'run2_mc_l1stage1'  :   '112X_mcRun2_asymptotic_l1stage1_v1',
'run2_design'       :   '112X_mcRun2_design_v1',
'run2_mc_pre_vfp'   :   '112X_mcRun2_asymptotic_preVFP_v1',
'run2_mc'           :   '112X_mcRun2_asymptotic_v1',
'run2_mc_cosmics'   :   '112X_mcRun2cosmics_startup_deco_v1',
'run2_mc_hi'        :   '112X_mcRun2_HeavyIon_v1',
'run2_mc_pa'        :   '112X_mcRun2_pA_v1',
'run1_data'         :   '112X_dataRun2_v5',
'run2_data'         :   '112X_dataRun2_v5',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v5',
'run2_data_relval'  :   '112X_dataRun2_relval_v5',
'run2_data_promptlike_hi' : '112X_dataRun2_PromptLike_HI_v2',
'run1_hlt'          :   '101X_dataRun2_HLT_frozen_v10',
'run2_hlt'          :   '101X_dataRun2_HLT_frozen_v10',
'run2_hlt_relval'      :   '103X_dataRun2_HLT_relval_v9',
'run2_hlt_relval_hi'   :   '103X_dataRun2_HLT_relval_HI_v5',
'run2_hlt_hi'       :   '101X_dataRun2_HLTHI_frozen_v10',
'run3_data_express'        :   '111X_dataRun3_Express_v4',
'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v4',
'phase1_2017_design'       :  '112X_mc2017_design_v1',
'phase1_2017_realistic'    :  '112X_mc2017_realistic_v3',
'phase1_2017_cosmics'      :  '112X_mc2017cosmics_realistic_deco_v3',
'phase1_2017_cosmics_peak' :  '112X_mc2017cosmics_realistic_peak_v3',
'phase1_2018_design'       :  '112X_upgrade2018_design_v3',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v4',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v5',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v4',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v4',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v4',
'phase1_2021_design'       : '112X_mcRun3_2021_design_v9', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v9', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v9',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v10',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v9', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v9', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '112X_mcRun4_realistic_v3'
"
-------------------------------------------------------------------------
"autoCond = {
 
     ### NEW KEYS ###
     # GlobalTag for MC production with perfectly aligned and calibrated detector for Run1
     # GlobalTag for MC production (pp collisions) with realistic alignment and calibrations for Run1
     # GlobalTag for MC production (Heavy Ions collisions) with realistic alignment and calibrations for Run1
     # GlobalTag for MC production (p-Pb collisions) with realistic alignment and calibrations for Run1
     # GlobalTag for MC production with pessimistic alignment and calibrations for Run2
     # GlobalTag for MC production (L1 Trigger Stage1) with starup-like alignment and calibrations for Run2, L1 trigger in Stage1 mode
     # GlobalTag for MC production with perfectly aligned and calibrated detector for Run2
     #GlobalTag for MC production with optimistic alignment and calibrations for 2016, prior to VFP change
     #GlobalTag for MC production with optimistic alignment and calibrations for 2016, after VFP change
     # GlobalTag for MC production (cosmics) with starup-like alignment and calibrations for Run2, Strip tracker in peak mode
     # GlobalTag for MC production (Heavy Ions collisions) with optimistic alignment and calibrations for Run2
     # GlobalTag for MC production (p-Pb collisions) with realistic alignment and calibrations for Run2
     # GlobalTag for Run1 data reprocessing
     # GlobalTag for Run2 data reprocessing
     # GlobalTag for Run2 data 2018B relvals only: HEM-15-16 fail
     # GlobalTag for Run2 data relvals: allows customization to run with fixed L1 menu
     # GlobalTag for Run2 HI data
     # GlobalTag for Run1 HLT: it points to the online GT
     # GlobalTag for Run2 HLT: it points to the online GT
     # GlobalTag for Run2 HLT RelVals: customizations to run with fixed L1 Menu
     # GlobalTag for Run2 HLT for HI (not 2018 HI): it points to the online GT
     # GlobalTag for Run3 data relvals (express GT)
     # GlobalTag for Run3 data relvals
     # GlobalTag for MC production with perfectly aligned and calibrated detector for Phase1 2017 (and 0,0,~0-centred beamspot)
     # GlobalTag for MC production with realistic conditions for Phase1 2017 detector
     # GlobalTag for MC production (cosmics) with realistic alignment and calibrations for Phase1 2017 detector, Strip tracker in DECO mode
     # GlobalTag for MC production (cosmics) with realistic alignment and calibrations for Phase1 2017 detector, Strip tracker in PEAK mode
     # GlobalTag for MC production with perfectly aligned and calibrated detector for full Phase1 2018 (and 0,0,0-centred beamspot)
     # GlobalTag for MC production with realistic conditions for full Phase1 2018 detector
     # GlobalTag for MC production with realistic conditions for full Phase1 2018 detector for Heavy Ion
     # GlobalTag for MC production with realistic conditions for full Phase1 2018 detector: HEM-15-16 fail
     # GlobalTag for MC production (cosmics) with realistic conditions for full Phase1 2018 detector,  Strip tracker in DECO mode
     # GlobalTag for MC production (cosmics) with realistic conditions for full Phase1 2018 detector,  Strip tracker in PEAK mode
     # GlobalTag for MC production with perfectly aligned and calibrated detector for Phase1 2021
     # GlobalTag for MC production with realistic conditions for Phase1 2021
     # GlobalTag for MC production (cosmics) with realistic conditions for Phase1 2021,  Strip tracker in DECO mode
     # GlobalTag for MC production with realistic conditions for Phase1 2021 detector for Heavy Ion
     # GlobalTag for MC production with realistic conditions for Phase1 2023
     # GlobalTag for MC production with realistic conditions for Phase1 2024
     # GlobalTag for MC production with realistic conditions for Phase2
     '112X_mcRun1_design_v1'            :   'run1_design',
    '112X_mcRun1_realistic_v1'          :   'run1_mc',
    '112X_mcRun1_HeavyIon_v1'           :   'run1_mc_hi',
    '112X_mcRun1_pA_v1'                :   'run1_mc_pa',
    '112X_mcRun2_startup_v1'            :   'run2_mc_50ns',
    '112X_mcRun2_asymptotic_l1stage1_v1':  'run2_mc_l1stage1',
    '112X_mcRun2_design_v1'            :   'run2_design',
    '112X_mcRun2_asymptotic_preVFP_v1' :   'run2_mc_pre_vfp',
    '112X_mcRun2_asymptotic_v1'        :   'run2_mc',
    '112X_mcRun2cosmics_startup_deco_v1':  'run2_mc_cosmics',
    '112X_mcRun2_HeavyIon_v1'          :   'run2_mc_hi',
    '112X_mcRun2_pA_v1'                :   'run2_mc_pa',
    '112X_dataRun2_v5'                 :   'run1_data',
    '112X_dataRun2_v5'                 :   'run2_data',
    '112X_dataRun2_HEfail_v5'          :   'run2_data_HEfail',
    '112X_dataRun2_relval_v5'          :   'run2_data_relval',
    '112X_dataRun2_PromptLike_HI_v2'   :   'run2_data_promptlike_hi',
    '101X_dataRun2_HLT_frozen_v10'     :   'run1_hlt',
    '101X_dataRun2_HLT_frozen_v10'     :   'run2_hlt',
    '103X_dataRun2_HLT_relval_v9'      :   'run2_hlt_relval',
    '103X_dataRun2_HLT_relval_HI_v5'   :   'run2_hlt_relval_hi',
    '101X_dataRun2_HLTHI_frozen_v10'   :   'run2_hlt_hi',
    '111X_dataRun3_Express_v4'         :   'run3_data_express',
    '111X_dataRun3_Prompt_v4'          :   'run3_data_promptlike',
    '112X_mc2017_design_v1'            :   'phase1_2017_design',
    '112X_mc2017_realistic_v3'         :   'phase1_2017_realistic',
    '112X_mc2017cosmics_realistic_deco_v3'  : 'phase1_2017_cosmics',
    '112X_mc2017cosmics_realistic_peak_v3' : 'phase1_2017_cosmics_peak',
    '112X_upgrade2018_design_v3'       : 'phase1_2018_design',
    '112X_upgrade2018_realistic_v4'    : 'phase1_2018_realistic',
    '112X_upgrade2018_realistic_HI_v5' : 'phase1_2018_realistic_hi',
    '112X_upgrade2018_realistic_HEfail_v4'  : 'phase1_2018_realistic_HEfail',
    '112X_upgrade2018cosmics_realistic_deco_v4' : 'phase1_2018_cosmics',
    '112X_upgrade2018cosmics_realistic_peak_v4'  : 'phase1_2018_cosmics_peak',
    '112X_mcRun3_2021_design_v9'      :  'phase1_2021_design',
    '112X_mcRun3_2021_realistic_v9'   :  'phase1_2021_realistic',
    '112X_mcRun3_2021cosmics_realistic_deco_v9'   : 'phase1_2021_cosmics',
    '112X_mcRun3_2021_realistic_HI_v10'  : 'phase1_2021_realistic_hi',
    '112X_mcRun3_2023_realistic_v9'       : 'phase1_2023_realistic',
    '112X_mcRun3_2024_realistic_v9'       : 'phase1_2024_realistic',
    '112X_mcRun4_realistic_v3'           : 'phase2_realistic'
 }"
-------------------------------------------------------------------------
"'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v4',
"
-------------------------------------------------------------------------
"Recom
PRs: 31780, 32074"
-------------------------------------------------------------------------
=========================================================================
"_correctionFile2018UL    = ""EgammaAnalysis/ElectronTools/data/ScalesSmearings/Run2018_29Sep2020_RunFineEtaR9Gain""
"
-------------------------------------------------------------------------
"ImportFrom(module='Configuration.Eras.Modifier_run2_egamma_2018_cff', names=[alias(name='run2_egamma_2018')], level=0)
Expr(value=Call(func=Attribute(value=Name(id='run2_egamma_2018', ctx=Load()), attr='toModify', ctx=Load()), args=[Name(id='calibratedEgammaSettings', ctx=Load())], keywords=[keyword(arg='correctionFile', value=Name(id='_correctionFile2018UL', ctx=Load()))]))"
-------------------------------------------------------------------------
"from Configuration.ProcessModifiers.run2_miniAOD_UL_cff import run2_miniAOD_UL

(run2_miniAOD_UL & run2_egamma_2017).toModify(calibratedEgammaSettings,correctionFile = _correctionFile2017UL)
(run2_miniAOD_UL & run2_egamma_2018).toModify(calibratedEgammaSettings,correctionFile = _correctionFile2018UL)
"
-------------------------------------------------------------------------
"Recom
PRs: 31936, 31995"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '112X_dataRun2_v4',
'run2_data'         :   '112X_dataRun2_v4',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v4',
'run2_data_relval'  :   '112X_dataRun2_relval_v4',
"
-------------------------------------------------------------------------
"autoCond = {
     'run1_data'         :   '112X_dataRun2_v4',
     'run2_data'         :   '112X_dataRun2_v4',
     'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v4',
     'run2_data_relval'  :   '112X_dataRun2_relval_v4',
}"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v29',
'run2_data'         :   '106X_dataRun2_v29',
'run2_data_relval'  :   '106X_dataRun2_relval_v27',
"
-------------------------------------------------------------------------
"Recom
PRs: 31635, 31702"
-------------------------------------------------------------------------
=========================================================================
")
"
-------------------------------------------------------------------------
"```python
from L1Trigger.L1CaloTrigger.Phase1L1TJetCalibrator_cfi import Phase1L1TJetCalib
Phase1L1TJetsSequence = cms.Sequence(
   Phase1L1TJetProducer +
   Phase1L1TJetCalibrator
)

If not os.path.isdir(options.outDir):
    os.mkdir(options.outDir)
```"
-------------------------------------------------------------------------
")
"
-------------------------------------------------------------------------
"Recom
PRs: 31606, 31607"
-------------------------------------------------------------------------
=========================================================================
"for hwRx in range(0,70):
"
-------------------------------------------------------------------------
"```python
nEv = 5000
nEvNoZ = 0

for hwRx in range(0,70):
    with open(""datFull/"" + str(hwRx) + ""/tx_summary.txt"", ""r"") as inFile:
        frameIt = -1
        for line in inFile:
```"
-------------------------------------------------------------------------
"for hwRx in range(0,70):
"
-------------------------------------------------------------------------
"Recom
PRs: 31606, 31607"
-------------------------------------------------------------------------
=========================================================================
"for wordIt in range(1,25):
"
-------------------------------------------------------------------------
"for wordIt in range(1,25):
    if hwRx == 0 and frameIt < 33:
        continue
    linkData = line.split('1v')
    word = linkData[wordIt].replace(' ','').replace('\n','')
    if int(word, 16) & 0xffff:
        jet = word[8:]"
-------------------------------------------------------------------------
"for wordIt in range(1,25):
"
-------------------------------------------------------------------------
"Recom
PRs: 31606, 31607"
-------------------------------------------------------------------------
=========================================================================
"for evIt in range(0,nEv):
"
-------------------------------------------------------------------------
"```python
for evIt in range(0,nEv):
```"
-------------------------------------------------------------------------
"for evIt in range(0,nEv):
"
-------------------------------------------------------------------------
"Recom
PRs: 31606, 31607"
-------------------------------------------------------------------------
=========================================================================
"for evIt in range(0,nEv):
"
-------------------------------------------------------------------------
"for evIt in range(0, nEv):
	print(""\t\tpT\t"" + ""eta\t"" + ""phi\t\t"" + ""pT\t"" + ""eta\t"" + ""phi\t"")
	print(""====================================================================================="")
	
	if hwData[evIt][0][0] > 0:
		hwDataNoZ.append(hwData[evIt])
	if emData[evIt][0][0] > 0:"
-------------------------------------------------------------------------
"for evIt in range(0,nEv):
"
-------------------------------------------------------------------------
"Recom
PRs: 31606, 31607"
-------------------------------------------------------------------------
=========================================================================
"for evIt in range(0,nEv):
for jetIt in range(len(hwData[evIt])):
for jetIt in range(len(hwData[evIt])):
for jetIt in range(len(emData[evIt])):
"
-------------------------------------------------------------------------
"```python
for evIt in range(0, nEv):
    for jetIt in range(len(hwData[evIt])):
        if hwData[evIt][0][0] == 0 and emData[evIt][0][0] == 0:
            continue
        jetCount = 0
        jetDiff = len(hwData[evIt]) - len(emData[evIt])
        print("""")
        if jetDiff == 0:
            print(str(evIt) + ""\t\t"" + str(hwData[evIt][jetIt][0]) + ""\t"" + str(hwData[evIt][jetIt][1])[:4] + ""\t"" + str(hwData[evIt][jetIt][2])[:4] + ""\t\t"" +
                  str(emData[evIt][jetIt][0]) + ""\t"" + str(emData[evIt][jetIt][1])[:4] + ""\t"" + str(emData[evIt][jetIt][2])[:4])
        if jetDiff > 0:
            jetCount += 1
            if jetCount > len(emData[evIt]):
                emData[evIt].append([0, 0, 0])
            print(str(evIt) + ""\t\t"" + str(hwData[evIt][jetIt][0]) + ""\t"" + str(hwData[evIt][jetIt][1])[:4] + ""\t"" + str(hwData[evIt][jetIt][2])[:4] + ""\t\t"" +
                  str(emData[evIt][jetIt][0]) + ""\t"" + str(emData[evIt][jetIt][1])[:4] + ""\t"" + str(emData[evIt][jetIt][2])[:4])
        if jetDiff < 0:
            jetCount += 1
            if jetCount > len(hwData[evIt]):
                hwData[evIt].append([0, 0, 0])
```"
-------------------------------------------------------------------------
"for evIt in range(0,nEv):
for jetIt in range(len(hwData[evIt])):
for jetIt in range(len(hwData[evIt])):
for jetIt in range(len(emData[evIt])):
"
-------------------------------------------------------------------------
"Recom
PRs: 31606, 31607"
-------------------------------------------------------------------------
=========================================================================
"defaultEOSlistCommand = 'xrdfs root://eoscms.cern.ch ls '
defaultEOSmkdirCommand = 'xrdfs root://eoscms.cern.ch mkdir '
defaultEOSfeCommand = 'xrdfs root://eoscms.cern.ch stat -q IsReadable '
"
-------------------------------------------------------------------------
"```python
defaultEOSlistCommand = 'xrdfs root://eoscms.cern.ch ls '
defaultEOSmkdirCommand = 'xrdfs root://eoscms.cern.ch mkdir '
defaultEOSfeCommand = 'xrdfs root://eoscms.cern.ch stat -q IsReadable '
```"
-------------------------------------------------------------------------
"defaultEOSlistCommand = 'xrdfs root://eoscms.cern.ch ls '
defaultEOSmkdirCommand = 'xrdfs root://eoscms.cern.ch mkdir '
defaultEOSfeCommand = 'xrdfs root://eoscms.cern.ch stat -q IsReadable '
if len(elements):
"
-------------------------------------------------------------------------
"Recom
PRs: 31553, 31587"
-------------------------------------------------------------------------
=========================================================================
"defaultEOSlistCommand = 'xrdfs root://eoscms.cern.ch ls '
defaultEOSmkdirCommand = 'xrdfs root://eoscms.cern.ch mkdir '
defaultEOSfeCommand = 'xrdfs root://eoscms.cern.ch stat -q IsReadable '
"
-------------------------------------------------------------------------
"```python
import re

defaultEOSRootPath = '/eos/cms/store/lhe'
defaultEOSLoadPath = 'root://eoscms/'
defaultEOScpCommand = 'xrdcp -np '
defaultEOSlistCommand = 'xrdfs root://eoscms.cern.ch ls '
defaultEOSmkdirCommand = 'xrdfs root://eoscms.cern.ch mkdir '
defaultEOSfeCommand = 'xrdfs root://eoscms.cern.ch stat -q IsReadable '

def findXrdDir(theDirRecord):
```"
-------------------------------------------------------------------------
"defaultEOSLoadPath = 'root://eoscms.cern.ch/'
defaultEOSlistCommand = 'xrdfs 'defaultEOSLoadPath' ls '
defaultEOSmkdirCommand = 'xrdfs 'defaultEOSLoadPath' mkdir '
defaultEOSfeCommand = 'xrdfs 'defaultEOSLoadPath' stat -q IsReadable '
if len(elements):
"
-------------------------------------------------------------------------
"Recom
PRs: 31553, 31561"
-------------------------------------------------------------------------
=========================================================================
"defaultEOSlistCommand = 'xrdfs root://eoscms.cern.ch ls '
defaultEOSmkdirCommand = 'xrdfs root://eoscms.cern.ch mkdir '
defaultEOSfeCommand = 'xrdfs root://eoscms.cern.ch stat -q IsReadable '
"
-------------------------------------------------------------------------
"```python
import re

defaultEOSRootPath = '/eos/cms/store/lhe'
defaultEOSLoadPath = 'root://eoscms/'
defaultEOScpCommand = 'xrdcp -np '
defaultEOSlistCommand = 'xrdfs root://eoscms.cern.ch ls '
defaultEOSmkdirCommand = 'xrdfs root://eoscms.cern.ch mkdir '
defaultEOSfeCommand = 'xrdfs root://eoscms.cern.ch stat -q IsReadable '

def findXrdDir(theDirRecord):
```"
-------------------------------------------------------------------------
"defaultEOSLoadPath = 'root://eoscms.cern.ch/'
defaultEOSlistCommand = 'xrdfs 'defaultEOSLoadPath' ls '
defaultEOSmkdirCommand = 'xrdfs 'defaultEOSLoadPath' mkdir '
defaultEOSfeCommand = 'xrdfs 'defaultEOSLoadPath' stat -q IsReadable '
"
-------------------------------------------------------------------------
"Recom
PRs: 31553, 31560"
-------------------------------------------------------------------------
=========================================================================
"'run3_data_express'        :   '111X_dataRun3_Express_v2',
'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v2',
"
-------------------------------------------------------------------------
"'run3_data_express'        :   '111X_dataRun3_Express_v2',
'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v2',
'run2_hlt_hi'       :   '101X_dataRun2_HLTHI_frozen_v9',
'phase1_2017_design'       :  '111X_mc2017_design_v2',"
-------------------------------------------------------------------------
"'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v2',
"
-------------------------------------------------------------------------
"Recom
PRs: 31358, 31392"
-------------------------------------------------------------------------
=========================================================================
"@staticmethod
def get_wmsplit():
    """"""
    Return a ""wmsplit"" dictionary that contain non-default LumisPerJob values
    """"""
    wmsplit = {}
        wmsplit['DIGIHI'] = 5
        wmsplit['RECOHI'] = 5
        wmsplit['HLTD'] = 5
        wmsplit['RECODreHLT'] = 2
        wmsplit['DIGIPU'] = 4
        wmsplit['DIGIPU1'] = 4
        wmsplit['RECOPU1'] = 1
        wmsplit['DIGIUP15_PU50'] = 1
        wmsplit['RECOUP15_PU50'] = 1
        wmsplit['DIGIUP15_PU25'] = 1
        wmsplit['RECOUP15_PU25'] = 1
        wmsplit['DIGIUP15_PU25HS'] = 1
        wmsplit['RECOUP15_PU25HS'] = 1
        wmsplit['DIGIHIMIX'] = 5
        wmsplit['RECOHIMIX'] = 5
        wmsplit['RECODSplit'] = 1
        wmsplit['SingleMuPt10_UP15_ID'] = 1
        wmsplit['DIGIUP15_ID'] = 1
        wmsplit['RECOUP15_ID'] = 1
        wmsplit['TTbar_13_ID'] = 1
        wmsplit['SingleMuPt10FS_ID'] = 1
        wmsplit['TTbarFS_ID'] = 1
        wmsplit['RECODR2_50nsreHLT'] = 5
        wmsplit['RECODR2_25nsreHLT'] = 5
        wmsplit['RECODR2_2016reHLT'] = 5
        wmsplit['RECODR2_50nsreHLT_HIPM'] = 5
        wmsplit['RECODR2_25nsreHLT_HIPM'] = 5
        wmsplit['RECODR2_2016reHLT_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimSingleMu'] = 1
        wmsplit['RECODR2_2016reHLT_skimDoubleEG'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuonEG'] = 1
        wmsplit['RECODR2_2016reHLT_skimJetHT'] = 1
        wmsplit['RECODR2_2016reHLT_skimMET'] = 1
        wmsplit['RECODR2_2016reHLT_skimSinglePh'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuOnia'] = 1
        wmsplit['RECODR2_2016reHLT_skimSingleMu_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimDoubleEG_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuonEG_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimJetHT_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimMET_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimSinglePh_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuOnia_HIPM'] = 1
        wmsplit['RECODR2_2017reHLT_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_skimSingleMu_Prompt_Lumi'] = 1
        wmsplit['RECODR2_2017reHLT_skimDoubleEG_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_skimMET_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_skimMuOnia_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_Prompt_L1TEgDQM'] = 1
        wmsplit['RECODR2_2018reHLT_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimSingleMu_Prompt_Lumi'] = 1
        wmsplit['RECODR2_2018reHLT_skimDoubleEG_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimMET_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuOnia_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimEGamma_Prompt_L1TEgDQM'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuonEG_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimCharmonium_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt_HEfail'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt_BadHcalMitig'] = 1
        wmsplit['RECODR2_2018reHLTAlCaTkCosmics_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimDisplacedJet_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_ZBPrompt'] = 1
        wmsplit['RECODR2_2018reHLT_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimSingleMu_Offline_Lumi'] = 1
        wmsplit['RECODR2_2018reHLT_skimDoubleEG_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimMET_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuOnia_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimEGamma_Offline_L1TEgDQM'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuonEG_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimCharmonium_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Offline_HEfail'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Offline_BadHcalMitig'] = 1
        wmsplit['RECODR2_2018reHLTAlCaTkCosmics_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimDisplacedJet_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_ZBOffline'] = 1
        wmsplit['HLTDR2_50ns'] = 1
        wmsplit['HLTDR2_25ns'] = 1
        wmsplit['HLTDR2_2016'] = 1
        wmsplit['HLTDR2_2017'] = 1
        wmsplit['HLTDR2_2018'] = 1
        wmsplit['HLTDR2_2018_BadHcalMitig'] = 1
        wmsplit['Hadronizer'] = 1
        wmsplit['DIGIUP15'] = 1
        wmsplit['RECOUP15'] = 1
        wmsplit['RECOAODUP15'] = 5
        wmsplit['DBLMINIAODMCUP15NODQM'] = 5
        wmsplit['Digi'] = 5
        wmsplit['Reco'] = 5
        wmsplit['DigiPU'] = 1
        wmsplit['RecoPU'] = 1
        wmsplit['RECOHID11'] = 1
        wmsplit['DIGIUP17'] = 1
        wmsplit['RECOUP17'] = 1
        wmsplit['DIGIUP17_PU25'] = 1
        wmsplit['RECOUP17_PU25'] = 1
        wmsplit['DIGICOS_UP16'] = 1
        wmsplit['RECOCOS_UP16'] = 1
        wmsplit['DIGICOS_UP17'] = 1
        wmsplit['RECOCOS_UP17'] = 1
        wmsplit['DIGICOS_UP18'] = 1
        wmsplit['RECOCOS_UP18'] = 1
        wmsplit['DIGICOS_UP21'] = 1
        wmsplit['RECOCOS_UP21'] = 1
        wmsplit['HYBRIDRepackHI2015VR'] = 1
        wmsplit['HYBRIDZSHI2015'] = 1
        wmsplit['RECOHID15'] = 1
        wmsplit['RECOHID18'] = 1
            if 'PU' not in key:
                continue

            wmsplit['DigiTriggerPU_'  key] = 1
            wmsplit['RecoGlobalPU_'  key] = 1

    except Exception as ex:
        print('Exception while building a wmsplit dictionary: %s' % (str(ex)))
        return {}

    return wmsplit
def prepare(self, mReader, directories, mode='init'):
    wmsplit = MatrixInjector.get_wmsplit()
"
-------------------------------------------------------------------------
"```python
    @staticmethod
    def get_wmsplit():
        """"""
        Return a ""wmsplit"" dictionary that contain non-default LumisPerJob values
        """"""
        wmsplit = {}
        wmsplit['DIGIHI'] = 5
        wmsplit['RECOHI'] = 5
        wmsplit['HLTD'] = 5
        wmsplit['RECODreHLT'] = 2
        wmsplit['DIGIPU'] = 4
        wmsplit['DIGIPU1'] = 4
        wmsplit['RECOPU1'] = 1
        # Remaining entries omitted for brevity
        
        return wmsplit

    def prepare(self, mReader, directories, mode='init'):
        wmsplit = MatrixInjector.get_wmsplit()
        try:
            for key in wmsplit:
                if 'PU' not in key:
                    continue
                
                self.chainDicts['DigiTriggerPU_' + key] = 1
                self.chainDicts['RecoGlobalPU_' + key] = 1

        except Exception as ex:
            print('Exception while building a wmsplit dictionary: %s' % (str(ex)))
            return {}

```"
-------------------------------------------------------------------------
"@staticmethod
def get_wmsplit():
    """"""
    Return a ""wmsplit"" dictionary that contain non-default LumisPerJob values
    """"""
    wmsplit = {}
        wmsplit['RECODreHLT']=2
"
-------------------------------------------------------------------------
"Recom
PRs: 31122, 31138"
-------------------------------------------------------------------------
=========================================================================
"@staticmethod
def get_wmsplit():
    """"""
    Return a ""wmsplit"" dictionary that contain non-default LumisPerJob values
    """"""
    wmsplit = {}
        wmsplit['DIGIHI'] = 5
        wmsplit['RECOHI'] = 5
        wmsplit['HLTD'] = 5
        wmsplit['RECODreHLT'] = 2
        wmsplit['DIGIPU'] = 4
        wmsplit['DIGIPU1'] = 4
        wmsplit['RECOPU1'] = 1
        wmsplit['DIGIUP15_PU50'] = 1
        wmsplit['RECOUP15_PU50'] = 1
        wmsplit['DIGIUP15_PU25'] = 1
        wmsplit['RECOUP15_PU25'] = 1
        wmsplit['DIGIUP15_PU25HS'] = 1
        wmsplit['RECOUP15_PU25HS'] = 1
        wmsplit['DIGIHIMIX'] = 5
        wmsplit['RECOHIMIX'] = 5
        wmsplit['RECODSplit'] = 1
        wmsplit['SingleMuPt10_UP15_ID'] = 1
        wmsplit['DIGIUP15_ID'] = 1
        wmsplit['RECOUP15_ID'] = 1
        wmsplit['TTbar_13_ID'] = 1
        wmsplit['SingleMuPt10FS_ID'] = 1
        wmsplit['TTbarFS_ID'] = 1
        wmsplit['RECODR2_50nsreHLT'] = 5
        wmsplit['RECODR2_25nsreHLT'] = 5
        wmsplit['RECODR2_2016reHLT'] = 5
        wmsplit['RECODR2_50nsreHLT_HIPM'] = 5
        wmsplit['RECODR2_25nsreHLT_HIPM'] = 5
        wmsplit['RECODR2_2016reHLT_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimSingleMu'] = 1
        wmsplit['RECODR2_2016reHLT_skimDoubleEG'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuonEG'] = 1
        wmsplit['RECODR2_2016reHLT_skimJetHT'] = 1
        wmsplit['RECODR2_2016reHLT_skimMET'] = 1
        wmsplit['RECODR2_2016reHLT_skimSinglePh'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuOnia'] = 1
        wmsplit['RECODR2_2016reHLT_skimSingleMu_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimDoubleEG_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuonEG_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimJetHT_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimMET_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimSinglePh_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuOnia_HIPM'] = 1
        wmsplit['RECODR2_2017reHLT_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_skimSingleMu_Prompt_Lumi'] = 1
        wmsplit['RECODR2_2017reHLT_skimDoubleEG_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_skimMET_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_skimMuOnia_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_Prompt_L1TEgDQM'] = 1
        wmsplit['RECODR2_2018reHLT_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimSingleMu_Prompt_Lumi'] = 1
        wmsplit['RECODR2_2018reHLT_skimDoubleEG_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimMET_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuOnia_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimEGamma_Prompt_L1TEgDQM'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuonEG_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimCharmonium_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt_HEfail'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt_BadHcalMitig'] = 1
        wmsplit['RECODR2_2018reHLTAlCaTkCosmics_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimDisplacedJet_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_ZBPrompt'] = 1
        wmsplit['RECODR2_2018reHLT_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimSingleMu_Offline_Lumi'] = 1
        wmsplit['RECODR2_2018reHLT_skimDoubleEG_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimMET_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuOnia_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimEGamma_Offline_L1TEgDQM'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuonEG_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimCharmonium_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Offline_HEfail'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Offline_BadHcalMitig'] = 1
        wmsplit['RECODR2_2018reHLTAlCaTkCosmics_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimDisplacedJet_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_ZBOffline'] = 1
        wmsplit['HLTDR2_50ns'] = 1
        wmsplit['HLTDR2_25ns'] = 1
        wmsplit['HLTDR2_2016'] = 1
        wmsplit['HLTDR2_2017'] = 1
        wmsplit['HLTDR2_2018'] = 1
        wmsplit['HLTDR2_2018_BadHcalMitig'] = 1
        wmsplit['Hadronizer'] = 1
        wmsplit['DIGIUP15'] = 1
        wmsplit['RECOUP15'] = 1
        wmsplit['RECOAODUP15'] = 5
        wmsplit['DBLMINIAODMCUP15NODQM'] = 5
        wmsplit['Digi'] = 5
        wmsplit['Reco'] = 5
        wmsplit['DigiPU'] = 1
        wmsplit['RecoPU'] = 1
        wmsplit['RECOHID11'] = 1
        wmsplit['DIGIUP17'] = 1
        wmsplit['RECOUP17'] = 1
        wmsplit['DIGIUP17_PU25'] = 1
        wmsplit['RECOUP17_PU25'] = 1
        wmsplit['DIGICOS_UP16'] = 1
        wmsplit['RECOCOS_UP16'] = 1
        wmsplit['DIGICOS_UP17'] = 1
        wmsplit['RECOCOS_UP17'] = 1
        wmsplit['DIGICOS_UP18'] = 1
        wmsplit['RECOCOS_UP18'] = 1
        wmsplit['DIGICOS_UP21'] = 1
        wmsplit['RECOCOS_UP21'] = 1
        wmsplit['HYBRIDRepackHI2015VR'] = 1
        wmsplit['HYBRIDZSHI2015'] = 1
        wmsplit['RECOHID15'] = 1
        wmsplit['RECOHID18'] = 1
            if 'PU' not in key:
                continue

            wmsplit['DigiTriggerPU_'  key] = 1
            wmsplit['RecoGlobalPU_'  key] = 1

    except Exception as ex:
        print('Exception while building a wmsplit dictionary: %s' % (str(ex)))
        return {}

    return wmsplit
def prepare(self, mReader, directories, mode='init'):
    wmsplit = MatrixInjector.get_wmsplit()
"
-------------------------------------------------------------------------
"```python
@staticmethod
def get_wmsplit():
    """"""
    Return a ""wmsplit"" dictionary that contain non-default LumisPerJob values
    """"""
    wmsplit = {}
    wmsplit['DIGIHI'] = 5
    wmsplit['RECOHI'] = 5
    wmsplit['HLTD'] = 5
    wmsplit['RECODreHLT'] = 2
    wmsplit['DIGIPU'] = 4
    wmsplit['DIGIPU1'] = 4
    wmsplit['RECOPU1'] = 1
    wmsplit['DIGIUP15_PU50'] = 1
    wmsplit['RECOUP15_PU50'] = 1
    wmsplit['DIGIUP15_PU25'] = 1
    wmsplit['RECOUP15_PU25'] = 1
    wmsplit['DIGIUP15_PU25HS'] = 1
    wmsplit['RECOUP15_PU25HS'] = 1
    wmsplit['DIGIHIMIX'] = 5
    wmsplit['RECOHIMIX'] = 5
    wmsplit['RECODSplit'] = 1
    wmsplit['SingleMuPt10_UP15_ID'] = 1
    wmsplit['DIGIUP15_ID'] = 1
    wmsplit['RECOUP15_ID'] = 1
    wmsplit['TTbar_13_ID'] = 1
    wmsplit['SingleMuPt10FS_ID'] = 1
    wmsplit['TTbarFS_ID'] = 1
    wmsplit['RECODR2_50nsreHLT'] = 5
    wmsplit['RECODR2_25nsreHLT'] = 5
    wmsplit['RECODR2_2016reHLT'] = 5
    # Add other entries as needed

    return wmsplit

def prepare(self, mReader, directories, mode='init'):
    wmsplit = self.get_wmsplit()
```"
-------------------------------------------------------------------------
"@staticmethod
def get_wmsplit():
    """"""
    Return a ""wmsplit"" dictionary that contain non-default LumisPerJob values
    """"""
    wmsplit = {}
        wmsplit['RECODreHLT']=2
"
-------------------------------------------------------------------------
"Recom
PRs: 31122, 31137"
-------------------------------------------------------------------------
=========================================================================
"JetIDWPU = jetpassid;  // && PileupJetIdentifier::passJetId( puidmvaflag, PileupJetIdentifier::kLoose )
"
-------------------------------------------------------------------------
"JetIDWPU = jetpassid && PileupJetIdentifier::passJetId( puidmvaflag, PileupJetIdentifier::kLoose );"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_run2_nanoAOD_106Xv1_cff import run2_nanoAOD_106Xv1
"
-------------------------------------------------------------------------
"Recom
PRs: 30638, 31126"
-------------------------------------------------------------------------
=========================================================================
"from CommonTools.PileupAlgos.Puppi_cff import puppi

from RecoJets.JetProducers.PileupJetID_cfi import pileupJetIdCalculator, pileupJetId
from RecoJets.JetProducers.PileupJetID_cfi import _chsalgos_81x, _chsalgos_94x, _chsalgos_102x

from PhysicsTools.NanoAOD.jets_cff   import jetTable, jetCorrFactorsNano, updatedJets, finalJets, qgtagger
from PhysicsTools.NanoAOD.jets_cff   import genJetTable, genJetFlavourAssociation, genJetFlavourTable
from PhysicsTools.PatAlgos.tools.jetTools import supportedJetAlgos
from PhysicsTools.PatAlgos.tools.jetTools import updateJetCollection
bTagCSVV2    = ['pfDeepCSVJetTags:probb','pfDeepCSVJetTags:probbb','pfDeepCSVJetTags:probc']
bTagCMVAV2   = ['pfCombinedMVAV2BJetTags']
bTagDeepCSV  = ['pfCombinedInclusiveSecondaryVertexV2BJetTags']
bTagDeepJet  = [
'pfDeepFlavourJetTags:probb','pfDeepFlavourJetTags:probbb','pfDeepFlavourJetTags:problepb',
'pfDeepFlavourJetTags:probc','pfDeepFlavourJetTags:probuds','pfDeepFlavourJetTags:probg'

agDiscriminatorsForAK4 = bTagCSVV2bTagCMVAV2bTagDeepCSVbTagDeepJet

- ak4gen (GenJet in NanoAOD), slimmedGenJets in MiniAOD 
- ak8gen (GenJetAK8 in NanoAOD), slimmedGenJetsAK8 in MiniAOD 
  ""jet""     : ""ak8gen"",    
""ak8gen""  : {
  ""name"" : ""GenJetAK8"",
  ""doc""  : ""AK8 Gen jets"",
By default, these collections are saved in the main NanoAODs:
- ak4pfchs   (Jet    in NanoAOD), slimmedJets in MiniAOD  
- ak8pfpuppi (FatJet in NanoAOD), slimmedJetsAK8 in MiniAOD 
Below is a list of recojets that we can save in NanoAOD. Set 
""enabled"" to true if you want to store the recojet collection.
  ""genJetsCollection"": ""AK4GenJetsNoNu"",  
  ""inputCollection"" : """",
  ""genJetsCollection"": ""AK4GenJetsNoNu"",  
}, 
{ 
  ""jet"" : ""ak4pfpuppi"",  
  ""enabled"" : True,        
  ""genJetsCollection"": ""AK4GenJetsNoNu"",  
  ""bTagDiscriminators"": bTagDiscriminatorsForAK4
"
-------------------------------------------------------------------------
"```python
from CommonTools.PileupAlgos.Puppi_cff import puppi

from RecoJets.JetProducers.PileupJetID_cfi import pileupJetIdCalculator, pileupJetId
from RecoJets.JetProducers.PileupJetID_cfi import _chsalgos_81x, _chsalgos_94x, _chsalgos_102x

from PhysicsTools.NanoAOD.jets_cff import jetTable, jetCorrFactorsNano, updatedJets, finalJets, qgtagger
from PhysicsTools.NanoAOD.jets_cff import genJetTable, genJetFlavourAssociation, genJetFlavourTable
from PhysicsTools.PatAlgos.tools.jetTools import supportedJetAlgos, updateJetCollection

bTagCSVV2 = ['pfDeepCSVJetTags:probb','pfDeepCSVJetTags:probbb','pfDeepCSVJetTags:probc']
bTagCMVAV2 = ['pfCombinedMVAV2BJetTags']
bTagDeepCSV = ['pfCombinedInclusiveSecondaryVertexV2BJetTags']
bTagDeepJet = [
    'pfDeepFlavourJetTags:probb','pfDeepFlavourJetTags:probbb','pfDeepFlavourJetTags:problepb',
    'pfDeepFlavourJetTags:probc','pfDeepFlavourJetTags:probuds','pfDeepFlavourJetTags:probg'
]

bTagDiscriminatorsForAK4 = bTagCSVV2 + bTagCMVAV2 + bTagDeepCSV + bTagDeepJet

config_genjets = [
    { 
        ""enabled"": False, 
    },  
]
config_genjets = list(filter(lambda k: k['enabled'], config_genjets))

config_recojets = [
    { 
        ""jet"": ""ak4gen"",    
        ""enabled"": True,     
        ""inputCollection"": ""slimmedGenJets"", 
    }, 
    { 
        ""jet"": ""ak8gen"",  
        ""enabled"": True,        
        ""inputCollection"": ""slimmedGenJetsAK8"", 
    }, 
    { 
        ""jet"": ""ak4pfchs"",  
        ""enabled"": True,        
        ""inputCollection"": ""slimmedJets"", 
        ""genJetsCollection"": ""AK4GenJetsNoNu"",  
    }, 
    { 
        ""jet"": ""ak8pfpuppi"",  
        ""enabled"": True,        
        ""inputCollection"": ""slimmedJetsAK8"", 
        ""genJetsCollection"": ""AK4GenJetsNoNu"",
        ""bTagDiscriminators"": bTagDiscriminatorsForAK4
    }, 
]
```"
-------------------------------------------------------------------------
"from CommonTools.PileupAlgos.Puppi_cff import puppi

from RecoJets.JetProducers.PileupJetID_cfi import pileupJetIdCalculator, pileupJetId
from RecoJets.JetProducers.PileupJetID_cfi import _chsalgos_81x, _chsalgos_94x, _chsalgos_102x

from PhysicsTools.NanoAOD.jets_cff   import jetTable, jetCorrFactorsNano, updatedJets, finalJets, qgtagger
from PhysicsTools.NanoAOD.jets_cff   import genJetTable, genJetFlavourAssociation, genJetFlavourTable
from PhysicsTools.PatAlgos.tools.jetTools import supportedJetAlgos
from PhysicsTools.PatAlgos.tools.jetTools import updateJetCollection
bTagCSVV2    = ['pfDeepCSVJetTags:probb','pfDeepCSVJetTags:probbb','pfDeepCSVJetTags:probc']
bTagCMVAV2   = ['pfCombinedMVAV2BJetTags']
bTagDeepCSV  = ['pfCombinedInclusiveSecondaryVertexV2BJetTags']
bTagDeepJet  = [
'pfDeepFlavourJetTags:probb','pfDeepFlavourJetTags:probbb','pfDeepFlavourJetTags:problepb',
'pfDeepFlavourJetTags:probc','pfDeepFlavourJetTags:probuds','pfDeepFlavourJetTags:probg'

agDiscriminatorsForAK4 = bTagCSVV2bTagCMVAV2bTagDeepCSVbTagDeepJet

- ak4gen (GenJet in NanoAOD), slimmedGenJets in MiniAOD 
- ak8gen (GenJetAK8 in NanoAOD), slimmedGenJetsAK8 in MiniAOD 
  ""jet""     : ""ak8gen"",    
""ak8gen""  : {
  ""name"" : ""GenJetAK8"",
  ""doc""  : ""AK8 Gen jets"",
By default, these collections are saved in the main NanoAODs:
- ak4pfchs   (Jet    in NanoAOD), slimmedJets in MiniAOD  
- ak8pfpuppi (FatJet in NanoAOD), slimmedJetsAK8 in MiniAOD 
Below is a list of recojets that we can save in NanoAOD. Set 
""enabled"" to true if you want to store the recojet collection.
  ""genJetsCollection"": ""AK4GenJetsNoNu"",  
  ""inputCollection"" : """",
  ""genJetsCollection"": ""AK4GenJetsNoNu"",  
}, 
{ 
  ""jet"" : ""ak4pfpuppi"",  
  ""enabled"" : True,        
  ""genJetsCollection"": ""AK4GenJetsNoNu"",  
  ""bTagDiscriminators"": bTagDiscriminatorsForAK4
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"""name""  : ""JetPuppi"",
""doc""   : ""AK4 PF Puppi jets with JECs applied, after basic selection (pt > 2)"",  
""ptcut"" : ""pt > 2"",      
""doQGL"" : True,
""doPUIDVar"": True,
""doBTag"": True,
""name""  : ""JetPF"",
""doc""   : ""AK4 PF jets with JECs applied, after basic selection (pt > 2)"",
""ptcut"" : ""pt > 2"",   
k4calo"" : {
""name"": ""JetCalo"",
""doc"" : ""AK4 Calo jets with JECs applied"",
""name""  : ""FatJetCHS"",
""doc""   : ""AK8 PF CHS jets with JECs applied, after basic selection (pt > 100)"", 
""ptcut"" : ""pt > 100""    
k8pf"" : {
""name""  : ""FatJetPF"",
""doc""   : ""AK8 PF jets with JECs applied, after basic selection (pt > 100)"", 
""ptcut"" : ""pt > 100"", 

ETVARS = cms.PSet(P4Vars,
onstituents   = jetTable.variables.nConstituents,

TVARS = cms.PSet(P4Vars,
wFactor       = jetTable.variables.rawFactor,
ea            = jetTable.variables.area,
HEF           = jetTable.variables.chHEF,
HEF           = jetTable.variables.neHEF,
EmEF          = jetTable.variables.chEmEF,
EmEF          = jetTable.variables.neEmEF,
EF            = jetTable.variables.muEF,
HEF           = Var(""HFHadronEnergyFraction()"",float,doc = ""hadronic energy fraction in HF"",precision = 6),
EmEF          = Var(""HFEMEnergyFraction()"",float,doc = ""electromagnetic energy fraction in HF"",precision = 6),
uons          = jetTable.variables.nMuons,
lectrons      = jetTable.variables.nElectrons,
onstituents   = jetTable.variables.nConstituents,
onstChHads    = Var(""chargedHadronMultiplicity()"",int,doc=""number of charged hadrons in the jet""),
onstNeuHads   = Var(""neutralHadronMultiplicity()"",int,doc=""number of neutral hadrons in the jet""),
onstHFHads    = Var(""HFHadronMultiplicity()"", int,doc=""number of HF hadrons in the jet""),
onstHFEMs     = Var(""HFEMMultiplicity()"",int,doc=""number of HF EMs in the jet""),
onstMuons     = Var(""muonMultiplicity()"",int,doc=""number of muons in the jet""),
onstElecs     = Var(""electronMultiplicity()"",int,doc=""number of electrons in the jet""),
onstPhotons   = Var(""photonMultiplicity()"",int,doc=""number of photons in the jet""),

VARS = cms.PSet(
Id_dR2Mean    = Var(""userFloat('puId_dR2Mean')"",float,doc=""pT^2-weighted average square distance of jet constituents from the jet axis (PileUp ID BDT input variable)"", precision= 6),
Id_majW       = Var(""userFloat('puId_majW')"",float,doc=""major axis of jet ellipsoid in eta-phi plane (PileUp ID BDT input variable)"", precision= 6)  ,
Id_minW       = Var(""userFloat('puId_minW')"",float,doc=""minor axis of jet ellipsoid in eta-phi plane (PileUp ID BDT input variable)"", precision= 6)  ,
Id_frac01     = Var(""userFloat('puId_frac01')"",float,doc=""fraction of constituents' pT contained within dR <0.1 (PileUp ID BDT input variable)"", precision= 6)  ,
Id_frac02     = Var(""userFloat('puId_frac02')"",float,doc=""fraction of constituents' pT contained within 0.1< dR <0.2 (PileUp ID BDT input variable)"", precision= 6) ,
Id_frac03     = Var(""userFloat('puId_frac03')"",float,doc=""fraction of constituents' pT contained within 0.2< dR <0.3 (PileUp ID BDT input variable)"", precision= 6) ,
Id_frac04     = Var(""userFloat('puId_frac04')"",float,doc=""fraction of constituents' pT contained within 0.3< dR <0.4 (PileUp ID BDT input variable)"", precision= 6) ,
Id_ptD        = Var(""userFloat('puId_ptD')"",float,doc=""pT-weighted average pT of constituents (PileUp ID BDT input variable)"", precision= 6) ,
Id_beta       = Var(""userFloat('puId_beta')"",float,doc=""fraction of pT of charged constituents associated to PV (PileUp ID BDT input variable)"", precision= 6) ,
Id_pull       = Var(""userFloat('puId_pull')"",float,doc=""magnitude of pull vector (PileUp ID BDT input variable)"", precision= 6) ,
Id_jetR       = Var(""userFloat('puId_jetR')"",float,doc=""fraction of jet pT carried by the leading constituent (PileUp ID BDT input variable)"", precision= 6) ,
Id_jetRchg    = Var(""userFloat('puId_jetRchg')"",float,doc=""fraction of jet pT carried by the leading charged constituent (PileUp ID BDT input variable)"", precision= 6) ,
Id_nCharged   = Var(""userInt('puId_nCharged')"",int,doc=""number of charged constituents (PileUp ID BDT input variable)""),

ARS = cms.PSet(
l_axis2       =  Var(""userFloat('qgl_axis2')"",float,doc=""ellipse minor jet axis (Quark vs Gluon likelihood input variable)"", precision= 6),
l_ptD         =  Var(""userFloat('qgl_ptD')"",float,doc=""pT-weighted average pT of constituents (Quark vs Gluon likelihood input variable)"", precision= 6),
l_mult        =  Var(""userInt('qgl_mult')"", int,doc=""PF candidates multiplicity (Quark vs Gluon likelihood input variable)""),

VARS = cms.PSet(
agCMVA  = jetTable.variables.btagCMVA,
agDeepB = jetTable.variables.btagDeepB,
agCSVV2 = jetTable.variables.btagCSVV2,
agDeepC = jetTable.variables.btagDeepC,

JETVARS = cms.PSet(
agDeepFlavB   = jetTable.variables.btagDeepFlavB,
agDeepFlavC   = jetTable.variables.btagDeepFlavC,
agDeepFlavG   = Var(""bDiscriminator('pfDeepFlavourJetTags:probg')"",float,doc=""DeepFlavour gluon tag raw score"",precision=10),
agDeepFlavUDS = Var(""bDiscriminator('pfDeepFlavourJetTags:probuds')"",float,doc=""DeepFlavour uds tag raw score"",precision=10)

JETVARS = cms.PSet(P4Vars,
f       = Var(""emEnergyFraction()"", float, doc = ""electromagnetic energy fraction"", precision = 10),

***************************************

co Jets related functions

***************************************
AddJetID(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName=""""):
tup modules to calculate PF jet ID 

PUPPIJet = True if ""Puppi"" in jetName else False

oseJetId = ""looseJetId{}"".format(jetName)
tattr(proc, looseJetId, proc.looseJetId.clone(
  src = jetSrc,
  filterParams=proc.looseJetId.filterParams.clone(
    version =""WINTER16""
  ),

ghtJetId = ""tightJetId{}"".format(jetName)
tattr(proc, tightJetId, proc.tightJetId.clone(
  src = jetSrc,
  filterParams=proc.tightJetId.filterParams.clone(
    version = ""SUMMER18{}"".format(""PUPPI"" if isPUPPIJet else """")
  ),
)


ghtJetIdLepVeto = ""tightJetIdLepVeto{}"".format(jetName)
tattr(proc, tightJetIdLepVeto, proc.tightJetIdLepVeto.clone(
  src = jetSrc,
  filterParams=proc.tightJetIdLepVeto.filterParams.clone(
    version = ""SUMMER18{}"".format(""PUPPI"" if isPUPPIJet else """")
  ),

n2_jme_2016.toModify(getattr(proc, tightJetId) .filterParams,        version = ""WINTER16"" )
n2_jme_2016.toModify(getattr(proc, tightJetIdLepVeto) .filterParams, version = ""WINTER16"" )
n2_jme_2017.toModify(getattr(proc, tightJetId) .filterParams,        version = ""WINTER17{}"".format(""PUPPI"" if isPUPPIJet else """"))
n2_jme_2017.toModify(getattr(proc, tightJetIdLepVeto) .filterParams, version = ""WINTER17{}"".format(""PUPPI"" if isPUPPIJet else """"))


Save variables as userInts in each jet

tJetWithUserData = ""{}WithUserData"".format(jetSrc)
tattr(proc, patJetWithUserData).userInts.tightId = cms.InputTag(tightJetId)
tattr(proc, patJetWithUserData).userInts.tightIdLepVeto = cms.InputTag(tightJetIdLepVeto)
n2_jme_2016.toModify(getattr(proc, patJetWithUserData).userInts, looseId = cms.InputTag(looseJetId))

Specfiy variables in the jetTable to save in NanoAOD

tattr(proc, jetTableName).variables.jetId = Var(""userInt('tightId')*24*userInt('tightIdLepVeto')"",int,doc=""Jet ID flags bit1 is loose (always false in 2017 since it does not exist), bit2 is tight, bit3 is tightLepVeto"")
n2_jme_2016.toModify(getattr(proc, jetTableName).variables, jetId = Var(""userInt('tightIdLepVeto')*4userInt('tightId')*2userInt('looseId')"",int, doc=""Jet ID flags bit1 is loose, bit2 is tight, bit3 is tightLepVeto""))
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, tightJetId))
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, tightJetId))1, getattr(proc, tightJetIdLepVeto))

tattr(proc,""_""jetSequenceName""_2016"", getattr(proc,jetSequenceName).copy())
tattr(proc,""_""jetSequenceName""_2016"").insert(getattr(proc, ""_""jetSequenceName""_2016"").index(getattr(proc, tightJetId)), getattr(proc, looseJetId))
n2_jme_2016.toReplaceWith(getattr(proc,jetSequenceName), getattr(proc, ""_""jetSequenceName""_2016""))
turn proc

AddPileUpJetIDVars(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName=""""):
""
tup modules to calculate pileup jet ID input variables for PF jet
""
Calculate pileup jet ID variables
JetIdVarsCalculator = ""puJetIdCalculator{}"".format(jetName) 
tattr(proc, puJetIdVarsCalculator, pileupJetIdCalculator.clone(
  jets = jetSrc,
  vertexes  = ""offlineSlimmedPrimaryVertices"",
  inputIsCorrected = True,
  applyJec  = False,
  usePuppi = True if ""Puppi"" in jetName else False
)
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, puJetIdVarsCalculator))
JetIDVar = ""puJetIDVar{}"".format(jetName)
tattr(proc, puJetIDVar, cms.EDProducer(""PileupJetIDVarProducer"",
  srcJet = cms.InputTag(jetSrc),    
  srcPileupJetId = cms.InputTag(puJetIdVarsCalculator)
)
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, puJetIdVarsCalculator))1, getattr(proc, puJetIDVar))
Save variables as userFloats and userInts for each jet
tJetWithUserData = ""{}WithUserData"".format(jetSrc)
tattr(proc,patJetWithUserData).userFloats.puId_dR2Mean  = cms.InputTag(""{}:dR2Mean"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_majW     = cms.InputTag(""{}:majW"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_minW     = cms.InputTag(""{}:minW"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac01   = cms.InputTag(""{}:frac01"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac02   = cms.InputTag(""{}:frac02"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac03   = cms.InputTag(""{}:frac03"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac04   = cms.InputTag(""{}:frac04"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_ptD      = cms.InputTag(""{}:ptD"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_beta     = cms.InputTag(""{}:beta"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_pull     = cms.InputTag(""{}:pull"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_jetR     = cms.InputTag(""{}:jetR"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_jetRchg  = cms.InputTag(""{}:jetRchg"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userInts.puId_nCharged   = cms.InputTag(""{}:nCharged"".format(puJetIDVar))


Specfiy variables in the jet table to save in NanoAOD

tattr(proc,jetTableName).variables.puId_dR2Mean  = PUIDVARS.puId_dR2Mean 
tattr(proc,jetTableName).variables.puId_majW     = PUIDVARS.puId_majW    
tattr(proc,jetTableName).variables.puId_minW     = PUIDVARS.puId_minW    
tattr(proc,jetTableName).variables.puId_frac01   = PUIDVARS.puId_frac01  
tattr(proc,jetTableName).variables.puId_frac02   = PUIDVARS.puId_frac02  
tattr(proc,jetTableName).variables.puId_frac03   = PUIDVARS.puId_frac03  
tattr(proc,jetTableName).variables.puId_frac04   = PUIDVARS.puId_frac04  
tattr(proc,jetTableName).variables.puId_ptD      = PUIDVARS.puId_ptD      
tattr(proc,jetTableName).variables.puId_beta     = PUIDVARS.puId_beta    
tattr(proc,jetTableName).variables.puId_pull     = PUIDVARS.puId_pull     
tattr(proc,jetTableName).variables.puId_jetR     = PUIDVARS.puId_jetR    
tattr(proc,jetTableName).variables.puId_jetRchg  = PUIDVARS.puId_jetRchg 
tattr(proc,jetTableName).variables.puId_nCharged = PUIDVARS.puId_nCharged 

turn proc

AddQGLTaggerVars(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName="""", calculateQGLVars=False):
""
hedule the QGTagger module to calculate input variables to the QG likelihood 
""

LTagger=""qgtagger{}"".format(jetName)
tJetWithUserData=""{}WithUserData"".format(jetSrc)

 calculateQGLVars:
setattr(proc, QGLTagger, qgtagger.clone(
    srcJets=jetSrc
  )
)
Save variables as userFloats and userInts for each jet
tattr(proc,patJetWithUserData).userFloats.qgl_axis2 = cms.InputTag(QGLTagger"":axis2"")
tattr(proc,patJetWithUserData).userFloats.qgl_ptD   = cms.InputTag(QGLTagger"":ptD"")
tattr(proc,patJetWithUserData).userInts.qgl_mult    = cms.InputTag(QGLTagger"":mult"")

Specfiy variables in the jet table to save in NanoAOD
tattr(proc,jetTableName).variables.qgl_axis2 =  QGLVARS.qgl_axis2
tattr(proc,jetTableName).variables.qgl_ptD   =  QGLVARS.qgl_ptD
tattr(proc,jetTableName).variables.qgl_mult  =  QGLVARS.qgl_mult

 calculateQGLVars:
getattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, QGLTagger))

turn proc

AddBTaggingScores(proc, jetTableName=""""):
""
ore b-tagging scores from various algortihm
""

tattr(proc, jetTableName).variables.btagCMVA      = jetTable.variables.btagCMVA
tattr(proc, jetTableName).variables.btagDeepB     = jetTable.variables.btagDeepB
tattr(proc, jetTableName).variables.btagCSVV2     = jetTable.variables.btagCSVV2
tattr(proc, jetTableName).variables.btagDeepC     = jetTable.variables.btagDeepC
tattr(proc, jetTableName).variables.btagDeepFlavB = jetTable.variables.btagDeepFlavB
tattr(proc, jetTableName).variables.btagDeepFlavC = jetTable.variables.btagDeepFlavC

turn proc

AddDeepJetGluonLQuarkScores(proc, jetTableName=""""):
""
ore DeepJet raw score in jetTable for gluon and light quark
""

tattr(proc, jetTableName).variables.btagDeepFlavG   = DEEPJETVARS.btagDeepFlavG  
tattr(proc, jetTableName).variables.btagDeepFlavUDS = DEEPJETVARS.btagDeepFlavUDS

turn proc

AddNewPatJets(proc, recoJetInfo, runOnMC):
""
d patJet into custom nanoAOD
""

tName = recoJetInfo.jetUpper
yload = recoJetInfo.jetCorrPayload 
PF    = recoJetInfo.doPF
Calo  = recoJetInfo.doCalo

 recoJetInfo.inputCollection != """":
patJetFinalColl = recoJetInfo.inputCollection
se: 
patJetFinalColl = ""selectedUpdatedPatJets{}Final"".format(jetName)

 doCalo:
patJetFinalColl = ""selectedPatJets{}"".format(jetName)

noInfoForJet = nanoInfo_recojets[recoJetInfo.jet]
tTablePrefix = nanoInfoForJet[""name""]
tTableDoc    = nanoInfoForJet[""doc""]
cut          = nanoInfoForJet[""ptcut""] if ""ptcut"" in nanoInfoForJet else """"
PUIDVar      = nanoInfoForJet[""doPUIDVar""] if ""doPUIDVar"" in nanoInfoForJet else False
QGL          = nanoInfoForJet[""doQGL""] if ""doQGL"" in nanoInfoForJet else False
BTag         = nanoInfoForJet[""doBTag""] if ""doBTag"" in nanoInfoForJet else False

vePatJets(proc, 
jetName, payload, patJetFinalColl, jetTablePrefix, jetTableDoc, doPF, doCalo, 
ptcut=ptcut, doPUIDVar=doPUIDVar, doQGL=doQGL, doBTag=doBTag, runOnMC=runOnMC


turn proc

SavePatJets(proc, jetName, payload, patJetFinalColl, jetTablePrefix, jetTableDoc, 
            doPF, doCalo, ptcut="""", doPUIDVar=False, doQGL=False, doBTag=False, runOnMC=False):
""
hedule modules for a given patJet collection and save its variables into custom NanoAOD
""
Setup jet correction factors
tCorrFactors = ""jetCorrFactorsNano{}"".format(jetName)
tattr(proc, jetCorrFactors, jetCorrFactorsNano.clone(
  src = patJetFinalColl,
  payload = payload,
)

Update jets
cJets = ""updatedJets{}"".format(jetName)
tattr(proc, srcJets, updatedJets.clone(
  jetSource = patJetFinalColl,
  jetCorrFactorsSource=[jetCorrFactors],
)


Setup UserDataEmbedder
cJetsWithUserData = ""updatedJets{}WithUserData"".format(jetName)
tattr(proc, srcJetsWithUserData, cms.EDProducer(""PATJetUserDataEmbedder"",
  src = cms.InputTag(srcJets),
  userFloats = cms.PSet(),    
  userInts = cms.PSet(),
)


Filter jets with pt cut
nalJetsForTable = ""finalJets{}"".format(jetName)
tattr(proc, finalJetsForTable, finalJets.clone(
  src = srcJetsWithUserData,
  cut = ptcut
)


Save jets in table
bleContent = PFJETVARS
 doCalo:
tableContent =  CALOJETVARS

tTable = ""jet{}Table"".format(jetName)
tattr(proc,jetTable, cms.EDProducer(""SimpleCandidateFlatTableProducer"",
  src = cms.InputTag(finalJetsForTable),
  cut = cms.string(""""), # Don't specify cuts here
  name = cms.string(jetTablePrefix),
  doc  = cms.string(jetTableDoc),
  singleton = cms.bool(False), # the number of entries is variable
  extension = cms.bool(False), # this is the main table for the jets
  variables = cms.PSet(tableContent)
)

tattr(proc,jetTable).variables.pt.precision=10


Save MC-only jet variables in table

tMCTable = ""jet{}MCTable"".format(jetName)
tattr(proc, jetMCTable, cms.EDProducer(""SimpleCandidateFlatTableProducer"",
  src = cms.InputTag(finalJetsForTable),
  cut = getattr(proc,jetTable).cut,
  name = cms.string(jetTablePrefix),
  singleton = cms.bool(False),
  extension = cms.bool(True), # this is an extension table
  variables = cms.PSet(
    partonFlavour = Var(""partonFlavour()"", int, doc=""flavour from parton matching""),
    hadronFlavour = Var(""hadronFlavour()"", int, doc=""flavour from hadron ghost clustering""),
    genJetIdx = Var(""?genJetFwdRef().backRef().isNonnull()?genJetFwdRef().backRef().key():-1"", int, doc=""index of matched gen jet""),
  )
)


Define the jet modules sequence first
tSequenceName = ""jet{}Sequence"".format(jetName)
tattr(proc, jetSequenceName, cms.Sequence(
  getattr(proc,jetCorrFactors)
  getattr(proc,srcJets)
  getattr(proc,srcJetsWithUserData)
  getattr(proc,finalJetsForTable)
)


Define the jet table sequences 
tTableSequenceName = ""jet{}TablesSequence"".format(jetName)
tattr(proc, jetTableSequenceName, cms.Sequence(getattr(proc,jetTable)))
tTableSequenceMCName = ""jet{}MCTablesSequence"".format(jetName)
tattr(proc, jetTableSequenceMCName, cms.Sequence(getattr(proc,jetMCTable)))

 runOnMC:
proc.nanoSequenceMC = getattr(proc,jetSequenceName)
proc.nanoSequenceMC = getattr(proc,jetTableSequenceName)
proc.nanoSequenceMC = getattr(proc,jetTableSequenceMCName)
se:
proc.nanoSequence = getattr(proc,jetSequenceName)
proc.nanoSequence = getattr(proc,jetTableSequenceName)


Schedule plugins to calculate Jet ID, PileUp Jet ID input variables, and Quark-Gluon Likehood input variables.

 doPF:
proc = AddJetID(proc, jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName)
if doPUIDVar:
  proc = AddPileUpJetIDVars(proc, jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName)
if doQGL:
  proc = AddQGLTaggerVars(proc,jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName, calculateQGLVars=True)

Save b-tagging algorithm scores. Should only be done for jet collection with b-tagging 
calculated when reclustered or collection saved with b-tagging info in MiniAOD

 doBTag:
AddBTaggingScores(proc,jetTableName=jetTable)
AddDeepJetGluonLQuarkScores(proc,jetTableName=jetTable)

turn proc

ReclusterAK4CHSJets(proc, recoJA, runOnMC):
""
cluster AK4 CHS jets and replace slimmedJets
at is used as default to save AK4 CHS jets 
 NanoAODs.  
""
int(""custom_jme_cff::ReclusterAK4CHSJets: Recluster AK4 PF CHS jets"")
Recluster AK4 CHS jets

g = { 
""jet"" : ""ak4pfchs"",   
""inputCollection"" : """",                 
""genJetsCollection"": ""AK4GenJetsNoNu"",
""bTagDiscriminators"": bTagDiscriminatorsForAK4

coJetInfo = recoJA.addRecoJetCollection(proc, **cfg) 

tName = recoJetInfo.jetUpper
tJetFinalColl = ""selectedUpdatedPatJets{}Final"".format(jetName)


Change the input jet source for jetCorrFactorsNano 
and updatedJets
oc.jetCorrFactorsNano.src=patJetFinalColl
oc.updatedJets.jetSource=patJetFinalColl


Change pt cut

oc.finalJets.cut = ""pt > 2""
oc.simpleCleanerTable.jetSel = ""pt > 10"" # Change this from 15 -> 10 


Add variables 

oc.jetTable.variables.hfHEF         = PFJETVARS.hfHEF
oc.jetTable.variables.hfEmEF        = PFJETVARS.hfEmEF
oc.jetTable.variables.nConstChHads  = PFJETVARS.nConstChHads
oc.jetTable.variables.nConstNeuHads = PFJETVARS.nConstNeuHads
oc.jetTable.variables.nConstHFHads  = PFJETVARS.nConstHFHads
oc.jetTable.variables.nConstHFEMs   = PFJETVARS.nConstHFEMs
oc.jetTable.variables.nConstMuons   = PFJETVARS.nConstMuons
oc.jetTable.variables.nConstElecs   = PFJETVARS.nConstElecs
oc.jetTable.variables.nConstPhotons = PFJETVARS.nConstPhotons

oc.jetTable.doc = cms.string(""AK4 PF CHS Jets with JECs applied, after basic selection (pt > 2)"")


Setup pileup jet ID with 80X training.
leupJetId80X = ""pileupJetId80X""
tattr(proc, pileupJetId80X, pileupJetId.clone(
  jets=""updatedJets"",
  algos=cms.VPSet(_chsalgos_81x),
  inputIsCorrected=True,
  applyJec=False,
  vertexes=""offlineSlimmedPrimaryVertices""
)

oc.jetSequence.insert(proc.jetSequence.index(proc.pileupJetId94X), getattr(proc, pileupJetId80X)) 

oc.updatedJetsWithUserData.userInts.puId80XfullId = cms.InputTag('pileupJetId80X:fullId')
n2_jme_2016.toModify(proc.updatedJetsWithUserData.userFloats, puId80XDisc = cms.InputTag(""pileupJetId80X:fullDiscriminant""))

oc.jetTable.variables.puId = Var(""userInt('puId80XfullId')"", int, doc=""Pilup ID flags with 80X (2016) training"")
n2_jme_2016.toModify(proc.jetTable.variables, puIdDisc = Var(""userFloat('puId80XDisc')"",float,doc=""Pilup ID discriminant with 80X (2016) training"",precision=10))

oc = AddPileUpJetIDVars(proc, 
jetName="""", 
jetSrc=""updatedJets"", 
jetTableName=""jetTable"",
jetSequenceName=""jetSequence""

Save variables as userFloats and userInts in each jet

oc.updatedJetsWithUserData.userFloats.qgl_axis2 = cms.InputTag(""qgtagger:axis2"")
oc.updatedJetsWithUserData.userFloats.qgl_ptD   = cms.InputTag(""qgtagger:ptD"")
oc.updatedJetsWithUserData.userInts.qgl_mult    = cms.InputTag(""qgtagger:mult"")

Specfiy variables in the jetTable to save in NanoAOD

oc.jetTable.variables.qgl_axis2 =  QGLVARS.qgl_axis2
oc.jetTable.variables.qgl_ptD   =  QGLVARS.qgl_ptD
oc.jetTable.variables.qgl_mult  =  QGLVARS.qgl_mult
Save DeepJet raw score for gluon and light quarks
oc.jetTable.variables.btagDeepFlavG   = DEEPJETVARS.btagDeepFlavG  
oc.jetTable.variables.btagDeepFlavUDS = DEEPJETVARS.btagDeepFlavUDS

turn proc

AddVariablesForAK8PuppiJets(proc):
""
d more variables for AK8 PFPUPPI jets
""

 These variables are not stored for AK8PFCHS (slimmedJetsAK8)
 in MiniAOD if their pt < 170 GeV. Hence the conditional fill.

oc.fatJetTable.variables.chHEF  = Var(""?isPFJet()?chargedHadronEnergyFraction():-1"", float, doc=""charged Hadron Energy Fraction"", precision = 6)
oc.fatJetTable.variables.neHEF  = Var(""?isPFJet()?neutralHadronEnergyFraction():-1"", float, doc=""neutral Hadron Energy Fraction"", precision = 6)
oc.fatJetTable.variables.chEmEF = Var(""?isPFJet()?chargedEmEnergyFraction():-1"", float, doc=""charged Electromagnetic Energy Fraction"", precision = 6)
oc.fatJetTable.variables.neEmEF = Var(""?isPFJet()?neutralEmEnergyFraction():-1"", float, doc=""neutral Electromagnetic Energy Fraction"", precision = 6)
oc.fatJetTable.variables.muEF   = Var(""?isPFJet()?muonEnergyFraction():-1"", float, doc=""muon Energy Fraction"", precision = 6)
oc.fatJetTable.variables.hfHEF  = Var(""?isPFJet()?HFHadronEnergyFraction():-1"", float, doc=""energy fraction in forward hadronic calorimeter"", precision = 6)
oc.fatJetTable.variables.hfEmEF = Var(""?isPFJet()?HFEMEnergyFraction():-1"", float, doc=""energy fraction in forward EM calorimeter"", precision = 6)
oc.fatJetTable.variables.nConstChHads   = Var(""?isPFJet()?chargedHadronMultiplicity():-1"",int, doc=""number of charged hadrons in the jet"")
oc.fatJetTable.variables.nConstNeuHads  = Var(""?isPFJet()?neutralHadronMultiplicity():-1"",int, doc=""number of neutral hadrons in the jet"")
oc.fatJetTable.variables.nConstHFHads   = Var(""?isPFJet()?HFHadronMultiplicity():-1"", int, doc=""number of HF Hadrons in the jet"")
oc.fatJetTable.variables.nConstHFEMs    = Var(""?isPFJet()?HFEMMultiplicity():-1"", int, doc=""number of HF EMs in the jet"")
oc.fatJetTable.variables.nConstMuons    = Var(""?isPFJet()?muonMultiplicity():-1"", int, doc=""number of muons in the jet"")
oc.fatJetTable.variables.nConstElecs    = Var(""?isPFJet()?electronMultiplicity():-1"", int, doc=""number of electrons in the jet"")
oc.fatJetTable.variables.nConstPhotons  = Var(""?isPFJet()?photonMultiplicity():-1"", int, doc=""number of photons in the jet"")

turn proc
***************************************


n Jets related functions


***************************************
AddNewGenJets(proc, genJetInfo):
""
d genJet into custom nanoAOD
""

nJetName         = genJetInfo.jetUpper
nJetAlgo         = genJetInfo.jetAlgo
nJetSize         = genJetInfo.jetSize
nJetSizeNr       = genJetInfo.jetSizeNr
nJetFinalColl    = ""{}{}{}"".format(genJetAlgo.upper(), genJetSize, ""GenJetsNoNu"")
nJetTablePrefix  = nanoInfo_genjets[genJetInfo.jet][""name""]
nJetTableDoc     = nanoInfo_genjets[genJetInfo.jet][""doc""]
veGenJets(proc, genJetName, genJetAlgo, genJetSizeNr, genJetFinalColl, genJetTablePrefix, genJetTableDoc, runOnMC=False)

turn proc

SaveGenJets(proc, genJetName, genJetAlgo, genJetSizeNr, genJetFinalColl, genJetTablePrefix, genJetTableDoc, runOnMC=False):
""
hedule modules for a given genJet collection and save its variables into custom NanoAOD
""

nJetTableThisJet = ""jet{}Table"".format(genJetName)
tattr(proc, genJetTableThisJet, genJetTable.clone(
  src       = genJetFinalColl,
  cut       = ""pt > 1"",
  name      = genJetTablePrefix,
  doc       = genJetTableDoc,
  variables = GENJETVARS
)


nJetFlavourAssociationThisJet = ""genJet{}FlavourAssociation"".format(genJetName)
tattr(proc, genJetFlavourAssociationThisJet, genJetFlavourAssociation.clone(
  jets           = getattr(proc,genJetTableThisJet).src,
  jetAlgorithm   = supportedJetAlgos[genJetAlgo],
  rParam         = genJetSizeNr,
)


nJetFlavourTableThisJet = ""genJet{}FlavourTable"".format(genJetName)
tattr(proc, genJetFlavourTableThisJet, genJetFlavourTable.clone(
  name            = getattr(proc,genJetTableThisJet).name,
  src             = getattr(proc,genJetTableThisJet).src,
  cut             = getattr(proc,genJetTableThisJet).cut,
  jetFlavourInfos = genJetFlavourAssociationThisJet,
)


nJetSequenceName = ""genJet{}Sequence"".format(genJetName)
tattr(proc, genJetSequenceName, cms.Sequence(
  getattr(proc,genJetTableThisJet)
  getattr(proc,genJetFlavourAssociationThisJet)
  getattr(proc,genJetFlavourTableThisJet)
)

oc.nanoSequenceMC.insert(proc.nanoSequenceMC.index(proc.jetMC)1, getattr(proc,genJetSequenceName)) 

turn proc

ReclusterAK4GenJets(proc, genJA):
""
cluster AK4 Gen jets and replace 
immedGenJets that is used as default 
 save AK4 Gen jets in NanoAODs. 
""
int(""custom_jme_cff::ReclusterAK4GenJets: Recluster AK4 Gen jets"")
Recluster AK4 Gen jet
g = { 
""jet"" : ""ak4gen"",   

nJetInfo = genJA.addGenJetCollection(proc, **cfg)
nJetName            = genJetInfo.jetUpper
nJetAlgo            = genJetInfo.jetAlgo
nJetSize            = genJetInfo.jetSize
nJetSizeNr          = genJetInfo.jetSizeNr
lectedPatGenJets    = ""{}{}{}"".format(genJetAlgo.upper(), genJetSize, ""GenJetsNoNu"")


Change jet source to the newly clustered jet collection. Set very low pt cut for jets 
to be stored in the GenJet Table

oc.genJetTable.src = selectedPatGenJets
oc.genJetTable.cut = ""pt > 1""
oc.genJetTable.doc  =""AK4 Gen jets (made with visible genparticles)""

nJetFlavourAssociationThisJet = ""genJet{}FlavourAssociation"".format(genJetName)
tattr(proc, genJetFlavourAssociationThisJet, genJetFlavourAssociation.clone(
  jets           = proc.genJetTable.src,
  jetAlgorithm   = supportedJetAlgos[genJetAlgo],
  rParam         = genJetSizeNr,
)

oc.jetMC.insert(proc.jetMC.index(proc.genJetFlavourTable), getattr(proc, genJetFlavourAssociationThisJet)) 
turn proc

AddVariablesForAK4GenJets(proc):
oc.genJetTable.variables.nConstituents = GENJETVARS.nConstituents
turn proc

AddVariablesForAK8GenJets(proc):
oc.genJetAK8Table.variables.nConstituents = GENJETVARS.nConstituents
turn proc

========================================================================

sc. functions

========================================================================
RemoveAllJetPtCuts(proc):
""
move default pt cuts for all jets set in jets_cff.py 
""

oc.finalJets.cut             = """" # 15 -> 10
oc.finalJetsAK8.cut          = """" # 170 -> 170
oc.genJetTable.cut           = """" # 10 -> 8
oc.genJetFlavourTable.cut    = """" # 10 -> 8
oc.genJetAK8Table.cut        = """" # 100 -> 80
oc.genJetAK8FlavourTable.cut = """" # 100 -> 80

turn proc
========================================================================

STOMIZATION function

========================================================================
PrepJMECustomNanoAOD(process,runOnMC):

##########################################################################
Remove all default jet pt cuts from jets_cff.py
##########################################################################
ocess = RemoveAllJetPtCuts(process)

#########################################################################
Gen-level jets related functions. Only for MC.
#########################################################################
nJA = GenJetAdder()
 runOnMC:
############################################################################
# Save additional variables for AK8 GEN jets
############################################################################
process = AddVariablesForAK8GenJets(process)
###########################################################################
# Recluster AK4 GEN jets
###########################################################################
process = ReclusterAK4GenJets(process, genJA)
process = AddVariablesForAK4GenJets(process)
###########################################################################
# Add additional GEN jets to NanoAOD
###########################################################################
for jetConfig in config_genjets:
  cfg = { k : v for k, v in jetConfig.items() if k != ""enabled""}
  genJetInfo = genJA.addGenJetCollection(process, **cfg)
  AddNewGenJets(process, genJetInfo)

#########################################################################

Reco-level jets related functions. For both MC and data.

#########################################################################
#########################################################################
Save additional variables for AK8Puppi jets
#########################################################################
ocess = AddVariablesForAK8PuppiJets(process)
#########################################################################
Recluster AK4 CHS jets and replace ""slimmedJets""
#########################################################################
ocess = ReclusterAK4CHSJets(process, recoJA, runOnMC)
#########################################################################
Add additional Reco jets to NanoAOD
#########################################################################
cfg = { k : v for k, v in jetConfig.items() if k != ""enabled""}
AddNewPatJets(process, recoJetInfo, runOnMC)

"
-------------------------------------------------------------------------
"```python
def PrepJMECustomNanoAOD(process):
    
    # Remove all default jet pt cuts from jets_cff.py
    process = RemoveAllJetPtCuts(process)
    
    # Gen-level jets related functions. Only for MC.
    genJA = GenJetAdder()

    # Save additional variables for AK8 GEN jets
    process = AddVariablesForAK8GenJets(process)
    
    # Recluster AK4 GEN jets
    process = ReclusterAK4GenJets(process, genJA)
    
    # Add variables for AK4 GEN jets
    process = AddVariablesForAK4GenJets(process)
    
    # Add additional GEN jets to NanoAOD
    for jetConfig in config_genjets:
        cfg = { k: v for k, v in jetConfig.items() if k != ""enabled"" }
        genJetInfo = genJA.addGenJetCollection(process, **cfg)
        AddNewGenJets(process, genJetInfo)

    # Reco-level jets related functions. For both MC and data.

    # Save additional variables for AK8Puppi jets
    process = AddVariablesForAK8PuppiJets(process)
    
    # Recluster AK4 CHS jets and replace ""slimmedJets""
    process = ReclusterAK4CHSJets(process, recoJA, runOnMC)
    
    # Add additional Reco jets to NanoAOD
    for jetConfig in config_recojets:
        cfg = { k: v for k, v in jetConfig.items() if k != ""enabled"" }
        recoJetInfo = recoJA.addRecoJetCollection(process, **cfg)
        AddNewPatJets(process, recoJetInfo, runOnMC)
    
    return process
```"
-------------------------------------------------------------------------
"""name""  : ""JetPuppi"",
""doc""   : ""AK4 PF Puppi jets with JECs applied, after basic selection (pt > 2)"",  
""ptcut"" : ""pt > 2"",      
""doQGL"" : True,
""doPUIDVar"": True,
""doBTag"": True,
""name""  : ""JetPF"",
""doc""   : ""AK4 PF jets with JECs applied, after basic selection (pt > 2)"",
""ptcut"" : ""pt > 2"",   
k4calo"" : {
""name"": ""JetCalo"",
""doc"" : ""AK4 Calo jets with JECs applied"",
""name""  : ""FatJetCHS"",
""doc""   : ""AK8 PF CHS jets with JECs applied, after basic selection (pt > 100)"", 
""ptcut"" : ""pt > 100""    
k8pf"" : {
""name""  : ""FatJetPF"",
""doc""   : ""AK8 PF jets with JECs applied, after basic selection (pt > 100)"", 
""ptcut"" : ""pt > 100"", 

ETVARS = cms.PSet(P4Vars,
onstituents   = jetTable.variables.nConstituents,

TVARS = cms.PSet(P4Vars,
wFactor       = jetTable.variables.rawFactor,
ea            = jetTable.variables.area,
HEF           = jetTable.variables.chHEF,
HEF           = jetTable.variables.neHEF,
EmEF          = jetTable.variables.chEmEF,
EmEF          = jetTable.variables.neEmEF,
EF            = jetTable.variables.muEF,
HEF           = Var(""HFHadronEnergyFraction()"",float,doc = ""hadronic energy fraction in HF"",precision = 6),
EmEF          = Var(""HFEMEnergyFraction()"",float,doc = ""electromagnetic energy fraction in HF"",precision = 6),
uons          = jetTable.variables.nMuons,
lectrons      = jetTable.variables.nElectrons,
onstituents   = jetTable.variables.nConstituents,
onstChHads    = Var(""chargedHadronMultiplicity()"",int,doc=""number of charged hadrons in the jet""),
onstNeuHads   = Var(""neutralHadronMultiplicity()"",int,doc=""number of neutral hadrons in the jet""),
onstHFHads    = Var(""HFHadronMultiplicity()"", int,doc=""number of HF hadrons in the jet""),
onstHFEMs     = Var(""HFEMMultiplicity()"",int,doc=""number of HF EMs in the jet""),
onstMuons     = Var(""muonMultiplicity()"",int,doc=""number of muons in the jet""),
onstElecs     = Var(""electronMultiplicity()"",int,doc=""number of electrons in the jet""),
onstPhotons   = Var(""photonMultiplicity()"",int,doc=""number of photons in the jet""),

VARS = cms.PSet(
Id_dR2Mean    = Var(""userFloat('puId_dR2Mean')"",float,doc=""pT^2-weighted average square distance of jet constituents from the jet axis (PileUp ID BDT input variable)"", precision= 6),
Id_majW       = Var(""userFloat('puId_majW')"",float,doc=""major axis of jet ellipsoid in eta-phi plane (PileUp ID BDT input variable)"", precision= 6)  ,
Id_minW       = Var(""userFloat('puId_minW')"",float,doc=""minor axis of jet ellipsoid in eta-phi plane (PileUp ID BDT input variable)"", precision= 6)  ,
Id_frac01     = Var(""userFloat('puId_frac01')"",float,doc=""fraction of constituents' pT contained within dR <0.1 (PileUp ID BDT input variable)"", precision= 6)  ,
Id_frac02     = Var(""userFloat('puId_frac02')"",float,doc=""fraction of constituents' pT contained within 0.1< dR <0.2 (PileUp ID BDT input variable)"", precision= 6) ,
Id_frac03     = Var(""userFloat('puId_frac03')"",float,doc=""fraction of constituents' pT contained within 0.2< dR <0.3 (PileUp ID BDT input variable)"", precision= 6) ,
Id_frac04     = Var(""userFloat('puId_frac04')"",float,doc=""fraction of constituents' pT contained within 0.3< dR <0.4 (PileUp ID BDT input variable)"", precision= 6) ,
Id_ptD        = Var(""userFloat('puId_ptD')"",float,doc=""pT-weighted average pT of constituents (PileUp ID BDT input variable)"", precision= 6) ,
Id_beta       = Var(""userFloat('puId_beta')"",float,doc=""fraction of pT of charged constituents associated to PV (PileUp ID BDT input variable)"", precision= 6) ,
Id_pull       = Var(""userFloat('puId_pull')"",float,doc=""magnitude of pull vector (PileUp ID BDT input variable)"", precision= 6) ,
Id_jetR       = Var(""userFloat('puId_jetR')"",float,doc=""fraction of jet pT carried by the leading constituent (PileUp ID BDT input variable)"", precision= 6) ,
Id_jetRchg    = Var(""userFloat('puId_jetRchg')"",float,doc=""fraction of jet pT carried by the leading charged constituent (PileUp ID BDT input variable)"", precision= 6) ,
Id_nCharged   = Var(""userInt('puId_nCharged')"",int,doc=""number of charged constituents (PileUp ID BDT input variable)""),

ARS = cms.PSet(
l_axis2       =  Var(""userFloat('qgl_axis2')"",float,doc=""ellipse minor jet axis (Quark vs Gluon likelihood input variable)"", precision= 6),
l_ptD         =  Var(""userFloat('qgl_ptD')"",float,doc=""pT-weighted average pT of constituents (Quark vs Gluon likelihood input variable)"", precision= 6),
l_mult        =  Var(""userInt('qgl_mult')"", int,doc=""PF candidates multiplicity (Quark vs Gluon likelihood input variable)""),

VARS = cms.PSet(
agCMVA  = jetTable.variables.btagCMVA,
agDeepB = jetTable.variables.btagDeepB,
agCSVV2 = jetTable.variables.btagCSVV2,
agDeepC = jetTable.variables.btagDeepC,

JETVARS = cms.PSet(
agDeepFlavB   = jetTable.variables.btagDeepFlavB,
agDeepFlavC   = jetTable.variables.btagDeepFlavC,
agDeepFlavG   = Var(""bDiscriminator('pfDeepFlavourJetTags:probg')"",float,doc=""DeepFlavour gluon tag raw score"",precision=10),
agDeepFlavUDS = Var(""bDiscriminator('pfDeepFlavourJetTags:probuds')"",float,doc=""DeepFlavour uds tag raw score"",precision=10)

JETVARS = cms.PSet(P4Vars,
f       = Var(""emEnergyFraction()"", float, doc = ""electromagnetic energy fraction"", precision = 10),

***************************************

co Jets related functions

***************************************
AddJetID(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName=""""):
tup modules to calculate PF jet ID 

PUPPIJet = True if ""Puppi"" in jetName else False

oseJetId = ""looseJetId{}"".format(jetName)
tattr(proc, looseJetId, proc.looseJetId.clone(
  src = jetSrc,
  filterParams=proc.looseJetId.filterParams.clone(
    version =""WINTER16""
  ),

ghtJetId = ""tightJetId{}"".format(jetName)
tattr(proc, tightJetId, proc.tightJetId.clone(
  src = jetSrc,
  filterParams=proc.tightJetId.filterParams.clone(
    version = ""SUMMER18{}"".format(""PUPPI"" if isPUPPIJet else """")
  ),


ghtJetIdLepVeto = ""tightJetIdLepVeto{}"".format(jetName)
tattr(proc, tightJetIdLepVeto, proc.tightJetIdLepVeto.clone(
  src = jetSrc,
  filterParams=proc.tightJetIdLepVeto.filterParams.clone(
    version = ""SUMMER18{}"".format(""PUPPI"" if isPUPPIJet else """")
  ),
)

n2_jme_2016.toModify(getattr(proc, tightJetId) .filterParams,        version = ""WINTER16"" )
n2_jme_2016.toModify(getattr(proc, tightJetIdLepVeto) .filterParams, version = ""WINTER16"" )
n2_jme_2017.toModify(getattr(proc, tightJetId) .filterParams,        version = ""WINTER17{}"".format(""PUPPI"" if isPUPPIJet else """"))
n2_jme_2017.toModify(getattr(proc, tightJetIdLepVeto) .filterParams, version = ""WINTER17{}"".format(""PUPPI"" if isPUPPIJet else """"))


Save variables as userInts in each jet

tJetWithUserData = ""{}WithUserData"".format(jetSrc)
tattr(proc, patJetWithUserData).userInts.tightId = cms.InputTag(tightJetId)
tattr(proc, patJetWithUserData).userInts.tightIdLepVeto = cms.InputTag(tightJetIdLepVeto)
n2_jme_2016.toModify(getattr(proc, patJetWithUserData).userInts, looseId = cms.InputTag(looseJetId))


Specfiy variables in the jetTable to save in NanoAOD

tattr(proc, jetTableName).variables.jetId = Var(""userInt('tightId')*24*userInt('tightIdLepVeto')"",int,doc=""Jet ID flags bit1 is loose (always false in 2017 since it does not exist), bit2 is tight, bit3 is tightLepVeto"")
n2_jme_2016.toModify(getattr(proc, jetTableName).variables, jetId = Var(""userInt('tightIdLepVeto')*4userInt('tightId')*2userInt('looseId')"",int, doc=""Jet ID flags bit1 is loose, bit2 is tight, bit3 is tightLepVeto""))
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, tightJetId))
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, tightJetId))1, getattr(proc, tightJetIdLepVeto))

tattr(proc,""_""jetSequenceName""_2016"", getattr(proc,jetSequenceName).copy())
tattr(proc,""_""jetSequenceName""_2016"").insert(getattr(proc, ""_""jetSequenceName""_2016"").index(getattr(proc, tightJetId)), getattr(proc, looseJetId))
n2_jme_2016.toReplaceWith(getattr(proc,jetSequenceName), getattr(proc, ""_""jetSequenceName""_2016""))
turn proc
AddPileUpJetIDVars(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName=""""):
""
tup modules to calculate pileup jet ID input variables for PF jet
""
Calculate pileup jet ID variables
JetIdVarsCalculator = ""puJetIdCalculator{}"".format(jetName) 
tattr(proc, puJetIdVarsCalculator, pileupJetIdCalculator.clone(
  jets = jetSrc,
  vertexes  = ""offlineSlimmedPrimaryVertices"",
  inputIsCorrected = True,
  applyJec  = False,
  usePuppi = True if ""Puppi"" in jetName else False
)
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, puJetIdVarsCalculator))
JetIDVar = ""puJetIDVar{}"".format(jetName)
tattr(proc, puJetIDVar, cms.EDProducer(""PileupJetIDVarProducer"",
  srcJet = cms.InputTag(jetSrc),    
  srcPileupJetId = cms.InputTag(puJetIdVarsCalculator)
)
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, puJetIdVarsCalculator))1, getattr(proc, puJetIDVar))
Save variables as userFloats and userInts for each jet
tJetWithUserData = ""{}WithUserData"".format(jetSrc)
tattr(proc,patJetWithUserData).userFloats.puId_dR2Mean  = cms.InputTag(""{}:dR2Mean"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_majW     = cms.InputTag(""{}:majW"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_minW     = cms.InputTag(""{}:minW"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac01   = cms.InputTag(""{}:frac01"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac02   = cms.InputTag(""{}:frac02"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac03   = cms.InputTag(""{}:frac03"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac04   = cms.InputTag(""{}:frac04"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_ptD      = cms.InputTag(""{}:ptD"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_beta     = cms.InputTag(""{}:beta"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_pull     = cms.InputTag(""{}:pull"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_jetR     = cms.InputTag(""{}:jetR"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_jetRchg  = cms.InputTag(""{}:jetRchg"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userInts.puId_nCharged   = cms.InputTag(""{}:nCharged"".format(puJetIDVar))
Specfiy variables in the jet table to save in NanoAOD
tattr(proc,jetTableName).variables.puId_dR2Mean  = PUIDVARS.puId_dR2Mean 
tattr(proc,jetTableName).variables.puId_majW     = PUIDVARS.puId_majW    
tattr(proc,jetTableName).variables.puId_minW     = PUIDVARS.puId_minW    
tattr(proc,jetTableName).variables.puId_frac01   = PUIDVARS.puId_frac01  
tattr(proc,jetTableName).variables.puId_frac02   = PUIDVARS.puId_frac02  
tattr(proc,jetTableName).variables.puId_frac03   = PUIDVARS.puId_frac03  
tattr(proc,jetTableName).variables.puId_frac04   = PUIDVARS.puId_frac04  
tattr(proc,jetTableName).variables.puId_ptD      = PUIDVARS.puId_ptD      
tattr(proc,jetTableName).variables.puId_beta     = PUIDVARS.puId_beta    
tattr(proc,jetTableName).variables.puId_pull     = PUIDVARS.puId_pull     
tattr(proc,jetTableName).variables.puId_jetR     = PUIDVARS.puId_jetR    
tattr(proc,jetTableName).variables.puId_jetRchg  = PUIDVARS.puId_jetRchg 
tattr(proc,jetTableName).variables.puId_nCharged = PUIDVARS.puId_nCharged 

turn proc

AddQGLTaggerVars(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName="""", calculateQGLVars=False):
""
hedule the QGTagger module to calculate input variables to the QG likelihood 
""

LTagger=""qgtagger{}"".format(jetName)
tJetWithUserData=""{}WithUserData"".format(jetSrc)

 calculateQGLVars:
setattr(proc, QGLTagger, qgtagger.clone(
    srcJets=jetSrc
  )
)
Save variables as userFloats and userInts for each jet

tattr(proc,patJetWithUserData).userFloats.qgl_axis2 = cms.InputTag(QGLTagger"":axis2"")
tattr(proc,patJetWithUserData).userFloats.qgl_ptD   = cms.InputTag(QGLTagger"":ptD"")
tattr(proc,patJetWithUserData).userInts.qgl_mult    = cms.InputTag(QGLTagger"":mult"")

Specfiy variables in the jet table to save in NanoAOD
tattr(proc,jetTableName).variables.qgl_axis2 =  QGLVARS.qgl_axis2
tattr(proc,jetTableName).variables.qgl_ptD   =  QGLVARS.qgl_ptD
tattr(proc,jetTableName).variables.qgl_mult  =  QGLVARS.qgl_mult

 calculateQGLVars:
getattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, QGLTagger))

turn proc

AddBTaggingScores(proc, jetTableName=""""):
""
ore b-tagging scores from various algortihm
""

tattr(proc, jetTableName).variables.btagCMVA      = jetTable.variables.btagCMVA
tattr(proc, jetTableName).variables.btagDeepB     = jetTable.variables.btagDeepB
tattr(proc, jetTableName).variables.btagCSVV2     = jetTable.variables.btagCSVV2
tattr(proc, jetTableName).variables.btagDeepC     = jetTable.variables.btagDeepC
tattr(proc, jetTableName).variables.btagDeepFlavB = jetTable.variables.btagDeepFlavB
tattr(proc, jetTableName).variables.btagDeepFlavC = jetTable.variables.btagDeepFlavC

turn proc

AddDeepJetGluonLQuarkScores(proc, jetTableName=""""):
""
ore DeepJet raw score in jetTable for gluon and light quark
""

tattr(proc, jetTableName).variables.btagDeepFlavG   = DEEPJETVARS.btagDeepFlavG  
tattr(proc, jetTableName).variables.btagDeepFlavUDS = DEEPJETVARS.btagDeepFlavUDS

turn proc

AddNewPatJets(proc, recoJetInfo, runOnMC):
""
d patJet into custom nanoAOD
""

tName = recoJetInfo.jetUpper
yload = recoJetInfo.jetCorrPayload 
PF    = recoJetInfo.doPF
Calo  = recoJetInfo.doCalo

 recoJetInfo.inputCollection != """":
patJetFinalColl = recoJetInfo.inputCollection
se: 
patJetFinalColl = ""selectedUpdatedPatJets{}Final"".format(jetName)

 doCalo:
patJetFinalColl = ""selectedPatJets{}"".format(jetName)

noInfoForJet = nanoInfo_recojets[recoJetInfo.jet]
tTablePrefix = nanoInfoForJet[""name""]
tTableDoc    = nanoInfoForJet[""doc""]
cut          = nanoInfoForJet[""ptcut""] if ""ptcut"" in nanoInfoForJet else """"
PUIDVar      = nanoInfoForJet[""doPUIDVar""] if ""doPUIDVar"" in nanoInfoForJet else False
QGL          = nanoInfoForJet[""doQGL""] if ""doQGL"" in nanoInfoForJet else False
BTag         = nanoInfoForJet[""doBTag""] if ""doBTag"" in nanoInfoForJet else False

vePatJets(proc, 
jetName, payload, patJetFinalColl, jetTablePrefix, jetTableDoc, doPF, doCalo, 
ptcut=ptcut, doPUIDVar=doPUIDVar, doQGL=doQGL, doBTag=doBTag, runOnMC=runOnMC


turn proc

SavePatJets(proc, jetName, payload, patJetFinalColl, jetTablePrefix, jetTableDoc, 
            doPF, doCalo, ptcut="""", doPUIDVar=False, doQGL=False, doBTag=False, runOnMC=False):
""
hedule modules for a given patJet collection and save its variables into custom NanoAOD
""

Setup jet correction factors
tCorrFactors = ""jetCorrFactorsNano{}"".format(jetName)
tattr(proc, jetCorrFactors, jetCorrFactorsNano.clone(
  src = patJetFinalColl,
  payload = payload,
)


Update jets

cJets = ""updatedJets{}"".format(jetName)
tattr(proc, srcJets, updatedJets.clone(
  jetSource = patJetFinalColl,
  jetCorrFactorsSource=[jetCorrFactors],
)


Setup UserDataEmbedder
cJetsWithUserData = ""updatedJets{}WithUserData"".format(jetName)
tattr(proc, srcJetsWithUserData, cms.EDProducer(""PATJetUserDataEmbedder"",
  src = cms.InputTag(srcJets),
  userFloats = cms.PSet(),    
  userInts = cms.PSet(),
)


Filter jets with pt cut
nalJetsForTable = ""finalJets{}"".format(jetName)
tattr(proc, finalJetsForTable, finalJets.clone(
  src = srcJetsWithUserData,
  cut = ptcut
)


Save jets in table
bleContent = PFJETVARS
 doCalo:
tableContent =  CALOJETVARS

tTable = ""jet{}Table"".format(jetName)
tattr(proc,jetTable, cms.EDProducer(""SimpleCandidateFlatTableProducer"",
  src = cms.InputTag(finalJetsForTable),
  cut = cms.string(""""), # Don't specify cuts here
  name = cms.string(jetTablePrefix),
  doc  = cms.string(jetTableDoc),
  singleton = cms.bool(False), # the number of entries is variable
  extension = cms.bool(False), # this is the main table for the jets
  variables = cms.PSet(tableContent)
)
tattr(proc,jetTable).variables.pt.precision=10


Save MC-only jet variables in table

tMCTable = ""jet{}MCTable"".format(jetName)
tattr(proc, jetMCTable, cms.EDProducer(""SimpleCandidateFlatTableProducer"",
  src = cms.InputTag(finalJetsForTable),
  cut = getattr(proc,jetTable).cut,
  name = cms.string(jetTablePrefix),
  singleton = cms.bool(False),
  extension = cms.bool(True), # this is an extension table
  variables = cms.PSet(
    partonFlavour = Var(""partonFlavour()"", int, doc=""flavour from parton matching""),
    hadronFlavour = Var(""hadronFlavour()"", int, doc=""flavour from hadron ghost clustering""),
    genJetIdx = Var(""?genJetFwdRef().backRef().isNonnull()?genJetFwdRef().backRef().key():-1"", int, doc=""index of matched gen jet""),
  )
)


Define the jet modules sequence first

tSequenceName = ""jet{}Sequence"".format(jetName)
tattr(proc, jetSequenceName, cms.Sequence(
  getattr(proc,jetCorrFactors)
  getattr(proc,srcJets)
  getattr(proc,srcJetsWithUserData)
  getattr(proc,finalJetsForTable)
)


Define the jet table sequences 
tTableSequenceName = ""jet{}TablesSequence"".format(jetName)
tattr(proc, jetTableSequenceName, cms.Sequence(getattr(proc,jetTable)))

tTableSequenceMCName = ""jet{}MCTablesSequence"".format(jetName)
tattr(proc, jetTableSequenceMCName, cms.Sequence(getattr(proc,jetMCTable)))

 runOnMC:
proc.nanoSequenceMC = getattr(proc,jetSequenceName)
proc.nanoSequenceMC = getattr(proc,jetTableSequenceName)
proc.nanoSequenceMC = getattr(proc,jetTableSequenceMCName)
se:
proc.nanoSequence = getattr(proc,jetSequenceName)
proc.nanoSequence = getattr(proc,jetTableSequenceName)


Schedule plugins to calculate Jet ID, PileUp Jet ID input variables, and Quark-Gluon Likehood input variables.

 doPF:
proc = AddJetID(proc, jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName)
if doPUIDVar:
  proc = AddPileUpJetIDVars(proc, jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName)
if doQGL:
  proc = AddQGLTaggerVars(proc,jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName, calculateQGLVars=True)


Save b-tagging algorithm scores. Should only be done for jet collection with b-tagging 
calculated when reclustered or collection saved with b-tagging info in MiniAOD
 doBTag:
AddBTaggingScores(proc,jetTableName=jetTable)
AddDeepJetGluonLQuarkScores(proc,jetTableName=jetTable)

turn proc

ReclusterAK4CHSJets(proc, recoJA, runOnMC):
""
cluster AK4 CHS jets and replace slimmedJets
at is used as default to save AK4 CHS jets 
 NanoAODs.  
""
int(""custom_jme_cff::ReclusterAK4CHSJets: Recluster AK4 PF CHS jets"")


Recluster AK4 CHS jets

g = { 
""jet"" : ""ak4pfchs"",   
""inputCollection"" : """",                 
""genJetsCollection"": ""AK4GenJetsNoNu"",
""bTagDiscriminators"": bTagDiscriminatorsForAK4

coJetInfo = recoJA.addRecoJetCollection(proc, **cfg) 

tName = recoJetInfo.jetUpper
tJetFinalColl = ""selectedUpdatedPatJets{}Final"".format(jetName)


Change the input jet source for jetCorrFactorsNano 
and updatedJets
oc.jetCorrFactorsNano.src=patJetFinalColl
oc.updatedJets.jetSource=patJetFinalColl


Change pt cut

oc.finalJets.cut = ""pt > 2""
oc.simpleCleanerTable.jetSel = ""pt > 10"" # Change this from 15 -> 10 


Add variables 

oc.jetTable.variables.hfHEF         = PFJETVARS.hfHEF
oc.jetTable.variables.hfEmEF        = PFJETVARS.hfEmEF
oc.jetTable.variables.nConstChHads  = PFJETVARS.nConstChHads
oc.jetTable.variables.nConstNeuHads = PFJETVARS.nConstNeuHads
oc.jetTable.variables.nConstHFHads  = PFJETVARS.nConstHFHads
oc.jetTable.variables.nConstHFEMs   = PFJETVARS.nConstHFEMs
oc.jetTable.variables.nConstMuons   = PFJETVARS.nConstMuons
oc.jetTable.variables.nConstElecs   = PFJETVARS.nConstElecs
oc.jetTable.variables.nConstPhotons = PFJETVARS.nConstPhotons

oc.jetTable.doc = cms.string(""AK4 PF CHS Jets with JECs applied, after basic selection (pt > 2)"")


Setup pileup jet ID with 80X training.

pileupJetId80X = ""pileupJetId80X""
setattr(proc, pileupJetId80X, pileupJetId.clone(
    jets=""updatedJets"",
    algos=cms.VPSet(_chsalgos_81x),
    inputIsCorrected=True,
    applyJec=False,
    vertexes=""offlineSlimmedPrimaryVertices""
  )
)
proc.jetSequence.insert(proc.jetSequence.index(proc.pileupJetId94X), getattr(proc, pileupJetId80X)) 

proc.updatedJetsWithUserData.userInts.puId80XfullId = cms.InputTag('pileupJetId80X:fullId')
run2_jme_2016.toModify(proc.updatedJetsWithUserData.userFloats, puId80XDisc = cms.InputTag(""pileupJetId80X:fullDiscriminant""))

proc.jetTable.variables.puId = Var(""userInt('puId80XfullId')"", int, doc=""Pilup ID flags with 80X (2016) training"")
run2_jme_2016.toModify(proc.jetTable.variables, puIdDisc = Var(""userFloat('puId80XDisc')"",float,doc=""Pilup ID discriminant with 80X (2016) training"",precision=10))

oc = AddPileUpJetIDVars(proc, 
jetName="""", 
jetSrc=""updatedJets"", 
jetTableName=""jetTable"",
jetSequenceName=""jetSequence""


Add variables for quark guon likelihood tagger studies.
Save variables as userFloats and userInts in each jet

oc.updatedJetsWithUserData.userFloats.qgl_axis2 = cms.InputTag(""qgtagger:axis2"")
oc.updatedJetsWithUserData.userFloats.qgl_ptD   = cms.InputTag(""qgtagger:ptD"")
oc.updatedJetsWithUserData.userInts.qgl_mult    = cms.InputTag(""qgtagger:mult"")

Specfiy variables in the jetTable to save in NanoAOD

oc.jetTable.variables.qgl_axis2 =  QGLVARS.qgl_axis2
oc.jetTable.variables.qgl_ptD   =  QGLVARS.qgl_ptD
oc.jetTable.variables.qgl_mult  =  QGLVARS.qgl_mult

Save DeepJet raw score for gluon and light quarks

oc.jetTable.variables.btagDeepFlavG   = DEEPJETVARS.btagDeepFlavG  
oc.jetTable.variables.btagDeepFlavUDS = DEEPJETVARS.btagDeepFlavUDS

turn proc

AddVariablesForAK8PuppiJets(proc):
""
d more variables for AK8 PFPUPPI jets
""


 These variables are not stored for AK8PFCHS (slimmedJetsAK8)
 in MiniAOD if their pt < 170 GeV. Hence the conditional fill.

oc.fatJetTable.variables.chHEF  = Var(""?isPFJet()?chargedHadronEnergyFraction():-1"", float, doc=""charged Hadron Energy Fraction"", precision = 6)
oc.fatJetTable.variables.neHEF  = Var(""?isPFJet()?neutralHadronEnergyFraction():-1"", float, doc=""neutral Hadron Energy Fraction"", precision = 6)
oc.fatJetTable.variables.chEmEF = Var(""?isPFJet()?chargedEmEnergyFraction():-1"", float, doc=""charged Electromagnetic Energy Fraction"", precision = 6)
oc.fatJetTable.variables.neEmEF = Var(""?isPFJet()?neutralEmEnergyFraction():-1"", float, doc=""neutral Electromagnetic Energy Fraction"", precision = 6)
oc.fatJetTable.variables.muEF   = Var(""?isPFJet()?muonEnergyFraction():-1"", float, doc=""muon Energy Fraction"", precision = 6)
oc.fatJetTable.variables.hfHEF  = Var(""?isPFJet()?HFHadronEnergyFraction():-1"", float, doc=""energy fraction in forward hadronic calorimeter"", precision = 6)
oc.fatJetTable.variables.hfEmEF = Var(""?isPFJet()?HFEMEnergyFraction():-1"", float, doc=""energy fraction in forward EM calorimeter"", precision = 6)
oc.fatJetTable.variables.nConstChHads   = Var(""?isPFJet()?chargedHadronMultiplicity():-1"",int, doc=""number of charged hadrons in the jet"")
oc.fatJetTable.variables.nConstNeuHads  = Var(""?isPFJet()?neutralHadronMultiplicity():-1"",int, doc=""number of neutral hadrons in the jet"")
oc.fatJetTable.variables.nConstHFHads   = Var(""?isPFJet()?HFHadronMultiplicity():-1"", int, doc=""number of HF Hadrons in the jet"")
oc.fatJetTable.variables.nConstHFEMs    = Var(""?isPFJet()?HFEMMultiplicity():-1"", int, doc=""number of HF EMs in the jet"")
oc.fatJetTable.variables.nConstMuons    = Var(""?isPFJet()?muonMultiplicity():-1"", int, doc=""number of muons in the jet"")
oc.fatJetTable.variables.nConstElecs    = Var(""?isPFJet()?electronMultiplicity():-1"", int, doc=""number of electrons in the jet"")
oc.fatJetTable.variables.nConstPhotons  = Var(""?isPFJet()?photonMultiplicity():-1"", int, doc=""number of photons in the jet"")

turn proc
***************************************


n Jets related functions


***************************************
AddNewGenJets(proc, genJetInfo):
""
d genJet into custom nanoAOD
""

nJetName         = genJetInfo.jetUpper
nJetAlgo         = genJetInfo.jetAlgo
nJetSize         = genJetInfo.jetSize
nJetSizeNr       = genJetInfo.jetSizeNr
nJetFinalColl    = ""{}{}{}"".format(genJetAlgo.upper(), genJetSize, ""GenJetsNoNu"")
nJetTablePrefix  = nanoInfo_genjets[genJetInfo.jet][""name""]
nJetTableDoc     = nanoInfo_genjets[genJetInfo.jet][""doc""]

veGenJets(proc, genJetName, genJetAlgo, genJetSizeNr, genJetFinalColl, genJetTablePrefix, genJetTableDoc, runOnMC=False)

turn proc

SaveGenJets(proc, genJetName, genJetAlgo, genJetSizeNr, genJetFinalColl, genJetTablePrefix, genJetTableDoc, runOnMC=False):
""
hedule modules for a given genJet collection and save its variables into custom NanoAOD
""

nJetTableThisJet = ""jet{}Table"".format(genJetName)
tattr(proc, genJetTableThisJet, genJetTable.clone(
  src       = genJetFinalColl,
  cut       = ""pt > 1"",
  name      = genJetTablePrefix,
  doc       = genJetTableDoc,
  variables = GENJETVARS
)

nJetFlavourAssociationThisJet = ""genJet{}FlavourAssociation"".format(genJetName)
tattr(proc, genJetFlavourAssociationThisJet, genJetFlavourAssociation.clone(
  jets           = getattr(proc,genJetTableThisJet).src,
  jetAlgorithm   = supportedJetAlgos[genJetAlgo],
  rParam         = genJetSizeNr,
)


nJetFlavourTableThisJet = ""genJet{}FlavourTable"".format(genJetName)
tattr(proc, genJetFlavourTableThisJet, genJetFlavourTable.clone(
  name            = getattr(proc,genJetTableThisJet).name,
  src             = getattr(proc,genJetTableThisJet).src,
  cut             = getattr(proc,genJetTableThisJet).cut,
  jetFlavourInfos = genJetFlavourAssociationThisJet,
)


nJetSequenceName = ""genJet{}Sequence"".format(genJetName)
tattr(proc, genJetSequenceName, cms.Sequence(
  getattr(proc,genJetTableThisJet)
  getattr(proc,genJetFlavourAssociationThisJet)
  getattr(proc,genJetFlavourTableThisJet)
)

oc.nanoSequenceMC.insert(proc.nanoSequenceMC.index(proc.jetMC)1, getattr(proc,genJetSequenceName)) 

turn proc

ReclusterAK4GenJets(proc, genJA):
""
cluster AK4 Gen jets and replace 
immedGenJets that is used as default 
 save AK4 Gen jets in NanoAODs. 
""
int(""custom_jme_cff::ReclusterAK4GenJets: Recluster AK4 Gen jets"")
Recluster AK4 Gen jet
g = { 
""jet"" : ""ak4gen"",   

nJetInfo = genJA.addGenJetCollection(proc, **cfg)

nJetName            = genJetInfo.jetUpper
nJetAlgo            = genJetInfo.jetAlgo
nJetSize            = genJetInfo.jetSize
nJetSizeNr          = genJetInfo.jetSizeNr
lectedPatGenJets    = ""{}{}{}"".format(genJetAlgo.upper(), genJetSize, ""GenJetsNoNu"")


Change jet source to the newly clustered jet collection. Set very low pt cut for jets 
to be stored in the GenJet Table

oc.genJetTable.src = selectedPatGenJets
oc.genJetTable.cut = ""pt > 1""
oc.genJetTable.doc  =""AK4 Gen jets (made with visible genparticles)""

nJetFlavourAssociationThisJet = ""genJet{}FlavourAssociation"".format(genJetName)
tattr(proc, genJetFlavourAssociationThisJet, genJetFlavourAssociation.clone(
  jets           = proc.genJetTable.src,
  jetAlgorithm   = supportedJetAlgos[genJetAlgo],
  rParam         = genJetSizeNr,
)

oc.jetMC.insert(proc.jetMC.index(proc.genJetFlavourTable), getattr(proc, genJetFlavourAssociationThisJet)) 
turn proc

AddVariablesForAK4GenJets(proc):
oc.genJetTable.variables.nConstituents = GENJETVARS.nConstituents
turn proc

AddVariablesForAK8GenJets(proc):
oc.genJetAK8Table.variables.nConstituents = GENJETVARS.nConstituents
turn proc

========================================================================

sc. functions

========================================================================
RemoveAllJetPtCuts(proc):
""
move default pt cuts for all jets set in jets_cff.py 
""
oc.finalJets.cut             = """" # 15 -> 10
oc.finalJetsAK8.cut          = """" # 170 -> 170
oc.genJetTable.cut           = """" # 10 -> 8
oc.genJetFlavourTable.cut    = """" # 10 -> 8
oc.genJetAK8Table.cut        = """" # 100 -> 80
oc.genJetAK8FlavourTable.cut = """" # 100 -> 80
turn proc

========================================================================

STOMIZATION function

========================================================================
PrepJMECustomNanoAOD(process,runOnMC):

##########################################################################
Remove all default jet pt cuts from jets_cff.py
##########################################################################
ocess = RemoveAllJetPtCuts(process)

#########################################################################

Gen-level jets related functions. Only for MC.
#########################################################################
nJA = GenJetAdder()
 runOnMC:
############################################################################
# Save additional variables for AK8 GEN jets
############################################################################
process = AddVariablesForAK8GenJets(process)
###########################################################################
# Recluster AK4 GEN jets
###########################################################################
process = ReclusterAK4GenJets(process, genJA)
process = AddVariablesForAK4GenJets(process)
###########################################################################
# Add additional GEN jets to NanoAOD
###########################################################################
for jetConfig in config_genjets:
  cfg = { k : v for k, v in jetConfig.items() if k != ""enabled""}
  genJetInfo = genJA.addGenJetCollection(process, **cfg)
  AddNewGenJets(process, genJetInfo)

#########################################################################
Reco-level jets related functions. For both MC and data.

#########################################################################
#########################################################################
Save additional variables for AK8Puppi jets
#########################################################################
ocess = AddVariablesForAK8PuppiJets(process)
#########################################################################
Recluster AK4 CHS jets and replace ""slimmedJets""
#########################################################################
ocess = ReclusterAK4CHSJets(process, recoJA, runOnMC)
#########################################################################
Add additional Reco jets to NanoAOD
#########################################################################
cfg = { k : v for k, v in jetConfig.items() if k != ""enabled""}
AddNewPatJets(process, recoJetInfo, runOnMC)

turn process
turn process
turn process
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"from CommonTools.PileupAlgos.Puppi_cff      import puppi
from CommonTools.PileupAlgos.softKiller_cfi import softKiller
from RecoJets.JetProducers.PFJetParameters_cfi         import PFJetParameters
from RecoJets.JetProducers.GenJetParameters_cfi        import GenJetParameters
from RecoJets.JetProducers.ak4GenJets_cfi  import ak4GenJets
from RecoJets.JetProducers.ak4PFJets_cfi   import ak4PFJets, ak4PFJetsCHS, ak4PFJetsPuppi, ak4PFJetsSK, ak4PFJetsCS 
from RecoJets.JetProducers.ak4CaloJets_cfi import ak4CaloJets 
from PhysicsTools.PatAlgos.producersLayer1.jetUpdater_cfi import updatedPatJets
from PhysicsTools.PatAlgos.recoLayer0.jetCorrFactors_cfi  import patJetCorrFactors
from PhysicsTools.PatAlgos.tools.jetTools import supportedJetAlgos, addJetCollection, updateJetCollection
from PhysicsTools.PatAlgos.tools.helpers  import getPatAlgosToolsTask, addToProcessAndTask
"
-------------------------------------------------------------------------
"from CommonTools.PileupAlgos.Puppi_cff import puppi
from CommonTools.PileupAlgos.softKiller_cfi import softKiller
from RecoJets.JetProducers.PFJetParameters_cfi import PFJetParameters
from RecoJets.JetProducers.GenJetParameters_cfi import GenJetParameters
from RecoJets.JetProducers.ak4GenJets_cfi import ak4GenJets
from RecoJets.JetProducers.ak4PFJets_cfi import ak4PFJets
from RecoJets.JetProducers.ak4PFJets_cfi import ak4PFJetsCHS
from RecoJets.JetProducers.ak4PFJets_cfi import ak4PFJetsPuppi
from RecoJets.JetProducers.ak4PFJets_cfi import ak4PFJetsSK
from RecoJets.JetProducers.ak4PFJets_cfi import ak4PFJetsCS
from RecoJets.JetProducers.ak4CaloJets_cfi import ak4CaloJets
from PhysicsTools.PatAlgos.producersLayer1.jetUpdater_cfi import updatedPatJets
from PhysicsTools.PatAlgos.recoLayer0.jetCorrFactors_cfi import patJetCorrFactors
from PhysicsTools.PatAlgos.tools.jetTools import supportedJetAlgos, addJetCollection, updateJetCollection
from PhysicsTools.PatAlgos.tools.helpers import getPatAlgosToolsTask, addToProcessAndTask"
-------------------------------------------------------------------------
"from CommonTools.PileupAlgos.Puppi_cff      import puppi
from CommonTools.PileupAlgos.softKiller_cfi import softKiller
from RecoJets.JetProducers.PFJetParameters_cfi         import PFJetParameters
from RecoJets.JetProducers.GenJetParameters_cfi        import GenJetParameters
from RecoJets.JetProducers.ak4GenJets_cfi  import ak4GenJets
from RecoJets.JetProducers.ak4PFJets_cfi   import ak4PFJets, ak4PFJetsCHS, ak4PFJetsPuppi, ak4PFJetsSK, ak4PFJetsCS 
from RecoJets.JetProducers.ak4CaloJets_cfi import ak4CaloJets 
from PhysicsTools.PatAlgos.producersLayer1.jetUpdater_cfi import updatedPatJets
from PhysicsTools.PatAlgos.recoLayer0.jetCorrFactors_cfi  import patJetCorrFactors
from PhysicsTools.PatAlgos.tools.jetTools import supportedJetAlgos, addJetCollection, updateJetCollection
from PhysicsTools.PatAlgos.tools.helpers  import getPatAlgosToolsTask, addToProcessAndTask
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"self.jetAlgo    = jetMatch.group(algoKey)
self.jetSize    = jetMatch.group(sizeKey)
self.jetSizeNr  = float(self.jetSize) / 10.
"
-------------------------------------------------------------------------
"```python
self.jetAlgo = jetMatch.group('algoKey')
self.jetSize = jetMatch.group('sizeKey')
self.jetSizeNr = float(self.jetSize) / 10.
```"
-------------------------------------------------------------------------
"self.jetAlgo    = jetMatch.group(algoKey)
self.jetSize    = jetMatch.group(sizeKey)
self.jetSizeNr  = float(self.jetSize) / 10.
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"def addProcessAndTask(self, proc, label, module):
  task = getPatAlgosToolsTask(proc)
  addToProcessAndTask(label, module, proc, task)
  # Decide which genJet collection we are dealing with
"
-------------------------------------------------------------------------
"```python
def addProcessAndTask(self, proc, label, module):
    task = getPatAlgosToolsTask(proc)
    addToProcessAndTask(label, module, proc, task)
    # Decide which genJet collection we are dealing with
```"
-------------------------------------------------------------------------
"def addProcessAndTask(self, proc, label, module):
  task = getPatAlgosToolsTask(proc)
  addToProcessAndTask(label, module, proc, task)
  # Decide which genJet collection we are dealing with
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"# If genJet collection in MiniAOD is not 
"
-------------------------------------------------------------------------
"```python
 # If genJet collection in MiniAOD is not 
```"
-------------------------------------------------------------------------
"# If genJet collection in MiniAOD is not 
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"self.addProcessAndTask(proc, packedGenPartNoNu, cms.EDFilter(""CandPtrSelector"",
"
-------------------------------------------------------------------------
"self.addProcessAndTask(proc, packedGenPartNoNu, cms.EDFilter(""CandPtrSelector"","
-------------------------------------------------------------------------
"self.addProcessAndTask(proc, packedGenPartNoNu, cms.EDFilter(""CandPtrSelector"",
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"self.addProcessAndTask(proc, genJetsCollection, ak4GenJets.clone(
"
-------------------------------------------------------------------------
"self.addProcessAndTask(proc, genJetsCollection, ak4GenJets.clone()"
-------------------------------------------------------------------------
"self.addProcessAndTask(proc, genJetsCollection, ak4GenJets.clone(
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"self.doPF   = self.jetReco == ""pf""


"
-------------------------------------------------------------------------
"self.doPF = self.jetReco == ""pf"""
-------------------------------------------------------------------------
"self.doPF   = self.jetReco == ""pf""


"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"Tool to schedule modules for building a patJet collection from MiniAODs
"
-------------------------------------------------------------------------
"```python
class RecoJetAdder(object):
    """"""
    """"""
    def __init__(self, runOnMC=True):
        self.prerequisites = []
        self.main = []
        self.pfLabel = ""packedPFCandidates""
        self.pvLabel = ""offlineSlimmedPrimaryVertices""
        self.svLabel = ""slimmedSecondaryVertices""
    
    def addJetCollection(self, inputModule, moduleLabel):
        """"""
        Add a module to the list for building a patJet collection from MiniAODs
        """"""
        self.prerequisites.append(inputModule)
        self.main.append(moduleLabel)
```"
-------------------------------------------------------------------------
"Tool to schedule modules for building a patJet collection from MiniAODs
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"self.patJetsInMiniAOD = [""slimmedJets"", ""slimmedJetsAK8"", ""slimmedJetsPuppi"", ""slimmedCaloJets""]
f addProcessAndTask(self, proc, label, module):
task = getPatAlgosToolsTask(proc)
addToProcessAndTask(label, module, proc, task)
bTagDiscriminators = [""None""],
JETCorrLevels      = [""L1FastJet"", ""L2Relative"", ""L3Absolute"", ""L2L3Residual""],
if inputCollection and inputCollection not in self.patJetsInMiniAOD:
#=======================================================
# Figure out which jet collection we're dealing with
#=======================================================
"
-------------------------------------------------------------------------
"```python
self.patJetsInMiniAOD = [""slimmedJets"", ""slimmedJetsAK8"", ""slimmedJetsPuppi"", ""slimmedCaloJets""]
f addProcessAndTask(self, proc, label, module):
    task = getPatAlgosToolsTask(proc)
    addToProcessAndTask(label, module, proc, task)
    bTagDiscriminators = [""None""],
    JETCorrLevels = [""L1FastJet"", ""L2Relative"", ""L3Absolute"", ""L2L3Residual""]
    if inputCollection and inputCollection not in self.patJetsInMiniAOD:
        #=======================================================
        # Figure out which jet collection we're dealing with
        #=======================================================
```"
-------------------------------------------------------------------------
"self.patJetsInMiniAOD = [""slimmedJets"", ""slimmedJetsAK8"", ""slimmedJetsPuppi"", ""slimmedCaloJets""]
f addProcessAndTask(self, proc, label, module):
task = getPatAlgosToolsTask(proc)
addToProcessAndTask(label, module, proc, task)
bTagDiscriminators = [""None""],
JETCorrLevels      = [""L1FastJet"", ""L2Relative"", ""L3Absolute"", ""L2L3Residual""],
if inputCollection and inputCollection not in self.patJetsInMiniAOD:
#=======================================================
# Figure out which jet collection we're dealing with
#=======================================================
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"# If the patJet collection in MiniAOD is not specified, 
# we have to build the patJet collection from scratch.
"
-------------------------------------------------------------------------
"```python
if not inputCollection or recoJetInfo.doCalo or not patJetCollection:
    # Build the patJet collection from scratch
```"
-------------------------------------------------------------------------
"# If the patJet collection in MiniAOD is not specified, 
# we have to build the patJet collection from scratch.
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"# Specify PF candidates
"
-------------------------------------------------------------------------
"import PhysicsTools.PatAlgos.mcMatchLayer0.jetFlavourId_cff
from CommonTools.PileupAlgos.Puppi_cff import *
from Configuration.Eras.Modifier_run2_jme_2016_cff import *
from RecoJets.JetProducers.GenJetParameters_cfi import *
from PhysicsTools.PatAlgos.producersLayer1.jetUpdater_cfi import *
from RecoJets.JetProducers.PFJetParameters_cfi import *
import re
from Configuration.Eras.Modifier_run2_jme_2017_cff import *
from FWCore.ParameterSet.Config import *
from FWCore.GuiBrowsers.ConfigToolBase import *
from RecoJets.JetProducers.ak4GenJets_cfi import *
from RecoJets.JetProducers.ak4PFJets_cfi import *
from PhysicsTools.PatAlgos.recoLayer0.jetCorrFactors_cfi import *
from CommonTools.PileupAlgos.softKiller_cfi import *
from RecoJets.JetProducers.AnomalousCellParameters_cfi import *
from PhysicsTools.PatAlgos.tools.jetTools import * 

class RecoJetAdder(object):
    pfCand = self.pfLabel"
-------------------------------------------------------------------------
"# Specify PF candidates
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"

# Setup modules to perform PU mitigation for 
# PF candidates
"
-------------------------------------------------------------------------
"```python
if recoJetInfo.jetPUMethod not in [ """", ""cs"" ]:
    pfCand += recoJetInfo.jetPUMethod

if pfCand not in self.prerequisites:
    from PhysicsTools.PatAlgos.mcMatchLayer0.jetFlavourId_cff import patJetFlavourAssociation
    from CommonTools.PileupAlgos.Puppi_cff import *
    from Configuration.Eras.Modifier_run2_jme_2016_cff import *
    from RecoJets.JetProducers.GenJetParameters_cfi import GenJetParameters
    from PhysicsTools.PatAlgos.producersLayer1.jetUpdater_cfi import updatedPatJets
    from RecoJets.JetProducers.PFJetParameters_cfi import PFJetParameters
    import re
    from Configuration.Eras.Modifier_run2_jme_2017_cff import *
    from FWCore.ParameterSet.Config import *
    from FWCore.GuiBrowsers.ConfigToolBase import *
    from RecoJets.JetProducers.ak4GenJets_cfi import ak4GenJets
    from RecoJets.JetProducers.ak4PFJets_cfi import ak4PFJets
    from PhysicsTools.PatAlgos.recoLayer0.jetCorrFactors_cfi import patJetCorrFactors
    from CommonTools.PileupAlgos.softKiller_cfi import softKiller
    from RecoJets.JetProducers.AnomalousCellParameters_cfi import AnomalousCellParameters
    from PhysicsTools.PatAlgos.tools.jetTools import *
```"
-------------------------------------------------------------------------
"

# Setup modules to perform PU mitigation for 
# PF candidates
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"self.addProcessAndTask(proc, pfCand, cms.EDFilter(""CandPtrSelector"",
"
-------------------------------------------------------------------------
"self.addProcessAndTask(proc, pfCand, cms.EDFilter(""CandPtrSelector"","
-------------------------------------------------------------------------
"self.addProcessAndTask(proc, pfCand, cms.EDFilter(""CandPtrSelector"",
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"self.addProcessAndTask(proc, pfCand, puppi.clone(
    candName = self.pfLabel,
"
-------------------------------------------------------------------------
"self.addProcessAndTask(""PhysicsTools.PatAlgos.tools.helpers.addToProcessAndTask"", ""CommonTools.PileupAlgos.Puppi_cff.puppi.clone(candName = self.pfLabel)"")"
-------------------------------------------------------------------------
"self.addProcessAndTask(proc, pfCand, puppi.clone(
    candName = self.pfLabel,
    clonePackedCands = True,
    useExistingWeights = True,
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"self.addProcessAndTask(proc, pfCand, softKiller.clone(
    rParam = recoJetInfo.jetSizeNr,
"
-------------------------------------------------------------------------
"```python
self.addProcessAndTask(proc, pfCand, CommonTools.PileupAlgos.softKiller_cfi.softKiller.clone(
    rParam = recoJetInfo.jetSizeNr,
```
"
-------------------------------------------------------------------------
"self.addProcessAndTask(proc, pfCand, softKiller.clone(
    rParam = recoJetInfo.jetSizeNr,
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"jetCollection = '{}Collection'.format(jetUpper)
#
# Cluster new jet
#
if recoJetInfo.jetPUMethod == ""chs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCHS.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""puppi"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsPuppi.clone(
      src = self.pfLabel,
      srcWeights = pfCand
    )
  )
elif recoJetInfo.jetPUMethod == ""sk"":
  self.addProcessAndTask(proc, pfCand, ak4PFJetsSK.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""cs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCS.clone(
    src = pfCand,
  )
)
else:
  self.addProcessAndTask(proc, jetCollection, ak4PFJets.clone(
    src = pfCand,
getattr(proc, jetCollection).jetAlgorithm = supportedJetAlgos[recoJetInfo.jetAlgo]
getattr(proc, jetCollection).rParam = recoJetInfo.jetSizeNr

============================================

Make patJet collection

============================================
Jet correction 
"
-------------------------------------------------------------------------
"```python
jetCollection = '{}Collection'.format(jetUpper)
#
# Cluster new jet
#
if recoJetInfo.jetPUMethod == ""chs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCHS.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""puppi"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsPuppi.clone(
      src = self.pfLabel,
      srcWeights = pfCand
    )
  )
elif recoJetInfo.jetPUMethod == ""sk"":
  self.addProcessAndTask(proc, pfCand, ak4PFJetsSK.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""cs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCS.clone(
    src = pfCand,
  )
)
else:
  self.addProcessAndTask(proc, jetCollection, ak4PFJets.clone(
    src = pfCand,
  ))
getattr(proc, jetCollection).jetAlgorithm = supportedJetAlgos[recoJetInfo.jetAlgo]
getattr(proc, jetCollection).rParam = recoJetInfo.jetSizeNr
jetCorrLabel = ""Puppi""
```"
-------------------------------------------------------------------------
"jetCollection = '{}Collection'.format(jetUpper)
#
# Cluster new jet
#
if recoJetInfo.jetPUMethod == ""chs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCHS.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""puppi"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsPuppi.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""sk"":
  self.addProcessAndTask(proc, pfCand, ak4PFJetsSK.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""cs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCS.clone(
    src = pfCand,
  )
)
else:
  self.addProcessAndTask(proc, jetCollection, ak4PFJets.clone(
    src = pfCand,
getattr(proc, jetCollection).jetAlgorithm = supportedJetAlgos[recoJetInfo.jetAlgo]
getattr(proc, jetCollection).rParam = recoJetInfo.jetSizeNr

============================================

Make patJet collection

============================================
Jet correction 
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"
"
-------------------------------------------------------------------------
"```python
        RecoJetInfo = self.main(jetAlgo)

        if recoJetInfo.jetReco == 'calo':
             jetCorrLabel = recoJetInfo.jetPUMethod
        else:
             jetCorrLabel = recoJetInfo.jetPUMethod
        jetCorrections = (
            ""{}{}{}{}"".format(
             recoJetInfo.jetAlgo.upper(),
```"
-------------------------------------------------------------------------
"
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"
postfix = ""Recluster"" if inputCollection == """" else """"
  labelName          = jetUpper,
  postfix            = postfix,
"
-------------------------------------------------------------------------
"```python
postfix = ""Recluster"" if inputCollection == """" else """"
labelName          = jetUpper
postfix            = postfix
```"
-------------------------------------------------------------------------
"
postfix = ""Recluster"" if inputCollection == """" else """"
  labelName          = jetUpper,
  postfix            = postfix,
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"jetCorrections     = jetCorrections,

Need to set this explicitly for PUPPI jets

 recoJetInfo.jetPUMethod == ""puppi"":
getattr(proc, ""patJetFlavourAssociation{}{}"".format(tagName,postfix)).weights = cms.InputTag(pfCand)
tJetMCFlavour = not recoJetInfo.doCalo and recoJetInfo.jetPUMethod != ""cs""
delattr(proc, 'patJetGenJetMatch{}{}'.format(tagName,postfix))
delattr(proc, 'patJetPartonMatch{}{}'.format(tagName,postfix))
tattr(getattr(proc, ""patJets{}{}"".format(tagName,postfix)), ""getJetMCFlavour"", cms.bool(getJetMCFlavour))
lectedPatJetCollection = ""selectedPatJets{}{}"".format(tagName,postfix)      
============================================
Update the patJet collection. 
This is where we setup 
-  JEC
-  b-tagging discriminators  
============================================
dateJetCollection(
proc,
labelName          = jetUpper,
postfix            = ""Final"",
jetSource          = cms.InputTag(selectedPatJetCollection),
jetCorrections     = jetCorrections,
btagDiscriminators = bTagDiscriminators,
tJetFinalCollection=""selectedUpdatedPatJets{}{}"".format(tagName,""Final"")
:
tJetFinalCollection = inputCollection
rn recoJetInfo
"
-------------------------------------------------------------------------
"```
if recoJetInfo.jetPUMethod == ""puppi"":
    getattr(proc, ""patJetFlavourAssociation{}{}"".format(tagName, postfix)).weights = cms.InputTag(pfCand)
    getJetMCFlavour = not recoJetInfo.doCalo and recoJetInfo.jetPUMethod != ""cs""
    delattr(proc, 'patJetGenJetMatch{}{}'.format(tagName, postfix))
    delattr(proc, 'patJetPartonMatch{}{}'.format(tagName, postfix))
    setattr(getattr(proc, ""patJets{}{}"".format(tagName, postfix)), ""getJetMCFlavour"", cms.bool(getJetMCFlavour))

selectedPatJetCollection = ""selectedPatJets{}{}"".format(tagName, postfix)

# Update the patJet collection
# Setting up JEC and b-tagging discriminators
updateJetCollection(
    proc,
    labelName = jetUpper,
    postfix = ""Final"",
    jetSource = cms.InputTag(selectedPatJetCollection),
    jetCorrections = jetCorrections,
    btagDiscriminators = bTagDiscriminators,
    tJetFinalCollection = ""selectedUpdatedPatJets{}{}"".format(tagName, ""Final"")
)

tJetFinalCollection = inputCollection
return recoJetInfo
```
"
-------------------------------------------------------------------------
"jetCorrections     = jetCorrections,

Need to set this explicitly for PUPPI jets

 recoJetInfo.jetPUMethod == ""puppi"":
getattr(proc, ""patJetFlavourAssociation{}{}"".format(tagName,postfix)).weights = cms.InputTag(pfCand)
tJetMCFlavour = not recoJetInfo.doCalo and recoJetInfo.jetPUMethod != ""cs""
delattr(proc, 'patJetGenJetMatch{}{}'.format(tagName,postfix))
delattr(proc, 'patJetPartonMatch{}{}'.format(tagName,postfix))
tattr(getattr(proc, ""patJets{}{}"".format(tagName,postfix)), ""getJetMCFlavour"", cms.bool(getJetMCFlavour))
lectedPatJetCollection = ""selectedPatJets{}{}"".format(tagName,postfix)      
============================================
Update the patJet collection. 
This is where we setup 
-  JEC
-  b-tagging discriminators  
============================================
dateJetCollection(
proc,
labelName          = jetUpper,
postfix            = ""Final"",
jetSource          = cms.InputTag(selectedPatJetCollection),
jetCorrections     = jetCorrections,
btagDiscriminators = bTagDiscriminators,
tJetFinalCollection=""selectedUpdatedPatJets{}{}"".format(tagName,""Final"")
:
tJetFinalCollection = inputCollection
rn recoJetInfo
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2018_design'       :  '112X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v3',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v3',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v3',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v3',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v3',
"
-------------------------------------------------------------------------
"'phase1_2018_design'       :  '112X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v3',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v3',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v3',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v3',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v3',"
-------------------------------------------------------------------------
"'phase1_2018_design'       :  '111X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '111X_upgrade2018_realistic_v2',
'phase1_2018_realistic_hi' :  '111X_upgrade2018_realistic_HI_v1',
'phase1_2018_realistic_HEfail' :  '111X_upgrade2018_realistic_HEfail_v2',
'phase1_2018_cosmics'      :   '111X_upgrade2018cosmics_realistic_deco_v2',
'phase1_2018_cosmics_peak' :   '111X_upgrade2018cosmics_realistic_peak_v2',
"
-------------------------------------------------------------------------
"Recom
PRs: 31050, 31119"
-------------------------------------------------------------------------
=========================================================================
"run2_miniAOD_devel.toModify(calibratedEgammaSettings,correctionFile = _correctionFile2017UL)
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_run2_miniAOD_UL_cff import run2_miniAOD_UL
run2_miniAOD_UL.toModify(calibratedEgammaSettings, correctionFile = _correctionFile2017UL)"
-------------------------------------------------------------------------
"run2_miniAOD_UL.toModify( process.patElectrons, getdBFromTrack = True)
"
-------------------------------------------------------------------------
"Recom
PRs: 30199, 31072"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '112X_dataRun2_v3',
'run2_data'         :   '112X_dataRun2_v3',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v3',
'run2_data_relval'  :   '112X_dataRun2_relval_v3',
"
-------------------------------------------------------------------------
"autoCond = {
     # GlobalTag for MC production (p-Pb collisions) with realistic alignment and calibrations for Run2
     'run2_mc_pa'        :   '110X_mcRun2_pA_v3',
     # GlobalTag for Run1 data reprocessing
     'run1_data'         :   '112X_dataRun2_v3',
     # GlobalTag for Run2 data reprocessing
     'run2_data'         :   '112X_dataRun2_v3',
     # GlobalTag for Run2 data 2018B relvals only: HEM-15-16 fail
     'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v3',
     # GlobalTag for Run2 data relvals: allows customization to run with fixed L1 menu
     'run2_data_relval'  :   '112X_dataRun2_relval_v3',
     # GlobalTag for Run2 HI data
     'run2_data_promptlike_hi' : '110X_dataRun2_PromptLike_HI_v10',
     # GlobalTag for Run1 HLT: it points to the online GT
}"
-------------------------------------------------------------------------
"'run1_data'         :   '111X_dataRun2_v4',
'run2_data'         :   '111X_dataRun2_v4',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v4',
'run2_data_relval'  :   '111X_dataRun2_relval_v4',
"
-------------------------------------------------------------------------
"Recom
PRs: 30984, 31017"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v5', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v5', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v5',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v5',
"
-------------------------------------------------------------------------
"autoCond = {
     # GlobalTag for MC production (cosmics) with realistic conditions for full Phase1 2018 detector,  Strip tracker in PEAK mode
     'phase1_2018_cosmics_peak' :   '112X_upgrade2018cosmics_realistic_peak_v2',
     # GlobalTag for MC production with perfectly aligned and calibrated detector for Phase1 2021
    'phase1_2021_design': '112X_mcRun3_2021_design_v6',
     # GlobalTag for MC production with realistic conditions for Phase1 2021
    'phase1_2021_realistic': '112X_mcRun3_2021_realistic_v7',
     # GlobalTag for MC production (cosmics) with realistic conditions for Phase1 2021,  Strip tracker in DECO mode
    'phase1_2021_cosmics': '112X_mcRun3_2021cosmics_realistic_deco_v7',
     # GlobalTag for MC production with realistic conditions for Phase1 2021 detector for Heavy Ion
    'phase1_2021_realistic_hi': '112X_mcRun3_2021_realistic_HI_v9',
     # GlobalTag for MC production with realistic conditions for Phase1 2023
    'phase1_2023_realistic': '112X_mcRun3_2023_realistic_v4', # GT containing realistic conditions for Phase1 2023
     # GlobalTag for MC production with realistic conditions for Phase1 2024
}"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '111X_mcRun3_2021_design_v7', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '111X_mcRun3_2021_realistic_v7', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '111X_mcRun3_2021cosmics_realistic_deco_v7',
'phase1_2021_realistic_hi' : '111X_mcRun3_2021_realistic_HI_v9',
"
-------------------------------------------------------------------------
"Recom
PRs: 30907, 30993"
-------------------------------------------------------------------------
=========================================================================
"scale_correction_coeff = cms.vdouble(53.94, -27.15),
ouble(53.92, -27.53),
ouble(52.99, -24.96),
"
-------------------------------------------------------------------------
"```python
scale_correction_coeff = cms.vdouble(53.94, -27.15)
scale_curve_parameters + [cms.vdouble(53.92, -27.53),
                          cms.vdouble(52.99, -24.96)]
```"
-------------------------------------------------------------------------
"scale_correction_coeff = cms.vdouble(53.94, -27.15),
ouble(53.92, -27.53),
ouble(52.99, -24.96),
"
-------------------------------------------------------------------------
"Recom
PRs: 30978, 30979"
-------------------------------------------------------------------------
=========================================================================
"for (int i2 = 0; i2 < 4; i2)
  mvacut_[i0][4][i2] = pt4050[i2];
"
-------------------------------------------------------------------------
"for (int i2 = 0; i2 < 4; i2++)
  mvacut_[i0][4][i2] = pt4050[i2];"
-------------------------------------------------------------------------
"_stdalgos    = _chsalgos_81x
"
-------------------------------------------------------------------------
"Recom
PRs: 30773, 30935"
-------------------------------------------------------------------------
=========================================================================
"'hlt_data_GRun' : ['cmsDriver.py RelVal -s L1REPACK:Full --data --scenario=pp -n 10 --conditions auto:run3_hlt_GRun --relval 9000,50 --datatier ""RAW"" --eventcontent RAW --customise=HLTrigger/Configuration/CustomConfigs.L1T --era Run3 --fileout file:RelVal_Raw_GRun_DATA.root --filein /store/data/Run2018D/EphemeralHLTPhysics1/RAW/v1/000/323/775/00000/2E066536-5CF2-B340-A73B-209640F29FF6.root --customise_commands=\'if hasattr(process,""simMuonGEMPadTask""): setattr(process,""simMuonGEMPadTask"",cms.Task())\'',
'hlt_data_PIon' : ['cmsDriver.py RelVal -s L1REPACK:Full --data --scenario=pp -n 10 --conditions auto:run3_hlt_PIon --relval 9000,50 --datatier ""RAW"" --customise=HLTrigger/Configuration/CustomConfigs.L1T --era Run3 --eventcontent RAW --fileout file:RelVal_Raw_PIon_DATA.root --filein /store/data/Run2018D/EphemeralHLTPhysics1/RAW/v1/000/323/775/00000/2E066536-5CF2-B340-A73B-209640F29FF6.root --customise_commands=\'if hasattr(process,""simMuonGEMPadTask""): setattr(process,""simMuonGEMPadTask"",cms.Task())\'',
'hlt_data_PRef' : ['cmsDriver.py RelVal -s L1REPACK:Full --data --scenario=pp -n 10 --conditions auto:run3_hlt_PRef --relval 9000,50 --datatier ""RAW"" --customise=HLTrigger/Configuration/CustomConfigs.L1T --era Run3 --eventcontent RAW --fileout file:RelVal_Raw_PRef_DATA.root --filein /store/data/Run2018D/EphemeralHLTPhysics1/RAW/v1/000/323/775/00000/2E066536-5CF2-B340-A73B-209640F29FF6.root --customise_commands=\'if hasattr(process,""simMuonGEMPadTask""): setattr(process,""simMuonGEMPadTask"",cms.Task())\'',
"
-------------------------------------------------------------------------
"'hlt_data_GRun' : ['cmsDriver.py RelVal -s HLT:GRun,RAW2DIGI,L1Reco,RECO --data --scenario=pp -n 10 --conditions auto:run3_data_GRun --relval 9000,50 --datatier ""RAW-HLT-RECO"" --eventcontent FEVTDEBUGHLT --customise=HLTrigger/Configuration/CustomConfigs.L1THLT --era Run3 --processName=HLTRECO --filein file:RelVal_Raw_GRun_DATA.root --fileout file:RelVal_Raw_GRun_DATA_HLT_RECO.root',                                                              
                    'HLTrigger/Configuration/test/OnLine_HLT_GRun.py']   
'hlt_data_PIon' : ['cmsDriver.py RelVal -s HLT:PIon,RAW2DIGI,L1Reco,RECO --data --scenario=pp -n 10 --conditions auto:run3_data_PIon --relval 9000,50 --datatier ""RAW-HLT-RECO"" --eventcontent FEVTDEBUGHLT --customise=HLTrigger/Configuration/CustomConfigs.L1THLT --era Run3 --processName=HLTRECO --filein file:RelVal_Raw_PIon_DATA.root --fileout file:RelVal_Raw_PIon_DATA_HLT_RECO.root',
                                'HLTrigger/Configuration/test/OnLine_HLT_PIon.py']
'hlt_data_PRef' : ['cmsDriver.py RelVal -s HLT:PRef,RAW2DIGI,L1Reco,RECO --data --scenario=pp -n 10 --conditions auto:run3_data_PRef --relval 9000,50 --datatier ""RAW-HLT-RECO"" --eventcontent FEVTDEBUGHLT --customise=HLTrigger/Configuration/CustomConfigs.L1THLT --era Run3 --processName=HLTRECO --filein file:RelVal_Raw_PRef_DATA.root --fileout file:RelVal_Raw_PRef_DATA_HLT_RECO.root',
                        'HLTrigger/Configuration/test/OnLine_HLT_PRef.py']"
-------------------------------------------------------------------------
"'hlt_mc_2018' : ['cmsDriver.py TTbar_Tauola_13TeV_TuneCUETP8M1_cfi -s GEN,SIM,DIGI,L1,DIGI2RAW --mc --scenario=pp -n 10 --conditions auto:run2_mc_2018 --relval 9000,50 --datatier ""GEN-SIM-RAW"" --eventcontent RAWSIM --customise=HLTrigger/Configuration/CustomConfigs.L1T --era Run2_2018 --fileout file:RelVal_Raw_2018_MC.root',
           'HLTrigger/Configuration/test/OnLine_HLT_2018.py',
           'cmsDriver.py RelVal -s HLT:2018,RAW2DIGI,L1Reco,RECO --mc --scenario=pp -n 10 --conditions auto:run2_mc_2018 --relval 9000,50 --datatier ""RAW-HLT-RECO"" --eventcontent FEVTDEBUGHLT --customise=HLTrigger/Configuration/CustomConfigs.L1THLT --era Run2_2018 --processName=HLTRECO --filein file:RelVal_Raw_2018_MC.root --fileout file:RelVal_Raw_2018_MC_HLT_RECO.root'], 
"
-------------------------------------------------------------------------
"Recom
PRs: 30882, 30884"
-------------------------------------------------------------------------
=========================================================================
"float etaLo = (absie < nEta_ ? towerEtas_[absie - 1] : towerEtas_[absie - 2]);
float etaHi = (absie < nEta_ ? towerEtas_[absie] : towerEtas_[absie - 1]);
"
-------------------------------------------------------------------------
"Configuration.Eras.Modifier_phase2_hgcalV10_cff, FWCore.ParameterSet.Config, Configuration.Eras.Modifier_phase2_hgcalV11_cff, 

float etaLo = absie < nEta_ ? towerEtas_[absie - 1] : towerEtas_[absie - 2];
float etaHi = absie < nEta_ ? towerEtas_[absie] : towerEtas_[absie - 1];"
-------------------------------------------------------------------------
"offset  = cms.vdouble( 1.793,  1.827,  2.363,  2.538,  2.812,  2.642),
scale   = cms.vdouble( 0.138,  0.137,  0.124,  0.115,  0.106,  0.121),
kind    = cms.string('calo'),
"
-------------------------------------------------------------------------
"Recom
PRs: 30736, 30772"
-------------------------------------------------------------------------
=========================================================================
"'keep *_TTStubsFromPhase2TrackerDigis_*_*',
'keep *_TTClustersFromPhase2TrackerDigis_*_*',
"
-------------------------------------------------------------------------
"'drop *_TTStubsFromPhase2TrackerDigis_*_HLT',
'drop *_TTClustersFromPhase2TrackerDigis_*_HLT',"
-------------------------------------------------------------------------
"'keep *_TTStubsFromPhase2TrackerDigis_*_*',
'keep *_TTClustersFromPhase2TrackerDigis_*_*',
"
-------------------------------------------------------------------------
"Recom
PRs: 30768, 30769"
-------------------------------------------------------------------------
=========================================================================
"#lastLumiFile = cms.untracked.string('last_lumi.txt'),
lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),
"
-------------------------------------------------------------------------
"```python
lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),
```"
-------------------------------------------------------------------------
"lastLumiFile = cms.untracked.string('last_lumi.txt'),
#lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),
"
-------------------------------------------------------------------------
"Recom
PRs: 30690, 30696"
-------------------------------------------------------------------------
=========================================================================
"#lastLumiFile = cms.untracked.string('last_lumi.txt'),
lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),
"
-------------------------------------------------------------------------
"```
lastLumiFile = cms.untracked.string('last_lumi.txt'),
lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection')
```"
-------------------------------------------------------------------------
"lastLumiFile = cms.untracked.string('last_lumi.txt'),
#lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),
"
-------------------------------------------------------------------------
"Recom
PRs: 30690, 30696"
-------------------------------------------------------------------------
=========================================================================
"process.onlineMetaDataDigis*
"
-------------------------------------------------------------------------
"Add the required dependency `EventFilter.MetaDataProducer.onlineMetaDataDigis_cfi` and update the code snippet as follows:

```python
from __future__ import print_function
import sys
from Configuration.AlCa.GlobalTag import GlobalTag
from Configuration.Eras.Era_Run3_cff import Run3
import RecoPixelVertexing.PixelTrackFitting.PixelTracks_cff
import HLTrigger.special.hltPixelActivityFilter_cfi
import Configuration.AlCa.GlobalTag
import Configuration.Eras.Era_Run3_cff
from DQMServices.Core import DQMEDAnalyzer
import RecoTracker.FinalTrackSelectors.earlyGeneralTracks_cfi
from DQM.Integration.config import online_customizations_cfi
from DQMServices.Core import DQMQualityTester
import RecoVertex.BeamSpotProducer.BeamSpotOnline_cfi
from FWCore.ParameterSet.Config import Process, cms
from EventFilter.SiStripRawToDigi.SiStripDigis_cfi import siStripDigis
import RecoTracker.TkSeedingLayers.PixelLayerTriplets_cfi
import EventFilter.MetaDataProducer.onlineMetaDataDigis_cfi

process.p = cms.Path(process.scalersRawToDigi*
                      process.tcdsDigis*
                      process.APVPhases*
                      process.consecutiveHEs*
                      process.hltTriggerTypeFilter*
                      process.onlineMetaDataDigis*
```

This code snippet includes the required dependency `EventFilter.MetaDataProducer.onlineMetaDataDigis_cfi` and updates the original code by adding `process.onlineMetaDataDigis*` to the `process.p` path."
-------------------------------------------------------------------------
"process.onlineMetaDataDigis*
"
-------------------------------------------------------------------------
"Recom
PRs: 30677, 30678"
-------------------------------------------------------------------------
=========================================================================
"process.onlineMetaDataDigis*
"
-------------------------------------------------------------------------
"```python
process += process.onlineMetaDataDigis
``` "
-------------------------------------------------------------------------
"process.onlineMetaDataDigis*
"
-------------------------------------------------------------------------
"Recom
PRs: 30677, 30678"
-------------------------------------------------------------------------
=========================================================================
"process.onlineMetaDataDigis*
"
-------------------------------------------------------------------------
"from DQMServices.Core.DQMQualityTester import DQMQualityTester
process.onlineMetaDataDigis = DQMQualityTester.clone()"
-------------------------------------------------------------------------
"process.onlineMetaDataDigis*
"
-------------------------------------------------------------------------
"Recom
PRs: 30677, 30678"
-------------------------------------------------------------------------
=========================================================================
"process.onlineMetaDataDigis*
"
-------------------------------------------------------------------------
"Add the required dependency and update the code snippet as follows:

```python
from __future__ import print_function
import sys
from RecoPixelVertexing.PixelTrackFitting.PixelTracks_cff import *
from HLTrigger.special.hltPixelActivityFilter_cfi import *
from Configuration.AlCa.GlobalTag import *
from Configuration.Eras.Era_Run3_cff import *
from DQMServices.Core.DQMEDAnalyzer import *
from RecoTracker.FinalTrackSelectors.earlyGeneralTracks_cfi import *
from DQM.Integration.config.online_customizations_cfi import *
from DQMServices.Core.DQMQualityTester import *
from RecoVertex.BeamSpotProducer.BeamSpotOnline_cfi import *
from FWCore.ParameterSet.Config import *
from EventFilter.SiStripRawToDigi.SiStripDigis_cfi import *
from RecoTracker.TkSeedingLayers.PixelLayerTriplets_cfi import *

if (process.runType.getRunType() == process.runType.hi_run):
     process.p = cms.Path(
         process.scalersRawToDigi*
         process.tcdsDigis*
         process.APVPhases*
         process.consecutiveHEs*
         process.hltTriggerTypeFilter*
         process.onlineMetaDataDigis*  # Updated line
```"
-------------------------------------------------------------------------
"process.onlineMetaDataDigis*
"
-------------------------------------------------------------------------
"Recom
PRs: 30677, 30678"
-------------------------------------------------------------------------
=========================================================================
", 'pfMassIndependentDeepDoubleBvLV2JetTags:probQCD'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleBvLV2JetTags:probHbb'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleCvLV2JetTags:probQCD'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleCvLV2JetTags:probHcc'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleCvBV2JetTags:probHbb'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleCvBV2JetTags:probHcc'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
"
-------------------------------------------------------------------------
", 'pfMassIndependentDeepDoubleBvLV2JetTags:probQCD'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleBvLV2JetTags:probHbb'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleCvLV2JetTags:probQCD'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleCvLV2JetTags:probHcc'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleCvBV2JetTags:probHbb'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleCvBV2JetTags:probHcc'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]"
-------------------------------------------------------------------------
", 'pfMassIndependentDeepDoubleBvLV2JetTags:probQCD'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleBvLV2JetTags:probHbb'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleCvLV2JetTags:probQCD'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleCvLV2JetTags:probHcc'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleCvBV2JetTags:probHbb'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleCvBV2JetTags:probHcc'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"modifyHgcalTriggerPrimitivesWithV9Geometry_ = (phase2_hgcalV9 & ~phase2_hgcalV11).makeProcessModifier(custom_geometry_decentralized_V9)
"
-------------------------------------------------------------------------
modifyHgcalTriggerPrimitivesWithV9Geometry_ = (phase2_hgcalV9 & ~phase2_hgcalV11).makeProcessModifier(custom_geometry_decentralized_V9)
-------------------------------------------------------------------------
"modifyHgcalTriggerPrimitivesWithV9Geometry_ = (phase2_hgcalV9 & ~phase2_hgcalV11).makeProcessModifier(custom_geometry_decentralized_V9)
"
-------------------------------------------------------------------------
"Recom
PRs: 30470, 30516"
-------------------------------------------------------------------------
=========================================================================
"# Switch to veto the upload of the BeamSpot conditions to the DB
# when False it performs the upload
noDB = True
if 'noDB=False' in sys.argv:
noDB=False

"
-------------------------------------------------------------------------
"```python
# Switch to veto the upload of the BeamSpot conditions to the DB
# when False it performs the upload
noDB = True
if 'noDB=False' in sys.argv:
    noDB = False
```"
-------------------------------------------------------------------------
"# Switch to veto the upload of the BeamSpot conditions to the DB
# when False it performs the upload
noDB = True
if 'noDB=False' in sys.argv:
noDB=False

"
-------------------------------------------------------------------------
"Recom
PRs: 30448, 30503"
-------------------------------------------------------------------------
=========================================================================
"# If not live or noDB: produce a (local) SQLITE file
if not live or noDB:
"
-------------------------------------------------------------------------
"```python
if not live or noDB:
```"
-------------------------------------------------------------------------
"# If not live or noDB: produce a (local) SQLITE file
if not live or noDB:
"
-------------------------------------------------------------------------
"Recom
PRs: 30448, 30503"
-------------------------------------------------------------------------
=========================================================================
"# Switch to veto the upload of the BeamSpot conditions to the DB
# when False it performs the upload
noDB = True
if 'noDB=False' in sys.argv:
noDB=False

"
-------------------------------------------------------------------------
"```python
# Switch to veto the upload of the BeamSpot conditions to the DB
# when False it performs the upload
noDB = False
if 'noDB=True' in sys.argv:
    noDB = True
```"
-------------------------------------------------------------------------
"# Switch to veto the upload of the BeamSpot conditions to the DB
# when False it performs the upload
noDB = True
if 'noDB=False' in sys.argv:
noDB=False

"
-------------------------------------------------------------------------
"Recom
PRs: 30448, 30503"
-------------------------------------------------------------------------
=========================================================================
"# If not live or noDB: produce a (local) SQLITE file
if unitTest or noDB:
"
-------------------------------------------------------------------------
"if unitTest or noDB:
    Assign(targets=[Name(id='lastLumiFile', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Attribute(value=Name(id='cms', ctx=Load()), attr='untracked', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='')], keywords=[])], ctx=Load())"
-------------------------------------------------------------------------
"# If not live or noDB: produce a (local) SQLITE file
if unitTest or noDB:
"
-------------------------------------------------------------------------
"Recom
PRs: 30448, 30503"
-------------------------------------------------------------------------
=========================================================================
"options.register('noDB',
True, # default value
VarParsing.VarParsing.multiplicity.singleton,
VarParsing.VarParsing.varType.bool,
""Don't upload the BeamSpot conditions to the DB"")

"
-------------------------------------------------------------------------
"options.register('uploadBeamSpotToDB',
                   True, 
                   VarParsing.VarParsing.multiplicity.singleton,
                   VarParsing.VarParsing.varType.bool,
                   ""Upload the BeamSpot conditions to the DB"")"
-------------------------------------------------------------------------
"options.register('noDB',
True, # default value
VarParsing.VarParsing.multiplicity.singleton,
VarParsing.VarParsing.varType.bool,
""Don't upload the BeamSpot conditions to the DB"")

"
-------------------------------------------------------------------------
"Recom
PRs: 30448, 30503"
-------------------------------------------------------------------------
=========================================================================
"options.register('noDB',
True, # default value
VarParsing.VarParsing.multiplicity.singleton,
VarParsing.VarParsing.varType.bool,
""Don't upload the BeamSpot conditions to the DB"")

"
-------------------------------------------------------------------------
"options.register('uploadBeamSpotConditions',
                    True, # default value
                    VarParsing.VarParsing.multiplicity.singleton,
                    VarParsing.VarParsing.varType.bool,
                   ""Upload the BeamSpot conditions to the DB"")"
-------------------------------------------------------------------------
"options.register('noDB',
True, # default value
VarParsing.VarParsing.multiplicity.singleton,
VarParsing.VarParsing.varType.bool,
""Don't upload the BeamSpot conditions to the DB"")

"
-------------------------------------------------------------------------
"Recom
PRs: 30448, 30503"
-------------------------------------------------------------------------
=========================================================================
"options.register('noDB',
True, # default value
VarParsing.VarParsing.multiplicity.singleton,
VarParsing.VarParsing.varType.bool,
""Don't upload the BeamSpot conditions to the DB"")

"
-------------------------------------------------------------------------
"```python
options.register('noDB',
                 True,
                 VarParsing.VarParsing.multiplicity.singleton,
                 VarParsing.VarParsing.varType.bool,
                 ""Don't upload the BeamSpot conditions to the DB"")
```"
-------------------------------------------------------------------------
"options.register('noDB',
True, # default value
VarParsing.VarParsing.multiplicity.singleton,
VarParsing.VarParsing.varType.bool,
""Don't upload the BeamSpot conditions to the DB"")

"
-------------------------------------------------------------------------
"Recom
PRs: 30448, 30503"
-------------------------------------------------------------------------
=========================================================================
"if not options.dryRun:
    schedinfo = subprocess.check_output([""myschedd"",""show""])
    if not 'tzero' in schedinfo:
        print(""\nAll-In-One Tool: you need to call `module load lxbatch/tzero` before trying to submit jobs. Please do so and try again"")
        exit(1)
"
-------------------------------------------------------------------------
"```python
if not options.dryRun:
    schedinfo = subprocess.check_output([""myschedd"", ""show""])
    if not 'tzero' in schedinfo:
        print(""\nAll-In-One Tool: you need to call `module load lxbatch/tzero` before trying to submit jobs. Please do so and try again"")
        exit(1)
```"
-------------------------------------------------------------------------
"if not options.dryRun:
    schedinfo = subprocess.check_output([""myschedd"",""show""])
    if not 'tzero' in schedinfo:
        print(""\nAll-In-One Tool: you need to call `module load lxbatch/tzero` before trying to submit jobs. Please do so and try again"")
        exit(1)
"
-------------------------------------------------------------------------
"Recom
PRs: 30343, 30497"
-------------------------------------------------------------------------
=========================================================================
"def __getstate__(self): return self.__dict__
def __setstate__(self, d): self.__dict__.update(d)
"
-------------------------------------------------------------------------
"```python
def __getstate__(self):
    return self.__dict__
    
def __setstate__(self, d):
    self.__dict__.update(d)
```"
-------------------------------------------------------------------------
"def __getstate__(self): return self.__dict__
def __setstate__(self, d): self.__dict__.update(d)
"
-------------------------------------------------------------------------
"Recom
PRs: 30346, 30347"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v2',
'phase1_2021_realistic_hi' :  '112X_mcRun3_2021_realistic_HI_v2',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v2', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"autoCond = {
    'phase1_2021_design'       : '112X_mcRun3_2021_design_v2',
    'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v2',
    'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v2',
    'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v2',
    'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v2',
    'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v2',
    'phase2_realistic': '110X_mcRun4_realistic_v3' # Existing entry
}"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '110X_mcRun3_2021_design_v8', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '110X_mcRun3_2021_realistic_v10', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '110X_mcRun3_2021cosmics_realistic_deco_v7',
'phase1_2023_realistic'    : '110X_mcRun3_2023_realistic_v10', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '110X_mcRun3_2024_realistic_v10', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"Recom
PRs: 30221, 30300"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2017_design'       :  '111X_mc2017_design_v2',
'phase1_2017_realistic'    :  '111X_mc2017_realistic_v2',
'phase1_2017_cosmics'      :  '111X_mc2017cosmics_realistic_deco_v1',
'phase1_2017_cosmics_peak' :  '111X_mc2017cosmics_realistic_peak_v1',
'phase1_2018_design'       :  '111X_upgrade2018_design_v1',
'phase1_2018_realistic'    :  '111X_upgrade2018_realistic_v1',
'phase1_2018_realistic_HEfail' :  '111X_upgrade2018_realistic_HEfail_v1',
'phase1_2018_cosmics'      :   '111X_upgrade2018cosmics_realistic_deco_v1',
'phase1_2018_cosmics_peak' :   '111X_upgrade2018cosmics_realistic_peak_v1',
"
-------------------------------------------------------------------------
"autoCond = {
     'run3_data_promptlike'     :   '110X_dataRun3_Prompt_v3',
     'phase1_2018_realistic_hi' :  '110X_upgrade2018_realistic_HI_v5',
     'phase1_2021_design'       : '112X_mcRun3_2021_design_v2', 
     'phase1_2017_design'       :  '111X_mc2017_design_v2',
     'phase1_2017_realistic'    :  '111X_mc2017_realistic_v2',
     'phase1_2017_cosmics'      :  '111X_mc2017cosmics_realistic_deco_v1',
     'phase1_2017_cosmics_peak' :  '111X_mc2017cosmics_realistic_peak_v1',
     'phase1_2018_design'       :  '111X_upgrade2018_design_v1',
     'phase1_2018_realistic'    :  '111X_upgrade2018_realistic_v1',
     'phase1_2018_realistic_HEfail' :  '111X_upgrade2018_realistic_HEfail_v1',
     'phase1_2018_cosmics'      :  '111X_upgrade2018cosmics_realistic_deco_v1',
     'phase1_2018_cosmics_peak' :  '111X_upgrade2018cosmics_realistic_peak_v1'
}"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '111X_mc2017_design_v2',
'phase1_2017_realistic'    :  '111X_mc2017_realistic_v2',
'phase1_2017_cosmics'      :  '111X_mc2017cosmics_realistic_deco_v1',
'phase1_2017_cosmics_peak' :  '111X_mc2017cosmics_realistic_peak_v1',
'phase1_2018_design'       :  '111X_upgrade2018_design_v1',
'phase1_2018_realistic'    :  '111X_upgrade2018_realistic_v1',
'phase1_2018_realistic_HEfail' :  '111X_upgrade2018_realistic_HEfail_v1',
'phase1_2018_cosmics'      :   '111X_upgrade2018cosmics_realistic_deco_v1',
'phase1_2018_cosmics_peak' :   '111X_upgrade2018cosmics_realistic_peak_v1',
"
-------------------------------------------------------------------------
"Recom
PRs: 30286, 30299"
-------------------------------------------------------------------------
=========================================================================
"'run2_mc_pre_vfp'   :   '111X_mcRun2_asymptotic_preVFP_v1',
'run2_mc'           :   '111X_mcRun2_asymptotic_v1',
'run2_mc_cosmics'   :   '111X_mcRun2cosmics_startup_deco_v1',
"
-------------------------------------------------------------------------
"autoCond = {
     # GlobalTag for MC production with perfectly aligned and calibrated detector for Run2
     'run2_design'       :   '110X_mcRun2_design_v5',
     #GlobalTag for MC production with optimistic alignment and calibrations for 2016, prior to VFP change
     #GlobalTag for MC production with optimistic alignment and calibrations for 2016, after VFP change
     # GlobalTag for MC production (cosmics) with starup-like alignment and calibrations for Run2, Strip tracker in peak mode
     # GlobalTag for MC production (Heavy Ions collisions) with optimistic alignment and calibrations for Run2
     'run2_mc_pre_vfp'  :   '111X_mcRun2_asymptotic_preVFP_v1',
     'run2_mc'          :   '111X_mcRun2_asymptotic_v1',
     'run2_mc_cosmics'  :   '111X_mcRun2cosmics_startup_deco_v1',
     # GlobalTag for MC production (p-Pb collisions) with realistic alignment and calibrations for Run2
Required dependency: Configuration.HLT.autoCondHLT, 
Original metadata: Updated L1T tags to address CMSSW issue #29237 [10_6_X]"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '106X_mcRun2_asymptotic_preVFP_v8',
'run2_mc'           :   '106X_mcRun2_asymptotic_v13',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_startup_deco_v7',
"
-------------------------------------------------------------------------
"Recom
PRs: 30151, 30287"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v2',
'phase1_2021_realistic_hi' :  '112X_mcRun3_2021_realistic_HI_v2',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v2', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v2',
'phase1_2021_realistic_hi' :  '112X_mcRun3_2021_realistic_HI_v2',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v2', # GT containing realistic conditions for Phase1 2024"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '111X_mcRun3_2021_design_v6', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '111X_mcRun3_2021_realistic_v6', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '111X_mcRun3_2021cosmics_realistic_deco_v6',
'phase1_2021_realistic_hi' : '111X_mcRun3_2021_realistic_HI_v7',
'phase1_2023_realistic'    : '111X_mcRun3_2023_realistic_v6', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '111X_mcRun3_2024_realistic_v6', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"Recom
PRs: 30221, 30267"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v1', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v1', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v1',
'phase1_2021_realistic_hi' :  '112X_mcRun3_2021_realistic_HI_v1',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v1', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v1', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"autoCond = {
     # GlobalTag for MC production (cosmics) with realistic conditions for full Phase1 2018 detector,  Strip tracker in PEAK mode
     'phase1_2018_cosmics_peak' :   '110X_upgrade2018cosmics_realistic_peak_v7',
     # GlobalTag for MC production with perfectly aligned and calibrated detector for Phase1 2021
     'phase1_2021_design'       : '112X_mcRun3_2021_design_v1',
     # GlobalTag for MC production with realistic conditions for Phase1 2021
     'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v1',
     # GlobalTag for MC production (cosmics) with realistic conditions for Phase1 2021,  Strip tracker in DECO mode
     'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v1',
     # GlobalTag for MC production with realistic conditions for Phase1 2021 detector for Heavy Ion
     'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v1',
     # GlobalTag for MC production with realistic conditions for Phase1 2023
     'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v1',
     # GlobalTag for MC production with realistic conditions for Phase1 2024
     'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v1',
     # GlobalTag for MC production with realistic conditions for Phase2
     'phase2_realistic'         : '110X_mcRun4_realistic_v3'
 }"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '111X_mcRun3_2021_design_v5', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '111X_mcRun3_2021_realistic_v5', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '111X_mcRun3_2021cosmics_realistic_deco_v5',
'phase1_2021_realistic_hi' :  '111X_mcRun3_2021_realistic_HI_v6',
'phase1_2023_realistic'    : '111X_mcRun3_2023_realistic_v5', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '111X_mcRun3_2024_realistic_v5', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"Recom
PRs: 30195, 30233"
-------------------------------------------------------------------------
=========================================================================
"'run2_mc_pre_vfp'   :   '111X_mcRun2_asymptotic_preVFP_v1',
'run2_mc'           :   '111X_mcRun2_asymptotic_v1',
'run2_mc_cosmics'   :   '111X_mcRun2cosmics_startup_deco_v1',
"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '111X_mcRun2_asymptotic_preVFP_v1',
'run2_mc'           :   '111X_mcRun2_asymptotic_v1',
'run2_mc_cosmics'   :   '111X_mcRun2cosmics_startup_deco_v1',"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '110X_mcRun2_asymptotic_preVFP_v7',
'run2_mc'           :   '110X_mcRun2_asymptotic_v9',
'run2_mc_cosmics'   :   '110X_mcRun2cosmics_startup_deco_v8',
"
-------------------------------------------------------------------------
"Recom
PRs: 30151, 30203"
-------------------------------------------------------------------------
=========================================================================
"'run2_mc_pre_vfp'   :   '111X_mcRun2_asymptotic_preVFP_v1',
'run2_mc'           :   '111X_mcRun2_asymptotic_v1',
'run2_mc_cosmics'   :   '111X_mcRun2cosmics_startup_deco_v1',
"
-------------------------------------------------------------------------
"autoCond = {
    'run2_mc_pre_vfp'   :   '111X_mcRun2_asymptotic_preVFP_v1',
    'run2_mc'           :   '111X_mcRun2_asymptotic_v1',
    'run2_mc_cosmics'   :   '111X_mcRun2cosmics_startup_deco_v1',
}"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '111X_mcRun2_asymptotic_preVFP_v1',
'run2_mc'           :   '111X_mcRun2_asymptotic_v1',
'run2_mc_cosmics'   :   '111X_mcRun2cosmics_startup_deco_v1',
"
-------------------------------------------------------------------------
"Recom
PRs: 30151, 30190"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v3',
'run2_data'         :   '111X_dataRun2_v3',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v3',
'run2_data_relval'  :   '111X_dataRun2_relval_v3',
"
-------------------------------------------------------------------------
"'run1_data'         :   '111X_dataRun2_v3',
'run2_data'         :   '111X_dataRun2_v3',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v3',
'run2_data_relval'  :   '111X_dataRun2_relval_v3',"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v28',
'run2_data'         :   '106X_dataRun2_v28',
'run2_data_relval'  :   '106X_dataRun2_relval_v26',
"
-------------------------------------------------------------------------
"Recom
PRs: 29629, 30132"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v3',
'run2_data'         :   '111X_dataRun2_v3',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v3',
'run2_data_relval'  :   '111X_dataRun2_relval_v3',
"
-------------------------------------------------------------------------
"'run1_data'         :   '111X_dataRun2_v13',
'run2_data'         :   '111X_dataRun2_v13',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v3',
'run2_data_relval'  :   '111X_dataRun2_relval_v13',"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v13',
'run2_data'         :   '110X_dataRun2_v13',
'run2_data_relval'  :   '110X_dataRun2_relval_v13',
"
-------------------------------------------------------------------------
"Recom
PRs: 29629, 30131"
-------------------------------------------------------------------------
=========================================================================
"'pathALCARECOTkAlCosmicsCosmicTF0T',
'pathALCARECOTkAlCosmicsRegional0T',
'pathALCARECOTkAlCosmicsDuringCollisions0T'
)
DuringCollisions0T_*_*',
"
-------------------------------------------------------------------------
"```python
 OutALCARECOTkAlCosmics0T_noDrop = cms.PSet(
     SelectEvents = cms.untracked.PSet(
         SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsDuringCollisions0T', 
     ),
     outputCommands = cms.untracked.vstring(
         #'keep *_ALCARECOTkAlCosmics*0T_*_*',
         'keep *_ALCARECOTkAlCosmicsCTF0T_*_*',
         'keep *_ALCARECOTkAlCosmicsCosmicTF0T_*_*',
         'keep *_ALCARECOTkAlCosmicsRegional0T_*_*',
         'keep siStripDigis_DetIdCollection_*_*',
         'keep L1AcceptBunchCrossings_*_*_*',
         'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
```"
-------------------------------------------------------------------------
"'pathALCARECOTkAlCosmicsCosmicTF0T',
'pathALCARECOTkAlCosmicsRegional0T',
'pathALCARECOTkAlCosmicsDuringCollisions0T'
)
DuringCollisions0T_*_*',
"
-------------------------------------------------------------------------
"Recom
PRs: 30013, 30014"
-------------------------------------------------------------------------
=========================================================================
"# AlCaReco for track based alignment using Cosmic muons reconstructed by Cosmics During Collisions Algorithm
# (same cuts)
ALCARECOTkAlCosmicsDuringCollisions0T = ALCARECOTkAlCosmicsCTF0T.clone(
src = 'cosmicDCTracks'
)

LCARECOTkAlCosmicsDuringCollisions0T = cms.Sequence(ALCARECOTkAlCosmicsDuringCollisions0T)
"
-------------------------------------------------------------------------
"ALCARECOTkAlCosmicsCTF0T = ALCARECOTkAlCosmicsCTF0T.clone(
     src = 'cosmicDCTracks'
     )
 
 #________________________________Sequences____________________________________
 seqALCARECOTkAlCosmicsCTF0T = cms.Sequence(ALCARECOTkAlCosmicsCTF0T)"
-------------------------------------------------------------------------
"# AlCaReco for track based alignment using Cosmic muons reconstructed by Cosmics During Collisions Algorithm
# (same cuts)
ALCARECOTkAlCosmicsDuringCollisions0T = ALCARECOTkAlCosmicsCTF0T.clone(
src = 'cosmicDCTracks'
)

LCARECOTkAlCosmicsDuringCollisions0T = cms.Sequence(ALCARECOTkAlCosmicsDuringCollisions0T)
"
-------------------------------------------------------------------------
"Recom
PRs: 30013, 30014"
-------------------------------------------------------------------------
=========================================================================
"pathALCARECOTkAlCosmicsDuringCollisions0T = cms.Path(seqALCARECOTkAlCosmicsDuringCollisions0T*ALCARECOTkAlCosmicsInCollisions0TDQM)
"
-------------------------------------------------------------------------
pathALCARECOTkAlCosmicsDuringCollisions0T = cms.Path(seqALCARECOTkAlCosmicsDuringCollisions0T*ALCARECOTkAlCosmicsInCollisions0TDQM)
-------------------------------------------------------------------------
"pathALCARECOTkAlCosmicsDuringCollisions0T = cms.Path(seqALCARECOTkAlCosmicsDuringCollisions0T*ALCARECOTkAlCosmicsInCollisions0TDQM)
"
-------------------------------------------------------------------------
"Recom
PRs: 30013, 30014"
-------------------------------------------------------------------------
=========================================================================
"paths  = (pathALCARECOTkAlCosmicsCTF0T,pathALCARECOTkAlCosmicsCosmicTF0T,pathALCARECOTkAlCosmicsRegional0T,pathALCARECOTkAlCosmicsDuringCollisions0T),
"
-------------------------------------------------------------------------
"paths  = (pathALCARECOTkAlCosmicsCTF0T,pathALCARECOTkAlCosmicsCosmicTF0T,pathALCARECOTkAlCosmicsRegional0T,pathALCARECOTkAlCosmicsDuringCollisions0T)"
-------------------------------------------------------------------------
"paths  = (pathALCARECOTkAlCosmicsCTF0T,pathALCARECOTkAlCosmicsCosmicTF0T,pathALCARECOTkAlCosmicsRegional0T,pathALCARECOTkAlCosmicsDuringCollisions0T),
"
-------------------------------------------------------------------------
"Recom
PRs: 30013, 30014"
-------------------------------------------------------------------------
=========================================================================
"#############################
### TkAlCosmicsInCollisions0T ###
#############################
__selectionName = 'TkAlCosmicsInCollisions0T'
ALCARECOTkAlCosmicsInCollisions0TTrackingDQM = ALCARECOTkAlCosmicsCTF0TTrackingDQM.clone(
#names and desigantions
TrackProducer = 'ALCARECO'__selectionName,
AlgoName = 'ALCARECO'__selectionName,
BSFolderName = ""AlCaReco/""__selectionName""/BeamSpot"",

RECOTkAlCosmicsInCollisions0TTkAlDQM = ALCARECOTkAlCosmicsCTF0TTkAlDQM.clone(
es and desigantions
TrackProducer = 'ALCARECO'__selectionName,
ReferenceTrackProducer = 'cosmictrackfinderP5',
AlgoName = 'ALCARECO'__selectionName

 Alignment.CommonAlignmentProducer.ALCARECOTkAlCosmics0THLT_cff import ALCARECOTkAlCosmics0THLT
ARECOTkAlCosmicsInCollisions0THLTDQM = hltMonBitSummary.clone(
 directory = ""AlCaReco/""__selectionName""/HLTSummary"",
 histLabel = __selectionName,
 HLTPaths = [""HLT_.*L1.*""],
 eventSetupPathsKey =  ALCARECOTkAlCosmics0THLT.eventSetupPathsKey.value()

ARECOTkAlCosmicsInCollisions0TDQM = cms.Sequence( ALCARECOTkAlCosmicsInCollisions0TTrackingDQM  ALCARECOTkAlCosmicsInCollisions0TTkAlDQM ALCARECOTkAlCosmicsInCollisions0THLTDQM)
RECOTkAlCosmicsInCollisions0TDQM = cms.Sequence( ALCARECOTkAlCosmicsInCollisions0TTrackingDQM  ALCARECOTkAlCosmicsInCollisions0TTkAlDQM )
"
-------------------------------------------------------------------------
"```python
#############################
### TkAlCosmicsInCollisions0T ###
#############################
__selectionName = 'TkAlCosmicsInCollisions0T'
ALCARECOTkAlCosmicsInCollisions0TTrackingDQM = ALCARECOTkAlCosmicsCTF0TTrackingDQM.clone(
    #names and designations
    TrackProducer = 'ALCARECO' + __selectionName,
    AlgoName = 'ALCARECO' + __selectionName,
    BSFolderName = ""AlCaReco/"" + __selectionName + ""/BeamSpot""
)

ALCARECOTkAlCosmicsInCollisions0TTkAlDQM = ALCARECOTkAlCosmicsCTF0TTkAlDQM.clone(
    #names and designations
    TrackProducer = 'ALCARECO' + __selectionName,
    ReferenceTrackProducer = 'cosmictrackfinderP5',
    AlgoName = 'ALCARECO' + __selectionName
)

from Alignment.CommonAlignmentProducer.ALCARECOTkAlCosmics0THLT_cff import ALCARECOTkAlCosmics0THLT
ARECOTkAlCosmicsInCollisions0THLTDQM = hltMonBitSummary.clone(
    directory = ""AlCaReco/"" + __selectionName + ""/HLTSummary"",
    histLabel = __selectionName,
    HLTPaths = [""HLT_.*L1.*""],
    eventSetupPathsKey = ALCARECOTkAlCosmics0THLT.eventSetupPathsKey.value()
)

ARECOTkAlCosmicsInCollisions0TDQM = cms.Sequence(ALCARECOTkAlCosmicsInCollisions0TTrackingDQM, ALCARECOTkAlCosmicsInCollisions0TTkAlDQM, ALCARECOTkAlCosmicsInCollisions0THLTDQM)
RECOTkAlCosmicsInCollisions0TDQM = cms.Sequence(ALCARECOTkAlCosmicsInCollisions0TTrackingDQM, ALCARECOTkAlCosmicsInCollisions0TTkAlDQM)
```"
-------------------------------------------------------------------------
"#############################
### TkAlCosmicsInCollisions0T ###
#############################
__selectionName = 'TkAlCosmicsInCollisions0T'
ALCARECOTkAlCosmicsInCollisions0TTrackingDQM = ALCARECOTkAlCosmicsCTF0TTrackingDQM.clone(
#names and desigantions
TrackProducer = 'ALCARECO'__selectionName,
AlgoName = 'ALCARECO'__selectionName,
BSFolderName = ""AlCaReco/""__selectionName""/BeamSpot"",

RECOTkAlCosmicsInCollisions0TTkAlDQM = ALCARECOTkAlCosmicsCTF0TTkAlDQM.clone(
es and desigantions
TrackProducer = 'ALCARECO'__selectionName,
ReferenceTrackProducer = 'cosmictrackfinderP5',
AlgoName = 'ALCARECO'__selectionName

 Alignment.CommonAlignmentProducer.ALCARECOTkAlCosmics0THLT_cff import ALCARECOTkAlCosmics0THLT
ARECOTkAlCosmicsInCollisions0THLTDQM = hltMonBitSummary.clone(
 directory = ""AlCaReco/""__selectionName""/HLTSummary"",
 histLabel = __selectionName,
 HLTPaths = [""HLT_.*L1.*""],
 eventSetupPathsKey =  ALCARECOTkAlCosmics0THLT.eventSetupPathsKey.value()

ARECOTkAlCosmicsInCollisions0TDQM = cms.Sequence( ALCARECOTkAlCosmicsInCollisions0TTrackingDQM  ALCARECOTkAlCosmicsInCollisions0TTkAlDQM ALCARECOTkAlCosmicsInCollisions0THLTDQM)
RECOTkAlCosmicsInCollisions0TDQM = cms.Sequence( ALCARECOTkAlCosmicsInCollisions0TTrackingDQM  ALCARECOTkAlCosmicsInCollisions0TTkAlDQM )
"
-------------------------------------------------------------------------
"Recom
PRs: 30013, 30014"
-------------------------------------------------------------------------
=========================================================================
"
# Update Pixel Gain calibration scheme for Run3 (PR #29333)
def customiseFor29333(process):
for producer in producers_by_type(process, ""SiPixelClusterProducer""):
    # For Run3, change in the gain calibration scheme,
    # to include the VCal conversion factors directly in the SiPixelGainCalibration DB object
    # full details at: https://indico.cern.ch/event/879470/contributions/3796405/attachments/2009273/3356603/pix_off_25_3_gain_calibration_mc.pdf
    producer.VCaltoElectronGain      = cms.int32(1) # all gains=1, pedestals=0
    producer.VCaltoElectronGain_L1   = cms.int32(1)
    producer.VCaltoElectronOffset    = cms.int32(0)
    producer.VCaltoElectronOffset_L1 = cms.int32(0)

return process

process = customiseFor29333(process)
"
-------------------------------------------------------------------------
"```python
def customiseFor29333(process):

    for producer in producers_by_type(process, ""SiPixelClusterProducer""):
        # For Run3, change in the gain calibration scheme,
        # to include the VCal conversion factors directly in the SiPixelGainCalibration DB object
        # full details at: https://indico.cern.ch/event/879470/contributions/3796405/attachments/2009273/3356603/pix_off_25_3_gain_calibration_mc.pdf
        producer.VCaltoElectronGain      = cms.int32(1) # all gains=1, pedestals=0
        producer.VCaltoElectronGain_L1   = cms.int32(1)
        producer.VCaltoElectronOffset    = cms.int32(0)
        producer.VCaltoElectronOffset_L1 = cms.int32(0)

    return process

process = customiseFor29333(process)
```"
-------------------------------------------------------------------------
"
# Update Pixel Gain calibration scheme for Run3 (PR #29333)
def customiseFor29333(process):
for producer in producers_by_type(process, ""SiPixelClusterProducer""):
    # For Run3, change in the gain calibration scheme,
    # to include the VCal conversion factors directly in the SiPixelGainCalibration DB object
    # full details at: https://indico.cern.ch/event/879470/contributions/3796405/attachments/2009273/3356603/pix_off_25_3_gain_calibration_mc.pdf
    producer.VCaltoElectronGain      = cms.int32(1) # all gains=1, pedestals=0
    producer.VCaltoElectronGain_L1   = cms.int32(1)
    producer.VCaltoElectronOffset    = cms.int32(0)
    producer.VCaltoElectronOffset_L1 = cms.int32(0)

return process

process = customiseFor29333(process)
"
-------------------------------------------------------------------------
"Recom
PRs: 29951, 29959"
-------------------------------------------------------------------------
=========================================================================
"prim.append(entries[0])
sec.append(entries[1])
prim.append(entry)
 any duplicates
orted(list(set(prim)))
rted(list(set(sec)))
"
-------------------------------------------------------------------------
"```python
prim = []
sec = []

prim.append(entries[0])
sec.append(entries[1])
prim.append(entry)

# Remove duplicates from prim and sec lists
sorted(list(set(prim)))
sorted(list(set(sec)))
```"
-------------------------------------------------------------------------
"prim.append(entries[0])
sec.append(entries[1])
prim.append(entry)
 any duplicates
orted(list(set(prim)))
rted(list(set(sec)))
"
-------------------------------------------------------------------------
"Recom
PRs: 29454, 29499"
-------------------------------------------------------------------------
=========================================================================
"run2_miniAOD_devel.toModify(pileupJetId, algos = _chsalgos_102x)
"
-------------------------------------------------------------------------
"pileupJetId = cms.EDProducer('PileupJetIdProducer',
      residualsFromTxt = cms.bool(False),
 #     residualsTxt     = cms.FileInPath(""RecoJets/JetProducers/data/download.url"") # must be an existing file
 )

 # Calculate variables, but don't run MVAs
 pileupJetIdCalculator = pileupJetId.clone(
      residualsFromTxt = cms.bool(False),
 )

run2_miniAOD_devel.toModify(pileupJetIdCalculator, algos = _chsalgos_102x)"
-------------------------------------------------------------------------
"run2_miniAOD_devel.toModify(pileupJetId, algos = _chsalgos_102x)
"
-------------------------------------------------------------------------
"Recom
PRs: 29376, 29377"
-------------------------------------------------------------------------
=========================================================================
"higgsvalidation_seq = cms.Sequence(higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqTTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqhiggsvalidation_seq)
"
-------------------------------------------------------------------------
"```python
higgsvalidation_seq = cms.Sequence(higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seq + mbueAndqcdValidation_seq + TTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seq + mbueAndqcdValidation_seq + higgsvalidation_seq)
```"
-------------------------------------------------------------------------
"higgsvalidation_seq = cms.Sequence(higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqTTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqhiggsvalidation_seq)
"
-------------------------------------------------------------------------
"Recom
PRs: 29146, 29356"
-------------------------------------------------------------------------
=========================================================================
"higgsvalidation_seq = cms.Sequence(higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqTTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqhiggsvalidation_seq)
"
-------------------------------------------------------------------------
"```python
higgsvalidation_seq = cms.Sequence(HiggsValidation_cfi.higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seq + mbueAndqcdValidation_seq + TTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seq + mbueAndqcdValidation_seq + higgsvalidation_seq)
```"
-------------------------------------------------------------------------
"higgsvalidation_seq = cms.Sequence(higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqTTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqhiggsvalidation_seq)
"
-------------------------------------------------------------------------
"Recom
PRs: 29146, 29354"
-------------------------------------------------------------------------
=========================================================================
"higgsvalidation_seq = cms.Sequence(higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqTTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqhiggsvalidation_seq)
"
-------------------------------------------------------------------------
"higgsValidation_seq = cms.Sequence(higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seq + mbueAndqcdValidation_seq + TTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seq + mbueAndqcdValidation_seq + higgsValidation_seq)"
-------------------------------------------------------------------------
"higgsvalidation_seq = cms.Sequence(higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqTTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqhiggsvalidation_seq)
"
-------------------------------------------------------------------------
"Recom
PRs: 29146, 29352"
-------------------------------------------------------------------------
=========================================================================
"higgsvalidation_seq = cms.Sequence(higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqTTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqhiggsvalidation_seq)
"
-------------------------------------------------------------------------
"```python
higgsvalidation_seq = cms.Sequence(higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seq+mbueAndqcdValidation_seq+TTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seq+mbueAndqcdValidation_seq+higgsvalidation_seq)
```"
-------------------------------------------------------------------------
"higgsvalidation_seq = cms.Sequence(higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqTTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqhiggsvalidation_seq)
"
-------------------------------------------------------------------------
"Recom
PRs: 29146, 29350"
-------------------------------------------------------------------------
=========================================================================
"'run3_data_promptlike'     :   '110X_dataRun3_Prompt_v3',
"
-------------------------------------------------------------------------
"'run3_data_promptlike'     :   '110X_dataRun3_Prompt_v3',"
-------------------------------------------------------------------------
"'run3_data_promptlike'     :   '110X_dataRun3_Prompt_v3',
"
-------------------------------------------------------------------------
"Recom
PRs: 29050, 29051"
-------------------------------------------------------------------------
=========================================================================
"trainingVariables_102X_Eta0To3 = [
"
-------------------------------------------------------------------------
trainingVariables_102X_Eta0To3 = [
-------------------------------------------------------------------------
"run2_miniAOD_devel.toReplaceWith(_stdalgos, _chsalgos_102x)
"
-------------------------------------------------------------------------
"Recom
PRs: 28984, 29045"
-------------------------------------------------------------------------
=========================================================================
"trainingVariables_102X_Eta0To3 = [
"
-------------------------------------------------------------------------
trainingVariables_102X_Eta0To3 = [
-------------------------------------------------------------------------
"run2_miniAOD_devel.toReplaceWith(_stdalgos, _chsalgos_102x)
"
-------------------------------------------------------------------------
"Recom
PRs: 28984, 29044"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v2',
'run2_data'         :   '111X_dataRun2_v2',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v2',
'run2_data_relval'  :   '111X_dataRun2_relval_v2',
"
-------------------------------------------------------------------------
"'run1_data'         :   '111X_dataRun2_v2',
'run2_data'         :   '111X_dataRun2_v2',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v2',
'run2_data_relval'  :   '111X_dataRun2_relval_v2',"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v27',
'run2_data'         :   '106X_dataRun2_v27',
'run2_data_relval'  :   '106X_dataRun2_relval_v25',
"
-------------------------------------------------------------------------
"Recom
PRs: 29023, 29029"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v2',
'run2_data'         :   '111X_dataRun2_v2',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v2',
'run2_data_relval'  :   '111X_dataRun2_relval_v2',
"
-------------------------------------------------------------------------
"autoCond = {
     # GlobalTag for MC production (p-Pb collisions) with realistic alignment and calibrations for Run2
     'run2_mc_pa'           :  '110X_mcRun2_pA_v3',
     # GlobalTag for Run1 data reprocessing
     'run1_data'            :  '111X_dataRun2_v2',
     # GlobalTag for Run2 data reprocessing
     'run2_data'            :  '111X_dataRun2_v2',
     # GlobalTag for Run2 data 2018B relvals only: HEM-15-16 fail
     'run2_data_HEfail'     :  '111X_dataRun2_HEfail_v2',
     # GlobalTag for Run2 data relvals: allows customization to run with fixed L1 menu
     'run2_data_relval'     :  '111X_dataRun2_relval_v2',
     # GlobalTag for Run2 HI data
     'run2_data_promptlike_hi' : '110X_dataRun2_PromptLike_HI_v10',
}"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v12',
'run2_data'         :   '110X_dataRun2_v12',
'run2_data_relval'  :   '110X_dataRun2_relval_v12',
"
-------------------------------------------------------------------------
"Recom
PRs: 29023, 29028"
-------------------------------------------------------------------------
=========================================================================
"phase1Pixel.toReplaceWith(DQMCertTrackerPixel,DQMCertTrackerPixel.copyAndExclude([ # FIXME
"
-------------------------------------------------------------------------
"phase1Pixel.toReplaceWith(DQMCertTrackerPixel,DQMCertTrackerPixel.copyAndExclude([ # FIXME"
-------------------------------------------------------------------------
"phase1Pixel.toReplaceWith(DQMCertTrackerPixel,DQMCertTrackerPixel.copyAndExclude([ # FIXME
"
-------------------------------------------------------------------------
"Recom
PRs: 29021, 29022"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v1',
'run2_data'         :   '111X_dataRun2_v1',
'run2_data_HEfail' : '111X_dataRun2_HEfail_v1',
'run2_data_relval'  :   '111X_dataRun2_relval_v1',
"
-------------------------------------------------------------------------
"'run1_data'         :   '111X_dataRun2_v1',
'run2_data'         :   '111X_dataRun2_v1',
'run2_data_HEfail' : '111X_dataRun2_HEfail_v1',
'run2_data_relval'  :   '111X_dataRun2_relval_v1',"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v26',
'run2_data'         :   '106X_dataRun2_v26',
'run2_data_relval'  :   '106X_dataRun2_relval_v24',
"
-------------------------------------------------------------------------
"Recom
PRs: 28981, 28990"
-------------------------------------------------------------------------
=========================================================================
"'run2_mc_pre_vfp'   :   '110X_mcRun2_asymptotic_preVFP_v3',
"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '110X_mcRun2_asymptotic_preVFP_v3',"
-------------------------------------------------------------------------
"'run2_design'       :   '106X_mcRun2_design_v7',
'run2_mc_pre_vfp'           :   '106X_mcRun2_asymptotic_preVFP_v3',
'run2_mc'           :   '106X_mcRun2_asymptotic_v9',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_startup_deco_v6',
"
-------------------------------------------------------------------------
"Recom
PRs: 28624, 28989"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v1',
'run2_data'         :   '111X_dataRun2_v1',
'run2_data_HEfail' : '111X_dataRun2_HEfail_v1',
'run2_data_relval'  :   '111X_dataRun2_relval_v1',
"
-------------------------------------------------------------------------
"'run1_data'         :   '111X_dataRun2_v1',
'run2_data'         :   '111X_dataRun2_v1',
'run2_data_HEfail' : '111X_dataRun2_HEfail_v1',
'run2_data_relval'  :   '111X_dataRun2_relval_v1',"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v11',
'run2_data'         :   '110X_dataRun2_v11',
'run2_data_relval'  :   '110X_dataRun2_relval_v11',
"
-------------------------------------------------------------------------
"Recom
PRs: 28981, 28982"
-------------------------------------------------------------------------
=========================================================================
"process.rpcDigiMerger.inputTagTwinMuxDigis = 'rpcTwinMuxRawToDigi'
process.rpcDigiMerger.inputTagOMTFDigis = 'omtfStage2Digis'
process.rpcDigiMerger.inputTagCPPFDigis = 'rpcCPPFRawToDigi'
"
-------------------------------------------------------------------------
"```python
process.rpcDigiMerger.inputTagTwinMuxDigis = 'rpcTwinMuxRawToDigi'
process.rpcDigiMerger.inputTagOMTFDigis = 'omtfStage2Digis'
process.rpcDigiMerger.inputTagCPPFDigis = 'rpcCPPFRawToDigi'
```"
-------------------------------------------------------------------------
"process.rpcDigiMerger.inputTagTwinMuxDigis = 'rpcTwinMuxRawToDigi'
process.rpcDigiMerger.inputTagOMTFDigis = 'omtfStage2Digis'
process.rpcDigiMerger.inputTagCPPFDigis = 'rpcCPPFRawToDigi'
"
-------------------------------------------------------------------------
"Recom
PRs: 28963, 28962"
-------------------------------------------------------------------------
=========================================================================
"for ps in process.cscSegments.algo_psets[4].algo_psets: ps.enlarge = True   
return process
"
-------------------------------------------------------------------------
"for ps in process.cscSegments.algo_psets[4].algo_psets:
    ps.enlarge = True
return process"
-------------------------------------------------------------------------
"for ps in process.cscSegments.algo_psets[4].algo_psets: ps.enlarge = True

"
-------------------------------------------------------------------------
"Recom
PRs: 28979, 28953"
-------------------------------------------------------------------------
=========================================================================
"puppiMultiplicity = Var(""userFloat('patPuppiJetSpecificProducer:puppiMultiplicity')"",float,doc=""Sum of PUPPI weights of particles in the jet"", precision= 6),
neutralPuppiMultiplicity = Var(""userFloat('patPuppiJetSpecificProducer:neutralPuppiMultiplicity')"",float,doc=""Sum of PUPPI weights of neutral particles in the jet"", precision= 6)
"
-------------------------------------------------------------------------
"puppiWeightedMultiplicity = Var(""userFloat('patPuppiJetSpecificProducer:puppiMultiplicity')"",float,doc=""Sum of PUPPI weights of particles in the jet"", precision= 6),
neutralPuppiWeightedMultiplicity = Var(""userFloat('patPuppiJetSpecificProducer:neutralPuppiMultiplicity')"",float,doc=""Sum of PUPPI weights of neutral particles in the jet"", precision= 6)"
-------------------------------------------------------------------------
"puppiMultiplicity = Var(""userFloat('patPuppiJetSpecificProducer:puppiMultiplicity')"",float,doc=""Sum of PUPPI weights of particles in the jet"", precision= 6),
neutralPuppiMultiplicity = Var(""userFloat('patPuppiJetSpecificProducer:neutralPuppiMultiplicity')"",float,doc=""Sum of PUPPI weights of neutral particles in the jet"", precision= 6)
"
-------------------------------------------------------------------------
"Recom
PRs: 28844, 28845"
-------------------------------------------------------------------------
=========================================================================
"proc.jetTable.variables.nCharged = Var(""userInt('nCharged')"",  int, doc=""number of charged constituents"")
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='NCharged', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='int', ctx=Load()), args=[Constant(value='nCharged')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"proc.jetTable.variables.nCharged = Var(""userInt('nCharged')"",  int, doc=""number of charged constituents"")
"
-------------------------------------------------------------------------
"Recom
PRs: 28844, 28845"
-------------------------------------------------------------------------
=========================================================================
"'run2_mc_pre_vfp'   :   '110X_mcRun2_asymptotic_preVFP_v3',
"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '110X_mcRun2_asymptotic_preVFP_v3',"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '110X_mcRun2_asymptotic_preVFP_v3',
"
-------------------------------------------------------------------------
"Recom
PRs: 28624, 28824"
-------------------------------------------------------------------------
=========================================================================
"Photospp::Photos::createHistoryEntries(true, 746);  // P-H-O
"
-------------------------------------------------------------------------
"FWCore.ParameterSet.Config Photospp::Photos::createHistoryEntries(true, 746);  // P-H-O"
-------------------------------------------------------------------------
"src = cms.InputTag(""generator:unsmeared""),
"
-------------------------------------------------------------------------
"Recom
PRs: 28785, 28817"
-------------------------------------------------------------------------
=========================================================================
"desc.add<double>(""PtMaxPhotons"", -1.);
"
-------------------------------------------------------------------------
"- desc.add<double>(""PtMaxCharged"", -1.);
+ desc.add<double>(""PtMaxPhotons"", -1.);"
-------------------------------------------------------------------------
"EtaMaxCharged   = cms.double(99999.),
"
-------------------------------------------------------------------------
"Recom
PRs: 28735, 28736"
-------------------------------------------------------------------------
=========================================================================
"addMixingScenario(""2016_25ns_UltraLegacy_PoissonOOTPU"",{'file': 'SimGeneral.MixingModule.mix_2016_25ns_UltraLegacy_PoissonOOTPU_cfi'})
"
-------------------------------------------------------------------------
"addMixingScenario(""2016_25ns_UltraLegacy_PoissonOOTPU"",{'file': 'SimGeneral.MixingModule.mix_2016_25ns_UltraLegacy_PoissonOOTPU_cfi', 'dependencies': ['FWCore.ParameterSet.Config', 'SimGeneral.MixingModule.mix_probFunction_25ns_PoissonOOTPU_cfi']})"
-------------------------------------------------------------------------
"addMixingScenario(""2016_25ns_UltraLegacy_PoissonOOTPU"",{'file': 'SimGeneral.MixingModule.mix_2016_25ns_UltraLegacy_PoissonOOTPU_cfi'})
"
-------------------------------------------------------------------------
"Recom
PRs: 28595, 28614"
-------------------------------------------------------------------------
=========================================================================
"'run2_data_promptlike_HEfail' : '110X_dataRun2_PromptLike_HEfail_v9',
'run2_data_promptlike'    : '110X_dataRun2_PromptLike_v9',
'run2_data_promptlike_hi' : '110X_dataRun2_PromptLike_HI_v9',
"
-------------------------------------------------------------------------
"```python
autoCond = {
    # GlobalTag for Run2 data relvals: allows customization to run with fixed L1 menu
    'run2_data_relval': '110X_dataRun2_relval_v9',
    # GlobalTag for Run2 data 2018B relvals only: HEM-15-16 fail
    'run2_data_promptlike_HEfail': '110X_dataRun2_PromptLike_HEfail_v9',
    'run2_data_promptlike': '110X_dataRun2_PromptLike_v9',
    'run2_data_promptlike_hi': '110X_dataRun2_PromptLike_HI_v9',
    # GlobalTag for Run1 HLT: it points to the online GT
    'run1_hlt': '101X_dataRun2_HLT_frozen_v9',
    # GlobalTag for Run2 HLT: it points to the online GT
}
```"
-------------------------------------------------------------------------
"'run2_data_promptlike_HEfail' : '110X_dataRun2_PromptLike_HEfail_v9',
'run2_data_promptlike'    : '110X_dataRun2_PromptLike_v9',
'run2_data_promptlike_hi' : '110X_dataRun2_PromptLike_HI_v9',
"
-------------------------------------------------------------------------
"Recom
PRs: 28524, 28603"
-------------------------------------------------------------------------
=========================================================================
"'Cosmics'        : 'SiPixelCalCosmicsTkAlCosmics0TMuAlGlobalCosmicsHcalCalHOCosmicsDtCalibCosmics',
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='pathALCARECOSiPixelCalCosmics', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Path', ctx=Load()), args=[Name(id='seqALCARECOSiPixelCalCosmics', ctx=Load())], keywords=[]))
+ Assign(targets=[Name(id='DetectorType', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='vstring', ctx=Load()), args=[Constant(value='BPIX'), Constant(value='FPIX')], keywords=[])], ctx=Load())
+ Assign(targets=[Name(id='applyNHighestPt', ctx=Store())], value=Tuple(elts=[Constant(value=False)], ctx=Load())
+ Assign(targets=[Attribute(value=Name(id='ALCARECOSiPixelCalCosmicsHLTFilter', ctx=Load()), attr='HLTPaths', ctx=Store())], value=List(elts=[Constant(value='HLT_*')], ctx=Load())"
-------------------------------------------------------------------------
"import HLTrigger.HLTfilters.hltHighLevel_cfi
ALCARECOSiPixelCalCosmicsHLTFilter = HLTrigger.HLTfilters.hltHighLevel_cfi.hltHighLevel.clone(
andOr = True, ## choose logical OR between Triggerbits
# eventually this needs to sterred via Global Tag in AlCaRecoTriggerBits
eventSetupPathsKey = '',
throw = False # tolerate triggers stated above, but not available
rt Alignment.CommonAlignmentProducer.AlignmentTrackSelector_cfi
RECOSiPixelCalCosmics =  Alignment.CommonAlignmentProducer.AlignmentTrackSelector_cfi.AlignmentTrackSelector.clone(
"
-------------------------------------------------------------------------
"Recom
PRs: 28535, 28574"
-------------------------------------------------------------------------
=========================================================================
"'Fixed_EmitRealistic5TeVppCollision2017':    'IOMC.EventVertexGenerators.VtxSmearedFixed_EmitRealistic5TeVppCollision2017_cfi',
"
-------------------------------------------------------------------------
"'Fixed_EmitRealistic5TeVppCollision2017':    'IOMC.EventVertexGenerators.VtxSmearedFixed_EmitRealistic5TeVppCollision2017_cfi',"
-------------------------------------------------------------------------
"'Fixed_EmitRealistic5TeVppCollision2017':    'IOMC.EventVertexGenerators.VtxSmearedFixed_EmitRealistic5TeVppCollision2017_cfi',
"
-------------------------------------------------------------------------
"Recom
PRs: 28580, 28573"
-------------------------------------------------------------------------
=========================================================================
"'Tune:pp 14',
'Tune:ee 7',
'PDF:pSet=20',
'MultipartonInteractions:alphaSvalue=0.118',
'MultipartonInteractions:alphaSorder=2',
'MultipartonInteractions:bProfile=2',
'MultipartonInteractions:pT0Ref=1.375',
'MultipartonInteractions:ecmPow=0.03283',
'MultipartonInteractions:coreFraction=0.4446',
'MultipartonInteractions:coreRadius=0.6046',
'ColourReconnection:mode=1',
'BeamRemnants:remnantMode=1',
'ColourReconnection:junctionCorrection=0.238',
'ColourReconnection:timeDilationPar=8.58',
'ColourReconnection:m0=1.721',
'StringZ:aLund=0.38',
'StringZ:bLund=0.64',
'StringFlav:probQQtoQ=0.078',
'StringFlav:probStoUD=0.2',
'SpaceShower:alphaSorder=2',
'SpaceShower:alphaSvalue=0.118',
'SigmaProcess:alphaSvalue=0.118',
'SigmaProcess:alphaSorder=2',
'TimeShower:alphaSorder=2',
'TimeShower:alphaSvalue=0.118',
'SigmaTotal:zeroAXB=off',
"
-------------------------------------------------------------------------
"```python
pythia8CP5CR2TuneSettingsBlock = cms.PSet(
    pythia8CP5CR2TuneSettings = cms.vstring(
        'Tune:pp 14',
        'Tune:ee 7',
        'PDF:pSet=20',
        'MultipartonInteractions:alphaSvalue=0.118',
        'MultipartonInteractions:alphaSorder=2',
        'MultipartonInteractions:bProfile=2',
        'MultipartonInteractions:pT0Ref=1.375',
        'MultipartonInteractions:ecmPow=0.03283',
        'MultipartonInteractions:coreFraction=0.4446',
        'MultipartonInteractions:coreRadius=0.6046',
        'ColourReconnection:mode=1',
        'BeamRemnants:remnantMode=1',
        'ColourReconnection:junctionCorrection=0.238',
        'ColourReconnection:timeDilationPar=8.58',
        'ColourReconnection:m0=1.721',
        'StringZ:aLund=0.38',
        'StringZ:bLund=0.64',
        'StringFlav:probQQtoQ=0.078',
        'StringFlav:probStoUD=0.2',
        'SpaceShower:alphaSorder=2',
        'SpaceShower:alphaSvalue=0.118',
        'SigmaProcess:alphaSvalue=0.118',
        'SigmaProcess:alphaSorder=2',
        'TimeShower:alphaSorder=2',
        'TimeShower:alphaSvalue=0.118',
        'SigmaTotal:zeroAXB=off'
    )
)
```"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

pythia8CP5CR1TuneSettingsBlock = cms.PSet(
pythia8CP5CR1TuneSettings = cms.vstring(
ne:pp 14',
ne:ee 7',
F:pSet=20',
ltipartonInteractions:alphaSvalue=0.118',
ltipartonInteractions:alphaSorder=2',
ltipartonInteractions:bProfile=2',
ltipartonInteractions:pT0Ref=1.375',
ltipartonInteractions:ecmPow=0.03283',
ltipartonInteractions:coreFraction=0.4446',
ltipartonInteractions:coreRadius=0.6046',
lourReconnection:mode=1',
amRemnants:remnantMode=1',
lourReconnection:junctionCorrection=0.238',
lourReconnection:timeDilationPar=8.58',
lourReconnection:m0=1.721',
ringZ:aLund=0.38',
ringZ:bLund=0.64',
ringFlav:probQQtoQ=0.078',
ringFlav:probStoUD=0.2',
aceShower:alphaSorder=2',
aceShower:alphaSvalue=0.118',
gmaProcess:alphaSvalue=0.118',
gmaProcess:alphaSorder=2',
meShower:alphaSorder=2',
meShower:alphaSvalue=0.118',
gmaTotal:zeroAXB=off',
)

"
-------------------------------------------------------------------------
"Recom
PRs: 28340, 28497"
-------------------------------------------------------------------------
=========================================================================
"'Tune:pp 14',
'Tune:ee 7',
'PDF:pSet=20',
'MultipartonInteractions:bProfile=2',
'MultipartonInteractions:pT0Ref=1.454',
'MultipartonInteractions:ecmPow=0.0555',
'MultipartonInteractions:coreFraction=0.4392',
'MultipartonInteractions:coreRadius=0.6532',
'ColourReconnection:mode=2',
'ColourReconnection:m2Lambda=4.395',
'ColourReconnection:fracGluon=0.9896',
'SigmaTotal:zeroAXB=off',
'SpaceShower:alphaSorder=2',
'SpaceShower:alphaSvalue=0.118',
'SigmaProcess:alphaSvalue=0.118',
'SigmaProcess:alphaSorder=2',
'MultipartonInteractions:alphaSvalue=0.118',
'MultipartonInteractions:alphaSorder=2',
'TimeShower:alphaSorder=2',
'TimeShower:alphaSvalue=0.118',
"
-------------------------------------------------------------------------
"pythia8CP5CR2TuneSettingsBlock = cms.PSet(
    pythia8CP5CR2TuneSettings = cms.vstring(
        'Tune:pp 14',
        'Tune:ee 7',
        'PDF:pSet=20',
        'MultipartonInteractions:bProfile=2',
        'MultipartonInteractions:pT0Ref=1.454',
        'MultipartonInteractions:ecmPow=0.0555',
        'MultipartonInteractions:coreFraction=0.4392',
        'MultipartonInteractions:coreRadius=0.6532',
        'ColourReconnection:mode=2',
        'ColourReconnection:m2Lambda=4.395',
        'ColourReconnection:fracGluon=0.9896',
        'SigmaTotal:zeroAXB=off',
        'SpaceShower:alphaSorder=2',
        'SpaceShower:alphaSvalue=0.118',
        'SigmaProcess:alphaSvalue=0.118',
        'SigmaProcess:alphaSorder=2',
        'MultipartonInteractions:alphaSvalue=0.118',
        'MultipartonInteractions:alphaSorder=2',
        'TimeShower:alphaSorder=2',
        'TimeShower:alphaSvalue=0.118',
    )
)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

pythia8CP5CR2TuneSettingsBlock = cms.PSet(
pythia8CP5CR2TuneSettings = cms.vstring(
ne:pp 14',
ne:ee 7',
F:pSet=20',
ltipartonInteractions:bProfile=2',
ltipartonInteractions:pT0Ref=1.454',
ltipartonInteractions:ecmPow=0.0555',
ltipartonInteractions:coreFraction=0.4392',
ltipartonInteractions:coreRadius=0.6532',
lourReconnection:mode=2',
lourReconnection:m2Lambda=4.395',
lourReconnection:fracGluon=0.9896',
gmaTotal:zeroAXB=off',
aceShower:alphaSorder=2',
aceShower:alphaSvalue=0.118',
gmaProcess:alphaSvalue=0.118',
gmaProcess:alphaSorder=2',
ltipartonInteractions:alphaSvalue=0.118',
ltipartonInteractions:alphaSorder=2',
meShower:alphaSorder=2',
meShower:alphaSvalue=0.118',
)

"
-------------------------------------------------------------------------
"Recom
PRs: 28340, 28497"
-------------------------------------------------------------------------
=========================================================================
"'Tune:pp 14',
'Tune:ee 7',
'PDF:pSet=20',
'MultipartonInteractions:alphaSvalue=0.118',
'MultipartonInteractions:alphaSorder=2',
'MultipartonInteractions:bProfile=2',
'MultipartonInteractions:pT0Ref=1.375',
'MultipartonInteractions:ecmPow=0.03283',
'MultipartonInteractions:coreFraction=0.4446',
'MultipartonInteractions:coreRadius=0.6046',
'ColourReconnection:mode=1',
'BeamRemnants:remnantMode=1',
'ColourReconnection:junctionCorrection=0.238',
'ColourReconnection:timeDilationPar=8.58',
'ColourReconnection:m0=1.721',
'StringZ:aLund=0.38',
'StringZ:bLund=0.64',
'StringFlav:probQQtoQ=0.078',
'StringFlav:probStoUD=0.2',
'SpaceShower:alphaSorder=2',
'SpaceShower:alphaSvalue=0.118',
'SigmaProcess:alphaSvalue=0.118',
'SigmaProcess:alphaSorder=2',
'TimeShower:alphaSorder=2',
'TimeShower:alphaSvalue=0.118',
'SigmaTotal:zeroAXB=off',
"
-------------------------------------------------------------------------
"```python
pythia8CP5CR1TuneSettings = cms.PSet(
    pythia8CP5CR1TuneSettings = cms.vstring(
        'Tune:pp 14',
        'Tune:ee 7',
        'PDF:pSet=20',
        'MultipartonInteractions:alphaSvalue=0.118',
        'MultipartonInteractions:alphaSorder=2',
        'MultipartonInteractions:bProfile=2',
        'MultipartonInteractions:pT0Ref=1.375',
        'MultipartonInteractions:ecmPow=0.03283',
        'MultipartonInteractions:coreFraction=0.4446',
        'MultipartonInteractions:coreRadius=0.6046',
        'ColourReconnection:mode=1',
        'BeamRemnants:remnantMode=1',
        'ColourReconnection:junctionCorrection=0.238',
        'ColourReconnection:timeDilationPar=8.58',
        'ColourReconnection:m0=1.721',
        'StringZ:aLund=0.38',
        'StringZ:bLund=0.64',
        'StringFlav:probQQtoQ=0.078',
        'StringFlav:probStoUD=0.2',
        'SpaceShower:alphaSorder=2',
        'SpaceShower:alphaSvalue=0.118',
        'SigmaProcess:alphaSvalue=0.118',
        'SigmaProcess:alphaSorder=2',
        'TimeShower:alphaSorder=2',
        'TimeShower:alphaSvalue=0.118',
        'SigmaTotal:zeroAXB=off'
    )
)
```"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

pythia8CP5CR1TuneSettingsBlock = cms.PSet(
pythia8CP5CR1TuneSettings = cms.vstring(
ne:pp 14',
ne:ee 7',
F:pSet=20',
ltipartonInteractions:alphaSvalue=0.118',
ltipartonInteractions:alphaSorder=2',
ltipartonInteractions:bProfile=2',
ltipartonInteractions:pT0Ref=1.375',
ltipartonInteractions:ecmPow=0.03283',
ltipartonInteractions:coreFraction=0.4446',
ltipartonInteractions:coreRadius=0.6046',
lourReconnection:mode=1',
amRemnants:remnantMode=1',
lourReconnection:junctionCorrection=0.238',
lourReconnection:timeDilationPar=8.58',
lourReconnection:m0=1.721',
ringZ:aLund=0.38',
ringZ:bLund=0.64',
ringFlav:probQQtoQ=0.078',
ringFlav:probStoUD=0.2',
aceShower:alphaSorder=2',
aceShower:alphaSvalue=0.118',
gmaProcess:alphaSvalue=0.118',
gmaProcess:alphaSorder=2',
meShower:alphaSorder=2',
meShower:alphaSvalue=0.118',
gmaTotal:zeroAXB=off',
)

"
-------------------------------------------------------------------------
"Recom
PRs: 28340, 28493"
-------------------------------------------------------------------------
=========================================================================
"'Tune:pp 14',
'Tune:ee 7',
'PDF:pSet=20',
'MultipartonInteractions:bProfile=2',
'MultipartonInteractions:pT0Ref=1.454',
'MultipartonInteractions:ecmPow=0.0555',
'MultipartonInteractions:coreFraction=0.4392',
'MultipartonInteractions:coreRadius=0.6532',
'ColourReconnection:mode=2',
'ColourReconnection:m2Lambda=4.395',
'ColourReconnection:fracGluon=0.9896',
'SigmaTotal:zeroAXB=off',
'SpaceShower:alphaSorder=2',
'SpaceShower:alphaSvalue=0.118',
'SigmaProcess:alphaSvalue=0.118',
'SigmaProcess:alphaSorder=2',
'MultipartonInteractions:alphaSvalue=0.118',
'MultipartonInteractions:alphaSorder=2',
'TimeShower:alphaSorder=2',
'TimeShower:alphaSvalue=0.118',
"
-------------------------------------------------------------------------
"pythia8CP5CR2TuneSettings = cms.PSet(
     pythia8CP5CR2TuneSettings = cms.vstring(
         'Tune:pp 14',
         'Tune:ee 7',
         'PDF:pSet=20',
         'MultipartonInteractions:bProfile=2',
         'MultipartonInteractions:pT0Ref=1.454',
         'MultipartonInteractions:ecmPow=0.0555',
         'MultipartonInteractions:coreFraction=0.4392',
         'MultipartonInteractions:coreRadius=0.6532',
         'ColourReconnection:mode=2',
         'ColourReconnection:m2Lambda=4.395',
         'ColourReconnection:fracGluon=0.9896',
         'SigmaTotal:zeroAXB=off',
         'SpaceShower:alphaSorder=2',
         'SpaceShower:alphaSvalue=0.118',
         'SigmaProcess:alphaSvalue=0.118',
         'SigmaProcess:alphaSorder=2',
         'MultipartonInteractions:alphaSvalue=0.118',
         'MultipartonInteractions:alphaSorder=2',
         'TimeShower:alphaSorder=2',
         'TimeShower:alphaSvalue=0.118',
    )
 )"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

pythia8CP5CR2TuneSettingsBlock = cms.PSet(
pythia8CP5CR2TuneSettings = cms.vstring(
ne:pp 14',
ne:ee 7',
F:pSet=20',
ltipartonInteractions:bProfile=2',
ltipartonInteractions:pT0Ref=1.454',
ltipartonInteractions:ecmPow=0.0555',
ltipartonInteractions:coreFraction=0.4392',
ltipartonInteractions:coreRadius=0.6532',
lourReconnection:mode=2',
lourReconnection:m2Lambda=4.395',
lourReconnection:fracGluon=0.9896',
gmaTotal:zeroAXB=off',
aceShower:alphaSorder=2',
aceShower:alphaSvalue=0.118',
gmaProcess:alphaSvalue=0.118',
gmaProcess:alphaSorder=2',
ltipartonInteractions:alphaSvalue=0.118',
ltipartonInteractions:alphaSorder=2',
meShower:alphaSorder=2',
meShower:alphaSvalue=0.118',
)

"
-------------------------------------------------------------------------
"Recom
PRs: 28340, 28493"
-------------------------------------------------------------------------
=========================================================================
"if hasattr(oldo, 'SelectEvents'):
process.FEVToutput.SelectEvents = oldo.SelectEvents

"
-------------------------------------------------------------------------
"if hasattr(oldo, 'SelectEvents'):
     process.FEVToutput.SelectEvents = oldo.SelectEvents"
-------------------------------------------------------------------------
"if hasattr(oldo, 'SelectEvents'):
process.FEVToutput.SelectEvents = oldo.SelectEvents

"
-------------------------------------------------------------------------
"Recom
PRs: 28208, 28475"
-------------------------------------------------------------------------
=========================================================================
"'Tune:pp 14',
'Tune:ee 7',
'PDF:pSet=20',
'MultipartonInteractions:alphaSvalue=0.118',
'MultipartonInteractions:alphaSorder=2',
'MultipartonInteractions:bProfile=2',
'MultipartonInteractions:pT0Ref=1.375',
'MultipartonInteractions:ecmPow=0.03283',
'MultipartonInteractions:coreFraction=0.4446',
'MultipartonInteractions:coreRadius=0.6046',
'ColourReconnection:mode=1',
'BeamRemnants:remnantMode=1',
'ColourReconnection:junctionCorrection=0.238',
'ColourReconnection:timeDilationPar=8.58',
'ColourReconnection:m0=1.721',
'StringZ:aLund=0.38',
'StringZ:bLund=0.64',
'StringFlav:probQQtoQ=0.078',
'StringFlav:probStoUD=0.2',
'SpaceShower:alphaSorder=2',
'SpaceShower:alphaSvalue=0.118',
'SigmaProcess:alphaSvalue=0.118',
'SigmaProcess:alphaSorder=2',
'TimeShower:alphaSorder=2',
'TimeShower:alphaSvalue=0.118',
'SigmaTotal:zeroAXB=off',
"
-------------------------------------------------------------------------
"```
pythia8CP5CR1TuneSettingsBlock = cms.PSet(
    pythia8CP5CR1TuneSettings = cms.vstring(
        'Tune:pp 14',
        'Tune:ee 7',
        'PDF:pSet=20',
        'MultipartonInteractions:alphaSvalue=0.118',
        'MultipartonInteractions:alphaSorder=2',
        'MultipartonInteractions:bProfile=2',
        'MultipartonInteractions:pT0Ref=1.375',
        'MultipartonInteractions:ecmPow=0.03283',
        'MultipartonInteractions:coreFraction=0.4446',
        'MultipartonInteractions:coreRadius=0.6046',
        'ColourReconnection:mode=1',
        'BeamRemnants:remnantMode=1',
        'ColourReconnection:junctionCorrection=0.238',
        'ColourReconnection:timeDilationPar=8.58',
        'ColourReconnection:m0=1.721',
        'StringZ:aLund=0.38',
        'StringZ:bLund=0.64',
        'StringFlav:probQQtoQ=0.078',
        'StringFlav:probStoUD=0.2',
        'SpaceShower:alphaSorder=2',
        'SpaceShower:alphaSvalue=0.118',
        'SigmaProcess:alphaSvalue=0.118',
        'SigmaProcess:alphaSorder=2',
        'TimeShower:alphaSorder=2',
        'TimeShower:alphaSvalue=0.118',
        'SigmaTotal:zeroAXB=off'
    )
)
```"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

pythia8CP5CR1TuneSettingsBlock = cms.PSet(
pythia8CP5CR1TuneSettings = cms.vstring(
ne:pp 14',
ne:ee 7',
F:pSet=20',
ltipartonInteractions:alphaSvalue=0.118',
ltipartonInteractions:alphaSorder=2',
ltipartonInteractions:bProfile=2',
ltipartonInteractions:pT0Ref=1.375',
ltipartonInteractions:ecmPow=0.03283',
ltipartonInteractions:coreFraction=0.4446',
ltipartonInteractions:coreRadius=0.6046',
lourReconnection:mode=1',
amRemnants:remnantMode=1',
lourReconnection:junctionCorrection=0.238',
lourReconnection:timeDilationPar=8.58',
lourReconnection:m0=1.721',
ringZ:aLund=0.38',
ringZ:bLund=0.64',
ringFlav:probQQtoQ=0.078',
ringFlav:probStoUD=0.2',
aceShower:alphaSorder=2',
aceShower:alphaSvalue=0.118',
gmaProcess:alphaSvalue=0.118',
gmaProcess:alphaSorder=2',
meShower:alphaSorder=2',
meShower:alphaSvalue=0.118',
gmaTotal:zeroAXB=off',
)

"
-------------------------------------------------------------------------
"Recom
PRs: 28340, 28352"
-------------------------------------------------------------------------
=========================================================================
"'Tune:pp 14',
'Tune:ee 7',
'PDF:pSet=20',
'MultipartonInteractions:bProfile=2',
'MultipartonInteractions:pT0Ref=1.454',
'MultipartonInteractions:ecmPow=0.0555',
'MultipartonInteractions:coreFraction=0.4392',
'MultipartonInteractions:coreRadius=0.6532',
'ColourReconnection:mode=2',
'ColourReconnection:m2Lambda=4.395',
'ColourReconnection:fracGluon=0.9896',
'SigmaTotal:zeroAXB=off',
'SpaceShower:alphaSorder=2',
'SpaceShower:alphaSvalue=0.118',
'SigmaProcess:alphaSvalue=0.118',
'SigmaProcess:alphaSorder=2',
'MultipartonInteractions:alphaSvalue=0.118',
'MultipartonInteractions:alphaSorder=2',
'TimeShower:alphaSorder=2',
'TimeShower:alphaSvalue=0.118',
"
-------------------------------------------------------------------------
"```python
import FWCore.ParameterSet.Config as cms

pythia8CP5CR2TuneSettingsBlock = cms.PSet(
    pythia8CP5CR2TuneSettings = cms.vstring(
        'Tune:pp 14',
        'Tune:ee 7',
        'PDF:pSet=20',
        'MultipartonInteractions:bProfile=2',
        'MultipartonInteractions:pT0Ref=1.454',
        'MultipartonInteractions:ecmPow=0.0555',
        'MultipartonInteractions:coreFraction=0.4392',
        'MultipartonInteractions:coreRadius=0.6532',
        'ColourReconnection:mode=2',
        'ColourReconnection:m2Lambda=4.395',
        'ColourReconnection:fracGluon=0.9896',
        'SigmaTotal:zeroAXB=off',
        'SpaceShower:alphaSorder=2',
        'SpaceShower:alphaSvalue=0.118',
        'SigmaProcess:alphaSvalue=0.118',
        'SigmaProcess:alphaSorder=2',
        'MultipartonInteractions:alphaSvalue=0.118',
        'MultipartonInteractions:alphaSorder=2',
        'TimeShower:alphaSorder=2',
        'TimeShower:alphaSvalue=0.118',
    )
)
```"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

pythia8CP5CR2TuneSettingsBlock = cms.PSet(
pythia8CP5CR2TuneSettings = cms.vstring(
ne:pp 14',
ne:ee 7',
F:pSet=20',
ltipartonInteractions:bProfile=2',
ltipartonInteractions:pT0Ref=1.454',
ltipartonInteractions:ecmPow=0.0555',
ltipartonInteractions:coreFraction=0.4392',
ltipartonInteractions:coreRadius=0.6532',
lourReconnection:mode=2',
lourReconnection:m2Lambda=4.395',
lourReconnection:fracGluon=0.9896',
gmaTotal:zeroAXB=off',
aceShower:alphaSorder=2',
aceShower:alphaSvalue=0.118',
gmaProcess:alphaSvalue=0.118',
gmaProcess:alphaSorder=2',
ltipartonInteractions:alphaSvalue=0.118',
ltipartonInteractions:alphaSorder=2',
meShower:alphaSorder=2',
meShower:alphaSvalue=0.118',
)

"
-------------------------------------------------------------------------
"Recom
PRs: 28340, 28352"
-------------------------------------------------------------------------
=========================================================================
"'Tune:pp 14',
'Tune:ee 7',
'PDF:pSet=20',
'MultipartonInteractions:alphaSvalue=0.118',
'MultipartonInteractions:alphaSorder=2',
'MultipartonInteractions:bProfile=2',
'MultipartonInteractions:pT0Ref=1.375',
'MultipartonInteractions:ecmPow=0.03283',
'MultipartonInteractions:coreFraction=0.4446',
'MultipartonInteractions:coreRadius=0.6046',
'ColourReconnection:mode=1',
'BeamRemnants:remnantMode=1',
'ColourReconnection:junctionCorrection=0.238',
'ColourReconnection:timeDilationPar=8.58',
'ColourReconnection:m0=1.721',
'StringZ:aLund=0.38',
'StringZ:bLund=0.64',
'StringFlav:probQQtoQ=0.078',
'StringFlav:probStoUD=0.2',
'SpaceShower:alphaSorder=2',
'SpaceShower:alphaSvalue=0.118',
'SigmaProcess:alphaSvalue=0.118',
'SigmaProcess:alphaSorder=2',
'TimeShower:alphaSorder=2',
'TimeShower:alphaSvalue=0.118',
'SigmaTotal:zeroAXB=off',
"
-------------------------------------------------------------------------
"```python
pythia8CP5CR1TuneSettingsBlock = cms.PSet(
    pythia8CP5CR1TuneSettings = cms.vstring(
        'Tune:pp 14',
        'Tune:ee 7',
        'PDF:pSet=20',
        'MultipartonInteractions:alphaSvalue=0.118',
        'MultipartonInteractions:alphaSorder=2',
        'MultipartonInteractions:bProfile=2',
        'MultipartonInteractions:pT0Ref=1.375',
        'MultipartonInteractions:ecmPow=0.03283',
        'MultipartonInteractions:coreFraction=0.4446',
        'MultipartonInteractions:coreRadius=0.6046',
        'ColourReconnection:mode=1',
        'BeamRemnants:remnantMode=1',
        'ColourReconnection:junctionCorrection=0.238',
        'ColourReconnection:timeDilationPar=8.58',
        'ColourReconnection:m0=1.721',
        'StringZ:aLund=0.38',
        'StringZ:bLund=0.64',
        'StringFlav:probQQtoQ=0.078',
        'StringFlav:probStoUD=0.2',
        'SpaceShower:alphaSorder=2',
        'SpaceShower:alphaSvalue=0.118',
        'SigmaProcess:alphaSvalue=0.118',
        'SigmaProcess:alphaSorder=2',
        'TimeShower:alphaSorder=2',
        'TimeShower:alphaSvalue=0.118',
        'SigmaTotal:zeroAXB=off'
    )
)
```"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

pythia8CP5CR1TuneSettingsBlock = cms.PSet(
pythia8CP5CR1TuneSettings = cms.vstring(
ne:pp 14',
ne:ee 7',
F:pSet=20',
ltipartonInteractions:alphaSvalue=0.118',
ltipartonInteractions:alphaSorder=2',
ltipartonInteractions:bProfile=2',
ltipartonInteractions:pT0Ref=1.375',
ltipartonInteractions:ecmPow=0.03283',
ltipartonInteractions:coreFraction=0.4446',
ltipartonInteractions:coreRadius=0.6046',
lourReconnection:mode=1',
amRemnants:remnantMode=1',
lourReconnection:junctionCorrection=0.238',
lourReconnection:timeDilationPar=8.58',
lourReconnection:m0=1.721',
ringZ:aLund=0.38',
ringZ:bLund=0.64',
ringFlav:probQQtoQ=0.078',
ringFlav:probStoUD=0.2',
aceShower:alphaSorder=2',
aceShower:alphaSvalue=0.118',
gmaProcess:alphaSvalue=0.118',
gmaProcess:alphaSorder=2',
meShower:alphaSorder=2',
meShower:alphaSvalue=0.118',
gmaTotal:zeroAXB=off',
)

"
-------------------------------------------------------------------------
"Recom
PRs: 28340, 28347"
-------------------------------------------------------------------------
=========================================================================
"'Tune:pp 14',
'Tune:ee 7',
'PDF:pSet=20',
'MultipartonInteractions:bProfile=2',
'MultipartonInteractions:pT0Ref=1.454',
'MultipartonInteractions:ecmPow=0.0555',
'MultipartonInteractions:coreFraction=0.4392',
'MultipartonInteractions:coreRadius=0.6532',
'ColourReconnection:mode=2',
'ColourReconnection:m2Lambda=4.395',
'ColourReconnection:fracGluon=0.9896',
'SigmaTotal:zeroAXB=off',
'SpaceShower:alphaSorder=2',
'SpaceShower:alphaSvalue=0.118',
'SigmaProcess:alphaSvalue=0.118',
'SigmaProcess:alphaSorder=2',
'MultipartonInteractions:alphaSvalue=0.118',
'MultipartonInteractions:alphaSorder=2',
'TimeShower:alphaSorder=2',
'TimeShower:alphaSvalue=0.118',
"
-------------------------------------------------------------------------
"updated_pythia8CP5CR2TuneSettingsBlock = cms.PSet(
    pythia8CP5CR2TuneSettings = cms.vstring(
        'Tune:pp 14',
        'Tune:ee 7',
        'PDF:pSet=20',
        'MultipartonInteractions:bProfile=2',
        'MultipartonInteractions:pT0Ref=1.454',
        'MultipartonInteractions:ecmPow=0.0555',
        'MultipartonInteractions:coreFraction=0.4392',
        'MultipartonInteractions:coreRadius=0.6532',
        'ColourReconnection:mode=2',
        'ColourReconnection:m2Lambda=4.395',
        'ColourReconnection:fracGluon=0.9896',
        'SigmaTotal:zeroAXB=off',
        'SpaceShower:alphaSorder=2',
        'SpaceShower:alphaSvalue=0.118',
        'SigmaProcess:alphaSvalue=0.118',
        'SigmaProcess:alphaSorder=2',
        'MultipartonInteractions:alphaSvalue=0.118',
        'MultipartonInteractions:alphaSorder=2',
        'TimeShower:alphaSorder=2',
        'TimeShower:alphaSvalue=0.118'
    )
)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

pythia8CP5CR2TuneSettingsBlock = cms.PSet(
pythia8CP5CR2TuneSettings = cms.vstring(
ne:pp 14',
ne:ee 7',
F:pSet=20',
ltipartonInteractions:bProfile=2',
ltipartonInteractions:pT0Ref=1.454',
ltipartonInteractions:ecmPow=0.0555',
ltipartonInteractions:coreFraction=0.4392',
ltipartonInteractions:coreRadius=0.6532',
lourReconnection:mode=2',
lourReconnection:m2Lambda=4.395',
lourReconnection:fracGluon=0.9896',
gmaTotal:zeroAXB=off',
aceShower:alphaSorder=2',
aceShower:alphaSvalue=0.118',
gmaProcess:alphaSvalue=0.118',
gmaProcess:alphaSorder=2',
ltipartonInteractions:alphaSvalue=0.118',
ltipartonInteractions:alphaSorder=2',
meShower:alphaSorder=2',
meShower:alphaSvalue=0.118',
)

"
-------------------------------------------------------------------------
"Recom
PRs: 28340, 28347"
-------------------------------------------------------------------------
=========================================================================
"fastSim.toReplaceWith(trackingGlobalRecoTask, cms.Task(doAlldEdXEstimatorsTask, trackExtrapolator))
"
-------------------------------------------------------------------------
"fastSim.toReplaceWith(doAlldEdXEstimatorsTask, cms.Task(dedxHarmonic2, dedxPixelHarmonic2))"
-------------------------------------------------------------------------
"fastSim.toReplaceWith(trackingGlobalReco,cms.Sequence(doAlldEdXEstimators*trackExtrapolator))
"
-------------------------------------------------------------------------
"Recom
PRs: 28257, 28259"
-------------------------------------------------------------------------
=========================================================================
"fastSim.toReplaceWith(doAlldEdXEstimatorsTask, cms.Task(dedxHarmonic2, dedxPixelHarmonic2))
"
-------------------------------------------------------------------------
"fastSim.toReplaceWith(doAlldEdXEstimatorsTask, cms.Task(dedxHarmonic2, dedxPixelHarmonic2))"
-------------------------------------------------------------------------
"fastSim.toReplaceWith(doAlldEdXEstimators, cms.Sequence(dedxHarmonic2  dedxPixelHarmonic2))
"
-------------------------------------------------------------------------
"Recom
PRs: 28257, 28259"
-------------------------------------------------------------------------
=========================================================================
"from MuonAnalysis.MuonAssociators.muonFSRProducer_cfi import muonFSRProducer
muonFSRphotons = muonFSRProducer.clone(
from MuonAnalysis.MuonAssociators.muonFSRAssociator_cfi import muonFSRAssociator
muonFSRassociation = muonFSRAssociator.clone(
"
-------------------------------------------------------------------------
"+ from MuonAnalysis.MuonAssociators.muonFSRProducer_cfi import muonFSRProducer
+ from MuonAnalysis.MuonAssociators.muonFSRAssociator_cfi import muonFSRAssociator"
-------------------------------------------------------------------------
"from MuonAnalysis.MuonAssociators.muonFSRProducer_cfi import muonFSRProducer
muonFSRphotons = muonFSRProducer.clone(
from MuonAnalysis.MuonAssociators.muonFSRAssociator_cfi import muonFSRAssociator
muonFSRassociation = muonFSRAssociator.clone(
"
-------------------------------------------------------------------------
"Recom
PRs: 28122, 28145"
-------------------------------------------------------------------------
=========================================================================
"### Example how to check timing
### Example how to check memory
#process.SimpleMemoryCheck = cms.Service(""SimpleMemoryCheck"",ignoreTotal = cms.untracked.int32(1) )
"
-------------------------------------------------------------------------
"```python
# Example how to check timing
# Example how to check memory
```"
-------------------------------------------------------------------------
"### Example how to check timing
### Example how to check memory
#process.SimpleMemoryCheck = cms.Service(""SimpleMemoryCheck"",ignoreTotal = cms.untracked.int32(1) )
"
-------------------------------------------------------------------------
"Recom
PRs: 28096, 28098"
-------------------------------------------------------------------------
=========================================================================
"'/store/relval/CMSSW_11_0_0_pre6/RelValTTbar_13/MINIAODSIM/PU25ns_110X_upgrade2018_realistic_v3-v1/20000/F38B9A9F-4B4B-3D4B-8C9D-9A9B945194EF.root',
"
-------------------------------------------------------------------------
"Expr(value=Tuple(elts=[Constant(value='/store/relval/CMSSW_11_0_0_pre6/RelValTTbar_13/MINIAODSIM/PU25ns_110X_upgrade2018_realistic_v3-v1/20000/F38B9A9F-4B4B-3D4B-8C9D-9A9B945194EF.root')], ctx=Load()))"
-------------------------------------------------------------------------
"'/store/relval/CMSSW_11_0_0_pre6/RelValTTbar_13/MINIAODSIM/PU25ns_110X_upgrade2018_realistic_v3-v1/20000/F38B9A9F-4B4B-3D4B-8C9D-9A9B945194EF.root',
"
-------------------------------------------------------------------------
"Recom
PRs: 28096, 28098"
-------------------------------------------------------------------------
=========================================================================
"### Pick a global tag that includes the desired JER-SFs
"
-------------------------------------------------------------------------
"process.GlobalTag = GlobalTag(process.GlobalTag, 'Autumn18_V7_MC', '')"
-------------------------------------------------------------------------
"### Pick a global tag that includes the desired JER-SFs
"
-------------------------------------------------------------------------
"Recom
PRs: 28096, 28098"
-------------------------------------------------------------------------
=========================================================================
"
### Example how to read the JER-SF from a db file
#from CondCore.DBCommon.CondDBSetup_cfi import *
#process.jer = cms.ESSource(""PoolDBESSource"",
#        CondDBSetup,
#        toGet = cms.VPSet(
#            # Resolution
#            cms.PSet(
#                record = cms.string('JetResolutionRcd'),
#                tag    = cms.string('JR_Autumn18_V7_MC_PtResolution_AK4PFchs'),
#                label  = cms.untracked.string('AK4PFchs_pt')
#                ),
#
#            # Scale factors
#            cms.PSet(
#                record = cms.string('JetResolutionScaleFactorRcd'),
#                tag    = cms.string('JR_Autumn18_V7_MC_SF_AK4PFchs'),
#                label  = cms.untracked.string('AK4PFchs')
#                ),
#            ),
#        connect = cms.string('sqlite:Autumn18_V7_MC.db')
#        )
#
#process.es_prefer_jer = cms.ESPrefer('PoolDBESSource', 'jer')
"
-------------------------------------------------------------------------
"```python
from CondCore.DBCommon.CondDBSetup_cfi import *
process.jer = cms.ESSource(""PoolDBESSource"",
       CondDBSetup,
       toGet = cms.VPSet(
           # Resolution
           cms.PSet(
               record = cms.string('JetResolutionRcd'),
               tag    = cms.string('JR_Autumn18_V7_MC_PtResolution_AK4PFchs'),
               label  = cms.untracked.string('AK4PFchs_pt')
               ),

           # Scale factors
           cms.PSet(
               record = cms.string('JetResolutionScaleFactorRcd'),
               tag    = cms.string('JR_Autumn18_V7_MC_SF_AK4PFchs'),
               label  = cms.untracked.string('AK4PFchs')
               ),
           ),
       connect = cms.string('sqlite:Autumn18_V7_MC.db')
       )

process.es_prefer_jer = cms.ESPrefer('PoolDBESSource', 'jer')
```"
-------------------------------------------------------------------------
"
### Example how to read the JER-SF from a db file
#from CondCore.DBCommon.CondDBSetup_cfi import *
#process.jer = cms.ESSource(""PoolDBESSource"",
#        CondDBSetup,
#        toGet = cms.VPSet(
#            # Resolution
#            cms.PSet(
#                record = cms.string('JetResolutionRcd'),
#                tag    = cms.string('JR_Autumn18_V7_MC_PtResolution_AK4PFchs'),
#                label  = cms.untracked.string('AK4PFchs_pt')
#                ),
#
#            # Scale factors
#            cms.PSet(
#                record = cms.string('JetResolutionScaleFactorRcd'),
#                tag    = cms.string('JR_Autumn18_V7_MC_SF_AK4PFchs'),
#                label  = cms.untracked.string('AK4PFchs')
#                ),
#            ),
#        connect = cms.string('sqlite:Autumn18_V7_MC.db')
#        )
#
#process.es_prefer_jer = cms.ESPrefer('PoolDBESSource', 'jer')
"
-------------------------------------------------------------------------
"Recom
PRs: 28096, 28098"
-------------------------------------------------------------------------
=========================================================================
"### Example how to check timing
### Example how to check memory
#process.SimpleMemoryCheck = cms.Service(""SimpleMemoryCheck"",ignoreTotal = cms.untracked.int32(1) )
"
-------------------------------------------------------------------------
"```python
# Example how to check timing
# Example how to check memory
# process.SimpleMemoryCheck = cms.Service(""SimpleMemoryCheck"",ignoreTotal = cms.untracked.int32(1))
```"
-------------------------------------------------------------------------
"### Example how to check timing
### Example how to check memory
#process.SimpleMemoryCheck = cms.Service(""SimpleMemoryCheck"",ignoreTotal = cms.untracked.int32(1) )
"
-------------------------------------------------------------------------
"Recom
PRs: 28096, 28097"
-------------------------------------------------------------------------
=========================================================================
"'/store/relval/CMSSW_11_0_0_pre6/RelValTTbar_13/MINIAODSIM/PU25ns_110X_upgrade2018_realistic_v3-v1/20000/F38B9A9F-4B4B-3D4B-8C9D-9A9B945194EF.root',
"
-------------------------------------------------------------------------
"Expr(value=Tuple(elts=[Constant(value='/store/relval/CMSSW_11_0_0_pre6/RelValTTbar_13/MINIAODSIM/PU25ns_110X_upgrade2018_realistic_v3-v1/20000/F38B9A9F-4B4B-3D4B-8C9D-9A9B945194EF.root')], ctx=Load()))"
-------------------------------------------------------------------------
"'/store/relval/CMSSW_11_0_0_pre6/RelValTTbar_13/MINIAODSIM/PU25ns_110X_upgrade2018_realistic_v3-v1/20000/F38B9A9F-4B4B-3D4B-8C9D-9A9B945194EF.root',
"
-------------------------------------------------------------------------
"Recom
PRs: 28096, 28097"
-------------------------------------------------------------------------
=========================================================================
"### Pick a global tag that includes the desired JER-SFs
"
-------------------------------------------------------------------------
"Expr(value=Tuple(elts=[Constant(value='/store/relval/CMSSW_11_0_0_pre6/RelValTTbar_13/MINIAODSIM/PU25ns_110X_upgrade2018_realistic_v3-v1/20000/F38B9A9F-4B4B-3D4B-8C9D-9A9B945194EF.root')], ctx=Load()))"
-------------------------------------------------------------------------
"### Pick a global tag that includes the desired JER-SFs
"
-------------------------------------------------------------------------
"Recom
PRs: 28096, 28097"
-------------------------------------------------------------------------
=========================================================================
"
### Example how to read the JER-SF from a db file
#from CondCore.DBCommon.CondDBSetup_cfi import *
#process.jer = cms.ESSource(""PoolDBESSource"",
#        CondDBSetup,
#        toGet = cms.VPSet(
#            # Resolution
#            cms.PSet(
#                record = cms.string('JetResolutionRcd'),
#                tag    = cms.string('JR_Autumn18_V7_MC_PtResolution_AK4PFchs'),
#                label  = cms.untracked.string('AK4PFchs_pt')
#                ),
#
#            # Scale factors
#            cms.PSet(
#                record = cms.string('JetResolutionScaleFactorRcd'),
#                tag    = cms.string('JR_Autumn18_V7_MC_SF_AK4PFchs'),
#                label  = cms.untracked.string('AK4PFchs')
#                ),
#            ),
#        connect = cms.string('sqlite:Autumn18_V7_MC.db')
#        )
#
#process.es_prefer_jer = cms.ESPrefer('PoolDBESSource', 'jer')
"
-------------------------------------------------------------------------
"```python
from CondCore.DBCommon.CondDBSetup_cfi import *
process.jer = cms.ESSource(""PoolDBESSource"",
                           CondDBSetup,
                           toGet = cms.VPSet(
                               # Resolution
                               cms.PSet(
                                   record = cms.string('JetResolutionRcd'),
                                   tag    = cms.string('JR_Autumn18_V7_MC_PtResolution_AK4PFchs'),
                                   label  = cms.untracked.string('AK4PFchs_pt')
                               ),

                               # Scale factors
                               cms.PSet(
                                   record = cms.string('JetResolutionScaleFactorRcd'),
                                   tag    = cms.string('JR_Autumn18_V7_MC_SF_AK4PFchs'),
                                   label  = cms.untracked.string('AK4PFchs')
                               ),
                           ),
                           connect = cms.string('sqlite:Autumn18_V7_MC.db')
)

process.es_prefer_jer = cms.ESPrefer('PoolDBESSource', 'jer')
```"
-------------------------------------------------------------------------
"
### Example how to read the JER-SF from a db file
#from CondCore.DBCommon.CondDBSetup_cfi import *
#process.jer = cms.ESSource(""PoolDBESSource"",
#        CondDBSetup,
#        toGet = cms.VPSet(
#            # Resolution
#            cms.PSet(
#                record = cms.string('JetResolutionRcd'),
#                tag    = cms.string('JR_Autumn18_V7_MC_PtResolution_AK4PFchs'),
#                label  = cms.untracked.string('AK4PFchs_pt')
#                ),
#
#            # Scale factors
#            cms.PSet(
#                record = cms.string('JetResolutionScaleFactorRcd'),
#                tag    = cms.string('JR_Autumn18_V7_MC_SF_AK4PFchs'),
#                label  = cms.untracked.string('AK4PFchs')
#                ),
#            ),
#        connect = cms.string('sqlite:Autumn18_V7_MC.db')
#        )
#
#process.es_prefer_jer = cms.ESPrefer('PoolDBESSource', 'jer')
"
-------------------------------------------------------------------------
"Recom
PRs: 28096, 28097"
-------------------------------------------------------------------------
=========================================================================
"from RecoJets.JetProducers.ak4PFJets_cfi import ak4PFJetsCS
"
-------------------------------------------------------------------------
from RecoJets.JetProducers.ak4PFJets_cfi import ak4PFJetsCS
-------------------------------------------------------------------------
"from RecoJets.JetProducers.ak4PFJets_cfi import ak4PFJetsCS
"
-------------------------------------------------------------------------
"Recom
PRs: 27826, 28052"
-------------------------------------------------------------------------
=========================================================================
"setattr(proc, jetCollection, ak4PFJetsCS.clone(
    src                       = pfCand,
    doAreaFastjet             = True,
    jetPtMin                  = minPt,
    jetAlgorithm              = supportedJetAlgos[recoJetInfo.jetAlgo],
    rParam                    = recoJetInfo.jetSizeNr,
    useConstituentSubtraction = recoJetInfo.doCS,
    csRParam                  = 0.4 if recoJetInfo.doCS else -1.,
    csRho_EtaMax              = PFJetParameters.Rho_EtaMax if recoJetInfo.doCS else -1.,
    useExplicitGhosts         = recoJetInfo.doCS or recoJetInfo.jetPUMethod == ""sk"",
"
-------------------------------------------------------------------------
"setattr(proc, jetCollection, ak4PFJetsCS.clone(
    src                       = pfCand,
    doAreaFastjet             = True,
    jetPtMin                  = minPt,
    jetAlgorithm              = supportedJetAlgos[recoJetInfo.jetAlgo],
    rParam                    = recoJetInfo.jetSizeNr,
    useConstituentSubtraction = recoJetInfo.doCS,
    csRParam                  = 0.4 if recoJetInfo.doCS else -1.,
    csRho_EtaMax              = PFJetParameters.Rho_EtaMax if recoJetInfo.doCS else -1.,
    useExplicitGhosts         = recoJetInfo.doCS or recoJetInfo.jetPUMethod == ""sk"",
    ))"
-------------------------------------------------------------------------
"setattr(proc, jetCollection, ak4PFJetsCS.clone(
    src                       = pfCand,
    doAreaFastjet             = True,
    jetPtMin                  = minPt,
    jetAlgorithm              = supportedJetAlgos[recoJetInfo.jetAlgo],
    rParam                    = recoJetInfo.jetSizeNr,
    useConstituentSubtraction = recoJetInfo.doCS,
    csRParam                  = 0.4 if recoJetInfo.doCS else -1.,
    csRho_EtaMax              = PFJetParameters.Rho_EtaMax if recoJetInfo.doCS else -1.,
    useExplicitGhosts         = recoJetInfo.doCS or recoJetInfo.jetPUMethod == ""sk"",
"
-------------------------------------------------------------------------
"Recom
PRs: 27826, 28052"
-------------------------------------------------------------------------
=========================================================================
"looseId        = looseJetId,
"
-------------------------------------------------------------------------
"```python
looseId = looseJetId
```"
-------------------------------------------------------------------------
"looseId        = looseJetId,
"
-------------------------------------------------------------------------
"Recom
PRs: 27826, 28052"
-------------------------------------------------------------------------
=========================================================================
"jetCorrFactorsSource = [jetCorrFactors],
"
-------------------------------------------------------------------------
jetCorrFactorsSource = jetCorrFactors
-------------------------------------------------------------------------
"jetCorrFactorsSource = [jetCorrFactors],
"
-------------------------------------------------------------------------
"Recom
PRs: 27826, 28052"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Eras.Modifier_run2_tau_ul_2018_cff import run2_tau_ul_2018
Run3 = cms.ModifierChain(Run2_2018.copyAndExclude([run2_GEM_2017,run2_egamma_2018,run2_tau_ul_2018]), run3_common, run3_GEM, run3_HB)
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_run2_tau_ul_2018_cff import run2_tau_ul_2018
Run3 = cms.ModifierChain(Run2_2018.copyAndExclude([run2_GEM_2017,run2_egamma_2018,run2_tau_ul_2018]), run3_common, run3_GEM, run3_HB)"
-------------------------------------------------------------------------
"for era in [run2_miniAOD_devel,run2_tau_ul_2016,run2_tau_ul_2018]:
era.toModify(tauTable,
             variables = cms.PSet(_variablesMiniV2,_deepTauVars2017v2p1)
)
era in [run2_nanoAOD_94X2016,run2_nanoAOD_94XMiniAODv2,run2_nanoAOD_102Xv1]:
era.toModify(tauTable,
             variables = _variablesMiniV2
)
"
-------------------------------------------------------------------------
"Recom
PRs: 27882, 28046"
-------------------------------------------------------------------------
=========================================================================
"cleanupL1T = ('SimL1TCalorimeter'
              ,'SimL1TCalorimeterTask'
              ,'SimL1TMuonCommon'
              ,'SimL1TMuonCommonTask'
              ,'SimL1TMuon'
              ,'SimL1TMuonTask'
              ,'SimL1TechnicalTriggers'
              ,'SimL1TechnicalTriggersTask'
              ,'SimL1EmulatorCore'
              ,'SimL1EmulatorCoreTask'
              ,'ecalDigiSequence'
              ,'ecalDigiTask'
              ,'hcalDigiSequence'
              ,'hcalDigiTask'
              ,'calDigi'
              ,'calDigiTask'
              ,'me0TriggerPseudoDigis'
              ,'me0TriggerPseudoDigiTask'
              ,'hgcalTriggerPrimitives'
              ,'hgcalTriggerPrimitivesTask'
              ,'hgcalVFE'
              ,'hgcalVFEProducer'
              ,'hgcalBackEndLayer2'
              ,'hgcalBackEndLayer2Producer'
              ,'hgcalTowerMap'
              ,'hgcalTowerMapProducer'
              ,'hgcalConcentrator'
              ,'hgcalConcentratorProducer'
              ,'hgcalBackEndLayer1'
              ,'hgcalBackEndLayer1Producer'
              ,'hgcalTower'
              ,'hgcalTowerProducer'
              ,'hgcalTriggerGeometryESProducer')
for obj in cleanupL1T:
"
-------------------------------------------------------------------------
"```python
cleanupL1T = ('SimL1TCalorimeter',
              'SimL1TCalorimeterTask',
              'SimL1TMuonCommon',
              'SimL1TMuonCommonTask',
              'SimL1TMuon',
              'SimL1TMuonTask',
              'SimL1TechnicalTriggers',
              'SimL1TechnicalTriggersTask',
              'SimL1EmulatorCore',
              'SimL1EmulatorCoreTask',
              'ecalDigiSequence',
              'ecalDigiTask',
              'hcalDigiSequence',
              'hcalDigiTask',
              'calDigi',
              'calDigiTask',
              'me0TriggerPseudoDigis',
              'me0TriggerPseudoDigiTask',
              'hgcalTriggerPrimitives',
              'hgcalTriggerPrimitivesTask',
              'hgcalVFE',
              'hgcalVFEProducer',
              'hgcalBackEndLayer2',
              'hgcalBackEndLayer2Producer',
              'hgcalTowerMap',
              'hgcalTowerMapProducer',
              'hgcalConcentrator',
              'hgcalConcentratorProducer',
              'hgcalBackEndLayer1',
              'hgcalBackEndLayer1Producer',
              'hgcalTower',
              'hgcalTowerProducer',
              'hgcalTriggerGeometryESProducer')
for obj in cleanupL1T:
    if hasattr(process, obj):
        delattr(process, obj)
```"
-------------------------------------------------------------------------
"cleanupL1T = ('SimL1TCalorimeter'
              ,'SimL1TCalorimeterTask'
              ,'SimL1TMuonCommon'
              ,'SimL1TMuonCommonTask'
              ,'SimL1TMuon'
              ,'SimL1TMuonTask'
              ,'SimL1TechnicalTriggers'
              ,'SimL1TechnicalTriggersTask'
              ,'SimL1EmulatorCore'
              ,'SimL1EmulatorCoreTask'
              ,'ecalDigiSequence'
              ,'ecalDigiTask'
              ,'hcalDigiSequence'
              ,'hcalDigiTask'
              ,'calDigi'
              ,'calDigiTask'
              ,'me0TriggerPseudoDigis'
              ,'me0TriggerPseudoDigiTask'
              ,'hgcalTriggerPrimitives'
              ,'hgcalTriggerPrimitivesTask'
              ,'hgcalVFE'
              ,'hgcalVFEProducer'
              ,'hgcalBackEndLayer2'
              ,'hgcalBackEndLayer2Producer'
              ,'hgcalTowerMap'
              ,'hgcalTowerMapProducer'
              ,'hgcalConcentrator'
              ,'hgcalConcentratorProducer'
              ,'hgcalBackEndLayer1'
              ,'hgcalBackEndLayer1Producer'
              ,'hgcalTower'
              ,'hgcalTowerProducer'
              ,'hgcalTriggerGeometryESProducer')
for obj in cleanupL1T:
"
-------------------------------------------------------------------------
"Recom
PRs: 28012, 28013"
-------------------------------------------------------------------------
=========================================================================
"tsk = Task(*self.taskLeaves)
if len(self.l) > 0:
    # why doesn't (sum(self.l) work?
    seq = self.l[0]
    return self._type(seq, tsk)
else:
    return self._type(tsk)
"
-------------------------------------------------------------------------
"```python
tsk = Task(*self.taskLeaves)
if len(self.l) > 0:
    # why doesn't (sum(self.l) work?
    if len(self.l) == 0:
        seq = self._type(tsk)
    else:
        seq = self.l[0]
    return self._type(seq, tsk)
else:
    return self._type(tsk)
```"
-------------------------------------------------------------------------
"tsk = Task(*self.taskLeaves)
if len(self.l) > 0:
    # why doesn't (sum(self.l) work?
    seq = self.l[0]
    return self._type(seq, tsk)
else:
    return self._type(tsk)
"
-------------------------------------------------------------------------
"Recom
PRs: 28006, 28007"
-------------------------------------------------------------------------
=========================================================================
"t1 = Task(m1,m2,m3)
s1 = Sequence(t1)
s2 = s1.expandAndClone()
l[:] = []
s2.visit(namesVisitor)
self.assertEqual(l, [])
self.assertTrue(s2.dumpPython(None) == ""cms.Sequence(cms.Task(process.m1, process.m2, process.m3))\n"")

"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import unittest
import copy
from ExceptionHandling import ExceptionHandling
from Mixins import Mixins
import builtins
from FWCore.ParameterSet.Types import Parameter
from OrderedSet import OrderedSet

if __name__==""__main__"":
    t1 = Task(m1,m2)
    t2 = Task(m1,m3,t1)
    t3 = t2.expandAndClone()

    l[:] = []
    s2 = Sequence(t3)
    s2.visit(namesVisitor)

    self.assertEqual(l, [])
    self.assertTrue(s2.dumpPython(None) == ""cms.Sequence(cms.Task(process.m1, process.m2, process.m3))\n"")
```"
-------------------------------------------------------------------------
"t1 = Task(m1,m2,m3)
s1 = Sequence(t1)
s2 = s1.expandAndClone()
l[:] = []
s2.visit(namesVisitor)
self.assertEqual(l, [])
self.assertTrue(s2.dumpPython(None) == ""cms.Sequence(cms.Task(process.m1, process.m2, process.m3))\n"")

"
-------------------------------------------------------------------------
"Recom
PRs: 28006, 28007"
-------------------------------------------------------------------------
=========================================================================
"'run2_data_promptlike_HEfail' : '110X_dataRun2_PromptLike_HEfail_v5',
'run2_data_promptlike'    : '110X_dataRun2_PromptLike_v5',
'run2_data_promptlike_hi' : '110X_dataRun2_PromptLike_HI_v5',
"
-------------------------------------------------------------------------
"autoCond = {
    'run2_data_promptlike_HEfail' : '110X_dataRun2_PromptLike_HEfail_v5',
    'run2_data_promptlike' : '110X_dataRun2_PromptLike_v5',
    'run2_data_promptlike_hi' : '110X_dataRun2_PromptLike_HI_v5',
    'run2_data_relval' : '110X_dataRun2_relval_v6',
    'run1_hlt' : '101X_dataRun2_HLT_frozen_v9',
}"
-------------------------------------------------------------------------
"'phase1_2018_realistic'    :  '106X_upgrade2018_realistic_v8',
'phase1_2018_realistic_HEfail' :  '106X_upgrade2018_realistic_HEfail_v8',
"
-------------------------------------------------------------------------
"Recom
PRs: 27923, 27934"
-------------------------------------------------------------------------
=========================================================================
"Plot1D('idDeepTau2017v2p1VSe', 'idDeepTau2017v2p1VSe', 256, -0.5, 255.5, 'byDeepTau2017v2p1VSe ID working points (deepTau2017v2p1): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight'),
Plot1D('idDeepTau2017v2p1VSmu', 'idDeepTau2017v2p1VSmu', 16, -0.5, 15.5, 'byDeepTau2017v2p1VSmu ID working points (deepTau2017v2p1): bitmask 1 = VLoose, 2 = Loose, 4 = Medium, 8 = Tight'),
Plot1D('idDeepTau2017v2p1VSjet', 'idDeepTau2017v2p1VSjet', 256, -0.5, 255.5, 'byDeepTau2017v2p1VSjet ID working points (deepTau2017v2p1): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight'),
"
-------------------------------------------------------------------------
"- Expr(value=Tuple(elts=[Call(func=Name(id='Plot1D', ctx=Load()), args=[Constant(value='idDeepTau2017v2p1VSe'), Constant(value='idDeepTau2017v2p1VSe'), Constant(value=256), UnaryOp(op=USub(), operand=Constant(value=0.5)), Constant(value=255.5), Constant(value='byDeepTau2017v2p1VSe ID working points (deepTau2017v2p1): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight')], keywords=[]), Call(func=Name(id='Plot1D', ctx=Load()), args=[Constant(value='idDeepTau2017v2p1VSmu'), Constant(value='idDeepTau2017v2p1VSmu'), Constant(value=16), UnaryOp(op=USub(), operand=Constant(value=0.5)), Constant(value=15.5), Constant(value='byDeepTau2017v2p1VSmu ID working points (deepTau2017v2p1): bitmask 1 = VLoose, 2 = Loose, 4 = Medium, 8 = Tight')], keywords=[]), Call(func=Name(id='Plot1D', ctx=Load()), args=[Constant(value='idDeepTau2017v2p1VSjet'), Constant(value='idDeepTau2017v2p1VSjet'), Constant(value=256), UnaryOp(op=USub(), operand=Constant(value=0.5)), Constant(value=255.5), Constant(value='byDeepTau2017v2p1VSjet ID working points (deepTau2017v2p1): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight')], keywords=[]), NoPlot('jetIdx'))"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_run2_tau_ul_2018_cff import run2_tau_ul_2018
Run3 = cms.ModifierChain(Run2_2018.copyAndExclude([run2_GEM_2017,run2_egamma_2018,run2_tau_ul_2018]), run3_common, run3_GEM, run3_HB)
"
-------------------------------------------------------------------------
"Recom
PRs: 27878, 27882"
-------------------------------------------------------------------------
=========================================================================
"Plot1D('idDeepTau2017v2p1VSe', 'idDeepTau2017v2p1VSe', 256, -0.5, 255.5, 'byDeepTau2017v2p1VSe ID working points (deepTau2017v2p1): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight'),
Plot1D('idDeepTau2017v2p1VSmu', 'idDeepTau2017v2p1VSmu', 16, -0.5, 15.5, 'byDeepTau2017v2p1VSmu ID working points (deepTau2017v2p1): bitmask 1 = VLoose, 2 = Loose, 4 = Medium, 8 = Tight'),
Plot1D('idDeepTau2017v2p1VSjet', 'idDeepTau2017v2p1VSjet', 256, -0.5, 255.5, 'byDeepTau2017v2p1VSjet ID working points (deepTau2017v2p1): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight'),
"
-------------------------------------------------------------------------
"- Expr(value=Tuple(elts=[Call(func=Name(id='Plot1D', ctx=Load()), args=[Constant(value='idDeepTau2017v2p1VSe'), Constant(value='idDeepTau2017v2p1VSe'), Constant(value=256), UnaryOp(op=USub(), operand=Constant(value=0.5)), Constant(value=255.5), Constant(value='byDeepTau2017v2p1VSe ID working points (deepTau2017v2p1): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight')], keywords=[])], ctx=Load()))
- Expr(value=Tuple(elts=[Call(func=Name(id='Plot1D', ctx=Load()), args=[Constant(value='idDeepTau2017v2p1VSmu'), Constant(value='idDeepTau2017v2p1VSmu'), Constant(value=16), UnaryOp(op=USub(), operand=Constant(value=0.5)), Constant(value=15.5), Constant(value='byDeepTau2017v2p1VSmu ID working points (deepTau2017v2p1): bitmask 1 = VLoose, 2 = Loose, 4 = Medium, 8 = Tight')], keywords=[])], ctx=Load()))
- Expr(value=Tuple(elts=[Call(func=Name(id='Plot1D', ctx=Load()), args=[Constant(value='idDeepTau2017v2p1VSjet'), Constant(value='idDeepTau2017v2p1VSjet'), Constant(value=256), UnaryOp(op=USub(), operand=Constant(value=0.5)), Constant(value=255.5), Constant(value='byDeepTau2017v2p1VSjet ID working points (deepTau2017v2p1): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"""deepTau2017v2p1"",
"
-------------------------------------------------------------------------
"Recom
PRs: 27878, 27879"
-------------------------------------------------------------------------
=========================================================================
"databases['v1']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hltdev_reader', '-s', 'ConvertMe!' )
databases['v1']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_r',         '-s', 'ConvertMe!' )
databases['v1']['adg']     = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gui_r',     '-s', 'ConvertMe!' )
databases['v2']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['adg']     = ( '-t', 'oracle', '-h', 'cmsonr1-adg1-s.cern.ch', '-d', 'cms_orcon_adg.cern.ch', '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
"
-------------------------------------------------------------------------
"databases['v1']['offline'] = ('-t', 'oracle', '-h', 'cmsr1-s.cern.ch', '-d', 'cms_cond.cern.ch', '-u', 'cms_hltdev_reader', '-s', 'ConvertMe!')
databases['v1']['online'] = ('-t', 'oracle', '-h', 'cmsonr1-s.cms', '-d', 'cms_rcms.cern.ch', '-u', 'cms_hlt_r', '-s', 'ConvertMe!')
databases['v1']['adg'] = ('-t', 'oracle', '-h', 'cmsr1-s.cern.ch', '-d', 'cms_cond.cern.ch', '-u', 'cms_hlt_gui_r', '-s', 'ConvertMe!')
databases['v2']['offline'] = ('-t', 'oracle', '-h', 'cmsr1-s.cern.ch', '-d', 'cms_cond.cern.ch', '-u', 'cms_hlt_gdr_r', '-s', 'ConvertMe!')
databases['v2']['online'] = ('-t', 'oracle', '-h', 'cmsonr1-s.cms', '-d', 'cms_rcms.cern.ch', '-u', 'cms_hlt_gdr_r', '-s', 'ConvertMe!')
databases['v2']['adg'] = ('-t', 'oracle', '-h', 'cmsonr1-adg1-s.cern.ch', '-d', 'cms_orcon_adg.cern.ch', '-u', 'cms_hlt_gdr_r', '-s', 'ConvertMe!')"
-------------------------------------------------------------------------
"databases['v1']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hltdev_reader', '-s', 'ConvertMe!' )
databases['v1']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_r',         '-s', 'ConvertMe!' )
databases['v1']['adg']     = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gui_r',     '-s', 'ConvertMe!' )
databases['v2']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['adg']     = ( '-t', 'oracle', '-h', 'cmsonr1-adg1-s.cern.ch', '-d', 'cms_orcon_adg.cern.ch', '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
"
-------------------------------------------------------------------------
"Recom
PRs: 27756, 27760"
-------------------------------------------------------------------------
=========================================================================
"databases['v1']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hltdev_reader', '-s', 'ConvertMe!' )
databases['v1']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_r',         '-s', 'ConvertMe!' )
databases['v1']['adg']     = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gui_r',     '-s', 'ConvertMe!' )
databases['v2']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['adg']     = ( '-t', 'oracle', '-h', 'cmsonr1-adg1-s.cern.ch', '-d', 'cms_orcon_adg.cern.ch', '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
"
-------------------------------------------------------------------------
"```python
databases['v1']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch', '-d', 'cms_cond.cern.ch', '-u', 'cms_hltdev_reader', '-s', 'ConvertMe!' )
databases['v1']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms', '-d', 'cms_rcms.cern.ch', '-u', 'cms_hlt_r', '-s', 'ConvertMe!' )
databases['v1']['adg']     = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch', '-d', 'cms_cond.cern.ch', '-u', 'cms_hlt_gui_r', '-s', 'ConvertMe!' )
databases['v2']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch', '-d', 'cms_cond.cern.ch', '-u', 'cms_hlt_gdr_r', '-s', 'ConvertMe!' )
databases['v2']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms', '-d', 'cms_rcms.cern.ch', '-u', 'cms_hlt_gdr_r', '-s', 'ConvertMe!' )
databases['v2']['adg']     = ( '-t', 'oracle', '-h', 'cmsonr1-adg1-s.cern.ch', '-d', 'cms_orcon_adg.cern.ch', '-u', 'cms_hlt_gdr_r', '-s', 'ConvertMe!' )
```"
-------------------------------------------------------------------------
"databases['v1']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hltdev_reader', '-s', 'ConvertMe!' )
databases['v1']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_r',         '-s', 'ConvertMe!' )
databases['v1']['adg']     = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gui_r',     '-s', 'ConvertMe!' )
databases['v2']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['adg']     = ( '-t', 'oracle', '-h', 'cmsonr1-adg1-s.cern.ch', '-d', 'cms_orcon_adg.cern.ch', '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
"
-------------------------------------------------------------------------
"Recom
PRs: 27756, 27759"
-------------------------------------------------------------------------
=========================================================================
"databases['v1']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hltdev_reader', '-s', 'ConvertMe!' )
databases['v1']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_r',         '-s', 'ConvertMe!' )
databases['v1']['adg']     = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gui_r',     '-s', 'ConvertMe!' )
databases['v2']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['adg']     = ( '-t', 'oracle', '-h', 'cmsonr1-adg1-s.cern.ch', '-d', 'cms_orcon_adg.cern.ch', '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
"
-------------------------------------------------------------------------
"```python
databases['v1']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hltdev_reader', '-s', 'ConvertMe!' )
databases['v1']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_r',         '-s', 'ConvertMe!' )
databases['v1']['adg']     = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gui_r',     '-s', 'ConvertMe!' )
databases['v2']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['adg']     = ( '-t', 'oracle', '-h', 'cmsonr1-adg1-s.cern.ch', '-d', 'cms_orcon_adg.cern.ch', '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
```"
-------------------------------------------------------------------------
"databases['v1']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hltdev_reader', '-s', 'ConvertMe!' )
databases['v1']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_r',         '-s', 'ConvertMe!' )
databases['v1']['adg']     = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gui_r',     '-s', 'ConvertMe!' )
databases['v2']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['adg']     = ( '-t', 'oracle', '-h', 'cmsonr1-adg1-s.cern.ch', '-d', 'cms_orcon_adg.cern.ch', '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
"
-------------------------------------------------------------------------
"Recom
PRs: 27756, 27757"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '110X_dataRun2_v4',
'run2_data'         :   '110X_dataRun2_v4',
'run2_data_relval'  :   '110X_dataRun2_relval_v4',
"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v4',
'run2_data'         :   '110X_dataRun2_v4',
'run2_data_relval'  :   '110X_dataRun2_relval_v4',"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v20',
'run2_data'         :   '106X_dataRun2_v20',
'run2_data_relval'  :   '106X_dataRun2_relval_v19',
"
-------------------------------------------------------------------------
"Recom
PRs: 27733, 27734"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '110X_dataRun2_v5',
'run2_data'         :   '110X_dataRun2_v5',
'run2_data_relval'  :   '110X_dataRun2_relval_v5',
'run2_data_promptlike_HEfail' : '110X_dataRun2_PromptLike_HEfail_v3',
'run2_data_promptlike'    : '110X_dataRun2_PromptLike_v3',
'run2_data_promptlike_hi' : '110X_dataRun2_PromptLike_HI_v3',
"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v5',
'run2_data'         :   '110X_dataRun2_v5',
'run2_data_relval'  :   '110X_dataRun2_relval_v5',
'run2_data_promptlike_HEfail' : '110X_dataRun2_PromptLike_HEfail_v3',
'run2_data_promptlike'    : '110X_dataRun2_PromptLike_v3',
'run2_data_promptlike_hi' : '110X_dataRun2_PromptLike_HI_v3',"
-------------------------------------------------------------------------
"'phase1_2021_realistic'    : '106X_upgrade2021_realistic_v9', # GT containing realistic conditions for Phase1 2021
"
-------------------------------------------------------------------------
"Recom
PRs: 27644, 27651"
-------------------------------------------------------------------------
=========================================================================
"if (rechit.getOOTIndex() != CTPPSDiamondRecHit::TIMESLICE_WITHOUT_LEADING && rechit.getOOTIndex() >= 0 &&
    potPlots_[detId_pot].pixelTomographyAll.count(rechit.getOOTIndex()) > 0 &&
"
-------------------------------------------------------------------------
"```cpp
if (rechit.getOOTIndex() != CTPPSDiamondRecHit::TIMESLICE_WITHOUT_LEADING && rechit.getOOTIndex() >= 0 &&
    potPlots_[detId_pot].pixelTomographyAll.count(rechit.getOOTIndex()) > 0 &&
    lt.getX0() - horizontalShiftBwDiamondPixels_ < 24) {
    potPlots_[detId_pot].pixelTomographyAll.at(rechit.getOOTIndex())
```"
-------------------------------------------------------------------------
"ctppsDQM = cms.Sequence()
ctppsDQMElastic = cms.Sequence()
_ctppsDQM = ctppsDQM.copy()
_ctppsDQMElastic = ctppsDQMElastic.copy()

_ctppsDQM = cms.Sequence(
"
-------------------------------------------------------------------------
"Recom
PRs: 27591, 27620"
-------------------------------------------------------------------------
=========================================================================
"'run2_design'       :   '110X_mcRun2_design_v2',
'run2_mc'           :   '110X_mcRun2_asymptotic_v2',
'run2_mc_cosmics'   :   '110X_mcRun2cosmics_startup_deco_v2',
'run2_mc_pa'        :   '110X_mcRun2_pA_v2',
"
-------------------------------------------------------------------------
"'run2_design'       :   '110X_mcRun2_design_v5',
'run2_mc'           :   '110X_mcRun2_asymptotic_v5',
'run2_mc_cosmics'   :   '110X_mcRun2cosmics_startup_deco_v3',
'run2_mc_pa'        :   '110X_mcRun2_pA_v5',"
-------------------------------------------------------------------------
"'run2_design'       :   '106X_mcRun2_design_v6',
'run2_mc'           :   '106X_mcRun2_asymptotic_v6',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_startup_deco_v3',
'run2_mc_pa'        :   '106X_mcRun2_pA_v5',
"
-------------------------------------------------------------------------
"Recom
PRs: 27600, 27606"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '110X_dataRun2_v2',
'run2_data'         :   '110X_dataRun2_v2',
'run2_data_relval'  :   '110X_dataRun2_relval_v2',
"
-------------------------------------------------------------------------
"autoCond = {
     # GlobalTag for MC production (p-Pb collisions) with realistic alignment and calibrations for Run2
     'run2_mc_pa'        :   '110X_mcRun2_pA_v1',
     # GlobalTag for Run1 data reprocessing
     'run1_data'         :   '110X_dataRun2_v2',
     # GlobalTag for Run2 data reprocessing
     'run2_data'         :   '110X_dataRun2_v2',
     # GlobalTag for Run2 data relvals: allows customization to run with fixed L1 menu
     'run2_data_relval'  :   '110X_dataRun2_relval_v2',
     # GlobalTag for Run2 data 2018B relvals only: HEM-15-16 fail
     'run2_data_promptlike_HEfail' : '110X_dataRun2_PromptLike_HEfail_v1',
}"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v18',
'run2_data'         :   '106X_dataRun2_v18',
'run2_data_relval'  :   '106X_dataRun2_relval_v17',
"
-------------------------------------------------------------------------
"Recom
PRs: 27604, 27605"
-------------------------------------------------------------------------
=========================================================================
"self.promptCustoms = [ 'Configuration/DataProcessing/RecoTLR.customisePostEra_Run3' ]
self.expressCustoms = [ 'Configuration/DataProcessing/RecoTLR.customisePostEra_Run3_express_trackingOnly' ]
self.visCustoms = [ 'Configuration/DataProcessing/RecoTLR.customisePostEra_Run3' ]
"
-------------------------------------------------------------------------
"class trackingOnlyEra_Run3(trackingOnly):
    self.cbSc='pp'
    self.addEI=False
    self.eras=Run3
    self.promptCustoms = ['Configuration/DataProcessing/RecoTLR.customisePostEra_Run3']
    self.expressCustoms = ['Configuration/DataProcessing/RecoTLR.customisePostEra_Run3_express_trackingOnly']
    self.visCustoms = ['Configuration/DataProcessing/RecoTLR.customisePostEra_Run3']"
-------------------------------------------------------------------------
"self.promptCustoms = [ 'Configuration/DataProcessing/RecoTLR.customisePostEra_Run3' ]
self.expressCustoms = [ 'Configuration/DataProcessing/RecoTLR.customisePostEra_Run3_express_trackingOnly' ]
self.visCustoms = [ 'Configuration/DataProcessing/RecoTLR.customisePostEra_Run3' ]
"
-------------------------------------------------------------------------
"Recom
PRs: 27536, 27537"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2017_realistic'    :  '106X_mc2017_realistic_v7',
"
-------------------------------------------------------------------------
"'phase1_2017_realistic'    :  '106X_mc2017_realistic_v7',"
-------------------------------------------------------------------------
"'phase1_2017_realistic'    :  '106X_mc2017_realistic_v7',
"
-------------------------------------------------------------------------
"Recom
PRs: 27342, 27420"
-------------------------------------------------------------------------
=========================================================================
"if not hasattr(self.process, self.updatedTauName):
    embedID = self.cms.EDProducer(""PATTauIDEmbedder"",
       src = self.cms.InputTag('slimmedTaus'),
       tauIDSources = tauIDSources
    )
    setattr(self.process, self.updatedTauName, embedID)
else: #assume same type
    tauIDSources = self.cms.PSet(
        getattr(self.process, self.updatedTauName).tauIDSources,
        tauIDSources)
    getattr(self.process, self.updatedTauName).tauIDSources = tauIDSources
"
-------------------------------------------------------------------------
"```python
if not hasattr(self.process, self.updatedTauName):
    embedID = self.cms.EDProducer(""PATTauIDEmbedder"",
       src = self.cms.InputTag('slimmedTaus'),
       tauIDSources = tauIDSources
    )
    setattr(self.process, self.updatedTauName, embedID)
else:
    tauIDSources_temp = self.cms.PSet(
        getattr(self.process, self.updatedTauName).tauIDSources
    )
    for key in tauIDSources.parameterNames_():
        tauIDSources_temp.addParameter_(
            key, getattr(tauIDSources, key)
        )
    getattr(self.process, self.updatedTauName).tauIDSources = tauIDSources_temp
```"
-------------------------------------------------------------------------
"if not hasattr(self.process, self.updatedTauName):
    embedID = self.cms.EDProducer(""PATTauIDEmbedder"",
       src = self.cms.InputTag('slimmedTaus'),
       tauIDSources = tauIDSources
    )
    setattr(self.process, self.updatedTauName, embedID)
else: #assume same type
    tauIDSources = self.cms.PSet(
        getattr(self.process, self.updatedTauName).tauIDSources,
        tauIDSources)
    getattr(self.process, self.updatedTauName).tauIDSources = tauIDSources
"
-------------------------------------------------------------------------
"Recom
PRs: 27397, 27398"
-------------------------------------------------------------------------
=========================================================================
"Plot1D('idDeepTau2017v2VSe', 'idDeepTau2017v2VSe', 256, -0.5, 255.5, 'byDeepTau2017v2VSe ID working points (deepTau2017v2): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight'),
Plot1D('idDeepTau2017v2VSmu', 'idDeepTau2017v2VSmu', 16, -0.5, 15.5, 'byDeepTau2017v2VSmu ID working points (deepTau2017v2): bitmask 1 = VLoose, 2 = Loose, 4 = Medium, 8 = Tight'),
Plot1D('idDeepTau2017v2VSjet', 'idDeepTau2017v2VSjet', 256, -0.5, 255.5, 'byDeepTau2017v2VSjet ID working points (deepTau2017v2): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight'),
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[Call(func=Name(id='Plot1D', ctx=Load()), args=[Constant(value='rawDeepTau2017v2VSe'), Constant(value='rawDeepTau2017v2VSe'), Constant(value=20), Constant(value=0), Constant(value=1), Constant(value='byDeepTau2017v2VSe raw output discriminator (deepTau2017v2)')], keywords=[])], ctx=Load()))
```"
-------------------------------------------------------------------------
"Plot1D('idDeepTau2017v2VSe', 'idDeepTau2017v2VSe', 256, -0.5, 255.5, 'byDeepTau2017v2VSe ID working points (deepTau2017v2): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight'),
Plot1D('idDeepTau2017v2VSmu', 'idDeepTau2017v2VSmu', 16, -0.5, 15.5, 'byDeepTau2017v2VSmu ID working points (deepTau2017v2): bitmask 1 = VLoose, 2 = Loose, 4 = Medium, 8 = Tight'),
Plot1D('idDeepTau2017v2VSjet', 'idDeepTau2017v2VSjet', 256, -0.5, 255.5, 'byDeepTau2017v2VSjet ID working points (deepTau2017v2): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight'),
"
-------------------------------------------------------------------------
"Recom
PRs: 27226, 27227"
-------------------------------------------------------------------------
=========================================================================
"Plot1D('rawDeepTau2017v2VSe', 'rawDeepTau2017v2VSe', 20, 0, 1, 'byDeepTau2017v2VSe raw output discriminator (deepTau2017v2)'),
Plot1D('rawDeepTau2017v2VSmu', 'rawDeepTau2017v2VSmu', 20, 0, 1, 'byDeepTau2017v2VSmu raw output discriminator (deepTau2017v2)'),
Plot1D('rawDeepTau2017v2VSjet', 'rawDeepTau2017v2VSjet', 20, 0, 1, 'byDeepTau2017v2VSjet raw output discriminator (deepTau2017v2)'),
"
-------------------------------------------------------------------------
"Plot1D('rawDeepTau2017v2VSe', 'rawDeepTau2017v2VSe', 20, 0, 1, 'byDeepTau2017v2VSe raw output discriminator (deepTau2017v2)'),
Plot1D('rawDeepTau2017v2VSmu', 'rawDeepTau2017v2VSmu', 20, 0, 1, 'byDeepTau2017v2VSmu raw output discriminator (deepTau2017v2)'),
Plot1D('rawDeepTau2017v2VSjet', 'rawDeepTau2017v2VSjet', 20, 0, 1, 'byDeepTau2017v2VSjet raw output discriminator (deepTau2017v2)'),"
-------------------------------------------------------------------------
"Plot1D('rawDeepTau2017v2VSe', 'rawDeepTau2017v2VSe', 20, 0, 1, 'byDeepTau2017v2VSe raw output discriminator (deepTau2017v2)'),
Plot1D('rawDeepTau2017v2VSmu', 'rawDeepTau2017v2VSmu', 20, 0, 1, 'byDeepTau2017v2VSmu raw output discriminator (deepTau2017v2)'),
Plot1D('rawDeepTau2017v2VSjet', 'rawDeepTau2017v2VSjet', 20, 0, 1, 'byDeepTau2017v2VSjet raw output discriminator (deepTau2017v2)'),
"
-------------------------------------------------------------------------
"Recom
PRs: 27226, 27227"
-------------------------------------------------------------------------
=========================================================================
"cut = cms.string(""pt > 18 && tauID('decayModeFindingNewDMs') && (tauID('byLooseCombinedIsolationDeltaBetaCorr3Hits') || tauID('byVLooseIsolationMVArun2v1DBoldDMwLT2015') || tauID('byVLooseIsolationMVArun2v1DBnewDMwLT') || tauID('byVLooseIsolationMVArun2v1DBdR03oldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBnewDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBdR03oldDMwLT2017v2') || tauID('byVVVLooseDeepTau2017v2VSjet'))"")
 Configuration.Eras.Modifier_run2_nanoAOD_94X2016_cff import run2_nanoAOD_94X2016
 Configuration.Eras.Modifier_run2_nanoAOD_94XMiniAODv2_cff import run2_nanoAOD_94XMiniAODv2
 Configuration.Eras.Modifier_run2_nanoAOD_102Xv1_cff import run2_nanoAOD_102Xv1
era in [run2_nanoAOD_94X2016,run2_nanoAOD_94XMiniAODv2,run2_nanoAOD_102Xv1]:
era.toModify(finalTaus,
             cut = cms.string(""pt > 18 && tauID('decayModeFindingNewDMs') && (tauID('byLooseCombinedIsolationDeltaBetaCorr3Hits') || tauID('byVLooseIsolationMVArun2v1DBoldDMwLT2015') || tauID('byVLooseIsolationMVArun2v1DBnewDMwLT') || tauID('byVLooseIsolationMVArun2v1DBdR03oldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBnewDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBdR03oldDMwLT2017v2'))"")
)
"
-------------------------------------------------------------------------
"```python
cut = cms.string(""pt > 18 && tauID('decayModeFindingNewDMs') && (tauID('byLooseCombinedIsolationDeltaBetaCorr3Hits') || tauID('byVLooseIsolationMVArun2v1DBoldDMwLT2015') || tauID('byVLooseIsolationMVArun2v1DBnewDMwLT') || tauID('byVLooseIsolationMVArun2v1DBdR03oldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBnewDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBdR03oldDMwLT2017v2'))"")

Configuration.Eras.Modifier_run2_nanoAOD_94X2016_cff import run2_nanoAOD_94X2016
Configuration.Eras.Modifier_run2_nanoAOD_94XMiniAODv2_cff import run2_nanoAOD_94XMiniAODv2
Configuration.Eras.Modifier_run2_nanoAOD_102Xv1_cff import run2_nanoAOD_102Xv1

for era in [run2_nanoAOD_94X2016, run2_nanoAOD_94XMiniAODv2, run2_nanoAOD_102Xv1]:
    era.toModify(finalTaus, cut=cut)
```"
-------------------------------------------------------------------------
"cut = cms.string(""pt > 18 && tauID('decayModeFindingNewDMs') && (tauID('byLooseCombinedIsolationDeltaBetaCorr3Hits') || tauID('byVLooseIsolationMVArun2v1DBoldDMwLT2015') || tauID('byVLooseIsolationMVArun2v1DBnewDMwLT') || tauID('byVLooseIsolationMVArun2v1DBdR03oldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBnewDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBdR03oldDMwLT2017v2') || tauID('byVVVLooseDeepTau2017v2VSjet'))"")
 Configuration.Eras.Modifier_run2_nanoAOD_94X2016_cff import run2_nanoAOD_94X2016
 Configuration.Eras.Modifier_run2_nanoAOD_94XMiniAODv2_cff import run2_nanoAOD_94XMiniAODv2
 Configuration.Eras.Modifier_run2_nanoAOD_102Xv1_cff import run2_nanoAOD_102Xv1
era in [run2_nanoAOD_94X2016,run2_nanoAOD_94XMiniAODv2,run2_nanoAOD_102Xv1]:
era.toModify(finalTaus,
             cut = cms.string(""pt > 18 && tauID('decayModeFindingNewDMs') && (tauID('byLooseCombinedIsolationDeltaBetaCorr3Hits') || tauID('byVLooseIsolationMVArun2v1DBoldDMwLT2015') || tauID('byVLooseIsolationMVArun2v1DBnewDMwLT') || tauID('byVLooseIsolationMVArun2v1DBdR03oldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBnewDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBdR03oldDMwLT2017v2'))"")
)
"
-------------------------------------------------------------------------
"Recom
PRs: 27226, 27227"
-------------------------------------------------------------------------
=========================================================================
"def _tauId4WPMask(pattern,doc):
return _tauIdWPMask(pattern, choices=(""VLoose"", ""Loose"", ""Medium"", ""Tight""), doc=doc)
_tauId8WPMask(pattern,doc):
return _tauIdWPMask(pattern,choices=(""VVVLoose"",""VVLoose"",""VLoose"",""Loose"",""Medium"",""Tight"",""VTight"",""VVTight""),doc=doc)
"
-------------------------------------------------------------------------
"def _tauId4WPMask(pattern, doc):
    return _tauIdWPMask(pattern, choices=(""VLoose"", ""Loose"", ""Medium"", ""Tight""), doc=doc)

def _tauId8WPMask(pattern, doc):
    return _tauIdWPMask(pattern, choices=(""VVVLoose"", ""VVLoose"", ""VLoose"", ""Loose"", ""Medium"", ""Tight"", ""VTight"", ""VVTight""), doc=doc)"
-------------------------------------------------------------------------
"def _tauId4WPMask(pattern,doc):
return _tauIdWPMask(pattern, choices=(""VLoose"", ""Loose"", ""Medium"", ""Tight""), doc=doc)
_tauId8WPMask(pattern,doc):
return _tauIdWPMask(pattern,choices=(""VVVLoose"",""VVLoose"",""VLoose"",""Loose"",""Medium"",""Tight"",""VTight"",""VVTight""),doc=doc)
"
-------------------------------------------------------------------------
"Recom
PRs: 27226, 27227"
-------------------------------------------------------------------------
=========================================================================
"_deepTauVars2017v2 = cms.PSet(
rawDeepTau2017v2VSe = Var(""tauID('byDeepTau2017v2VSeraw')"", float, doc=""byDeepTau2017v2VSe raw output discriminator (deepTau2017v2)"", precision=10),
rawDeepTau2017v2VSmu = Var(""tauID('byDeepTau2017v2VSmuraw')"", float, doc=""byDeepTau2017v2VSmu raw output discriminator (deepTau2017v2)"", precision=10),
rawDeepTau2017v2VSjet = Var(""tauID('byDeepTau2017v2VSjetraw')"", float, doc=""byDeepTau2017v2VSjet raw output discriminator (deepTau2017v2)"", precision=10),
idDeepTau2017v2VSe = _tauId8WPMask(""by%sDeepTau2017v2VSe"", doc=""byDeepTau2017v2VSe ID working points (deepTau2017v2)""),
idDeepTau2017v2VSmu = _tauId4WPMask(""by%sDeepTau2017v2VSmu"", doc=""byDeepTau2017v2VSmu ID working points (deepTau2017v2)""),
idDeepTau2017v2VSjet = _tauId8WPMask(""by%sDeepTau2017v2VSjet"", doc=""byDeepTau2017v2VSjet ID working points (deepTau2017v2)""),

_mvaIsoVars2017v2,
_deepTauVars2017v2
"
-------------------------------------------------------------------------
"_deepTauVars2017v2 = cms.PSet(
    rawDeepTau2017v2VSe = Var(""tauID('rawDeepTau2017v2VSe')"", float, doc=""byDeepTau2017v2VSe raw output discriminator (deepTau2017v2)"", precision=10),
    rawDeepTau2017v2VSmu = Var(""tauID('rawDeepTau2017v2VSmu')"", float, doc=""byDeepTau2017v2VSmu raw output discriminator (deepTau2017v2)"", precision=10),
    rawDeepTau2017v2VSjet = Var(""tauID('rawDeepTau2017v2VSjet')"", float, doc=""byDeepTau2017v2VSjet raw output discriminator (deepTau2017v2)"", precision=10),
    idDeepTau2017v2VSe = _tauId8WPMask(""by%sDeepTau2017v2VSe"", doc=""byDeepTau2017v2VSe ID working points (deepTau2017v2)""),
    idDeepTau2017v2VSmu = _tauId4WPMask(""by%sDeepTau2017v2VSmu"", doc=""byDeepTau2017v2VSmu ID working points (deepTau2017v2)""),
    idDeepTau2017v2VSjet = _tauId8WPMask(""by%sDeepTau2017v2VSjet"", doc=""byDeepTau2017v2VSjet ID working points (deepTau2017v2)""),
    
    _mvaIsoVars2017v2,
    _deepTauVars2017v2
)"
-------------------------------------------------------------------------
"_deepTauVars2017v2 = cms.PSet(
rawDeepTau2017v2VSe = Var(""tauID('byDeepTau2017v2VSeraw')"", float, doc=""byDeepTau2017v2VSe raw output discriminator (deepTau2017v2)"", precision=10),
rawDeepTau2017v2VSmu = Var(""tauID('byDeepTau2017v2VSmuraw')"", float, doc=""byDeepTau2017v2VSmu raw output discriminator (deepTau2017v2)"", precision=10),
rawDeepTau2017v2VSjet = Var(""tauID('byDeepTau2017v2VSjetraw')"", float, doc=""byDeepTau2017v2VSjet raw output discriminator (deepTau2017v2)"", precision=10),
idDeepTau2017v2VSe = _tauId8WPMask(""by%sDeepTau2017v2VSe"", doc=""byDeepTau2017v2VSe ID working points (deepTau2017v2)""),
idDeepTau2017v2VSmu = _tauId4WPMask(""by%sDeepTau2017v2VSmu"", doc=""byDeepTau2017v2VSmu ID working points (deepTau2017v2)""),
idDeepTau2017v2VSjet = _tauId8WPMask(""by%sDeepTau2017v2VSjet"", doc=""byDeepTau2017v2VSjet ID working points (deepTau2017v2)""),

_mvaIsoVars2017v2,
_deepTauVars2017v2
"
-------------------------------------------------------------------------
"Recom
PRs: 27226, 27227"
-------------------------------------------------------------------------
=========================================================================
"for era in [run2_nanoAOD_94XMiniAODv1,run2_nanoAOD_94X2016,run2_nanoAOD_94XMiniAODv2,run2_nanoAOD_102Xv1]:
era.toModify(tauTable.variables,
             rawDeepTau2017v2VSe = None,
             rawDeepTau2017v2VSmu = None,
             rawDeepTau2017v2VSjet = None,
             idDeepTau2017v2VSe = None,
             idDeepTau2017v2VSmu = None,
             idDeepTau2017v2VSjet = None
)

"
-------------------------------------------------------------------------
"```python
for era in [run2_nanoAOD_94XMiniAODv1, run2_nanoAOD_94X2016, run2_nanoAOD_94XMiniAODv2, run2_nanoAOD_102Xv1]:
    era.toModify(tauTable.variables,
                 rawDeepTau2017v2VSe = None,
                 rawDeepTau2017v2VSmu = None,
                 rawDeepTau2017v2VSjet = None,
                 idDeepTau2017v2VSe = None,
                 idDeepTau2017v2VSmu = None,
                 idDeepTau2017v2VSjet = None
    )
```"
-------------------------------------------------------------------------
"for era in [run2_nanoAOD_94XMiniAODv1,run2_nanoAOD_94X2016,run2_nanoAOD_94XMiniAODv2,run2_nanoAOD_102Xv1]:
era.toModify(tauTable.variables,
             rawDeepTau2017v2VSe = None,
             rawDeepTau2017v2VSmu = None,
             rawDeepTau2017v2VSjet = None,
             idDeepTau2017v2VSe = None,
             idDeepTau2017v2VSmu = None,
             idDeepTau2017v2VSjet = None
)

"
-------------------------------------------------------------------------
"Recom
PRs: 27226, 27227"
-------------------------------------------------------------------------
=========================================================================
"import six
"
-------------------------------------------------------------------------
"```python
import six
```"
-------------------------------------------------------------------------
"import six
"
-------------------------------------------------------------------------
"Recom
PRs: 27189, 27209"
-------------------------------------------------------------------------
=========================================================================
"for target,points in six.iteritems(workingPoints_):
    for point,cut in six.iteritems(points):
"
-------------------------------------------------------------------------
"```python
import six

for target, points in six.iteritems(workingPoints_):
    for point, cut in six.iteritems(points):
```"
-------------------------------------------------------------------------
"for target,points in six.iteritems(workingPoints_):
    for point,cut in six.iteritems(points):
"
-------------------------------------------------------------------------
"Recom
PRs: 27189, 27209"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2018_realistic_hi' :  '106X_upgrade2018_realistic_HI_v4',
"
-------------------------------------------------------------------------
"autoCond = {
     # GlobalTag for MC production with realistic conditions for full Phase1 2018 detector
     'phase1_2018_realistic'    :  '106X_upgrade2018_realistic_v6',
     # GlobalTag for MC production with realistic conditions for full Phase1 2018 detector for Heavy Ion
     'phase1_2018_realistic_HEfail' :  '106X_upgrade2018_realistic_HEfail_v6',
     # GlobalTag for MC production (cosmics) with realistic conditions for full Phase1 2018 detector,  Strip tracker in DECO mode
     'phase1_2018_realistic_hi' :  '106X_upgrade2018_realistic_HI_v4',
Required dependency: Configuration.HLT.autoCondHLT, 
Original metadata: Update global tags to include new EGamma regression [10_6_X]
--#### PR description:This is a backport of #27089, which introduced new global tags to support #26892. It should be merged with #27203.#### PR validation:Trivial backport of #27089, which is already merged in master. I tried running `runTheMatrix.py -l limited -i all --ibeos` but it repeated failed due to DAS errors, despite having a valid grid proxy. Since I don't expect any failures, I may as well run the tests here.#### if this PR is a backport please specify the original PR:This is a backport of #27089. It should be merged simultaneously with #27203.
alca-approved, fully-signed, tests-approved, comparison-available, orp-approved, requires-external, backport-ok"
-------------------------------------------------------------------------
"'phase1_2018_realistic_hi' :  '106X_upgrade2018_realistic_HI_v4',
"
-------------------------------------------------------------------------
"Recom
PRs: 27089, 27205"
-------------------------------------------------------------------------
=========================================================================
"('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event allocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event allocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event allocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event deallocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event deallocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit allocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit allocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit allocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit deallocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit deallocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit deallocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO allocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO allocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO allocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO deallocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO deallocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process RECO allocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process RECO allocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process RECO'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process DQM allocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process DQM deallocated'),
"
-------------------------------------------------------------------------
"('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'overhead allocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'overhead deallocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'overhead deallocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DT', 'Run summary', 'EventInfo', 'hostName'),
('DQMData', 'Run %s' % RUN_NR, 'DT', 'Run summary', 'EventInfo', 'processEventRate'),
('DQMData', 'Run %s' % RUN_NR, 'DT', 'Run summary', 'EventInfo', 'processID'),"
-------------------------------------------------------------------------
"('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event allocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event allocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event allocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event deallocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event deallocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit allocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit allocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit allocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit deallocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit deallocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit deallocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO allocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO allocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO allocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO deallocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO deallocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process RECO allocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process RECO allocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process RECO'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process DQM allocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process DQM deallocated'),
"
-------------------------------------------------------------------------
"Recom
PRs: 27198, 27202"
-------------------------------------------------------------------------
=========================================================================
"addMixingScenario(""2018_25ns_UltraLegacy_PoissonOOTPU"",{'file': 'SimGeneral.MixingModule.mix_2018_25ns_UltraLegacy_PoissonOOTPU_cfi'})
"
-------------------------------------------------------------------------
"addMixingScenario(""2018_25ns_UltraLegacy_PoissonOOTPU"",{'file': 'SimGeneral.MixingModule.mix_2018_25ns_UltraLegacy_PoissonOOTPU_cfi'})"
-------------------------------------------------------------------------
"addMixingScenario(""2018_25ns_UltraLegacy_PoissonOOTPU"",{'file': 'SimGeneral.MixingModule.mix_2018_25ns_UltraLegacy_PoissonOOTPU_cfi'})
"
-------------------------------------------------------------------------
"Recom
PRs: 27035, 27200"
-------------------------------------------------------------------------
=========================================================================
"'BeamSpot': 'Run3RoundOptics25ns13TeVLowSigmaZ',
"
-------------------------------------------------------------------------
"Add the required dependency for `Configuration.PyReleaseValidation.relval_steps` and change the value of 'BeamSpot' to 'Run3RoundOptics25ns13TeVLowSigmaZ':

```python
upgradeProperties[2017] = {
    'GT': 'auto:phase1_2021_realistic',
    'HLTmenu': '@relval2017',
    'Era': 'Run3',
    'ScenToRun': ['GenSimFull', 'DigiFull', 'RecoFull', 'HARVESTFull', 'ALCAFull'],
}
'2021Design': {
    'BeamSpot': 'Run3RoundOptics25ns13TeVLowSigmaZ',
}
```

And include the required dependency as per the context."
-------------------------------------------------------------------------
"'BeamSpot': 'Run3RoundOptics25ns13TeVLowSigmaZ',
"
-------------------------------------------------------------------------
"Recom
PRs: 26968, 26970"
-------------------------------------------------------------------------
=========================================================================
"command = ['compareHistograms.py', '-b', os.path.join(base_dir, file_name), \
"
-------------------------------------------------------------------------
"```python
command = ['compareHistograms.py', '-b', os.path.join(base_dir, file_name)]
```"
-------------------------------------------------------------------------
"command = ['compareHistograms.py', '-b', os.path.join(base_dir, file_name), \
"
-------------------------------------------------------------------------
"Recom
PRs: 26930, 26955"
-------------------------------------------------------------------------
=========================================================================
"except Exception as ex:
    print('Exception comparing two root files: %s' % ex)
"
-------------------------------------------------------------------------
"```python
except Exception as ex:
    print('Exception comparing two root files: %s' % ex)
```"
-------------------------------------------------------------------------
"except Exception as ex:
    print('Exception comparing two root files: %s' % ex)
"
-------------------------------------------------------------------------
"Recom
PRs: 26930, 26955"
-------------------------------------------------------------------------
=========================================================================
"command = ['visDQMUpload.py', 'https://cmsweb.cern.ch/dqm/dev', file]
"
-------------------------------------------------------------------------
"import subprocess
import sys
import argparse
import glob
import os
import threading

def upload(files):
    while files:
        try:
            file = files.pop()
            command = ['visDQMUpload.py', 'https://cmsweb.cern.ch/dqm/dev', file]
            print('Uploading output:')
            print(' '.join(command))"
-------------------------------------------------------------------------
"command = ['visDQMUpload.py', 'https://cmsweb.cern.ch/dqm/dev', file]
"
-------------------------------------------------------------------------
"Recom
PRs: 26930, 26955"
-------------------------------------------------------------------------
=========================================================================
"new_dir_list = dirs_list  [node.GetName()]
"
-------------------------------------------------------------------------
new_dir_list = dirs_list + [node.GetName()]
-------------------------------------------------------------------------
"new_dir_list = dirs_list  [node.GetName()]
"
-------------------------------------------------------------------------
"Recom
PRs: 26934, 26935"
-------------------------------------------------------------------------
=========================================================================
"('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event deallocated'),
"
-------------------------------------------------------------------------
"('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event deallocated'),"
-------------------------------------------------------------------------
"parser.add_argument('-n', '--pr-number', help='This is obsolete and should NOT be used.', required=False)
parser.add_argument('-l', '--pr-list', help='A list of PRs participating in the comparison', default='')

# Get the repository and a number of the PR which triggered the comparison
pr_number = args.pr_list.split(' ')[0].split('/')[1].replace('#', '_')

collect_and_compare_files(args.base_dir, args.pr_dir, args.output_dir, args.nprocs, pr_number, args.test_number, args.release_format)
generate_summary_html(args.output_dir, args.pr_list, args.summary_dir)
"
-------------------------------------------------------------------------
"Recom
PRs: 26737, 26929"
-------------------------------------------------------------------------
=========================================================================
"TTrigger::TTrigger(const std::vector<std::string> &muonTriggerNames, const std::vector<std::string> &muonTriggerObjectNames) { 
"
-------------------------------------------------------------------------
"TTrigger::TTrigger(const std::vector<std::string>& muonTriggerNames, const std::vector<std::string>& muonTriggerObjectNames) {"
-------------------------------------------------------------------------
"run2_HLTconditions_2016.toReplaceWith(topMonitorHLT, topMonitorHLT_2016)
"
-------------------------------------------------------------------------
"Recom
PRs: 26355, 26861"
-------------------------------------------------------------------------
=========================================================================
"mvaName = cms.string(""RecoTauTag_tauIdMVAIsoDBnewDMwLT2017v2""),
mvaOpt = cms.string(""DBnewDMwLTwGJ""),
"
-------------------------------------------------------------------------
"```python
mvaName = cms.string(""RecoTauTag_tauIdMVAIsoDBnewDMwLT2017v2""),
mvaOutput_normalization = cms.string(""RecoTauTag_tauIdMVAIsoDBnewDMwLT2017v2_mvaOutput_normalization"")
```"
-------------------------------------------------------------------------
"_makePatTausTaskWithRetrainedMVATauID.add(process.hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLTTask,
                                          process.hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLTTask,
                                          process.hpsPFTauIsolationSums03Task,
                                          process.hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLTTask)
"
-------------------------------------------------------------------------
"Recom
PRs: 26541, 26859"
-------------------------------------------------------------------------
=========================================================================
"for modifier in run2_nanoAOD_94XMiniAODv1,run2_nanoAOD_94XMiniAODv2,run2_nanoAOD_94X2016:
run2_nanoAOD_102Xv1.toModify(calibratedPatElectrons102X, src = ""slimmedElectronsTo106X"")
"
-------------------------------------------------------------------------
"for modifier in run2_nanoAOD_94XMiniAODv1, run2_nanoAOD_94XMiniAODv2, run2_nanoAOD_94X2016:
    run2_nanoAOD_102Xv1.toModify(calibratedPatElectrons102X, src=""slimmedElectronsTo106X"")"
-------------------------------------------------------------------------
"for modifier in run2_nanoAOD_94XMiniAODv1,run2_nanoAOD_94XMiniAODv2,run2_nanoAOD_94X2016:
run2_nanoAOD_102Xv1.toModify(calibratedPatElectrons102X, src = ""slimmedElectronsTo106X"")
"
-------------------------------------------------------------------------
"Recom
PRs: 26844, 26845"
-------------------------------------------------------------------------
=========================================================================
"modifier.toModify(calibratedPatPhotons102Xv1, src = ""slimmedPhotonsTo106X"")
"
-------------------------------------------------------------------------
"+ modifier.toModify(calibratedPatPhotons102Xv1, src = ""slimmedPhotonsTo106X"")"
-------------------------------------------------------------------------
"modifier.toModify(calibratedPatPhotons102Xv1, src = ""slimmedPhotonsTo106X"")
"
-------------------------------------------------------------------------
"Recom
PRs: 26844, 26845"
-------------------------------------------------------------------------
=========================================================================
"
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
"
-------------------------------------------------------------------------
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
-------------------------------------------------------------------------
"
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
"
-------------------------------------------------------------------------
"Recom
PRs: 26700, 26783"
-------------------------------------------------------------------------
=========================================================================
"
from Configuration.Eras.Modifier_phase2_tracker_cff import phase2_tracker
"
-------------------------------------------------------------------------
from Configuration.Eras.Modifier_phase2_tracker_cff import phase2_tracker
-------------------------------------------------------------------------
"
from Configuration.Eras.Modifier_phase2_tracker_cff import phase2_tracker
"
-------------------------------------------------------------------------
"Recom
PRs: 26700, 26783"
-------------------------------------------------------------------------
=========================================================================
"const edm::EDGetTokenT< edm::Association<reco::TrackCollection> > gsf2trk_;	
"
-------------------------------------------------------------------------
"```
ImportFrom(module='RecoEgamma.EgammaElectronProducers.lowPtGsfToTrackLinksDefault_cfi', names=[alias(name='*')], level=0)
Assign(targets=[Name(id='lowPtGsfToTrackLinks', ctx=Store())], value=Call(func=Attribute(value=Name(id='lowPtGsfToTrackLinksDefault', ctx=Load()), attr='clone', ctx=Load()), args=[], keywords=[]))
const edm::EDGetTokenT< edm::Association<reco::TrackCollection> > gsf2trk_;
```"
-------------------------------------------------------------------------
"const edm::EDGetTokenT< edm::Association<reco::TrackCollection> > gsf2trk_;	
"
-------------------------------------------------------------------------
"Recom
PRs: 26325, 26404"
-------------------------------------------------------------------------
=========================================================================
"gsf2trk_{consumes<edm::Association<reco::TrackCollection> >(iConfig.getParameter<edm::InputTag>(""gsfToTrack""))},
"
-------------------------------------------------------------------------
"+ ImportFrom(module='RecoEgamma.EgammaElectronProducers.lowPtGsfToTrackLinksDefault_cfi', names=[alias(name='*')], level=0)
+ Assign(targets=[Name(id='lowPtGsfToTrackLinks', ctx=Store())], value=Call(func=Attribute(value=Name(id='lowPtGsfToTrackLinksDefault', ctx=Load()), attr='clone', ctx=Load()), args=[], keywords=[]))
- gsf2trk_{consumes<edm::Association<reco::TrackCollection> >(iConfig.getParameter<edm::InputTag>(""gsfToTrack""))},"
-------------------------------------------------------------------------
"gsf2trk_{consumes<edm::Association<reco::TrackCollection> >(iConfig.getParameter<edm::InputTag>(""gsfToTrack""))},
"
-------------------------------------------------------------------------
"Recom
PRs: 26325, 26404"
-------------------------------------------------------------------------
=========================================================================
"edm::Handle<edm::Association<reco::TrackCollection> > gsf2trk;
iEvent.getByToken(gsf2trk_, gsf2trk);
"
-------------------------------------------------------------------------
"```cpp
edm::Handle<edm::Association<reco::TrackCollection>> lowPtGsfToTrackLinks;
iEvent.getByToken(lowPtGsfToTrackLinks_, lowPtGsfToTrackLinks);
```"
-------------------------------------------------------------------------
"edm::Handle<edm::Association<reco::TrackCollection> > gsf2trk;
iEvent.getByToken(gsf2trk_, gsf2trk);
"
-------------------------------------------------------------------------
"Recom
PRs: 26325, 26404"
-------------------------------------------------------------------------
=========================================================================
"reco::TrackRef trk = (*gsf2trk)[gref];
if(trk.id() != tracks.id()) {
	throw cms::Exception(""WrongCollection"", ""The reco::Track collection used to match against the GSF Tracks was not used to produce such tracks"");
}
"
-------------------------------------------------------------------------
"```cpp
lowPtGsfToTrackLinks gsf2trk = lowPtGsfToTrackLinks();
lowPtGsfToTrackLinksDefault lowPtGsfToTrackLinksDefaultConfig;
//map Track --> GSF and fill GSF --> PackedCandidates and GSF --> Lost associations
for(unsigned int igsf=0; igsf < ngsf; ++igsf) {
    reco::GsfTrackRef gref(gsftracks, igsf);
    size_t trkid = trk.index();

    if(trk2packed[trkid] != npacked) {
        reco::TrackRef trk = gsf2trk[gref];
        if(trk.id() != tracks.id()) {
            throw cms::Exception(""WrongCollection"", ""The reco::Track collection used to match against the GSF Tracks was not used to produce such tracks"");
        }
    }
}
```  "
-------------------------------------------------------------------------
"reco::TrackRef trk = (*gsf2trk)[gref];
if(trk.id() != tracks.id()) {
	throw cms::Exception(""WrongCollection"", ""The reco::Track collection used to match against the GSF Tracks was not used to produce such tracks"");
}
"
-------------------------------------------------------------------------
"Recom
PRs: 26325, 26404"
-------------------------------------------------------------------------
=========================================================================
"desc.add<edm::InputTag>(""gsfToTrack"", edm::InputTag(""lowPtGsfToTrackLinks""));
"
-------------------------------------------------------------------------
"ImportFrom(module='RecoEgamma.EgammaElectronProducers.lowPtGsfToTrackLinksDefault_cfi', names=[alias(name='*')], level=0)
+ Assign(targets=[Name(id='lowPtGsfToTrackLinks', ctx=Store())], value=Call(func=Attribute(value=Name(id='lowPtGsfToTrackLinksDefault', ctx=Load()), attr='clone', ctx=Load()), args=[], keywords=[])
desc.add<edm::InputTag>(""gsfToTrack"", edm::InputTag(""lowPtGsfToTrackLinks""))"
-------------------------------------------------------------------------
"desc.add<edm::InputTag>(""gsfToTrack"", edm::InputTag(""lowPtGsfToTrackLinks""));
"
-------------------------------------------------------------------------
"Recom
PRs: 26325, 26404"
-------------------------------------------------------------------------
=========================================================================
"'keep *_lowPtGsfToTrackLinks_*_*',
"
-------------------------------------------------------------------------
"ImportFrom(module='RecoEgamma.EgammaElectronProducers.lowPtGsfToTrackLinksDefault_cfi', names=[alias(name='*')], level=0)"
-------------------------------------------------------------------------
"'keep *_lowPtGsfToTrackLinks_*_*',
"
-------------------------------------------------------------------------
"Recom
PRs: 26325, 26404"
-------------------------------------------------------------------------
=========================================================================
"'keep *_lowPtGsfToTrackLinks_*_*',
"
-------------------------------------------------------------------------
"```python
ImportFrom(module='RecoEgamma.EgammaElectronProducers.lowPtGsfToTrackLinksDefault_cfi', names=[alias(name='*')], level=0)
Assign(targets=[Name(id='lowPtGsfToTrackLinks', ctx=Store())], value=Call(func=Attribute(value=Name(id='lowPtGsfToTrackLinksDefault', ctx=Load()), attr='clone', ctx=Load()), args=[], keywords=[]))
```"
-------------------------------------------------------------------------
"'keep *_lowPtGsfToTrackLinks_*_*',
"
-------------------------------------------------------------------------
"Recom
PRs: 26325, 26404"
-------------------------------------------------------------------------
=========================================================================
"'keep *_lowPtGsfToTrackLinks_*_*',
"
-------------------------------------------------------------------------
"```python
ImportFrom(module='RecoEgamma.EgammaElectronProducers.lowPtGsfToTrackLinksDefault_cfi', names=[alias(name='*')], level=0)
Expr(value=Tuple(elts=[Name(id='lowPtGsfToTrackLinks', ctx=Load())], ctx=Load()))
ImportFrom(module='RecoEgamma.EgammaElectronProducers.lowPtGsfToTrackLinksDefault_cfi', names=[alias(name='*')], level=0)
Assign(targets=[Name(id='lowPtGsfToTrackLinks', ctx=Store())], value=Call(func=Attribute(value=Name(id='lowPtGsfToTrackLinksDefault', ctx=Load()), attr='clone', ctx=Load()), args=[], keywords=[]))
```  "
-------------------------------------------------------------------------
"'keep *_lowPtGsfToTrackLinks_*_*',
"
-------------------------------------------------------------------------
"Recom
PRs: 26325, 26404"
-------------------------------------------------------------------------
=========================================================================
"# keep hidden valley particles
""keep (4900001 <= abs(pdgId) <= 4900991)"",
ep dark matter particles
""keep (51 <= abs(pdgId) <= 53)"",
"
-------------------------------------------------------------------------
"prunedGenParticles = cms.EDProducer(""GenParticlePruner"",
    cms.PSet(
        # keep hidden valley particles
        select = cms.vstring(""keep (4900001 <= abs(pdgId) <= 4900991)""),
        # keep dark matter particles
        select = cms.vstring(""keep (51 <= abs(pdgId) <= 53)"")
    )
)"
-------------------------------------------------------------------------
"# keep hidden valley particles
""keep (4900001 <= abs(pdgId) <= 4900991)"",
ep dark matter particles
""keep (51 <= abs(pdgId) <= 53)"",
"
-------------------------------------------------------------------------
"Recom
PRs: 26339, 26341"
-------------------------------------------------------------------------
=========================================================================
"# keep hidden valley particles
""keep (4900001 <= abs(pdgId) <= 4900991)"",
ep dark matter particles
""keep (51 <= abs(pdgId) <= 53)"",
"
-------------------------------------------------------------------------
"prunedGenParticles = cms.EDProducer(""GenParticlePruner"",
	""keep abs(pdgId) = 10511 || abs(pdgId) = 10521 || abs(pdgId) = 10513 || abs(pdgId) = 10523 || abs(pdgId) = 20513 || abs(pdgId) = 20523 || abs(pdgId) = 10531 || abs(pdgId) = 10533 || abs(pdgId) = 20533 || abs(pdgId) = 10541 || abs(pdgId) = 10543 || abs(pdgId) = 20543"", 
	# keep SUSY particles
	""keep (1000001 <= abs(pdgId) <= 1000039 ) || ( 2000001 <= abs(pdgId) <= 2000015)"",
	# keep protons 
	""keep pdgId = 2212"",
	""keep status == 3 || ( 21 <= status <= 29) || ( 11 <= status <= 19)"",  # keep event summary (status=3 for pythia6, 21 <= status <= 29 for pythia8)
	# keep hidden valley particles
	""keep (4900001 <= abs(pdgId) <= 4900991)"",
	# keep dark matter particles
	""keep (51 <= abs(pdgId) <= 53)""
)
"
-------------------------------------------------------------------------
"# keep hidden valley particles
""keep (4900001 <= abs(pdgId) <= 4900991)"",
ep dark matter particles
""keep (51 <= abs(pdgId) <= 53)"",
"
-------------------------------------------------------------------------
"Recom
PRs: 26339, 26340"
-------------------------------------------------------------------------
=========================================================================
"qualityCuts = [-0.2, 0.0, 0.98],
"
-------------------------------------------------------------------------
"```python
qualityCuts = [-0.2, 0.0, 0.98]
```"
-------------------------------------------------------------------------
"pp_on_AA_2018.toModify(pixelPairStep, qualityCuts = [-0.2, 0.0, 0.98])
"
-------------------------------------------------------------------------
"Recom
PRs: 26217, 26216"
-------------------------------------------------------------------------
=========================================================================
"descriptions.add(""lowPtGsfLinksDefault"", desc);
"
-------------------------------------------------------------------------
"desc.add<edm::InputTag>(""lowPtGsfLinksDefault"", edm::InputTag(""lowPtGSFToPackedCandidateLinker""));
DEFINE_FWK_MODULE(LowPtGSFToPackedCandidateLinker);"
-------------------------------------------------------------------------
"from PhysicsTools.PatAlgos.lowPtGsfLinksDefault_cfi import *
lowPtGsfLinks = lowPtGsfLinksDefault.clone()
"
-------------------------------------------------------------------------
"Recom
PRs: 26031, 26036"
-------------------------------------------------------------------------
=========================================================================
"if ( !mvaOutputNormalizationName_.empty() ) {
"
-------------------------------------------------------------------------
if ( !mvaOutputNormalizationName_.empty() ) {
-------------------------------------------------------------------------
"if ""againstEle2018"" in self.toKeep:
    antiElectronDiscrMVA6_version = ""MVA6v3_noeveto""
    ### Define new anti-e discriminants
    ## Raw
    from RecoTauTag.RecoTau.PATTauDiscriminationAgainstElectronMVA6_cfi import patTauDiscriminationAgainstElectronMVA6
    self.process.patTauDiscriminationByElectronRejectionMVA62018Raw = patTauDiscriminationAgainstElectronMVA6.clone(
        Prediscriminants = noPrediscriminants, #already selected for MiniAOD
        vetoEcalCracks = self.cms.bool(False), #keep taus in EB-EE cracks
        mvaName_NoEleMatch_wGwoGSF_BL = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_BL',
        mvaName_NoEleMatch_wGwoGSF_EC = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_EC',
        mvaName_NoEleMatch_woGwoGSF_BL = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_BL',
        mvaName_NoEleMatch_woGwoGSF_EC = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_EC',
        mvaName_wGwGSF_BL = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_BL',
        mvaName_wGwGSF_EC = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_EC',
        mvaName_woGwGSF_BL = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_BL',
        mvaName_woGwGSF_EC = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_EC'
    )
    ## WPs
    from RecoTauTag.RecoTau.PATTauDiscriminantCutMultiplexer_cfi import patTauDiscriminantCutMultiplexer
    # VLoose
    self.process.patTauDiscriminationByVLooseElectronRejectionMVA62018 = patTauDiscriminantCutMultiplexer.clone(
        PATTauProducer = self.process.patTauDiscriminationByElectronRejectionMVA62018Raw.PATTauProducer,
        Prediscriminants = self.process.patTauDiscriminationByElectronRejectionMVA62018Raw.Prediscriminants,
        toMultiplex = self.cms.InputTag(""patTauDiscriminationByElectronRejectionMVA62018Raw""),
        key = self.cms.InputTag(""patTauDiscriminationByElectronRejectionMVA62018Raw"",""category""),
        mapping = self.cms.VPSet(
            self.cms.PSet(
                category = self.cms.uint32(0),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_BL_WPeff98'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(2),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_BL_WPeff98'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(5),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_BL_WPeff98'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(7),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_BL_WPeff98'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(8),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_EC_WPeff98'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(10),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_EC_WPeff98'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(13),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_EC_WPeff98'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(15),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_EC_WPeff98'),
                variable = self.cms.string('pt')
            )
        )
    )
    # Loose
    self.process.patTauDiscriminationByLooseElectronRejectionMVA62018 = self.process.patTauDiscriminationByVLooseElectronRejectionMVA62018.clone(
        mapping = self.cms.VPSet(
            self.cms.PSet(
                category = self.cms.uint32(0),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_BL_WPeff90'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(2),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_BL_WPeff90'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(5),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_BL_WPeff90'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(7),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_BL_WPeff90'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(8),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_EC_WPeff90'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(10),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_EC_WPeff90'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(13),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_EC_WPeff90'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(15),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_EC_WPeff90'),
                variable = self.cms.string('pt')
            )
        )
    )
    # Medium
    self.process.patTauDiscriminationByMediumElectronRejectionMVA62018 = self.process.patTauDiscriminationByVLooseElectronRejectionMVA62018.clone(
        mapping = self.cms.VPSet(
            self.cms.PSet(
                category = self.cms.uint32(0),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_BL_WPeff80'),
                variable = self.cms.string('pt')
             ),
            self.cms.PSet(
                category = self.cms.uint32(2),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_BL_WPeff80'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(5),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_BL_WPeff80'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(7),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_BL_WPeff80'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(8),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_EC_WPeff80'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(10),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_EC_WPeff80'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(13),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_EC_WPeff80'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(15),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_EC_WPeff80'),
                variable = self.cms.string('pt')
            )
        )
    )
    # Tight
    self.process.patTauDiscriminationByTightElectronRejectionMVA62018 = self.process.patTauDiscriminationByVLooseElectronRejectionMVA62018.clone(
        mapping = self.cms.VPSet(
            self.cms.PSet(
                category = self.cms.uint32(0),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_BL_WPeff70'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(2),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_BL_WPeff70'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(5),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_BL_WPeff70'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(7),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_BL_WPeff70'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(8),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_EC_WPeff70'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(10),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_EC_WPeff70'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(13),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_EC_WPeff70'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(15),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_EC_WPeff70'),
                variable = self.cms.string('pt')
            )
        )
    )
    # VTight
    self.process.patTauDiscriminationByVTightElectronRejectionMVA62018 = self.process.patTauDiscriminationByVLooseElectronRejectionMVA62018.clone(
        mapping = self.cms.VPSet(
            self.cms.PSet(
                category = self.cms.uint32(0),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_BL_WPeff60'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(2),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_BL_WPeff60'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(5),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_BL_WPeff60'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(7),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_BL_WPeff60'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(8),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_EC_WPeff60'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(10),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_EC_WPeff60'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(13),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_EC_WPeff60'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(15),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_EC_WPeff60'),
                variable = self.cms.string('pt')
            )
        )
    )
    ### Put all new anti-e discrminats to a sequence
    self.process.patTauDiscriminationByElectronRejectionMVA62018Task = self.cms.Task(
        self.process.patTauDiscriminationByElectronRejectionMVA62018Raw,
        self.process.patTauDiscriminationByVLooseElectronRejectionMVA62018,
        self.process.patTauDiscriminationByLooseElectronRejectionMVA62018,
        self.process.patTauDiscriminationByMediumElectronRejectionMVA62018,
        self.process.patTauDiscriminationByTightElectronRejectionMVA62018,
        self.process.patTauDiscriminationByVTightElectronRejectionMVA62018
    )
    self.process.patTauDiscriminationByElectronRejectionMVA62018Seq = self.cms.Sequence(self.process.patTauDiscriminationByElectronRejectionMVA62018Task)
    self.process.rerunMvaIsolationTask.add(self.process.patTauDiscriminationByElectronRejectionMVA62018Task)
    self.process.rerunMvaIsolationSequence = self.process.patTauDiscriminationByElectronRejectionMVA62018Seq

    _againstElectronTauIDSources = self.cms.PSet(
        againstElectronMVA6Raw2018 = self.cms.InputTag(""patTauDiscriminationByElectronRejectionMVA62018Raw""),
        againstElectronMVA6category2018 = self.cms.InputTag(""patTauDiscriminationByElectronRejectionMVA62018Raw"",""category""),
        againstElectronVLooseMVA62018 = self.cms.InputTag(""patTauDiscriminationByVLooseElectronRejectionMVA62018""),
        againstElectronLooseMVA62018 = self.cms.InputTag(""patTauDiscriminationByLooseElectronRejectionMVA62018""),
        againstElectronMediumMVA62018 = self.cms.InputTag(""patTauDiscriminationByMediumElectronRejectionMVA62018""),
        againstElectronTightMVA62018 = self.cms.InputTag(""patTauDiscriminationByTightElectronRejectionMVA62018""),
        againstElectronVTightMVA62018 = self.cms.InputTag(""patTauDiscriminationByVTightElectronRejectionMVA62018"")
    )
    _tauIDSourcesWithAgainistEle = self.cms.PSet(
        tauIDSources.clone(),
        _againstElectronTauIDSources
    )
    tauIDSources =_tauIDSourcesWithAgainistEle.clone()

##
"
-------------------------------------------------------------------------
"Recom
PRs: 25486, 25488"
-------------------------------------------------------------------------
=========================================================================
"if ( !mvaOutputNormalizationName_.empty() ) {
"
-------------------------------------------------------------------------
if (!mvaOutputNormalizationName_.empty()) {
-------------------------------------------------------------------------
"from Configuration.AlCa.GlobalTag import GlobalTag
process.GlobalTag = GlobalTag(process.GlobalTag, 'auto:phase1_2017_realistic', '')
"
-------------------------------------------------------------------------
"Recom
PRs: 25486, 25488"
-------------------------------------------------------------------------
=========================================================================
"872437052,872420649,872421950,872437185,
872422564,872421566,872421695,872421955,
872421567,872437184,872421951,872421694,
872437056,872437057,872437313])
"
-------------------------------------------------------------------------
"+ Expr(value=Tuple(elts=[Constant(value=872437052), Constant(value=872420649), Constant(value=872421950), Constant(value=872437185), Constant(value=872422564), Constant(value=872421566), Constant(value=872421695), Constant(value=872421955), Constant(value=872421567), Constant(value=872437184), Constant(value=872421951), Constant(value=872421694), Constant(value=872437056), Constant(value=872437057), Constant(value=872437313)], ctx=Load()))"
-------------------------------------------------------------------------
"(run2_nanoAOD_94XMiniAODv1 | run2_nanoAOD_94XMiniAODv2 | run2_nanoAOD_102Xv1).toModify(ecalBadCalibFilter, EcalRecHitSource = 'reducedEgamma:reducedEERecHits')
"
-------------------------------------------------------------------------
"Recom
PRs: 25436, 25459"
-------------------------------------------------------------------------
=========================================================================
"#skip newCombinedSeeds if it is a trivial seed merger
"
-------------------------------------------------------------------------
Skip newCombinedSeeds if it is a trivial seed merger.
-------------------------------------------------------------------------
"#skip newCombinedSeeds if it is a trivial seed merger
"
-------------------------------------------------------------------------
"Recom
PRs: 25199, 25202"
-------------------------------------------------------------------------
=========================================================================
"InputLabel = cms.InputTag(""rawDataCollector""),
"
-------------------------------------------------------------------------
"InputLabel = cms.InputTag(""rawDataCollector"")"
-------------------------------------------------------------------------
"InputLabel = cms.InputTag(""rawDataCollector""),
"
-------------------------------------------------------------------------
"Recom
PRs: 25193, 25194"
-------------------------------------------------------------------------
=========================================================================
"InputLabel = cms.InputTag(""rawDataCollector""),
"
-------------------------------------------------------------------------
"InputLabel = cms.InputTag(""rawDataCollector"")"
-------------------------------------------------------------------------
"InputLabel = cms.InputTag(""rawDataCollector""),
"
-------------------------------------------------------------------------
"Recom
PRs: 25193, 25194"
-------------------------------------------------------------------------
=========================================================================
"InputLabel = cms.InputTag(""rawDataCollector""),
"
-------------------------------------------------------------------------
"```python
InputLabel = cms.InputTag(""rawDataCollector"")
```"
-------------------------------------------------------------------------
"InputLabel = cms.InputTag(""rawDataCollector""),
"
-------------------------------------------------------------------------
"Recom
PRs: 25193, 25194"
-------------------------------------------------------------------------
=========================================================================
"InputLabel = cms.InputTag(""rawDataCollector""),
"
-------------------------------------------------------------------------
"InputLabel = cms.InputTag(""rawDataCollector"")"
-------------------------------------------------------------------------
"InputLabel = cms.InputTag(""rawDataCollector""),
"
-------------------------------------------------------------------------
"Recom
PRs: 25193, 25194"
-------------------------------------------------------------------------
=========================================================================
"PbPbZMuHLTFilter = copy.deepcopy(hltHighLevel)
PbPbZMuHLTFilter.throw = cms.bool(False)
PbPbZMuHLTFilter.HLTPaths = [""HLT_HIL3Mu*""]
looseMuonsForPbPbZMuSkim = cms.EDFilter(""TrackSelector"",
"
-------------------------------------------------------------------------
"```python
PbPbZMuHLTFilter = copy.deepcopy(hltHighLevel)
PbPbZMuHLTFilter.throw = cms.bool(False)
PbPbZMuHLTFilter.HLTPaths = [""HLT_HIL3Mu*""]
looseMuonsForPbPbZMuSkim = cms.EDFilter(""TrackSelector"",
                                      src = cms.InputTag(""generalTracks""),
                                      cut = cms.string('pt > 10 && abs(eta) < 2.4 && (charge != 0)'),
                                      filter = cms.bool(True)
                                      )
```"
-------------------------------------------------------------------------
"PbPbZMuHLTFilter = copy.deepcopy(hltHighLevel)
PbPbZMuHLTFilter.throw = cms.bool(False)
PbPbZMuHLTFilter.HLTPaths = [""HLT_HIL3Mu*""]
looseMuonsForPbPbZMuSkim = cms.EDFilter(""TrackSelector"",
"
-------------------------------------------------------------------------
"Recom
PRs: 25172, 25191"
-------------------------------------------------------------------------
=========================================================================
"ConcretelooseMuonsForPbPbZMuSkim = cms.EDProducer(""ConcreteChargedCandidateProducer"",
src = cms.InputTag(""looseMuonsForPbPbZMuSkim""),
""CandIsoDepositProducer"",
tTag(""ConcretelooseMuonsForPbPbZMuSkim""),
"
-------------------------------------------------------------------------
"looseMuonsForPbPbZMuSkim = cms.EDProducer(""ConcreteChargedCandidateProducer"",
    src = cms.InputTag(""looseMuonsForPbPbZMuSkim""),
    CandIsoDepositProducer,
    tTag = cms.string(""ConcretelooseMuonsForPbPbZMuSkim"")
)"
-------------------------------------------------------------------------
"ConcretelooseMuonsForPbPbZMuSkim = cms.EDProducer(""ConcreteChargedCandidateProducer"",
src = cms.InputTag(""looseMuonsForPbPbZMuSkim""),
""CandIsoDepositProducer"",
tTag(""ConcretelooseMuonsForPbPbZMuSkim""),
"
-------------------------------------------------------------------------
"Recom
PRs: 25172, 25191"
-------------------------------------------------------------------------
=========================================================================
"allPatTracksForPbPbZMuSkim = patGenericParticles.clone(
src = cms.InputTag(""ConcretelooseMuonsForPbPbZMuSkim""),
    src = cms.InputTag(""tkIsoDepositTkForPbPbZMuSkim""),
    tracker = cms.InputTag(""tkIsoDepositTkForPbPbZMuSkim""),
"
-------------------------------------------------------------------------
"```python
allPatTracksForPbPbZMuSkim = patGenericParticles.clone(
    src = cms.InputTag(""ConcretelooseMuonsForPbPbZMuSkim""),
    tracker = cms.InputTag(""tkIsoDepositTkForPbPbZMuSkim""),
)
```"
-------------------------------------------------------------------------
"allPatTracksForPbPbZMuSkim = patGenericParticles.clone(
src = cms.InputTag(""ConcretelooseMuonsForPbPbZMuSkim""),
    src = cms.InputTag(""tkIsoDepositTkForPbPbZMuSkim""),
    tracker = cms.InputTag(""tkIsoDepositTkForPbPbZMuSkim""),
"
-------------------------------------------------------------------------
"Recom
PRs: 25172, 25191"
-------------------------------------------------------------------------
=========================================================================
"looseIsoMuonsForPbPbZMuSkim = cms.EDFilter(""PATGenericParticleSelector"",  
src = cms.InputTag(""allPatTracksForPbPbZMuSkim""), 
"
-------------------------------------------------------------------------
"looseIsoMuonsForPbPbZMuSkim = cms.EDFilter(""PATGenericParticleSelector"",
    src = cms.InputTag(""allPatTracksForZMuSkim""),
    cut = cms.string(""(userIsolation('pat::TrackIso')/pt)<0.4""),
    filter = cms.bool(True)
)"
-------------------------------------------------------------------------
"looseIsoMuonsForPbPbZMuSkim = cms.EDFilter(""PATGenericParticleSelector"",  
src = cms.InputTag(""allPatTracksForPbPbZMuSkim""), 
"
-------------------------------------------------------------------------
"Recom
PRs: 25172, 25191"
-------------------------------------------------------------------------
=========================================================================
"tightMuonsForPbPbZMuSkim = cms.EDFilter(""MuonSelector"",
"
-------------------------------------------------------------------------
"tightMuonsForPbPbZMuSkim = cms.EDFilter(""MuonSelector"",
    src = cms.InputTag(""muons""),
    cut = cms.string(""isGlobalMuon && pt > 25 && abs(eta) < 2.4 && isPFMuon && globalTrack.normalizedChi2 < 10 && globalTrack.hitPattern.numberOfValidMuonHits > 0 && numberOfMatchedStations > 1 && innerTrack.hitPattern.numberOfValidPixelHits > 0 && innerTrack.hitPattern.trackerLayersWithMeasurement > 5 && isolationR03.sumPt / pt < 0.1""),
    filter = cms.bool(True)
)"
-------------------------------------------------------------------------
"tightMuonsForPbPbZMuSkim = cms.EDFilter(""MuonSelector"",
"
-------------------------------------------------------------------------
"Recom
PRs: 25172, 25191"
-------------------------------------------------------------------------
=========================================================================
"dimuonsForPbPbZMuSkim = cms.EDProducer(""CandViewShallowCloneCombiner"",
decay = cms.string(""tightMuonsForPbPbZMuSkim looseIsoMuonsForPbPbZMuSkim"")
im = cms.EDFilter(""CandViewCountFilter"",
    src = cms.InputTag(""dimuonsForPbPbZMuSkim""),
m = cms.Sequence(
   PbPbZMuHLTFilter *
   looseMuonsForPbPbZMuSkim *
   ConcretelooseMuonsForPbPbZMuSkim *
   tkIsoDepositTkForPbPbZMuSkim *
   allPatTracksForPbPbZMuSkim *
   looseIsoMuonsForPbPbZMuSkim * 
   tightMuonsForPbPbZMuSkim *
   dimuonsForPbPbZMuSkim *
   dimuonsFilterForPbPbZMuSkim 
"
-------------------------------------------------------------------------
"dimuonsForPbPbZMuSkim = cms.EDProducer(""CandViewShallowCloneCombiner"",
    decay = cms.string(""tightMuonsForPbPbZMuSkim looseIsoMuonsForPbPbZMuSkim""),
)

im = cms.Sequence(
    PbPbZMuHLTFilter *
    looseMuonsForPbPbZMuSkim *
    ConcretelooseMuonsForPbPbZMuSkim *
    tkIsoDepositTkForPbPbZMuSkim *
    allPatTracksForPbPbZMuSkim *
    looseIsoMuonsForPbPbZMuSkim * 
    tightMuonsForPbPbZMuSkim *
    dimuonsForPbPbZMuSkim *
    dimuonsFilterForPbPbZMuSkim
)"
-------------------------------------------------------------------------
"dimuonsForPbPbZMuSkim = cms.EDProducer(""CandViewShallowCloneCombiner"",
decay = cms.string(""tightMuonsForPbPbZMuSkim looseIsoMuonsForPbPbZMuSkim"")
im = cms.EDFilter(""CandViewCountFilter"",
    src = cms.InputTag(""dimuonsForPbPbZMuSkim""),
m = cms.Sequence(
   PbPbZMuHLTFilter *
   looseMuonsForPbPbZMuSkim *
   ConcretelooseMuonsForPbPbZMuSkim *
   tkIsoDepositTkForPbPbZMuSkim *
   allPatTracksForPbPbZMuSkim *
   looseIsoMuonsForPbPbZMuSkim * 
   tightMuonsForPbPbZMuSkim *
   dimuonsForPbPbZMuSkim *
   dimuonsFilterForPbPbZMuSkim 
"
-------------------------------------------------------------------------
"Recom
PRs: 25172, 25191"
-------------------------------------------------------------------------
=========================================================================
"ZMuSkimPathPbPb = cms.Path( diMuonSelSeqForPbPbZMuSkim )
paths = (ZMuSkimPathPbPb),
"
-------------------------------------------------------------------------
"ZMuSkimPathPbPb = cms.Path(diMuonSelSeqForPbPbZMuSkim)
paths = (ZMuSkimPathPbPb,)"
-------------------------------------------------------------------------
"ZMuSkimPathPbPb = cms.Path( diMuonSelSeqForPbPbZMuSkim )
paths = (ZMuSkimPathPbPb),
"
-------------------------------------------------------------------------
"Recom
PRs: 25172, 25191"
-------------------------------------------------------------------------
=========================================================================
"MaxNumberOfPixelClusters = 150000,
MaxNumberOfCosmicClusters = 500000
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
pp_on_AA_2018.toModify(trackerClusterCheck,
                doClusterCheck=True, 
                cut = ""strip < 1000000 && pixel < 150000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + strip/2.)"",
                MaxNumberOfPixelClusters = 150000,
                MaxNumberOfCosmicClusters = 500000
                )"
-------------------------------------------------------------------------
"MaxNumberOfPixelClusters = 150000,
MaxNumberOfCosmicClusters = 500000
"
-------------------------------------------------------------------------
"Recom
PRs: 25189, 25190"
-------------------------------------------------------------------------
=========================================================================
"'keep FEDRawDataCollection_virginRawDataRepacker_*_*',
'keep FEDRawDataCollection_rawDataReducedFormat_*_*'),
"
-------------------------------------------------------------------------
"REPACKRAWEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*',
        'keep FEDRawDataCollection_rawDataReducedFormat_*_*',
    ),
    splitLevel = cms.untracked.int32(0),
)

REPACKRAWSIMEventContent = cms.PSet("
-------------------------------------------------------------------------
"'keep FEDRawDataCollection_virginRawDataRepacker_*_*',
'keep FEDRawDataCollection_rawDataReducedFormat_*_*'),
"
-------------------------------------------------------------------------
"Recom
PRs: 25178, 25181"
-------------------------------------------------------------------------
=========================================================================
"

"
-------------------------------------------------------------------------
"```python
REPACKRAWSIMEventContent.outputCommands.extend(['drop FEDRawDataCollection_sourc
 REPACKRAWEventContent.outputCommands.extend(['drop FEDRawDataCollection_source_*_*',
                                                 'drop FEDRawDataCollection_rawDataCollector_*_*'])
```"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
pp_on_AA_2018.toModify(_entry, outputCommands = _entry.outputCommands  ['keep FEDRawDataCollection_rawDataRepacker_*_*'])
"
-------------------------------------------------------------------------
"Recom
PRs: 25178, 25181"
-------------------------------------------------------------------------
=========================================================================
"DQMNone = cms.Sequence()

"
-------------------------------------------------------------------------
DQMNone = cms.Sequence()
-------------------------------------------------------------------------
"DQMNone = cms.Sequence()

"
-------------------------------------------------------------------------
"Recom
PRs: 25098, 25099"
-------------------------------------------------------------------------
=========================================================================
"'dqmHarvesting'],
one',
DQMOffline',
one'],
"
-------------------------------------------------------------------------
"autoDQM = { 'common' : ['DQMOfflineCommon+@L1TMon',
                                    'dqmHarvestingFakeHLT'],
             'liteDQMHI': ['liteDQMOfflineHeavyIons',
                           'PostDQMOffline',
             }"
-------------------------------------------------------------------------
"'dqmHarvesting'],
one',
DQMOffline',
one'],
"
-------------------------------------------------------------------------
"Recom
PRs: 25098, 25099"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
for e in [pA_2016, ppRef_2017, pp_on_AA_2018]:
for e in [pA_2016, ppRef_2017, pp_on_AA_2018]:
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_pA_2016_cff import pA_2016
from Configuration.Eras.Modifier_ppRef_2017_cff import ppRef_2017
from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
for e in [pA_2016, ppRef_2017, pp_on_AA_2018]:"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
for e in [pA_2016, ppRef_2017, pp_on_AA_2018]:
for e in [pA_2016, ppRef_2017, pp_on_AA_2018]:
"
-------------------------------------------------------------------------
"Recom
PRs: 25059, 25076"
-------------------------------------------------------------------------
=========================================================================
"""HLT_HIL1DoubleMuOpen_v1"", #for HI
""HLT_HIL1DoubleMuOpen_OS_Centrality_40_100_v1"", #for HI
""HLT_HIL1DoubleMuOpen_Centrality_50_100_v1"", #for HI
""HLT_HIL1DoubleMu10_v1"", #for HI
""HLT_HIL2_L1DoubleMu10_v1"", #for HI
""HLT_HIL3_L1DoubleMu10_v1"", #for HI
""HLT_HIL2DoubleMuOpen_v1"", #for HI
""HLT_HIL3DoubleMuOpen_v1"", #for HI
""HLT_HIL3DoubleMuOpen_M60120_v1"", #for HI
""HLT_HIL3DoubleMuOpen_JpsiPsi_v1"", #for HI
""HLT_HIL3DoubleMuOpen_Upsi_v1"", #for HI
""HLT_HIL3Mu0_L2Mu0_v1"", #for HI
""HLT_HIL3Mu0NHitQ10_L2Mu0_MAXdR3p5_M1to5_v1"", #for HI
""HLT_HIL3Mu2p5NHitQ10_L2Mu2_M7toinf_v1"", #for HI
""HLT_HIL1MuOpen_Centrality_70_100_v1"", #for HI
""HLT_HIL1MuOpen_Centrality_80_100_v1"", #for HI
""HLT_HIL2Mu3_NHitQ15_v1"", #for HI
""HLT_HIL2Mu5_NHitQ15_v1"", #for HI
""HLT_HIL2Mu7_NHitQ15_v1"", #for HI
""HLT_HIL3Mu3_L1TripleMuOpen_v1"", #for HI
""HLT_HIL3Mu12_v1"", #for HI
""HLT_HIL3Mu15_v1"", #for HI
""HLT_HIL3Mu20_v1"", #for HI
""HLT_HIL3Mu3_NHitQ10_v1"", #for HI
""HLT_HIL3Mu5_NHitQ10_v1"", #for HI
""HLT_HIL3Mu7_NHitQ10_v1"" #for HI
"
-------------------------------------------------------------------------
"hltMuonOfflineAnalyzer = DQMEDAnalyzer('HLTMuonOfflineAnalyzer',
       ""HLT_OldMu100_v"",
       ""HLT_TkMu100_v"",
       ""HLT_DoubleL2Mu50_v"",
       ""HLT_Mu15_eta2p1_TriCentral_40_20_20_BTagIP3D1stTrack_v3"",
       ""HLT_HIL1DoubleMuOpen_v1"",
       ""HLT_HIL1DoubleMuOpen_OS_Centrality_40_100_v1"",
       ""HLT_HIL1DoubleMuOpen_Centrality_50_100_v1"",
       ""HLT_HIL1DoubleMu10_v1"",
       ""HLT_HIL2_L1DoubleMu10_v1"",
       ""HLT_HIL3_L1DoubleMu10_v1"",
       ""HLT_HIL2DoubleMuOpen_v1"",
       ""HLT_HIL3DoubleMuOpen_v1"",
       ""HLT_HIL3DoubleMuOpen_M60120_v1"",
       ""HLT_HIL3DoubleMuOpen_JpsiPsi_v1"",
       ""HLT_HIL3DoubleMuOpen_Upsi_v1"",
       ""HLT_HIL3Mu0_L2Mu0_v1"",
       ""HLT_HIL3Mu0NHitQ10_L2Mu0_MAXdR3p5_M1to5_v1"",
       ""HLT_HIL3Mu2p5NHitQ10_L2Mu2_M7toinf_v1"",
       ""HLT_HIL1MuOpen_Centrality_70_100_v1"",
       ""HLT_HIL1MuOpen_Centrality_80_100_v1"",
       ""HLT_HIL2Mu3_NHitQ15_v1"",
       ""HLT_HIL2Mu5_NHitQ15_v1"",
       ""HLT_HIL2Mu7_NHitQ15_v1"",
       ""HLT_HIL3Mu3_L1TripleMuOpen_v1"",
       ""HLT_HIL3Mu12_v1"",
       ""HLT_HIL3Mu15_v1"",
       ""HLT_HIL3Mu20_v1"",
       ""HLT_HIL3Mu3_NHitQ10_v1"",
       ""HLT_HIL3Mu5_NHitQ10_v1"",
       ""HLT_HIL3Mu7_NHitQ10_v1""
     ),"
-------------------------------------------------------------------------
"""HLT_HIL1DoubleMuOpen_v1"", #for HI
""HLT_HIL1DoubleMuOpen_OS_Centrality_40_100_v1"", #for HI
""HLT_HIL1DoubleMuOpen_Centrality_50_100_v1"", #for HI
""HLT_HIL1DoubleMu10_v1"", #for HI
""HLT_HIL2_L1DoubleMu10_v1"", #for HI
""HLT_HIL3_L1DoubleMu10_v1"", #for HI
""HLT_HIL2DoubleMuOpen_v1"", #for HI
""HLT_HIL3DoubleMuOpen_v1"", #for HI
""HLT_HIL3DoubleMuOpen_M60120_v1"", #for HI
""HLT_HIL3DoubleMuOpen_JpsiPsi_v1"", #for HI
""HLT_HIL3DoubleMuOpen_Upsi_v1"", #for HI
""HLT_HIL3Mu0_L2Mu0_v1"", #for HI
""HLT_HIL3Mu0NHitQ10_L2Mu0_MAXdR3p5_M1to5_v1"", #for HI
""HLT_HIL3Mu2p5NHitQ10_L2Mu2_M7toinf_v1"", #for HI
""HLT_HIL1MuOpen_Centrality_70_100_v1"", #for HI
""HLT_HIL1MuOpen_Centrality_80_100_v1"", #for HI
""HLT_HIL2Mu3_NHitQ15_v1"", #for HI
""HLT_HIL2Mu5_NHitQ15_v1"", #for HI
""HLT_HIL2Mu7_NHitQ15_v1"", #for HI
""HLT_HIL3Mu3_L1TripleMuOpen_v1"", #for HI
""HLT_HIL3Mu12_v1"", #for HI
""HLT_HIL3Mu15_v1"", #for HI
""HLT_HIL3Mu20_v1"", #for HI
""HLT_HIL3Mu3_NHitQ10_v1"", #for HI
""HLT_HIL3Mu5_NHitQ10_v1"", #for HI
""HLT_HIL3Mu7_NHitQ10_v1"" #for HI
"
-------------------------------------------------------------------------
"Recom
PRs: 25059, 25076"
-------------------------------------------------------------------------
=========================================================================
"from primaryVertexValidation import PrimaryVertexValidation
"
-------------------------------------------------------------------------
from Alignment.OfflineValidation.TkAlAllInOneTool.primaryVertexValidation import PrimaryVertexValidation
-------------------------------------------------------------------------
"from primaryVertexValidation import PrimaryVertexValidation
"
-------------------------------------------------------------------------
"Recom
PRs: 24761, 25074"
-------------------------------------------------------------------------
=========================================================================
"class PreexistingPrimaryVertexValidation(PreexistingValidation, PrimaryVertexValidation):
removemandatories = {""isda"",""ismc"",""runboundary"",""vertexcollection"",""lumilist"",""ptCut"",""etaCut"",""runControl"",""numberOfBins""}
def getRepMap(self):
    result = super(PreexistingPrimaryVertexValidation, self).getRepMap()
    result.update({
                   ""filetoplot"": self.general[""file""],
                 })
    return result

def appendToMerge(self, *args, **kwargs):
    raise AllInOneError(""Shouldn't be here..."")

"
-------------------------------------------------------------------------
"class PreexistingPrimaryVertexValidation(PreexistingValidation, PrimaryVertexValidation):
    removemandatories = {""isda"",""ismc"",""runboundary"",""vertexcollection"",""lumilist"",""ptCut"",""etaCut"",""runControl"",""numberOfBins""}

    def getRepMap(self):
        result = super(PreexistingPrimaryVertexValidation, self).getRepMap()
        result.update({
            ""filetoplot"": self.general[""file""],
        })
        return result

    def appendToMerge(self, *args, **kwargs):
        raise AllInOneError(""Shouldn't be here..."")"
-------------------------------------------------------------------------
"class PreexistingPrimaryVertexValidation(PreexistingValidation, PrimaryVertexValidation):
removemandatories = {""isda"",""ismc"",""runboundary"",""vertexcollection"",""lumilist"",""ptCut"",""etaCut"",""runControl"",""numberOfBins""}
def getRepMap(self):
    result = super(PreexistingPrimaryVertexValidation, self).getRepMap()
    result.update({
                   ""filetoplot"": self.general[""file""],
                 })
    return result

def appendToMerge(self, *args, **kwargs):
    raise AllInOneError(""Shouldn't be here..."")

"
-------------------------------------------------------------------------
"Recom
PRs: 24761, 25074"
-------------------------------------------------------------------------
=========================================================================
"""filetoplot"": ""root://eoscms//eos/cms.oO[finalResultFile]Oo."",
"
-------------------------------------------------------------------------
"         ""filetoplot"": "".oO[datadir]Oo./%s/%s/%s/finalResultFile"" % (self.outputBaseName, self.name, alignment.name),"
-------------------------------------------------------------------------
"""filetoplot"": ""root://eoscms//eos/cms.oO[finalResultFile]Oo."",
"
-------------------------------------------------------------------------
"Recom
PRs: 24761, 25074"
-------------------------------------------------------------------------
=========================================================================
"return (' loadFileList(""%(filetoplot)s"",'
        '""PVValidation"", ""%(title)s"", %(color)s, %(style)s);\n')%repMap
"
-------------------------------------------------------------------------
"return ' loadFileList(""%(filetoplot)s"", ""PVValidation"", ""%(title)s"", %(color)s, %(style)s);\n' % repMap"
-------------------------------------------------------------------------
"return (' loadFileList(""%(filetoplot)s"",'
        '""PVValidation"", ""%(title)s"", %(color)s, %(style)s);\n')%repMap
"
-------------------------------------------------------------------------
"Recom
PRs: 24761, 25074"
-------------------------------------------------------------------------
=========================================================================
"elif valType == ""preexistingprimaryvertex"":
    validation = PreexistingPrimaryVertexValidation(name, self.__config)
"
-------------------------------------------------------------------------
"elif valType == ""preexistingprimaryvertex"":
    validation = PreexistingPrimaryVertexValidation(name, self.__config)"
-------------------------------------------------------------------------
"elif valType == ""preexistingprimaryvertex"":
    validation = PreexistingPrimaryVertexValidation(name, self.__config)
"
-------------------------------------------------------------------------
"Recom
PRs: 24761, 25074"
-------------------------------------------------------------------------
=========================================================================
"'run2_data_promptlike'    : '103X_dataRun2_PromptLike_v6',
'run2_data_promptlike_hi' : '103X_dataRun2_PromptLike_HI_v1',
'run2_hlt_relval'      :   '103X_dataRun2_HLT_relval_v4',
'run2_hlt_relval_hi'   :   '103X_dataRun2_HLT_relval_HI_v1',
"
-------------------------------------------------------------------------
"autoCond = {
     # GlobalTag for Run2 data 2018B relvals only: HEM-15-16 fail
     'run2_data_promptlike'    : '103X_dataRun2_PromptLike_v6',
     'run2_data_promptlike_hi' : '103X_dataRun2_PromptLike_HI_v1',
     'run2_hlt_relval'      :   '103X_dataRun2_HLT_relval_v4',
     'run2_hlt_relval_hi'   :   '103X_dataRun2_HLT_relval_HI_v1',
     # GlobalTag for Run2 data 2016H relvals only: Prompt Conditions + fixed L1 menu (to be removed)
     # GlobalTag for Run1 HLT: it points to the online GT
     'run1_hlt'          :   '101X_dataRun2_HLT_frozen_v6',
     # GlobalTag for Run2 HLT: it points to the online GT
     'run2_hlt'          :   '101X_dataRun2_HLT_frozen_v6',
     # GlobalTag for Run2 HLT RelVals: customizations to run with fixed L1 Menu
     # GlobalTag for Run2 HLT for HI: it points to the online GT
     'run2_hlt_hi'       :   '101X_dataRun2_HLTHI_frozen_v7',
     # GlobalTag for MC production with perfectly aligned and calibrated detector for Phase1 2017 (and 0,0,~0-centred beamspot)"
-------------------------------------------------------------------------
"'run2_data_promptlike'    : '103X_dataRun2_PromptLike_v6',
'run2_data_promptlike_hi' : '103X_dataRun2_PromptLike_HI_v1',
'run2_hlt_relval'      :   '103X_dataRun2_HLT_relval_v4',
'run2_hlt_relval_hi'   :   '103X_dataRun2_HLT_relval_HI_v1',
"
-------------------------------------------------------------------------
"Recom
PRs: 25068, 25069"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2018_realistic_hi' : '103X_upgrade2018_realistic_HI_v9',
"
-------------------------------------------------------------------------
"autoCond = {
     # GlobalTag for MC production with realistic conditions for full Phase1 2018 detector
     'phase1_2018_realistic'    : '103X_upgrade2018_realistic_v7',
     # GlobalTag for MC production with realistic conditions for full Phase1 2018 detector for Heavy Ion
     # GlobalTag for MC production with realistic conditions for full Phase1 2018 detector: HEM-15-16 fail
     'phase1_2018_realistic_HEfail'    : '103X_upgrade2018_realistic_HEfail_v3',
     # GlobalTag for MC production with realistic conditions for full Phase1 2018 detector with Heavy Ions
     'phase1_2018_realistic_hi'    : '103X_upgrade2018_realistic_HI_v9',
     # GlobalTag for MC production (cosmics) with realistic conditions for full Phase1 2018 detector,  Strip tracker in DECO mode

}"
-------------------------------------------------------------------------
"'phase1_2018_realistic_hi' : '103X_upgrade2018_realistic_HI_v9',
"
-------------------------------------------------------------------------
"Recom
PRs: 25068, 25069"
-------------------------------------------------------------------------
=========================================================================
"
## customizations for the pp_on_AA_2018 eras
from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
OutALCARECOHcalCalMinBiasHI = copy.deepcopy(OutALCARECOHcalCalMinBias_noDrop)
OutALCARECOHcalCalMinBiasHI.outputCommands.insert(0, ""drop *"")
OutALCARECOHcalCalMinBiasHI.outputCommands.insert(6, ""keep HFRecHitsSorted_hfreco_*_*"")

#Specify to use HI output for the pp_on_AA_2018 eras
pp_on_AA_2018.toReplaceWith(OutALCARECOHcalCalMinBias,OutALCARECOHcalCalMinBiasHI)
"
-------------------------------------------------------------------------
"```python
from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
import copy

OutALCARECOHcalCalMinBiasHI = copy.deepcopy(OutALCARECOHcalCalMinBias_noDrop)
OutALCARECOHcalCalMinBiasHI.outputCommands.insert(0, ""drop *"")
OutALCARECOHcalCalMinBiasHI.outputCommands.insert(6, ""keep HFRecHitsSorted_hfreco_*_*"")

pp_on_AA_2018.toReplaceWith(OutALCARECOHcalCalMinBias, OutALCARECOHcalCalMinBiasHI)
```"
-------------------------------------------------------------------------
"
## customizations for the pp_on_AA_2018 eras
from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
OutALCARECOHcalCalMinBiasHI = copy.deepcopy(OutALCARECOHcalCalMinBias_noDrop)
OutALCARECOHcalCalMinBiasHI.outputCommands.insert(0, ""drop *"")
OutALCARECOHcalCalMinBiasHI.outputCommands.insert(6, ""keep HFRecHitsSorted_hfreco_*_*"")

#Specify to use HI output for the pp_on_AA_2018 eras
pp_on_AA_2018.toReplaceWith(OutALCARECOHcalCalMinBias,OutALCARECOHcalCalMinBiasHI)
"
-------------------------------------------------------------------------
"Recom
PRs: 25007, 25009"
-------------------------------------------------------------------------
=========================================================================
"## customizations for the pp_on_AA_2018 eras
from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
pp_on_AA_2018.toModify(hcalminbiasHLT,
eventSetupPathsKey='HcalCalMinBiasHI'



"
-------------------------------------------------------------------------
"```python
## customizations for the pp_on_AA_2018 eras
from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
pp_on_AA_2018.toModify(hcalminbiasHLT,
eventSetupPathsKey='HcalCalMinBiasHI'
```
"
-------------------------------------------------------------------------
"## customizations for the pp_on_AA_2018 eras
from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
pp_on_AA_2018.toModify(hcalminbiasHLT,
eventSetupPathsKey='HcalCalMinBiasHI'



"
-------------------------------------------------------------------------
"Recom
PRs: 25007, 25009"
-------------------------------------------------------------------------
=========================================================================
"#Specify to use HI output for the pp_on_AA_2018 eras
seqALCARECOHcalCalMinBiasHI = cms.Sequence(hbherecoNoise*hfrecoNoise*hfrecoMBNZS*horecoNoise)
pp_on_AA_2018.toReplaceWith(seqALCARECOHcalCalMinBias,
seqALCARECOHcalCalMinBiasHI


"
-------------------------------------------------------------------------
"seqALCARECOHcalCalMinBiasHI = cms.Sequence(hbherecoNoise*hfrecoNoise*hfrecoMBNZS*horecoNoise)
seqALCARECOHcalCalMinBias.toReplaceWith(seqALCARECOHcalCalMinBiasHI)"
-------------------------------------------------------------------------
"#Specify to use HI output for the pp_on_AA_2018 eras
seqALCARECOHcalCalMinBiasHI = cms.Sequence(hbherecoNoise*hfrecoNoise*hfrecoMBNZS*horecoNoise)
pp_on_AA_2018.toReplaceWith(seqALCARECOHcalCalMinBias,
seqALCARECOHcalCalMinBiasHI


"
-------------------------------------------------------------------------
"Recom
PRs: 25007, 25009"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018

pp_on_AA_2018.toModify(ALCARECOHcalCalPhisymDQM,
hbheInputMB = ""hbhereco"",
hoInputMB = ""horeco""


"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018

pp_on_AA_2018.toModify(ALCARECOHcalCalPhisymDQM,
hbheInputMB = ""hbhereco"",
hoInputMB = ""horeco"")"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018

pp_on_AA_2018.toModify(ALCARECOHcalCalPhisymDQM,
hbheInputMB = ""hbhereco"",
hoInputMB = ""horeco""


"
-------------------------------------------------------------------------
"Recom
PRs: 25007, 25009"
-------------------------------------------------------------------------
=========================================================================
"OutALCARECODtCalibHI.outputCommands.append(""keep *_offlinePrimaryVertices__*"")
OutALCARECODtCalibHI.outputCommands.append(""keep *_offlinePrimaryVerticesWithBS_*_*"")
OutALCARECODtCalibHI.outputCommands.append(""keep *_offlinePrimaryVerticesFromCosmicTracks_*_*"")
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
 
OutALCARECODtCalibHI = copy.deepcopy(OutALCARECODtCalib_noDrop)
OutALCARECODtCalibHI.outputCommands.insert(0, ""drop *"")
OutALCARECODtCalibHI.outputCommands.append(""keep *_offlinePrimaryVertices__*"")
OutALCARECODtCalibHI.outputCommands.append(""keep *_offlinePrimaryVerticesWithBS_*_*"")
OutALCARECODtCalibHI.outputCommands.append(""keep *_offlinePrimaryVerticesFromCosmicTracks_*_*"")

#Specify to use HI output for the pp_on_AA_2018 eras
pp_on_AA_2018.toReplaceWith(OutALCARECODtCalib,OutALCARECODtCalibHI)"
-------------------------------------------------------------------------
"OutALCARECODtCalibHI.outputCommands.append(""keep *_offlinePrimaryVertices__*"")
OutALCARECODtCalibHI.outputCommands.append(""keep *_offlinePrimaryVerticesWithBS_*_*"")
OutALCARECODtCalibHI.outputCommands.append(""keep *_offlinePrimaryVerticesFromCosmicTracks_*_*"")
"
-------------------------------------------------------------------------
"Recom
PRs: 25004, 25008"
-------------------------------------------------------------------------
=========================================================================
"from DQM.TrackingMonitorSource.PPonAATrackingOnly_custom import customise_PPonAATrackingOnlyDQM as _customise_PPonAATrackingOnlyDQM
_customise_PPonAATrackingOnlyDQM(process)
"
-------------------------------------------------------------------------
"from FWCore.ParameterSet.Config import CustomisePPData
CustomisePPData(process)"
-------------------------------------------------------------------------
"from DQM.TrackingMonitorSource.PPonAATrackingOnly_custom import customise_PPonAATrackingOnlyDQM as _customise_PPonAATrackingOnlyDQM
_customise_PPonAATrackingOnlyDQM(process)
"
-------------------------------------------------------------------------
"Recom
PRs: 24996, 24997"
-------------------------------------------------------------------------
=========================================================================
"
## customizations for the pp_on_AA eras
from Configuration.Eras.Modifier_pp_on_XeXe_2017_cff import pp_on_XeXe_2017
from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
(pp_on_XeXe_2017 | pp_on_AA_2018).toModify(ALCARECOSiStripCalMinBiasAAGHLT,
eventSetupPathsKey='SiStripCalMinBiasAAGHI'
)
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_pp_on_XeXe_2017_cff import pp_on_XeXe_2017
from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018

(pp_on_XeXe_2017 | pp_on_AA_2018).toModify(
    ALCARECOSiStripCalMinBiasAAGHLT,
    eventSetupPathsKey='SiStripCalMinBiasAAGHI'
)"
-------------------------------------------------------------------------
"
## customizations for the pp_on_AA eras
from Configuration.Eras.Modifier_pp_on_XeXe_2017_cff import pp_on_XeXe_2017
from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
(pp_on_XeXe_2017 | pp_on_AA_2018).toModify(ALCARECOSiStripCalMinBiasAAGHLT,
eventSetupPathsKey='SiStripCalMinBiasAAGHI'
)
"
-------------------------------------------------------------------------
"Recom
PRs: 24975, 24976"
-------------------------------------------------------------------------
=========================================================================
"
"
-------------------------------------------------------------------------
"```
import TkAlExceptions
from configTemplates import PrimaryVertexValidationTemplate
from genericValidation import GenericValidationData_CTSR
import os
from globalDictionaries import helperFunctions

class PrimaryVertexValidation(GenericValidationData_CTSR, ParallelValidation, Va):
    
    if self.general[""pvvalidationreference""].startswith(""/store""):
        self.general[""pvvalidationreference""] = ""root://eoscms//eos/cms"" + self.general[""pvvalidationreference""]
    
    @property
    def ValidationTemplate(self):
        return PrimaryVertexValidationTemplate
```"
-------------------------------------------------------------------------
"
"
-------------------------------------------------------------------------
"Recom
PRs: 24906, 24970"
-------------------------------------------------------------------------
=========================================================================
"mandatories = [
           ""eosdir"",
       ]
       self.checkInput(""general"", knownSimpleOptions = defaults.keys()  mandatories)
       general = self.getResultingSection( ""general"", defaultDict = defaults, demandPars = mandatories )
"
-------------------------------------------------------------------------
"mandatories = [
           ""eosdir"",
       ]
       self.checkInput(""general"", knownSimpleOptions = defaults.keys(), mandatories=mandatories)
       general = self.getResultingSection(""general"", defaultDict=defaults, demandPars=mandatories)"
-------------------------------------------------------------------------
"mandatories = [
           ""eosdir"",
       ]
       self.checkInput(""general"", knownSimpleOptions = defaults.keys()  mandatories)
       general = self.getResultingSection( ""general"", defaultDict = defaults, demandPars = mandatories )
"
-------------------------------------------------------------------------
"Recom
PRs: 24952, 24950"
-------------------------------------------------------------------------
=========================================================================
"GlobalTag.globaltag = ""103X_dataRun2_Express_v1""
"
-------------------------------------------------------------------------
"GlobalTag.globaltag = ""103X_dataRun2_HLT_v1"""
-------------------------------------------------------------------------
"GlobalTag.globaltag = ""103X_dataRun2_Express_v1""
"
-------------------------------------------------------------------------
"Recom
PRs: 24944, 24945"
-------------------------------------------------------------------------
=========================================================================
"process.valBmtfAlgoSel.feds = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"process.valBmtfAlgoSel.BMTFFEDs = cms.InputTag(""rawDataRepacker"")"
-------------------------------------------------------------------------
"process.valBmtfAlgoSel.feds = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"Recom
PRs: 24853, 24881"
-------------------------------------------------------------------------
=========================================================================
"if isHeavyIon:
process.tasksPath = process.zdcQIE10Task

"
-------------------------------------------------------------------------
"if isHeavyIon:
    process.zdcTask = process.zdcQIE10Task"
-------------------------------------------------------------------------
"if isHeavyIon:
process.tasksPath = process.zdcQIE10Task

"
-------------------------------------------------------------------------
"Recom
PRs: 24866, 24871"
-------------------------------------------------------------------------
=========================================================================
"SherpackLocation = cms.string('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/sherpa/2.2.2'),
SherpackChecksum = cms.string('5edf2e9dde5d3be90a6f3a7c43156ea2'),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='SherpackLocation', ctx=Store()), Name(id='SherpackChecksum', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/sherpa/2.2.2')], keywords=[]), Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='5edf2e9dde5d3be90a6f3a7c43156ea2')], keywords=[])], ctx=Load())"
-------------------------------------------------------------------------
"SherpackLocation = cms.string('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/sherpa/2.2.2'),
SherpackChecksum = cms.string('5edf2e9dde5d3be90a6f3a7c43156ea2'),
"
-------------------------------------------------------------------------
"Recom
PRs: 20515, 24809"
-------------------------------------------------------------------------
=========================================================================
"SherpackLocation = cms.string('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/sherpa/2.2.2'),
SherpackChecksum = cms.string('0070c9688d9ee496b63cf04f79d2cf5b'),
"
-------------------------------------------------------------------------
"from FWCore.ParameterSet.Config import cms
import os

SherpackLocation = cms.string('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/sherpa/2.2.2')
SherpackChecksum = cms.string('0070c9688d9ee496b63cf04f79d2cf5b')"
-------------------------------------------------------------------------
"SherpackLocation = cms.string('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/sherpa/2.2.2'),
SherpackChecksum = cms.string('0070c9688d9ee496b63cf04f79d2cf5b'),
"
-------------------------------------------------------------------------
"Recom
PRs: 20515, 24809"
-------------------------------------------------------------------------
=========================================================================
"theLayerDets);
"
-------------------------------------------------------------------------
- Replace all instances of `theLayerDets)` with `theLayerPairs)` in the code snippet.
-------------------------------------------------------------------------
"""PixelQuadrupletEDProducer"": ""none"",
"
-------------------------------------------------------------------------
"Recom
PRs: 24624, 24798"
-------------------------------------------------------------------------
=========================================================================
"phase1Pixel.toModify(pvMonitor, EtaBin=31, EtaMin=-3.0, EtaMax=3.0)
"
-------------------------------------------------------------------------
"```python
from FWCore.ParameterSet.Config import cms
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
from Configuration.Eras.Modifier_phase2_tracker_cff import phase2_tracker
from DQMServices.Core.DQMEDAnalyzer import DQMEDAnalyzer

phase1Pixel.toModify(pvMonitor, EtaBin=31, EtaMin=-3.0, EtaMax=3.0)
phase2_tracker.toModify(pvMonitor, EtaBin=41, EtaMin=-4.0, EtaMax=4.0)
```"
-------------------------------------------------------------------------
"phase1Pixel.toModify(pvMonitor, EtaBin=31, EtaMin=-3.0, EtaMax=3.0)
"
-------------------------------------------------------------------------
"Recom
PRs: 24614, 24616"
-------------------------------------------------------------------------
=========================================================================
"process.onlineMetaDataDigis.onlineMetaDataInputLabel = cms.InputTag(""rawDataRepacker"")
process.onlineMetaDataRawToDigi.onlineMetaDataInputLabel = cms.InputTag(""rawDataRepacker"")
process.ctppsPixelDigis.inputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"process.onlineMetaDataDigis.onlineMetaDataInputLabel = cms.InputTag(""rawDataRepacker"")
process.onlineMetaDataRawToDigi.onlineMetaDataInputLabel = cms.InputTag(""rawDataRepacker"")
process.ctppsPixelDigis.inputLabel = cms.InputTag(""rawDataRepacker"")"
-------------------------------------------------------------------------
"process.onlineMetaDataDigis.onlineMetaDataInputLabel = cms.InputTag(""rawDataRepacker"")
process.onlineMetaDataRawToDigi.onlineMetaDataInputLabel = cms.InputTag(""rawDataRepacker"")
process.ctppsPixelDigis.inputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"Recom
PRs: 24529, 24530"
-------------------------------------------------------------------------
=========================================================================
"process.caloLayer1Digis.InputLabel = cms.InputTag(""rawDataRepacker"")
process.l1tStage2BmtfZeroSupp.rawData = cms.InputTag(""rawDataRepacker"")
process.l1tStage2BmtfZeroSuppFatEvts.rawData = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"```python
process.caloLayer1Digis.InputLabel = cms.InputTag(""rawDataRepacker"")
process.l1tStage2BmtfZeroSupp.rawData = cms.InputTag(""rawDataRepacker"")
process.l1tStage2BmtfZeroSuppFatEvts.rawData = cms.InputTag(""rawDataRepacker"")
```"
-------------------------------------------------------------------------
"process.caloLayer1Digis.InputLabel = cms.InputTag(""rawDataRepacker"")
process.l1tStage2BmtfZeroSupp.rawData = cms.InputTag(""rawDataRepacker"")
process.l1tStage2BmtfZeroSuppFatEvts.rawData = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"Recom
PRs: 24529, 24530"
-------------------------------------------------------------------------
=========================================================================
"process.onlineMetaDataDigis.onlineMetaDataInputLabel = cms.InputTag(""rawDataRepacker"")
process.onlineMetaDataRawToDigi.onlineMetaDataInputLabel = cms.InputTag(""rawDataRepacker"")
process.ctppsPixelDigis.inputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"Assign(targets=[Attribute(value=Attribute(value=Name(id='process', ctx=Load()), attr='onlineMetaDataDigis', ctx=Load()), attr='onlineMetaDataInputLabel', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='rawDataRepacker')], keywords=[]))
Assign(targets=[Attribute(value=Attribute(value=Name(id='process', ctx=Load()), attr='onlineMetaDataRawToDigi', ctx=Load()), attr='onlineMetaDataInputLabel', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='rawDataRepacker')], keywords=[]))
Assign(targets=[Attribute(value=Name(id='process', ctx=Load()), attr='ctppsPixelDigis', ctx=Load()), attr='inputLabel', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='rawDataRepacker')], keywords=[])"
-------------------------------------------------------------------------
"process.onlineMetaDataDigis.onlineMetaDataInputLabel = cms.InputTag(""rawDataRepacker"")
process.onlineMetaDataRawToDigi.onlineMetaDataInputLabel = cms.InputTag(""rawDataRepacker"")
process.ctppsPixelDigis.inputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"Recom
PRs: 24529, 24530"
-------------------------------------------------------------------------
=========================================================================
"process.caloLayer1Digis.InputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"process.caloLayer1Digis.InputLabel = cms.InputTag(""rawDataRepacker"")"
-------------------------------------------------------------------------
"process.caloLayer1Digis.InputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"Recom
PRs: 24529, 24530"
-------------------------------------------------------------------------
=========================================================================
"
if (process.runType.getRunType() == process.runType.hi_run):
process.muonGEMDigis.InputLabel = cms.InputTag(""rawDataRepacker"")                                                                                                                                          

"
-------------------------------------------------------------------------
"if process.runType.getRunTypeName() == 'hi_run':
    process.muonGEMDigis.InputLabel = cms.InputTag(""rawDataRepacker"")"
-------------------------------------------------------------------------
"
if (process.runType.getRunType() == process.runType.hi_run):
process.muonGEMDigis.InputLabel = cms.InputTag(""rawDataRepacker"")                                                                                                                                          

"
-------------------------------------------------------------------------
"Recom
PRs: 24525, 24526"
-------------------------------------------------------------------------
=========================================================================
"process.muonGEMDigis.InputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"process.muonGEMDigis.InputLabel = process.cms.InputTag(""rawDataRepacker"")"
-------------------------------------------------------------------------
"process.muonGEMDigis.InputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"Recom
PRs: 24499, 24500"
-------------------------------------------------------------------------
=========================================================================
"process.totemTimingRawToDigi.rawDataTag = cms.InputTag(""rawDataRepacker"")
process.RPCTwinMuxRawToDigi.inputTag = cms.InputTag(""rawDataRepacker"")
process.omtfStage2Digis.inputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"process.totemTimingRawToDigi.rawDataTag = cms.InputTag(""rawDataRepacker"")
process.RPCTwinMuxRawToDigi.inputTag = cms.InputTag(""rawDataRepacker"")
process.omtfStage2Digis.inputLabel = cms.InputTag(""rawDataRepacker"")"
-------------------------------------------------------------------------
"process.totemTimingRawToDigi.rawDataTag = cms.InputTag(""rawDataRepacker"")
process.RPCTwinMuxRawToDigi.inputTag = cms.InputTag(""rawDataRepacker"")
process.omtfStage2Digis.inputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"Recom
PRs: 24499, 24500"
-------------------------------------------------------------------------
=========================================================================
"process.muonGEMDigis.InputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"process.muonGEMDigis.InputLabel = cms.InputTag(""rawDataRepacker"")"
-------------------------------------------------------------------------
"process.muonGEMDigis.InputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"Recom
PRs: 24499, 24500"
-------------------------------------------------------------------------
=========================================================================
"process.totemTimingRawToDigi.rawDataTag = cms.InputTag(""rawDataRepacker"")
process.RPCTwinMuxRawToDigi.inputTag = cms.InputTag(""rawDataRepacker"")
process.omtfStage2Digis.inputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"```python
process.totemTimingRawToDigi.rawDataTag = cms.InputTag(""rawDataRepacker"")
process.RPCTwinMuxRawToDigi.inputTag = cms.InputTag(""rawDataRepacker"")
process.omtfStage2Digis.inputLabel = cms.InputTag(""rawDataRepacker"")
```"
-------------------------------------------------------------------------
"process.totemTimingRawToDigi.rawDataTag = cms.InputTag(""rawDataRepacker"")
process.RPCTwinMuxRawToDigi.inputTag = cms.InputTag(""rawDataRepacker"")
process.omtfStage2Digis.inputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"Recom
PRs: 24499, 24500"
-------------------------------------------------------------------------
=========================================================================
"my_id_modules = ['RecoEgamma.ElectronIdentification.Identification.cutBasedElectronID_Summer16_80X_V1_cff',
'RecoEgamma.ElectronIdentification.Identification.cutBasedElectronID_Fall17_94X_V1_cff']
"
-------------------------------------------------------------------------
"```python
from PhysicsTools.SelectorUtils.tools.vid_id_tools import setupVIDSelection
from RecoEgamma.ElectronIdentification.Identification.cutBasedElectronID_Summer16_80X_V1_cff import egmGsfElectronIDs
from RecoEgamma.ElectronIdentification.Identification.cutBasedElectronID_Fall17_94X_V1_cff import egmGsfElectronIDsForDQM

# note: be careful here to when selecting new ids that the vid tools dont do extra setup for them
# for example the HEEP cuts need an extra producer which vid tools automatically handles

for id_module_name in my_id_modules:
    idmod = __import__(id_module_name, globals(), locals(), ['idName', 'cutFlow'])
    for name in dir(idmod):
        # your code here
```"
-------------------------------------------------------------------------
"my_id_modules = ['RecoEgamma.ElectronIdentification.Identification.cutBasedElectronID_Summer16_80X_V1_cff',
'RecoEgamma.ElectronIdentification.Identification.cutBasedElectronID_Fall17_94X_V1_cff']
"
-------------------------------------------------------------------------
"Recom
PRs: 24379, 24453"
-------------------------------------------------------------------------
=========================================================================
"cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard2/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard3/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard4/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard5/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard6/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard2/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard3/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard4/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard5/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard6/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
"
-------------------------------------------------------------------------
"cms.VPSet(
    cms.PSet(
        QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
        QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard2/CaloLayer2/mismatchRatio""),
        QualityTestSummaryEnabled = cms.uint32(1)
    ),
    cms.PSet(
        QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
        QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard3/CaloLayer2/mismatchRatio""),
        QualityTestSummaryEnabled = cms.uint32(1)
    ),
    cms.PSet(
        QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
        QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard4/CaloLayer2/mismatchRatio""),
        QualityTestSummaryEnabled = cms.uint32(1)
    ),
    cms.PSet(
        QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
        QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard5/CaloLayer2/mismatchRatio""),
        QualityTestSummaryEnabled = cms.uint32(1)
    ),
    cms.PSet(
        QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
        QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard6/CaloLayer2/mismatchRatio""),
        QualityTestSummaryEnabled = cms.uint32(1)
    ),
    cms.PSet(
        QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
        QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard2/Muons/mismatchRatio""),
        QualityTestSummaryEnabled = cms.uint32(1)
    ),
    cms.PSet(
        QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
        QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard3/Muons/mismatchRatio""),
        QualityTestSummaryEnabled = cms.uint32(1)
    ),
    cms.PSet(
        QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
        QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard4/Muons/mismatchRatio""),
        QualityTestSummaryEnabled = cms.uint32(1)
    ),
    cms.PSet(
        QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
        QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard5/Muons/mismatchRatio""),
        QualityTestSummaryEnabled = cms.uint32(1)
    ),
    cms.PSet(
        QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
        QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard6/Muons/mismatchRatio""),
        QualityTestSummaryEnabled = cms.uint32(1)
    )
)"
-------------------------------------------------------------------------
"cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard2/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard3/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard4/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard5/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard6/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard2/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard3/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard4/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard5/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard6/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
"
-------------------------------------------------------------------------
"Recom
PRs: 24352, 24353"
-------------------------------------------------------------------------
=========================================================================
"args = cms.vstring('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/Powheg/V2/RelValidation/VBFH/VBF_H_slc6_amd64_gcc630_CMSSW_9_3_9_patch1_VBF_new_reducedPdf.tgz'),
"
-------------------------------------------------------------------------
args = cms.vstring('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/Powheg/V2/RelValidation/VH/HWJ_slc6_amd64_gcc630_CMSSW_9_3_9_patch1_VH_new_reducedPdf.tgz')
-------------------------------------------------------------------------
"args = cms.vstring('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/Powheg/V2/RelValidation/VBFH/VBF_H_slc6_amd64_gcc630_CMSSW_9_3_9_patch1_VBF_new_reducedPdf.tgz'),
"
-------------------------------------------------------------------------
"Recom
PRs: 24208, 24343"
-------------------------------------------------------------------------
=========================================================================
"args = cms.vstring('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/Powheg/V2/RelValidation/VH/HWJ_slc6_amd64_gcc630_CMSSW_9_3_9_patch1_VH_new_reducedPdf.tgz'),
"
-------------------------------------------------------------------------
args = cms.vstring('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/Powheg/V2/RelValidation/VH/HWJ_slc6_amd64_gcc630_CMSSW_9_3_9_patch1_VH_new_reducedPdf.tgz')
-------------------------------------------------------------------------
"args = cms.vstring('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/Powheg/V2/RelValidation/VH/HWJ_slc6_amd64_gcc630_CMSSW_9_3_9_patch1_VH_new_reducedPdf.tgz'),
"
-------------------------------------------------------------------------
"Recom
PRs: 24208, 24343"
-------------------------------------------------------------------------
=========================================================================
"# loading Meta tags used by commonDQM
process.load('EventFilter.OnlineMetaDataRawToDigi.onlineMetaDataRawToDigi_cfi')
process.onlineMetaDataDigis = cms.EDProducer('OnlineMetaDataRawToDigi')


"
-------------------------------------------------------------------------
"```python
# loading Meta tags used by commonDQM
process.load(""DQM.Integration.config.online_customizations_cfi"")
process.onlineMetaDataDigis = cms.EDProducer(""OnlineMetaDataRawToDigi"")
```"
-------------------------------------------------------------------------
"# loading Meta tags used by commonDQM
process.load('EventFilter.OnlineMetaDataRawToDigi.onlineMetaDataRawToDigi_cfi')
process.onlineMetaDataDigis = cms.EDProducer('OnlineMetaDataRawToDigi')


"
-------------------------------------------------------------------------
"Recom
PRs: 24213, 24218"
-------------------------------------------------------------------------
=========================================================================
"process.onlineMetaDataDigis *
"
-------------------------------------------------------------------------
"process.load(""DQM.CTPPS.ctppsDQM_cff"")
 # processing path
 process.recoStep = cms.Sequence(
   process.ctppsRawToDigi *
   process.recoCTPPS *
   process.onlineMetaDataDigis
 )"
-------------------------------------------------------------------------
"process.onlineMetaDataDigis *
"
-------------------------------------------------------------------------
"Recom
PRs: 24213, 24218"
-------------------------------------------------------------------------
=========================================================================
"TrackMon.TrackPt2DBin = cms.int32(100)
"
-------------------------------------------------------------------------
"Assign(targets=[Attribute(value=Name(id='TrackMon', ctx=Load()), attr='TrackPt2DBin', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='int32', ctx=Load()), args=[Constant(value=100)], keywords=[]))"
-------------------------------------------------------------------------
"TrackMon.TrackPt2DBin = cms.int32(100)
"
-------------------------------------------------------------------------
"Recom
PRs: 23940, 23986"
-------------------------------------------------------------------------
=========================================================================
"alcaBeamSpotProducerHPLowPU.PVFitter.errorScale = cms.untracked.double(0.9)
"
-------------------------------------------------------------------------
alcaBeamSpotProducerHPLowPU.PVFitter.errorScale = cms.untracked.double(0.9)
-------------------------------------------------------------------------
"alcaBeamSpotProducerHPLowPU.PVFitter.errorScale = cms.untracked.double(0.9)
"
-------------------------------------------------------------------------
"Recom
PRs: 23558, 23559"
-------------------------------------------------------------------------
=========================================================================
"MeasurementState = ""default"",
"
-------------------------------------------------------------------------
"MeasurementState = ""default"",
 # margins and settings
     TkSizeBin = 71,
     TkSizeMin = -0.5,"
-------------------------------------------------------------------------
"MeasurementState = ""default"",
"
-------------------------------------------------------------------------
"Recom
PRs: 23523, 23528"
-------------------------------------------------------------------------
=========================================================================
"QualityTestName = cms.string(""uGTDE_CentralBxMismatchRatio""),
QualityTestHist = cms.string(""L1TEMU/L1TdeStage2uGT/dataEmulMismatchRatio_CentralBX""),
QualityTestSummaryEnabled = cms.uint32(1)
"
-------------------------------------------------------------------------
"```python
Assign(targets=[Name(id='QualityTestName', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='uGTDE_CentralBxMismatchRatio')], keywords=[])], ctx=Load()))
Assign(targets=[Name(id='QualityTestHist', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='L1TEMU/L1TdeStage2uGT/dataEmulMismatchRatio_CentralBX')], keywords=[])], ctx=Load()))
- Assign(targets=[Name(id='QualityTestSummaryEnabled', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='uint32', ctx=Load()), args=[Constant(value=1)], keywords=[]))
```  "
-------------------------------------------------------------------------
"QualityTestName = cms.string(""uGTDE_CentralBxMismatchRatio""),
QualityTestHist = cms.string(""L1TEMU/L1TdeStage2uGT/dataEmulMismatchRatio_CentralBX""),
QualityTestSummaryEnabled = cms.uint32(1)
"
-------------------------------------------------------------------------
"Recom
PRs: 23440, 23441"
-------------------------------------------------------------------------
=========================================================================
"from DQM.L1TMonitorClient.L1TStage2uGTDEQualityTests_cfi import *
"
-------------------------------------------------------------------------
"- ImportFrom(module='DQM.L1TMonitorClient.L1TStage2uGTDEQualityTests_cfi', names=[alias(name='*')], level=0)"
-------------------------------------------------------------------------
"from DQM.L1TMonitorClient.L1TStage2uGTDEQualityTests_cfi import *
"
-------------------------------------------------------------------------
"Recom
PRs: 23440, 23441"
-------------------------------------------------------------------------
=========================================================================
"l1TStage2uGTDEQualityTests 
"
-------------------------------------------------------------------------
"```diff
- Expr(value=Name(id='l1TStage2uGTDEQualityTests', ctx=Load()))
+ Expr(value=Name(id='l1TStage2EMTFDEQualityTests', ctx=Load()))
```"
-------------------------------------------------------------------------
"l1TStage2uGTDEQualityTests 
"
-------------------------------------------------------------------------
"Recom
PRs: 23440, 23441"
-------------------------------------------------------------------------
=========================================================================
"errorScale = cms.untracked.double(1.1),
"
-------------------------------------------------------------------------
"errorScale = cms.untracked.double(1.1),"
-------------------------------------------------------------------------
"errorScale = cms.untracked.double(1.1),
"
-------------------------------------------------------------------------
"Recom
PRs: 23361, 23362"
-------------------------------------------------------------------------
=========================================================================
"highBetaStar_2018.toReplaceWith(mixedTripletStepTrackingRegionsB, _mixedTripletStepTrackingRegionsCommon.clone())
"
-------------------------------------------------------------------------
"Expr(value=Call(func=Attribute(value=Name(id='highBetaStar_2018', ctx=Load()), attr='toReplaceWith', ctx=Load()), args=[Name(id='mixedTripletStepTrackingRegionsB', ctx=Load()), Call(func=Attribute(value=Name(id='_mixedTripletStepTrackingRegionsCommon', ctx=Load()), attr='clone', ctx=Load()), args=[], keywords=[])], keywords=[])"
-------------------------------------------------------------------------
"highBetaStar_2018.toReplaceWith(mixedTripletStepTrackingRegionsB, _mixedTripletStepTrackingRegionsCommon.clone())
"
-------------------------------------------------------------------------
"Recom
PRs: 23238, 23360"
-------------------------------------------------------------------------
=========================================================================
"validityRange = cms.EventRange(""290873:min - 311625:max""),
"
-------------------------------------------------------------------------
"validityRange = cms.EventRange(""290873:min - 311625:max""),"
-------------------------------------------------------------------------
"validityRange = cms.EventRange(""290873:min - 311625:max""),
"
-------------------------------------------------------------------------
"Recom
PRs: 23119, 23356"
-------------------------------------------------------------------------
=========================================================================
"bool taggingMode_;
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='taggingMode', ctx=Store())], value=Constant(value=False))"
-------------------------------------------------------------------------
"bool taggingMode_;
"
-------------------------------------------------------------------------
"Recom
PRs: 21743, 23167"
-------------------------------------------------------------------------
=========================================================================
"taggingMode_ = iConfig.getParameter<bool>(""taggingMode"");

produces<bool>();
"
-------------------------------------------------------------------------
"taggingMode_ = iConfig.getParameter<bool>(""taggingMode"");

produces<bool>();"
-------------------------------------------------------------------------
"taggingMode_ = iConfig.getParameter<bool>(""taggingMode"");

produces<bool>();
"
-------------------------------------------------------------------------
"Recom
PRs: 21743, 23167"
-------------------------------------------------------------------------
=========================================================================
"
bool pass = HasAdditionalBHadron(*genBHadIndex,*genBHadFlavour,*genBHadPlusMothers,AllTopMothers);

iEvent.put(std::make_unique<bool>(pass));

return taggingMode_ || pass;
"
-------------------------------------------------------------------------
"```python
pass_value = HasAdditionalBHadron(*genBHadIndex,*genBHadFlavour,*genBHadPlusMothers,AllTopMothers)

iEvent.put(std::make_unique<bool>(pass_value))

return taggingMode_ or pass_value
```"
-------------------------------------------------------------------------
"bool pass = HasAdditionalBHadron(*genBHadIndex,*genBHadFlavour,*genBHadPlusMothers,AllTopMothers);

iEvent.put(std::make_unique<bool>(pass));
return taggingMode_ || pass;
"
-------------------------------------------------------------------------
"Recom
PRs: 21743, 23167"
-------------------------------------------------------------------------
=========================================================================
"OnlyHardProcessBHadrons = cms.bool(False),
taggingMode               = cms.bool(False)
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='OnlyHardProcessBHadrons', ctx=Store()), Name(id='taggingMode', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[]), Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load())"
-------------------------------------------------------------------------
"OnlyHardProcessBHadrons = cms.bool(False),
taggingMode             = cms.bool(False)
"
-------------------------------------------------------------------------
"Recom
PRs: 21743, 23167"
-------------------------------------------------------------------------
=========================================================================
"options.register('runOnGenOrAODsim', False, VarParsing.multiplicity.singleton, VarParsing.varType.bool, ""GEN SIM"")
"
-------------------------------------------------------------------------
"```python
options.register('runOnGenOrAODsim', False, VarParsing.multiplicity.singleton, VarParsing.varType.bool, ""GEN SIM"")
```"
-------------------------------------------------------------------------
"options.register('runOnGenOrAODsim', False, VarParsing.multiplicity.singleton, VarParsing.varType.bool, ""GEN SIM"")
"
-------------------------------------------------------------------------
"Recom
PRs: 21743, 23167"
-------------------------------------------------------------------------
=========================================================================
"options.inputFiles=['/store/mc/RunIIFall17MiniAOD/TTToSemiLeptonic_TuneCP5_PSweights_13TeV-powheg-pythia8/MINIAODSIM/94X_mc2017_realistic_v10-v1/50000/DC5D3109-F2E1-E711-A26E-A0369FC5FC9C.root']
"
-------------------------------------------------------------------------
options.inputFiles=['/store/mc/RunIIFall17MiniAOD/TTToSemiLeptonic_TuneCP5_PSweights_13TeV-powheg-pythia8/MINIAODSIM/94X_mc2017_realistic_v10-v1/50000/DC5D3109-F2E1-E711-A26E-A0369FC5FC9C.root']
-------------------------------------------------------------------------
"options.inputFiles=['/store/mc/RunIIFall17MiniAOD/TTToSemiLeptonic_TuneCP5_PSweights_13TeV-powheg-pythia8/MINIAODSIM/94X_mc2017_realistic_v10-v1/50000/DC5D3109-F2E1-E711-A26E-A0369FC5FC9C.root']
"
-------------------------------------------------------------------------
"Recom
PRs: 21743, 23167"
-------------------------------------------------------------------------
=========================================================================
"genParticles = genParticleCollection,
taggingMode  = cms.bool(True),
t ""If taggingMode is set to true, the filter will write a branch into the tree instead of filtering the events""
t ""taggingMode is set to "", process.ttHFGenFilter.taggingMode

"
-------------------------------------------------------------------------
"```python
genParticles = genParticleCollection
taggingMode = cms.bool(True)
t ""If taggingMode is set to true, the filter will write a branch into the tree instead of filtering the events""
t ""taggingMode is set to "", process.ttHFGenFilter.taggingMode
```"
-------------------------------------------------------------------------
"genParticles = genParticleCollection,
taggingMode  = cms.bool(True),
t ""If taggingMode is set to true, the filter will write a branch into the tree instead of filtering the events""
t ""taggingMode is set to "", process.ttHFGenFilter.taggingMode

"
-------------------------------------------------------------------------
"Recom
PRs: 21743, 23167"
-------------------------------------------------------------------------
=========================================================================
"avoidCategories = cms.vstring('MemoryCheck')
"
-------------------------------------------------------------------------
"avoidCategories = cms.vstring('MemoryCheck', 'HLTObjectsMonitor')"
-------------------------------------------------------------------------
"avoidCategories = cms.vstring('MemoryCheck')
"
-------------------------------------------------------------------------
"Recom
PRs: 23153, 23152"
-------------------------------------------------------------------------
=========================================================================
"run2_DT_2018.toModify(dtTriggerSynchMonitor,processDDU = False)
"
-------------------------------------------------------------------------
"```python
dtTriggerSynchMonitor = DQMEDAnalyzer('DTLocalTriggerSynchTask')
run2_DT_2018.toModify(dtTriggerSynchMonitor, processDDU = False)
```"
-------------------------------------------------------------------------
"run2_DT_2018.toModify(dtTriggerSynchMonitor,processDDU = False)
"
-------------------------------------------------------------------------
"Recom
PRs: 23144, 23145"
-------------------------------------------------------------------------
=========================================================================
"monitorDir = cms.untracked.string(""L1TEMU/L1TStage2CaloLayer2"")
"
-------------------------------------------------------------------------
"monitorDir = cms.untracked.string(""L1TEMU/L1TStage2CaloLayer2"")
l1tStage2CaloLayer2DEClientSummary"
-------------------------------------------------------------------------
"monitorDir = cms.untracked.string(""L1TEMU/L1TStage2CaloLayer2"")
"
-------------------------------------------------------------------------
"Recom
PRs: 23096, 23097"
-------------------------------------------------------------------------
=========================================================================
"l1tStage2CaloLayer2DEClientSummary
"
-------------------------------------------------------------------------
"# L1T monitor client sequence (system clients and quality tests)
l1TStage2EmulatorClients = cms.Sequence(
                      + l1tStage2uGMTEmulatorClient
                      + l1tStage2BMTFEmulatorClient
                      + l1tStage2OMTFEmulatorClient
                      + l1tStage2CaloLayer2DEClientSummary"
-------------------------------------------------------------------------
"l1tStage2CaloLayer2DEClientSummary
"
-------------------------------------------------------------------------
"Recom
PRs: 23096, 23097"
-------------------------------------------------------------------------
=========================================================================
"process.l1tdeStage2CaloLayer1.fedRawDataLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"process.l1tdeStage2CaloLayer1.fedRawDataLabel = cms.InputTag(""rawDataRepacker"")"
-------------------------------------------------------------------------
"process.l1tdeStage2CaloLayer1.fedRawDataLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"Recom
PRs: 23082, 23083"
-------------------------------------------------------------------------
=========================================================================
"valHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('hcalDigis'),cms.InputTag('hcalDigis'))
"
-------------------------------------------------------------------------
"valHcalTriggerPrimitiveDigis.inputLabel = cms.VInputTag(cms.InputTag('hcalDigis'),cms.InputTag('hcalDigis'))"
-------------------------------------------------------------------------
"valHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('hcalDigis'),cms.InputTag('hcalDigis'))
"
-------------------------------------------------------------------------
"Recom
PRs: 23039, 23040"
-------------------------------------------------------------------------
=========================================================================
"SiPixelPhase1Geometry.onlineblock = 150
"
-------------------------------------------------------------------------
SiPixelPhase1Geometry.onlineblock = 150
-------------------------------------------------------------------------
"SiPixelPhase1Geometry.onlineblock = 150
"
-------------------------------------------------------------------------
"Recom
PRs: 22959, 22960"
-------------------------------------------------------------------------
=========================================================================
"from DQM.SiPixelPhase1DeadFEDChannels.SiPixelPhase1DeadFEDChannels_cfi import *
"
-------------------------------------------------------------------------
from DQM.SiPixelPhase1DeadFEDChannels.SiPixelPhase1DeadFEDChannels_cfi import *
-------------------------------------------------------------------------
"from DQM.SiPixelPhase1DeadFEDChannels.SiPixelPhase1DeadFEDChannels_cfi import *
"
-------------------------------------------------------------------------
"Recom
PRs: 22959, 22960"
-------------------------------------------------------------------------
=========================================================================
"SiPixelPhase1DeadFEDChannelsAnalyzer
"
-------------------------------------------------------------------------
"Expr(value=Name(id='SiPixelPhase1DeadFEDChannelsAnalyzer', ctx=Load()))"
-------------------------------------------------------------------------
"SiPixelPhase1DeadFEDChannelsAnalyzer
"
-------------------------------------------------------------------------
"Recom
PRs: 22959, 22960"
-------------------------------------------------------------------------
=========================================================================
"SiPixelPhase1DeadFEDChannelsHarvester
"
-------------------------------------------------------------------------
"- Expr(value=Name(id='SiPixelPhase1DeadFEDChannelsHarvester', ctx=Load()))"
-------------------------------------------------------------------------
"SiPixelPhase1DeadFEDChannelsHarvester
"
-------------------------------------------------------------------------
"Recom
PRs: 22959, 22960"
-------------------------------------------------------------------------
=========================================================================
"SiPixelPhase1DeadFEDChannelsAnalyzer
"
-------------------------------------------------------------------------
"Expr(value=Name(id='SiPixelPhase1DeadFEDChannelsAnalyzer', ctx=Load()))"
-------------------------------------------------------------------------
"SiPixelPhase1DeadFEDChannelsAnalyzer
"
-------------------------------------------------------------------------
"Recom
PRs: 22959, 22960"
-------------------------------------------------------------------------
=========================================================================
"SiPixelPhase1DeadFEDChannelsAnalyzer
"
-------------------------------------------------------------------------
"Expr(value=Name(id='SiPixelPhase1DeadFEDChannelsAnalyzer', ctx=Load()))"
-------------------------------------------------------------------------
"SiPixelPhase1DeadFEDChannelsAnalyzer
"
-------------------------------------------------------------------------
"Recom
PRs: 22959, 22960"
-------------------------------------------------------------------------
=========================================================================
"if self.config.fragment: paths.append( ""Scouting*Output"" )
"
-------------------------------------------------------------------------
"```python
if 'GlobalTag' in %(dict)s:
       else:
         # drop all output EndPaths but the Scouting ones, and drop the RatesMonitoring and DQMHistograms
         paths.append(""-*Output"")
         paths.append(""-RatesMonitoring"")
         paths.append(""-DQMHistograms"")

     elif self.config.output in ('dqm', 'minimal', 'full'):
       if self.config.paths:
           if self.config.fragment:
               paths.append(""Scouting*Output"")
```"
-------------------------------------------------------------------------
"if self.config.fragment: paths.append( ""Scouting*Output"" )
"
-------------------------------------------------------------------------
"Recom
PRs: 22943, 22945"
-------------------------------------------------------------------------
=========================================================================
"if self.config.fragment: paths.append( ""Scouting*Output"" )
"
-------------------------------------------------------------------------
"```
if 'GlobalTag' in %(dict)s:
    if self.config.fragment: 
        paths.append( ""Scouting*Output"" )
    else:
        # drop all output EndPaths but the Scouting ones, and drop the RatesMonitoring
        paths.append( ""-*Output"" )
        paths.append( ""-RatesMonitoring"")
else:
    if self.config.paths:
```"
-------------------------------------------------------------------------
"if self.config.fragment: paths.append( ""Scouting*Output"" )
"
-------------------------------------------------------------------------
"Recom
PRs: 22943, 22945"
-------------------------------------------------------------------------
=========================================================================
"GlobalTag.globaltag = ""101X_dataRun2_Express_v7""
"
-------------------------------------------------------------------------
"GlobalTag.globaltag = ""101X_dataRun2_HLT_v7"""
-------------------------------------------------------------------------
"GlobalTag.globaltag = ""101X_dataRun2_Express_v7""
"
-------------------------------------------------------------------------
"Recom
PRs: 22923, 22922"
-------------------------------------------------------------------------
=========================================================================
"process.HLTSiStripClusterChargeCutNone = cms.PSet(  value = cms.double( -1.0 ) )
"
-------------------------------------------------------------------------
"process.HLTSiStripClusterChargeCutNone = cms.PSet(
    value = cms.double(-1.0)
)"
-------------------------------------------------------------------------
"process.HLTSiStripClusterChargeCutNone = cms.PSet(  value = cms.double( -1.0 ) )
"
-------------------------------------------------------------------------
"Recom
PRs: 22901, 22902"
-------------------------------------------------------------------------
=========================================================================
"
DoubleMu33NoFiltersNoVtxDisplaced_monitoring = hltMuonmonitoring.clone()
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.FolderName = cms.string('HLT/EXO/DoubleMu33NoFiltersNoVtxDisplaced/')
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.nmuons = cms.uint32(2)
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_DoubleMu33NoFiltersNoVtxDisplaced_v*"")
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

DoubleMu40NoFiltersNoVtxDisplaced_monitoring = hltMuonmonitoring.clone()
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.FolderName = cms.string('HLT/EXO/DoubleMu40NoFiltersNoVtxDisplaced/')
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.nmuons = cms.uint32(2)
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_DoubleMu40NoFiltersNoVtxDisplaced_v*"")
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

"
-------------------------------------------------------------------------
"DoubleMu33NoFiltersNoVtxDisplaced_monitoring = hltMuonmonitoring.clone()
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.FolderName = cms.string('HLT/EXO/DoubleMu33NoFiltersNoVtxDisplaced/')
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.nmuons = cms.uint32(2)
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_DoubleMu33NoFiltersNoVtxDisplaced_v*"")
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"", ""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"", ""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

DoubleMu40NoFiltersNoVtxDisplaced_monitoring = hltMuonmonitoring.clone()
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.FolderName = cms.string('HLT/EXO/DoubleMu40NoFiltersNoVtxDisplaced/')
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.nmuons = cms.uint32(2)
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_DoubleMu40NoFiltersNoVtxDisplaced_v*"")
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"", ""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"", ""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")"
-------------------------------------------------------------------------
"DoubleMu33NoFiltersNoVtxDisplaced_monitoring = hltMuonmonitoring.clone()
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.FolderName = cms.string('HLT/EXO/DoubleMu33NoFiltersNoVtxDisplaced/')
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.nmuons = cms.uint32(2)
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_DoubleMu33NoFiltersNoVtxDisplaced_v*"")
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

DoubleMu40NoFiltersNoVtxDisplaced_monitoring = hltMuonmonitoring.clone()
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.FolderName = cms.string('HLT/EXO/DoubleMu40NoFiltersNoVtxDisplaced/')
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.nmuons = cms.uint32(2)
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_DoubleMu40NoFiltersNoVtxDisplaced_v*"")
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

"
-------------------------------------------------------------------------
"Recom
PRs: 22808, 22869"
-------------------------------------------------------------------------
=========================================================================
"Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")



Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")




Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.muonSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")



Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")



Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 43')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")




Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.muonSelection = cms.string('pt > 43')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

DoubleMu33NoFiltersNoVtxDisplaced_monitoring
DoubleMu40NoFiltersNoVtxDisplaced_monitoring
Mu43NoFiltersNoVtx_Photon43_CaloIdL_monitoring
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring', ctx=Store())], value=Call(func=Attribute(value=Name(id='hltMuonmonitoring', ctx=Load()), attr='clone', ctx=Load()), args=[], keywords=[]))
+ Assign(targets=[Attribute(value=Name(id='Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring', ctx=Load()), attr='FolderName', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL/')], keywords=[])
+ Assign(targets=[Attribute(value=Name(id='Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring', ctx=Load()), attr='nmuons', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='uint32', ctx=Load()), args=[Constant(value=1)], keywords=[])
+ Assign(targets=[Attribute(value=Name(id='Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring', ctx=Load()), attr='nelectrons', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='uint32', ctx=Load()), args=[Constant(value=1)], keywords=[])
+ Assign(targets=[Attribute(value=Attribute(value=Name(id='Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring', ctx=Load()), attr='numGenericTriggerEventPSet', ctx=Load()), attr='hltPaths', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='vstring', ctx=Load()), args=[Constant(value='HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*')], keywords=[])
+ Assign(targets=[Attribute(value=Attribute(value=Name(id='Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring', ctx=Load()), attr='denGenericTriggerEventPSet', ctx=Load()), attr='hltPaths', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='vstring', ctx=Load()), args=[Constant(value='HLT_PFMET120_PFMHT120_IDTight_v*'), Constant(value='HLT_PFMETTypeOne120_PFMHT120_IDTight_v*'), Constant(value='HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*')], keywords=[])
+ Assign(targets=[Name(id='Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring', ctx=Store())], value=Call(func=Attribute(value=Name(id='hltMuonmonitoring', ctx=Load()), attr='clone', ctx=Load()), args=[], keywords=[])
+ Assign(targets=[Attribute(value=Name(id='Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring', ctx=Load()), attr='FolderName', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg/')], keywords=[])
+ Assign(targets=[Attribute(value=Name(id='Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring', ctx=Load()), attr='nmuons', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='uint32', ctx=Load()), args=[Constant(value=1)], keywords=[])
+ Assign(targets=[Attribute(value=Name(id='Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring', ctx=Load()), attr='nelectrons', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='uint32', ctx=Load()), args=[Constant(value=1)], keywords=[])
+ Assign(targets=[Attribute(value=Name(id='Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring', ctx=Load()), attr='eleSelection', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='pt > 38')], keywords=[])
+ Assign(targets=[Attribute(value=Attribute(value=Name(id='Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring', ctx=Load()), attr='numGenericTriggerEventPSet', ctx=Load()), attr='hltPaths', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='vstring', ctx=Load()), args=[Constant(value='HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*')], keywords=[])
+ Assign(targets=[Attribute(value=Attribute(value=Name(id='Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring', ctx=Load()), attr='denGenericTriggerEventPSet', ctx=Load()), attr='hltPaths', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='vstring', ctx=Load()), args=[Constant(value='HLT_PFMET120_PFMHT120_IDTight_v*'), Constant(value='HLT_PFMETTypeOne120_PFMHT120_IDTight_v*'), Constant(value='HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*')], keywords=[])
+ Assign(targets=[Name(id='Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring', ctx=Store())], value=Call(func=Attribute(value=Name(id='hltMuonmonitoring', ctx=Load()), attr='clone', ctx=Load()), args=[], keywords=[])
+ Assign(targets=[Attribute(value=Name(id='Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring', ctx=Load()), attr='FolderName', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg/')], keywords=[])
+ Assign(targets=[Attribute(value=Name(id='Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring', ctx=Load()), attr='nmuons', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='uint32', ctx=Load()), args=[Constant(value=1)], keywords=[])
+ Assign(targets=[Attribute(value=Name(id='Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring', ctx=Load()), attr='nelectrons', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='uint32', ctx=Load()), args=[Constant(value=1)], keywords=[])
+ Assign(targets=[Attribute(value=Name(id='Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring', ctx=Load()), attr='muonSelection', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='pt > 38')], keywords=[])
+ Assign(targets=[Attribute(value=Attribute(value=Name(id='Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring', ctx=Load()), attr='numGenericTriggerEventPSet', ctx=Load()), attr='hltPaths', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='vstring', ctx=Load()), args=[Constant(value='HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*')], keywords=[])
+ Assign(targets=[Attribute(value=Attribute(value=Name(id='Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring', ctx=Load()), attr='denGenericTriggerEventPSet', ctx=Load()), attr='hltPaths', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='vstring', ctx=Load()), args=[Constant(value='HLT_PFMET120_PFMHT120_IDTight_v*'), Constant(value='HLT_PFMETTypeOne120_PFMHT120_IDTight_v*'), Constant(value='HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*')], keywords=[])
+ Assign(targets=[Name(id='Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring', ctx=Store())], value=Call(func=Attribute(value=Name(id='hltMuonmonitoring', ctx=Load()), attr='clone', ctx=Load()), args=[], keywords=[])
+ Assign(targets=[Attribute(value=Name(id='Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring', ctx=Load()), attr='FolderName', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL/')], keywords=[])
+ Assign(targets=[Attribute(value=Name(id='Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring', ctx=Load()), attr='nmuons', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='uint32', ctx=Load()), args=[Constant(value=1)], keywords=[])
+ Assign(targets=[Attribute(value=Name(id='Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring', ctx=Load()), attr='nelectrons', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='uint32', ctx=Load()), args=[Constant(value=1)], keywords=[])
+ Assign(targets=[Attribute(value=Attribute(value=Name(id='Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring', ctx=Load()), attr='numGenericTriggerEventPSet', ctx=Load()), attr='hltPaths', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='vstring', ctx=Load()), args=[Constant(value='HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*')], keywords=[])
+ Assign(targets=[Attribute(value=Attribute(value=Name(id='Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring', ctx=Load()), attr='denGenericTriggerEventPSet', ctx=Load()), attr='hltPaths', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='vstring', ctx=Load()), args=[Constant(value='HLT_PFMET120_PFMHT120_IDTight_v*'), Constant(value='HLT_PFMETTypeOne120_PFMHT120_IDTight_v*'), Constant(value='HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*')], keywords=[])
+ Assign(targets=[Name(id='Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring', ctx=Store())], value=Call(func=Attribute(value=Name(id='hltMuonmonitoring', ctx=Load()), attr='clone', ctx=Load()), args=[], keywords=[])
+ Assign(targets=[Attribute(value=Name(id='Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring', ctx=Load()), attr='FolderName', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg/')], keywords=[])
+ Assign(targets=[Attribute(value=Name(id='Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring', ctx=Load()), attr='nmuons', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='uint32', ctx=Load()), args=[Constant(value=1)], keywords=[])
+ Assign(targets=[Attribute(value=Name(id='Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring', ctx=Load()), attr='nelectrons', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='uint32', ctx=Load()), args=[Constant(value=1)], keywords=[])
+ Assign(targets=[Attribute(value=Name(id='Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring', ctx=Load()), attr='eleSelection', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='pt > 43')], keywords=[])
+ Assign(targets=[Attribute(value=Attribute(value=Name(id='Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring', ctx=Load()), attr='numGenericTriggerEventPSet', ctx=Load()), attr='hltPaths', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='vstring', ctx=Load()), args=[Constant(value='HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*')], keywords=[])
+ Assign(targets=[Attribute(value=Attribute(value=Name(id='Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring', ctx=Load()), attr='denGenericTriggerEventPSet', ctx=Load()), attr='hltPaths', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='vstring', ctx=Load()), args=[Constant(value='HLT_PFMET120_PFMHT120_IDTight_v*'), Constant(value='HLT_PFMETTypeOne120_PFMHT120_IDTight_v*'), Constant(value='HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*')], keywords=[])"
-------------------------------------------------------------------------
"Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")



Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")




Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.muonSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")



Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")



Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 43')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")




Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.muonSelection = cms.string('pt > 43')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
DoubleMu43NoFiltersNoVtx_monitoring
DoubleMu33NoFiltersNoVtxDisplaced_monitoring
DoubleMu40NoFiltersNoVtxDisplaced_monitoring
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring
"
-------------------------------------------------------------------------
"Recom
PRs: 22808, 22869"
-------------------------------------------------------------------------
=========================================================================
"""HLT_DoubleMu33NoFiltersNoVtxDisplaced_v"", # 2017 displaced mu-mu, muons with dxy> 0.01 cm (main)
""HLT_DoubleMu40NoFiltersNoVtxDisplaced_v"", # 2017 displaced mu-mu, muons with dxy> 0.01 cm (backup)
"
-------------------------------------------------------------------------
"DisplacedDimuonPSet = cms.PSet(
     hltPathsToCheck = cms.vstring(
         ""HLT_DoubleMu43NoFiltersNoVtxDisplaced_v"", # 2017 displaced mu-mu (main)
         ""HLT_DoubleMu48NoFiltersNoVtxDisplaced_v"", # 2017 displaced mu-mu (backup)
         ),
     recMuonLabel  = cms.InputTag(""muons""),
     # -- Analysis specific cuts
     cuts = cms.PSet(
         dxy = cms.double(0.01)
     )
)"
-------------------------------------------------------------------------
"""HLT_DoubleMu33NoFiltersNoVtxDisplaced_v"", # 2017 displaced mu-mu, muons with dxy> 0.01 cm (main)
""HLT_DoubleMu40NoFiltersNoVtxDisplaced_v"", # 2017 displaced mu-mu, muons with dxy> 0.01 cm (backup)
"
-------------------------------------------------------------------------
"Recom
PRs: 22809, 22867"
-------------------------------------------------------------------------
=========================================================================
"""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v"", # 2017 displaced e-mu, muon with dxy> 0.01cm (main)
""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v"", # 2017 displaced e-mu, muon with dxy> 0.01cm (backup)
"
-------------------------------------------------------------------------
"DisplacedMuEGPSet = cms.PSet(
     hltPathsToCheck = cms.vstring(
         ""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v"", # 2017 displaced e-mu, muon with dxy> 0.01cm (backup)
         ""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v"", # 2017 displaced e-mu, muon with dxy> 0.01cm (main)
         ),
     recElecLabel  = cms.InputTag(""gedGsfElectrons""),
     recMuonLabel  = cms.InputTag(""muons""),"
-------------------------------------------------------------------------
"""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v"", # 2017 displaced e-mu, muon with dxy> 0.01cm (main)
""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v"", # 2017 displaced e-mu, muon with dxy> 0.01cm (backup)
"
-------------------------------------------------------------------------
"Recom
PRs: 22809, 22867"
-------------------------------------------------------------------------
=========================================================================
"aveDigiOcc_(iConfig.getParameter<ParameterSet>(""SiPixelStatusManagerParameters"").getUntrackedParameter<int>(""aveDigiOcc"")),
siPixelStatusManager_(iConfig, consumesCollector()){  
debug_ = iConfig.getUntrackedParameter<bool>(""debug"");
"
-------------------------------------------------------------------------
"```cpp
aveDigiOcc_ = iConfig.getParameter<ParameterSet>(""SiPixelStatusManagerParameters"").getUntrackedParameter<int>(""aveDigiOcc"");
siPixelStatusManager_ = iConfig(consumesCollector()) {
  debug_ = iConfig.getUntrackedParameter<bool>(""debug"");
} 
```"
-------------------------------------------------------------------------
"aveDigiOcc_(iConfig.getParameter<ParameterSet>(""SiPixelStatusManagerParameters"").getUntrackedParameter<int>(""aveDigiOcc"")),
siPixelStatusManager_(iConfig, consumesCollector()){  
debug_ = iConfig.getUntrackedParameter<bool>(""debug"");
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"// IOV for final payloads. FEDerror25 and pcl
std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t> finalIOV;
std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t> fedError25IOV;
std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t> pclIOV;

"
-------------------------------------------------------------------------
"// IOV for final payloads. FEDerror25 and pcl
std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t> finalIOV;
std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t> fedError25IOV;
std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t> pclIOV;"
-------------------------------------------------------------------------
"// IOV for final payloads. FEDerror25 and pcl
std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t> finalIOV;
std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t> fedError25IOV;
std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t> pclIOV;

"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"} // loop over modules

finalIOV[it->first] = it->first;
fedError25IOV[it->first] = it->first;

poolDbService->writeOne<SiPixelQuality>(siPixelQuality, thisIOV, recordName_""_stuckTBM"");
 for PCL combines permanent bad/stuckTBM/other
nalIOV[it->first] = it->first;
lIOV[it->first] = it->first;


p over final IOV
ap<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t>::iterator itIOV;
IOV=finalIOV.begin();itIOV!=finalIOV.end();itIOV){
edm::LuminosityBlockID lu(iRun.id().run(),itIOV->first);
thisIOV = (cond::Time_t)(lu.value());
edm::LuminosityBlockNumber_t lumiStuckTBMs = SiPixelStatusHarvester::stepIOV(itIOV->first,fedError25IOV);
edm::LuminosityBlockNumber_t lumiPCL = SiPixelStatusHarvester::stepIOV(itIOV->first,pclIOV);
// get badROC list due to FEDerror25 = stuckTBM  permanent bad components
std::map<int, std::vector<int> > tmpFEDerror25 = FEDerror25Map[lumiStuckTBMs];
// get SiPixelDetectorStatus
SiPixelDetectorStatus tmpSiPixelStatus = siPixelStatusMap[lumiPCL];
"
-------------------------------------------------------------------------
"} // loop over modules

finalIOV[it->first] = it->first;
fedError25IOV[it->first] = it->first;

poolDbService->writeOne<SiPixelQuality>(siPixelQuality, thisIOV, recordName + ""_stuckTBM"");
 // PCL combines permanent bad/stuckTBM/other
finalIOV[it->first] = it->first;
finalIOV[it->first] = it->first;


// loop over final IOV
map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t>::iterator itIOV;
for (itIOV = finalIOV.begin(); itIOV != finalIOV.end(); itIOV++){
    edm::LuminosityBlockID lu(iRun.id().run(), itIOV->first);
    thisIOV = (cond::Time_t)(lu.value());
    edm::LuminosityBlockNumber_t lumiStuckTBMs = SiPixelStatusHarvester::stepIOV(itIOV->first, fedError25IOV);
    edm::LuminosityBlockNumber_t lumiPCL = SiPixelStatusHarvester::stepIOV(itIOV->first, pclIOV);
    // get badROC list due to FEDerror25 = stuckTBM  permanent bad components
    std::map<int, std::vector<int> > tmpFEDerror25 = FEDerror25Map[lumiStuckTBMs];
    // get SiPixelDetectorStatus
    SiPixelDetectorStatus tmpSiPixelStatus = siPixelStatusMap[lumiPCL];
}"
-------------------------------------------------------------------------
"} // loop over modules

finalIOV[it->first] = it->first;
fedError25IOV[it->first] = it->first;

poolDbService->writeOne<SiPixelQuality>(siPixelQuality, thisIOV, recordName_""_stuckTBM"");
 for PCL combines permanent bad/stuckTBM/other
nalIOV[it->first] = it->first;
lIOV[it->first] = it->first;


p over final IOV
ap<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t>::iterator itIOV;
IOV=finalIOV.begin();itIOV!=finalIOV.end();itIOV){
edm::LuminosityBlockID lu(iRun.id().run(),itIOV->first);
thisIOV = (cond::Time_t)(lu.value());
edm::LuminosityBlockNumber_t lumiStuckTBMs = SiPixelStatusHarvester::stepIOV(itIOV->first,fedError25IOV);
edm::LuminosityBlockNumber_t lumiPCL = SiPixelStatusHarvester::stepIOV(itIOV->first,pclIOV);
// get badROC list due to FEDerror25 = stuckTBM  permanent bad components
std::map<int, std::vector<int> > tmpFEDerror25 = FEDerror25Map[lumiStuckTBMs];
// get SiPixelDetectorStatus
SiPixelDetectorStatus tmpSiPixelStatus = siPixelStatusMap[lumiPCL];
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"// create the bad module list for PCL, prompt and other
"
-------------------------------------------------------------------------
"// Create the bad module list for PCL, prompt, and other"
-------------------------------------------------------------------------
"// create the bad module list for PCL, prompt and other
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"//PCL bad roc list
//FEDerror25 list
// from prompt = PCL bad - stuckTBM =  PCL bad - FEDerror25  permanent bad
   // if not FEDerror25 or permanent bad
   BadRocListPrompt.push_back(uint32_t(iroc));
// other source of bad components = prompt - permanent bad = PCL bad - FEDerror25
// or to be safe, say not FEDerro25 and not permanent bad
   // if not permanent and not stuck TBM
   BadRocListOther.push_back(uint32_t(iroc)); 


oop over ROCs

mpt
er
badrocsOther= 0;



rue) // only produce the tag for all sources of bad components for debugging reason
rvice->writeOne<SiPixelQuality>(siPixelQualityPCL, thisIOV, recordName_""_PCL"");

e->writeOne<SiPixelQuality>(siPixelQualityPrompt, thisIOV, recordName_""_prompt"");

e->writeOne<SiPixelQuality>(siPixelQualityOther, thisIOV, recordName_""_other"");
V
"
-------------------------------------------------------------------------
"//PCL bad roc list
//FEDerror25 list
// from prompt = PCL bad - stuckTBM =  PCL bad - FEDerror25  permanent bad
   // if not FEDerror25 or permanent bad
   BadRocListPrompt.push_back(uint32_t(iroc));
// other source of bad components = prompt - permanent bad = PCL bad - FEDerror25
// or to be safe, say not FEDerro25 and not permanent bad
   // if not permanent and not stuck TBM
   BadRocListOther.push_back(uint32_t(iroc));

// Loop over ROCs

short badrocsOther = 0;

if(debugMode == true) // only produce the tag for all sources of bad components for debugging reason
  dbService->writeOne<SiPixelQuality>(siPixelQualityPCL, thisIOV, recordName_""_PCL"");

dbService->writeOne<SiPixelQuality>(siPixelQualityPrompt, thisIOV, recordName_""_prompt"");

dbService->writeOne<SiPixelQuality>(siPixelQualityOther, thisIOV, recordName_""_other"");"
-------------------------------------------------------------------------
"//PCL bad roc list
//FEDerror25 list
// from prompt = PCL bad - stuckTBM =  PCL bad - FEDerror25  permanent bad
   // if not FEDerror25 or permanent bad
   BadRocListPrompt.push_back(uint32_t(iroc));
// other source of bad components = prompt - permanent bad = PCL bad - FEDerror25
// or to be safe, say not FEDerro25 and not permanent bad
   // if not permanent and not stuck TBM
   BadRocListOther.push_back(uint32_t(iroc)); 


oop over ROCs

mpt
er
badrocsOther= 0;



rue) // only produce the tag for all sources of bad components for debugging reason
rvice->writeOne<SiPixelQuality>(siPixelQualityPCL, thisIOV, recordName_""_PCL"");

e->writeOne<SiPixelQuality>(siPixelQualityPrompt, thisIOV, recordName_""_prompt"");

e->writeOne<SiPixelQuality>(siPixelQualityOther, thisIOV, recordName_""_other"");
V
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"// step function for IOV
edm::LuminosityBlockNumber_t SiPixelStatusHarvester::stepIOV(edm::LuminosityBlockNumber_t pin, std::map<edm::LuminosityBlockNumber_t,edm::LuminosityBlockNumber_t> IOV){

std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t>::iterator itIOV;
for(itIOV=IOV.begin();itIOV!=IOV.end();itIOV){
    std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t>::iterator nextItIOV;
    nextItIOV = itIOV; nextItIOV;

    if(nextItIOV!=IOV.end()){ 
       if(pin>=itIOV->first && pin<nextItIOV->first){
          return itIOV->first;
       }
    }
    else{
       if(pin>=itIOV->first){
          return itIOV->first;
       }
    }

}

// return the firstIOV in case all above fail
return (IOV.begin())->first;


"
-------------------------------------------------------------------------
"void SiPixelStatusHarvester::endLuminosityBlock(const edm::LuminosityBlock& iLum){
    // step function for IOV
    edm::LuminosityBlockNumber_t SiPixelStatusHarvester::stepIOV(edm::LuminosityBlockNumber_t pin, std::map<edm::LuminosityBlockNumber_t,edm::LuminosityBlockNumber_t> IOV){

    std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t>::iterator itIOV;
    for(itIOV=IOV.begin();itIOV!=IOV.end();itIOV++){
        std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t>::iterator nextItIOV;
        nextItIOV = itIOV; nextItIOV;

        if(nextItIOV!=IOV.end()){ 
        if(pin>=itIOV->first && pin<nextItIOV->first){
            return itIOV->first;
        }
        }
        else{
        if(pin>=itIOV->first){
            return itIOV->first;
        }
        }

    }
    
    // return the firstIOV in case all above fail
    return (IOV.begin())->first;
}"
-------------------------------------------------------------------------
"// step function for IOV
edm::LuminosityBlockNumber_t SiPixelStatusHarvester::stepIOV(edm::LuminosityBlockNumber_t pin, std::map<edm::LuminosityBlockNumber_t,edm::LuminosityBlockNumber_t> IOV){

std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t>::iterator itIOV;
for(itIOV=IOV.begin();itIOV!=IOV.end();itIOV){
    std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t>::iterator nextItIOV;
    nextItIOV = itIOV; nextItIOV;

    if(nextItIOV!=IOV.end()){ 
       if(pin>=itIOV->first && pin<nextItIOV->first){
          return itIOV->first;
       }
    }
    else{
       if(pin>=itIOV->first){
          return itIOV->first;
       }
    }

}

// return the firstIOV in case all above fail
return (IOV.begin())->first;


"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"if (pgdu == nullptr) continue;
"
-------------------------------------------------------------------------
if (!pgdu) continue;
-------------------------------------------------------------------------
"if (pgdu == nullptr) continue;
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"if(!iEvent.getByToken(fSiPixelClusterToken_, hClusterColl)){
   edm::LogWarning(""SiPixelStatusProducer"") << "" edmNew::DetSetVector<SiPixelCluster> ""<<fPixelClusterLabel_<<"" does not exist!""<<endl;
   return;
}

iEvent.getByToken(fSiPixelClusterToken_, hClusterColl);
if (hClusterColl.isValid()){
   for (const auto& clusters: *hClusterColl) { //loop over different clusters in a clusters vector (module)
         for(const auto& clu: clusters) { // loop over cluster in a given detId (module)
"
-------------------------------------------------------------------------
"if(!iEvent.getByToken(fSiPixelClusterToken_, hClusterColl)){
   edm::LogWarning(""SiPixelStatusProducer"") << "" edmNew::DetSetVector<SiPixelCluster> ""<<fPixelClusterLabel_<<"" does not exist!""<<endl;
   return;
}

if (iEvent.getByToken(fSiPixelClusterToken_, hClusterColl) && hClusterColl.isValid()){
   for (const auto& clusters: *hClusterColl) { //loop over different clusters in a clusters vector (module)
         for(const auto& clu: clusters) { // loop over cluster in a given detId (module)"
-------------------------------------------------------------------------
"if(!iEvent.getByToken(fSiPixelClusterToken_, hClusterColl)){
   edm::LogWarning(""SiPixelStatusProducer"") << "" edmNew::DetSetVector<SiPixelCluster> ""<<fPixelClusterLabel_<<"" does not exist!""<<endl;
   return;
}

iEvent.getByToken(fSiPixelClusterToken_, hClusterColl);
if (hClusterColl.isValid()){
   for (const auto& clusters: *hClusterColl) { //loop over different clusters in a clusters vector (module)
         for(const auto& clu: clusters) { // loop over cluster in a given detId (module)
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"} // hClusterColl.isValid()
else{
    edm::LogWarning(""SiPixelStatusProducer"") << "" edmNew::DetSetVector<SiPixelCluster> ""<<fPixelClusterLabel_<<"" is NOT Valid!""<<endl;
}
"
-------------------------------------------------------------------------
"} // hClusterColl.isValid()
else{
    edm::LogWarning(""SiPixelStatusProducer"") << "" edmNew::DetSetVector<SiPixelCluster> ""<<fPixelClusterLabel_<<"" is NOT Valid!"";
}"
-------------------------------------------------------------------------
"} // hClusterColl.isValid()
else{
    edm::LogWarning(""SiPixelStatusProducer"") << "" edmNew::DetSetVector<SiPixelCluster> ""<<fPixelClusterLabel_<<"" is NOT Valid!""<<endl;
}
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"// collection has to exist
if (!iEvent.getByToken(tk, pixelFEDChannelCollectionHandle)) {
   edm::LogWarning(""SiPixelStatusProducer"") << "" PixelFEDChannelCollection with index ""<<tk.index()<<"" does NOT exist!""<<endl;
   continue;
}
// collection has to be valid
if(!pixelFEDChannelCollectionHandle.isValid()) {
   edm::LogWarning(""SiPixelStatusProducer"") << "" PixelFEDChannelCollection with index ""<<tk.index()<<"" is NOT valid!""<<endl;
   continue;
}
"
-------------------------------------------------------------------------
"// collection has to exist
if (!iEvent.getByToken(tk, pixelFEDChannelCollectionHandle)) {
   edm::LogWarning(""SiPixelStatusProducer"") << "" PixelFEDChannelCollection with index "" << tk.index() << "" does NOT exist!"";
   continue;
}
// collection has to be valid
if (!pixelFEDChannelCollectionHandle.isValid()) {
   edm::LogWarning(""SiPixelStatusProducer"") << "" PixelFEDChannelCollection with index "" << tk.index() << "" is NOT valid!"";
   continue;
}"
-------------------------------------------------------------------------
"// collection has to exist
if (!iEvent.getByToken(tk, pixelFEDChannelCollectionHandle)) {
   edm::LogWarning(""SiPixelStatusProducer"") << "" PixelFEDChannelCollection with index ""<<tk.index()<<"" does NOT exist!""<<endl;
   continue;
}
// collection has to be valid
if(!pixelFEDChannelCollectionHandle.isValid()) {
   edm::LogWarning(""SiPixelStatusProducer"") << "" PixelFEDChannelCollection with index ""<<tk.index()<<"" is NOT valid!""<<endl;
   continue;
}
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"lumiSeg.put(std::move(result), std::string(""siPixelStatus""));
edm::LogInfo(""SiPixelStatusProducer"")
"
-------------------------------------------------------------------------
"```
lumiSeg.put(std::move(result), std::string(""SiPixelStatus""));
edm::LogInfo(""SiPixelStatusProducer"");
```"
-------------------------------------------------------------------------
"lumiSeg.put(std::move(result), std::string(""siPixelStatus""));
edm::LogInfo(""SiPixelStatusProducer"")
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"recordName   = cms.untracked.string(""SiPixelQualityFromDbRcd"")
"
-------------------------------------------------------------------------
"recordName = cms.string(""SiPixelQualityFromDbRcd"")"
-------------------------------------------------------------------------
"recordName   = cms.untracked.string(""SiPixelQualityFromDbRcd"")
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"siPixelStatusVtr_.clear();


-----------------------------------------------------------------------------------------------
SiPixelStatusManager::rankByLumi(SiPixelDetectorStatus status1,SiPixelDetectorStatus status2) 
urn (status1.getLSRange().first < status2.getLSRange().first); }


SiPixelStatusManager::createPayloads(){
 sort the vector according to lumi
d::sort(siPixelStatusVtr_.begin(), siPixelStatusVtr_.end(), SiPixelStatusManager::rankByLumi);

 create FEDerror25 ROCs and bad ROCs from PCL
PixelStatusManager::createFEDerror25();
PixelStatusManager::createBadComponents();

 realse the cost of siPixelStatusVtr_ since it is not needed anymore
PixelStatusVtr_.clear();
"
-------------------------------------------------------------------------
"```cpp
SiPixelStatusManager::createPayloads(){
  // sort the vector according to lumi
  std::sort(siPixelStatusVtr_.begin(), siPixelStatusVtr_.end(), SiPixelStatusManager::rankByLumi);

  // create FEDerror25 ROCs and bad ROCs from PCL
  PixelStatusManager::createFEDerror25();
  PixelStatusManager::createBadComponents();

  // release the memory cost of siPixelStatusVtr_ since it is not needed anymore
  siPixelStatusVtr_.clear();
}
```"
-------------------------------------------------------------------------
"siPixelStatusVtr_.clear();


-----------------------------------------------------------------------------------------------
SiPixelStatusManager::rankByLumi(SiPixelDetectorStatus status1,SiPixelDetectorStatus status2) 
urn (status1.getLSRange().first < status2.getLSRange().first); }


SiPixelStatusManager::createPayloads(){
 sort the vector according to lumi
d::sort(siPixelStatusVtr_.begin(), siPixelStatusVtr_.end(), SiPixelStatusManager::rankByLumi);

 create FEDerror25 ROCs and bad ROCs from PCL
PixelStatusManager::createFEDerror25();
PixelStatusManager::createBadComponents();

 realse the cost of siPixelStatusVtr_ since it is not needed anymore
PixelStatusVtr_.clear();
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"SiPixelDetectorStatus tmpStatus = (*siPixelStatusHandle);
if(tmpStatus.digiOccDET()>0){ // only put in SiPixelDetectorStatus with non zero digi (pixel hit)
  siPixelStatusVtr_.push_back(tmpStatus);
}
   edm::LogWarning(""SiPixelStatusManager"")
    << "" SiPixelDetectorStatus is not valid for run ""<<iLumi.run()<<"" lumi ""<<iLumi.luminosityBlock()<< std::endl;
PixelStatusVtr_iterator firstStatus    = siPixelStatusVtr_.begin();
PixelStatusVtr_iterator lastStatus     = siPixelStatusVtr_.end();
PixelStatusMap_.clear();
"
-------------------------------------------------------------------------
"```cpp
SiPixelDetectorStatus tmpStatus = (*siPixelStatusHandle);
if(tmpStatus.digiOccDET() > 0) { 
  siPixelStatusVtr_.push_back(tmpStatus);
}
edm::LogWarning(""SiPixelStatusManager"") << ""SiPixelDetectorStatus is not valid for run "" << iLumi.run() << "" lumi "" << iLumi.luminosityBlock() << std::endl;
PixelStatusVtr_iterator firstStatus = siPixelStatusVtr_.begin();
PixelStatusVtr_iterator lastStatus = siPixelStatusVtr_.end();
PixelStatusMap_.clear();
```"
-------------------------------------------------------------------------
"SiPixelDetectorStatus tmpStatus = (*siPixelStatusHandle);
if(tmpStatus.digiOccDET()>0){ // only put in SiPixelDetectorStatus with non zero digi (pixel hit)
  siPixelStatusVtr_.push_back(tmpStatus);
}
   edm::LogWarning(""SiPixelStatusManager"")
    << "" SiPixelDetectorStatus is not valid for run ""<<iLumi.run()<<"" lumi ""<<iLumi.luminosityBlock()<< std::endl;
PixelStatusVtr_iterator firstStatus    = siPixelStatusVtr_.begin();
PixelStatusVtr_iterator lastStatus     = siPixelStatusVtr_.end();
PixelStatusMap_.clear();
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"for (siPixelStatusVtr_iterator it = firstStatus; it != lastStatus; it) {

       tmpLumi = edm::LuminosityBlockNumber_t(it->getLSRange().first);
       tmpSiPixelStatus = (*it); 
      tmpSiPixelStatus.updateDetectorStatus((*it));
      tmpSiPixelStatus.setLSRange(int(tmpLumi), (*it).getLSRange().second);
    siPixelStatusVtr_iterator currentIt = it;
    siPixelStatusVtr_iterator nextIt = (currentIt);
         siPixelStatusMap_[tmpLumi] = tmpSiPixelStatus;
// (only when siPixelStatusVtr_.size() > nLumi_ or equivalently current siPixelStatusMap_.size()>1
if(siPixelStatusVtr_.size()%nLumi_!=0 && siPixelStatusMap_.size()>1){
   siPixelStatusMap_iterator iterEnd = siPixelStatusMap_.end();
"
-------------------------------------------------------------------------
"for (siPixelStatusVtr_iterator it = firstStatus; it != lastStatus; it) {

       tmpLumi = edm::LuminosityBlockNumber_t(it->getLSRange().first);
       tmpSiPixelStatus = (*it); 
       tmpSiPixelStatus.updateDetectorStatus((*it));
       tmpSiPixelStatus.setLSRange(int(tmpLumi), (*it).getLSRange().second);
       siPixelStatusVtr_iterator currentIt = it;
       siPixelStatusVtr_iterator nextIt = (currentIt);
       siPixelStatusMap_[tmpLumi] = tmpSiPixelStatus;
       // Check condition: (only when siPixelStatusVtr_.size() > nLumi_ or equivalently current siPixelStatusMap_.size()>1)
       if(siPixelStatusVtr_.size() % nLumi_ != 0 && siPixelStatusMap_.size() > 1){
           siPixelStatusMap_iterator iterEnd = siPixelStatusMap_.end();
       }
}"
-------------------------------------------------------------------------
"for (siPixelStatusVtr_iterator it = firstStatus; it != lastStatus; it) {

       tmpLumi = edm::LuminosityBlockNumber_t(it->getLSRange().first);
       tmpSiPixelStatus = (*it); 
      tmpSiPixelStatus.updateDetectorStatus((*it));
      tmpSiPixelStatus.setLSRange(int(tmpLumi), (*it).getLSRange().second);
    siPixelStatusVtr_iterator currentIt = it;
    siPixelStatusVtr_iterator nextIt = (currentIt);
         siPixelStatusMap_[tmpLumi] = tmpSiPixelStatus;
// (only when siPixelStatusVtr_.size() > nLumi_ or equivalently current siPixelStatusMap_.size()>1
if(siPixelStatusVtr_.size()%nLumi_!=0 && siPixelStatusMap_.size()>1){
   siPixelStatusMap_iterator iterEnd = siPixelStatusMap_.end();
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"(iterBeforeLastIOV->second).setLSRange((iterBeforeLastIOV->second).getLSRange().first, (iterLastIOV->second).getLSRange().second);

siPixelStatusMap_.erase(iterLastIOV);
::LuminosityBlockNumber_t tmpLumi;
 (siPixelStatusVtr_iterator it = firstStatus; it != lastStatus; it) {
        tmpLumi = edm::LuminosityBlockNumber_t(it->getLSRange().first);
        tmpSiPixelStatus = (*it);
        tmpSiPixelStatus.updateDetectorStatus((*it));
        tmpSiPixelStatus.setLSRange(int(tmpLumi),(*it).getLSRange().second);
  siPixelStatusVtr_iterator currentIt = it;
  siPixelStatusVtr_iterator nextIt = (currentIt);
    siPixelStatusMap_[tmpLumi]=tmpSiPixelStatus;
"
-------------------------------------------------------------------------
"```cpp
(siPixelStatusMap_.erase(iterLastIOV);
::LuminosityBlockNumber_t tmpLumi;
for (siPixelStatusVtr_iterator it = firstStatus; it != lastStatus; it++) {
    tmpLumi = edm::LuminosityBlockNumber_t(it->getLSRange().first);
    tmpSiPixelStatus = (*it);
    tmpSiPixelStatus.updateDetectorStatus((*it));
    tmpSiPixelStatus.setLSRange(int(tmpLumi), (*it).getLSRange().second);
    siPixelStatusVtr_iterator currentIt = it;
    siPixelStatusVtr_iterator nextIt = (++currentIt);
    siPixelStatusMap_[tmpLumi] = tmpSiPixelStatus;
}
```"
-------------------------------------------------------------------------
"(iterBeforeLastIOV->second).setLSRange((iterBeforeLastIOV->second).getLSRange().first, (iterLastIOV->second).getLSRange().second);

siPixelStatusMap_.erase(iterLastIOV);
::LuminosityBlockNumber_t tmpLumi;
 (siPixelStatusVtr_iterator it = firstStatus; it != lastStatus; it) {
        tmpLumi = edm::LuminosityBlockNumber_t(it->getLSRange().first);
        tmpSiPixelStatus = (*it);
        tmpSiPixelStatus.updateDetectorStatus((*it));
        tmpSiPixelStatus.setLSRange(int(tmpLumi),(*it).getLSRange().second);
  siPixelStatusVtr_iterator currentIt = it;
  siPixelStatusVtr_iterator nextIt = (currentIt);
    siPixelStatusMap_[tmpLumi]=tmpSiPixelStatus;
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"if(siPixelStatusMap_.size()>1){
   siPixelStatusMap_iterator iterEnd = siPixelStatusMap_.end();
"
-------------------------------------------------------------------------
"if(siPixelStatusMap_.size() > 1){
    siPixelStatusMap_iterator iterEnd = siPixelStatusMap_.end();"
-------------------------------------------------------------------------
"if(siPixelStatusMap_.size()>1){
   siPixelStatusMap_iterator iterEnd = siPixelStatusMap_.end();
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"(iterBeforeLastIOV->second).setLSRange((iterBeforeLastIOV->second).getLSRange().first, (iterLastIOV->second).getLSRange().second);
siPixelStatusMap_.erase(iterLastIOV);
(outputBase_ == ""runbased"" || ( (int(siPixelStatusVtr_.size()) <= nLumi_ && outputBase_ == ""nLumibased"")) ){
LuminosityBlockNumber_t tmpLumi = edm::LuminosityBlockNumber_t(firstStatus->getLSRange().first);
elDetectorStatus tmpSiPixelStatus = (*firstStatus);
elStatusVtr_iterator nextStatus = siPixelStatusVtr_.begin();
siPixelStatusVtr_iterator it = nextStatus; it != lastStatus; it) {
 tmpSiPixelStatus.updateDetectorStatus((*it));
 tmpSiPixelStatus.setLSRange(int(tmpLumi),(*it).getLSRange().second); 
"
-------------------------------------------------------------------------
"(iterBeforeLastIOV->second).setLSRange((iterBeforeLastIOV->second).getLSRange().first, (iterLastIOV->second).getLSRange().second);
siPixelStatusMap_.erase(iterLastIOV);
if(outputBase_ == ""runbased"" || (int(siPixelStatusVtr_.size()) <= nLumi_ && outputBase_ == ""nLumibased"")){
    LuminosityBlockNumber_t tmpLumi = edm::LuminosityBlockNumber_t(firstStatus->getLSRange().first);
    elDetectorStatus tmpSiPixelStatus = (*firstStatus);
    elStatusVtr_iterator nextStatus = siPixelStatusVtr_.begin();
    for(siPixelStatusVtr_iterator it = nextStatus; it != lastStatus; ++it) {
        tmpSiPixelStatus.updateDetectorStatus((*it));
        tmpSiPixelStatus.setLSRange(int(tmpLumi), (*it).getLSRange().second);
    }
}"
-------------------------------------------------------------------------
"(iterBeforeLastIOV->second).setLSRange((iterBeforeLastIOV->second).getLSRange().first, (iterLastIOV->second).getLSRange().second);
siPixelStatusMap_.erase(iterLastIOV);
(outputBase_ == ""runbased"" || ( (int(siPixelStatusVtr_.size()) <= nLumi_ && outputBase_ == ""nLumibased"")) ){
LuminosityBlockNumber_t tmpLumi = edm::LuminosityBlockNumber_t(firstStatus->getLSRange().first);
elDetectorStatus tmpSiPixelStatus = (*firstStatus);
elStatusVtr_iterator nextStatus = siPixelStatusVtr_.begin();
siPixelStatusVtr_iterator it = nextStatus; it != lastStatus; it) {
 tmpSiPixelStatus.updateDetectorStatus((*it));
 tmpSiPixelStatus.setLSRange(int(tmpLumi),(*it).getLSRange().second); 
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"siPixelStatusVtr_iterator firstStatus = siPixelStatusVtr_.begin();
edm::LuminosityBlockNumber_t  firstLumi = edm::LuminosityBlockNumber_t(firstStatus->getLSRange().first);
SiPixelDetectorStatus  firstFEDerror25 = (*firstStatus);
siPixelStatusVtr_iterator lastStatus = siPixelStatusVtr_.end();
edm::LuminosityBlockNumber_t previousLumi = firstLumi;

siPixelStatusVtr_iterator secondStatus = siPixelStatusVtr_.begin();
for (siPixelStatusVtr_iterator it = secondStatus; it != lastStatus; it) {
    // init for each lumi section (iterator)
    edm::LuminosityBlockNumber_t tmpLumi = edm::LuminosityBlockNumber_t(it->getLSRange().first);
    SiPixelDetectorStatus tmpFEDerror25 = (*it);

"
-------------------------------------------------------------------------
"siPixelStatusVtr_iterator firstStatus = siPixelStatusVtr_.begin();
edm::LuminosityBlockNumber_t  firstLumi = edm::LuminosityBlockNumber_t(firstStatus->getLSRange().first);
SiPixelDetectorStatus  firstFEDerror25 = (*firstStatus);
siPixelStatusVtr_iterator lastStatus = siPixelStatusVtr_.end();
edm::LuminosityBlockNumber_t previousLumi = firstLumi;

siPixelStatusVtr_iterator secondStatus = siPixelStatusVtr_.begin();
for (siPixelStatusVtr_iterator it = secondStatus; it != lastStatus; ++it) {
    // init for each lumi section (iterator)
    edm::LuminosityBlockNumber_t tmpLumi = edm::LuminosityBlockNumber_t(it->getLSRange().first);
    SiPixelDetectorStatus tmpFEDerror25 = (*it);"
-------------------------------------------------------------------------
"siPixelStatusVtr_iterator firstStatus = siPixelStatusVtr_.begin();
edm::LuminosityBlockNumber_t  firstLumi = edm::LuminosityBlockNumber_t(firstStatus->getLSRange().first);
SiPixelDetectorStatus  firstFEDerror25 = (*firstStatus);
siPixelStatusVtr_iterator lastStatus = siPixelStatusVtr_.end();
edm::LuminosityBlockNumber_t previousLumi = firstLumi;

siPixelStatusVtr_iterator secondStatus = siPixelStatusVtr_.begin();
for (siPixelStatusVtr_iterator it = secondStatus; it != lastStatus; it) {
    // init for each lumi section (iterator)
    edm::LuminosityBlockNumber_t tmpLumi = edm::LuminosityBlockNumber_t(it->getLSRange().first);
    SiPixelDetectorStatus tmpFEDerror25 = (*it);

"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"if ALCAHARVESTSiPixelQuality.debug == cms.untracked.bool(True) :
ALCAHARVESTSiPixelQuality_dbOutput.append(
    cms.PSet(record = cms.string('SiPixelQualityFromDbRcd_PCL'),
             tag = cms.string('SiPixelQualityFromDbRcd_PCL'),
             timetype = cms.untracked.string('lumiid')
             )
)

"
-------------------------------------------------------------------------
"```python
if ALCAHARVESTSiPixelQuality.debug:
    ALCAHARVESTSiPixelQuality_dbOutput.extend([
        cms.PSet(record=cms.string('SiPixelQualityFromDbRcd_PCL'),
                 tag=cms.string('SiPixelQualityFromDbRcd_PCL'),
                 timetype=cms.untracked.string('lumiid')
                 )
    ])
```"
-------------------------------------------------------------------------
"if ALCAHARVESTSiPixelQuality.debug == cms.untracked.bool(True) :
ALCAHARVESTSiPixelQuality_dbOutput.append(
    cms.PSet(record = cms.string('SiPixelQualityFromDbRcd_PCL'),
             tag = cms.string('SiPixelQualityFromDbRcd_PCL'),
             timetype = cms.untracked.string('lumiid')
             )
)

"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"for obj in ('SimL1TCalorimeter','SimL1TMuonCommon','SimL1TMuon','SimL1TechnicalTriggers','SimL1EmulatorCore','ecalDigiSequence','hcalDigiSequence','calDigi','me0TriggerPseudoDigiSequence','hgcalTriggerGeometryESProducer'):
"
-------------------------------------------------------------------------
"for obj in ('SimL1TCalorimeter','SimL1TMuonCommon','SimL1TMuon','SimL1TechnicalTriggers','SimL1EmulatorCore','ecalDigiSequence','hcalDigiSequence','calDigi','me0TriggerPseudoDigiSequence','hgcalTriggerGeometryESProducer'):
    if hasattr(process, obj):
        delattr(process, obj)"
-------------------------------------------------------------------------
"for obj in ('SimL1TCalorimeter','SimL1TMuonCommon','SimL1TMuon','SimL1TechnicalTriggers','SimL1EmulatorCore','ecalDigiSequence','hcalDigiSequence','calDigi','me0TriggerPseudoDigiSequence','hgcalTriggerGeometryESProducer'):
"
-------------------------------------------------------------------------
"Recom
PRs: 22813, 22822"
-------------------------------------------------------------------------
=========================================================================
"process.load('DQM.L1TMonitor.L1TStage2FED_cff') # stage2 L1T
"
-------------------------------------------------------------------------
"Expr(value=Call(func=Attribute(value=Name(id='process', ctx=Load()), attr='load', ctx=Load()), args=[Constant(value='DQM.L1TMonitor.L1Tstage2FED_cff')], keywords=[]))"
-------------------------------------------------------------------------
"process.load('DQM.L1TMonitor.L1TStage2FED_cff') # stage2 L1T
"
-------------------------------------------------------------------------
"Recom
PRs: 22784, 22795"
-------------------------------------------------------------------------
=========================================================================
"'Omtf' : [1],
"
-------------------------------------------------------------------------
"`Omtf` : [1],"
-------------------------------------------------------------------------
"'Omtf' : [1],
"
-------------------------------------------------------------------------
"Recom
PRs: 22771, 22793"
-------------------------------------------------------------------------
=========================================================================
"ignoreBin = cms.untracked.vint32(ignoreBins['Omtf']),
"
-------------------------------------------------------------------------
ignoreBin = cms.untracked.vint32(ignoreBins['Omtf'])
-------------------------------------------------------------------------
"ignoreBin = cms.untracked.vint32(ignoreBins['Omtf']),
"
-------------------------------------------------------------------------
"Recom
PRs: 22771, 22793"
-------------------------------------------------------------------------
=========================================================================
"l1tStage2OmtfOutVsuGMTInRatioClient.ignoreBin = cms.untracked.vint32(ignoreBins['Omtf'])
"
-------------------------------------------------------------------------
l1tStage2OmtfOutVsuGMTInRatioClient.ignoreBin = cms.untracked.vint32(ignoreBins['Omtf'])
-------------------------------------------------------------------------
"l1tStage2OmtfOutVsuGMTInRatioClient.ignoreBin = cms.untracked.vint32(ignoreBins['Omtf'])
"
-------------------------------------------------------------------------
"Recom
PRs: 22771, 22793"
-------------------------------------------------------------------------
=========================================================================
"ignoreBin = cms.untracked.vint32([1]), # ignore the BX range bin
"
-------------------------------------------------------------------------
"```python
ignoreBin = cms.untracked.vint32(l1tStage2uGMTOutVsuGTIn.ignoreBin) # ignore the BX range bin
```"
-------------------------------------------------------------------------
"ignoreBin = cms.untracked.vint32([1]), # ignore the BX range bin
"
-------------------------------------------------------------------------
"Recom
PRs: 22751, 22792"
-------------------------------------------------------------------------
=========================================================================
"AAGFilter = triggerResultsFilter.clone(triggerConditions = cms.vstring(""HLT_ZeroBias_FirstCollisionAfterAbortGap_*""),
hltResults = cms.InputTag( ""TriggerResults"", """", ""HLT"" ),
l1tResults = cms.InputTag( """" ),
throw = cms.bool(False)
)

er.clone(triggerConditions = cms.vstring(""HLT_IsoMu20_*""),
         hltResults = cms.InputTag( ""TriggerResults"", """", ""HLT"" ),
         l1tResults = cms.InputTag( """" ),
         throw = cms.bool(False)
         )

lone(triggerConditions = cms.vstring(""HLT_ZeroBias_*"",),
     hltResults = cms.InputTag( ""TriggerResults"", """", ""HLT"" ),
     l1tResults = cms.InputTag( """" ),
     throw = cms.bool(False)
     )
"
-------------------------------------------------------------------------
"AAGFilter = triggerResultsFilter.clone(triggerConditions = cms.vstring(""HLT_ZeroBias_FirstCollisionAfterAbortGap_*""),
                                          hltResults = cms.InputTag( ""TriggerResults"", """", ""HLT"" ),
                                          l1tResults = cms.InputTag( """" ),
                                          throw = cms.bool(False)
                                         )

IsoMuonFilter = triggerResultsFilter.clone(triggerConditions = cms.vstring(""HLT_IsoMu20_*""),
                                           hltResults = cms.InputTag( ""TriggerResults"", """", ""HLT"" ),
                                           l1tResults = cms.InputTag( """" ),
                                           throw = cms.bool(False)
                                           )

ZeroBiasFilter = triggerResultsFilter.clone(triggerConditions = cms.vstring(""HLT_ZeroBias_*"",),
                                            hltResults = cms.InputTag( ""TriggerResults"", """", ""HLT"" ),
                                            l1tResults = cms.InputTag( """" ),
                                            throw = cms.bool(False)
                                            )"
-------------------------------------------------------------------------
"AAGFilter = triggerResultsFilter.clone(triggerConditions = cms.vstring(""HLT_ZeroBias_FirstCollisionAfterAbortGap_*""),
hltResults = cms.InputTag( ""TriggerResults"", """", ""HLT"" ),
l1tResults = cms.InputTag( """" ),
throw = cms.bool(False)
)

er.clone(triggerConditions = cms.vstring(""HLT_IsoMu20_*""),
         hltResults = cms.InputTag( ""TriggerResults"", """", ""HLT"" ),
         l1tResults = cms.InputTag( """" ),
         throw = cms.bool(False)
         )

lone(triggerConditions = cms.vstring(""HLT_ZeroBias_*"",),
     hltResults = cms.InputTag( ""TriggerResults"", """", ""HLT"" ),
     l1tResults = cms.InputTag( """" ),
     throw = cms.bool(False)
     )
"
-------------------------------------------------------------------------
"Recom
PRs: 22740, 22791"
-------------------------------------------------------------------------
=========================================================================
"OfflineGainNtuple_StdBunch = cms.Sequence( ZeroBiasFilter  ~AAGFilter  siStripBFieldOnFilter  
OfflineGainNtuple_StdBunch0T = cms.Sequence( ZeroBiasFilter  ~AAGFilter  siStripBFieldOffFilter  
"
-------------------------------------------------------------------------
"```python
OfflineGainNtuple_StdBunch = cms.Sequence( ZeroBiasFilter + ~AAGFilter + siStripBFieldOnFilter )
OfflineGainNtuple_StdBunch0T = cms.Sequence( ZeroBiasFilter + ~AAGFilter + siStripBFieldOffFilter )
```"
-------------------------------------------------------------------------
"OfflineGainNtuple_StdBunch = cms.Sequence( ZeroBiasFilter  ~AAGFilter  siStripBFieldOnFilter  
OfflineGainNtuple_StdBunch0T = cms.Sequence( ZeroBiasFilter  ~AAGFilter  siStripBFieldOffFilter  
"
-------------------------------------------------------------------------
"Recom
PRs: 22740, 22791"
-------------------------------------------------------------------------
=========================================================================
"OfflineGainNtuple_IsoMuon = cms.Sequence( siStripBFieldOnFilter  IsolatedMuonFilter 
OfflineGainNtuple_IsoMuon0T = cms.Sequence( siStripBFieldOffFilter  IsolatedMuonFilter 
"
-------------------------------------------------------------------------
"```python
OfflineGainNtuple_IsoMuon = cms.Sequence( siStripBFieldOnFilter * IsolatedMuonFilter )
OfflineGainNtuple_IsoMuon0T = cms.Sequence( siStripBFieldOffFilter * IsolatedMuonFilter )
```"
-------------------------------------------------------------------------
"OfflineGainNtuple_IsoMuon = cms.Sequence( siStripBFieldOnFilter  IsolatedMuonFilter 
OfflineGainNtuple_IsoMuon0T = cms.Sequence( siStripBFieldOffFilter  IsolatedMuonFilter 
"
-------------------------------------------------------------------------
"Recom
PRs: 22740, 22791"
-------------------------------------------------------------------------
=========================================================================
"//	ONLINE ONLY!
if (_ptype==fOnline) {
	if (rawidHBHEValid != 0) {
	}
	if (rawidHFValid!=0) {
		_cOccupancyEmulvsBX_TTSubdet.fill(HcalTrigTowerDetId(rawidHFValid), bx,
			numHF);
		_cOccupancyCutEmulvsBX_TTSubdet.fill(HcalTrigTowerDetId(rawidHFValid), bx,
			numCutHF);
		_cOccupancyEmulvsLS_TTSubdet.fill(HcalTrigTowerDetId(rawidHFValid), 
			_currentLS,numHF);
		_cOccupancyCutEmulvsLS_TTSubdet.fill(HcalTrigTowerDetId(rawidHFValid), 
			_currentLS, numCutHF);
		_cMsnDatavsLS_TTSubdet.fill(HcalTrigTowerDetId(rawidHFValid),
			_currentLS, numMsnHF);
		_cMsnCutDatavsLS_TTSubdet.fill(HcalTrigTowerDetId(rawidHFValid),
			_currentLS, numMsnCutHF);
		_cMsnDatavsBX_TTSubdet.fill(HcalTrigTowerDetId(rawidHFValid),
			bx, numMsnHF);
"
-------------------------------------------------------------------------
"//	ONLINE ONLY!
if (_ptype==fOnline) {
	if (hbheTPFound && rawidHBHEValid != 0) {
	}
	if (hfTPFound && rawidHFValid!=0) {
		_cOccupancyEmulvsBX_TTSubdet.fill(HcalTrigTowerDetId(rawidHFValid), bx,
			numHF);
		_cOccupancyCutEmulvsBX_TTSubdet.fill(HcalTrigTowerDetId(rawidHFValid), bx,
			numCutHF);
		_cOccupancyEmulvsLS_TTSubdet.fill(HcalTrigTowerDetId(rawidHFValid), 
			_currentLS,numHF);
		_cOccupancyCutEmulvsLS_TTSubdet.fill(HcalTrigTowerDetId(rawidHFValid), 
			_currentLS, numCutHF);
		_cMsnDatavsLS_TTSubdet.fill(HcalTrigTowerDetId(rawidHFValid),
			_currentLS, numMsnHF);
		_cMsnCutDatavsLS_TTSubdet.fill(HcalTrigTowerDetId(rawidHFValid),
			_currentLS, numMsnCutHF);
		_cMsnDatavsBX_TTSubdet.fill(HcalTrigTowerDetId(rawidHFValid),
			bx, numMsnHF);
	}
}"
-------------------------------------------------------------------------
"process.emulTPDigisNoTDCCut.parameters = cms.untracked.PSet(
ADCThresholdHF = cms.uint32(255),
TDCMaskHF = cms.uint64(0xFFFFFFFFFFFFFFFF)

"
-------------------------------------------------------------------------
"Recom
PRs: 22552, 22553"
-------------------------------------------------------------------------
=========================================================================
"addToProcessAndTask('slimmedJetsPuppiNoMultiplicities', process.slimmedJetsNoDeepFlavour.clone(), process, task)
process.slimmedJetsPuppiNoMultiplicities.src = cms.InputTag(""selectedPatJetsPuppi"")
process.slimmedJetsPuppiNoMultiplicities.packedPFCandidates = cms.InputTag(""packedPFCandidates"")
  src=cms.InputTag(""slimmedJetsPuppiNoMultiplicities""),
   jetSource = cms.InputTag('slimmedJetsPuppiNoMultiplicities'),
"
-------------------------------------------------------------------------
"```
addToProcessAndTask('slimmedJetsPuppiNoMultiplicities', process.slimmedJetsNoDeepFlavour.clone(), process, task)
process.slimmedJetsPuppiNoMultiplicities.src = cms.InputTag(""selectedPatJetsPuppi"")
process.slimmedJetsPuppiNoMultiplicities.packedPFCandidates = cms.InputTag(""packedPFCandidates"")
src=cms.InputTag(""slimmedJetsPuppiNoMultiplicities""),
jetSource = cms.InputTag('slimmedJetsPuppiNoMultiplicities'),
```"
-------------------------------------------------------------------------
"addToProcessAndTask('slimmedJetsPuppiNoMultiplicities', process.slimmedJetsNoDeepFlavour.clone(), process, task)
process.slimmedJetsPuppiNoMultiplicities.src = cms.InputTag(""selectedPatJetsPuppi"")
process.slimmedJetsPuppiNoMultiplicities.packedPFCandidates = cms.InputTag(""packedPFCandidates"")
  src=cms.InputTag(""slimmedJetsPuppiNoMultiplicities""),
   jetSource = cms.InputTag('slimmedJetsPuppiNoMultiplicities'),
"
-------------------------------------------------------------------------
"Recom
PRs: 22396, 22508"
-------------------------------------------------------------------------
=========================================================================
"'keep *_hgcalTriggerPrimitiveDigiProducer_towerMap_*',
"
-------------------------------------------------------------------------
"+ ImportFrom(module='L1Trigger.L1TMuon.hackConditions_cff', names=[alias(name='tmAttrOvrd')], level=0)
+ Assign(targets=[Name(id='GunmetaltowerMap', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='hgcalTriggerPrimitiveDigiProducer_towerMap')], keywords=[])], ctx=Load())"
-------------------------------------------------------------------------
"from  L1Trigger.L1THGCal.hgcalTriggerPrimitives_cff import *
_phase2_siml1emulator = SimL1Emulator.copy()
_phase2_siml1emulator = hgcalTriggerPrimitives
from Configuration.Eras.Modifier_phase2_hgcal_cff import phase2_hgcal
phase2_hgcal.toReplaceWith( SimL1Emulator , _phase2_siml1emulator )
"
-------------------------------------------------------------------------
"Recom
PRs: 22387, 22487"
-------------------------------------------------------------------------
=========================================================================
"'keep *_hgcalTriggerPrimitiveDigiProducer_towerMap_*',
"
-------------------------------------------------------------------------
"+         'keep *_hgcalTriggerPrimitiveDigiProducer_towerMap_*',"
-------------------------------------------------------------------------
"'keep *_hgcalTriggerPrimitiveDigiProducer_towerMap_*',
"
-------------------------------------------------------------------------
"Recom
PRs: 22387, 22480"
-------------------------------------------------------------------------
=========================================================================
"0x00200000,
"
-------------------------------------------------------------------------
"```python
l1tStage2BmtfZeroSupp = cms.EDAnalyzer(
                                       0x00200000,
                                       0x00200000,
                                       0x00200000,
                                       0x00000000),
     # mask for outputs (pt==0 defines empty muon)
     maskCapId2 = cms.untracked.vint32(0x000001FF,
```"
-------------------------------------------------------------------------
"0x00200000,
"
-------------------------------------------------------------------------
"Recom
PRs: 22371, 22374"
-------------------------------------------------------------------------
=========================================================================
"ignoreHFfb2 = cms.untracked.bool(False),
"
-------------------------------------------------------------------------
"ignoreHFfb2 = cms.untracked.bool(False),

from:

l1tStage2CaloLayer1 = DQMEDAnalyzer('L1TStage2CaloLayer1',
     hcalTPSourceSent = cms.InputTag(""hcalDigis""),
     fedRawDataLabel  = cms.InputTag(""rawDataCollector""),
     histFolder = cms.string('L1T/L1TStage2CaloLayer1'),
 )

to:

l1tStage2CaloLayer1 = DQMEDAnalyzer('L1TStage2CaloLayer1',
     hcalTPSourceSent = cms.InputTag(""hcalDigis""),
     fedRawDataLabel  = cms.InputTag(""rawDataCollector""),
     histFolder = cms.string('L1T/L1TStage2CaloLayer1'),
     ignoreHFfb2 = cms.untracked.bool(False),
 )"
-------------------------------------------------------------------------
"ignoreHFfb2 = cms.untracked.bool(False),
"
-------------------------------------------------------------------------
"Recom
PRs: 22348, 22349"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2018_design'       : '100X_upgrade2018_design_IdealBS_v7',
'phase1_2018_realistic'    : '100X_upgrade2018_realistic_v11',
'phase1_2018_cosmics'      :   '100X_upgrade2018cosmics_realistic_deco_v9',
"
-------------------------------------------------------------------------
"'phase1_2018_design'       : '100X_postLS2_design_v2',
'phase1_2018_realistic'    : '100X_mc2017cosmics_realistic_peak_v3',
'phase1_2018_cosmics'      : '100X_mc2017cosmics_realistic_decov9',"
-------------------------------------------------------------------------
"'phase1_2018_design'       : '100X_upgrade2018_design_IdealBS_v7',
'phase1_2018_realistic'    : '100X_upgrade2018_realistic_v11',
'phase1_2018_cosmics'      :   '100X_upgrade2018cosmics_realistic_deco_v9',
"
-------------------------------------------------------------------------
"Recom
PRs: 22121, 22263"
-------------------------------------------------------------------------
=========================================================================
"process.load(""DQM.SiStripCommon.TkHistoMap_cff"")
"
-------------------------------------------------------------------------
"process.load(""DQM.SiStripCommon.TkHistoMap_cff"")"
-------------------------------------------------------------------------
"process.load(""DQM.SiStripCommon.TkHistoMap_cff"")
"
-------------------------------------------------------------------------
"Recom
PRs: 22148, 22149"
-------------------------------------------------------------------------
=========================================================================
",ReadPrescalesFromFile = cms.bool(False)
"
-------------------------------------------------------------------------
",ReadPrescalesFromFile = cms.bool(False)"
-------------------------------------------------------------------------
",ReadPrescalesFromFile = cms.bool(False)
"
-------------------------------------------------------------------------
"Recom
PRs: 22131, 22132"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2018_realistic'    : '100X_upgrade2018_realistic_v9',
'phase1_2018_cosmics'      :   '100X_upgrade2018cosmics_realistic_deco_v7',
"
-------------------------------------------------------------------------
"autoCond = {
    'phase1_2018_realistic'    : '100X_upgrade2018_realistic_v9',
    'phase1_2018_cosmics'      : '100X_upgrade2018cosmics_realistic_deco_v7',
}"
-------------------------------------------------------------------------
"'phase1_2018_design'       : '100X_upgrade2018_design_IdealBS_v6',
'phase1_2018_realistic'    : '100X_upgrade2018_realistic_v10',
'phase1_2018_cosmics'      :   '100X_upgrade2018cosmics_realistic_deco_v8',
"
-------------------------------------------------------------------------
"Recom
PRs: 22075, 22078"
-------------------------------------------------------------------------
=========================================================================
"run2_miniAOD_80XLegacy.toModify( fatJetTable.variables, msoftdrop_chs = Var(""userFloat('ak8PFJetsCHSSoftDropMass')"",float, doc=""Legacy uncorrected soft drop mass with CHS"",precision=10))
"
-------------------------------------------------------------------------
"- Expr(value=Call(func=Attribute(value=Name(id='run2_miniAOD_80XLegacy', ctx=Load()), attr='toModify', ctx=Load()), args=[Attribute(value=Name(id='fatJetTable', ctx=Load()), attr='variables', ctx=Load())], keywords=[keyword(arg='msoftdrop_chs', value=Call(func=Name(id='Var', ctx=Load()), args=[Constant(value=""userFloat('ak8PFJetsCHSSoftDropMass')""), Name(id='float', ctx=Load())], keywords=[keyword(arg='doc', value=Constant(value='Legacy uncorrected soft drop mass with CHS')), keyword(arg='precision', value=Constant(value=10))])]))"
-------------------------------------------------------------------------
"run2_miniAOD_80XLegacy.toModify( fatJetTable.variables, msoftdrop_chs = Var(""userFloat('ak8PFJetsCHSSoftDropMass')"",float, doc=""Legacy uncorrected soft drop mass with CHS"",precision=10))
"
-------------------------------------------------------------------------
"Recom
PRs: 22037, 22038"
-------------------------------------------------------------------------
=========================================================================
"def customiseFor22001(process):
for producer in producers_by_type(process, ""CaloTowersCreator""):
    if hasattr(producer,'HcalCollapsed'):
        del producer.HcalCollapsed
if hasattr(process,'HcalTopologyIdealEP'):
    # should only be true for ""collapsed"" cases (2017, 2018)
    process.HcalTopologyIdealEP.MergePosition = cms.untracked.bool(True)
return process

"
-------------------------------------------------------------------------
"def customiseFor22001_backport(process):
    for producer in producers_by_type(process, ""CaloTowersCreator""):
        if hasattr(producer, 'HcalCollapsed'):
            del producer.HcalCollapsed
    if hasattr(process, 'HcalTopologyIdealEP'):
        # should only be true for ""collapsed"" cases (2017, 2018)
        process.HcalTopologyIdealEP.MergePosition = cms.untracked.bool(True)
    return process"
-------------------------------------------------------------------------
"process = customiseFor22001(process)
"
-------------------------------------------------------------------------
"Recom
PRs: 22001, 22002"
-------------------------------------------------------------------------
=========================================================================
"src=cms.InputTag(""slimmedJetsPuppi""),
 jetSource = cms.InputTag('slimmedJetsPuppi'),
"
-------------------------------------------------------------------------
"process.updatedPatJetsPuppiJetSpecific.userData.userFloats.src = [cms.InputTag(""slimmedJetsPuppi"")]"
-------------------------------------------------------------------------
"src=cms.InputTag(""slimmedJetsPuppi""),
 jetSource = cms.InputTag('slimmedJetsPuppi'),
"
-------------------------------------------------------------------------
"Recom
PRs: 21759, 21941"
-------------------------------------------------------------------------
=========================================================================
"_pp_on_XeXe_extraCommands = ['keep CrossingFramePlaybackInfoNew_mix_*_*','keep *_heavyIon_*_*']
from Configuration.Eras.Modifier_pp_on_XeXe_2017_cff import pp_on_XeXe_2017
pp_on_XeXe_2017.toModify( SimGeneralRAW, outputCommands = SimGeneralRAW.outputCommands  _pp_on_XeXe_extraCommands )
pp_on_XeXe_2017.toModify( SimGeneralFEVTDEBUG, outputCommands = SimGeneralFEVTDEBUG.outputCommands  _pp_on_XeXe_extraCommands )
pp_on_XeXe_2017.toModify( SimGeneralRECO, outputCommands = SimGeneralRECO.outputCommands  _pp_on_XeXe_extraCommands )
pp_on_XeXe_2017.toModify( SimGeneralAOD, outputCommands = SimGeneralAOD.outputCommands  _pp_on_XeXe_extraCommands )
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_pp_on_XeXe_2017_cff import pp_on_XeXe_2017
_pp_on_XeXe_extraCommands = ['keep CrossingFramePlaybackInfoNew_mix_*_*', 'keep *_heavyIon_*_*']
pp_on_XeXe_2017.toModify(SimGeneralRAW, outputCommands = SimGeneralRAW.outputCommands + _pp_on_XeXe_extraCommands)
pp_on_XeXe_2017.toModify(SimGeneralFEVTDEBUG, outputCommands = SimGeneralFEVTDEBUG.outputCommands + _pp_on_XeXe_extraCommands)
pp_on_XeXe_2017.toModify(SimGeneralRECO, outputCommands = SimGeneralRECO.outputCommands + _pp_on_XeXe_extraCommands)
pp_on_XeXe_2017.toModify(SimGeneralAOD, outputCommands = SimGeneralAOD.outputCommands + _pp_on_XeXe_extraCommands)"
-------------------------------------------------------------------------
"_pp_on_XeXe_extraCommands = ['keep CrossingFramePlaybackInfoNew_mix_*_*','keep *_heavyIon_*_*']
from Configuration.Eras.Modifier_pp_on_XeXe_2017_cff import pp_on_XeXe_2017
pp_on_XeXe_2017.toModify( SimGeneralRAW, outputCommands = SimGeneralRAW.outputCommands  _pp_on_XeXe_extraCommands )
pp_on_XeXe_2017.toModify( SimGeneralFEVTDEBUG, outputCommands = SimGeneralFEVTDEBUG.outputCommands  _pp_on_XeXe_extraCommands )
pp_on_XeXe_2017.toModify( SimGeneralRECO, outputCommands = SimGeneralRECO.outputCommands  _pp_on_XeXe_extraCommands )
pp_on_XeXe_2017.toModify( SimGeneralAOD, outputCommands = SimGeneralAOD.outputCommands  _pp_on_XeXe_extraCommands )
"
-------------------------------------------------------------------------
"Recom
PRs: 21760, 21761"
-------------------------------------------------------------------------
=========================================================================
"if int( self.general[""maxevents""] ) < 0 and self.NJobs > 1:
if int( self.general[""maxevents""] ) / self.NJobs != float( self.general[""maxevents""] ) / self.NJobs:
    msg = (""maxevents has to be divisible by parallelJobs"")
    raise AllInOneError(msg)
"
-------------------------------------------------------------------------
"```python
if int(self.general[""maxevents""]) < 0 and self.NJobs > 1:
    if int(self.general[""maxevents""]) % self.NJobs != 0:
        msg = ""maxevents has to be divisible by parallelJobs""
        raise AllInOneError(msg)
```"
-------------------------------------------------------------------------
"if int( self.general[""maxevents""] ) < 0 and self.NJobs > 1:
if int( self.general[""maxevents""] ) / self.NJobs != float( self.general[""maxevents""] ) / self.NJobs:
    msg = (""maxevents has to be divisible by parallelJobs"")
    raise AllInOneError(msg)
"
-------------------------------------------------------------------------
"Recom
PRs: 21223, 21224"
-------------------------------------------------------------------------
=========================================================================
"try:
    self.NTracks = int(self.general[""maxtracks""])
    if self.NTracks < 0: raise ValueError
except ValueError:
    raise AllInOneError(""maxtracks has to be a positive integer, or 0 for no limit"")

if self.NTracks / self.NJobs != float(self.NTracks) / self.NJobs:
    raise AllInOneError(""maxtracks has to be divisible by parallelJobs"")

"
-------------------------------------------------------------------------
"try:
    self.NTracks = int(self.general[""maxtracks""])
    if self.NTracks < 0: raise ValueError
except ValueError:
    raise AllInOneError(""maxtracks has to be a positive integer, or 0 for no limit"")

if self.NTracks % self.parallelJobs != 0:
    raise AllInOneError(""maxtracks has to be divisible by parallelJobs"")"
-------------------------------------------------------------------------
"try:
    self.NTracks = int(self.general[""maxtracks""])
    if self.NTracks < 0: raise ValueError
except ValueError:
    raise AllInOneError(""maxtracks has to be a positive integer, or 0 for no limit"")

if self.NTracks / self.NJobs != float(self.NTracks) / self.NJobs:
    raise AllInOneError(""maxtracks has to be divisible by parallelJobs"")

"
-------------------------------------------------------------------------
"Recom
PRs: 21223, 21224"
-------------------------------------------------------------------------
=========================================================================
"process.TrackerOfflineValidation.oO[offlineValidationMode]Oo..maxTracks = .oO[maxtracks]Oo./ .oO[parallelJobs]Oo.
"
-------------------------------------------------------------------------
process.TrackerOfflineValidation.oO[offlineValidationMode]Oo..maxTracks = .oO[maxtracks]Oo./ .oO[parallelJobs]Oo.
-------------------------------------------------------------------------
"process.TrackerOfflineValidation.oO[offlineValidationMode]Oo..maxTracks = .oO[maxtracks]Oo./ .oO[parallelJobs]Oo.
"
-------------------------------------------------------------------------
"Recom
PRs: 21223, 21224"
-------------------------------------------------------------------------
=========================================================================
"digitizer.digiCfg.chargeCollectionEfficiency = cms.vdouble(endOfLifeCCEs)
digitizer.digiCfg.noise_MIP = cms.double( 1.0/5.0 )
"
-------------------------------------------------------------------------
"```
digitizer.digiCfg.chargeCollectionEfficiency = cms.vdouble(endOfLifeCCEs)
digitizer.digiCfg.noise_MIP = cms.double( 1.0/5.0 )
```"
-------------------------------------------------------------------------
"digitizer.digiCfg.chargeCollectionEfficiency = cms.vdouble(endOfLifeCCEs)
digitizer.digiCfg.noise_MIP = cms.double( 1.0/5.0 )
"
-------------------------------------------------------------------------
"Recom
PRs: 21156, 21157"
-------------------------------------------------------------------------
=========================================================================
"cms.PSet(
    QualityTestName = cms.string(""uGMT_BMTFhwEtaSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/BMTFInput/ugmtBMTFhwEta""),
    QualityTestSummaryEnabled = cms.uint32(0)
    ),
"
-------------------------------------------------------------------------
"cms.PSet(
    QualityTestName = cms.string(""uGMT_BMTFhwEtaSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/BMTFInput/ugmtBMTFhwEta""),
    QualityTestSummaryEnabled = cms.uint32(0)
)"
-------------------------------------------------------------------------
"cms.PSet(
    QualityTestName = cms.string(""uGMT_BMTFhwEtaSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/BMTFInput/ugmtBMTFhwEta""),
    QualityTestSummaryEnabled = cms.uint32(0)
    ),
"
-------------------------------------------------------------------------
"Recom
PRs: 20831, 20833"
-------------------------------------------------------------------------
=========================================================================
"cms.PSet(
    QualityTestName = cms.string(""uGMT_OMTFhwPhiNegSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/OMTFInput/ugmtOMTFglbhwPhiNeg""),
    QualityTestSummaryEnabled = cms.uint32(0)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGMT_OMTFhwEtaSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/OMTFInput/ugmtOMTFhwEta""),
    QualityTestSummaryEnabled = cms.uint32(0)
    ),
"
-------------------------------------------------------------------------
"cms.PSet(
    QualityTestName = cms.string(""uGMT_OMTFhwPhiNegSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/OMTFInput/ugmtOMTFglbhwPhiNeg""),
    QualityTestSummaryEnabled = cms.uint32(0)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGMT_OMTFhwEtaSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/OMTFInput/ugmtOMTFhwEta""),
    QualityTestSummaryEnabled = cms.uint32(0)
    ),"
-------------------------------------------------------------------------
"cms.PSet(
    QualityTestName = cms.string(""uGMT_OMTFhwPhiNegSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/OMTFInput/ugmtOMTFglbhwPhiNeg""),
    QualityTestSummaryEnabled = cms.uint32(0)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGMT_OMTFhwEtaSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/OMTFInput/ugmtOMTFhwEta""),
    QualityTestSummaryEnabled = cms.uint32(0)
    ),
"
-------------------------------------------------------------------------
"Recom
PRs: 20831, 20833"
-------------------------------------------------------------------------
=========================================================================
"cms.PSet(
    QualityTestName = cms.string(""uGMT_EMTFMuonPhiSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/ugmtMuonPhiEmtf""),
    QualityTestSummaryEnabled = cms.uint32(0)
    ),
"
-------------------------------------------------------------------------
"```python
cms.PSet(
    QualityTestName = cms.string(""uGMT_EMTFMuonPhiSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/ugmtMuonPhiEmtf""),
    QualityTestSummaryEnabled = cms.uint32(0)
    )
```"
-------------------------------------------------------------------------
"cms.PSet(
    QualityTestName = cms.string(""uGMT_EMTFMuonPhiSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/ugmtMuonPhiEmtf""),
    QualityTestSummaryEnabled = cms.uint32(0)
    ),
"
-------------------------------------------------------------------------
"Recom
PRs: 20831, 20833"
-------------------------------------------------------------------------
=========================================================================
"QualityTestName = cms.string(""zeroSupp_MismatchRatioMax0""),
QualityTestName = cms.string(""zeroSupp_MismatchRatioMax0""),
"
-------------------------------------------------------------------------
"QualityTestHist = cms.string(""L1T/L1TStage2uGMT/zeroSuppression/AllEvts/mismatchRatio""),
QualityTestSummaryEnabled = cms.uint32(1),
QualityTestName = cms.string(""zeroSupp_MismatchRatioMax0""),
QualityTestSummaryEnabled = cms.uint32(1)"
-------------------------------------------------------------------------
"QualityTestName = cms.string(""zeroSupp_MismatchRatioMax0""),
QualityTestName = cms.string(""zeroSupp_MismatchRatioMax0""),
"
-------------------------------------------------------------------------
"Recom
PRs: 20831, 20833"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Eras.Era_Run2_2017_cff import Run2_2017
self.eras=Run2_2017
self.skims=['AlCaPCCZeroBiasAlCaPCCRandom']
"
-------------------------------------------------------------------------
"```python
from Configuration.Eras.Era_Run2_2017_cff import Run2_2017

class AlCaLumiPixels(AlCa):
    def __init__(self):
        AlCa.__init__(self)
        self.eras=Run2_2017
        self.skims=['AlCaPCCZeroBiasAlCaPCCRandom']
```"
-------------------------------------------------------------------------
"from Configuration.Eras.Era_Run2_2017_cff import Run2_2017
self.eras=Run2_2017
self.skims=['AlCaPCCZeroBiasAlCaPCCRandom']
"
-------------------------------------------------------------------------
"Recom
PRs: 20580, 20585"
-------------------------------------------------------------------------
=========================================================================
"'keep *_slimmedGenJets__*',
'keep *_slimmedGenJetsAK8__*',
"
-------------------------------------------------------------------------
"- Expr(value=Tuple(elts=[Constant(value='keep *_slimmedGenJetsAK8__*')], ctx=Load()))
?                                                                        +

- Expr(value=Tuple(elts=[Constant(value='keep *_slimmedGenJetsAK8__*')], ctx=Load()))
+ Expr(value=Tuple(elts=[Constant(value='keep *_slimmedGenJets__*')], ctx=Load()))"
-------------------------------------------------------------------------
"
MicroEventContentGEN = cms.PSet(
outputCommands = cms.untracked.vstring(
    'keep *_slimmedGenJetsFlavourInfos_*_*',
    'keep *_slimmedGenJets__*',
    'keep *_slimmedGenJetsAK8__*',
    'keep *_genMetTrue_*_*',
)


oEventContentMC = cms.PSet(
outputCommands = cms.untracked.vstring(MicroEventContent.outputCommands)

oEventContentMC.outputCommands = MicroEventContentGEN.outputCommands
oEventContentMC.outputCommands = [
                                    'keep PileupSummaryInfos_slimmedAddPileupInfo_*_*',
                                    # RUN
                                    'keep L1GtTriggerMenuLite_l1GtTriggerMenuLite__*'
                                  ]
"
-------------------------------------------------------------------------
"Recom
PRs: 19853, 20485"
-------------------------------------------------------------------------
=========================================================================
"""selectedOfflinePrimaryVerticesWithBS""
),
"
-------------------------------------------------------------------------
"vertexRecoCollections = cms.VInputTag(""offlinePrimaryVertices"",
                                       ""offlinePrimaryVerticesWithBS"",
                                       ""selectedOfflinePrimaryVertices""
),"
-------------------------------------------------------------------------
"""selectedOfflinePrimaryVerticesWithBS""
),
"
-------------------------------------------------------------------------
"Recom
PRs: 19935, 20483"
-------------------------------------------------------------------------
=========================================================================
"
from Configuration.Eras.Modifier_phase2_timing_layer_cff import phase2_timing_layer
_vertexRecoCollectionsTiming = cms.VInputTag(""offlinePrimaryVertices"",
""offlinePrimaryVerticesWithBS"",
""selectedOfflinePrimaryVertices"",
""selectedOfflinePrimaryVerticesWithBS"",
""offlinePrimaryVertices4D"",
""selectedOfflinePrimaryVertices4D"",
)
flinePrimaryVertices.clone(src = cms.InputTag(""offlinePrimaryVertices4D""))

isSelection.copy()
inePrimaryVertices4D

 
ctions = _vertexRecoCollectionsTiming

ysisSelection,
lysisSelectionTiming )
"
-------------------------------------------------------------------------
"```python
from Configuration.Eras.Modifier_phase2_timing_layer_cff import phase2_timing_layer
_vertexRecoCollectionsTiming = cms.VInputTag(""offlinePrimaryVertices"",
""offlinePrimaryVerticesWithBS"",
""selectedOfflinePrimaryVertices"",
""selectedOfflinePrimaryVerticesWithBS"",
""offlinePrimaryVertices4D"",
""selectedOfflinePrimaryVertices4D"",
)
offlinePrimaryVertices.clone(src = cms.InputTag(""offlinePrimaryVertices4D""))

offlinePrimaryVertices4D.isSelection.copy()

vertexRecoCollections = _vertexRecoCollectionsTiming

analysisSelection,
             analysisSelectionTiming)
```"
-------------------------------------------------------------------------
"
from Configuration.Eras.Modifier_phase2_timing_layer_cff import phase2_timing_layer
_vertexRecoCollectionsTiming = cms.VInputTag(""offlinePrimaryVertices"",
""offlinePrimaryVerticesWithBS"",
""selectedOfflinePrimaryVertices"",
""selectedOfflinePrimaryVerticesWithBS"",
""offlinePrimaryVertices4D"",
""selectedOfflinePrimaryVertices4D"",
)
flinePrimaryVertices.clone(src = cms.InputTag(""offlinePrimaryVertices4D""))

isSelection.copy()
inePrimaryVertices4D

 
ctions = _vertexRecoCollectionsTiming

ysisSelection,
lysisSelectionTiming )
"
-------------------------------------------------------------------------
"Recom
PRs: 19935, 20483"
-------------------------------------------------------------------------
=========================================================================
")
"
-------------------------------------------------------------------------
"```python
- Expr(value=Tuple(elts=[Constant(value='keep *_electronMergedSeedsFromMultiCl_*_*')], ctx=Load()))
+ Expr(value=Tuple(elts=[Constant(value='keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*')], ctx=Load()))
```"
-------------------------------------------------------------------------
")
"
-------------------------------------------------------------------------
"Recom
PRs: 20368, 20407"
-------------------------------------------------------------------------
=========================================================================
"objtypeLatex=""#mu""
objtypeLatex=""#gamma""
objtypeLatex=""e""
objtypeLatex=""MET""
objtypeLatex=""#tau""
objtypeLatex=objtype
"
-------------------------------------------------------------------------
"```python
def efficiency_string(objtype, plot_type, triggerpath):
    # --- IMPORTANT: Add here an elif if you are introducing a new collection
    #                (see EVTColContainer::getTypeString)
    if objtype == ""Mu"":
        objtypeLatex = ""#mu""
    elif objtype == ""Photon"":
        objtypeLatex = ""#gamma""
    elif objtype == ""Ele"":
        objtypeLatex = ""e""
    elif objtype == ""MET"":
        objtypeLatex = ""MET""
    elif objtype == ""PFTau"":
        objtypeLatex = ""#tau""
    else:
        objtypeLatex = objtype

    numer_description = ""# gen %s passed the %s"" % (objtypeLatex, triggerpath)
    denom_description = ""# gen %s "" % (objtypeLatex)
```"
-------------------------------------------------------------------------
"objtypeLatex=""#mu""
objtypeLatex=""#gamma""
objtypeLatex=""e""
objtypeLatex=""MET""
objtypeLatex=""#tau""
objtypeLatex=objtype
"
-------------------------------------------------------------------------
"Recom
PRs: 20344, 20345"
-------------------------------------------------------------------------
=========================================================================
"all_titles,input_type,triggerpath,input_type)
"
-------------------------------------------------------------------------
"def efficiency_string(objtype, plot_type, triggerpath):
    all_titles = ""%s for trigger %s; %s; %s"" % (title, triggerpath, xAxis, yAxis)
    return ""Eff_%s_%s '%s' %s_%s %s"" % (input_type, triggerpath, all_titles, input_type)"
-------------------------------------------------------------------------
"all_titles,input_type,triggerpath,input_type)
"
-------------------------------------------------------------------------
"Recom
PRs: 20344, 20345"
-------------------------------------------------------------------------
=========================================================================
"s = _config.__getattribute__(an)
vstr = s.__getattribute__(""hltPathsToCheck"")
map(lambda x: triggers.add(x.replace(""_v"","""")),vstr)
      for trig in triggers:
          efficiency_strings.append(efficiency_string(obj,type,trig))
"
-------------------------------------------------------------------------
"```python
efficiency_strings = []
from HLTriggerOffline.SMP.hltSMPValidator_cfi import hltSMPValidator as _config

triggers = set([])
for an in _config.analysis:
    s = _config.__getattribute__(an)
    vstr = s.__getattribute__(""hltPathsToCheck"")
    map(lambda x: triggers.add(x.replace(""_v"","""")), vstr)

for trig in triggers:
    efficiency_strings.append(efficiency_string(obj, type, trig))
```"
-------------------------------------------------------------------------
"s = _config.__getattribute__(an)
vstr = s.__getattribute__(""hltPathsToCheck"")
map(lambda x: triggers.add(x.replace(""_v"","""")),vstr)
      for trig in triggers:
          efficiency_strings.append(efficiency_string(obj,type,trig))
"
-------------------------------------------------------------------------
"Recom
PRs: 20344, 20345"
-------------------------------------------------------------------------
=========================================================================
"hltSMPPostSingleEle
 hltSMPPostSingleMu
hltSMPPostSinglePhoton
"
-------------------------------------------------------------------------
"```python
hltSMPPostSingleEle.subDirs = ['HLT/SMP/SingleElectron']
hltSMPPostSingleEle.efficiencyProfile = efficiency_strings

hltSMPPostSingleMu.subDirs = ['HLT/SMP/SingleMuon']
hltSMPPostSingleMu.efficiencyProfile = efficiency_strings

hltSMPPostSinglePhoton.subDirs = ['HLT/SMP/SinglePhoton']
hltSMPPostSinglePhoton.efficiencyProfile = efficiency_strings

hltSMPPostProcessors = cms.Sequence()
```"
-------------------------------------------------------------------------
"hltSMPPostSingleEle
 hltSMPPostSingleMu
hltSMPPostSinglePhoton
"
-------------------------------------------------------------------------
"Recom
PRs: 20344, 20345"
-------------------------------------------------------------------------
=========================================================================
"""   abs(eta) < 1.479 && sigmaIetaIeta < 0.010  || ""\
""   abs(eta) > 1.479 && sigmaIetaIeta < 0.027 ) && ""\
"" ecalRecHitSumEtConeDR03 < (5.00.012*et) && hcalTowerSumEtConeDR03 < (5.00.0005*et )  && trkSumPtSolidConeDR03 < (5.0  0.0002*et)"" ),
"
-------------------------------------------------------------------------
"Photon_recCut     = cms.string(""abs(eta) < 1.479 && sigmaIetaIeta < 0.010 || ""\
""abs(eta) > 1.479 && sigmaIetaIeta < 0.027 ) && ""\
""ecalRecHitSumEtConeDR03 < (5.00.012*et) && hcalTowerSumEtConeDR03 < (5.00.0005*et) && ""\
""trkSumPtSolidConeDR03 < (5.0 0.0002*et)""),"
-------------------------------------------------------------------------
"""   abs(eta) < 1.479 && sigmaIetaIeta < 0.010  || ""\
""   abs(eta) > 1.479 && sigmaIetaIeta < 0.027 ) && ""\
"" ecalRecHitSumEtConeDR03 < (5.00.012*et) && hcalTowerSumEtConeDR03 < (5.00.0005*et )  && trkSumPtSolidConeDR03 < (5.0  0.0002*et)"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 20344, 20345"
-------------------------------------------------------------------------
=========================================================================
"hltPathsToCheck = cms.vstring(
  ""HLT_Photon33_v"",
  ""HLT_Photon50_v"",
  ""HLT_Photon75_v"",
  ""HLT_Photon90_v"",
  ""HLT_Photon120_v"",
  ""HLT_Photon165_HE10_v"",
  ""HLT_Photon33_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon50_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon75_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon90_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon120_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon165_R9Id90_HE10_IsoM_v"",
  ),
recPhotonLabel  = cms.string(""photons""),
# -- Analysis specific cuts
minCandidates = cms.uint32(1), 
),
hltPathsToCheck = cms.vstring(
  ""HLT_Ele35_WPTight_Gsf_v"",
  ""HLT_Ele38_WPTight_Gsf_v"",
  ""HLT_Ele40_WPTight_Gsf_v"",
  ""HLT_Ele35_WPTight_Gsf_L1EGMT_v"",
  ),
recElecLabel  = cms.string(""gedGsfElectrons""),
# -- Analysis specific cuts
minCandidates = cms.uint32(1), 
),
"
-------------------------------------------------------------------------
"```python
hltPhotonPathsToCheck = cms.vstring(
  ""HLT_Photon33_v"",
  ""HLT_Photon50_v"",
  ""HLT_Photon75_v"",
  ""HLT_Photon90_v"",
  ""HLT_Photon120_v"",
  ""HLT_Photon165_HE10_v"",
  ""HLT_Photon33_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon50_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon75_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon90_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon120_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon165_R9Id90_HE10_IsoM_v""
)

hltElePathsToCheck = cms.vstring(
  ""HLT_Ele35_WPTight_Gsf_v"",
  ""HLT_Ele38_WPTight_Gsf_v"",
  ""HLT_Ele40_WPTight_Gsf_v"",
  ""HLT_Ele35_WPTight_Gsf_L1EGMT_v""
)

recPhotonLabel = cms.string(""photons"")
recElecLabel = cms.string(""gedGsfElectrons"")

# -- Analysis specific cuts
minCandidates = cms.uint32(1)
```"
-------------------------------------------------------------------------
"hltPathsToCheck = cms.vstring(
  ""HLT_Photon33_v"",
  ""HLT_Photon50_v"",
  ""HLT_Photon75_v"",
  ""HLT_Photon90_v"",
  ""HLT_Photon120_v"",
  ""HLT_Photon165_HE10_v"",
  ""HLT_Photon33_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon50_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon75_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon90_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon120_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon165_R9Id90_HE10_IsoM_v"",
  ),
recPhotonLabel  = cms.string(""photons""),
# -- Analysis specific cuts
minCandidates = cms.uint32(1), 
),
hltPathsToCheck = cms.vstring(
  ""HLT_Ele35_WPTight_Gsf_v"",
  ""HLT_Ele38_WPTight_Gsf_v"",
  ""HLT_Ele40_WPTight_Gsf_v"",
  ""HLT_Ele35_WPTight_Gsf_L1EGMT_v"",
  ),
recElecLabel  = cms.string(""gedGsfElectrons""),
# -- Analysis specific cuts
minCandidates = cms.uint32(1), 
),
"
-------------------------------------------------------------------------
"Recom
PRs: 20344, 20345"
-------------------------------------------------------------------------
=========================================================================
"SimDoubleMuFilter = SimMuFilter.clone()
SimDoubleMuFilter.nMuSel = 2
SimMuFiltSeq = cms.Sequence(SimDoubleMuFilter)
"
-------------------------------------------------------------------------
"SimSingleMuFilter = SimMuFilter.clone()
SimSingleMuFilter.nMuSel = 1
SimMuFiltSeq = cms.Sequence(SimSingleMuFilter)"
-------------------------------------------------------------------------
"SimDoubleMuFilter = SimMuFilter.clone()
SimDoubleMuFilter.nMuSel = 2
SimMuFiltSeq = cms.Sequence(SimDoubleMuFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 20209, 20279"
-------------------------------------------------------------------------
=========================================================================
"SimSingleMuFilter = SimMuFilter.clone()
SimSingleMuFilter.nMuSel = 1
SimMuFiltSeq = cms.Sequence(SimSingleMuFilter)
"
-------------------------------------------------------------------------
"```python
from FWCore.ParameterSet.Config import cms
from SimMuon.MCTruth.SimMuFilter_cfi import SimMuFilter

SimSingleMuFilter = SimMuFilter.clone()
SimSingleMuFilter.nMuSel = 1
SimMuFiltSeq = cms.Sequence(SimSingleMuFilter)
```"
-------------------------------------------------------------------------
"SimSingleMuFilter = SimMuFilter.clone()
SimSingleMuFilter.nMuSel = 1
SimMuFiltSeq = cms.Sequence(SimSingleMuFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 20209, 20279"
-------------------------------------------------------------------------
=========================================================================
"def replaceHcalTp(tag):
    replaceInputTag(tag, ""simHcalTriggerPrimitiveDigis"", ""DMHcalTriggerPrimitiveDigis"")
"
-------------------------------------------------------------------------
"def replaceHcalTp(tag):
    replaceInputTag(tag, ""simHcalTriggerPrimitiveDigis"", ""DMHcalTriggerPrimitiveDigis"")"
-------------------------------------------------------------------------
"def replaceHcalTp(tag):
    replaceInputTag(tag, ""simHcalTriggerPrimitiveDigis"", ""DMHcalTriggerPrimitiveDigis"")
"
-------------------------------------------------------------------------
"Recom
PRs: 20266, 20267"
-------------------------------------------------------------------------
=========================================================================
"if analyzer.type_() == ""HcalDigisValidation"":
    replaceHcalTp(analyzer.dataTPs)
"
-------------------------------------------------------------------------
"if analyzer.type_() == ""HcalDigisValidation"":
    replaceHcalTp(analyzer.dataTPs)"
-------------------------------------------------------------------------
"if analyzer.type_() == ""HcalDigisValidation"":
    replaceHcalTp(analyzer.dataTPs)
"
-------------------------------------------------------------------------
"Recom
PRs: 20266, 20267"
-------------------------------------------------------------------------
=========================================================================
"dropZSmarkedPassed = cms.bool(False),
"
-------------------------------------------------------------------------
"dropZSmarkedPassed = cms.bool(False),"
-------------------------------------------------------------------------
"dropZSmarkedPassed = cms.bool(False),
"
-------------------------------------------------------------------------
"Recom
PRs: 20115, 20117"
-------------------------------------------------------------------------
=========================================================================
"dqmEnvSiStripQuality = cms.EDAnalyzer(""DQMEventInfo"",
subSystemFolder = cms.untracked.string('AlCaReco'),  
)

ce(EDMtoMEConvertSiStrip  alcaSiStripQualityHarvester  dqmEnvSiStripQuality)
"
-------------------------------------------------------------------------
"```python
import FWCore.ParameterSet.Config as cms
from Calibration.TkAlCaRecoProducers.AlcaSiStripQualityHarvester_cfi import alcaSiStripQualityHarvester
from DQMServices.Components.EDMtoMEConverter_cfi import EDMtoMEConvertSiStrip
from DQMServices.Core.DQMEventInfo.dqmEventInfo_cfi import dqmEnvSiStripQuality

alcaSiStripQuality.subSystemFolder = cms.untracked.string('AlCaReco')

ALCAHARVESTSiStripQuality = cms.Sequence(EDMtoMEConvertSiStrip + alcaSiStripQualityHarvester + dqmEnvSiStripQuality)
```"
-------------------------------------------------------------------------
"dqmEnvSiStripQuality = cms.EDAnalyzer(""DQMEventInfo"",
subSystemFolder = cms.untracked.string('AlCaReco'),  
)

ce(EDMtoMEConvertSiStrip  alcaSiStripQualityHarvester  dqmEnvSiStripQuality)
"
-------------------------------------------------------------------------
"Recom
PRs: 20097, 20098"
-------------------------------------------------------------------------
=========================================================================
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'),cms.InputTag('mixData:HFQIE10DigiCollection'))
"
-------------------------------------------------------------------------
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'), cms.InputTag('mixData:HFQIE10DigiCollection'))"
-------------------------------------------------------------------------
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'),cms.InputTag('mixData:HFQIE10DigiCollection'))
"
-------------------------------------------------------------------------
"Recom
PRs: 20029, 20040"
-------------------------------------------------------------------------
=========================================================================
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'),cms.InputTag('mixData:HFQIE10DigiCollection'))
"
-------------------------------------------------------------------------
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'), cms.InputTag('mixData:HFQIE10DigiCollection'))"
-------------------------------------------------------------------------
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'),cms.InputTag('mixData:HFQIE10DigiCollection'))
"
-------------------------------------------------------------------------
"Recom
PRs: 20029, 20040"
-------------------------------------------------------------------------
=========================================================================
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'),cms.InputTag('mixData:HFQIE10DigiCollection'))
"
-------------------------------------------------------------------------
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'), cms.InputTag('mixData:HFQIE10DigiCollection'))"
-------------------------------------------------------------------------
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'),cms.InputTag('mixData:HFQIE10DigiCollection'))
"
-------------------------------------------------------------------------
"Recom
PRs: 20029, 20040"
-------------------------------------------------------------------------
=========================================================================
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'),cms.InputTag('mixData:HFQIE10DigiCollection'))
"
-------------------------------------------------------------------------
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'), cms.InputTag('mixData:HFQIE10DigiCollection'))"
-------------------------------------------------------------------------
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'),cms.InputTag('mixData:HFQIE10DigiCollection'))
"
-------------------------------------------------------------------------
"Recom
PRs: 20029, 20040"
-------------------------------------------------------------------------
=========================================================================
"miniAOD_customizeOutput(output)
"
-------------------------------------------------------------------------
"```python
ConfigBuilder.miniAOD_customizeOutput(output)
```"
-------------------------------------------------------------------------
"miniAOD_customizeOutput(output)
"
-------------------------------------------------------------------------
"Recom
PRs: 19680, 20037"
-------------------------------------------------------------------------
=========================================================================
"cms.untracked.PSet(branch = cms.untracked.string(""patPackedCandidates_packedPFCandidates__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""recoGenParticles_prunedGenParticles__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""patTriggerObjectStandAlones_slimmedPatTrigger__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""patPackedGenParticles_packedGenParticles__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""patJets_slimmedJets__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""recoVertexs_offlineSlimmedPrimaryVertices__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""recoCaloClusters_reducedEgamma_reducedESClusters_*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""EcalRecHitsSorted_reducedEgamma_reducedEBRecHits_*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""EcalRecHitsSorted_reducedEgamma_reducedEERecHits_*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""recoGenJets_slimmedGenJets__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""patJets_slimmedJetsPuppi__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""EcalRecHitsSorted_reducedEgamma_reducedESRecHits_*""),splitLevel=cms.untracked.int32(99)),
"
-------------------------------------------------------------------------
"MicroEventContentMC.outputCommands += [
    cms.untracked.PSet(branch = cms.untracked.string(""patPackedCandidates_packedPFCandidates__*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""recoGenParticles_prunedGenParticles__*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""patTriggerObjectStandAlones_slimmedPatTrigger__*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""patPackedGenParticles_packedGenParticles__*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""patJets_slimmedJets__*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""recoVertexs_offlineSlimmedPrimaryVertices__*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""recoCaloClusters_reducedEgamma_reducedESClusters_*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""EcalRecHitsSorted_reducedEgamma_reducedEBRecHits_*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""EcalRecHitsSorted_reducedEgamma_reducedEERecHits_*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""recoGenJets_slimmedGenJets__*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""patJets_slimmedJetsPuppi__*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""EcalRecHitsSorted_reducedEgamma_reducedESRecHits_*""),splitLevel=cms.untracked.int32(99)),
]"
-------------------------------------------------------------------------
"cms.untracked.PSet(branch = cms.untracked.string(""patPackedCandidates_packedPFCandidates__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""recoGenParticles_prunedGenParticles__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""patTriggerObjectStandAlones_slimmedPatTrigger__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""patPackedGenParticles_packedGenParticles__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""patJets_slimmedJets__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""recoVertexs_offlineSlimmedPrimaryVertices__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""recoCaloClusters_reducedEgamma_reducedESClusters_*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""EcalRecHitsSorted_reducedEgamma_reducedEBRecHits_*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""EcalRecHitsSorted_reducedEgamma_reducedEERecHits_*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""recoGenJets_slimmedGenJets__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""patJets_slimmedJetsPuppi__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""EcalRecHitsSorted_reducedEgamma_reducedESRecHits_*""),splitLevel=cms.untracked.int32(99)),
"
-------------------------------------------------------------------------
"Recom
PRs: 19680, 20037"
-------------------------------------------------------------------------
=========================================================================
"out.splitLevel = cms.untracked.int32(0)
"
-------------------------------------------------------------------------
"```python
out.splitLevel = cms.untracked.int32(0)
```"
-------------------------------------------------------------------------
"out.splitLevel = cms.untracked.int32(0)
"
-------------------------------------------------------------------------
"Recom
PRs: 19680, 20037"
-------------------------------------------------------------------------
=========================================================================
"if (dbstatusPtr == channelStatus_->getMap().end())
    edm::LogError(""Invalid DetId supplied"");
"
-------------------------------------------------------------------------
"if (dbstatusPtr == channelStatus_->getMap().end())
    edm::LogError(""Invalid DetId supplied"");"
-------------------------------------------------------------------------
"process.GlobalTag = GlobalTag(process.GlobalTag, 'auto:run2_data', '')  

"
-------------------------------------------------------------------------
"Recom
PRs: 19793, 19911"
-------------------------------------------------------------------------
=========================================================================
"'keep LumiScalerss_scalersRawToDigi_*_*',
'keep DcsStatuss_scalersRawToDigi_*_*',
"
-------------------------------------------------------------------------
"OutALCARECOSiStripCalMinBiasAAG_noDrop = cms.PSet(
     'keep DetIdedmEDCollection_siStripDigis_*_*',
     'keep L1AcceptBunchCrossings_*_*_*',
     'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
     'keep *_TriggerResults_*_*',
     'keep LumiScalerss_scalersRawToDigi_*_*',
     'keep DcsStatuss_scalersRawToDigi_*_*'
 )"
-------------------------------------------------------------------------
"'keep LumiScalerss_scalersRawToDigi_*_*',
'keep DcsStatuss_scalersRawToDigi_*_*',
"
-------------------------------------------------------------------------
"Recom
PRs: 19858, 19859"
-------------------------------------------------------------------------
=========================================================================
"'keep LumiScalerss_scalersRawToDigi_*_*',
'keep DcsStatuss_scalersRawToDigi_*_*',
"
-------------------------------------------------------------------------
"OutALCARECOSiStripCalMinBias_noDrop = cms.PSet(
    'keep DetIdedmEDCollection_siStripDigis_*_*',
    'keep L1AcceptBunchCrossings_*_*_*',
    'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
    'keep *_TriggerResults_*_*',
    'keep LumiScalerss_scalersRawToDigi_*_*',
    'keep DcsStatuss_scalersRawToDigi_*_*'
)"
-------------------------------------------------------------------------
"'keep LumiScalerss_scalersRawToDigi_*_*',
'keep DcsStatuss_scalersRawToDigi_*_*',
"
-------------------------------------------------------------------------
"Recom
PRs: 19858, 19859"
-------------------------------------------------------------------------
=========================================================================
"RAWMINIAODEventContent.outputCommands.extend(L1TriggerRAW.outputCommands)
RAWMINIAODEventContent.outputCommands.extend(HLTriggerRAW.outputCommands)
RAWMINIAODSIMEventContent.outputCommands.extend(L1TriggerRAW.outputCommands)
RAWMINIAODSIMEventContent.outputCommands.extend(HLTriggerRAW.outputCommands)
"
-------------------------------------------------------------------------
"RAWMINIAODEventContent.outputCommands.extend(L1TriggerRAW.outputCommands)
RAWMINIAODEventContent.outputCommands.extend(HLTriggerRAW.outputCommands)
RAWMINIAODSIMEventContent.outputCommands.extend(L1TriggerRAW.outputCommands)
RAWMINIAODSIMEventContent.outputCommands.extend(HLTriggerRAW.outputCommands)"
-------------------------------------------------------------------------
"RAWMINIAODEventContent.outputCommands.extend(L1TriggerRAW.outputCommands)
RAWMINIAODEventContent.outputCommands.extend(HLTriggerRAW.outputCommands)
RAWMINIAODSIMEventContent.outputCommands.extend(L1TriggerRAW.outputCommands)
RAWMINIAODSIMEventContent.outputCommands.extend(HLTriggerRAW.outputCommands)
RAWMINIAODEventContent.outputCommands.extend(cms.untracked.vstring(
'keep FEDRawDataCollection_rawDataCollector_*_*',
'keep FEDRawDataCollection_source_*_*'

INIAODSIMEventContent.outputCommands.extend(cms.untracked.vstring(
'keep FEDRawDataCollection_rawDataCollector_*_*',
'keep FEDRawDataCollection_source_*_*'

"
-------------------------------------------------------------------------
"Recom
PRs: 19846, 19847"
-------------------------------------------------------------------------
=========================================================================
"##DeepCSV path for JIRA CMSHLT-1496
   cms.PSet(
       pathNAME = cms.string(""HLT_PFHT380_SixPFJet32_DoublePFBTagDeepCSV_2p2""),
       moduleNAME = cms.string(""hltBTagPFDeepCSVp075Double""),
       label  = cms.string(""PF b-jet (double DeepCSV)""),
       xTITLE = cms.string(""PF b-jet""),
       etaBINNING    = cms.vdouble(-2.5,-2.0,-1.5,-1.0,-0.5,0.,0.5,1.0,1.5,2.0,2.5),
       ptBINNING     = cms.vdouble(0.,20.,30.,40.,50.,60.,70.,80.,90.,100.,150.,200.,250.,300.,400.,500.),
       phiBINNING    = cms.vdouble(-3.2,-3.,-2.8,-2.6,-2.4,-2.2,-2.0,-1.8,-1.6,-1.4,-1.2,-1.0,-0.8,-0.6,-0.4,-0.2,0.,0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0,2.2,2.4,2.6,2.8,3.0,3.2),
       massBINNING   = cms.vdouble(),
       dxyBINNING    = cms.vdouble(),
       dzBINNING    = cms.vdouble(),
       dimassBINNING = cms.vdouble(0.,50.,60.,70.,80.,90.,100.,110.,120.,130.,140.,150.,200.,250.,300.,400.,500.),
       displayInPrimary_eta      = cms.bool(True),
       displayInPrimary_phi      = cms.bool(True),
       displayInPrimary_pt       = cms.bool(True),
       displayInPrimary_mass     = cms.bool(False),
       displayInPrimary_energy   = cms.bool(False),
       displayInPrimary_csv      = cms.bool(True),
       displayInPrimary_etaVSphi = cms.bool(True),
       displayInPrimary_pt_HEP17 = cms.bool(True),
       displayInPrimary_pt_HEM17 = cms.bool(True),
       displayInPrimary_MR       = cms.bool(False),
       displayInPrimary_RSQ      = cms.bool(False),
       displayInPrimary_dxy      = cms.bool(False),
       displayInPrimary_dz       = cms.bool(False),
       displayInPrimary_dimass   = cms.bool(False),                      
       doPlot2D    = cms.untracked.bool(True),
       doPlotETA   = cms.untracked.bool(True),
       doPlotMASS  = cms.untracked.bool(False),
       doPlotENERGY = cms.untracked.bool(False),
       doPlotHEP17 = cms.untracked.bool(True),
       doPlotCSV   = cms.untracked.bool(True),
       doCALO      = cms.untracked.bool(False),
       doPF        = cms.untracked.bool(True),
       doPlotRazor = cms.untracked.bool(False),
       doPlotDXY    = cms.untracked.bool(False),
       doPlotDZ     = cms.untracked.bool(False),
       doPlotDiMass = cms.untracked.bool(True),
   ),
"
-------------------------------------------------------------------------
"```python
btvObjects = cms.VPSet(
    cms.PSet(
        pathNAME = cms.string(""HLT_PFHT380_SixPFJet32_DoublePFBTagDeepCSV_2p2""),
        moduleNAME = cms.string(""hltBTagPFDeepCSVp075Double""),
        label = cms.string(""PF b-jet (double DeepCSV)""),
        xTITLE = cms.string(""PF b-jet""),
        etaBINNING = cms.vdouble(-2.5, -2.0, -1.5, -1.0, -0.5, 0., 0.5, 1.0, 1.5, 2.0, 2.5),
        ptBINNING = cms.vdouble(0., 20., 30., 40., 50., 60., 70., 80., 90., 100., 150., 200., 250., 300., 400., 500.),
        phiBINNING = cms.vdouble(-3.2, -3., -2.8, -2.6, -2.4, -2.2, -2.0, -1.8, -1.6, -1.4, -1.2, -1.0, -0.8, -0.6, -0.4, -0.2, 0., 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2),
        massBINNING = cms.vdouble(),
        dxyBINNING = cms.vdouble(),
        dzBINNING = cms.vdouble(),
        dimassBINNING = cms.vdouble(0., 50., 60., 70., 80., 90., 100., 110., 120., 130., 140., 150., 200., 250., 300., 400., 500.),
        displayInPrimary_eta = cms.bool(True),
        displayInPrimary_phi = cms.bool(True),
        displayInPrimary_pt = cms.bool(True),
        displayInPrimary_mass = cms.bool(False),
        displayInPrimary_energy = cms.bool(False),
        displayInPrimary_csv = cms.bool(True),
        displayInPrimary_etaVSphi = cms.bool(True),
        displayInPrimary_pt_HEP17 = cms.bool(True),
        displayInPrimary_pt_HEM17 = cms.bool(True),
        displayInPrimary_MR = cms.bool(False),
        displayInPrimary_RSQ = cms.bool(False),
        displayInPrimary_dxy = cms.bool(False),
        displayInPrimary_dz = cms.bool(False),
        displayInPrimary_dimass = cms.bool(False),
        doPlot2D = cms.untracked.bool(True),
        doPlotETA = cms.untracked.bool(True),
        doPlotMASS = cms.untracked.bool(False),
        doPlotENERGY = cms.untracked.bool(False),
        doPlotHEP17 = cms.untracked.bool(True),
        doPlotCSV = cms.untracked.bool(True),
        doCALO = cms.untracked.bool(False),
        doPF = cms.untracked.bool(True),
        doPlotRazor = cms.untracked.bool(False),
        doPlotDXY = cms.untracked.bool(False),
        doPlotDZ = cms.untracked.bool(False),
        doPlotDiMass = cms.untracked.bool(True),
    )
)
```"
-------------------------------------------------------------------------
"##DeepCSV path for JIRA CMSHLT-1496
   cms.PSet(
       pathNAME = cms.string(""HLT_PFHT380_SixPFJet32_DoublePFBTagDeepCSV_2p2""),
       moduleNAME = cms.string(""hltBTagPFDeepCSVp075Double""),
       label  = cms.string(""PF b-jet (double DeepCSV)""),
       xTITLE = cms.string(""PF b-jet""),
       etaBINNING    = cms.vdouble(-2.5,-2.0,-1.5,-1.0,-0.5,0.,0.5,1.0,1.5,2.0,2.5),
       ptBINNING     = cms.vdouble(0.,20.,30.,40.,50.,60.,70.,80.,90.,100.,150.,200.,250.,300.,400.,500.),
       phiBINNING    = cms.vdouble(-3.2,-3.,-2.8,-2.6,-2.4,-2.2,-2.0,-1.8,-1.6,-1.4,-1.2,-1.0,-0.8,-0.6,-0.4,-0.2,0.,0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0,2.2,2.4,2.6,2.8,3.0,3.2),
       massBINNING   = cms.vdouble(),
       dxyBINNING    = cms.vdouble(),
       dzBINNING    = cms.vdouble(),
       dimassBINNING = cms.vdouble(0.,50.,60.,70.,80.,90.,100.,110.,120.,130.,140.,150.,200.,250.,300.,400.,500.),
       displayInPrimary_eta      = cms.bool(True),
       displayInPrimary_phi      = cms.bool(True),
       displayInPrimary_pt       = cms.bool(True),
       displayInPrimary_mass     = cms.bool(False),
       displayInPrimary_energy   = cms.bool(False),
       displayInPrimary_csv      = cms.bool(True),
       displayInPrimary_etaVSphi = cms.bool(True),
       displayInPrimary_pt_HEP17 = cms.bool(True),
       displayInPrimary_pt_HEM17 = cms.bool(True),
       displayInPrimary_MR       = cms.bool(False),
       displayInPrimary_RSQ      = cms.bool(False),
       displayInPrimary_dxy      = cms.bool(False),
       displayInPrimary_dz       = cms.bool(False),
       displayInPrimary_dimass   = cms.bool(False),                      
       doPlot2D    = cms.untracked.bool(True),
       doPlotETA   = cms.untracked.bool(True),
       doPlotMASS  = cms.untracked.bool(False),
       doPlotENERGY = cms.untracked.bool(False),
       doPlotHEP17 = cms.untracked.bool(True),
       doPlotCSV   = cms.untracked.bool(True),
       doCALO      = cms.untracked.bool(False),
       doPF        = cms.untracked.bool(True),
       doPlotRazor = cms.untracked.bool(False),
       doPlotDXY    = cms.untracked.bool(False),
       doPlotDZ     = cms.untracked.bool(False),
       doPlotDiMass = cms.untracked.bool(True),
   ),
"
-------------------------------------------------------------------------
"Recom
PRs: 19834, 19836"
-------------------------------------------------------------------------
=========================================================================
"def getRepMap(self, alignment=None):
    result = super(GenericValidationData_CTSR, self).getRepMap(alignment)
        ""use_d0cut"": str(self.use_d0cut),
"
-------------------------------------------------------------------------
"```python
def getRepMap(self, alignment=None):
    result = super(GenericValidationData_CTSR, self).getRepMap(alignment)
    return {
        ""use_d0cut"": str(self.use_d0cut),
    }
```"
-------------------------------------------------------------------------
"def getRepMap(self, alignment=None):
    result = super(GenericValidationData_CTSR, self).getRepMap(alignment)
        ""use_d0cut"": str(self.use_d0cut),
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"def use_d0cut(self):
    return ""Cosmics"" not in self.general[""trackcollection""]  #use it for collisions only
@property
"
-------------------------------------------------------------------------
"```python
@property
def use_d0cut(self):
    return ""Cosmics"" not in self.general[""trackcollection""]
```"
-------------------------------------------------------------------------
"def use_d0cut(self):
    return ""Cosmics"" not in self.general[""trackcollection""]  #use it for collisions only
@property
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"repMap = super(OfflineValidation, self).getRepMap(alignment)
"
-------------------------------------------------------------------------
"repMap = super(OfflineValidation, self).getRepMap(alignment)"
-------------------------------------------------------------------------
"repMap = super(OfflineValidation, self).getRepMap(alignment)
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"# update PF thresholds, based on https://indico.cern.ch/event/653123/contributions/2659235/attachments/1491385/2318364/170711_upsg_ledovskoy.pdf
ecal_thresholds = {
    300 : 0.103,
    1000 : 0.175,
    3000 : 0.435,
    4500 : 0.707,
}
ecal_seed_multiplier = 2.5

"
-------------------------------------------------------------------------
"```python
# update PF thresholds, based on https://indico.cern.ch/event/653123/contributions/2659235/attachments/1491385/2318364/170711_upsg_ledovskoy.pdf
ecal_thresholds = {
    300: 0.103,
    1000: 0.175,
    3000: 0.435,
    4500: 0.707,
}
ecal_seed_multiplier = 2.5
```"
-------------------------------------------------------------------------
"'phase2_realistic'         : '91X_upgrade2023_realistic_v3'
"
-------------------------------------------------------------------------
"Recom
PRs: 19687, 19688"
-------------------------------------------------------------------------
=========================================================================
"steps['RECODR2reHLTAlCaTkCosmics']=merge([{'--hltProcess':'reHLT','--conditions':'auto:run2_data_relval','-s':'RAW2DIGI,L1Reco,RECO,SKIM:EXONoBPTXSkim,EI,PAT,ALCA:TkAlCosmicsInCollisions,DQM:@standardDQM@miniAODDQM'},steps['RECODR2_2016']])
"
-------------------------------------------------------------------------
"steps['RECODR2reHLTAlCaTkCosmics']=merge([{'--hltProcess':'reHLT','--conditions':'auto:run2_data_relval','-s':'RAW2DIGI,L1Reco,RECO,SKIM:EXONoBPTXSkim,EI,PAT,ALCA:TkAlCosmicsInCollisions,DQM:@standardDQM@miniAODDQM'},steps['RECODR2_2016reHLT_skimSingleMu']])"
-------------------------------------------------------------------------
"steps['RECODR2reHLTAlCaTkCosmics']=merge([{'--hltProcess':'reHLT','--conditions':'auto:run2_data_relval','-s':'RAW2DIGI,L1Reco,RECO,SKIM:EXONoBPTXSkim,EI,PAT,ALCA:TkAlCosmicsInCollisions,DQM:@standardDQM@miniAODDQM'},steps['RECODR2_2016']])
"
-------------------------------------------------------------------------
"Recom
PRs: 19521, 19522"
-------------------------------------------------------------------------
=========================================================================
"'NoBPTX' : 'EXONoBPTXSkimLogErrorLogErrorMonitor',
"
-------------------------------------------------------------------------
'NoBPTX' : 'EXONoBPTXSkimLogErrorLogErrorMonitor'
-------------------------------------------------------------------------
"'NoBPTX' : 'EXONoBPTXSkimLogErrorLogErrorMonitor',
"
-------------------------------------------------------------------------
"Recom
PRs: 19521, 19522"
-------------------------------------------------------------------------
=========================================================================
"# parameters taken from https://indico.cern.ch/event/641946/contributions/2604357/attachments/1466160/2266650/PlanB_TDR.pdf, slide 4 (brown line)
drdA = cms.double(5.0),
drdB = cms.double(0.675),
"
-------------------------------------------------------------------------
"_years_HLLHC_ultimate = cms.VPSet(
 HEDarkeningEP = cms.ESSource(""HBHEDarkeningEP"",
     appendToDataLabel = cms.string(""HE""),
     ieta_shift = cms.int32(16),
     drdA = cms.double(5.0),
     drdB = cms.double(0.675),
     dosemaps = cms.VPSet(
         cms.PSet(energy = cms.int32(8), file = cms.FileInPath(""CalibCalorimetry/HcalPlugins/data/dosemapHE_4TeV.txt"")),
         cms.PSet(energy = cms.int32(14), file = cms.FileInPath(""CalibCalorimetry/HcalPlugins/data/dosemapHE_7TeV.txt"")),"
-------------------------------------------------------------------------
"# parameters taken from https://indico.cern.ch/event/641946/contributions/2604357/attachments/1466160/2266650/PlanB_TDR.pdf, slide 4 (brown line)
drdA = cms.double(5.0),
drdB = cms.double(0.675),
"
-------------------------------------------------------------------------
"Recom
PRs: 19039, 19040"
-------------------------------------------------------------------------
=========================================================================
"# temporarily disabled until RecoLocalCalo/HcalRecProducers/python/HBHEPhase1Reconstructor_cfi.py:flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
"
-------------------------------------------------------------------------
"```
hbheplan1Noise = RecoLocalCalo.HcalRecProducers.hbheplan1_cfi.hbheplan1.clone(
 from Configuration.Eras.Modifier_run2_HCAL_2017_cff import run2_HCAL_2017
 run2_HCAL_2017.toModify( hbherecoNoise,
     processQIE11 = cms.bool(True),
 )
 
_plan1_seqALCARECOHcalCalMinBias = _phase1_seqALCARECOHcalCalMinBias.copy()
```"
-------------------------------------------------------------------------
"# temporarily disabled until RecoLocalCalo/HcalRecProducers/python/HBHEPhase1Reconstructor_cfi.py:flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
"
-------------------------------------------------------------------------
"Recom
PRs: 18853, 18855"
-------------------------------------------------------------------------
=========================================================================
"# temporarily disabled until RecoLocalCalo/HcalRecProducers/python/HBHEPhase1Reconstructor_cfi.py:flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
# temporarily disabled until RecoLocalCalo/HcalRecProducers/python/HBHEPhase1Reconstructor_cfi.py:flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
"
-------------------------------------------------------------------------
"```python
# temporarily disabled until flagParametersQIE11 is filled
setNoiseFlagsQIE11 = cms.bool(True),
setNoiseFlagsQIE11 = cms.bool(True),
```"
-------------------------------------------------------------------------
"# temporarily disabled until RecoLocalCalo/HcalRecProducers/python/HBHEPhase1Reconstructor_cfi.py:flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
# temporarily disabled until RecoLocalCalo/HcalRecProducers/python/HBHEPhase1Reconstructor_cfi.py:flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
"
-------------------------------------------------------------------------
"Recom
PRs: 18853, 18855"
-------------------------------------------------------------------------
=========================================================================
"# temporarily disabled until RecoLocalCalo/HcalRecProducers/python/HBHEPhase1Reconstructor_cfi.py:flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
"
-------------------------------------------------------------------------
"```
# temporarily disabled until flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
```"
-------------------------------------------------------------------------
"# temporarily disabled until RecoLocalCalo/HcalRecProducers/python/HBHEPhase1Reconstructor_cfi.py:flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
"
-------------------------------------------------------------------------
"Recom
PRs: 18853, 18855"
-------------------------------------------------------------------------
=========================================================================
"# temporarily disabled until RecoLocalCalo/HcalRecProducers/python/HBHEPhase1Reconstructor_cfi.py:flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
"
-------------------------------------------------------------------------
"```python
# temporarily disabled until flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
```"
-------------------------------------------------------------------------
"# temporarily disabled until RecoLocalCalo/HcalRecProducers/python/HBHEPhase1Reconstructor_cfi.py:flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
"
-------------------------------------------------------------------------
"Recom
PRs: 18821, 18822"
-------------------------------------------------------------------------
=========================================================================
"workflows[numWFupgradeSteps['Timing']['offset']] = [ upgradeDatasetFromFragment[frag]""_Timing"", stepList['Timing']]
workflows[numWFupgradeSteps['Neutron']['offset']] = [ upgradeDatasetFromFragment[frag]""_Neutron"", stepList['Neutron']]
"
-------------------------------------------------------------------------
"```python
workflows[numWFupgradeSteps['Timing']['offset']] = [upgradeDatasetFromFragment[frag] + ""_Timing"", stepList['Timing']]
workflows[numWFupgradeSteps['Neutron']['offset']] = [upgradeDatasetFromFragment[frag] + ""_Neutron"", stepList['Neutron']]
```"
-------------------------------------------------------------------------
"workflows[numWFupgradeSteps['Timing']['offset']] = [ upgradeDatasetFromFragment[frag]""_Timing"", stepList['Timing']]
workflows[numWFupgradeSteps['Neutron']['offset']] = [ upgradeDatasetFromFragment[frag]""_Neutron"", stepList['Neutron']]
"
-------------------------------------------------------------------------
"Recom
PRs: 18737, 18738"
-------------------------------------------------------------------------
=========================================================================
"neutronFrags = ['ZMM_14','MinBias_14TeV']
"
-------------------------------------------------------------------------
"neutronFrags = ['ZMM_14','MinBias_14TeV']"
-------------------------------------------------------------------------
"neutronFrags = ['ZMM_14','MinBias_14TeV']
"
-------------------------------------------------------------------------
"Recom
PRs: 18611, 18612"
-------------------------------------------------------------------------
=========================================================================
"if any(upgradeDatasetFromFragment[frag]==nfrag for nfrag in neutronFrags) and any(nkey in key for nkey in neutronKeys):
"
-------------------------------------------------------------------------
if any(upgradeDatasetFromFragment[frag]==nfrag for nfrag in neutronFrags) and any(nkey in key for nkey in neutronKeys):
-------------------------------------------------------------------------
"if any(upgradeDatasetFromFragment[frag]==nfrag for nfrag in neutronFrags) and any(nkey in key for nkey in neutronKeys):
"
-------------------------------------------------------------------------
"Recom
PRs: 18611, 18612"
-------------------------------------------------------------------------
=========================================================================
"
# available conditions
 ecal_lumis = [300,1000,3000,4500]
 ecal_conditions = [
     ['EcalIntercalibConstantsRcd','EcalIntercalibConstants_TL{:d}_upgrade_8deg_mc'],
     ['EcalIntercalibConstantsMCRcd','EcalIntercalibConstantsMC_TL{:d}_upgrade_8deg_mc'],
     ['EcalLaserAPDPNRatiosRcd','EcalLaserAPDPNRatios_TL{:d}_upgrade_8deg_mc'],
     ['EcalPedestalsRcd','EcalPedestals_TL{:d}_upgradeTIA_8deg_mc'],
     ['EcalTPGLinearizationConstRcd','EcalTPGLinearizationConst_TL{:d}_upgrade_8deg_mc'],
 ]

 # try to get conditions
 if int(lumi) in ecal_lumis:
     if not hasattr(process.GlobalTag,'toGet'):
         process.GlobalTag.toGet=cms.VPSet()
     for ecal_condition in ecal_conditions:
         process.GlobalTag.toGet.append(cms.PSet(
             record = cms.string(ecal_condition[0]),
             tag = cms.string(ecal_condition[1].format(int(lumi))),
             connect = cms.string(""frontier://FrontierProd/CMS_CONDITIONS"")
             )
         )
     
"
-------------------------------------------------------------------------
"def ageEcal(process, lumi, instLumi):
    # these lines need to be further activated by tuning on 'complete' aging for ecal
    process.g4SimHits.ECalSD.InstLuminosity = cms.double(instLumi)
    process.g4SimHits.ECalSD.DelivLuminosity = cms.double(float(lumi))

    ecal_lumis = [300, 1000, 3000, 4500]
    ecal_conditions = [
        ['EcalIntercalibConstantsRcd', 'EcalIntercalibConstants_TL{:d}_upgrade_8deg_mc'],
        ['EcalIntercalibConstantsMCRcd', 'EcalIntercalibConstantsMC_TL{:d}_upgrade_8deg_mc'],
        ['EcalLaserAPDPNRatiosRcd', 'EcalLaserAPDPNRatios_TL{:d}_upgrade_8deg_mc'],
        ['EcalPedestalsRcd', 'EcalPedestals_TL{:d}_upgradeTIA_8deg_mc'],
        ['EcalTPGLinearizationConstRcd', 'EcalTPGLinearizationConst_TL{:d}_upgrade_8deg_mc'],
    ]

    # try to get conditions
    if int(lumi) in ecal_lumis:
        if not hasattr(process.GlobalTag, 'toGet'):
            process.GlobalTag.toGet = cms.VPSet()
        for ecal_condition in ecal_conditions:
            process.GlobalTag.toGet.append(cms.PSet(
                record=cms.string(ecal_condition[0]),
                tag=cms.string(ecal_condition[1].format(int(lumi))),
                connect=cms.string(""frontier://FrontierProd/CMS_CONDITIONS"")
            )
            )

    return process"
-------------------------------------------------------------------------
"
# available conditions
 ecal_lumis = [300,1000,3000,4500]
 ecal_conditions = [
     ['EcalIntercalibConstantsRcd','EcalIntercalibConstants_TL{:d}_upgrade_8deg_mc'],
     ['EcalIntercalibConstantsMCRcd','EcalIntercalibConstantsMC_TL{:d}_upgrade_8deg_mc'],
     ['EcalLaserAPDPNRatiosRcd','EcalLaserAPDPNRatios_TL{:d}_upgrade_8deg_mc'],
     ['EcalPedestalsRcd','EcalPedestals_TL{:d}_upgradeTIA_8deg_mc'],
     ['EcalTPGLinearizationConstRcd','EcalTPGLinearizationConst_TL{:d}_upgrade_8deg_mc'],
 ]

 # try to get conditions
 if int(lumi) in ecal_lumis:
     if not hasattr(process.GlobalTag,'toGet'):
         process.GlobalTag.toGet=cms.VPSet()
     for ecal_condition in ecal_conditions:
         process.GlobalTag.toGet.append(cms.PSet(
             record = cms.string(ecal_condition[0]),
             tag = cms.string(ecal_condition[1].format(int(lumi))),
             connect = cms.string(""frontier://FrontierProd/CMS_CONDITIONS"")
             )
         )
     
"
-------------------------------------------------------------------------
"Recom
PRs: 18592, 18593"
-------------------------------------------------------------------------
=========================================================================
"PFJets = cms.InputTag(""ak4PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),
"
-------------------------------------------------------------------------
"PFJets = cms.InputTag(""ak4PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO"")"
-------------------------------------------------------------------------
"PFJets = cms.InputTag(""ak4PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),
"
-------------------------------------------------------------------------
"Recom
PRs: 18384, 18386"
-------------------------------------------------------------------------
=========================================================================
"PFJets = cms.InputTag(""ak4PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),
"
-------------------------------------------------------------------------
"PFJets = cms.InputTag(""ak4PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),"
-------------------------------------------------------------------------
"PFJets = cms.InputTag(""ak4PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),
"
-------------------------------------------------------------------------
"Recom
PRs: 18384, 18386"
-------------------------------------------------------------------------
=========================================================================
"PFJets = cms.InputTag(""ak4PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),
"
-------------------------------------------------------------------------
"PFJets = cms.InputTag(""ak4PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),
JetHTJetPlusHOFilterSkim = cms.EDFilter(""JetHTJetPlusHOFilter"",
    Photons = cms.InputTag(""photons""),
    Ptcut = cms.untracked.double(200.0), 
    Etacut = cms.untracked.double(1.5),
    HOcut = cms.untracked.double(8.0)"
-------------------------------------------------------------------------
"PFJets = cms.InputTag(""ak4PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),
"
-------------------------------------------------------------------------
"Recom
PRs: 18384, 18385"
-------------------------------------------------------------------------
=========================================================================
"PFJets = cms.InputTag(""ak4PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),
"
-------------------------------------------------------------------------
"PFJets = cms.InputTag(""ak4PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),"
-------------------------------------------------------------------------
"PFJets = cms.InputTag(""ak4PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),
"
-------------------------------------------------------------------------
"Recom
PRs: 18384, 18385"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Eras.Modifier_tracker_apv_vfp30_2016_cff import tracker_apv_vfp30_2016 as _tracker_apv_vfp30_2016
_tracker_apv_vfp30_2016.toModify(_muonSeededMeasurementEstimatorForInOutBase, MinPtForHitRecoveryInGluedDet=1e9)
"
-------------------------------------------------------------------------
"Expr(value=Call(func=Attribute(value=Name(id='_tracker_apv_vfp30_2016', ctx=Load()), attr='toModify', ctx=Load()), args=[Name(id='_muonSeededMeasurementEstimatorForOutInBase', ctx=Load())], keywords=[keyword(arg='MinPtForHitRecoveryInGluedDet', value=Constant(value=1000000000.0))]))"
-------------------------------------------------------------------------
"def customizeHitRecoveryInGluedDetTkSeedsOnly(process):
process = customizeMinPtForHitRecoveryInGluedDet(process,0.9)
if hasattr(process, ""Chi2MeasurementEstimatorForP5""): # keep disabled for cosmics
    process.Chi2MeasurementEstimatorForP5.MinPtForHitRecoveryInGluedDet = 100000
for X in ""muonSeededMeasurementEstimatorForOutIn"", ""hitCollectorForOutInMuonSeeds"":
    if not hasattr(process, X): continue
    getattr(process, X).MinPtForHitRecoveryInGluedDet = 100000
return process


"
-------------------------------------------------------------------------
"Recom
PRs: 17807, 18218"
-------------------------------------------------------------------------
=========================================================================
"from RecoLocalCalo.HcalRecAlgos.hcalRecAlgoESProd_cfi import *
"
-------------------------------------------------------------------------
from RecoLocalCalo.HcalRecAlgos.hcalRecAlgoESProd_cfi import *
-------------------------------------------------------------------------
"from RecoLocalCalo.HcalRecAlgos.hcalRecAlgoESProd_cfi import *
"
-------------------------------------------------------------------------
"Recom
PRs: 17782, 17784"
-------------------------------------------------------------------------
=========================================================================
"from RecoLocalCalo.HcalRecAlgos.hcalRecAlgoESProd_cfi import *
"
-------------------------------------------------------------------------
from RecoLocalCalo.HcalRecAlgos.hcalRecAlgoESProd_cfi import *
-------------------------------------------------------------------------
"from RecoLocalCalo.HcalRecAlgos.hcalRecAlgoESProd_cfi import *
"
-------------------------------------------------------------------------
"Recom
PRs: 17782, 17783"
-------------------------------------------------------------------------
=========================================================================
"import RecoLocalCalo.HcalRecProducers.hbheplan1_cfi
hbheplan1MB = RecoLocalCalo.HcalRecProducers.hbheplan1_cfi.hbheplan1.clone(
hbheInput = cms.InputTag(""hbheprerecoMB"")

"
-------------------------------------------------------------------------
"```python
import RecoLocalCalo.HcalRecProducers.hbheplan1_cfi

hbheplan1MB = RecoLocalCalo.HcalRecProducers.hbheplan1_cfi.hbheplan1.clone(
    hbheInput = cms.InputTag(""hbheprerecoMB"")
)
```"
-------------------------------------------------------------------------
"import RecoLocalCalo.HcalRecProducers.hbheplan1_cfi
hbheplan1MB = RecoLocalCalo.HcalRecProducers.hbheplan1_cfi.hbheplan1.clone(
hbheInput = cms.InputTag(""hbheprerecoMB"")

"
-------------------------------------------------------------------------
"Recom
PRs: 17751, 17754"
-------------------------------------------------------------------------
=========================================================================
"run2_HEPlan1_2017.toReplaceWith(hbherecoMB, hbheplan1MB)
"
-------------------------------------------------------------------------
"```python
run2_HEPlan1_2017.toReplaceWith(hbherecoMB, hbheplan1MB)
```"
-------------------------------------------------------------------------
"run2_HEPlan1_2017.toReplaceWith(hbherecoMB, hbheplan1MB)
"
-------------------------------------------------------------------------
"Recom
PRs: 17751, 17754"
-------------------------------------------------------------------------
=========================================================================
"import RecoLocalCalo.HcalRecProducers.hbheplan1_cfi
hbheplan1MB = RecoLocalCalo.HcalRecProducers.hbheplan1_cfi.hbheplan1.clone(
hbheInput = cms.InputTag(""hbheprerecoMB"")

"
-------------------------------------------------------------------------
"```python
import RecoLocalCalo.HcalRecProducers.hbheplan1_cfi

hbheplan1MB = RecoLocalCalo.HcalRecProducers.hbheplan1_cfi.hbheplan1.clone(
    hbheInput = cms.InputTag(""hbheprerecoMB"")
)
```"
-------------------------------------------------------------------------
"import RecoLocalCalo.HcalRecProducers.hbheplan1_cfi
hbheplan1MB = RecoLocalCalo.HcalRecProducers.hbheplan1_cfi.hbheplan1.clone(
hbheInput = cms.InputTag(""hbheprerecoMB"")

"
-------------------------------------------------------------------------
"Recom
PRs: 17751, 17753"
-------------------------------------------------------------------------
=========================================================================
"run2_HEPlan1_2017.toReplaceWith(hbherecoMB, hbheplan1MB)
"
-------------------------------------------------------------------------
"run2_HEPlan1_2017.toReplaceWith(_phase1_hbherecoMB, hbheplan1MB)"
-------------------------------------------------------------------------
"run2_HEPlan1_2017.toReplaceWith(hbherecoMB, hbheplan1MB)
"
-------------------------------------------------------------------------
"Recom
PRs: 17751, 17753"
-------------------------------------------------------------------------
=========================================================================
"weightFile = cms.FileInPath('RecoBTag/SecondaryVertex/data/BoostedDoubleSV_AK8_BDT_v4.weights.xml.gz'),
"
-------------------------------------------------------------------------
"weightFile = cms.FileInPath('RecoBTag/SecondaryVertex/data/BoostedDoubleSV_AK8_BDT_v4.weights.xml.gz'),"
-------------------------------------------------------------------------
"weightFile = cms.FileInPath('RecoBTag/SecondaryVertex/data/BoostedDoubleSV_AK8_BDT_v4.weights.xml.gz'),
"
-------------------------------------------------------------------------
"Recom
PRs: 17294, 17609"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2017_design' :  '81X_upgrade2017_design_IdealBS_v10',
'phase1_2017_realistic': '81X_upgrade2017_realistic_v26',
'phase1_2017_cosmics'  : '81X_upgrade2017cosmics_realistic_peak_v9',
"
-------------------------------------------------------------------------
"'phase1_2017_design'   : '81X_upgrade2017_design_IdealBS_v10',
'phase1_2017_realistic': '81X_upgrade2017_realistic_v26',
'phase1_2017_cosmics'  : '81X_upgrade2017cosmics_realistic_peak_v9',"
-------------------------------------------------------------------------
"'phase1_2017_design' :  '81X_upgrade2017_design_IdealBS_v10',
'phase1_2017_realistic': '81X_upgrade2017_realistic_v26',
'phase1_2017_cosmics'  : '81X_upgrade2017cosmics_realistic_peak_v9',
"
-------------------------------------------------------------------------
"Recom
PRs: 16804, 16831"
-------------------------------------------------------------------------
=========================================================================
"NHitCuts_byTrackAlgo = cms.vuint32(3,3,3,3,3,32700), # the last value is nonsense
"
-------------------------------------------------------------------------
"NHitCuts_byTrackAlgo = cms.vuint32(3,3,3,3,3,32700)"
-------------------------------------------------------------------------
"NHitCuts_byTrackAlgo = cms.vuint32(3,3,3,3,3,32700), # the last value is nonsense
"
-------------------------------------------------------------------------
"Recom
PRs: 16797, 16798"
-------------------------------------------------------------------------
=========================================================================
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(duplicateDisplacedTrackCandidates, ttrhBuilderName = ""WithTrackAngle"") # FIXME

"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(GlobalMuonRefitter, TrackerRecHitBuilder = ""WithTrackAngle"") # FIXME"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(duplicateDisplacedTrackCandidates, ttrhBuilderName = ""WithTrackAngle"") # FIXME

"
-------------------------------------------------------------------------
"Recom
PRs: 16703, 16740"
-------------------------------------------------------------------------
=========================================================================
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(GlobalMuonRefitter, TrackerRecHitBuilder = 'WithTrackAngle') # FIXME

"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(GlobalMuonRefitter, TrackerRecHitBuilder = 'WithTrackAngle') # FIXME"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(GlobalMuonRefitter, TrackerRecHitBuilder = 'WithTrackAngle') # FIXME

"
-------------------------------------------------------------------------
"Recom
PRs: 16703, 16740"
-------------------------------------------------------------------------
=========================================================================
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(GlobalTrajectoryBuilderCommon, # FIXME
TrackerRecHitBuilder = 'WithTrackAngle',
TrackTransformer = dict(TrackerRecHitBuilder = 'WithTrackAngle'),
GlbRefitterParameters = dict(TrackerRecHitBuilder = 'WithTrackAngle'),


"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel

phase1Pixel.toModify(GlobalTrajectoryBuilderCommon,
                     TrackerRecHitBuilder = 'WithTrackAngle',
                     TrackTransformer = dict(TrackerRecHitBuilder = 'WithTrackAngle'),
                     GlbRefitterParameters = dict(TrackerRecHitBuilder = 'WithTrackAngle'))"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(GlobalTrajectoryBuilderCommon, # FIXME
TrackerRecHitBuilder = 'WithTrackAngle',
TrackTransformer = dict(TrackerRecHitBuilder = 'WithTrackAngle'),
GlbRefitterParameters = dict(TrackerRecHitBuilder = 'WithTrackAngle'),


"
-------------------------------------------------------------------------
"Recom
PRs: 16703, 16740"
-------------------------------------------------------------------------
=========================================================================
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(TrackerKinkFinderParametersBlock, TrackerKinkFinderParameters = dict(TrackerRecHitBuilder = 'WithTrackAngle')) # FIXME

"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(TrackerKinkFinderParametersBlock, TrackerKinkFinderParameters = dict(TrackerRecHitBuilder = 'WithTrackAngle')) # FIXME"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(TrackerKinkFinderParametersBlock, TrackerKinkFinderParameters = dict(TrackerRecHitBuilder = 'WithTrackAngle')) # FIXME

"
-------------------------------------------------------------------------
"Recom
PRs: 16703, 16740"
-------------------------------------------------------------------------
=========================================================================
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
for _loader in [MuonTrackLoaderForSTA, MuonTrackLoaderForGLB, MuonTrackLoaderForL2, MuonTrackLoaderForL3, MuonTrackLoaderForCosmic]:
phase1Pixel.toModify(_loader, TrackLoaderParameters = dict(TTRHBuilder = 'WithTrackAngle')) # FIXME

"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
for _loader in [MuonTrackLoaderForSTA, MuonTrackLoaderForGLB, MuonTrackLoaderForL2, MuonTrackLoaderForL3, MuonTrackLoaderForCosmic]:
    phase1Pixel.toModify(_loader, TrackerRecHitBuilder = 'WithTrackAngle') # FIXME"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
for _loader in [MuonTrackLoaderForSTA, MuonTrackLoaderForGLB, MuonTrackLoaderForL2, MuonTrackLoaderForL3, MuonTrackLoaderForCosmic]:
phase1Pixel.toModify(_loader, TrackLoaderParameters = dict(TTRHBuilder = 'WithTrackAngle')) # FIXME

"
-------------------------------------------------------------------------
"Recom
PRs: 16703, 16740"
-------------------------------------------------------------------------
=========================================================================
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(trackerDrivenElectronSeeds, TTRHBuilder  = 'WithTrackAngle') # FIXME

"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(trackerDrivenElectronSeeds, TTRHBuilder='WithTrackAngle') # FIXME"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(trackerDrivenElectronSeeds, TTRHBuilder  = 'WithTrackAngle') # FIXME

"
-------------------------------------------------------------------------
"Recom
PRs: 16703, 16740"
-------------------------------------------------------------------------
=========================================================================
"
# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(duplicateTrackCandidates, ttrhBuilderName = ""WithTrackAngle"") # FIXME

"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(GlobalMuonRefitter, TrackerRecHitBuilder = ""WithTrackAngle"") # FIXME"
-------------------------------------------------------------------------
"
# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(duplicateTrackCandidates, ttrhBuilderName = ""WithTrackAngle"") # FIXME

"
-------------------------------------------------------------------------
"Recom
PRs: 16703, 16740"
-------------------------------------------------------------------------
=========================================================================
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(inOutSeedsFromTrackerMuons, TrackerRecHitBuilder = 'WithTrackAngle') # FIXME

"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(GlobalMuonRefitter, TrackerRecHitBuilder = 'WithTrackAngle') # FIXME"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(inOutSeedsFromTrackerMuons, TrackerRecHitBuilder = 'WithTrackAngle') # FIXME

"
-------------------------------------------------------------------------
"Recom
PRs: 16703, 16740"
-------------------------------------------------------------------------
=========================================================================
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(TrackProducer, TTRHBuilder = 'WithTrackAngle') # FIXME

"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(TrackProducer, TrackerRecHitBuilder='WithTrackAngle') # FIXME"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(TrackProducer, TTRHBuilder = 'WithTrackAngle') # FIXME

"
-------------------------------------------------------------------------
"Recom
PRs: 16703, 16740"
-------------------------------------------------------------------------
=========================================================================
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(TrackRefitter, TTRHBuilder = 'WithTrackAngle') # FIXME
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(GlobalMuonRefitter, TrackerRecHitBuilder='WithTrackAngle')  # FIXME"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(TrackRefitter, TTRHBuilder = 'WithTrackAngle') # FIXME
"
-------------------------------------------------------------------------
"Recom
PRs: 16703, 16740"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2017_design' :  '81X_upgrade2017_design_IdealBS_v8',
'phase1_2017_realistic': '81X_upgrade2017_realistic_v24',
"
-------------------------------------------------------------------------
"autoCond = {
     # GlobalTag for Run2 HLT for HI: it points to the online GT
     'run2_hlt_hi'       :   '81X_dataRun2_HLTHI_frozen_v4',
     # GlobalTag for MC production with perfectly aligned and calibrated detector for Phase1 2017 (and 0,0,0-centred beamspot)
     'phase1_2019_design'   : 'DES19_70_V2', # placeholder (GT not meant for standard RelVal) 
     # GlobalTag for MC production with realistic conditions for Phase2 2023
     'phase1_2017_design'   : '81X_upgrade2017_design_IdealBS_v8',
     'phase1_2017_realistic'   : '81X_upgrade2017_realistic_v24',
     # GlobalTag for MC production with perfectly aligned and calibrated detector for Phase1 2019
     'phase1_2019_design'   : 'DES19_70_V2',
     # GlobalTag for MC production with realistic conditions for Phase2 2023
     'phase2_2023_realistic'   : '81Y_upgrade2023_realistic_v12'
}"
-------------------------------------------------------------------------
"'phase1_2017_design' :  '81X_upgrade2017_design_IdealBS_v8',
'phase1_2017_realistic': '81X_upgrade2017_realistic_v24',
"
-------------------------------------------------------------------------
"Recom
PRs: 16671, 16672"
-------------------------------------------------------------------------
=========================================================================
"seq.index(mod)
"
-------------------------------------------------------------------------
seq.find(mod)
-------------------------------------------------------------------------
"seq.index(mod)
"
-------------------------------------------------------------------------
"Recom
PRs: 16660, 16661"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '81X_dataRun2_v11',
'run2_data'         :   '81X_dataRun2_v11',
'run2_data_relval'  :   '81X_dataRun2_relval_v14',
"
-------------------------------------------------------------------------
"'run1_data'         :   '81X_dataRun2_v11',
'run2_data'         :   '81X_dataRun2_v11',
'run2_data_relval'  :   '81X_dataRun2_relval_v14',
'required_dependency' : 'Configuration.HLT.autoCondHLT',"
-------------------------------------------------------------------------
"'run1_data'         :   '81X_dataRun2_v11',
'run2_data'         :   '81X_dataRun2_v11',
'run2_data_relval'  :   '81X_dataRun2_relval_v14',
"
-------------------------------------------------------------------------
"Recom
PRs: 16656, 16657"
-------------------------------------------------------------------------
=========================================================================
"diMuonHistos.etaBin = cms.int32(70) #dimuonhistograms mass, bin   
diMuonHistos.etaBBin = cms.int32(70)    
diMuonHistos.etaEBin = cms.int32(70)    
diMuonHistos.LowMassMin = cms.double(2.0)   
diMuonHistos.LowMassMax = cms.double(14.0)    
diMuonHistos.HighMassMin = cms.double(55.0)   
diMuonHistos.HighMassMax = cms.double(125.0)
"
-------------------------------------------------------------------------
"```python
diMuonHistos.etaBin = cms.int32(70)  # dimuonhistograms mass, bin
diMuonHistos.etaBBin = cms.int32(70)
diMuonHistos.etaEBin = cms.int32(70)
diMuonHistos.LowMassMin = cms.double(2.0)
diMuonHistos.LowMassMax = cms.double(14.0)
diMuonHistos.HighMassMin = cms.double(55.0)
diMuonHistos.HighMassMax = cms.double(125.0)
```"
-------------------------------------------------------------------------
"diMuonHistos.etaBin = cms.int32(70) #dimuonhistograms mass, bin   
diMuonHistos.etaBBin = cms.int32(70)    
diMuonHistos.etaEBin = cms.int32(70)    
diMuonHistos.etaBinLM = cms.int32(12)   
diMuonHistos.etaBBinLM = cms.int32(12)    
diMuonHistos.etaEBinLM = cms.int32(12)    
diMuonHistos.LowMassMin = cms.double(2.0)   
diMuonHistos.LowMassMax = cms.double(14.0)    
diMuonHistos.HighMassMin = cms.double(55.0)   
diMuonHistos.HighMassMax = cms.double(125.0)
"
-------------------------------------------------------------------------
"Recom
PRs: 16288, 16289"
-------------------------------------------------------------------------
=========================================================================
"""HLT_PAL2DoubleMu0_v"", #for HI
""HLT_PAL3DoubleMu0_v"", #for HI
""HLT_PAL3DoubleMu0_HIon_v"", #for HI
"
-------------------------------------------------------------------------
"```python
hltMuonOfflineAnalyzer = cms.EDAnalyzer(""HLTMuonOfflineAnalyzer"",
                                       ""HLT_PAL1DoubleMu0_HighQ_v"", #for HI
                                       ""HLT_PAL1DoubleMu0_MGT1_v"", #for HI
                                       ""HLT_PAL1DoubleMu10_v"", #for HI
                                       ""HLT_PAL2DoubleMu10_v"", #for HI
                                       ""HLT_PAL3DoubleMu10_v"", #for HI
                                       ""HLT_PAL2Mu12_v"", #for HI
                                       ""HLT_PAL2Mu15_v"", #for HI
                                       ""HLT_PAL2DoubleMu0_v"", #for HI
                                       ""HLT_PAL3DoubleMu0_v"", #for HI
                                       ""HLT_PAL3DoubleMu0_HIon_v"", #for HI
                                       )
```"
-------------------------------------------------------------------------
"""HLT_PAL2DoubleMu0_v"", #for HI
""HLT_PAL3DoubleMu0_v"", #for HI
""HLT_PAL3DoubleMu0_HIon_v"", #for HI
"
-------------------------------------------------------------------------
"Recom
PRs: 16237, 16245"
-------------------------------------------------------------------------
=========================================================================
"SiPixelAliPedeAlignmentProducer.algoConfig.runAtPCL = True
"
-------------------------------------------------------------------------
SiPixelAliPedeAlignmentProducer.algoConfig.runAtPCL = True
-------------------------------------------------------------------------
"SiPixelAliPedeAlignmentProducer.algoConfig.runAtPCL = True
"
-------------------------------------------------------------------------
"Recom
PRs: 16135, 16136"
-------------------------------------------------------------------------
=========================================================================
"SiPixelAliPedeAlignmentProducer.algoConfig.runAtPCL = True
"
-------------------------------------------------------------------------
SiPixelAliPedeAlignmentProducer.algoConfig.runAtPCL = True
-------------------------------------------------------------------------
"SiPixelAliPedeAlignmentProducer.algoConfig.runAtPCL = True
"
-------------------------------------------------------------------------
"Recom
PRs: 16135, 16136"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v')
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v')
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v')
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v')
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v')
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v')
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v')
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='TriggerPathAuxiliaryForHadronic', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='HLT_IsoMu22_eta2p1_v')], keywords=[])"
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v')
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='TriggerPathAuxiliaryForHadronic', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='HLT_IsoMu22_eta2p1_v')], keywords=[])"
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='TriggerPathAuxiliaryForHadronic', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='HLT_IsoMu22_eta2p1_v')], keywords=[])"
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"
### pPb Run2 ###
workflows[281]= ['',['EPOS_PPb_8160GeV_MinimumBias','DIGIUP15_PPb','RECOUP15_PPb','HARVESTUP15_PPb']]
"
-------------------------------------------------------------------------
"### pPb Run2 ###
workflows[281]= ['',['EPOS_PPb_8160GeV_MinimumBias','DIGIUP15_PPb','RECOUP15_PPb','HARVESTUP15_PPb']]"
-------------------------------------------------------------------------
"
### pPb Run2 ###
workflows[281]= ['',['EPOS_PPb_8160GeV_MinimumBias','DIGIUP15_PPb','RECOUP15_PPb','HARVESTUP15_PPb']]
"
-------------------------------------------------------------------------
"Recom
PRs: 16119, 16122"
-------------------------------------------------------------------------
=========================================================================
"
## pPb Run2
step1PPbDefaultsUp15={'--beamspot':'Run2PPbBoost','--conditions':'auto:run2_mc_pa','--eventcontent':'RAWSIM'}
steps['EPOS_PPb_8160GeV_MinimumBias']=merge([{'-n':10},step1PPbDefaultsUp15,gen2015('ReggeGribovPartonMC_EposLHC_4080_4080GeV_pPb_cfi',Kby(9,100))])
"
-------------------------------------------------------------------------
"## pPb tests
step1PPbDefaults={'--beamspot':'Realistic8teVCollision','--conditions':'auto:run2_mc_pa','--eventcontent':'RAWSIM'}
steps['EPOS_PPb_8160GeV_MinimumBias']=merge([{'-n':10},step1PPbDefaults,gen2015('ReggeGribovPartonMC_EposLHC_4080_4080GeV_pPb_cfi',Kby(9,100))])"
-------------------------------------------------------------------------
"
## pPb Run2
step1PPbDefaultsUp15={'--beamspot':'Run2PPbBoost','--conditions':'auto:run2_mc_pa','--eventcontent':'RAWSIM'}
steps['EPOS_PPb_8160GeV_MinimumBias']=merge([{'-n':10},step1PPbDefaultsUp15,gen2015('ReggeGribovPartonMC_EposLHC_4080_4080GeV_pPb_cfi',Kby(9,100))])
"
-------------------------------------------------------------------------
"Recom
PRs: 16119, 16122"
-------------------------------------------------------------------------
=========================================================================
"# for Run2 PPb workflows (NOTE: using HLT:@fake for the moment)
steps['DIGIUP15_PPb']=merge([{'-s':'DIGI:pdigi_valid,L1,DIGI2RAW,HLT:@fake','--conditions':'auto:run2_mc_pa'}, steps['DIGIUP15']])
"
-------------------------------------------------------------------------
"steps['DIGIUP15_PPb']=merge([{'-s':'DIGI:pdigi_valid,L1,DIGI2RAW,HLT:@fake','--conditions':'auto:run2_mc_pa'}, steps['DIGIUP15']])"
-------------------------------------------------------------------------
"# for Run2 PPb workflows (NOTE: using HLT:@fake for the moment)
steps['DIGIUP15_PPb']=merge([{'-s':'DIGI:pdigi_valid,L1,DIGI2RAW,HLT:@fake','--conditions':'auto:run2_mc_pa'}, steps['DIGIUP15']])

"
-------------------------------------------------------------------------
"Recom
PRs: 16119, 16122"
-------------------------------------------------------------------------
=========================================================================
"# for Run2 PPb workflows
steps['RECOUP15_PPb']=merge([{'-s':'RAW2DIGI,L1Reco,RECO,EI,VALIDATION,DQM','--conditions':'auto:run2_mc_pa','--customise':'RecoHI/Configuration/customise_PPwithHI.customisePPrecoforPPb','--datatier':'AODSIM,DQMIO','--eventcontent':'AODSIM,DQM'}, steps['RECOUP15']])

"
-------------------------------------------------------------------------
"```python
steps['RECOUP15_PPb'] = merge([{'-s': 'RAW2DIGI,L1Reco,RECO,EI,VALIDATION,DQM', '--conditions': 'auto:run2_mc_pa', '--customise': 'RecoHI/Configuration/customise_PPwithHI.customisePPrecoforPPb', '--datatier': 'AODSIM,DQMIO', '--eventcontent': 'AODSIM,DQM'}, steps['RECOUP15']])
```"
-------------------------------------------------------------------------
"# for Run2 PPb workflows
steps['HARVESTUP15_PPb']=merge([{'--conditions':'auto:run2_mc_pa',}, steps['HARVESTMINUP15']])

"
-------------------------------------------------------------------------
"Recom
PRs: 16119, 16122"
-------------------------------------------------------------------------
=========================================================================
"if (event[i].pT() >= quarkPt_) { 
"
-------------------------------------------------------------------------
if ( (abs(event[i].id()) == quark_ ) && ( abs(event[i].y()) <= quarkY_ ) && (event[i].pT() >= quarkPt_) ) {
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
process = cms.Process(""TEST"")

process.load(""Configuration.StandardSequences.SimulationRandomNumberGeneratorSeeds_cff"")
process.source = cms.Source(""EmptySource"")

process.generator = cms.EDFilter(""Pythia8GeneratorFilter"",
maxEventsToPrint = cms.untracked.int32(1),
pythiaPylistVerbosity = cms.untracked.int32(1),
filterEfficiency = cms.untracked.double(1.0),
pythiaHepMCVerbosity = cms.untracked.bool(False),
comEnergy = cms.double(13000.),
PythiaParameters = cms.PSet(
    pythia8_pthook = cms.vstring(
        'SoftQCD:nonDiffractive = on',         # QCD process, all quark are produced, but bquark (5) only 1.4% of the time, 
                                               # Lets hadronize just those, 

        'PTFilter:filter = on',                # turn on the filter, for testing turn off and see how increase the number of 
                                               # required pythia events to pass process.bfilter
        'PTFilter:quarkToFilter = 5',          # filter in b quark
        'PTFilter:scaleToFilter = 1.0',        # at the scale shawering of 1 GeV (this should be not affect the kinematical distribution at low pT)
        'PTFilter:quarkRapidity = 10.',        # do nothing on the rapidity of this quark, (at the most quark are about 8 units)
        'PTFilter:quarkPt = -0.1'              # do nothing of the pT of the quark
    ),
    parameterSets = cms.vstring('pythia8_pthook')
)


ess.bfilter = cms.EDFilter(""PythiaFilter"",ParticleID = cms.untracked.int32(5))

ess.load(""FWCore.MessageLogger.MessageLogger_cfi"")
ess.MessageLogger = cms.Service(""MessageLogger"",
cout = cms.untracked.PSet(
    default = cms.untracked.PSet(
        limit = cms.untracked.int32(2)
    )
),
destinations = cms.untracked.vstring('cout')


ess.RandomNumberGeneratorService = cms.Service(""RandomNumberGeneratorService"",
generator = cms.PSet(initialSeed = cms.untracked.uint32(123456789))


n no PTFilter is off. will need this amount to have about 150 in the output
cess.maxEvents = cms.untracked.PSet(input = cms.untracked.int32(10000))

n PTFilter is on, just those
ess.maxEvents = cms.untracked.PSet(input = cms.untracked.int32(147))

ess.GEN = cms.OutputModule(""PoolOutputModule"",
    fileName = cms.untracked.string('pthookfilter.root'),
    SelectEvents = cms.untracked.PSet(SelectEvents = cms.vstring('p'))


ess.p = cms.Path(process.generator*process.bfilter)
ess.outpath = cms.EndPath(process.GEN)

ess.schedule = cms.Schedule(process.p, process.outpath)
"
-------------------------------------------------------------------------
"Recom
PRs: 15723, 16023"
-------------------------------------------------------------------------
=========================================================================
"""HLT_Ele145_CaloIdVT_GsfTrkIdT_v"",
"
-------------------------------------------------------------------------
"HighPtElectronPSet = cms.PSet(
     hltPathsToCheck = cms.vstring(
         ""HLT_Ele200_CaloIdVT_GsfTrkIdT_v"",
         ""HLT_Ele105_CaloIdVT_GsfTrkIdT_v"", # Run2 proposal
         ""HLT_Ele115_CaloIdVT_GsfTrkIdT_v"",  # 50ns backup menu
         ""HLT_Ele145_CaloIdVT_GsfTrkIdT_v""  
     )
)"
-------------------------------------------------------------------------
"""HLT_Ele145_CaloIdVT_GsfTrkIdT_v"",
"
-------------------------------------------------------------------------
"Recom
PRs: 16012, 15951"
-------------------------------------------------------------------------
=========================================================================
"edm::ParameterSet pAL1DoubleMuZMass_pset;
edm::ParameterSet pAL2DoubleMuZMass_pset;
edm::ParameterSet pAL3DoubleMuZMass_pset;
"
-------------------------------------------------------------------------
"FWCore.ParameterSet.Config pAL1DoubleMuZMass_pset;
FWCore.ParameterSet.Config pAL2DoubleMuZMass_pset;
FWCore.ParameterSet.Config pAL3DoubleMuZMass_pset;"
-------------------------------------------------------------------------
"edm::ParameterSet pAL1DoubleMuZMass_pset;
edm::ParameterSet pAL2DoubleMuZMass_pset;
edm::ParameterSet pAL3DoubleMuZMass_pset;
"
-------------------------------------------------------------------------
"Recom
PRs: 15759, 15913"
-------------------------------------------------------------------------
=========================================================================
"hltPlot pAL1DoubleMuZMass_;
hltPlot pAL2DoubleMuZMass_;
hltPlot pAL3DoubleMuZMass_;
"
-------------------------------------------------------------------------
"hltPlot pAL1DoubleMuZMass_;
hltPlot pAL2DoubleMuZMass_;
hltPlot pAL3DoubleMuZMass_;"
-------------------------------------------------------------------------
"hltPlot pAL1DoubleMuZMass_;
hltPlot pAL2DoubleMuZMass_;
hltPlot pAL3DoubleMuZMass_;
"
-------------------------------------------------------------------------
"Recom
PRs: 15759, 15913"
-------------------------------------------------------------------------
=========================================================================
"pAL1DoubleMuZMass_pset = iConfig.getParameter<edm::ParameterSet>(""pAL1DoubleMuZMass"");
plotMap[&pAL1DoubleMuZMass_] = &pAL1DoubleMuZMass_pset;
pAL2DoubleMuZMass_pset = iConfig.getParameter<edm::ParameterSet>(""pAL2DoubleMuZMass"");
plotMap[&pAL2DoubleMuZMass_] = &pAL2DoubleMuZMass_pset;
pAL3DoubleMuZMass_pset = iConfig.getParameter<edm::ParameterSet>(""pAL3DoubleMuZMass"");
plotMap[&pAL3DoubleMuZMass_] = &pAL3DoubleMuZMass_pset;
"
-------------------------------------------------------------------------
"pAL1DoubleMuZMass_pset = iConfig.getParameter<edm::ParameterSet>(""pAL1DoubleMuZMass"");
plotMap[&pAL1DoubleMuZMass_] = &pAL1DoubleMuZMass_pset;
pAL2DoubleMuZMass_pset = iConfig.getParameter<edm::ParameterSet>(""pAL2DoubleMuZMass"");
plotMap[&pAL2DoubleMuZMass_] = &pAL2DoubleMuZMass_pset;
pAL3DoubleMuZMass_pset = iConfig.getParameter<edm::ParameterSet>(""pAL3DoubleMuZMass"");
plotMap[&pAL3DoubleMuZMass_] = &pAL3DoubleMuZMass_pset;"
-------------------------------------------------------------------------
"pAL1DoubleMuZMass_pset = iConfig.getParameter<edm::ParameterSet>(""pAL1DoubleMuZMass"");
plotMap[&pAL1DoubleMuZMass_] = &pAL1DoubleMuZMass_pset;
pAL2DoubleMuZMass_pset = iConfig.getParameter<edm::ParameterSet>(""pAL2DoubleMuZMass"");
plotMap[&pAL2DoubleMuZMass_] = &pAL2DoubleMuZMass_pset;
pAL3DoubleMuZMass_pset = iConfig.getParameter<edm::ParameterSet>(""pAL3DoubleMuZMass"");
plotMap[&pAL3DoubleMuZMass_] = &pAL3DoubleMuZMass_pset;
"
-------------------------------------------------------------------------
"Recom
PRs: 15759, 15913"
-------------------------------------------------------------------------
=========================================================================
"else if (pathName == pAL1DoubleMuZMass_.pathName)
  {
    const double mu_mass(.105658);
    unsigned int kCnt0 = 0;
    for (const auto & key0: keys)

 unsigned int kCnt1 = 0;
 for (const auto & key1: keys)
   {
     if (key0 != key1 && kCnt1 > kCnt0) // avoid filling hists with same objs && avoid double counting separate objs
{
                       // if (abs(objects[key0].id()) == 13 && (objects[key0].id()objects[key1].id()==0))  // id is not filled for l1 stage2 muons
  //  {
                       TLorentzVector mu1, mu2, dimu;
                       mu1.SetPtEtaPhiM(objects[key0].pt(), objects[key0].eta(), objects[key0].phi(), mu_mass);
                       mu2.SetPtEtaPhiM(objects[key1].pt(), objects[key1].eta(), objects[key1].phi(), mu_mass);
                       dimu = mu1mu2;
                       if(dimu.M()>pAL1DoubleMuZMass_.xMin && dimu.M()<pAL1DoubleMuZMass_.xMax) pAL1DoubleMuZMass_.ME->Fill(dimu.M());
                       //  }
}
     kCnt1 =1;
   }
 kCnt0 =1;

  }

else if (pathName == pAL2DoubleMuZMass_.pathName)
  {
    const double mu_mass(.105658);
    unsigned int kCnt0 = 0;
    for (const auto & key0: keys)

 unsigned int kCnt1 = 0;
 for (const auto & key1: keys)
   {
     if (key0 != key1 && kCnt1 > kCnt0) // avoid filling hists with same objs && avoid double counting separate objs
{
  if (abs(objects[key0].id()) == 13 && (objects[key0].id()objects[key1].id()==0))  // check muon id and dimuon charge
    {
      TLorentzVector mu1, mu2, dimu;
      mu1.SetPtEtaPhiM(objects[key0].pt(), objects[key0].eta(), objects[key0].phi(), mu_mass);
      mu2.SetPtEtaPhiM(objects[key1].pt(), objects[key1].eta(), objects[key1].phi(), mu_mass);
      dimu = mu1mu2;
      if(dimu.M()>pAL2DoubleMuZMass_.xMin && dimu.M()<pAL2DoubleMuZMass_.xMax) pAL2DoubleMuZMass_.ME->Fill(dimu.M());
    }
}
     kCnt1 =1;
   }
 kCnt0 =1;

  }

else if (pathName == pAL3DoubleMuZMass_.pathName)
  {
    const double mu_mass(.105658);
    unsigned int kCnt0 = 0;
    for (const auto & key0: keys)

 unsigned int kCnt1 = 0;
 for (const auto & key1: keys)
   {
     if (key0 != key1 && kCnt1 > kCnt0) // avoid filling hists with same objs && avoid double counting separate objs
{
  if (abs(objects[key0].id()) == 13 && (objects[key0].id()objects[key1].id()==0))  // check muon id and dimuon charge
    {
      TLorentzVector mu1, mu2, dimu;
      mu1.SetPtEtaPhiM(objects[key0].pt(), objects[key0].eta(), objects[key0].phi(), mu_mass);
      mu2.SetPtEtaPhiM(objects[key1].pt(), objects[key1].eta(), objects[key1].phi(), mu_mass);
      dimu = mu1mu2;
      if(dimu.M()>pAL3DoubleMuZMass_.xMin && dimu.M()<pAL3DoubleMuZMass_.xMax) pAL3DoubleMuZMass_.ME->Fill(dimu.M());
    }
}
     kCnt1 =1;
   }
 kCnt0 =1;

  }

"
-------------------------------------------------------------------------
"```cpp
if (abs(objects[key0].id()) == 13 && (objects[key0].id()objects[key1].id()==0))  // check muon id and dimuon charge
{
    TLorentzVector mu1, mu2, dimu;
    mu1.SetPtEtaPhiM(objects[key0].pt(), objects[key0].eta(), objects[key0].phi(), mu_mass);
    mu2.SetPtEtaPhiM(objects[key1].pt(), objects[key1].eta(), objects[key1].phi(), mu_mass);
    dimu = mu1 + mu2;

    if (pathName == pAL1DoubleMuZMass_.pathName)
    {
        if (dimu.M() > pAL1DoubleMuZMass_.xMin && dimu.M() < pAL1DoubleMuZMass_.xMax)
            pAL1DoubleMuZMass_.ME->Fill(dimu.M());
    }
    else if (pathName == pAL2DoubleMuZMass_.pathName)
    {
        if (dimu.M() > pAL2DoubleMuZMass_.xMin && dimu.M() < pAL2DoubleMuZMass_.xMax)
            pAL2DoubleMuZMass_.ME->Fill(dimu.M());
    }
    else if (pathName == pAL3DoubleMuZMass_.pathName)
    {
        if (dimu.M() > pAL3DoubleMuZMass_.xMin && dimu.M() < pAL3DoubleMuZMass_.xMax)
            pAL3DoubleMuZMass_.ME->Fill(dimu.M());
    }
}
```"
-------------------------------------------------------------------------
"else if (pathName == pAL1DoubleMuZMass_.pathName)
  {
    const double mu_mass(.105658);
    unsigned int kCnt0 = 0;
    for (const auto & key0: keys)

 unsigned int kCnt1 = 0;
 for (const auto & key1: keys)
   {
     if (key0 != key1 && kCnt1 > kCnt0) // avoid filling hists with same objs && avoid double counting separate objs
{
                       // if (abs(objects[key0].id()) == 13 && (objects[key0].id()objects[key1].id()==0))  // id is not filled for l1 stage2 muons
  //  {
                       TLorentzVector mu1, mu2, dimu;
                       mu1.SetPtEtaPhiM(objects[key0].pt(), objects[key0].eta(), objects[key0].phi(), mu_mass);
                       mu2.SetPtEtaPhiM(objects[key1].pt(), objects[key1].eta(), objects[key1].phi(), mu_mass);
                       dimu = mu1mu2;
                       if(dimu.M()>pAL1DoubleMuZMass_.xMin && dimu.M()<pAL1DoubleMuZMass_.xMax) pAL1DoubleMuZMass_.ME->Fill(dimu.M());
                       //  }
}
     kCnt1 =1;
   }
 kCnt0 =1;

  }

else if (pathName == pAL2DoubleMuZMass_.pathName)
  {
    const double mu_mass(.105658);
    unsigned int kCnt0 = 0;
    for (const auto & key0: keys)

 unsigned int kCnt1 = 0;
 for (const auto & key1: keys)
   {
     if (key0 != key1 && kCnt1 > kCnt0) // avoid filling hists with same objs && avoid double counting separate objs
{
  if (abs(objects[key0].id()) == 13 && (objects[key0].id()objects[key1].id()==0))  // check muon id and dimuon charge
    {
      TLorentzVector mu1, mu2, dimu;
      mu1.SetPtEtaPhiM(objects[key0].pt(), objects[key0].eta(), objects[key0].phi(), mu_mass);
      mu2.SetPtEtaPhiM(objects[key1].pt(), objects[key1].eta(), objects[key1].phi(), mu_mass);
      dimu = mu1mu2;
      if(dimu.M()>pAL2DoubleMuZMass_.xMin && dimu.M()<pAL2DoubleMuZMass_.xMax) pAL2DoubleMuZMass_.ME->Fill(dimu.M());
    }
}
     kCnt1 =1;
   }
 kCnt0 =1;

  }

else if (pathName == pAL3DoubleMuZMass_.pathName)
  {
    const double mu_mass(.105658);
    unsigned int kCnt0 = 0;
    for (const auto & key0: keys)

 unsigned int kCnt1 = 0;
 for (const auto & key1: keys)
   {
     if (key0 != key1 && kCnt1 > kCnt0) // avoid filling hists with same objs && avoid double counting separate objs
{
  if (abs(objects[key0].id()) == 13 && (objects[key0].id()objects[key1].id()==0))  // check muon id and dimuon charge
    {
      TLorentzVector mu1, mu2, dimu;
      mu1.SetPtEtaPhiM(objects[key0].pt(), objects[key0].eta(), objects[key0].phi(), mu_mass);
      mu2.SetPtEtaPhiM(objects[key1].pt(), objects[key1].eta(), objects[key1].phi(), mu_mass);
      dimu = mu1mu2;
      if(dimu.M()>pAL3DoubleMuZMass_.xMin && dimu.M()<pAL3DoubleMuZMass_.xMax) pAL3DoubleMuZMass_.ME->Fill(dimu.M());
    }
}
     kCnt1 =1;
   }
 kCnt0 =1;

  }

"
-------------------------------------------------------------------------
"Recom
PRs: 15759, 15913"
-------------------------------------------------------------------------
=========================================================================
"pAL1DoubleMuZMass = cms.PSet(
    pathName = cms.string(""HLT_PAL1DoubleMu10""),
    moduleName = cms.string(""hltL1fL1sDoubleMu10BptxANDL1Filtered0""),
    plotLabel = cms.string(""PAL1DoubleMu10_ZMass""),
    axisLabel = cms.string(""dimuon mass [GeV]""),
    mainWorkspace = cms.bool(True),
    NbinsX = cms.int32(50),
    Xmin = cms.double(60.0),
    Xmax = cms.double(160.0)
    ),
pAL2DoubleMuZMass = cms.PSet(
    pathName = cms.string(""HLT_PAL2DoubleMu10""),
    moduleName = cms.string(""hltL2fL1sDoubleMu10BptxANDL1f0L2Filtered10""),
    plotLabel = cms.string(""PAL2DoubleMu10_ZMass""),
    axisLabel = cms.string(""dimuon mass [GeV]""),
    mainWorkspace = cms.bool(True),
    NbinsX = cms.int32(50),
    Xmin = cms.double(60.0),
    Xmax = cms.double(160.0)
    ),
pAL3DoubleMuZMass = cms.PSet(
    pathName = cms.string(""HLT_PAL3DoubleMu10""),
    moduleName = cms.string(""hltL3fL1sDoubleMu10BptxANDL1f0L2f10L3Filtered10""),
    plotLabel = cms.string(""PAL3DoubleMu10_ZMass""),
    axisLabel = cms.string(""dimuon mass [GeV]""),
    mainWorkspace = cms.bool(True),
    NbinsX = cms.int32(50),
    Xmin = cms.double(60.0),
    Xmax = cms.double(160.0)
    ),
"
-------------------------------------------------------------------------
"```python
pAL1DoubleMuZMass = cms.PSet(
    pathName = cms.string(""HLT_PAL1DoubleMu10""),
    moduleName = cms.string(""hltL1fL1sDoubleMu10BptxANDL1Filtered0""),
    plotLabel = cms.string(""PAL1DoubleMu10_ZMass""),
    axisLabel = cms.string(""dimuon mass [GeV]""),
    mainWorkspace = cms.bool(True),
    NbinsX = cms.int32(50),
    Xmin = cms.double(60.0),
    Xmax = cms.double(160.0)
    )

pEditdiElecMass = cms.PSet(
    pathName = cms.string(""HLT_Ele23_Ele12_CaloIdL_TrackIdLIsoVL_DZ""),
    moduleName = cms.string(""hltEle23Ele12CaloIdLTrackIdLIsoVLDZFilter""),
    plotLabel = cms.string(""diElecMass_ZMass""),
    axisLabel = cms.string(""di-electron mass [GeV]""),
    mainWorkspace = cms.bool(True),
    NbinsX = cms.int32(50),
    Xmin = cms.double(60.0),
    Xmax = cms.double(160.0)
    )
```"
-------------------------------------------------------------------------
"pAL1DoubleMuZMass = cms.PSet(
    pathName = cms.string(""HLT_PAL1DoubleMu10""),
    moduleName = cms.string(""hltL1fL1sDoubleMu10BptxANDL1Filtered0""),
    plotLabel = cms.string(""PAL1DoubleMu10_ZMass""),
    axisLabel = cms.string(""dimuon mass [GeV]""),
    mainWorkspace = cms.bool(True),
    NbinsX = cms.int32(50),
    Xmin = cms.double(60.0),
    Xmax = cms.double(160.0)
    ),
pAL2DoubleMuZMass = cms.PSet(
    pathName = cms.string(""HLT_PAL2DoubleMu10""),
    moduleName = cms.string(""hltL2fL1sDoubleMu10BptxANDL1f0L2Filtered10""),
    plotLabel = cms.string(""PAL2DoubleMu10_ZMass""),
    axisLabel = cms.string(""dimuon mass [GeV]""),
    mainWorkspace = cms.bool(True),
    NbinsX = cms.int32(50),
    Xmin = cms.double(60.0),
    Xmax = cms.double(160.0)
    ),
pAL3DoubleMuZMass = cms.PSet(
    pathName = cms.string(""HLT_PAL3DoubleMu10""),
    moduleName = cms.string(""hltL3fL1sDoubleMu10BptxANDL1f0L2f10L3Filtered10""),
    plotLabel = cms.string(""PAL3DoubleMu10_ZMass""),
    axisLabel = cms.string(""dimuon mass [GeV]""),
    mainWorkspace = cms.bool(True),
    NbinsX = cms.int32(50),
    Xmin = cms.double(60.0),
    Xmax = cms.double(160.0)
    ),
"
-------------------------------------------------------------------------
"Recom
PRs: 15759, 15913"
-------------------------------------------------------------------------
=========================================================================
"""HLT_PAL1DoubleMuOpen_v"", #for HI
""HLT_PAL1DoubleMuOpen_OS_v"", #for HI
""HLT_PAL1DoubleMuOpen_SS_v"", #for HI
""HLT_PAL1DoubleMu0_v"", #for HI
""HLT_PAL1DoubleMu0_HighQ_v"", #for HI
""HLT_PAL1DoubleMu0_MGT1_v"", #for HI
""HLT_PAL1DoubleMu10_v"", #for HI
""HLT_PAL2DoubleMuOpen_v"", #for HI
""HLT_PAL2DoubleMu10_v"", #for HI
""HLT_PAL3DoubleMuOpen_v"", #for HI
""HLT_PAL3DoubleMuOpen_HIon_v"", #for HI
""HLT_PAL3DoubleMu10_v"", #for HI
""HLT_PAL2Mu12_v"", #for HI
""HLT_PAL2Mu15_v"", #for HI
""HLT_PAL3Mu3_v"", #for HI 
""HLT_PAL3Mu5_v"", #for HI 
""HLT_PAL3Mu7_v"", #for HI 
""HLT_PAL3Mu12_v"", #for HI
""HLT_PAL3Mu15_v"" #for HI
"
-------------------------------------------------------------------------
"hltMuonOfflineAnalyzer = cms.EDAnalyzer(""HLTMuonOfflineAnalyzer"",
       ""HLT_IsoTkMu22_eta2p1_v"",
       ""HLT_IsoMu18_v"",
       ""HLT_IsoTkMu18_v"",
       ""HLT_PAL1DoubleMuOpen_v"", #for HI
       ""HLT_PAL1DoubleMuOpen_OS_v"", #for HI
       ""HLT_PAL1DoubleMuOpen_SS_v"", #for HI
       ""HLT_PAL1DoubleMu0_v"", #for HI
       ""HLT_PAL1DoubleMu0_HighQ_v"", #for HI
       ""HLT_PAL1DoubleMu0_MGT1_v"", #for HI
       ""HLT_PAL1DoubleMu10_v"", #for HI
       ""HLT_PAL2DoubleMuOpen_v"", #for HI
       ""HLT_PAL2DoubleMu10_v"", #for HI
       ""HLT_PAL3DoubleMuOpen_v"", #for HI
       ""HLT_PAL3DoubleMuOpen_HIon_v"", #for HI
       ""HLT_PAL3DoubleMu10_v"", #for HI
       ""HLT_PAL2Mu12_v"", #for HI
       ""HLT_PAL2Mu15_v"", #for HI
       ""HLT_PAL3Mu3_v"", #for HI 
       ""HLT_PAL3Mu5_v"", #for HI 
       ""HLT_PAL3Mu7_v"", #for HI 
       ""HLT_PAL3Mu12_v"", #for HI
       ""HLT_PAL3Mu15_v"" #for HI
     ),"
-------------------------------------------------------------------------
"""HLT_PAL1DoubleMuOpen_v"", #for HI
""HLT_PAL1DoubleMuOpen_OS_v"", #for HI
""HLT_PAL1DoubleMuOpen_SS_v"", #for HI
""HLT_PAL1DoubleMu0_v"", #for HI
""HLT_PAL1DoubleMu0_HighQ_v"", #for HI
""HLT_PAL1DoubleMu0_MGT1_v"", #for HI
""HLT_PAL1DoubleMu10_v"", #for HI
""HLT_PAL2DoubleMuOpen_v"", #for HI
""HLT_PAL2DoubleMu10_v"", #for HI
""HLT_PAL3DoubleMuOpen_v"", #for HI
""HLT_PAL3DoubleMuOpen_HIon_v"", #for HI
""HLT_PAL3DoubleMu10_v"", #for HI
""HLT_PAL2Mu12_v"", #for HI
""HLT_PAL2Mu15_v"", #for HI
""HLT_PAL3Mu3_v"", #for HI 
""HLT_PAL3Mu5_v"", #for HI 
""HLT_PAL3Mu7_v"", #for HI 
""HLT_PAL3Mu12_v"", #for HI
""HLT_PAL3Mu15_v"" #for HI
"
-------------------------------------------------------------------------
"Recom
PRs: 15780, 15912"
-------------------------------------------------------------------------
=========================================================================
"
# write alignments, APEs, and surface deformations to DB by default
process.AlignmentProducer.saveApeToDB = True
process.AlignmentProducer.saveDeformationsToDB = True
"
-------------------------------------------------------------------------
"```python
process.AlignmentProducer.saveToDB = True
process.AlignmentProducer.saveApeToDB = True
process.AlignmentProducer.saveDeformationsToDB = True
```"
-------------------------------------------------------------------------
"
# write alignments, APEs, and surface deformations to DB by default
process.AlignmentProducer.saveApeToDB = True
process.AlignmentProducer.saveDeformationsToDB = True
"
-------------------------------------------------------------------------
"Recom
PRs: 15802, 15803"
-------------------------------------------------------------------------
=========================================================================
")




"
-------------------------------------------------------------------------
"```python
def setup(process, binary_files, tree_files):
    process.PoolDBOutputService = cms.Service(""PoolDBOutputService"",
        DBParameters = cms.PSet(
            messageLevel = cms.untracked.int32(0),
            authenticationPath = cms.untracked.string('.')
        ),
        toPut = cms.VPSet(cms.PSet(
            record = cms.string(""SiStripBackPlaneCorrectionRcd""),
            tag = cms.string(""SiStripBackPlaneCorrection"")
        )),
        connect = cms.string(""sqlite_file:alignments_MP.db"")
    )
    process.AlignmentProducer.algoConfig.mergeBinaryFiles = binary_files
    process.AlignmentProducer.algoConfig.mergeTreeFiles = tree_files
    
    process.maxEvents = cms.untracked.PSet(input = cms.untracked.int32(1))
```"
-------------------------------------------------------------------------
")




"
-------------------------------------------------------------------------
"Recom
PRs: 15802, 15803"
-------------------------------------------------------------------------
=========================================================================
"""keep abs(pdgId) == 13 && status == 1"", # keep muon parents
"
-------------------------------------------------------------------------
"prunedGenParticles = cms.EDProducer(""GenParticlePruner"",
         ""drop   status == 2 && abs(pdgId) == 21"",                          # but remove again gluons in the inheritance chain
         ""keep abs(pdgId) == 23 || abs(pdgId) == 24 || abs(pdgId) == 25 || abs(pdgId) == 6 || abs(pdgId) == 37 "",   # keep VIP(articles)s
         ""keep abs(pdgId) == 310 && abs(eta) < 2.5 && pt > 1"",                                                     # keep K0
         ""keep (4 <= abs(pdgId) <= 5)"",  # keep heavy flavour quarks for parton-based jet flavour
         ""keep abs(pdgId) == 13 && status == 1""  # keep muon parents
         )"
-------------------------------------------------------------------------
"""keep abs(pdgId) == 13 && status == 1"", # keep muon parents
"
-------------------------------------------------------------------------
"Recom
PRs: 14384, 15742"
-------------------------------------------------------------------------
=========================================================================
"from RecoMET.METFilters.globalTightHalo2016Filter_cfi import *
"
-------------------------------------------------------------------------
"+ ImportFrom(module='RecoMET.METFilters.globalTightHalo2016Filter_cfi', names=[alias(name='*')], level=0)"
-------------------------------------------------------------------------
"from RecoMET.METFilters.globalTightHalo2016Filter_cfi import *
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimSingleMuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * singleMuonSelector * singleMuonFilter)
"
-------------------------------------------------------------------------
seqHotlineSkimSingleMuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * singleMuonSelector * singleMuonFilter)
-------------------------------------------------------------------------
"seqHotlineSkimSingleMuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * singleMuonSelector * singleMuonFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimDoubleMuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * doubleMuonSelector * doubleMuonFilter)
"
-------------------------------------------------------------------------
seqHotlineSkimDoubleMuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * doubleMuonSelector * doubleMuonFilter)
-------------------------------------------------------------------------
"seqHotlineSkimDoubleMuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * doubleMuonSelector * doubleMuonFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimTripleMuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * tripleMuonSelector * tripleMuonFilter)
"
-------------------------------------------------------------------------
seqHotlineSkimTripleMuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * tripleMuonSelector * tripleMuonFilter)
-------------------------------------------------------------------------
"seqHotlineSkimTripleMuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * tripleMuonSelector * tripleMuonFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimSingleElectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * singleElectronSelector * singleElectronFilter)
"
-------------------------------------------------------------------------
"seqHotlineSkimSingleElectron = cms.Sequence(primaryVertexFilter *
                                              globalTightHalo2016Filter *
                                              HBHENoiseFilterResultProducer *
                                              HBHENoiseFilter *
                                              singleElectronSelector *
                                              singleElectronFilter)
"
-------------------------------------------------------------------------
"seqHotlineSkimSingleElectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * singleElectronSelector * singleElectronFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimDoubleElectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * doubleElectronSelector * doubleElectronFilter)
"
-------------------------------------------------------------------------
"seqHotlineSkimDoubleElectron = cms.Sequence(
    primaryVertexFilter *
    globalTightHalo2016Filter *
    HBHENoiseFilterResultProducer *
    HBHENoiseFilter *
    doubleElectronSelector *
    doubleElectronFilter
)"
-------------------------------------------------------------------------
"seqHotlineSkimDoubleElectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * doubleElectronSelector * doubleElectronFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimTripleElectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * tripleElectronSelector * tripleElectronFilter)
"
-------------------------------------------------------------------------
seqHotlineSkimTripleElectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * tripleElectronSelector * tripleElectronFilter)
-------------------------------------------------------------------------
"seqHotlineSkimTripleElectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * tripleElectronSelector * tripleElectronFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimSinglePhoton = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * singlePhotonSelector * singlePhotonFilter)
"
-------------------------------------------------------------------------
seqHotlineSkimSinglePhoton = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * singlePhotonSelector * singlePhotonFilter)
-------------------------------------------------------------------------
"seqHotlineSkimSinglePhoton = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * singlePhotonSelector * singlePhotonFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimDoublePhoton = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * doublePhotonSelector * doublePhotonFilter)
"
-------------------------------------------------------------------------
"```python
seqHotlineSkimDoublePhoton = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * doublePhotonSelector * doublePhotonFilter)
```"
-------------------------------------------------------------------------
"seqHotlineSkimDoublePhoton = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * doublePhotonSelector * doublePhotonFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimTriplePhoton = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * triplePhotonSelector * triplePhotonFilter)
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='seqHotlineSkimTriplePhoton', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='globalTightHalo2016Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='triplePhotonSelector', ctx=Load())), op=Mult(), right=Name(id='triplePhotonFilter', ctx=Load()))], keywords=[])"
-------------------------------------------------------------------------
"seqHotlineSkimTriplePhoton = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * triplePhotonSelector * triplePhotonFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimSingleJet = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * singleJetSelector * singleJetFilter)
"
-------------------------------------------------------------------------
seqHotlineSkimSingleJet = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * singleJetSelector * singleJetFilter)
-------------------------------------------------------------------------
"seqHotlineSkimSingleJet = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * singleJetSelector * singleJetFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimDoubleJet = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * doubleJetSelector * doubleJetFilter)
"
-------------------------------------------------------------------------
"seqHotlineSkimDoubleJet = cms.Sequence(
    primaryVertexFilter
    * globalTightHalo2016Filter
    * HBHENoiseFilterResultProducer
    * HBHENoiseFilter
    * doubleJetSelector
    * doubleJetFilter
)"
-------------------------------------------------------------------------
"seqHotlineSkimDoubleJet = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * doubleJetSelector * doubleJetFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimMultiJet = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * multiJetSelector * multiJetFilter)
"
-------------------------------------------------------------------------
seqHotlineSkimMultiJet = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * multiJetSelector * multiJetFilter)
-------------------------------------------------------------------------
"seqHotlineSkimMultiJet = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * multiJetSelector * multiJetFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimHT = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * htMht * htSelector * htFilter)
"
-------------------------------------------------------------------------
"```python
seqHotlineSkimHT = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * htMht * htSelector * htFilter)
```"
-------------------------------------------------------------------------
"seqHotlineSkimHT = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * htMht * htSelector * htFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimMassiveDimuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * dimuons * dimuonMassFilter)
seqHotlineSkimMassiveDielectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * dielectrons * dielectronMassFilter)
seqHotlineSkimMassiveEMu = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * diEMu * diEMuMassFilter)
"
-------------------------------------------------------------------------
"seqHotlineSkimMassiveDimuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * dimuons * dimuonMassFilter)
seqHotlineSkimMassiveDielectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * dielectrons * dielectronMassFilter)
seqHotlineSkimMassiveEMu = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * diEMu * diEMuMassFilter)"
-------------------------------------------------------------------------
"seqHotlineSkimMassiveDimuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * dimuons * dimuonMassFilter)
seqHotlineSkimMassiveDielectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * dielectrons * dielectronMassFilter)
seqHotlineSkimMassiveEMu = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * diEMu * diEMuMassFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"globalTightHalo2016Filter*
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='seqHotlineSkimSingleMuon', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=ImportFrom(module='RecoMET.METFilters.globalTightHalo2016Filter_cfi', names=[alias(name='*')], level=0)), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='singleMuonSelector', ctx=Load())), op=Mult(), right=Name(id='singleMuonFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimDoubleMuon', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=ImportFrom(module='RecoMET.METFilters.globalTightHalo2016Filter_cfi', names=[alias(name='*')], level=0)), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='doubleMuonSelector', ctx=Load())), op=Mult(), right=Name(id='doubleMuonFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimTripleMuon', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=ImportFrom(module='RecoMET.METFilters.globalTightHalo2016Filter_cfi', names=[alias(name='*')], level=0)), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='tripleMuonSelector', ctx=Load())), op=Mult(), right=Name(id='tripleMuonFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimSingleElectron', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=ImportFrom(module='RecoMET.METFilters.globalTightHalo2016Filter_cfi', names=[alias(name='*')], level=0)), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='singleElectronSelector', ctx=Load())), op=Mult(), right=Name(id='singleElectronFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimDoubleElectron', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=ImportFrom(module='RecoMET.METFilters.globalTightHalo2016Filter_cfi', names=[alias(name='*')], level=0)), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='doubleElectronSelector', ctx=Load())), op=Mult(), right=Name(id='doubleElectronFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimTripleElectron', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=ImportFrom(module='RecoMET.METFilters.globalTightHalo2016Filter_cfi', names=[alias(name='*')], level=0)), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='tripleElectronSelector', ctx=Load())), op=Mult(), right=Name(id='tripleElectronFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimSinglePhoton', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=ImportFrom(module='RecoMET.METFilters.globalTightHalo2016Filter_cfi', names=[alias(name='*')], level=0)), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='singlePhotonSelector', ctx=Load())), op=Mult(), right=Name(id='singlePhotonFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimDoublePhoton', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=ImportFrom(module='RecoMET.METFilters.globalTightHalo2016Filter_cfi', names=[alias(name='*')], level=0)), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='doublePhotonSelector', ctx=Load())), op=Mult(), right=Name(id='doublePhotonFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimTriplePhoton', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=ImportFrom(module='RecoMET.METFilters.globalTightHalo2016Filter_cfi', names=[alias(name='*')], level=0)), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='triplePhotonSelector', ctx=Load())), op=Mult(), right=Name(id='triplePhotonFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimSingleJet', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=ImportFrom(module='RecoMET.METFilters.globalTightHalo2016Filter_cfi', names=[alias(name='*')], level=0)), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='singleJetSelector', ctx=Load())), op=Mult(), right=Name(id='singleJetFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimDoubleJet', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=ImportFrom(module='RecoMET.METFilters.globalTightHalo2016Filter_cfi', names=[alias(name='*')], level=0)), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='doubleJetSelector', ctx=Load())), op=Mult(), right=Name(id='doubleJetFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimMultiJet', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=ImportFrom(module='RecoMET.METFilters.globalTightHalo2016Filter_cfi', names=[alias(name='*')], level=0)), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='multiJetSelector', ctx=Load())), op=Mult(), right=Name(id='multiJetFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimHT', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=ImportFrom(module='RecoMET.METFilters.globalTightHalo2016Filter_cfi', names=[alias(name='*')], level=0)), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='htMht', ctx=Load())), op=Mult(), right=Name(id='htSelector', ctx=Load())), op=Mult(), right=Name(id='htFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimMassiveDimuon', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=ImportFrom(module='RecoMET.METFilters.globalTightHalo2016Filter_cfi', names=[alias(name='*')], level=0)), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='dimuons', ctx=Load())), op=Mult(), right=Name(id='dimuonMassFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimMassiveDielectron', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=ImportFrom(module='RecoMET.METFilters.globalTightHalo2016Filter_cfi', names=[alias(name='*')], level=0)), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='dielectrons', ctx=Load())), op=Mult(), right=Name(id='dielectronMassFilter', ctx=Load()))], keywords=[])"
-------------------------------------------------------------------------
"globalTightHalo2016Filter*
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"globalTightHalo2016Filter*
"
-------------------------------------------------------------------------
"```python
import CommonTools.RecoAlgos.HBHENoiseFilterResultProducer_cfi
import RecoMET.METFilters.primaryVertexFilter_cfi

seqHotlineSkimSingleMuon = cms.Sequence(
    primaryVertexFilter *
    HBHENoiseFilterResultProducer *
    HBHENoiseFilter *
    singleMuonSelector *
    singleMuonFilter *
    globalTightHalo2016Filter*
)

seqHotlineSkimDoubleMuon = cms.Sequence(
    primaryVertexFilter *
    HBHENoiseFilterResultProducer *
    HBHENoiseFilter *
    doubleMuonSelector *
    doubleMuonFilter *
    globalTightHalo2016Filter*
)

seqHotlineSkimTripleMuon = cms.Sequence(
    primaryVertexFilter *
    HBHENoiseFilterResultProducer *
    HBHENoiseFilter *
    tripleMuonSelector *
    tripleMuonFilter *
    globalTightHalo2016Filter*
)

seqHotlineSkimSingleElectron = cms.Sequence(
    primaryVertexFilter *
    HBHENoiseFilterResultProducer *
    HBHENoiseFilter *
    singleElectronSelector *
    singleElectronFilter *
    globalTightHalo2016Filter*
)

seqHotlineSkimDoubleElectron = cms.Sequence(
    primaryVertexFilter *
    HBHENoiseFilterResultProducer *
    HBHENoiseFilter *
    doubleElectronSelector *
    doubleElectronFilter *
    globalTightHalo2016Filter*
)

seqHotlineSkimTripleElectron = cms.Sequence(
    primaryVertexFilter *
    HBHENoiseFilterResultProducer *
    HBHENoiseFilter *
    tripleElectronSelector *
    tripleElectronFilter *
    globalTightHalo2016Filter*
)

seqHotlineSkimSinglePhoton = cms.Sequence(
    primaryVertexFilter *
    HBHENoiseFilterResultProducer *
    HBHENoiseFilter *
    singlePhotonSelector *
    singlePhotonFilter *
    globalTightHalo2016Filter*
)

seqHotlineSkimDoublePhoton = cms.Sequence(
    primaryVertexFilter *
    HBHENoiseFilterResultProducer *
    HBHENoiseFilter *
    doublePhotonSelector *
    doublePhotonFilter *
    globalTightHalo2016Filter*
)

seqHotlineSkimTriplePhoton = cms.Sequence(
    primaryVertexFilter *
    HBHENoiseFilterResultProducer *
    HBHENoiseFilter *
    triplePhotonSelector *
    triplePhotonFilter *
    globalTightHalo2016Filter*
)

seqHotlineSkimSingleJet = cms.Sequence(
    primaryVertexFilter *
    HBHENoiseFilterResultProducer *
    HBHENoiseFilter *
    singleJetSelector *
    singleJetFilter *
    globalTightHalo2016Filter*
)

seqHotlineSkimDoubleJet = cms.Sequence(
    primaryVertexFilter *
    HBHENoiseFilterResultProducer *
    HBHENoiseFilter *
    doubleJetSelector *
    doubleJetFilter *
    globalTightHalo2016Filter*
)

seqHotlineSkimMultiJet = cms.Sequence(
    primaryVertexFilter *
    HBHENoiseFilterResultProducer *
    HBHENoiseFilter *
    multiJetSelector *
    multiJetFilter *
    globalTightHalo2016Filter*
)

seqHotlineSkimHT = cms.Sequence(
    primaryVertexFilter *
    HBHENoiseFilterResultProducer *
    HBHENoiseFilter *
    htMht *
    htSelector *
    htFilter *
    globalTightHalo2016Filter*
)

seqHotlineSkimMassiveDimuon = cms.Sequence(
    primaryVertexFilter *
    HBHENoiseFilterResultProducer *
    HBHENoiseFilter *
    dimuons *
    dimuonMassFilter *
    globalTightHalo2016Filter*
)

seqHotlineSkimMassiveDielectron = cms.Sequence(
    primaryVertexFilter *
    HBHENoiseFilterResultProducer *
    HBHENoiseFilter *
    dielectrons *
    dielectronMassFilter *
    globalTightHalo2016Filter*
)

seqHotlineSkimMassiveEMu = cms.Sequence(
    primaryVertexFilter *
    HBHENoiseFilterResultProducer *
    HBHENoiseFilter *
    diEMu *
    diEMuMassFilter *
    globalTightHalo2016Filter*
)
```"
-------------------------------------------------------------------------
"globalTightHalo2016Filter*
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"globalTightHalo2016Filter*
"
-------------------------------------------------------------------------
"```python
+ Assign(targets=[Name(id='seqHotlineSkimSingleMuon', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='globalTightHalo2016Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='singleMuonSelector', ctx=Load())), op=Mult(), right=Name(id='singleMuonFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimDoubleMuon', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='globalTightHalo2016Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='doubleMuonSelector', ctx=Load())), op=Mult(), right=Name(id='doubleMuonFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimTripleMuon', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='globalTightHalo2016Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='tripleMuonSelector', ctx=Load())), op=Mult(), right=Name(id='tripleMuonFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimSingleElectron', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='globalTightHalo2016Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='singleElectronSelector', ctx=Load())), op=Mult(), right=Name(id='singleElectronFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimDoubleElectron', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='globalTightHalo2016Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='doubleElectronSelector', ctx=Load())), op=Mult(), right=Name(id='doubleElectronFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimTripleElectron', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='globalTightHalo2016Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='tripleElectronSelector', ctx=Load())), op=Mult(), right=Name(id='tripleElectronFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimSinglePhoton', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='globalTightHalo2016Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='singlePhotonSelector', ctx=Load())), op=Mult(), right=Name(id='singlePhotonFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimDoublePhoton', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='globalTightHalo2016Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='doublePhotonSelector', ctx=Load())), op=Mult(), right=Name(id='doublePhotonFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimTriplePhoton', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='globalTightHalo2016Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='triplePhotonSelector', ctx=Load())), op=Mult(), right=Name(id='triplePhotonFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimSingleJet', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='globalTightHalo2016Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='singleJetSelector', ctx=Load())), op=Mult(), right=Name(id='singleJetFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimDoubleJet', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='globalTightHalo2016Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='doubleJetSelector', ctx=Load())), op=Mult(), right=Name(id='doubleJetFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimMultiJet', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='globalTightHalo2016Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='multiJetSelector', ctx=Load())), op=Mult(), right=Name(id='multiJetFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimHT', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='globalTightHalo2016Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='htMht', ctx=Load())), op=Mult(), right=Name(id='htSelector', ctx=Load())), op=Mult(), right=Name(id='htFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimMassiveDimuon', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='globalTightHalo2016Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='dimuons', ctx=Load())), op=Mult(), right=Name(id='dimuonMassFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimMassiveDielectron', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='globalTightHalo2016Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='dielectrons', ctx=Load())), op=Mult(), right=Name(id='dielectronMassFilter', ctx=Load()))], keywords=[])
```"
-------------------------------------------------------------------------
"globalTightHalo2016Filter*
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
# Lumi
'keep LumiScalerss_scalersRawToDigi_*_*',
"
-------------------------------------------------------------------------
"MicroEventContent = cms.PSet(
         'keep patPackedCandidates_lostTracks_*_*',
         'keep HcalNoiseSummary_hcalnoise__*',
         'keep recoCSCHaloData_CSCHaloData_*_*',
         'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
         'keep LumiScalerss_scalersRawToDigi_*_*',
     )"
-------------------------------------------------------------------------
"'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
# Lumi
'keep LumiScalerss_scalersRawToDigi_*_*',
"
-------------------------------------------------------------------------
"Recom
PRs: 15585, 15622"
-------------------------------------------------------------------------
=========================================================================
"setSignificanceMatrix(srcMET.getSignificanceMatrix());

"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='srcMET.getSignificanceMatrix', ctx=Store())], value=Call(func=Name(id='setSignificanceMatrix', ctx=Load()), args=[], keywords=[]))"
-------------------------------------------------------------------------
"fname = 'root://eoscms.cern.ch//store/relval/CMSSW_8_0_19/DoubleEG/MINIAOD/80X_dataRun2_relval_v16_RelVal_doubEG2015D-v1/00000/004197B7-4B6E-E611-AAC0-0CC47A4D763C.root'
fname = 'root://eoscms.cern.ch//store/relval/CMSSW_8_0_19/RelValTTbar_13/MINIAODSIM/PU25ns_80X_mcRun2_asymptotic_v17_gs7120p2-v1/00000/18AFB53D-766E-E611-A80A-0CC47A78A408.root'
"
-------------------------------------------------------------------------
"Recom
PRs: 15565, 15600"
-------------------------------------------------------------------------
=========================================================================
"maxSVDeltaRToJet = cms.double(1.0),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='maxSVDeltaRToJet', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=1.0)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"maxSVDeltaRToJet = cms.double(1.0),
"
-------------------------------------------------------------------------
"Recom
PRs: 15445, 15446"
-------------------------------------------------------------------------
=========================================================================
"tmvaWeights   = cms.string(""RecoJets/JetProducers/data/pileupJetId_80X_Eta2p5to2p75_BDT.weights.xml.gz""),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='tmvaWeights', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='RecoJets/JetProducers/data/pileupJetId_80X_Eta2p5to2p75_BDT.weights.xml.gz')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"_chsalgos_81x = cms.VPSet(full_81x_chs,cutbased)
_stdalgos    = _chsalgos_81x
"
-------------------------------------------------------------------------
"Recom
PRs: 14723, 15211"
-------------------------------------------------------------------------
=========================================================================
"SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned = cms.EDAnalyzer(""SUSY_HLT_InclusiveHT"",
trigSummary = cms.InputTag(""hltTriggerSummaryAOD""),
pfMETCollection = cms.InputTag(""pfMet""),
pfJetCollection = cms.InputTag(""ak4PFJetsCHS""),
caloJetCollection = cms.InputTag(""ak4CaloJets""),
TriggerResults = cms.InputTag('TriggerResults','','HLT'),
TriggerPath = cms.string('HLT_PFMETTypeOne190_HBHE_BeamHaloCleaned_v'),
TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu24_eta2p1_IterTrk02_v'),
TriggerFilter = cms.InputTag('hltPFMETTypeOne190', '', 'HLT'), #the last filter in the path
PtThrJet = cms.untracked.double(30.0),
EtaThrJet = cms.untracked.double(3.0)




"
-------------------------------------------------------------------------
"SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned = cms.EDAnalyzer(""SUSY_HLT_InclusiveHT"",
   trigSummary = cms.InputTag(""hltTriggerSummaryAOD""),
   pfMETCollection = cms.InputTag(""pfMet""),
   pfJetCollection = cms.InputTag(""ak4PFJetsCHS""),
   caloJetCollection = cms.InputTag(""ak4CaloJets""),
   TriggerResults = cms.InputTag('TriggerResults','','HLT'),
   TriggerPath = cms.string('HLT_PFMETTypeOne190_HBHE_BeamHaloCleaned_v'),
   TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu24_eta2p1_IterTrk02_v'),
   TriggerFilter = cms.InputTag('hltPFMETTypeOne190', '', 'HLT'), #the last filter in the path
   PtThrJet = cms.untracked.double(30.0),
   EtaThrJet = cms.untracked.double(3.0)
)"
-------------------------------------------------------------------------
"SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned = cms.EDAnalyzer(""SUSY_HLT_InclusiveHT"",
trigSummary = cms.InputTag(""hltTriggerSummaryAOD""),
pfMETCollection = cms.InputTag(""pfMet""),
pfJetCollection = cms.InputTag(""ak4PFJetsCHS""),
caloJetCollection = cms.InputTag(""ak4CaloJets""),
TriggerResults = cms.InputTag('TriggerResults','','HLT'),
TriggerPath = cms.string('HLT_PFMETTypeOne190_HBHE_BeamHaloCleaned_v'),
TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu24_eta2p1_IterTrk02_v'),
TriggerFilter = cms.InputTag('hltPFMETTypeOne190', '', 'HLT'), #the last filter in the path
PtThrJet = cms.untracked.double(30.0),
EtaThrJet = cms.untracked.double(3.0)




"
-------------------------------------------------------------------------
"Recom
PRs: 15108, 15109"
-------------------------------------------------------------------------
=========================================================================
"SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned_POSTPROCESSING = cms.EDAnalyzer(""DQMGenericClient"",
subDirs = cms.untracked.vstring(""HLT/SUSYBSM/HLT_PFMETTypeOne190_HBHE_BeamHaloCleaned_v""),
efficiency = cms.vstring(
  ""pfMetTurnOn_eff 'Efficiency vs PFMET' pfMetTurnOn_num pfMetTurnOn_den"",
  ""pfHTTurnOn_eff 'Efficiency vs PFHT' pfHTTurnOn_num pfHTTurnOn_den""
  ),
resolution = cms.vstring("""")



                                   SUSY_HLT_InclusiveMET_NotCleaned 
                                   SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned
                                                  SUSY_HLT_InclusiveMET_NotCleaned_POSTPROCESSING 
                                                  SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned_POSTPROCESSING
"
-------------------------------------------------------------------------
"SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned = cms.Sequence(SUSY_HLT_InclusiveMET_NotCleaned +
                                                                   SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned
)

SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned_POSTPROCESSING = cms.Sequence(SUSY_HLT_InclusiveMET_NotCleaned_POSTPROCESSING +
                                                                         SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned_POSTPROCESSING
)"
-------------------------------------------------------------------------
"SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned_POSTPROCESSING = cms.EDAnalyzer(""DQMGenericClient"",
subDirs = cms.untracked.vstring(""HLT/SUSYBSM/HLT_PFMETTypeOne190_HBHE_BeamHaloCleaned_v""),
efficiency = cms.vstring(
  ""pfMetTurnOn_eff 'Efficiency vs PFMET' pfMetTurnOn_num pfMetTurnOn_den"",
  ""pfHTTurnOn_eff 'Efficiency vs PFHT' pfHTTurnOn_num pfHTTurnOn_den""
  ),
resolution = cms.vstring("""")



                                   SUSY_HLT_InclusiveMET_NotCleaned 
                                   SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned
                                                  SUSY_HLT_InclusiveMET_NotCleaned_POSTPROCESSING 
                                                  SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned_POSTPROCESSING
"
-------------------------------------------------------------------------
"Recom
PRs: 15108, 15109"
-------------------------------------------------------------------------
=========================================================================
"'HLT_Ele27_eta2p1_',
'HLT_IsoMu22_'
"
-------------------------------------------------------------------------
"```python
HltBTagPostValidation = cms.EDAnalyzer(""HLTBTagHarvestingAnalyzer"",
    'HLT_PFMET120_',
    'HLT_CaloMHTNoPU90_PFMET90_PFMHT90_IDTight_',
    'HLT_QuadPFJet_VBF',
    'HLT_Ele27_eta2p1_',
    'HLT_IsoMu22_'
    ),
    histoName = cms.vstring(
    'hltCombinedSecondaryVertexBJetTagsCalo',
```"
-------------------------------------------------------------------------
"'HLT_Ele27_eta2p1_',
'HLT_IsoMu22_'
"
-------------------------------------------------------------------------
"Recom
PRs: 14986, 14987"
-------------------------------------------------------------------------
=========================================================================
"""HLT_PFMET120_* OR HLT_CaloMHTNoPU90_PFMET90_PFMHT90_IDTight_* OR HLT_QuadPFJet_VBF* OR HLT_Ele27_eta2p1_* OR HLT_IsoMu22_*""),
tResults = cms.InputTag( """" ),
"
-------------------------------------------------------------------------
"```python
import FWCore.ParameterSet.Config as cms

# denominator trigger
hltBtagTriggerSelection = cms.EDFilter(""TriggerResultsFilter"",
    triggerConditions = cms.vstring(
        ""HLT_PFMET120_* OR HLT_CaloMHTNoPU90_PFMET90_PFMHT90_IDTight_* OR HLT_QuadPFJet_VBF* OR HLT_Ele27_eta2p1_* OR HLT_IsoMu22_*""
    ),
    tResults = cms.InputTag("""")
)
```"
-------------------------------------------------------------------------
"""HLT_PFMET120_* OR HLT_CaloMHTNoPU90_PFMET90_PFMHT90_IDTight_* OR HLT_QuadPFJet_VBF* OR HLT_Ele27_eta2p1_* OR HLT_IsoMu22_*""),
tResults = cms.InputTag( """" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 14986, 14987"
-------------------------------------------------------------------------
=========================================================================
"'HLT_Ele27_eta2p1_',
'HLT_IsoMu22_'
"
-------------------------------------------------------------------------
"HltVertexValidationVertices= cms.EDAnalyzer(""HLTVertexPerformanceAnalyzer"",
 	'HLT_QuadPFJet_VBF',
 	'HLT_QuadPFJet_VBF',
 	'HLT_QuadPFJet_VBF',
 	),
 	Vertex = cms.VInputTag(
 		cms.InputTag(""hltVerticesL3""), 
 		cms.InputTag(""hltVerticesL3""), 
 		cms.InputTag(""hltVerticesL3""), 
 		),
 	'HLT_Ele27_eta2p1_',
 	'HLT_IsoMu22_',"
-------------------------------------------------------------------------
"'HLT_Ele27_eta2p1_',
'HLT_IsoMu22_'
"
-------------------------------------------------------------------------
"Recom
PRs: 14986, 14987"
-------------------------------------------------------------------------
=========================================================================
"'HLT_Ele27_eta2p1_',
'HLT_IsoMu22_'
"
-------------------------------------------------------------------------
"```python
hltbTagValidation = cms.EDAnalyzer(""HLTBTagPerformanceAnalyzer"",
	'HLT_PFMET120_',
	'HLT_CaloMHTNoPU90_PFMET90_PFMHT90_IDTight_',
	'HLT_QuadPFJet_VBF',
	'HLT_Ele27_eta2p1_',
	'HLT_IsoMu22_'
	),
	JetTag = cms.VInputTag(
		cms.InputTag(""hltCombinedSecondaryVertexBJetTagsCalo""),
```"
-------------------------------------------------------------------------
"'HLT_Ele27_eta2p1_',
'HLT_IsoMu22_'
"
-------------------------------------------------------------------------
"Recom
PRs: 14986, 14987"
-------------------------------------------------------------------------
=========================================================================
"#process.load(""HLTriggerOffline.Btag.HltBtagValidationFastSim_cff"")
fileNames = cms.untracked.vstring(""root://xrootd.ba.infn.it//store/relval/CMSSW_8_0_11/RelValTTbar_13/GEN-SIM-DIGI-RAW-HLTDEBUG/80X_mcRun2_asymptotic_v14_reHLT_HS-v1/10000/1AAA874F-0D33-E611-B99E-0CC47A4D75EE.root"")
"
-------------------------------------------------------------------------
"process.load(""HLTriggerOffline.Btag.HltBtagValidationFastSim_cff"")

process.source = cms.Source(""PoolSource"",
    fileNames = cms.untracked.vstring(""root://xrootd.ba.infn.it//store/relval/CMSSW_8_0_11/RelValTTbar_13/GEN-SIM-DIGI-RAW-HLTDEBUG/80X_mcRun2_asymptotic_v14_reHLT_HS-v1/10000/1AAA874F-0D33-E611-B99E-0CC47A4D75EE.root"")
)"
-------------------------------------------------------------------------
"#process.load(""HLTriggerOffline.Btag.HltBtagValidationFastSim_cff"")
fileNames = cms.untracked.vstring(""root://xrootd.ba.infn.it//store/relval/CMSSW_8_0_11/RelValTTbar_13/GEN-SIM-DIGI-RAW-HLTDEBUG/80X_mcRun2_asymptotic_v14_reHLT_HS-v1/10000/1AAA874F-0D33-E611-B99E-0CC47A4D75EE.root"")
"
-------------------------------------------------------------------------
"Recom
PRs: 14986, 14987"
-------------------------------------------------------------------------
=========================================================================
"Chi_2 = residual*residual / sigma_str_2;
"
-------------------------------------------------------------------------
"```python
Chi_2 = residual * residual / sigma_str_2
```"
-------------------------------------------------------------------------
"from EventFilter.TotemRawToDigi.totemRawToDigi_cff import *
"
-------------------------------------------------------------------------
"Recom
PRs: 14605, 14880"
-------------------------------------------------------------------------
=========================================================================
"#    * ak8PFCHSL1FastjetL2L3ResidualCorrectorChain #not working in all matrix tests, yet
"
-------------------------------------------------------------------------
"jetMETHLTOfflineAnalyzer = cms.Sequence(
     ak4CaloL1FastL2L3ResidualCorrectorChain
     * ak4PFL1FastL2L3ResidualCorrectorChain
     * jetMETHLTOfflineSourceAK4
     * jetMETHLTOfflineSourceAK8
 )"
-------------------------------------------------------------------------
"#    * ak8PFCHSL1FastjetL2L3ResidualCorrectorChain #not working in all matrix tests, yet
"
-------------------------------------------------------------------------
"Recom
PRs: 14705, 14706"
-------------------------------------------------------------------------
=========================================================================
"#    PFJetCollectionLabel   = cms.InputTag(""ak8PFJetsCHS""), # does not work in all matrix tests, yet
#    PFJetCorLabel        = cms.InputTag(""ak8PFCHSL1FastjetL2L3ResidualCorrector""), # does not work in all matrix tests, yet 
PFJetCollectionLabel   = cms.InputTag(""ak4PFJets""),
PFJetCorLabel        = cms.InputTag(""ak4PFL1FastL2L3ResidualCorrector""), #dummy residual corrections now also provided for MC GTs


"
-------------------------------------------------------------------------
"PFJetCollectionLabel   = cms.InputTag(""ak4PFJets""),
PFJetCorLabel        = cms.InputTag(""ak4PFL1FastL2L3ResidualCorrector""), #dummy residual corrections now also provided for MC GTs"
-------------------------------------------------------------------------
"#    PFJetCollectionLabel   = cms.InputTag(""ak8PFJetsCHS""), # does not work in all matrix tests, yet
#    PFJetCorLabel        = cms.InputTag(""ak8PFCHSL1FastjetL2L3ResidualCorrector""), # does not work in all matrix tests, yet 
PFJetCollectionLabel   = cms.InputTag(""ak4PFJets""),
PFJetCorLabel        = cms.InputTag(""ak4PFL1FastL2L3ResidualCorrector""), #dummy residual corrections now also provided for MC GTs


"
-------------------------------------------------------------------------
"Recom
PRs: 14705, 14706"
-------------------------------------------------------------------------
=========================================================================
"L1Taus                = cms.untracked.InputTag(""hltCaloStage2Digis"", ""Tau""),
L1ETM                 = cms.untracked.InputTag(""hltCaloStage2Digis"",""EtSum""),
"
-------------------------------------------------------------------------
"L1Taus                = cms.untracked.InputTag(""hltCaloStage2Digis"", ""Tau""),
L1ETM                 = cms.untracked.InputTag(""hltCaloStage2Digis"",""EtSum""),"
-------------------------------------------------------------------------
"L1Taus                = cms.untracked.InputTag(""hltCaloStage2Digis"", ""Tau""),
L1ETM                 = cms.untracked.InputTag(""hltCaloStage2Digis"",""EtSum""),
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"l1stage2Taus_     = ps.getUntrackedParameter<edm::InputTag>(""L1Taus"");
l1stage2TausToken_= cc.consumes<l1t::TauBxCollection>(l1stage2Taus_);

l1stage2Sums_     = ps.getUntrackedParameter<edm::InputTag>(""L1ETM"");
l1stage2SumsToken_= cc.consumes<l1t::EtSumBxCollection>(l1stage2Sums_);

"
-------------------------------------------------------------------------
"```cpp
l1stage2Taus_ = ps.getUntrackedParameter<edm::InputTag>(""L1Taus"");
l1stage2TausToken_ = cc.consumes<l1t::TauBxCollection>(l1stage2Taus_);

l1stage2Sums_ = ps.getUntrackedParameter<edm::InputTag>(""L1ETM"");
l1stage2SumsToken_ = cc.consumes<l1t::EtSumBxCollection>(l1stage2Sums_);
```"
-------------------------------------------------------------------------
"l1stage2Taus_     = ps.getUntrackedParameter<edm::InputTag>(""L1Taus"");
l1stage2TausToken_= cc.consumes<l1t::TauBxCollection>(l1stage2Taus_);

l1stage2Sums_     = ps.getUntrackedParameter<edm::InputTag>(""L1ETM"");
l1stage2SumsToken_= cc.consumes<l1t::EtSumBxCollection>(l1stage2Sums_);

"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"
edm::Handle<l1t::TauBxCollection> taus;
iEvent.getByToken(l1stage2TausToken_, taus);  
        
edm::Handle<l1t::EtSumBxCollection> sums;
iEvent.getByToken(l1stage2SumsToken_, sums);

  for(l1t::TauBxCollection::const_iterator i = taus->begin(); i != taus->end(); i) {
"
-------------------------------------------------------------------------
"```cpp
edm::Handle<l1t::TauBxCollection> taus;
iEvent.getByToken(l1stage2TausToken_, taus);  
        
edm::Handle<l1t::EtSumBxCollection> sums;
iEvent.getByToken(l1stage2SumsToken_, sums);

for(l1t::TauBxCollection::const_iterator i = taus->begin(); i != taus->end(); ++i) {
```"
-------------------------------------------------------------------------
"
edm::Handle<l1t::TauBxCollection> taus;
iEvent.getByToken(l1stage2TausToken_, taus);  
        
edm::Handle<l1t::EtSumBxCollection> sums;
iEvent.getByToken(l1stage2SumsToken_, sums);

  for(l1t::TauBxCollection::const_iterator i = taus->begin(); i != taus->end(); i) {
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"edm::LogWarning(""HLTTauDQMOffline"") << ""HLTTauDQML1Plotter::analyze: unable to read L1 tau collection "" << l1stage2Taus_.encode();
(sums.isValid() && sums.product()->size() > 0) {
if(!doRefAnalysis_) {
  for (int ibx = sums->getFirstBX(); ibx <= sums->getLastBX(); ibx) {
    for (l1t::EtSumBxCollection::const_iterator it=sums->begin(ibx); it!=sums->end(ibx); it) {
      int type = static_cast<int>( it->getType() );
      if(type == l1t::EtSum::EtSumType::kMissingEt) l1etmEt_->Fill(it->et());
edm::LogWarning(""HLTTauDQMOffline"") << ""HLTTauDQML1Plotter::analyze: unable to read L1 met collection "" << l1stage2Sums_.encode();
"
-------------------------------------------------------------------------
"```cpp
// Log a warning message for not being able to read the L1 tau collection
edm::LogWarning(""HLTTauDQMOffline"") << ""HLTTauDQML1Plotter::analyze: unable to read L1 tau collection "" << l1stage2Taus_.encode();

// Check if the collection is valid and has elements before proceeding
if (sums.isValid() && sums.product()->size() > 0) {
    // Perform analysis if the reference analysis is not required
    if (!doRefAnalysis_) {
        // Iterate over BXs
        for (int ibx = sums->getFirstBX(); ibx <= sums->getLastBX(); ibx++) {
            // Iterate over EtSumBxCollection for the current BX
            for (l1t::EtSumBxCollection::const_iterator it = sums->begin(ibx); it != sums->end(ibx); it++) {
                // Get the type of EtSum
                int type = static_cast<int>(it->getType());
                // Fill histogram with Et if type is MissingEt
                if (type == l1t::EtSum::EtSumType::kMissingEt) l1etmEt_->Fill(it->et());
            }
        }
    }
}

// Log a warning message for not being able to read the L1 met collection
edm::LogWarning(""HLTTauDQMOffline"") << ""HLTTauDQML1Plotter::analyze: unable to read L1 met collection "" << l1stage2Sums_.encode();
```  "
-------------------------------------------------------------------------
"edm::LogWarning(""HLTTauDQMOffline"") << ""HLTTauDQML1Plotter::analyze: unable to read L1 tau collection "" << l1stage2Taus_.encode();
(sums.isValid() && sums.product()->size() > 0) {
if(!doRefAnalysis_) {
  for (int ibx = sums->getFirstBX(); ibx <= sums->getLastBX(); ibx) {
    for (l1t::EtSumBxCollection::const_iterator it=sums->begin(ibx); it!=sums->end(ibx); it) {
      int type = static_cast<int>( it->getType() );
      if(type == l1t::EtSum::EtSumType::kMissingEt) l1etmEt_->Fill(it->et());
edm::LogWarning(""HLTTauDQMOffline"") << ""HLTTauDQML1Plotter::analyze: unable to read L1 met collection "" << l1stage2Sums_.encode();
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"if(sums.isValid() && sums.product()->size() > 0) {
  for (int ibx = sums->getFirstBX(); ibx <= sums->getLastBX(); ibx) {
    for (l1t::EtSumBxCollection::const_iterator it=sums->begin(ibx); it!=sums->end(ibx); it) {
      int type = static_cast<int>( it->getType() );
      if(type == l1t::EtSum::EtSumType::kMissingEt) {
        l1etmEt_->Fill(it->et());
        l1etmPhi_->Fill(it->phi());

        if( it->et() > l1ETMMin_){
          l1etmEtEffNum_->Fill(it->et());
      }
  }
"
-------------------------------------------------------------------------
"```cpp
if (sums.isValid() && sums.product()->size() > 0) {
    for (int ibx = sums->getFirstBX(); ibx <= sums->getLastBX(); ibx++) {
        for (l1t::EtSumBxCollection::const_iterator it = sums->begin(ibx); it != sums->end(ibx); ++it) {
            int type = static_cast<int>(it->getType());
            if (type == l1t::EtSum::EtSumType::kMissingEt) {
                l1etmEt_->Fill(it->et());
                l1etmPhi_->Fill(it->phi());

                if (it->et() > l1ETMMin_) {
                    l1etmEtEffNum_->Fill(it->et());
                }
            }
        }
    }
}
```"
-------------------------------------------------------------------------
"if(sums.isValid() && sums.product()->size() > 0) {
  for (int ibx = sums->getFirstBX(); ibx <= sums->getLastBX(); ibx) {
    for (l1t::EtSumBxCollection::const_iterator it=sums->begin(ibx); it!=sums->end(ibx); it) {
      int type = static_cast<int>( it->getType() );
      if(type == l1t::EtSum::EtSumType::kMissingEt) {
        l1etmEt_->Fill(it->et());
        l1etmPhi_->Fill(it->phi());

        if( it->et() > l1ETMMin_){
          l1etmEtEffNum_->Fill(it->et());
      }
  }
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"//std::cout << ""check menu "" << HLTCP.tableName() << std::endl;
if(moduleType == ""HLTL1TSeed"") {
"
-------------------------------------------------------------------------
"if(moduleType == ""HLTL1TSeed"") {
     //std::cout << ""check menu "" << HLTCP.tableName() << std::endl;
}"
-------------------------------------------------------------------------
"//std::cout << ""check menu "" << HLTCP.tableName() << std::endl;
if(moduleType == ""HLTL1TSeed"") {
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"isFirstL1Seed_ = HLTCP.moduleType(std::get<kName>(filterIndices_[0])) == ""HLTL1TSeed"";
"
-------------------------------------------------------------------------
"```cpp
isFirstL1Seed_ = HLTCP.moduleType(std::get<kName>(filterIndices_[0])) == ""HLTL1TSeed"";
```"
-------------------------------------------------------------------------
"isFirstL1Seed_ = HLTCP.moduleType(std::get<kName>(filterIndices_[0])) == ""HLTL1TSeed"";
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"#ifdef EDM_ML_DEBUG  
"
-------------------------------------------------------------------------
"#ifdef EDM_ML_DEBUG
     filterMET_.push_back(n.met);
     filterLevel_.push_back(n.level);
 
     ss << ""\n    "" << i << "" "" << std::get<kModuleIndex>(filterIndices_[i])
        << "" "" << filterName
        << "" "" << moduleType;"
-------------------------------------------------------------------------
"#ifdef EDM_ML_DEBUG  
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"//std::cout << ""trigger object id "" << isL1 << "" "" << trgObj.id << "" "" << trigger::TriggerL1Tau << "" ""<< trigger::TriggerTau << std::endl;
if(! ((isL1 && trgObj.id == trigger::TriggerL1Tau) || trgObj.id == trigger::TriggerTau ) )
  //std::cout << ""trigger object DR match"" << std::endl;
"
-------------------------------------------------------------------------
"// Check if the trigger object ID matches L1 or regular TriggerTau
if (!((isL1 && trgObj.id == trigger::TriggerL1Tau) || trgObj.id == trigger::TriggerTau)) {
    // Output information about trigger object DR match
}"
-------------------------------------------------------------------------
"//std::cout << ""trigger object id "" << isL1 << "" "" << trgObj.id << "" "" << trigger::TriggerL1Tau << "" ""<< trigger::TriggerTau << std::endl;
if(! ((isL1 && trgObj.id == trigger::TriggerL1Tau) || trgObj.id == trigger::TriggerTau ) )
  //std::cout << ""trigger object DR match"" << std::endl;
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"if(! ((isL1 && (trgObj.id == trigger::TriggerL1EG))
"
-------------------------------------------------------------------------
if (!((isL1 && (trgObj.id == trigger::TriggerL1EG))))
-------------------------------------------------------------------------
"if(! ((isL1 && (trgObj.id == trigger::TriggerL1EG))
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"const int ntaus = hltPath_.getFilterNTaus(hltPath_.getLastL3TauFilterIndex());
"
-------------------------------------------------------------------------
"```cpp
int ntaus = -1;
if (doRefAnalysis_) {
    ntaus = hltPath_.getFilterNTaus(hltPath_.getLastL3TauFilterIndex());
}
```"
-------------------------------------------------------------------------
"const int ntaus = hltPath_.getFilterNTaus(hltPath_.getLastL3TauFilterIndex());
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"
  // Triggered object kinematics
  for(const HLTTauDQMPath::Object& obj: triggerObjs) {
    if(obj.id == trigger::TriggerTau){
 hTrigTauEt_->Fill(obj.object.pt());
TrigTauEta_->Fill(obj.object.eta());
TrigTauPhi_->Fill(obj.object.phi());
    }
    if(obj.id == trigger::TriggerElectron || obj.id == trigger::TriggerPhoton){
      hTrigElectronEt_->Fill(obj.object.pt());
      hTrigElectronEta_->Fill(obj.object.eta());
      hTrigElectronPhi_->Fill(obj.object.phi());
    }
    if(obj.id == trigger::TriggerMuon){   
      hTrigMuonEt_->Fill(obj.object.pt());   
      hTrigMuonEta_->Fill(obj.object.eta());
      hTrigMuonPhi_->Fill(obj.object.phi());
    }
    if(obj.id == trigger::TriggerMET){
      hTrigMETEt_->Fill(obj.object.pt());
      hTrigMETPhi_->Fill(obj.object.phi());
    }
"
-------------------------------------------------------------------------
"```cpp
  // Triggered object kinematics
  for(const HLTTauDQMPath::Object& obj: triggerObjs) {
    if(obj.id == trigger::TriggerTau){
      hTrigTauEt_->Fill(obj.object.pt());
      hTrigTauEta_->Fill(obj.object.eta());
      hTrigTauPhi_->Fill(obj.object.phi());
    }
    if(obj.id == trigger::TriggerElectron || obj.id == trigger::TriggerPhoton){
      hTrigElectronEt_->Fill(obj.object.pt());
      hTrigElectronEta_->Fill(obj.object.eta());
      hTrigElectronPhi_->Fill(obj.object.phi());
    }
    if(obj.id == trigger::TriggerMuon){   
      hTrigMuonEt_->Fill(obj.object.pt());   
      hTrigMuonEta_->Fill(obj.object.eta());
      hTrigMuonPhi_->Fill(obj.object.phi());
    }
    if(obj.id == trigger::TriggerMET){
      hTrigMETEt_->Fill(obj.object.pt());
      hTrigMETPhi_->Fill(obj.object.phi());
    }
  }
```  "
-------------------------------------------------------------------------
"
  // Triggered object kinematics
  for(const HLTTauDQMPath::Object& obj: triggerObjs) {
    if(obj.id == trigger::TriggerTau){
 hTrigTauEt_->Fill(obj.object.pt());
TrigTauEta_->Fill(obj.object.eta());
TrigTauPhi_->Fill(obj.object.phi());
    }
    if(obj.id == trigger::TriggerElectron || obj.id == trigger::TriggerPhoton){
      hTrigElectronEt_->Fill(obj.object.pt());
      hTrigElectronEta_->Fill(obj.object.eta());
      hTrigElectronPhi_->Fill(obj.object.phi());
    }
    if(obj.id == trigger::TriggerMuon){   
      hTrigMuonEt_->Fill(obj.object.pt());   
      hTrigMuonEta_->Fill(obj.object.eta());
      hTrigMuonPhi_->Fill(obj.object.phi());
    }
    if(obj.id == trigger::TriggerMET){
      hTrigMETEt_->Fill(obj.object.pt());
      hTrigMETPhi_->Fill(obj.object.phi());
    }
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"L1Taus                = cms.untracked.InputTag(""hltCaloStage2Digis"", ""Tau""),
L1ETM                 = cms.untracked.InputTag(""hltCaloStage2Digis"",""EtSum""),
"
-------------------------------------------------------------------------
"```python
L1Taus = cms.untracked.InputTag(""hltCaloStage2Digis"", ""Tau"")
L1ETM = cms.untracked.InputTag(""hltCaloStage2Digis"", ""EtSum"")
```"
-------------------------------------------------------------------------
"L1Taus                = cms.untracked.InputTag(""hltCaloStage2Digis"", ""Tau""),
L1ETM                 = cms.untracked.InputTag(""hltCaloStage2Digis"",""EtSum""),
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"b2gElePlusSingleJetHLTValidation*
"
-------------------------------------------------------------------------
b2gElePlusSingleJetHLTValidation*
-------------------------------------------------------------------------
"b2gElePlusSingleJetHLTValidation*
"
-------------------------------------------------------------------------
"Recom
PRs: 14129, 14144"
-------------------------------------------------------------------------
=========================================================================
"
b2gElePlusSingleJetHLTValidation  = cms.EDAnalyzer('B2GSingleLeptonHLTValidation',
# Directory
sDir         = cms.untracked.string('HLT/B2GHLTValidation/B2G/ElePlusSingleJet/'),
# Electrons
sElectrons   = cms.untracked.string('gedGsfElectrons'),
ptElectrons  = cms.untracked.double(50.),
etaElectrons = cms.untracked.double(2.5),
minElectrons = cms.untracked.uint32(1),
# Muons
sMuons       = cms.untracked.string('muons'),
ptMuons      = cms.untracked.double(40.),
etaMuons     = cms.untracked.double(2.1),
minMuons     = cms.untracked.uint32(0),
# Jets
sJets        = cms.untracked.string('ak4PFJetsCHS'),
ptJets0      = cms.untracked.double(140.),
ptJets1      = cms.untracked.double(-1.0),
etaJets      = cms.untracked.double(2.4),
minJets      = cms.untracked.uint32(1),
# Trigger
sTrigger     = cms.untracked.string(""TriggerResults""),
vsPaths      = cms.untracked.vstring(['HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet140',
                                      'HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165']),

"
-------------------------------------------------------------------------
"```python
import FWCore.ParameterSet.Config as cms

b2gElePlusSingleJetHLTValidation = cms.EDAnalyzer('B2GSingleLeptonHLTValidation',
    # Directory
    sDir = cms.untracked.string('HLT/B2GHLTValidation/B2G/ElePlusSingleJet/'),
    # Electrons
    sElectrons = cms.untracked.string('gedGsfElectrons'),
    ptElectrons = cms.untracked.double(50.),
    etaElectrons = cms.untracked.double(2.5),
    minElectrons = cms.untracked.uint32(1),
    # Muons
    sMuons = cms.untracked.string('muons'),
    ptMuons = cms.untracked.double(40.),
    etaMuons = cms.untracked.double(2.1),
    minMuons = cms.untracked.uint32(0),
    # Jets
    sJets = cms.untracked.string('ak4PFJetsCHS'),
    ptJets0 = cms.untracked.double(140.),
    ptJets1 = cms.untracked.double(-1.0),
    etaJets = cms.untracked.double(2.4),
    minJets = cms.untracked.uint32(1),
    # Trigger
    sTrigger = cms.untracked.string(""TriggerResults""),
    vsPaths = cms.untracked.vstring(['HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet140',
                                     'HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165']),
)
```"
-------------------------------------------------------------------------
"
b2gElePlusSingleJetHLTValidation  = cms.EDAnalyzer('B2GSingleLeptonHLTValidation',
# Directory
sDir         = cms.untracked.string('HLT/B2GHLTValidation/B2G/ElePlusSingleJet/'),
# Electrons
sElectrons   = cms.untracked.string('gedGsfElectrons'),
ptElectrons  = cms.untracked.double(50.),
etaElectrons = cms.untracked.double(2.5),
minElectrons = cms.untracked.uint32(1),
# Muons
sMuons       = cms.untracked.string('muons'),
ptMuons      = cms.untracked.double(40.),
etaMuons     = cms.untracked.double(2.1),
minMuons     = cms.untracked.uint32(0),
# Jets
sJets        = cms.untracked.string('ak4PFJetsCHS'),
ptJets0      = cms.untracked.double(140.),
ptJets1      = cms.untracked.double(-1.0),
etaJets      = cms.untracked.double(2.4),
minJets      = cms.untracked.uint32(1),
# Trigger
sTrigger     = cms.untracked.string(""TriggerResults""),
vsPaths      = cms.untracked.vstring(['HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet140',
                                      'HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165']),

"
-------------------------------------------------------------------------
"Recom
PRs: 14129, 14144"
-------------------------------------------------------------------------
=========================================================================
