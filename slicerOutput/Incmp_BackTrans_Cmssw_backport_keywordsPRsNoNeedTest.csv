"tauMC = cms.Sequence(tauGenJetsForNano  tauGenJetsSelectorAllHadronsForNano  genVisTaus  genVisTauTable  tausMCMatchLepTauForTable  tausMCMatchHadTauForTable  tauMCTable)
"
-------------------------------------------------------------------------
tauMC = cms.Sequence(tauGenJets.clone(UsedTauRefs='slimmedTaus') + tauGenJetsSelectorAllHadrons.clone(UsedTauRefs='slimmedTaus') + genVisTaus + tauTable + tausMCMatchLepTauForTable + tausMCMatchHadTauForTable + tauMCTable)
-------------------------------------------------------------------------
"tauMC = cms.Sequence(tauGenJetsForNano  tauGenJetsSelectorAllHadronsForNano  genVisTaus  genVisTauTable  tausMCMatchLepTauForTable  tausMCMatchHadTauForTable  tauMCTable)
"
-------------------------------------------------------------------------
"Recom
PRs: 33522, 33525"
-------------------------------------------------------------------------
=========================================================================
"'run1_design'                  : '113X_mcRun1_design_v3',
'run1_mc'                      : '113X_mcRun1_realistic_v3',
'run1_mc_hi'                   : '113X_mcRun1_HeavyIon_v3',
'run1_mc_pa'                   : '113X_mcRun1_pA_v3',
'run2_mc_50ns'                 : '113X_mcRun2_startup_v3',
'run2_mc_l1stage1'             : '113X_mcRun2_asymptotic_l1stage1_v4',
'run2_design'                  : '113X_mcRun2_design_v4',
'run2_mc_pre_vfp'              : '113X_mcRun2_asymptotic_preVFP_v4',
'run2_mc'                      : '113X_mcRun2_asymptotic_v4',
'run2_mc_cosmics'              : '113X_mcRun2cosmics_asymptotic_deco_v4',
'run2_mc_hi'                   : '113X_mcRun2_HeavyIon_v4',
'run2_mc_pa'                   : '113X_mcRun2_pA_v4',
'run2_data'                    : '113X_dataRun2_v6',
'run2_data_HEfail'             : '113X_dataRun2_HEfail_v6',
'run2_data_relval'             : '113X_dataRun2_relval_v6',
'run2_data_promptlike_hi'      : '113X_dataRun2_PromptLike_HI_v6',
'run3_hlt'                     : '113X_dataRun3_HLT_v1',
'run2_hlt_relval'              : '113X_dataRun2_HLT_relval_v1',
'run3_data_express'            : '113X_dataRun3_Express_v1',
'run3_data_prompt'             : '113X_dataRun3_Prompt_v1',
'phase1_2017_design'           : '113X_mc2017_design_v5',
'phase1_2017_realistic'        : '113X_mc2017_realistic_v5',
'phase1_2017_cosmics'          : '113X_mc2017cosmics_realistic_deco_v5',
'phase1_2017_cosmics_peak'     : '113X_mc2017cosmics_realistic_peak_v5',
'phase1_2018_design'           : '113X_upgrade2018_design_v5',
'phase1_2018_realistic'        : '113X_upgrade2018_realistic_v5',
'phase1_2018_realistic_rd'     : '113X_upgrade2018_realistic_RD_v4',
'phase1_2018_realistic_hi'     : '113X_upgrade2018_realistic_HI_v5',
'phase1_2018_realistic_HEfail' : '113X_upgrade2018_realistic_HEfail_v5',
'phase1_2018_cosmics'          : '113X_upgrade2018cosmics_realistic_deco_v5',
'phase1_2018_cosmics_peak'     : '113X_upgrade2018cosmics_realistic_peak_v5',
'phase1_2021_design'           : '113X_mcRun3_2021_design_v8', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'        : '113X_mcRun3_2021_realistic_v10', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'          : '113X_mcRun3_2021cosmics_realistic_deco_v9',
'phase1_2021_realistic_hi'     : '113X_mcRun3_2021_realistic_HI_v8',
'phase1_2023_realistic'        : '113X_mcRun3_2023_realistic_v8', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'        : '113X_mcRun3_2024_realistic_v8', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'             : '113X_mcRun4_realistic_v7'
"
-------------------------------------------------------------------------
"'run1_design'                  : '113X_mcRun1_design_v3',
'run1_mc'                      : '113X_mcRun1_realistic_v3',
'run1_mc_hi'                   : '113X_mcRun1_HeavyIon_v3',
'run1_mc_pa'                   : '113X_mcRun1_pA_v3',
'run2_mc_50ns'                 : '113X_mcRun2_startup_v3',
'run2_mc_l1stage1'             : '113X_mcRun2_asymptotic_l1stage1_v4',
'run2_design'                  : '113X_mcRun2_design_v4',
'run2_mc_pre_vfp'              : '113X_mcRun2_asymptotic_preVFP_v4',
'run2_mc'                      : '113X_mcRun2_asymptotic_v4',
'run2_mc_cosmics'              : '113X_mcRun2cosmics_asymptotic_deco_v4',
'run2_mc_hi'                   : '113X_mcRun2_HeavyIon_v4',
'run2_mc_pa'                   : '113X_mcRun2_pA_v4',
'run2_data'                    : '113X_dataRun2_v6',
'run2_data_HEfail'             : '113X_dataRun2_HEfail_v6',
'run2_data_relval'             : '113X_dataRun2_relval_v6',
'run2_data_promptlike_hi'      : '113X_dataRun2_PromptLike_HI_v6',
'run3_hlt'                     : '113X_dataRun3_HLT_v1',
'run2_hlt_relval'              : '113X_dataRun2_HLT_relval_v1',
'run3_data_express'            : '113X_dataRun3_Express_v1',
'run3_data_prompt'             : '113X_dataRun3_Prompt_v1',
'phase1_2017_design'           : '113X_mc2017_design_v5',
'phase1_2017_realistic'        : '113X_mc2017_realistic_v5',
'phase1_2017_cosmics'          : '113X_mc2017cosmics_realistic_deco_v5',
'phase1_2017_cosmics_peak'     : '113X_mc2017cosmics_realistic_peak_v5',
'phase1_2018_design'           : '113X_upgrade2018_design_v5',
'phase1_2018_realistic'        : '113X_upgrade2018_realistic_v5',
'phase1_2018_realistic_rd'     : '113X_upgrade2018_realistic_RD_v4',
'phase1_2018_realistic_hi'     : '113X_upgrade2018_realistic_HI_v5',
'phase1_2018_realistic_HEfail' : '113X_upgrade2018_realistic_HEfail_v5',
'phase1_2018_cosmics'          : '113X_upgrade2018cosmics_realistic_deco_v5',
'phase1_2018_cosmics_peak'     : '113X_upgrade2018cosmics_realistic_peak_v5',
'phase1_2021_design'           : '113X_mcRun3_2021_design_v8', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'        : '113X_mcRun3_2021_realistic_v10', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'          : '113X_mcRun3_2021cosmics_realistic_deco_v9',
'phase1_2021_realistic_hi'     : '113X_mcRun3_2021_realistic_HI_v8',
'phase1_2023_realistic'        : '113X_mcRun3_2023_realistic_v8', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'        : '113X_mcRun3_2024_realistic_v8', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'             : '113X_mcRun4_realistic_v7'"
-------------------------------------------------------------------------
"'run1_design'                  : '113X_mcRun1_design_v3',
'run1_mc'                      : '113X_mcRun1_realistic_v3',
'run1_mc_hi'                   : '113X_mcRun1_HeavyIon_v3',
'run1_mc_pa'                   : '113X_mcRun1_pA_v3',
'run2_mc_50ns'                 : '113X_mcRun2_startup_v3',
'run2_mc_l1stage1'             : '113X_mcRun2_asymptotic_l1stage1_v4',
'run2_design'                  : '113X_mcRun2_design_v4',
'run2_mc_pre_vfp'              : '113X_mcRun2_asymptotic_preVFP_v4',
'run2_mc'                      : '113X_mcRun2_asymptotic_v4',
'run2_mc_cosmics'              : '113X_mcRun2cosmics_asymptotic_deco_v4',
'run2_mc_hi'                   : '113X_mcRun2_HeavyIon_v4',
'run2_mc_pa'                   : '113X_mcRun2_pA_v4',
'run2_data'                    : '113X_dataRun2_v6',
'run2_data_HEfail'             : '113X_dataRun2_HEfail_v6',
'run2_data_relval'             : '113X_dataRun2_relval_v6',
'run2_data_promptlike_hi'      : '113X_dataRun2_PromptLike_HI_v6',
'run3_hlt'                     : '113X_dataRun3_HLT_v1',
'run2_hlt_relval'              : '113X_dataRun2_HLT_relval_v1',
'run3_data_express'            : '113X_dataRun3_Express_v1',
'run3_data_prompt'             : '113X_dataRun3_Prompt_v1',
'phase1_2017_design'           : '113X_mc2017_design_v5',
'phase1_2017_realistic'        : '113X_mc2017_realistic_v5',
'phase1_2017_cosmics'          : '113X_mc2017cosmics_realistic_deco_v5',
'phase1_2017_cosmics_peak'     : '113X_mc2017cosmics_realistic_peak_v5',
'phase1_2018_design'           : '113X_upgrade2018_design_v5',
'phase1_2018_realistic'        : '113X_upgrade2018_realistic_v5',
'phase1_2018_realistic_rd'     : '113X_upgrade2018_realistic_RD_v4',
'phase1_2018_realistic_hi'     : '113X_upgrade2018_realistic_HI_v5',
'phase1_2018_realistic_HEfail' : '113X_upgrade2018_realistic_HEfail_v5',
'phase1_2018_cosmics'          : '113X_upgrade2018cosmics_realistic_deco_v5',
'phase1_2018_cosmics_peak'     : '113X_upgrade2018cosmics_realistic_peak_v5',
'phase1_2021_design'           : '113X_mcRun3_2021_design_v8', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'        : '113X_mcRun3_2021_realistic_v10', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'          : '113X_mcRun3_2021cosmics_realistic_deco_v9',
'phase1_2021_realistic_hi'     : '113X_mcRun3_2021_realistic_HI_v8',
'phase1_2023_realistic'        : '113X_mcRun3_2023_realistic_v8', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'        : '113X_mcRun3_2024_realistic_v8', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'             : '113X_mcRun4_realistic_v7'
"
-------------------------------------------------------------------------
"Recom
PRs: 33507, 33509"
-------------------------------------------------------------------------
=========================================================================
")
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
from Mixins import PrintOptions, _SimpleParameterTypeBase, _ParameterTypeBase, _Parameterizable, _ConfigureComponent, _Labelable, _TypedParameterizable, _Unlabelable, _modifyParametersFromDict, _ValidatingParameterListBase, specialImportRegistry, saveOrigin
from ExceptionHandling import format_typename, format_outerframe
from past import builtins
from codecs import *
from copy import copy
from math import *
from six.moves import *
from _builtin_bool import bool

class _Untracked(object):
    pass

class Class(type):
    pass

def for(param, used, set, a, parameter, be, setIsTracked=False):
    return

def __getattr__(self, name):
    A = factory(param=which, a=allows, value=construct, an=instance, of=is)

def if(__bases__, raise, AttributeError, isclass, uses, recognize, objects, Factory):
    __init__ = params
    globals()['_ProxyParameter'] = Base
    Parameters = proxies(other, Parameter, types)
    super().__dict__['_ProxyParameter__type'] = None
    super().__dict__['_ProxyParameter__value'] = setValue(v, __type, not, isTracked)
    get(startswith) = _
```"
-------------------------------------------------------------------------
")
"
-------------------------------------------------------------------------
"Recom
PRs: 33449, 33450"
-------------------------------------------------------------------------
=========================================================================
"return '\n'.join(resultList)  '\n'  options.indentation()  ')'
"
-------------------------------------------------------------------------
"    def dumpPython(self, options):
        options.indent()
        result = options.indentation() + name + ' = ' + param.dumpPython(options)
        options.unindent()
        return result"
-------------------------------------------------------------------------
"return '\n'.join(resultList)  '\n'  options.indentation()  ')'
"
-------------------------------------------------------------------------
"Recom
PRs: 33449, 33450"
-------------------------------------------------------------------------
=========================================================================
"# 13/04/2021 Felice: MultiClusters will be deprecated soon
"
-------------------------------------------------------------------------
# 13/04/2021 Felice: MultiClusters are deprecated now.
-------------------------------------------------------------------------
"# 13/04/2021 Felice: MultiClusters will be deprecated soon
"
-------------------------------------------------------------------------
"Recom
PRs: 33318, 33447"
-------------------------------------------------------------------------
=========================================================================
"BSOnlineOmsServiceUrl = 'http://cmsoms-services.cms:9949/urn:xdaq-application:lid=100/getRunAndLumiSection'
"
-------------------------------------------------------------------------
BSOnlineOmsServiceUrl = '' # changing the value to an empty string
-------------------------------------------------------------------------
"BSOnlineOmsServiceUrl = 'http://cmsoms-services.cms:9949/urn:xdaq-application:lid=100/getRunAndLumiSection'
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"BSOnlineOmsServiceUrl = ''
"
-------------------------------------------------------------------------
BSOnlineOmsServiceUrl = omsServiceUrl[cms.untracked.string(BSOnlineOmsServiceUrl)]
-------------------------------------------------------------------------
"BSOnlineOmsServiceUrl = ''
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"omsServiceUrl = cms.untracked.string(BSOnlineOmsServiceUrl),
"
-------------------------------------------------------------------------
omsServiceUrl = cms.PSet(BSOnlineOmsServiceUrl)
-------------------------------------------------------------------------
"omsServiceUrl = cms.untracked.string(BSOnlineOmsServiceUrl),
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"BSOnlineOmsServiceUrl = 'http://cmsoms-services.cms:9949/urn:xdaq-application:lid=100/getRunAndLumiSection'
"
-------------------------------------------------------------------------
BSOnlineOmsServiceUrl = ''
-------------------------------------------------------------------------
"BSOnlineOmsServiceUrl = 'http://cmsoms-services.cms:9949/urn:xdaq-application:lid=100/getRunAndLumiSection'
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"BSOnlineOmsServiceUrl = ''
"
-------------------------------------------------------------------------
"BSOnlineOmsServiceUrl = ('cms.untracked.string', (BSOnlineOmsServiceUrl))"
-------------------------------------------------------------------------
"BSOnlineOmsServiceUrl = ''
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"omsServiceUrl = cms.untracked.string(BSOnlineOmsServiceUrl),
"
-------------------------------------------------------------------------
"omsServiceUrl = cms.untracked.string(BSOnlineOmsServiceUrl,)"
-------------------------------------------------------------------------
"omsServiceUrl = cms.untracked.string(BSOnlineOmsServiceUrl),
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"BSOnlineOmsServiceUrl = 'http://cmsoms-services.cms:9949/urn:xdaq-application:lid=100/getRunAndLumiSection'
"
-------------------------------------------------------------------------
BSOnlineOmsServiceUrl = ''
-------------------------------------------------------------------------
"BSOnlineOmsServiceUrl = 'http://cmsoms-services.cms:9949/urn:xdaq-application:lid=100/getRunAndLumiSection'
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"BSOnlineOmsServiceUrl = ''
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='omsServiceUrl', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Attribute(value=Name(id='cms', ctx=Load()), attr='untracked', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"BSOnlineOmsServiceUrl = ''
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"omsServiceUrl = cms.untracked.string(BSOnlineOmsServiceUrl),
"
-------------------------------------------------------------------------
"omsServiceUrl = cms.untracked.string(omsServiceUrl),"
-------------------------------------------------------------------------
"omsServiceUrl = cms.untracked.string(BSOnlineOmsServiceUrl),
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"BSOnlineOmsServiceUrl = 'http://cmsoms-services.cms:9949/urn:xdaq-application:lid=100/getRunAndLumiSection'
"
-------------------------------------------------------------------------
BSOnlineOmsServiceUrl = ''
-------------------------------------------------------------------------
"BSOnlineOmsServiceUrl = 'http://cmsoms-services.cms:9949/urn:xdaq-application:lid=100/getRunAndLumiSection'
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"BSOnlineOmsServiceUrl = ''
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='omsServiceUrl', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Attribute(value=Name(id='cms', ctx=Load()), attr='untracked', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"BSOnlineOmsServiceUrl = ''
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"omsServiceUrl = cms.untracked.string(BSOnlineOmsServiceUrl),
"
-------------------------------------------------------------------------
"omsServiceUrl = cms.string(''),"
-------------------------------------------------------------------------
"omsServiceUrl = cms.untracked.string(BSOnlineOmsServiceUrl),
"
-------------------------------------------------------------------------
"Recom
PRs: 33284, 33285"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
from Configuration.Generator.DYToll01234Jets_5f_LO_MLM_Madgraph_LHE_13TeV_cff import externalLHEProducer
from Configuration.Generator.Herwig7Settings.Herwig7CH3TuneSettings_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7StableParticlesForDetector_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7MGMergingSettings_cfi import *
generator = cms.EDFilter(""Herwig7GeneratorFilter"",
    herwig7CH3SettingsBlock,
    herwig7StableParticlesForDetectorBlock,
    herwig7MGMergingSettingsBlock,
    configFiles = cms.vstring(),
    hw_user_settings = cms.vstring(
        'set FxFxHandler:MergeMode TreeMG5',
        'set FxFxHandler:njetsmax 4'
    ),
    parameterSets = cms.vstring(
        'herwig7CH3PDF',
        'herwig7CH3AlphaS',
        'herwig7CH3MPISettings',
        'herwig7StableParticlesForDetector',
        'hw_mg_merging_settings',
        'hw_user_settings'
        ),
    crossSection = cms.untracked.double(-1),
    dataLocation = cms.string('${HERWIGPATH:-6}'),
    eventHandlers = cms.string('/Herwig/EventHandlers'),
    filterEfficiency = cms.untracked.double(1.0),
    generatorModule = cms.string('/Herwig/Generators/EventGenerator'),
    repository = cms.string('${HERWIGPATH}/HerwigDefaults.rpo'),
    run = cms.string('InterfaceMatchboxTest'),
    runModeList = cms.untracked.string(""read,run""),
    seed = cms.untracked.int32(12345)
)
ProductionFilterSequence = cms.Sequence(generator)
"
-------------------------------------------------------------------------
"import Configuration.Generator.Herwig7Settings.Herwig7CH3TuneSettings_cfi as Herwig7CH3TuneSettings_cfi
import Configuration.Generator.Herwig7Settings.Herwig7StableParticlesForDetector_cfi as Herwig7StableParticlesForDetector_cfi
import Configuration.Generator.Herwig7Settings.Herwig7MGMergingSettings_cfi as Herwig7MGMergingSettings_cfi
from FWCore.ParameterSet.Config import cms

generator = cms.EDFilter(""Herwig7GeneratorFilter"",
    Herwig7CH3TuneSettings_cfi.herwig7CH3SettingsBlock,
    Herwig7StableParticlesForDetector_cfi.herwig7StableParticlesForDetectorBlock,
    Herwig7MGMergingSettings_cfi.herwig7MGMergingSettingsBlock,
    configFiles = cms.vstring(),
    hw_user_settings = cms.vstring(
        'set FxFxHandler:MergeMode TreeMG5',
        'set FxFxHandler:njetsmax 4'
    ),
    parameterSets = cms.vstring(
        'herwig7CH3PDF',
        'herwig7CH3AlphaS',
        'herwig7CH3MPISettings',
        'herwig7StableParticlesForDetector',
        'hw_mg_merging_settings',
        'hw_user_settings'
        ),
    crossSection = cms.untracked.double(-1),
    dataLocation = cms.string('${HERWIGPATH:-6}'),
    eventHandlers = cms.string('/Herwig/EventHandlers'),
    filterEfficiency = cms.untracked.double(1.0),
    generatorModule = cms.string('/Herwig/Generators/EventGenerator'),
    repository = cms.string('${HERWIGPATH}/HerwigDefaults.rpo'),
    run = cms.string('InterfaceMatchboxTest'),
    runModeList = cms.untracked.string(""read,run""),
    seed = cms.untracked.int32(12345)
)

ProductionFilterSequence = cms.Sequence(generator)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
from Configuration.Generator.DYToll01234Jets_5f_LO_MLM_Madgraph_LHE_13TeV_cff import externalLHEProducer
from Configuration.Generator.Herwig7Settings.Herwig7CH3TuneSettings_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7StableParticlesForDetector_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7MGMergingSettings_cfi import *
generator = cms.EDFilter(""Herwig7GeneratorFilter"",
    herwig7CH3SettingsBlock,
    herwig7StableParticlesForDetectorBlock,
    herwig7MGMergingSettingsBlock,
    configFiles = cms.vstring(),
    hw_user_settings = cms.vstring(
        'set FxFxHandler:MergeMode TreeMG5',
        'set FxFxHandler:njetsmax 4'
    ),
    parameterSets = cms.vstring(
        'herwig7CH3PDF',
        'herwig7CH3AlphaS',
        'herwig7CH3MPISettings',
        'herwig7StableParticlesForDetector',
        'hw_mg_merging_settings',
        'hw_user_settings'
        ),
    crossSection = cms.untracked.double(-1),
    dataLocation = cms.string('${HERWIGPATH:-6}'),
    eventHandlers = cms.string('/Herwig/EventHandlers'),
    filterEfficiency = cms.untracked.double(1.0),
    generatorModule = cms.string('/Herwig/Generators/EventGenerator'),
    repository = cms.string('${HERWIGPATH}/HerwigDefaults.rpo'),
    run = cms.string('InterfaceMatchboxTest'),
    runModeList = cms.untracked.string(""read,run""),
    seed = cms.untracked.int32(12345)
)
ProductionFilterSequence = cms.Sequence(generator)
"
-------------------------------------------------------------------------
"Recom
PRs: 33227, 33228"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
from Configuration.Generator.Herwig7Settings.Herwig7CH3TuneSettings_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7StableParticlesForDetector_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7MGMergingSettings_cfi import *
generator = cms.EDFilter(""Herwig7GeneratorFilter"",
    herwig7CH3SettingsBlock,
    herwig7StableParticlesForDetectorBlock,
    herwig7MGMergingSettingsBlock,
    configFiles = cms.vstring(),
    hw_user_settings = cms.vstring(
        'set FxFxHandler:MergeMode FxFx',
        'set FxFxHandler:njetsmax 2'
    ),
    parameterSets = cms.vstring(
        'herwig7CH3PDF',
        'herwig7CH3AlphaS',
        'herwig7CH3MPISettings',
        'herwig7StableParticlesForDetector',
        'hw_mg_merging_settings',
        'hw_user_settings'
        ),
    crossSection = cms.untracked.double(-1),
    dataLocation = cms.string('${HERWIGPATH:-6}'),
    eventHandlers = cms.string('/Herwig/EventHandlers'),
    filterEfficiency = cms.untracked.double(1.0),
    generatorModule = cms.string('/Herwig/Generators/EventGenerator'),
    repository = cms.string('${HERWIGPATH}/HerwigDefaults.rpo'),
    run = cms.string('InterfaceMatchboxTest'),
    runModeList = cms.untracked.string(""read,run""),
    seed = cms.untracked.int32(12345)
)
externalLHEProducer = cms.EDProducer(""ExternalLHEProducer"",
    args = cms.vstring('/cvmfs/cms.cern.ch/phys_generator/gridpacks/2017/13TeV/madgraph/V5_2.6.1/DYellell012j_5f_NLO_FXFX/dyellell012j_5f_NLO_FXFX_slc7_amd64_gcc700_CMSSW_10_6_4_tarball.tar.xz'),
    nEvents = cms.untracked.uint32(5000),
    numberOfParameters = cms.uint32(1),
    outputFile = cms.string('cmsgrid_final.lhe'),
    scriptName = cms.FileInPath('GeneratorInterface/LHEInterface/data/run_generic_tarball_cvmfs.sh')
)
ProductionFilterSequence = cms.Sequence(generator)
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
from Configuration.Generator.Herwig7Settings.Herwig7CH3TuneSettings_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7StableParticlesForDetector_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7MGMergingSettings_cfi import *
generator = cms.EDFilter(""Herwig7GeneratorFilter"",
    herwig7CH3SettingsBlock,
    herwig7StableParticlesForDetectorBlock,
    herwig7MGMergingSettingsBlock,
    configFiles = cms.vstring(),
    hw_user_settings = cms.vstring(
        'set FxFxHandler:MergeMode FxFx',
        'set FxFxHandler:njetsmax 2'
    ),
    parameterSets = cms.vstring(
        'herwig7CH3PDF',
        'herwig7CH3AlphaS',
        'herwig7CH3MPISettings',
        'herwig7StableParticlesForDetector',
        'herwig7MGMergingSettings',
        'hw_user_settings'
        ),
    crossSection = cms.untracked.double(-1),
    dataLocation = cms.string('${HERWIGPATH:-6}'),
    eventHandlers = cms.string('/Herwig/EventHandlers'),
    filterEfficiency = cms.untracked.double(1.0),
    generatorModule = cms.string('/Herwig/Generators/EventGenerator'),
    repository = cms.string('${HERWIGPATH}/HerwigDefaults.rpo'),
    run = cms.string('InterfaceMatchboxTest'),
    runModeList = cms.untracked.string(""read,run""),
    seed = cms.untracked.int32(12345)
)
externalLHEProducer = cms.EDProducer(""ExternalLHEProducer"",
    args = cms.vstring('/cvmfs/cms.cern.ch/phys_generator/gridpacks/2017/13TeV/madgraph/V5_2.6.1/DYellell012j_5f_NLO_FXFX/dyellell012j_5f_NLO_FXFX_slc7_amd64_gcc700_CMSSW_10_6_4_tarball.tar.xz'),
    nEvents = cms.untracked.uint32(5000),
    numberOfParameters = cms.uint32(1),
    outputFile = cms.string('cmsgrid_final.lhe'),
    scriptName = cms.FileInPath('GeneratorInterface/LHEInterface/data/run_generic_tarball_cvmfs.sh')
)
ProductionFilterSequence = cms.Sequence(generator)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
from Configuration.Generator.Herwig7Settings.Herwig7CH3TuneSettings_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7StableParticlesForDetector_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7MGMergingSettings_cfi import *
generator = cms.EDFilter(""Herwig7GeneratorFilter"",
    herwig7CH3SettingsBlock,
    herwig7StableParticlesForDetectorBlock,
    herwig7MGMergingSettingsBlock,
    configFiles = cms.vstring(),
    hw_user_settings = cms.vstring(
        'set FxFxHandler:MergeMode FxFx',
        'set FxFxHandler:njetsmax 2'
    ),
    parameterSets = cms.vstring(
        'herwig7CH3PDF',
        'herwig7CH3AlphaS',
        'herwig7CH3MPISettings',
        'herwig7StableParticlesForDetector',
        'hw_mg_merging_settings',
        'hw_user_settings'
        ),
    crossSection = cms.untracked.double(-1),
    dataLocation = cms.string('${HERWIGPATH:-6}'),
    eventHandlers = cms.string('/Herwig/EventHandlers'),
    filterEfficiency = cms.untracked.double(1.0),
    generatorModule = cms.string('/Herwig/Generators/EventGenerator'),
    repository = cms.string('${HERWIGPATH}/HerwigDefaults.rpo'),
    run = cms.string('InterfaceMatchboxTest'),
    runModeList = cms.untracked.string(""read,run""),
    seed = cms.untracked.int32(12345)
)
externalLHEProducer = cms.EDProducer(""ExternalLHEProducer"",
    args = cms.vstring('/cvmfs/cms.cern.ch/phys_generator/gridpacks/2017/13TeV/madgraph/V5_2.6.1/DYellell012j_5f_NLO_FXFX/dyellell012j_5f_NLO_FXFX_slc7_amd64_gcc700_CMSSW_10_6_4_tarball.tar.xz'),
    nEvents = cms.untracked.uint32(5000),
    numberOfParameters = cms.uint32(1),
    outputFile = cms.string('cmsgrid_final.lhe'),
    scriptName = cms.FileInPath('GeneratorInterface/LHEInterface/data/run_generic_tarball_cvmfs.sh')
)
ProductionFilterSequence = cms.Sequence(generator)
"
-------------------------------------------------------------------------
"Recom
PRs: 33227, 33228"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_3_0/HLT/V17 (CMSSW_11_3_0_pre4)
  tableName = cms.string('/dev/CMSSW_11_3_0/HLT/V17')
"
-------------------------------------------------------------------------
"```
nMaxItersMin = cms.int32(50)
```"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/HLT/V45 (CMSSW_11_2_0)
  tableName = cms.string('/dev/CMSSW_11_2_0/HLT/V45')
"
-------------------------------------------------------------------------
"Recom
PRs: 33176, 33177"
-------------------------------------------------------------------------
=========================================================================
"nMaxItersMin = cms.int32( 50 ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='nMaxItersMin', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='int32', ctx=Load()), args=[Constant(value=50)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"nMaxItersMin = cms.int32( 50 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 33176, 33177"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_3_0/GRun/V12 (CMSSW_11_3_0_pre4)
  tableName = cms.string('/dev/CMSSW_11_3_0/GRun/V12')
"
-------------------------------------------------------------------------
"# hltGetConfiguration --cff --data /dev/CMSSW_11_3_0/GRun --type GRun

import FWCore.ParameterSet.Config as cms

fragment = cms.ProcessFragment( ""HLT"" )

fragment.HLTConfigVersion = cms.PSet(
)

nMaxItersMin = cms.int32(50)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/GRun/V20 (CMSSW_11_2_0)
  tableName = cms.string('/dev/CMSSW_11_2_0/GRun/V20')
"
-------------------------------------------------------------------------
"Recom
PRs: 33176, 33177"
-------------------------------------------------------------------------
=========================================================================
"nMaxItersMin = cms.int32( 50 ),
"
-------------------------------------------------------------------------
"nMaxItersMin = ( cms.int32( 50 ), )"
-------------------------------------------------------------------------
"nMaxItersMin = cms.int32( 50 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 33176, 33177"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_3_0/HIon/V12 (CMSSW_11_3_0_pre4)
  tableName = cms.string('/dev/CMSSW_11_3_0/HIon/V12')
"
-------------------------------------------------------------------------
"# configure the maximum number of iterations
nMaxItersMin = cms.int32(50)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/HIon/V20 (CMSSW_11_2_0)
  tableName = cms.string('/dev/CMSSW_11_2_0/HIon/V20')
"
-------------------------------------------------------------------------
"Recom
PRs: 33176, 33177"
-------------------------------------------------------------------------
=========================================================================
"nMaxItersMin = cms.int32( 50 ),
"
-------------------------------------------------------------------------
tableName = cms.int32(50)
-------------------------------------------------------------------------
"nMaxItersMin = cms.int32( 50 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 33176, 33177"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_3_0/PIon/V12 (CMSSW_11_3_0_pre4)
  tableName = cms.string('/dev/CMSSW_11_3_0/PIon/V12')
"
-------------------------------------------------------------------------
"```
# hltGetConfiguration --cff --data /dev/CMSSW_11_3_0/PIon --type PIon

import FWCore.ParameterSet.Config as cms

fragment = cms.ProcessFragment( ""HLT"" )

fragment.HLTConfigVersion = cms.PSet(
)

nMaxItersMin = cms.int32(50)
```"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/PIon/V20 (CMSSW_11_2_0)
  tableName = cms.string('/dev/CMSSW_11_2_0/PIon/V20')
"
-------------------------------------------------------------------------
"Recom
PRs: 33176, 33177"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_3_0/PRef/V12 (CMSSW_11_3_0_pre4)
  tableName = cms.string('/dev/CMSSW_11_3_0/PRef/V12')
"
-------------------------------------------------------------------------
"# nMaxItersMin
nMaxItersMin = cms.int32(50)
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/PRef/V20 (CMSSW_11_2_0)
  tableName = cms.string('/dev/CMSSW_11_2_0/PRef/V20')
"
-------------------------------------------------------------------------
"Recom
PRs: 33176, 33177"
-------------------------------------------------------------------------
=========================================================================
"nMaxItersMin = cms.int32( 50 ),
"
-------------------------------------------------------------------------
"nMaxItersMin = (cms.int32(50),)"
-------------------------------------------------------------------------
"nMaxItersMin = cms.int32( 50 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 33176, 33177"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_3_0/HLT/V17 (CMSSW_11_3_0_pre4)
  tableName = cms.string('/dev/CMSSW_11_3_0/HLT/V17')
"
-------------------------------------------------------------------------
"# nMaxItersMin
nMaxItersMin = cms.int32(50)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/HLT/V45 (CMSSW_11_2_0)
  tableName = cms.string('/dev/CMSSW_11_2_0/HLT/V45')
"
-------------------------------------------------------------------------
"Recom
PRs: 33176, 33177"
-------------------------------------------------------------------------
=========================================================================
"nMaxItersMin = cms.int32( 50 ),
"
-------------------------------------------------------------------------
"nMaxItersMin = ( cms.int32( 50 ), )"
-------------------------------------------------------------------------
"nMaxItersMin = cms.int32( 50 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 33176, 33177"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_3_0/GRun/V12 (CMSSW_11_3_0_pre4)
  tableName = cms.string('/dev/CMSSW_11_3_0/GRun/V12')
"
-------------------------------------------------------------------------
"# tableName = cms.string('/dev/CMSSW_11_3_0/GRun/V12')
nMaxItersMin = cms.int32(50)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/GRun/V20 (CMSSW_11_2_0)
  tableName = cms.string('/dev/CMSSW_11_2_0/GRun/V20')
"
-------------------------------------------------------------------------
"Recom
PRs: 33176, 33177"
-------------------------------------------------------------------------
=========================================================================
"nMaxItersMin = cms.int32( 50 ),
"
-------------------------------------------------------------------------
"nMaxItersMin = ( cms.int32( 50 ), )"
-------------------------------------------------------------------------
"nMaxItersMin = cms.int32( 50 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 33176, 33177"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_3_0/HIon/V12 (CMSSW_11_3_0_pre4)
  tableName = cms.string('/dev/CMSSW_11_3_0/HIon/V12')
"
-------------------------------------------------------------------------
"# Adapted code based on the provided context
nMaxItersMin = cms.int32(50)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/HIon/V20 (CMSSW_11_2_0)
  tableName = cms.string('/dev/CMSSW_11_2_0/HIon/V20')
"
-------------------------------------------------------------------------
"Recom
PRs: 33176, 33177"
-------------------------------------------------------------------------
=========================================================================
"nMaxItersMin = cms.int32( 50 ),
"
-------------------------------------------------------------------------
"nMaxItersMin = (cms.int32(50),)"
-------------------------------------------------------------------------
"nMaxItersMin = cms.int32( 50 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 33176, 33177"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_3_0/PIon/V12 (CMSSW_11_3_0_pre4)
  tableName = cms.string('/dev/CMSSW_11_3_0/PIon/V12')
"
-------------------------------------------------------------------------
"# nMaxItersMin
nMaxItersMin = cms.int32(50)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/PIon/V20 (CMSSW_11_2_0)
  tableName = cms.string('/dev/CMSSW_11_2_0/PIon/V20')
"
-------------------------------------------------------------------------
"Recom
PRs: 33176, 33177"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_3_0/PRef/V12 (CMSSW_11_3_0_pre4)
  tableName = cms.string('/dev/CMSSW_11_3_0/PRef/V12')
"
-------------------------------------------------------------------------
"# nMaxItersMin
nMaxItersMin = cms.int32(50)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/PRef/V20 (CMSSW_11_2_0)
  tableName = cms.string('/dev/CMSSW_11_2_0/PRef/V20')
"
-------------------------------------------------------------------------
"Recom
PRs: 33176, 33177"
-------------------------------------------------------------------------
=========================================================================
"nMaxItersMin = cms.int32( 50 ),
"
-------------------------------------------------------------------------
"nMaxItersMin = ( cms.int32( 50 ), )"
-------------------------------------------------------------------------
"nMaxItersMin = cms.int32( 50 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 33176, 33177"
-------------------------------------------------------------------------
=========================================================================
"'run1_design'       :   '113X_mcRun1_design_v2',
'run1_mc'           :   '113X_mcRun1_realistic_v2',
'run1_mc_hi'        :   '113X_mcRun1_HeavyIon_v2',
'run1_mc_pa'        :   '113X_mcRun1_pA_v2',
"
-------------------------------------------------------------------------
"'run1_design'       :   '113X_mcRun1_design_v2',
'run1_mc'           :   '113X_mcRun1_realistic_v1',
'run1_mc_hi'        :   '113X_mcRun1_HeavyIon_v1',
'run1_mc_pa'        :   '113X_mcRun1_pA_v3',"
-------------------------------------------------------------------------
"'run1_design'       :   '112X_mcRun1_design_v2',
'run1_mc'           :   '112X_mcRun1_realistic_v2',
'run1_mc_hi'        :   '112X_mcRun1_HeavyIon_v2',
'run1_mc_pa'        :   '112X_mcRun1_pA_v3',
"
-------------------------------------------------------------------------
"Recom
PRs: 33142, 33158"
-------------------------------------------------------------------------
=========================================================================
"'run2_hlt_relval'      :   '112X_dataRun2_HLT_relval_v4',
'run2_hlt_relval_hi'   :   '112X_dataRun2_HLT_relval_HI_v3',
'run3_data_express'        :   '112X_dataRun3_Express_v3',
'run3_data_promptlike'     :   '112X_dataRun3_Prompt_v3',
"
-------------------------------------------------------------------------
"'run2_hlt_relval'      :   '112X_dataRun2_HLT_relval_v4',
'run2_hlt_relval_hi'   :   '112X_dataRun2_HLT_relval_HI_v3',
'run3_data_express'        :   '112X_dataRun3_Express_v3',
'run3_data_promptlike'     :   '112X_dataRun3_Prompt_v3',"
-------------------------------------------------------------------------
"'run2_hlt_relval'      :   '112X_dataRun2_HLT_relval_v4',
'run2_hlt_relval_hi'   :   '112X_dataRun2_HLT_relval_HI_v3',
'run3_data_express'        :   '112X_dataRun3_Express_v3',
'run3_data_promptlike'     :   '112X_dataRun3_Prompt_v3',
"
-------------------------------------------------------------------------
"Recom
PRs: 33142, 33158"
-------------------------------------------------------------------------
=========================================================================
"'phase2_realistic'         : '113X_mcRun4_realistic_v6'
"
-------------------------------------------------------------------------
'phase2_realistic'         : '113X_mcRun4_realistic_v6' # GT containing realistic conditions for Phase2
-------------------------------------------------------------------------
"'phase2_realistic'         : '112X_mcRun4_realistic_v7'
"
-------------------------------------------------------------------------
"Recom
PRs: 33142, 33158"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
    switches = (module for module in (getattr(switchproducer, case) \
      for switchproducer in six.itervalues(process._Process__switchproducers) \
      for case in switchproducer.parameterNames_()) \
      if isinstance(module, cms.EDProducer))
    return (module for module in itertools.chain(six.itervalues(process._Process__producers), switches) \
      if module._TypedParameterizable__type in types)
"
-------------------------------------------------------------------------
"import itertools
import six
from FWCore.ParameterSet.Config import cms

switches = (module for module in (getattr(switchproducer, case) \
  for switchproducer in six.itervalues(process._Process__switchproducers) \
  for case in switchproducer.parameterNames_()) \
  if isinstance(module, cms.EDProducer))
return (module for module in itertools.chain(six.itervalues(process._Process__producers), switches) \
  if module._TypedParameterizable__type in types)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
    switches = (module for module in (getattr(switchproducer, case) \
      for switchproducer in six.itervalues(process._Process__switchproducers) \
      for case in switchproducer.parameterNames_()) \
      if isinstance(module, cms.EDProducer))
    return (module for module in itertools.chain(six.itervalues(process._Process__producers), switches) \
      if module._TypedParameterizable__type in types)
"
-------------------------------------------------------------------------
"Recom
PRs: 33137, 33138"
-------------------------------------------------------------------------
=========================================================================
"switches = (module for module in (getattr(switchproducer, case) \
  for switchproducer in six.itervalues(process._Process__switchproducers) \
  for case in switchproducer.parameterNames_()))
return (module for module in itertools.chain(six.itervalues(process.__dict__), switches) \
  if hasattr(module, '_TypedParameterizable__type') and module._TypedParameterizable__type in types)
"
-------------------------------------------------------------------------
"switches = (module for module in (getattr(switchproducer, case) \
     for switchproducer in six.itervalues(process._Process__switchproducers) \
         for case in switchproducer.parameterNames_()))

modules = (module for module in itertools.chain(six.itervalues(process.__dict__), switches) \
     if hasattr(module, '_TypedParameterizable__type') and module._TypedParameterizable__type in types)"
-------------------------------------------------------------------------
"switches = (module for module in (getattr(switchproducer, case) \
  for switchproducer in six.itervalues(process._Process__switchproducers) \
  for case in switchproducer.parameterNames_()))
return (module for module in itertools.chain(six.itervalues(process.__dict__), switches) \
  if hasattr(module, '_TypedParameterizable__type') and module._TypedParameterizable__type in types)
"
-------------------------------------------------------------------------
"Recom
PRs: 33137, 33138"
-------------------------------------------------------------------------
=========================================================================
"def customiseHCALFor2018Input(process):
    """"""Customise the HLT to run on Run 2 data/MC using the old readout for the HCAL barel""""""
    for producer in producers_by_type(process, ""HBHEPhase1Reconstructor""):
        # switch on the QI8 processing for 2018 HCAL barrel
        producer.processQIE8 = True
    # adapt CaloTowers threshold for 2018 HCAL barrel with only one depth
    for producer in producers_by_type(process, ""CaloTowersCreator""):
        producer.HBThreshold1  = 0.7
        producer.HBThreshold2  = 0.7
        producer.HBThreshold   = 0.7
    # adapt Particle Flow threshold for 2018 HCAL barrel with only one depth
    from RecoParticleFlow.PFClusterProducer.particleFlowClusterHBHE_cfi import _thresholdsHB, _thresholdsHEphase1, _seedingThresholdsHB
    logWeightDenominatorHCAL2018 = cms.VPSet(
        cms.PSet(
            depths = cms.vint32(1, 2, 3, 4),
            detector = cms.string('HCAL_BARREL1'),
            logWeightDenominator = _thresholdsHB
        cms.PSet(
            depths = cms.vint32(1, 2, 3, 4, 5, 6, 7),
            detector = cms.string('HCAL_ENDCAP'),
            logWeightDenominator = _thresholdsHEphase1
        )
            producer.producers[0].qualityTests[0].cuts[0].threshold = _thresholdsHB
        if producer.seedFinder.thresholdsByDetector[0].detector.value() == 'HCAL_BARREL1':
            producer.seedFinder.thresholdsByDetector[0].seedingThreshold = _seedingThresholdsHB
            producer.initialClusteringStep.thresholdsByDetector[0].gatheringThreshold = _thresholdsHB
            producer.pfClusterBuilder.recHitEnergyNorms[0].recHitEnergyNorm = _thresholdsHB
    # done
"
-------------------------------------------------------------------------
"def customiseHCALFor2018Input(process):
    # switch on the QI8 processing for 2018 HCAL barrel
    for producer in producers_by_type(process, ""HBHEPhase1Reconstructor""):
        producer.processQIE8 = True
        
    # adapt CaloTowers threshold for 2018 HCAL barrel with only one depth
    for producer in producers_by_type(process, ""CaloTowersCreator""):
        producer.HBThreshold1  = 0.7
        producer.HBThreshold2  = 0.7
        producer.HBThreshold   = 0.7
        
    # adapt Particle Flow threshold for 2018 HCAL barrel with only one depth
    from RecoParticleFlow.PFClusterProducer.particleFlowClusterHBHE_cfi import _thresholdsHB, _thresholdsHEphase1, _seedingThresholdsHB
    logWeightDenominatorHCAL2018 = cms.VPSet(
        cms.PSet(
            depths = cms.vint32(1),
            detector = cms.string('HCAL_BARREL1'),
            logWeightDenominator = _thresholdsHB
        ),
        cms.PSet(
            depths = cms.vint32(1),
            detector = cms.string('HCAL_ENDCAP'),
            logWeightDenominator = _thresholdsHEphase1
        )
    )
    
    for producer in producers_by_type(process, ""PFClusterProducer""):
        producer.pfClusterBuilder.positionCalc.logWeightDenominatorByDetector = logWeightDenominatorHCAL2018
        producer.pfClusterBuilder.allCellsPositionCalc.logWeightDenominatorByDetector = logWeightDenominatorHCAL2018
    
    for producer in producers_by_type(process, ""PFMultiDepthClusterProducer""):
        producer.pfClusterBuilder.allCellsPositionCalc.logWeightDenominatorByDetector = logWeightDenominatorHCAL2018
    
    return process"
-------------------------------------------------------------------------
"def customiseHCALFor2018Input(process):
    """"""Customise the HLT to run on Run 2 data/MC using the old readout for the HCAL barel""""""
    for producer in producers_by_type(process, ""HBHEPhase1Reconstructor""):
        # switch on the QI8 processing for 2018 HCAL barrel
        producer.processQIE8 = True
    # adapt CaloTowers threshold for 2018 HCAL barrel with only one depth
    for producer in producers_by_type(process, ""CaloTowersCreator""):
        producer.HBThreshold1  = 0.7
        producer.HBThreshold2  = 0.7
        producer.HBThreshold   = 0.7
    # adapt Particle Flow threshold for 2018 HCAL barrel with only one depth
    from RecoParticleFlow.PFClusterProducer.particleFlowClusterHBHE_cfi import _thresholdsHB, _thresholdsHEphase1, _seedingThresholdsHB
    logWeightDenominatorHCAL2018 = cms.VPSet(
        cms.PSet(
            depths = cms.vint32(1, 2, 3, 4),
            detector = cms.string('HCAL_BARREL1'),
            logWeightDenominator = _thresholdsHB
        cms.PSet(
            depths = cms.vint32(1, 2, 3, 4, 5, 6, 7),
            detector = cms.string('HCAL_ENDCAP'),
            logWeightDenominator = _thresholdsHEphase1
        )
            producer.producers[0].qualityTests[0].cuts[0].threshold = _thresholdsHB
        if producer.seedFinder.thresholdsByDetector[0].detector.value() == 'HCAL_BARREL1':
            producer.seedFinder.thresholdsByDetector[0].seedingThreshold = _seedingThresholdsHB
            producer.initialClusteringStep.thresholdsByDetector[0].gatheringThreshold = _thresholdsHB
            producer.pfClusterBuilder.recHitEnergyNorms[0].recHitEnergyNorm = _thresholdsHB
    # done
"
-------------------------------------------------------------------------
"Recom
PRs: 33133, 33134"
-------------------------------------------------------------------------
=========================================================================
"process = customiseHCALFor2018Input(process)
"
-------------------------------------------------------------------------
"process = customisePixelGainForRun2Input(process)
process.load(""RecoParticleFlow.PFClusterProducer.particleFlowClusterHBHE_cfi"")
process.load(""RecoParticleFlow.PFClusterProducer.particleFlowClusterHCAL_cfi"")
process.load(""RecoParticleFlow.PFClusterProducer.particleFlowRecHitHBHE_cfi"")
process.load(""HLTrigger.Configuration.common"")"
-------------------------------------------------------------------------
"process = customiseHCALFor2018Input(process)
"
-------------------------------------------------------------------------
"Recom
PRs: 33133, 33134"
-------------------------------------------------------------------------
=========================================================================
"seedingPSet = _ticlSeedingRegionProducer.seedingPSet.clone(type=""SeedingRegionGlobal"")
seedingPSet = _ticlSeedingRegionProducer.seedingPSet.clone(type=""SeedingRegionByTracks"")
seedingPSet = _ticlSeedingRegionProducer.seedingPSet.clone(type=""SeedingRegionGlobal"")
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='seedingPSet', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_ticlSeedingRegionProducer', ctx=Load()), attr='seedingPSet', ctx=Load()), attr='clone', ctx=Load()), args=[], keywords=[keyword(arg='type', value=Constant(value='SeedingRegionGlobal'))])

Assign(targets=[Name(id='seedingPSet', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_ticlSeedingRegionProducer', ctx=Load()), attr='seedingPSet', ctx=Load()), attr='clone', ctx=Load()), args=[], keywords=[keyword(arg='type', value=Constant(value='SeedingRegionByTracks'))])

Assign(targets=[Name(id='seedingPSet', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_ticlSeedingRegionProducer', ctx=Load()), attr='seedingPSet', ctx=Load()), attr='clone', ctx=Load()), args=[], keywords=[keyword(arg='type', value=Constant(value='SeedingRegionGlobal'))])"
-------------------------------------------------------------------------
"seedingPSet = _ticlSeedingRegionProducer.seedingPSet.clone(type=""SeedingRegionGlobal"")
seedingPSet = _ticlSeedingRegionProducer.seedingPSet.clone(type=""SeedingRegionByTracks"")
seedingPSet = _ticlSeedingRegionProducer.seedingPSet.clone(type=""SeedingRegionGlobal"")
"
-------------------------------------------------------------------------
"Recom
PRs: 32978, 33028"
-------------------------------------------------------------------------
=========================================================================
"'run2_mc_50ns'      :   '113X_mcRun2_startup_v2',
'run2_mc_l1stage1'  :   '113X_mcRun2_asymptotic_l1stage1_v3',
'run2_design'       :   '113X_mcRun2_design_v3',
'run2_mc_pre_vfp'   :   '113X_mcRun2_asymptotic_preVFP_v3',
'run2_mc'           :   '113X_mcRun2_asymptotic_v3',
'run2_mc_cosmics'   :   '113X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'        :   '113X_mcRun2_HeavyIon_v3',
'run2_mc_pa'        :   '113X_mcRun2_pA_v3',
'run1_data'         :   '113X_dataRun2_v4',
'run2_data'         :   '113X_dataRun2_v4',
'run2_data_HEfail'  :   '113X_dataRun2_HEfail_v4',
'run2_data_relval'  :   '113X_dataRun2_relval_v4',
'run2_data_promptlike_hi' : '113X_dataRun2_PromptLike_HI_v4',
"
-------------------------------------------------------------------------
"'run2_mc_50ns'      :   '113X_mcRun2_startup_v2',
'run2_mc_l1stage1'  :   '113X_mcRun2_asymptotic_l1stage1_v3',
'run2_design'       :   '113X_mcRun2_design_v3',
'run2_mc_pre_vfp'   :   '113X_mcRun2_asymptotic_preVFP_v3',
'run2_mc'           :   '113X_mcRun2_asymptotic_v3',
'run2_mc_cosmics'   :   '113X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'        :   '113X_mcRun2_HeavyIon_v3',
'run2_mc_pa'        :   '113X_mcRun2_pA_v3',
'run1_data'         :   '113X_dataRun2_v4',
'run2_data'         :   '113X_dataRun2_v4',
'run2_data_HEfail'  :   '113X_dataRun2_HEfail_v4',
'run2_data_relval'  :   '113X_dataRun2_relval_v4',
'run2_data_promptlike_hi' : '113X_dataRun2_PromptLike_HI_v5',"
-------------------------------------------------------------------------
"'run2_mc_l1stage1'  :   '112X_mcRun2_asymptotic_l1stage1_v3',
'run2_design'       :   '112X_mcRun2_design_v3',
'run2_mc_pre_vfp'   :   '112X_mcRun2_asymptotic_preVFP_v4',
'run2_mc'           :   '112X_mcRun2_asymptotic_v4',
'run2_mc_cosmics'   :   '112X_mcRun2cosmics_asymptotic_deco_v4',
'run2_mc_hi'        :   '112X_mcRun2_HeavyIon_v3',
'run2_mc_pa'        :   '112X_mcRun2_pA_v3',
'run1_data'         :   '112X_dataRun2_v9',
'run2_data'         :   '112X_dataRun2_v9',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v9',
'run2_data_relval'  :   '112X_dataRun2_relval_v9',
'run2_data_promptlike_hi' : '112X_dataRun2_PromptLike_HI_v7',
"
-------------------------------------------------------------------------
"Recom
PRs: 32959, 33011"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2017_design'       :  '113X_mc2017_design_v4',
'phase1_2017_realistic'    :  '113X_mc2017_realistic_v4',
'phase1_2017_cosmics'      :  '113X_mc2017cosmics_realistic_deco_v4',
'phase1_2017_cosmics_peak' :  '113X_mc2017cosmics_realistic_peak_v4',
'phase1_2018_design'       :  '113X_upgrade2018_design_v4',
'phase1_2018_realistic'    :  '113X_upgrade2018_realistic_v4',
'phase1_2018_realistic_rd' :  '113X_upgrade2018_realistic_RD_v2',
'phase1_2018_realistic_hi' :  '113X_upgrade2018_realistic_HI_v4',
'phase1_2018_realistic_HEfail' :  '113X_upgrade2018_realistic_HEfail_v4',
'phase1_2018_cosmics'      :  '113X_upgrade2018cosmics_realistic_deco_v4',
'phase1_2018_cosmics_peak' :  '113X_upgrade2018cosmics_realistic_peak_v4',
'phase1_2021_design'       : '113X_mcRun3_2021_design_v5', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '113X_mcRun3_2021_realistic_v7', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '113X_mcRun3_2021cosmics_realistic_deco_v6',
'phase1_2021_realistic_hi' : '113X_mcRun3_2021_realistic_HI_v5',
'phase1_2023_realistic'    : '113X_mcRun3_2023_realistic_v5', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '113X_mcRun3_2024_realistic_v5', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '113X_mc2017_design_v5',
'phase1_2017_realistic'    :  '113X_mc2017_realistic_v5',
'phase1_2017_cosmics'      :  '113X_mc2017cosmics_realistic_deco_v5',
'phase1_2017_cosmics_peak' :  '113X_mc2017cosmics_realistic_peak_v5',
'phase1_2018_design'       :  '113X_upgrade2018_design_v5',
'phase1_2018_realistic'    :  '113X_upgrade2018_realistic_v5',
'phase1_2018_realistic_rd' :  '113X_upgrade2018_realistic_RD_v3',
'phase1_2018_realistic_hi' :  '113X_upgrade2018_realistic_HI_v5',
'phase1_2018_realistic_HEfail' :  '113X_upgrade2018_realistic_HEfail_v5',
'phase1_2018_cosmics'      :  '113X_upgrade2018cosmics_realistic_deco_v5',
'phase1_2018_cosmics_peak' :  '113X_upgrade2018cosmics_realistic_peak_v5',
'phase1_2021_design'       : '113X_mcRun3_2021_design_v6', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '113X_mcRun3_2021_realistic_v8', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '113X_mcRun3_2021cosmics_realistic_deco_v7',
'phase1_2021_realistic_hi' : '113X_mcRun3_2021_realistic_HI_v6',
'phase1_2023_realistic'    : '113X_mcRun3_2023_realistic_v6', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '113X_mcRun3_2024_realistic_v6', # GT containing realistic conditions for Phase1 2024"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '112X_mc2017_design_v4',
'phase1_2017_realistic'    :  '112X_mc2017_realistic_v6',
'phase1_2017_cosmics'      :  '112X_mc2017cosmics_realistic_deco_v6',
'phase1_2017_cosmics_peak' :  '112X_mc2017cosmics_realistic_peak_v6',
'phase1_2018_design'       :  '112X_upgrade2018_design_v6',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v9',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v9',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v9',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v9',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v9',
'phase1_2021_design'       : '112X_mcRun3_2021_design_v14', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v17', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v17',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v17',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v17', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v17', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"Recom
PRs: 32959, 33011"
-------------------------------------------------------------------------
=========================================================================
"if not self.config.hilton:
    # keep the original Source when running on Hilton
    args.append('--noedsources')
"
-------------------------------------------------------------------------
"if self.config.hilton:
    # keep the original Source when running on Hilton
    args.append('--noedsources')"
-------------------------------------------------------------------------
"if not self.config.hilton:
    # keep the original Source when running on Hilton
    args.append('--noedsources')
"
-------------------------------------------------------------------------
"Recom
PRs: 32961, 32962"
-------------------------------------------------------------------------
=========================================================================
"elif self.config.hilton:
  # do not apply the STORM-specific customisation
  pass
"
-------------------------------------------------------------------------
"elif self.config.type == ""Hilton"":
     # do not apply the STORM-specific customisation
     pass"
-------------------------------------------------------------------------
"elif self.config.hilton:
  # do not apply the STORM-specific customisation
  pass
"
-------------------------------------------------------------------------
"Recom
PRs: 32961, 32962"
-------------------------------------------------------------------------
=========================================================================
"# dummify hltGetConditions in cff's
"
-------------------------------------------------------------------------
# dummify hltGetConditions in cffs.
-------------------------------------------------------------------------
"# dummify hltGetConditions in cff's
"
-------------------------------------------------------------------------
"Recom
PRs: 32961, 32962"
-------------------------------------------------------------------------
=========================================================================
"# if not runnign on Hilton, override the ""online"" ShmStreamConsumer output modules with ""offline"" PoolOutputModule's
if not self.config.hilton:
  self.data = re.sub(
    r'\b(process\.)?hltOutput(\w) *= *cms\.OutputModule\( *""ShmStreamConsumer"" *,',
    r'%(process)s.hltOutput\2 = cms.OutputModule( ""PoolOutputModule"",\n    fileName = cms.untracked.string( ""output\2.root"" ),\n    fastCloning = cms.untracked.bool( False ),\n    dataset = cms.untracked.PSet(\n        filterName = cms.untracked.string( """" ),\n        dataTier = cms.untracked.string( ""RAW"" )\n    ),',
    self.data
  )
"
-------------------------------------------------------------------------
"```python
# if not running on Hilton, override the ""online"" ShmStreamConsumer output modules with ""offline"" PoolOutputModule's
if not self.config.hilton:
    self.data = re.sub(
        r'\b(process\.)?hltOutput(\w) *= *cms\.OutputModule\( *""ShmStreamConsumer"" *,',
        r'%(process)s.hltOutput\2 = cms.OutputModule( ""PoolOutputModule"",\n    fileName = cms.untracked.string( ""output\2.root"" ),\n    fastCloning = cms.untracked.bool( False ),\n    dataset = cms.untracked.PSet(\n        filterName = cms.untracked.string( """" ),\n        dataTier = cms.untracked.string( ""RAW"" )\n    ),',
        self.data
    )
```"
-------------------------------------------------------------------------
"# if not runnign on Hilton, override the ""online"" ShmStreamConsumer output modules with ""offline"" PoolOutputModule's
if not self.config.hilton:
  self.data = re.sub(
    r'\b(process\.)?hltOutput(\w) *= *cms\.OutputModule\( *""ShmStreamConsumer"" *,',
    r'%(process)s.hltOutput\2 = cms.OutputModule( ""PoolOutputModule"",\n    fileName = cms.untracked.string( ""output\2.root"" ),\n    fastCloning = cms.untracked.bool( False ),\n    dataset = cms.untracked.PSet(\n        filterName = cms.untracked.string( """" ),\n        dataTier = cms.untracked.string( ""RAW"" )\n    ),',
    self.data
  )
"
-------------------------------------------------------------------------
"Recom
PRs: 32961, 32962"
-------------------------------------------------------------------------
=========================================================================
"if self.config.hilton:
  # use the DAQ source
  return
"
-------------------------------------------------------------------------
"if self.config.input:
    if self.config.hilton:
        # use the DAQ source
        self.source = self.expand_filenames(self.config.input)
        return files"
-------------------------------------------------------------------------
"if self.config.hilton:
  # use the DAQ source
  return
"
-------------------------------------------------------------------------
"Recom
PRs: 32961, 32962"
-------------------------------------------------------------------------
=========================================================================
"run2_nanoAOD_102Xv1.toModify( jetTable.variables, puId = Var(""userInt('pileupJetId:fullId')"",int,doc=""Pileup ID flags for pre-UL trainings"") )
run2_jme_2016.toModify( jetTable.variables, puId = Var(""userInt('pileupJetId:fullId')"",int,doc=""Pileup ID flags for pre-UL trainings""))
"
-------------------------------------------------------------------------
"- ImportFrom(module='RecoJets.JetProducers.PileupJetID_cfi', names=[alias(name='pileupJetId'), alias('_chsalgos_94x'), alias('_chsalgos_102x'), alias('_chsalgos_106X_UL17'), alias('_chsalgos_106X_UL18')], level=0)
+ ImportFrom(module='RecoJets.JetProducers.PileupJetID_cfi', names=[alias(name='pileupJetId'), alias('_chsalgos_94x'), alias('_chsalgos_102x'), alias('_chsalgos_106X_UL17'), alias('_chsalgos_106X_UL18')], level=0)

- run2_nanoAOD_102Xv1.toModify( jetTable.variables, puId = Var(""userInt('pileupJetId:fullId')"",int,doc=""Pileup ID flags for pre-UL trainings"") )
+ Expr(value=Call(func=Attribute(value=Name(id='run2_nanoAOD_102Xv1', ctx=Load()), attr='toModify', ctx=Load()), args=[Attribute(value=Name(id='jetTable', ctx=Load()), attr='variables', ctx=Load())], keywords=[keyword(arg='puId', value=Call(func=Name(id='Var', ctx=Load()), args=[Constant(value=""userInt('pileupJetId:fullId')""), Name(id='int', ctx=Load())], keywords=[keyword(arg='doc', value=Constant(value='Pileup ID flags for pre-UL trainings'))]))])

- run2_jme_2016.toModify( jetTable.variables, puId = Var(""userInt('pileupJetId:fullId')"",int,doc=""Pileup ID flags for pre-UL trainings""))
+ Expr(value=Call(func=Attribute(value=Name(id='run2_jme_2016', ctx=Load()), attr='toModify', ctx=Load()), args=[Attribute(value=Name(id='jetTable', ctx=Load()), attr='variables', ctx=Load())], keywords=[keyword(arg='puId', value=Call(func=Name(id='Var', ctx=Load()), args=[Constant(value=""userInt('pileupJetId:fullId')""), Name(id='int', ctx=Load())], keywords=[keyword(arg='doc', value=Constant(value='Pileup ID flags for pre-UL trainings'))]))]))"
-------------------------------------------------------------------------
"( (run2_nanoAOD_106Xv1 & ~run2_nanoAOD_devel) | run2_nanoAOD_102Xv1 ).toModify( jetTable.variables, puIdDisc = Var(""userFloat('puId102XDisc')"",float,doc=""Pileup ID discriminant with 102X (2018) training"", precision=10)  )
( (run2_nanoAOD_106Xv1 & ~run2_nanoAOD_devel) | run2_nanoAOD_102Xv1 ).toModify( jetTable.variables, puId = Var(""userInt('pileupJetId:fullId')"",int,doc=""Pileup ID flags for pre-UL trainings"")  )
"
-------------------------------------------------------------------------
"Recom
PRs: 32887, 32951"
-------------------------------------------------------------------------
=========================================================================
"nConstituents = Var(""numberOfDaughters()"",""uint8"",doc=""Number of particles in the jet""),
"
-------------------------------------------------------------------------
"nConstituents = Var(""numberOfDaughters()"",""uint8"",doc=""Number of particles in the jet"")"
-------------------------------------------------------------------------
"nConstituents = Var(""numberOfDaughters()"",""uint8"",doc=""Number of particles in the jet""),
"
-------------------------------------------------------------------------
"Recom
PRs: 32927, 32928"
-------------------------------------------------------------------------
=========================================================================
"nConstituents = Var(""numberOfDaughters()"",""uint8"",doc=""Number of particles in the jet""),
"
-------------------------------------------------------------------------
"nConstituents = Var(""daughterRefVector().size()"",""uint8"",doc=""Number of particles in the jet""),"
-------------------------------------------------------------------------
"nConstituents = Var(""numberOfDaughters()"",""uint8"",doc=""Number of particles in the jet""),
"
-------------------------------------------------------------------------
"Recom
PRs: 32927, 32928"
-------------------------------------------------------------------------
=========================================================================
"Plot1D('nConstituents', 'nConstituents', 20, 0, 80, 'Number of particles in the jet'),
"
-------------------------------------------------------------------------
"nanoDQM = DQMEDAnalyzer(""NanoAODDQM"",
                NoPlot('muonIdx3SJ'),
                Plot1D('n2b1', 'n2b1', 20, 0, 1, 'N2 (beta=1)'),
                Plot1D('n3b1', 'n3b1', 20, 0, 5, 'N3 (beta=1)'),
                Plot1D('nBHadrons', 'nBHadrons', 4, -0.5, 3.5, 'number of b-hadrons'),
                Plot1D('nCHadrons', 'nCHadrons', 4, -0.5, 3.5, 'number of c-hadrons'),
                Plot1D('particleNetMD_QCD', 'particleNetMD_QCD', 20, 0, 1, 'Mass-decorrelated ParticleNet tagger raw QCD score'),
                Plot1D('nConstituents', 'nConstituents', 20, 0, 80, 'Number of particles in the jet'),"
-------------------------------------------------------------------------
"Plot1D('nConstituents', 'nConstituents', 20, 0, 80, 'Number of particles in the jet'),
"
-------------------------------------------------------------------------
"Recom
PRs: 32927, 32928"
-------------------------------------------------------------------------
=========================================================================
"# case insensitive sort by subfolder and module name
parts = sorted(parts.items(), key = lambda nsc: (nsc[1][0].lower() if nsc[1][0] else '', nsc[0].lower()))
for (name, (subfolder, code)) in parts:
"
-------------------------------------------------------------------------
"```python
from collections import OrderedDict

parts = OrderedDict(sorted(parts.items(), key = lambda nsc: (nsc[1][0].lower() if nsc[1][0] else '', nsc[0].lower())))
for name, value in parts.items():
    subfolder, code = value
```"
-------------------------------------------------------------------------
"# case insensitive sort by subfolder and module name
parts = sorted(parts.items(), key = lambda nsc: (nsc[1][0].lower() if nsc[1][0] else '', nsc[0].lower()))
for (name, (subfolder, code)) in parts:
"
-------------------------------------------------------------------------
"Recom
PRs: 32754, 32904"
-------------------------------------------------------------------------
=========================================================================
"result = '\nprocess.schedule = '  self.schedule.dumpPython(options)
"
-------------------------------------------------------------------------
"result = '\nprocess.schedule = ' 
self.schedule.dumpPython(options)"
-------------------------------------------------------------------------
"result = '\nprocess.schedule = '  self.schedule.dumpPython(options)
"
-------------------------------------------------------------------------
"Recom
PRs: 32754, 32904"
-------------------------------------------------------------------------
=========================================================================
"dependencies = set()
"
-------------------------------------------------------------------------
dependencies = set() # Initialize an empty set to store the dependencies.
-------------------------------------------------------------------------
"dependencies = set()
"
-------------------------------------------------------------------------
"Recom
PRs: 32754, 32904"
-------------------------------------------------------------------------
=========================================================================
"dependencies.update(item.directDependencies())
ndencies.update(item.directDependencies())
dependencies.update(item.directDependencies())
dependencies.update(item.directDependencies())
"
-------------------------------------------------------------------------
"dependencies.update(item.findDirectDependencies(element, collection))"
-------------------------------------------------------------------------
"dependencies.update(item.directDependencies())
ndencies.update(item.directDependencies())
dependencies.update(item.directDependencies())
dependencies.update(item.directDependencies())
"
-------------------------------------------------------------------------
"Recom
PRs: 32754, 32904"
-------------------------------------------------------------------------
=========================================================================
"dependencies.add((t, item.label_()))
rn sorted(dependencies, key = lambda t_item: (t_item[0].lower(), t_item[1].lower().replace('_cfi', '')))
"
-------------------------------------------------------------------------
"dependencies.append((t, item.label_())

dependencies = sorted(dependencies, key=lambda t_item: (t_item[0].lower(), t_item[1].lower().replace('_cfi', '')))"
-------------------------------------------------------------------------
"dependencies.add((t, item.label_()))
rn sorted(dependencies, key = lambda t_item: (t_item[0].lower(), t_item[1].lower().replace('_cfi', '')))
"
-------------------------------------------------------------------------
"Recom
PRs: 32754, 32904"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_3_0/HLT/V12 (CMSSW_11_3_0_pre2)
  tableName = cms.string('/dev/CMSSW_11_3_0/HLT/V12')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/PRef/V18 (CMSSW_11_2_0_pre2)
tableName = cms.string('/dev/CMSSW_11_2_0/PRef/V18')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/HLT/V43 (CMSSW_11_2_0)
  tableName = cms.string('/dev/CMSSW_11_2_0/HLT/V43')
"
-------------------------------------------------------------------------
"Recom
PRs: 32870, 32871"
-------------------------------------------------------------------------
=========================================================================
"min3DLayers = cms.vint32( 0, 0, 0 ),
"
-------------------------------------------------------------------------
"min3DLayers = cms.vint32( 3, 3, 3 ),"
-------------------------------------------------------------------------
"min3DLayers = cms.vint32( 0, 0, 0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 32870, 32871"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_3_0/GRun/V8 (CMSSW_11_3_0_pre2)
  tableName = cms.string('/dev/CMSSW_11_3_0/GRun/V8')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/PRef (CMSSW_11_2_0_pre2)
tableName = cms.string('/dev/CMSSW_11_2_0/PRef')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/GRun/V19 (CMSSW_11_2_0)
  tableName = cms.string('/dev/CMSSW_11_2_0/GRun/V19')
"
-------------------------------------------------------------------------
"Recom
PRs: 32870, 32871"
-------------------------------------------------------------------------
=========================================================================
"min3DLayers = cms.vint32( 0, 0, 0 ),
"
-------------------------------------------------------------------------
"min3DLayers = cms.vint32( 3, 3, 3 ),"
-------------------------------------------------------------------------
"min3DLayers = cms.vint32( 0, 0, 0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 32870, 32871"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_3_0/HIon/V8 (CMSSW_11_3_0_pre2)
  tableName = cms.string('/dev/CMSSW_11_3_0/HIon/V8')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/PRef
  tableName = cms.string('/dev/CMSSW_11_2_0/PRef')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/HIon/V19 (CMSSW_11_2_0)
  tableName = cms.string('/dev/CMSSW_11_2_0/HIon/V19')
"
-------------------------------------------------------------------------
"Recom
PRs: 32870, 32871"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_3_0/PIon/V8 (CMSSW_11_3_0_pre2)
  tableName = cms.string('/dev/CMSSW_11_3_0/PIon/V8')
"
-------------------------------------------------------------------------
fragment.transferSystem.tableName = cms.string('/dev/CMSSW_11_3_0/PIon/V8')
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/PIon/V19 (CMSSW_11_2_0)
  tableName = cms.string('/dev/CMSSW_11_2_0/PIon/V19')
"
-------------------------------------------------------------------------
"Recom
PRs: 32870, 32871"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_3_0/PRef/V8 (CMSSW_11_3_0_pre2)
  tableName = cms.string('/dev/CMSSW_11_3_0/PRef/V8')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/PRef/V18 
tableName = cms.string('/dev/CMSSW_11_2_0/PRef/V18')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/PRef/V19 (CMSSW_11_2_0)
  tableName = cms.string('/dev/CMSSW_11_2_0/PRef/V19')
"
-------------------------------------------------------------------------
"Recom
PRs: 32870, 32871"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_3_0/HLT/V12 (CMSSW_11_3_0_pre2)
  tableName = cms.string('/dev/CMSSW_11_3_0/HLT/V12')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/HLT/PRef/V18
tableName = cms.string('/dev/CMSSW_11_2_0/HLT/PRef/V18')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/HLT/V43 (CMSSW_11_2_0)
  tableName = cms.string('/dev/CMSSW_11_2_0/HLT/V43')
"
-------------------------------------------------------------------------
"Recom
PRs: 32870, 32871"
-------------------------------------------------------------------------
=========================================================================
"min3DLayers = cms.vint32( 0, 0, 0 ),
"
-------------------------------------------------------------------------
"minLayers = cms.vint32( 0, 0, 0 ),"
-------------------------------------------------------------------------
"min3DLayers = cms.vint32( 0, 0, 0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 32870, 32871"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_3_0/GRun/V8 (CMSSW_11_3_0_pre2)
  tableName = cms.string('/dev/CMSSW_11_3_0/GRun/V8')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/PRef/V18 (CMSSW_11_2_0_pre2)
  tableName = cms.string('/dev/CMSSW_11_2_0/PRef/V18')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/GRun/V19 (CMSSW_11_2_0)
  tableName = cms.string('/dev/CMSSW_11_2_0/GRun/V19')
"
-------------------------------------------------------------------------
"Recom
PRs: 32870, 32871"
-------------------------------------------------------------------------
=========================================================================
"min3DLayers = cms.vint32( 0, 0, 0 ),
"
-------------------------------------------------------------------------
"min3DLayers = cms.vint32( 0, 0, 0 )"
-------------------------------------------------------------------------
"min3DLayers = cms.vint32( 0, 0, 0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 32870, 32871"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_3_0/HIon/V8 (CMSSW_11_3_0_pre2)
  tableName = cms.string('/dev/CMSSW_11_3_0/HIon/V8')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/PRef/V18 (CMSSW_11_2_0_pre2)
tableName = cms.string('/dev/CMSSW_11_2_0/PRef/V18')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/HIon/V19 (CMSSW_11_2_0)
  tableName = cms.string('/dev/CMSSW_11_2_0/HIon/V19')
"
-------------------------------------------------------------------------
"Recom
PRs: 32870, 32871"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_3_0/PIon/V8 (CMSSW_11_3_0_pre2)
  tableName = cms.string('/dev/CMSSW_11_3_0/PIon/V8')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/PRef/V18 (CMSSW_11_2_0_pre2)
  tableName = cms.string('/dev/CMSSW_11_2_0/PRef/V18')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/PIon/V19 (CMSSW_11_2_0)
  tableName = cms.string('/dev/CMSSW_11_2_0/PIon/V19')
"
-------------------------------------------------------------------------
"Recom
PRs: 32870, 32871"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_3_0/PRef/V8 (CMSSW_11_3_0_pre2)
  tableName = cms.string('/dev/CMSSW_11_3_0/PRef/V8')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/PRef/V18 (CMSSW_11_2_0)
tableName = cms.string('/dev/CMSSW_11_2_0/PRef/V18')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_2_0/PRef/V19 (CMSSW_11_2_0)
  tableName = cms.string('/dev/CMSSW_11_2_0/PRef/V19')
"
-------------------------------------------------------------------------
"Recom
PRs: 32870, 32871"
-------------------------------------------------------------------------
=========================================================================
"# GlobalTag for MC production (2015 L1 Trigger Stage1) with startup-like alignment and calibrations for Run2, L1 trigger in Stage1 mode
"
-------------------------------------------------------------------------
"# GlobalTag for MC production (2015 L1 Trigger Stage1) with startup-like alignment and calibrations for Run2, L1 trigger operating in Stage1 mode"
-------------------------------------------------------------------------
"'run2_mc_l1stage1'  :   '112X_mcRun2_asymptotic_l1stage1_v2',
'run2_design'       :   '112X_mcRun2_design_v2',
'run2_mc_pre_vfp'   :   '112X_mcRun2_asymptotic_preVFP_v3',
'run2_mc'           :   '112X_mcRun2_asymptotic_v3',
'run2_mc_cosmics'   :   '112X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'        :   '112X_mcRun2_HeavyIon_v2',
'run2_mc_pa'        :   '112X_mcRun2_pA_v2',
'run1_data'         :   '112X_dataRun2_v8',
'run2_data'         :   '112X_dataRun2_v8',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v8',
'run2_data_relval'  :   '112X_dataRun2_relval_v8',
'run2_data_promptlike_hi' : '112X_dataRun2_PromptLike_HI_v6',
'run2_hlt_relval'      :   '112X_dataRun2_HLT_relval_v3',
'run2_hlt_relval_hi'   :   '112X_dataRun2_HLT_relval_HI_v2',
'run3_data_express'        :   '112X_dataRun3_Express_v2',
'run3_data_promptlike'     :   '112X_dataRun3_Prompt_v2',
'phase1_2017_design'       :  '112X_mc2017_design_v3',
'phase1_2017_realistic'    :  '112X_mc2017_realistic_v5',
'phase1_2017_cosmics'      :  '112X_mc2017cosmics_realistic_deco_v5',
'phase1_2017_cosmics_peak' :  '112X_mc2017cosmics_realistic_peak_v5',
'phase1_2018_design'       :  '112X_upgrade2018_design_v5',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v8',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v8',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v8',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v8',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v8',
'phase1_2021_design'       : '112X_mcRun3_2021_design_v13', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v16', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v16',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v16',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v16', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v16', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '112X_mcRun4_realistic_v6'
"
-------------------------------------------------------------------------
"Recom
PRs: 32758, 32772"
-------------------------------------------------------------------------
=========================================================================
"result = options.indentation()  ""_external_process_waitTime_ = ""  self._external_process_waitTime_.dumpPython(options)  ',\n'
result = options.indentation()  ""_external_process_verbose_ = ""  self._external_process_verbose_.dumpPython(options)  ','
"
-------------------------------------------------------------------------
"result += ""\n"" + options.indentation() + ""_external_process_waitTime_ = "" + self._external_process_waitTime_.dumpPython(options) + "",\n""
result += options.indentation() + ""_external_process_verbose_ = "" + self._external_process_verbose_.dumpPython(options) + "","""
-------------------------------------------------------------------------
"result = options.indentation()  ""_external_process_waitTime_ = ""  self._external_process_waitTime_.dumpPython(options)  ',\n'
result = options.indentation()  ""_external_process_verbose_ = ""  self._external_process_verbose_.dumpPython(options)  ','
"
-------------------------------------------------------------------------
"Recom
PRs: 32636, 32639"
-------------------------------------------------------------------------
=========================================================================
"result = options.indentation()  ""_external_process_waitTime_ = ""  self._external_process_waitTime_.dumpPython(options)  ',\n'
result = options.indentation()  ""_external_process_verbose_ = ""  self._external_process_verbose_.dumpPython(options)  ','
"
-------------------------------------------------------------------------
"result += options.indentation() + ""_external_process_waitTime_ = "" + self._external_process_waitTime_.dumpPython(options) + "",\n""
result += options.indentation() + ""_external_process_verbose_ = "" + self._external_process_verbose_.dumpPython(options) + "","""
-------------------------------------------------------------------------
"result = options.indentation()  ""_external_process_waitTime_ = ""  self._external_process_waitTime_.dumpPython(options)  ',\n'
result = options.indentation()  ""_external_process_verbose_ = ""  self._external_process_verbose_.dumpPython(options)  ','
"
-------------------------------------------------------------------------
"Recom
PRs: 32636, 32638"
-------------------------------------------------------------------------
=========================================================================
"result = options.indentation()  ""_external_process_waitTime_ = ""  self._external_process_waitTime_.dumpPython(options)  ',\n'
result = options.indentation()  ""_external_process_verbose_ = ""  self._external_process_verbose_.dumpPython(options)  ','
"
-------------------------------------------------------------------------
"result += ""\n""+options.indentation() + ""_external_process_waitTime_ = "" + self._external_process_waitTime_.dumpPython(options) + ',\n'
result += options.indentation() + ""_external_process_verbose_ = "" + self._external_process_verbose_.dumpPython(options) + ','"
-------------------------------------------------------------------------
"result = options.indentation()  ""_external_process_waitTime_ = ""  self._external_process_waitTime_.dumpPython(options)  ',\n'
result = options.indentation()  ""_external_process_verbose_ = ""  self._external_process_verbose_.dumpPython(options)  ','
"
-------------------------------------------------------------------------
"Recom
PRs: 32636, 32637"
-------------------------------------------------------------------------
=========================================================================
"'run1_design'       :   '106X_mcRun1_design_v4',
'run1_mc'           :   '106X_mcRun1_realistic_v4',
'run1_mc_hi'        :   '106X_mcRun1_HeavyIon_v4',
'run1_mc_pa'        :   '106X_mcRun1_pA_v4',
'run2_mc_50ns'      :   '106X_mcRun2_startup_v5',
'run2_mc_l1stage1'  :   '106X_mcRun2_asymptotic_l1stage1_v5',
'run2_design'       :   '106X_mcRun2_design_v8',
'run2_mc_pre_vfp'   :   '106X_mcRun2_asymptotic_preVFP_v10',
'run2_mc'           :   '106X_mcRun2_asymptotic_v16',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'        :   '106X_mcRun2_HeavyIon_v5',
'run2_mc_pa'        :   '106X_mcRun2_pA_v6',
'run1_data'         :   '106X_dataRun2_v33',
'run2_data'         :   '106X_dataRun2_v33',
'run2_data_relval'  :   '106X_dataRun2_relval_v31',
'run2_data_promptlike_HEfail' : '106X_dataRun2_PromptLike_HEfail_v14',
'run2_data_promptlike'    : '106X_dataRun2_PromptLike_v15',
'run2_data_promptlike_hi' : '106X_dataRun2_PromptLike_HI_v15',
"
-------------------------------------------------------------------------
"'run1_design'           :   '106X_mcRun1_design_v4',
'run1_mc'               :   '106X_mcRun1_realistic_v4',
'run1_mc_hi'            :   '106X_mcRun1_HeavyIon_v4',
'run1_mc_pa'            :   '106X_mcRun1_pA_v4',
'run2_mc_50ns'          :   '106X_mcRun2_startup_v5',
'run2_mc_l1stage1'      :   '106X_mcRun2_asymptotic_l1stage1_v5',
'run2_design'           :   '106X_mcRun2_design_v8',
'run2_mc_pre_vfp'       :   '106X_mcRun2_asymptotic_preVFP_v10',
'run2_mc'               :   '106X_mcRun2_asymptotic_v16',
'run2_mc_cosmics'       :   '106X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'            :   '106X_mcRun2_HeavyIon_v5',
'run2_mc_pa'            :   '106X_mcRun2_pA_v6',
'run1_data'             :   '106X_dataRun2_v33',
'run2_data'             :   '106X_dataRun2_v33',
'run2_data_relval'      :   '106X_dataRun2_relval_v31',
'run2_data_HEfail'      :   '106X_dataRun2_PromptLike_HEfail_v14',
'run2_data_promptlike'  :   '106X_dataRun2_PromptLike_v15',
'run2_data_promptlike_hi': '106X_dataRun2_PromptLike_HI_v15'"
-------------------------------------------------------------------------
"'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v5',
"
-------------------------------------------------------------------------
"Recom
PRs: 32435, 32581"
-------------------------------------------------------------------------
=========================================================================
"'run1_design'       :   '106X_mcRun1_design_v4',
'run1_mc'           :   '106X_mcRun1_realistic_v4',
'run1_mc_hi'        :   '106X_mcRun1_HeavyIon_v4',
'run1_mc_pa'        :   '106X_mcRun1_pA_v4',
'run2_mc_50ns'      :   '106X_mcRun2_startup_v5',
'run2_mc_l1stage1'  :   '106X_mcRun2_asymptotic_l1stage1_v5',
'run2_design'       :   '106X_mcRun2_design_v8',
'run2_mc_pre_vfp'   :   '106X_mcRun2_asymptotic_preVFP_v10',
'run2_mc'           :   '106X_mcRun2_asymptotic_v16',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'        :   '106X_mcRun2_HeavyIon_v5',
'run2_mc_pa'        :   '106X_mcRun2_pA_v6',
'run1_data'         :   '106X_dataRun2_v33',
'run2_data'         :   '106X_dataRun2_v33',
'run2_data_relval'  :   '106X_dataRun2_relval_v31',
'run2_data_promptlike_HEfail' : '106X_dataRun2_PromptLike_HEfail_v14',
'run2_data_promptlike'    : '106X_dataRun2_PromptLike_v15',
'run2_data_promptlike_hi' : '106X_dataRun2_PromptLike_HI_v15',
"
-------------------------------------------------------------------------
"'run1_design'       :   '106X_mcRun1_design_v4',
'run1_mc'           :   '106X_mcRun1_realistic_v4',
'run1_mc_hi'        :   '106X_mcRun1_HeavyIon_v4',
'run1_mc_pa'        :   '106X_mcRun1_pA_v4',
'run2_mc_50ns'      :   '106X_mcRun2_startup_v5',
'run2_mc_l1stage1'  :   '106X_mcRun2_asymptotic_l1stage1_v5',
'run2_design'       :   '106X_mcRun2_design_v8',
'run2_mc_pre_vfp'   :   '106X_mcRun2_asymptotic_preVFP_v10',
'run2_mc'           :   '106X_mcRun2_asymptotic_v16',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'        :   '106X_mcRun2_HeavyIon_v5',
'run2_mc_pa'        :   '106X_mcRun2_pA_v6',
'run1_data'         :   '106X_dataRun2_v33',
'run2_data'         :   '106X_dataRun2_v33',
'run2_data_relval'  :   '106X_dataRun2_relval_v31',
'run2_data_promptlike_HEfail' : '106X_dataRun2_PromptLike_HEfail_v14',
'run2_data_promptlike'    : '106X_dataRun2_PromptLike_v15',
'run2_data_promptlike_hi' : '106X_dataRun2_PromptLike_HI_v15',"
-------------------------------------------------------------------------
"'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v5',
"
-------------------------------------------------------------------------
"Recom
PRs: 32435, 32580"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2017_design'       :  '113X_mc2017_design_v2',
'phase1_2017_realistic'    :  '113X_mc2017_realistic_v2',
'phase1_2017_cosmics'      :  '113X_mc2017cosmics_realistic_deco_v2',
'phase1_2017_cosmics_peak' :  '113X_mc2017cosmics_realistic_peak_v2',
'phase1_2018_design'       :  '113X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '113X_upgrade2018_realistic_v2',
'phase1_2018_realistic_hi' :  '113X_upgrade2018_realistic_HI_v2',
'phase1_2018_realistic_HEfail' :  '113X_upgrade2018_realistic_HEfail_v2',
'phase1_2018_cosmics'      :  '113X_upgrade2018cosmics_realistic_deco_v2',
'phase1_2018_cosmics_peak' :  '113X_upgrade2018cosmics_realistic_peak_v2',
'phase1_2021_design'       : '113X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '113X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '113X_mcRun3_2021cosmics_realistic_deco_v3',
'phase1_2021_realistic_hi' : '113X_mcRun3_2021_realistic_HI_v2',
'phase1_2023_realistic'    : '113X_mcRun3_2023_realistic_v2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '113X_mcRun3_2024_realistic_v2', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '113X_mcRun4_realistic_v2'
"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '113X_mc2017_design_v3',
'phase1_2017_realistic'    :  '113X_mc2017_realistic_v3',
'phase1_2017_cosmics'      :  '113X_mc2017cosmics_realistic_deco_v2',
'phase1_2017_cosmics_peak' :  '113X_mc2017cosmics_realistic_peak_v2',
'phase1_2018_design'       :  '113X_upgrade2018_design_v3',
'phase1_2018_realistic'    :  '113X_upgrade2018_realistic_v3',
'phase1_2018_realistic_hi' :  '113X_upgrade2018_realistic_HI_v2',
'phase1_2018_realistic_HEfail' :  '113X_upgrade2018_realistic_HEfail_v3',
'phase1_2018_cosmics'      :  '113X_upgrade2018cosmics_realistic_deco_v3',
'phase1_2018_cosmics_peak' :  '113X_upgrade2018cosmics_realistic_peak_v3',
'phase1_2021_design'       : '113X_mcRun3_2021_design_v8', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '113X_mcRun3_2021_realistic_v8', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '113X_mcRun3_2021cosmics_realistic_deco_v8',
'phase1_2021_realistic_hi' : '113X_mcRun3_2021_realistic_HI_v10',
'phase1_2023_realistic'    : '113X_mcRun3_2023_realistic_v7', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '113X_mcRun3_2024_realistic_v7', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '113X_mcRun4_realistic_v3'"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '111X_mc2017_design_v3',
'phase1_2017_realistic'    :  '111X_mc2017_realistic_v3',
'phase1_2017_cosmics'      :  '111X_mc2017cosmics_realistic_deco_v2',
'phase1_2017_cosmics_peak' :  '111X_mc2017cosmics_realistic_peak_v2',
'phase1_2018_design'       :  '111X_upgrade2018_design_v3',
'phase1_2018_realistic'    :  '111X_upgrade2018_realistic_v3',
'phase1_2018_realistic_hi' :  '111X_upgrade2018_realistic_HI_v2',
'phase1_2018_realistic_HEfail' :  '111X_upgrade2018_realistic_HEfail_v3',
'phase1_2018_cosmics'      :   '111X_upgrade2018cosmics_realistic_deco_v3',
'phase1_2018_cosmics_peak' :   '111X_upgrade2018cosmics_realistic_peak_v3',
'phase1_2021_design'       : '111X_mcRun3_2021_design_v8', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '111X_mcRun3_2021_realistic_v8', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '111X_mcRun3_2021cosmics_realistic_deco_v8',
'phase1_2021_realistic_hi' : '111X_mcRun3_2021_realistic_HI_v10',
'phase1_2023_realistic'    : '111X_mcRun3_2023_realistic_v7', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '111X_mcRun3_2024_realistic_v7', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '111X_mcRun4_realistic_T15_v3'
"
-------------------------------------------------------------------------
"Recom
PRs: 32513, 32533"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2017_design'       :  '113X_mc2017_design_v2',
'phase1_2017_realistic'    :  '113X_mc2017_realistic_v2',
'phase1_2017_cosmics'      :  '113X_mc2017cosmics_realistic_deco_v2',
'phase1_2017_cosmics_peak' :  '113X_mc2017cosmics_realistic_peak_v2',
'phase1_2018_design'       :  '113X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '113X_upgrade2018_realistic_v2',
'phase1_2018_realistic_hi' :  '113X_upgrade2018_realistic_HI_v2',
'phase1_2018_realistic_HEfail' :  '113X_upgrade2018_realistic_HEfail_v2',
'phase1_2018_cosmics'      :  '113X_upgrade2018cosmics_realistic_deco_v2',
'phase1_2018_cosmics_peak' :  '113X_upgrade2018cosmics_realistic_peak_v2',
'phase1_2021_design'       : '113X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '113X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '113X_mcRun3_2021cosmics_realistic_deco_v3',
'phase1_2021_realistic_hi' : '113X_mcRun3_2021_realistic_HI_v2',
'phase1_2023_realistic'    : '113X_mcRun3_2023_realistic_v2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '113X_mcRun3_2024_realistic_v2', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '113X_mcRun4_realistic_v2'
"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '113X_mc2017_design_v2',
'phase1_2017_realistic'    :  '113X_mc2017_realistic_v2',
'phase1_2017_cosmics'      :  '113X_mc2017cosmics_realistic_deco_v2',
'phase1_2017_cosmics_peak' :  '113X_mc2017cosmics_realistic_peak_v2',
'phase1_2018_design'       :  '113X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '113X_upgrade2018_realistic_v2',
'phase1_2018_realistic_hi' :  '113X_upgrade2018_realistic_HI_v2',
'phase1_2018_realistic_HEfail' :  '113X_upgrade2018_realistic_HEfail_v2',
'phase1_2018_cosmics'      :  '113X_upgrade2018cosmics_realistic_deco_v2',
'phase1_2018_cosmics_peak' :  '113X_upgrade2018cosmics_realistic_peak_v2',
'phase1_2021_design'       : '113X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '113X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '113X_mcRun3_2021cosmics_realistic_deco_v3',
'phase1_2021_realistic_hi' : '113X_mcRun3_2021_realistic_HI_v2',
'phase1_2023_realistic'    : '113X_mcRun3_2023_realistic_v2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '113X_mcRun3_2024_realistic_v2', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '113X_mcRun4_realistic_v2'"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '112X_mc2017_design_v2',
'phase1_2017_realistic'    :  '112X_mc2017_realistic_v4',
'phase1_2017_cosmics'      :  '112X_mc2017cosmics_realistic_deco_v4',
'phase1_2017_cosmics_peak' :  '112X_mc2017cosmics_realistic_peak_v4',
'phase1_2018_design'       :  '112X_upgrade2018_design_v4',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v7',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v7',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v7',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v7',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v7',
'phase1_2021_design'       : '112X_mcRun3_2021_design_v12', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v14', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v14',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v14',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v14', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v14', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '112X_mcRun4_realistic_v5'
"
-------------------------------------------------------------------------
"Recom
PRs: 32513, 32532"
-------------------------------------------------------------------------
=========================================================================
"'run2_data_promptlike_hi' : '112X_dataRun2_PromptLike_HI_v5',
"
-------------------------------------------------------------------------
"'run2_data_promptlike_hi' : '112X_dataRun2_PromptLike_HI_v6',"
-------------------------------------------------------------------------
"'run2_data_promptlike_hi' : '112X_dataRun2_PromptLike_HI_v5',
"
-------------------------------------------------------------------------
"Recom
PRs: 32375, 32453"
-------------------------------------------------------------------------
=========================================================================
"'run1_design'       :   '113X_mcRun1_design_v1',
'run1_mc'           :   '113X_mcRun1_realistic_v1',
'run1_mc_hi'        :   '113X_mcRun1_HeavyIon_v1',
'run1_mc_pa'        :   '113X_mcRun1_pA_v1',
'run2_mc_50ns'      :   '113X_mcRun2_startup_v1',
'run2_mc_l1stage1'  :   '113X_mcRun2_asymptotic_l1stage1_v1',
'run2_design'       :   '113X_mcRun2_design_v1',
"
-------------------------------------------------------------------------
"'run1_design'       :   '113X_mcRun1_design_v3',
'run1_mc'           :   '113X_mcRun1_realistic_v3',
'run1_mc_hi'        :   '113X_mcRun1_HeavyIon_v3',
'run1_mc_pa'        :   '113X_mcRun1_pA_v3',
'run2_mc_50ns'      :   '113X_mcRun2_startup_v4',
'run2_mc_l1stage1'  :   '113X_mcRun2_asymptotic_l1stage1_v5',
'run2_design'       :   '113X_mcRun2_design_v7',"
-------------------------------------------------------------------------
"'run1_design'       :   '106X_mcRun1_design_v4',
'run1_mc'           :   '106X_mcRun1_realistic_v4',
'run1_mc_hi'        :   '106X_mcRun1_HeavyIon_v4',
'run1_mc_pa'        :   '106X_mcRun1_pA_v4',
'run2_mc_50ns'      :   '106X_mcRun2_startup_v5',
'run2_mc_l1stage1'  :   '106X_mcRun2_asymptotic_l1stage1_v5',
'run2_design'       :   '106X_mcRun2_design_v8',
'run2_mc_pre_vfp'   :   '106X_mcRun2_asymptotic_preVFP_v10',
'run2_mc'           :   '106X_mcRun2_asymptotic_v16',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'        :   '106X_mcRun2_HeavyIon_v5',
'run2_mc_pa'        :   '106X_mcRun2_pA_v6',
'run1_data'         :   '106X_dataRun2_v33',
'run2_data'         :   '106X_dataRun2_v33',
'run2_data_relval'  :   '106X_dataRun2_relval_v31',
'run2_data_promptlike_HEfail' : '106X_dataRun2_PromptLike_HEfail_v14',
'run2_data_promptlike'    : '106X_dataRun2_PromptLike_v15',
'run2_data_promptlike_hi' : '106X_dataRun2_PromptLike_HI_v15',
"
-------------------------------------------------------------------------
"Recom
PRs: 32421, 32435"
-------------------------------------------------------------------------
=========================================================================
"'run2_mc_hi'        :   '113X_mcRun2_HeavyIon_v1',
'run2_mc_pa'        :   '113X_mcRun2_pA_v1',
"
-------------------------------------------------------------------------
"'run2_mc_hi'        :   autoCondHLT('106X_mcRun2_HeavyIon_v5'),
'run2_mc_pa'        :   autoCondHLT('106X_mcRun2_pA_v6'),"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '106X_mc2017_design_IdealBS_v6',
'phase1_2017_realistic'    :  '106X_mc2017_realistic_v9',
'phase1_2017_cosmics'      :  '106X_mc2017cosmics_realistic_deco_v4',
'phase1_2017_cosmics_peak' :  '106X_mc2017cosmics_realistic_peak_v4',
'phase1_2018_design'       :  '106X_upgrade2018_design_v8',
'phase1_2018_realistic'    :  '106X_upgrade2018_realistic_v16',
'phase1_2018_realistic_hi' :  '106X_upgrade2018_realistic_HI_v7',
'phase1_2018_realistic_HEfail' :  '106X_upgrade2018_realistic_HEfail_v16',
'phase1_2018_cosmics'      :   '106X_upgrade2018cosmics_realistic_deco_v13',
'phase1_2018_cosmics_peak' :   '106X_upgrade2018cosmics_realistic_peak_v13',
'phase1_2021_design'       : '106X_upgrade2021_design_v6', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '106X_upgrade2021_realistic_v12', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '106X_upgrade2021cosmics_realistic_deco_v5',
'phase2_realistic'         : '106X_upgrade2023_realistic_v6'
"
-------------------------------------------------------------------------
"Recom
PRs: 32421, 32435"
-------------------------------------------------------------------------
=========================================================================
"process.GlobalTag.DBParameters.authenticationPath = cms.untracked.string('.')
"
-------------------------------------------------------------------------
process.GlobalTag.DBParameters.authenticationPath = cms.untracked.string('.')
-------------------------------------------------------------------------
"process.GlobalTag.DBParameters.authenticationPath = cms.untracked.string('.')
"
-------------------------------------------------------------------------
"Recom
PRs: 32408, 32415"
-------------------------------------------------------------------------
=========================================================================
"process.GlobalTag.DBParameters.authenticationPath = cms.untracked.string('.')
"
-------------------------------------------------------------------------
BSOnlineJobName = 'BeamSpotOnlineTestHLT'
-------------------------------------------------------------------------
"process.GlobalTag.DBParameters.authenticationPath = cms.untracked.string('.')
"
-------------------------------------------------------------------------
"Recom
PRs: 32408, 32415"
-------------------------------------------------------------------------
=========================================================================
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"Recom
PRs: 32333, 32350"
-------------------------------------------------------------------------
=========================================================================
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"'RecoFakeHLT',
'HARVESTFakeHLT',"
-------------------------------------------------------------------------
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"Recom
PRs: 32333, 32350"
-------------------------------------------------------------------------
=========================================================================
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"'RecoFakeHLT',
'HARVESTFakeHLT',"
-------------------------------------------------------------------------
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"Recom
PRs: 32333, 32350"
-------------------------------------------------------------------------
=========================================================================
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"'RecoFakeHLT',
'HARVESTFakeHLT',"
-------------------------------------------------------------------------
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"Recom
PRs: 32333, 32350"
-------------------------------------------------------------------------
=========================================================================
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"'RecoFakeHLT',
'HARVESTFakeHLT',"
-------------------------------------------------------------------------
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"Recom
PRs: 32333, 32350"
-------------------------------------------------------------------------
=========================================================================
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"'RecoFakeHLT',
'HARVESTFakeHLT',"
-------------------------------------------------------------------------
"'RecoFakeHLT',
'HARVESTFakeHLT',
"
-------------------------------------------------------------------------
"Recom
PRs: 32333, 32350"
-------------------------------------------------------------------------
=========================================================================
"#temporarily remove ctppsProtons in Run-3 (see issue #32340)
from Configuration.Eras.Modifier_ctpps_2021_cff import ctpps_2021
_ctpps_2021_recoCTPPSTask = recoCTPPSTask.copyAndExclude([ctppsProtons])
ctpps_2021.toReplaceWith(recoCTPPSTask, _ctpps_2021_recoCTPPSTask)
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_ctpps_2018_cff import ctpps_2018
_ctpps_2018_recoCTPPSTask = recoCTPPSTask.copyAndExclude([ctppsProtons])
ctpps_2018.toReplaceWith(recoCTPPSTask, _ctpps_2018_recoCTPPSTask)"
-------------------------------------------------------------------------
"#temporarily remove ctppsProtons in Run-3 (see issue #32340)
from Configuration.Eras.Modifier_ctpps_2021_cff import ctpps_2021
_ctpps_2021_recoCTPPSTask = recoCTPPSTask.copyAndExclude([ctppsProtons])
ctpps_2021.toReplaceWith(recoCTPPSTask, _ctpps_2021_recoCTPPSTask)
"
-------------------------------------------------------------------------
"Recom
PRs: 32352, 32346"
-------------------------------------------------------------------------
=========================================================================
"#include <cerrno>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <sstream>
//#include <boost/filesystem/fstream.hpp>
// CMSSW headers
#include ""EventFilter/Utilities/plugins/RawEventFileWriterForBU.h""
#include ""FWCore/MessageLogger/interface/MessageLogger.h""
#include ""IOPool/Streamer/interface/FRDEventMessage.h""
#include ""IOPool/Streamer/interface/FRDFileHeader.h""
    : microSleep_(ps.getParameter<int>(""microSleep"")),
      frdFileVersion_(ps.getParameter<unsigned int>(""frdFileVersion"")) {
"
-------------------------------------------------------------------------
"Add the necessary information:

```cpp
#include <cerrno>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <sstream>
#include ""FWCore/ParameterSet/interface/ParameterSet.h""
#include ""FWCore/ParameterSet/interface/ConfigurationDescriptions.h""
#include ""IOPool/Streamer/interface/FRDEventMessage.h""
#include ""IOPool/Streamer/interface/FRDFileHeader.h""
#include ""FWCore/MessageLogger/interface/MessageLogger.h""

RawEventFileWriterForBU::RawEventFileWriterForBU(edm::ParameterSet const& ps):
    microSleep_(ps.getParameter<int>(""microSleep"")),
    frdFileVersion_(ps.getParameter<unsigned int>(""frdFileVersion"")) {
```"
-------------------------------------------------------------------------
"#include <cerrno>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <sstream>
//#include <boost/filesystem/fstream.hpp>
// CMSSW headers
#include ""EventFilter/Utilities/plugins/RawEventFileWriterForBU.h""
#include ""FWCore/MessageLogger/interface/MessageLogger.h""
#include ""IOPool/Streamer/interface/FRDEventMessage.h""
#include ""IOPool/Streamer/interface/FRDFileHeader.h""
    : microSleep_(ps.getParameter<int>(""microSleep"")),
      frdFileVersion_(ps.getParameter<unsigned int>(""frdFileVersion"")) {
"
-------------------------------------------------------------------------
"Recom
PRs: 32284, 32323"
-------------------------------------------------------------------------
=========================================================================
"void RawEventFileWriterForBU::extendDescription(edm::ParameterSetDescription& desc) {
  desc.add<int>(""microSleep"", 0);
  desc.add<unsigned int>(""frdFileVersion"", 0);
}
"
-------------------------------------------------------------------------
"import os
import math
import FWCore.ParameterSet.Config as cms
import FWCore.ParameterSet.VarParsing as VarParsing

def fillDescriptions():
  process.add(int)
  process.macro.add(unsigned int)

  options.register('microSleep',0,options.multiplicity.singleton,options.varType.int,'microSleep')
  options.register('frdFileVersion',0,options.multiplicity.singleton,options.varType.int,'FED header version')

# Function adapted to match the stable information and required dependency."
-------------------------------------------------------------------------
"void RawEventFileWriterForBU::extendDescription(edm::ParameterSetDescription& desc) {
  desc.add<int>(""microSleep"", 0);
  desc.add<unsigned int>(""frdFileVersion"", 0);
}
"
-------------------------------------------------------------------------
"Recom
PRs: 32284, 32323"
-------------------------------------------------------------------------
=========================================================================
"#include ""EventFilter/Utilities/interface/FastMonitoringService.h""
#include ""EventFilter/Utilities/interface/FedRawDataInputSource.h""
#include ""EventFilter/Utilities/plugins/DaqFakeReader.h""
#include ""EventFilter/Utilities/plugins/ExceptionGenerator.h""
#include ""EventFilter/Utilities/plugins/RecoEventOutputModuleForFU.h""
#include ""EventFilter/Utilities/plugins/RecoEventWriterForFU.h""
#include ""FWCore/Framework/interface/MakerMacros.h""
#include ""FWCore/ServiceRegistry/interface/ServiceMaker.h""
DEFINE_FWK_SERVICE_MAKER(FastMonitoringService, FastMonitoringServiceMaker);
DEFINE_FWK_MODULE(RawStreamFileWriterForBU);
// legacy name for ConfDB compatibility
typedef RecoEventOutputModuleForFU<RecoEventWriterForFU> ShmStreamConsumer;
DEFINE_FWK_MODULE(ShmStreamConsumer);
"
-------------------------------------------------------------------------
"#include ""EventFilter/Utilities/interface/FastMonitoringService.h""
#include ""EventFilter/Utilities/interface/FedRawDataInputSource.h""
#include ""EventFilter/Utilities/plugins/DaqFakeReader.h""
#include ""EventFilter/Utilities/plugins/ExceptionGenerator.h""
#include ""EventFilter/Utilities/plugins/RecoEventOutputModuleForFU.h""
#include ""EventFilter/Utilities/plugins/RecoEventWriterForFU.h""
#include ""FWCore/Framework/interface/MakerMacros.h""
#include ""FWCore/ServiceRegistry/interface/ServiceMaker.h""

DEFINE_FWK_SERVICE(FastMonitoringService);
DEFINE_FWK_MODULE(RawStreamFileWriterForBU);
// legacy name for ConfDB compatibility
typedef RecoEventOutputModuleForFU<RecoEventWriterForFU> ShmStreamConsumer;
DEFINE_FWK_MODULE(ShmStreamConsumer);"
-------------------------------------------------------------------------
"#include ""EventFilter/Utilities/interface/FastMonitoringService.h""
#include ""EventFilter/Utilities/interface/FedRawDataInputSource.h""
#include ""EventFilter/Utilities/plugins/DaqFakeReader.h""
#include ""EventFilter/Utilities/plugins/ExceptionGenerator.h""
#include ""EventFilter/Utilities/plugins/RecoEventOutputModuleForFU.h""
#include ""EventFilter/Utilities/plugins/RecoEventWriterForFU.h""
#include ""FWCore/Framework/interface/MakerMacros.h""
#include ""FWCore/ServiceRegistry/interface/ServiceMaker.h""
DEFINE_FWK_SERVICE_MAKER(FastMonitoringService, FastMonitoringServiceMaker);
DEFINE_FWK_MODULE(RawStreamFileWriterForBU);
// legacy name for ConfDB compatibility
typedef RecoEventOutputModuleForFU<RecoEventWriterForFU> ShmStreamConsumer;
DEFINE_FWK_MODULE(ShmStreamConsumer);
"
-------------------------------------------------------------------------
"Recom
PRs: 32284, 32323"
-------------------------------------------------------------------------
=========================================================================
"source = cms.InputTag(""s""),
numEventsPerFile = cms.uint32(options.eventsPerFile),
frdVersion = cms.uint32(6),
frdFileVersion = cms.uint32(options.frdFileVersion)
"
-------------------------------------------------------------------------
"source = cms.InputTag(""s""),
numEventsPerFile = cms.uint32(options.eventsPerFile),
frdVersion = cms.uint32(6),
frdFileVersion = cms.uint32(options.frdFileVersion),
           )"
-------------------------------------------------------------------------
"source = cms.InputTag(""s""),
numEventsPerFile = cms.uint32(options.eventsPerFile),
frdVersion = cms.uint32(6),
frdFileVersion = cms.uint32(options.frdFileVersion)
"
-------------------------------------------------------------------------
"Recom
PRs: 32284, 32323"
-------------------------------------------------------------------------
=========================================================================
"sort_ = iConfig.getParameter<bool>(""sort"");
"
-------------------------------------------------------------------------
"sort_ = iConfig.getParameter<bool>(""sort"", false);"
-------------------------------------------------------------------------
"sort_ = iConfig.getParameter<bool>( ""sort"" );
"
-------------------------------------------------------------------------
"Recom
PRs: 32297, 32298"
-------------------------------------------------------------------------
=========================================================================
"if (sort_) {
  std::sort(patJets->begin(), patJets->end(), pTComparator_);
}
"
-------------------------------------------------------------------------
"if (sortJets) {
    std::sort(patJets->begin(), patJets->end(), pTComparator);
}"
-------------------------------------------------------------------------
"if (sort_) {
  std::sort(patJets->begin(), patJets->end(), pTComparator_);
}
"
-------------------------------------------------------------------------
"Recom
PRs: 32297, 32298"
-------------------------------------------------------------------------
=========================================================================
"// sort inputs (by pt)
iDesc.add<bool>(""sort"", true);
"
-------------------------------------------------------------------------
"// sort inputs (by pt)
iDesc.add<bool>(""sortInputsByPt"", true)->setComment(""sort inputs by transverse momentum"");"
-------------------------------------------------------------------------
"// sort inputs (by pt)
iDesc.add<bool>(""sort"", true);
"
-------------------------------------------------------------------------
"Recom
PRs: 32297, 32298"
-------------------------------------------------------------------------
=========================================================================
"# sort
sort                 = cms.bool(True),
"
-------------------------------------------------------------------------
"sort                 = cms.bool(False),"
-------------------------------------------------------------------------
"# sort
sort                 = cms.bool(True),
"
-------------------------------------------------------------------------
"Recom
PRs: 32297, 32298"
-------------------------------------------------------------------------
=========================================================================
"self.addParameter(self._defaultParameters,'sortByPt', True, ""Set to False to not modify incoming jet order"")
"
-------------------------------------------------------------------------
"self.addParameter(self._defaultParameters,'sortByPt', True, ""Set to False to not modify incoming jet order"", 1)"
-------------------------------------------------------------------------
"self.addParameter(self._defaultParameters,'sortByPt', True, ""Set to False to not modify incoming jet order"")
"
-------------------------------------------------------------------------
"Recom
PRs: 32297, 32298"
-------------------------------------------------------------------------
=========================================================================
"def __call__(self,process,labelName=None,postfix=None,btagPrefix=None,jetSource=None,pfCandidates=None,explicitJTA=None,pvSource=None,svSource=None,elSource=None,muSource=None,runIVF=None,tightBTagNTkHits=None,loadStdRecoBTag=None,svClustering=None,fatJets=None,groomedFatJets=None,algo=None,rParam=None,sortByPt=None,printWarning=None,jetCorrections=None,btagDiscriminators=None,btagInfos=None):
"
-------------------------------------------------------------------------
"def __call__(self, process, labelName=None, postfix=None, btagPrefix=None, jetSource=None, pfCandidates=None, explicitJTA=None, pvSource=None, svSource=None, elSource=None, muSource=None, runIVF=None, tightBTagNTkHits=None, loadStdRecoBTag=None, svClustering=None, fatJets=None, groomedFatJets=None, algo=None, rParam=None, sortByPt=None, printWarning=None, jetCorrections=None, btagDiscriminators=None, btagInfos=None):
"
-------------------------------------------------------------------------
"def __call__(self,process,labelName=None,postfix=None,btagPrefix=None,jetSource=None,pfCandidates=None,explicitJTA=None,pvSource=None,svSource=None,elSource=None,muSource=None,runIVF=None,tightBTagNTkHits=None,loadStdRecoBTag=None,svClustering=None,fatJets=None,groomedFatJets=None,algo=None,rParam=None,sortByPt=None,printWarning=None,jetCorrections=None,btagDiscriminators=None,btagInfos=None):
"
-------------------------------------------------------------------------
"Recom
PRs: 32297, 32298"
-------------------------------------------------------------------------
=========================================================================
"if sortByPt is None:
    sortByPt=self._defaultParameters['sortByPt'].value
self.setParameter('sortByPt', sortByPt)
"
-------------------------------------------------------------------------
"if sortByPt is None:
    sortByPt=self._defaultParameters['sortByPt'].value
self.setParameter('sortByPt', sortByPt)"
-------------------------------------------------------------------------
"if sortByPt is None:
    sortByPt=self._defaultParameters['sortByPt'].value
self.setParameter('sortByPt', sortByPt)
"
-------------------------------------------------------------------------
"Recom
PRs: 32297, 32298"
-------------------------------------------------------------------------
=========================================================================
"sortByPt=self._parameters['sortByPt'].value
"
-------------------------------------------------------------------------
sortByPt=self._parameters['sortByPt'].value if 'sortByPt' in self._parameters else False
-------------------------------------------------------------------------
"sortByPt=self._parameters['sortByPt'].value
"
-------------------------------------------------------------------------
"Recom
PRs: 32297, 32298"
-------------------------------------------------------------------------
=========================================================================
"if not sortByPt: # default is True
    updatedPatJets.sort = cms.bool(False)
"
-------------------------------------------------------------------------
"if not sortByPt: # default is True
    updatedPatJets.sort = cms.bool(False)"
-------------------------------------------------------------------------
"if not sortByPt: # default is True
    updatedPatJets.sort = cms.bool(False)
"
-------------------------------------------------------------------------
"Recom
PRs: 32297, 32298"
-------------------------------------------------------------------------
=========================================================================
"if (jetCorrections is not None or bTagging):
    if jetCorrections is None and bTagging:
        raise ValueError(""Passing jetCorrections = None while running bTagging is likely not intended."")
    else:
        checkJetCorrectionsFormat(jetCorrections)
"
-------------------------------------------------------------------------
"if jetCorrections is not None or bTagging:
    if jetCorrections is None and bTagging:
        if jetCorrections == 'None':
            raise ValueError(""Passing jetCorrections = None while running bTagging is likely not intended."")
    else:
        checkJetCorrectionsFormat(jetCorrections)"
-------------------------------------------------------------------------
"if (jetCorrections is not None or bTagging):
    if jetCorrections is None and bTagging:
        raise ValueError(""Passing jetCorrections = None while running bTagging is likely not intended."")
    else:
        checkJetCorrectionsFormat(jetCorrections)
"
-------------------------------------------------------------------------
"Recom
PRs: 32297, 32298"
-------------------------------------------------------------------------
=========================================================================
"from RecoLocalTracker.Configuration.RecoLocalTracker_cff import *
"
-------------------------------------------------------------------------
from RecoLocalTracker.Configuration.RecoLocalTracker_cff import *
-------------------------------------------------------------------------
"from RecoLocalTracker.Configuration.RecoLocalTracker_cff import *
"
-------------------------------------------------------------------------
"Recom
PRs: 32178, 32296"
-------------------------------------------------------------------------
=========================================================================
"from RecoLocalTracker.Configuration.RecoLocalTracker_cff import *
"
-------------------------------------------------------------------------
from RecoLocalTracker.Configuration.RecoLocalTracker_cff import *
-------------------------------------------------------------------------
"from RecoLocalTracker.Configuration.RecoLocalTracker_cff import *
"
-------------------------------------------------------------------------
"Recom
PRs: 32178, 32292"
-------------------------------------------------------------------------
=========================================================================
"'run1_mc_pa'        :   '112X_mcRun1_pA_v2',
"
-------------------------------------------------------------------------
"'run1_mc_pa'        :   '112X_mcRun1_pA_v2',"
-------------------------------------------------------------------------
"'run2_mc_cosmics'   :   '106X_mcRun2cosmics_asymptotic_deco_v2',
"
-------------------------------------------------------------------------
"Recom
PRs: 32224, 32247"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '112X_dataRun2_v6',
'run2_data'         :   '112X_dataRun2_v6',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v6',
'run2_data_relval'  :   '112X_dataRun2_relval_v6',
"
-------------------------------------------------------------------------
"'run1_data'         :   '112X_dataRun2_v6',
'run2_data'         :   '112X_dataRun3_v1',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v6',
'run2_data_relval'  :   '112X_dataRun3_relval_v1',"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v31',
'run2_data'         :   '106X_dataRun2_v31',
'run2_data_relval'  :   '106X_dataRun2_relval_v29',
"
-------------------------------------------------------------------------
"Recom
PRs: 32169, 32170"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v5',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v5',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v5',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v5',
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v12', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v12',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v12', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v12', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"'phase1_2018_realistic'         : '112X_upgrade2018_realistic_v13',
'phase1_2018_realistic_HEfail'   : '112X_upgrade2018_realistic_HEfail_v14',
'phase1_2018_cosmics'            : '112X_upgrade2018cosmics_realistic_deco_v11',
'phase1_2018_cosmics_peak'       : '112X_upgrade2018cosmics_realistic_peak_v11',
'phase1_2021_realistic'          : '112X_mcRun3_2021_realistic_v13',
'phase1_2021_cosmics'            : '112X_mcRun3_2021cosmics_realistic_deco_v12',
'phase1_2023_realistic'          : '112X_mcRun3_2023_realistic_v12',
'phase1_2024_realistic'          : '112X_mcRun3_2024_realistic_v12',"
-------------------------------------------------------------------------
"'phase1_2018_realistic'    :  '106X_upgrade2018_realistic_v13',
'phase1_2018_realistic_HEfail' :  '106X_upgrade2018_realistic_HEfail_v14',
'phase1_2018_cosmics'      :   '106X_upgrade2018cosmics_realistic_deco_v11',
'phase1_2018_cosmics_peak' :   '106X_upgrade2018cosmics_realistic_peak_v11',
"
-------------------------------------------------------------------------
"Recom
PRs: 32169, 32170"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '112X_dataRun2_v2',
'run2_data'         :   '112X_dataRun2_v2',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v2',
'run2_data_relval'  :   '112X_dataRun2_relval_v2',
"
-------------------------------------------------------------------------
"'run1_data'         :   '112X_dataRun2_v30',
'run2_data'         :   '112X_dataRun2_v30',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v30',
'run2_data_relval'  :   '112X_dataRun2_relval_v30',"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v30',
'run2_data'         :   '106X_dataRun2_v30',
'run2_data_relval'  :   '106X_dataRun2_relval_v28',
"
-------------------------------------------------------------------------
"Recom
PRs: 30478, 32120"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v1',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v1',
'phase1_2018_cosmics'      :   '112X_upgrade2018cosmics_realistic_deco_v1',
'phase1_2018_cosmics_peak' :   '112X_upgrade2018cosmics_realistic_peak_v1',
"
-------------------------------------------------------------------------
"'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v11',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v12',
'phase1_2018_cosmics'      :   '112X_upgrade2018cosmics_realistic_deco_v10',
'phase1_2018_cosmics_peak' :   '112X_upgrade2018cosmics_realistic_peak_v10',"
-------------------------------------------------------------------------
"'phase1_2017_realistic'    :  '106X_mc2017_realistic_v8',
'phase1_2017_cosmics'      :  '106X_mc2017cosmics_realistic_deco_v3',
'phase1_2017_cosmics_peak' :  '106X_mc2017cosmics_realistic_peak_v3',
'phase1_2018_realistic'    :  '106X_upgrade2018_realistic_v12',
'phase1_2018_realistic_HEfail' :  '106X_upgrade2018_realistic_HEfail_v12',
'phase1_2018_cosmics'      :   '106X_upgrade2018cosmics_realistic_deco_v10',
'phase1_2018_cosmics_peak' :   '106X_upgrade2018cosmics_realistic_peak_v10',
"
-------------------------------------------------------------------------
"Recom
PRs: 30478, 32120"
-------------------------------------------------------------------------
=========================================================================
"#calo parts removed as long as tracking is not running jetCore in phase2
trackingPhase2PU140.toReplaceWith(reconstruction_trackingOnlyTask,
                                  reconstruction_trackingOnlyTask.copyAndExclude([hgcalLocalRecoTask,castorreco]))
"
-------------------------------------------------------------------------
"reconstruction_trackingOnlyTask = cms.Task(localrecoTask,globalreco_trackingTask)
reconstruction_trackingOnly = cms.Sequence(reconstruction_trackingOnlyTask)
reconstruction_pixelTrackingOnlyTask = cms.Task(pixeltrackerlocalrecoTask)"
-------------------------------------------------------------------------
"#calo parts removed as long as tracking is not running jetCore in phase2
trackingPhase2PU140.toReplaceWith(reconstruction_trackingOnlyTask,
                                  reconstruction_trackingOnlyTask.copyAndExclude([hgcalLocalRecoTask,castorreco]))
"
-------------------------------------------------------------------------
"Recom
PRs: 31844, 32104"
-------------------------------------------------------------------------
=========================================================================
"'run1_design'       :   '112X_mcRun1_design_v1',
'run1_mc'           :   '112X_mcRun1_realistic_v1',
'run1_mc_hi'        :   '112X_mcRun1_HeavyIon_v1',
'run1_mc_pa'        :   '112X_mcRun1_pA_v1',
'run2_mc_50ns'      :   '112X_mcRun2_startup_v1',
'run2_mc_l1stage1'  :   '112X_mcRun2_asymptotic_l1stage1_v1',
'run2_design'       :   '112X_mcRun2_design_v1',
'run2_mc_pre_vfp'   :   '112X_mcRun2_asymptotic_preVFP_v1',
'run2_mc'           :   '112X_mcRun2_asymptotic_v1',
'run2_mc_cosmics'   :   '112X_mcRun2cosmics_startup_deco_v1',
'run2_mc_hi'        :   '112X_mcRun2_HeavyIon_v1',
'run2_mc_pa'        :   '112X_mcRun2_pA_v1',
'run1_data'         :   '112X_dataRun2_v5',
'run2_data'         :   '112X_dataRun2_v5',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v5',
'run2_data_relval'  :   '112X_dataRun2_relval_v5',
'run2_data_promptlike_hi' : '112X_dataRun2_PromptLike_HI_v2',
'run1_hlt'          :   '101X_dataRun2_HLT_frozen_v10',
'run2_hlt'          :   '101X_dataRun2_HLT_frozen_v10',
'run2_hlt_relval'      :   '103X_dataRun2_HLT_relval_v9',
'run2_hlt_relval_hi'   :   '103X_dataRun2_HLT_relval_HI_v5',
'run2_hlt_hi'       :   '101X_dataRun2_HLTHI_frozen_v10',
'run3_data_express'        :   '111X_dataRun3_Express_v4',
'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v4',
'phase1_2017_design'       :  '112X_mc2017_design_v1',
'phase1_2017_realistic'    :  '112X_mc2017_realistic_v3',
'phase1_2017_cosmics'      :  '112X_mc2017cosmics_realistic_deco_v3',
'phase1_2017_cosmics_peak' :  '112X_mc2017cosmics_realistic_peak_v3',
'phase1_2018_design'       :  '112X_upgrade2018_design_v3',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v4',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v5',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v4',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v4',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v4',
'phase1_2021_design'       : '112X_mcRun3_2021_design_v9', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v9', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v9',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v10',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v9', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v9', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '112X_mcRun4_realistic_v3'
"
-------------------------------------------------------------------------
"'run1_design'       :   '112X_mcRun1_design_v1',
'run1_mc'           :   '112X_mcRun1_realistic_v1',
'run1_mc_hi'        :   '112X_mcRun1_HeavyIon_v1',
'run1_mc_pa'        :   '112X_mcRun1_pA_v1',
'run2_mc_50ns'      :   '112X_mcRun2_startup_v1',
'run2_mc_l1stage1'  :   '112X_mcRun2_asymptotic_l1stage1_v1',
'run2_design'       :   '112X_mcRun2_design_v1',
'run2_mc_pre_vfp'   :   '112X_mcRun2_asymptotic_preVFP_v1',
'run2_mc'           :   '112X_mcRun2_asymptotic_v1',
'run2_mc_cosmics'   :   '112X_mcRun2cosmics_startup_deco_v1',
'run2_mc_hi'        :   '112X_mcRun2_HeavyIon_v1',
'run2_mc_pa'        :   '112X_mcRun2_pA_v1',
'run1_data'         :   '112X_dataRun2_v5',
'run2_data'         :   '112X_dataRun2_v5',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v5',
'run2_data_relval'  :   '112X_dataRun2_relval_v5',
'run2_data_promptlike_hi' : '112X_dataRun2_PromptLike_HI_v2',
'run1_hlt'          :   '101X_dataRun2_HLT_frozen_v10',
'run2_hlt'          :   '101X_dataRun2_HLT_frozen_v10',
'run2_hlt_relval'      :   '103X_dataRun2_HLT_relval_v9',
'run2_hlt_relval_hi'   :   '103X_dataRun2_HLT_relval_HI_v5',
'run2_hlt_hi'       :   '101X_dataRun2_HLTHI_frozen_v10',"
-------------------------------------------------------------------------
"'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v4',
"
-------------------------------------------------------------------------
"Recom
PRs: 31780, 32074"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '112X_dataRun2_v4',
'run2_data'         :   '112X_dataRun2_v4',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v4',
'run2_data_relval'  :   '112X_dataRun2_relval_v4',
"
-------------------------------------------------------------------------
"'run1_data'         :   '112X_dataRun1_v4',
'run2_data'         :   '112X_dataRun2_v4',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v4',
'run2_data_relval'  :   '112X_dataRun2_relval_v4',"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v29',
'run2_data'         :   '106X_dataRun2_v29',
'run2_data_relval'  :   '106X_dataRun2_relval_v27',
"
-------------------------------------------------------------------------
"Recom
PRs: 31635, 31702"
-------------------------------------------------------------------------
=========================================================================
")
"
-------------------------------------------------------------------------
"```python
from FWCore.ParameterSet.Config import ADDED
# no changes needed for stable imports
# no changes needed for existing process, Process, TEST, load, MessageService, MessageLogger_cfi, MessageLogger, cerr, FwkReport, reportEvery, maxEvents, untracked, PSet, input, int32, fileList, loadListFromFile, ttbar, list, readFiles, vstring, source, Source, PoolSource, fileNames, file, pf500, root, L1Trigger, L1CaloTrigger, Phase1L1TJets_cff, out, OutputModule, PoolOutputModule, fileName, string, myOutputFile, outputCommands, drop, keep, _Phase1L1TJetProducer_, _, _ak4GenJetsNoNu_, _Phase1L1TJetCalibrator_, p, Path, Phase1L1TJetsSequence, e, EndPath

Phase1L1TJetProducer = ADDED
Phase1L1TJetCalibrator = ADDED
```"
-------------------------------------------------------------------------
")
"
-------------------------------------------------------------------------
"Recom
PRs: 31606, 31607"
-------------------------------------------------------------------------
=========================================================================
"for hwRx in range(0,70):
"
-------------------------------------------------------------------------
for hwRx in range(70):
-------------------------------------------------------------------------
"for hwRx in range(0,70):
"
-------------------------------------------------------------------------
"Recom
PRs: 31606, 31607"
-------------------------------------------------------------------------
=========================================================================
"for wordIt in range(1,25):
"
-------------------------------------------------------------------------
"for wordIt in range(0,24):
"
-------------------------------------------------------------------------
"for wordIt in range(1,25):
"
-------------------------------------------------------------------------
"Recom
PRs: 31606, 31607"
-------------------------------------------------------------------------
=========================================================================
"for evIt in range(0,nEv):
"
-------------------------------------------------------------------------
"for evIt in range(0, nEv):"
-------------------------------------------------------------------------
"for evIt in range(0,nEv):
"
-------------------------------------------------------------------------
"Recom
PRs: 31606, 31607"
-------------------------------------------------------------------------
=========================================================================
"for evIt in range(0,nEv):
"
-------------------------------------------------------------------------
"for evIt in range(nEv):
"
-------------------------------------------------------------------------
"for evIt in range(0,nEv):
"
-------------------------------------------------------------------------
"Recom
PRs: 31606, 31607"
-------------------------------------------------------------------------
=========================================================================
"for evIt in range(0,nEv):
        for jetIt in range(len(hwData[evIt])):
        for jetIt in range(len(hwData[evIt])):
        for jetIt in range(len(emData[evIt])):
"
-------------------------------------------------------------------------
"for evIt in range(0,nEv):
        if hwData[evIt][0][0] ==0 and emData[evIt][0][0] == 0:
            continue
        jetCount=0
        jetDiff = len(hwData[evIt]) - len(emData[evIt])
        print("""")

        for jetIt in range(len(hwData[evIt])):
            if jetDiff==0:
                print(str(evIt) + ""\t\t"" + str(hwData[evIt][jetIt][0]) + ""\t"" + str(hwData[evIt][jetIt][1])[:4] + ""\t"" + str(hwData[evIt][jetIt][2])[:4] + ""\t\t"" +
                    str(emData[evIt][jetIt][0]) + ""\t"" + str(emData[evIt][jetIt][1])[:4] + ""\t"" + str(emData[evIt][jetIt][2])[:4])
            if jetDiff>0:
                jetCount+=1
                if jetCount > len(emData[evIt]):
                    emData[evIt].append([0,0,0])
                print(str(evIt) + ""\t\t"" + str(hwData[evIt][jetIt][0]) + ""\t"" + str(hwData[evIt][jetIt][1])[:4] + ""\t"" + str(hwData[evIt][jetIt][2])[:4]  + ""\t\t"" +
                    str(emData[evIt][jetIt][0]) + ""\t"" + str(emData[evIt][jetIt][1])[:4] + ""\t"" + str(emData[evIt][jetIt][2])[:4])
            if jetDiff<0:
                jetCount+=1
                if jetCount > len(hwData[evIt]):
                    hwData[evIt].append([0,0,0])"
-------------------------------------------------------------------------
"for evIt in range(0,nEv):
        for jetIt in range(len(hwData[evIt])):
        for jetIt in range(len(hwData[evIt])):
        for jetIt in range(len(emData[evIt])):
"
-------------------------------------------------------------------------
"Recom
PRs: 31606, 31607"
-------------------------------------------------------------------------
=========================================================================
"defaultEOSlistCommand = 'xrdfs root://eoscms.cern.ch ls '
defaultEOSmkdirCommand = 'xrdfs root://eoscms.cern.ch mkdir '
defaultEOSfeCommand = 'xrdfs root://eoscms.cern.ch stat -q IsReadable '
"
-------------------------------------------------------------------------
"defaultEOSlistCommand = 'xrdfs root://eoscms.cern.ch ls '
defaultEOSmkdirCommand = 'xrdfs root://eoscms.cern.ch mkdir '
defaultEOSfeCommand = 'xrdfs root://eoscms.cern.ch stat -q IsReadable '"
-------------------------------------------------------------------------
"defaultEOSlistCommand = 'xrdfs root://eoscms.cern.ch ls '
defaultEOSmkdirCommand = 'xrdfs root://eoscms.cern.ch mkdir '
defaultEOSfeCommand = 'xrdfs root://eoscms.cern.ch stat -q IsReadable '
    if len(elements):
"
-------------------------------------------------------------------------
"Recom
PRs: 31553, 31587"
-------------------------------------------------------------------------
=========================================================================
"defaultEOSlistCommand = 'xrdfs root://eoscms.cern.ch ls '
defaultEOSmkdirCommand = 'xrdfs root://eoscms.cern.ch mkdir '
defaultEOSfeCommand = 'xrdfs root://eoscms.cern.ch stat -q IsReadable '
"
-------------------------------------------------------------------------
"defaultEOSlistCommand = 'xrdfs root://eoscms.cern.ch ls '
defaultEOSmkdirCommand = 'xrdfs root://eoscms.cern.ch mkdir '
defaultEOSfeCommand = 'xrdfs root://eoscms.cern.ch stat -q IsReadable '"
-------------------------------------------------------------------------
"defaultEOSLoadPath = 'root://eoscms.cern.ch/'
defaultEOSlistCommand = 'xrdfs 'defaultEOSLoadPath' ls '
defaultEOSmkdirCommand = 'xrdfs 'defaultEOSLoadPath' mkdir '
defaultEOSfeCommand = 'xrdfs 'defaultEOSLoadPath' stat -q IsReadable '
    if len(elements):
"
-------------------------------------------------------------------------
"Recom
PRs: 31553, 31561"
-------------------------------------------------------------------------
=========================================================================
"defaultEOSlistCommand = 'xrdfs root://eoscms.cern.ch ls '
defaultEOSmkdirCommand = 'xrdfs root://eoscms.cern.ch mkdir '
defaultEOSfeCommand = 'xrdfs root://eoscms.cern.ch stat -q IsReadable '
"
-------------------------------------------------------------------------
"defaultEOSlistCommand = 'xrdfs root://eoscms.cern.ch ls '
defaultEOSmkdirCommand = 'xrdfs root://eoscms.cern.ch mkdir '
defaultEOSfeCommand = 'xrdfs root://eoscms.cern.ch stat -q IsReadable '"
-------------------------------------------------------------------------
"defaultEOSLoadPath = 'root://eoscms.cern.ch/'
defaultEOSlistCommand = 'xrdfs 'defaultEOSLoadPath' ls '
defaultEOSmkdirCommand = 'xrdfs 'defaultEOSLoadPath' mkdir '
defaultEOSfeCommand = 'xrdfs 'defaultEOSLoadPath' stat -q IsReadable '
"
-------------------------------------------------------------------------
"Recom
PRs: 31553, 31560"
-------------------------------------------------------------------------
=========================================================================
"'run3_data_express'        :   '111X_dataRun3_Express_v2',
'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v2',
"
-------------------------------------------------------------------------
"'run3_data_express'        :   '111X_dataRun3_Express_v2',
'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v3',"
-------------------------------------------------------------------------
"'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v2',
"
-------------------------------------------------------------------------
"Recom
PRs: 31358, 31392"
-------------------------------------------------------------------------
=========================================================================
"import os
import math
import numpy as np
# reference: https://www.kennethmoreland.com/color-maps/ColorMapsExpanded.pdf
# RGB to XYZ matrix
# 0.4124 | 0.2126 | 0.0193
# 0.3576 | 0.7152 | 0.1192
# 0.1805 | 0.0722 | 0.9505
# Inverse
#  3.24063  | -0.968931  |  0.0557101
# -1.53721  |  1.87576   | -0.204021
# -0.498629 |  0.0415175 |  1.057
def fRGB(x):
    if x > 0.00313080495356037152: val = math.pow(x, 1./2.4)*1.055 - 0.055
    else: val = x*12.92
    return val*255.
def fRGBinv(x):
    if x > 0.04045: val = math.pow((x  0.055)/1.055, 2.4)
    else: val = (x0.)/12.92
    return val*100
    
def lRGB2sRGB(r, g, b):
    #def rgb_lin(x):
    #    if x > 0.00313080495356037152: val = math.pow(x, 1./2.4)*1.055 - 0.055
    #    else: val = x*12.92
    #    return val*255.
    #return rgb_lin((r0.)/100.), rgb_lin((g0.)/100.), rgb_lin((b0.)/100.)
    return fRGB((r0.)/100.), fRGB((g0.)/100.), fRGB((b0.)/100.)
def sRGB2lRGB(r, g, b):
    #def srgb_lrgb(x):
    #    if x > 0.04045: val = math.pow((x  0.055)/1.055, 2.4)
    #    else: val = (x0.)/12.92
    #    return val*100
    #return srgb_lrgb((r0.)/255.), srgb_lrgb((g0.)/255.), srgb_lrgb((b0.)/255.)
    return fRGBinv((r0.)/255.), fRGBinv((g0.)/255.), fRGBinv((b0.)/255.)
def rgb2xyz(r, g, b):
    sr, sg, sb = sRGB2lRGB(r, g, b)
    x = 0.4124*sr  0.3576*sg  0.1805*sb
    y = 0.2126*sr  0.7152*sg  0.0722*sb
    z = 0.0193*sr  0.1192*sg  0.9505*sb
    return x, y, z
def xyz2rgb(x, y, z):
    r =    3.24063*x -  1.53721*y -  0.498629*z
    g =  -0.968931*x   1.87576*y  0.0415175*z
    b =  0.0557101*x - 0.204021*y      1.057*z
    #m = max(max(r, g), b)
    #if m > 1.:
    #    r = (r0.)/(m0.)
    #    g = (g0.)/(m0.)
    #    b = (b0.)/(m0.)
    return lRGB2sRGB(r, g, b)
def F(v):
    if v > 0.008856: return math.pow(v, 1./3.)
    else: return 7.787*v  16./116.
def Finv(v):
    if v > 0.20689270648: return math.pow(v, 3)
    else: return (v - 16./116.)/7.787
def xyz2Lab(x, y, z, refW):
    xn = refW[0]
    yn = refW[1]
    zn = refW[2]
    #xn, yn, zn = [95.047, 100.0, 108.883]
    #def F(v):
    #    if v > 0.008856: return math.pow(v, 1./3.)
    #    else: return 7.787*v  16./116.
    L = 116*(F((y0.)/(yn 0.)) - 16./116.)
    a = 500*(F((x0.)/(xn0.)) - F((y0.)/(yn0.)))
    b = 200*(F((y0.)/(yn0.)) - F((z0.)/(zn0.))) 
    return L, a, b
def Lab2xyz(L, a, b, refW):
    xn = refW[0]
    yn = refW[1]
    zn = refW[2]
    #xn, yn, zn = [95.047, 100.0, 108.883]
    #def Finv(v):
    #    if v > 0.20689270648: return math.pow(v, 3)
    #    else: return (v - 16./116.)/7.787
    x = Finv((a0.)/500.  (L  16.)/116.)*xn
    y = Finv((L  16.)/116.)*yn
    z = Finv((L  16.)/116. - (b0.)/200.)*zn
    return x, y, z
def Lab2Msh(L, a, b):
    M = math.sqrt(math.pow(L,2)  math.pow(a,2)  math.pow(b,2))
    s = math.acos((L0.)/(M0.))
    h = math.atan2(b,a)
    return M, s, h
def Msh2Lab(M, s, h):
    L = M*math.cos(s)
    a = M*math.sin(s)*math.cos(h)
    b = M*math.sin(s)*math.sin(h)
    return L, a, b
def rgb2Msh(r, g, b, refW):
    x, y, z = rgb2xyz(r, g, b)
    xr, yr, zr = rgb2xyz(refW[0], refW[1], refW[2])
    L, a, b = xyz2Lab(x, y, z, [xr, yr, zr])
    return Lab2Msh(L, a, b)
def Msh2rgb(M, s, h, refW):
    xr, yr, zr = rgb2xyz(refW[0], refW[1], refW[2])
    L, a, b = Msh2Lab(M, s, h)
    x, y, z = Lab2xyz(L, a, b, [xr, yr, zr])
    return xyz2rgb(x, y, z)
def AdjustHue(Ms, ss, hs, Mu):
    #print('Adjusting Hue')
    if Ms >= Mu: return hs
    h = ss*math.sqrt(math.pow(Mu, 2.) - math.pow(Ms, 2.))/(Ms*math.sin(ss)0.)
    if hs > -math.pi/3.: return hs  h
    else: return hs - h
def radDiff(a1, a2):
    diff = abs(a1 - a2)
    if diff > math.pi: return abs(diff - 2*math.pi)
    else: return diff 
#('red: ', (117.34353643868656, 1.099939672641069, 0.698178814103516))
#('blue: ', (137.64998152940237, 1.333915268336423, -0.9374394027523394))
def DivergingColor(col1, col2, white, frac): 
    M1, s1, h1 = rgb2Msh(col1[0], col1[1], col1[2], white)
    M2, s2, h2 = rgb2Msh(col2[0], col2[1], col2[2], white)
    #if s1 > 0.05 and s2 > 0.05 and radDiff(h1,h2) > math.pi/3.:
    if s1 > 0.05 and s2 > 0.05 and abs(h1 - h2) > math.pi/3.:
        Mmid = max(max(M1,M2),88.)
        if frac < .5:
            M2 = Mmid
            s2 = 0.
            h2 = 0.
            frac = 2*frac
        else:
            M1 = Mmid
            s1 = 0.
            h1 = 0.
            frac = 2*frac - 1
    if s1 < 0.05 and s2 > 0.05: h1 = AdjustHue(M2, s2, h2, M1)
    elif s2 < 0.05 and s1 > 0.05: h2 = AdjustHue(M1, s1, h1, M2)
    M = (1 - frac)*M1  frac*M2
    s = (1 - frac)*s1  frac*s2
    h = (1 - frac)*h1  frac*h2
    #print('temp', M, s, h, h1, h2, frac)
    return Msh2rgb(M, s, h, white)
 
if __name__ == '__main__':
    Msh = [83.9912098 ,  0.54009147, -0.18776355]
    Msh_np = np.array(Msh) 
    #red = [243.59789395465015, 146.5213165050506, 192.51678151291404]
    red   = [59, 76, 192]
    blue  = [180, 4, 38]
    white = [1, 1, 1]
    frac = 0.75
    print('my val: ', DivergingColor(blue, red, white, frac))
    print(xyz2rgb(95.047, 100.0, 108.883))
"
-------------------------------------------------------------------------
"import Alignment.OfflineValidation.TkAlMap
import copy
import time
import sys

# Code snippet remains the same as provided by the user."
-------------------------------------------------------------------------
"import os
import math
import numpy as np
# reference: https://www.kennethmoreland.com/color-maps/ColorMapsExpanded.pdf
# RGB to XYZ matrix
# 0.4124 | 0.2126 | 0.0193
# 0.3576 | 0.7152 | 0.1192
# 0.1805 | 0.0722 | 0.9505
# Inverse
#  3.24063  | -0.968931  |  0.0557101
# -1.53721  |  1.87576   | -0.204021
# -0.498629 |  0.0415175 |  1.057
def fRGB(x):
    if x > 0.00313080495356037152: val = math.pow(x, 1./2.4)*1.055 - 0.055
    else: val = x*12.92
    return val*255.
def fRGBinv(x):
    if x > 0.04045: val = math.pow((x  0.055)/1.055, 2.4)
    else: val = (x0.)/12.92
    return val*100
    
def lRGB2sRGB(r, g, b):
    #def rgb_lin(x):
    #    if x > 0.00313080495356037152: val = math.pow(x, 1./2.4)*1.055 - 0.055
    #    else: val = x*12.92
    #    return val*255.
    #return rgb_lin((r0.)/100.), rgb_lin((g0.)/100.), rgb_lin((b0.)/100.)
    return fRGB((r0.)/100.), fRGB((g0.)/100.), fRGB((b0.)/100.)
def sRGB2lRGB(r, g, b):
    #def srgb_lrgb(x):
    #    if x > 0.04045: val = math.pow((x  0.055)/1.055, 2.4)
    #    else: val = (x0.)/12.92
    #    return val*100
    #return srgb_lrgb((r0.)/255.), srgb_lrgb((g0.)/255.), srgb_lrgb((b0.)/255.)
    return fRGBinv((r0.)/255.), fRGBinv((g0.)/255.), fRGBinv((b0.)/255.)
def rgb2xyz(r, g, b):
    sr, sg, sb = sRGB2lRGB(r, g, b)
    x = 0.4124*sr  0.3576*sg  0.1805*sb
    y = 0.2126*sr  0.7152*sg  0.0722*sb
    z = 0.0193*sr  0.1192*sg  0.9505*sb
    return x, y, z
def xyz2rgb(x, y, z):
    r =    3.24063*x -  1.53721*y -  0.498629*z
    g =  -0.968931*x   1.87576*y  0.0415175*z
    b =  0.0557101*x - 0.204021*y      1.057*z
    #m = max(max(r, g), b)
    #if m > 1.:
    #    r = (r0.)/(m0.)
    #    g = (g0.)/(m0.)
    #    b = (b0.)/(m0.)
    return lRGB2sRGB(r, g, b)
def F(v):
    if v > 0.008856: return math.pow(v, 1./3.)
    else: return 7.787*v  16./116.
def Finv(v):
    if v > 0.20689270648: return math.pow(v, 3)
    else: return (v - 16./116.)/7.787
def xyz2Lab(x, y, z, refW):
    xn = refW[0]
    yn = refW[1]
    zn = refW[2]
    #xn, yn, zn = [95.047, 100.0, 108.883]
    #def F(v):
    #    if v > 0.008856: return math.pow(v, 1./3.)
    #    else: return 7.787*v  16./116.
    L = 116*(F((y0.)/(yn 0.)) - 16./116.)
    a = 500*(F((x0.)/(xn0.)) - F((y0.)/(yn0.)))
    b = 200*(F((y0.)/(yn0.)) - F((z0.)/(zn0.))) 
    return L, a, b
def Lab2xyz(L, a, b, refW):
    xn = refW[0]
    yn = refW[1]
    zn = refW[2]
    #xn, yn, zn = [95.047, 100.0, 108.883]
    #def Finv(v):
    #    if v > 0.20689270648: return math.pow(v, 3)
    #    else: return (v - 16./116.)/7.787
    x = Finv((a0.)/500.  (L  16.)/116.)*xn
    y = Finv((L  16.)/116.)*yn
    z = Finv((L  16.)/116. - (b0.)/200.)*zn
    return x, y, z
def Lab2Msh(L, a, b):
    M = math.sqrt(math.pow(L,2)  math.pow(a,2)  math.pow(b,2))
    s = math.acos((L0.)/(M0.))
    h = math.atan2(b,a)
    return M, s, h
def Msh2Lab(M, s, h):
    L = M*math.cos(s)
    a = M*math.sin(s)*math.cos(h)
    b = M*math.sin(s)*math.sin(h)
    return L, a, b
def rgb2Msh(r, g, b, refW):
    x, y, z = rgb2xyz(r, g, b)
    xr, yr, zr = rgb2xyz(refW[0], refW[1], refW[2])
    L, a, b = xyz2Lab(x, y, z, [xr, yr, zr])
    return Lab2Msh(L, a, b)
def Msh2rgb(M, s, h, refW):
    xr, yr, zr = rgb2xyz(refW[0], refW[1], refW[2])
    L, a, b = Msh2Lab(M, s, h)
    x, y, z = Lab2xyz(L, a, b, [xr, yr, zr])
    return xyz2rgb(x, y, z)
def AdjustHue(Ms, ss, hs, Mu):
    #print('Adjusting Hue')
    if Ms >= Mu: return hs
    h = ss*math.sqrt(math.pow(Mu, 2.) - math.pow(Ms, 2.))/(Ms*math.sin(ss)0.)
    if hs > -math.pi/3.: return hs  h
    else: return hs - h
def radDiff(a1, a2):
    diff = abs(a1 - a2)
    if diff > math.pi: return abs(diff - 2*math.pi)
    else: return diff 
#('red: ', (117.34353643868656, 1.099939672641069, 0.698178814103516))
#('blue: ', (137.64998152940237, 1.333915268336423, -0.9374394027523394))
def DivergingColor(col1, col2, white, frac): 
    M1, s1, h1 = rgb2Msh(col1[0], col1[1], col1[2], white)
    M2, s2, h2 = rgb2Msh(col2[0], col2[1], col2[2], white)
    #if s1 > 0.05 and s2 > 0.05 and radDiff(h1,h2) > math.pi/3.:
    if s1 > 0.05 and s2 > 0.05 and abs(h1 - h2) > math.pi/3.:
        Mmid = max(max(M1,M2),88.)
        if frac < .5:
            M2 = Mmid
            s2 = 0.
            h2 = 0.
            frac = 2*frac
        else:
            M1 = Mmid
            s1 = 0.
            h1 = 0.
            frac = 2*frac - 1
    if s1 < 0.05 and s2 > 0.05: h1 = AdjustHue(M2, s2, h2, M1)
    elif s2 < 0.05 and s1 > 0.05: h2 = AdjustHue(M1, s1, h1, M2)
    M = (1 - frac)*M1  frac*M2
    s = (1 - frac)*s1  frac*s2
    h = (1 - frac)*h1  frac*h2
    #print('temp', M, s, h, h1, h2, frac)
    return Msh2rgb(M, s, h, white)
 
if __name__ == '__main__':
    Msh = [83.9912098 ,  0.54009147, -0.18776355]
    Msh_np = np.array(Msh) 
    #red = [243.59789395465015, 146.5213165050506, 192.51678151291404]
    red   = [59, 76, 192]
    blue  = [180, 4, 38]
    white = [1, 1, 1]
    frac = 0.75
    print('my val: ', DivergingColor(blue, red, white, frac))
    print(xyz2rgb(95.047, 100.0, 108.883))
"
-------------------------------------------------------------------------
"Recom
PRs: 31376, 31284"
-------------------------------------------------------------------------
=========================================================================
"# TkAlMap inFile=tree.root compAl=UL2018 refAl=StartGeom savePNG=True TkVersion=phase1 outDir=./test_plots/tanh colPal=2
range_str = ''
plottedDifferences = [""dx"",""dy"",""dz"",""dr"",""rdphi"",""dalpha"",""dbeta"",""dgamma""]
for diff in plottedDifferences:
    range_str = diff'_range=['str(repMap[diff'_min'])','str(repMap[diff'_max'])'];'
repMap[""runComparisonScripts""] = \
    (""mkdir -p .oO[datadir]Oo./.oO[name]Oo.""
     "".Comparison_common""name""_Images/TkAlMapPlots\n"")
repMap[""runComparisonScripts""] = \
    (""python .oO[Alignment/OfflineValidation]Oo./python/runGCPTkAlMap.py -b "" 
     ""inFile=.oO[name]Oo..Comparison_common""name"".root ""
     ""refAl=\"".oO[reference]Oo.\"" "" 
     ""compAl=\"".oO[alignmentName]Oo.\"" ""
     ""savePNG=True ""
     ""TkVersion=\""phase0\"" ""
     ""colPal=2 ""
     ""defRanges=\""""range_str""\"" ""
     ""outDir=.oO[datadir]Oo./.oO[name]Oo..Comparison_common""name""_Images/TkAlMapPlots\n"")
     #""outDir=.oO[name]Oo..""name""_TkMapPlots ""
     #""useDefaultRanges=.oO[useDefaultRange]Oo. ""range_str""\n"")
# Copy root file for check
repMap[""runComparisonScripts""] = \
    (""cp .oO[name]Oo..Comparison_common""name"".root ""
     "".oO[datadir]Oo./.oO[name]Oo..Comparison_common""name""_Images/TkAlMapPlots/GCP.root\n"")
#repMap[""runComparisonScripts""] = \
#    (""cp .oO[alignmentName]Oo.ROOTGeometry.root ""
#     "".oO[datadir]Oo./.oO[name]Oo..Comparison_common""name""_Images/TkAlMapPlots/comparedGeometry.root\n"")
"
-------------------------------------------------------------------------
"import TkAlMap, copy, time, sys, Alignment, OfflineValidation

# TkAlMap script configuration
inFile = ""tree.root""
compAl = ""UL2018""
refAl = ""StartGeom""
savePNG = True
TkVersion = ""phase1""
outDir = ""./test_plots/tanh""
colPal = 2
range_str = ''

plottedDifferences = [""dx"", ""dy"", ""dz"", ""dr"", ""rdphi"", ""dalpha"", ""dbeta"", ""dgamma""]
for diff in plottedDifferences:
    range_str = diff + '_range=[' + str(repMap[diff + '_min']) + ',' + str(repMap[diff + '_max']) + '];'

repMap[""runComparisonScripts""] = \
    (""mkdir -p .oO[datadir]Oo./.oO[name]Oo.""
     "".Comparison_common"" + name + ""_Images/TkAlMapPlots\n"")

repMap[""runComparisonScripts""] = \
    (""python "" + Alignment.OfflineValidation + ""/python/runGCPTkAlMap.py -b "" 
     ""inFile="" + outDir + ""/Comparison_common"" + name + "".root ""
     ""refAl=\"""" + refAl + ""\"" "" 
     ""compAl=\"""" + compAl + ""\"" ""
     ""savePNG=True ""
     ""TkVersion=\""phase0\"" ""
     ""colPal=2 ""
     ""defRanges=\"""" + range_str + ""\"" ""
     ""outDir=.oO[datadir]Oo./.oO[name]Oo..Comparison_common"" + name + ""_Images/TkAlMapPlots\n"")

repMap[""runComparisonScripts""] = \
    (""cp .oO[name]Oo..Comparison_common"" + name + "".root ""
     "".oO[datadir]Oo./.oO[name]Oo..Comparison_common"" + name + ""_Images/TkAlMapPlots/GCP.root\n"")"
-------------------------------------------------------------------------
"# TkAlMap inFile=tree.root compAl=UL2018 refAl=StartGeom savePNG=True TkVersion=phase1 outDir=./test_plots/tanh colPal=2
range_str = ''
plottedDifferences = [""dx"",""dy"",""dz"",""dr"",""rdphi"",""dalpha"",""dbeta"",""dgamma""]
for diff in plottedDifferences:
    range_str = diff'_range=['str(repMap[diff'_min'])','str(repMap[diff'_max'])'];'
repMap[""runComparisonScripts""] = \
    (""rfmkdir -p .oO[datadir]Oo./.oO[name]Oo.""
     "".Comparison_common""name""_Images/TkAlMapPlots\n"")
repMap[""runComparisonScripts""] = \
    (""python .oO[Alignment/OfflineValidation]Oo./python/runGCPTkAlMap.py -b "" 
     ""inFile=.oO[name]Oo..Comparison_common""name"".root ""
     ""refAl=\"".oO[reference]Oo.\"" "" 
     ""compAl=\"".oO[alignmentName]Oo.\"" ""
     ""savePNG=True ""
     ""TkVersion=\""phase0\"" ""
     ""colPal=2 ""
     ""defRanges=\""""range_str""\"" ""
     ""outDir=.oO[datadir]Oo./.oO[name]Oo..Comparison_common""name""_Images/TkAlMapPlots\n"")
     #""outDir=.oO[name]Oo..""name""_TkMapPlots ""
     #""useDefaultRanges=.oO[useDefaultRange]Oo. ""range_str""\n"")
# Copy root file for check
repMap[""runComparisonScripts""] = \
    (""rfcp .oO[name]Oo..Comparison_common""name"".root ""
     "".oO[datadir]Oo./.oO[name]Oo..Comparison_common""name""_Images/TkAlMapPlots/GCP.root\n"")
#repMap[""runComparisonScripts""] = \
#    (""cp .oO[alignmentName]Oo.ROOTGeometry.root ""
#     "".oO[datadir]Oo./.oO[name]Oo..Comparison_common""name""_Images/TkAlMapPlots/comparedGeometry.root\n"")
"
-------------------------------------------------------------------------
"Recom
PRs: 31376, 31284"
-------------------------------------------------------------------------
=========================================================================
"import os
import ROOT
import copy
import math
import time
import ctypes
from array import array
import FWCore.ParameterSet.Config as cms
from Alignment.OfflineValidation.DivergingColor import DivergingColor
'''
Class for the TkAlMap plots
to produce the plots use Alignment/OfflineValidation/python/runGCPTkAlMap.py 
'''
#TEST_COLOR_IDX = 2000
#TEST_COLOR = ROOT.TColor(TEST_COLOR_IDX, (0.)/255., (0.)/255., (2550.)/255.)
KNOWN_VARIABLES = {
    'dr': {
        'name' : '#Deltar',
        'units': '#mum',
        'scale': 10000.,
        'range': [-200., 200.],
        },
    'dx': {
        'name' : '#Deltax',
        'units': '#mum',
        'scale': 10000.,
        'range': [-200., 200.],
        },
    'dy': {
        'name' : '#Deltay',
        'units': '#mum',
        'scale': 10000.,
        'range': [-200., 200.],
        },
    'dz': {
        'name' : '#Deltaz',
        'units': '#mum',
        'scale': 10000.,
        'range': [-200., 200.],
        },
    'rdphi': {
        'name' : 'r #Delta#phi',
        'units': '#mum rad',
        'scale': 10000.,
        'range': [-200., 200.],
        },
    'dphi': {
        'name' : '#Delta#phi',
        'units': 'mrad',
        'scale': 1000.,
        'range': [-100., 100.],
        },
    'dalpha': {
        'name' : '#Delta#alpha',
        'units': 'mrad',
        'scale': 1000.,
        'range': [-100., 100.],
        },
    'dbeta': {
        'name' : '#Delta#beta',
        'units': 'mrad',
        'scale': 1000.,
        'range': [-100., 100.],
        },
    'dgamma': {
        'name' : '#Delta#gamma',
        'units': 'mrad',
        'scale': 1000.,
        'range': [-100., 100.],
        },
    'du': {
        'name' : '#Deltau',
        'units': '#mum',
        'scale': 10000.,
        'range': [-200., 200.],
        },
    'dv': {
        'name' : '#Deltav',
        'units': '#mum',
        'scale': 10000.,
        'range': [-200., 200.],
        },
    'dw': {
        'name' : '#Deltaw',
        'units': '#mum',
        'scale': 10000.,
        'range': [-200., 200.],
        },
    'da': {
        'name' : '#Deltaa',
        'units': 'mrad',
        'scale': 1000.,
        'range': [-100., 100.],
        },
    'db': {
        'name' : '#Deltab',
        'units': 'mrad',
        'scale': 1000.,
        'range': [-100., 100.],
        },
    'dg': {
        'name' : '#Deltag',
        'units': 'mrad',
        'scale': 1000.,
        'range': [-100., 100.],
        },  
}
#ROOT.gStyle.SetLineScalePS(1)
def mean(data_list):
    return sum(data_list)/(len(data_list)0.)
	
def StdDev(data_list):
    s2 = 0.
    m = mean(data_list)
    for point in data_list:
    	s2 = (point-m)**2
    return math.sqrt(s2/(len(data_list)0.))
def read_TPLfile(file_name):
    o_file = open(file_name, 'r')
    lines = o_file.readlines()
    o_file.close()
    TPL_dict = {}
    for line in lines:
        if '#' in line: continue
        splt_line = line.replace('\n', '').split(' ')
        det_id = int(splt_line[0])
        x = []
        y = []
        for idx,coo in enumerate(splt_line[1:]):
            #print(coo)
            try:
                val = float(coo)
                if (idx%2) == 0: 
                    y.append(val)
                else: 
                    x.append(val)
            except ValueError:
                continue
        TPL_dict[det_id] = {}
        TPL_dict[det_id]['x'] = x
        TPL_dict[det_id]['y'] = y
    return TPL_dict
class TkAlMap:
    #def __init__(self, variable, title, root_file, two_sigma_cap=False, width=1500, height=800, GEO_file='TkMap_design_cfg.py', tracker='full'):
    def __init__(self, variable, title, root_file, use_default_range=False, two_sigma_cap=False, height=1400, GEO_file='TkAlMapDesign_phase1_cfg.py', tracker='full', palette=2, do_tanh=False, check_tracker=True):
        ROOT.gStyle.SetLineScalePS(1)
        # Configuration parameters
        self.GEO_file      = GEO_file
        self.tracker       = tracker
        self.width         = height 
        self.height        = height
        self.title         = title
        self.default_range = use_default_range
        self.two_sigma_cap = two_sigma_cap
        self.root_file     = root_file
        self.do_tanh       = do_tanh
        # Value Initialization
        self.max_val           = None
        self.min_val           = None
        self.color_bar_colors  = {}
        self.tree              = None
        self.is_cleaned        = False
        # Internal parameters    
        #self.data_path = 'Alignment-OfflineValidation/TkAlMap/'
        self.data_path = 'Alignment/OfflineValidation/data/TkAlMap/'
        self.cfg_path = 'Alignment/OfflineValidation/python/TkAlMap_cfg/'
        # Colorbar stuff
        self.start_color_idx   = 1200
        self.n_color_color_bar = 1000
 
        # Initialization functions
        self.set_palette(palette)
        self.set_var(variable)
        self.load_tree()
        if check_tracker: self.detect_tracker_version()
        self.load_geometry()
        self.set_colorbar_colors()
    def set_var(self, var, var_range=[None, None]):
        print('TkAlMap: setting variable to 'var)
        self.var = var
        self.var_name = var
        self.var_units = 'cm'
        self.var_scale = 1.
        self.var_min = var_range[0]
        self.var_max = var_range[1]
        if var in KNOWN_VARIABLES:
            self.var_name  = KNOWN_VARIABLES[var]['name']
            self.var_units = KNOWN_VARIABLES[var]['units']
            self.var_scale = KNOWN_VARIABLES[var]['scale']
            if self.var_min is None: self.var_min = KNOWN_VARIABLES[var]['range'][0]
            if self.var_max is None: self.var_max = KNOWN_VARIABLES[var]['range'][1]
        self.set_canvas()
    def set_canvas(self):
        canv_name = 'canvas_'self.tracker'_'self.var
        if self.two_sigma_cap: canv_name = '_cap'
        self.canvas = ROOT.TCanvas(canv_name, 'TkAlMap 'self.var' canvas', self.width, self.height)
        print('Actual w: 'str(self.canvas.GetWw())', Actual h: 'str(self.canvas.GetWh()))
#### Color setup
    def setup_colors(self):
        self.load_var()
        self.prepare_map_colors()
        self.fill_colors()
    def prepare_map_colors(self):
        print('TkAlMap: preparing map colors')
        
        self.colors = []
        #self.palette = array('i', [])
        col_idx = self.start_color_idx  self.n_color_color_bar  10
        self.col_dic = {}
        self.rgb_map = {}
        #pal_idx = 0
        #self.pal_map = {}
        for val in self.val_list:
            cap_val = val
            if cap_val > self.max_val: cap_val = self.max_val
            if cap_val < self.min_val: cap_val = self.min_val
            r, g, b = self.get_color_rgb(cap_val)
            idx = self.get_color_rgb_idx(cap_val)
            if idx in self.colors: continue
            self.colors.append(idx)
            col_idx =1
            self.rgb_map[idx] = col_idx
            #print( idx, (r0.)/255., (g0.)/255., (b0.)/255.)
            #color = ROOT.TColor(col_idx, (r0.)/255., (g0.)/255., (b0.)/255.)
            #self.col_dic[idx] = ROOT.TColor(col_idx, (r0.)/255., (g0.)/255., (b0.)/255.)
            try:
                col = ROOT.gROOT.GetColor(col_idx)
                col.SetRGB((r0.)/255., (g0.)/255., (b0.)/255.)
                self.col_dic[idx] = col
            except:
                self.col_dic[idx] = ROOT.TColor(col_idx, (r0.)/255., (g0.)/255., (b0.)/255.)
            #self.palette.append(col_idx)
        print('TkAlMap: map contains 'str(len(self.colors))' colors')
     
    def set_palette(self, palette):
        self.palette = palette
        pal_str = 'TkAlMap: setting the palette to 'str(palette)
        if palette == 1: pal_str = ' (rainbow)'
        elif palette == 2: pal_str = ' (B->R diverging)'
        else: raise ValueError('TkAlMap: unkown palette value 'str(palette)', allowed values are 1 and 2')
        print(pal_str)
        #ROOT.gstyle.SetPalette(len(self.colors), self.colors)
        #ROOT.gStyle.SetPalette(len(self.palette), self.palette)
        pass
    def get_color_rgb(self, val):
        if self.max_val is None or self.min_val is None:
            value_frac = val
        else:
            if self.do_tanh:
                val_th = math.tanh((val - self.mean_val)/(self.std_val))
                max_th = math.tanh((self.max_val - self.mean_val)/(self.std_val))
                min_th = math.tanh((self.min_val - self.mean_val)/(self.std_val))
                value_frac = (val_th - min_th  0.)/(max_th - min_th)
            else:
                value_range = self.max_val - self.min_val
                if value_range == 0.: value_frac = 0.5
                else: value_frac = (val - self.min_val  0.)/(value_range  0.)
        if self.palette == 1:
            r = 255
            g = 255
            b = 255
            if value_frac < 0.25:
                r = 0
                g = int(255.*((value_frac/0.25)))
                b = 255         
            elif value_frac < 0.5:
                r = 0
                g = 255
                b = int(255.*(1. -(value_frac - 0.25)/0.25)) 
            elif value_frac < 0.75:
                r = int(255.*((value_frac - 0.5)/0.25))
                g = 255
                b = 0 
            else:
                r = 255 
                g = int(255.*(1. -(value_frac - 0.75)/0.25)) 
                b = 0
            return r, g, b 
        elif self.palette == 2:
            red   = [59,   76, 192]
            blue  = [180,   4,  38]
            white = [255, 255, 255] 
            r, g, b = DivergingColor(red, blue, white, value_frac) 
            return r, g, b
        else: raise ValueError('TkAlMap: unkown palette value 'str(palette)', allowed values are 1 and 2')
    def get_color_rgb_idx(self, val):
        r, g, b = self.get_color_rgb(val)
        #return r*1000000g*1000b1000000000
        offset = 100
        return int(r*255*255  g*255  r  g  b  offset)
    def fill_colors(self):
        print('TkAlMap: filling the colors')
        #self.set_palette()
        for module in self.mod_val_dict:
            if module in self.TkAlMap_TPL_dict:
                val = self.mod_val_dict[module]
                cap_val = val
                if cap_val > self.max_val: cap_val = self.max_val
                if cap_val < self.min_val: cap_val = self.min_val
                rgb = self.get_color_rgb_idx(cap_val)
                col = self.rgb_map[rgb]
                #col = self.pal_map[rgb]
                #col = self.col_dic[rgb]
                #print(val, rgb, col)
                self.TkAlMap_TPL_dict[module].SetFillColor(col)
                #self.TkAlMap_TPL_dict[module].SetFillColor(TEST_COLOR_IDX)
            ####else: print('Warning: Unknown module 'str(module))
    def set_colorbar_axis(self):
        print('TkAlMap: setting color bar axis')
        b_x1 = self.image_x1
        b_x2 = self.image_x2
        b_y1 = 0.06
        b_y2 = 0.06
        b_width = 0.01
        self.color_bar_axis = ROOT.TGaxis(b_x1, b_y1, b_x2, b_y2, self.min_val, self.max_val, 50510, 'S')
        self.color_bar_axis.SetName('color_bar_axis')
        self.color_bar_axis.SetLabelSize(0.02)
        self.color_bar_axis.SetTickSize(0.01)
        if self.two_sigma_cap and not self.default_range: self.color_bar_axis.SetTitle('{#mu - 2#sigma #leq 'self.var_name' #leq #mu  2#sigma} ['self.var_units']')
        elif self.default_range: self.color_bar_axis.SetTitle('{'str(self.min_val)' #leq 'self.var_name' #leq 'str(self.max_val)'} ['self.var_units']')
        else: self.color_bar_axis.SetTitle(self.var_name' ['self.var_units']')
        self.color_bar_axis.SetTitleSize(0.025)
    def set_colorbar_colors(self):
        print('TkAlMap: initialize color bar colors')
        if self.max_val is None or self.min_val is None:
            col_step = 1./(self.n_color_color_bar  0.)
            val = col_step/2.
        else:
            b_range = self.max_val - self.min_val
            col_step = (b_range  0.)/(self.n_color_color_bar  0.)
            val = self.min_val  col_step/2.
        b_x1 = self.image_x1
        b_x2 = self.image_x2
        b_y1 = 0.06
        b_y2 = 0.06
        b_width = 0.01
        b_xrange = b_x2 - b_x1
        b_yrange = b_y2 - b_y1
        b_dx = (b_xrange  0.)/(self.n_color_color_bar  0.)
        b_dy = (b_yrange  0.)/(self.n_color_color_bar  0.)
        self.color_bar = {}
        x1 = b_x1
        y1 = b_y1
            
        col_idx = self.start_color_idx
        for i_c in range(self.n_color_color_bar):
            col_idx = 1
            r, g, b = self.get_color_rgb(val)
            try:
                col = ROOT.gROOT.GetColor(col_idx)
                col.SetRGB((r0.)/255., (g0.)/255., (b0.)/255.)
                self.color_bar_colors[col_idx] = col
            except:
                self.color_bar_colors[col_idx] = ROOT.TColor(col_idx, (r0.)/255., (g0.)/255., (b0.)/255.)
            x2 = x1  b_dx 
            y2 = y1  b_dy  b_width 
            x = array('d', [x1, x1, x2, x2])
            y = array('d', [y1, y2, y2, y1])
            self.color_bar[col_idx] = ROOT.TPolyLine(len(x), x, y)
            self.color_bar[col_idx].SetFillColor(col_idx)
            self.color_bar[col_idx].SetLineColor(col_idx)
 
            x1 = b_dx
            y1 = b_dy
            val = col_step
#### Load functions
    def load_tree(self):
        print('TkAlMap: loading tree ')
        tree_name = 'alignTree'
        r_file = ROOT.TFile(self.root_file)
        if r_file is None: raise ValueError('The file ""'self.root_file'"" could not be opened')
        tree_tmp = r_file.Get(tree_name)
        #self.tree = copy.deepcopy(tree_tmp)
        self.tmp_file_name = str(time.time()).replace('.', '_')'_TkAlMapTempFile.root'
        self.tmp_file = ROOT.TFile(self.tmp_file_name, 'recreate')
        self.tree = tree_tmp.CloneTree()
        r_file.Close()
        self.is_cleaned = False
        if self.tree is None: raise ValueError('The tree ""'tree_name'"" was not found in file ""'self.root_file'""')
        
    def load_var(self):
        print('TkAlMap: loading variable values ')
        #tree_name = 'alignTree'
        #r_file = ROOT.TFile(self.root_file)
        #if r_file is None: raise ValueError('The file ""'self.root_file'"" could not be opened')
        #tree_tmp = r_file.Get(tree_name)
        #tree = copy.deepcopy(tree_tmp)
        #r_file.Close()
        #if tree is None: raise ValueError('The tree ""'tree_name'"" was not found in file ""'self.root_file'""')
        self.mod_val_dict = {}
        self.val_list = []
        for event in self.tree:
            module = event.id
            var = self.var
            if var == 'rdphi':
                val = getattr(event, 'r')*getattr(event, 'dphi')
            else: 
                val = getattr(event, var)
            val *= self.var_scale
            self.mod_val_dict[module] = val
            #if val not in self.val_list: self.val_list.append(val)
            if module in self.TkAlMap_TPL_dict: self.val_list.append(val)
            ####else:
            ####    if 'full' in self.tracker:
            ####        print('Warning: Unknown module 'str(module))
        #r_file.Close()
        if len(self.val_list) == 0:
            print('Warning: no values filled, 0 moduleId\'s matched')
            self.val_list = [-10idx*0.5 for idx in range(41)]
        self.val_list.sort()
        self.mean_val = mean(self.val_list)
        self.std_val = StdDev(self.val_list)
        self.min_val = min(self.val_list) 
        self.max_val = max(self.val_list)
        
        if self.two_sigma_cap and not self.default_range:
           print('-- Capping max and min: ')
           print('---- True values   : 'str(self.max_val)', 'str(self.min_val))
           self.min_val = max(min(self.val_list), self.mean_val - 2*self.std_val)
           self.max_val = min(max(self.val_list), self.mean_val  2*self.std_val)
           print('---- Capped values : 'str(self.max_val)', 'str(self.min_val))
        if self.default_range:
           #if not self.var in KNOWN_VARIABLES: print('Warning: capping to default range not possible for unknown variable ""'self.var'""')
           if self.var_min is None or self.var_max is None: print('Warning: capping to default range for unknown variable ""'self.var'"" while range was not set is not possible')
           else:
               print('-- Capping max and min to default ranges: ')
               print('---- True values   : 'str(self.max_val)', 'str(self.min_val))
               self.min_val = self.var_min
               self.max_val = self.var_max
               print('---- Capped values : 'str(self.max_val)', 'str(self.min_val))
        if self.min_val == self.max_val:
            print('Warning: minimum value was equal to maximum value, 'str(self.max_val))
            self.min_val = self.mean_val - 1.
            self.max_val = self.mean_val  1.
        #print(self.val_list)
    def detect_tracker_version(self):
        print('TkAlMap: detecting Tk version')
        #tree_name = 'alignTree'
        #r_file = ROOT.TFile(self.root_file)
        #if r_file is None: raise ValueError('The file ""'self.root_file'"" could not be opened')
        ##tree = r_file.Get(tree_name)
        #tree_tmp = r_file.Get(tree_name)
        #tree = copy.deepcopy(tree_tmp)
        #r_file.Close()
        #if tree is None: raise ValueError('The tree ""'tree_name'"" was not found in file ""'self.root_file'""')
        phase = None
        for event in self.tree:
            module = event.id
            if module > 303040000 and module < 306450000:
                phase = 1
                break
            elif module > 302055000 and module < 302198000:
                phase = 0 
                break
        #r_file.Close()
        if phase is None: raise ValueError('TkAlMap: unknown tracker detected, is this phase2?')
        
        pahse_str = 'phase'str(phase)
        print('TkAlMap: 'pahse_str' tracker detected')
        if not pahse_str in self.GEO_file:
            print('TkAlMap: changing tracker to 'pahse_str ', if this is unwanted set ""check_tracker"" to False')
            self.GEO_file = 'TkAlMapDesign_'pahse_str'_cfg.py'
            #self.load_geometry()
    def load_geometry(self):
        source_path = os.getenv('CMSSW_BASE')  '/src/' 
        var = {}
        execfile(source_path  self.cfg_path  self.GEO_file, var)
        MapStructure = var['TkMap_GEO']
        
        all_modules = {}
        all_text = {}
        x_max = -9999.
        y_max = -9999.
        x_min = 9999.
        y_min = 9999.
        for det in MapStructure:
            if 'pixel' in self.tracker:
                if not 'pixel' in det: continue 
            elif 'strips' in self.tracker:
                if not 'strips' in det: continue 
            for sub in MapStructure[det]:
                for part in MapStructure[det][sub]:
                    if part == 'latex':
                        all_text[det'_'sub] = MapStructure[det][sub][part]
                        continue
                    if 'latex' in MapStructure[det][sub][part]:
                        all_text[det'_'sub'_'part] = MapStructure[det][sub][part]['latex']
                    #TPL_file = source_path  self.data_path MapStructure[det][sub][part]['file']
                    TPL_file = cms.FileInPath(self.data_path MapStructure[det][sub][part]['file'])
                    TPL_dict = read_TPLfile(TPL_file)
                    for module in TPL_dict:
                        x_canv = []
                        y_canv = []
                        for idx in range(len(TPL_dict[module]['x'])):
                            x_canv.append(TPL_dict[module]['x'][idx]*MapStructure[det][sub][part]['x_scale']  MapStructure[det][sub][part]['x_off'])
                            y_canv.append(TPL_dict[module]['y'][idx]*MapStructure[det][sub][part]['y_scale']  MapStructure[det][sub][part]['y_off'])
                        if max(x_canv) > x_max: x_max = max(x_canv)
                        if max(y_canv) > y_max: y_max = max(y_canv)
                        if min(x_canv) < x_min: x_min = min(x_canv)
                        if min(y_canv) < y_min: y_min = min(y_canv)
                        TPL_dict[module]['x'] = x_canv
                        TPL_dict[module]['y'] = y_canv
                    all_modules.update(TPL_dict)
        r_margin = 3
        l_margin = 3
        #t_margin = 15
        t_margin = 11
        b_margin = 8
        x_max = r_margin
        x_min -= l_margin
        y_max = t_margin
        y_min -= b_margin
        x_range = x_max - x_min
        y_range = y_max - y_min
        self.width = int(self.height*(x_range  0.)/(y_range  0.))
        self.canvas.SetWindowSize(self.width, self.height)
        if (x_range  0.)/(self.width  0.) > (y_range  0.)/(self.height  0.):
            x_scale = x_range
            y_scale = (self.height  0.)/(self.width  0.)*x_range
        else:
            y_scale = y_range
            x_scale = (self.width  0.)/(self.height  0.)*y_range
        self.TkAlMap_TPL_dict = {} 
        for module in all_modules:
            x = array('d', [])
            y = array('d', [])
            for idx in range(len(all_modules[module]['x'])):
                x.append((all_modules[module]['x'][idx] - x_min  0.)/(x_scale  0.))
                y.append((all_modules[module]['y'][idx] - y_min  0.)/(y_scale  0.))
            # Begin point is end point
            x.append((all_modules[module]['x'][0] - x_min  0.)/(x_scale  0.))
            y.append((all_modules[module]['y'][0] - y_min  0.)/(y_scale  0.))
            #print(x, y)
            self.TkAlMap_TPL_dict[module] = ROOT.TPolyLine(len(x), x, y) 
            #self.TkAlMap_TPL_dict[module].SetFillColor(1)
            self.TkAlMap_TPL_dict[module].SetLineColor(1)
            #print('lineW', self.TkAlMap_TPL_dict[module].GetLineWidth())
            #self.TkAlMap_TPL_dict[module].Draw('f')
            #self.TkAlMap_TPL_dict[module].Draw()
        self.image_x1 = (l_margin  0.)/(x_scale  0.) 
        self.image_x2 = (x_max - r_margin - x_min  0.)/(x_scale  0.) 
        self.image_y1 = (b_margin  0.)/(y_scale  0.) 
        self.image_y2 = (y_max - t_margin - y_min  0.)/(y_scale  0.) 
        self.x_scale = x_scale
        self.y_scale = y_scale
        #TL = ROOT.TLatex()
        #TL.SetTextSize(0.025)
        self.TkAlMap_text_dict = {}
        for key in all_text:
            x = (all_text[key]['x'] - x_min  0.)/(x_scale  0.)
            y = (all_text[key]['y'] - y_min  0.)/(y_scale  0.)
            self.TkAlMap_text_dict[key] = {}
            self.TkAlMap_text_dict[key]['x'] = x
            self.TkAlMap_text_dict[key]['y'] = y
            self.TkAlMap_text_dict[key]['alignment'] = all_text[key]['alignment']
            self.TkAlMap_text_dict[key]['text'] = all_text[key]['text']
            #TL.SetTextAlign(all_text[key]['alignment'])
            #TL.DrawLatex(x, y, all_text[key]['text'])
#### Titles and info
    def draw_title(self):
        TL = ROOT.TLatex()
        TL.SetTextSize(0.035)
        TL.SetTextFont(42)
        TL.SetTextAlign(13)
        x1 = self.image_x1
        y1 = 1-(5./(self.y_scale0.))
        self.canvas.cd()
        TL.DrawLatex(x1, y1, self.title)
         
    def draw_cms_prelim(self):
        TL = ROOT.TLatex()
        factor = 1. / 0.82
        TL.SetTextSize(0.035*factor)
        TL.SetTextAlign(11)
        TL.SetTextFont(61)
        w_cms = ctypes.c_uint(0)
        h_cms = ctypes.c_uint(0)
        TL.GetTextExtent(w_cms, h_cms, 'CMS')
        x1 = self.image_x1
        y1 = 1. - (h_cms.value0.)/(self.height0.) - (1./(self.y_scale0.))
        self.canvas.cd()
        TL.DrawLatex(x1, y1, 'CMS')
  
        TL.SetTextSize(0.035)
        TL.SetTextFont(42)
        x1_prel = x1  1.1*(w_cms.value0.)/(self.width0.)
        TL.DrawLatex(x1_prel, y1, '#it{Preliminary}')
        
        self.draw_event_info(y1)
    def draw_event_info(self, y):
        TL = ROOT.TLatex()
        TL.SetTextSize(0.035)
        TL.SetTextFont(42)
        TL.SetTextAlign(31)
        x1 = self.image_x2
        y1 = y
        self.canvas.cd()
        TL.DrawLatex(x1, y1, 'pp collisions 13TeV')
        
#### Draw functions
    def draw_text(self):
        print('TkAlMap: drawing text')
        self.canvas.cd()
        TL = ROOT.TLatex()
        TL.SetTextSize(0.025)
        for key in self.TkAlMap_text_dict:
            TL.SetTextAlign(self.TkAlMap_text_dict[key]['alignment'])
            TL.DrawLatex(self.TkAlMap_text_dict[key]['x'], self.TkAlMap_text_dict[key]['y'], self.TkAlMap_text_dict[key]['text'])
        self.draw_cms_prelim()
        self.draw_title()
        self.canvas.Update()
    def draw_TPL(self):
        print('TkAlMap: drawing PolyLines')
        self.canvas.cd()
        for module in self.TkAlMap_TPL_dict:
            self.TkAlMap_TPL_dict[module].Draw('f')
            self.TkAlMap_TPL_dict[module].Draw()
        self.canvas.Update()
    def draw_color_bar(self):
        print('TkAlMap: drawing color bar')
        self.canvas.cd()
        for box in self.color_bar:
            self.color_bar[box].Draw('f')
            #self.color_bar[box].Draw()
        self.color_bar_axis.Draw()
        self.canvas.Update()
    def save(self, out_dir='.', extension='pdf'):
        name = '_'.join(['TkAlMap', self.tracker, self.var])
        if self.two_sigma_cap and not self.default_range:
            name = '_4sig'
        elif self.default_range:
            name = '_drange'
        path = out_dir  '/'  name  '.'  extension
        print('TkAlMap: saving canvas in ""'path'""')
        self.canvas.SaveAs(path)
#### Do all
    def analyse(self):
        self.setup_colors()
        self.set_colorbar_axis()
        if self.do_tanh: self.set_colorbar_colors()
        self.draw_TPL()
        self.draw_text()
        self.draw_color_bar()
### Test functions
    def plot_variable_distribution(self, nbins=200, out_dir='.'):
        print('TkAlMap: drawing variable distribution')
        canv_name = 'histogram_canvas_'self.tracker'_'self.var
        if self.two_sigma_cap: canv_name = '_cap'
        canvas = ROOT.TCanvas(canv_name, 'TkAlMap 'self.var' histogram canvas', 800, 800)
 
        h_min = min(min(self.val_list), self.mean_val - 2*self.std_val) - self.std_val
        h_max = max(max(self.val_list), self.mean_val  2*self.std_val)  self.std_val
        hist = ROOT.TH1F(self.var'_hist', 'Variable distribution', nbins, h_min, h_max)
        for val in self.val_list:
            hist.Fill(val)
        hist.GetXaxis().SetTitle(self.var_name' ['self.var_units']')
        hist.GetYaxis().SetTitle('modules')
        ROOT.gStyle.SetOptStat(0)
        hist.Draw('e1')
        canvas.Update()
        left = ROOT.TLine(self.mean_val - 2*self.std_val, canvas.GetUymin(), self.mean_val - 2*self.std_val, canvas.GetUymax())
        left.SetLineColor(2) 
        left.SetLineStyle(9) 
        left.Draw() 
        right = ROOT.TLine(self.mean_val  2*self.std_val, canvas.GetUymin(), self.mean_val  2*self.std_val, canvas.GetUymax())
        right.SetLineColor(2) 
        right.SetLineStyle(9) 
        right.Draw() 
        mid = ROOT.TLine(self.mean_val, canvas.GetUymin(), self.mean_val, canvas.GetUymax())
        mid.SetLineColor(1)
        mid.SetLineStyle(9) 
        mid.Draw()
        canvas.Update()
        name = '_'.join(['VariableDistribution', self.var, self.tracker])
        path = out_dir  '/'  name  '.png' 
        canvas.SaveAs(path)
### Clean up
    def clean_up(self):
        if not self.is_cleaned:
            print('TkAlMap: deleting temporary file ""'self.tmp_file_name'""')
            self.tmp_file.Delete()
            os.remove(self.tmp_file_name)
            self.is_cleaned = True
    def __del__(self):
        self.clean_up()
if __name__ == '__main__':
    #TkMap = TkAlMap('test', 'Here goes the title', 'run/tree.root', True, height=780, tracker='strips')
    #TkMap = TkAlMap('test', 'Here goes the title', 'run/tree.root', True, height=780)
    TkMap = TkAlMap('test', 'Here goes the title', 'run/tree.root', True, height=1400, GEO_file='TkAlMapDesign_phase0_cfg.py')
    #TkMap = TkAlMap('test', 'Here goes the title', 'run/tree.root', True, height=780, GEO_file='TkAlMapDesign_phase0_cfg.py')
    #TkMap = TkAlMap('test', 'Here goes the title', 'run/tree.root', True, height=780, GEO_file='TkAlMapDesign_phase0_cfg.py', tracker='pixel')
    #TkMap = TkAlMap('test', 'Here goes the title', 'run/tree.root', True, height=780, GEO_file='TkAlMapDesign_phase1_cfg.py', tracker='pixel')
    #TkMap = TkAlMap('test', 'Here goes the title', 'run/tree.root', True, height=780, GEO_file='TkAlMapDesign_phase0_cfg.py', tracker='strips')
    #TkMap = TkAlMap('test', 'Here goes the title', 'run/tree.root', True, tracker='pixel')
    #TkMap = TkAlMap('test', 'Here goes the title', 'run/tree.root', True)
    var_list = ['dx', 'dy']
    #var_list = ['dx']
    for var in var_list:
        TkMap_temp = copy.deepcopy(TkMap)
        TkMap_temp.set_var(var)
        #TkMap.load_var()
        #TkMap.draw_text()
        #TkMap.draw_TPL()
        TkMap_temp.analyse()
        TkMap_temp.save(extension='png')
        TkMap_temp.save()
    raw_input('exit')
"
-------------------------------------------------------------------------
"import os
import ROOT
import copy
import math
import time
from array import array
import ctypes
import FWCore.ParameterSet.Config as cms
# Additional Required Import
from Alignment.OfflineValidation.TkAlMap import DivergingColor

# Remaining original code as is
''' 
Class for the TkAlMap plots 
to produce the plots use Alignment/OfflineValidation/python/runGCPTkAlMap.py 
'''
# Remaining original code as is 
# Function set for the hunk:
# (restructured a part of the file for clarity and adjusted import part)"
-------------------------------------------------------------------------
"import os
import ROOT
import copy
import math
import time
import ctypes
from array import array
import FWCore.ParameterSet.Config as cms
from Alignment.OfflineValidation.DivergingColor import DivergingColor
'''
Class for the TkAlMap plots
to produce the plots use Alignment/OfflineValidation/python/runGCPTkAlMap.py 
'''
#TEST_COLOR_IDX = 2000
#TEST_COLOR = ROOT.TColor(TEST_COLOR_IDX, (0.)/255., (0.)/255., (2550.)/255.)
KNOWN_VARIABLES = {
    'dr': {
        'name' : '#Deltar',
        'units': '#mum',
        'scale': 10000.,
        'range': [-200., 200.],
        },
    'dx': {
        'name' : '#Deltax',
        'units': '#mum',
        'scale': 10000.,
        'range': [-200., 200.],
        },
    'dy': {
        'name' : '#Deltay',
        'units': '#mum',
        'scale': 10000.,
        'range': [-200., 200.],
        },
    'dz': {
        'name' : '#Deltaz',
        'units': '#mum',
        'scale': 10000.,
        'range': [-200., 200.],
        },
    'rdphi': {
        'name' : 'r #Delta#phi',
        'units': '#mum rad',
        'scale': 10000.,
        'range': [-200., 200.],
        },
    'dphi': {
        'name' : '#Delta#phi',
        'units': 'mrad',
        'scale': 1000.,
        'range': [-100., 100.],
        },
    'dalpha': {
        'name' : '#Delta#alpha',
        'units': 'mrad',
        'scale': 1000.,
        'range': [-100., 100.],
        },
    'dbeta': {
        'name' : '#Delta#beta',
        'units': 'mrad',
        'scale': 1000.,
        'range': [-100., 100.],
        },
    'dgamma': {
        'name' : '#Delta#gamma',
        'units': 'mrad',
        'scale': 1000.,
        'range': [-100., 100.],
        },
    'du': {
        'name' : '#Deltau',
        'units': '#mum',
        'scale': 10000.,
        'range': [-200., 200.],
        },
    'dv': {
        'name' : '#Deltav',
        'units': '#mum',
        'scale': 10000.,
        'range': [-200., 200.],
        },
    'dw': {
        'name' : '#Deltaw',
        'units': '#mum',
        'scale': 10000.,
        'range': [-200., 200.],
        },
    'da': {
        'name' : '#Deltaa',
        'units': 'mrad',
        'scale': 1000.,
        'range': [-100., 100.],
        },
    'db': {
        'name' : '#Deltab',
        'units': 'mrad',
        'scale': 1000.,
        'range': [-100., 100.],
        },
    'dg': {
        'name' : '#Deltag',
        'units': 'mrad',
        'scale': 1000.,
        'range': [-100., 100.],
        },  
}
#ROOT.gStyle.SetLineScalePS(1)
def mean(data_list):
    return sum(data_list)/(len(data_list)0.)
	
def StdDev(data_list):
    s2 = 0.
    m = mean(data_list)
    for point in data_list:
    	s2 = (point-m)**2
    return math.sqrt(s2/(len(data_list)0.))
def read_TPLfile(file_name):
    o_file = open(file_name, 'r')
    lines = o_file.readlines()
    o_file.close()
    TPL_dict = {}
    for line in lines:
        if '#' in line: continue
        splt_line = line.replace('\n', '').split(' ')
        det_id = int(splt_line[0])
        x = []
        y = []
        for idx,coo in enumerate(splt_line[1:]):
            #print(coo)
            try:
                val = float(coo)
                if (idx%2) == 0: 
                    y.append(val)
                else: 
                    x.append(val)
            except ValueError:
                continue
        TPL_dict[det_id] = {}
        TPL_dict[det_id]['x'] = x
        TPL_dict[det_id]['y'] = y
    return TPL_dict
class TkAlMap:
    #def __init__(self, variable, title, root_file, two_sigma_cap=False, width=1500, height=800, GEO_file='TkMap_design_cfg.py', tracker='full'):
    def __init__(self, variable, title, root_file, use_default_range=False, two_sigma_cap=False, height=1400, GEO_file='TkAlMapDesign_phase1_cfg.py', tracker='full', palette=2, do_tanh=False, check_tracker=True):
        ROOT.gStyle.SetLineScalePS(1)
        # Configuration parameters
        self.GEO_file      = GEO_file
        self.tracker       = tracker
        self.width         = height 
        self.height        = height
        self.title         = title
        self.default_range = use_default_range
        self.two_sigma_cap = two_sigma_cap
        self.root_file     = root_file
        self.do_tanh       = do_tanh
        # Value Initialization
        self.max_val           = None
        self.min_val           = None
        self.color_bar_colors  = {}
        self.tree              = None
        self.is_cleaned        = False
        # Internal parameters    
        #self.data_path = 'Alignment-OfflineValidation/TkAlMap/'
        self.data_path = 'Alignment/OfflineValidation/data/TkAlMap/'
        self.cfg_path = 'Alignment/OfflineValidation/python/TkAlMap_cfg/'
        # Colorbar stuff
        self.start_color_idx   = 1200
        self.n_color_color_bar = 1000
 
        # Initialization functions
        self.set_palette(palette)
        self.set_var(variable)
        self.load_tree()
        if check_tracker: self.detect_tracker_version()
        self.load_geometry()
        self.set_colorbar_colors()
    def set_var(self, var, var_range=[None, None]):
        print('TkAlMap: setting variable to 'var)
        self.var = var
        self.var_name = var
        self.var_units = 'cm'
        self.var_scale = 1.
        self.var_min = var_range[0]
        self.var_max = var_range[1]
        if var in KNOWN_VARIABLES:
            self.var_name  = KNOWN_VARIABLES[var]['name']
            self.var_units = KNOWN_VARIABLES[var]['units']
            self.var_scale = KNOWN_VARIABLES[var]['scale']
            if self.var_min is None: self.var_min = KNOWN_VARIABLES[var]['range'][0]
            if self.var_max is None: self.var_max = KNOWN_VARIABLES[var]['range'][1]
        self.set_canvas()
    def set_canvas(self):
        canv_name = 'canvas_'self.tracker'_'self.var
        if self.two_sigma_cap: canv_name = '_cap'
        self.canvas = ROOT.TCanvas(canv_name, 'TkAlMap 'self.var' canvas', self.width, self.height)
        print('Actual w: 'str(self.canvas.GetWw())', Actual h: 'str(self.canvas.GetWh()))
#### Color setup
    def setup_colors(self):
        self.load_var()
        self.prepare_map_colors()
        self.fill_colors()
    def prepare_map_colors(self):
        print('TkAlMap: preparing map colors')
        
        self.colors = []
        #self.palette = array('i', [])
        col_idx = self.start_color_idx  self.n_color_color_bar  10
        self.col_dic = {}
        self.rgb_map = {}
        #pal_idx = 0
        #self.pal_map = {}
        for val in self.val_list:
            cap_val = val
            if cap_val > self.max_val: cap_val = self.max_val
            if cap_val < self.min_val: cap_val = self.min_val
            r, g, b = self.get_color_rgb(cap_val)
            idx = self.get_color_rgb_idx(cap_val)
            if idx in self.colors: continue
            self.colors.append(idx)
            col_idx =1
            self.rgb_map[idx] = col_idx
            #print( idx, (r0.)/255., (g0.)/255., (b0.)/255.)
            #color = ROOT.TColor(col_idx, (r0.)/255., (g0.)/255., (b0.)/255.)
            #self.col_dic[idx] = ROOT.TColor(col_idx, (r0.)/255., (g0.)/255., (b0.)/255.)
            try:
                col = ROOT.gROOT.GetColor(col_idx)
                col.SetRGB((r0.)/255., (g0.)/255., (b0.)/255.)
                self.col_dic[idx] = col
            except:
                self.col_dic[idx] = ROOT.TColor(col_idx, (r0.)/255., (g0.)/255., (b0.)/255.)
            #self.palette.append(col_idx)
        print('TkAlMap: map contains 'str(len(self.colors))' colors')
     
    def set_palette(self, palette):
        self.palette = palette
        pal_str = 'TkAlMap: setting the palette to 'str(palette)
        if palette == 1: pal_str = ' (rainbow)'
        elif palette == 2: pal_str = ' (B->R diverging)'
        else: raise ValueError('TkAlMap: unkown palette value 'str(palette)', allowed values are 1 and 2')
        print(pal_str)
        #ROOT.gstyle.SetPalette(len(self.colors), self.colors)
        #ROOT.gStyle.SetPalette(len(self.palette), self.palette)
        pass
    def get_color_rgb(self, val):
        if self.max_val is None or self.min_val is None:
            value_frac = val
        else:
            if self.do_tanh:
                val_th = math.tanh((val - self.mean_val)/(self.std_val))
                max_th = math.tanh((self.max_val - self.mean_val)/(self.std_val))
                min_th = math.tanh((self.min_val - self.mean_val)/(self.std_val))
                value_frac = (val_th - min_th  0.)/(max_th - min_th)
            else:
                value_range = self.max_val - self.min_val
                if value_range == 0.: value_frac = 0.5
                else: value_frac = (val - self.min_val  0.)/(value_range  0.)
        if self.palette == 1:
            r = 255
            g = 255
            b = 255
            if value_frac < 0.25:
                r = 0
                g = int(255.*((value_frac/0.25)))
                b = 255         
            elif value_frac < 0.5:
                r = 0
                g = 255
                b = int(255.*(1. -(value_frac - 0.25)/0.25)) 
            elif value_frac < 0.75:
                r = int(255.*((value_frac - 0.5)/0.25))
                g = 255
                b = 0 
            else:
                r = 255 
                g = int(255.*(1. -(value_frac - 0.75)/0.25)) 
                b = 0
            return r, g, b 
        elif self.palette == 2:
            red   = [59,   76, 192]
            blue  = [180,   4,  38]
            white = [255, 255, 255] 
            r, g, b = DivergingColor(red, blue, white, value_frac) 
            return r, g, b
        else: raise ValueError('TkAlMap: unkown palette value 'str(palette)', allowed values are 1 and 2')
    def get_color_rgb_idx(self, val):
        r, g, b = self.get_color_rgb(val)
        #return r*1000000g*1000b1000000000
        offset = 100
        return int(r*255*255  g*255  r  g  b  offset)
    def fill_colors(self):
        print('TkAlMap: filling the colors')
        #self.set_palette()
        for module in self.mod_val_dict:
            if module in self.TkAlMap_TPL_dict:
                val = self.mod_val_dict[module]
                cap_val = val
                if cap_val > self.max_val: cap_val = self.max_val
                if cap_val < self.min_val: cap_val = self.min_val
                rgb = self.get_color_rgb_idx(cap_val)
                col = self.rgb_map[rgb]
                #col = self.pal_map[rgb]
                #col = self.col_dic[rgb]
                #print(val, rgb, col)
                self.TkAlMap_TPL_dict[module].SetFillColor(col)
                #self.TkAlMap_TPL_dict[module].SetFillColor(TEST_COLOR_IDX)
            ####else: print('Warning: Unknown module 'str(module))
    def set_colorbar_axis(self):
        print('TkAlMap: setting color bar axis')
        b_x1 = self.image_x1
        b_x2 = self.image_x2
        b_y1 = 0.06
        b_y2 = 0.06
        b_width = 0.01
        self.color_bar_axis = ROOT.TGaxis(b_x1, b_y1, b_x2, b_y2, self.min_val, self.max_val, 50510, 'S')
        self.color_bar_axis.SetName('color_bar_axis')
        self.color_bar_axis.SetLabelSize(0.02)
        self.color_bar_axis.SetTickSize(0.01)
        if self.two_sigma_cap and not self.default_range: self.color_bar_axis.SetTitle('{#mu - 2#sigma #leq 'self.var_name' #leq #mu  2#sigma} ['self.var_units']')
        elif self.default_range: self.color_bar_axis.SetTitle('{'str(self.min_val)' #leq 'self.var_name' #leq 'str(self.max_val)'} ['self.var_units']')
        else: self.color_bar_axis.SetTitle(self.var_name' ['self.var_units']')
        self.color_bar_axis.SetTitleSize(0.025)
    def set_colorbar_colors(self):
        print('TkAlMap: initialize color bar colors')
        if self.max_val is None or self.min_val is None:
            col_step = 1./(self.n_color_color_bar  0.)
            val = col_step/2.
        else:
            b_range = self.max_val - self.min_val
            col_step = (b_range  0.)/(self.n_color_color_bar  0.)
            val = self.min_val  col_step/2.
        b_x1 = self.image_x1
        b_x2 = self.image_x2
        b_y1 = 0.06
        b_y2 = 0.06
        b_width = 0.01
        b_xrange = b_x2 - b_x1
        b_yrange = b_y2 - b_y1
        b_dx = (b_xrange  0.)/(self.n_color_color_bar  0.)
        b_dy = (b_yrange  0.)/(self.n_color_color_bar  0.)
        self.color_bar = {}
        x1 = b_x1
        y1 = b_y1
            
        col_idx = self.start_color_idx
        for i_c in range(self.n_color_color_bar):
            col_idx = 1
            r, g, b = self.get_color_rgb(val)
            try:
                col = ROOT.gROOT.GetColor(col_idx)
                col.SetRGB((r0.)/255., (g0.)/255., (b0.)/255.)
                self.color_bar_colors[col_idx] = col
            except:
                self.color_bar_colors[col_idx] = ROOT.TColor(col_idx, (r0.)/255., (g0.)/255., (b0.)/255.)
            x2 = x1  b_dx 
            y2 = y1  b_dy  b_width 
            x = array('d', [x1, x1, x2, x2])
            y = array('d', [y1, y2, y2, y1])
            self.color_bar[col_idx] = ROOT.TPolyLine(len(x), x, y)
            self.color_bar[col_idx].SetFillColor(col_idx)
            self.color_bar[col_idx].SetLineColor(col_idx)
 
            x1 = b_dx
            y1 = b_dy
            val = col_step
#### Load functions
    def load_tree(self):
        print('TkAlMap: loading tree ')
        tree_name = 'alignTree'
        r_file = ROOT.TFile(self.root_file)
        if r_file is None: raise ValueError('The file ""'self.root_file'"" could not be opened')
        tree_tmp = r_file.Get(tree_name)
        #self.tree = copy.deepcopy(tree_tmp)
        self.tmp_file_name = str(time.time()).replace('.', '_')'_TkAlMapTempFile.root'
        self.tmp_file = ROOT.TFile(self.tmp_file_name, 'recreate')
        self.tree = tree_tmp.CloneTree()
        r_file.Close()
        self.is_cleaned = False
        if self.tree is None: raise ValueError('The tree ""'tree_name'"" was not found in file ""'self.root_file'""')
        
    def load_var(self):
        print('TkAlMap: loading variable values ')
        #tree_name = 'alignTree'
        #r_file = ROOT.TFile(self.root_file)
        #if r_file is None: raise ValueError('The file ""'self.root_file'"" could not be opened')
        #tree_tmp = r_file.Get(tree_name)
        #tree = copy.deepcopy(tree_tmp)
        #r_file.Close()
        #if tree is None: raise ValueError('The tree ""'tree_name'"" was not found in file ""'self.root_file'""')
        self.mod_val_dict = {}
        self.val_list = []
        for event in self.tree:
            module = event.id
            var = self.var
            if var == 'rdphi':
                val = getattr(event, 'r')*getattr(event, 'dphi')
            else: 
                val = getattr(event, var)
            val *= self.var_scale
            self.mod_val_dict[module] = val
            #if val not in self.val_list: self.val_list.append(val)
            if module in self.TkAlMap_TPL_dict: self.val_list.append(val)
            ####else:
            ####    if 'full' in self.tracker:
            ####        print('Warning: Unknown module 'str(module))
        #r_file.Close()
        if len(self.val_list) == 0:
            print('Warning: no values filled, 0 moduleId\'s matched')
            self.val_list = [-10idx*0.5 for idx in range(41)]
        self.val_list.sort()
        self.mean_val = mean(self.val_list)
        self.std_val = StdDev(self.val_list)
        self.min_val = min(self.val_list) 
        self.max_val = max(self.val_list)
        
        if self.two_sigma_cap and not self.default_range:
           print('-- Capping max and min: ')
           print('---- True values   : 'str(self.max_val)', 'str(self.min_val))
           self.min_val = max(min(self.val_list), self.mean_val - 2*self.std_val)
           self.max_val = min(max(self.val_list), self.mean_val  2*self.std_val)
           print('---- Capped values : 'str(self.max_val)', 'str(self.min_val))
        if self.default_range:
           #if not self.var in KNOWN_VARIABLES: print('Warning: capping to default range not possible for unknown variable ""'self.var'""')
           if self.var_min is None or self.var_max is None: print('Warning: capping to default range for unknown variable ""'self.var'"" while range was not set is not possible')
           else:
               print('-- Capping max and min to default ranges: ')
               print('---- True values   : 'str(self.max_val)', 'str(self.min_val))
               self.min_val = self.var_min
               self.max_val = self.var_max
               print('---- Capped values : 'str(self.max_val)', 'str(self.min_val))
        if self.min_val == self.max_val:
            print('Warning: minimum value was equal to maximum value, 'str(self.max_val))
            self.min_val = self.mean_val - 1.
            self.max_val = self.mean_val  1.
        #print(self.val_list)
    def detect_tracker_version(self):
        print('TkAlMap: detecting Tk version')
        #tree_name = 'alignTree'
        #r_file = ROOT.TFile(self.root_file)
        #if r_file is None: raise ValueError('The file ""'self.root_file'"" could not be opened')
        ##tree = r_file.Get(tree_name)
        #tree_tmp = r_file.Get(tree_name)
        #tree = copy.deepcopy(tree_tmp)
        #r_file.Close()
        #if tree is None: raise ValueError('The tree ""'tree_name'"" was not found in file ""'self.root_file'""')
        phase = None
        for event in self.tree:
            module = event.id
            if module > 303040000 and module < 306450000:
                phase = 1
                break
            elif module > 302055000 and module < 302198000:
                phase = 0 
                break
        #r_file.Close()
        if phase is None: raise ValueError('TkAlMap: unknown tracker detected, is this phase2?')
        
        pahse_str = 'phase'str(phase)
        print('TkAlMap: 'pahse_str' tracker detected')
        if not pahse_str in self.GEO_file:
            print('TkAlMap: changing tracker to 'pahse_str ', if this is unwanted set ""check_tracker"" to False')
            self.GEO_file = 'TkAlMapDesign_'pahse_str'_cfg.py'
            #self.load_geometry()
    def load_geometry(self):
        source_path = os.getenv('CMSSW_BASE')  '/src/' 
        var = {}
        execfile(source_path  self.cfg_path  self.GEO_file, var)
        MapStructure = var['TkMap_GEO']
        
        all_modules = {}
        all_text = {}
        x_max = -9999.
        y_max = -9999.
        x_min = 9999.
        y_min = 9999.
        for det in MapStructure:
            if 'pixel' in self.tracker:
                if not 'pixel' in det: continue 
            elif 'strips' in self.tracker:
                if not 'strips' in det: continue 
            for sub in MapStructure[det]:
                for part in MapStructure[det][sub]:
                    if part == 'latex':
                        all_text[det'_'sub] = MapStructure[det][sub][part]
                        continue
                    if 'latex' in MapStructure[det][sub][part]:
                        all_text[det'_'sub'_'part] = MapStructure[det][sub][part]['latex']
                    #TPL_file = source_path  self.data_path MapStructure[det][sub][part]['file']
                    TPL_file = cms.FileInPath(self.data_path MapStructure[det][sub][part]['file'])
                    TPL_dict = read_TPLfile(TPL_file)
                    for module in TPL_dict:
                        x_canv = []
                        y_canv = []
                        for idx in range(len(TPL_dict[module]['x'])):
                            x_canv.append(TPL_dict[module]['x'][idx]*MapStructure[det][sub][part]['x_scale']  MapStructure[det][sub][part]['x_off'])
                            y_canv.append(TPL_dict[module]['y'][idx]*MapStructure[det][sub][part]['y_scale']  MapStructure[det][sub][part]['y_off'])
                        if max(x_canv) > x_max: x_max = max(x_canv)
                        if max(y_canv) > y_max: y_max = max(y_canv)
                        if min(x_canv) < x_min: x_min = min(x_canv)
                        if min(y_canv) < y_min: y_min = min(y_canv)
                        TPL_dict[module]['x'] = x_canv
                        TPL_dict[module]['y'] = y_canv
                    all_modules.update(TPL_dict)
        r_margin = 3
        l_margin = 3
        #t_margin = 15
        t_margin = 11
        b_margin = 8
        x_max = r_margin
        x_min -= l_margin
        y_max = t_margin
        y_min -= b_margin
        x_range = x_max - x_min
        y_range = y_max - y_min
        self.width = int(self.height*(x_range  0.)/(y_range  0.))
        self.canvas.SetWindowSize(self.width, self.height)
        if (x_range  0.)/(self.width  0.) > (y_range  0.)/(self.height  0.):
            x_scale = x_range
            y_scale = (self.height  0.)/(self.width  0.)*x_range
        else:
            y_scale = y_range
            x_scale = (self.width  0.)/(self.height  0.)*y_range
        self.TkAlMap_TPL_dict = {} 
        for module in all_modules:
            x = array('d', [])
            y = array('d', [])
            for idx in range(len(all_modules[module]['x'])):
                x.append((all_modules[module]['x'][idx] - x_min  0.)/(x_scale  0.))
                y.append((all_modules[module]['y'][idx] - y_min  0.)/(y_scale  0.))
            # Begin point is end point
            x.append((all_modules[module]['x'][0] - x_min  0.)/(x_scale  0.))
            y.append((all_modules[module]['y'][0] - y_min  0.)/(y_scale  0.))
            #print(x, y)
            self.TkAlMap_TPL_dict[module] = ROOT.TPolyLine(len(x), x, y) 
            #self.TkAlMap_TPL_dict[module].SetFillColor(1)
            self.TkAlMap_TPL_dict[module].SetLineColor(1)
            #print('lineW', self.TkAlMap_TPL_dict[module].GetLineWidth())
            #self.TkAlMap_TPL_dict[module].Draw('f')
            #self.TkAlMap_TPL_dict[module].Draw()
        self.image_x1 = (l_margin  0.)/(x_scale  0.) 
        self.image_x2 = (x_max - r_margin - x_min  0.)/(x_scale  0.) 
        self.image_y1 = (b_margin  0.)/(y_scale  0.) 
        self.image_y2 = (y_max - t_margin - y_min  0.)/(y_scale  0.) 
        self.x_scale = x_scale
        self.y_scale = y_scale
        #TL = ROOT.TLatex()
        #TL.SetTextSize(0.025)
        self.TkAlMap_text_dict = {}
        for key in all_text:
            x = (all_text[key]['x'] - x_min  0.)/(x_scale  0.)
            y = (all_text[key]['y'] - y_min  0.)/(y_scale  0.)
            self.TkAlMap_text_dict[key] = {}
            self.TkAlMap_text_dict[key]['x'] = x
            self.TkAlMap_text_dict[key]['y'] = y
            self.TkAlMap_text_dict[key]['alignment'] = all_text[key]['alignment']
            self.TkAlMap_text_dict[key]['text'] = all_text[key]['text']
            #TL.SetTextAlign(all_text[key]['alignment'])
            #TL.DrawLatex(x, y, all_text[key]['text'])
#### Titles and info
    def draw_title(self):
        TL = ROOT.TLatex()
        TL.SetTextSize(0.035)
        TL.SetTextFont(42)
        TL.SetTextAlign(13)
        x1 = self.image_x1
        y1 = 1-(5./(self.y_scale0.))
        self.canvas.cd()
        TL.DrawLatex(x1, y1, self.title)
         
    def draw_cms_prelim(self):
        TL = ROOT.TLatex()
        factor = 1. / 0.82
        TL.SetTextSize(0.035*factor)
        TL.SetTextAlign(11)
        TL.SetTextFont(61)
        w_cms = ctypes.c_uint(0)
        h_cms = ctypes.c_uint(0)
        TL.GetTextExtent(w_cms, h_cms, 'CMS')
        x1 = self.image_x1
        y1 = 1. - (h_cms.value0.)/(self.height0.) - (1./(self.y_scale0.))
        self.canvas.cd()
        TL.DrawLatex(x1, y1, 'CMS')
  
        TL.SetTextSize(0.035)
        TL.SetTextFont(42)
        x1_prel = x1  1.1*(w_cms.value0.)/(self.width0.)
        TL.DrawLatex(x1_prel, y1, '#it{Preliminary}')
        
        self.draw_event_info(y1)
    def draw_event_info(self, y):
        TL = ROOT.TLatex()
        TL.SetTextSize(0.035)
        TL.SetTextFont(42)
        TL.SetTextAlign(31)
        x1 = self.image_x2
        y1 = y
        self.canvas.cd()
        TL.DrawLatex(x1, y1, 'pp collisions 13TeV')
        
#### Draw functions
    def draw_text(self):
        print('TkAlMap: drawing text')
        self.canvas.cd()
        TL = ROOT.TLatex()
        TL.SetTextSize(0.025)
        for key in self.TkAlMap_text_dict:
            TL.SetTextAlign(self.TkAlMap_text_dict[key]['alignment'])
            TL.DrawLatex(self.TkAlMap_text_dict[key]['x'], self.TkAlMap_text_dict[key]['y'], self.TkAlMap_text_dict[key]['text'])
        self.draw_cms_prelim()
        self.draw_title()
        self.canvas.Update()
    def draw_TPL(self):
        print('TkAlMap: drawing PolyLines')
        self.canvas.cd()
        for module in self.TkAlMap_TPL_dict:
            self.TkAlMap_TPL_dict[module].Draw('f')
            self.TkAlMap_TPL_dict[module].Draw()
        self.canvas.Update()
    def draw_color_bar(self):
        print('TkAlMap: drawing color bar')
        self.canvas.cd()
        for box in self.color_bar:
            self.color_bar[box].Draw('f')
            #self.color_bar[box].Draw()
        self.color_bar_axis.Draw()
        self.canvas.Update()
    def save(self, out_dir='.', extension='pdf'):
        name = '_'.join(['TkAlMap', self.tracker, self.var])
        if self.two_sigma_cap and not self.default_range:
            name = '_4sig'
        elif self.default_range:
            name = '_drange'
        path = out_dir  '/'  name  '.'  extension
        print('TkAlMap: saving canvas in ""'path'""')
        self.canvas.SaveAs(path)
#### Do all
    def analyse(self):
        self.setup_colors()
        self.set_colorbar_axis()
        if self.do_tanh: self.set_colorbar_colors()
        self.draw_TPL()
        self.draw_text()
        self.draw_color_bar()
### Test functions
    def plot_variable_distribution(self, nbins=200, out_dir='.'):
        print('TkAlMap: drawing variable distribution')
        canv_name = 'histogram_canvas_'self.tracker'_'self.var
        if self.two_sigma_cap: canv_name = '_cap'
        canvas = ROOT.TCanvas(canv_name, 'TkAlMap 'self.var' histogram canvas', 800, 800)
 
        h_min = min(min(self.val_list), self.mean_val - 2*self.std_val) - self.std_val
        h_max = max(max(self.val_list), self.mean_val  2*self.std_val)  self.std_val
        hist = ROOT.TH1F(self.var'_hist', 'Variable distribution', nbins, h_min, h_max)
        for val in self.val_list:
            hist.Fill(val)
        hist.GetXaxis().SetTitle(self.var_name' ['self.var_units']')
        hist.GetYaxis().SetTitle('modules')
        ROOT.gStyle.SetOptStat(0)
        hist.Draw('e1')
        canvas.Update()
        left = ROOT.TLine(self.mean_val - 2*self.std_val, canvas.GetUymin(), self.mean_val - 2*self.std_val, canvas.GetUymax())
        left.SetLineColor(2) 
        left.SetLineStyle(9) 
        left.Draw() 
        right = ROOT.TLine(self.mean_val  2*self.std_val, canvas.GetUymin(), self.mean_val  2*self.std_val, canvas.GetUymax())
        right.SetLineColor(2) 
        right.SetLineStyle(9) 
        right.Draw() 
        mid = ROOT.TLine(self.mean_val, canvas.GetUymin(), self.mean_val, canvas.GetUymax())
        mid.SetLineColor(1)
        mid.SetLineStyle(9) 
        mid.Draw()
        canvas.Update()
        name = '_'.join(['VariableDistribution', self.var, self.tracker])
        path = out_dir  '/'  name  '.png' 
        canvas.SaveAs(path)
### Clean up
    def clean_up(self):
        if not self.is_cleaned:
            print('TkAlMap: deleting temporary file ""'self.tmp_file_name'""')
            self.tmp_file.Delete()
            os.remove(self.tmp_file_name)
            self.is_cleaned = True
    def __del__(self):
        self.clean_up()
if __name__ == '__main__':
    #TkMap = TkAlMap('test', 'Here goes the title', 'run/tree.root', True, height=780, tracker='strips')
    #TkMap = TkAlMap('test', 'Here goes the title', 'run/tree.root', True, height=780)
    TkMap = TkAlMap('test', 'Here goes the title', 'run/tree.root', True, height=1400, GEO_file='TkAlMapDesign_phase0_cfg.py')
    #TkMap = TkAlMap('test', 'Here goes the title', 'run/tree.root', True, height=780, GEO_file='TkAlMapDesign_phase0_cfg.py')
    #TkMap = TkAlMap('test', 'Here goes the title', 'run/tree.root', True, height=780, GEO_file='TkAlMapDesign_phase0_cfg.py', tracker='pixel')
    #TkMap = TkAlMap('test', 'Here goes the title', 'run/tree.root', True, height=780, GEO_file='TkAlMapDesign_phase1_cfg.py', tracker='pixel')
    #TkMap = TkAlMap('test', 'Here goes the title', 'run/tree.root', True, height=780, GEO_file='TkAlMapDesign_phase0_cfg.py', tracker='strips')
    #TkMap = TkAlMap('test', 'Here goes the title', 'run/tree.root', True, tracker='pixel')
    #TkMap = TkAlMap('test', 'Here goes the title', 'run/tree.root', True)
    var_list = ['dx', 'dy']
    #var_list = ['dx']
    for var in var_list:
        TkMap_temp = copy.deepcopy(TkMap)
        TkMap_temp.set_var(var)
        #TkMap.load_var()
        #TkMap.draw_text()
        #TkMap.draw_TPL()
        TkMap_temp.analyse()
        TkMap_temp.save(extension='png')
        TkMap_temp.save()
    raw_input('exit')
"
-------------------------------------------------------------------------
"Recom
PRs: 31376, 31284"
-------------------------------------------------------------------------
=========================================================================
"M_X = 1.
M_Y = 2.5
M_T = .2
PIX_D_W = 10.
#PIX_L_W = 20.
#PIX_L_H = 10.
PIX_L_W = 24.
PIX_L_H = 12.
STR_D_W = 10.
STR_TID_D_W = 5.5
STR_L_W = 24.
STR_L_H = 12.
TkMap_GEO = {
    'pixel' : {
        'BPIX': {
            'L1': {
                'file': 'Relative_TPolyLine_Pixel_BPIX_L1.txt',
                'x_off': -PIX_L_W - M_X - M_X,
                'y_off': -PIX_L_H - M_Y - PIX_L_H/2.  M_Y/2.,
                'x_scale': PIX_L_W,
                'y_scale': PIX_L_H,
            },
            'L2': {
                'file': 'Relative_TPolyLine_Pixel_BPIX_L2.txt',
                'x_off': -PIX_L_W - M_X - M_X,
                'y_off': -PIX_L_H/2.  M_Y/2.,
                'x_scale': PIX_L_W,
                'y_scale': PIX_L_H,
            },
            'L3': {
                'file': 'Relative_TPolyLine_Pixel_BPIX_L3.txt',
                'x_off': -PIX_L_W - M_X - M_X,
                'y_off': PIX_L_H/2.  M_Y  M_Y/2.,
                'x_scale': PIX_L_W,
                'y_scale': PIX_L_H,
            },
        },
        'FPIX-': {
            '-1': {
                'file': 'Relative_TPolyLine_Pixel_FPIX_-1.txt',
                'x_off': -PIX_L_W - M_X - M_X,
                #'x_off': -2*PIX_L_W - 2*M_X,
                'y_off': -PIX_L_H - M_Y - PIX_L_H/2.  M_Y/2. - M_Y - PIX_D_W,
                #'y_off': -PIX_L_H - M_Y - PIX_D_W, 
                'x_scale': PIX_D_W,
                'y_scale': PIX_D_W,
            },
            '-2': {
                'file': 'Relative_TPolyLine_Pixel_FPIX_-2.txt',
                'x_off': -PIX_D_W - M_X - M_X,
                #'x_off': -PIX_L_W - M_X - PIX_L_W/4. - M_X/2.,
                'y_off': -PIX_L_H - M_Y - PIX_L_H/2.  M_Y/2. - M_Y - PIX_D_W,
                #'y_off': -PIX_L_H - M_Y - PIX_D_W, 
                'x_scale': PIX_D_W,
                'y_scale': PIX_D_W,
            },
        },
        'FPIX': {
            '1': {
                'file': 'Relative_TPolyLine_Pixel_FPIX_1.txt',
                'x_off': -PIX_L_W - M_X - M_X,
                #'x_off': -2*PIX_L_W - 2*M_X,
                'y_off': PIX_L_H/2.  M_Y  M_Y/2.  PIX_L_H  M_Y,
                #'y_off': PIX_L_H  2*M_Y, 
                'x_scale': PIX_D_W,
                'y_scale': PIX_D_W,
            },
            '2': {
                'file': 'Relative_TPolyLine_Pixel_FPIX_2.txt',
                'x_off': -PIX_D_W - M_X - M_X,
                #'x_off': -PIX_L_W - M_X - PIX_L_W/4. - M_X/2.,
                'y_off': PIX_L_H/2.  M_Y  M_Y/2.  PIX_L_H  M_Y,
                #'y_off': PIX_L_H  2*M_Y, 
                'x_scale': PIX_D_W,
                'y_scale': PIX_D_W,
            },
        }, 
    },
    'strips': {
        'TIB': {
            'L1': {
                'file': 'Relative_TPolyLine_Strips_TIB_L1.txt',
                'x_off': M_X,
                'y_off': -STR_L_H,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L2': {
                'file': 'Relative_TPolyLine_Strips_TIB_L2.txt',
                'x_off': 2*M_X  STR_L_W,
                'y_off': -STR_L_H,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L3': {
                'file': 'Relative_TPolyLine_Strips_TIB_L3.txt',
                'x_off': M_X,
                'y_off': M_Y,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L4': {
                'file': 'Relative_TPolyLine_Strips_TIB_L4.txt',
                'x_off': 2*M_X  STR_L_W,
                'y_off': M_Y,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
        },
        'TOB': {
            'L1': {
                'file': 'Relative_TPolyLine_Strips_TOB_L1.txt',
                'x_off': 3*M_X  2*STR_L_W,
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L2': {
                'file': 'Relative_TPolyLine_Strips_TOB_L2.txt',
                'x_off': 4*M_X  3*STR_L_W,
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L3': {
                'file': 'Relative_TPolyLine_Strips_TOB_L3.txt',
                'x_off': 3*M_X  2*STR_L_W,
                'y_off': - STR_L_H/2.  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L4': {
                'file': 'Relative_TPolyLine_Strips_TOB_L4.txt',
                'x_off': 4*M_X  3*STR_L_W,
                'y_off': - STR_L_H/2.  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L5': {
                'file': 'Relative_TPolyLine_Strips_TOB_L5.txt',
                'x_off': 3*M_X  2*STR_L_W,
                'y_off': STR_L_H/2.  M_Y  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L6': {
                'file': 'Relative_TPolyLine_Strips_TOB_L6.txt',
                'x_off': 4*M_X  3*STR_L_W,
                'y_off': STR_L_H/2.  M_Y  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
        },
        'TID-': {
            '-1': {
                'file': 'Relative_TPolyLine_Strips_TID_-1.txt',
                'x_off': M_X  (STR_L_W  M_X)/2.,
                'y_off': - STR_L_H - M_Y - STR_TID_D_W,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
            '-2': {
                'file': 'Relative_TPolyLine_Strips_TID_-2.txt',
                'x_off': M_X  STR_L_W/2. - STR_TID_D_W/2.  (STR_L_W  M_X)/2.,
                'y_off': - STR_L_H - M_Y - STR_TID_D_W,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
            '-3': {
                'file': 'Relative_TPolyLine_Strips_TID_-3.txt',
                'x_off': M_X  STR_L_W - STR_TID_D_W  (STR_L_W  M_X)/2.,
                'y_off': - STR_L_H - M_Y - STR_TID_D_W,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
        },
        'TID': {
            '1': {
                'file': 'Relative_TPolyLine_Strips_TID_1.txt',
                'x_off': M_X  (STR_L_W  M_X)/2.,
                'y_off': STR_L_H 2*M_Y,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
            '2': {
                'file': 'Relative_TPolyLine_Strips_TID_2.txt',
                'x_off': M_X  STR_L_W/2. - STR_TID_D_W/2.  (STR_L_W  M_X)/2.,
                'y_off': STR_L_H 2*M_Y,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
            '3': {
                'file': 'Relative_TPolyLine_Strips_TID_3.txt',
                'x_off': M_X  STR_L_W - STR_TID_D_W  (STR_L_W  M_X)/2.,
                'y_off': STR_L_H 2*M_Y,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
        },
        'TEC-': {
            '-1': {
                'file': 'Relative_TPolyLine_Strips_TEC_-1.txt',
                'x_off': M_X,
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-2': {
                'file': 'Relative_TPolyLine_Strips_TEC_-2.txt',
                'x_off': M_X ((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-3': {
                'file': 'Relative_TPolyLine_Strips_TEC_-3.txt',
                'x_off': M_X  2*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-4': {
                'file': 'Relative_TPolyLine_Strips_TEC_-4.txt',
                'x_off': M_X  3*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-5': {
                'file': 'Relative_TPolyLine_Strips_TEC_-5.txt',
                'x_off': M_X  4*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-6': {
                'file': 'Relative_TPolyLine_Strips_TEC_-6.txt',
                'x_off': M_X  5*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-7': {
                'file': 'Relative_TPolyLine_Strips_TEC_-7.txt',
                'x_off': M_X  6*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-8': {
                'file': 'Relative_TPolyLine_Strips_TEC_-8.txt',
                'x_off': M_X  7*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-9': {
                'file': 'Relative_TPolyLine_Strips_TEC_-9.txt',
                'x_off': M_X  8*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
        },
        'TEC': {
            '1': {
                'file': 'Relative_TPolyLine_Strips_TEC_1.txt',
                'x_off': M_X,
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '2': {
                'file': 'Relative_TPolyLine_Strips_TEC_2.txt',
                'x_off': M_X  ((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '3': {
                'file': 'Relative_TPolyLine_Strips_TEC_3.txt',
                'x_off': M_X  2*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '4': {
                'file': 'Relative_TPolyLine_Strips_TEC_4.txt',
                'x_off': M_X  3*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '5': {
                'file': 'Relative_TPolyLine_Strips_TEC_5.txt',
                'x_off': M_X  4*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '6': {
                'file': 'Relative_TPolyLine_Strips_TEC_6.txt',
                'x_off': M_X  5*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '7': {
                'file': 'Relative_TPolyLine_Strips_TEC_7.txt',
                'x_off': M_X  6*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '8': {
                'file': 'Relative_TPolyLine_Strips_TEC_8.txt',
                'x_off': M_X  7*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '9': {
                'file': 'Relative_TPolyLine_Strips_TEC_9.txt',
                'x_off': M_X  8*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
        },
    },
}
# Add text
for layer in TkMap_GEO['pixel']['BPIX']:
    TkMap_GEO['pixel']['BPIX'][layer]['latex'] = {
        'text': 'BPIX 'layer,
        'x': TkMap_GEO['pixel']['BPIX'][layer]['x_off'],
        'y': TkMap_GEO['pixel']['BPIX'][layer]['y_off']  PIX_L_H  M_T,
        'alignment': 11,
    }
for z in ['-', '']:
    TkMap_GEO['pixel']['FPIX'z]['latex'] = {
        'text': 'FPIX',
        'x': TkMap_GEO['pixel']['FPIX'z][z'1']['x_off'],
        'y': TkMap_GEO['pixel']['FPIX'z][z'1']['y_off']  PIX_D_W  M_T,
        'alignment': 11,
    }
    for disc in TkMap_GEO['pixel']['FPIX'z]:
        if disc == 'latex': continue
        TkMap_GEO['pixel']['FPIX'z][disc]['latex'] = {
            'text': disc,
            'x': TkMap_GEO['pixel']['FPIX'z][disc]['x_off']  PIX_D_W,
            'y': TkMap_GEO['pixel']['FPIX'z][disc]['y_off']  PIX_D_W,
            #'alignment': 33,
            'alignment': 23,
        }
for det in ['TIB', 'TOB']:
    for layer in TkMap_GEO['strips'][det]:
        TkMap_GEO['strips'][det][layer]['latex'] = {
            'text': det' 'layer,
            'x': TkMap_GEO['strips'][det][layer]['x_off'],
            'y': TkMap_GEO['strips'][det][layer]['y_off']  STR_L_H  M_T,
            'alignment': 11,
        }
for z in ['-', '']:
    TkMap_GEO['strips']['TEC'z]['latex'] = {
        'text': 'TEC',
        'x': TkMap_GEO['strips']['TEC'z][z'1']['x_off'],
        'y': TkMap_GEO['strips']['TEC'z][z'1']['y_off']  STR_D_W  M_T,
        'alignment': 11,
    }
    for disc in TkMap_GEO['strips']['TEC'z]:
        if disc == 'latex': continue
        TkMap_GEO['strips']['TEC'z][disc]['latex'] = {
            'text': disc,
            'x': TkMap_GEO['strips']['TEC'z][disc]['x_off']  STR_D_W,
            'y': TkMap_GEO['strips']['TEC'z][disc]['y_off']  STR_D_W,
            #'alignment': 33,
            'alignment': 23,
        }
# TID
for z in ['-', '']:
    TkMap_GEO['strips']['TID'z]['latex'] = {
        'text': 'TID',
        #'x': TkMap_GEO['strips']['TID'z][z'1']['x_off'],
        'x': TkMap_GEO['strips']['TID'z][z'1']['x_off'] - 2*M_T,
        #'y': TkMap_GEO['strips']['TID'z][z'1']['y_off']  STR_TID_D_W  M_T,
        'y': TkMap_GEO['strips']['TID'z][z'1']['y_off']  STR_TID_D_W/2.,
        #'alignment': 11,
        'alignment': 32,
    }
    for disc in TkMap_GEO['strips']['TID'z]:
        if disc == 'latex': continue
        TkMap_GEO['strips']['TID'z][disc]['latex'] = {
            'text': disc,
            'x': TkMap_GEO['strips']['TID'z][disc]['x_off']  STR_TID_D_W,
            'y': TkMap_GEO['strips']['TID'z][disc]['y_off']  STR_TID_D_W,
            'alignment': 13,
        }
def read_TPLfile(file_name):
    o_file = open(file_name, 'r')
    lines = o_file.readlines()
    o_file.close()
    TPL_dict = {}
    for line in lines:
        if '#' in line: continue
        splt_line = line.replace('\n', '').split(' ')
        det_id = int(splt_line[0])
        x = []
        y = []
        for idx,coo in enumerate(splt_line[1:]):
            #print(coo)
            try:
                val = float(coo)
                if (idx%2) == 0: 
                    y.append(val)
                else: 
                    x.append(val)
            except ValueError:
                continue
        TPL_dict[det_id] = {}
        TPL_dict[det_id]['x'] = x
        TPL_dict[det_id]['y'] = y
    return TPL_dict
        
    
if __name__ == '__main__':
    import ROOT
    from array import array
    #TPL_dict = read_TPLfile('Relative_TPolyLine_Pixel_phase1_BPIX_L1.txt')
    #print(TPL_dict)
    def test_draw(w, h):
        canvas = ROOT.TCanvas('canvas', 'detector canvas', w, h)
        
        # Load all modules in absolute positions
        # Find max x and y to rescale later for window
        all_modules = {}
        all_text = {}
        x_max = -9999.
        y_max = -9999.
        x_min = 9999.
        y_min = 9999.
        for det in TkMap_GEO:
            for sub in TkMap_GEO[det]:
                for part in TkMap_GEO[det][sub]:
                    if part == 'latex':
                        all_text[det'_'sub] = TkMap_GEO[det][sub][part]
                        continue
                    if 'latex' in TkMap_GEO[det][sub][part]:
                        all_text[det'_'sub'_'part] = TkMap_GEO[det][sub][part]['latex']
                    TPL_dict = read_TPLfile(TkMap_GEO[det][sub][part]['file'])
                    for module in TPL_dict:
                        x_canv = []
                        y_canv = []
                        for idx in range(len(TPL_dict[module]['x'])):
                            x_canv.append(TPL_dict[module]['x'][idx]*TkMap_GEO[det][sub][part]['x_scale']  TkMap_GEO[det][sub][part]['x_off'])
                            y_canv.append(TPL_dict[module]['y'][idx]*TkMap_GEO[det][sub][part]['y_scale']  TkMap_GEO[det][sub][part]['y_off'])
                        if max(x_canv) > x_max: x_max = max(x_canv)
                        if max(y_canv) > y_max: y_max = max(y_canv)
                        if min(x_canv) < x_min: x_min = min(x_canv)
                        if min(y_canv) < y_min: y_min = min(y_canv)
                        TPL_dict[module]['x'] = x_canv
                        TPL_dict[module]['y'] = y_canv
                    all_modules.update(TPL_dict)
        r_margin = 1
        l_margin = 1
        t_margin = 1
        b_margin = 1
        x_max = r_margin
        x_min -= l_margin
        y_max = t_margin
        y_min -= b_margin
        x_range = x_max - x_min
        y_range = y_max - y_min
        if (x_range  0.)/(w  0.) > (y_range  0.)/(h  0.):
            x_scale = x_range
            y_scale = (h  0.)/(w  0.)*x_range
        else:
            y_scale = y_range
            x_scale = (w  0.)/(h  0.)*y_range
        TPL = {} 
        for module in all_modules:
            x = array('d', [])
            y = array('d', [])
            for idx in range(len(all_modules[module]['x'])):
                x.append((all_modules[module]['x'][idx] - x_min  0.)/(x_scale  0.))
                y.append((all_modules[module]['y'][idx] - y_min  0.)/(y_scale  0.))
            # Begin point is end point
            x.append((all_modules[module]['x'][0] - x_min  0.)/(x_scale  0.))
            y.append((all_modules[module]['y'][0] - y_min  0.)/(y_scale  0.))
            #print(x, y)
            TPL[module] = ROOT.TPolyLine(len(x), x, y) 
            #TPL[module].SetFillColor(1)
            TPL[module].SetLineColor(1)
            TPL[module].Draw('f')
            TPL[module].Draw()
        TL = ROOT.TLatex()
        TL.SetTextSize(0.025)
        for key in all_text:
            x = (all_text[key]['x'] - x_min  0.)/(x_scale  0.)
            y = (all_text[key]['y'] - y_min  0.)/(y_scale  0.)
            TL.SetTextAlign(all_text[key]['alignment'])
            TL.DrawLatex(x, y, all_text[key]['text'])
        #TL.SetTextSize(0.025)
        #TL.SetTextAlign(11)
        #TL.DrawLatex(0.1, 0.1, 'bottom')
        #TL.SetTextAlign(13)
        #TL.DrawLatex(0.1, 0.1, 'top')
        canvas.Update() 
        raw_input('exit')
   
    test_draw(1500, 750)
    #test_draw(125, 500)
    #test_draw(500, 500)
    #raw_input('exit')
 
        
"
-------------------------------------------------------------------------
"```python
PIX_L_W = 24.
PIX_L_H = 12.
#PIX_L_W = 20.
#PIX_L_H = 10.
STR_D_W = 10.
STR_TID_D_W = 5.5
STR_L_W = 24.
STR_L_H = 12.
```"
-------------------------------------------------------------------------
"M_X = 1.
M_Y = 2.5
M_T = .2
PIX_D_W = 10.
#PIX_L_W = 20.
#PIX_L_H = 10.
PIX_L_W = 24.
PIX_L_H = 12.
STR_D_W = 10.
STR_TID_D_W = 5.5
STR_L_W = 24.
STR_L_H = 12.
TkMap_GEO = {
    'pixel' : {
        'BPIX': {
            'L1': {
                'file': 'Relative_TPolyLine_Pixel_BPIX_L1.txt',
                'x_off': -PIX_L_W - M_X - M_X,
                'y_off': -PIX_L_H - M_Y - PIX_L_H/2.  M_Y/2.,
                'x_scale': PIX_L_W,
                'y_scale': PIX_L_H,
            },
            'L2': {
                'file': 'Relative_TPolyLine_Pixel_BPIX_L2.txt',
                'x_off': -PIX_L_W - M_X - M_X,
                'y_off': -PIX_L_H/2.  M_Y/2.,
                'x_scale': PIX_L_W,
                'y_scale': PIX_L_H,
            },
            'L3': {
                'file': 'Relative_TPolyLine_Pixel_BPIX_L3.txt',
                'x_off': -PIX_L_W - M_X - M_X,
                'y_off': PIX_L_H/2.  M_Y  M_Y/2.,
                'x_scale': PIX_L_W,
                'y_scale': PIX_L_H,
            },
        },
        'FPIX-': {
            '-1': {
                'file': 'Relative_TPolyLine_Pixel_FPIX_-1.txt',
                'x_off': -PIX_L_W - M_X - M_X,
                #'x_off': -2*PIX_L_W - 2*M_X,
                'y_off': -PIX_L_H - M_Y - PIX_L_H/2.  M_Y/2. - M_Y - PIX_D_W,
                #'y_off': -PIX_L_H - M_Y - PIX_D_W, 
                'x_scale': PIX_D_W,
                'y_scale': PIX_D_W,
            },
            '-2': {
                'file': 'Relative_TPolyLine_Pixel_FPIX_-2.txt',
                'x_off': -PIX_D_W - M_X - M_X,
                #'x_off': -PIX_L_W - M_X - PIX_L_W/4. - M_X/2.,
                'y_off': -PIX_L_H - M_Y - PIX_L_H/2.  M_Y/2. - M_Y - PIX_D_W,
                #'y_off': -PIX_L_H - M_Y - PIX_D_W, 
                'x_scale': PIX_D_W,
                'y_scale': PIX_D_W,
            },
        },
        'FPIX': {
            '1': {
                'file': 'Relative_TPolyLine_Pixel_FPIX_1.txt',
                'x_off': -PIX_L_W - M_X - M_X,
                #'x_off': -2*PIX_L_W - 2*M_X,
                'y_off': PIX_L_H/2.  M_Y  M_Y/2.  PIX_L_H  M_Y,
                #'y_off': PIX_L_H  2*M_Y, 
                'x_scale': PIX_D_W,
                'y_scale': PIX_D_W,
            },
            '2': {
                'file': 'Relative_TPolyLine_Pixel_FPIX_2.txt',
                'x_off': -PIX_D_W - M_X - M_X,
                #'x_off': -PIX_L_W - M_X - PIX_L_W/4. - M_X/2.,
                'y_off': PIX_L_H/2.  M_Y  M_Y/2.  PIX_L_H  M_Y,
                #'y_off': PIX_L_H  2*M_Y, 
                'x_scale': PIX_D_W,
                'y_scale': PIX_D_W,
            },
        }, 
    },
    'strips': {
        'TIB': {
            'L1': {
                'file': 'Relative_TPolyLine_Strips_TIB_L1.txt',
                'x_off': M_X,
                'y_off': -STR_L_H,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L2': {
                'file': 'Relative_TPolyLine_Strips_TIB_L2.txt',
                'x_off': 2*M_X  STR_L_W,
                'y_off': -STR_L_H,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L3': {
                'file': 'Relative_TPolyLine_Strips_TIB_L3.txt',
                'x_off': M_X,
                'y_off': M_Y,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L4': {
                'file': 'Relative_TPolyLine_Strips_TIB_L4.txt',
                'x_off': 2*M_X  STR_L_W,
                'y_off': M_Y,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
        },
        'TOB': {
            'L1': {
                'file': 'Relative_TPolyLine_Strips_TOB_L1.txt',
                'x_off': 3*M_X  2*STR_L_W,
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L2': {
                'file': 'Relative_TPolyLine_Strips_TOB_L2.txt',
                'x_off': 4*M_X  3*STR_L_W,
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L3': {
                'file': 'Relative_TPolyLine_Strips_TOB_L3.txt',
                'x_off': 3*M_X  2*STR_L_W,
                'y_off': - STR_L_H/2.  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L4': {
                'file': 'Relative_TPolyLine_Strips_TOB_L4.txt',
                'x_off': 4*M_X  3*STR_L_W,
                'y_off': - STR_L_H/2.  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L5': {
                'file': 'Relative_TPolyLine_Strips_TOB_L5.txt',
                'x_off': 3*M_X  2*STR_L_W,
                'y_off': STR_L_H/2.  M_Y  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L6': {
                'file': 'Relative_TPolyLine_Strips_TOB_L6.txt',
                'x_off': 4*M_X  3*STR_L_W,
                'y_off': STR_L_H/2.  M_Y  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
        },
        'TID-': {
            '-1': {
                'file': 'Relative_TPolyLine_Strips_TID_-1.txt',
                'x_off': M_X  (STR_L_W  M_X)/2.,
                'y_off': - STR_L_H - M_Y - STR_TID_D_W,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
            '-2': {
                'file': 'Relative_TPolyLine_Strips_TID_-2.txt',
                'x_off': M_X  STR_L_W/2. - STR_TID_D_W/2.  (STR_L_W  M_X)/2.,
                'y_off': - STR_L_H - M_Y - STR_TID_D_W,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
            '-3': {
                'file': 'Relative_TPolyLine_Strips_TID_-3.txt',
                'x_off': M_X  STR_L_W - STR_TID_D_W  (STR_L_W  M_X)/2.,
                'y_off': - STR_L_H - M_Y - STR_TID_D_W,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
        },
        'TID': {
            '1': {
                'file': 'Relative_TPolyLine_Strips_TID_1.txt',
                'x_off': M_X  (STR_L_W  M_X)/2.,
                'y_off': STR_L_H 2*M_Y,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
            '2': {
                'file': 'Relative_TPolyLine_Strips_TID_2.txt',
                'x_off': M_X  STR_L_W/2. - STR_TID_D_W/2.  (STR_L_W  M_X)/2.,
                'y_off': STR_L_H 2*M_Y,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
            '3': {
                'file': 'Relative_TPolyLine_Strips_TID_3.txt',
                'x_off': M_X  STR_L_W - STR_TID_D_W  (STR_L_W  M_X)/2.,
                'y_off': STR_L_H 2*M_Y,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
        },
        'TEC-': {
            '-1': {
                'file': 'Relative_TPolyLine_Strips_TEC_-1.txt',
                'x_off': M_X,
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-2': {
                'file': 'Relative_TPolyLine_Strips_TEC_-2.txt',
                'x_off': M_X ((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-3': {
                'file': 'Relative_TPolyLine_Strips_TEC_-3.txt',
                'x_off': M_X  2*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-4': {
                'file': 'Relative_TPolyLine_Strips_TEC_-4.txt',
                'x_off': M_X  3*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-5': {
                'file': 'Relative_TPolyLine_Strips_TEC_-5.txt',
                'x_off': M_X  4*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-6': {
                'file': 'Relative_TPolyLine_Strips_TEC_-6.txt',
                'x_off': M_X  5*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-7': {
                'file': 'Relative_TPolyLine_Strips_TEC_-7.txt',
                'x_off': M_X  6*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-8': {
                'file': 'Relative_TPolyLine_Strips_TEC_-8.txt',
                'x_off': M_X  7*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-9': {
                'file': 'Relative_TPolyLine_Strips_TEC_-9.txt',
                'x_off': M_X  8*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
        },
        'TEC': {
            '1': {
                'file': 'Relative_TPolyLine_Strips_TEC_1.txt',
                'x_off': M_X,
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '2': {
                'file': 'Relative_TPolyLine_Strips_TEC_2.txt',
                'x_off': M_X  ((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '3': {
                'file': 'Relative_TPolyLine_Strips_TEC_3.txt',
                'x_off': M_X  2*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '4': {
                'file': 'Relative_TPolyLine_Strips_TEC_4.txt',
                'x_off': M_X  3*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '5': {
                'file': 'Relative_TPolyLine_Strips_TEC_5.txt',
                'x_off': M_X  4*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '6': {
                'file': 'Relative_TPolyLine_Strips_TEC_6.txt',
                'x_off': M_X  5*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '7': {
                'file': 'Relative_TPolyLine_Strips_TEC_7.txt',
                'x_off': M_X  6*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '8': {
                'file': 'Relative_TPolyLine_Strips_TEC_8.txt',
                'x_off': M_X  7*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '9': {
                'file': 'Relative_TPolyLine_Strips_TEC_9.txt',
                'x_off': M_X  8*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
        },
    },
}
# Add text
for layer in TkMap_GEO['pixel']['BPIX']:
    TkMap_GEO['pixel']['BPIX'][layer]['latex'] = {
        'text': 'BPIX 'layer,
        'x': TkMap_GEO['pixel']['BPIX'][layer]['x_off'],
        'y': TkMap_GEO['pixel']['BPIX'][layer]['y_off']  PIX_L_H  M_T,
        'alignment': 11,
    }
for z in ['-', '']:
    TkMap_GEO['pixel']['FPIX'z]['latex'] = {
        'text': 'FPIX',
        'x': TkMap_GEO['pixel']['FPIX'z][z'1']['x_off'],
        'y': TkMap_GEO['pixel']['FPIX'z][z'1']['y_off']  PIX_D_W  M_T,
        'alignment': 11,
    }
    for disc in TkMap_GEO['pixel']['FPIX'z]:
        if disc == 'latex': continue
        TkMap_GEO['pixel']['FPIX'z][disc]['latex'] = {
            'text': disc,
            'x': TkMap_GEO['pixel']['FPIX'z][disc]['x_off']  PIX_D_W,
            'y': TkMap_GEO['pixel']['FPIX'z][disc]['y_off']  PIX_D_W,
            #'alignment': 33,
            'alignment': 23,
        }
for det in ['TIB', 'TOB']:
    for layer in TkMap_GEO['strips'][det]:
        TkMap_GEO['strips'][det][layer]['latex'] = {
            'text': det' 'layer,
            'x': TkMap_GEO['strips'][det][layer]['x_off'],
            'y': TkMap_GEO['strips'][det][layer]['y_off']  STR_L_H  M_T,
            'alignment': 11,
        }
for z in ['-', '']:
    TkMap_GEO['strips']['TEC'z]['latex'] = {
        'text': 'TEC',
        'x': TkMap_GEO['strips']['TEC'z][z'1']['x_off'],
        'y': TkMap_GEO['strips']['TEC'z][z'1']['y_off']  STR_D_W  M_T,
        'alignment': 11,
    }
    for disc in TkMap_GEO['strips']['TEC'z]:
        if disc == 'latex': continue
        TkMap_GEO['strips']['TEC'z][disc]['latex'] = {
            'text': disc,
            'x': TkMap_GEO['strips']['TEC'z][disc]['x_off']  STR_D_W,
            'y': TkMap_GEO['strips']['TEC'z][disc]['y_off']  STR_D_W,
            #'alignment': 33,
            'alignment': 23,
        }
# TID
for z in ['-', '']:
    TkMap_GEO['strips']['TID'z]['latex'] = {
        'text': 'TID',
        #'x': TkMap_GEO['strips']['TID'z][z'1']['x_off'],
        'x': TkMap_GEO['strips']['TID'z][z'1']['x_off'] - 2*M_T,
        #'y': TkMap_GEO['strips']['TID'z][z'1']['y_off']  STR_TID_D_W  M_T,
        'y': TkMap_GEO['strips']['TID'z][z'1']['y_off']  STR_TID_D_W/2.,
        #'alignment': 11,
        'alignment': 32,
    }
    for disc in TkMap_GEO['strips']['TID'z]:
        if disc == 'latex': continue
        TkMap_GEO['strips']['TID'z][disc]['latex'] = {
            'text': disc,
            'x': TkMap_GEO['strips']['TID'z][disc]['x_off']  STR_TID_D_W,
            'y': TkMap_GEO['strips']['TID'z][disc]['y_off']  STR_TID_D_W,
            'alignment': 13,
        }
def read_TPLfile(file_name):
    o_file = open(file_name, 'r')
    lines = o_file.readlines()
    o_file.close()
    TPL_dict = {}
    for line in lines:
        if '#' in line: continue
        splt_line = line.replace('\n', '').split(' ')
        det_id = int(splt_line[0])
        x = []
        y = []
        for idx,coo in enumerate(splt_line[1:]):
            #print(coo)
            try:
                val = float(coo)
                if (idx%2) == 0: 
                    y.append(val)
                else: 
                    x.append(val)
            except ValueError:
                continue
        TPL_dict[det_id] = {}
        TPL_dict[det_id]['x'] = x
        TPL_dict[det_id]['y'] = y
    return TPL_dict
        
    
if __name__ == '__main__':
    import ROOT
    from array import array
    #TPL_dict = read_TPLfile('Relative_TPolyLine_Pixel_phase1_BPIX_L1.txt')
    #print(TPL_dict)
    def test_draw(w, h):
        canvas = ROOT.TCanvas('canvas', 'detector canvas', w, h)
        
        # Load all modules in absolute positions
        # Find max x and y to rescale later for window
        all_modules = {}
        all_text = {}
        x_max = -9999.
        y_max = -9999.
        x_min = 9999.
        y_min = 9999.
        for det in TkMap_GEO:
            for sub in TkMap_GEO[det]:
                for part in TkMap_GEO[det][sub]:
                    if part == 'latex':
                        all_text[det'_'sub] = TkMap_GEO[det][sub][part]
                        continue
                    if 'latex' in TkMap_GEO[det][sub][part]:
                        all_text[det'_'sub'_'part] = TkMap_GEO[det][sub][part]['latex']
                    TPL_dict = read_TPLfile(TkMap_GEO[det][sub][part]['file'])
                    for module in TPL_dict:
                        x_canv = []
                        y_canv = []
                        for idx in range(len(TPL_dict[module]['x'])):
                            x_canv.append(TPL_dict[module]['x'][idx]*TkMap_GEO[det][sub][part]['x_scale']  TkMap_GEO[det][sub][part]['x_off'])
                            y_canv.append(TPL_dict[module]['y'][idx]*TkMap_GEO[det][sub][part]['y_scale']  TkMap_GEO[det][sub][part]['y_off'])
                        if max(x_canv) > x_max: x_max = max(x_canv)
                        if max(y_canv) > y_max: y_max = max(y_canv)
                        if min(x_canv) < x_min: x_min = min(x_canv)
                        if min(y_canv) < y_min: y_min = min(y_canv)
                        TPL_dict[module]['x'] = x_canv
                        TPL_dict[module]['y'] = y_canv
                    all_modules.update(TPL_dict)
        r_margin = 1
        l_margin = 1
        t_margin = 1
        b_margin = 1
        x_max = r_margin
        x_min -= l_margin
        y_max = t_margin
        y_min -= b_margin
        x_range = x_max - x_min
        y_range = y_max - y_min
        if (x_range  0.)/(w  0.) > (y_range  0.)/(h  0.):
            x_scale = x_range
            y_scale = (h  0.)/(w  0.)*x_range
        else:
            y_scale = y_range
            x_scale = (w  0.)/(h  0.)*y_range
        TPL = {} 
        for module in all_modules:
            x = array('d', [])
            y = array('d', [])
            for idx in range(len(all_modules[module]['x'])):
                x.append((all_modules[module]['x'][idx] - x_min  0.)/(x_scale  0.))
                y.append((all_modules[module]['y'][idx] - y_min  0.)/(y_scale  0.))
            # Begin point is end point
            x.append((all_modules[module]['x'][0] - x_min  0.)/(x_scale  0.))
            y.append((all_modules[module]['y'][0] - y_min  0.)/(y_scale  0.))
            #print(x, y)
            TPL[module] = ROOT.TPolyLine(len(x), x, y) 
            #TPL[module].SetFillColor(1)
            TPL[module].SetLineColor(1)
            TPL[module].Draw('f')
            TPL[module].Draw()
        TL = ROOT.TLatex()
        TL.SetTextSize(0.025)
        for key in all_text:
            x = (all_text[key]['x'] - x_min  0.)/(x_scale  0.)
            y = (all_text[key]['y'] - y_min  0.)/(y_scale  0.)
            TL.SetTextAlign(all_text[key]['alignment'])
            TL.DrawLatex(x, y, all_text[key]['text'])
        #TL.SetTextSize(0.025)
        #TL.SetTextAlign(11)
        #TL.DrawLatex(0.1, 0.1, 'bottom')
        #TL.SetTextAlign(13)
        #TL.DrawLatex(0.1, 0.1, 'top')
        canvas.Update() 
        raw_input('exit')
   
    test_draw(1500, 750)
    #test_draw(125, 500)
    #test_draw(500, 500)
    #raw_input('exit')
 
        
"
-------------------------------------------------------------------------
"Recom
PRs: 31376, 31284"
-------------------------------------------------------------------------
=========================================================================
"M_X = 1.
M_Y = 2.5
M_T = .2
PIX_D_W = 10.
PIX_L_W = 20.
PIX_L_H = 10.
STR_D_W = 10.
STR_TID_D_W = 5.5
STR_L_W = 24.
STR_L_H = 12.
TkMap_GEO = {
    'pixel' : {
        'BPIX': {
            'L1': {
                'file': 'Relative_TPolyLine_Pixel_phase1_BPIX_L1.txt',
                'x_off': -2*PIX_L_W - 2*M_X,
                'y_off': -PIX_L_H, 
                'x_scale': PIX_L_W,
                'y_scale': PIX_L_H,
            },
            'L2': {
                'file': 'Relative_TPolyLine_Pixel_phase1_BPIX_L2.txt',
                'x_off': -PIX_L_W - M_X,
                'y_off': -PIX_L_H, 
                'x_scale': PIX_L_W,
                'y_scale': PIX_L_H,
            },
            'L3': {
                'file': 'Relative_TPolyLine_Pixel_phase1_BPIX_L3.txt',
                'x_off': -2*PIX_L_W - 2*M_X,
                'y_off': M_Y,
                'x_scale': PIX_L_W,
                'y_scale': PIX_L_H,
            },
            'L4': {
                'file': 'Relative_TPolyLine_Pixel_phase1_BPIX_L4.txt',
                'x_off': -PIX_L_W - M_X,
                'y_off': M_Y,
                'x_scale': PIX_L_W,
                'y_scale': PIX_L_H,
            },
        },
        'FPIX-': {
            '-1': {
                'file': 'Relative_TPolyLine_Pixel_phase1_FPIX_-1.txt',
                'x_off': -2*PIX_L_W - 2*M_X,
                'y_off': -PIX_L_H - M_Y - PIX_D_W, 
                'x_scale': PIX_D_W,
                'y_scale': PIX_D_W,
            },
            '-2': {
                'file': 'Relative_TPolyLine_Pixel_phase1_FPIX_-2.txt',
                'x_off': -PIX_L_W - M_X - PIX_L_W/4. - M_X/2.,
                'y_off': -PIX_L_H - M_Y - PIX_D_W, 
                'x_scale': PIX_D_W,
                'y_scale': PIX_D_W,
            },
            '-3': {
                'file': 'Relative_TPolyLine_Pixel_phase1_FPIX_-3.txt',
                'x_off': -PIX_D_W - M_X,
                'y_off': -PIX_L_H - M_Y - PIX_D_W, 
                'x_scale': PIX_D_W,
                'y_scale': PIX_D_W,
            },
        },
        'FPIX': {
            '1': {
                'file': 'Relative_TPolyLine_Pixel_phase1_FPIX_1.txt',
                'x_off': -2*PIX_L_W - 2*M_X,
                'y_off': PIX_L_H  2*M_Y, 
                'x_scale': PIX_D_W,
                'y_scale': PIX_D_W,
            },
            '2': {
                'file': 'Relative_TPolyLine_Pixel_phase1_FPIX_2.txt',
                'x_off': -PIX_L_W - M_X - PIX_L_W/4. - M_X/2.,
                'y_off': PIX_L_H  2*M_Y, 
                'x_scale': PIX_D_W,
                'y_scale': PIX_D_W,
            },
            '3': {
                'file': 'Relative_TPolyLine_Pixel_phase1_FPIX_3.txt',
                'x_off': -PIX_D_W- M_X,
                'y_off': PIX_L_H  2*M_Y, 
                'x_scale': PIX_D_W,
                'y_scale': PIX_D_W,
            },
        }, 
    },
    'strips': {
        'TIB': {
            'L1': {
                'file': 'Relative_TPolyLine_Strips_TIB_L1.txt',
                'x_off': M_X,
                'y_off': -STR_L_H,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L2': {
                'file': 'Relative_TPolyLine_Strips_TIB_L2.txt',
                'x_off': 2*M_X  STR_L_W,
                'y_off': -STR_L_H,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L3': {
                'file': 'Relative_TPolyLine_Strips_TIB_L3.txt',
                'x_off': M_X,
                'y_off': M_Y,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L4': {
                'file': 'Relative_TPolyLine_Strips_TIB_L4.txt',
                'x_off': 2*M_X  STR_L_W,
                'y_off': M_Y,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
        },
        'TOB': {
            'L1': {
                'file': 'Relative_TPolyLine_Strips_TOB_L1.txt',
                'x_off': 3*M_X  2*STR_L_W,
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L2': {
                'file': 'Relative_TPolyLine_Strips_TOB_L2.txt',
                'x_off': 4*M_X  3*STR_L_W,
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L3': {
                'file': 'Relative_TPolyLine_Strips_TOB_L3.txt',
                'x_off': 3*M_X  2*STR_L_W,
                'y_off': - STR_L_H/2.  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L4': {
                'file': 'Relative_TPolyLine_Strips_TOB_L4.txt',
                'x_off': 4*M_X  3*STR_L_W,
                'y_off': - STR_L_H/2.  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L5': {
                'file': 'Relative_TPolyLine_Strips_TOB_L5.txt',
                'x_off': 3*M_X  2*STR_L_W,
                'y_off': STR_L_H/2.  M_Y  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L6': {
                'file': 'Relative_TPolyLine_Strips_TOB_L6.txt',
                'x_off': 4*M_X  3*STR_L_W,
                'y_off': STR_L_H/2.  M_Y  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
        },
        'TID-': {
            '-1': {
                'file': 'Relative_TPolyLine_Strips_TID_-1.txt',
                'x_off': M_X  (STR_L_W  M_X)/2.,
                'y_off': - STR_L_H - M_Y - STR_TID_D_W,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
            '-2': {
                'file': 'Relative_TPolyLine_Strips_TID_-2.txt',
                'x_off': M_X  STR_L_W/2. - STR_TID_D_W/2.  (STR_L_W  M_X)/2.,
                'y_off': - STR_L_H - M_Y - STR_TID_D_W,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
            '-3': {
                'file': 'Relative_TPolyLine_Strips_TID_-3.txt',
                'x_off': M_X  STR_L_W - STR_TID_D_W  (STR_L_W  M_X)/2.,
                'y_off': - STR_L_H - M_Y - STR_TID_D_W,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
        },
        'TID': {
            '1': {
                'file': 'Relative_TPolyLine_Strips_TID_1.txt',
                'x_off': M_X  (STR_L_W  M_X)/2.,
                'y_off': STR_L_H 2*M_Y,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
            '2': {
                'file': 'Relative_TPolyLine_Strips_TID_2.txt',
                'x_off': M_X  STR_L_W/2. - STR_TID_D_W/2.  (STR_L_W  M_X)/2.,
                'y_off': STR_L_H 2*M_Y,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
            '3': {
                'file': 'Relative_TPolyLine_Strips_TID_3.txt',
                'x_off': M_X  STR_L_W - STR_TID_D_W  (STR_L_W  M_X)/2.,
                'y_off': STR_L_H 2*M_Y,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
        },
        'TEC-': {
            '-1': {
                'file': 'Relative_TPolyLine_Strips_TEC_-1.txt',
                'x_off': M_X,
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-2': {
                'file': 'Relative_TPolyLine_Strips_TEC_-2.txt',
                'x_off': M_X ((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-3': {
                'file': 'Relative_TPolyLine_Strips_TEC_-3.txt',
                'x_off': M_X  2*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-4': {
                'file': 'Relative_TPolyLine_Strips_TEC_-4.txt',
                'x_off': M_X  3*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-5': {
                'file': 'Relative_TPolyLine_Strips_TEC_-5.txt',
                'x_off': M_X  4*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-6': {
                'file': 'Relative_TPolyLine_Strips_TEC_-6.txt',
                'x_off': M_X  5*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-7': {
                'file': 'Relative_TPolyLine_Strips_TEC_-7.txt',
                'x_off': M_X  6*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-8': {
                'file': 'Relative_TPolyLine_Strips_TEC_-8.txt',
                'x_off': M_X  7*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-9': {
                'file': 'Relative_TPolyLine_Strips_TEC_-9.txt',
                'x_off': M_X  8*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
        },
        'TEC': {
            '1': {
                'file': 'Relative_TPolyLine_Strips_TEC_1.txt',
                'x_off': M_X,
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '2': {
                'file': 'Relative_TPolyLine_Strips_TEC_2.txt',
                'x_off': M_X  ((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '3': {
                'file': 'Relative_TPolyLine_Strips_TEC_3.txt',
                'x_off': M_X  2*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '4': {
                'file': 'Relative_TPolyLine_Strips_TEC_4.txt',
                'x_off': M_X  3*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '5': {
                'file': 'Relative_TPolyLine_Strips_TEC_5.txt',
                'x_off': M_X  4*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '6': {
                'file': 'Relative_TPolyLine_Strips_TEC_6.txt',
                'x_off': M_X  5*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '7': {
                'file': 'Relative_TPolyLine_Strips_TEC_7.txt',
                'x_off': M_X  6*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '8': {
                'file': 'Relative_TPolyLine_Strips_TEC_8.txt',
                'x_off': M_X  7*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '9': {
                'file': 'Relative_TPolyLine_Strips_TEC_9.txt',
                'x_off': M_X  8*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
        },
    },
}
# Add text
for layer in TkMap_GEO['pixel']['BPIX']:
    TkMap_GEO['pixel']['BPIX'][layer]['latex'] = {
        'text': 'BPIX 'layer,
        'x': TkMap_GEO['pixel']['BPIX'][layer]['x_off'],
        'y': TkMap_GEO['pixel']['BPIX'][layer]['y_off']  PIX_L_H  M_T,
        'alignment': 11,
    }
for z in ['-', '']:
    TkMap_GEO['pixel']['FPIX'z]['latex'] = {
        'text': 'FPIX',
        'x': TkMap_GEO['pixel']['FPIX'z][z'1']['x_off'],
        'y': TkMap_GEO['pixel']['FPIX'z][z'1']['y_off']  PIX_D_W  M_T,
        'alignment': 11,
    }
    for disc in TkMap_GEO['pixel']['FPIX'z]:
        if disc == 'latex': continue
        TkMap_GEO['pixel']['FPIX'z][disc]['latex'] = {
            'text': disc,
            'x': TkMap_GEO['pixel']['FPIX'z][disc]['x_off']  PIX_D_W,
            'y': TkMap_GEO['pixel']['FPIX'z][disc]['y_off']  PIX_D_W,
            #'alignment': 33,
            'alignment': 23,
        }
for det in ['TIB', 'TOB']:
    for layer in TkMap_GEO['strips'][det]:
        TkMap_GEO['strips'][det][layer]['latex'] = {
            'text': det' 'layer,
            'x': TkMap_GEO['strips'][det][layer]['x_off'],
            'y': TkMap_GEO['strips'][det][layer]['y_off']  STR_L_H  M_T,
            'alignment': 11,
        }
for z in ['-', '']:
    TkMap_GEO['strips']['TEC'z]['latex'] = {
        'text': 'TEC',
        'x': TkMap_GEO['strips']['TEC'z][z'1']['x_off'],
        'y': TkMap_GEO['strips']['TEC'z][z'1']['y_off']  STR_D_W  M_T,
        'alignment': 11,
    }
    for disc in TkMap_GEO['strips']['TEC'z]:
        if disc == 'latex': continue
        TkMap_GEO['strips']['TEC'z][disc]['latex'] = {
            'text': disc,
            'x': TkMap_GEO['strips']['TEC'z][disc]['x_off']  STR_D_W,
            'y': TkMap_GEO['strips']['TEC'z][disc]['y_off']  STR_D_W,
            #'alignment': 33,
            'alignment': 23,
        }
# TID
for z in ['-', '']:
    TkMap_GEO['strips']['TID'z]['latex'] = {
        'text': 'TID',
        #'x': TkMap_GEO['strips']['TID'z][z'1']['x_off'],
        'x': TkMap_GEO['strips']['TID'z][z'1']['x_off'] - 2*M_T,
        #'y': TkMap_GEO['strips']['TID'z][z'1']['y_off']  STR_TID_D_W  M_T,
        'y': TkMap_GEO['strips']['TID'z][z'1']['y_off']  STR_TID_D_W/2.,
        #'alignment': 11,
        'alignment': 32,
    }
    for disc in TkMap_GEO['strips']['TID'z]:
        if disc == 'latex': continue
        TkMap_GEO['strips']['TID'z][disc]['latex'] = {
            'text': disc,
            'x': TkMap_GEO['strips']['TID'z][disc]['x_off']  STR_TID_D_W,
            'y': TkMap_GEO['strips']['TID'z][disc]['y_off']  STR_TID_D_W,
            'alignment': 13,
        }
def read_TPLfile(file_name):
    o_file = open(file_name, 'r')
    lines = o_file.readlines()
    o_file.close()
    TPL_dict = {}
    for line in lines:
        if '#' in line: continue
        splt_line = line.replace('\n', '').split(' ')
        det_id = int(splt_line[0])
        x = []
        y = []
        for idx,coo in enumerate(splt_line[1:]):
            #print(coo)
            try:
                val = float(coo)
                if (idx%2) == 0: 
                    y.append(val)
                else: 
                    x.append(val)
            except ValueError:
                continue
        TPL_dict[det_id] = {}
        TPL_dict[det_id]['x'] = x
        TPL_dict[det_id]['y'] = y
    return TPL_dict
        
    
if __name__ == '__main__':
    import ROOT
    from array import array
    #TPL_dict = read_TPLfile('Relative_TPolyLine_Pixel_phase1_BPIX_L1.txt')
    #print(TPL_dict)
    def test_draw(w, h):
        canvas = ROOT.TCanvas('canvas', 'detector canvas', w, h)
        
        # Load all modules in absolute positions
        # Find max x and y to rescale later for window
        all_modules = {}
        all_text = {}
        x_max = -9999.
        y_max = -9999.
        x_min = 9999.
        y_min = 9999.
        for det in TkMap_GEO:
            for sub in TkMap_GEO[det]:
                for part in TkMap_GEO[det][sub]:
                    if part == 'latex':
                        all_text[det'_'sub] = TkMap_GEO[det][sub][part]
                        continue
                    if 'latex' in TkMap_GEO[det][sub][part]:
                        all_text[det'_'sub'_'part] = TkMap_GEO[det][sub][part]['latex']
                    TPL_dict = read_TPLfile(TkMap_GEO[det][sub][part]['file'])
                    for module in TPL_dict:
                        x_canv = []
                        y_canv = []
                        for idx in range(len(TPL_dict[module]['x'])):
                            x_canv.append(TPL_dict[module]['x'][idx]*TkMap_GEO[det][sub][part]['x_scale']  TkMap_GEO[det][sub][part]['x_off'])
                            y_canv.append(TPL_dict[module]['y'][idx]*TkMap_GEO[det][sub][part]['y_scale']  TkMap_GEO[det][sub][part]['y_off'])
                        if max(x_canv) > x_max: x_max = max(x_canv)
                        if max(y_canv) > y_max: y_max = max(y_canv)
                        if min(x_canv) < x_min: x_min = min(x_canv)
                        if min(y_canv) < y_min: y_min = min(y_canv)
                        TPL_dict[module]['x'] = x_canv
                        TPL_dict[module]['y'] = y_canv
                    all_modules.update(TPL_dict)
        r_margin = 1
        l_margin = 1
        t_margin = 1
        b_margin = 1
        x_max = r_margin
        x_min -= l_margin
        y_max = t_margin
        y_min -= b_margin
        x_range = x_max - x_min
        y_range = y_max - y_min
        if (x_range  0.)/(w  0.) > (y_range  0.)/(h  0.):
            x_scale = x_range
            y_scale = (h  0.)/(w  0.)*x_range
        else:
            y_scale = y_range
            x_scale = (w  0.)/(h  0.)*y_range
        TPL = {} 
        for module in all_modules:
            x = array('d', [])
            y = array('d', [])
            for idx in range(len(all_modules[module]['x'])):
                x.append((all_modules[module]['x'][idx] - x_min  0.)/(x_scale  0.))
                y.append((all_modules[module]['y'][idx] - y_min  0.)/(y_scale  0.))
            # Begin point is end point
            x.append((all_modules[module]['x'][0] - x_min  0.)/(x_scale  0.))
            y.append((all_modules[module]['y'][0] - y_min  0.)/(y_scale  0.))
            #print(x, y)
            TPL[module] = ROOT.TPolyLine(len(x), x, y) 
            #TPL[module].SetFillColor(1)
            TPL[module].SetLineColor(1)
            TPL[module].Draw('f')
            TPL[module].Draw()
        TL = ROOT.TLatex()
        TL.SetTextSize(0.025)
        for key in all_text:
            x = (all_text[key]['x'] - x_min  0.)/(x_scale  0.)
            y = (all_text[key]['y'] - y_min  0.)/(y_scale  0.)
            TL.SetTextAlign(all_text[key]['alignment'])
            TL.DrawLatex(x, y, all_text[key]['text'])
        #TL.SetTextSize(0.025)
        #TL.SetTextAlign(11)
        #TL.DrawLatex(0.1, 0.1, 'bottom')
        #TL.SetTextAlign(13)
        #TL.DrawLatex(0.1, 0.1, 'top')
        canvas.Update() 
        raw_input('exit')
   
    test_draw(1500, 750)
    #test_draw(125, 500)
    #test_draw(500, 500)
    #raw_input('exit')
 
        
"
-------------------------------------------------------------------------
"```python
        'y_off': PIX_L_H + 2*M_Y, 
        'y_off': PIX_L_H + 2*M_Y, 
        'y_off': PIX_L_H + 2*M_Y, 
        'y_off': STR_L_H, 
        'x_off': 2*M_X + STR_L_W, 
        'x_off': STR_L_H, 
        'x_off': 2*M_X + STR_L_W, 
        'y_off': STR_L_H + M_Y, 
        'y_off': STR_L_H + M_Y, 
        'y_off': STR_L_H + M_Y, 
            'x': TkMap_GEO['strips'][det][layer]['x_off'],
            'y': TkMap_GEO['strips'][det][layer]['y_off'] + STR_L_H + M_T,
            'text': det + ' ' + layer,
            'x': TkMap_GEO['strips']['TEC' + z][z + '1']['x_off'],
            'y': TkMap_GEO['strips']['TEC' + z][z + '1']['y_off'] + STR_D_W + M_T,
            'x': TkMap_GEO['strips']['TEC' + z][disc]['x_off'] + STR_D_W,
            'y': TkMap_GEO['strips']['TEC' + z][disc]['y_off'] + STR_D_W,
        'x_off': TkMap_GEO['strips']['TID' + z][z + '1']['x_off'] - 2*M_T,
        'y_off': TkMap_GEO['strips']['TID' + z][z + '1']['y_off'] + STR_TID_D_W/2.,
        'alignment': 32,
        'x_off': TkMap_GEO['strips']['TID' + z][disc]['x_off'] + STR_TID_D_W,
        'y_off': TkMap_GEO['strips']['TID' + z][disc]['y_off'] + STR_TID_D_W,
```"
-------------------------------------------------------------------------
"M_X = 1.
M_Y = 2.5
M_T = .2
PIX_D_W = 10.
PIX_L_W = 20.
PIX_L_H = 10.
STR_D_W = 10.
STR_TID_D_W = 5.5
STR_L_W = 24.
STR_L_H = 12.
TkMap_GEO = {
    'pixel' : {
        'BPIX': {
            'L1': {
                'file': 'Relative_TPolyLine_Pixel_phase1_BPIX_L1.txt',
                'x_off': -2*PIX_L_W - 2*M_X,
                'y_off': -PIX_L_H, 
                'x_scale': PIX_L_W,
                'y_scale': PIX_L_H,
            },
            'L2': {
                'file': 'Relative_TPolyLine_Pixel_phase1_BPIX_L2.txt',
                'x_off': -PIX_L_W - M_X,
                'y_off': -PIX_L_H, 
                'x_scale': PIX_L_W,
                'y_scale': PIX_L_H,
            },
            'L3': {
                'file': 'Relative_TPolyLine_Pixel_phase1_BPIX_L3.txt',
                'x_off': -2*PIX_L_W - 2*M_X,
                'y_off': M_Y,
                'x_scale': PIX_L_W,
                'y_scale': PIX_L_H,
            },
            'L4': {
                'file': 'Relative_TPolyLine_Pixel_phase1_BPIX_L4.txt',
                'x_off': -PIX_L_W - M_X,
                'y_off': M_Y,
                'x_scale': PIX_L_W,
                'y_scale': PIX_L_H,
            },
        },
        'FPIX-': {
            '-1': {
                'file': 'Relative_TPolyLine_Pixel_phase1_FPIX_-1.txt',
                'x_off': -2*PIX_L_W - 2*M_X,
                'y_off': -PIX_L_H - M_Y - PIX_D_W, 
                'x_scale': PIX_D_W,
                'y_scale': PIX_D_W,
            },
            '-2': {
                'file': 'Relative_TPolyLine_Pixel_phase1_FPIX_-2.txt',
                'x_off': -PIX_L_W - M_X - PIX_L_W/4. - M_X/2.,
                'y_off': -PIX_L_H - M_Y - PIX_D_W, 
                'x_scale': PIX_D_W,
                'y_scale': PIX_D_W,
            },
            '-3': {
                'file': 'Relative_TPolyLine_Pixel_phase1_FPIX_-3.txt',
                'x_off': -PIX_D_W - M_X,
                'y_off': -PIX_L_H - M_Y - PIX_D_W, 
                'x_scale': PIX_D_W,
                'y_scale': PIX_D_W,
            },
        },
        'FPIX': {
            '1': {
                'file': 'Relative_TPolyLine_Pixel_phase1_FPIX_1.txt',
                'x_off': -2*PIX_L_W - 2*M_X,
                'y_off': PIX_L_H  2*M_Y, 
                'x_scale': PIX_D_W,
                'y_scale': PIX_D_W,
            },
            '2': {
                'file': 'Relative_TPolyLine_Pixel_phase1_FPIX_2.txt',
                'x_off': -PIX_L_W - M_X - PIX_L_W/4. - M_X/2.,
                'y_off': PIX_L_H  2*M_Y, 
                'x_scale': PIX_D_W,
                'y_scale': PIX_D_W,
            },
            '3': {
                'file': 'Relative_TPolyLine_Pixel_phase1_FPIX_3.txt',
                'x_off': -PIX_D_W- M_X,
                'y_off': PIX_L_H  2*M_Y, 
                'x_scale': PIX_D_W,
                'y_scale': PIX_D_W,
            },
        }, 
    },
    'strips': {
        'TIB': {
            'L1': {
                'file': 'Relative_TPolyLine_Strips_TIB_L1.txt',
                'x_off': M_X,
                'y_off': -STR_L_H,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L2': {
                'file': 'Relative_TPolyLine_Strips_TIB_L2.txt',
                'x_off': 2*M_X  STR_L_W,
                'y_off': -STR_L_H,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L3': {
                'file': 'Relative_TPolyLine_Strips_TIB_L3.txt',
                'x_off': M_X,
                'y_off': M_Y,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L4': {
                'file': 'Relative_TPolyLine_Strips_TIB_L4.txt',
                'x_off': 2*M_X  STR_L_W,
                'y_off': M_Y,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
        },
        'TOB': {
            'L1': {
                'file': 'Relative_TPolyLine_Strips_TOB_L1.txt',
                'x_off': 3*M_X  2*STR_L_W,
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L2': {
                'file': 'Relative_TPolyLine_Strips_TOB_L2.txt',
                'x_off': 4*M_X  3*STR_L_W,
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L3': {
                'file': 'Relative_TPolyLine_Strips_TOB_L3.txt',
                'x_off': 3*M_X  2*STR_L_W,
                'y_off': - STR_L_H/2.  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L4': {
                'file': 'Relative_TPolyLine_Strips_TOB_L4.txt',
                'x_off': 4*M_X  3*STR_L_W,
                'y_off': - STR_L_H/2.  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L5': {
                'file': 'Relative_TPolyLine_Strips_TOB_L5.txt',
                'x_off': 3*M_X  2*STR_L_W,
                'y_off': STR_L_H/2.  M_Y  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
            'L6': {
                'file': 'Relative_TPolyLine_Strips_TOB_L6.txt',
                'x_off': 4*M_X  3*STR_L_W,
                'y_off': STR_L_H/2.  M_Y  M_Y/2.,
                'x_scale': STR_L_W,
                'y_scale': STR_L_H,
            },
        },
        'TID-': {
            '-1': {
                'file': 'Relative_TPolyLine_Strips_TID_-1.txt',
                'x_off': M_X  (STR_L_W  M_X)/2.,
                'y_off': - STR_L_H - M_Y - STR_TID_D_W,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
            '-2': {
                'file': 'Relative_TPolyLine_Strips_TID_-2.txt',
                'x_off': M_X  STR_L_W/2. - STR_TID_D_W/2.  (STR_L_W  M_X)/2.,
                'y_off': - STR_L_H - M_Y - STR_TID_D_W,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
            '-3': {
                'file': 'Relative_TPolyLine_Strips_TID_-3.txt',
                'x_off': M_X  STR_L_W - STR_TID_D_W  (STR_L_W  M_X)/2.,
                'y_off': - STR_L_H - M_Y - STR_TID_D_W,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
        },
        'TID': {
            '1': {
                'file': 'Relative_TPolyLine_Strips_TID_1.txt',
                'x_off': M_X  (STR_L_W  M_X)/2.,
                'y_off': STR_L_H 2*M_Y,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
            '2': {
                'file': 'Relative_TPolyLine_Strips_TID_2.txt',
                'x_off': M_X  STR_L_W/2. - STR_TID_D_W/2.  (STR_L_W  M_X)/2.,
                'y_off': STR_L_H 2*M_Y,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
            '3': {
                'file': 'Relative_TPolyLine_Strips_TID_3.txt',
                'x_off': M_X  STR_L_W - STR_TID_D_W  (STR_L_W  M_X)/2.,
                'y_off': STR_L_H 2*M_Y,
                'x_scale': STR_TID_D_W,
                'y_scale': STR_TID_D_W,
            },
        },
        'TEC-': {
            '-1': {
                'file': 'Relative_TPolyLine_Strips_TEC_-1.txt',
                'x_off': M_X,
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-2': {
                'file': 'Relative_TPolyLine_Strips_TEC_-2.txt',
                'x_off': M_X ((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-3': {
                'file': 'Relative_TPolyLine_Strips_TEC_-3.txt',
                'x_off': M_X  2*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-4': {
                'file': 'Relative_TPolyLine_Strips_TEC_-4.txt',
                'x_off': M_X  3*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-5': {
                'file': 'Relative_TPolyLine_Strips_TEC_-5.txt',
                'x_off': M_X  4*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-6': {
                'file': 'Relative_TPolyLine_Strips_TEC_-6.txt',
                'x_off': M_X  5*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-7': {
                'file': 'Relative_TPolyLine_Strips_TEC_-7.txt',
                'x_off': M_X  6*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-8': {
                'file': 'Relative_TPolyLine_Strips_TEC_-8.txt',
                'x_off': M_X  7*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '-9': {
                'file': 'Relative_TPolyLine_Strips_TEC_-9.txt',
                'x_off': M_X  8*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': -STR_L_H - M_Y - STR_L_H/2.  M_Y/2. - M_Y - STR_D_W,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
        },
        'TEC': {
            '1': {
                'file': 'Relative_TPolyLine_Strips_TEC_1.txt',
                'x_off': M_X,
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '2': {
                'file': 'Relative_TPolyLine_Strips_TEC_2.txt',
                'x_off': M_X  ((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '3': {
                'file': 'Relative_TPolyLine_Strips_TEC_3.txt',
                'x_off': M_X  2*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '4': {
                'file': 'Relative_TPolyLine_Strips_TEC_4.txt',
                'x_off': M_X  3*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '5': {
                'file': 'Relative_TPolyLine_Strips_TEC_5.txt',
                'x_off': M_X  4*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '6': {
                'file': 'Relative_TPolyLine_Strips_TEC_6.txt',
                'x_off': M_X  5*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '7': {
                'file': 'Relative_TPolyLine_Strips_TEC_7.txt',
                'x_off': M_X  6*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '8': {
                'file': 'Relative_TPolyLine_Strips_TEC_8.txt',
                'x_off': M_X  7*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
            '9': {
                'file': 'Relative_TPolyLine_Strips_TEC_9.txt',
                'x_off': M_X  8*((4*STR_L_W  3*M_X - 9*STR_D_W)/8.  STR_D_W),
                'y_off': STR_L_H  STR_L_H/2.  M_Y/2.  2*M_Y,
                'x_scale': STR_D_W,
                'y_scale': STR_D_W,
            },
        },
    },
}
# Add text
for layer in TkMap_GEO['pixel']['BPIX']:
    TkMap_GEO['pixel']['BPIX'][layer]['latex'] = {
        'text': 'BPIX 'layer,
        'x': TkMap_GEO['pixel']['BPIX'][layer]['x_off'],
        'y': TkMap_GEO['pixel']['BPIX'][layer]['y_off']  PIX_L_H  M_T,
        'alignment': 11,
    }
for z in ['-', '']:
    TkMap_GEO['pixel']['FPIX'z]['latex'] = {
        'text': 'FPIX',
        'x': TkMap_GEO['pixel']['FPIX'z][z'1']['x_off'],
        'y': TkMap_GEO['pixel']['FPIX'z][z'1']['y_off']  PIX_D_W  M_T,
        'alignment': 11,
    }
    for disc in TkMap_GEO['pixel']['FPIX'z]:
        if disc == 'latex': continue
        TkMap_GEO['pixel']['FPIX'z][disc]['latex'] = {
            'text': disc,
            'x': TkMap_GEO['pixel']['FPIX'z][disc]['x_off']  PIX_D_W,
            'y': TkMap_GEO['pixel']['FPIX'z][disc]['y_off']  PIX_D_W,
            #'alignment': 33,
            'alignment': 23,
        }
for det in ['TIB', 'TOB']:
    for layer in TkMap_GEO['strips'][det]:
        TkMap_GEO['strips'][det][layer]['latex'] = {
            'text': det' 'layer,
            'x': TkMap_GEO['strips'][det][layer]['x_off'],
            'y': TkMap_GEO['strips'][det][layer]['y_off']  STR_L_H  M_T,
            'alignment': 11,
        }
for z in ['-', '']:
    TkMap_GEO['strips']['TEC'z]['latex'] = {
        'text': 'TEC',
        'x': TkMap_GEO['strips']['TEC'z][z'1']['x_off'],
        'y': TkMap_GEO['strips']['TEC'z][z'1']['y_off']  STR_D_W  M_T,
        'alignment': 11,
    }
    for disc in TkMap_GEO['strips']['TEC'z]:
        if disc == 'latex': continue
        TkMap_GEO['strips']['TEC'z][disc]['latex'] = {
            'text': disc,
            'x': TkMap_GEO['strips']['TEC'z][disc]['x_off']  STR_D_W,
            'y': TkMap_GEO['strips']['TEC'z][disc]['y_off']  STR_D_W,
            #'alignment': 33,
            'alignment': 23,
        }
# TID
for z in ['-', '']:
    TkMap_GEO['strips']['TID'z]['latex'] = {
        'text': 'TID',
        #'x': TkMap_GEO['strips']['TID'z][z'1']['x_off'],
        'x': TkMap_GEO['strips']['TID'z][z'1']['x_off'] - 2*M_T,
        #'y': TkMap_GEO['strips']['TID'z][z'1']['y_off']  STR_TID_D_W  M_T,
        'y': TkMap_GEO['strips']['TID'z][z'1']['y_off']  STR_TID_D_W/2.,
        #'alignment': 11,
        'alignment': 32,
    }
    for disc in TkMap_GEO['strips']['TID'z]:
        if disc == 'latex': continue
        TkMap_GEO['strips']['TID'z][disc]['latex'] = {
            'text': disc,
            'x': TkMap_GEO['strips']['TID'z][disc]['x_off']  STR_TID_D_W,
            'y': TkMap_GEO['strips']['TID'z][disc]['y_off']  STR_TID_D_W,
            'alignment': 13,
        }
def read_TPLfile(file_name):
    o_file = open(file_name, 'r')
    lines = o_file.readlines()
    o_file.close()
    TPL_dict = {}
    for line in lines:
        if '#' in line: continue
        splt_line = line.replace('\n', '').split(' ')
        det_id = int(splt_line[0])
        x = []
        y = []
        for idx,coo in enumerate(splt_line[1:]):
            #print(coo)
            try:
                val = float(coo)
                if (idx%2) == 0: 
                    y.append(val)
                else: 
                    x.append(val)
            except ValueError:
                continue
        TPL_dict[det_id] = {}
        TPL_dict[det_id]['x'] = x
        TPL_dict[det_id]['y'] = y
    return TPL_dict
        
    
if __name__ == '__main__':
    import ROOT
    from array import array
    #TPL_dict = read_TPLfile('Relative_TPolyLine_Pixel_phase1_BPIX_L1.txt')
    #print(TPL_dict)
    def test_draw(w, h):
        canvas = ROOT.TCanvas('canvas', 'detector canvas', w, h)
        
        # Load all modules in absolute positions
        # Find max x and y to rescale later for window
        all_modules = {}
        all_text = {}
        x_max = -9999.
        y_max = -9999.
        x_min = 9999.
        y_min = 9999.
        for det in TkMap_GEO:
            for sub in TkMap_GEO[det]:
                for part in TkMap_GEO[det][sub]:
                    if part == 'latex':
                        all_text[det'_'sub] = TkMap_GEO[det][sub][part]
                        continue
                    if 'latex' in TkMap_GEO[det][sub][part]:
                        all_text[det'_'sub'_'part] = TkMap_GEO[det][sub][part]['latex']
                    TPL_dict = read_TPLfile(TkMap_GEO[det][sub][part]['file'])
                    for module in TPL_dict:
                        x_canv = []
                        y_canv = []
                        for idx in range(len(TPL_dict[module]['x'])):
                            x_canv.append(TPL_dict[module]['x'][idx]*TkMap_GEO[det][sub][part]['x_scale']  TkMap_GEO[det][sub][part]['x_off'])
                            y_canv.append(TPL_dict[module]['y'][idx]*TkMap_GEO[det][sub][part]['y_scale']  TkMap_GEO[det][sub][part]['y_off'])
                        if max(x_canv) > x_max: x_max = max(x_canv)
                        if max(y_canv) > y_max: y_max = max(y_canv)
                        if min(x_canv) < x_min: x_min = min(x_canv)
                        if min(y_canv) < y_min: y_min = min(y_canv)
                        TPL_dict[module]['x'] = x_canv
                        TPL_dict[module]['y'] = y_canv
                    all_modules.update(TPL_dict)
        r_margin = 1
        l_margin = 1
        t_margin = 1
        b_margin = 1
        x_max = r_margin
        x_min -= l_margin
        y_max = t_margin
        y_min -= b_margin
        x_range = x_max - x_min
        y_range = y_max - y_min
        if (x_range  0.)/(w  0.) > (y_range  0.)/(h  0.):
            x_scale = x_range
            y_scale = (h  0.)/(w  0.)*x_range
        else:
            y_scale = y_range
            x_scale = (w  0.)/(h  0.)*y_range
        TPL = {} 
        for module in all_modules:
            x = array('d', [])
            y = array('d', [])
            for idx in range(len(all_modules[module]['x'])):
                x.append((all_modules[module]['x'][idx] - x_min  0.)/(x_scale  0.))
                y.append((all_modules[module]['y'][idx] - y_min  0.)/(y_scale  0.))
            # Begin point is end point
            x.append((all_modules[module]['x'][0] - x_min  0.)/(x_scale  0.))
            y.append((all_modules[module]['y'][0] - y_min  0.)/(y_scale  0.))
            #print(x, y)
            TPL[module] = ROOT.TPolyLine(len(x), x, y) 
            #TPL[module].SetFillColor(1)
            TPL[module].SetLineColor(1)
            TPL[module].Draw('f')
            TPL[module].Draw()
        TL = ROOT.TLatex()
        TL.SetTextSize(0.025)
        for key in all_text:
            x = (all_text[key]['x'] - x_min  0.)/(x_scale  0.)
            y = (all_text[key]['y'] - y_min  0.)/(y_scale  0.)
            TL.SetTextAlign(all_text[key]['alignment'])
            TL.DrawLatex(x, y, all_text[key]['text'])
        #TL.SetTextSize(0.025)
        #TL.SetTextAlign(11)
        #TL.DrawLatex(0.1, 0.1, 'bottom')
        #TL.SetTextAlign(13)
        #TL.DrawLatex(0.1, 0.1, 'top')
        canvas.Update() 
        raw_input('exit')
   
    test_draw(1500, 750)
    #test_draw(125, 500)
    #test_draw(500, 500)
    #raw_input('exit')
 
        
"
-------------------------------------------------------------------------
"Recom
PRs: 31376, 31284"
-------------------------------------------------------------------------
=========================================================================
"import sys
import copy
import time
from Alignment.OfflineValidation.TkAlMap import TkAlMap
'''
Script for plotting TkAlMaps
How to run:
    python runGCPTkAlMap.py -b inFile=<file_path> compAl=<c_alignment_name> refAl=<r_alignment_name> savePNG=<png_bool> TkVersion=<phase> outDir=<out_dir> colPal=<col_int> defRanges=<range_str> TkautoVersion= <tk_version_bool>
Explanation:
    inFile=<file_path>                 path to root file containing geometry comparison tree ""alignTree""
    compAl=<c_alignment_name>          name of alignment beeing compared (for title)
    refAl=<r_alignment_name>           name of reference alignment (for title)
    savePNG=<png_bool>                 string boolean to save or not save as png
    TkVersion=<phase>                  tracker version valid options: phase0, phase1
    outDir=<out_dir>                   directory where to store the images
    colPal=<col_int>                   color palette: 1 is rainbow palette, 2 is diverging color palette (blue to red)
    defRanges=<range_str>              string containing changes to default range in format ""<var>_range=[<min>,<max>];<var2>_..."" example: ""dr_range=[-10,10];rdphi_range=[-2.02,120];""
    TkautoVersion=<tk_version_bool>    string boolean telling wheter or not to auto detect TkVersion (will override the TkVersion=<phase> selection)
'''
print('*---------------------------------------*')
print('|             GCP TkAlMap               |')
print('*---------------------------------------*')
var_list = ['dr']
#var_list = ['dx', 'dy', 'dz']
#var_list = ['dr', 'dx', 'dy', 'dz', 'rdphi', 'dphi', 'dalpha', 'dbeta', 'dgamma', 'du', 'dv', 'dw', 'da', 'db', 'dg']
var_ranges = {}
for var in var_list:
    var_ranges[var] = [None, None]
# Our own parser
print('Reading arguments')
arguments = sys.argv
al_ref = 'Reference Alignment'
al_comp = 'Compared Alignment'
out_dir = '.'
save_png = False
save_png_str = ''
phase_str = ''
auto_tk_str = ''
palette_str = ''
range_str = ''
for arg in arguments:
    if 'inFile=' in arg      : in_file      = arg.replace('inFile=', '')
    if 'refAl=' in arg       : al_ref       = arg.replace('refAl=', '')
    if 'compAl=' in arg      : al_comp      = arg.replace('compAl=', '')
    if 'outDir=' in arg      : out_dir      = arg.replace('outDir=', '')
    if 'savePNG=' in arg     : save_png_str = arg.replace('savePNG=', '')
    if 'TkVersion='in arg    : phase_str    = arg.replace('TkVersion=', '')
    if 'TkautoVersion='in arg: auto_tk_str  = arg.replace('TkautoVersion=', '')
    if 'colPal='in arg       : palette_str  = arg.replace('colPal=', '')
    if 'defRanges=' in arg   : range_str    = arg.replace('defRanges=', '')
# Digest arguments
phase = 1
title = al_comp  ' - '  al_ref
if 'TRUE' in save_png_str.upper(): save_png = True 
auto_tk = True
if 'FALSE' in auto_tk_str.upper(): auto_tk = False
if 'PHASE0' in phase_str.upper() : phase = 0
geometry_file = 'TkAlMapDesign_phase1_cfg.py'
if phase == 1: geometry_file = 'TkAlMapDesign_phase0_cfg.py'
palette = 2
if '1' in palette_str: palette = 1
range_str_splt = range_str.split(';')
for var_range_str in range_str_splt:
    cur_var = var_range_str.split('=')[0]
    if cur_var == '': continue
    cur_range = eval(var_range_str.split('=')[1])
    for var in var_ranges:
        if var'_range' == cur_var:
            if cur_range[0] != -99999: var_ranges[var][0] = cur_range[0]
            if cur_range[1] != -99999: var_ranges[var][1] = cur_range[1]
    #max_val = float(var_range_str.split('=')[1].split(',')[0].replace('[', '')) 
    #min_val = float(var_range_str.split('=')[1].split(',')[1].replace(']', '')) 
print('Current setup:')
print(' - reference alingment         : 'al_ref)
print(' - compared alingment          : 'al_comp)
print(' - tracker version             : phase 'str(phase))
print(' - auto detect tracker version : 'str(auto_tk))
print(' - saving as png               : 'str(save_png))
print(' - color palette               : 'str(palette))
print(' - input root file             : 'in_file)
print(' - output directory            : 'out_dir)
print('')
print('Changed default ranges:')
for var in var_ranges:
    if var_ranges[var][0] is None and var_ranges[var][1] is None: continue
    prt_srt = ' - 'var'\t: [ '
    if var_ranges[var][0] is None: prt_srt = 'default'
    else: prt_srt = str(var_ranges[var][0])
    prt_srt = '\t, '
    if var_ranges[var][1] is None: prt_srt = 'default'
    else: prt_srt = str(var_ranges[var][1])
    prt_srt = '\t]'
    print(prt_srt)
  
# Load maps for different configurations
print('Loading maps')
TkMap_full          = TkAlMap('test', title, in_file, use_default_range=False, two_sigma_cap=False, GEO_file=geometry_file, tracker='full',   palette=palette, check_tracker=auto_tk)
TkMap_pixel         = TkAlMap('test', title, in_file, use_default_range=False, two_sigma_cap=False, GEO_file=geometry_file, tracker='pixel',  palette=palette, check_tracker=auto_tk)
TkMap_strips        = TkAlMap('test', title, in_file, use_default_range=False, two_sigma_cap=False, GEO_file=geometry_file, tracker='strips', palette=palette, check_tracker=auto_tk)
TkMap_cap_full      = TkAlMap('test', title, in_file, use_default_range=False, two_sigma_cap=True,  GEO_file=geometry_file, tracker='full',   palette=palette, check_tracker=auto_tk)
TkMap_cap_pixel     = TkAlMap('test', title, in_file, use_default_range=False, two_sigma_cap=True,  GEO_file=geometry_file, tracker='pixel',  palette=palette, check_tracker=auto_tk)
TkMap_cap_strips    = TkAlMap('test', title, in_file, use_default_range=False, two_sigma_cap=True,  GEO_file=geometry_file, tracker='strips', palette=palette, check_tracker=auto_tk)
TkMap_drange_full   = TkAlMap('test', title, in_file, use_default_range=True,  two_sigma_cap=False, GEO_file=geometry_file, tracker='full',   palette=palette, check_tracker=auto_tk)
TkMap_drange_pixel  = TkAlMap('test', title, in_file, use_default_range=True,  two_sigma_cap=False, GEO_file=geometry_file, tracker='pixel',  palette=palette, check_tracker=auto_tk)
TkMap_drange_strips = TkAlMap('test', title, in_file, use_default_range=True,  two_sigma_cap=False, GEO_file=geometry_file, tracker='strips', palette=palette, check_tracker=auto_tk)
ts_start = time.time()
for var in var_list:
    print('----- Evaluating variable: 'var)
    # Usual setup
    tmp_full = TkMap_full
    tmp_full.set_var(var)
    tmp_full.analyse()  
    tmp_full.save(out_dir=out_dir)  
    if save_png: tmp_full.save(out_dir=out_dir, extension='png')  
    tmp_full.plot_variable_distribution(out_dir=out_dir)
    tmp_pixel = TkMap_pixel
    tmp_pixel.set_var(var)
    tmp_pixel.analyse()  
    tmp_pixel.save(out_dir=out_dir)  
    if save_png: tmp_pixel.save(out_dir=out_dir, extension='png')  
    tmp_pixel.plot_variable_distribution(out_dir=out_dir)
    tmp_strips = TkMap_strips
    tmp_strips.set_var(var)
    tmp_strips.analyse()  
    tmp_strips.save(out_dir=out_dir)  
    if save_png: tmp_strips.save(out_dir=out_dir, extension='png')  
    tmp_strips.plot_variable_distribution(out_dir=out_dir)
    # 4 sigma capping
    tmp_cap_full = TkMap_cap_full
    tmp_cap_full.set_var(var)
    tmp_cap_full.analyse()  
    tmp_cap_full.save(out_dir=out_dir)  
    if save_png: tmp_cap_full.save(out_dir=out_dir, extension='png')  
    tmp_cap_pixel = TkMap_cap_pixel
    tmp_cap_pixel.set_var(var)
    tmp_cap_pixel.analyse()  
    tmp_cap_pixel.save(out_dir=out_dir)  
    if save_png: tmp_cap_pixel.save(out_dir=out_dir, extension='png')  
    tmp_cap_strips = TkMap_cap_strips
    tmp_cap_strips.set_var(var)
    tmp_cap_strips.analyse()  
    tmp_cap_strips.save(out_dir=out_dir)
    if save_png: tmp_cap_strips.save(out_dir=out_dir, extension='png')  
    # default ranges
    tmp_drange_full = TkMap_drange_full
    tmp_drange_full.set_var(var, var_ranges[var])
    tmp_drange_full.analyse()  
    tmp_drange_full.save(out_dir=out_dir)  
    if save_png: tmp_drange_full.save(out_dir=out_dir, extension='png')  
    tmp_drange_pixel = TkMap_drange_pixel
    tmp_drange_pixel.set_var(var, var_ranges[var])
    tmp_drange_pixel.analyse()  
    tmp_drange_pixel.save(out_dir=out_dir)  
    if save_png: tmp_drange_pixel.save(out_dir=out_dir, extension='png')  
    tmp_drange_strips = TkMap_drange_strips
    tmp_drange_strips.set_var(var, var_ranges[var])
    tmp_drange_strips.analyse()  
    tmp_drange_strips.save(out_dir=out_dir)
    if save_png: tmp_drange_strips.save(out_dir=out_dir, extension='png')  
TkMap_full.clean_up()         
TkMap_pixel.clean_up()        
TkMap_strips.clean_up()       
TkMap_cap_full.clean_up()     
TkMap_cap_pixel.clean_up()    
TkMap_cap_strips.clean_up()   
TkMap_drange_full.clean_up()  
TkMap_drange_pixel.clean_up() 
TkMap_drange_strips.clean_up()
print('TOOK: 'str(time.time()-ts_start)' s') 
"
-------------------------------------------------------------------------
"```python
from Alignment.OfflineValidation.TkAlMap import TkAlMap
import copy
import time
import sys

'''
Script for plotting TkAlMaps
How to run:
    python runGCPTkAlMap.py -b inFile=<file_path> compAl=<c_alignment_name> refAl=<r_alignment_name> savePNG=<png_bool> TkVersion=<phase> outDir=<out_dir> colPal=<col_int> defRanges=<range_str> TkautoVersion= <tk_version_bool>
Explanation:
    inFile=<file_path>                 path to root file containing geometry comparison tree ""alignTree""
    compAl=<c_alignment_name>          name of alignment beeing compared (for title)
    refAl=<r_alignment_name>           name of reference alignment (for title)
    savePNG=<png_bool>                 string boolean to save or not save as png
    TkVersion=<phase>                  tracker version valid options: phase0, phase1
    outDir=<out_dir>                   directory where to store the images
    colPal=<col_int>                   color palette: 1 is rainbow palette, 2 is diverging color palette (blue to red)
    defRanges=<range_str>              string containing changes to default range in format ""<var>_range=[<min>,<max>];<var2>_..."" example: ""dr_range=[-10,10];rdphi_range=[-2.02,120];""
    TkautoVersion=<tk_version_bool>    string boolean telling wheter or not to auto detect TkVersion (will override the TkVersion=<phase> selection)
'''

# Remaining code remains the same
```"
-------------------------------------------------------------------------
"import sys
import copy
import time
from Alignment.OfflineValidation.TkAlMap import TkAlMap
'''
Script for plotting TkAlMaps
How to run:
    python runGCPTkAlMap.py -b inFile=<file_path> compAl=<c_alignment_name> refAl=<r_alignment_name> savePNG=<png_bool> TkVersion=<phase> outDir=<out_dir> colPal=<col_int> defRanges=<range_str> TkautoVersion= <tk_version_bool>
Explanation:
    inFile=<file_path>                 path to root file containing geometry comparison tree ""alignTree""
    compAl=<c_alignment_name>          name of alignment beeing compared (for title)
    refAl=<r_alignment_name>           name of reference alignment (for title)
    savePNG=<png_bool>                 string boolean to save or not save as png
    TkVersion=<phase>                  tracker version valid options: phase0, phase1
    outDir=<out_dir>                   directory where to store the images
    colPal=<col_int>                   color palette: 1 is rainbow palette, 2 is diverging color palette (blue to red)
    defRanges=<range_str>              string containing changes to default range in format ""<var>_range=[<min>,<max>];<var2>_..."" example: ""dr_range=[-10,10];rdphi_range=[-2.02,120];""
    TkautoVersion=<tk_version_bool>    string boolean telling wheter or not to auto detect TkVersion (will override the TkVersion=<phase> selection)
'''
print('*---------------------------------------*')
print('|             GCP TkAlMap               |')
print('*---------------------------------------*')
var_list = ['dr']
#var_list = ['dx', 'dy', 'dz']
#var_list = ['dr', 'dx', 'dy', 'dz', 'rdphi', 'dphi', 'dalpha', 'dbeta', 'dgamma', 'du', 'dv', 'dw', 'da', 'db', 'dg']
var_ranges = {}
for var in var_list:
    var_ranges[var] = [None, None]
# Our own parser
print('Reading arguments')
arguments = sys.argv
al_ref = 'Reference Alignment'
al_comp = 'Compared Alignment'
out_dir = '.'
save_png = False
save_png_str = ''
phase_str = ''
auto_tk_str = ''
palette_str = ''
range_str = ''
for arg in arguments:
    if 'inFile=' in arg      : in_file      = arg.replace('inFile=', '')
    if 'refAl=' in arg       : al_ref       = arg.replace('refAl=', '')
    if 'compAl=' in arg      : al_comp      = arg.replace('compAl=', '')
    if 'outDir=' in arg      : out_dir      = arg.replace('outDir=', '')
    if 'savePNG=' in arg     : save_png_str = arg.replace('savePNG=', '')
    if 'TkVersion='in arg    : phase_str    = arg.replace('TkVersion=', '')
    if 'TkautoVersion='in arg: auto_tk_str  = arg.replace('TkautoVersion=', '')
    if 'colPal='in arg       : palette_str  = arg.replace('colPal=', '')
    if 'defRanges=' in arg   : range_str    = arg.replace('defRanges=', '')
# Digest arguments
phase = 1
title = al_comp  ' - '  al_ref
if 'TRUE' in save_png_str.upper(): save_png = True 
auto_tk = True
if 'FALSE' in auto_tk_str.upper(): auto_tk = False
if 'PHASE0' in phase_str.upper() : phase = 0
geometry_file = 'TkAlMapDesign_phase1_cfg.py'
if phase == 1: geometry_file = 'TkAlMapDesign_phase0_cfg.py'
palette = 2
if '1' in palette_str: palette = 1
range_str_splt = range_str.split(';')
for var_range_str in range_str_splt:
    cur_var = var_range_str.split('=')[0]
    if cur_var == '': continue
    cur_range = eval(var_range_str.split('=')[1])
    for var in var_ranges:
        if var'_range' == cur_var:
            if cur_range[0] != -99999: var_ranges[var][0] = cur_range[0]
            if cur_range[1] != -99999: var_ranges[var][1] = cur_range[1]
    #max_val = float(var_range_str.split('=')[1].split(',')[0].replace('[', '')) 
    #min_val = float(var_range_str.split('=')[1].split(',')[1].replace(']', '')) 
print('Current setup:')
print(' - reference alingment         : 'al_ref)
print(' - compared alingment          : 'al_comp)
print(' - tracker version             : phase 'str(phase))
print(' - auto detect tracker version : 'str(auto_tk))
print(' - saving as png               : 'str(save_png))
print(' - color palette               : 'str(palette))
print(' - input root file             : 'in_file)
print(' - output directory            : 'out_dir)
print('')
print('Changed default ranges:')
for var in var_ranges:
    if var_ranges[var][0] is None and var_ranges[var][1] is None: continue
    prt_srt = ' - 'var'\t: [ '
    if var_ranges[var][0] is None: prt_srt = 'default'
    else: prt_srt = str(var_ranges[var][0])
    prt_srt = '\t, '
    if var_ranges[var][1] is None: prt_srt = 'default'
    else: prt_srt = str(var_ranges[var][1])
    prt_srt = '\t]'
    print(prt_srt)
  
# Load maps for different configurations
print('Loading maps')
TkMap_full          = TkAlMap('test', title, in_file, use_default_range=False, two_sigma_cap=False, GEO_file=geometry_file, tracker='full',   palette=palette, check_tracker=auto_tk)
TkMap_pixel         = TkAlMap('test', title, in_file, use_default_range=False, two_sigma_cap=False, GEO_file=geometry_file, tracker='pixel',  palette=palette, check_tracker=auto_tk)
TkMap_strips        = TkAlMap('test', title, in_file, use_default_range=False, two_sigma_cap=False, GEO_file=geometry_file, tracker='strips', palette=palette, check_tracker=auto_tk)
TkMap_cap_full      = TkAlMap('test', title, in_file, use_default_range=False, two_sigma_cap=True,  GEO_file=geometry_file, tracker='full',   palette=palette, check_tracker=auto_tk)
TkMap_cap_pixel     = TkAlMap('test', title, in_file, use_default_range=False, two_sigma_cap=True,  GEO_file=geometry_file, tracker='pixel',  palette=palette, check_tracker=auto_tk)
TkMap_cap_strips    = TkAlMap('test', title, in_file, use_default_range=False, two_sigma_cap=True,  GEO_file=geometry_file, tracker='strips', palette=palette, check_tracker=auto_tk)
TkMap_drange_full   = TkAlMap('test', title, in_file, use_default_range=True,  two_sigma_cap=False, GEO_file=geometry_file, tracker='full',   palette=palette, check_tracker=auto_tk)
TkMap_drange_pixel  = TkAlMap('test', title, in_file, use_default_range=True,  two_sigma_cap=False, GEO_file=geometry_file, tracker='pixel',  palette=palette, check_tracker=auto_tk)
TkMap_drange_strips = TkAlMap('test', title, in_file, use_default_range=True,  two_sigma_cap=False, GEO_file=geometry_file, tracker='strips', palette=palette, check_tracker=auto_tk)
ts_start = time.time()
for var in var_list:
    print('----- Evaluating variable: 'var)
    # Usual setup
    tmp_full = TkMap_full
    tmp_full.set_var(var)
    tmp_full.analyse()  
    tmp_full.save(out_dir=out_dir)  
    if save_png: tmp_full.save(out_dir=out_dir, extension='png')  
    tmp_full.plot_variable_distribution(out_dir=out_dir)
    tmp_pixel = TkMap_pixel
    tmp_pixel.set_var(var)
    tmp_pixel.analyse()  
    tmp_pixel.save(out_dir=out_dir)  
    if save_png: tmp_pixel.save(out_dir=out_dir, extension='png')  
    tmp_pixel.plot_variable_distribution(out_dir=out_dir)
    tmp_strips = TkMap_strips
    tmp_strips.set_var(var)
    tmp_strips.analyse()  
    tmp_strips.save(out_dir=out_dir)  
    if save_png: tmp_strips.save(out_dir=out_dir, extension='png')  
    tmp_strips.plot_variable_distribution(out_dir=out_dir)
    # 4 sigma capping
    tmp_cap_full = TkMap_cap_full
    tmp_cap_full.set_var(var)
    tmp_cap_full.analyse()  
    tmp_cap_full.save(out_dir=out_dir)  
    if save_png: tmp_cap_full.save(out_dir=out_dir, extension='png')  
    tmp_cap_pixel = TkMap_cap_pixel
    tmp_cap_pixel.set_var(var)
    tmp_cap_pixel.analyse()  
    tmp_cap_pixel.save(out_dir=out_dir)  
    if save_png: tmp_cap_pixel.save(out_dir=out_dir, extension='png')  
    tmp_cap_strips = TkMap_cap_strips
    tmp_cap_strips.set_var(var)
    tmp_cap_strips.analyse()  
    tmp_cap_strips.save(out_dir=out_dir)
    if save_png: tmp_cap_strips.save(out_dir=out_dir, extension='png')  
    # default ranges
    tmp_drange_full = TkMap_drange_full
    tmp_drange_full.set_var(var, var_ranges[var])
    tmp_drange_full.analyse()  
    tmp_drange_full.save(out_dir=out_dir)  
    if save_png: tmp_drange_full.save(out_dir=out_dir, extension='png')  
    tmp_drange_pixel = TkMap_drange_pixel
    tmp_drange_pixel.set_var(var, var_ranges[var])
    tmp_drange_pixel.analyse()  
    tmp_drange_pixel.save(out_dir=out_dir)  
    if save_png: tmp_drange_pixel.save(out_dir=out_dir, extension='png')  
    tmp_drange_strips = TkMap_drange_strips
    tmp_drange_strips.set_var(var, var_ranges[var])
    tmp_drange_strips.analyse()  
    tmp_drange_strips.save(out_dir=out_dir)
    if save_png: tmp_drange_strips.save(out_dir=out_dir, extension='png')  
TkMap_full.clean_up()         
TkMap_pixel.clean_up()        
TkMap_strips.clean_up()       
TkMap_cap_full.clean_up()     
TkMap_cap_pixel.clean_up()    
TkMap_cap_strips.clean_up()   
TkMap_drange_full.clean_up()  
TkMap_drange_pixel.clean_up() 
TkMap_drange_strips.clean_up()
print('TOOK: 'str(time.time()-ts_start)' s') 
"
-------------------------------------------------------------------------
"Recom
PRs: 31376, 31284"
-------------------------------------------------------------------------
=========================================================================
"@staticmethod
def get_wmsplit():
    """"""
    Return a ""wmsplit"" dictionary that contain non-default LumisPerJob values
    """"""
    wmsplit = {}
        wmsplit['DIGIHI'] = 5
        wmsplit['RECOHI'] = 5
        wmsplit['HLTD'] = 5
        wmsplit['RECODreHLT'] = 2
        wmsplit['DIGIPU'] = 4
        wmsplit['DIGIPU1'] = 4
        wmsplit['RECOPU1'] = 1
        wmsplit['DIGIUP15_PU50'] = 1
        wmsplit['RECOUP15_PU50'] = 1
        wmsplit['DIGIUP15_PU25'] = 1
        wmsplit['RECOUP15_PU25'] = 1
        wmsplit['DIGIUP15_PU25HS'] = 1
        wmsplit['RECOUP15_PU25HS'] = 1
        wmsplit['DIGIHIMIX'] = 5
        wmsplit['RECOHIMIX'] = 5
        wmsplit['RECODSplit'] = 1
        wmsplit['SingleMuPt10_UP15_ID'] = 1
        wmsplit['DIGIUP15_ID'] = 1
        wmsplit['RECOUP15_ID'] = 1
        wmsplit['TTbar_13_ID'] = 1
        wmsplit['SingleMuPt10FS_ID'] = 1
        wmsplit['TTbarFS_ID'] = 1
        wmsplit['RECODR2_50nsreHLT'] = 5
        wmsplit['RECODR2_25nsreHLT'] = 5
        wmsplit['RECODR2_2016reHLT'] = 5
        wmsplit['RECODR2_50nsreHLT_HIPM'] = 5
        wmsplit['RECODR2_25nsreHLT_HIPM'] = 5
        wmsplit['RECODR2_2016reHLT_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimSingleMu'] = 1
        wmsplit['RECODR2_2016reHLT_skimDoubleEG'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuonEG'] = 1
        wmsplit['RECODR2_2016reHLT_skimJetHT'] = 1
        wmsplit['RECODR2_2016reHLT_skimMET'] = 1
        wmsplit['RECODR2_2016reHLT_skimSinglePh'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuOnia'] = 1
        wmsplit['RECODR2_2016reHLT_skimSingleMu_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimDoubleEG_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuonEG_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimJetHT_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimMET_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimSinglePh_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuOnia_HIPM'] = 1
        wmsplit['RECODR2_2017reHLT_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_skimSingleMu_Prompt_Lumi'] = 1
        wmsplit['RECODR2_2017reHLT_skimDoubleEG_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_skimMET_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_skimMuOnia_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_Prompt_L1TEgDQM'] = 1
        wmsplit['RECODR2_2018reHLT_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimSingleMu_Prompt_Lumi'] = 1
        wmsplit['RECODR2_2018reHLT_skimDoubleEG_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimMET_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuOnia_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimEGamma_Prompt_L1TEgDQM'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuonEG_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimCharmonium_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt_HEfail'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt_BadHcalMitig'] = 1
        wmsplit['RECODR2_2018reHLTAlCaTkCosmics_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimDisplacedJet_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_ZBPrompt'] = 1
        wmsplit['RECODR2_2018reHLT_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimSingleMu_Offline_Lumi'] = 1
        wmsplit['RECODR2_2018reHLT_skimDoubleEG_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimMET_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuOnia_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimEGamma_Offline_L1TEgDQM'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuonEG_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimCharmonium_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Offline_HEfail'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Offline_BadHcalMitig'] = 1
        wmsplit['RECODR2_2018reHLTAlCaTkCosmics_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimDisplacedJet_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_ZBOffline'] = 1
        wmsplit['HLTDR2_50ns'] = 1
        wmsplit['HLTDR2_25ns'] = 1
        wmsplit['HLTDR2_2016'] = 1
        wmsplit['HLTDR2_2017'] = 1
        wmsplit['HLTDR2_2018'] = 1
        wmsplit['HLTDR2_2018_BadHcalMitig'] = 1
        wmsplit['Hadronizer'] = 1
        wmsplit['DIGIUP15'] = 1
        wmsplit['RECOUP15'] = 1
        wmsplit['RECOAODUP15'] = 5
        wmsplit['DBLMINIAODMCUP15NODQM'] = 5
        wmsplit['Digi'] = 5
        wmsplit['Reco'] = 5
        wmsplit['DigiPU'] = 1
        wmsplit['RecoPU'] = 1
        wmsplit['RECOHID11'] = 1
        wmsplit['DIGIUP17'] = 1
        wmsplit['RECOUP17'] = 1
        wmsplit['DIGIUP17_PU25'] = 1
        wmsplit['RECOUP17_PU25'] = 1
        wmsplit['DIGICOS_UP16'] = 1
        wmsplit['RECOCOS_UP16'] = 1
        wmsplit['DIGICOS_UP17'] = 1
        wmsplit['RECOCOS_UP17'] = 1
        wmsplit['DIGICOS_UP18'] = 1
        wmsplit['RECOCOS_UP18'] = 1
        wmsplit['DIGICOS_UP21'] = 1
        wmsplit['RECOCOS_UP21'] = 1
        wmsplit['HYBRIDRepackHI2015VR'] = 1
        wmsplit['HYBRIDZSHI2015'] = 1
        wmsplit['RECOHID15'] = 1
        wmsplit['RECOHID18'] = 1
            if 'PU' not in key:
                continue
            wmsplit['DigiTriggerPU_'  key] = 1
            wmsplit['RecoGlobalPU_'  key] = 1
    except Exception as ex:
        print('Exception while building a wmsplit dictionary: %s' % (str(ex)))
        return {}
    return wmsplit
def prepare(self, mReader, directories, mode='init'):
    wmsplit = MatrixInjector.get_wmsplit()
"
-------------------------------------------------------------------------
"@staticmethod
def get_wmsplit():
    """"""
    Return a ""wmsplit"" dictionary that contain non-default LumisPerJob values
    """"""
    wmsplit = {}
    wmsplit['DIGIHI'] = 5
    wmsplit['RECOHI'] = 5
    wmsplit['HLTD'] = 5
    wmsplit['RECODreHLT'] = 2
    wmsplit['DIGIPU'] = 4
    wmsplit['DIGIPU1'] = 4
    wmsplit['RECOPU1'] = 1
    wmsplit['DIGIUP15_PU50'] = 1
    wmsplit['RECOUP15_PU50'] = 1
    wmsplit['DIGIUP15_PU25'] = 1
    wmsplit['RECOUP15_PU25'] = 1
    wmsplit['DIGIUP15_PU25HS'] = 1
    wmsplit['RECOUP15_PU25HS'] = 1
    wmsplit['DIGIHIMIX'] = 5
    wmsplit['RECOHIMIX'] = 5
    wmsplit['RECODSplit'] = 1
    wmsplit['SingleMuPt10_UP15_ID'] = 1
    wmsplit['DIGIUP15_ID'] = 1
    wmsplit['RECOUP15_ID'] = 1
    wmsplit['TTbar_13_ID'] = 1
    wmsplit['SingleMuPt10FS_ID'] = 1
    
    # Truncated additional data to keep hunk concise
    
    return wmsplit

def prepare(self, mReader, directories, mode='init'):
    wmsplit = MatrixInjector.get_wmsplit()"
-------------------------------------------------------------------------
"@staticmethod
def get_wmsplit():
    """"""
    Return a ""wmsplit"" dictionary that contain non-default LumisPerJob values
    """"""
    wmsplit = {}
        wmsplit['RECODreHLT']=2
"
-------------------------------------------------------------------------
"Recom
PRs: 31122, 31138"
-------------------------------------------------------------------------
=========================================================================
"from .MatrixUtil import merge, Kby
"
-------------------------------------------------------------------------
"Adapted code:
```python
from copy import deepcopy
from collections import OrderedDict
import six
import re
from MatrixUtil.Mby import merge, Kby
```"
-------------------------------------------------------------------------
"from .MatrixUtil import Kby
"
-------------------------------------------------------------------------
"Recom
PRs: 31122, 31138"
-------------------------------------------------------------------------
=========================================================================
"@staticmethod
def get_wmsplit():
    """"""
    Return a ""wmsplit"" dictionary that contain non-default LumisPerJob values
    """"""
    wmsplit = {}
        wmsplit['DIGIHI'] = 5
        wmsplit['RECOHI'] = 5
        wmsplit['HLTD'] = 5
        wmsplit['RECODreHLT'] = 2
        wmsplit['DIGIPU'] = 4
        wmsplit['DIGIPU1'] = 4
        wmsplit['RECOPU1'] = 1
        wmsplit['DIGIUP15_PU50'] = 1
        wmsplit['RECOUP15_PU50'] = 1
        wmsplit['DIGIUP15_PU25'] = 1
        wmsplit['RECOUP15_PU25'] = 1
        wmsplit['DIGIUP15_PU25HS'] = 1
        wmsplit['RECOUP15_PU25HS'] = 1
        wmsplit['DIGIHIMIX'] = 5
        wmsplit['RECOHIMIX'] = 5
        wmsplit['RECODSplit'] = 1
        wmsplit['SingleMuPt10_UP15_ID'] = 1
        wmsplit['DIGIUP15_ID'] = 1
        wmsplit['RECOUP15_ID'] = 1
        wmsplit['TTbar_13_ID'] = 1
        wmsplit['SingleMuPt10FS_ID'] = 1
        wmsplit['TTbarFS_ID'] = 1
        wmsplit['RECODR2_50nsreHLT'] = 5
        wmsplit['RECODR2_25nsreHLT'] = 5
        wmsplit['RECODR2_2016reHLT'] = 5
        wmsplit['RECODR2_50nsreHLT_HIPM'] = 5
        wmsplit['RECODR2_25nsreHLT_HIPM'] = 5
        wmsplit['RECODR2_2016reHLT_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimSingleMu'] = 1
        wmsplit['RECODR2_2016reHLT_skimDoubleEG'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuonEG'] = 1
        wmsplit['RECODR2_2016reHLT_skimJetHT'] = 1
        wmsplit['RECODR2_2016reHLT_skimMET'] = 1
        wmsplit['RECODR2_2016reHLT_skimSinglePh'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuOnia'] = 1
        wmsplit['RECODR2_2016reHLT_skimSingleMu_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimDoubleEG_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuonEG_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimJetHT_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimMET_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimSinglePh_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuOnia_HIPM'] = 1
        wmsplit['RECODR2_2017reHLT_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_skimSingleMu_Prompt_Lumi'] = 1
        wmsplit['RECODR2_2017reHLT_skimDoubleEG_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_skimMET_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_skimMuOnia_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_Prompt_L1TEgDQM'] = 1
        wmsplit['RECODR2_2018reHLT_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimSingleMu_Prompt_Lumi'] = 1
        wmsplit['RECODR2_2018reHLT_skimDoubleEG_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimMET_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuOnia_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimEGamma_Prompt_L1TEgDQM'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuonEG_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimCharmonium_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt_HEfail'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt_BadHcalMitig'] = 1
        wmsplit['RECODR2_2018reHLTAlCaTkCosmics_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimDisplacedJet_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_ZBPrompt'] = 1
        wmsplit['RECODR2_2018reHLT_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimSingleMu_Offline_Lumi'] = 1
        wmsplit['RECODR2_2018reHLT_skimDoubleEG_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimMET_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuOnia_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimEGamma_Offline_L1TEgDQM'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuonEG_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimCharmonium_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Offline_HEfail'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Offline_BadHcalMitig'] = 1
        wmsplit['RECODR2_2018reHLTAlCaTkCosmics_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimDisplacedJet_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_ZBOffline'] = 1
        wmsplit['HLTDR2_50ns'] = 1
        wmsplit['HLTDR2_25ns'] = 1
        wmsplit['HLTDR2_2016'] = 1
        wmsplit['HLTDR2_2017'] = 1
        wmsplit['HLTDR2_2018'] = 1
        wmsplit['HLTDR2_2018_BadHcalMitig'] = 1
        wmsplit['Hadronizer'] = 1
        wmsplit['DIGIUP15'] = 1
        wmsplit['RECOUP15'] = 1
        wmsplit['RECOAODUP15'] = 5
        wmsplit['DBLMINIAODMCUP15NODQM'] = 5
        wmsplit['Digi'] = 5
        wmsplit['Reco'] = 5
        wmsplit['DigiPU'] = 1
        wmsplit['RecoPU'] = 1
        wmsplit['RECOHID11'] = 1
        wmsplit['DIGIUP17'] = 1
        wmsplit['RECOUP17'] = 1
        wmsplit['DIGIUP17_PU25'] = 1
        wmsplit['RECOUP17_PU25'] = 1
        wmsplit['DIGICOS_UP16'] = 1
        wmsplit['RECOCOS_UP16'] = 1
        wmsplit['DIGICOS_UP17'] = 1
        wmsplit['RECOCOS_UP17'] = 1
        wmsplit['DIGICOS_UP18'] = 1
        wmsplit['RECOCOS_UP18'] = 1
        wmsplit['DIGICOS_UP21'] = 1
        wmsplit['RECOCOS_UP21'] = 1
        wmsplit['HYBRIDRepackHI2015VR'] = 1
        wmsplit['HYBRIDZSHI2015'] = 1
        wmsplit['RECOHID15'] = 1
        wmsplit['RECOHID18'] = 1
            if 'PU' not in key:
                continue
            wmsplit['DigiTriggerPU_'  key] = 1
            wmsplit['RecoGlobalPU_'  key] = 1
    except Exception as ex:
        print('Exception while building a wmsplit dictionary: %s' % (str(ex)))
        return {}
    return wmsplit
def prepare(self, mReader, directories, mode='init'):
    wmsplit = MatrixInjector.get_wmsplit()
"
-------------------------------------------------------------------------
"```python
    @staticmethod
    def get_wmsplit():
        """"""
        Return a ""wmsplit"" dictionary that contain non-default LumisPerJob values
        """"""
        wmsplit = {}
        wmsplit['DIGIHI'] = 5
        wmsplit['RECOHI'] = 5
        wmsplit['HLTD'] = 5
        wmsplit['RECODreHLT'] = 2
        wmsplit['DIGIPU'] = 4
        wmsplit['DIGIPU1'] = 4
        wmsplit['RECOPU1'] = 1
        wmsplit['DIGIUP15_PU50'] = 1
        wmsplit['RECOUP15_PU50'] = 1
        wmsplit['DIGIUP15_PU25'] = 1
        wmsplit['RECOUP15_PU25'] = 1
        wmsplit['DIGIUP15_PU25HS'] = 1
        wmsplit['RECOUP15_PU25HS'] = 1
        wmsplit['DIGIHIMIX'] = 5
        wmsplit['RECOHIMIX'] = 5
        wmsplit['RECODSplit'] = 1
        wmsplit['SingleMuPt10_UP15_ID'] = 1
        wmsplit['DIGIUP15_ID'] = 1
        wmsplit['RECOUP15_ID'] = 1
        wmsplit['TTbar_13_ID'] = 1
        wmsplit['SingleMuPt10FS_ID'] = 1
        wmsplit['TTbarFS_ID'] = 1
        wmsplit['RECODR2_50nsreHLT'] = 5
        wmsplit['RECODR2_25nsreHLT'] = 5
        wmsplit['RECODR2_2016reHLT'] = 5
        wmsplit['RECODR2_50nsreHLT_HIPM'] = 5
        wmsplit['RECODR2_25nsreHLT_HIPM'] = 5
        wmsplit['RECODR2_2016reHLT_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimSingleMu'] = 1
        wmsplit['RECODR2_2016reHLT_skimDoubleEG'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuonEG'] = 1
        wmsplit['RECODR2_2016reHLT_skimJetHT'] = 1
        wmsplit['RECODR2_2016reHLT_skimMET'] = 1
        wmsplit['RECODR2_2016reHLT_skimSinglePh'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuOnia'] = 1
        wmsplit['RECODR2_2016reHLT_skimSingleMu_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimDoubleEG_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuonEG_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimJetHT_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimMET_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimSinglePh_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuOnia_HIPM'] = 1
        wmsplit['RECODR2_2017reHLT_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_skimSingleMu_Prompt_Lumi'] = 1
        wmsplit['RECODR2_2017reHLT_skimDoubleEG_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_skimMET_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_skimMuOnia_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_Prompt_L1TEgDQM'] = 1
        wmsplit['RECODR2_2018reHLT_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimSingleMu_Prompt_Lumi'] = 1
        wmsplit['RECODR2_2018reHLT_skimDoubleEG_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimMET_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuOnia_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimEGamma_Prompt_L1TEgDQM'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuonEG_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimCharmonium_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt_HEfail'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt_BadHcalMitig'] = 1
        wmsplit['RECODR2_2018reHLTAlCaTkCosmics_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimDisplacedJet_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_ZBPrompt'] = 1
        wmsplit['RECODR2_2018reHLT_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimSingleMu_Offline_Lumi'] = 1
        wmsplit['RECODR2_2018reHLT_skimDoubleEG_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimMET_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuOnia_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimEGamma_Offline_L1TEgDQM'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuonEG_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimCharmonium_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Offline_HEfail'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Offline_BadHcalMitig'] = 1
        wmsplit['RECODR2_2018reHLTAlCaTkCosmics_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimDisplacedJet_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_ZBOffline'] = 1
        wmsplit['HLTDR2_50ns'] = 1
        wmsplit['HLTDR2_25ns'] = 1
        wmsplit['HLTDR2_2016'] = 1
        wmsplit['HLTDR2_2017'] = 1
        wmsplit['HLTDR2_2018'] = 1
        wmsplit['HLTDR2_2018_BadHcalMitig'] = 1
        wmsplit['Hadronizer'] = 1
        wmsplit['DIGIUP15'] = 1
        wmsplit['RECOUP15'] = 1
        wmsplit['RECOAODUP15'] = 5
        wmsplit['DBLMINIAODMCUP15NODQM'] = 5
        wmsplit['Digi'] = 5
        wmsplit['Reco'] = 5
        wmsplit['DigiPU'] = 1
        wmsplit['RecoPU'] = 1
        wmsplit['RECOHID11'] = 1
        wmsplit['DIGIUP17'] = 1
        wmsplit['RECOUP17'] = 1
        wmsplit['DIGIUP17_PU25'] = 1
        wmsplit['RECOUP17_PU25'] = 1
        wmsplit['DIGICOS_UP16'] = 1
        wmsplit['RECOCOS_UP16'] = 1
        wmsplit['DIGICOS_UP17'] = 1
        wmsplit['RECOCOS_UP17'] = 1
        wmsplit['DIGICOS_UP18'] = 1
        wmsplit['RECOCOS_UP18'] = 1
        wmsplit['DIGICOS_UP21'] = 1
        wmsplit['RECOCOS_UP21'] = 1
        wmsplit['HYBRIDRepackHI2015VR'] = 1
        wmsplit['HYBRIDZSHI2015'] = 1
        wmsplit['RECOHID15'] = 1
        wmsplit['RECOHID18'] = 1
        try:
            for key in wmsplit.keys():
                if 'PU' not in key:
                    continue
                wmsplit['DigiTriggerPU_' + key] = 1
                wmsplit['RecoGlobalPU_' + key] = 1
        except Exception as ex:
            print('Exception while building a wmsplit dictionary: %s' % (str(ex)))
            return {}
        return wmsplit

    def prepare(self, mReader, directories, mode='init'):
        wmsplit = MatrixInjector.get_wmsplit()
```"
-------------------------------------------------------------------------
"@staticmethod
def get_wmsplit():
    """"""
    Return a ""wmsplit"" dictionary that contain non-default LumisPerJob values
    """"""
    wmsplit = {}
        wmsplit['RECODreHLT']=2
"
-------------------------------------------------------------------------
"Recom
PRs: 31122, 31137"
-------------------------------------------------------------------------
=========================================================================
"from .MatrixUtil import merge, Kby
"
-------------------------------------------------------------------------
"from MatrixUtil import merge, Kby"
-------------------------------------------------------------------------
"from .MatrixUtil import merge, Kby
"
-------------------------------------------------------------------------
"Recom
PRs: 31122, 31137"
-------------------------------------------------------------------------
=========================================================================
"from CommonTools.PileupAlgos.Puppi_cff import puppi
from RecoJets.JetProducers.PileupJetID_cfi import pileupJetIdCalculator, pileupJetId
from RecoJets.JetProducers.PileupJetID_cfi import _chsalgos_81x, _chsalgos_94x, _chsalgos_102x
from PhysicsTools.NanoAOD.jets_cff   import jetTable, jetCorrFactorsNano, updatedJets, finalJets, qgtagger
from PhysicsTools.NanoAOD.jets_cff   import genJetTable, genJetFlavourAssociation, genJetFlavourTable
from PhysicsTools.PatAlgos.tools.jetTools import supportedJetAlgos
from PhysicsTools.PatAlgos.tools.jetTools import updateJetCollection
bTagCSVV2    = ['pfDeepCSVJetTags:probb','pfDeepCSVJetTags:probbb','pfDeepCSVJetTags:probc']
bTagCMVAV2   = ['pfCombinedMVAV2BJetTags']
bTagDeepCSV  = ['pfCombinedInclusiveSecondaryVertexV2BJetTags']
bTagDeepJet  = [
  'pfDeepFlavourJetTags:probb','pfDeepFlavourJetTags:probbb','pfDeepFlavourJetTags:problepb',
  'pfDeepFlavourJetTags:probc','pfDeepFlavourJetTags:probuds','pfDeepFlavourJetTags:probg'
]
bTagDiscriminatorsForAK4 = bTagCSVV2bTagCMVAV2bTagDeepCSVbTagDeepJet
# - ak4gen (GenJet in NanoAOD), slimmedGenJets in MiniAOD 
# - ak8gen (GenJetAK8 in NanoAOD), slimmedGenJetsAK8 in MiniAOD 
    ""jet""     : ""ak8gen"",    
  ""ak8gen""  : {
    ""name"" : ""GenJetAK8"",
    ""doc""  : ""AK8 Gen jets"",
# By default, these collections are saved in the main NanoAODs:
# - ak4pfchs   (Jet    in NanoAOD), slimmedJets in MiniAOD  
# - ak8pfpuppi (FatJet in NanoAOD), slimmedJetsAK8 in MiniAOD 
# Below is a list of recojets that we can save in NanoAOD. Set 
# ""enabled"" to true if you want to store the recojet collection.
    ""genJetsCollection"": ""AK4GenJetsNoNu"",  
    ""inputCollection"" : """",
    ""genJetsCollection"": ""AK4GenJetsNoNu"",  
  }, 
  { 
    ""jet"" : ""ak4pfpuppi"",  
    ""enabled"" : True,        
    ""genJetsCollection"": ""AK4GenJetsNoNu"",  
    ""bTagDiscriminators"": bTagDiscriminatorsForAK4
"
-------------------------------------------------------------------------
"```python
from PhysicsTools.NanoAOD.jets_cff import jetTable, jetCorrFactorsNano, updatedJets, finalJets, qgtagger
from PhysicsTools.NanoAOD.jets_cff import genJetTable, genJetFlavourAssociation, genJetFlavourTable
from PhysicsTools.PatAlgos.tools.jetTools import supportedJetAlgos
from PhysicsTools.PatAlgos.tools.jetTools import updateJetCollection
from RecoJets.JetProducers.PileupJetID_cfi import pileupJetIdCalculator, pileupJetId
from CommonTools.PileupAlgos.Puppi_cff import puppi

ak8gen = {
    ""name"" : ""GenJetAK8"",
    ""doc""  : ""AK8 Gen jets"",
}

config_recojets = [
    {
        ""jet"": ""ak8gen"",
        ""enabled"": True,
        ""genJetsCollection"": ""AK4GenJetsNoNu"",
        ""inputCollection"": """",
    },
    {
        ""jet"": ""ak4pfpuppi"",
        ""enabled"": True,
        ""genJetsCollection"": ""AK4GenJetsNoNu"",
        ""bTagDiscriminators"": bTagDiscriminatorsForAK4
    }
]
```"
-------------------------------------------------------------------------
"from CommonTools.PileupAlgos.Puppi_cff import puppi
from RecoJets.JetProducers.PileupJetID_cfi import pileupJetIdCalculator, pileupJetId
from RecoJets.JetProducers.PileupJetID_cfi import _chsalgos_81x, _chsalgos_94x, _chsalgos_102x
from PhysicsTools.NanoAOD.jets_cff   import jetTable, jetCorrFactorsNano, updatedJets, finalJets, qgtagger
from PhysicsTools.NanoAOD.jets_cff   import genJetTable, genJetFlavourAssociation, genJetFlavourTable
from PhysicsTools.PatAlgos.tools.jetTools import supportedJetAlgos
from PhysicsTools.PatAlgos.tools.jetTools import updateJetCollection
bTagCSVV2    = ['pfDeepCSVJetTags:probb','pfDeepCSVJetTags:probbb','pfDeepCSVJetTags:probc']
bTagCMVAV2   = ['pfCombinedMVAV2BJetTags']
bTagDeepCSV  = ['pfCombinedInclusiveSecondaryVertexV2BJetTags']
bTagDeepJet  = [
  'pfDeepFlavourJetTags:probb','pfDeepFlavourJetTags:probbb','pfDeepFlavourJetTags:problepb',
  'pfDeepFlavourJetTags:probc','pfDeepFlavourJetTags:probuds','pfDeepFlavourJetTags:probg'
]
bTagDiscriminatorsForAK4 = bTagCSVV2bTagCMVAV2bTagDeepCSVbTagDeepJet
# - ak4gen (GenJet in NanoAOD), slimmedGenJets in MiniAOD 
# - ak8gen (GenJetAK8 in NanoAOD), slimmedGenJetsAK8 in MiniAOD 
    ""jet""     : ""ak8gen"",    
  ""ak8gen""  : {
    ""name"" : ""GenJetAK8"",
    ""doc""  : ""AK8 Gen jets"",
# By default, these collections are saved in the main NanoAODs:
# - ak4pfchs   (Jet    in NanoAOD), slimmedJets in MiniAOD  
# - ak8pfpuppi (FatJet in NanoAOD), slimmedJetsAK8 in MiniAOD 
# Below is a list of recojets that we can save in NanoAOD. Set 
# ""enabled"" to true if you want to store the recojet collection.
    ""genJetsCollection"": ""AK4GenJetsNoNu"",  
    ""inputCollection"" : """",
    ""genJetsCollection"": ""AK4GenJetsNoNu"",  
  }, 
  { 
    ""jet"" : ""ak4pfpuppi"",  
    ""enabled"" : True,        
    ""genJetsCollection"": ""AK4GenJetsNoNu"",  
    ""bTagDiscriminators"": bTagDiscriminatorsForAK4
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"""name""  : ""JetPuppi"",
""doc""   : ""AK4 PF Puppi jets with JECs applied, after basic selection (pt > 2)"",  
""ptcut"" : ""pt > 2"",      
""doQGL"" : True,
""doPUIDVar"": True,
""doBTag"": True,
""name""  : ""JetPF"",
""doc""   : ""AK4 PF jets with JECs applied, after basic selection (pt > 2)"",
""ptcut"" : ""pt > 2"",   
k4calo"" : {
""name"": ""JetCalo"",
""doc"" : ""AK4 Calo jets with JECs applied"",
""name""  : ""FatJetCHS"",
""doc""   : ""AK8 PF CHS jets with JECs applied, after basic selection (pt > 100)"", 
""ptcut"" : ""pt > 100""    
k8pf"" : {
""name""  : ""FatJetPF"",
""doc""   : ""AK8 PF jets with JECs applied, after basic selection (pt > 100)"", 
""ptcut"" : ""pt > 100"", 
ETVARS = cms.PSet(P4Vars,
onstituents   = jetTable.variables.nConstituents,
TVARS = cms.PSet(P4Vars,
wFactor       = jetTable.variables.rawFactor,
ea            = jetTable.variables.area,
HEF           = jetTable.variables.chHEF,
HEF           = jetTable.variables.neHEF,
EmEF          = jetTable.variables.chEmEF,
EmEF          = jetTable.variables.neEmEF,
EF            = jetTable.variables.muEF,
HEF           = Var(""HFHadronEnergyFraction()"",float,doc = ""hadronic energy fraction in HF"",precision = 6),
EmEF          = Var(""HFEMEnergyFraction()"",float,doc = ""electromagnetic energy fraction in HF"",precision = 6),
uons          = jetTable.variables.nMuons,
lectrons      = jetTable.variables.nElectrons,
onstituents   = jetTable.variables.nConstituents,
onstChHads    = Var(""chargedHadronMultiplicity()"",int,doc=""number of charged hadrons in the jet""),
onstNeuHads   = Var(""neutralHadronMultiplicity()"",int,doc=""number of neutral hadrons in the jet""),
onstHFHads    = Var(""HFHadronMultiplicity()"", int,doc=""number of HF hadrons in the jet""),
onstHFEMs     = Var(""HFEMMultiplicity()"",int,doc=""number of HF EMs in the jet""),
onstMuons     = Var(""muonMultiplicity()"",int,doc=""number of muons in the jet""),
onstElecs     = Var(""electronMultiplicity()"",int,doc=""number of electrons in the jet""),
onstPhotons   = Var(""photonMultiplicity()"",int,doc=""number of photons in the jet""),
VARS = cms.PSet(
Id_dR2Mean    = Var(""userFloat('puId_dR2Mean')"",float,doc=""pT^2-weighted average square distance of jet constituents from the jet axis (PileUp ID BDT input variable)"", precision= 6),
Id_majW       = Var(""userFloat('puId_majW')"",float,doc=""major axis of jet ellipsoid in eta-phi plane (PileUp ID BDT input variable)"", precision= 6)  ,
Id_minW       = Var(""userFloat('puId_minW')"",float,doc=""minor axis of jet ellipsoid in eta-phi plane (PileUp ID BDT input variable)"", precision= 6)  ,
Id_frac01     = Var(""userFloat('puId_frac01')"",float,doc=""fraction of constituents' pT contained within dR <0.1 (PileUp ID BDT input variable)"", precision= 6)  ,
Id_frac02     = Var(""userFloat('puId_frac02')"",float,doc=""fraction of constituents' pT contained within 0.1< dR <0.2 (PileUp ID BDT input variable)"", precision= 6) ,
Id_frac03     = Var(""userFloat('puId_frac03')"",float,doc=""fraction of constituents' pT contained within 0.2< dR <0.3 (PileUp ID BDT input variable)"", precision= 6) ,
Id_frac04     = Var(""userFloat('puId_frac04')"",float,doc=""fraction of constituents' pT contained within 0.3< dR <0.4 (PileUp ID BDT input variable)"", precision= 6) ,
Id_ptD        = Var(""userFloat('puId_ptD')"",float,doc=""pT-weighted average pT of constituents (PileUp ID BDT input variable)"", precision= 6) ,
Id_beta       = Var(""userFloat('puId_beta')"",float,doc=""fraction of pT of charged constituents associated to PV (PileUp ID BDT input variable)"", precision= 6) ,
Id_pull       = Var(""userFloat('puId_pull')"",float,doc=""magnitude of pull vector (PileUp ID BDT input variable)"", precision= 6) ,
Id_jetR       = Var(""userFloat('puId_jetR')"",float,doc=""fraction of jet pT carried by the leading constituent (PileUp ID BDT input variable)"", precision= 6) ,
Id_jetRchg    = Var(""userFloat('puId_jetRchg')"",float,doc=""fraction of jet pT carried by the leading charged constituent (PileUp ID BDT input variable)"", precision= 6) ,
Id_nCharged   = Var(""userInt('puId_nCharged')"",int,doc=""number of charged constituents (PileUp ID BDT input variable)""),
ARS = cms.PSet(
l_axis2       =  Var(""userFloat('qgl_axis2')"",float,doc=""ellipse minor jet axis (Quark vs Gluon likelihood input variable)"", precision= 6),
l_ptD         =  Var(""userFloat('qgl_ptD')"",float,doc=""pT-weighted average pT of constituents (Quark vs Gluon likelihood input variable)"", precision= 6),
l_mult        =  Var(""userInt('qgl_mult')"", int,doc=""PF candidates multiplicity (Quark vs Gluon likelihood input variable)""),
VARS = cms.PSet(
agCMVA  = jetTable.variables.btagCMVA,
agDeepB = jetTable.variables.btagDeepB,
agCSVV2 = jetTable.variables.btagCSVV2,
agDeepC = jetTable.variables.btagDeepC,
JETVARS = cms.PSet(
agDeepFlavB   = jetTable.variables.btagDeepFlavB,
agDeepFlavC   = jetTable.variables.btagDeepFlavC,
agDeepFlavG   = Var(""bDiscriminator('pfDeepFlavourJetTags:probg')"",float,doc=""DeepFlavour gluon tag raw score"",precision=10),
agDeepFlavUDS = Var(""bDiscriminator('pfDeepFlavourJetTags:probuds')"",float,doc=""DeepFlavour uds tag raw score"",precision=10)
JETVARS = cms.PSet(P4Vars,
f       = Var(""emEnergyFraction()"", float, doc = ""electromagnetic energy fraction"", precision = 10),
***************************************
co Jets related functions
***************************************
AddJetID(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName=""""):
tup modules to calculate PF jet ID 
PUPPIJet = True if ""Puppi"" in jetName else False
oseJetId = ""looseJetId{}"".format(jetName)
tattr(proc, looseJetId, proc.looseJetId.clone(
  src = jetSrc,
  filterParams=proc.looseJetId.filterParams.clone(
    version =""WINTER16""
  ),
ghtJetId = ""tightJetId{}"".format(jetName)
tattr(proc, tightJetId, proc.tightJetId.clone(
  src = jetSrc,
  filterParams=proc.tightJetId.filterParams.clone(
    version = ""SUMMER18{}"".format(""PUPPI"" if isPUPPIJet else """")
  ),
)
ghtJetIdLepVeto = ""tightJetIdLepVeto{}"".format(jetName)
tattr(proc, tightJetIdLepVeto, proc.tightJetIdLepVeto.clone(
  src = jetSrc,
  filterParams=proc.tightJetIdLepVeto.filterParams.clone(
    version = ""SUMMER18{}"".format(""PUPPI"" if isPUPPIJet else """")
  ),
n2_jme_2016.toModify(getattr(proc, tightJetId) .filterParams,        version = ""WINTER16"" )
n2_jme_2016.toModify(getattr(proc, tightJetIdLepVeto) .filterParams, version = ""WINTER16"" )
n2_jme_2017.toModify(getattr(proc, tightJetId) .filterParams,        version = ""WINTER17{}"".format(""PUPPI"" if isPUPPIJet else """"))
n2_jme_2017.toModify(getattr(proc, tightJetIdLepVeto) .filterParams, version = ""WINTER17{}"".format(""PUPPI"" if isPUPPIJet else """"))
Save variables as userInts in each jet
tJetWithUserData = ""{}WithUserData"".format(jetSrc)
tattr(proc, patJetWithUserData).userInts.tightId = cms.InputTag(tightJetId)
tattr(proc, patJetWithUserData).userInts.tightIdLepVeto = cms.InputTag(tightJetIdLepVeto)
n2_jme_2016.toModify(getattr(proc, patJetWithUserData).userInts, looseId = cms.InputTag(looseJetId))
Specfiy variables in the jetTable to save in NanoAOD
tattr(proc, jetTableName).variables.jetId = Var(""userInt('tightId')*24*userInt('tightIdLepVeto')"",int,doc=""Jet ID flags bit1 is loose (always false in 2017 since it does not exist), bit2 is tight, bit3 is tightLepVeto"")
n2_jme_2016.toModify(getattr(proc, jetTableName).variables, jetId = Var(""userInt('tightIdLepVeto')*4userInt('tightId')*2userInt('looseId')"",int, doc=""Jet ID flags bit1 is loose, bit2 is tight, bit3 is tightLepVeto""))
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, tightJetId))
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, tightJetId))1, getattr(proc, tightJetIdLepVeto))
tattr(proc,""_""jetSequenceName""_2016"", getattr(proc,jetSequenceName).copy())
tattr(proc,""_""jetSequenceName""_2016"").insert(getattr(proc, ""_""jetSequenceName""_2016"").index(getattr(proc, tightJetId)), getattr(proc, looseJetId))
n2_jme_2016.toReplaceWith(getattr(proc,jetSequenceName), getattr(proc, ""_""jetSequenceName""_2016""))
turn proc
AddPileUpJetIDVars(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName=""""):
""
tup modules to calculate pileup jet ID input variables for PF jet
""
Calculate pileup jet ID variables
JetIdVarsCalculator = ""puJetIdCalculator{}"".format(jetName) 
tattr(proc, puJetIdVarsCalculator, pileupJetIdCalculator.clone(
  jets = jetSrc,
  vertexes  = ""offlineSlimmedPrimaryVertices"",
  inputIsCorrected = True,
  applyJec  = False,
  usePuppi = True if ""Puppi"" in jetName else False
)
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, puJetIdVarsCalculator))
JetIDVar = ""puJetIDVar{}"".format(jetName)
tattr(proc, puJetIDVar, cms.EDProducer(""PileupJetIDVarProducer"",
  srcJet = cms.InputTag(jetSrc),    
  srcPileupJetId = cms.InputTag(puJetIdVarsCalculator)
)
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, puJetIdVarsCalculator))1, getattr(proc, puJetIDVar))
Save variables as userFloats and userInts for each jet
tJetWithUserData = ""{}WithUserData"".format(jetSrc)
tattr(proc,patJetWithUserData).userFloats.puId_dR2Mean  = cms.InputTag(""{}:dR2Mean"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_majW     = cms.InputTag(""{}:majW"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_minW     = cms.InputTag(""{}:minW"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac01   = cms.InputTag(""{}:frac01"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac02   = cms.InputTag(""{}:frac02"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac03   = cms.InputTag(""{}:frac03"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac04   = cms.InputTag(""{}:frac04"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_ptD      = cms.InputTag(""{}:ptD"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_beta     = cms.InputTag(""{}:beta"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_pull     = cms.InputTag(""{}:pull"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_jetR     = cms.InputTag(""{}:jetR"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_jetRchg  = cms.InputTag(""{}:jetRchg"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userInts.puId_nCharged   = cms.InputTag(""{}:nCharged"".format(puJetIDVar))
Specfiy variables in the jet table to save in NanoAOD
tattr(proc,jetTableName).variables.puId_dR2Mean  = PUIDVARS.puId_dR2Mean 
tattr(proc,jetTableName).variables.puId_majW     = PUIDVARS.puId_majW    
tattr(proc,jetTableName).variables.puId_minW     = PUIDVARS.puId_minW    
tattr(proc,jetTableName).variables.puId_frac01   = PUIDVARS.puId_frac01  
tattr(proc,jetTableName).variables.puId_frac02   = PUIDVARS.puId_frac02  
tattr(proc,jetTableName).variables.puId_frac03   = PUIDVARS.puId_frac03  
tattr(proc,jetTableName).variables.puId_frac04   = PUIDVARS.puId_frac04  
tattr(proc,jetTableName).variables.puId_ptD      = PUIDVARS.puId_ptD      
tattr(proc,jetTableName).variables.puId_beta     = PUIDVARS.puId_beta    
tattr(proc,jetTableName).variables.puId_pull     = PUIDVARS.puId_pull     
tattr(proc,jetTableName).variables.puId_jetR     = PUIDVARS.puId_jetR    
tattr(proc,jetTableName).variables.puId_jetRchg  = PUIDVARS.puId_jetRchg 
tattr(proc,jetTableName).variables.puId_nCharged = PUIDVARS.puId_nCharged 
turn proc
AddQGLTaggerVars(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName="""", calculateQGLVars=False):
""
hedule the QGTagger module to calculate input variables to the QG likelihood 
""
LTagger=""qgtagger{}"".format(jetName)
tJetWithUserData=""{}WithUserData"".format(jetSrc)
 calculateQGLVars:
setattr(proc, QGLTagger, qgtagger.clone(
    srcJets=jetSrc
  )
)
Save variables as userFloats and userInts for each jet
tattr(proc,patJetWithUserData).userFloats.qgl_axis2 = cms.InputTag(QGLTagger"":axis2"")
tattr(proc,patJetWithUserData).userFloats.qgl_ptD   = cms.InputTag(QGLTagger"":ptD"")
tattr(proc,patJetWithUserData).userInts.qgl_mult    = cms.InputTag(QGLTagger"":mult"")
Specfiy variables in the jet table to save in NanoAOD
tattr(proc,jetTableName).variables.qgl_axis2 =  QGLVARS.qgl_axis2
tattr(proc,jetTableName).variables.qgl_ptD   =  QGLVARS.qgl_ptD
tattr(proc,jetTableName).variables.qgl_mult  =  QGLVARS.qgl_mult
 calculateQGLVars:
getattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, QGLTagger))
turn proc
AddBTaggingScores(proc, jetTableName=""""):
""
ore b-tagging scores from various algortihm
""
tattr(proc, jetTableName).variables.btagCMVA      = jetTable.variables.btagCMVA
tattr(proc, jetTableName).variables.btagDeepB     = jetTable.variables.btagDeepB
tattr(proc, jetTableName).variables.btagCSVV2     = jetTable.variables.btagCSVV2
tattr(proc, jetTableName).variables.btagDeepC     = jetTable.variables.btagDeepC
tattr(proc, jetTableName).variables.btagDeepFlavB = jetTable.variables.btagDeepFlavB
tattr(proc, jetTableName).variables.btagDeepFlavC = jetTable.variables.btagDeepFlavC
turn proc
AddDeepJetGluonLQuarkScores(proc, jetTableName=""""):
""
ore DeepJet raw score in jetTable for gluon and light quark
""
tattr(proc, jetTableName).variables.btagDeepFlavG   = DEEPJETVARS.btagDeepFlavG  
tattr(proc, jetTableName).variables.btagDeepFlavUDS = DEEPJETVARS.btagDeepFlavUDS
turn proc
AddNewPatJets(proc, recoJetInfo, runOnMC):
""
d patJet into custom nanoAOD
""
tName = recoJetInfo.jetUpper
yload = recoJetInfo.jetCorrPayload 
PF    = recoJetInfo.doPF
Calo  = recoJetInfo.doCalo
 recoJetInfo.inputCollection != """":
patJetFinalColl = recoJetInfo.inputCollection
se: 
patJetFinalColl = ""selectedUpdatedPatJets{}Final"".format(jetName)
 doCalo:
patJetFinalColl = ""selectedPatJets{}"".format(jetName)
noInfoForJet = nanoInfo_recojets[recoJetInfo.jet]
tTablePrefix = nanoInfoForJet[""name""]
tTableDoc    = nanoInfoForJet[""doc""]
cut          = nanoInfoForJet[""ptcut""] if ""ptcut"" in nanoInfoForJet else """"
PUIDVar      = nanoInfoForJet[""doPUIDVar""] if ""doPUIDVar"" in nanoInfoForJet else False
QGL          = nanoInfoForJet[""doQGL""] if ""doQGL"" in nanoInfoForJet else False
BTag         = nanoInfoForJet[""doBTag""] if ""doBTag"" in nanoInfoForJet else False
vePatJets(proc, 
jetName, payload, patJetFinalColl, jetTablePrefix, jetTableDoc, doPF, doCalo, 
ptcut=ptcut, doPUIDVar=doPUIDVar, doQGL=doQGL, doBTag=doBTag, runOnMC=runOnMC
turn proc
SavePatJets(proc, jetName, payload, patJetFinalColl, jetTablePrefix, jetTableDoc, 
            doPF, doCalo, ptcut="""", doPUIDVar=False, doQGL=False, doBTag=False, runOnMC=False):
""
hedule modules for a given patJet collection and save its variables into custom NanoAOD
""
Setup jet correction factors
tCorrFactors = ""jetCorrFactorsNano{}"".format(jetName)
tattr(proc, jetCorrFactors, jetCorrFactorsNano.clone(
  src = patJetFinalColl,
  payload = payload,
)
Update jets
cJets = ""updatedJets{}"".format(jetName)
tattr(proc, srcJets, updatedJets.clone(
  jetSource = patJetFinalColl,
  jetCorrFactorsSource=[jetCorrFactors],
)
Setup UserDataEmbedder
cJetsWithUserData = ""updatedJets{}WithUserData"".format(jetName)
tattr(proc, srcJetsWithUserData, cms.EDProducer(""PATJetUserDataEmbedder"",
  src = cms.InputTag(srcJets),
  userFloats = cms.PSet(),    
  userInts = cms.PSet(),
)
Filter jets with pt cut
nalJetsForTable = ""finalJets{}"".format(jetName)
tattr(proc, finalJetsForTable, finalJets.clone(
  src = srcJetsWithUserData,
  cut = ptcut
)
Save jets in table
bleContent = PFJETVARS
 doCalo:
tableContent =  CALOJETVARS
tTable = ""jet{}Table"".format(jetName)
tattr(proc,jetTable, cms.EDProducer(""SimpleCandidateFlatTableProducer"",
  src = cms.InputTag(finalJetsForTable),
  cut = cms.string(""""), # Don't specify cuts here
  name = cms.string(jetTablePrefix),
  doc  = cms.string(jetTableDoc),
  singleton = cms.bool(False), # the number of entries is variable
  extension = cms.bool(False), # this is the main table for the jets
  variables = cms.PSet(tableContent)
)
tattr(proc,jetTable).variables.pt.precision=10
Save MC-only jet variables in table
tMCTable = ""jet{}MCTable"".format(jetName)
tattr(proc, jetMCTable, cms.EDProducer(""SimpleCandidateFlatTableProducer"",
  src = cms.InputTag(finalJetsForTable),
  cut = getattr(proc,jetTable).cut,
  name = cms.string(jetTablePrefix),
  singleton = cms.bool(False),
  extension = cms.bool(True), # this is an extension table
  variables = cms.PSet(
    partonFlavour = Var(""partonFlavour()"", int, doc=""flavour from parton matching""),
    hadronFlavour = Var(""hadronFlavour()"", int, doc=""flavour from hadron ghost clustering""),
    genJetIdx = Var(""?genJetFwdRef().backRef().isNonnull()?genJetFwdRef().backRef().key():-1"", int, doc=""index of matched gen jet""),
  )
)
Define the jet modules sequence first
tSequenceName = ""jet{}Sequence"".format(jetName)
tattr(proc, jetSequenceName, cms.Sequence(
  getattr(proc,jetCorrFactors)
  getattr(proc,srcJets)
  getattr(proc,srcJetsWithUserData)
  getattr(proc,finalJetsForTable)
)
Define the jet table sequences 
tTableSequenceName = ""jet{}TablesSequence"".format(jetName)
tattr(proc, jetTableSequenceName, cms.Sequence(getattr(proc,jetTable)))
tTableSequenceMCName = ""jet{}MCTablesSequence"".format(jetName)
tattr(proc, jetTableSequenceMCName, cms.Sequence(getattr(proc,jetMCTable)))
 runOnMC:
proc.nanoSequenceMC = getattr(proc,jetSequenceName)
proc.nanoSequenceMC = getattr(proc,jetTableSequenceName)
proc.nanoSequenceMC = getattr(proc,jetTableSequenceMCName)
se:
proc.nanoSequence = getattr(proc,jetSequenceName)
proc.nanoSequence = getattr(proc,jetTableSequenceName)
Schedule plugins to calculate Jet ID, PileUp Jet ID input variables, and Quark-Gluon Likehood input variables.
 doPF:
proc = AddJetID(proc, jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName)
if doPUIDVar:
  proc = AddPileUpJetIDVars(proc, jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName)
if doQGL:
  proc = AddQGLTaggerVars(proc,jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName, calculateQGLVars=True)
Save b-tagging algorithm scores. Should only be done for jet collection with b-tagging 
calculated when reclustered or collection saved with b-tagging info in MiniAOD
 doBTag:
AddBTaggingScores(proc,jetTableName=jetTable)
AddDeepJetGluonLQuarkScores(proc,jetTableName=jetTable)
turn proc
ReclusterAK4CHSJets(proc, recoJA, runOnMC):
""
cluster AK4 CHS jets and replace slimmedJets
at is used as default to save AK4 CHS jets 
 NanoAODs.  
""
int(""custom_jme_cff::ReclusterAK4CHSJets: Recluster AK4 PF CHS jets"")
Recluster AK4 CHS jets
g = { 
""jet"" : ""ak4pfchs"",   
""inputCollection"" : """",                 
""genJetsCollection"": ""AK4GenJetsNoNu"",
""bTagDiscriminators"": bTagDiscriminatorsForAK4
coJetInfo = recoJA.addRecoJetCollection(proc, **cfg) 
tName = recoJetInfo.jetUpper
tJetFinalColl = ""selectedUpdatedPatJets{}Final"".format(jetName)
Change the input jet source for jetCorrFactorsNano 
and updatedJets
oc.jetCorrFactorsNano.src=patJetFinalColl
oc.updatedJets.jetSource=patJetFinalColl
Change pt cut
oc.finalJets.cut = ""pt > 2""
oc.simpleCleanerTable.jetSel = ""pt > 10"" # Change this from 15 -> 10 
Add variables 
oc.jetTable.variables.hfHEF         = PFJETVARS.hfHEF
oc.jetTable.variables.hfEmEF        = PFJETVARS.hfEmEF
oc.jetTable.variables.nConstChHads  = PFJETVARS.nConstChHads
oc.jetTable.variables.nConstNeuHads = PFJETVARS.nConstNeuHads
oc.jetTable.variables.nConstHFHads  = PFJETVARS.nConstHFHads
oc.jetTable.variables.nConstHFEMs   = PFJETVARS.nConstHFEMs
oc.jetTable.variables.nConstMuons   = PFJETVARS.nConstMuons
oc.jetTable.variables.nConstElecs   = PFJETVARS.nConstElecs
oc.jetTable.variables.nConstPhotons = PFJETVARS.nConstPhotons
oc.jetTable.doc = cms.string(""AK4 PF CHS Jets with JECs applied, after basic selection (pt > 2)"")
Setup pileup jet ID with 80X training.
leupJetId80X = ""pileupJetId80X""
tattr(proc, pileupJetId80X, pileupJetId.clone(
  jets=""updatedJets"",
  algos=cms.VPSet(_chsalgos_81x),
  inputIsCorrected=True,
  applyJec=False,
  vertexes=""offlineSlimmedPrimaryVertices""
)
oc.jetSequence.insert(proc.jetSequence.index(proc.pileupJetId94X), getattr(proc, pileupJetId80X)) 
oc.updatedJetsWithUserData.userInts.puId80XfullId = cms.InputTag('pileupJetId80X:fullId')
n2_jme_2016.toModify(proc.updatedJetsWithUserData.userFloats, puId80XDisc = cms.InputTag(""pileupJetId80X:fullDiscriminant""))
oc.jetTable.variables.puId = Var(""userInt('puId80XfullId')"", int, doc=""Pilup ID flags with 80X (2016) training"")
n2_jme_2016.toModify(proc.jetTable.variables, puIdDisc = Var(""userFloat('puId80XDisc')"",float,doc=""Pilup ID discriminant with 80X (2016) training"",precision=10))
oc = AddPileUpJetIDVars(proc, 
jetName="""", 
jetSrc=""updatedJets"", 
jetTableName=""jetTable"",
jetSequenceName=""jetSequence""
Save variables as userFloats and userInts in each jet
oc.updatedJetsWithUserData.userFloats.qgl_axis2 = cms.InputTag(""qgtagger:axis2"")
oc.updatedJetsWithUserData.userFloats.qgl_ptD   = cms.InputTag(""qgtagger:ptD"")
oc.updatedJetsWithUserData.userInts.qgl_mult    = cms.InputTag(""qgtagger:mult"")
Specfiy variables in the jetTable to save in NanoAOD
oc.jetTable.variables.qgl_axis2 =  QGLVARS.qgl_axis2
oc.jetTable.variables.qgl_ptD   =  QGLVARS.qgl_ptD
oc.jetTable.variables.qgl_mult  =  QGLVARS.qgl_mult
Save DeepJet raw score for gluon and light quarks
oc.jetTable.variables.btagDeepFlavG   = DEEPJETVARS.btagDeepFlavG  
oc.jetTable.variables.btagDeepFlavUDS = DEEPJETVARS.btagDeepFlavUDS
turn proc
AddVariablesForAK8PuppiJets(proc):
""
d more variables for AK8 PFPUPPI jets
""
 These variables are not stored for AK8PFCHS (slimmedJetsAK8)
 in MiniAOD if their pt < 170 GeV. Hence the conditional fill.
oc.fatJetTable.variables.chHEF  = Var(""?isPFJet()?chargedHadronEnergyFraction():-1"", float, doc=""charged Hadron Energy Fraction"", precision = 6)
oc.fatJetTable.variables.neHEF  = Var(""?isPFJet()?neutralHadronEnergyFraction():-1"", float, doc=""neutral Hadron Energy Fraction"", precision = 6)
oc.fatJetTable.variables.chEmEF = Var(""?isPFJet()?chargedEmEnergyFraction():-1"", float, doc=""charged Electromagnetic Energy Fraction"", precision = 6)
oc.fatJetTable.variables.neEmEF = Var(""?isPFJet()?neutralEmEnergyFraction():-1"", float, doc=""neutral Electromagnetic Energy Fraction"", precision = 6)
oc.fatJetTable.variables.muEF   = Var(""?isPFJet()?muonEnergyFraction():-1"", float, doc=""muon Energy Fraction"", precision = 6)
oc.fatJetTable.variables.hfHEF  = Var(""?isPFJet()?HFHadronEnergyFraction():-1"", float, doc=""energy fraction in forward hadronic calorimeter"", precision = 6)
oc.fatJetTable.variables.hfEmEF = Var(""?isPFJet()?HFEMEnergyFraction():-1"", float, doc=""energy fraction in forward EM calorimeter"", precision = 6)
oc.fatJetTable.variables.nConstChHads   = Var(""?isPFJet()?chargedHadronMultiplicity():-1"",int, doc=""number of charged hadrons in the jet"")
oc.fatJetTable.variables.nConstNeuHads  = Var(""?isPFJet()?neutralHadronMultiplicity():-1"",int, doc=""number of neutral hadrons in the jet"")
oc.fatJetTable.variables.nConstHFHads   = Var(""?isPFJet()?HFHadronMultiplicity():-1"", int, doc=""number of HF Hadrons in the jet"")
oc.fatJetTable.variables.nConstHFEMs    = Var(""?isPFJet()?HFEMMultiplicity():-1"", int, doc=""number of HF EMs in the jet"")
oc.fatJetTable.variables.nConstMuons    = Var(""?isPFJet()?muonMultiplicity():-1"", int, doc=""number of muons in the jet"")
oc.fatJetTable.variables.nConstElecs    = Var(""?isPFJet()?electronMultiplicity():-1"", int, doc=""number of electrons in the jet"")
oc.fatJetTable.variables.nConstPhotons  = Var(""?isPFJet()?photonMultiplicity():-1"", int, doc=""number of photons in the jet"")
turn proc
***************************************
n Jets related functions
***************************************
AddNewGenJets(proc, genJetInfo):
""
d genJet into custom nanoAOD
""
nJetName         = genJetInfo.jetUpper
nJetAlgo         = genJetInfo.jetAlgo
nJetSize         = genJetInfo.jetSize
nJetSizeNr       = genJetInfo.jetSizeNr
nJetFinalColl    = ""{}{}{}"".format(genJetAlgo.upper(), genJetSize, ""GenJetsNoNu"")
nJetTablePrefix  = nanoInfo_genjets[genJetInfo.jet][""name""]
nJetTableDoc     = nanoInfo_genjets[genJetInfo.jet][""doc""]
veGenJets(proc, genJetName, genJetAlgo, genJetSizeNr, genJetFinalColl, genJetTablePrefix, genJetTableDoc, runOnMC=False)
turn proc
SaveGenJets(proc, genJetName, genJetAlgo, genJetSizeNr, genJetFinalColl, genJetTablePrefix, genJetTableDoc, runOnMC=False):
""
hedule modules for a given genJet collection and save its variables into custom NanoAOD
""
nJetTableThisJet = ""jet{}Table"".format(genJetName)
tattr(proc, genJetTableThisJet, genJetTable.clone(
  src       = genJetFinalColl,
  cut       = ""pt > 1"",
  name      = genJetTablePrefix,
  doc       = genJetTableDoc,
  variables = GENJETVARS
)
nJetFlavourAssociationThisJet = ""genJet{}FlavourAssociation"".format(genJetName)
tattr(proc, genJetFlavourAssociationThisJet, genJetFlavourAssociation.clone(
  jets           = getattr(proc,genJetTableThisJet).src,
  jetAlgorithm   = supportedJetAlgos[genJetAlgo],
  rParam         = genJetSizeNr,
)
nJetFlavourTableThisJet = ""genJet{}FlavourTable"".format(genJetName)
tattr(proc, genJetFlavourTableThisJet, genJetFlavourTable.clone(
  name            = getattr(proc,genJetTableThisJet).name,
  src             = getattr(proc,genJetTableThisJet).src,
  cut             = getattr(proc,genJetTableThisJet).cut,
  jetFlavourInfos = genJetFlavourAssociationThisJet,
)
nJetSequenceName = ""genJet{}Sequence"".format(genJetName)
tattr(proc, genJetSequenceName, cms.Sequence(
  getattr(proc,genJetTableThisJet)
  getattr(proc,genJetFlavourAssociationThisJet)
  getattr(proc,genJetFlavourTableThisJet)
)
oc.nanoSequenceMC.insert(proc.nanoSequenceMC.index(proc.jetMC)1, getattr(proc,genJetSequenceName)) 
turn proc
ReclusterAK4GenJets(proc, genJA):
""
cluster AK4 Gen jets and replace 
immedGenJets that is used as default 
 save AK4 Gen jets in NanoAODs. 
""
int(""custom_jme_cff::ReclusterAK4GenJets: Recluster AK4 Gen jets"")
Recluster AK4 Gen jet
g = { 
""jet"" : ""ak4gen"",   
nJetInfo = genJA.addGenJetCollection(proc, **cfg)
nJetName            = genJetInfo.jetUpper
nJetAlgo            = genJetInfo.jetAlgo
nJetSize            = genJetInfo.jetSize
nJetSizeNr          = genJetInfo.jetSizeNr
lectedPatGenJets    = ""{}{}{}"".format(genJetAlgo.upper(), genJetSize, ""GenJetsNoNu"")
Change jet source to the newly clustered jet collection. Set very low pt cut for jets 
to be stored in the GenJet Table
oc.genJetTable.src = selectedPatGenJets
oc.genJetTable.cut = ""pt > 1""
oc.genJetTable.doc  =""AK4 Gen jets (made with visible genparticles)""
nJetFlavourAssociationThisJet = ""genJet{}FlavourAssociation"".format(genJetName)
tattr(proc, genJetFlavourAssociationThisJet, genJetFlavourAssociation.clone(
  jets           = proc.genJetTable.src,
  jetAlgorithm   = supportedJetAlgos[genJetAlgo],
  rParam         = genJetSizeNr,
)
oc.jetMC.insert(proc.jetMC.index(proc.genJetFlavourTable), getattr(proc, genJetFlavourAssociationThisJet)) 
turn proc
AddVariablesForAK4GenJets(proc):
oc.genJetTable.variables.nConstituents = GENJETVARS.nConstituents
turn proc
AddVariablesForAK8GenJets(proc):
oc.genJetAK8Table.variables.nConstituents = GENJETVARS.nConstituents
turn proc
========================================================================
sc. functions
========================================================================
RemoveAllJetPtCuts(proc):
""
move default pt cuts for all jets set in jets_cff.py 
""
oc.finalJets.cut             = """" # 15 -> 10
oc.finalJetsAK8.cut          = """" # 170 -> 170
oc.genJetTable.cut           = """" # 10 -> 8
oc.genJetFlavourTable.cut    = """" # 10 -> 8
oc.genJetAK8Table.cut        = """" # 100 -> 80
oc.genJetAK8FlavourTable.cut = """" # 100 -> 80
turn proc
========================================================================
STOMIZATION function
========================================================================
PrepJMECustomNanoAOD(process,runOnMC):
##########################################################################
Remove all default jet pt cuts from jets_cff.py
##########################################################################
ocess = RemoveAllJetPtCuts(process)
#########################################################################
Gen-level jets related functions. Only for MC.
#########################################################################
nJA = GenJetAdder()
 runOnMC:
############################################################################
# Save additional variables for AK8 GEN jets
############################################################################
process = AddVariablesForAK8GenJets(process)
###########################################################################
# Recluster AK4 GEN jets
###########################################################################
process = ReclusterAK4GenJets(process, genJA)
process = AddVariablesForAK4GenJets(process)
###########################################################################
# Add additional GEN jets to NanoAOD
###########################################################################
for jetConfig in config_genjets:
  cfg = { k : v for k, v in jetConfig.items() if k != ""enabled""}
  genJetInfo = genJA.addGenJetCollection(process, **cfg)
  AddNewGenJets(process, genJetInfo)
#########################################################################
Reco-level jets related functions. For both MC and data.
#########################################################################
#########################################################################
Save additional variables for AK8Puppi jets
#########################################################################
ocess = AddVariablesForAK8PuppiJets(process)
#########################################################################
Recluster AK4 CHS jets and replace ""slimmedJets""
#########################################################################
ocess = ReclusterAK4CHSJets(process, recoJA, runOnMC)
#########################################################################
Add additional Reco jets to NanoAOD
#########################################################################
cfg = { k : v for k, v in jetConfig.items() if k != ""enabled""}
AddNewPatJets(process, recoJetInfo, runOnMC)
"
-------------------------------------------------------------------------
"```python
  ""ak4pfchs"" : {
      ""name""  : ""JetCalo"",
      ""doc""   : ""AK4 Calo jets with JECs applied"",
  },
  ""ak8pfchs"" : {
      ""name""  : ""FatJetCHS"",
      ""doc""   : ""AK8 PF CHS jets with JECs applied, after basic selection (pt > 100)"",
      ""ptcut"" : ""pt > 100""
  },
  ""ak8pfpuppi"" : {
      ""name""  : ""FatJetPF"",
      ""doc""   : ""AK8 PF jets with JECs applied, after basic selection (pt > 100)"",
      ""ptcut"" : ""pt > 100"",
      ETVARS = cms.PSet(P4Vars,
          constituents   = jetTable.variables.nConstituents,
```
```python
      TVARS = cms.PSet(P4Vars,
          rawFactor       = jetTable.variables.rawFactor,
          area            = jetTable.variables.area,
          chHEF           = jetTable.variables.chHEF,
          neHEF           = jetTable.variables.neHEF,
          chEmEF          = jetTable.variables.chEmEF,
          neEmEF          = jetTable.variables.neEmEF,
          muEF            = jetTable.variables.muEF,
          hfHEF           = Var(""HFHadronEnergyFraction()"", float, doc = ""hadronic energy fraction in HF"", precision = 6),
          hfEmEF          = Var(""HFEMEnergyFraction()"", float, doc = ""electromagnetic energy fraction in HF"", precision = 6),
          nMuons          = jetTable.variables.nMuons,
          nElectrons      = jetTable.variables.nElectrons,
          nConstituents   = jetTable.variables.nConstituents,
          nConstChHads    = Var(""chargedHadronMultiplicity()"", int, doc=""number of charged hadrons in the jet""),
          nConstNeuHads   = Var(""neutralHadronMultiplicity()"", int, doc=""number of neutral hadrons in the jet""),
          nConstHFHads    = Var(""HFHadronMultiplicity()"", int, doc=""number of HF hadrons in the jet""),
          nConstHFEMs     = Var(""HFEMMultiplicity()"", int, doc=""number of HF EMs in the jet""),
          nConstMuons     = Var(""muonMultiplicity()"", int, doc=""number of muons in the jet""),
          nConstElecs     = Var(""electronMultiplicity()"", int, doc=""number of electrons in the jet""),
          nConstPhotons   = Var(""photonMultiplicity()"", int, doc=""number of photons in the jet""),
```
```python
          VARS = cms.PSet(
              Id_dR2Mean    = Var(""userFloat('puId_dR2Mean')"", float, doc=""pT^2-weighted average square distance of jet constituents from the jet axis (PileUp ID BDT input variable)"", precision= 6),
              Id_majW       = Var(""userFloat('puId_majW')"", float, doc=""major axis of jet ellipsoid in eta-phi plane (PileUp ID BDT input variable)"", precision= 6),
              Id_minW       = Var(""userFloat('puId_minW')"", float, doc=""minor axis of jet ellipsoid in eta-phi plane (PileUp ID BDT input variable)"", precision= 6),
              Id_frac01     = Var(""userFloat('puId_frac01')"", float, doc=""fraction of constituents' pT contained within dR <0.1 (PileUp ID BDT input variable)"", precision= 6),
              Id_frac02     = Var(""userFloat('puId_frac02')"", float, doc=""fraction of constituents' pT contained within 0.1< dR <0.2 (PileUp ID BDT input variable)"", precision= 6),
              Id_frac03     = Var(""userFloat('puId_frac03')"", float, doc=""fraction of constituents' pT contained within 0.2< dR <0.3 (PileUp ID BDT input variable)"", precision= 6),
              Id_frac04     = Var(""userFloat('puId_frac04')"", float, doc=""fraction of constituents' pT contained within 0.3< dR <0.4 (PileUp ID BDT input variable)"", precision= 6),
              Id_ptD        = Var(""userFloat('puId_ptD')"", float, doc=""pT-weighted average pT of constituents (PileUp ID BDT input variable)"", precision= 6),
              Id_beta       = Var(""userFloat('puId_beta')"", float, doc=""fraction of pT of charged constituents associated to PV (PileUp ID BDT input variable)"", precision= 6),
              Id_pull       = Var(""userFloat('puId_pull')"", float, doc=""magnitude of pull vector (PileUp ID BDT input variable)"", precision= 6),
              Id_jetR       = Var(""userFloat('puId_jetR')"", float, doc=""fraction of jet pT carried by the leading constituent (PileUp ID BDT input variable)"", precision= 6),
              Id_jetRchg    = Var(""userFloat('puId_jetRchg')"", float, doc=""fraction of jet pT carried by the leading charged constituent (PileUp ID BDT input variable)"", precision= 6),
              Id_nCharged   = Var(""userInt('puId_nCharged')"", int, doc=""number of charged constituents (PileUp ID BDT input variable)""),
```
```python
          ERS = cms.PSet(
              qgl_axis2       =  Var(""userFloat('qgl_axis2')"", float, doc=""ellipse minor jet axis (Quark vs Gluon likelihood input variable)"", precision= 6),
              qgl_ptD         =  Var(""userFloat('qgl_ptD')"", float, doc=""pT-weighted average pT of constituents (Quark vs Gluon likelihood input variable)"", precision= 6),
              qgl_mult        =  Var(""userInt('qgl_mult')"", int, doc=""PF candidates multiplicity (Quark vs Gluon likelihood input variable)""),
          VARS = cms.PSet(
              btagCMVA  = jetTable.variables.btagCMVA,
              btagDeepB = jetTable.variables.btagDeepB,
              btagCSVV2 = jetTable.variables.btagCSVV2,
              btagDeepC = jetTable.variables.btagDeepC,
              btagDeepFlavB   = jetTable.variables.btagDeepFlavB,
              btagDeepFlavC   = jetTable.variables.btagDeepFlavC,
              btagDeepFlavG   = Var(""bDiscriminator('pfDeepFlavourJetTags:probg')"", float, doc=""DeepFlavour gluon tag raw score"", precision=10),
              btagDeepFlavUDS = Var(""bDiscriminator('pfDeepFlavourJetTags:probuds')"", float, doc=""DeepFlavour uds tag raw score"", precision=10)
          JETVARS = cms.PSet(P4Vars,
              f       = Var(""emEnergyFraction()"", float, doc = ""electromagnetic energy fraction"", precision = 10),
  ""JetCalo"": {
      ""doPUIDVar"": True,
      ""doQGL"": False,
      ""doBTag"": False
  },
  ""FatJetCHS"": {
      ""doPUIDVar"": False,
      ""doQGL"": False,
      ""doBTag"": False
  },
  ""FatJetPF"": {
      ""doPUIDVar"": False,
      ""doQGL"": False,
      ""doBTag"": False
  },
```"
-------------------------------------------------------------------------
"""name""  : ""JetPuppi"",
""doc""   : ""AK4 PF Puppi jets with JECs applied, after basic selection (pt > 2)"",  
""ptcut"" : ""pt > 2"",      
""doQGL"" : True,
""doPUIDVar"": True,
""doBTag"": True,
""name""  : ""JetPF"",
""doc""   : ""AK4 PF jets with JECs applied, after basic selection (pt > 2)"",
""ptcut"" : ""pt > 2"",   
k4calo"" : {
""name"": ""JetCalo"",
""doc"" : ""AK4 Calo jets with JECs applied"",
""name""  : ""FatJetCHS"",
""doc""   : ""AK8 PF CHS jets with JECs applied, after basic selection (pt > 100)"", 
""ptcut"" : ""pt > 100""    
k8pf"" : {
""name""  : ""FatJetPF"",
""doc""   : ""AK8 PF jets with JECs applied, after basic selection (pt > 100)"", 
""ptcut"" : ""pt > 100"", 
ETVARS = cms.PSet(P4Vars,
onstituents   = jetTable.variables.nConstituents,
TVARS = cms.PSet(P4Vars,
wFactor       = jetTable.variables.rawFactor,
ea            = jetTable.variables.area,
HEF           = jetTable.variables.chHEF,
HEF           = jetTable.variables.neHEF,
EmEF          = jetTable.variables.chEmEF,
EmEF          = jetTable.variables.neEmEF,
EF            = jetTable.variables.muEF,
HEF           = Var(""HFHadronEnergyFraction()"",float,doc = ""hadronic energy fraction in HF"",precision = 6),
EmEF          = Var(""HFEMEnergyFraction()"",float,doc = ""electromagnetic energy fraction in HF"",precision = 6),
uons          = jetTable.variables.nMuons,
lectrons      = jetTable.variables.nElectrons,
onstituents   = jetTable.variables.nConstituents,
onstChHads    = Var(""chargedHadronMultiplicity()"",int,doc=""number of charged hadrons in the jet""),
onstNeuHads   = Var(""neutralHadronMultiplicity()"",int,doc=""number of neutral hadrons in the jet""),
onstHFHads    = Var(""HFHadronMultiplicity()"", int,doc=""number of HF hadrons in the jet""),
onstHFEMs     = Var(""HFEMMultiplicity()"",int,doc=""number of HF EMs in the jet""),
onstMuons     = Var(""muonMultiplicity()"",int,doc=""number of muons in the jet""),
onstElecs     = Var(""electronMultiplicity()"",int,doc=""number of electrons in the jet""),
onstPhotons   = Var(""photonMultiplicity()"",int,doc=""number of photons in the jet""),
VARS = cms.PSet(
Id_dR2Mean    = Var(""userFloat('puId_dR2Mean')"",float,doc=""pT^2-weighted average square distance of jet constituents from the jet axis (PileUp ID BDT input variable)"", precision= 6),
Id_majW       = Var(""userFloat('puId_majW')"",float,doc=""major axis of jet ellipsoid in eta-phi plane (PileUp ID BDT input variable)"", precision= 6)  ,
Id_minW       = Var(""userFloat('puId_minW')"",float,doc=""minor axis of jet ellipsoid in eta-phi plane (PileUp ID BDT input variable)"", precision= 6)  ,
Id_frac01     = Var(""userFloat('puId_frac01')"",float,doc=""fraction of constituents' pT contained within dR <0.1 (PileUp ID BDT input variable)"", precision= 6)  ,
Id_frac02     = Var(""userFloat('puId_frac02')"",float,doc=""fraction of constituents' pT contained within 0.1< dR <0.2 (PileUp ID BDT input variable)"", precision= 6) ,
Id_frac03     = Var(""userFloat('puId_frac03')"",float,doc=""fraction of constituents' pT contained within 0.2< dR <0.3 (PileUp ID BDT input variable)"", precision= 6) ,
Id_frac04     = Var(""userFloat('puId_frac04')"",float,doc=""fraction of constituents' pT contained within 0.3< dR <0.4 (PileUp ID BDT input variable)"", precision= 6) ,
Id_ptD        = Var(""userFloat('puId_ptD')"",float,doc=""pT-weighted average pT of constituents (PileUp ID BDT input variable)"", precision= 6) ,
Id_beta       = Var(""userFloat('puId_beta')"",float,doc=""fraction of pT of charged constituents associated to PV (PileUp ID BDT input variable)"", precision= 6) ,
Id_pull       = Var(""userFloat('puId_pull')"",float,doc=""magnitude of pull vector (PileUp ID BDT input variable)"", precision= 6) ,
Id_jetR       = Var(""userFloat('puId_jetR')"",float,doc=""fraction of jet pT carried by the leading constituent (PileUp ID BDT input variable)"", precision= 6) ,
Id_jetRchg    = Var(""userFloat('puId_jetRchg')"",float,doc=""fraction of jet pT carried by the leading charged constituent (PileUp ID BDT input variable)"", precision= 6) ,
Id_nCharged   = Var(""userInt('puId_nCharged')"",int,doc=""number of charged constituents (PileUp ID BDT input variable)""),
ARS = cms.PSet(
l_axis2       =  Var(""userFloat('qgl_axis2')"",float,doc=""ellipse minor jet axis (Quark vs Gluon likelihood input variable)"", precision= 6),
l_ptD         =  Var(""userFloat('qgl_ptD')"",float,doc=""pT-weighted average pT of constituents (Quark vs Gluon likelihood input variable)"", precision= 6),
l_mult        =  Var(""userInt('qgl_mult')"", int,doc=""PF candidates multiplicity (Quark vs Gluon likelihood input variable)""),
VARS = cms.PSet(
agCMVA  = jetTable.variables.btagCMVA,
agDeepB = jetTable.variables.btagDeepB,
agCSVV2 = jetTable.variables.btagCSVV2,
agDeepC = jetTable.variables.btagDeepC,
JETVARS = cms.PSet(
agDeepFlavB   = jetTable.variables.btagDeepFlavB,
agDeepFlavC   = jetTable.variables.btagDeepFlavC,
agDeepFlavG   = Var(""bDiscriminator('pfDeepFlavourJetTags:probg')"",float,doc=""DeepFlavour gluon tag raw score"",precision=10),
agDeepFlavUDS = Var(""bDiscriminator('pfDeepFlavourJetTags:probuds')"",float,doc=""DeepFlavour uds tag raw score"",precision=10)
JETVARS = cms.PSet(P4Vars,
f       = Var(""emEnergyFraction()"", float, doc = ""electromagnetic energy fraction"", precision = 10),
***************************************
co Jets related functions
***************************************
AddJetID(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName=""""):
tup modules to calculate PF jet ID 
PUPPIJet = True if ""Puppi"" in jetName else False
oseJetId = ""looseJetId{}"".format(jetName)
tattr(proc, looseJetId, proc.looseJetId.clone(
  src = jetSrc,
  filterParams=proc.looseJetId.filterParams.clone(
    version =""WINTER16""
  ),
ghtJetId = ""tightJetId{}"".format(jetName)
tattr(proc, tightJetId, proc.tightJetId.clone(
  src = jetSrc,
  filterParams=proc.tightJetId.filterParams.clone(
    version = ""SUMMER18{}"".format(""PUPPI"" if isPUPPIJet else """")
  ),
ghtJetIdLepVeto = ""tightJetIdLepVeto{}"".format(jetName)
tattr(proc, tightJetIdLepVeto, proc.tightJetIdLepVeto.clone(
  src = jetSrc,
  filterParams=proc.tightJetIdLepVeto.filterParams.clone(
    version = ""SUMMER18{}"".format(""PUPPI"" if isPUPPIJet else """")
  ),
)
n2_jme_2016.toModify(getattr(proc, tightJetId) .filterParams,        version = ""WINTER16"" )
n2_jme_2016.toModify(getattr(proc, tightJetIdLepVeto) .filterParams, version = ""WINTER16"" )
n2_jme_2017.toModify(getattr(proc, tightJetId) .filterParams,        version = ""WINTER17{}"".format(""PUPPI"" if isPUPPIJet else """"))
n2_jme_2017.toModify(getattr(proc, tightJetIdLepVeto) .filterParams, version = ""WINTER17{}"".format(""PUPPI"" if isPUPPIJet else """"))
Save variables as userInts in each jet
tJetWithUserData = ""{}WithUserData"".format(jetSrc)
tattr(proc, patJetWithUserData).userInts.tightId = cms.InputTag(tightJetId)
tattr(proc, patJetWithUserData).userInts.tightIdLepVeto = cms.InputTag(tightJetIdLepVeto)
n2_jme_2016.toModify(getattr(proc, patJetWithUserData).userInts, looseId = cms.InputTag(looseJetId))
Specfiy variables in the jetTable to save in NanoAOD
tattr(proc, jetTableName).variables.jetId = Var(""userInt('tightId')*24*userInt('tightIdLepVeto')"",int,doc=""Jet ID flags bit1 is loose (always false in 2017 since it does not exist), bit2 is tight, bit3 is tightLepVeto"")
n2_jme_2016.toModify(getattr(proc, jetTableName).variables, jetId = Var(""userInt('tightIdLepVeto')*4userInt('tightId')*2userInt('looseId')"",int, doc=""Jet ID flags bit1 is loose, bit2 is tight, bit3 is tightLepVeto""))
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, tightJetId))
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, tightJetId))1, getattr(proc, tightJetIdLepVeto))
tattr(proc,""_""jetSequenceName""_2016"", getattr(proc,jetSequenceName).copy())
tattr(proc,""_""jetSequenceName""_2016"").insert(getattr(proc, ""_""jetSequenceName""_2016"").index(getattr(proc, tightJetId)), getattr(proc, looseJetId))
n2_jme_2016.toReplaceWith(getattr(proc,jetSequenceName), getattr(proc, ""_""jetSequenceName""_2016""))
turn proc
AddPileUpJetIDVars(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName=""""):
""
tup modules to calculate pileup jet ID input variables for PF jet
""
Calculate pileup jet ID variables
JetIdVarsCalculator = ""puJetIdCalculator{}"".format(jetName) 
tattr(proc, puJetIdVarsCalculator, pileupJetIdCalculator.clone(
  jets = jetSrc,
  vertexes  = ""offlineSlimmedPrimaryVertices"",
  inputIsCorrected = True,
  applyJec  = False,
  usePuppi = True if ""Puppi"" in jetName else False
)
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, puJetIdVarsCalculator))
JetIDVar = ""puJetIDVar{}"".format(jetName)
tattr(proc, puJetIDVar, cms.EDProducer(""PileupJetIDVarProducer"",
  srcJet = cms.InputTag(jetSrc),    
  srcPileupJetId = cms.InputTag(puJetIdVarsCalculator)
)
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, puJetIdVarsCalculator))1, getattr(proc, puJetIDVar))
Save variables as userFloats and userInts for each jet
tJetWithUserData = ""{}WithUserData"".format(jetSrc)
tattr(proc,patJetWithUserData).userFloats.puId_dR2Mean  = cms.InputTag(""{}:dR2Mean"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_majW     = cms.InputTag(""{}:majW"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_minW     = cms.InputTag(""{}:minW"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac01   = cms.InputTag(""{}:frac01"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac02   = cms.InputTag(""{}:frac02"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac03   = cms.InputTag(""{}:frac03"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac04   = cms.InputTag(""{}:frac04"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_ptD      = cms.InputTag(""{}:ptD"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_beta     = cms.InputTag(""{}:beta"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_pull     = cms.InputTag(""{}:pull"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_jetR     = cms.InputTag(""{}:jetR"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_jetRchg  = cms.InputTag(""{}:jetRchg"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userInts.puId_nCharged   = cms.InputTag(""{}:nCharged"".format(puJetIDVar))
Specfiy variables in the jet table to save in NanoAOD
tattr(proc,jetTableName).variables.puId_dR2Mean  = PUIDVARS.puId_dR2Mean 
tattr(proc,jetTableName).variables.puId_majW     = PUIDVARS.puId_majW    
tattr(proc,jetTableName).variables.puId_minW     = PUIDVARS.puId_minW    
tattr(proc,jetTableName).variables.puId_frac01   = PUIDVARS.puId_frac01  
tattr(proc,jetTableName).variables.puId_frac02   = PUIDVARS.puId_frac02  
tattr(proc,jetTableName).variables.puId_frac03   = PUIDVARS.puId_frac03  
tattr(proc,jetTableName).variables.puId_frac04   = PUIDVARS.puId_frac04  
tattr(proc,jetTableName).variables.puId_ptD      = PUIDVARS.puId_ptD      
tattr(proc,jetTableName).variables.puId_beta     = PUIDVARS.puId_beta    
tattr(proc,jetTableName).variables.puId_pull     = PUIDVARS.puId_pull     
tattr(proc,jetTableName).variables.puId_jetR     = PUIDVARS.puId_jetR    
tattr(proc,jetTableName).variables.puId_jetRchg  = PUIDVARS.puId_jetRchg 
tattr(proc,jetTableName).variables.puId_nCharged = PUIDVARS.puId_nCharged 
turn proc
AddQGLTaggerVars(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName="""", calculateQGLVars=False):
""
hedule the QGTagger module to calculate input variables to the QG likelihood 
""
LTagger=""qgtagger{}"".format(jetName)
tJetWithUserData=""{}WithUserData"".format(jetSrc)
 calculateQGLVars:
setattr(proc, QGLTagger, qgtagger.clone(
    srcJets=jetSrc
  )
)
Save variables as userFloats and userInts for each jet
tattr(proc,patJetWithUserData).userFloats.qgl_axis2 = cms.InputTag(QGLTagger"":axis2"")
tattr(proc,patJetWithUserData).userFloats.qgl_ptD   = cms.InputTag(QGLTagger"":ptD"")
tattr(proc,patJetWithUserData).userInts.qgl_mult    = cms.InputTag(QGLTagger"":mult"")
Specfiy variables in the jet table to save in NanoAOD
tattr(proc,jetTableName).variables.qgl_axis2 =  QGLVARS.qgl_axis2
tattr(proc,jetTableName).variables.qgl_ptD   =  QGLVARS.qgl_ptD
tattr(proc,jetTableName).variables.qgl_mult  =  QGLVARS.qgl_mult
 calculateQGLVars:
getattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, QGLTagger))
turn proc
AddBTaggingScores(proc, jetTableName=""""):
""
ore b-tagging scores from various algortihm
""
tattr(proc, jetTableName).variables.btagCMVA      = jetTable.variables.btagCMVA
tattr(proc, jetTableName).variables.btagDeepB     = jetTable.variables.btagDeepB
tattr(proc, jetTableName).variables.btagCSVV2     = jetTable.variables.btagCSVV2
tattr(proc, jetTableName).variables.btagDeepC     = jetTable.variables.btagDeepC
tattr(proc, jetTableName).variables.btagDeepFlavB = jetTable.variables.btagDeepFlavB
tattr(proc, jetTableName).variables.btagDeepFlavC = jetTable.variables.btagDeepFlavC
turn proc
AddDeepJetGluonLQuarkScores(proc, jetTableName=""""):
""
ore DeepJet raw score in jetTable for gluon and light quark
""
tattr(proc, jetTableName).variables.btagDeepFlavG   = DEEPJETVARS.btagDeepFlavG  
tattr(proc, jetTableName).variables.btagDeepFlavUDS = DEEPJETVARS.btagDeepFlavUDS
turn proc
AddNewPatJets(proc, recoJetInfo, runOnMC):
""
d patJet into custom nanoAOD
""
tName = recoJetInfo.jetUpper
yload = recoJetInfo.jetCorrPayload 
PF    = recoJetInfo.doPF
Calo  = recoJetInfo.doCalo
 recoJetInfo.inputCollection != """":
patJetFinalColl = recoJetInfo.inputCollection
se: 
patJetFinalColl = ""selectedUpdatedPatJets{}Final"".format(jetName)
 doCalo:
patJetFinalColl = ""selectedPatJets{}"".format(jetName)
noInfoForJet = nanoInfo_recojets[recoJetInfo.jet]
tTablePrefix = nanoInfoForJet[""name""]
tTableDoc    = nanoInfoForJet[""doc""]
cut          = nanoInfoForJet[""ptcut""] if ""ptcut"" in nanoInfoForJet else """"
PUIDVar      = nanoInfoForJet[""doPUIDVar""] if ""doPUIDVar"" in nanoInfoForJet else False
QGL          = nanoInfoForJet[""doQGL""] if ""doQGL"" in nanoInfoForJet else False
BTag         = nanoInfoForJet[""doBTag""] if ""doBTag"" in nanoInfoForJet else False
vePatJets(proc, 
jetName, payload, patJetFinalColl, jetTablePrefix, jetTableDoc, doPF, doCalo, 
ptcut=ptcut, doPUIDVar=doPUIDVar, doQGL=doQGL, doBTag=doBTag, runOnMC=runOnMC
turn proc
SavePatJets(proc, jetName, payload, patJetFinalColl, jetTablePrefix, jetTableDoc, 
            doPF, doCalo, ptcut="""", doPUIDVar=False, doQGL=False, doBTag=False, runOnMC=False):
""
hedule modules for a given patJet collection and save its variables into custom NanoAOD
""
Setup jet correction factors
tCorrFactors = ""jetCorrFactorsNano{}"".format(jetName)
tattr(proc, jetCorrFactors, jetCorrFactorsNano.clone(
  src = patJetFinalColl,
  payload = payload,
)
Update jets
cJets = ""updatedJets{}"".format(jetName)
tattr(proc, srcJets, updatedJets.clone(
  jetSource = patJetFinalColl,
  jetCorrFactorsSource=[jetCorrFactors],
)
Setup UserDataEmbedder
cJetsWithUserData = ""updatedJets{}WithUserData"".format(jetName)
tattr(proc, srcJetsWithUserData, cms.EDProducer(""PATJetUserDataEmbedder"",
  src = cms.InputTag(srcJets),
  userFloats = cms.PSet(),    
  userInts = cms.PSet(),
)
Filter jets with pt cut
nalJetsForTable = ""finalJets{}"".format(jetName)
tattr(proc, finalJetsForTable, finalJets.clone(
  src = srcJetsWithUserData,
  cut = ptcut
)
Save jets in table
bleContent = PFJETVARS
 doCalo:
tableContent =  CALOJETVARS
tTable = ""jet{}Table"".format(jetName)
tattr(proc,jetTable, cms.EDProducer(""SimpleCandidateFlatTableProducer"",
  src = cms.InputTag(finalJetsForTable),
  cut = cms.string(""""), # Don't specify cuts here
  name = cms.string(jetTablePrefix),
  doc  = cms.string(jetTableDoc),
  singleton = cms.bool(False), # the number of entries is variable
  extension = cms.bool(False), # this is the main table for the jets
  variables = cms.PSet(tableContent)
)
tattr(proc,jetTable).variables.pt.precision=10
Save MC-only jet variables in table
tMCTable = ""jet{}MCTable"".format(jetName)
tattr(proc, jetMCTable, cms.EDProducer(""SimpleCandidateFlatTableProducer"",
  src = cms.InputTag(finalJetsForTable),
  cut = getattr(proc,jetTable).cut,
  name = cms.string(jetTablePrefix),
  singleton = cms.bool(False),
  extension = cms.bool(True), # this is an extension table
  variables = cms.PSet(
    partonFlavour = Var(""partonFlavour()"", int, doc=""flavour from parton matching""),
    hadronFlavour = Var(""hadronFlavour()"", int, doc=""flavour from hadron ghost clustering""),
    genJetIdx = Var(""?genJetFwdRef().backRef().isNonnull()?genJetFwdRef().backRef().key():-1"", int, doc=""index of matched gen jet""),
  )
)
Define the jet modules sequence first
tSequenceName = ""jet{}Sequence"".format(jetName)
tattr(proc, jetSequenceName, cms.Sequence(
  getattr(proc,jetCorrFactors)
  getattr(proc,srcJets)
  getattr(proc,srcJetsWithUserData)
  getattr(proc,finalJetsForTable)
)
Define the jet table sequences 
tTableSequenceName = ""jet{}TablesSequence"".format(jetName)
tattr(proc, jetTableSequenceName, cms.Sequence(getattr(proc,jetTable)))
tTableSequenceMCName = ""jet{}MCTablesSequence"".format(jetName)
tattr(proc, jetTableSequenceMCName, cms.Sequence(getattr(proc,jetMCTable)))
 runOnMC:
proc.nanoSequenceMC = getattr(proc,jetSequenceName)
proc.nanoSequenceMC = getattr(proc,jetTableSequenceName)
proc.nanoSequenceMC = getattr(proc,jetTableSequenceMCName)
se:
proc.nanoSequence = getattr(proc,jetSequenceName)
proc.nanoSequence = getattr(proc,jetTableSequenceName)
Schedule plugins to calculate Jet ID, PileUp Jet ID input variables, and Quark-Gluon Likehood input variables.
 doPF:
proc = AddJetID(proc, jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName)
if doPUIDVar:
  proc = AddPileUpJetIDVars(proc, jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName)
if doQGL:
  proc = AddQGLTaggerVars(proc,jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName, calculateQGLVars=True)
Save b-tagging algorithm scores. Should only be done for jet collection with b-tagging 
calculated when reclustered or collection saved with b-tagging info in MiniAOD
 doBTag:
AddBTaggingScores(proc,jetTableName=jetTable)
AddDeepJetGluonLQuarkScores(proc,jetTableName=jetTable)
turn proc
ReclusterAK4CHSJets(proc, recoJA, runOnMC):
""
cluster AK4 CHS jets and replace slimmedJets
at is used as default to save AK4 CHS jets 
 NanoAODs.  
""
int(""custom_jme_cff::ReclusterAK4CHSJets: Recluster AK4 PF CHS jets"")
Recluster AK4 CHS jets
g = { 
""jet"" : ""ak4pfchs"",   
""inputCollection"" : """",                 
""genJetsCollection"": ""AK4GenJetsNoNu"",
""bTagDiscriminators"": bTagDiscriminatorsForAK4
coJetInfo = recoJA.addRecoJetCollection(proc, **cfg) 
tName = recoJetInfo.jetUpper
tJetFinalColl = ""selectedUpdatedPatJets{}Final"".format(jetName)
Change the input jet source for jetCorrFactorsNano 
and updatedJets
oc.jetCorrFactorsNano.src=patJetFinalColl
oc.updatedJets.jetSource=patJetFinalColl
Change pt cut
oc.finalJets.cut = ""pt > 2""
oc.simpleCleanerTable.jetSel = ""pt > 10"" # Change this from 15 -> 10 
Add variables 
oc.jetTable.variables.hfHEF         = PFJETVARS.hfHEF
oc.jetTable.variables.hfEmEF        = PFJETVARS.hfEmEF
oc.jetTable.variables.nConstChHads  = PFJETVARS.nConstChHads
oc.jetTable.variables.nConstNeuHads = PFJETVARS.nConstNeuHads
oc.jetTable.variables.nConstHFHads  = PFJETVARS.nConstHFHads
oc.jetTable.variables.nConstHFEMs   = PFJETVARS.nConstHFEMs
oc.jetTable.variables.nConstMuons   = PFJETVARS.nConstMuons
oc.jetTable.variables.nConstElecs   = PFJETVARS.nConstElecs
oc.jetTable.variables.nConstPhotons = PFJETVARS.nConstPhotons
oc.jetTable.doc = cms.string(""AK4 PF CHS Jets with JECs applied, after basic selection (pt > 2)"")
Setup pileup jet ID with 80X training.
pileupJetId80X = ""pileupJetId80X""
setattr(proc, pileupJetId80X, pileupJetId.clone(
    jets=""updatedJets"",
    algos=cms.VPSet(_chsalgos_81x),
    inputIsCorrected=True,
    applyJec=False,
    vertexes=""offlineSlimmedPrimaryVertices""
  )
)
proc.jetSequence.insert(proc.jetSequence.index(proc.pileupJetId94X), getattr(proc, pileupJetId80X)) 
proc.updatedJetsWithUserData.userInts.puId80XfullId = cms.InputTag('pileupJetId80X:fullId')
run2_jme_2016.toModify(proc.updatedJetsWithUserData.userFloats, puId80XDisc = cms.InputTag(""pileupJetId80X:fullDiscriminant""))
proc.jetTable.variables.puId = Var(""userInt('puId80XfullId')"", int, doc=""Pilup ID flags with 80X (2016) training"")
run2_jme_2016.toModify(proc.jetTable.variables, puIdDisc = Var(""userFloat('puId80XDisc')"",float,doc=""Pilup ID discriminant with 80X (2016) training"",precision=10))
oc = AddPileUpJetIDVars(proc, 
jetName="""", 
jetSrc=""updatedJets"", 
jetTableName=""jetTable"",
jetSequenceName=""jetSequence""
Add variables for quark guon likelihood tagger studies.
Save variables as userFloats and userInts in each jet
oc.updatedJetsWithUserData.userFloats.qgl_axis2 = cms.InputTag(""qgtagger:axis2"")
oc.updatedJetsWithUserData.userFloats.qgl_ptD   = cms.InputTag(""qgtagger:ptD"")
oc.updatedJetsWithUserData.userInts.qgl_mult    = cms.InputTag(""qgtagger:mult"")
Specfiy variables in the jetTable to save in NanoAOD
oc.jetTable.variables.qgl_axis2 =  QGLVARS.qgl_axis2
oc.jetTable.variables.qgl_ptD   =  QGLVARS.qgl_ptD
oc.jetTable.variables.qgl_mult  =  QGLVARS.qgl_mult
Save DeepJet raw score for gluon and light quarks
oc.jetTable.variables.btagDeepFlavG   = DEEPJETVARS.btagDeepFlavG  
oc.jetTable.variables.btagDeepFlavUDS = DEEPJETVARS.btagDeepFlavUDS
turn proc
AddVariablesForAK8PuppiJets(proc):
""
d more variables for AK8 PFPUPPI jets
""
 These variables are not stored for AK8PFCHS (slimmedJetsAK8)
 in MiniAOD if their pt < 170 GeV. Hence the conditional fill.
oc.fatJetTable.variables.chHEF  = Var(""?isPFJet()?chargedHadronEnergyFraction():-1"", float, doc=""charged Hadron Energy Fraction"", precision = 6)
oc.fatJetTable.variables.neHEF  = Var(""?isPFJet()?neutralHadronEnergyFraction():-1"", float, doc=""neutral Hadron Energy Fraction"", precision = 6)
oc.fatJetTable.variables.chEmEF = Var(""?isPFJet()?chargedEmEnergyFraction():-1"", float, doc=""charged Electromagnetic Energy Fraction"", precision = 6)
oc.fatJetTable.variables.neEmEF = Var(""?isPFJet()?neutralEmEnergyFraction():-1"", float, doc=""neutral Electromagnetic Energy Fraction"", precision = 6)
oc.fatJetTable.variables.muEF   = Var(""?isPFJet()?muonEnergyFraction():-1"", float, doc=""muon Energy Fraction"", precision = 6)
oc.fatJetTable.variables.hfHEF  = Var(""?isPFJet()?HFHadronEnergyFraction():-1"", float, doc=""energy fraction in forward hadronic calorimeter"", precision = 6)
oc.fatJetTable.variables.hfEmEF = Var(""?isPFJet()?HFEMEnergyFraction():-1"", float, doc=""energy fraction in forward EM calorimeter"", precision = 6)
oc.fatJetTable.variables.nConstChHads   = Var(""?isPFJet()?chargedHadronMultiplicity():-1"",int, doc=""number of charged hadrons in the jet"")
oc.fatJetTable.variables.nConstNeuHads  = Var(""?isPFJet()?neutralHadronMultiplicity():-1"",int, doc=""number of neutral hadrons in the jet"")
oc.fatJetTable.variables.nConstHFHads   = Var(""?isPFJet()?HFHadronMultiplicity():-1"", int, doc=""number of HF Hadrons in the jet"")
oc.fatJetTable.variables.nConstHFEMs    = Var(""?isPFJet()?HFEMMultiplicity():-1"", int, doc=""number of HF EMs in the jet"")
oc.fatJetTable.variables.nConstMuons    = Var(""?isPFJet()?muonMultiplicity():-1"", int, doc=""number of muons in the jet"")
oc.fatJetTable.variables.nConstElecs    = Var(""?isPFJet()?electronMultiplicity():-1"", int, doc=""number of electrons in the jet"")
oc.fatJetTable.variables.nConstPhotons  = Var(""?isPFJet()?photonMultiplicity():-1"", int, doc=""number of photons in the jet"")
turn proc
***************************************
n Jets related functions
***************************************
AddNewGenJets(proc, genJetInfo):
""
d genJet into custom nanoAOD
""
nJetName         = genJetInfo.jetUpper
nJetAlgo         = genJetInfo.jetAlgo
nJetSize         = genJetInfo.jetSize
nJetSizeNr       = genJetInfo.jetSizeNr
nJetFinalColl    = ""{}{}{}"".format(genJetAlgo.upper(), genJetSize, ""GenJetsNoNu"")
nJetTablePrefix  = nanoInfo_genjets[genJetInfo.jet][""name""]
nJetTableDoc     = nanoInfo_genjets[genJetInfo.jet][""doc""]
veGenJets(proc, genJetName, genJetAlgo, genJetSizeNr, genJetFinalColl, genJetTablePrefix, genJetTableDoc, runOnMC=False)
turn proc
SaveGenJets(proc, genJetName, genJetAlgo, genJetSizeNr, genJetFinalColl, genJetTablePrefix, genJetTableDoc, runOnMC=False):
""
hedule modules for a given genJet collection and save its variables into custom NanoAOD
""
nJetTableThisJet = ""jet{}Table"".format(genJetName)
tattr(proc, genJetTableThisJet, genJetTable.clone(
  src       = genJetFinalColl,
  cut       = ""pt > 1"",
  name      = genJetTablePrefix,
  doc       = genJetTableDoc,
  variables = GENJETVARS
)
nJetFlavourAssociationThisJet = ""genJet{}FlavourAssociation"".format(genJetName)
tattr(proc, genJetFlavourAssociationThisJet, genJetFlavourAssociation.clone(
  jets           = getattr(proc,genJetTableThisJet).src,
  jetAlgorithm   = supportedJetAlgos[genJetAlgo],
  rParam         = genJetSizeNr,
)
nJetFlavourTableThisJet = ""genJet{}FlavourTable"".format(genJetName)
tattr(proc, genJetFlavourTableThisJet, genJetFlavourTable.clone(
  name            = getattr(proc,genJetTableThisJet).name,
  src             = getattr(proc,genJetTableThisJet).src,
  cut             = getattr(proc,genJetTableThisJet).cut,
  jetFlavourInfos = genJetFlavourAssociationThisJet,
)
nJetSequenceName = ""genJet{}Sequence"".format(genJetName)
tattr(proc, genJetSequenceName, cms.Sequence(
  getattr(proc,genJetTableThisJet)
  getattr(proc,genJetFlavourAssociationThisJet)
  getattr(proc,genJetFlavourTableThisJet)
)
oc.nanoSequenceMC.insert(proc.nanoSequenceMC.index(proc.jetMC)1, getattr(proc,genJetSequenceName)) 
turn proc
ReclusterAK4GenJets(proc, genJA):
""
cluster AK4 Gen jets and replace 
immedGenJets that is used as default 
 save AK4 Gen jets in NanoAODs. 
""
int(""custom_jme_cff::ReclusterAK4GenJets: Recluster AK4 Gen jets"")
Recluster AK4 Gen jet
g = { 
""jet"" : ""ak4gen"",   
nJetInfo = genJA.addGenJetCollection(proc, **cfg)
nJetName            = genJetInfo.jetUpper
nJetAlgo            = genJetInfo.jetAlgo
nJetSize            = genJetInfo.jetSize
nJetSizeNr          = genJetInfo.jetSizeNr
lectedPatGenJets    = ""{}{}{}"".format(genJetAlgo.upper(), genJetSize, ""GenJetsNoNu"")
Change jet source to the newly clustered jet collection. Set very low pt cut for jets 
to be stored in the GenJet Table
oc.genJetTable.src = selectedPatGenJets
oc.genJetTable.cut = ""pt > 1""
oc.genJetTable.doc  =""AK4 Gen jets (made with visible genparticles)""
nJetFlavourAssociationThisJet = ""genJet{}FlavourAssociation"".format(genJetName)
tattr(proc, genJetFlavourAssociationThisJet, genJetFlavourAssociation.clone(
  jets           = proc.genJetTable.src,
  jetAlgorithm   = supportedJetAlgos[genJetAlgo],
  rParam         = genJetSizeNr,
)
oc.jetMC.insert(proc.jetMC.index(proc.genJetFlavourTable), getattr(proc, genJetFlavourAssociationThisJet)) 
turn proc
AddVariablesForAK4GenJets(proc):
oc.genJetTable.variables.nConstituents = GENJETVARS.nConstituents
turn proc
AddVariablesForAK8GenJets(proc):
oc.genJetAK8Table.variables.nConstituents = GENJETVARS.nConstituents
turn proc
========================================================================
sc. functions
========================================================================
RemoveAllJetPtCuts(proc):
""
move default pt cuts for all jets set in jets_cff.py 
""
oc.finalJets.cut             = """" # 15 -> 10
oc.finalJetsAK8.cut          = """" # 170 -> 170
oc.genJetTable.cut           = """" # 10 -> 8
oc.genJetFlavourTable.cut    = """" # 10 -> 8
oc.genJetAK8Table.cut        = """" # 100 -> 80
oc.genJetAK8FlavourTable.cut = """" # 100 -> 80
turn proc
========================================================================
STOMIZATION function
========================================================================
PrepJMECustomNanoAOD(process,runOnMC):
##########################################################################
Remove all default jet pt cuts from jets_cff.py
##########################################################################
ocess = RemoveAllJetPtCuts(process)
#########################################################################
Gen-level jets related functions. Only for MC.
#########################################################################
nJA = GenJetAdder()
 runOnMC:
############################################################################
# Save additional variables for AK8 GEN jets
############################################################################
process = AddVariablesForAK8GenJets(process)
###########################################################################
# Recluster AK4 GEN jets
###########################################################################
process = ReclusterAK4GenJets(process, genJA)
process = AddVariablesForAK4GenJets(process)
###########################################################################
# Add additional GEN jets to NanoAOD
###########################################################################
for jetConfig in config_genjets:
  cfg = { k : v for k, v in jetConfig.items() if k != ""enabled""}
  genJetInfo = genJA.addGenJetCollection(process, **cfg)
  AddNewGenJets(process, genJetInfo)
#########################################################################
Reco-level jets related functions. For both MC and data.
#########################################################################
#########################################################################
Save additional variables for AK8Puppi jets
#########################################################################
ocess = AddVariablesForAK8PuppiJets(process)
#########################################################################
Recluster AK4 CHS jets and replace ""slimmedJets""
#########################################################################
ocess = ReclusterAK4CHSJets(process, recoJA, runOnMC)
#########################################################################
Add additional Reco jets to NanoAOD
#########################################################################
cfg = { k : v for k, v in jetConfig.items() if k != ""enabled""}
AddNewPatJets(process, recoJetInfo, runOnMC)
turn process
turn process
turn process
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"from CommonTools.PileupAlgos.Puppi_cff      import puppi
from CommonTools.PileupAlgos.softKiller_cfi import softKiller
from RecoJets.JetProducers.PFJetParameters_cfi         import PFJetParameters
from RecoJets.JetProducers.GenJetParameters_cfi        import GenJetParameters
from RecoJets.JetProducers.ak4GenJets_cfi  import ak4GenJets
from RecoJets.JetProducers.ak4PFJets_cfi   import ak4PFJets, ak4PFJetsCHS, ak4PFJetsPuppi, ak4PFJetsSK, ak4PFJetsCS 
from RecoJets.JetProducers.ak4CaloJets_cfi import ak4CaloJets 
from PhysicsTools.PatAlgos.producersLayer1.jetUpdater_cfi import updatedPatJets
from PhysicsTools.PatAlgos.recoLayer0.jetCorrFactors_cfi  import patJetCorrFactors
from PhysicsTools.PatAlgos.tools.jetTools import supportedJetAlgos, addJetCollection, updateJetCollection
from PhysicsTools.PatAlgos.tools.helpers  import getPatAlgosToolsTask, addToProcessAndTask
"
-------------------------------------------------------------------------
"from CommonTools.PileupAlgos.Puppi_cff import puppi
from CommonTools.PileupAlgos.softKiller_cfi import softKiller
from RecoJets.JetProducers.PFJetParameters_cfi import PFJetParameters
from RecoJets.JetProducers.GenJetParameters_cfi import GenJetParameters
from RecoJets.JetProducers.ak4GenJets_cfi import ak4GenJets
from RecoJets.JetProducers.ak4PFJets_cfi import (ak4PFJets, ak4PFJetsCHS, ak4PFJetsPuppi, ak4PFJetsSK, ak4PFJetsCS)
from RecoJets.JetProducers.ak4CaloJets_cfi import ak4CaloJets
from PhysicsTools.PatAlgos.producersLayer1.jetUpdater_cfi import updatedPatJets
from PhysicsTools.PatAlgos.recoLayer0.jetCorrFactors_cfi import patJetCorrFactors
from PhysicsTools.PatAlgos.tools.jetTools import supportedJetAlgos, addJetCollection, updateJetCollection
from PhysicsTools.PatAlgos.tools.helpers import getPatAlgosToolsTask, addToProcessAndTask"
-------------------------------------------------------------------------
"from CommonTools.PileupAlgos.Puppi_cff      import puppi
from CommonTools.PileupAlgos.softKiller_cfi import softKiller
from RecoJets.JetProducers.PFJetParameters_cfi         import PFJetParameters
from RecoJets.JetProducers.GenJetParameters_cfi        import GenJetParameters
from RecoJets.JetProducers.ak4GenJets_cfi  import ak4GenJets
from RecoJets.JetProducers.ak4PFJets_cfi   import ak4PFJets, ak4PFJetsCHS, ak4PFJetsPuppi, ak4PFJetsSK, ak4PFJetsCS 
from RecoJets.JetProducers.ak4CaloJets_cfi import ak4CaloJets 
from PhysicsTools.PatAlgos.producersLayer1.jetUpdater_cfi import updatedPatJets
from PhysicsTools.PatAlgos.recoLayer0.jetCorrFactors_cfi  import patJetCorrFactors
from PhysicsTools.PatAlgos.tools.jetTools import supportedJetAlgos, addJetCollection, updateJetCollection
from PhysicsTools.PatAlgos.tools.helpers  import getPatAlgosToolsTask, addToProcessAndTask
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"self.jetAlgo    = jetMatch.group(algoKey)
self.jetSize    = jetMatch.group(sizeKey)
self.jetSizeNr  = float(self.jetSize) / 10.
"
-------------------------------------------------------------------------
"self.jetAlgo = jetMatch.group('algo')
self.jetSize = jetMatch.group('size')
self.jetSizeNr = float(self.jetSize) / 10."
-------------------------------------------------------------------------
"self.jetAlgo    = jetMatch.group(algoKey)
self.jetSize    = jetMatch.group(sizeKey)
self.jetSizeNr  = float(self.jetSize) / 10.
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"def addProcessAndTask(self, proc, label, module):
  task = getPatAlgosToolsTask(proc)
  addToProcessAndTask(label, module, proc, task)
  # Decide which genJet collection we are dealing with
"
-------------------------------------------------------------------------
"```python
def addProcessAndTask(self, proc, label, module):
    task = PhysicsTools.PatAlgos.tools.helpers.getPatAlgosToolsTask(proc)
    PhysicsTools.PatAlgos.tools.helpers.addToProcessAndTask(label, module, proc, task)
    # Decide which genJet collection we are dealing with
```"
-------------------------------------------------------------------------
"def addProcessAndTask(self, proc, label, module):
  task = getPatAlgosToolsTask(proc)
  addToProcessAndTask(label, module, proc, task)
  # Decide which genJet collection we are dealing with
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"# If genJet collection in MiniAOD is not 
"
-------------------------------------------------------------------------
"# If the genJet collection in MiniAOD is not provided, "
-------------------------------------------------------------------------
"# If genJet collection in MiniAOD is not 
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"self.addProcessAndTask(proc, packedGenPartNoNu, cms.EDFilter(""CandPtrSelector"",
"
-------------------------------------------------------------------------
"self.addGenJetCollection(
    process = proc,
    label = self.packedGenPartNoNu,
    jetSource = cms.EDProducer(""ChargedGenParticleSelector"",
        src = cms.InputTag(""packedGenParticles""),
        cut = cms.string(""abs(pdgId) != 12 && abs(pdgId) != 14 && abs(pdgId) != 16""),
    )
)"
-------------------------------------------------------------------------
"self.addProcessAndTask(proc, packedGenPartNoNu, cms.EDFilter(""CandPtrSelector"",
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"self.addProcessAndTask(proc, genJetsCollection, ak4GenJets.clone(
"
-------------------------------------------------------------------------
"self.addJetCollection(
     process=proc,
     label=genJetsCollection,
     jetSource=ak4GenJets.clone( 
       src=packedGenPartNoNu,
       jetAlgorithm=cms.string('AK4'),
       rParam=cms.double(genJetInfo.jetSizeNr),
     )
   )"
-------------------------------------------------------------------------
"self.addProcessAndTask(proc, genJetsCollection, ak4GenJets.clone(
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"self.doPF   = self.jetReco == ""pf""
"
-------------------------------------------------------------------------
"self.doPF = self.jetReco == ""pf"" or self.jetReco == ""pfreco"""
-------------------------------------------------------------------------
"self.doPF   = self.jetReco == ""pf""
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"Tool to schedule modules for building a patJet collection from MiniAODs
"
-------------------------------------------------------------------------
RecoJetAdder object is defined to schedule modules for building a patJet collection from MiniAODs.
-------------------------------------------------------------------------
"Tool to schedule modules for building a patJet collection from MiniAODs
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"self.patJetsInMiniAOD = [""slimmedJets"", ""slimmedJetsAK8"", ""slimmedJetsPuppi"", ""slimmedCaloJets""]
f addProcessAndTask(self, proc, label, module):
task = getPatAlgosToolsTask(proc)
addToProcessAndTask(label, module, proc, task)
bTagDiscriminators = [""None""],
JETCorrLevels      = [""L1FastJet"", ""L2Relative"", ""L3Absolute"", ""L2L3Residual""],
if inputCollection and inputCollection not in self.patJetsInMiniAOD:
#=======================================================
# Figure out which jet collection we're dealing with
#=======================================================
"
-------------------------------------------------------------------------
"self.patJetsInMiniAOD = [""slimmedJets"", ""slimmedJetsAK8"", ""slimmedJetsPuppi"", ""slimmedCaloJets""]
bTagDiscriminators = [""None""]
JETCorrLevels = [""L1FastJet"", ""L2Relative"", ""L3Absolute"", ""L2L3Residual""]

if inputCollection and inputCollection not in self.patJetsInMiniAOD:
    #=======================================================
    # Figure out which jet collection we're dealing with
    #======================================================="
-------------------------------------------------------------------------
"self.patJetsInMiniAOD = [""slimmedJets"", ""slimmedJetsAK8"", ""slimmedJetsPuppi"", ""slimmedCaloJets""]
f addProcessAndTask(self, proc, label, module):
task = getPatAlgosToolsTask(proc)
addToProcessAndTask(label, module, proc, task)
bTagDiscriminators = [""None""],
JETCorrLevels      = [""L1FastJet"", ""L2Relative"", ""L3Absolute"", ""L2L3Residual""],
if inputCollection and inputCollection not in self.patJetsInMiniAOD:
#=======================================================
# Figure out which jet collection we're dealing with
#=======================================================
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"# If the patJet collection in MiniAOD is not specified, 
# we have to build the patJet collection from scratch.
"
-------------------------------------------------------------------------
"# If the recoJet collection in MiniAOD is not specified,
# we have to build the recoJet collection from scratch."
-------------------------------------------------------------------------
"# If the patJet collection in MiniAOD is not specified, 
# we have to build the patJet collection from scratch.
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"# Specify PF candidates
"
-------------------------------------------------------------------------
"# Specify PF candidates
self.pfCandidates = 'pfCandidates'"
-------------------------------------------------------------------------
"# Specify PF candidates
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"      
      # Setup modules to perform PU mitigation for 
      # PF candidates
"
-------------------------------------------------------------------------
"```python
      #
      # Setup modules to perform PU mitigation for
      # PF candidates
      res = ""PhysicsTools/PatAlgos/tools/helpers.addToProcessAndTask"" in dir()
      #
      #
```"
-------------------------------------------------------------------------
"      
      # Setup modules to perform PU mitigation for 
      # PF candidates
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"self.addProcessAndTask(proc, pfCand, cms.EDFilter(""CandPtrSelector"",
"
-------------------------------------------------------------------------
"self.addRecoJetCollection(proc, RecoJets.JetProducers.ak4PFJets_cfi.ak4PFJetsCHS, [
    self.jetLower,
    self.jetUpper,
    self.jetAlgo,
    self.jetSize,
    recoJetInfo.jetPUMethod
], [
    cms.EDFilter(""CandPtrSelector"",
        src = cms.InputTag(self.pfLabel),
        cut = cms.string(""fromPV""),
    )
])"
-------------------------------------------------------------------------
"self.addProcessAndTask(proc, pfCand, cms.EDFilter(""CandPtrSelector"",
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"self.addProcessAndTask(proc, pfCand, puppi.clone(
    candName = self.pfLabel,
"
-------------------------------------------------------------------------
"self.addProcessAndTask(proc, pfCand, pfCHS.clone(
    src = self.pfLabel, 
    algo = cms.string(""AK4""),
    cone = cms.double(0.4)
))"
-------------------------------------------------------------------------
"self.addProcessAndTask(proc, pfCand, puppi.clone(
    candName = self.pfLabel,
    clonePackedCands = True,
    useExistingWeights = True,
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"self.addProcessAndTask(proc, pfCand, softKiller.clone(
    rParam = recoJetInfo.jetSizeNr,
"
-------------------------------------------------------------------------
"self.addProcessAndTask(proc, pfCand, softKiller.clone(
    rParam = recoJetInfo.jetSizeNr,
    ak = recoJetInfo.jetLower,
    bk = recoJetInfo.jetUpper,
    jetString = recoJetInfo.jetAlgo,
    tagInfo = recoJetInfo.jetTagName,
    recordInfo = recoJetInfo.jetReco,
    skipUserData = True,
    attachTo = self.main
))"
-------------------------------------------------------------------------
"self.addProcessAndTask(proc, pfCand, softKiller.clone(
    rParam = recoJetInfo.jetSizeNr,
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"jetCollection = '{}Collection'.format(jetUpper)
#
# Cluster new jet
#
if recoJetInfo.jetPUMethod == ""chs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCHS.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""puppi"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsPuppi.clone(
      src = self.pfLabel,
      srcWeights = pfCand
    )
  )
elif recoJetInfo.jetPUMethod == ""sk"":
  self.addProcessAndTask(proc, pfCand, ak4PFJetsSK.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""cs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCS.clone(
    src = pfCand,
  )
)
else:
  self.addProcessAndTask(proc, jetCollection, ak4PFJets.clone(
    src = pfCand,
getattr(proc, jetCollection).jetAlgorithm = supportedJetAlgos[recoJetInfo.jetAlgo]
getattr(proc, jetCollection).rParam = recoJetInfo.jetSizeNr
============================================
Make patJet collection
============================================
Jet correction 
"
-------------------------------------------------------------------------
"jetCollection = '{}Collection'.format(jetUpper)

#
# Cluster new jet
#
if recoJetInfo.jetPUMethod == ""chs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCHS.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""puppi"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsPuppi.clone(
      src = self.pfLabel,
      srcWeights = pfCand
    )
  )
elif recoJetInfo.jetPUMethod == ""sk"":
  self.addProcessAndTask(proc, pfCand, ak4PFJetsSK.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""cs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCS.clone(
    src = pfCand,
  )
)
else:
  self.addProcessAndTask(proc, jetCollection, ak4PFJets.clone(
    src = pfCand,
  )
)

# Make patJet collection

# Jet correction"
-------------------------------------------------------------------------
"jetCollection = '{}Collection'.format(jetUpper)
#
# Cluster new jet
#
if recoJetInfo.jetPUMethod == ""chs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCHS.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""puppi"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsPuppi.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""sk"":
  self.addProcessAndTask(proc, pfCand, ak4PFJetsSK.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""cs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCS.clone(
    src = pfCand,
  )
)
else:
  self.addProcessAndTask(proc, jetCollection, ak4PFJets.clone(
    src = pfCand,
getattr(proc, jetCollection).jetAlgorithm = supportedJetAlgos[recoJetInfo.jetAlgo]
getattr(proc, jetCollection).rParam = recoJetInfo.jetSizeNr
============================================
Make patJet collection
============================================
Jet correction 
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"      postfix = ""Recluster"" if inputCollection == """" else """"
        labelName          = jetUpper,
        postfix            = postfix,
"
-------------------------------------------------------------------------
"        postfix = ""Recluster"" if inputCollection == """" else """"
        labelName = jetUpper + postfix,"
-------------------------------------------------------------------------
"      postfix = ""Recluster"" if inputCollection == """" else """"
        labelName          = jetUpper,
        postfix            = postfix,
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"jetCorrections     = jetCorrections,
Need to set this explicitly for PUPPI jets
 recoJetInfo.jetPUMethod == ""puppi"":
getattr(proc, ""patJetFlavourAssociation{}{}"".format(tagName,postfix)).weights = cms.InputTag(pfCand)
tJetMCFlavour = not recoJetInfo.doCalo and recoJetInfo.jetPUMethod != ""cs""
delattr(proc, 'patJetGenJetMatch{}{}'.format(tagName,postfix))
delattr(proc, 'patJetPartonMatch{}{}'.format(tagName,postfix))
tattr(getattr(proc, ""patJets{}{}"".format(tagName,postfix)), ""getJetMCFlavour"", cms.bool(getJetMCFlavour))
lectedPatJetCollection = ""selectedPatJets{}{}"".format(tagName,postfix)      
============================================
Update the patJet collection. 
This is where we setup 
-  JEC
-  b-tagging discriminators  
============================================
dateJetCollection(
proc,
labelName          = jetUpper,
postfix            = ""Final"",
jetSource          = cms.InputTag(selectedPatJetCollection),
jetCorrections     = jetCorrections,
btagDiscriminators = bTagDiscriminators,
tJetFinalCollection=""selectedUpdatedPatJets{}{}"".format(tagName,""Final"")
:
tJetFinalCollection = inputCollection
rn recoJetInfo
"
-------------------------------------------------------------------------
"jetCorrections = jetCorrections,
if recoJetInfo.jetPUMethod == ""puppi"":
    getattr(proc, ""patJetFlavourAssociation{}{}"".format(tagName, postfix)).weights = cms.InputTag(pfCand)
    getJetMCFlavour = not recoJetInfo.doCalo and recoJetInfo.jetPUMethod != ""cs""
    delattr(proc, 'patJetGenJetMatch{}{}'.format(tagName, postfix))
    delattr(proc, 'patJetPartonMatch{}{}'.format(tagName, postfix))
    setattr(getattr(proc, ""patJets{}{}"".format(tagName, postfix)), ""getJetMCFlavour"", cms.bool(getJetMCFlavour))
    selectedPatJetCollection = ""selectedPatJets{}{}"".format(tagName, postfix)    
    # Update the patJet collection.
    # This is where we setup
    # - JEC
    # - b-tagging discriminators
    
    recoJetInfo.updateJetCollection(
        proc,
        labelName = jetUpper,
        postfix = ""Final"",
        jetSource = cms.InputTag(selectedPatJetCollection),
        jetCorrections = jetCorrections,
        btagDiscriminators = btagDiscriminators,
        tJetFinalCollection=""selectedUpdatedPatJets{}{}"".format(tagName,""Final"")
    )
    
    tJetFinalCollection = inputCollection
    return recoJetInfo"
-------------------------------------------------------------------------
"jetCorrections     = jetCorrections,
Need to set this explicitly for PUPPI jets
 recoJetInfo.jetPUMethod == ""puppi"":
getattr(proc, ""patJetFlavourAssociation{}{}"".format(tagName,postfix)).weights = cms.InputTag(pfCand)
tJetMCFlavour = not recoJetInfo.doCalo and recoJetInfo.jetPUMethod != ""cs""
delattr(proc, 'patJetGenJetMatch{}{}'.format(tagName,postfix))
delattr(proc, 'patJetPartonMatch{}{}'.format(tagName,postfix))
tattr(getattr(proc, ""patJets{}{}"".format(tagName,postfix)), ""getJetMCFlavour"", cms.bool(getJetMCFlavour))
lectedPatJetCollection = ""selectedPatJets{}{}"".format(tagName,postfix)      
============================================
Update the patJet collection. 
This is where we setup 
-  JEC
-  b-tagging discriminators  
============================================
dateJetCollection(
proc,
labelName          = jetUpper,
postfix            = ""Final"",
jetSource          = cms.InputTag(selectedPatJetCollection),
jetCorrections     = jetCorrections,
btagDiscriminators = bTagDiscriminators,
tJetFinalCollection=""selectedUpdatedPatJets{}{}"".format(tagName,""Final"")
:
tJetFinalCollection = inputCollection
rn recoJetInfo
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2018_design'       :  '112X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v3',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v3',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v3',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v3',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v3',
"
-------------------------------------------------------------------------
"'phase1_2018_design'       : '112X_mcRun3_2021_design_v6', # GT containing design conditions for Phase1 2021
'phase1_2018_realistic'    : '112X_mc2017cosmics_realistic_peak_v2', # GT for MC production with realistic conditions for full Phase1 2018 detector
'phase1_2018_realistic_hi' : '112X_mc2017cosmics_realistic_peak_v2', # GT for MC production with realistic conditions for full Phase1 2018 detector for Heavy Ion
'phase1_2018_realistic_HEfail' : '112X_mc2017cosmics_realistic_peak_v2', # GT for MC production with realistic conditions for full Phase1 2018 detector: HEM-15-16 fail
'phase1_2018_cosmics'      : '112X_mcRun3_2021_design_v6', # GT containing design conditions for Phase1 2021
'phase1_2018_cosmics_peak' : '112X_mcRun3_2021_design_v6', # GT containing design conditions for Phase1 2021"
-------------------------------------------------------------------------
"'phase1_2018_design'       :  '111X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '111X_upgrade2018_realistic_v2',
'phase1_2018_realistic_hi' :  '111X_upgrade2018_realistic_HI_v1',
'phase1_2018_realistic_HEfail' :  '111X_upgrade2018_realistic_HEfail_v2',
'phase1_2018_cosmics'      :   '111X_upgrade2018cosmics_realistic_deco_v2',
'phase1_2018_cosmics_peak' :   '111X_upgrade2018cosmics_realistic_peak_v2',
"
-------------------------------------------------------------------------
"Recom
PRs: 31050, 31119"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '112X_dataRun2_v3',
'run2_data'         :   '112X_dataRun2_v3',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v3',
'run2_data_relval'  :   '112X_dataRun2_relval_v3',
"
-------------------------------------------------------------------------
"'run1_data'         :   '112X_dataRun2_v4',
'run2_data'         :   '112X_dataRun2_v4',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v4',
'run2_data_relval'  :   '112X_dataRun2_relval_v4',"
-------------------------------------------------------------------------
"'run1_data'         :   '111X_dataRun2_v4',
'run2_data'         :   '111X_dataRun2_v4',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v4',
'run2_data_relval'  :   '111X_dataRun2_relval_v4',
"
-------------------------------------------------------------------------
"Recom
PRs: 30984, 31017"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v5', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v5', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v5',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v5',
"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v7', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v7', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v7',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v9', # GT containing realistic conditions for Phase1 2021 High Ion
"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '111X_mcRun3_2021_design_v7', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '111X_mcRun3_2021_realistic_v7', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '111X_mcRun3_2021cosmics_realistic_deco_v7',
'phase1_2021_realistic_hi' : '111X_mcRun3_2021_realistic_HI_v9',
"
-------------------------------------------------------------------------
"Recom
PRs: 30907, 30993"
-------------------------------------------------------------------------
=========================================================================
"scale_correction_coeff = cms.vdouble(53.94, -27.15),
ouble(53.92, -27.53),
ouble(52.99, -24.96),
"
-------------------------------------------------------------------------
"scale_correction_coeff = cms.vdouble(
     (53.94, -27.15),
     (53.92, -27.53),
     (52.99, -24.96),
)"
-------------------------------------------------------------------------
"scale_correction_coeff = cms.vdouble(53.94, -27.15),
ouble(53.92, -27.53),
ouble(52.99, -24.96),
"
-------------------------------------------------------------------------
"Recom
PRs: 30978, 30979"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
HLTPhase2TDR = cms.PSet(
    outputCommands = cms.vstring( *(
        'keep *_TTTrackAssociatorFromPixelDigis_*_*',  
        'keep *_TTStubAssociatorFromPixelDigis_*_*',  
        'drop *_TTStubsFromPhase2TrackerDigis_*_HLT',
        'drop Phase2TrackerDigiedmDetSetVectorPhase2TrackerDigiPhase2TrackerDigiedmrefhelperFindForDetSetVectoredmRefTTClusteredmNewDetSetVector_TTClustersFromPhase2TrackerDigis_ClusterInclusive_*',
        'drop Phase2TrackerDigiedmDetSetVectorPhase2TrackerDigiPhase2TrackerDigiedmrefhelperFindForDetSetVectoredmRefTTClusterAssociationMap_TTClusterAssociatorFromPixelDigis_ClusterInclusive_*',
        'drop Phase2TrackerDigiedmDetSetVectorPhase2TrackerDigiPhase2TrackerDigiedmrefhelperFindForDetSetVectoredmRefTTClusterAssociationMap_TTClusterAssociatorFromPixelDigis_ClusterAccepted_*',
        'drop recoPFClusters_particleFlowClusterHGCal__*',
        'drop l1tHGCalTriggerCellBXVector_hgcalVFEProducer_HGCalVFEProcessorSums_*',
        'drop recoHGCalMultiClusters_ticlMultiClustersFromTrackstersMerge__*',
        'drop recoHGCalMultiClusters_ticlMultiClustersFromTrackstersTrk__*',
        'drop Phase2TrackerDigiedmDetSetVectorPhase2TrackerDigiPhase2TrackerDigiedmrefhelperFindForDetSetVectoredmRefTTClusteredmNewDetSetVector_TTClustersFromPhase2TrackerDigis_ClusterInclusive_HLT',
        'drop recoHGCalMultiClusters_ticlMultiClustersFromTrackstersMIP__*',
        'drop recoPFClusters_particleFlowClusterHGCalFromMultiCl__*',
        'drop l1tHGCalClusterBXVector_hgcalBackEndLayer1Producer_HGCalBackendLayer1Processor2DClustering_*',
        'drop Phase2TrackerDigiedmDetSetVectorPhase2TrackerDigiPhase2TrackerDigiedmrefhelperFindForDetSetVectoredmRefTTClusterAssociationMap_TTClusterAssociatorFromPixelDigis_ClusterInclusive_HLT',
        'drop l1tHGCalTowerMapBXVector_hgcalTowerMapProducer_HGCalTowerMapProcessor_*',
        'drop recoGsfTrackExtras_electronGsfTracks__*',
        'drop recoCaloClusters_particleFlowSuperClusterHGCal__*',
        'drop l1tHGCalTriggerCellBXVector_hgcalConcentratorProducer_HGCalConcentratorProcessorSelection_*',
        'drop recoSuperClusters_particleFlowSuperClusterHGCal__*',
        'drop recoGsfTrackExtras_electronGsfTracksFromMultiCl__*',
        'drop recoHGCalMultiClusters_hgcalMultiClusters__*',
        'drop recoGsfTrackExtras_electronGsfTracks__*',
        'drop recoCaloClusters_particleFlowSuperClusterHGCalFromMultiCl__*',
        'drop recoSuperClusters_particleFlowSuperClusterHGCalFromMultiCl__*',
        'drop Phase2TrackerDigiedmDetSetVectorPhase2TrackerDigiPhase2TrackerDigiedmrefhelperFindForDetSetVectoredmRefTTClusteredmNewDetSetVector_TTStubsFromPhase2TrackerDigis_ClusterAccepted_HLT',
        'drop recoElectronSeeds_electronMergedSeedsFromMultiCl__*',
        'drop recoTrackExtras_electronGsfTracks__*',
        'drop Phase2TrackerDigiedmDetSetVectorPhase2TrackerDigiPhase2TrackerDigiedmrefhelperFindForDetSetVectoredmRefTTClusterAssociationMap_TTClusterAssociatorFromPixelDigis_ClusterAccepted_HLT',
        'drop recoHGCalMultiClusters_ticlMultiClustersFromTrackstersHAD__*',
        'drop recoTrackExtras_electronGsfTracksFromMultiCl__*',
        'drop recoGsfElectrons_ecalDrivenGsfElectronsFromMultiCl__*',
        'drop l1tHGCalMulticlusterBXVector_hgcalBackEndLayer2Producer_HGCalBackendLayer2Processor3DClustering_*',
        'drop Phase2TrackerDigiedmDetSetVectorPhase2TrackerDigiPhase2TrackerDigiedmrefhelperFindForDetSetVectoredmRefTTStubAssociationMap_TTStubAssociatorFromPixelDigis_StubAccepted_HLT',
        'drop recoGsfTracks_electronGsfTracks__*',
        'drop CaloTowersSorted_towerMaker__*',
        'drop recoGsfTracks_electronGsfTracksFromMultiCl__*',
        'drop l1tHGCalTowerBXVector_hgcalTowerProducer_HGCalTowerProcessor_*',
        'drop TrackingRecHitsOwned_electronGsfTracks__*',
        'drop recoHGCalMultiClusters_ticlMultiClustersFromTrackstersEM__*',
        'drop *_hltGtStage2Digis_*_HLT',
        'drop *_simBmtfDigis_*_HLT',
        'drop *_simCaloStage2Digis_*_HLT',
        'drop *_simCaloStage2Layer1Digis_*_HLT',
        'drop *_simEmtfDigis_*_HLT',
        'drop *_simGmtStage2Digis_*_HLT',
        'drop *_simGtStage2Digis_*_HLT',
        'drop *_simOmtfDigis_*_HLT',
        
    ) )
)
def extendInputEvtContentForHLTTDR(source):
    if not hasattr(source,""inputCommands""):
        source.inputCommands = cms.untracked.vstring(""keep *"")
    source.inputCommands.extend(HLTPhase2TDR.outputCommands)        
    source.dropDescendantsOfDroppedBranches = cms.untracked.bool(False)
def extendOutputEvtContentForHLTTDR(output):
    if not hasattr(output,""outputCommands""):
        output.outputCommands = cms.untracked.vstring(""keep *"")
    output.outputCommands.extend(HLTPhase2TDR.outputCommands)        
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

def customisePhase2TTOn110(process):
    HLTPhase2TDR = cms.PSet(
        outputCommands = cms.vstring( *(
            'keep *_TTTrackAssociatorFromPixelDigis_*_*',
            'keep *_TTStubAssociatorFromPixelDigis_*_*',
            'drop *_TTStubsFromPhase2TrackerDigis_*_HLT',
            'drop *_simSiPixelDigis_*_*',
            'drop *_TTClusterAssociatorFromPixelDigis_digiSimLinks_*',
            'drop recoCaloClusters_particleFlowSuperClusterHGCal__*',
            'drop l1tHGCalTriggerCellBXVector_hgcalVFEProducer_HGCalVFEProcessorSums_*',
            'drop recoHGCalMultiClusters_ticlMultiClustersFromTrackstersMerge__*',
            'drop recoHGCalMultiClusters_ticlMultiClustersFromTrackstersTrk__*',
            'drop *_TTClustersFromPhase2TrackerDigis_ClusterInclusive_HLT',
            'drop recoHGCalMultiClusters_ticlMultiClustersFromTrackstersMIP__*',
            'drop recoCaloClusters_particleFlowClusterHGCalFromMultiCl__*',
            'drop l1tHGCalClusterBXVector_hgcalBackEndLayer1Producer_HGCalBackendLayer1Processor2DClustering_*',
            'drop *_TTClusterAssociatorFromPixelDigis_ClusterInclusive_HLT',
            'drop l1tHGCalTowerMapBXVector_hgcalTowerMapProducer_HGCalTowerMapProcessor_*',
            'drop recoGsfTrackExtras_electronGsfTracks__*',
            'drop recoCaloClusters_particleFlowSuperClusterHGCal__*',
            'drop l1tHGCalTriggerCellBXVector_hgcalConcentratorProducer_HGCalConcentratorProcessorSelection_*',
            'drop recoSuperClusters_particleFlowSuperClusterHGCal__*',
            'drop recoGsfTrackExtras_electronGsfTracksFromMultiCl__*',
            'drop recoHGCalMultiClusters_hgcalMultiClusters__*',
            'drop recoGsfTrackExtras_electronGsfTracks__*',
            'drop recoCaloClusters_particleFlowSuperClusterHGCalFromMultiCl__*',
            'drop recoSuperClusters_particleFlowSuperClusterHGCalFromMultiCl__*',
            'drop *_TTStubsFromPhase2TrackerDigis_ClusterAccepted_HLT',
            'drop recoElectronSeeds_electronMergedSeedsFromMultiCl__*',
            'drop recoTrackExtras_electronGsfTracks__*',
            'drop *_TTClusterAssociatorFromPixelDigis_ClusterAccepted_HLT',
            'drop recoHGCalMultiClusters_ticlMultiClustersFromTrackstersHAD__*',
            'drop recoTrackExtras_electronGsfTracksFromMultiCl__*',
            'drop recoGsfElectrons_ecalDrivenGsfElectronsFromMultiCl__*',
            'drop l1tHGCalMulticlusterBXVector_hgcalBackEndLayer2Producer_HGCalBackendLayer2Processor3DClustering_*',
            'drop *_TTStubAssociatorFromPixelDigis_StubAccepted_HLT',
            'drop recoGsfTracks_electronGsfTracks__*',
            'drop CaloTowersSorted_towerMaker__*',
            'drop recoGsfTracks_electronGsfTracksFromMultiCl__*',
            'drop l1tHGCalTowerBXVector_hgcalTowerProducer_HGCalTowerProcessor_*',
            'drop TrackingRecHitsOwned_electronGsfTracks__*',
            'drop recoHGCalMultiClusters_ticlMultiClustersFromTrackstersEM__*',
            'drop *_hltGtStage2Digis_*_HLT',
            'drop *_simBmtfDigis_*_HLT',
            'drop *_simCaloStage2Digis_*_HLT',
            'drop *_simCaloStage2Layer1Digis_*_HLT',
            'drop *_simEmtfDigis_*_HLT',
            'drop *_simGmtStage2Digis_*_HLT',
            'drop *_simGtStage2Digis_*_HLT',
            'drop *_simOmtfDigis_*_HLT',
        ) )
    )

    def extendInputEvtContentForHLTTDR(source):
        if not hasattr(source, ""inputCommands""):
            source.inputCommands = cms.untracked.vstring(""keep *"")
        source.inputCommands.extend(HLTPhase2TDR.outputCommands)
        source.dropDescendantsOfDroppedBranches = cms.untracked.bool(False)
    
    def extendOutputEvtContentForHLTTDR(output):
        if not hasattr(output, ""outputCommands""):
            output.outputCommands = cms.untracked.vstring(""keep *"")
        output.outputCommands.extend(HLTPhase2TDR.outputCommands)

    process.load(""SimCalorimetry.HcalTrigPrimProducers.hcaltpdigi_cff"")

    when running directly the ttclusterassoc uses mix product name, however its ediased to simSiPixelDigis, so output with that we have to adjust the InputTag
    process.TTClusterAssociatorFromPixelDigis.digiSimLinks = cms.InputTag(""Tracker"", ""simSiPixelDigis"", """")"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
HLTPhase2TDR = cms.PSet(
    outputCommands = cms.vstring( *(
        'keep *_TTTrackAssociatorFromPixelDigis_*_*',  
        'keep *_TTStubAssociatorFromPixelDigis_*_*',  
        'drop *_TTStubsFromPhase2TrackerDigis_*_HLT',
        'drop Phase2TrackerDigiedmDetSetVectorPhase2TrackerDigiPhase2TrackerDigiedmrefhelperFindForDetSetVectoredmRefTTClusteredmNewDetSetVector_TTClustersFromPhase2TrackerDigis_ClusterInclusive_*',
        'drop Phase2TrackerDigiedmDetSetVectorPhase2TrackerDigiPhase2TrackerDigiedmrefhelperFindForDetSetVectoredmRefTTClusterAssociationMap_TTClusterAssociatorFromPixelDigis_ClusterInclusive_*',
        'drop Phase2TrackerDigiedmDetSetVectorPhase2TrackerDigiPhase2TrackerDigiedmrefhelperFindForDetSetVectoredmRefTTClusterAssociationMap_TTClusterAssociatorFromPixelDigis_ClusterAccepted_*',
        'drop recoPFClusters_particleFlowClusterHGCal__*',
        'drop l1tHGCalTriggerCellBXVector_hgcalVFEProducer_HGCalVFEProcessorSums_*',
        'drop recoHGCalMultiClusters_ticlMultiClustersFromTrackstersMerge__*',
        'drop recoHGCalMultiClusters_ticlMultiClustersFromTrackstersTrk__*',
        'drop Phase2TrackerDigiedmDetSetVectorPhase2TrackerDigiPhase2TrackerDigiedmrefhelperFindForDetSetVectoredmRefTTClusteredmNewDetSetVector_TTClustersFromPhase2TrackerDigis_ClusterInclusive_HLT',
        'drop recoHGCalMultiClusters_ticlMultiClustersFromTrackstersMIP__*',
        'drop recoPFClusters_particleFlowClusterHGCalFromMultiCl__*',
        'drop l1tHGCalClusterBXVector_hgcalBackEndLayer1Producer_HGCalBackendLayer1Processor2DClustering_*',
        'drop Phase2TrackerDigiedmDetSetVectorPhase2TrackerDigiPhase2TrackerDigiedmrefhelperFindForDetSetVectoredmRefTTClusterAssociationMap_TTClusterAssociatorFromPixelDigis_ClusterInclusive_HLT',
        'drop l1tHGCalTowerMapBXVector_hgcalTowerMapProducer_HGCalTowerMapProcessor_*',
        'drop recoGsfTrackExtras_electronGsfTracks__*',
        'drop recoCaloClusters_particleFlowSuperClusterHGCal__*',
        'drop l1tHGCalTriggerCellBXVector_hgcalConcentratorProducer_HGCalConcentratorProcessorSelection_*',
        'drop recoSuperClusters_particleFlowSuperClusterHGCal__*',
        'drop recoGsfTrackExtras_electronGsfTracksFromMultiCl__*',
        'drop recoHGCalMultiClusters_hgcalMultiClusters__*',
        'drop recoGsfTrackExtras_electronGsfTracks__*',
        'drop recoCaloClusters_particleFlowSuperClusterHGCalFromMultiCl__*',
        'drop recoSuperClusters_particleFlowSuperClusterHGCalFromMultiCl__*',
        'drop Phase2TrackerDigiedmDetSetVectorPhase2TrackerDigiPhase2TrackerDigiedmrefhelperFindForDetSetVectoredmRefTTClusteredmNewDetSetVector_TTStubsFromPhase2TrackerDigis_ClusterAccepted_HLT',
        'drop recoElectronSeeds_electronMergedSeedsFromMultiCl__*',
        'drop recoTrackExtras_electronGsfTracks__*',
        'drop Phase2TrackerDigiedmDetSetVectorPhase2TrackerDigiPhase2TrackerDigiedmrefhelperFindForDetSetVectoredmRefTTClusterAssociationMap_TTClusterAssociatorFromPixelDigis_ClusterAccepted_HLT',
        'drop recoHGCalMultiClusters_ticlMultiClustersFromTrackstersHAD__*',
        'drop recoTrackExtras_electronGsfTracksFromMultiCl__*',
        'drop recoGsfElectrons_ecalDrivenGsfElectronsFromMultiCl__*',
        'drop l1tHGCalMulticlusterBXVector_hgcalBackEndLayer2Producer_HGCalBackendLayer2Processor3DClustering_*',
        'drop Phase2TrackerDigiedmDetSetVectorPhase2TrackerDigiPhase2TrackerDigiedmrefhelperFindForDetSetVectoredmRefTTStubAssociationMap_TTStubAssociatorFromPixelDigis_StubAccepted_HLT',
        'drop recoGsfTracks_electronGsfTracks__*',
        'drop CaloTowersSorted_towerMaker__*',
        'drop recoGsfTracks_electronGsfTracksFromMultiCl__*',
        'drop l1tHGCalTowerBXVector_hgcalTowerProducer_HGCalTowerProcessor_*',
        'drop TrackingRecHitsOwned_electronGsfTracks__*',
        'drop recoHGCalMultiClusters_ticlMultiClustersFromTrackstersEM__*',
        'drop *_hltGtStage2Digis_*_HLT',
        'drop *_simBmtfDigis_*_HLT',
        'drop *_simCaloStage2Digis_*_HLT',
        'drop *_simCaloStage2Layer1Digis_*_HLT',
        'drop *_simEmtfDigis_*_HLT',
        'drop *_simGmtStage2Digis_*_HLT',
        'drop *_simGtStage2Digis_*_HLT',
        'drop *_simOmtfDigis_*_HLT',
        
    ) )
)
def extendInputEvtContentForHLTTDR(source):
    if not hasattr(source,""inputCommands""):
        source.inputCommands = cms.untracked.vstring(""keep *"")
    source.inputCommands.extend(HLTPhase2TDR.outputCommands)        
    source.dropDescendantsOfDroppedBranches = cms.untracked.bool(False)
def extendOutputEvtContentForHLTTDR(output):
    if not hasattr(output,""outputCommands""):
        output.outputCommands = cms.untracked.vstring(""keep *"")
    output.outputCommands.extend(HLTPhase2TDR.outputCommands)        
"
-------------------------------------------------------------------------
"Recom
PRs: 30899, 30903"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
def customisePhase2TTOn110(process):
    process.load('SimCalorimetry.HcalTrigPrimProducers.hcaltpdigi_cff')
    #when running directly, the ttclusterassoc uses the ""mix"" product name
    #however its ediased to simSiPixelDigis so its output with that name
    #so we have to adjust the input tag
    process.TTClusterAssociatorFromPixelDigis.digiSimLinks = cms.InputTag('simSiPixelDigis','Tracker')
    return process
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

def customisePhase2TTOn110(process):
    process.load('SimCalorimetry.HcalTrigPrimProducers.hcaltpdigi_cff')
    # when running directly, the ttclusterassoc uses the ""mix"" product name
    # however its ediased to simSiPixelDigis so its output with that name
    # so we have to adjust the input tag
    process.TTClusterAssociatorFromPixelDigis.digiSimLinks = cms.InputTag('simSiPixelDigis','Tracker')
    return process"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
def customisePhase2TTOn110(process):
    process.load('SimCalorimetry.HcalTrigPrimProducers.hcaltpdigi_cff')
    #when running directly, the ttclusterassoc uses the ""mix"" product name
    #however its ediased to simSiPixelDigis so its output with that name
    #so we have to adjust the input tag
    process.TTClusterAssociatorFromPixelDigis.digiSimLinks = cms.InputTag('simSiPixelDigis','Tracker')
    return process
"
-------------------------------------------------------------------------
"Recom
PRs: 30899, 30903"
-------------------------------------------------------------------------
=========================================================================
"'hlt_data_GRun' : ['cmsDriver.py RelVal -s L1REPACK:Full --data --scenario=pp -n 10 --conditions auto:run3_hlt_GRun --relval 9000,50 --datatier ""RAW"" --eventcontent RAW --customise=HLTrigger/Configuration/CustomConfigs.L1T --era Run3 --fileout file:RelVal_Raw_GRun_DATA.root --filein /store/data/Run2018D/EphemeralHLTPhysics1/RAW/v1/000/323/775/00000/2E066536-5CF2-B340-A73B-209640F29FF6.root --customise_commands=\'if hasattr(process,""simMuonGEMPadTask""): setattr(process,""simMuonGEMPadTask"",cms.Task())\'',
'hlt_data_PIon' : ['cmsDriver.py RelVal -s L1REPACK:Full --data --scenario=pp -n 10 --conditions auto:run3_hlt_PIon --relval 9000,50 --datatier ""RAW"" --customise=HLTrigger/Configuration/CustomConfigs.L1T --era Run3 --eventcontent RAW --fileout file:RelVal_Raw_PIon_DATA.root --filein /store/data/Run2018D/EphemeralHLTPhysics1/RAW/v1/000/323/775/00000/2E066536-5CF2-B340-A73B-209640F29FF6.root --customise_commands=\'if hasattr(process,""simMuonGEMPadTask""): setattr(process,""simMuonGEMPadTask"",cms.Task())\'',
'hlt_data_PRef' : ['cmsDriver.py RelVal -s L1REPACK:Full --data --scenario=pp -n 10 --conditions auto:run3_hlt_PRef --relval 9000,50 --datatier ""RAW"" --customise=HLTrigger/Configuration/CustomConfigs.L1T --era Run3 --eventcontent RAW --fileout file:RelVal_Raw_PRef_DATA.root --filein /store/data/Run2018D/EphemeralHLTPhysics1/RAW/v1/000/323/775/00000/2E066536-5CF2-B340-A73B-209640F29FF6.root --customise_commands=\'if hasattr(process,""simMuonGEMPadTask""): setattr(process,""simMuonGEMPadTask"",cms.Task())\'',
"
-------------------------------------------------------------------------
"'hlt_data_GRun' : ['cmsDriver.py RelVal -s L1REPACK:Full --data --scenario=pp -n 10 --conditions auto:run3_hlt_GRun --relval 9000,50 --datatier ""RAW"" --eventcontent RAW --customise=HLTrigger/Configuration/CustomConfigs.L1T --era Run3 --fileout file:RelVal_Raw_GRun_DATA.root --filein /store/data/Run2018D/EphemeralHLTPhysics1/RAW/v1/000/323/775/00000/2E066536-5CF2-B340-A73B-209640F29FF6.root --customise_commands=\'if hasattr(process,""simMuonGEMPadTask""): setattr(process,""simMuonGEMPadTask"",cms.Task())\'',
'hlt_data_PIon' : ['cmsDriver.py RelVal -s L1REPACK:Full --data --scenario=pp -n 10 --conditions auto:run3_data_PIon --relval 9000,50 --datatier ""RAW"" --customise=HLTrigger/Configuration/CustomConfigs.L1T --era Run3 --eventcontent RAW --fileout file:RelVal_Raw_PIon_DATA.root --filein /store/data/Run2018D/EphemeralHLTPhysics1/RAW/v1/000/323/775/00000/2E066536-5CF2-B340-A73B-209640F29FF6.root --customise_commands=\'if hasattr(process,""simMuonGEMPadTask""): setattr(process,""simMuonGEMPadTask"",cms.Task())\'',
'hlt_data_PRef' : ['cmsDriver.py RelVal -s L1REPACK:Full --data --scenario=pp -n 10 --conditions auto:run3_data_PRef --relval 9000,50 --datatier ""RAW"" --customise=HLTrigger/Configuration/CustomConfigs.L1T --era Run3 --eventcontent RAW --fileout file:RelVal_Raw_PRef_DATA.root --filein /store/data/Run2018D/EphemeralHLTPhysics1/RAW/v1/000/323/775/00000/2E066536-5CF2-B340-A73B-209640F29FF6.root --customise_commands=\'if hasattr(process,""simMuonGEMPadTask""): setattr(process,""simMuonGEMPadTask"",cms.Task())\'',"
-------------------------------------------------------------------------
"'hlt_mc_2018' : ['cmsDriver.py TTbar_Tauola_13TeV_TuneCUETP8M1_cfi -s GEN,SIM,DIGI,L1,DIGI2RAW --mc --scenario=pp -n 10 --conditions auto:run2_mc_2018 --relval 9000,50 --datatier ""GEN-SIM-RAW"" --eventcontent RAWSIM --customise=HLTrigger/Configuration/CustomConfigs.L1T --era Run2_2018 --fileout file:RelVal_Raw_2018_MC.root',
           'HLTrigger/Configuration/test/OnLine_HLT_2018.py',
           'cmsDriver.py RelVal -s HLT:2018,RAW2DIGI,L1Reco,RECO --mc --scenario=pp -n 10 --conditions auto:run2_mc_2018 --relval 9000,50 --datatier ""RAW-HLT-RECO"" --eventcontent FEVTDEBUGHLT --customise=HLTrigger/Configuration/CustomConfigs.L1THLT --era Run2_2018 --processName=HLTRECO --filein file:RelVal_Raw_2018_MC.root --fileout file:RelVal_Raw_2018_MC_HLT_RECO.root'], 
"
-------------------------------------------------------------------------
"Recom
PRs: 30882, 30884"
-------------------------------------------------------------------------
=========================================================================
"'keep *_TTStubsFromPhase2TrackerDigis_*_*',
'keep *_TTClustersFromPhase2TrackerDigis_*_*',
"
-------------------------------------------------------------------------
"'drop *_TTStubsFromPhase2TrackerDigis_*_HLT',
'drop *_TTClustersFromPhase2TrackerDigis_*_HLT',"
-------------------------------------------------------------------------
"'keep *_TTStubsFromPhase2TrackerDigis_*_*',
'keep *_TTClustersFromPhase2TrackerDigis_*_*',
"
-------------------------------------------------------------------------
"Recom
PRs: 30768, 30769"
-------------------------------------------------------------------------
=========================================================================
"#lastLumiFile = cms.untracked.string('last_lumi.txt'),
lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),
"
-------------------------------------------------------------------------
"lastLumiFile = cms.untracked.string('last_lumi.txt'),
lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),"
-------------------------------------------------------------------------
"lastLumiFile = cms.untracked.string('last_lumi.txt'),
#lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),
"
-------------------------------------------------------------------------
"Recom
PRs: 30690, 30696"
-------------------------------------------------------------------------
=========================================================================
"#lastLumiFile = cms.untracked.string('last_lumi.txt'),
lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),
"
-------------------------------------------------------------------------
"         lastLumiFile = cms.untracked.string('last_lumi.txt'),
         lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),"
-------------------------------------------------------------------------
"lastLumiFile = cms.untracked.string('last_lumi.txt'),
#lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),
"
-------------------------------------------------------------------------
"Recom
PRs: 30690, 30696"
-------------------------------------------------------------------------
=========================================================================
"process.onlineMetaDataDigis*
"
-------------------------------------------------------------------------
"process.load(""HLTrigger.special.hltPixelActivityFilter_cfi"") * 
process.load(""DQMServices.Core.DQMQualityTester"") * 
process.onlineMetaDataDigis * 
process.load(""Configuration.AlCa.GlobalTag"") * 
process.load(""Configuration.Eras.Era_Run3_cff"") * 
process.FWCore.ParameterSet.Config * 
process.DQMServices.Core.DQMEDAnalyzer * 
process.load(""RecoTracker.FinalTrackSelectors.earlyGeneralTracks_cfi"") * 
process.EventFilter.SiStripRawToDigi.SiStripDigis_cfi * 
process.load(""RecoPixelVertexing.PixelTrackFitting.PixelTracks_cff"") * 
process.load(""DQM.Integration.config.online_customizations_cfi"") * 
process.load(""RecoVertex.BeamSpotProducer.BeamSpotOnline_cfi"") * 
process.load(""RecoTracker.TkSeedingLayers.PixelLayerTriplets_cfi"") * 
process.sys *"
-------------------------------------------------------------------------
"process.onlineMetaDataDigis*
"
-------------------------------------------------------------------------
"Recom
PRs: 30677, 30678"
-------------------------------------------------------------------------
=========================================================================
"process.onlineMetaDataDigis*
"
-------------------------------------------------------------------------
process.siStripDigisNoZS*
-------------------------------------------------------------------------
"process.onlineMetaDataDigis*
"
-------------------------------------------------------------------------
"Recom
PRs: 30677, 30678"
-------------------------------------------------------------------------
=========================================================================
"process.onlineMetaDataDigis*
"
-------------------------------------------------------------------------
"    process.onlineMetaDataDigis*
    process.unpackedOnlineMetaDataDigis*"
-------------------------------------------------------------------------
"process.onlineMetaDataDigis*
"
-------------------------------------------------------------------------
"Recom
PRs: 30677, 30678"
-------------------------------------------------------------------------
=========================================================================
"process.onlineMetaDataDigis*
"
-------------------------------------------------------------------------
"HLTrigger.special.hltPixelActivityFilter_cfi, DQMServices.Core.DQMQualityTester,  Configuration.AlCa.GlobalTag, Configuration.Eras.Era_Run3_cff, FWCore.ParameterSet.Config, DQMServices.Core.DQMEDAnalyzer, RecoTracker.FinalTrackSelectors.earlyGeneralTracks_cfi, EventFilter.SiStripRawToDigi.SiStripDigis_cfi, RecoPixelVertexing.PixelTrackFitting.PixelTracks_cff, DQM.Integration.config.online_customizations_cfi, RecoVertex.BeamSpotProducer.BeamSpotOnline_cfi, RecoTracker.TkSeedingLayers.PixelLayerTriplets_cfi, sys"
-------------------------------------------------------------------------
"process.onlineMetaDataDigis*
"
-------------------------------------------------------------------------
"Recom
PRs: 30677, 30678"
-------------------------------------------------------------------------
=========================================================================
"from L1Trigger.L1TMuonEndCap.fakeEmtfParams_empty_cff import *
"
-------------------------------------------------------------------------
from L1Trigger.L1TMuonEndCap.fakeEmtfParams_cff import *
-------------------------------------------------------------------------
"from L1Trigger.L1TMuonEndCap.fakeEmtfParams_empty_cff import *
"
-------------------------------------------------------------------------
"Recom
PRs: 30633, 30634"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
    process.load('SimCalorimetry.HcalTrigPrimProducers.hcaltpdigi_cff')
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

def customisePhase2TTNoMC(process):
    process.load('SimCalorimetry.HcalTrigPrimProducers.hcaltpdigi_cff')
    process.L1TrackTrigger.replace(process.L1PromptExtendedHybridTracksWithAssociators, process.L1PromptExtendedHybridTracks)
    process.L1TrackTrigger.remove(process.TrackTriggerAssociatorClustersStubs)
    return process"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
    process.load('SimCalorimetry.HcalTrigPrimProducers.hcaltpdigi_cff')
"
-------------------------------------------------------------------------
"Recom
PRs: 30568, 30569"
-------------------------------------------------------------------------
=========================================================================
"# /frozen/2018/111X/HLT/V16 (CMSSW_11_1_0)
  tableName = cms.string('/frozen/2018/111X/HLT/V16')
"
-------------------------------------------------------------------------
"# /frozen/2018/111X/HLT/V16 (CMSSW_11_1_0)
  tableName = cms.string('/frozen/2018/111X/HLT/V16')"
-------------------------------------------------------------------------
"# /frozen/2018/111X/HLT/V16 (CMSSW_11_1_0)
  tableName = cms.string('/frozen/2018/111X/HLT/V16')
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( False ),"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
hltDeepBLifetimeTagInfosPFAK8.transferSystem = cms.int32( 5 )"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True )"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/HLT/V21 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/HLT/V21')
"
-------------------------------------------------------------------------
fragment.tableName = cms.string('/dev/CMSSW_11_1_0/HLT/V21')
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/HLT/V21 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/HLT/V21')
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
fragment.hltDeepBLifetimeTagInfosPF = cms.EDProducer( ""CandIPProducer"",
     minimumTransverseMomentum = cms.double( 1.0 ),
     primaryVertex = cms.InputTag( ""hltVerticesPFFilter"" ),
     maximumLongitudinalImpactParameter = cms.double( 17.0 ),
     maxDeltaR = cms.double( 0.4 ),
     candidates = cms.InputTag( ""hltParticleFlow"" ),
     jetDirectionUsingGhostTrack = cms.bool( False ),
     minimumNumberOfPixelHits = cms.int32( 2 ),
     jetDirectionUsingTracks = cms.bool( False ),
     useTrackQuality = cms.bool( False ),
     ghostTrackPriorDeltaR = cms.double( 0.03 ),
     maximumChiSquared = cms.double( 5.0 ),"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"hltDeepBLifetimeTagInfosPFAK8 = cms.EDProducer( ""CandIPProducer"",
     minimumTransverseMomentum = cms.double( 1.0 ),
     primaryVertex = cms.InputTag( ""hltVerticesPFFilter"" ),
     maximumLongitudinalImpactParameter = cms.double( 17.0 ),
     maxDeltaR = cms.double( 0.4 ),
     candidates = cms.InputTag( ""hltParticleFlow"" ),
     jetDirectionUsingGhostTrack = cms.bool( False ),
     minimumNumberOfPixelHits = cms.int32( 2 ),
     jetDirectionUsingTracks = cms.bool( False ),
     useTrackQuality = cms.bool( False ),
     ghostTrackPriorDeltaR = cms.double( 0.03 ),
     maximumChiSquared = cms.double( 5.0 ),
     jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
     computeGhostTrack = cms.bool( True ),
)"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrackPriorDeltaR = cms.double( 0.03 ),
computeGhostTrack = cms.bool( True ),"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/Fake1/V9 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake1/V9')
"
-------------------------------------------------------------------------
"fragment.source = cms.Source(""NewSource"",
    file = cms.FileInPath('filePathRoot/RelVal_Raw_PRef_DATA_CMSSW_11_1_0_pre8_HLT1.root')
)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/Fake1/V9 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake1/V9')
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/Fake2/V9 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake2/V9')
"
-------------------------------------------------------------------------
tableName = cms.string('/dev/CMSSW_11_1_0/Fake2/V9')
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/Fake2/V9 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake2/V9')
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/Fake/V9 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake/V9')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/Fake/V9 (CMSSW_11_1_0)
tableName = cms.string('/dev/CMSSW_11_1_0/Fake/V9')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/Fake/V9 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake/V9')
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/GRun/V11 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/GRun/V11')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/GRun/V11 (CMSSW_11_1_0)
tableName = cms.string('/dev/CMSSW_11_1_0/GRun/V11')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/GRun/V11 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/GRun/V11')
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"fragment.hltDeepBLifetimeTagInfosPF = cms.EDProducer( ""CandIPProducer"",
     minimumTransverseMomentum = cms.double( 1.0 ),
     primaryVertex = cms.InputTag( ""hltVerticesPFFilter"" ),
     maximumLongitudinalImpactParameter = cms.double( 17.0 ),
     maxDeltaR = cms.double( 0.4 ),
     candidates = cms.InputTag( ""hltParticleFlow"" ),
     jetDirectionUsingGhostTrack = cms.bool( False ),
     minimumNumberOfPixelHits = cms.int32( 2 ),
     jetDirectionUsingTracks = cms.bool( False ),
     useTrackQuality = cms.bool( False ),
     ghostTrackPriorDeltaR = cms.double( 0.03 ),
     maximumChiSquared = cms.double( 5.0 ),
     jets = cms.InputTag( ""hltPFJetForBtag"" ),
     computeGhostTrack = cms.bool( True ),
)"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"fragment.hltDeepBLifetimeTagInfosPFAK8 = cms.EDProducer( ""CandIPProducer"",
     minimumTransverseMomentum = cms.double( 1.0 ),
     primaryVertex = cms.InputTag( ""hltVerticesPFFilter"" ),
     maximumLongitudinalImpactParameter = cms.double( 17.0 ),
     maxDeltaR = cms.double( 0.4 ),
     candidates = cms.InputTag( ""hltParticleFlow"" ),
     jetDirectionUsingGhostTrack = cms.bool( False ),
     minimumNumberOfPixelHits = cms.int32( 2 ),
     jetDirectionUsingTracks = cms.bool( False ),
     useTrackQuality = cms.bool( False ),
     ghostTrackPriorDeltaR = cms.double( 0.03 ),
     maximumChiSquared = cms.double( 5.0 ),
     jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
     computeGhostTrack = cms.bool( True ),"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
hltBoostedDBLifetimeTagInfosPFAK8 = cms.EDProducer( ""CandIPProducer"",
     minimumTransverseMomentum = cms.double( 1.0 ),
     primaryVertex = cms.InputTag( ""hltVerticesPFFilter"" ),
     maximumLongitudinalImpactParameter = cms.double( 17.0 ),
     maxDeltaR = cms.double( 0.4 ),
     candidates = cms.InputTag( ""hltParticleFlow"" ),
     jetDirectionUsingGhostTrack = cms.bool( False ),
     minimumNumberOfPixelHits = cms.int32( 2 ),
     jetDirectionUsingTracks = cms.bool( False ),
     useTrackQuality = cms.bool( False ),
     ghostTrackPriorDeltaR = cms.double( 0.03 ),
     maximumChiSquared = cms.double( 5.0 ),"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/HIon/V11 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/HIon/V11')
"
-------------------------------------------------------------------------
fragment.HLTTableName = cms.string('/dev/CMSSW_11_1_0/HIon/V11')
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/HIon/V11 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/HIon/V11')
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/PIon/V11 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/PIon/V11')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/PIon/V11 (CMSSW_11_1_0)
tableName = cms.string('/dev/CMSSW_11_1_0/PIon/V11')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/PIon/V11 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/PIon/V11')
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/PRef/V11 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/PRef/V11')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/PRef/V11 (CMSSW_11_1_0)
tableName = cms.string('/dev/CMSSW_11_1_0/PRef/V11')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/PRef/V11 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/PRef/V11')
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"# /frozen/2018/111X/HLT/V16 (CMSSW_11_1_0)
  tableName = cms.string('/frozen/2018/111X/HLT/V16')
"
-------------------------------------------------------------------------
"# /frozen/2018/111X/HLT/V10 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/frozen/2018/111X/HLT/V10')"
-------------------------------------------------------------------------
"# /frozen/2018/111X/HLT/V16 (CMSSW_11_1_0)
  tableName = cms.string('/frozen/2018/111X/HLT/V16')
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltParticleFlow"" ),
jetDirectionUsingGhostTrack = cms.bool( True ),"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"process.hltDeepBLifetimeTagInfosPFAK8 = cms.EDProducer( ""CandIPProducer"",
     minimumTransverseMomentum = cms.double( 1.0 ),
     primaryVertex = cms.InputTag( ""hltVerticesPFFilter"" ),
     maximumLongitudinalImpactParameter = cms.double( 17.0 ),
     maxDeltaR = cms.double( 0.4 ),
     candidates = cms.InputTag( ""hltParticleFlow"" ),
     jetDirectionUsingGhostTrack = cms.bool( False ),
     minimumNumberOfPixelHits = cms.int32( 2 ),
     jetDirectionUsingTracks = cms.bool( False ),
     useTrackQuality = cms.bool( False ),
     ghostTrackPriorDeltaR = cms.double( 0.03 ),
     maximumChiSquared = cms.double( 5.0 ),
     jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
     computeGhostTrack = cms.bool( True ),
)"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltParticleFlow"" ),
jetDirectionUsingGhostTrack = cms.bool( False ),"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/HLT/V21 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/HLT/V21')
"
-------------------------------------------------------------------------
"# V10 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('V10')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/HLT/V21 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/HLT/V21')
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True )"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/Fake/V9 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake/V9')
"
-------------------------------------------------------------------------
tableName = cms.string('/dev/CMSSW_11_1_0/Fake/V10')
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/Fake/V9 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake/V9')
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/Fake1/V9 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake1/V9')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0_pre8_HLT1 (CMSSW_11_1_0_pre8_HLT1)
tableName = cms.string('/dev/CMSSW_11_1_0_pre8_HLT1')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/Fake1/V9 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake1/V9')
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/Fake2/V9 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake2/V9')
"
-------------------------------------------------------------------------
"# hltGetConfiguration --full --data /dev/CMSSW_11_1_0/Fake2 --type Fake2 --unprescale --process HLTFake2 --globaltag auto:run2_hlt_Fake2 --input file:RelVal_Raw_Fake2_DATA.root

import FWCore.ParameterSet.Config as cms

process = cms.Process( ""HLTFake2"" )

process.HLTConfigVersion = cms.PSet(
)

process.streams = cms.PSet(  A = cms.vstring( 'InitialPD' ) )

tableName = cms.string('/dev/CMSSW_11_1_0/Fake2/V10')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/Fake2/V9 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake2/V9')
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/GRun/V11 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/GRun/V11')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/PRef (CMSSW_11_1_0_pre8_HLT1)
tableName = cms.string('/dev/CMSSW_11_1_0/PRef')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/GRun/V11 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/GRun/V11')
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"process.hltPFJetForBtag = cms.EDProducer( ""CandIPProducer"",
    minimumTransverseMomentum = cms.double( 1.0 ),
    primaryVertex = cms.InputTag( ""hltVerticesPFFilter"" ),
    maximumLongitudinalImpactParameter = cms.double( 17.0 ),
    maxDeltaR = cms.double( 0.4 ),
    candidates = cms.InputTag( ""hltParticleFlow"" ),
    jetDirectionUsingGhostTrack = cms.bool( False ),
    minimumNumberOfPixelHits = cms.int32( 2 ),
    jetDirectionUsingTracks = cms.bool( False ),
    useTrackQuality = cms.bool( False ),
    ghostTrackPriorDeltaR = cms.double( 0.03 ),
    maximumChiSquared = cms.double( 5.0 ),
    jets = cms.InputTag( ""hltPFJetForBtag"" ),
    computeGhostTrack = cms.bool( True ),
)"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
useGhostTrack = cms.bool( True ),"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/HIon/V11 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/HIon/V11')
"
-------------------------------------------------------------------------
"# PRef V10
  tableName = cms.string('PRef/V10')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/HIon/V11 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/HIon/V11')
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/PIon/V11 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/PIon/V11')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/PRef/V10 (CMSSW_11_1_0_pre8_HLT1)
tableName = cms.string('/dev/CMSSW_11_1_0/PRef/V10')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/PIon/V11 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/PIon/V11')
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/PRef/V11 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/PRef/V11')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/PRef/V11 (CMSSW_11_1_0)
tableName = cms.string('/dev/CMSSW_11_1_0/PRef/V11')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/PRef/V11 (CMSSW_11_1_0)
  tableName = cms.string('/dev/CMSSW_11_1_0/PRef/V11')
"
-------------------------------------------------------------------------
"Recom
PRs: 30549, 30550"
-------------------------------------------------------------------------
=========================================================================
", 'pfMassIndependentDeepDoubleBvLV2JetTags:probQCD'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleBvLV2JetTags:probHbb'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleCvLV2JetTags:probQCD'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleCvLV2JetTags:probHcc'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleCvBV2JetTags:probHbb'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleCvBV2JetTags:probHcc'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
"
-------------------------------------------------------------------------
"supportedBtagDiscr = {
   , 'pfMassIndependentDeepDoubleBvLV2JetTags:probQCD'                    : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
   , 'pfMassIndependentDeepDoubleBvLV2JetTags:probHbb'                    : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
   , 'pfMassIndependentDeepDoubleCvLV2JetTags:probQCD'                    : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
   , 'pfMassIndependentDeepDoubleCvLV2JetTags:probHcc'                    : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
   , 'pfMassIndependentDeepDoubleCvBV2JetTags:probHbb'                    : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
   , 'pfMassIndependentDeepDoubleCvBV2JetTags:probHcc'                    : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
 }"
-------------------------------------------------------------------------
", 'pfMassIndependentDeepDoubleBvLV2JetTags:probQCD'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleBvLV2JetTags:probHbb'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleCvLV2JetTags:probQCD'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleCvLV2JetTags:probHcc'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleCvBV2JetTags:probHbb'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
, 'pfMassIndependentDeepDoubleCvBV2JetTags:probHcc'                     : [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"#include ""RecoBTag/FeatureTools/interface/NeutralCandidateConverter.h""
"
-------------------------------------------------------------------------
"- Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='cms', ctx=Load()), attr='untracked', ctx=Load()), attr='vstring', ctx=Load()), attr='fileNames', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='cms', ctx=Load()), attr='untracked', ctx=Load()), attr='vstring', ctx=Load()), args=[], keywords=[]))"
-------------------------------------------------------------------------
"#include ""RecoBTag/FeatureTools/interface/NeutralCandidateConverter.h""
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"const auto* pf_jet = dynamic_cast<const reco::PFJet*>(&jet);
const auto* pat_jet = dynamic_cast<const pat::Jet*>(&jet);
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='pf_jet', ctx=Store())], value=Call(func=Attribute(value=Name(id='dynamic_cast', ctx=Load()), attr='<', ctx=Load()), args=[Call(func=Constant(value='const reco::PFJet*'), args=[], keywords={}), Name(id='jet', ctx=Load())], keywords=[]))
- Assign(targets=[Name(id='pat_jet', ctx=Store())], value=Call(func=Attribute(value=Name(id='dynamic_cast', ctx=Load()), attr='<', ctx=Load()), args=[Call(func=Constant(value='const pat::Jet*'), args=[], keywords={}), Name(id='jet', ctx=Load())], keywords=[]))"
-------------------------------------------------------------------------
"const auto* pf_jet = dynamic_cast<const reco::PFJet*>(&jet);
const auto* pat_jet = dynamic_cast<const pat::Jet*>(&jet);
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"std::vector<btagbtvdeep::SortingClass<size_t>> c_sorted, n_sorted;
std::vector<int> n_indexes;
"
-------------------------------------------------------------------------
"```cpp
std::vector<btagbtvdeep::SortingClass<size_t>> c_sorted;
std::vector<btagbtvdeep::SortingClass<size_t>> n_sorted;
std::vector<int> n_indexes;
```"
-------------------------------------------------------------------------
"std::vector<btagbtvdeep::SortingClass<size_t>> c_sorted, n_sorted;
std::vector<int> n_indexes;
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"std::sort(daughters.begin(), daughters.end(), [](const auto& a, const auto& b) { return a->pt() > b->pt(); });
"
-------------------------------------------------------------------------
"std::sort(daughters.begin(), daughters.end(), [](auto const& a, auto const& b) { return a->pt() > b->pt(); });"
-------------------------------------------------------------------------
"std::sort(daughters.begin(), daughters.end(), [](const auto& a, const auto& b) { return a->pt() > b->pt(); });
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"} else {
  n_sorted.emplace_back(
      i, -1, -btagbtvdeep::mindrsvpfcand(svs_unsorted, cand, jet_radius_), cand->pt() / jet.pt());
  n_indexes.push_back(i);
ort collections in added order of priority
:sort(n_sorted.begin(), n_sorted.end(), btagbtvdeep::SortingClass<std::size_t>::compareByABCInv);
:vector<size_t> c_sortedindices, n_sortedindices;
rtedindices = btagbtvdeep::invertSortingVector(n_sorted);
ures.n_pf_features.clear();
ures.n_pf_features.resize(n_sorted.size());
if (cand->pt() < min_candidate_pt_)
auto packed_cand = dynamic_cast<const pat::PackedCandidate*>(cand);
auto reco_cand = dynamic_cast<const reco::PFCandidate*>(cand);
// need some edm::Ptr or edm::Ref if reco candidates
reco::PFCandidatePtr reco_ptr;
if (pf_jet) {
  reco_ptr = pf_jet->getPFConstituent(i);
} else if (pat_jet && reco_cand) {
  reco_ptr = pat_jet->getPFConstituent(i);
}
"
-------------------------------------------------------------------------
"} else {
   n_sorted.emplace_back(
       i, -1, -btagbtvdeep::mindrsvpfcand(svs_unsorted, cand, jet_radius_), cand->pt() / jet.pt());
   n_indexes.push_back(i);
}

std::sort(n_sorted.begin(), n_sorted.end(), btagbtvdeep::SortingClass<std::size_t>::compareByABCInv);
std::vector<size_t> c_sortedindices, n_sortedindices;
n_sortedindices = btagbtvdeep::invertSortingVector(n_sorted);

features.n_pf_features.clear();
features.n_pf_features.resize(n_sorted.size());

if (cand->pt() < min_candidate_pt_) {
   auto packed_cand = dynamic_cast<const pat::PackedCandidate*>(cand);
   auto reco_cand = dynamic_cast<const reco::PFCandidate*>(cand);
   // need some edm::Ptr or edm::Ref if reco candidates
   reco::PFCandidatePtr reco_ptr;
   if (pf_jet) {
      reco_ptr = pf_jet->getPFConstituent(i);
   } else if (pat_jet && reco_cand) {
      reco_ptr = pat_jet->getPFConstituent(i);
   }
}"
-------------------------------------------------------------------------
"} else {
    n_sorted.emplace_back(i, -1, -btagbtvdeep::mindrsvpfcand(svs_unsorted, cand, jet_radius_), cand->pt() / jet.pt());
    n_indexes.push_back(i);
collections in added order of priority
t(c_sorted.begin(), c_sorted.end(), btagbtvdeep::SortingClass<std::size_t>::compareByABCInv);
t(n_sorted.begin(), n_sorted.end(), btagbtvdeep::SortingClass<std::size_t>::compareByABCInv);
tor<size_t> c_sortedindices, n_sortedindices;
indices = btagbtvdeep::invertSortingVector(n_sorted);
.n_pf_features.clear();
.n_pf_features.resize(n_sorted.size());
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"packed_cand, *pat_jet, trackinfo, drminpfcandsv, static_cast<float>(jet_radius_), c_pf_features);
"
-------------------------------------------------------------------------
"             // get_ref to vector element
             auto& c_pf_features = pat_jet.c_pf_features.at(entry);
             if (packed_cand) {
               btagbtvdeep::packedCandidateToFeatures(
             } else if (reco_cand) {
               // get vertex association quality
               int pv_ass_quality = 0;  // fallback value
             auto& trackinfo = trackinfos.at(i);
             auto& drminpfcandsv = static_cast<float>(jet_radius_);
        "
-------------------------------------------------------------------------
"if (cand->pt() < min_candidate_pt_)
auto packed_cand = dynamic_cast<const pat::PackedCandidate*>(cand);
auto reco_cand = dynamic_cast<const reco::PFCandidate*>(cand);
// need some edm::Ptr or edm::Ref if reco candidates
reco::PFCandidatePtr reco_ptr;
if (pf_jet) {
  reco_ptr = pf_jet->getPFConstituent(i);
} else if (pat_jet && reco_cand) {
  reco_ptr = pat_jet->getPFConstituent(i);
}
if (cand->charge() != 0) {
            packed_cand, *pat_jet, trackinfo, drminpfcandsv, static_cast<float>(jet_radius_), c_pf_features);
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"} else {
  // is neutral candidate
  auto entry = n_sortedindices.at(i);
  // get_ref to vector element
  auto& n_pf_features = features.n_pf_features.at(entry);
  // // fill feature structure
  if (packed_cand) {
    btagbtvdeep::packedCandidateToFeatures(
        packed_cand, *pat_jet, drminpfcandsv, static_cast<float>(jet_radius_), n_pf_features);
  } else if (reco_cand) {
    btagbtvdeep::recoCandidateToFeatures(
        reco_cand, jet, drminpfcandsv, static_cast<float>(jet_radius_), puppiw, n_pf_features);
  }
"
-------------------------------------------------------------------------
"} else {
    // is neutral candidate
    auto entry = n_sortedindices.at(i);
    // get_ref to vector element
    auto& n_pf_features = features.n_pf_features.at(entry);
    // fill feature structure
    if (packed_cand) {
        btagbtvdeep::packedCandidateToFeatures(
            packed_cand, *pat_jet, drminpfcandsv, static_cast<float>(jet_radius_), n_pf_features);
    } else if (reco_cand) {
        btagbtvdeep::recoCandidateToFeatures(
            reco_cand, jet, drminpfcandsv, static_cast<float>(jet_radius_), puppiw, n_pf_features);
    }
}"
-------------------------------------------------------------------------
"} else {
    // is neutral candidate
    auto entry = n_sortedindices.at(i);
    // get_ref to vector element
    auto& n_pf_features = features.n_pf_features.at(entry);
    // // fill feature structure
    if (packed_cand) {
    btagbtvdeep::packedCandidateToFeatures(
        packed_cand, *pat_jet, drminpfcandsv, static_cast<float>(jet_radius_), n_pf_features);
    } else if (reco_cand) {
    btagbtvdeep::recoCandidateToFeatures(
        reco_cand, jet, drminpfcandsv, static_cast<float>(jet_radius_), puppiw, n_pf_features);
    }
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"    c_pf_features.dxy = catch_infs(c_pf->dxy());
    c_pf_features.dz = catch_infs(c_pf->dz());
    c_pf_features.dxysig = c_pf->bestTrack() ? catch_infs(c_pf->dxy() / c_pf->dxyError()) : 0;
    c_pf_features.dzsig = c_pf->bestTrack() ? catch_infs(c_pf->dz() / c_pf->dzError()) : 0;
"
-------------------------------------------------------------------------
"```python
    c_pf_features.dxy = catch_infs_and_bound(c_pf->dxy(), -1, 300, -1, 300);
    c_pf_features.dz = catch_infs_and_bound(c_pf->dz(), -1, 300, -1, 300);
    c_pf_features.dxysig = c_pf->bestTrack() ? catch_infs_and_bound(c_pf->dxy() / c_pf->dxyError(), -1, 300, -1, 300) : 0;
    c_pf_features.dzsig = c_pf->bestTrack() ? catch_infs_and_bound(c_pf->dz() / c_pf->dzError(), -1, 300, -1, 300) : 0;
```  "
-------------------------------------------------------------------------
"c_pf_features.dxy = catch_infs(c_pf->dxy());
c_pf_features.dz = catch_infs(c_pf->dz());
c_pf_features.dxysig = c_pf->bestTrack() ? catch_infs(c_pf->dxy() / c_pf->dxyError()) : 0;
c_pf_features.dzsig = c_pf->bestTrack() ? catch_infs(c_pf->dz() / c_pf->dzError()) : 0;
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"    // To be implemented if FatJet tag becomes RECO compatible
    // const auto *trk =
    // float dz =
    // float dxy =
    // c_pf_features.dxy =
    // c_pf_features.dz =
    // c_pf_features.dxysig =
    // c_pf_features.dzsig =
"
-------------------------------------------------------------------------
"```cpp
   // const auto *trk = nullptr;
   // float dz = 0.0;
   // float dxy = 0.0;
   // c_pf_features.dxy = 0.0;
   // c_pf_features.dz = 0.0;
   // c_pf_features.dxysig = 0.0;
   // c_pf_features.dzsig = 0.0;
```"
-------------------------------------------------------------------------
"// To be implemented if FatJet tag becomes RECO compatible
// const auto *trk =
// float dz =
// float dxy =
// c_pf_features.dxy =
// c_pf_features.dz =
// c_pf_features.dxysig =
// c_pf_features.dzsig =
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"sv_features.ptrel = sv.pt() / jet.pt();
"
-------------------------------------------------------------------------
sv_features.ptrel = sv.pt() / jet.pt();  # sv_features.ptrel was not modified in this hunk
-------------------------------------------------------------------------
"sv_features.ptrel = sv.pt() / jet.pt();
sv_features.deltaR = catch_infs_and_bound(std::fabs(reco::deltaR(sv, jet_dir)) - 0.5, 0, -2, 0);
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"#include <iostream>
#include <fstream>
"
-------------------------------------------------------------------------
"include, iostream"
-------------------------------------------------------------------------
"#include <iostream>
#include <fstream>
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"std::string version_;
unsigned n_features_global_;
unsigned n_npf_, n_features_npf_;
unsigned n_cpf_, n_features_cpf_;
unsigned n_sv_, n_features_sv_;
unsigned kGlobal, kNeutralCandidates, kChargedCandidates, kVertices;
std::vector<unsigned> input_sizes_;
bool debug_ = false;
    output_names_(iConfig.getParameter<std::vector<std::string>>(""output_names"")),
    version_(iConfig.getParameter<std::string>(""version"")),
    debug_(iConfig.getUntrackedParameter<bool>(""debugMode"", false)) {
if (version_ == ""V2"") {
  n_features_global_ = 5;
  n_npf_ = 60;
  n_features_npf_ = 8;
  n_cpf_ = 40;
  n_features_cpf_ = 21;
  n_sv_ = 5;
  n_features_sv_ = 7;
  input_sizes_ = {n_features_global_, n_npf_ * n_features_npf_, n_cpf_ * n_features_cpf_, n_sv_ * n_features_sv_};
  kGlobal = 0;
  kNeutralCandidates = 1;
  kChargedCandidates = 2;
  kVertices = 3;
} else {
  n_features_global_ = 27;
  n_cpf_ = 60;
  n_features_cpf_ = 8;
  n_sv_ = 5;
  n_features_sv_ = 2;
  input_sizes_ = {n_features_global_, n_cpf_ * n_features_cpf_, n_sv_ * n_features_sv_};
  kGlobal = 0;
  kChargedCandidates = 1;
  kVertices = 2;
}
desc.add<std::string>(""version"", ""V1"");
using PDVersion = edm::ParameterDescription<std::string>;
"
-------------------------------------------------------------------------
"// Define variables
std::string version_;
unsigned n_features_global_;
unsigned n_npf_, n_features_npf_;
unsigned n_cpf_, n_features_cpf_;
unsigned n_sv_, n_features_sv_;
unsigned kGlobal, kNeutralCandidates, kChargedCandidates, kVertices;
std::vector<unsigned> input_sizes_;
bool debug_ = false;

// Initialize output names, version, and debug mode
output_names_(iConfig.getParameter<std::vector<std::string>>(""output_names"")),
version_(iConfig.getParameter<std::string>(""version"")),
debug_(iConfig.getUntrackedParameter<bool>(""debugMode"", false)) {
  
  // Based on version, set the values for different variables
  if (version_ == ""V2"") {
    n_features_global_ = 5;
    n_npf_ = 60;
    n_features_npf_ = 8;
    n_cpf_ = 40;
    n_features_cpf_ = 21;
    n_sv_ = 5;
    n_features_sv_ = 7;
    input_sizes_ = {n_features_global_, n_npf_ * n_features_npf_, n_cpf_ * n_features_cpf_, n_sv_ * n_features_sv_};
    kGlobal = 0;
    kNeutralCandidates = 1;
    kChargedCandidates = 2;
    kVertices = 3;
  } else {
    n_features_global_ = 27;
    n_cpf_ = 60;
    n_features_cpf_ = 8;
    n_sv_ = 5;
    n_features_sv_ = 2;
    input_sizes_ = {n_features_global_, n_cpf_ * n_features_cpf_, n_sv_ * n_features_sv_};
    kGlobal = 0;
    kChargedCandidates = 1;
    kVertices = 2;
  }

desc.add<std::string>(""version"", ""V1"");
using PDVersion = edm::ParameterDescription<std::string>;"
-------------------------------------------------------------------------
"std::string version_;
unsigned n_features_global_;
unsigned n_npf_, n_features_npf_;
unsigned n_cpf_, n_features_cpf_;
unsigned n_sv_, n_features_sv_;
unsigned kGlobal, kNeutralCandidates, kChargedCandidates, kVertices;
std::vector<unsigned> input_sizes_;
bool debug_ = false;
    output_names_(iConfig.getParameter<std::vector<std::string>>(""output_names"")),
    version_(iConfig.getParameter<std::string>(""version"")),
    debug_(iConfig.getUntrackedParameter<bool>(""debugMode"", false)) {
if (version_ == ""V2"") {
  n_features_global_ = 5;
  n_npf_ = 60;
  n_features_npf_ = 8;
  n_cpf_ = 40;
  n_features_cpf_ = 21;
  n_sv_ = 5;
  n_features_sv_ = 7;
  input_sizes_ = {n_features_global_, n_npf_ * n_features_npf_, n_cpf_ * n_features_cpf_, n_sv_ * n_features_sv_};
  kGlobal = 0;
  kNeutralCandidates = 1;
  kChargedCandidates = 2;
  kVertices = 3;
} else {
  n_features_global_ = 27;
  n_cpf_ = 60;
  n_features_cpf_ = 8;
  n_sv_ = 5;
  n_features_sv_ = 2;
  input_sizes_ = {n_features_global_, n_cpf_ * n_features_cpf_, n_sv_ * n_features_sv_};
  kGlobal = 0;
  kChargedCandidates = 1;
  kVertices = 2;
}
desc.add<std::string>(""version"", ""V1"");
using PDVersion = edm::ParameterDescription<std::string>;
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"std::vector<float> etas_debug;
"
-------------------------------------------------------------------------
outputs_debug = std::vector<float>();
-------------------------------------------------------------------------
"std::vector<float> etas_debug;
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"if (debug_) {
  etas_debug.push_back(taginfo.jet()->eta());
}
:sort(input_names_.begin(), input_names_.end());  // input_names order on input is not preserved
debug_) {
 Dump inputs to file
d::ofstream outfile;
tfile.open(""test.txt"", std::ios_base::app);
tfile << iEvent.id().event() << std::endl;
tfile << batch_size << std::endl;
r (float x : etas_debug)
outfile << x << ' ';
tfile << std::endl;
t _i = 0;
r (const std::vector<float>& v : data_) {
outfile << ""input_"" << _i << std::endl;
for (float x : v)
  outfile << x << ' ';
outfile << std::endl;
_i = _i  1;
tfile << ""outputs"" << std::endl;
r (float x : outputs)
outfile << x << ' ';
tfile << std::endl;
"
-------------------------------------------------------------------------
"if (debug_) {
  etas_debug.push_back(taginfo.jet()->eta());
}

std::sort(input_names_.begin(), input_names_.end());  // input_names order on input is not preserved

if (debug_) {
  // Dump inputs to file
  std::ofstream outfile;
  outfile.open(""test.txt"", std::ios_base::app);
  outfile << iEvent.id().event() << std::endl;
  outfile << batch_size << std::endl;
  for (float x : etas_debug)
    outfile << x << ' ';
  outfile << std::endl;
  
  int _i = 0;
  for (const std::vector<float>& v : data_) {
    outfile << ""input_"" << _i << std::endl;
    for (float x : v)
      outfile << x << ' ';
    outfile << std::endl;
    _i++;
  }
  
  outfile << ""outputs"" << std::endl;
  for (float x : outputs)
    outfile << x << ' ';
  outfile << std::endl;
}"
-------------------------------------------------------------------------
"if (debug_) {
  etas_debug.push_back(taginfo.jet()->eta());
}
:sort(input_names_.begin(), input_names_.end());  // input_names order on input is not preserved
debug_) {
 Dump inputs to file
d::ofstream outfile;
tfile.open(""test.txt"", std::ios_base::app);
tfile << iEvent.id().event() << std::endl;
tfile << batch_size << std::endl;
r (float x : etas_debug)
outfile << x << ' ';
tfile << std::endl;
t _i = 0;
r (const std::vector<float>& v : data_) {
outfile << ""input_"" << _i << std::endl;
for (float x : v)
  outfile << x << ' ';
outfile << std::endl;
_i = _i  1;
tfile << ""outputs"" << std::endl;
r (float x : outputs)
outfile << x << ' ';
tfile << std::endl;
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"if (version_ == ""V1"") {
  *(ptr) = tag_info_features.jetNSecondaryVertices;
}
if (version_ == ""V1"") {
  *(ptr) = tag_info_features.tau1_trackEtaRel_2;
  *(ptr) = tag_info_features.tau2_trackEtaRel_0;
  *(ptr) = tag_info_features.tau2_trackEtaRel_1;
  *(ptr) = tag_info_features.tau2_trackEtaRel_2;
  *(ptr) = tag_info_features.tau1_flightDistance2dSig;
  *(ptr) = tag_info_features.tau2_flightDistance2dSig;
}
if (version_ == ""V1"") {
  *(ptr) = tag_info_features.tau2_vertexEnergyRatio;
  *(ptr) = tag_info_features.tau1_vertexMass;
  *(ptr) = tag_info_features.tau2_vertexMass;
  *(ptr) = tag_info_features.trackSip2dSigAboveBottom_0;
  *(ptr) = tag_info_features.trackSip2dSigAboveBottom_1;
  *(ptr) = tag_info_features.trackSip2dSigAboveCharm;
  *(ptr) = tag_info_features.trackSip3dSig_0;
  *(ptr) = tag_info_features.tau1_trackSip3dSig_0;
  *(ptr) = tag_info_features.tau1_trackSip3dSig_1;
  *(ptr) = tag_info_features.trackSip3dSig_1;
  *(ptr) = tag_info_features.tau2_trackSip3dSig_0;
  *(ptr) = tag_info_features.tau2_trackSip3dSig_1;
  *(ptr) = tag_info_features.trackSip3dSig_2;
  *(ptr) = tag_info_features.trackSip3dSig_3;
  *(ptr) = tag_info_features.z_ratio;
}
"
-------------------------------------------------------------------------
"if (version_ == ""V1"") {
  *(ptr) = tag_info_features.jetNSecondaryVertices;

  *(++ptr) = tag_info_features.tau1_trackEtaRel_2;
  *(++ptr) = tag_info_features.tau2_trackEtaRel_0;
  *(++ptr) = tag_info_features.tau2_trackEtaRel_1;
  *(++ptr) = tag_info_features.tau2_trackEtaRel_2;
  *(++ptr) = tag_info_features.tau1_flightDistance2dSig;
  *(++ptr) = tag_info_features.tau2_flightDistance2dSig;

  *(++ptr) = tag_info_features.tau2_vertexEnergyRatio;
  *(++ptr) = tag_info_features.tau1_vertexMass;
  *(++ptr) = tag_info_features.tau2_vertexMass;
  *(++ptr) = tag_info_features.trackSip2dSigAboveBottom_0;
  *(++ptr) = tag_info_features.trackSip2dSigAboveBottom_1;
  *(++ptr) = tag_info_features.trackSip2dSigAboveCharm;
  *(++ptr) = tag_info_features.trackSip3dSig_0;
  *(++ptr) = tag_info_features.tau1_trackSip3dSig_0;
  *(++ptr) = tag_info_features.tau1_trackSip3dSig_1;
  *(++ptr) = tag_info_features.trackSip3dSig_1;
  *(++ptr) = tag_info_features.tau2_trackSip3dSig_0;
  *(++ptr) = tag_info_features.tau2_trackSip3dSig_1;
  *(++ptr) = tag_info_features.trackSip3dSig_2;
  *(++ptr) = tag_info_features.trackSip3dSig_3;
  *(++ptr) = tag_info_features.z_ratio;
}"
-------------------------------------------------------------------------
"if (version_ == ""V1"") {
  *(ptr) = tag_info_features.jetNSecondaryVertices;
}
if (version_ == ""V1"") {
  *(ptr) = tag_info_features.tau1_trackEtaRel_2;
  *(ptr) = tag_info_features.tau2_trackEtaRel_0;
  *(ptr) = tag_info_features.tau2_trackEtaRel_1;
  *(ptr) = tag_info_features.tau2_trackEtaRel_2;
  *(ptr) = tag_info_features.tau1_flightDistance2dSig;
  *(ptr) = tag_info_features.tau2_flightDistance2dSig;
}
if (version_ == ""V1"") {
  *(ptr) = tag_info_features.tau2_vertexEnergyRatio;
  *(ptr) = tag_info_features.tau1_vertexMass;
  *(ptr) = tag_info_features.tau2_vertexMass;
  *(ptr) = tag_info_features.trackSip2dSigAboveBottom_0;
  *(ptr) = tag_info_features.trackSip2dSigAboveBottom_1;
  *(ptr) = tag_info_features.trackSip2dSigAboveCharm;
  *(ptr) = tag_info_features.trackSip3dSig_0;
  *(ptr) = tag_info_features.tau1_trackSip3dSig_0;
  *(ptr) = tag_info_features.tau1_trackSip3dSig_1;
  *(ptr) = tag_info_features.trackSip3dSig_1;
  *(ptr) = tag_info_features.tau2_trackSip3dSig_0;
  *(ptr) = tag_info_features.tau2_trackSip3dSig_1;
  *(ptr) = tag_info_features.trackSip3dSig_2;
  *(ptr) = tag_info_features.trackSip3dSig_3;
  *(ptr) = tag_info_features.z_ratio;
}
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"if (version_ == ""V1"") {
  *(ptr) = c_pf_features.btagPf_trackPtRatio;
  *(ptr) = c_pf_features.btagPf_trackPParRatio;
  *(ptr) = c_pf_features.btagPf_trackSip2dVal;
  *(ptr) = c_pf_features.btagPf_trackSip2dSig;
  *(ptr) = c_pf_features.btagPf_trackSip3dVal;
  *(ptr) = c_pf_features.btagPf_trackSip3dSig;
  *(ptr) = c_pf_features.btagPf_trackJetDistVal;
} else {
  *(ptr) = c_pf_features.btagPf_trackJetDistVal;
  *(ptr) = c_pf_features.btagPf_trackPParRatio;
  *(ptr) = c_pf_features.btagPf_trackPtRatio;
  *(ptr) = c_pf_features.btagPf_trackSip2dSig;
  *(ptr) = c_pf_features.btagPf_trackSip2dVal;
  *(ptr) = c_pf_features.btagPf_trackSip3dSig;
  *(ptr) = c_pf_features.btagPf_trackSip3dVal;
  *(ptr) = c_pf_features.deltaR;
  *(ptr) = c_pf_features.drminsv;
  *(ptr) = c_pf_features.drsubjet1;
  *(ptr) = c_pf_features.drsubjet2;
  *(ptr) = c_pf_features.dxy;
  *(ptr) = c_pf_features.dxysig;
  *(ptr) = c_pf_features.dz;
  *(ptr) = c_pf_features.dzsig;
  *(ptr) = c_pf_features.erel;
  *(ptr) = c_pf_features.etarel;
  *(ptr) = c_pf_features.chi2;
  *(ptr) = c_pf_features.ptrel_noclip;
  *(ptr) = c_pf_features.quality;
}
 (version_ == ""V2"") {
// n_pf candidates
auto max_n_pf_n = std::min(features.n_pf_features.size(), (std::size_t)n_cpf_);
offset = i_jet * input_sizes_[kNeutralCandidates];
for (std::size_t n_pf_n = 0; n_pf_n < max_n_pf_n; n_pf_n) {
  const auto& n_pf_features = features.n_pf_features.at(n_pf_n);
  ptr = &data_[kNeutralCandidates][offset  n_pf_n * n_features_npf_];
  start = ptr;
  *ptr = n_pf_features.deltaR_noclip;
  *(ptr) = n_pf_features.drminsv;
  *(ptr) = n_pf_features.drsubjet1;
  *(ptr) = n_pf_features.drsubjet2;
  *(ptr) = n_pf_features.erel;
  *(ptr) = n_pf_features.hadFrac;
  *(ptr) = n_pf_features.ptrel_noclip;
  *(ptr) = n_pf_features.puppiw;
  assert(start  n_features_npf_ - 1 == ptr);
}
"
-------------------------------------------------------------------------
"if (version_ == ""V1"") {
  *(ptr) = c_pf_features.btagPf_trackPtRatio;
  *(ptr) = c_pf_features.btagPf_trackPParRatio;
  *(ptr) = c_pf_features.btagPf_trackSip2dVal;
  *(ptr) = c_pf_features.btagPf_trackSip2dSig;
  *(ptr) = c_pf_features.btagPf_trackSip3dVal;
  *(ptr) = c_pf_features.btagPf_trackSip3dSig;
  *(ptr) = c_pf_features.btagPf_trackJetDistVal;
} else {
  *(ptr) = c_pf_features.btagPf_trackJetDistVal;
  *(ptr) = c_pf_features.btagPf_trackPParRatio;
  *(ptr) = c_pf_features.btagPf_trackPtRatio;
  *(ptr) = c_pf_features.btagPf_trackSip2dSig;
  *(ptr) = c_pf_features.btagPf_trackSip2dVal;
  *(ptr) = c_pf_features.btagPf_trackSip3dSig;
  *(ptr) = c_pf_features.btagPf_trackSip3dVal;
  *(ptr) = c_pf_features.deltaR;
  *(ptr) = c_pf_features.drminsv;
  *(ptr) = c_pf_features.drsubjet1;
  *(ptr) = c_pf_features.drsubjet2;
  *(ptr) = c_pf_features.dxy;
  *(ptr) = c_pf_features.dxysig;
  *(ptr) = c_pf_features.dz;
  *(ptr) = c_pf_features.dzsig;
  *(ptr) = c_pf_features.erel;
  *(ptr) = c_pf_features.etarel;
  *(ptr) = c_pf_features.chi2;
  *(ptr) = c_pf_features.ptrel_noclip;
  *(ptr) = c_pf_features.quality;
}

if (version_ == ""V2"") {
  // n_pf candidates
  auto max_n_pf_n = std::min(features.n_pf_features.size(), (std::size_t)n_cpf_);
  offset = i_jet * input_sizes_[kNeutralCandidates];
  for (std::size_t n_pf_n = 0; n_pf_n < max_n_pf_n; n_pf_n++) {
    const auto& n_pf_features = features.n_pf_features.at(n_pf_n);
    ptr = &data_[kNeutralCandidates][offset + n_pf_n * n_features_npf_];
    start = ptr;
    *ptr = n_pf_features.deltaR_noclip;
    *(ptr) = n_pf_features.drminsv;
    *(ptr) = n_pf_features.drsubjet1;
    *(ptr) = n_pf_features.drsubjet2;
    *(ptr) = n_pf_features.erel;
    *(ptr) = n_pf_features.hadFrac;
    *(ptr) = n_pf_features.ptrel_noclip;
    *(ptr) = n_pf_features.puppiw;
    assert(start + n_features_npf_ - 1 == ptr);
  }
}"
-------------------------------------------------------------------------
"if (version_ == ""V1"") {
  *(ptr) = c_pf_features.btagPf_trackPtRatio;
  *(ptr) = c_pf_features.btagPf_trackPParRatio;
  *(ptr) = c_pf_features.btagPf_trackSip2dVal;
  *(ptr) = c_pf_features.btagPf_trackSip2dSig;
  *(ptr) = c_pf_features.btagPf_trackSip3dVal;
  *(ptr) = c_pf_features.btagPf_trackSip3dSig;
  *(ptr) = c_pf_features.btagPf_trackJetDistVal;
} else {
  *(ptr) = c_pf_features.btagPf_trackJetDistVal;
  *(ptr) = c_pf_features.btagPf_trackPParRatio;
  *(ptr) = c_pf_features.btagPf_trackPtRatio;
  *(ptr) = c_pf_features.btagPf_trackSip2dSig;
  *(ptr) = c_pf_features.btagPf_trackSip2dVal;
  *(ptr) = c_pf_features.btagPf_trackSip3dSig;
  *(ptr) = c_pf_features.btagPf_trackSip3dVal;
  *(ptr) = c_pf_features.deltaR;
  *(ptr) = c_pf_features.drminsv;
  *(ptr) = c_pf_features.drsubjet1;
  *(ptr) = c_pf_features.drsubjet2;
  *(ptr) = c_pf_features.dxy;
  *(ptr) = c_pf_features.dxysig;
  *(ptr) = c_pf_features.dz;
  *(ptr) = c_pf_features.dzsig;
  *(ptr) = c_pf_features.erel;
  *(ptr) = c_pf_features.etarel;
  *(ptr) = c_pf_features.chi2;
  *(ptr) = c_pf_features.ptrel_noclip;
  *(ptr) = c_pf_features.quality;
}
 (version_ == ""V2"") {
// n_pf candidates
auto max_n_pf_n = std::min(features.n_pf_features.size(), (std::size_t)n_cpf_);
offset = i_jet * input_sizes_[kNeutralCandidates];
for (std::size_t n_pf_n = 0; n_pf_n < max_n_pf_n; n_pf_n) {
  const auto& n_pf_features = features.n_pf_features.at(n_pf_n);
  ptr = &data_[kNeutralCandidates][offset  n_pf_n * n_features_npf_];
  start = ptr;
  *ptr = n_pf_features.deltaR_noclip;
  *(ptr) = n_pf_features.drminsv;
  *(ptr) = n_pf_features.drsubjet1;
  *(ptr) = n_pf_features.drsubjet2;
  *(ptr) = n_pf_features.erel;
  *(ptr) = n_pf_features.hadFrac;
  *(ptr) = n_pf_features.ptrel_noclip;
  *(ptr) = n_pf_features.puppiw;
  assert(start  n_features_npf_ - 1 == ptr);
}
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"if (version_ == ""V1"") {
  *ptr = sv_features.d3d;
  *(ptr) = sv_features.d3dsig;
} else {
  *ptr = sv_features.costhetasvpv;
  *(ptr) = sv_features.deltaR;
  *(ptr) = sv_features.dxysig;
  *(ptr) = sv_features.mass;
  *(ptr) = sv_features.ntracks;
  *(ptr) = sv_features.pt;
  *(ptr) = sv_features.ptrel;
}
"
-------------------------------------------------------------------------
"if (version_ == ""V1"") {
    *ptr = sv_features.d3d;
    *(ptr + 1) = sv_features.d3dsig;
} else {
    *ptr = sv_features.costhetasvpv;
    *(ptr + 1) = sv_features.deltaR;
    *(ptr + 2) = sv_features.dxysig;
    *(ptr + 3) = sv_features.mass;
    *(ptr + 4) = sv_features.ntracks;
    *(ptr + 5) = sv_features.pt;
    *(ptr + 6) = sv_features.ptrel;
}"
-------------------------------------------------------------------------
"if (version_ == ""V1"") {
  *ptr = sv_features.d3d;
  *(ptr) = sv_features.d3dsig;
} else {
  *ptr = sv_features.costhetasvpv;
  *(ptr) = sv_features.deltaR;
  *(ptr) = sv_features.dxysig;
  *(ptr) = sv_features.mass;
  *(ptr) = sv_features.ntracks;
  *(ptr) = sv_features.pt;
  *(ptr) = sv_features.ptrel;
}
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"from RecoBTag.ONNXRuntime.pfMassIndependentDeepDoubleXV2JetTags_cff import *
"
-------------------------------------------------------------------------
from RecoBTag.ONNXRuntime.pfMassIndependentDeepDoubleXJetTags_cff import *
-------------------------------------------------------------------------
"from RecoBTag.ONNXRuntime.pfMassIndependentDeepDoubleXV2JetTags_cff import *
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"model_path = ""RecoBTag/Combined/data/DeepDoubleX/94X/V01/DDB_mass_independent.onnx"")
model_path = ""RecoBTag/Combined/data/DeepDoubleX/94X/V01/DDC_mass_independent.onnx"")
model_path = ""RecoBTag/Combined/data/DeepDoubleX/94X/V01/DDCvB_mass_independent.onnx"")
"
-------------------------------------------------------------------------
"model_path = ""RecoBTag/Combined/data/DeepDoubleC/106X/V02/DDB_mass_independent.onnx"")
model_path = ""RecoBTag/Combined/data/DeepDoubleC/106X/V02/DDC_mass_independent.onnx"")
model_path = ""RecoBTag/Combined/data/DeepDoubleC/106X/V02/DDCvB_mass_independent.onnx"")"
-------------------------------------------------------------------------
"model_path = ""RecoBTag/Combined/data/DeepDoubleX/94X/V01/DDB_mass_independent.onnx"")
model_path = ""RecoBTag/Combined/data/DeepDoubleX/94X/V01/DDC_mass_independent.onnx"")
model_path = ""RecoBTag/Combined/data/DeepDoubleX/94X/V01/DDCvB_mass_independent.onnx"")
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"from __future__ import absolute_import
import FWCore.ParameterSet.Config as cms
from .pfDeepDoubleBvLJetTags_cfi import pfDeepDoubleBvLJetTags
from .pfDeepDoubleCvLJetTags_cfi import pfDeepDoubleCvLJetTags
from .pfDeepDoubleCvBJetTags_cfi import pfDeepDoubleCvBJetTags
pfMassIndependentDeepDoubleBvLV2JetTags = pfDeepDoubleBvLJetTags.clone(
    model_path=""RecoBTag/Combined/data/DeepDoubleX/102X/V02/BvL.onnx"",
    input_names={""input_1"", ""input_2"", ""input_3"", ""input_4""},
    version=""V2"",
)
pfMassIndependentDeepDoubleCvLV2JetTags = pfDeepDoubleCvLJetTags.clone(
    model_path=""RecoBTag/Combined/data/DeepDoubleX/102X/V02/CvL.onnx"",
    input_names={""input_1"", ""input_2"", ""input_3"", ""input_4""},
    version=""V2"",
)
pfMassIndependentDeepDoubleCvBV2JetTags = pfDeepDoubleCvBJetTags.clone(
    model_path=""RecoBTag/Combined/data/DeepDoubleX/102X/V02/CvB.onnx"",
    input_names={""input_1"", ""input_2"", ""input_3"", ""input_4""},
    version=""V2"",
)
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

pfMassIndependentDeepDoubleBvLV2JetTags = cms.EDProducer('DeepDoubleBvLJetTags',
    model_path = cms.string(""RecoBTag/Combined/data/DeepDoubleX/102X/V02/BvL.onnx""),
    input_names = cms.vstring(""input_1"", ""input_2"", ""input_3"", ""input_4""),
    version = cms.string(""V2"")
)

pfMassIndependentDeepDoubleCvLV2JetTags = cms.EDProducer('DeepDoubleCvLJetTags',
    model_path = cms.string(""RecoBTag/Combined/data/DeepDoubleX/102X/V02/CvL.onnx""),
    input_names = cms.vstring(""input_1"", ""input_2"", ""input_3"", ""input_4""),
    version = cms.string(""V2"")
)

pfMassIndependentDeepDoubleCvBV2JetTags = cms.EDProducer('DeepDoubleCvBJetTags',
    model_path = cms.string(""RecoBTag/Combined/data/DeepDoubleX/102X/V02/CvB.onnx""),
    input_names = cms.vstring(""input_1"", ""input_2"", ""input_3"", ""input_4""),
    version = cms.string(""V2"")
)"
-------------------------------------------------------------------------
"from __future__ import absolute_import
import FWCore.ParameterSet.Config as cms
from .pfDeepDoubleBvLJetTags_cfi import pfDeepDoubleBvLJetTags
from .pfDeepDoubleCvLJetTags_cfi import pfDeepDoubleCvLJetTags
from .pfDeepDoubleCvBJetTags_cfi import pfDeepDoubleCvBJetTags
pfMassIndependentDeepDoubleBvLV2JetTags = pfDeepDoubleBvLJetTags.clone(
    model_path=""RecoBTag/Combined/data/DeepDoubleX/102X/V02/BvL.onnx"",
    input_names={""input_1"", ""input_2"", ""input_3"", ""input_4""},
    version=""V2"",
)
pfMassIndependentDeepDoubleCvLV2JetTags = pfDeepDoubleCvLJetTags.clone(
    model_path=""RecoBTag/Combined/data/DeepDoubleX/102X/V02/CvL.onnx"",
    input_names={""input_1"", ""input_2"", ""input_3"", ""input_4""},
    version=""V2"",
)
pfMassIndependentDeepDoubleCvBV2JetTags = pfDeepDoubleCvBJetTags.clone(
    model_path=""RecoBTag/Combined/data/DeepDoubleX/102X/V02/CvB.onnx"",
    input_names={""input_1"", ""input_2"", ""input_3"", ""input_4""},
    version=""V2"",
)
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"import numpy as np
import pickle
handleJ  = Handle(""std::vector<pat::Jet>"")
"
-------------------------------------------------------------------------
"from DataFormats.FWLite import Handle
import ROOT

handleJ = Handle(""std::vector<pat::Jet>"")"
-------------------------------------------------------------------------
"import numpy as np
import pickle
handleJ  = Handle(""std::vector<pat::Jet>"")
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"info = {}
info['pt'] = []
info['eta'] = []
info['mass'] = []
info['BvL'] = []
info['CvL'] = []
info['CvB'] = []
for iev, event in enumerate(events_c):
    print(iev)
    for jet in jets:
        #if jet.pt() < 300 or jet.pt() > 2000: continue
        #if jet.mass() < 40 or jet.mass() > 200: continue
        print(jet.pt(), jet.mass(), jet.eta())
        # print(""DDB"", jet.bDiscriminator(""pfMassIndependentDeepDoubleBvLJetTags:probQCD""), jet.bDiscriminator(""pfMassIndependentDeepDoubleBvLJetTags:probHbb""))
        # print(""DDCvL"", jet.bDiscriminator(""pfMassIndependentDeepDoubleCvLJetTags:probQCD""), jet.bDiscriminator(""pfMassIndependentDeepDoubleCvLJetTags:probHcc""))
        # print(""DDCvB"", jet.bDiscriminator(""pfMassIndependentDeepDoubleCvBJetTags:probHbb""), jet.bDiscriminator(""pfMassIndependentDeepDoubleCvBJetTags:probHcc""))
        info['mass'].append(jet.mass())
        info['pt'].append(jet.pt())
        info['eta'].append(jet.eta())
        info['BvL'].append(jet.bDiscriminator(""pfDeepDoubleBvLJetTags:probHbb""))
        info['CvL'].append(jet.bDiscriminator(""pfDeepDoubleCvLJetTags:probHcc""))
        info['CvB'].append(jet.bDiscriminator(""pfDeepDoubleCvBJetTags:probHcc""))
with open('outputs.pkl', 'wb') as handle:
    pickle.dump(info, handle)
"
-------------------------------------------------------------------------
"info = {}
info['pt'] = []
info['eta'] = []
info['mass'] = []
info['BvL'] = []
info['CvL'] = []
info['CvB'] = []
for iev, event in enumerate(events_c):
    print(iev)
    for jet in jets:
        print(jet.pt(), jet.mass(), jet.eta())
        info['mass'].append(jet.mass())
        info['pt'].append(jet.pt())
        info['eta'].append(jet.eta())
        info['BvL'].append(jet.bDiscriminator(""pfDeepDoubleBvLJetTags:probHbb""))
        info['CvL'].append(jet.bDiscriminator(""pfDeepDoubleCvLJetTags:probHcc""))
        info['CvB'].append(jet.bDiscriminator(""pfDeepDoubleCvBJetTags:probHcc""))
with open('outputs.pkl', 'wb') as handle:
    pickle.dump(info, handle)"
-------------------------------------------------------------------------
"info = {}
info['pt'] = []
info['eta'] = []
info['mass'] = []
info['BvL'] = []
info['CvL'] = []
info['CvB'] = []
for iev, event in enumerate(events_c):
    print(iev)
    for jet in jets:
        #if jet.pt() < 300 or jet.pt() > 2000: continue
        #if jet.mass() < 40 or jet.mass() > 200: continue
        print(jet.pt(), jet.mass(), jet.eta())
        # print(""DDB"", jet.bDiscriminator(""pfMassIndependentDeepDoubleBvLJetTags:probQCD""), jet.bDiscriminator(""pfMassIndependentDeepDoubleBvLJetTags:probHbb""))
        # print(""DDCvL"", jet.bDiscriminator(""pfMassIndependentDeepDoubleCvLJetTags:probQCD""), jet.bDiscriminator(""pfMassIndependentDeepDoubleCvLJetTags:probHcc""))
        # print(""DDCvB"", jet.bDiscriminator(""pfMassIndependentDeepDoubleCvBJetTags:probHbb""), jet.bDiscriminator(""pfMassIndependentDeepDoubleCvBJetTags:probHcc""))
        info['mass'].append(jet.mass())
        info['pt'].append(jet.pt())
        info['eta'].append(jet.eta())
        info['BvL'].append(jet.bDiscriminator(""pfDeepDoubleBvLJetTags:probHbb""))
        info['CvL'].append(jet.bDiscriminator(""pfDeepDoubleCvLJetTags:probHcc""))
        info['CvB'].append(jet.bDiscriminator(""pfDeepDoubleCvBJetTags:probHcc""))
with open('outputs.pkl', 'wb') as handle:
    pickle.dump(info, handle)
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"process.MessageLogger.cerr.FwkReport.reportEvery = 1
process.options = cms.untracked.PSet( wantSummary = cms.untracked.bool(True),
SkipEvent = cms.untracked.vstring('ProductNotFound'))
    fileNames = cms.untracked.vstring(),
    #skipEvents=cms.untracked.uint32(250)
#process.source.eventsToProcess = cms.untracked.VEventRange(""1:3127296-1:3127297"")
#process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(-1) )
process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(1000) )
"
-------------------------------------------------------------------------
"```python
process.MessageLogger.cerr.FwkReport.reportEvery = 1
process.options = cms.PSet( wantSummary = cms.untracked.bool(True),
                            SkipEvent = cms.untracked.vstring('ProductNotFound'))
fileNames = cms.vstring(),
#skipEvents=cms.untracked.uint32(250)
#process.source.eventsToProcess = cms.untracked.VEventRange(""1:3127296-1:3127297"")
#process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(-1) )
process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(1000) )
```  "
-------------------------------------------------------------------------
"process.MessageLogger.cerr.FwkReport.reportEvery = 1
process.options = cms.untracked.PSet( wantSummary = cms.untracked.bool(True),
SkipEvent = cms.untracked.vstring('ProductNotFound'))
    fileNames = cms.untracked.vstring(),
    #skipEvents=cms.untracked.uint32(250)
#process.source.eventsToProcess = cms.untracked.VEventRange(""1:3127296-1:3127297"")
#process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(-1) )
process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(1000) )
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"'pfMassIndependentDeepDoubleBvLV2JetTags:probQCD', 
'pfMassIndependentDeepDoubleBvLV2JetTags:probHbb',
'pfMassIndependentDeepDoubleCvLV2JetTags:probQCD',
'pfMassIndependentDeepDoubleCvLV2JetTags:probHcc',
'pfMassIndependentDeepDoubleCvBV2JetTags:probHbb',
'pfMassIndependentDeepDoubleCvBV2JetTags:probHcc',
re/relval/CMSSW_10_3_0_pre2/RelValTTbar_13/MINIAODSIM/PU25ns_103X_upgrade2018_realistic_v2-v1/20000/85820ACA-657B-BC44-AC74-AACD6D54B348.root'
72164088-CB67-E811-9D0D-008CFA197AC4.root',
ss.maxEvents.input = 1000
"
-------------------------------------------------------------------------
"updateJetCollection(
    jetCorrections = ('AK8PFchs', cms.vstring(['L2Relative', 'L3Absolute']), 'None'),
    btagDiscriminators = [
        'pfBoostedDoubleSecondaryVertexAK8BJetTags',
        'pfMassIndependentDeepDoubleBvLV2JetTags:probQCD', 
        'pfMassIndependentDeepDoubleBvLV2JetTags:probHbb',
        'pfMassIndependentDeepDoubleCvLV2JetTags:probQCD',
        'pfMassIndependentDeepDoubleCvLV2JetTags:probHcc',
        'pfMassIndependentDeepDoubleCvBV2JetTags:probHbb',
        'pfMassIndependentDeepDoubleCvBV2JetTags:probHcc',
    ]
)"
-------------------------------------------------------------------------
"'pfMassIndependentDeepDoubleBvLV2JetTags:probQCD', 
'pfMassIndependentDeepDoubleBvLV2JetTags:probHbb',
'pfMassIndependentDeepDoubleCvLV2JetTags:probQCD',
'pfMassIndependentDeepDoubleCvLV2JetTags:probHcc',
'pfMassIndependentDeepDoubleCvBV2JetTags:probHbb',
'pfMassIndependentDeepDoubleCvBV2JetTags:probHcc',
re/relval/CMSSW_10_3_0_pre2/RelValTTbar_13/MINIAODSIM/PU25ns_103X_upgrade2018_realistic_v2-v1/20000/85820ACA-657B-BC44-AC74-AACD6D54B348.root'
e/mc/RunIIFall17MiniAODv2/GluGluHToCC_M125_13TeV_powheg_pythia8/MINIAODSIM/PU2017_12Apr2018_94X_mc2017_realistic_v14-v2/30000/72164088-CB67-E811-9D0D-008CFA197AC4.root',
s.maxEvents.input = 10000
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"modifyHgcalTriggerPrimitivesWithV9Geometry_ = (phase2_hgcalV9 & ~phase2_hgcalV11).makeProcessModifier(custom_geometry_decentralized_V9)
"
-------------------------------------------------------------------------
modifyHgcalTriggerPrimitivesWithV9Geometry_ = convertHGCalDigisSim.makeProcessModifier(custom_geometry_decentralized_V9)
-------------------------------------------------------------------------
"modifyHgcalTriggerPrimitivesWithV9Geometry_ = (phase2_hgcalV9 & ~phase2_hgcalV11).makeProcessModifier(custom_geometry_decentralized_V9)
"
-------------------------------------------------------------------------
"Recom
PRs: 30470, 30516"
-------------------------------------------------------------------------
=========================================================================
"# Switch to veto the upload of the BeamSpot conditions to the DB
# when False it performs the upload
noDB = True
if 'noDB=False' in sys.argv:
    noDB=False
"
-------------------------------------------------------------------------
"# Switch to veto the upload of the BeamSpot conditions to the DB
# when False it performs the upload
nODB = True
if 'noDB=True' in sys.argv:
    nODB=False"
-------------------------------------------------------------------------
"# Switch to veto the upload of the BeamSpot conditions to the DB
# when False it performs the upload
noDB = True
if 'noDB=False' in sys.argv:
    noDB=False
"
-------------------------------------------------------------------------
"Recom
PRs: 30448, 30503"
-------------------------------------------------------------------------
=========================================================================
"# If not live or noDB: produce a (local) SQLITE file
if not live or noDB:
"
-------------------------------------------------------------------------
"if not live or noDB:
    process.OnlineDBOutputService.connect = cms.string('sqlite_file:BeamSpotOnlineLegacy.db')
    process.OnlineDBOutputService.preLoadConnectionString = cms.untracked.string('sqlite_file:BeamSpotOnlineLegacy.db')"
-------------------------------------------------------------------------
"# If not live or noDB: produce a (local) SQLITE file
if not live or noDB:
"
-------------------------------------------------------------------------
"Recom
PRs: 30448, 30503"
-------------------------------------------------------------------------
=========================================================================
"# Switch to veto the upload of the BeamSpot conditions to the DB
# when False it performs the upload
noDB = True
if 'noDB=False' in sys.argv:
  noDB=False
"
-------------------------------------------------------------------------
"# Switch to veto the upload of the BeamSpot conditions to the DB
# when False it performs the upload
noDB = False
if 'noDB=True' in sys.argv:
  noDB=True"
-------------------------------------------------------------------------
"# Switch to veto the upload of the BeamSpot conditions to the DB
# when False it performs the upload
noDB = True
if 'noDB=False' in sys.argv:
  noDB=False
"
-------------------------------------------------------------------------
"Recom
PRs: 30448, 30503"
-------------------------------------------------------------------------
=========================================================================
"# If not live or noDB: produce a (local) SQLITE file
if unitTest or noDB:
"
-------------------------------------------------------------------------
"# If not live or noDB: produce a (local) SQLITE file
if unitTest or noDB or True:"
-------------------------------------------------------------------------
"# If not live or noDB: produce a (local) SQLITE file
if unitTest or noDB:
"
-------------------------------------------------------------------------
"Recom
PRs: 30448, 30503"
-------------------------------------------------------------------------
=========================================================================
"options.register('noDB',
                 True, # default value
                 VarParsing.VarParsing.multiplicity.singleton,
                 VarParsing.VarParsing.varType.bool,
                 ""Don't upload the BeamSpot conditions to the DB"")
"
-------------------------------------------------------------------------
"options.register('noDB',
                 False, # default value
                 VarParsing.VarParsing.varType.bool,
                 ""Don't upload the BeamSpot conditions to the DB"")"
-------------------------------------------------------------------------
"options.register('noDB',
                 True, # default value
                 VarParsing.VarParsing.multiplicity.singleton,
                 VarParsing.VarParsing.varType.bool,
                 ""Don't upload the BeamSpot conditions to the DB"")
"
-------------------------------------------------------------------------
"Recom
PRs: 30448, 30503"
-------------------------------------------------------------------------
=========================================================================
"options.register('noDB',
                 True, # default value
                 VarParsing.VarParsing.multiplicity.singleton,
                 VarParsing.VarParsing.varType.bool,
                 ""Don't upload the BeamSpot conditions to the DB"")
"
-------------------------------------------------------------------------
"options.register('noDB',
                  False, # default value
                  VarParsing.VarParsing.varType.int,
                  ""Don't upload the BeamSpot conditions to the DB"")"
-------------------------------------------------------------------------
"options.register('noDB',
                 True, # default value
                 VarParsing.VarParsing.multiplicity.singleton,
                 VarParsing.VarParsing.varType.bool,
                 ""Don't upload the BeamSpot conditions to the DB"")
"
-------------------------------------------------------------------------
"Recom
PRs: 30448, 30503"
-------------------------------------------------------------------------
=========================================================================
"options.register('noDB',
                 True, # default value
                 VarParsing.VarParsing.multiplicity.singleton,
                 VarParsing.VarParsing.varType.bool,
                 ""Don't upload the BeamSpot conditions to the DB"")
"
-------------------------------------------------------------------------
"options.register('noDB',
                  VarParsing.VarParsing.multiplicity.singleton,
                  VarParsing.VarParsing.varType.bool,
                  ""Don't upload the BeamSpot conditions to the DB"")"
-------------------------------------------------------------------------
"options.register('noDB',
                 True, # default value
                 VarParsing.VarParsing.multiplicity.singleton,
                 VarParsing.VarParsing.varType.bool,
                 ""Don't upload the BeamSpot conditions to the DB"")
"
-------------------------------------------------------------------------
"Recom
PRs: 30448, 30503"
-------------------------------------------------------------------------
=========================================================================
"if not options.dryRun:
    schedinfo = subprocess.check_output([""myschedd"",""show""])
    if not 'tzero' in schedinfo:
        print(""\nAll-In-One Tool: you need to call `module load lxbatch/tzero` before trying to submit jobs. Please do so and try again"")
        exit(1)
"
-------------------------------------------------------------------------
"if not options.restrictTo == None:
    schedinfo = subprocess.check_output([""myschedd"",""show""])
    if not 'pool' in schedinfo:
        print(""\nAll-In-One Tool: you need to set up the correct pool via `module load.` before trying to submit jobs. Please do so and try again"")
        exit(1)"
-------------------------------------------------------------------------
"if not options.dryRun:
    schedinfo = subprocess.check_output([""myschedd"",""show""])
    if not 'tzero' in schedinfo:
        print(""\nAll-In-One Tool: you need to call `module load lxbatch/tzero` before trying to submit jobs. Please do so and try again"")
        exit(1)
"
-------------------------------------------------------------------------
"Recom
PRs: 30343, 30497"
-------------------------------------------------------------------------
=========================================================================
"#include ""catch.hpp""
#include ""FWCore/TestProcessor/interface/TestProcessor.h""
#include ""FWCore/Utilities/interface/Exception.h""
#include ""SimDataFormats/GeneratorProducts/interface/LHEEventProduct.h""
static constexpr auto s_tag = ""[ExternalLHEProducer]"";
TEST_CASE(""Standard checks of ExternalLHEProducer"", s_tag) {
  const std::string baseConfig{
      R""_(from FWCore.TestProcessor.TestProcess import *
process = TestProcess()
process.externalLHEProducer = cms.EDProducer('ExternalLHEProducer',
    scriptName = cms.FileInPath(""GeneratorInterface/LHEInterface/test/run_dummy_script.sh""),
    outputFile = cms.string(""dummy.lhe""),
    numberOfParameters = cms.uint32(1),
    args = cms.vstring('value'),
    nEvents = cms.untracked.uint32(5),
    storeXML = cms.untracked.bool(False),
    generateConcurrently = cms.untracked.bool(False)
 )
process.moduleToTest(process.externalLHEProducer)
process.RandomNumberGeneratorService = cms.Service('RandomNumberGeneratorService',
     externalLHEProducer = cms.PSet(
        initialSeed = cms.untracked.uint32(563)
    )
)
)_""};
  edm::test::TestProcessor::Config config{baseConfig};
  SECTION(""base configuration is OK"") { REQUIRE_NOTHROW(edm::test::TestProcessor(config)); }
  SECTION(""All events"") {
    edm::test::TestProcessor tester(config);
    //there are 5 events in the input
    {
      auto event = tester.test();
      auto const& prod = event.get<LHEEventProduct>();
      REQUIRE(prod->hepeup().NUP == 12);
    }
    REQUIRE_NOTHROW(tester.test());
    REQUIRE_NOTHROW(tester.test());
    REQUIRE_NOTHROW(tester.test());
    REQUIRE_NOTHROW(tester.test());
  }
  SECTION(""All events: generateConcurrently"") {
    edm::test::TestProcessor::Config config{baseConfig  ""\nprocess.externalLHEProducer.generateConcurrently = True\n""};
    edm::test::TestProcessor tester(config);
    //there are 5 events in the input
    {
      auto event = tester.test();
      auto const& prod = event.get<LHEEventProduct>();
      REQUIRE(prod->hepeup().NUP == 12);
    }
    REQUIRE_NOTHROW(tester.test());
    REQUIRE_NOTHROW(tester.test());
    REQUIRE_NOTHROW(tester.test());
    REQUIRE_NOTHROW(tester.test());
  }
  SECTION(""Missing events"") {
    edm::test::TestProcessor tester(config);
    //there are 5 events in the input
    REQUIRE_NOTHROW(tester.test());
    REQUIRE_NOTHROW(tester.test());
    REQUIRE_NOTHROW(tester.test());
    REQUIRE_NOTHROW(tester.test());
    REQUIRE_THROWS_AS(tester.testEndRun(), cms::Exception);
  }
  SECTION(""beginJob and endJob only"") {
    edm::test::TestProcessor tester(config);
    REQUIRE_NOTHROW(tester.testBeginAndEndJobOnly());
  }
  SECTION(""Run with no LuminosityBlocks"") {
    edm::test::TestProcessor tester(config);
    REQUIRE_THROWS_AS(tester.testRunWithNoLuminosityBlocks(), cms::Exception);
  }
  SECTION(""LuminosityBlock with no Events"") {
    edm::test::TestProcessor tester(config);
    REQUIRE_THROWS_AS(tester.testLuminosityBlockWithNoEvents(), cms::Exception);
  }
}
//Add additional TEST_CASEs to exercise the modules capabilities
"
-------------------------------------------------------------------------
"#include ""catch.hpp""
#include ""FWCore/TestProcessor/interface/TestProcessor.h""
#include ""FWCore/Utilities/interface/Exception.h""
#include ""SimDataFormats/GeneratorProducts/interface/LHEEventProduct.h""
#include <string>

static constexpr auto s_tag = ""[ExternalLHEProducer]"";

TEST_CASE(""Standard checks of ExternalLHEProducer"", s_tag) {
  const std::string baseConfig{
      R""_(from FWCore.TestProcessor.TestProcess import *
process = TestProcess()
process.externalLHEProducer = cms.EDProducer('ExternalLHEProducer',
    scriptName = cms.FileInPath(""GeneratorInterface/LHEInterface/test/run_dummy_script.sh""),
    outputFile = cms.string(""dummy.lhe""),
    numberOfParameters = cms.uint32(1),
    args = cms.vstring('value'),
    nEvents = cms.untracked.uint32(5),
    storeXML = cms.untracked.bool(False),
    generateConcurrently = cms.untracked.bool(False)
 )
process.moduleToTest(process.externalLHEProducer)
process.RandomNumberGeneratorService = cms.Service('RandomNumberGeneratorService',
     externalLHEProducer = cms.PSet(
        initialSeed = cms.untracked.uint32(563)
    )
)
)_""};

  edm::test::TestProcessor::Config config{baseConfig};

  SECTION(""base configuration is OK"") {
    REQUIRE_NOTHROW(edm::test::TestProcessor(config));
  }

  SECTION(""All events"") {
    edm::test::TestProcessor tester(config);
    //there are 5 events in the input
    {
      auto event = tester.test();
      auto const& prod = event.get<LHEEventProduct>();
      REQUIRE(prod->hepeup().NUP == 12);
    }
    for(int i = 0; i < 5; ++i) {
        REQUIRE_NOTHROW(tester.test());
    }
  }

  SECTION(""All events: generateConcurrently"") {
    edm::test::TestProcessor::Config config{baseConfig + ""\nprocess.externalLHEProducer.generateConcurrently = True\n""};
    edm::test::TestProcessor tester(config);
    //there are 5 events in the input
    {
      auto event = tester.test();
      auto const& prod = event.get<LHEEventProduct>();
      REQUIRE(prod->hepeup().NUP == 12);
    }
    for(int i = 0; i < 5; ++i) {
        REQUIRE_NOTHROW(tester.test());
    }
  }

  SECTION(""Missing events"") {
    edm::test::TestProcessor tester(config);
    //there are 5 events in the input
    for(int i = 0; i < 4; ++i) {
        REQUIRE_NOTHROW(tester.test());
    }
    REQUIRE_THROWS_AS(tester.testEndRun(), cms::Exception);
  }

  SECTION(""beginJob and endJob only"") {
    edm::test::TestProcessor tester(config);
    REQUIRE_NOTHROW(tester.testBeginAndEndJobOnly());
  }

  SECTION(""Run with no LuminosityBlocks"") {
    edm::test::TestProcessor tester(config);
    REQUIRE_THROWS_AS(tester.testRunWithNoLuminosityBlocks(), cms::Exception);
  }

  SECTION(""LuminosityBlock with no Events"") {
    edm::test::TestProcessor tester(config);
    REQUIRE_THROWS_AS(tester.testLuminosityBlockWithNoEvents(), cms::Exception);
  }
}"
-------------------------------------------------------------------------
"#include ""catch.hpp""
#include ""FWCore/TestProcessor/interface/TestProcessor.h""
#include ""FWCore/Utilities/interface/Exception.h""
#include ""SimDataFormats/GeneratorProducts/interface/LHEEventProduct.h""
static constexpr auto s_tag = ""[ExternalLHEProducer]"";
TEST_CASE(""Standard checks of ExternalLHEProducer"", s_tag) {
  const std::string baseConfig{
      R""_(from FWCore.TestProcessor.TestProcess import *
process = TestProcess()
process.externalLHEProducer = cms.EDProducer('ExternalLHEProducer',
    scriptName = cms.FileInPath(""GeneratorInterface/LHEInterface/test/run_dummy_script.sh""),
    outputFile = cms.string(""dummy.lhe""),
    numberOfParameters = cms.uint32(1),
    args = cms.vstring('value'),
    nEvents = cms.untracked.uint32(5),
    storeXML = cms.untracked.bool(False),
    generateConcurrently = cms.untracked.bool(False)
 )
process.moduleToTest(process.externalLHEProducer)
process.RandomNumberGeneratorService = cms.Service('RandomNumberGeneratorService',
     externalLHEProducer = cms.PSet(
        initialSeed = cms.untracked.uint32(563)
    )
)
)_""};
  edm::test::TestProcessor::Config config{baseConfig};
  SECTION(""base configuration is OK"") { REQUIRE_NOTHROW(edm::test::TestProcessor(config)); }
  SECTION(""All events"") {
    edm::test::TestProcessor tester(config);
    //there are 5 events in the input
    {
      auto event = tester.test();
      auto const& prod = event.get<LHEEventProduct>();
      REQUIRE(prod->hepeup().NUP == 12);
    }
    REQUIRE_NOTHROW(tester.test());
    REQUIRE_NOTHROW(tester.test());
    REQUIRE_NOTHROW(tester.test());
    REQUIRE_NOTHROW(tester.test());
  }
  SECTION(""All events: generateConcurrently"") {
    edm::test::TestProcessor::Config config{baseConfig  ""\nprocess.externalLHEProducer.generateConcurrently = True\n""};
    edm::test::TestProcessor tester(config);
    //there are 5 events in the input
    {
      auto event = tester.test();
      auto const& prod = event.get<LHEEventProduct>();
      REQUIRE(prod->hepeup().NUP == 12);
    }
    REQUIRE_NOTHROW(tester.test());
    REQUIRE_NOTHROW(tester.test());
    REQUIRE_NOTHROW(tester.test());
    REQUIRE_NOTHROW(tester.test());
  }
  /* test not backported to 10_6_X
  SECTION(""Missing events"") {
    edm::test::TestProcessor tester(config);
    //there are 5 events in the input
    REQUIRE_NOTHROW(tester.test());
    REQUIRE_NOTHROW(tester.test());
    REQUIRE_NOTHROW(tester.test());
    REQUIRE_NOTHROW(tester.test());
    REQUIRE_THROWS_AS(tester.testEndRun(), cms::Exception);
  }*/
  SECTION(""beginJob and endJob only"") {
    edm::test::TestProcessor tester(config);
    REQUIRE_NOTHROW(tester.testBeginAndEndJobOnly());
  }
  SECTION(""Run with no LuminosityBlocks"") {
    edm::test::TestProcessor tester(config);
    REQUIRE_THROWS_AS(tester.testRunWithNoLuminosityBlocks(), cms::Exception);
  }
  SECTION(""LuminosityBlock with no Events"") {
    edm::test::TestProcessor tester(config);
    REQUIRE_THROWS_AS(tester.testLuminosityBlockWithNoEvents(), cms::Exception);
  }
}
//Add additional TEST_CASEs to exercise the modules capabilities
"
-------------------------------------------------------------------------
"Recom
PRs: 28899, 30481"
-------------------------------------------------------------------------
=========================================================================
"#define CATCH_CONFIG_MAIN
#include ""catch.hpp""
"
-------------------------------------------------------------------------
"Add the required dependency like this:

```
#define CATCH_CONFIG_MAIN
#include ""catch2/catch.hpp""
```"
-------------------------------------------------------------------------
"#define CATCH_CONFIG_MAIN
#include ""catch.hpp""
"
-------------------------------------------------------------------------
"Recom
PRs: 28899, 30481"
-------------------------------------------------------------------------
=========================================================================
"def __getstate__(self): return self.__dict__
def __setstate__(self, d): self.__dict__.update(d)
"
-------------------------------------------------------------------------
"def __getstate__(self):
        return self.__dict__
    
    def __setstate__(self, state):
        self.__dict__.update(state)"
-------------------------------------------------------------------------
"def __getstate__(self): return self.__dict__
def __setstate__(self, d): self.__dict__.update(d)
"
-------------------------------------------------------------------------
"Recom
PRs: 30346, 30347"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v2',
'phase1_2021_realistic_hi' :  '112X_mcRun3_2021_realistic_HI_v2',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v2', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"autoCond = {
    # GlobalTag for MC production (cosmics) with realistic conditions for full Phase1 2018 detector,  Strip tracker in PEAK mode
    'phase1_2018_cosmics_peak' :   '110X_upgrade2018cosmics_realistic_peak_v7',
    # GlobalTag for MC production with perfectly aligned and calibrated detector for Phase1 2021
    'phase1_2021_design'       : '112X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
    'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
    'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v2',
    'phase1_2021_realistic_hi' :  '112X_mcRun3_2021_realistic_HI_v2',
    # GlobalTag for MC production with realistic conditions for Phase1 2023
    'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v2',
    # GlobalTag for MC production with realistic conditions for Phase1 2024
    'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v2',
    # GlobalTag for MC production (cosmics) with realistic conditions for Phase1 2021,  Strip tracker in DECO mode
    # GlobalTag for MC production with realistic conditions for Phase1 2021 detector for Heavy Ion
    # GlobalTag for MC production with realistic conditions for Phase1 2023
    # GlobalTag for MC production with realistic conditions for Phase1 2024
    # GlobalTag for MC production with realistic conditions for Phase2
    'phase2_realistic'         : '110X_mcRun4_realistic_v3'
}"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '110X_mcRun3_2021_design_v8', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '110X_mcRun3_2021_realistic_v10', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '110X_mcRun3_2021cosmics_realistic_deco_v7',
'phase1_2023_realistic'    : '110X_mcRun3_2023_realistic_v10', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '110X_mcRun3_2024_realistic_v10', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"Recom
PRs: 30221, 30300"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2017_design'       :  '111X_mc2017_design_v2',
'phase1_2017_realistic'    :  '111X_mc2017_realistic_v2',
'phase1_2017_cosmics'      :  '111X_mc2017cosmics_realistic_deco_v1',
'phase1_2017_cosmics_peak' :  '111X_mc2017cosmics_realistic_peak_v1',
'phase1_2018_design'       :  '111X_upgrade2018_design_v1',
'phase1_2018_realistic'    :  '111X_upgrade2018_realistic_v1',
'phase1_2018_realistic_HEfail' :  '111X_upgrade2018_realistic_HEfail_v1',
'phase1_2018_cosmics'      :   '111X_upgrade2018cosmics_realistic_deco_v1',
'phase1_2018_cosmics_peak' :   '111X_upgrade2018cosmics_realistic_peak_v1',
"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '111X_mc2017_design_v2',  # GT containing design conditions for Phase1 2017
'phase1_2017_realistic'    :  '111X_mc2017_realistic_v2', # GT containing realistic conditions for Phase1 2017
'phase1_2017_cosmics'      :  '111X_mc2017cosmics_realistic_deco_v1', # GT for MC production (cosmics) with realistic alignment and calibrations for Phase1 2017 detector, Strip tracker in DECO mode
'phase1_2017_cosmics_peak' :  '111X_mc2017cosmics_realistic_peak_v1', # GT for MC production (cosmics) with realistic alignment and calibrations for Phase1 2017 detector, Strip tracker in PEAK mode
'phase1_2018_design'       :  '111X_upgrade2018_design_v1', # GT containing design conditions for Phase1 2018
'phase1_2018_realistic'    :  '111X_upgrade2018_realistic_v1', # GT for MC production with realistic conditions for Phase1 2018 detector
'phase1_2018_realistic_HEfail' :  '111X_upgrade2018_realistic_HEfail_v1', # Corrected GT with realistic HEfail GT for Phase1 2018 detector
'phase1_2018_cosmics'      :   '111X_upgrade2018cosmics_realistic_deco_v1', # GT for MC production (cosmics) with realistic conditions for Phase1 2018 detector, Strip tracker in DECO mode
'phase1_2018_cosmics_peak' :   '111X_upgrade2018cosmics_realistic_peak_v1' # GT for MC production (cosmics) with realistic conditions for Phase1 2018 detector, Strip tracker in PEAK mode"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '111X_mc2017_design_v2',
'phase1_2017_realistic'    :  '111X_mc2017_realistic_v2',
'phase1_2017_cosmics'      :  '111X_mc2017cosmics_realistic_deco_v1',
'phase1_2017_cosmics_peak' :  '111X_mc2017cosmics_realistic_peak_v1',
'phase1_2018_design'       :  '111X_upgrade2018_design_v1',
'phase1_2018_realistic'    :  '111X_upgrade2018_realistic_v1',
'phase1_2018_realistic_HEfail' :  '111X_upgrade2018_realistic_HEfail_v1',
'phase1_2018_cosmics'      :   '111X_upgrade2018cosmics_realistic_deco_v1',
'phase1_2018_cosmics_peak' :   '111X_upgrade2018cosmics_realistic_peak_v1',
"
-------------------------------------------------------------------------
"Recom
PRs: 30286, 30299"
-------------------------------------------------------------------------
=========================================================================
"'run2_mc_pre_vfp'   :   '111X_mcRun2_asymptotic_preVFP_v1',
'run2_mc'           :   '111X_mcRun2_asymptotic_v1',
'run2_mc_cosmics'   :   '111X_mcRun2cosmics_startup_deco_v1',
"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '110X_mcRun2_asymptotic_preVFP_v8',
'run2_mc'           :   '110X_mcRun2_asymptotic_v13',
'run2_mc_cosmics'   :   '110X_mcRun2cosmics_startup_deco_v7',"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '106X_mcRun2_asymptotic_preVFP_v8',
'run2_mc'           :   '106X_mcRun2_asymptotic_v13',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_startup_deco_v7',
"
-------------------------------------------------------------------------
"Recom
PRs: 30151, 30287"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v2',
'phase1_2021_realistic_hi' :  '112X_mcRun3_2021_realistic_HI_v2',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v2', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v2', # GT for MC production with realistic conditions for Phase1 2021, Strip tracker in DECO mode
'phase1_2021_realistic_hi' :  '112X_mcRun3_2021_realistic_HI_v2', # GT for MC production with realistic conditions for Phase1 2021 detector for Heavy Ion
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v2', # GT containing realistic conditions for Phase1 2024"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '111X_mcRun3_2021_design_v6', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '111X_mcRun3_2021_realistic_v6', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '111X_mcRun3_2021cosmics_realistic_deco_v6',
'phase1_2021_realistic_hi' : '111X_mcRun3_2021_realistic_HI_v7',
'phase1_2023_realistic'    : '111X_mcRun3_2023_realistic_v6', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '111X_mcRun3_2024_realistic_v6', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"Recom
PRs: 30221, 30267"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v1', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v1', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v1',
'phase1_2021_realistic_hi' :  '112X_mcRun3_2021_realistic_HI_v1',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v1', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v1', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '111X_mcRun3_2021_design_v4', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '111X_mcRun3_2021_realistic_v4', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '111X_mcRun3_2021cosmics_realistic_deco_v4',
'phase1_2021_realistic_hi' :  '111X_mcRun3_2021_realistic_HI_v5',
'phase1_2023_realistic'    : '111X_mcRun3_2023_realistic_v4', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '111X_mcRun3_2024_realistic_v4', # GT containing realistic conditions for Phase1 2024"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '111X_mcRun3_2021_design_v5', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '111X_mcRun3_2021_realistic_v5', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '111X_mcRun3_2021cosmics_realistic_deco_v5',
'phase1_2021_realistic_hi' :  '111X_mcRun3_2021_realistic_HI_v6',
'phase1_2023_realistic'    : '111X_mcRun3_2023_realistic_v5', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '111X_mcRun3_2024_realistic_v5', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"Recom
PRs: 30195, 30233"
-------------------------------------------------------------------------
=========================================================================
"'run2_mc_pre_vfp'   :   '111X_mcRun2_asymptotic_preVFP_v1',
'run2_mc'           :   '111X_mcRun2_asymptotic_v1',
'run2_mc_cosmics'   :   '111X_mcRun2cosmics_startup_deco_v1',
"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '111X_mcRun2_asymptotic_preVFP_v1',
'run2_mc'           :   '111X_mcRun2_asymptotic_v1',
'run2_mc_cosmics'   :   '111X_mcRun2cosmics_startup_deco_v1',"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '110X_mcRun2_asymptotic_preVFP_v7',
'run2_mc'           :   '110X_mcRun2_asymptotic_v9',
'run2_mc_cosmics'   :   '110X_mcRun2cosmics_startup_deco_v8',
"
-------------------------------------------------------------------------
"Recom
PRs: 30151, 30203"
-------------------------------------------------------------------------
=========================================================================
"'run2_mc_pre_vfp'   :   '111X_mcRun2_asymptotic_preVFP_v1',
'run2_mc'           :   '111X_mcRun2_asymptotic_v1',
'run2_mc_cosmics'   :   '111X_mcRun2cosmics_startup_deco_v1',
"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '111X_mcRun2_asymptotic_preVFP_v1',
'run2_mc'           :   '111X_mcRun2_asymptotic_v1',
'run2_mc_cosmics'   :   '111X_mcRun2cosmics_startup_deco_v1',
'run2_mc_hi'        :   '110X_mcRun2_HeavyIon_v2',"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '111X_mcRun2_asymptotic_preVFP_v1',
'run2_mc'           :   '111X_mcRun2_asymptotic_v1',
'run2_mc_cosmics'   :   '111X_mcRun2cosmics_startup_deco_v1',
"
-------------------------------------------------------------------------
"Recom
PRs: 30151, 30190"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v3',
'run2_data'         :   '111X_dataRun2_v3',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v3',
'run2_data_relval'  :   '111X_dataRun2_relval_v3',
"
-------------------------------------------------------------------------
"'run1_data'         :   '111X_dataRun2_v4',
'run2_data'         :   '111X_dataRun2_v4',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v4',
'run2_data_relval'  :   '111X_dataRun2_relval_v4',"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v28',
'run2_data'         :   '106X_dataRun2_v28',
'run2_data_relval'  :   '106X_dataRun2_relval_v26',
"
-------------------------------------------------------------------------
"Recom
PRs: 29629, 30132"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v3',
'run2_data'         :   '111X_dataRun2_v3',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v3',
'run2_data_relval'  :   '111X_dataRun2_relval_v3',
"
-------------------------------------------------------------------------
"'run1_data'                 :   '110X_dataRun2_v13',
'run2_data'                 :   '110X_dataRun2_v13',
'run2_data_HEfail'          :   '110X_dataRun2_HEfail_v13',
'run2_data_relval'          :   '110X_dataRun2_relval_v13',"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v13',
'run2_data'         :   '110X_dataRun2_v13',
'run2_data_relval'  :   '110X_dataRun2_relval_v13',
"
-------------------------------------------------------------------------
"Recom
PRs: 29629, 30131"
-------------------------------------------------------------------------
=========================================================================
"# /frozen/2018/111X/HLT/V13 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/frozen/2018/111X/HLT/V13')
"
-------------------------------------------------------------------------
+ lAWidthFPix = cms.double(0.0)
-------------------------------------------------------------------------
"# /frozen/2018/111X/HLT/V13 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/frozen/2018/111X/HLT/V13')
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='EdgeClusterErrorY', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=85.0)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"fragment.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"- Assign(targets=[Attribute(value=Name(id='process', ctx=Load()), attr='hltPSetMap', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='EDProducer', ctx=Load()), args=[Constant(value='ParameterSetBlobProducer')], keywords=[]))"
-------------------------------------------------------------------------
"fragment.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" )"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"src = cms.InputTag( ""hltParticleFlow"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"src = cms.InputTag( ""dummy_default"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( ""dummy_default"" ),
globalThreshold = cms.double( 0.0 )"
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlow"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"```python
TrackTimesLabel = cms.InputTag(""dummy_default"")
TrackTimeResosLabel = cms.InputTag(""dummy_default"")
```"
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( ""dummy_default"" ),
globalThreshold = cms.double( 0.0 )"
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"fragment.HLTriggerFirstPath = cms.Path( fragment.hltGetConditions  fragment.hltGetRaw  fragment.hltPSetMap  fragment.hltBoolFalse )
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='HLTriggerFirstPath', ctx=Store())], value=Call(func=Attribute(value=cms, attr='Path', ctx=Load()), args=[Name(id='fragment.hltGetConditions', ctx=Load()), Name(id='fragment.hltGetRaw', ctx=Load()), Name(id='fragment.hltPSetMap', ctx=Load()), Name(id='fragment.hltBoolFalse', ctx=Load())], keywords=[]))"
-------------------------------------------------------------------------
"fragment.HLTriggerFirstPath = cms.Path( fragment.hltGetConditions  fragment.hltGetRaw  fragment.hltPSetMap  fragment.hltBoolFalse )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/HLT/V20 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/HLT/V20')
"
-------------------------------------------------------------------------
"- TrackTimeResosLabel = cms.InputTag('dummy_default')
+ TrackTimeResosLabel = cms.InputTag('dummy_default')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/HLT/V20 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/HLT/V20')
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='lAWidthFPix', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=0.0)], keywords=[])], ctx=Load()))
+ Assign(targets=[Name(id='NoTemplateErrorsWhenNoTrkAngles', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
+ Assign(targets=[Name(id='EdgeClusterErrorY', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=85.0)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"fragment.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"+ fragment.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )"
-------------------------------------------------------------------------
"fragment.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"src = cms.InputTag( ""hltParticleFlow"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
lAWidthFPix = cms.double( 0.0 )
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlow"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ TrackTimesLabel = cms.InputTag( ""dummy_default"" )
- TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ) "
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag(""dummy_default""),
parameters = cms.PSet(),
applyWeight = cms.bool(False),
srcWeights = cms.InputTag(""""),
globalThreshold = cms.double(0.0)"
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag(""dummy_default"")
TrackTimeResosLabel = cms.InputTag(""dummy_default"")"
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- TrackTimeResosLabel = cms.InputTag( ""dummy_default"" )"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load())) "
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"fragment.HLTriggerFirstPath = cms.Path( fragment.hltGetConditions  fragment.hltGetRaw  fragment.hltPSetMap  fragment.hltBoolFalse )
"
-------------------------------------------------------------------------
+ fragment.HLTriggerFirstPath = cms.Path( customiseGlobalTag  modifyHLTforEras  fragment.EDProducer  SwitchProducerCUDA.customizeHLTforAll )
-------------------------------------------------------------------------
"fragment.HLTriggerFirstPath = cms.Path( fragment.hltGetConditions  fragment.hltGetRaw  fragment.hltPSetMap  fragment.hltBoolFalse )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/Fake1/V7 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake1/V7')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/Fake1/V7 (CMSSW_11_1_0_pre8_HLT1)
lAWidthFPix = cms.double(0.0)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/Fake1/V7 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake1/V7')
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/Fake2/V7 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake2/V7')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/PRef/V10
lAWidthFPix = cms.double(0.0)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/Fake2/V7 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake2/V7')
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/Fake/V7 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake/V7')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/Fake/V7 (CMSSW_11_1_0_pre8_HLT1)
lAWidthFPix = cms.double(0.0)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/Fake/V7 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake/V7')
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/GRun/V10 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/GRun/V10')
"
-------------------------------------------------------------------------
"# hltGetConfiguration --cff --data /dev/CMSSW_11_1_0/GRun --type GRun

import FWCore.ParameterSet.Config as cms

fragment = cms.ProcessFragment( ""HLT"" )

fragment.HLTConfigVersion = cms.PSet(
)

fragment.transferSystem = cms.PSet( 
    tableName = cms.string('/dev/CMSSW_11_1_0/GRun/V10')
)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/GRun/V10 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/GRun/V10')
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='lAWidthFPix', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=0.0)], keywords=[])], ctx=Load()))
+ Assign(targets=[Name(id='NoTemplateErrorsWhenNoTrkAngles', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[NameConstant(value=False)], keywords=[])], ctx=Load()))
+ Assign(targets=[Name(id='EdgeClusterErrorY', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=85.0)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"fragment.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"Assign(targets=[Attribute(value=Name(id='process', ctx=Load()), attr='hltPSetMap', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='EDProducer', ctx=Load()), args=[Constant(value='ParameterSetBlobProducer')], keywords=[]))"
-------------------------------------------------------------------------
"fragment.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"src = cms.InputTag( ""hltParticleFlow"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"src = cms.InputTag( ""dummy_default"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )"
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlow"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ TrackTimesLabel = cms.InputTag( ""dummy_default"" )"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"src = cms.InputTag( ""lAWidthFPix"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )"
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 ),
lAWidthFPix = cms.double( 0.0 )"
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"fragment.HLTriggerFirstPath = cms.Path( fragment.hltGetConditions  fragment.hltGetRaw  fragment.hltPSetMap  fragment.hltBoolFalse )
"
-------------------------------------------------------------------------
+ fragment.HLTriggerFirstPath = cms.Path( fragment.hltGetConditions + fragment.hltGetRaw + fragment.hltPSetMap + fragment.hltBoolFalse )
-------------------------------------------------------------------------
"fragment.HLTriggerFirstPath = cms.Path( fragment.hltGetConditions  fragment.hltGetRaw  fragment.hltPSetMap  fragment.hltBoolFalse )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/HIon/V10 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/HIon/V10')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/HIon
lAWidthFPix = cms.double(0.0)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/HIon/V10 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/HIon/V10')
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='lAWidthFPix', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=0.0)], keywords=[])], ctx=Load()))  
+ Assign(targets=[Name(id='NoTemplateErrorsWhenNoTrkAngles', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
+ Assign(targets=[Name(id='EdgeClusterErrorY', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=85.0)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"fragment.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"- Assign(targets=[Attribute(value=Name(id='process', ctx=Load()), attr='hltPSetMap', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='EDProducer', ctx=Load()), args=[Constant(value='ParameterSetBlobProducer')], keywords=[]))"
-------------------------------------------------------------------------
"fragment.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ TrackTimesLabel = cms.InputTag( ""dummy_default"" )
- TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
+ TrackTimeResosLabel = cms.InputTag( ""dummy_default"" )"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- TrackTimesLabel = cms.InputTag(""dummy_default"")
?                                   ++"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))
"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"fragment.HLTriggerFirstPath = cms.Path( fragment.hltGetConditions  fragment.hltGetRaw  fragment.hltPSetMap  fragment.hltBoolFalse )
"
-------------------------------------------------------------------------
+ fragment.HLTriggerFirstPath = cms.Path( fragment.hltGetConditions + fragment.hltGetRaw + fragment.hltPSetMap + fragment.hltBoolFalse )
-------------------------------------------------------------------------
"fragment.HLTriggerFirstPath = cms.Path( fragment.hltGetConditions  fragment.hltGetRaw  fragment.hltPSetMap  fragment.hltBoolFalse )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/PIon/V10 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/PIon/V10')
"
-------------------------------------------------------------------------
"+ TrackTimesLabel = cms.InputTag('dummy_default')
- TrackTimesLabel = cms.InputTag('dummy_default')
+ TrackTimeResosLabel = cms.InputTag('dummy_default')
?                                 ++++"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/PIon/V10 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/PIon/V10')
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='lAWidthFPix', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=0.0)], keywords=[])], ctx=Load()))
+ Assign(targets=[Name(id='NoTemplateErrorsWhenNoTrkAngles', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
+ Assign(targets=[Name(id='EdgeClusterErrorY', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=85.0)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"fragment.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"+ fragment.process.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )"
-------------------------------------------------------------------------
"fragment.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"fragment.HLTriggerFirstPath = cms.Path( fragment.hltGetConditions  fragment.hltGetRaw  fragment.hltPSetMap  fragment.hltBoolFalse )
"
-------------------------------------------------------------------------
"```
fragment.HLTriggerFirstPath = cms.Path( fragment.hltGetConditions + fragment.hltGetRaw + fragment.process.hltPSetMap + fragment.hltBoolFalse ) 
```"
-------------------------------------------------------------------------
"fragment.HLTriggerFirstPath = cms.Path( fragment.hltGetConditions  fragment.hltGetRaw  fragment.hltPSetMap  fragment.hltBoolFalse )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/PRef/V10 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/PRef/V10')
"
-------------------------------------------------------------------------
"# Adapted code based on the given information
lAWidthFPix = cms.double(0.0)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/PRef/V10 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/PRef/V10')
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='lAWidthFPix', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=0.0)], keywords=[])], ctx=Load()))
- Assign(targets=[Name(id='NoTemplateErrorsWhenNoTrkAngles', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
- Assign(targets=[Name(id='EdgeClusterErrorY', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=85.0)], keywords=[])], ctx=Load())"
-------------------------------------------------------------------------
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"fragment.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"- Assign(targets=[Attribute(value=Name(id='process', ctx=Load()), attr='hltPSetMap', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='ParameterSetBlobProducer', ctx=Load()), args=[], keywords=[]))"
-------------------------------------------------------------------------
"fragment.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"fragment.HLTriggerFirstPath = cms.Path( fragment.hltGetConditions  fragment.hltGetRaw  fragment.hltPSetMap  fragment.hltBoolFalse )
"
-------------------------------------------------------------------------
"```python
fragment.HLTriggerFirstPath = cms.Path( fragment.hltGetConditions + fragment.hltGetRaw + cms.EDProducer('ParameterSetBlobProducer') )
```"
-------------------------------------------------------------------------
"fragment.HLTriggerFirstPath = cms.Path( fragment.hltGetConditions  fragment.hltGetRaw  fragment.hltPSetMap  fragment.hltBoolFalse )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"# /frozen/2018/111X/HLT/V13 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/frozen/2018/111X/HLT/V13')
"
-------------------------------------------------------------------------
+ lAWidthFPix = cms.double(0.0)
-------------------------------------------------------------------------
"# /frozen/2018/111X/HLT/V13 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/frozen/2018/111X/HLT/V13')
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='lAWidthFPix', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=0.0)], keywords=[])], ctx=Load()))
+ Assign(targets=[Name(id='NoTemplateErrorsWhenNoTrkAngles', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
+ Assign(targets=[Name(id='EdgeClusterErrorY', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=85.0)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"process.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"- Assign(targets=[Attribute(value=Name(id='process', ctx=Load()), attr='hltPSetMap', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='EDProducer', ctx=Load()), args=[Constant(value='ParameterSetBlobProducer')], keywords=[]))"
-------------------------------------------------------------------------
"process.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"src = cms.InputTag( ""hltParticleFlow"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlow"" ),
parameters = cms.PSet(),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag(""dummy_default""),
globalThreshold = cms.double(0.0)
"
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlow"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
TrackTimesLabel = cms.InputTag('dummy_default')
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='PFNoMuon_src', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='hltParticleFlowNoMu')], keywords=[])], ctx=Load()))
+ Assign(targets=[Name(id='PFNoMuon_parameters', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='PSet', ctx=Load()), args=[], keywords=[])], ctx=Load())
+ Assign(targets=[Name(id='PFNoMuon_applyWeight', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])
+ Assign(targets=[Name(id='PFNoMuon_srcWeights', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='')], keywords=[])
+ Assign(targets=[Name(id='PFNoMuon_globalThreshold', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=0.0)], keywords=[])"
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"process.HLTriggerFirstPath = cms.Path( process.hltGetConditions  process.hltGetRaw  process.hltPSetMap  process.hltBoolFalse )
"
-------------------------------------------------------------------------
+ process.HLTriggerFirstPath = cms.Path( process.hltGetConditions + process.hltGetRaw + process.hltPSetMap + process.hltBoolFalse )
-------------------------------------------------------------------------
"process.HLTriggerFirstPath = cms.Path( process.hltGetConditions  process.hltGetRaw  process.hltPSetMap  process.hltBoolFalse )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/HLT/V20 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/HLT/V20')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/PRef/V10
lAWidthFPix = cms.double(0.0)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/HLT/V20 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/HLT/V20')
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='lAWidthFPix', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=0.0)], keywords=[])], ctx=Load())),
+ Assign(targets=[Name(id='NoTemplateErrorsWhenNoTrkAngles', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load())),
+ Assign(targets=[Name(id='EdgeClusterErrorY', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=85.0)], keywords=[])], ctx=Load())),"
-------------------------------------------------------------------------
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"process.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"- Assign(targets=[Attribute(value=Name(id='process', ctx=Load()), attr='hltPSetMap', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='EDProducer', ctx=Load()), args=[Constant(value='ParameterSetBlobProducer')], keywords=[]))"
-------------------------------------------------------------------------
"process.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"src = cms.InputTag( ""hltParticleFlow"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"```python
TrackTimesLabel = cms.InputTag('dummy_default'),
TrackTimeResosLabel = cms.InputTag('dummy_default')
```"
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlow"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
lAWidthFPix = cms.double(0.0)
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"```python
    src = cms.InputTag( ""dummy_default"" ),
    parameters = cms.PSet(  ),
    applyWeight = cms.bool( False ),
    srcWeights = cms.InputTag( """" ),
    globalThreshold = cms.double( 0.0 )
```"
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
TrackTimesLabel = cms.InputTag('dummy_default')
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='currentTime', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
+ TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
?                                   +++"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"TrackTimeLabel = cms.InputTag(""dummy_default"")"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"TrackTimesLabel = (cms.InputTag(""dummy_default""),)"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Attribute(value=Name(id='process', ctx=Load()), attr='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"```python
TrackTimesLabel = cms.InputTag( cms.InputTag( ""dummy_default"" ) )
```"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[(None, NameConstant(value=None))])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"process.HLTriggerFirstPath = cms.Path( process.hltGetConditions  process.hltGetRaw  process.hltPSetMap  process.hltBoolFalse )
"
-------------------------------------------------------------------------
"```python
TrackTimesLabel = cms.InputTag('dummy_default')
```"
-------------------------------------------------------------------------
"process.HLTriggerFirstPath = cms.Path( process.hltGetConditions  process.hltGetRaw  process.hltPSetMap  process.hltBoolFalse )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/Fake/V7 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake/V7')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/PRef/V10
lAWidthFPix = cms.double(0.0)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/Fake/V7 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake/V7')
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/Fake1/V7 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake1/V7')
"
-------------------------------------------------------------------------
"- TrackTimesLabel = cms.InputTag('dummy_default')
+ TrackTimesLabel = cms.InputTag('dummy_default')

- tableName = cms.string('/dev/CMSSW_11_1_0/PRef/V10')
+ lAWidthFPix = cms.double(0.0)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/Fake1/V7 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake1/V7')
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/Fake2/V7 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake2/V7')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/PRef/V10 (CMSSW_11_1_0_pre8_HLT1)
lAWidthFPix = cms.double(0.0)
TrackTimesLabel = cms.InputTag('dummy_default')
TrackTimeResosLabel = cms.InputTag('dummy_default')"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/Fake2/V7 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/Fake2/V7')
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/GRun/V10 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/GRun/V10')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/PRef/V10
lAWidthFPix = cms.double(0.0)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/GRun/V10 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/GRun/V10')
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='lAWidthFPix', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=0.0)], keywords=[])], ctx=Load()))
+ Assign(targets=[Name(id='NoTemplateErrorsWhenNoTrkAngles', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
+ Assign(targets=[Name(id='EdgeClusterErrorY', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=85.0)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"process.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"+ process.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"",
+                                        logFile = cms.string( '/path/to/logfile' )
+                                    )"
-------------------------------------------------------------------------
"process.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"src = cms.InputTag( ""hltParticleFlow"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
lAWidthFPix = cms.double(0.0)
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlow"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- TrackTimesLabel = cms.InputTag( ""dummy_default"" ),"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"src = cms.InputTag(""TrackTimesLabel""),
parameters = cms.PSet(),
applyWeight = cms.bool(False),
srcWeights = cms.InputTag(""TrackTimeResosLabel""),
globalThreshold = cms.double(0.0)"
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeights = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )"
-------------------------------------------------------------------------
"src = cms.InputTag( ""hltParticleFlowNoMu"" ),
parameters = cms.PSet(  ),
applyWeight = cms.bool( False ),
srcWeights = cms.InputTag( """" ),
globalThreshold = cms.double( 0.0 )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"process.HLTriggerFirstPath = cms.Path( process.hltGetConditions  process.hltGetRaw  process.hltPSetMap  process.hltBoolFalse )
"
-------------------------------------------------------------------------
+ process.HLTriggerFirstPath = cms.Path( process.hltGetConditions + process.hltGetRaw + process.hltPSetMap + cms.bool(False) )
-------------------------------------------------------------------------
"process.HLTriggerFirstPath = cms.Path( process.hltGetConditions  process.hltGetRaw  process.hltPSetMap  process.hltBoolFalse )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/HIon/V10 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/HIon/V10')
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='tableName', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='/dev/CMSSW_11_1_0/HIon/V10')], keywords=[]))"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/HIon/V10 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/HIon/V10')
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='EdgeClusterErrorY', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=85.0)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"process.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"+ process.hltPSetMap = cms.EDProducer(""ParameterSetBlobProducer"")"
-------------------------------------------------------------------------
"process.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"TrackTimesLabel = (cms.InputTag( ""dummy_default"" ),)"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='TrackTimesResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])],ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))  "
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"process.HLTriggerFirstPath = cms.Path( process.hltGetConditions  process.hltGetRaw  process.hltPSetMap  process.hltBoolFalse )
"
-------------------------------------------------------------------------
+ process.HLTriggerPPRefFirstPath = cms.Path( process.hltGetConditions  process.hltGetRaw  process.hltPSetMap  process.hltBoolFalse )
-------------------------------------------------------------------------
"process.HLTriggerFirstPath = cms.Path( process.hltGetConditions  process.hltGetRaw  process.hltPSetMap  process.hltBoolFalse )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/PIon/V10 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/PIon/V10')
"
-------------------------------------------------------------------------
"# tableName
  lAWidthFPix = cms.double(0.0)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/PIon/V10 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/PIon/V10')
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='lAWidthFPix', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=0.0)], keywords=[])], ctx=Load()))
- Assign(targets=[Name(id='NoTemplateErrorsWhenNoTrkAngles', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
- Assign(targets=[Name(id='EdgeClusterErrorY', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=85.0)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"process.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"Assign(targets=[Attribute(value=Name(id='process', ctx=Load()), attr='hltPSetMap', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='EDProducer', ctx=Load()), args=[Constant(value='ParameterSetBlobProducer')], keywords=[]))"
-------------------------------------------------------------------------
"process.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"process.HLTriggerFirstPath = cms.Path( process.hltGetConditions  process.hltGetRaw  process.hltPSetMap  process.hltBoolFalse )
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='HLTriggerFirstPath', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Path', ctx=Load()), args=[Attribute(value=Name(id='process', ctx=Load()), attr='hltGetConditions', ctx=Load()), Attribute(value=Name(id='process', ctx=Load()), attr='hltGetRaw', ctx=Load()), Attribute(value=Name(id='process', ctx=Load()), attr='hltPSetMap', ctx=Load()), Attribute(value=Name(id='process', ctx=Load()), attr='hltBoolFalse', ctx=Load())], keywords=[]))"
-------------------------------------------------------------------------
"process.HLTriggerFirstPath = cms.Path( process.hltGetConditions  process.hltGetRaw  process.hltPSetMap  process.hltBoolFalse )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_1_0/PRef/V10 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/PRef/V10')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/PRef/V10 (CMSSW_11_1_0_pre8_HLT1)
lAWidthFPix = cms.double(0.0)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_1_0/PRef/V10 (CMSSW_11_1_0_pre8_HLT1)
  tableName = cms.string('/dev/CMSSW_11_1_0/PRef/V10')
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='lAWidthFPix', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=0.0)], keywords=[])], ctx=Load()))
- Assign(targets=[Name(id='lAWidthFPix', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=0.0)], keywords=[])], ctx=Load()))
+ Assign(targets=[Name(id='NoTemplateErrorsWhenNoTrkAngles', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
- Assign(targets=[Name(id='NoTemplateErrorsWhenNoTrkAngles', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
+ Assign(targets=[Name(id='EdgeClusterErrorY', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=85.0)], keywords=[])], ctx=Load()))
?                                                                                                                                                                            +++++"
-------------------------------------------------------------------------
"lAWidthFPix = cms.double( 0.0 ),
NoTemplateErrorsWhenNoTrkAngles = cms.bool( False ),
EdgeClusterErrorY = cms.double( 85.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"process.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"+ process.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )"
-------------------------------------------------------------------------
"process.hltPSetMap = cms.EDProducer( ""ParameterSetBlobProducer"" )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimesLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimesLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='TrackTimeResosLabel', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='dummy_default')], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"TrackTimeResosLabel = cms.InputTag( ""dummy_default"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"process.HLTriggerFirstPath = cms.Path( process.hltGetConditions  process.hltGetRaw  process.hltPSetMap  process.hltBoolFalse )
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='HLTriggerFirstPath', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Path', ctx=Load()), args=[Call(func=Attribute(value=Name(id='process', ctx=Load()), attr='hltGetConditions', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='process', ctx=Load()), attr='hltGetRaw', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='process', ctx=Load()), attr='hltPSetMap', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='process', ctx=Load()), attr='hltBoolFalse', ctx=Load()), args=[], keywords=[])])
"
-------------------------------------------------------------------------
"process.HLTriggerFirstPath = cms.Path( process.hltGetConditions  process.hltGetRaw  process.hltPSetMap  process.hltBoolFalse )
"
-------------------------------------------------------------------------
"Recom
PRs: 30055, 30056"
-------------------------------------------------------------------------
=========================================================================
"def UpdatePuppiTuneV14(process, runOnMC=True):
"
-------------------------------------------------------------------------
"def UpdatePuppiTuneV14(process, runOnMC=False):"
-------------------------------------------------------------------------
"def UpdatePuppiTuneV14(process, runOnMC=True):
"
-------------------------------------------------------------------------
"Recom
PRs: 30017, 30019"
-------------------------------------------------------------------------
=========================================================================
"runMetCorAndUncFromMiniAOD(process,isData=(not runOnMC),metType=""Puppi"",postfix=""Puppi"",jetFlavor=""AK4PFPuppi"",recoMetFromPFCs=True)
"
-------------------------------------------------------------------------
"```python
runMetCorAndUncFromMiniAOD(process,isData=isData,metType=""Puppi"",postfix=""Puppi"",jetFlavor=""AK4PFPuppi"",recoMetFromPFCs=True)
```"
-------------------------------------------------------------------------
"runMetCorAndUncFromMiniAOD(process,isData=(not runOnMC),metType=""Puppi"",postfix=""Puppi"",jetFlavor=""AK4PFPuppi"",recoMetFromPFCs=True,pfCandColl=cms.InputTag(""puppiForMET""))
"
-------------------------------------------------------------------------
"Recom
PRs: 30017, 30019"
-------------------------------------------------------------------------
=========================================================================
"def UpdatePuppiTuneV14_MC(process):
  UpdatePuppiTuneV14(process,runOnMC=True)
def UpdatePuppiTuneV14_Data(process):
  UpdatePuppiTuneV14(process,runOnMC=False)
"
-------------------------------------------------------------------------
"def UpdatePuppiTuneV14(process, runOnMC):
  process.puppiNoLep.PtMaxCharged = 20.
  process.puppiNoLep.EtaMinUseDeltaZ = 2.4
  process.puppiNoLep.PtMaxNeutralsStartSlope = 20."
-------------------------------------------------------------------------
"def UpdatePuppiTuneV14_MC(process):
  UpdatePuppiTuneV14(process,runOnMC=True)
def UpdatePuppiTuneV14_Data(process):
  UpdatePuppiTuneV14(process,runOnMC=False)
"
-------------------------------------------------------------------------
"Recom
PRs: 30017, 30019"
-------------------------------------------------------------------------
=========================================================================
"'pathALCARECOTkAlCosmicsCosmicTF0T',
'pathALCARECOTkAlCosmicsRegional0T',
'pathALCARECOTkAlCosmicsDuringCollisions0T'
)
DuringCollisions0T_*_*',
"
-------------------------------------------------------------------------
"         'keep *_ALCARECOTkAlCosmicsCTF0T_*_*',
         'keep *_ALCARECOTkAlCosmicsCosmicTF0T_*_*',
         'keep *_ALCARECOTkAlCosmicsRegional0T_*_*',
         'keep *_ALCARECOTkAlCosmicsDuringCollisions0T*_*_*',"
-------------------------------------------------------------------------
"'pathALCARECOTkAlCosmicsCosmicTF0T',
'pathALCARECOTkAlCosmicsRegional0T',
'pathALCARECOTkAlCosmicsDuringCollisions0T'
)
DuringCollisions0T_*_*',
"
-------------------------------------------------------------------------
"Recom
PRs: 30013, 30014"
-------------------------------------------------------------------------
=========================================================================
"# AlCaReco for track based alignment using Cosmic muons reconstructed by Cosmics During Collisions Algorithm
# (same cuts)
ALCARECOTkAlCosmicsDuringCollisions0T = ALCARECOTkAlCosmicsCTF0T.clone(
    src = 'cosmicDCTracks'
    )
seqALCARECOTkAlCosmicsDuringCollisions0T = cms.Sequence(ALCARECOTkAlCosmicsDuringCollisions0T)
"
-------------------------------------------------------------------------
"ALCARECOTkAlCosmicsDuringCollisions0T = ALCARECOTkAlCosmicsCTF0T.clone(
    src = 'cosmicDCTracks'
)
seqALCARECOTkAlCosmicsDuringCollisions0T = cms.Sequence(ALCARECOTkAlCosmicsDuringCollisions0T)"
-------------------------------------------------------------------------
"# AlCaReco for track based alignment using Cosmic muons reconstructed by Cosmics During Collisions Algorithm
# (same cuts)
ALCARECOTkAlCosmicsDuringCollisions0T = ALCARECOTkAlCosmicsCTF0T.clone(
    src = 'cosmicDCTracks'
    )
seqALCARECOTkAlCosmicsDuringCollisions0T = cms.Sequence(ALCARECOTkAlCosmicsDuringCollisions0T)
"
-------------------------------------------------------------------------
"Recom
PRs: 30013, 30014"
-------------------------------------------------------------------------
=========================================================================
"pathALCARECOTkAlCosmicsDuringCollisions0T = cms.Path(seqALCARECOTkAlCosmicsDuringCollisions0T*ALCARECOTkAlCosmicsInCollisions0TDQM)
"
-------------------------------------------------------------------------
pathALCARECOTkAlCosmicsDuringCollisions0T = cms.Path(seqALCARECOTkAlCosmicsDuringCollisions0T*ALCARECOTkAlCosmicsInCollisions0TDQM)
-------------------------------------------------------------------------
"pathALCARECOTkAlCosmicsDuringCollisions0T = cms.Path(seqALCARECOTkAlCosmicsDuringCollisions0T*ALCARECOTkAlCosmicsInCollisions0TDQM)
"
-------------------------------------------------------------------------
"Recom
PRs: 30013, 30014"
-------------------------------------------------------------------------
=========================================================================
"paths  = (pathALCARECOTkAlCosmicsCTF0T,pathALCARECOTkAlCosmicsCosmicTF0T,pathALCARECOTkAlCosmicsRegional0T,pathALCARECOTkAlCosmicsDuringCollisions0T),
"
-------------------------------------------------------------------------
"paths  = ( pathALCARECOTkAlCosmicsCTF0T, pathALCARECOTkAlCosmicsCosmicTF0T, pathALCARECOTkAlCosmicsRegional0T, pathALCARECOTkAlCosmicsDuringCollisions0T, pathALCARECOTkAlCosmics0THLT ),"
-------------------------------------------------------------------------
"paths  = (pathALCARECOTkAlCosmicsCTF0T,pathALCARECOTkAlCosmicsCosmicTF0T,pathALCARECOTkAlCosmicsRegional0T,pathALCARECOTkAlCosmicsDuringCollisions0T),
"
-------------------------------------------------------------------------
"Recom
PRs: 30013, 30014"
-------------------------------------------------------------------------
=========================================================================
"#############################
### TkAlCosmicsInCollisions0T ###
#############################
__selectionName = 'TkAlCosmicsInCollisions0T'
ALCARECOTkAlCosmicsInCollisions0TTrackingDQM = ALCARECOTkAlCosmicsCTF0TTrackingDQM.clone(
#names and desigantions
    TrackProducer = 'ALCARECO'__selectionName,
    AlgoName = 'ALCARECO'__selectionName,
    BSFolderName = ""AlCaReco/""__selectionName""/BeamSpot"",
)
ALCARECOTkAlCosmicsInCollisions0TTkAlDQM = ALCARECOTkAlCosmicsCTF0TTkAlDQM.clone(
#names and desigantions
    TrackProducer = 'ALCARECO'__selectionName,
    ReferenceTrackProducer = 'cosmictrackfinderP5',
    AlgoName = 'ALCARECO'__selectionName
)
from Alignment.CommonAlignmentProducer.ALCARECOTkAlCosmics0THLT_cff import ALCARECOTkAlCosmics0THLT
#ALCARECOTkAlCosmicsInCollisions0THLTDQM = hltMonBitSummary.clone(
#    directory = ""AlCaReco/""__selectionName""/HLTSummary"",
#    histLabel = __selectionName,
#    HLTPaths = [""HLT_.*L1.*""],
#    eventSetupPathsKey =  ALCARECOTkAlCosmics0THLT.eventSetupPathsKey.value()
#)
#ALCARECOTkAlCosmicsInCollisions0TDQM = cms.Sequence( ALCARECOTkAlCosmicsInCollisions0TTrackingDQM  ALCARECOTkAlCosmicsInCollisions0TTkAlDQM ALCARECOTkAlCosmicsInCollisions0THLTDQM)
ALCARECOTkAlCosmicsInCollisions0TDQM = cms.Sequence( ALCARECOTkAlCosmicsInCollisions0TTrackingDQM  ALCARECOTkAlCosmicsInCollisions0TTkAlDQM )
"
-------------------------------------------------------------------------
"```python
#############################
### TkAlCosmicsInCollisions0T ###
#############################
__selectionName = 'TkAlCosmicsInCollisions0T'
ALCARECOTkAlCosmicsInCollisions0TTrackingDQM = ALCARECOTkAlCosmicsCTF0TTrackingDQM.clone(
    #names and desigantions
    TrackProducer = 'ALCARECO' + __selectionName,
    AlgoName = 'ALCARECO' + __selectionName,
    BSFolderName = ""AlCaReco/"" + __selectionName + ""/BeamSpot"",
)
ALCARECOTkAlCosmicsInCollisions0TTkAlDQM = ALCARECOTkAlCosmicsCTF0TTkAlDQM.clone(
    #names and desigantions
    TrackProducer = 'ALCARECO' + __selectionName,
    ReferenceTrackProducer = 'cosmictrackfinderP5',
    AlgoName = 'ALCARECO' + __selectionName
)
from Alignment.CommonAlignmentProducer.ALCARECOTkAlCosmics0THLT_cff import ALCARECOTkAlCosmics0THLT
#ALCARECOTkAlCosmicsInCollisions0THLTDQM = hltMonBitSummary.clone(
#    directory = ""AlCaReco/"" + __selectionName + ""/HLTSummary"",
#    histLabel = __selectionName,
#    HLTPaths = [""HLT_.*L1.*""],
#    eventSetupPathsKey =  ALCARECOTkAlCosmics0THLT.eventSetupPathsKey.value()
#)
#ALCARECOTkAlCosmicsInCollisions0TDQM = cms.Sequence( ALCARECOTkAlCosmicsInCollisions0TTrackingDQM + ALCARECOTkAlCosmicsInCollisions0TTkAlDQM + ALCARECOTkAlCosmicsInCollisions0THLTDQM)
ALCARECOTkAlCosmicsInCollisions0TDQM = cms.Sequence( ALCARECOTkAlCosmicsInCollisions0TTrackingDQM + ALCARECOTkAlCosmicsInCollisions0TTkAlDQM )
```"
-------------------------------------------------------------------------
"#############################
### TkAlCosmicsInCollisions0T ###
#############################
__selectionName = 'TkAlCosmicsInCollisions0T'
ALCARECOTkAlCosmicsInCollisions0TTrackingDQM = ALCARECOTkAlCosmicsCTF0TTrackingDQM.clone(
#names and desigantions
    TrackProducer = 'ALCARECO'__selectionName,
    AlgoName = 'ALCARECO'__selectionName,
    BSFolderName = ""AlCaReco/""__selectionName""/BeamSpot"",
)
ALCARECOTkAlCosmicsInCollisions0TTkAlDQM = ALCARECOTkAlCosmicsCTF0TTkAlDQM.clone(
#names and desigantions
    TrackProducer = 'ALCARECO'__selectionName,
    ReferenceTrackProducer = 'cosmictrackfinderP5',
    AlgoName = 'ALCARECO'__selectionName
)
from Alignment.CommonAlignmentProducer.ALCARECOTkAlCosmics0THLT_cff import ALCARECOTkAlCosmics0THLT
#ALCARECOTkAlCosmicsInCollisions0THLTDQM = hltMonBitSummary.clone(
#    directory = ""AlCaReco/""__selectionName""/HLTSummary"",
#    histLabel = __selectionName,
#    HLTPaths = [""HLT_.*L1.*""],
#    eventSetupPathsKey =  ALCARECOTkAlCosmics0THLT.eventSetupPathsKey.value()
#)
#ALCARECOTkAlCosmicsInCollisions0TDQM = cms.Sequence( ALCARECOTkAlCosmicsInCollisions0TTrackingDQM  ALCARECOTkAlCosmicsInCollisions0TTkAlDQM ALCARECOTkAlCosmicsInCollisions0THLTDQM)
ALCARECOTkAlCosmicsInCollisions0TDQM = cms.Sequence( ALCARECOTkAlCosmicsInCollisions0TTrackingDQM  ALCARECOTkAlCosmicsInCollisions0TTkAlDQM )
"
-------------------------------------------------------------------------
"Recom
PRs: 30013, 30014"
-------------------------------------------------------------------------
=========================================================================
"# Update Pixel Gain calibration scheme for Run3 (PR #29333)
def customiseFor29333(process):
    for producer in producers_by_type(process, ""SiPixelClusterProducer""):
        # For Run3, change in the gain calibration scheme,
        # to include the VCal conversion factors directly in the SiPixelGainCalibration DB object
        # full details at: https://indico.cern.ch/event/879470/contributions/3796405/attachments/2009273/3356603/pix_off_25_3_gain_calibration_mc.pdf
        producer.VCaltoElectronGain      = cms.int32(1) # all gains=1, pedestals=0
        producer.VCaltoElectronGain_L1   = cms.int32(1)
        producer.VCaltoElectronOffset    = cms.int32(0)
        producer.VCaltoElectronOffset_L1 = cms.int32(0)
    return process
    process = customiseFor29333(process)
"
-------------------------------------------------------------------------
"def customiseFor29333(process):
    for producer in producers_by_type(process, ""SiPixelClusterProducer""):
        producer.VCaltoElectronGain      = cms.int32(1)
        producer.VCaltoElectronGain_L1   = cms.int32(1)
        producer.VCaltoElectronOffset    = cms.int32(0)
        producer.VCaltoElectronOffset_L1 = cms.int32(0)
    return process

def customiseFor29333(process):
    for producer in producers_by_type(process, ""SiPixelClusterProducer""):
        producer.VCaltoElectronGain      = cms.int32(1)
        producer.VCaltoElectronGain_L1   = cms.int32(1)
        producer.VCaltoElectronOffset    = cms.int32(0)
        producer.VCaltoElectronOffset_L1 = cms.int32(0)
    return process"
-------------------------------------------------------------------------
"# Update Pixel Gain calibration scheme for Run3 (PR #29333)
def customiseFor29333(process):
    for producer in producers_by_type(process, ""SiPixelClusterProducer""):
        # For Run3, change in the gain calibration scheme,
        # to include the VCal conversion factors directly in the SiPixelGainCalibration DB object
        # full details at: https://indico.cern.ch/event/879470/contributions/3796405/attachments/2009273/3356603/pix_off_25_3_gain_calibration_mc.pdf
        producer.VCaltoElectronGain      = cms.int32(1) # all gains=1, pedestals=0
        producer.VCaltoElectronGain_L1   = cms.int32(1)
        producer.VCaltoElectronOffset    = cms.int32(0)
        producer.VCaltoElectronOffset_L1 = cms.int32(0)
    return process
    process = customiseFor29333(process)
"
-------------------------------------------------------------------------
"Recom
PRs: 29951, 29959"
-------------------------------------------------------------------------
=========================================================================
"prim.append(entries[0])
sec.append(entries[1])
prim.append(entry)
 any duplicates
orted(list(set(prim)))
rted(list(set(sec)))
"
-------------------------------------------------------------------------
"prim.append(entries[0])
sec.append(entries[1])
prim.append(entry)
prim = sorted(list(set(prim)))
sec = sorted(list(set(sec)))"
-------------------------------------------------------------------------
"prim.append(entries[0])
sec.append(entries[1])
prim.append(entry)
 any duplicates
orted(list(set(prim)))
rted(list(set(sec)))
"
-------------------------------------------------------------------------
"Recom
PRs: 29454, 29499"
-------------------------------------------------------------------------
=========================================================================
"run2_miniAOD_devel.toModify(pileupJetId, algos = _chsalgos_102x)
"
-------------------------------------------------------------------------
"pileupJetIdCalculator = pileupJetId.clone(
      # Calculate variables, but don't run MVAs
      run2_miniAOD_devel.toModify(pileupJetId, algos = _chsalgos_102x)
 )"
-------------------------------------------------------------------------
"run2_miniAOD_devel.toModify(pileupJetId, algos = _chsalgos_102x)
"
-------------------------------------------------------------------------
"Recom
PRs: 29376, 29377"
-------------------------------------------------------------------------
=========================================================================
"higgsvalidation_seq = cms.Sequence(higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqTTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqhiggsvalidation_seq)
"
-------------------------------------------------------------------------
"```python
higgsValidation_seq = cms.Sequence(HiggsValidation)
genvalid_top = cms.Sequence(basicGenTest_seq + mbueAndqcdValidation_seq + TTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seq + mbueAndqcdValidation_seq + higgsValidation_seq)
```"
-------------------------------------------------------------------------
"higgsvalidation_seq = cms.Sequence(higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqTTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqhiggsvalidation_seq)
"
-------------------------------------------------------------------------
"Recom
PRs: 29146, 29356"
-------------------------------------------------------------------------
=========================================================================
"higgsvalidation_seq = cms.Sequence(higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqTTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqhiggsvalidation_seq)
"
-------------------------------------------------------------------------
"```python
higgsValidation_seq = cms.Sequence(higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seq+mbueAndqcdValidation_seq+TTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seq+mbueAndqcdValidation_seq+higgsValidation_seq)
```"
-------------------------------------------------------------------------
"higgsvalidation_seq = cms.Sequence(higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqTTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqhiggsvalidation_seq)
"
-------------------------------------------------------------------------
"Recom
PRs: 29146, 29354"
-------------------------------------------------------------------------
=========================================================================
"higgsvalidation_seq = cms.Sequence(higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqTTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqhiggsvalidation_seq)
"
-------------------------------------------------------------------------
"higgsvalidation_seq = cms.Sequence(HiggsValidation)
genvalid_top = cms.Sequence(basicGenTest_seq + mbueAndqcdValidation_seq + TTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seq + mbueAndqcdValidation_seq + higgsvalidation_seq)"
-------------------------------------------------------------------------
"higgsvalidation_seq = cms.Sequence(higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqTTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqhiggsvalidation_seq)
"
-------------------------------------------------------------------------
"Recom
PRs: 29146, 29352"
-------------------------------------------------------------------------
=========================================================================
"higgsvalidation_seq = cms.Sequence(higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqTTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqhiggsvalidation_seq)
"
-------------------------------------------------------------------------
"```python
higgsValidation_seq = cms.Sequence(higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seq+mbueAndqcdValidation_seq+TTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seq+mbueAndqcdValidation_seq+higgsValidation_seq)
```"
-------------------------------------------------------------------------
"higgsvalidation_seq = cms.Sequence(higgsValidation)
genvalid_top = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqTTbarfull_seq)
genvalid_higgs = cms.Sequence(basicGenTest_seqmbueAndqcdValidation_seqhiggsvalidation_seq)
"
-------------------------------------------------------------------------
"Recom
PRs: 29146, 29350"
-------------------------------------------------------------------------
=========================================================================
"Package:    GeneralInterface/GenFilters/ModelpMSSMFilter
Class:      ModelpMSSMFilter
class ModelpMSSMFilter ModelpMSSMFilter.cc GeneratorInterface/GenFilters/plugins/ModelpMSSMFilter.cc
"
-------------------------------------------------------------------------
"GenFilters/ModelpMSSMFilter
Class:      ModelpMSSMFilter
class ModelpMSSMFilter ModelpMSSMFilter.cc GeneratorInterface/GenFilters/plugins/cc initalisation ModelpMSSMFilter_cfi python py import FWCore ParameterSet Config as cms EDFilter gpssrc InputTag genParticles input genParticle collection jetsrc ak4GenJets genJets genHTcut double genHT cut jetEtaCut genJet eta HT jetPtCut pT elEtaCut gen electron single trigger elPtCut gammaEtaCut photon gammaPtCut muEtaCut muon muPtCut tauEtaCut tau di tauPtCut loosemuPtCut soft object looseelPtCut loosegammaPtCut veryloosegammaPtCut"
-------------------------------------------------------------------------
"Package:    GeneralInterface/GenFilters/ModelpMSSMFilter
Class:      ModelpMSSMFilter
class ModelpMSSMFilter ModelpMSSMFilter.cc GeneratorInterface/GenFilters/plugins/ModelpMSSMFilter.cc
"
-------------------------------------------------------------------------
"Recom
PRs: 28593, 29241"
-------------------------------------------------------------------------
=========================================================================
"class ModelpMSSMFilter : public edm::global::EDFilter<> {
  explicit ModelpMSSMFilter(const edm::ParameterSet&);
  ~ModelpMSSMFilter() override;
"
-------------------------------------------------------------------------
"class ModelpMSSMFilter : public edm::global::EDFilter<> {
 public:
  explicit ModelpMSSMFilter(const edm::ParameterSet&);
  ~ModelpMSSMFilter() override;
  bool filter(edm::StreamID, edm::Event&, const edm::EventSetup&) const override;"
-------------------------------------------------------------------------
"class ModelpMSSMFilter : public edm::global::EDFilter<> {
  explicit ModelpMSSMFilter(const edm::ParameterSet&);
  ~ModelpMSSMFilter() override;
"
-------------------------------------------------------------------------
"Recom
PRs: 28593, 29241"
-------------------------------------------------------------------------
=========================================================================
"ModelpMSSMFilter::ModelpMSSMFilter(const edm::ParameterSet& params)
"
-------------------------------------------------------------------------
"ModelpMSSMFilter::ModelpMSSMFilter(const edm::ParameterSet& params)
"
-------------------------------------------------------------------------
"ModelpMSSMFilter::ModelpMSSMFilter(const edm::ParameterSet& params)
"
-------------------------------------------------------------------------
"Recom
PRs: 28593, 29241"
-------------------------------------------------------------------------
=========================================================================
"ModelpMSSMFilter::~ModelpMSSMFilter() {}
bool ModelpMSSMFilter::filter(edm::StreamID, edm::Event& evt, const edm::EventSetup& params) const {
"
-------------------------------------------------------------------------
"// Destructor
ModelpMSSMFilter::~ModelpMSSMFilter() {}

bool ModelpMSSMFilter::filter(edm::StreamID, edm::Event& evt, const edm::EventSetup& params) const {"
-------------------------------------------------------------------------
"ModelpMSSMFilter::~ModelpMSSMFilter() {}
bool ModelpMSSMFilter::filter(edm::StreamID, edm::Event& evt, const edm::EventSetup& params) const {
"
-------------------------------------------------------------------------
"Recom
PRs: 28593, 29241"
-------------------------------------------------------------------------
=========================================================================
"DEFINE_FWK_MODULE(ModelpMSSMFilter);
"
-------------------------------------------------------------------------
DEFINE_EDM_PLUGIN(ModelpMSSMFilter);
-------------------------------------------------------------------------
"DEFINE_FWK_MODULE(ModelpMSSMFilter);
"
-------------------------------------------------------------------------
"Recom
PRs: 28593, 29241"
-------------------------------------------------------------------------
=========================================================================
"#Configuration file fragment used for ModelpMSSMFilter module (GeneratorInterface/GenFilters/plugins/ModelpMSSMFilter.cc) initalisation
#ModelpMSSMFilter_cfi GeneratorInterface/GenFilters/python/ModelpMSSMFilter_cfi.py
ModelpMSSMFilter = cms.EDFilter(""ModelpMSSMFilter"",
"
-------------------------------------------------------------------------
"```python
ModelpMSSMFilter = cms.EDFilter(""ModelpMSSMFilter"",
```"
-------------------------------------------------------------------------
"#Configuration file fragment used for ModelpMSSMFilter module (GeneratorInterface/GenFilters/plugins/ModelpMSSMFilter.cc) initalisation
#ModelpMSSMFilter_cfi GeneratorInterface/GenFilters/python/ModelpMSSMFilter_cfi.py
ModelpMSSMFilter = cms.EDFilter(""ModelpMSSMFilter"",
"
-------------------------------------------------------------------------
"Recom
PRs: 28593, 29241"
-------------------------------------------------------------------------
=========================================================================
"Package:    GeneralInterface/GenFilters/ModelpMSSMFilter
Class:      ModelpMSSMFilter
class ModelpMSSMFilter ModelpMSSMFilter.cc GeneratorInterface/GenFilters/plugins/ModelpMSSMFilter.cc
"
-------------------------------------------------------------------------
"Package:    GeneratorInterface/GenFilters/ModelpMSSMFilter
Class:      ModelpMSSMFilter
class ModelpMSSMFilter ModelpMSSMFilter.cc GeneratorInterface/GenFilters/plugins/cc/ModelpMSSMFilter.cc"
-------------------------------------------------------------------------
"Package:    GeneralInterface/GenFilters/ModelpMSSMFilter
Class:      ModelpMSSMFilter
class ModelpMSSMFilter ModelpMSSMFilter.cc GeneratorInterface/GenFilters/plugins/ModelpMSSMFilter.cc
"
-------------------------------------------------------------------------
"Recom
PRs: 28593, 29234"
-------------------------------------------------------------------------
=========================================================================
"class ModelpMSSMFilter : public edm::global::EDFilter<> {
  explicit ModelpMSSMFilter(const edm::ParameterSet&);
  ~ModelpMSSMFilter() override;
"
-------------------------------------------------------------------------
"class ModelpMSSMFilter : public edm::global::EDFilter<> {
 public:
  explicit ModelpMSSMFilter(const edm::ParameterSet&);
  ~ModelpMSSMFilter() override;
"
-------------------------------------------------------------------------
"class ModelpMSSMFilter : public edm::global::EDFilter<> {
  explicit ModelpMSSMFilter(const edm::ParameterSet&);
  ~ModelpMSSMFilter() override;
"
-------------------------------------------------------------------------
"Recom
PRs: 28593, 29234"
-------------------------------------------------------------------------
=========================================================================
"ModelpMSSMFilter::ModelpMSSMFilter(const edm::ParameterSet& params)
"
-------------------------------------------------------------------------
"ModelpMSSMFilter::ModelpMSSMFilter(const edm::ParameterSet& params)
    : token_(consumes<reco::GenParticleCollection>(params.getParameter<edm::InputTag>(""gpssrc""))),
      token2_(consumes<reco::GenJetCollection>(params.getParameter<edm::InputTag>(""jetsrc""))),
      muPtCut_(params.getParameter<double>(""muPtCut"")),"
-------------------------------------------------------------------------
"ModelpMSSMFilter::ModelpMSSMFilter(const edm::ParameterSet& params)
"
-------------------------------------------------------------------------
"Recom
PRs: 28593, 29234"
-------------------------------------------------------------------------
=========================================================================
"ModelpMSSMFilter::~ModelpMSSMFilter() {}
bool ModelpMSSMFilter::filter(edm::StreamID, edm::Event& evt, const edm::EventSetup& params) const {
"
-------------------------------------------------------------------------
"ModelpMSSMFilter::~ModelpMSSMFilter() {}

bool ModelpMSSMFilter::filter(edm::StreamID, edm::Event& evt, const edm::EventSetup& params) const {"
-------------------------------------------------------------------------
"ModelpMSSMFilter::~ModelpMSSMFilter() {}
bool ModelpMSSMFilter::filter(edm::StreamID, edm::Event& evt, const edm::EventSetup& params) const {
"
-------------------------------------------------------------------------
"Recom
PRs: 28593, 29234"
-------------------------------------------------------------------------
=========================================================================
"DEFINE_FWK_MODULE(ModelpMSSMFilter);
"
-------------------------------------------------------------------------
"DEFINE_EDM_PLUGIN(pMSSMFilter, ModelpMSSMFilter);"
-------------------------------------------------------------------------
"DEFINE_FWK_MODULE(ModelpMSSMFilter);
"
-------------------------------------------------------------------------
"Recom
PRs: 28593, 29234"
-------------------------------------------------------------------------
=========================================================================
"#Configuration file fragment used for ModelpMSSMFilter module (GeneratorInterface/GenFilters/plugins/ModelpMSSMFilter.cc) initalisation
#ModelpMSSMFilter_cfi GeneratorInterface/GenFilters/python/ModelpMSSMFilter_cfi.py
ModelpMSSMFilter = cms.EDFilter(""ModelpMSSMFilter"",
"
-------------------------------------------------------------------------
"```python
ModelpMSSMFilter = cms.EDFilter(""ModelpMSSMFilter"",
    gpssrc = cms.InputTag(""genParticles""),    # input genParticle collection
    jetsrc = cms.InputTag(""ak4GenJets""),  # input genJets collection
    genHTcut = cms.double(140.0),                # genHT cut
```"
-------------------------------------------------------------------------
"#Configuration file fragment used for ModelpMSSMFilter module (GeneratorInterface/GenFilters/plugins/ModelpMSSMFilter.cc) initalisation
#ModelpMSSMFilter_cfi GeneratorInterface/GenFilters/python/ModelpMSSMFilter_cfi.py
ModelpMSSMFilter = cms.EDFilter(""ModelpMSSMFilter"",
"
-------------------------------------------------------------------------
"Recom
PRs: 28593, 29234"
-------------------------------------------------------------------------
=========================================================================
"Package:    GeneralInterface/GenFilters/ModelpMSSMFilter
Class:      ModelpMSSMFilter
class ModelpMSSMFilter ModelpMSSMFilter.cc GeneratorInterface/GenFilters/plugins/ModelpMSSMFilter.cc
"
-------------------------------------------------------------------------
"Package:    GeneralInterface/GenFilters/ModelpMSSMFilter
Class:      ModelpMSSMFilter
class ModelpMSSMFilter ModelpMSSMFilter.cc GeneratorInterface/GenFilters/plugins/cc/ModelpMSSMFilter.cc"
-------------------------------------------------------------------------
"Package:    GeneralInterface/GenFilters/ModelpMSSMFilter
Class:      ModelpMSSMFilter
class ModelpMSSMFilter ModelpMSSMFilter.cc GeneratorInterface/GenFilters/plugins/ModelpMSSMFilter.cc
"
-------------------------------------------------------------------------
"Recom
PRs: 28593, 29232"
-------------------------------------------------------------------------
=========================================================================
"class ModelpMSSMFilter : public edm::global::EDFilter<> {
  explicit ModelpMSSMFilter(const edm::ParameterSet&);
  ~ModelpMSSMFilter() override;
"
-------------------------------------------------------------------------
"class ModelpMSSMFilter : public edm::global::EDFilter<> {
 public:
  explicit ModelpMSSMFilter(const edm::ParameterSet&);
  ~ModelpMSSMFilter() override;
  
 private:
   bool filter(edm::StreamID, edm::Event&, const edm::EventSetup&) const override;"
-------------------------------------------------------------------------
"class ModelpMSSMFilter : public edm::global::EDFilter<> {
  explicit ModelpMSSMFilter(const edm::ParameterSet&);
  ~ModelpMSSMFilter() override;
"
-------------------------------------------------------------------------
"Recom
PRs: 28593, 29232"
-------------------------------------------------------------------------
=========================================================================
"ModelpMSSMFilter::ModelpMSSMFilter(const edm::ParameterSet& params)
"
-------------------------------------------------------------------------
"ModelpMSSMFilter::ModelpMSSMFilter(const edm::ParameterSet& params)
     : token_(consumes<reco::GenParticleCollection>(params.getParameter<cms.InputTag>(""gpssrc""))),
       token2_(consumes<reco::GenJetCollection>(params.getParameter<cms.InputTag>(""jetsrc""))),
       muPtCut_(params.getParameter<cms.double>(""muPtCut"")),"
-------------------------------------------------------------------------
"ModelpMSSMFilter::ModelpMSSMFilter(const edm::ParameterSet& params)
"
-------------------------------------------------------------------------
"Recom
PRs: 28593, 29232"
-------------------------------------------------------------------------
=========================================================================
"ModelpMSSMFilter::~ModelpMSSMFilter() {}
bool ModelpMSSMFilter::filter(edm::StreamID, edm::Event& evt, const edm::EventSetup& params) const {
"
-------------------------------------------------------------------------
"pMSSMFilter::~pMSSMFilter() {}

bool pMSSMFilter::filter(edm::StreamID, edm::Event& evt, const edm::EventSetup& params) const {"
-------------------------------------------------------------------------
"ModelpMSSMFilter::~ModelpMSSMFilter() {}
bool ModelpMSSMFilter::filter(edm::StreamID, edm::Event& evt, const edm::EventSetup& params) const {
"
-------------------------------------------------------------------------
"Recom
PRs: 28593, 29232"
-------------------------------------------------------------------------
=========================================================================
"DEFINE_FWK_MODULE(ModelpMSSMFilter);
"
-------------------------------------------------------------------------
"cms.InputTag, cms.EDFilter, cms.double"
-------------------------------------------------------------------------
"DEFINE_FWK_MODULE(ModelpMSSMFilter);
"
-------------------------------------------------------------------------
"Recom
PRs: 28593, 29232"
-------------------------------------------------------------------------
=========================================================================
"#Configuration file fragment used for ModelpMSSMFilter module (GeneratorInterface/GenFilters/plugins/ModelpMSSMFilter.cc) initalisation
#ModelpMSSMFilter_cfi GeneratorInterface/GenFilters/python/ModelpMSSMFilter_cfi.py
ModelpMSSMFilter = cms.EDFilter(""ModelpMSSMFilter"",
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

ModelpMSSMFilter = cms.EDFilter(""ModelpMSSMFilter"",
                                  gpssrc = cms.InputTag(""genParticles""),  # input genParticle collection
                                  jetsrc = cms.InputTag(""ak4GenJets""),  # input genJets collection
                                  genHTcut = cms.double(140.0)  # genHT cut
)"
-------------------------------------------------------------------------
"#Configuration file fragment used for ModelpMSSMFilter module (GeneratorInterface/GenFilters/plugins/ModelpMSSMFilter.cc) initalisation
#ModelpMSSMFilter_cfi GeneratorInterface/GenFilters/python/ModelpMSSMFilter_cfi.py
ModelpMSSMFilter = cms.EDFilter(""ModelpMSSMFilter"",
"
-------------------------------------------------------------------------
"Recom
PRs: 28593, 29232"
-------------------------------------------------------------------------
=========================================================================
"#Configuration file fragment used for pMSSMFilter module (GeneratorInterface/GenFilters/src/pMSSMFilter.cc) initalisation
#pMSSMFilter_cfi GeneratorInterface/GenFilters/python/pMSSMFilter_cfi.py
import FWCore.ParameterSet.Config as cms
pMSSMFilter = cms.EDFilter(""pMSSMFilter"",
	gpssrc = cms.InputTag(""genParticles""),    # input genParticle collection
 	jetsrc = cms.InputTag(""ak4GenJets""),  # input genJets collection
  genHTcut = cms.double(140.0),                # genHT cut
  jetEtaCut = cms.double(5.0),                 # genJet eta cut for HT
	jetPtCut = cms.double(30.0),                 # genJet pT cut for HT			   
	elEtaCut = cms.double(2.5),                  # gen electron eta cut for single electron trigger
	elPtCut = cms.double(15.0),                  # gen electron pT cut for single electron trigger
	gammaEtaCut = cms.double(2.5),               # gen photon eta cut for single photon trigger
	gammaPtCut = cms.double(70.0),               # gen photon pT cut for single photon trigger
	muEtaCut = cms.double(2.5),                  # gen muon eta cut for single muon trigger
	muPtCut = cms.double(15.0),                  # gen muon pT cut for single muon trigger
  tauEtaCut = cms.double(2.5),                 # gen tau eta cut for di-tau trigger
	tauPtCut = cms.double(30.0),                 # gen tau pT cut for di-tau trigger
	loosemuPtCut = cms.double(2.5),              # gen muon pT cut for soft object trigger
	looseelPtCut = cms.double(5.0),              # gen electron pT cut for soft object trigger
	loosegammaPtCut = cms.double(30.0),          # gen photon pT cut for soft object trigger
	veryloosegammaPtCut = cms.double(18.0)       # gen photon pT cut for di-photon trigger
  )
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
pMSSMFilter = cms.EDFilter(""pMSSMFilter"",
	gpssrc = cms.InputTag(""genParticles""),    # input genParticle collection
 	jetsrc = cms.InputTag(""ak4GenJets""),  # input genJets collection
  genHTcut = cms.double(140.0),                # genHT cut
  jetEtaCut = cms.double(5.0),                 # genJet eta cut for HT
	jetPtCut = cms.double(30.0),                 # genJet pT cut for HT			   
	elEtaCut = cms.double(2.5),                  # gen electron eta cut for single electron trigger
	elPtCut = cms.double(15.0),                  # gen electron pT cut for single electron trigger
	gammaEtaCut = cms.double(2.5),               # gen photon eta cut for single photon trigger
	gammaPtCut = cms.double(70.0),               # gen photon pT cut for single photon trigger
	muEtaCut = cms.double(2.5),                  # gen muon eta cut for single muon trigger
	muPtCut = cms.double(15.0),                  # gen muon pT cut for single muon trigger
  tauEtaCut = cms.double(2.5),                 # gen tau eta cut for di-tau trigger
	tauPtCut = cms.double(30.0),                 # gen tau pT cut for di-tau trigger
	loosemuPtCut = cms.double(2.5),              # gen muon pT cut for soft object trigger
	looseelPtCut = cms.double(5.0),              # gen electron pT cut for soft object trigger
	loosegammaPtCut = cms.double(30.0),          # gen photon pT cut for soft object trigger
	veryloosegammaPtCut = cms.double(18.0)       # gen photon pT cut for di-photon trigger
)"
-------------------------------------------------------------------------
"#Configuration file fragment used for pMSSMFilter module (GeneratorInterface/GenFilters/src/pMSSMFilter.cc) initalisation
#pMSSMFilter_cfi GeneratorInterface/GenFilters/python/pMSSMFilter_cfi.py
import FWCore.ParameterSet.Config as cms
pMSSMFilter = cms.EDFilter(""pMSSMFilter"",
	gpssrc = cms.InputTag(""genParticles""),    # input genParticle collection
 	jetsrc = cms.InputTag(""ak4GenJets""),  # input genJets collection
  genHTcut = cms.double(140.0),                # genHT cut
  jetEtaCut = cms.double(5.0),                 # genJet eta cut for HT
	jetPtCut = cms.double(30.0),                 # genJet pT cut for HT			   
	elEtaCut = cms.double(2.5),                  # gen electron eta cut for single electron trigger
	elPtCut = cms.double(15.0),                  # gen electron pT cut for single electron trigger
	gammaEtaCut = cms.double(2.5),               # gen photon eta cut for single photon trigger
	gammaPtCut = cms.double(70.0),               # gen photon pT cut for single photon trigger
	muEtaCut = cms.double(2.5),                  # gen muon eta cut for single muon trigger
	muPtCut = cms.double(15.0),                  # gen muon pT cut for single muon trigger
  tauEtaCut = cms.double(2.5),                 # gen tau eta cut for di-tau trigger
	tauPtCut = cms.double(30.0),                 # gen tau pT cut for di-tau trigger
	loosemuPtCut = cms.double(2.5),              # gen muon pT cut for soft object trigger
	looseelPtCut = cms.double(5.0),              # gen electron pT cut for soft object trigger
	loosegammaPtCut = cms.double(30.0),          # gen photon pT cut for soft object trigger
	veryloosegammaPtCut = cms.double(18.0)       # gen photon pT cut for di-photon trigger
  )
"
-------------------------------------------------------------------------
"Recom
PRs: 28201, 29226"
-------------------------------------------------------------------------
=========================================================================
"'run3_data_promptlike'     :   '110X_dataRun3_Prompt_v3',
"
-------------------------------------------------------------------------
"'run3_data_promptlike'     :   '110X_dataRun3_Prompt_v3',"
-------------------------------------------------------------------------
"'run3_data_promptlike'     :   '110X_dataRun3_Prompt_v3',
"
-------------------------------------------------------------------------
"Recom
PRs: 29050, 29051"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v2',
'run2_data'         :   '111X_dataRun2_v2',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v2',
'run2_data_relval'  :   '111X_dataRun2_relval_v2',
"
-------------------------------------------------------------------------
"'run1_data'         :   '111X_dataRun2_v2',
'run2_data'         :   '111X_dataRun2_v2',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v2',
'run2_data_relval'  :   '111X_dataRun2_relval_v2',
'run2_data_promptlike_hi' : '110X_dataRun2_PromptLike_HI_v10',"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v27',
'run2_data'         :   '106X_dataRun2_v27',
'run2_data_relval'  :   '106X_dataRun2_relval_v25',
"
-------------------------------------------------------------------------
"Recom
PRs: 29023, 29029"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v2',
'run2_data'         :   '111X_dataRun2_v2',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v2',
'run2_data_relval'  :   '111X_dataRun2_relval_v2',
"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v12',
'run2_data'         :   '110X_dataRun2_v12',
'run2_data_HEfail'  :   '110X_dataRun2_HEfail_v12',
'run2_data_relval'  :   '110X_dataRun2_relval_v12',"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v12',
'run2_data'         :   '110X_dataRun2_v12',
'run2_data_relval'  :   '110X_dataRun2_relval_v12',
"
-------------------------------------------------------------------------
"Recom
PRs: 29023, 29028"
-------------------------------------------------------------------------
=========================================================================
"phase1Pixel.toReplaceWith(DQMCertTrackerPixel,DQMCertTrackerPixel.copyAndExclude([ # FIXME
"
-------------------------------------------------------------------------
"phase1Pixel.toReplaceWith(DQMCertTrackerPixel, DQMCertTrackerPixel.copyAndExclude([ # FIXME, segfaults, when, included  "
-------------------------------------------------------------------------
"phase1Pixel.toReplaceWith(DQMCertTrackerPixel,DQMCertTrackerPixel.copyAndExclude([ # FIXME
"
-------------------------------------------------------------------------
"Recom
PRs: 29021, 29022"
-------------------------------------------------------------------------
=========================================================================
"#Configuration file fragment used for pMSSMFilter module (GeneratorInterface/GenFilters/src/pMSSMFilter.cc) initalisation
#pMSSMFilter_cfi GeneratorInterface/GenFilters/python/pMSSMFilter_cfi.py
import FWCore.ParameterSet.Config as cms
pMSSMFilter = cms.EDFilter(""pMSSMFilter"",
	gpssrc = cms.InputTag(""genParticles""),    # input genParticle collection
 	jetsrc = cms.InputTag(""ak4GenJets""),  # input genJets collection
  genHTcut = cms.double(140.0),                # genHT cut
  jetEtaCut = cms.double(5.0),                 # genJet eta cut for HT
	jetPtCut = cms.double(30.0),                 # genJet pT cut for HT			   
	elEtaCut = cms.double(2.5),                  # gen electron eta cut for single electron trigger
	elPtCut = cms.double(15.0),                  # gen electron pT cut for single electron trigger
	gammaEtaCut = cms.double(2.5),               # gen photon eta cut for single photon trigger
	gammaPtCut = cms.double(70.0),               # gen photon pT cut for single photon trigger
	muEtaCut = cms.double(2.5),                  # gen muon eta cut for single muon trigger
	muPtCut = cms.double(15.0),                  # gen muon pT cut for single muon trigger
  tauEtaCut = cms.double(2.5),                 # gen tau eta cut for di-tau trigger
	tauPtCut = cms.double(30.0),                 # gen tau pT cut for di-tau trigger
	loosemuPtCut = cms.double(2.5),              # gen muon pT cut for soft object trigger
	looseelPtCut = cms.double(5.0),              # gen electron pT cut for soft object trigger
	loosegammaPtCut = cms.double(30.0),          # gen photon pT cut for soft object trigger
	veryloosegammaPtCut = cms.double(18.0)       # gen photon pT cut for di-photon trigger
  )
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
pMSSMFilter = cms.EDFilter(""pMSSMFilter"",
    gpssrc = cms.InputTag(""genParticles""),      # input genParticle collection
    jetsrc = cms.InputTag(""ak4GenJets""),        # input genJets collection
    genHTcut = cms.double(140.0),               # genHT cut
    jetEtaCut = cms.double(5.0),                # genJet eta cut for HT
    jetPtCut = cms.double(30.0),                # genJet pT cut for HT
    elEtaCut = cms.double(2.5),                 # gen electron eta cut for single electron trigger
    elPtCut = cms.double(15.0),                 # gen electron pT cut for single electron trigger
    gammaEtaCut = cms.double(2.5),              # gen photon eta cut for single photon trigger
    gammaPtCut = cms.double(70.0),              # gen photon pT cut for single photon trigger
    muEtaCut = cms.double(2.5),                 # gen muon eta cut for single muon trigger
    muPtCut = cms.double(15.0),                 # gen muon pT cut for single muon trigger
    tauEtaCut = cms.double(2.5),                # gen tau eta cut for di-tau trigger
    tauPtCut = cms.double(30.0),                # gen tau pT cut for di-tau trigger
    loosemuPtCut = cms.double(2.5),             # gen muon pT cut for soft object trigger
    looseelPtCut = cms.double(5.0),             # gen electron pT cut for soft object trigger
    loosegammaPtCut = cms.double(30.0),         # gen photon pT cut for soft object trigger
    veryloosegammaPtCut = cms.double(18.0)      # gen photon pT cut for di-photon trigger
)"
-------------------------------------------------------------------------
"#Configuration file fragment used for pMSSMFilter module (GeneratorInterface/GenFilters/src/pMSSMFilter.cc) initalisation
#pMSSMFilter_cfi GeneratorInterface/GenFilters/python/pMSSMFilter_cfi.py
import FWCore.ParameterSet.Config as cms
pMSSMFilter = cms.EDFilter(""pMSSMFilter"",
	gpssrc = cms.InputTag(""genParticles""),    # input genParticle collection
 	jetsrc = cms.InputTag(""ak4GenJets""),  # input genJets collection
  genHTcut = cms.double(140.0),                # genHT cut
  jetEtaCut = cms.double(5.0),                 # genJet eta cut for HT
	jetPtCut = cms.double(30.0),                 # genJet pT cut for HT			   
	elEtaCut = cms.double(2.5),                  # gen electron eta cut for single electron trigger
	elPtCut = cms.double(15.0),                  # gen electron pT cut for single electron trigger
	gammaEtaCut = cms.double(2.5),               # gen photon eta cut for single photon trigger
	gammaPtCut = cms.double(70.0),               # gen photon pT cut for single photon trigger
	muEtaCut = cms.double(2.5),                  # gen muon eta cut for single muon trigger
	muPtCut = cms.double(15.0),                  # gen muon pT cut for single muon trigger
  tauEtaCut = cms.double(2.5),                 # gen tau eta cut for di-tau trigger
	tauPtCut = cms.double(30.0),                 # gen tau pT cut for di-tau trigger
	loosemuPtCut = cms.double(2.5),              # gen muon pT cut for soft object trigger
	looseelPtCut = cms.double(5.0),              # gen electron pT cut for soft object trigger
	loosegammaPtCut = cms.double(30.0),          # gen photon pT cut for soft object trigger
	veryloosegammaPtCut = cms.double(18.0)       # gen photon pT cut for di-photon trigger
  )
"
-------------------------------------------------------------------------
"Recom
PRs: 28201, 28999"
-------------------------------------------------------------------------
=========================================================================
"#Configuration file fragment used for pMSSMFilter module (GeneratorInterface/GenFilters/src/pMSSMFilter.cc) initalisation
#pMSSMFilter_cfi GeneratorInterface/GenFilters/python/pMSSMFilter_cfi.py
import FWCore.ParameterSet.Config as cms
pMSSMFilter = cms.EDFilter(""pMSSMFilter"",
	gpssrc = cms.InputTag(""genParticles""),    # input genParticle collection
 	jetsrc = cms.InputTag(""ak4GenJets""),  # input genJets collection
  genHTcut = cms.double(140.0),                # genHT cut
  jetEtaCut = cms.double(5.0),                 # genJet eta cut for HT
	jetPtCut = cms.double(30.0),                 # genJet pT cut for HT			   
	elEtaCut = cms.double(2.5),                  # gen electron eta cut for single electron trigger
	elPtCut = cms.double(15.0),                  # gen electron pT cut for single electron trigger
	gammaEtaCut = cms.double(2.5),               # gen photon eta cut for single photon trigger
	gammaPtCut = cms.double(70.0),               # gen photon pT cut for single photon trigger
	muEtaCut = cms.double(2.5),                  # gen muon eta cut for single muon trigger
	muPtCut = cms.double(15.0),                  # gen muon pT cut for single muon trigger
  tauEtaCut = cms.double(2.5),                 # gen tau eta cut for di-tau trigger
	tauPtCut = cms.double(30.0),                 # gen tau pT cut for di-tau trigger
	loosemuPtCut = cms.double(2.5),              # gen muon pT cut for soft object trigger
	looseelPtCut = cms.double(5.0),              # gen electron pT cut for soft object trigger
	loosegammaPtCut = cms.double(30.0),          # gen photon pT cut for soft object trigger
	veryloosegammaPtCut = cms.double(18.0)       # gen photon pT cut for di-photon trigger
  )
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
pMSSMFilter = cms.EDFilter(""pMSSMFilter"",
  gpssrc = cms.InputTag(""genParticles""),    # input genParticle collection
  jetsrc = cms.InputTag(""ak4GenJets""),  # input genJets collection
  genHTcut = cms.double(140.0),                # genHT cut
  jetEtaCut = cms.double(5.0),                 # genJet eta cut for HT
  jetPtCut = cms.double(30.0),                 # genJet pT cut for HT
  elEtaCut = cms.double(2.5),                  # gen electron eta cut for single electron trigger
  elPtCut = cms.double(15.0),                  # gen electron pT cut for single electron trigger
  gammaEtaCut = cms.double(2.5),               # gen photon eta cut for single photon trigger
  gammaPtCut = cms.double(70.0),               # gen photon pT cut for single photon trigger
  muEtaCut = cms.double(2.5),                  # gen muon eta cut for single muon trigger
  muPtCut = cms.double(15.0),                  # gen muon pT cut for single muon trigger
  tauEtaCut = cms.double(2.5),                 # gen tau eta cut for di-tau trigger
  tauPtCut = cms.double(30.0),                 # gen tau pT cut for di-tau trigger
  looser_muPtCut = cms.double(2.5),            # gen muon pT cut for soft object trigger
  looser_elPtCut = cms.double(5.0),            # gen electron pT cut for soft object trigger
  looser_gammaPtCut = cms.double(30.0),        # gen photon pT cut for soft object trigger
  veryloose_gammaPtCut = cms.double(18.0)      # gen photon pT cut for di-photon trigger
)"
-------------------------------------------------------------------------
"#Configuration file fragment used for pMSSMFilter module (GeneratorInterface/GenFilters/src/pMSSMFilter.cc) initalisation
#pMSSMFilter_cfi GeneratorInterface/GenFilters/python/pMSSMFilter_cfi.py
import FWCore.ParameterSet.Config as cms
pMSSMFilter = cms.EDFilter(""pMSSMFilter"",
	gpssrc = cms.InputTag(""genParticles""),    # input genParticle collection
 	jetsrc = cms.InputTag(""ak4GenJets""),  # input genJets collection
  genHTcut = cms.double(140.0),                # genHT cut
  jetEtaCut = cms.double(5.0),                 # genJet eta cut for HT
	jetPtCut = cms.double(30.0),                 # genJet pT cut for HT			   
	elEtaCut = cms.double(2.5),                  # gen electron eta cut for single electron trigger
	elPtCut = cms.double(15.0),                  # gen electron pT cut for single electron trigger
	gammaEtaCut = cms.double(2.5),               # gen photon eta cut for single photon trigger
	gammaPtCut = cms.double(70.0),               # gen photon pT cut for single photon trigger
	muEtaCut = cms.double(2.5),                  # gen muon eta cut for single muon trigger
	muPtCut = cms.double(15.0),                  # gen muon pT cut for single muon trigger
  tauEtaCut = cms.double(2.5),                 # gen tau eta cut for di-tau trigger
	tauPtCut = cms.double(30.0),                 # gen tau pT cut for di-tau trigger
	loosemuPtCut = cms.double(2.5),              # gen muon pT cut for soft object trigger
	looseelPtCut = cms.double(5.0),              # gen electron pT cut for soft object trigger
	loosegammaPtCut = cms.double(30.0),          # gen photon pT cut for soft object trigger
	veryloosegammaPtCut = cms.double(18.0)       # gen photon pT cut for di-photon trigger
  )
"
-------------------------------------------------------------------------
"Recom
PRs: 28201, 28998"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v1',
'run2_data'         :   '111X_dataRun2_v1',
'run2_data_HEfail' : '111X_dataRun2_HEfail_v1',
'run2_data_relval'  :   '111X_dataRun2_relval_v1',
"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v26',
'run2_data'         :   '110X_dataRun2_v26',
'run2_data_HEfail' : '110X_dataRun2_HEfail_v1',
'run2_data_relval'  :   '110X_dataRun2_relval_v24',"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v26',
'run2_data'         :   '106X_dataRun2_v26',
'run2_data_relval'  :   '106X_dataRun2_relval_v24',
"
-------------------------------------------------------------------------
"Recom
PRs: 28981, 28990"
-------------------------------------------------------------------------
=========================================================================
"'run2_mc_pre_vfp'   :   '110X_mcRun2_asymptotic_preVFP_v3',
"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '110X_mcRun2_asymptotic_preVFP_v3',"
-------------------------------------------------------------------------
"'run2_design'       :   '106X_mcRun2_design_v7',
'run2_mc_pre_vfp'           :   '106X_mcRun2_asymptotic_preVFP_v3',
'run2_mc'           :   '106X_mcRun2_asymptotic_v9',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_startup_deco_v6',
"
-------------------------------------------------------------------------
"Recom
PRs: 28624, 28989"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v1',
'run2_data'         :   '111X_dataRun2_v1',
'run2_data_HEfail' : '111X_dataRun2_HEfail_v1',
'run2_data_relval'  :   '111X_dataRun2_relval_v1',
"
-------------------------------------------------------------------------
"'run1_data'         :   '111X_dataRun2_v1',
'run2_data_promptlike' : '111X_dataRun2_v1',
'run2_data_promptlike_HEfail' : '111X_dataRun2_HEfail_v1',
'run2_data_relval'  :   '111X_dataRun2_relval_v1',"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v11',
'run2_data'         :   '110X_dataRun2_v11',
'run2_data_relval'  :   '110X_dataRun2_relval_v11',
"
-------------------------------------------------------------------------
"Recom
PRs: 28981, 28982"
-------------------------------------------------------------------------
=========================================================================
"process.rpcDigiMerger.inputTagTwinMuxDigis = 'rpcTwinMuxRawToDigi'
process.rpcDigiMerger.inputTagOMTFDigis = 'omtfStage2Digis'
process.rpcDigiMerger.inputTagCPPFDigis = 'rpcCPPFRawToDigi'
"
-------------------------------------------------------------------------
process.rpcDigiMerger.inputTagRPC = 'rpcSource'
-------------------------------------------------------------------------
"process.rpcDigiMerger.inputTagTwinMuxDigis = 'rpcTwinMuxRawToDigi'
process.rpcDigiMerger.inputTagOMTFDigis = 'omtfStage2Digis'
process.rpcDigiMerger.inputTagCPPFDigis = 'rpcCPPFRawToDigi'
"
-------------------------------------------------------------------------
"Recom
PRs: 28963, 28962"
-------------------------------------------------------------------------
=========================================================================
"for ps in process.cscSegments.algo_psets[4].algo_psets: ps.enlarge = True   
return process
"
-------------------------------------------------------------------------
"for ps in process.cscSegments.algo_psets[4].algo_psets:
    ps.enlarge = True
return process"
-------------------------------------------------------------------------
"for ps in process.cscSegments.algo_psets[4].algo_psets: ps.enlarge = True
"
-------------------------------------------------------------------------
"Recom
PRs: 28979, 28953"
-------------------------------------------------------------------------
=========================================================================
"workflows[138.1] = ['',['RunCosmics2020','RECOCOSDRUN3','ALCACOSDRUN3','HARVESTDCRUN3']]
"
-------------------------------------------------------------------------
"workflows[138.1] = ['',['RunCosmics2020','RECOCOSDRUN3','ALCACOSDRUN3','HARVESTDCRUN3','HARVESTDCRUN3_Summary']]"
-------------------------------------------------------------------------
"workflows[138.1] = ['',['RunCosmics2020','RECOCOSDRUN3','ALCACOSDRUN3','HARVESTDCRUN3']]
"
-------------------------------------------------------------------------
"Recom
PRs: 28900, 28901"
-------------------------------------------------------------------------
=========================================================================
"steps['RunCosmics2020']={'INPUT':InputInfo(dataSet='/ExpressCosmics/Commissioning2019-Express-v1/FEVT',label='2020GR0',run=[334393],events=100000,location='STD')}
"
-------------------------------------------------------------------------
"steps['RunCosmics2020']={'INPUT':InputInfo(dataSet='/ExpressCosmics/Commissioning2019-Express-v1/FEVT',label='2020GR0',run=[334393],events=100000,location='STD')}"
-------------------------------------------------------------------------
"steps['RunCosmics2020']={'INPUT':InputInfo(dataSet='/ExpressCosmics/Commissioning2019-Express-v1/FEVT',label='2020GR0',run=[334393],events=100000,location='STD')}
"
-------------------------------------------------------------------------
"Recom
PRs: 28900, 28901"
-------------------------------------------------------------------------
=========================================================================
"puppiMultiplicity = Var(""userFloat('patPuppiJetSpecificProducer:puppiMultiplicity')"",float,doc=""Sum of PUPPI weights of particles in the jet"", precision= 6),
neutralPuppiMultiplicity = Var(""userFloat('patPuppiJetSpecificProducer:neutralPuppiMultiplicity')"",float,doc=""Sum of PUPPI weights of neutral particles in the jet"", precision= 6)
"
-------------------------------------------------------------------------
"puppiMultiplicity = Var(""userFloat('puppi:ptD')"", float, doc=""PUPPI multiplicity in the jet""),
neutralPuppiMultiplicity = Var(""userFloat('jetSpecific:puppiMultiplicity')"", float, doc=""Neutral PUPPI multiplicity in the jet"")"
-------------------------------------------------------------------------
"puppiMultiplicity = Var(""userFloat('patPuppiJetSpecificProducer:puppiMultiplicity')"",float,doc=""Sum of PUPPI weights of particles in the jet"", precision= 6),
neutralPuppiMultiplicity = Var(""userFloat('patPuppiJetSpecificProducer:neutralPuppiMultiplicity')"",float,doc=""Sum of PUPPI weights of neutral particles in the jet"", precision= 6)
"
-------------------------------------------------------------------------
"Recom
PRs: 28844, 28845"
-------------------------------------------------------------------------
=========================================================================
"proc.jetTable.variables.nCharged = Var(""userInt('nCharged')"",  int, doc=""number of charged constituents"")
"
-------------------------------------------------------------------------
"proc.jetTable.variables.nCharged = Var(""userInt('nCharged')"", int, doc=""number of charged constituents"", precision=6)"
-------------------------------------------------------------------------
"proc.jetTable.variables.nCharged = Var(""userInt('nCharged')"",  int, doc=""number of charged constituents"")
"
-------------------------------------------------------------------------
"Recom
PRs: 28844, 28845"
-------------------------------------------------------------------------
=========================================================================
"'run2_mc_pre_vfp'   :   '110X_mcRun2_asymptotic_preVFP_v3',
"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '110X_mcRun2_asymptotic_preVFP_v3',"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '110X_mcRun2_asymptotic_preVFP_v3',
"
-------------------------------------------------------------------------
"Recom
PRs: 28624, 28824"
-------------------------------------------------------------------------
=========================================================================
"PtMaxPhotons = cms.double(-1.),
"
-------------------------------------------------------------------------
"PtMaxPhotons = cms.double(99999.),"
-------------------------------------------------------------------------
"EtaMaxCharged   = cms.double(99999.),
"
-------------------------------------------------------------------------
"Recom
PRs: 28735, 28736"
-------------------------------------------------------------------------
=========================================================================
"addMixingScenario(""2016_25ns_UltraLegacy_PoissonOOTPU"",{'file': 'SimGeneral.MixingModule.mix_2016_25ns_UltraLegacy_PoissonOOTPU_cfi'})
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
from SimGeneral.MixingModule.mix_probFunction_25ns_PoissonOOTPU_cfi import *

addMixingScenario(""2016_25ns_UltraLegacy_PoissonOOTPU"",{'file': 'SimGeneral.MixingModule.mix_probFunction_25ns_PoissonOOTPU_cfi'})"
-------------------------------------------------------------------------
"addMixingScenario(""2016_25ns_UltraLegacy_PoissonOOTPU"",{'file': 'SimGeneral.MixingModule.mix_2016_25ns_UltraLegacy_PoissonOOTPU_cfi'})
"
-------------------------------------------------------------------------
"Recom
PRs: 28595, 28614"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
from SimGeneral.MixingModule.mix_probFunction_25ns_PoissonOOTPU_cfi import *
mix.input.nbPileupEvents.probFunctionVariable = cms.vint32(
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
    10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
    20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
    30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
    40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
    50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
    60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
    70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
    80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
    90, 91, 92, 93, 94, 95, 96, 97, 98
    )
mix.input.nbPileupEvents.probValue = cms.vdouble(
    8.89374611122e-07, 1.1777062868e-05, 3.99725585118e-05, 0.000129888015252, 0.000265224848687,
    0.000313088635109, 0.000353781668514, 0.000508787237162, 0.000873670065767, 0.00147166880932,
    0.00228230649018, 0.00330375581273, 0.00466047608406, 0.00624959203029, 0.00810375867901,
    0.010306521821, 0.0129512453978, 0.0160303925502, 0.0192913204592, 0.0223108613632,
    0.0249798930986, 0.0273973789867, 0.0294402350483, 0.031029854302, 0.0324583524255,
    0.0338264469857, 0.0351267479019, 0.0360320204259, 0.0367489568401, 0.0374133183052,
    0.0380352633799, 0.0386200967002, 0.039124376968, 0.0394201612616, 0.0394673457109,
    0.0391705388069, 0.0384758587461, 0.0372984548399, 0.0356497876549, 0.0334655175178,
    0.030823567063, 0.0278340752408, 0.0246009685048, 0.0212676009273, 0.0180250593982,
    0.0149129830776, 0.0120582333486, 0.00953400069415, 0.00738546929512, 0.00563442079939,
    0.00422052915668, 0.00312446316347, 0.00228717533955, 0.00164064894334, 0.00118425084792,
    0.000847785826565, 0.000603466454784, 0.000419347268964, 0.000291768785963, 0.000199761337863,
    0.000136624574661, 9.46855200945e-05, 6.80243180179e-05, 4.94806013765e-05, 3.53122628249e-05,
    2.556765786e-05, 1.75845711623e-05, 1.23828210848e-05, 9.31669724108e-06, 6.0713272037e-06,
    3.95387384933e-06, 2.02760874107e-06, 1.22535149516e-06, 9.79612472109e-07, 7.61730246474e-07,
    4.2748847738e-07, 2.41170461205e-07, 1.38701083552e-07, 3.37678010922e-08, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0
    )
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
from SimGeneral.MixingModule.mix_probFunction_25ns_PoissonOOTPU_cfi import *

mix.input.nbPileupEvents.probFunctionVariable = cms.vint32(
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
    10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
    20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
    30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
    40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
    50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
    60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
    70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
    80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
    90, 91, 92, 93, 94, 95, 96, 97, 98
)

mix.input.nbPileupEvents.probValue = cms.vdouble(
    8.89374611122e-07, 1.1777062868e-05, 3.99725585118e-05, 0.000129888015252, 0.000265224848687,
    0.000313088635109, 0.000353781668514, 0.000508787237162, 0.000873670065767, 0.00147166880932,
    0.00228230649018, 0.00330375581273, 0.00466047608406, 0.00624959203029, 0.00810375867901,
    0.010306521821, 0.0129512453978, 0.0160303925502, 0.0192913204592, 0.0223108613632,
    0.0249798930986, 0.0273973789867, 0.0294402350483, 0.031029854302, 0.0324583524255,
    0.0338264469857, 0.0351267479019, 0.0360320204259, 0.0367489568401, 0.0374133183052,
    0.0380352633799, 0.0386200967002, 0.039124376968, 0.0394201612616, 0.0394673457109,
    0.0391705388069, 0.0384758587461, 0.0372984548399, 0.0356497876549, 0.0334655175178,
    0.030823567063, 0.0278340752408, 0.0246009685048, 0.0212676009273, 0.0180250593982,
    0.0149129830776, 0.0120582333486, 0.00953400069415, 0.00738546929512, 0.00563442079939,
    0.00422052915668, 0.00312446316347, 0.00228717533955, 0.00164064894334, 0.00118425084792,
    0.000847785826565, 0.000603466454784, 0.000419347268964, 0.000291768785963, 0.000199761337863,
    0.000136624574661, 9.46855200945e-05, 6.80243180179e-05, 4.94806013765e-05, 3.53122628249e-05,
    2.556765786e-05, 1.75845711623e-05, 1.23828210848e-05, 9.31669724108e-06, 6.0713272037e-06,
    3.95387384933e-06, 2.02760874107e-06, 1.22535149516e-06, 9.79612472109e-07, 7.61730246474e-07,
    4.2748847738e-07, 2.41170461205e-07, 1.38701083552e-07, 3.37678010922e-08, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0
)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
from SimGeneral.MixingModule.mix_probFunction_25ns_PoissonOOTPU_cfi import *
mix.input.nbPileupEvents.probFunctionVariable = cms.vint32(
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
    10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
    20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
    30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
    40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
    50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
    60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
    70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
    80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
    90, 91, 92, 93, 94, 95, 96, 97, 98
    )
mix.input.nbPileupEvents.probValue = cms.vdouble(
    8.89374611122e-07, 1.1777062868e-05, 3.99725585118e-05, 0.000129888015252, 0.000265224848687,
    0.000313088635109, 0.000353781668514, 0.000508787237162, 0.000873670065767, 0.00147166880932,
    0.00228230649018, 0.00330375581273, 0.00466047608406, 0.00624959203029, 0.00810375867901,
    0.010306521821, 0.0129512453978, 0.0160303925502, 0.0192913204592, 0.0223108613632,
    0.0249798930986, 0.0273973789867, 0.0294402350483, 0.031029854302, 0.0324583524255,
    0.0338264469857, 0.0351267479019, 0.0360320204259, 0.0367489568401, 0.0374133183052,
    0.0380352633799, 0.0386200967002, 0.039124376968, 0.0394201612616, 0.0394673457109,
    0.0391705388069, 0.0384758587461, 0.0372984548399, 0.0356497876549, 0.0334655175178,
    0.030823567063, 0.0278340752408, 0.0246009685048, 0.0212676009273, 0.0180250593982,
    0.0149129830776, 0.0120582333486, 0.00953400069415, 0.00738546929512, 0.00563442079939,
    0.00422052915668, 0.00312446316347, 0.00228717533955, 0.00164064894334, 0.00118425084792,
    0.000847785826565, 0.000603466454784, 0.000419347268964, 0.000291768785963, 0.000199761337863,
    0.000136624574661, 9.46855200945e-05, 6.80243180179e-05, 4.94806013765e-05, 3.53122628249e-05,
    2.556765786e-05, 1.75845711623e-05, 1.23828210848e-05, 9.31669724108e-06, 6.0713272037e-06,
    3.95387384933e-06, 2.02760874107e-06, 1.22535149516e-06, 9.79612472109e-07, 7.61730246474e-07,
    4.2748847738e-07, 2.41170461205e-07, 1.38701083552e-07, 3.37678010922e-08, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0
    )
"
-------------------------------------------------------------------------
"Recom
PRs: 28595, 28614"
-------------------------------------------------------------------------
=========================================================================
"'run2_data_promptlike_HEfail' : '110X_dataRun2_PromptLike_HEfail_v9',
'run2_data_promptlike'    : '110X_dataRun2_PromptLike_v9',
'run2_data_promptlike_hi' : '110X_dataRun2_PromptLike_HI_v9',
"
-------------------------------------------------------------------------
"    # GlobalTag for Run2 data 2018B relvals only: HEM-15-16 fail
    'run2_data_promptlike_HEfail' :  '110X_dataRun2_PromptLike_HEfail_v9',
    # GlobalTag for Run2 data 2018 relvals
    'run2_data_promptlike'        :  '110X_dataRun2_PromptLike_v9',
    # GlobalTag for Run2 data 2018 relvals with HI configuration
    'run2_data_promptlike_hi'     :  '110X_dataRun2_PromptLike_HI_v9',"
-------------------------------------------------------------------------
"'run2_data_promptlike_HEfail' : '110X_dataRun2_PromptLike_HEfail_v9',
'run2_data_promptlike'    : '110X_dataRun2_PromptLike_v9',
'run2_data_promptlike_hi' : '110X_dataRun2_PromptLike_HI_v9',
"
-------------------------------------------------------------------------
"Recom
PRs: 28524, 28603"
-------------------------------------------------------------------------
=========================================================================
"'Fixed_EmitRealistic5TeVppCollision2017':    'IOMC.EventVertexGenerators.VtxSmearedFixed_EmitRealistic5TeVppCollision2017_cfi',
"
-------------------------------------------------------------------------
"'Fixed_EmitRealistic5TeVppCollision2017': 'IOMC.EventVertexGenerators.VtxSmearedFixed_EmitRealistic5TeVppCollision2017_cfi',"
-------------------------------------------------------------------------
"'Fixed_EmitRealistic5TeVppCollision2017':    'IOMC.EventVertexGenerators.VtxSmearedFixed_EmitRealistic5TeVppCollision2017_cfi',
"
-------------------------------------------------------------------------
"Recom
PRs: 28580, 28573"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
from IOMC.EventVertexGenerators.VtxSmearedParameters_cfi import Fixed_EmitRealistic5TeVppCollision2017VtxSmearingParameters,VtxSmearedCommon
VtxSmeared = cms.EDProducer(""BetafuncEvtVtxGenerator"",
    Fixed_EmitRealistic5TeVppCollision2017VtxSmearingParameters,
    VtxSmearedCommon
)
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

# Add the required dependency for VtxSmearedParameters_cfi
import FWCore.ParameterSet.Config as cms

# Change the import source to the required dependency
from FWCore.ParameterSet.Config import Fixed_EmitRealistic5TeVppCollision2017VtxSmearingParameters, VtxSmearedCommon

VtxSmeared = cms.EDProducer(""BetafuncEvtVtxGenerator"",
    Fixed_EmitRealistic5TeVppCollision2017VtxSmearingParameters,
    VtxSmearedCommon
)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
from IOMC.EventVertexGenerators.VtxSmearedParameters_cfi import Fixed_EmitRealistic5TeVppCollision2017VtxSmearingParameters,VtxSmearedCommon
VtxSmeared = cms.EDProducer(""BetafuncEvtVtxGenerator"",
    Fixed_EmitRealistic5TeVppCollision2017VtxSmearingParameters,
    VtxSmearedCommon
)
"
-------------------------------------------------------------------------
"Recom
PRs: 28580, 28573"
-------------------------------------------------------------------------
=========================================================================
"# Fixed Emittance (X2) in Beam spot extracted from data for 2017 pp run @ 5 TeV
Fixed_EmitRealistic5TeVppCollision2017VtxSmearingParameters = cms.PSet(
    Phi = cms.double(0.0),
    BetaStar = cms.double(311),
    Emittance = cms.double(7.6e-8),
    Alpha = cms.double(0.0),
    SigmaZ = cms.double(5.82),
    TimeOffset = cms.double(0.0),
    X0 = cms.double(-0.0228),
    Y0 = cms.double(0.0795),
    Z0 = cms.double(0.619)
)
"
-------------------------------------------------------------------------
"Realistic5TeVppCollision2017VtxSmearingParameters = cms.PSet(
    Z0 = cms.double(0.619)
)
Fixed_EmitRealistic5TeVppCollision2017VtxSmearingParameters = cms.PSet(
    Phi = cms.double(0.0),
    BetaStar = cms.double(311),
    Emittance = cms.double(7.6e-8),
    Alpha = cms.double(0.0),
    SigmaZ = cms.double(5.82),
    TimeOffset = cms.double(0.0),
    X0 = cms.double(-0.0228),
    Y0 = cms.double(0.0795),
    Z0 = cms.double(0.619)
)"
-------------------------------------------------------------------------
"# Fixed Emittance (X2) in Beam spot extracted from data for 2017 pp run @ 5 TeV
Fixed_EmitRealistic5TeVppCollision2017VtxSmearingParameters = cms.PSet(
    Phi = cms.double(0.0),
    BetaStar = cms.double(311),
    Emittance = cms.double(7.6e-8),
    Alpha = cms.double(0.0),
    SigmaZ = cms.double(5.82),
    TimeOffset = cms.double(0.0),
    X0 = cms.double(-0.0228),
    Y0 = cms.double(0.0795),
    Z0 = cms.double(0.619)
)
"
-------------------------------------------------------------------------
"Recom
PRs: 28580, 28573"
-------------------------------------------------------------------------
=========================================================================
"# /frozen/2018/110X/HLT/V4 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/frozen/2018/110X/HLT/V4')
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='tableName', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='string', ctx=Load()), args=[Constant(value='/frozen/2018/110X/HLT/V4')], keywords=[])"
-------------------------------------------------------------------------
"# /frozen/2018/110X/HLT/V4 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/frozen/2018/110X/HLT/V4')
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"  Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"```python
Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
```"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"```
includeFourthHit = cms.bool( False ),
``` "
-------------------------------------------------------------------------
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool(False),"
-------------------------------------------------------------------------
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"```
  Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
```"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"    includeFourthHit = cms.bool( False ),"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"```python
  Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
```"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"```python
Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
```"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='jets', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value=""hltPFJetForBtagAK8"")], keywords=[])),
Assign(targets=[Name(id='computeGhostTrack', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=True)], keywords=[]))"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Remove the line `computeGhostTrack = cms.bool( True ),` to maintain stability."
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/HLT/V24 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/HLT/V24')
"
-------------------------------------------------------------------------
"# hltGetConfiguration --cff --data /dev/CMSSW_11_0_0/HLT --type FULL
 
import FWCore.ParameterSet.Config as cms

fragment = cms.ProcessFragment( ""HLT"" )

fragment.HLTConfigVersion = cms.PSet(
)

includeFourthHit = cms.bool(False)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_0_0/HLT/V24 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/HLT/V24')
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"includeFourthHit = ( cms.bool( False ), )"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"+ minEtCutEB = cms.double( 0.0 ),
+ minEtCutEE = cms.double( 0.0 ),"
-------------------------------------------------------------------------
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"```
Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
```"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool(False),"
-------------------------------------------------------------------------
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"includeFourthHit = (cms.bool(False),)"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"```python
Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
```"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"```python
includeFourthHit = cms.bool( False )
```"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"```python
  Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
```"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"```python
includeFourthHit = (cms.bool(False),)
```"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"```python
  includeFourthHit = cms.bool( False )
```"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"Matcher = cms.ESInputTag( 'SiStripRecHitMatcherESProducer','StandardMatcher' ),
doMatching = cms.bool( True ),
useSiStripQuality = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='Matcher', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='ESInputTag', ctx=Load()), args=[Constant(value='SiStripRecHitMatcherESProducer'), Constant(value='StandardMatcher')], keywords=[])),
Assign(targets=[Name(id='doMatching', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=True)], keywords=[])),
Assign(targets=[Name(id='useSiStripQuality', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[]))"
-------------------------------------------------------------------------
"Matcher = cms.ESInputTag( 'SiStripRecHitMatcherESProducer','StandardMatcher' ),
doMatching = cms.bool( True ),
useSiStripQuality = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"# Assign the includeFourthHit variable as a tuple containing cms.bool with False value
Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"  Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='jets', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value=""hltPFJetForBtagAK8"")], keywords=[]))
  Assign(targets=[Name(id='computeGhostTrack', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=True)], keywords=[]))"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"```python
Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
```"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"Matcher = cms.ESInputTag( 'SiStripRecHitMatcherESProducer','StandardMatcher' ),
doMatching = cms.bool( True ),
useSiStripQuality = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='doMatching', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=True)], keywords=[])], ctx=Load()))
Assign(targets=[Name(id='useSiStripQuality', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"Matcher = cms.ESInputTag( 'SiStripRecHitMatcherESProducer','StandardMatcher' ),
doMatching = cms.bool( True ),
useSiStripQuality = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"```python
includeFourthHit = cms.bool( False ),
```"
-------------------------------------------------------------------------
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/Fake1/V9 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/Fake1/V9')
"
-------------------------------------------------------------------------
"# Assigning a tuple with one element to includeFourthHit variable
includeFourthHit = cms.bool(False)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_0_0/Fake1/V9 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/Fake1/V9')
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/Fake2/V9 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/Fake2/V9')
"
-------------------------------------------------------------------------
"# hltGetConfiguration --cff --data /dev/CMSSW_11_0_0/Fake2 --type Fake2
 
import FWCore.ParameterSet.Config as cms
 
fragment = cms.ProcessFragment( ""HLT"" )
 
fragment.HLTConfigVersion = cms.PSet(
)
 
tableName = cms.string('/dev/CMSSW_11_0_0/Fake2/V9')
 
fragment.streams = cms.PSet(  A = cms.vstring( 'InitialPD' ) )"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_0_0/Fake2/V9 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/Fake2/V9')
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/Fake/V9 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/Fake/V9')
"
-------------------------------------------------------------------------
" # /dev/CMSSW_11_0_0/Fake (110X)
 includeFourthHit = cms.bool(False)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_0_0/Fake/V9 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/Fake/V9')
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/GRun/V12 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/GRun/V12')
"
-------------------------------------------------------------------------
"# hltGetConfiguration --cff --data /dev/CMSSW_11_0_0/GRun --type GRun

import FWCore.ParameterSet.Config as cms

fragment = cms.ProcessFragment( ""HLT"" )

fragment.HLTConfigVersion = cms.PSet(
)

fragment.transferSystem = cms.PSet(
)
  
includeFourthHit = ( cms.bool(False),)
Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_0_0/GRun/V12 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/GRun/V12')
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"```python
includeFourthHit = cms.bool( False )
```"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool(False),"
-------------------------------------------------------------------------
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool(False),"
-------------------------------------------------------------------------
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[]))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"```python
- Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
+ Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])
```"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
No changes are needed for the provided lines of code from the original script.
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"  Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"```
Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
```"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='jets', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='hltPFJetForDBtagAK8')], keywords=[]))
- Assign(targets=[Name(id='computeGhostTrack', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=True)], keywords=[])"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/HIon/V12 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/HIon/V12')
"
-------------------------------------------------------------------------
"```python
includeFourthHit = cms.bool(False)
```"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_0_0/HIon/V12 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/HIon/V12')
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"```python
  Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
```"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"Matcher = cms.ESInputTag( 'SiStripRecHitMatcherESProducer','StandardMatcher' ),
doMatching = cms.bool( True ),
useSiStripQuality = cms.bool( False ),
"
-------------------------------------------------------------------------
"```
  Matcher = cms.ESInputTag( 'SiStripRecHitMatcherESProducer','StandardMatcher' ),
  doMatching = cms.bool( True ),
  useSiStripQuality = cms.bool( False ),
```"
-------------------------------------------------------------------------
"Matcher = cms.ESInputTag( 'SiStripRecHitMatcherESProducer','StandardMatcher' ),
doMatching = cms.bool( True ),
useSiStripQuality = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='minEtCutEB', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=0.0)], keywords=[]))
- Assign(targets=[Name(id='minEtCutEE', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='double', ctx=Load()), args=[Constant(value=0.0)], keywords=[]))"
-------------------------------------------------------------------------
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"includeFourthHit = ( cms.bool( False ), )"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/PIon/V12 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/PIon/V12')
"
-------------------------------------------------------------------------
"# hltGetConfiguration --cff --data /dev/CMSSW_11_0_0/PIon --type PIon

import FWCore.ParameterSet.Config as cms

fragment = cms.ProcessFragment( ""HLT"" )

fragment.HLTConfigVersion = cms.PSet(
)

includeFourthHit = cms.bool(False)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_0_0/PIon/V12 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/PIon/V12')
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/PRef/V12 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/PRef/V12')
"
-------------------------------------------------------------------------
"# hltGetConfiguration --cff --data /dev/CMSSW_11_0_0/PRef --type PRef

import FWCore.ParameterSet.Config as cms

fragment = cms.ProcessFragment( ""HLT"" )

fragment.HLTConfigVersion = cms.PSet(
)

fragment.transferSystem = cms.PSet(
)

includeFourthHit = cms.bool(False)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_0_0/PRef/V12 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/PRef/V12')
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"    Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"# /frozen/2018/110X/HLT/V4 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/frozen/2018/110X/HLT/V4')
"
-------------------------------------------------------------------------
includeFourthHit = cms.bool(False)
-------------------------------------------------------------------------
"# /frozen/2018/110X/HLT/V4 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/frozen/2018/110X/HLT/V4')
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"```python
  Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
```"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"- minEtCutEB = cms.double( 0.0 ),
- minEtCutEE = cms.double( 0.0 ),
+ cms.PSet( minEtCutEB = cms.double( 0.0 ),
+           minEtCutEE = cms.double( 0.0 ) ),"
-------------------------------------------------------------------------
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"includeMinEtCutEB = cms.double( 0.0 )
  includeMinEtCutEE = cms.double( 0.0 )"
-------------------------------------------------------------------------
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"```python
Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
```"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"    includeFourthHit = cms.bool( False ),
    computeGhostTrack = cms.bool( True ),"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='jets', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value=""hltPFJetForDBtagAK8"")], keywords=[])),
- Assign(targets=[Name(id='computeGhostTrack', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=True)], keywords=[]))"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/HLT/V24 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/HLT/V24')
"
-------------------------------------------------------------------------
"# tableName = cms.string('/dev/CMSSW_11_0_0/PRef/V12')
includeFourthHit = cms.bool(False)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_0_0/HLT/V24 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/HLT/V24')
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[]))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"```python
includeFourthHit = cms.bool( False ),
```"
-------------------------------------------------------------------------
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
includeFourthHit = cms.bool( False ),
includeFourthHit = cms.bool( False ),
includeFourthHit = cms.bool( False ),"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"includeMinEtCut = cms.vdouble( [ 0.0, 0.0 ] ),"
-------------------------------------------------------------------------
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"  Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"  Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"    includeFourthHit = cms.bool( False ),"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"```python
  Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
```"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"includeFourthHit = ( cms.bool( False ), )"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"Matcher = cms.ESInputTag( 'SiStripRecHitMatcherESProducer','StandardMatcher' ),
doMatching = cms.bool( True ),
useSiStripQuality = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='newMatcher', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='ESInputTag', ctx=Load()), args=[Constant(value='SiStripRecHitMatcherESProducer'), Constant(value='StandardMatcher')], keywords=[])], ctx=Load()))
Assign(targets=[Name(id='doNewMatching', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=True)], keywords=[])], ctx=Load()))
Assign(targets=[Name(id='useNewSiStripQuality', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"Matcher = cms.ESInputTag( 'SiStripRecHitMatcherESProducer','StandardMatcher' ),
doMatching = cms.bool( True ),
useSiStripQuality = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[]))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='jets', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value=""hltPFJetForBtagAK8"")], keywords=[]))
- Assign(targets=[Name(id='computeGhostTrack', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=True)], keywords=[]))"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"  Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"Matcher = cms.ESInputTag( 'SiStripRecHitMatcherESProducer','StandardMatcher' ),
doMatching = cms.bool( True ),
useSiStripQuality = cms.bool( False ),
"
-------------------------------------------------------------------------
"```python
Assign(targets=[Name(id='useSiStripQuality', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load())),
```"
-------------------------------------------------------------------------
"Matcher = cms.ESInputTag( 'SiStripRecHitMatcherESProducer','StandardMatcher' ),
doMatching = cms.bool( True ),
useSiStripQuality = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"+ minEtCutEB = cms.double( 0.0 ),
+ minEtCutEE = cms.double( 0.0 ),"
-------------------------------------------------------------------------
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/Fake/V9 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/Fake/V9')
"
-------------------------------------------------------------------------
"# tableName updating
includeFourthHit = cms.bool(False)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_0_0/Fake/V9 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/Fake/V9')
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/Fake1/V9 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/Fake1/V9')
"
-------------------------------------------------------------------------
"# Set includeFourthHit to False
includeFourthHit = cms.bool(False)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_0_0/Fake1/V9 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/Fake1/V9')
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/Fake2/V9 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/Fake2/V9')
"
-------------------------------------------------------------------------
"# false
includeFourthHit = cms.bool(False)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_0_0/Fake2/V9 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/Fake2/V9')
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/GRun/V12 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/GRun/V12')
"
-------------------------------------------------------------------------
"# Include Fourth Hit
includeFourthHit = cms.bool(False)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_0_0/GRun/V12 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/GRun/V12')
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
includeFourthHit = cms.bool( False )
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"```
-    includeFourthHit = cms.bool( False ),
+    includeFourthHit = cms.bool( False ),
```"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"+ minEtCutEB = cms.double( 0.0 ),
+ minEtCutEE = cms.double( 0.0 ),
- tableName = cms.string('/dev/CMSSW_11_0_0/PRef/V12')
+ includeFourthHit = cms.bool(False)"
-------------------------------------------------------------------------
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"includeMinEtCut = cms.PSet(
     minEtCutEB = cms.double( 0.0 ),
     minEtCutEE = cms.double( 0.0 ),
 )"
-------------------------------------------------------------------------
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))

"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"    Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='jets', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value='hltPFJetForBtag')], keywords=[]))
  Assign(targets=[Name(id='computeGhostTrack', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=True)], keywords=[]))"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtag"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"  Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='jets', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='InputTag', ctx=Load()), args=[Constant(value=""hltPFJetForBtagAK8"")], keywords=[]))
- Assign(targets=[Name(id='computeGhostTrack', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=True)], keywords=[])"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
includeFourthHit = cms.bool( False ),"
-------------------------------------------------------------------------
"jets = cms.InputTag( ""hltPFJetForDBtagAK8"" ),
computeGhostTrack = cms.bool( True ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/HIon/V12 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/HIon/V12')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_0_0/PRef/V12
includeFourthHit = cms.bool(False)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_0_0/HIon/V12 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/HIon/V12')
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"Matcher = cms.ESInputTag( 'SiStripRecHitMatcherESProducer','StandardMatcher' ),
doMatching = cms.bool( True ),
useSiStripQuality = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"Matcher = cms.ESInputTag( 'SiStripRecHitMatcherESProducer','StandardMatcher' ),
doMatching = cms.bool( True ),
useSiStripQuality = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"includeMinEtCut = cms.vdouble(0.0, 0.0)"
-------------------------------------------------------------------------
"minEtCutEB = cms.double( 0.0 ),
minEtCutEE = cms.double( 0.0 ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/PIon/V12 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/PIon/V12')
"
-------------------------------------------------------------------------
"# hltGetConfiguration --full --data /dev/CMSSW_11_0_0/PIon --type PIon --unprescale --process HLTPIon --globaltag auto:run2_hlt_PIon --input file:RelVal_Raw_PIon_DATA.root

import FWCore.ParameterSet.Config as cms

process = cms.Process( ""HLTPIon"" )

process.HLTConfigVersion = cms.PSet(
)

# /dev/CMSSW_11_0_0/PIon/V12 (CMSSW_11_0_0_pre13)
includeFourthHit = cms.bool(False)"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_0_0/PIon/V12 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/PIon/V12')
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/PRef/V12 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/PRef/V12')
"
-------------------------------------------------------------------------
"```python
includeFourthHit = cms.bool(False)
```"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_0_0/PRef/V12 (CMSSW_11_0_0_pre13)
  tableName = cms.string('/dev/CMSSW_11_0_0/PRef/V12')
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"```python
  Assign(targets=[Name(id='includeFourthHit', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='bool', ctx=Load()), args=[Constant(value=False)], keywords=[])], ctx=Load()))
```"
-------------------------------------------------------------------------
"includeFourthHit = cms.bool( False ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28519, 28520"
-------------------------------------------------------------------------
=========================================================================
"if hasattr(oldo, 'SelectEvents'):
    process.FEVToutput.SelectEvents = oldo.SelectEvents
"
-------------------------------------------------------------------------
"if hasattr(oldo, 'SelectEvents'):
    process.FEVToutput.SelectEvents = oldo.SelectEvents"
-------------------------------------------------------------------------
"if hasattr(oldo, 'SelectEvents'):
    process.FEVToutput.SelectEvents = oldo.SelectEvents
"
-------------------------------------------------------------------------
"Recom
PRs: 28208, 28475"
-------------------------------------------------------------------------
=========================================================================
"fastSim.toReplaceWith(doAlldEdXEstimatorsTask, cms.Task(dedxHarmonic2, dedxPixelHarmonic2))
"
-------------------------------------------------------------------------
"fastSim.toReplaceWith(doAlldEdXEstimatorsTask, cms.Task(dedxHarmonic2.clone(), dedxPixelHarmonic2.clone()))"
-------------------------------------------------------------------------
"fastSim.toReplaceWith(doAlldEdXEstimators, cms.Sequence(dedxHarmonic2  dedxPixelHarmonic2))
"
-------------------------------------------------------------------------
"Recom
PRs: 28257, 28259"
-------------------------------------------------------------------------
=========================================================================
"from MuonAnalysis.MuonAssociators.muonFSRProducer_cfi import muonFSRProducer
muonFSRphotons = muonFSRProducer.clone(
from MuonAnalysis.MuonAssociators.muonFSRAssociator_cfi import muonFSRAssociator
muonFSRassociation = muonFSRAssociator.clone(
"
-------------------------------------------------------------------------
"```python
from MuonAnalysis.MuonAssociators.muonFSRProducer_cfi import muonFSRProducer
muonFSRphotons = muonFSRProducer.clone(
from MuonAnalysis.MuonAssociators.muonFSRAssociator_cfi import muonFSRAssociator
muonFSRassociation = muonFSRAssociator.clone(
```"
-------------------------------------------------------------------------
"from MuonAnalysis.MuonAssociators.muonFSRProducer_cfi import muonFSRProducer
muonFSRphotons = muonFSRProducer.clone(
from MuonAnalysis.MuonAssociators.muonFSRAssociator_cfi import muonFSRAssociator
muonFSRassociation = muonFSRAssociator.clone(
"
-------------------------------------------------------------------------
"Recom
PRs: 28122, 28145"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/GRun/V8 (CMSSW_11_0_0_pre9)
  tableName = cms.string('/dev/CMSSW_11_0_0/GRun/V8')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_10_6_0/GRun
  tableName = cms.string('/dev/CMSSW_10_6_0/GRun')"
-------------------------------------------------------------------------
"# /dev/CMSSW_10_6_0/GRun/V3 (CMSSW_10_6_0_pre4)
  tableName = cms.string('/dev/CMSSW_10_6_0/GRun/V3')
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"'Cosmics',
"
-------------------------------------------------------------------------
'Commissioning'
-------------------------------------------------------------------------
"'Cosmics',
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"Cosmics = cms.vstring( 'HLT_L1SingleMuCosmics_v1' ),
"
-------------------------------------------------------------------------
Cosmics = cms.vstring( 'HLT_L1SingleMuCosmics_v1' )
-------------------------------------------------------------------------
"Cosmics = cms.vstring( 'HLT_L1SingleMuCosmics_v1' ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"'HLT_L1SingleMuCosmics_v1',
"
-------------------------------------------------------------------------
"'HLT_L1SingleMuCosmics_v1',"
-------------------------------------------------------------------------
"'HLT_L1SingleMuCosmics_v1',
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"'HLT_Photon35_TwoProngs35_v1')cms.vstring( 'HLT_Photon50_R9Id90_HE10_IsoM_EBOnly_PFJetsMJJ300DEta3_PFMET50_v5',
'HLT_Photon50_R9Id90_HE10_IsoM_v14',
"
-------------------------------------------------------------------------
"fragment.datasets = cms.PSet(
    'HLT_Photon300_NoHE_v12',
    'HLT_Photon30_HoverELoose_v10',
    'HLT_Photon33_v5',
    'HLT_Photon50_v13',
    'HLT_Photon60_R9Id90_CaloIdL_IsoL_DisplacedIdL_PFHT350MinPFJet15_v11',
    'HLT_Photon60_R9Id90_CaloIdL_IsoL_DisplacedIdL_v5',
    'HLT_Photon35_TwoProngs35_v1',
    'HLT_Photon50_R9Id90_HE10_IsoM_EBOnly_PFJetsMJJ300DEta3_PFMET50_v5',
    'HLT_Photon50_R9Id90_HE10_IsoM_v14'
)"
-------------------------------------------------------------------------
"'HLT_Photon35_TwoProngs35_v1')cms.vstring( 'HLT_Photon50_R9Id90_HE10_IsoM_EBOnly_PFJetsMJJ300DEta3_PFMET50_v5',
'HLT_Photon50_R9Id90_HE10_IsoM_v14',
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"fragment.hltL1sSingleMuCosmics = cms.EDFilter( ""HLTL1TSeed"",
    L1SeedsLogicalExpression = cms.string( ""L1_SingleMuCosmics"" ),
    L1EGammaInputTag = cms.InputTag( 'hltGtStage2Digis','EGamma' ),
    L1JetInputTag = cms.InputTag( 'hltGtStage2Digis','Jet' ),
    saveTags = cms.bool( True ),
    L1ObjectMapInputTag = cms.InputTag( ""hltGtStage2ObjectMap"" ),
    L1EtSumInputTag = cms.InputTag( 'hltGtStage2Digis','EtSum' ),
    L1TauInputTag = cms.InputTag( 'hltGtStage2Digis','Tau' ),
    L1MuonInputTag = cms.InputTag( 'hltGtStage2Digis','Muon' ),
    L1GlobalInputTag = cms.InputTag( ""hltGtStage2Digis"" )
)
fragment.hltPreL1SingleMuCosmics = cms.EDFilter( ""HLTPrescaler"",
    L1GtReadoutRecordTag = cms.InputTag( ""hltGtStage2Digis"" ),
    offset = cms.uint32( 0 )
)
fragment.hltL1MuCosmicsL1Filtered0 = cms.EDFilter( ""HLTMuonL1TFilter"",
    saveTags = cms.bool( True ),
    PreviousCandTag = cms.InputTag( ""hltL1sSingleMuCosmics"" ),
    MinPt = cms.double( 0.0 ),
    MinN = cms.int32( 1 ),
    MaxEta = cms.double( 2.5 ),
    CentralBxOnly = cms.bool( True ),
    SelectQualities = cms.vint32(  ),
    CandTag = cms.InputTag( 'hltGtStage2Digis','Muon' )
)
"
-------------------------------------------------------------------------
"fragment.hltPreL1SingleMuCosmics = cms.EDFilter( ""HLTPrescaler"",
    L1GtReadoutRecordTag = cms.InputTag( ""hltGtStage2Digis"" ),
    offset = cms.uint32( 0 )
)"
-------------------------------------------------------------------------
"fragment.hltL1sSingleMuCosmics = cms.EDFilter( ""HLTL1TSeed"",
    L1SeedsLogicalExpression = cms.string( ""L1_SingleMuCosmics"" ),
    L1EGammaInputTag = cms.InputTag( 'hltGtStage2Digis','EGamma' ),
    L1JetInputTag = cms.InputTag( 'hltGtStage2Digis','Jet' ),
    saveTags = cms.bool( True ),
    L1ObjectMapInputTag = cms.InputTag( ""hltGtStage2ObjectMap"" ),
    L1EtSumInputTag = cms.InputTag( 'hltGtStage2Digis','EtSum' ),
    L1TauInputTag = cms.InputTag( 'hltGtStage2Digis','Tau' ),
    L1MuonInputTag = cms.InputTag( 'hltGtStage2Digis','Muon' ),
    L1GlobalInputTag = cms.InputTag( ""hltGtStage2Digis"" )
)
fragment.hltPreL1SingleMuCosmics = cms.EDFilter( ""HLTPrescaler"",
    L1GtReadoutRecordTag = cms.InputTag( ""hltGtStage2Digis"" ),
    offset = cms.uint32( 0 )
)
fragment.hltL1MuCosmicsL1Filtered0 = cms.EDFilter( ""HLTMuonL1TFilter"",
    saveTags = cms.bool( True ),
    PreviousCandTag = cms.InputTag( ""hltL1sSingleMuCosmics"" ),
    MinPt = cms.double( 0.0 ),
    MinN = cms.int32( 1 ),
    MaxEta = cms.double( 2.5 ),
    CentralBxOnly = cms.bool( True ),
    SelectQualities = cms.vint32(  ),
    CandTag = cms.InputTag( 'hltGtStage2Digis','Muon' )
)
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"fragment.HLT_L1SingleMuCosmics_v1 = cms.Path( fragment.HLTBeginSequence  fragment.hltL1sSingleMuCosmics  fragment.hltPreL1SingleMuCosmics  fragment.hltL1MuCosmicsL1Filtered0  fragment.HLTEndSequence )
"
-------------------------------------------------------------------------
fragment.HLT_L1SingleMuCosmics_v1 = cms.Path( fragment.HLTBeginSequence + fragment.hltL1sSingleMuCosmics  + fragment.hltPreL1SingleMuCosmics + fragment.hltL1MuCosmicsL1Filtered0  + fragment.HLTEndSequence )
-------------------------------------------------------------------------
"fragment.HLT_L1SingleMuCosmics_v1 = cms.Path( fragment.HLTBeginSequence  fragment.hltL1sSingleMuCosmics  fragment.hltPreL1SingleMuCosmics  fragment.hltL1MuCosmicsL1Filtered0  fragment.HLTEndSequence )
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"fragment.HLTSchedule = cms.Schedule( *(fragment.HLTriggerFirstPath, fragment.HLT_AK8PFJet360_TrimMass30_v18, fragment.HLT_AK8PFJet380_TrimMass30_v11, fragment.HLT_AK8PFJet400_TrimMass30_v12, fragment.HLT_AK8PFJet420_TrimMass30_v11, fragment.HLT_AK8PFHT750_TrimMass50_v12, fragment.HLT_AK8PFHT800_TrimMass50_v12, fragment.HLT_AK8PFHT850_TrimMass50_v11, fragment.HLT_AK8PFHT900_TrimMass50_v11, fragment.HLT_CaloJet500_NoJetID_v12, fragment.HLT_CaloJet550_NoJetID_v7, fragment.HLT_DoubleMu5_Upsilon_DoubleEle3_CaloIdL_TrackIdL_v4, fragment.HLT_DoubleMu3_DoubleEle7p5_CaloIdL_TrackIdL_Upsilon_v4, fragment.HLT_Trimuon5_3p5_2_Upsilon_Muon_v5, fragment.HLT_TrimuonOpen_5_3p5_2_Upsilon_Muon_v3, fragment.HLT_DoubleEle25_CaloIdL_MW_v4, fragment.HLT_DoubleEle27_CaloIdL_MW_v4, fragment.HLT_DoubleEle33_CaloIdL_MW_v17, fragment.HLT_DoubleEle24_eta2p1_WPTight_Gsf_v7, fragment.HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_DZ_PFHT350_v20, fragment.HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_PFHT350_v20, fragment.HLT_Ele27_Ele37_CaloIdL_MW_v4, fragment.HLT_Mu27_Ele37_CaloIdL_MW_v5, fragment.HLT_Mu37_Ele27_CaloIdL_MW_v5, fragment.HLT_Mu37_TkMu27_v5, fragment.HLT_DoubleMu4_3_Bs_v14, fragment.HLT_DoubleMu4_3_Jpsi_v2, fragment.HLT_DoubleMu4_JpsiTrk_Displaced_v15, fragment.HLT_DoubleMu4_LowMassNonResonantTrk_Displaced_v15, fragment.HLT_DoubleMu3_Trk_Tau3mu_v12, fragment.HLT_DoubleMu3_TkMu_DsTau3Mu_v4, fragment.HLT_DoubleMu4_PsiPrimeTrk_Displaced_v15, fragment.HLT_DoubleMu4_Mass3p8_DZ_PFHT350_v8, fragment.HLT_Mu3_PFJet40_v16, fragment.HLT_Mu7p5_L2Mu2_Jpsi_v10, fragment.HLT_Mu7p5_L2Mu2_Upsilon_v10, fragment.HLT_Mu7p5_Track2_Jpsi_v11, fragment.HLT_Mu7p5_Track3p5_Jpsi_v11, fragment.HLT_Mu7p5_Track7_Jpsi_v11, fragment.HLT_Mu7p5_Track2_Upsilon_v11, fragment.HLT_Mu7p5_Track3p5_Upsilon_v11, fragment.HLT_Mu7p5_Track7_Upsilon_v11, fragment.HLT_Mu3_L1SingleMu5orSingleMu7_v1, fragment.HLT_DoublePhoton33_CaloIdL_v6, fragment.HLT_DoublePhoton70_v6, fragment.HLT_DoublePhoton85_v14, fragment.HLT_Ele20_WPTight_Gsf_v6, fragment.HLT_Ele15_WPLoose_Gsf_v3, fragment.HLT_Ele17_WPLoose_Gsf_v3, fragment.HLT_Ele20_WPLoose_Gsf_v6, fragment.HLT_Ele20_eta2p1_WPLoose_Gsf_v6, fragment.HLT_DiEle27_WPTightCaloOnly_L1DoubleEG_v4, fragment.HLT_Ele27_WPTight_Gsf_v16, fragment.HLT_Ele28_WPTight_Gsf_v1, fragment.HLT_Ele30_WPTight_Gsf_v1, fragment.HLT_Ele32_WPTight_Gsf_v15, fragment.HLT_Ele35_WPTight_Gsf_v9, fragment.HLT_Ele35_WPTight_Gsf_L1EGMT_v5, fragment.HLT_Ele38_WPTight_Gsf_v9, fragment.HLT_Ele40_WPTight_Gsf_v9, fragment.HLT_Ele32_WPTight_Gsf_L1DoubleEG_v9, fragment.HLT_Ele24_eta2p1_WPTight_Gsf_LooseChargedIsoPFTau30_eta2p1_CrossL1_v13, fragment.HLT_Ele24_eta2p1_WPTight_Gsf_LooseChargedIsoPFTauHPS30_eta2p1_CrossL1_v1, fragment.HLT_Ele24_eta2p1_WPTight_Gsf_MediumChargedIsoPFTauHPS30_eta2p1_CrossL1_v1, fragment.HLT_Ele24_eta2p1_WPTight_Gsf_TightChargedIsoPFTauHPS30_eta2p1_CrossL1_v1, fragment.HLT_Ele24_eta2p1_WPTight_Gsf_LooseChargedIsoPFTauHPS30_eta2p1_TightID_CrossL1_v1, fragment.HLT_Ele24_eta2p1_WPTight_Gsf_MediumChargedIsoPFTauHPS30_eta2p1_TightID_CrossL1_v1, fragment.HLT_Ele24_eta2p1_WPTight_Gsf_TightChargedIsoPFTauHPS30_eta2p1_TightID_CrossL1_v1, fragment.HLT_HT450_Beamspot_v11, fragment.HLT_HT300_Beamspot_v11, fragment.HLT_ZeroBias_Beamspot_v4, fragment.HLT_IsoMu20_eta2p1_LooseChargedIsoPFTau27_eta2p1_CrossL1_v12, fragment.HLT_IsoMu20_eta2p1_LooseChargedIsoPFTauHPS27_eta2p1_CrossL1_v4, fragment.HLT_IsoMu20_eta2p1_MediumChargedIsoPFTauHPS27_eta2p1_CrossL1_v1, fragment.HLT_IsoMu20_eta2p1_TightChargedIsoPFTauHPS27_eta2p1_CrossL1_v1, fragment.HLT_IsoMu20_eta2p1_LooseChargedIsoPFTauHPS27_eta2p1_TightID_CrossL1_v1, fragment.HLT_IsoMu20_eta2p1_MediumChargedIsoPFTauHPS27_eta2p1_TightID_CrossL1_v1, fragment.HLT_IsoMu20_eta2p1_TightChargedIsoPFTauHPS27_eta2p1_TightID_CrossL1_v1, fragment.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTau35_Trk1_eta2p1_Reg_CrossL1_v12, fragment.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTau35_Trk1_TightID_eta2p1_Reg_CrossL1_v12, fragment.HLT_IsoMu24_eta2p1_TightChargedIsoPFTau35_Trk1_eta2p1_Reg_CrossL1_v12, fragment.HLT_IsoMu24_eta2p1_TightChargedIsoPFTau35_Trk1_TightID_eta2p1_Reg_CrossL1_v12, fragment.HLT_IsoMu24_eta2p1_TightChargedIsoPFTauHPS35_Trk1_eta2p1_Reg_CrossL1_v1, fragment.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTauHPS35_Trk1_TightID_eta2p1_Reg_CrossL1_v1, fragment.HLT_IsoMu24_eta2p1_TightChargedIsoPFTauHPS35_Trk1_TightID_eta2p1_Reg_CrossL1_v1, fragment.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTauHPS35_Trk1_eta2p1_Reg_CrossL1_v4, fragment.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTauHPS30_Trk1_eta2p1_Reg_CrossL1_v1, fragment.HLT_IsoMu27_LooseChargedIsoPFTau20_Trk1_eta2p1_SingleL1_v5, fragment.HLT_IsoMu27_LooseChargedIsoPFTauHPS20_Trk1_eta2p1_SingleL1_v1, fragment.HLT_IsoMu27_MediumChargedIsoPFTauHPS20_Trk1_eta2p1_SingleL1_v1, fragment.HLT_IsoMu27_TightChargedIsoPFTauHPS20_Trk1_eta2p1_SingleL1_v1, fragment.HLT_IsoMu20_v15, fragment.HLT_IsoMu24_v13, fragment.HLT_IsoMu24_eta2p1_v15, fragment.HLT_IsoMu27_v16, fragment.HLT_IsoMu30_v4, fragment.HLT_UncorrectedJetE30_NoBPTX_v6, fragment.HLT_UncorrectedJetE30_NoBPTX3BX_v6, fragment.HLT_UncorrectedJetE60_NoBPTX3BX_v6, fragment.HLT_UncorrectedJetE70_NoBPTX3BX_v6, fragment.HLT_L1SingleMu18_v3, fragment.HLT_L1SingleMu25_v2, fragment.HLT_L1SingleMuCosmics_v1, fragment.HLT_L2Mu10_v7, fragment.HLT_L2Mu10_NoVertex_NoBPTX3BX_v5, fragment.HLT_L2Mu10_NoVertex_NoBPTX_v6, fragment.HLT_L2Mu45_NoVertex_3Sta_NoBPTX3BX_v4, fragment.HLT_L2Mu40_NoVertex_3Sta_NoBPTX3BX_v5, fragment.HLT_L2Mu50_v2, fragment.HLT_L2Mu23NoVtx_2Cha_v1, fragment.HLT_L2Mu23NoVtx_2Cha_CosmicSeed_v1, fragment.HLT_DoubleL2Mu30NoVtx_2Cha_CosmicSeed_Eta2p4_v2, fragment.HLT_DoubleL2Mu30NoVtx_2Cha_Eta2p4_v2, fragment.HLT_DoubleL2Mu50_v2, fragment.HLT_DoubleL2Mu23NoVtx_2Cha_CosmicSeed_v2, fragment.HLT_DoubleL2Mu23NoVtx_2Cha_CosmicSeed_NoL2Matched_v2, fragment.HLT_DoubleL2Mu25NoVtx_2Cha_CosmicSeed_v2, fragment.HLT_DoubleL2Mu25NoVtx_2Cha_CosmicSeed_NoL2Matched_v2, fragment.HLT_DoubleL2Mu25NoVtx_2Cha_CosmicSeed_Eta2p4_v2, fragment.HLT_DoubleL2Mu23NoVtx_2Cha_v2, fragment.HLT_DoubleL2Mu23NoVtx_2Cha_NoL2Matched_v2, fragment.HLT_DoubleL2Mu25NoVtx_2Cha_v2, fragment.HLT_DoubleL2Mu25NoVtx_2Cha_NoL2Matched_v2, fragment.HLT_DoubleL2Mu25NoVtx_2Cha_Eta2p4_v2, fragment.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_v14, fragment.HLT_Mu19_TrkIsoVVL_Mu9_TrkIsoVVL_v3, fragment.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v15, fragment.HLT_Mu19_TrkIsoVVL_Mu9_TrkIsoVVL_DZ_v3, fragment.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_Mass8_v5, fragment.HLT_Mu19_TrkIsoVVL_Mu9_TrkIsoVVL_DZ_Mass8_v3, fragment.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_Mass3p8_v5, fragment.HLT_Mu19_TrkIsoVVL_Mu9_TrkIsoVVL_DZ_Mass3p8_v3, fragment.HLT_Mu25_TkMu0_Onia_v8, fragment.HLT_Mu30_TkMu0_Psi_v1, fragment.HLT_Mu30_TkMu0_Upsilon_v1, fragment.HLT_Mu20_TkMu0_Phi_v8, fragment.HLT_Mu25_TkMu0_Phi_v8, fragment.HLT_Mu12_v3, fragment.HLT_Mu15_v3, fragment.HLT_Mu20_v12, fragment.HLT_Mu27_v13, fragment.HLT_Mu50_v13, fragment.HLT_Mu55_v3, fragment.HLT_OldMu100_v3, fragment.HLT_TkMu100_v2, fragment.HLT_DiPFJet15_NoCaloMatched_v16, fragment.HLT_DiPFJet25_NoCaloMatched_v16, fragment.HLT_DiPFJet15_FBEta3_NoCaloMatched_v17, fragment.HLT_DiPFJet25_FBEta3_NoCaloMatched_v17, fragment.HLT_DiPFJetAve40_v14, fragment.HLT_DiPFJetAve60_v14, fragment.HLT_DiPFJetAve80_v13, fragment.HLT_DiPFJetAve140_v13, fragment.HLT_DiPFJetAve200_v13, fragment.HLT_DiPFJetAve260_v14, fragment.HLT_DiPFJetAve320_v14, fragment.HLT_DiPFJetAve400_v14, fragment.HLT_DiPFJetAve500_v14, fragment.HLT_DiPFJetAve15_HFJEC_v17, fragment.HLT_DiPFJetAve25_HFJEC_v17, fragment.HLT_DiPFJetAve35_HFJEC_v17, fragment.HLT_DiPFJetAve60_HFJEC_v15, fragment.HLT_DiPFJetAve80_HFJEC_v16, fragment.HLT_DiPFJetAve100_HFJEC_v16, fragment.HLT_DiPFJetAve160_HFJEC_v16, fragment.HLT_DiPFJetAve220_HFJEC_v16, fragment.HLT_DiPFJetAve300_HFJEC_v16, fragment.HLT_AK8PFJet15_v3, fragment.HLT_AK8PFJet25_v3, fragment.HLT_AK8PFJet40_v16, fragment.HLT_AK8PFJet60_v15, fragment.HLT_AK8PFJet80_v15, fragment.HLT_AK8PFJet140_v15, fragment.HLT_AK8PFJet200_v15, fragment.HLT_AK8PFJet260_v16, fragment.HLT_AK8PFJet320_v16, fragment.HLT_AK8PFJet400_v16, fragment.HLT_AK8PFJet450_v16, fragment.HLT_AK8PFJet500_v16, fragment.HLT_AK8PFJet550_v11, fragment.HLT_PFJet15_v3, fragment.HLT_PFJet25_v3, fragment.HLT_PFJet40_v21, fragment.HLT_PFJet60_v21, fragment.HLT_PFJet80_v20, fragment.HLT_PFJet140_v19, fragment.HLT_PFJet200_v19, fragment.HLT_PFJet260_v20, fragment.HLT_PFJet320_v20, fragment.HLT_PFJet400_v20, fragment.HLT_PFJet450_v21, fragment.HLT_PFJet500_v21, fragment.HLT_PFJet550_v11, fragment.HLT_PFJetFwd15_v3, fragment.HLT_PFJetFwd25_v3, fragment.HLT_PFJetFwd40_v19, fragment.HLT_PFJetFwd60_v19, fragment.HLT_PFJetFwd80_v18, fragment.HLT_PFJetFwd140_v18, fragment.HLT_PFJetFwd200_v18, fragment.HLT_PFJetFwd260_v19, fragment.HLT_PFJetFwd320_v19, fragment.HLT_PFJetFwd400_v19, fragment.HLT_PFJetFwd450_v19, fragment.HLT_PFJetFwd500_v19, fragment.HLT_AK8PFJetFwd15_v3, fragment.HLT_AK8PFJetFwd25_v3, fragment.HLT_AK8PFJetFwd40_v15, fragment.HLT_AK8PFJetFwd60_v14, fragment.HLT_AK8PFJetFwd80_v14, fragment.HLT_AK8PFJetFwd140_v14, fragment.HLT_AK8PFJetFwd200_v14, fragment.HLT_AK8PFJetFwd260_v15, fragment.HLT_AK8PFJetFwd320_v15, fragment.HLT_AK8PFJetFwd400_v15, fragment.HLT_AK8PFJetFwd450_v15, fragment.HLT_AK8PFJetFwd500_v15, fragment.HLT_PFHT180_v17, fragment.HLT_PFHT250_v17, fragment.HLT_PFHT370_v17, fragment.HLT_PFHT430_v17, fragment.HLT_PFHT510_v17, fragment.HLT_PFHT590_v17, fragment.HLT_PFHT680_v17, fragment.HLT_PFHT780_v17, fragment.HLT_PFHT890_v17, fragment.HLT_PFHT1050_v18, fragment.HLT_PFHT500_PFMET100_PFMHT100_IDTight_v12, fragment.HLT_PFHT500_PFMET110_PFMHT110_IDTight_v12, fragment.HLT_PFHT700_PFMET85_PFMHT85_IDTight_v12, fragment.HLT_PFHT700_PFMET95_PFMHT95_IDTight_v12, fragment.HLT_PFHT800_PFMET75_PFMHT75_IDTight_v12, fragment.HLT_PFHT800_PFMET85_PFMHT85_IDTight_v12, fragment.HLT_PFMET110_PFMHT110_IDTight_v20, fragment.HLT_PFMET120_PFMHT120_IDTight_v20, fragment.HLT_PFMET130_PFMHT130_IDTight_v20, fragment.HLT_PFMET140_PFMHT140_IDTight_v20, fragment.HLT_PFMET100_PFMHT100_IDTight_CaloBTagDeepCSV_3p1_v8, fragment.HLT_PFMET110_PFMHT110_IDTight_CaloBTagDeepCSV_3p1_v8, fragment.HLT_PFMET120_PFMHT120_IDTight_CaloBTagDeepCSV_3p1_v8, fragment.HLT_PFMET130_PFMHT130_IDTight_CaloBTagDeepCSV_3p1_v8, fragment.HLT_PFMET140_PFMHT140_IDTight_CaloBTagDeepCSV_3p1_v8, fragment.HLT_PFMET120_PFMHT120_IDTight_PFHT60_v9, fragment.HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v9, fragment.HLT_PFMETTypeOne120_PFMHT120_IDTight_PFHT60_v9, fragment.HLT_PFMETTypeOne110_PFMHT110_IDTight_v12, fragment.HLT_PFMETTypeOne120_PFMHT120_IDTight_v12, fragment.HLT_PFMETTypeOne130_PFMHT130_IDTight_v12, fragment.HLT_PFMETTypeOne140_PFMHT140_IDTight_v11, fragment.HLT_PFMETNoMu110_PFMHTNoMu110_IDTight_v20, fragment.HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_v20, fragment.HLT_PFMETNoMu130_PFMHTNoMu130_IDTight_v19, fragment.HLT_PFMETNoMu140_PFMHTNoMu140_IDTight_v19, fragment.HLT_MonoCentralPFJet80_PFMETNoMu110_PFMHTNoMu110_IDTight_v20, fragment.HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v20, fragment.HLT_MonoCentralPFJet80_PFMETNoMu130_PFMHTNoMu130_IDTight_v19, fragment.HLT_MonoCentralPFJet80_PFMETNoMu140_PFMHTNoMu140_IDTight_v19, fragment.HLT_L1ETMHadSeeds_v2, fragment.HLT_CaloMHT90_v4, fragment.HLT_CaloMET80_NotCleaned_v4, fragment.HLT_CaloMET90_NotCleaned_v4, fragment.HLT_CaloMET100_NotCleaned_v4, fragment.HLT_CaloMET110_NotCleaned_v4, fragment.HLT_CaloMET250_NotCleaned_v4, fragment.HLT_CaloMET70_HBHECleaned_v4, fragment.HLT_CaloMET80_HBHECleaned_v4, fragment.HLT_CaloMET90_HBHECleaned_v4, fragment.HLT_CaloMET100_HBHECleaned_v4, fragment.HLT_CaloMET250_HBHECleaned_v4, fragment.HLT_CaloMET300_HBHECleaned_v4, fragment.HLT_CaloMET350_HBHECleaned_v4, fragment.HLT_PFMET200_NotCleaned_v9, fragment.HLT_PFMET200_HBHECleaned_v9, fragment.HLT_PFMET250_HBHECleaned_v9, fragment.HLT_PFMET300_HBHECleaned_v9, fragment.HLT_PFMET200_HBHE_BeamHaloCleaned_v9, fragment.HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned_v9, fragment.HLT_MET105_IsoTrk50_v9, fragment.HLT_MET120_IsoTrk50_v9, fragment.HLT_SingleJet30_Mu12_SinglePFJet40_v11, fragment.HLT_Mu12_DoublePFJets40_CaloBTagDeepCSV_p71_v2, fragment.HLT_Mu12_DoublePFJets100_CaloBTagDeepCSV_p71_v2, fragment.HLT_Mu12_DoublePFJets200_CaloBTagDeepCSV_p71_v2, fragment.HLT_Mu12_DoublePFJets350_CaloBTagDeepCSV_p71_v2, fragment.HLT_Mu12_DoublePFJets40MaxDeta1p6_DoubleCaloBTagDeepCSV_p71_v2, fragment.HLT_Mu12_DoublePFJets54MaxDeta1p6_DoubleCaloBTagDeepCSV_p71_v2, fragment.HLT_Mu12_DoublePFJets62MaxDeta1p6_DoubleCaloBTagDeepCSV_p71_v2, fragment.HLT_DoublePFJets40_CaloBTagDeepCSV_p71_v2, fragment.HLT_DoublePFJets100_CaloBTagDeepCSV_p71_v2, fragment.HLT_DoublePFJets200_CaloBTagDeepCSV_p71_v2, fragment.HLT_DoublePFJets350_CaloBTagDeepCSV_p71_v2, fragment.HLT_DoublePFJets116MaxDeta1p6_DoubleCaloBTagDeepCSV_p71_v2, fragment.HLT_DoublePFJets128MaxDeta1p6_DoubleCaloBTagDeepCSV_p71_v2, fragment.HLT_Photon300_NoHE_v12, fragment.HLT_Mu8_TrkIsoVVL_v12, fragment.HLT_Mu8_DiEle12_CaloIdL_TrackIdL_DZ_v18, fragment.HLT_Mu8_DiEle12_CaloIdL_TrackIdL_v18, fragment.HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT350_DZ_v19, fragment.HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT350_v19, fragment.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_v13, fragment.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_PFDiJet30_v1, fragment.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_CaloDiJet30_v1, fragment.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_PFDiJet30_PFBtagDeepCSV_1p5_v1, fragment.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_CaloDiJet30_CaloBtagDeepCSV_1p5_v1, fragment.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_v11, fragment.HLT_Mu17_TrkIsoVVL_v13, fragment.HLT_Mu19_TrkIsoVVL_v4, fragment.HLT_BTagMu_AK4DiJet20_Mu5_v13, fragment.HLT_BTagMu_AK4DiJet40_Mu5_v13, fragment.HLT_BTagMu_AK4DiJet70_Mu5_v13, fragment.HLT_BTagMu_AK4DiJet110_Mu5_v13, fragment.HLT_BTagMu_AK4DiJet170_Mu5_v12, fragment.HLT_BTagMu_AK4Jet300_Mu5_v12, fragment.HLT_BTagMu_AK8DiJet170_Mu5_v9, fragment.HLT_BTagMu_AK8Jet170_DoubleMu5_v2, fragment.HLT_BTagMu_AK8Jet300_Mu5_v12, fragment.HLT_BTagMu_AK4DiJet20_Mu5_noalgo_v13, fragment.HLT_BTagMu_AK4DiJet40_Mu5_noalgo_v13, fragment.HLT_BTagMu_AK4DiJet70_Mu5_noalgo_v13, fragment.HLT_BTagMu_AK4DiJet110_Mu5_noalgo_v13, fragment.HLT_BTagMu_AK4DiJet170_Mu5_noalgo_v12, fragment.HLT_BTagMu_AK4Jet300_Mu5_noalgo_v12, fragment.HLT_BTagMu_AK8DiJet170_Mu5_noalgo_v9, fragment.HLT_BTagMu_AK8Jet170_DoubleMu5_noalgo_v2, fragment.HLT_BTagMu_AK8Jet300_Mu5_noalgo_v12, fragment.HLT_Ele15_Ele8_CaloIdL_TrackIdL_IsoVL_v3, fragment.HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v19, fragment.HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_v19, fragment.HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v15, fragment.HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_v7, fragment.HLT_Mu12_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_v7, fragment.HLT_Mu12_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_v15, fragment.HLT_Mu12_DoublePhoton20_v5, fragment.HLT_TriplePhoton_20_20_20_CaloIdLV2_v3, fragment.HLT_TriplePhoton_20_20_20_CaloIdLV2_R9IdVL_v3, fragment.HLT_TriplePhoton_30_30_10_CaloIdLV2_v4, fragment.HLT_TriplePhoton_30_30_10_CaloIdLV2_R9IdVL_v4, fragment.HLT_TriplePhoton_35_35_5_CaloIdLV2_R9IdVL_v4, fragment.HLT_Photon20_v2, fragment.HLT_Photon33_v5, fragment.HLT_Photon50_v13, fragment.HLT_Photon75_v13, fragment.HLT_Photon90_v13, fragment.HLT_Photon120_v13, fragment.HLT_Photon150_v6, fragment.HLT_Photon175_v14, fragment.HLT_Photon200_v13, fragment.HLT_Photon100EB_TightID_TightIso_v2, fragment.HLT_Photon110EB_TightID_TightIso_v2, fragment.HLT_Photon120EB_TightID_TightIso_v2, fragment.HLT_Photon100EBHE10_v2, fragment.HLT_Photon100EEHE10_v2, fragment.HLT_Photon100EE_TightID_TightIso_v2, fragment.HLT_Photon50_R9Id90_HE10_IsoM_v14, fragment.HLT_Photon75_R9Id90_HE10_IsoM_v14, fragment.HLT_Photon75_R9Id90_HE10_IsoM_EBOnly_CaloMJJ300_PFJetsMJJ400DEta3_v5, fragment.HLT_Photon75_R9Id90_HE10_IsoM_EBOnly_CaloMJJ400_PFJetsMJJ600DEta3_v5, fragment.HLT_Photon90_R9Id90_HE10_IsoM_v14, fragment.HLT_Photon120_R9Id90_HE10_IsoM_v14, fragment.HLT_Photon165_R9Id90_HE10_IsoM_v15, fragment.HLT_Photon90_CaloIdL_PFHT700_v16, fragment.HLT_Diphoton30_22_R9Id_OR_IsoCaloId_AND_HE_R9Id_Mass90_v13, fragment.HLT_Diphoton30_22_R9Id_OR_IsoCaloId_AND_HE_R9Id_Mass95_v13, fragment.HLT_Diphoton30PV_18PV_R9Id_AND_IsoCaloId_AND_HE_R9Id_PixelVeto_Mass55_v15, fragment.HLT_Diphoton30PV_18PV_R9Id_AND_IsoCaloId_AND_HE_R9Id_NoPixelVeto_Mass55_v13, fragment.HLT_Photon35_TwoProngs35_v1, fragment.HLT_IsoMu24_TwoProngs35_v1, fragment.HLT_Dimuon0_Jpsi_L1_NoOS_v7, fragment.HLT_Dimuon0_Jpsi_NoVertexing_NoOS_v7, fragment.HLT_Dimuon0_Jpsi_v8, fragment.HLT_Dimuon0_Jpsi_NoVertexing_v8, fragment.HLT_Dimuon0_Jpsi_L1_4R_0er1p5R_v7, fragment.HLT_Dimuon0_Jpsi_NoVertexing_L1_4R_0er1p5R_v7, fragment.HLT_Dimuon0_Jpsi3p5_Muon2_v5, fragment.HLT_Dimuon0_Upsilon_L1_4p5_v9, fragment.HLT_Dimuon0_Upsilon_L1_5_v9, fragment.HLT_Dimuon0_Upsilon_L1_4p5NoOS_v8, fragment.HLT_Dimuon0_Upsilon_L1_4p5er2p0_v9, fragment.HLT_Dimuon0_Upsilon_L1_4p5er2p0M_v7, fragment.HLT_Dimuon0_Upsilon_NoVertexing_v7, fragment.HLT_Dimuon0_Upsilon_L1_5M_v8, fragment.HLT_Dimuon0_LowMass_L1_0er1p5R_v7, fragment.HLT_Dimuon0_LowMass_L1_0er1p5_v8, fragment.HLT_Dimuon0_LowMass_v8, fragment.HLT_Dimuon0_LowMass_L1_4_v8, fragment.HLT_Dimuon0_LowMass_L1_4R_v7, fragment.HLT_Dimuon0_LowMass_L1_TM530_v6, fragment.HLT_Dimuon0_Upsilon_Muon_L1_TM0_v6, fragment.HLT_Dimuon0_Upsilon_Muon_NoL1Mass_v6, fragment.HLT_TripleMu_5_3_3_Mass3p8_DZ_v8, fragment.HLT_TripleMu_10_5_5_DZ_v10, fragment.HLT_TripleMu_12_10_5_v10, fragment.HLT_Tau3Mu_Mu7_Mu1_TkMu1_Tau15_v4, fragment.HLT_Tau3Mu_Mu7_Mu1_TkMu1_Tau15_Charge1_v4, fragment.HLT_Tau3Mu_Mu7_Mu1_TkMu1_IsoTau15_v4, fragment.HLT_Tau3Mu_Mu7_Mu1_TkMu1_IsoTau15_Charge1_v4, fragment.HLT_DoubleMu3_DZ_PFMET50_PFMHT60_v10, fragment.HLT_DoubleMu3_DZ_PFMET70_PFMHT70_v10, fragment.HLT_DoubleMu3_DZ_PFMET90_PFMHT90_v10, fragment.HLT_DoubleMu3_Trk_Tau3mu_NoL1Mass_v6, fragment.HLT_DoubleMu4_Jpsi_Displaced_v7, fragment.HLT_DoubleMu4_Jpsi_NoVertexing_v7, fragment.HLT_DoubleMu4_JpsiTrkTrk_Displaced_v7, fragment.HLT_DoubleMu43NoFiltersNoVtx_v4, fragment.HLT_DoubleMu48NoFiltersNoVtx_v4, fragment.HLT_Mu43NoFiltersNoVtx_Photon43_CaloIdL_v5, fragment.HLT_Mu48NoFiltersNoVtx_Photon48_CaloIdL_v5, fragment.HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v1, fragment.HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v1, fragment.HLT_DoubleMu33NoFiltersNoVtxDisplaced_v1, fragment.HLT_DoubleMu40NoFiltersNoVtxDisplaced_v1, fragment.HLT_DoubleMu20_7_Mass0to30_L1_DM4_v7, fragment.HLT_DoubleMu20_7_Mass0to30_L1_DM4EG_v8, fragment.HLT_HT425_v9, fragment.HLT_HT430_DisplacedDijet40_DisplacedTrack_v13, fragment.HLT_HT500_DisplacedDijet40_DisplacedTrack_v13, fragment.HLT_HT430_DisplacedDijet60_DisplacedTrack_v13, fragment.HLT_HT400_DisplacedDijet40_DisplacedTrack_v13, fragment.HLT_HT650_DisplacedDijet60_Inclusive_v13, fragment.HLT_HT550_DisplacedDijet60_Inclusive_v13, fragment.HLT_DiJet110_35_Mjj650_PFMET110_v9, fragment.HLT_DiJet110_35_Mjj650_PFMET120_v9, fragment.HLT_DiJet110_35_Mjj650_PFMET130_v9, fragment.HLT_TripleJet110_35_35_Mjj650_PFMET110_v9, fragment.HLT_TripleJet110_35_35_Mjj650_PFMET120_v9, fragment.HLT_TripleJet110_35_35_Mjj650_PFMET130_v9, fragment.HLT_Ele30_eta2p1_WPTight_Gsf_CentralPFJet35_EleCleaned_v13, fragment.HLT_Ele28_eta2p1_WPTight_Gsf_HT150_v13, fragment.HLT_Ele28_HighEta_SC20_Mass55_v13, fragment.HLT_DoubleMu20_7_Mass0to30_Photon23_v8, fragment.HLT_Ele15_IsoVVVL_PFHT450_CaloBTagDeepCSV_4p5_v8, fragment.HLT_Ele15_IsoVVVL_PFHT450_PFMET50_v16, fragment.HLT_Ele15_IsoVVVL_PFHT450_v16, fragment.HLT_Ele50_IsoVVVL_PFHT450_v16, fragment.HLT_Ele15_IsoVVVL_PFHT600_v20, fragment.HLT_Mu4_TrkIsoVVL_DiPFJet90_40_DEta3p5_MJJ750_HTT300_PFMETNoMu60_v15, fragment.HLT_Mu8_TrkIsoVVL_DiPFJet40_DEta3p5_MJJ750_HTT300_PFMETNoMu60_v16, fragment.HLT_Mu10_TrkIsoVVL_DiPFJet40_DEta3p5_MJJ750_HTT350_PFMETNoMu60_v15, fragment.HLT_Mu15_IsoVVVL_PFHT450_CaloBTagDeepCSV_4p5_v8, fragment.HLT_Mu15_IsoVVVL_PFHT450_PFMET50_v15, fragment.HLT_Mu15_IsoVVVL_PFHT450_v15, fragment.HLT_Mu50_IsoVVVL_PFHT450_v15, fragment.HLT_Mu15_IsoVVVL_PFHT600_v19, fragment.HLT_Mu3er1p5_PFJet100er2p5_PFMET70_PFMHT70_IDTight_v2, fragment.HLT_Mu3er1p5_PFJet100er2p5_PFMET80_PFMHT80_IDTight_v2, fragment.HLT_Mu3er1p5_PFJet100er2p5_PFMET90_PFMHT90_IDTight_v2, fragment.HLT_Mu3er1p5_PFJet100er2p5_PFMET100_PFMHT100_IDTight_v2, fragment.HLT_Mu3er1p5_PFJet100er2p5_PFMETNoMu70_PFMHTNoMu70_IDTight_v2, fragment.HLT_Mu3er1p5_PFJet100er2p5_PFMETNoMu80_PFMHTNoMu80_IDTight_v2, fragment.HLT_Mu3er1p5_PFJet100er2p5_PFMETNoMu90_PFMHTNoMu90_IDTight_v2, fragment.HLT_Mu3er1p5_PFJet100er2p5_PFMETNoMu100_PFMHTNoMu100_IDTight_v2, fragment.HLT_Dimuon10_PsiPrime_Barrel_Seagulls_v7, fragment.HLT_Dimuon20_Jpsi_Barrel_Seagulls_v7, fragment.HLT_Dimuon12_Upsilon_y1p4_v2, fragment.HLT_Dimuon14_Phi_Barrel_Seagulls_v7, fragment.HLT_Dimuon18_PsiPrime_v14, fragment.HLT_Dimuon25_Jpsi_v14, fragment.HLT_Dimuon18_PsiPrime_noCorrL1_v6, fragment.HLT_Dimuon24_Upsilon_noCorrL1_v6, fragment.HLT_Dimuon24_Phi_noCorrL1_v6, fragment.HLT_Dimuon25_Jpsi_noCorrL1_v6, fragment.HLT_DiMu4_Ele9_CaloIdL_TrackIdL_DZ_Mass3p8_v17, fragment.HLT_DiMu9_Ele9_CaloIdL_TrackIdL_DZ_v17, fragment.HLT_DiMu9_Ele9_CaloIdL_TrackIdL_v17, fragment.HLT_DoubleIsoMu20_eta2p1_v7, fragment.HLT_TrkMu12_DoubleTrkMu5NoFiltersNoVtx_v6, fragment.HLT_TrkMu16_DoubleTrkMu6NoFiltersNoVtx_v12, fragment.HLT_TrkMu17_DoubleTrkMu8NoFiltersNoVtx_v13, fragment.HLT_Mu8_v12, fragment.HLT_Mu17_v13, fragment.HLT_Mu19_v4, fragment.HLT_Mu17_Photon30_IsoCaloId_v6, fragment.HLT_Ele8_CaloIdL_TrackIdL_IsoVL_PFJet30_v16, fragment.HLT_Ele12_CaloIdL_TrackIdL_IsoVL_PFJet30_v18, fragment.HLT_Ele15_CaloIdL_TrackIdL_IsoVL_PFJet30_v3, fragment.HLT_Ele23_CaloIdL_TrackIdL_IsoVL_PFJet30_v18, fragment.HLT_Ele8_CaloIdM_TrackIdM_PFJet30_v18, fragment.HLT_Ele17_CaloIdM_TrackIdM_PFJet30_v16, fragment.HLT_Ele23_CaloIdM_TrackIdM_PFJet30_v18, fragment.HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165_v18, fragment.HLT_Ele115_CaloIdVT_GsfTrkIdT_v14, fragment.HLT_Ele135_CaloIdVT_GsfTrkIdT_v7, fragment.HLT_Ele145_CaloIdVT_GsfTrkIdT_v8, fragment.HLT_Ele200_CaloIdVT_GsfTrkIdT_v8, fragment.HLT_Ele250_CaloIdVT_GsfTrkIdT_v13, fragment.HLT_Ele300_CaloIdVT_GsfTrkIdT_v13, fragment.HLT_PFHT330PT30_QuadPFJet_75_60_45_40_TriplePFBTagDeepCSV_4p5_v3, fragment.HLT_PFHT330PT30_QuadPFJet_75_60_45_40_v9, fragment.HLT_PFHT400_SixPFJet32_DoublePFBTagDeepCSV_2p94_v8, fragment.HLT_PFHT400_SixPFJet32_v8, fragment.HLT_PFHT450_SixPFJet36_PFBTagDeepCSV_1p59_v7, fragment.HLT_PFHT450_SixPFJet36_v7, fragment.HLT_PFHT400_FivePFJet_100_100_60_30_30_v8, fragment.HLT_PFHT400_FivePFJet_100_100_60_30_30_DoublePFBTagDeepCSV_4p5_v8, fragment.HLT_PFHT400_FivePFJet_120_120_60_30_30_DoublePFBTagDeepCSV_4p5_v8, fragment.HLT_PFHT350_v19, fragment.HLT_PFHT350MinPFJet15_v9, fragment.HLT_Photon60_R9Id90_CaloIdL_IsoL_v5, fragment.HLT_Photon60_R9Id90_CaloIdL_IsoL_DisplacedIdL_v5, fragment.HLT_Photon60_R9Id90_CaloIdL_IsoL_DisplacedIdL_PFHT350MinPFJet15_v11, fragment.HLT_ECALHT800_v10, fragment.HLT_DiSC30_18_EIso_AND_HE_Mass70_v13, fragment.HLT_Physics_v7, fragment.HLT_Physics_part0_v7, fragment.HLT_Physics_part1_v7, fragment.HLT_Physics_part2_v7, fragment.HLT_Physics_part3_v7, fragment.HLT_Physics_part4_v7, fragment.HLT_Physics_part5_v7, fragment.HLT_Physics_part6_v7, fragment.HLT_Physics_part7_v7, fragment.DST_Physics_v7, fragment.HLT_Random_v3, fragment.HLT_ZeroBias_v6, fragment.HLT_ZeroBias_Alignment_v1, fragment.HLT_ZeroBias_part0_v6, fragment.HLT_ZeroBias_part1_v6, fragment.HLT_ZeroBias_part2_v6, fragment.HLT_ZeroBias_part3_v6, fragment.HLT_ZeroBias_part4_v6, fragment.HLT_ZeroBias_part5_v6, fragment.HLT_ZeroBias_part6_v6, fragment.HLT_ZeroBias_part7_v6, fragment.DST_ZeroBias_v2, fragment.DST_HT250_CaloScouting_v10, fragment.DST_HT250_CaloBTagScouting_v10, fragment.DST_HT410_PFScouting_v16, fragment.DST_HT410_BTagScouting_v16, fragment.DST_ZeroBias_BTagScouting_v15, fragment.DST_ZeroBias_CaloScouting_PFScouting_v14, fragment.DST_CaloJet40_BTagScouting_v15, fragment.DST_CaloJet40_CaloScouting_PFScouting_v15, fragment.DST_CaloJet40_CaloBTagScouting_v14, fragment.DST_L1HTT_BTagScouting_v15, fragment.DST_L1HTT_CaloScouting_PFScouting_v15, fragment.DST_L1HTT_CaloBTagScouting_v14, fragment.DST_L1DoubleMu_BTagScouting_v16, fragment.DST_L1DoubleMu_CaloScouting_PFScouting_v15, fragment.DST_DoubleMu3_noVtx_CaloScouting_Monitoring_v6, fragment.DST_DoubleMu3_noVtx_CaloScouting_v6, fragment.DST_DoubleMu1_noVtx_CaloScouting_v2, fragment.DST_DoubleMu3_noVtx_Mass10_PFScouting_v3, fragment.HLT_AK4CaloJet30_v11, fragment.HLT_AK4CaloJet40_v10, fragment.HLT_AK4CaloJet50_v10, fragment.HLT_AK4CaloJet80_v10, fragment.HLT_AK4CaloJet100_v10, fragment.HLT_AK4CaloJet120_v9, fragment.HLT_AK4PFJet30_v19, fragment.HLT_AK4PFJet50_v19, fragment.HLT_AK4PFJet80_v19, fragment.HLT_AK4PFJet100_v19, fragment.HLT_AK4PFJet120_v18, fragment.HLT_SinglePhoton10_Eta3p1ForPPRef_v8, fragment.HLT_SinglePhoton20_Eta3p1ForPPRef_v9, fragment.HLT_SinglePhoton30_Eta3p1ForPPRef_v9, fragment.HLT_Photon20_HoverELoose_v10, fragment.HLT_Photon30_HoverELoose_v10, fragment.HLT_EcalCalibration_v4, fragment.HLT_HcalCalibration_v5, fragment.AlCa_EcalPhiSym_v9, fragment.HLT_L1UnpairedBunchBptxMinus_v2, fragment.HLT_L1UnpairedBunchBptxPlus_v2, fragment.HLT_L1NotBptxOR_v3, fragment.HLT_L1_CDC_SingleMu_3_er1p2_TOP120_DPHI2p618_3p142_v2, fragment.HLT_CDC_L2cosmic_10_er1p0_v1, fragment.HLT_CDC_L2cosmic_5p5_er1p0_v1, fragment.HLT_HcalNZS_v13, fragment.HLT_HcalPhiSym_v15, fragment.HLT_HcalIsolatedbunch_v5, fragment.HLT_IsoTrackHB_v4, fragment.HLT_IsoTrackHE_v4, fragment.HLT_ZeroBias_FirstCollisionAfterAbortGap_v5, fragment.HLT_ZeroBias_IsolatedBunches_v5, fragment.HLT_ZeroBias_FirstCollisionInTrain_v4, fragment.HLT_ZeroBias_LastCollisionInTrain_v3, fragment.HLT_ZeroBias_FirstBXAfterTrain_v3, fragment.AlCa_RPCMuonNormalisation_v13, fragment.AlCa_LumiPixels_Random_v4, fragment.AlCa_LumiPixels_ZeroBias_v8, fragment.MC_ReducedIterativeTracking_v12, fragment.MC_PFMET_v17, fragment.MC_AK4PFJets_v17, fragment.MC_PFBTagDeepCSV_v10, fragment.MC_PFHT_v16, fragment.MC_PFMHT_v16, fragment.MC_CaloMET_v8, fragment.MC_CaloMET_JetIdCleaned_v9, fragment.MC_AK4CaloJets_v9, fragment.MC_AK4CaloJetsFromPV_v8, fragment.MC_CaloBTagDeepCSV_v8, fragment.MC_CaloHT_v8, fragment.MC_CaloMHT_v8, fragment.MC_AK8PFJets_v17, fragment.MC_AK8TrimPFJets_v17, fragment.MC_AK8PFHT_v16, fragment.MC_AK8CaloHT_v8, fragment.MC_Diphoton10_10_R9Id_OR_IsoCaloId_AND_HE_R9Id_Mass10_v13, fragment.MC_DoubleEle5_CaloIdL_MW_v15, fragment.MC_Ele5_WPTight_Gsf_v8, fragment.MC_Ele15_Ele10_CaloIdL_TrackIdL_IsoVL_DZ_v15, fragment.MC_IsoMu_v15, fragment.MC_DoubleMu_TrkIsoVVL_DZ_v11, fragment.MC_DoubleMuNoFiltersNoVtx_v7, fragment.AlCa_EcalPi0EBonly_v13, fragment.AlCa_EcalPi0EEonly_v13, fragment.AlCa_EcalEtaEBonly_v13, fragment.AlCa_EcalEtaEEonly_v13, fragment.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_v12, fragment.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET90_v12, fragment.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET100_v12, fragment.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET110_v8, fragment.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET120_v8, fragment.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET130_v8, fragment.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET140_v3, fragment.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_v12, fragment.HLT_MediumChargedIsoPFTau180HighPtRelaxedIso_Trk50_eta2p1_1pr_v11, fragment.HLT_MediumChargedIsoPFTau180HighPtRelaxedIso_Trk50_eta2p1_v12, fragment.HLT_MediumChargedIsoPFTau200HighPtRelaxedIso_Trk50_eta2p1_v12, fragment.HLT_MediumChargedIsoPFTau220HighPtRelaxedIso_Trk50_eta2p1_v12, fragment.HLT_Ele16_Ele12_Ele8_CaloIdL_TrackIdL_v9, fragment.HLT_Rsq0p35_v15, fragment.HLT_Rsq0p40_v15, fragment.HLT_RsqMR300_Rsq0p09_MR200_v15, fragment.HLT_RsqMR320_Rsq0p09_MR200_v15, fragment.HLT_RsqMR300_Rsq0p09_MR200_4jet_v15, fragment.HLT_RsqMR320_Rsq0p09_MR200_4jet_v15, fragment.HLT_IsoMu27_MET90_v3, fragment.HLT_DoubleMediumChargedIsoPFTau35_Trk1_eta2p1_Reg_v12, fragment.HLT_DoubleMediumChargedIsoPFTau35_Trk1_TightID_eta2p1_Reg_v12, fragment.HLT_DoubleTightChargedIsoPFTau35_Trk1_eta2p1_Reg_v12, fragment.HLT_DoubleTightChargedIsoPFTau35_Trk1_TightID_eta2p1_Reg_v12, fragment.HLT_DoubleMediumChargedIsoPFTauHPS30_L1MaxMass_Trk1_eta2p1_Reg_v1, fragment.HLT_DoubleTightChargedIsoPFTauHPS35_Trk1_eta2p1_Reg_v1, fragment.HLT_DoubleMediumChargedIsoPFTauHPS35_Trk1_TightID_eta2p1_Reg_v1, fragment.HLT_DoubleMediumChargedIsoPFTauHPS35_Trk1_eta2p1_Reg_v4, fragment.HLT_DoubleTightChargedIsoPFTauHPS35_Trk1_TightID_eta2p1_Reg_v1, fragment.HLT_DoubleMediumChargedIsoPFTauHPS40_Trk1_eta2p1_Reg_v1, fragment.HLT_DoubleTightChargedIsoPFTauHPS40_Trk1_eta2p1_Reg_v1, fragment.HLT_DoubleMediumChargedIsoPFTauHPS40_Trk1_TightID_eta2p1_Reg_v1, fragment.HLT_DoubleTightChargedIsoPFTauHPS40_Trk1_TightID_eta2p1_Reg_v1, fragment.HLT_VBF_DoubleLooseChargedIsoPFTau20_Trk1_eta2p1_v3, fragment.HLT_VBF_DoubleLooseChargedIsoPFTauHPS20_Trk1_eta2p1_v1, fragment.HLT_VBF_DoubleMediumChargedIsoPFTauHPS20_Trk1_eta2p1_v1, fragment.HLT_VBF_DoubleTightChargedIsoPFTauHPS20_Trk1_eta2p1_v1, fragment.HLT_Photon50_R9Id90_HE10_IsoM_EBOnly_PFJetsMJJ300DEta3_PFMET50_v5, fragment.HLT_Photon75_R9Id90_HE10_IsoM_EBOnly_PFJetsMJJ300DEta3_v5, fragment.HLT_Photon75_R9Id90_HE10_IsoM_EBOnly_PFJetsMJJ600DEta3_v5, fragment.HLT_PFMET100_PFMHT100_IDTight_PFHT60_v9, fragment.HLT_PFMETNoMu100_PFMHTNoMu100_IDTight_PFHT60_v9, fragment.HLT_PFMETTypeOne100_PFMHT100_IDTight_PFHT60_v9, fragment.HLT_Mu18_Mu9_SameSign_v4, fragment.HLT_Mu18_Mu9_SameSign_DZ_v4, fragment.HLT_Mu18_Mu9_v4, fragment.HLT_Mu18_Mu9_DZ_v4, fragment.HLT_Mu20_Mu10_SameSign_v4, fragment.HLT_Mu20_Mu10_SameSign_DZ_v4, fragment.HLT_Mu20_Mu10_v4, fragment.HLT_Mu20_Mu10_DZ_v4, fragment.HLT_Mu23_Mu12_SameSign_v4, fragment.HLT_Mu23_Mu12_SameSign_DZ_v4, fragment.HLT_Mu23_Mu12_v4, fragment.HLT_Mu23_Mu12_DZ_v4, fragment.HLT_DoubleMu2_Jpsi_DoubleTrk1_Phi1p05_v6, fragment.HLT_DoubleMu2_Jpsi_DoubleTkMu0_Phi_v5, fragment.HLT_DoubleMu3_DCA_PFMET50_PFMHT60_v10, fragment.HLT_TripleMu_5_3_3_Mass3p8_DCA_v3, fragment.HLT_QuadPFJet98_83_71_15_DoublePFBTagDeepCSV_1p3_7p7_VBF1_v8, fragment.HLT_QuadPFJet103_88_75_15_DoublePFBTagDeepCSV_1p3_7p7_VBF1_v8, fragment.HLT_QuadPFJet111_90_80_15_DoublePFBTagDeepCSV_1p3_7p7_VBF1_v8, fragment.HLT_QuadPFJet98_83_71_15_PFBTagDeepCSV_1p3_VBF2_v8, fragment.HLT_QuadPFJet103_88_75_15_PFBTagDeepCSV_1p3_VBF2_v8, fragment.HLT_QuadPFJet105_88_76_15_PFBTagDeepCSV_1p3_VBF2_v8, fragment.HLT_QuadPFJet111_90_80_15_PFBTagDeepCSV_1p3_VBF2_v8, fragment.HLT_QuadPFJet98_83_71_15_v5, fragment.HLT_QuadPFJet103_88_75_15_v5, fragment.HLT_QuadPFJet105_88_76_15_v5, fragment.HLT_QuadPFJet111_90_80_15_v5, fragment.HLT_AK8PFJet330_TrimMass30_PFAK8BTagDeepCSV_p17_v2, fragment.HLT_AK8PFJet330_TrimMass30_PFAK8BTagDeepCSV_p1_v2, fragment.HLT_AK8PFJet330_TrimMass30_PFAK8BoostedDoubleB_p02_v3, fragment.HLT_AK8PFJet330_TrimMass30_PFAK8BoostedDoubleB_np2_v2, fragment.HLT_AK8PFJet330_TrimMass30_PFAK8BoostedDoubleB_np4_v2, fragment.HLT_Diphoton30_18_R9IdL_AND_HE_AND_IsoCaloId_NoPixelVeto_Mass55_v2, fragment.HLT_Diphoton30_18_R9IdL_AND_HE_AND_IsoCaloId_NoPixelVeto_v2, fragment.HLT_Mu12_IP6_ToCSCS_v1, fragment.HLT_Mu12_IP6_part0_v2, fragment.HLT_Mu12_IP6_part1_v2, fragment.HLT_Mu12_IP6_part2_v2, fragment.HLT_Mu12_IP6_part3_v2, fragment.HLT_Mu12_IP6_part4_v2, fragment.HLT_Mu9_IP5_ToCSCS_v1, fragment.HLT_Mu9_IP5_part0_v2, fragment.HLT_Mu9_IP5_part1_v2, fragment.HLT_Mu9_IP5_part2_v2, fragment.HLT_Mu9_IP5_part3_v2, fragment.HLT_Mu9_IP5_part4_v2, fragment.HLT_Mu7_IP4_ToCSCS_v1, fragment.HLT_Mu7_IP4_part0_v2, fragment.HLT_Mu7_IP4_part1_v2, fragment.HLT_Mu7_IP4_part2_v2, fragment.HLT_Mu7_IP4_part3_v2, fragment.HLT_Mu7_IP4_part4_v2, fragment.HLT_Mu9_IP4_ToCSCS_v1, fragment.HLT_Mu9_IP4_part0_v2, fragment.HLT_Mu9_IP4_part1_v2, fragment.HLT_Mu9_IP4_part2_v2, fragment.HLT_Mu9_IP4_part3_v2, fragment.HLT_Mu9_IP4_part4_v2, fragment.HLT_Mu8_IP5_ToCSCS_v1, fragment.HLT_Mu8_IP5_part0_v2, fragment.HLT_Mu8_IP5_part1_v2, fragment.HLT_Mu8_IP5_part2_v2, fragment.HLT_Mu8_IP5_part3_v2, fragment.HLT_Mu8_IP5_part4_v2, fragment.HLT_Mu8_IP6_ToCSCS_v1, fragment.HLT_Mu8_IP6_part0_v2, fragment.HLT_Mu8_IP6_part1_v2, fragment.HLT_Mu8_IP6_part2_v2, fragment.HLT_Mu8_IP6_part3_v2, fragment.HLT_Mu8_IP6_part4_v2, fragment.HLT_Mu9_IP6_ToCSCS_v1, fragment.HLT_Mu9_IP6_part0_v3, fragment.HLT_Mu9_IP6_part1_v3, fragment.HLT_Mu9_IP6_part2_v3, fragment.HLT_Mu9_IP6_part3_v3, fragment.HLT_Mu9_IP6_part4_v3, fragment.HLT_Mu8_IP3_ToCSCS_v1, fragment.HLT_Mu8_IP3_part0_v3, fragment.HLT_Mu8_IP3_part1_v3, fragment.HLT_Mu8_IP3_part2_v3, fragment.HLT_Mu8_IP3_part3_v3, fragment.HLT_Mu8_IP3_part4_v3, fragment.HLT_Mu9_IP0_part0_v2, fragment.HLT_Mu9_IP3_part0_v2, fragment.HLT_QuadPFJet105_88_76_15_DoublePFBTagDeepCSV_1p3_7p7_VBF1_v8, fragment.HLT_TrkMu6NoFiltersNoVtx_v1, fragment.HLT_TrkMu16NoFiltersNoVtx_v1, fragment.HLT_DoubleTrkMu_16_6_NoFiltersNoVtx_v1, fragment.HLTriggerFinalPath, fragment.HLTAnalyzerEndpath, fragment.ScoutingPFOutput, fragment.ScoutingCaloMuonOutput ))
"
-------------------------------------------------------------------------
"fragment.HLTSchedule = cms.Schedule(
    *(fragment.HLTriggerFirstPath, fragment.HLT_AK8PFJet360_TrimMass30_v18, fragment.HLT_AK8PFJet380_TrimMass30_v11, 
    fragment.HLT_AK8PFJet400_TrimMass30_v12, fragment.HLT_AK8PFJet420_TrimMass30_v11, fragment.HLT_AK8PFHT750_TrimMass50_v12, 
    fragment.HLT_AK8PFHT800_TrimMass50_v12, fragment.HLT_AK8PFHT850_TrimMass50_v11, fragment.HLT_AK8PFHT900_TrimMass50_v11, 
    fragment.HLT_CaloJet500_NoJetID_v12, fragment.HLT_CaloJet550_NoJetID_v7, 
    fragment.HLT_DoubleMu5_Upsilon_DoubleEle3_CaloIdL_TrackIdL_v4, fragment.HLT_DoubleMu3_DoubleEle7p5_CaloIdL_TrackIdL_Upsilon_v4, 
    fragment.HLT_Trimuon5_3p5_2_Upsilon_Muon_v5, fragment.HLT_TrimuonOpen_5_3p5_2_Upsilon_Muon_v3, fragment.HLT_DoubleEle25_CaloIdL_MW_v4, 
    fragment.HLT_DoubleEle27_CaloIdL_MW_v4, fragment.HLT_DoubleEle33_CaloIdL_MW_v17, fragment.HLT_DoubleEle24_eta2p1_WPTight_Gsf_v7, 
    fragment.HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_DZ_PFHT350_v20, fragment.HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_PFHT350_v20, 
    fragment.HLT_Ele27_Ele37_CaloIdL_MW_v4, fragment.HLT_Mu27_Ele37_CaloIdL_MW_v5, fragment.HLT_Mu37_Ele27_CaloIdL_MW_v5, 
    fragment.HLT_Mu37_TkMu27_v5, fragment.HLT_DoubleMu4_3_Bs_v14, fragment.HLT_DoubleMu4_3_Jpsi_v2, fragment.HLT_DoubleMu4_JpsiTrk_Displaced_v15, 
    fragment.HLT_DoubleMu4_LowMassNonResonantTrk_Displaced_v15, fragment.HLT_DoubleMu3_Trk_Tau3mu_v12, fragment.HLT_DoubleMu3_TkMu_DsTau3Mu_v4, 
    fragment.HLT_DoubleMu4_PsiPrimeTrk_Displaced_v15, fragment.HLT_DoubleMu4_Mass3p8_DZ_PFHT350_v8, fragment.HLT_Mu3_PFJet40_v16, 
    fragment.HLT_Mu7p5_L2Mu2_Jpsi_v10, fragment.HLT_Mu7p5_L2Mu2_Upsilon_v10, fragment.HLT_Mu7p5_Track2_Jpsi_v11, fragment.HLT_Mu7p5_Track3p5_Jpsi_v11, 
    fragment.HLT_Mu7p5_Track7_Jpsi_v11,fragment.HLT_Mu7p5_Track2_Upsilon_v11, fragment.HLT_Mu7p5_Track3p5_Upsilon_v11, fragment.HLT_Mu7p5_Track7_Upsilon_v11, 
    fragment.HLT_Mu3_L1SingleMu5orSingleMu7_v1, fragment.HLT_DoublePhoton33_CaloIdL_v6, fragment.HLT_DoublePhoton70_v6, fragment.HLT_DoublePhoton85_v14, 
    fragment.HLT_Ele20_WPTight_Gsf_v6"
-------------------------------------------------------------------------
"fragment.HLTSchedule = cms.Schedule( *(fragment.HLTriggerFirstPath, fragment.HLT_AK8PFJet360_TrimMass30_v18, fragment.HLT_AK8PFJet380_TrimMass30_v11, fragment.HLT_AK8PFJet400_TrimMass30_v12, fragment.HLT_AK8PFJet420_TrimMass30_v11, fragment.HLT_AK8PFHT750_TrimMass50_v12, fragment.HLT_AK8PFHT800_TrimMass50_v12, fragment.HLT_AK8PFHT850_TrimMass50_v11, fragment.HLT_AK8PFHT900_TrimMass50_v11, fragment.HLT_CaloJet500_NoJetID_v12, fragment.HLT_CaloJet550_NoJetID_v7, fragment.HLT_DoubleMu5_Upsilon_DoubleEle3_CaloIdL_TrackIdL_v4, fragment.HLT_DoubleMu3_DoubleEle7p5_CaloIdL_TrackIdL_Upsilon_v4, fragment.HLT_Trimuon5_3p5_2_Upsilon_Muon_v5, fragment.HLT_TrimuonOpen_5_3p5_2_Upsilon_Muon_v3, fragment.HLT_DoubleEle25_CaloIdL_MW_v4, fragment.HLT_DoubleEle27_CaloIdL_MW_v4, fragment.HLT_DoubleEle33_CaloIdL_MW_v17, fragment.HLT_DoubleEle24_eta2p1_WPTight_Gsf_v7, fragment.HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_DZ_PFHT350_v20, fragment.HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_PFHT350_v20, fragment.HLT_Ele27_Ele37_CaloIdL_MW_v4, fragment.HLT_Mu27_Ele37_CaloIdL_MW_v5, fragment.HLT_Mu37_Ele27_CaloIdL_MW_v5, fragment.HLT_Mu37_TkMu27_v5, fragment.HLT_DoubleMu4_3_Bs_v14, fragment.HLT_DoubleMu4_3_Jpsi_v2, fragment.HLT_DoubleMu4_JpsiTrk_Displaced_v15, fragment.HLT_DoubleMu4_LowMassNonResonantTrk_Displaced_v15, fragment.HLT_DoubleMu3_Trk_Tau3mu_v12, fragment.HLT_DoubleMu3_TkMu_DsTau3Mu_v4, fragment.HLT_DoubleMu4_PsiPrimeTrk_Displaced_v15, fragment.HLT_DoubleMu4_Mass3p8_DZ_PFHT350_v8, fragment.HLT_Mu3_PFJet40_v16, fragment.HLT_Mu7p5_L2Mu2_Jpsi_v10, fragment.HLT_Mu7p5_L2Mu2_Upsilon_v10, fragment.HLT_Mu7p5_Track2_Jpsi_v11, fragment.HLT_Mu7p5_Track3p5_Jpsi_v11, fragment.HLT_Mu7p5_Track7_Jpsi_v11, fragment.HLT_Mu7p5_Track2_Upsilon_v11, fragment.HLT_Mu7p5_Track3p5_Upsilon_v11, fragment.HLT_Mu7p5_Track7_Upsilon_v11, fragment.HLT_Mu3_L1SingleMu5orSingleMu7_v1, fragment.HLT_DoublePhoton33_CaloIdL_v6, fragment.HLT_DoublePhoton70_v6, fragment.HLT_DoublePhoton85_v14, fragment.HLT_Ele20_WPTight_Gsf_v6, fragment.HLT_Ele15_WPLoose_Gsf_v3, fragment.HLT_Ele17_WPLoose_Gsf_v3, fragment.HLT_Ele20_WPLoose_Gsf_v6, fragment.HLT_Ele20_eta2p1_WPLoose_Gsf_v6, fragment.HLT_DiEle27_WPTightCaloOnly_L1DoubleEG_v4, fragment.HLT_Ele27_WPTight_Gsf_v16, fragment.HLT_Ele28_WPTight_Gsf_v1, fragment.HLT_Ele30_WPTight_Gsf_v1, fragment.HLT_Ele32_WPTight_Gsf_v15, fragment.HLT_Ele35_WPTight_Gsf_v9, fragment.HLT_Ele35_WPTight_Gsf_L1EGMT_v5, fragment.HLT_Ele38_WPTight_Gsf_v9, fragment.HLT_Ele40_WPTight_Gsf_v9, fragment.HLT_Ele32_WPTight_Gsf_L1DoubleEG_v9, fragment.HLT_Ele24_eta2p1_WPTight_Gsf_LooseChargedIsoPFTau30_eta2p1_CrossL1_v13, fragment.HLT_Ele24_eta2p1_WPTight_Gsf_LooseChargedIsoPFTauHPS30_eta2p1_CrossL1_v1, fragment.HLT_Ele24_eta2p1_WPTight_Gsf_MediumChargedIsoPFTauHPS30_eta2p1_CrossL1_v1, fragment.HLT_Ele24_eta2p1_WPTight_Gsf_TightChargedIsoPFTauHPS30_eta2p1_CrossL1_v1, fragment.HLT_Ele24_eta2p1_WPTight_Gsf_LooseChargedIsoPFTauHPS30_eta2p1_TightID_CrossL1_v1, fragment.HLT_Ele24_eta2p1_WPTight_Gsf_MediumChargedIsoPFTauHPS30_eta2p1_TightID_CrossL1_v1, fragment.HLT_Ele24_eta2p1_WPTight_Gsf_TightChargedIsoPFTauHPS30_eta2p1_TightID_CrossL1_v1, fragment.HLT_HT450_Beamspot_v11, fragment.HLT_HT300_Beamspot_v11, fragment.HLT_ZeroBias_Beamspot_v4, fragment.HLT_IsoMu20_eta2p1_LooseChargedIsoPFTau27_eta2p1_CrossL1_v12, fragment.HLT_IsoMu20_eta2p1_LooseChargedIsoPFTauHPS27_eta2p1_CrossL1_v4, fragment.HLT_IsoMu20_eta2p1_MediumChargedIsoPFTauHPS27_eta2p1_CrossL1_v1, fragment.HLT_IsoMu20_eta2p1_TightChargedIsoPFTauHPS27_eta2p1_CrossL1_v1, fragment.HLT_IsoMu20_eta2p1_LooseChargedIsoPFTauHPS27_eta2p1_TightID_CrossL1_v1, fragment.HLT_IsoMu20_eta2p1_MediumChargedIsoPFTauHPS27_eta2p1_TightID_CrossL1_v1, fragment.HLT_IsoMu20_eta2p1_TightChargedIsoPFTauHPS27_eta2p1_TightID_CrossL1_v1, fragment.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTau35_Trk1_eta2p1_Reg_CrossL1_v12, fragment.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTau35_Trk1_TightID_eta2p1_Reg_CrossL1_v12, fragment.HLT_IsoMu24_eta2p1_TightChargedIsoPFTau35_Trk1_eta2p1_Reg_CrossL1_v12, fragment.HLT_IsoMu24_eta2p1_TightChargedIsoPFTau35_Trk1_TightID_eta2p1_Reg_CrossL1_v12, fragment.HLT_IsoMu24_eta2p1_TightChargedIsoPFTauHPS35_Trk1_eta2p1_Reg_CrossL1_v1, fragment.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTauHPS35_Trk1_TightID_eta2p1_Reg_CrossL1_v1, fragment.HLT_IsoMu24_eta2p1_TightChargedIsoPFTauHPS35_Trk1_TightID_eta2p1_Reg_CrossL1_v1, fragment.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTauHPS35_Trk1_eta2p1_Reg_CrossL1_v4, fragment.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTauHPS30_Trk1_eta2p1_Reg_CrossL1_v1, fragment.HLT_IsoMu27_LooseChargedIsoPFTau20_Trk1_eta2p1_SingleL1_v5, fragment.HLT_IsoMu27_LooseChargedIsoPFTauHPS20_Trk1_eta2p1_SingleL1_v1, fragment.HLT_IsoMu27_MediumChargedIsoPFTauHPS20_Trk1_eta2p1_SingleL1_v1, fragment.HLT_IsoMu27_TightChargedIsoPFTauHPS20_Trk1_eta2p1_SingleL1_v1, fragment.HLT_IsoMu20_v15, fragment.HLT_IsoMu24_v13, fragment.HLT_IsoMu24_eta2p1_v15, fragment.HLT_IsoMu27_v16, fragment.HLT_IsoMu30_v4, fragment.HLT_UncorrectedJetE30_NoBPTX_v6, fragment.HLT_UncorrectedJetE30_NoBPTX3BX_v6, fragment.HLT_UncorrectedJetE60_NoBPTX3BX_v6, fragment.HLT_UncorrectedJetE70_NoBPTX3BX_v6, fragment.HLT_L1SingleMu18_v3, fragment.HLT_L1SingleMu25_v2, fragment.HLT_L1SingleMuCosmics_v1, fragment.HLT_L2Mu10_v7, fragment.HLT_L2Mu10_NoVertex_NoBPTX3BX_v5, fragment.HLT_L2Mu10_NoVertex_NoBPTX_v6, fragment.HLT_L2Mu45_NoVertex_3Sta_NoBPTX3BX_v4, fragment.HLT_L2Mu40_NoVertex_3Sta_NoBPTX3BX_v5, fragment.HLT_L2Mu50_v2, fragment.HLT_L2Mu23NoVtx_2Cha_v1, fragment.HLT_L2Mu23NoVtx_2Cha_CosmicSeed_v1, fragment.HLT_DoubleL2Mu30NoVtx_2Cha_CosmicSeed_Eta2p4_v2, fragment.HLT_DoubleL2Mu30NoVtx_2Cha_Eta2p4_v2, fragment.HLT_DoubleL2Mu50_v2, fragment.HLT_DoubleL2Mu23NoVtx_2Cha_CosmicSeed_v2, fragment.HLT_DoubleL2Mu23NoVtx_2Cha_CosmicSeed_NoL2Matched_v2, fragment.HLT_DoubleL2Mu25NoVtx_2Cha_CosmicSeed_v2, fragment.HLT_DoubleL2Mu25NoVtx_2Cha_CosmicSeed_NoL2Matched_v2, fragment.HLT_DoubleL2Mu25NoVtx_2Cha_CosmicSeed_Eta2p4_v2, fragment.HLT_DoubleL2Mu23NoVtx_2Cha_v2, fragment.HLT_DoubleL2Mu23NoVtx_2Cha_NoL2Matched_v2, fragment.HLT_DoubleL2Mu25NoVtx_2Cha_v2, fragment.HLT_DoubleL2Mu25NoVtx_2Cha_NoL2Matched_v2, fragment.HLT_DoubleL2Mu25NoVtx_2Cha_Eta2p4_v2, fragment.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_v14, fragment.HLT_Mu19_TrkIsoVVL_Mu9_TrkIsoVVL_v3, fragment.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v15, fragment.HLT_Mu19_TrkIsoVVL_Mu9_TrkIsoVVL_DZ_v3, fragment.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_Mass8_v5, fragment.HLT_Mu19_TrkIsoVVL_Mu9_TrkIsoVVL_DZ_Mass8_v3, fragment.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_Mass3p8_v5, fragment.HLT_Mu19_TrkIsoVVL_Mu9_TrkIsoVVL_DZ_Mass3p8_v3, fragment.HLT_Mu25_TkMu0_Onia_v8, fragment.HLT_Mu30_TkMu0_Psi_v1, fragment.HLT_Mu30_TkMu0_Upsilon_v1, fragment.HLT_Mu20_TkMu0_Phi_v8, fragment.HLT_Mu25_TkMu0_Phi_v8, fragment.HLT_Mu12_v3, fragment.HLT_Mu15_v3, fragment.HLT_Mu20_v12, fragment.HLT_Mu27_v13, fragment.HLT_Mu50_v13, fragment.HLT_Mu55_v3, fragment.HLT_OldMu100_v3, fragment.HLT_TkMu100_v2, fragment.HLT_DiPFJet15_NoCaloMatched_v16, fragment.HLT_DiPFJet25_NoCaloMatched_v16, fragment.HLT_DiPFJet15_FBEta3_NoCaloMatched_v17, fragment.HLT_DiPFJet25_FBEta3_NoCaloMatched_v17, fragment.HLT_DiPFJetAve40_v14, fragment.HLT_DiPFJetAve60_v14, fragment.HLT_DiPFJetAve80_v13, fragment.HLT_DiPFJetAve140_v13, fragment.HLT_DiPFJetAve200_v13, fragment.HLT_DiPFJetAve260_v14, fragment.HLT_DiPFJetAve320_v14, fragment.HLT_DiPFJetAve400_v14, fragment.HLT_DiPFJetAve500_v14, fragment.HLT_DiPFJetAve15_HFJEC_v17, fragment.HLT_DiPFJetAve25_HFJEC_v17, fragment.HLT_DiPFJetAve35_HFJEC_v17, fragment.HLT_DiPFJetAve60_HFJEC_v15, fragment.HLT_DiPFJetAve80_HFJEC_v16, fragment.HLT_DiPFJetAve100_HFJEC_v16, fragment.HLT_DiPFJetAve160_HFJEC_v16, fragment.HLT_DiPFJetAve220_HFJEC_v16, fragment.HLT_DiPFJetAve300_HFJEC_v16, fragment.HLT_AK8PFJet15_v3, fragment.HLT_AK8PFJet25_v3, fragment.HLT_AK8PFJet40_v16, fragment.HLT_AK8PFJet60_v15, fragment.HLT_AK8PFJet80_v15, fragment.HLT_AK8PFJet140_v15, fragment.HLT_AK8PFJet200_v15, fragment.HLT_AK8PFJet260_v16, fragment.HLT_AK8PFJet320_v16, fragment.HLT_AK8PFJet400_v16, fragment.HLT_AK8PFJet450_v16, fragment.HLT_AK8PFJet500_v16, fragment.HLT_AK8PFJet550_v11, fragment.HLT_PFJet15_v3, fragment.HLT_PFJet25_v3, fragment.HLT_PFJet40_v21, fragment.HLT_PFJet60_v21, fragment.HLT_PFJet80_v20, fragment.HLT_PFJet140_v19, fragment.HLT_PFJet200_v19, fragment.HLT_PFJet260_v20, fragment.HLT_PFJet320_v20, fragment.HLT_PFJet400_v20, fragment.HLT_PFJet450_v21, fragment.HLT_PFJet500_v21, fragment.HLT_PFJet550_v11, fragment.HLT_PFJetFwd15_v3, fragment.HLT_PFJetFwd25_v3, fragment.HLT_PFJetFwd40_v19, fragment.HLT_PFJetFwd60_v19, fragment.HLT_PFJetFwd80_v18, fragment.HLT_PFJetFwd140_v18, fragment.HLT_PFJetFwd200_v18, fragment.HLT_PFJetFwd260_v19, fragment.HLT_PFJetFwd320_v19, fragment.HLT_PFJetFwd400_v19, fragment.HLT_PFJetFwd450_v19, fragment.HLT_PFJetFwd500_v19, fragment.HLT_AK8PFJetFwd15_v3, fragment.HLT_AK8PFJetFwd25_v3, fragment.HLT_AK8PFJetFwd40_v15, fragment.HLT_AK8PFJetFwd60_v14, fragment.HLT_AK8PFJetFwd80_v14, fragment.HLT_AK8PFJetFwd140_v14, fragment.HLT_AK8PFJetFwd200_v14, fragment.HLT_AK8PFJetFwd260_v15, fragment.HLT_AK8PFJetFwd320_v15, fragment.HLT_AK8PFJetFwd400_v15, fragment.HLT_AK8PFJetFwd450_v15, fragment.HLT_AK8PFJetFwd500_v15, fragment.HLT_PFHT180_v17, fragment.HLT_PFHT250_v17, fragment.HLT_PFHT370_v17, fragment.HLT_PFHT430_v17, fragment.HLT_PFHT510_v17, fragment.HLT_PFHT590_v17, fragment.HLT_PFHT680_v17, fragment.HLT_PFHT780_v17, fragment.HLT_PFHT890_v17, fragment.HLT_PFHT1050_v18, fragment.HLT_PFHT500_PFMET100_PFMHT100_IDTight_v12, fragment.HLT_PFHT500_PFMET110_PFMHT110_IDTight_v12, fragment.HLT_PFHT700_PFMET85_PFMHT85_IDTight_v12, fragment.HLT_PFHT700_PFMET95_PFMHT95_IDTight_v12, fragment.HLT_PFHT800_PFMET75_PFMHT75_IDTight_v12, fragment.HLT_PFHT800_PFMET85_PFMHT85_IDTight_v12, fragment.HLT_PFMET110_PFMHT110_IDTight_v20, fragment.HLT_PFMET120_PFMHT120_IDTight_v20, fragment.HLT_PFMET130_PFMHT130_IDTight_v20, fragment.HLT_PFMET140_PFMHT140_IDTight_v20, fragment.HLT_PFMET100_PFMHT100_IDTight_CaloBTagDeepCSV_3p1_v8, fragment.HLT_PFMET110_PFMHT110_IDTight_CaloBTagDeepCSV_3p1_v8, fragment.HLT_PFMET120_PFMHT120_IDTight_CaloBTagDeepCSV_3p1_v8, fragment.HLT_PFMET130_PFMHT130_IDTight_CaloBTagDeepCSV_3p1_v8, fragment.HLT_PFMET140_PFMHT140_IDTight_CaloBTagDeepCSV_3p1_v8, fragment.HLT_PFMET120_PFMHT120_IDTight_PFHT60_v9, fragment.HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v9, fragment.HLT_PFMETTypeOne120_PFMHT120_IDTight_PFHT60_v9, fragment.HLT_PFMETTypeOne110_PFMHT110_IDTight_v12, fragment.HLT_PFMETTypeOne120_PFMHT120_IDTight_v12, fragment.HLT_PFMETTypeOne130_PFMHT130_IDTight_v12, fragment.HLT_PFMETTypeOne140_PFMHT140_IDTight_v11, fragment.HLT_PFMETNoMu110_PFMHTNoMu110_IDTight_v20, fragment.HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_v20, fragment.HLT_PFMETNoMu130_PFMHTNoMu130_IDTight_v19, fragment.HLT_PFMETNoMu140_PFMHTNoMu140_IDTight_v19, fragment.HLT_MonoCentralPFJet80_PFMETNoMu110_PFMHTNoMu110_IDTight_v20, fragment.HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v20, fragment.HLT_MonoCentralPFJet80_PFMETNoMu130_PFMHTNoMu130_IDTight_v19, fragment.HLT_MonoCentralPFJet80_PFMETNoMu140_PFMHTNoMu140_IDTight_v19, fragment.HLT_L1ETMHadSeeds_v2, fragment.HLT_CaloMHT90_v4, fragment.HLT_CaloMET80_NotCleaned_v4, fragment.HLT_CaloMET90_NotCleaned_v4, fragment.HLT_CaloMET100_NotCleaned_v4, fragment.HLT_CaloMET110_NotCleaned_v4, fragment.HLT_CaloMET250_NotCleaned_v4, fragment.HLT_CaloMET70_HBHECleaned_v4, fragment.HLT_CaloMET80_HBHECleaned_v4, fragment.HLT_CaloMET90_HBHECleaned_v4, fragment.HLT_CaloMET100_HBHECleaned_v4, fragment.HLT_CaloMET250_HBHECleaned_v4, fragment.HLT_CaloMET300_HBHECleaned_v4, fragment.HLT_CaloMET350_HBHECleaned_v4, fragment.HLT_PFMET200_NotCleaned_v9, fragment.HLT_PFMET200_HBHECleaned_v9, fragment.HLT_PFMET250_HBHECleaned_v9, fragment.HLT_PFMET300_HBHECleaned_v9, fragment.HLT_PFMET200_HBHE_BeamHaloCleaned_v9, fragment.HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned_v9, fragment.HLT_MET105_IsoTrk50_v9, fragment.HLT_MET120_IsoTrk50_v9, fragment.HLT_SingleJet30_Mu12_SinglePFJet40_v11, fragment.HLT_Mu12_DoublePFJets40_CaloBTagDeepCSV_p71_v2, fragment.HLT_Mu12_DoublePFJets100_CaloBTagDeepCSV_p71_v2, fragment.HLT_Mu12_DoublePFJets200_CaloBTagDeepCSV_p71_v2, fragment.HLT_Mu12_DoublePFJets350_CaloBTagDeepCSV_p71_v2, fragment.HLT_Mu12_DoublePFJets40MaxDeta1p6_DoubleCaloBTagDeepCSV_p71_v2, fragment.HLT_Mu12_DoublePFJets54MaxDeta1p6_DoubleCaloBTagDeepCSV_p71_v2, fragment.HLT_Mu12_DoublePFJets62MaxDeta1p6_DoubleCaloBTagDeepCSV_p71_v2, fragment.HLT_DoublePFJets40_CaloBTagDeepCSV_p71_v2, fragment.HLT_DoublePFJets100_CaloBTagDeepCSV_p71_v2, fragment.HLT_DoublePFJets200_CaloBTagDeepCSV_p71_v2, fragment.HLT_DoublePFJets350_CaloBTagDeepCSV_p71_v2, fragment.HLT_DoublePFJets116MaxDeta1p6_DoubleCaloBTagDeepCSV_p71_v2, fragment.HLT_DoublePFJets128MaxDeta1p6_DoubleCaloBTagDeepCSV_p71_v2, fragment.HLT_Photon300_NoHE_v12, fragment.HLT_Mu8_TrkIsoVVL_v12, fragment.HLT_Mu8_DiEle12_CaloIdL_TrackIdL_DZ_v18, fragment.HLT_Mu8_DiEle12_CaloIdL_TrackIdL_v18, fragment.HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT350_DZ_v19, fragment.HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT350_v19, fragment.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_v13, fragment.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_PFDiJet30_v1, fragment.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_CaloDiJet30_v1, fragment.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_PFDiJet30_PFBtagDeepCSV_1p5_v1, fragment.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_CaloDiJet30_CaloBtagDeepCSV_1p5_v1, fragment.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_v11, fragment.HLT_Mu17_TrkIsoVVL_v13, fragment.HLT_Mu19_TrkIsoVVL_v4, fragment.HLT_BTagMu_AK4DiJet20_Mu5_v13, fragment.HLT_BTagMu_AK4DiJet40_Mu5_v13, fragment.HLT_BTagMu_AK4DiJet70_Mu5_v13, fragment.HLT_BTagMu_AK4DiJet110_Mu5_v13, fragment.HLT_BTagMu_AK4DiJet170_Mu5_v12, fragment.HLT_BTagMu_AK4Jet300_Mu5_v12, fragment.HLT_BTagMu_AK8DiJet170_Mu5_v9, fragment.HLT_BTagMu_AK8Jet170_DoubleMu5_v2, fragment.HLT_BTagMu_AK8Jet300_Mu5_v12, fragment.HLT_BTagMu_AK4DiJet20_Mu5_noalgo_v13, fragment.HLT_BTagMu_AK4DiJet40_Mu5_noalgo_v13, fragment.HLT_BTagMu_AK4DiJet70_Mu5_noalgo_v13, fragment.HLT_BTagMu_AK4DiJet110_Mu5_noalgo_v13, fragment.HLT_BTagMu_AK4DiJet170_Mu5_noalgo_v12, fragment.HLT_BTagMu_AK4Jet300_Mu5_noalgo_v12, fragment.HLT_BTagMu_AK8DiJet170_Mu5_noalgo_v9, fragment.HLT_BTagMu_AK8Jet170_DoubleMu5_noalgo_v2, fragment.HLT_BTagMu_AK8Jet300_Mu5_noalgo_v12, fragment.HLT_Ele15_Ele8_CaloIdL_TrackIdL_IsoVL_v3, fragment.HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v19, fragment.HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_v19, fragment.HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v15, fragment.HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_v7, fragment.HLT_Mu12_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_v7, fragment.HLT_Mu12_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_v15, fragment.HLT_Mu12_DoublePhoton20_v5, fragment.HLT_TriplePhoton_20_20_20_CaloIdLV2_v3, fragment.HLT_TriplePhoton_20_20_20_CaloIdLV2_R9IdVL_v3, fragment.HLT_TriplePhoton_30_30_10_CaloIdLV2_v4, fragment.HLT_TriplePhoton_30_30_10_CaloIdLV2_R9IdVL_v4, fragment.HLT_TriplePhoton_35_35_5_CaloIdLV2_R9IdVL_v4, fragment.HLT_Photon20_v2, fragment.HLT_Photon33_v5, fragment.HLT_Photon50_v13, fragment.HLT_Photon75_v13, fragment.HLT_Photon90_v13, fragment.HLT_Photon120_v13, fragment.HLT_Photon150_v6, fragment.HLT_Photon175_v14, fragment.HLT_Photon200_v13, fragment.HLT_Photon100EB_TightID_TightIso_v2, fragment.HLT_Photon110EB_TightID_TightIso_v2, fragment.HLT_Photon120EB_TightID_TightIso_v2, fragment.HLT_Photon100EBHE10_v2, fragment.HLT_Photon100EEHE10_v2, fragment.HLT_Photon100EE_TightID_TightIso_v2, fragment.HLT_Photon50_R9Id90_HE10_IsoM_v14, fragment.HLT_Photon75_R9Id90_HE10_IsoM_v14, fragment.HLT_Photon75_R9Id90_HE10_IsoM_EBOnly_CaloMJJ300_PFJetsMJJ400DEta3_v5, fragment.HLT_Photon75_R9Id90_HE10_IsoM_EBOnly_CaloMJJ400_PFJetsMJJ600DEta3_v5, fragment.HLT_Photon90_R9Id90_HE10_IsoM_v14, fragment.HLT_Photon120_R9Id90_HE10_IsoM_v14, fragment.HLT_Photon165_R9Id90_HE10_IsoM_v15, fragment.HLT_Photon90_CaloIdL_PFHT700_v16, fragment.HLT_Diphoton30_22_R9Id_OR_IsoCaloId_AND_HE_R9Id_Mass90_v13, fragment.HLT_Diphoton30_22_R9Id_OR_IsoCaloId_AND_HE_R9Id_Mass95_v13, fragment.HLT_Diphoton30PV_18PV_R9Id_AND_IsoCaloId_AND_HE_R9Id_PixelVeto_Mass55_v15, fragment.HLT_Diphoton30PV_18PV_R9Id_AND_IsoCaloId_AND_HE_R9Id_NoPixelVeto_Mass55_v13, fragment.HLT_Photon35_TwoProngs35_v1, fragment.HLT_IsoMu24_TwoProngs35_v1, fragment.HLT_Dimuon0_Jpsi_L1_NoOS_v7, fragment.HLT_Dimuon0_Jpsi_NoVertexing_NoOS_v7, fragment.HLT_Dimuon0_Jpsi_v8, fragment.HLT_Dimuon0_Jpsi_NoVertexing_v8, fragment.HLT_Dimuon0_Jpsi_L1_4R_0er1p5R_v7, fragment.HLT_Dimuon0_Jpsi_NoVertexing_L1_4R_0er1p5R_v7, fragment.HLT_Dimuon0_Jpsi3p5_Muon2_v5, fragment.HLT_Dimuon0_Upsilon_L1_4p5_v9, fragment.HLT_Dimuon0_Upsilon_L1_5_v9, fragment.HLT_Dimuon0_Upsilon_L1_4p5NoOS_v8, fragment.HLT_Dimuon0_Upsilon_L1_4p5er2p0_v9, fragment.HLT_Dimuon0_Upsilon_L1_4p5er2p0M_v7, fragment.HLT_Dimuon0_Upsilon_NoVertexing_v7, fragment.HLT_Dimuon0_Upsilon_L1_5M_v8, fragment.HLT_Dimuon0_LowMass_L1_0er1p5R_v7, fragment.HLT_Dimuon0_LowMass_L1_0er1p5_v8, fragment.HLT_Dimuon0_LowMass_v8, fragment.HLT_Dimuon0_LowMass_L1_4_v8, fragment.HLT_Dimuon0_LowMass_L1_4R_v7, fragment.HLT_Dimuon0_LowMass_L1_TM530_v6, fragment.HLT_Dimuon0_Upsilon_Muon_L1_TM0_v6, fragment.HLT_Dimuon0_Upsilon_Muon_NoL1Mass_v6, fragment.HLT_TripleMu_5_3_3_Mass3p8_DZ_v8, fragment.HLT_TripleMu_10_5_5_DZ_v10, fragment.HLT_TripleMu_12_10_5_v10, fragment.HLT_Tau3Mu_Mu7_Mu1_TkMu1_Tau15_v4, fragment.HLT_Tau3Mu_Mu7_Mu1_TkMu1_Tau15_Charge1_v4, fragment.HLT_Tau3Mu_Mu7_Mu1_TkMu1_IsoTau15_v4, fragment.HLT_Tau3Mu_Mu7_Mu1_TkMu1_IsoTau15_Charge1_v4, fragment.HLT_DoubleMu3_DZ_PFMET50_PFMHT60_v10, fragment.HLT_DoubleMu3_DZ_PFMET70_PFMHT70_v10, fragment.HLT_DoubleMu3_DZ_PFMET90_PFMHT90_v10, fragment.HLT_DoubleMu3_Trk_Tau3mu_NoL1Mass_v6, fragment.HLT_DoubleMu4_Jpsi_Displaced_v7, fragment.HLT_DoubleMu4_Jpsi_NoVertexing_v7, fragment.HLT_DoubleMu4_JpsiTrkTrk_Displaced_v7, fragment.HLT_DoubleMu43NoFiltersNoVtx_v4, fragment.HLT_DoubleMu48NoFiltersNoVtx_v4, fragment.HLT_Mu43NoFiltersNoVtx_Photon43_CaloIdL_v5, fragment.HLT_Mu48NoFiltersNoVtx_Photon48_CaloIdL_v5, fragment.HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v1, fragment.HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v1, fragment.HLT_DoubleMu33NoFiltersNoVtxDisplaced_v1, fragment.HLT_DoubleMu40NoFiltersNoVtxDisplaced_v1, fragment.HLT_DoubleMu20_7_Mass0to30_L1_DM4_v7, fragment.HLT_DoubleMu20_7_Mass0to30_L1_DM4EG_v8, fragment.HLT_HT425_v9, fragment.HLT_HT430_DisplacedDijet40_DisplacedTrack_v13, fragment.HLT_HT500_DisplacedDijet40_DisplacedTrack_v13, fragment.HLT_HT430_DisplacedDijet60_DisplacedTrack_v13, fragment.HLT_HT400_DisplacedDijet40_DisplacedTrack_v13, fragment.HLT_HT650_DisplacedDijet60_Inclusive_v13, fragment.HLT_HT550_DisplacedDijet60_Inclusive_v13, fragment.HLT_DiJet110_35_Mjj650_PFMET110_v9, fragment.HLT_DiJet110_35_Mjj650_PFMET120_v9, fragment.HLT_DiJet110_35_Mjj650_PFMET130_v9, fragment.HLT_TripleJet110_35_35_Mjj650_PFMET110_v9, fragment.HLT_TripleJet110_35_35_Mjj650_PFMET120_v9, fragment.HLT_TripleJet110_35_35_Mjj650_PFMET130_v9, fragment.HLT_Ele30_eta2p1_WPTight_Gsf_CentralPFJet35_EleCleaned_v13, fragment.HLT_Ele28_eta2p1_WPTight_Gsf_HT150_v13, fragment.HLT_Ele28_HighEta_SC20_Mass55_v13, fragment.HLT_DoubleMu20_7_Mass0to30_Photon23_v8, fragment.HLT_Ele15_IsoVVVL_PFHT450_CaloBTagDeepCSV_4p5_v8, fragment.HLT_Ele15_IsoVVVL_PFHT450_PFMET50_v16, fragment.HLT_Ele15_IsoVVVL_PFHT450_v16, fragment.HLT_Ele50_IsoVVVL_PFHT450_v16, fragment.HLT_Ele15_IsoVVVL_PFHT600_v20, fragment.HLT_Mu4_TrkIsoVVL_DiPFJet90_40_DEta3p5_MJJ750_HTT300_PFMETNoMu60_v15, fragment.HLT_Mu8_TrkIsoVVL_DiPFJet40_DEta3p5_MJJ750_HTT300_PFMETNoMu60_v16, fragment.HLT_Mu10_TrkIsoVVL_DiPFJet40_DEta3p5_MJJ750_HTT350_PFMETNoMu60_v15, fragment.HLT_Mu15_IsoVVVL_PFHT450_CaloBTagDeepCSV_4p5_v8, fragment.HLT_Mu15_IsoVVVL_PFHT450_PFMET50_v15, fragment.HLT_Mu15_IsoVVVL_PFHT450_v15, fragment.HLT_Mu50_IsoVVVL_PFHT450_v15, fragment.HLT_Mu15_IsoVVVL_PFHT600_v19, fragment.HLT_Mu3er1p5_PFJet100er2p5_PFMET70_PFMHT70_IDTight_v2, fragment.HLT_Mu3er1p5_PFJet100er2p5_PFMET80_PFMHT80_IDTight_v2, fragment.HLT_Mu3er1p5_PFJet100er2p5_PFMET90_PFMHT90_IDTight_v2, fragment.HLT_Mu3er1p5_PFJet100er2p5_PFMET100_PFMHT100_IDTight_v2, fragment.HLT_Mu3er1p5_PFJet100er2p5_PFMETNoMu70_PFMHTNoMu70_IDTight_v2, fragment.HLT_Mu3er1p5_PFJet100er2p5_PFMETNoMu80_PFMHTNoMu80_IDTight_v2, fragment.HLT_Mu3er1p5_PFJet100er2p5_PFMETNoMu90_PFMHTNoMu90_IDTight_v2, fragment.HLT_Mu3er1p5_PFJet100er2p5_PFMETNoMu100_PFMHTNoMu100_IDTight_v2, fragment.HLT_Dimuon10_PsiPrime_Barrel_Seagulls_v7, fragment.HLT_Dimuon20_Jpsi_Barrel_Seagulls_v7, fragment.HLT_Dimuon12_Upsilon_y1p4_v2, fragment.HLT_Dimuon14_Phi_Barrel_Seagulls_v7, fragment.HLT_Dimuon18_PsiPrime_v14, fragment.HLT_Dimuon25_Jpsi_v14, fragment.HLT_Dimuon18_PsiPrime_noCorrL1_v6, fragment.HLT_Dimuon24_Upsilon_noCorrL1_v6, fragment.HLT_Dimuon24_Phi_noCorrL1_v6, fragment.HLT_Dimuon25_Jpsi_noCorrL1_v6, fragment.HLT_DiMu4_Ele9_CaloIdL_TrackIdL_DZ_Mass3p8_v17, fragment.HLT_DiMu9_Ele9_CaloIdL_TrackIdL_DZ_v17, fragment.HLT_DiMu9_Ele9_CaloIdL_TrackIdL_v17, fragment.HLT_DoubleIsoMu20_eta2p1_v7, fragment.HLT_TrkMu12_DoubleTrkMu5NoFiltersNoVtx_v6, fragment.HLT_TrkMu16_DoubleTrkMu6NoFiltersNoVtx_v12, fragment.HLT_TrkMu17_DoubleTrkMu8NoFiltersNoVtx_v13, fragment.HLT_Mu8_v12, fragment.HLT_Mu17_v13, fragment.HLT_Mu19_v4, fragment.HLT_Mu17_Photon30_IsoCaloId_v6, fragment.HLT_Ele8_CaloIdL_TrackIdL_IsoVL_PFJet30_v16, fragment.HLT_Ele12_CaloIdL_TrackIdL_IsoVL_PFJet30_v18, fragment.HLT_Ele15_CaloIdL_TrackIdL_IsoVL_PFJet30_v3, fragment.HLT_Ele23_CaloIdL_TrackIdL_IsoVL_PFJet30_v18, fragment.HLT_Ele8_CaloIdM_TrackIdM_PFJet30_v18, fragment.HLT_Ele17_CaloIdM_TrackIdM_PFJet30_v16, fragment.HLT_Ele23_CaloIdM_TrackIdM_PFJet30_v18, fragment.HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165_v18, fragment.HLT_Ele115_CaloIdVT_GsfTrkIdT_v14, fragment.HLT_Ele135_CaloIdVT_GsfTrkIdT_v7, fragment.HLT_Ele145_CaloIdVT_GsfTrkIdT_v8, fragment.HLT_Ele200_CaloIdVT_GsfTrkIdT_v8, fragment.HLT_Ele250_CaloIdVT_GsfTrkIdT_v13, fragment.HLT_Ele300_CaloIdVT_GsfTrkIdT_v13, fragment.HLT_PFHT330PT30_QuadPFJet_75_60_45_40_TriplePFBTagDeepCSV_4p5_v3, fragment.HLT_PFHT330PT30_QuadPFJet_75_60_45_40_v9, fragment.HLT_PFHT400_SixPFJet32_DoublePFBTagDeepCSV_2p94_v8, fragment.HLT_PFHT400_SixPFJet32_v8, fragment.HLT_PFHT450_SixPFJet36_PFBTagDeepCSV_1p59_v7, fragment.HLT_PFHT450_SixPFJet36_v7, fragment.HLT_PFHT400_FivePFJet_100_100_60_30_30_v8, fragment.HLT_PFHT400_FivePFJet_100_100_60_30_30_DoublePFBTagDeepCSV_4p5_v8, fragment.HLT_PFHT400_FivePFJet_120_120_60_30_30_DoublePFBTagDeepCSV_4p5_v8, fragment.HLT_PFHT350_v19, fragment.HLT_PFHT350MinPFJet15_v9, fragment.HLT_Photon60_R9Id90_CaloIdL_IsoL_v5, fragment.HLT_Photon60_R9Id90_CaloIdL_IsoL_DisplacedIdL_v5, fragment.HLT_Photon60_R9Id90_CaloIdL_IsoL_DisplacedIdL_PFHT350MinPFJet15_v11, fragment.HLT_ECALHT800_v10, fragment.HLT_DiSC30_18_EIso_AND_HE_Mass70_v13, fragment.HLT_Physics_v7, fragment.HLT_Physics_part0_v7, fragment.HLT_Physics_part1_v7, fragment.HLT_Physics_part2_v7, fragment.HLT_Physics_part3_v7, fragment.HLT_Physics_part4_v7, fragment.HLT_Physics_part5_v7, fragment.HLT_Physics_part6_v7, fragment.HLT_Physics_part7_v7, fragment.DST_Physics_v7, fragment.HLT_Random_v3, fragment.HLT_ZeroBias_v6, fragment.HLT_ZeroBias_Alignment_v1, fragment.HLT_ZeroBias_part0_v6, fragment.HLT_ZeroBias_part1_v6, fragment.HLT_ZeroBias_part2_v6, fragment.HLT_ZeroBias_part3_v6, fragment.HLT_ZeroBias_part4_v6, fragment.HLT_ZeroBias_part5_v6, fragment.HLT_ZeroBias_part6_v6, fragment.HLT_ZeroBias_part7_v6, fragment.DST_ZeroBias_v2, fragment.DST_HT250_CaloScouting_v10, fragment.DST_HT250_CaloBTagScouting_v10, fragment.DST_HT410_PFScouting_v16, fragment.DST_HT410_BTagScouting_v16, fragment.DST_ZeroBias_BTagScouting_v15, fragment.DST_ZeroBias_CaloScouting_PFScouting_v14, fragment.DST_CaloJet40_BTagScouting_v15, fragment.DST_CaloJet40_CaloScouting_PFScouting_v15, fragment.DST_CaloJet40_CaloBTagScouting_v14, fragment.DST_L1HTT_BTagScouting_v15, fragment.DST_L1HTT_CaloScouting_PFScouting_v15, fragment.DST_L1HTT_CaloBTagScouting_v14, fragment.DST_L1DoubleMu_BTagScouting_v16, fragment.DST_L1DoubleMu_CaloScouting_PFScouting_v15, fragment.DST_DoubleMu3_noVtx_CaloScouting_Monitoring_v6, fragment.DST_DoubleMu3_noVtx_CaloScouting_v6, fragment.DST_DoubleMu1_noVtx_CaloScouting_v2, fragment.DST_DoubleMu3_noVtx_Mass10_PFScouting_v3, fragment.HLT_AK4CaloJet30_v11, fragment.HLT_AK4CaloJet40_v10, fragment.HLT_AK4CaloJet50_v10, fragment.HLT_AK4CaloJet80_v10, fragment.HLT_AK4CaloJet100_v10, fragment.HLT_AK4CaloJet120_v9, fragment.HLT_AK4PFJet30_v19, fragment.HLT_AK4PFJet50_v19, fragment.HLT_AK4PFJet80_v19, fragment.HLT_AK4PFJet100_v19, fragment.HLT_AK4PFJet120_v18, fragment.HLT_SinglePhoton10_Eta3p1ForPPRef_v8, fragment.HLT_SinglePhoton20_Eta3p1ForPPRef_v9, fragment.HLT_SinglePhoton30_Eta3p1ForPPRef_v9, fragment.HLT_Photon20_HoverELoose_v10, fragment.HLT_Photon30_HoverELoose_v10, fragment.HLT_EcalCalibration_v4, fragment.HLT_HcalCalibration_v5, fragment.AlCa_EcalPhiSym_v9, fragment.HLT_L1UnpairedBunchBptxMinus_v2, fragment.HLT_L1UnpairedBunchBptxPlus_v2, fragment.HLT_L1NotBptxOR_v3, fragment.HLT_L1_CDC_SingleMu_3_er1p2_TOP120_DPHI2p618_3p142_v2, fragment.HLT_CDC_L2cosmic_10_er1p0_v1, fragment.HLT_CDC_L2cosmic_5p5_er1p0_v1, fragment.HLT_HcalNZS_v13, fragment.HLT_HcalPhiSym_v15, fragment.HLT_HcalIsolatedbunch_v5, fragment.HLT_IsoTrackHB_v4, fragment.HLT_IsoTrackHE_v4, fragment.HLT_ZeroBias_FirstCollisionAfterAbortGap_v5, fragment.HLT_ZeroBias_IsolatedBunches_v5, fragment.HLT_ZeroBias_FirstCollisionInTrain_v4, fragment.HLT_ZeroBias_LastCollisionInTrain_v3, fragment.HLT_ZeroBias_FirstBXAfterTrain_v3, fragment.AlCa_RPCMuonNormalisation_v13, fragment.AlCa_LumiPixels_Random_v4, fragment.AlCa_LumiPixels_ZeroBias_v8, fragment.MC_ReducedIterativeTracking_v12, fragment.MC_PFMET_v17, fragment.MC_AK4PFJets_v17, fragment.MC_PFBTagDeepCSV_v10, fragment.MC_PFHT_v16, fragment.MC_PFMHT_v16, fragment.MC_CaloMET_v8, fragment.MC_CaloMET_JetIdCleaned_v9, fragment.MC_AK4CaloJets_v9, fragment.MC_AK4CaloJetsFromPV_v8, fragment.MC_CaloBTagDeepCSV_v8, fragment.MC_CaloHT_v8, fragment.MC_CaloMHT_v8, fragment.MC_AK8PFJets_v17, fragment.MC_AK8TrimPFJets_v17, fragment.MC_AK8PFHT_v16, fragment.MC_AK8CaloHT_v8, fragment.MC_Diphoton10_10_R9Id_OR_IsoCaloId_AND_HE_R9Id_Mass10_v13, fragment.MC_DoubleEle5_CaloIdL_MW_v15, fragment.MC_Ele5_WPTight_Gsf_v8, fragment.MC_Ele15_Ele10_CaloIdL_TrackIdL_IsoVL_DZ_v15, fragment.MC_IsoMu_v15, fragment.MC_DoubleMu_TrkIsoVVL_DZ_v11, fragment.MC_DoubleMuNoFiltersNoVtx_v7, fragment.AlCa_EcalPi0EBonly_v13, fragment.AlCa_EcalPi0EEonly_v13, fragment.AlCa_EcalEtaEBonly_v13, fragment.AlCa_EcalEtaEEonly_v13, fragment.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_v12, fragment.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET90_v12, fragment.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET100_v12, fragment.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET110_v8, fragment.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET120_v8, fragment.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET130_v8, fragment.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET140_v3, fragment.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_v12, fragment.HLT_MediumChargedIsoPFTau180HighPtRelaxedIso_Trk50_eta2p1_1pr_v11, fragment.HLT_MediumChargedIsoPFTau180HighPtRelaxedIso_Trk50_eta2p1_v12, fragment.HLT_MediumChargedIsoPFTau200HighPtRelaxedIso_Trk50_eta2p1_v12, fragment.HLT_MediumChargedIsoPFTau220HighPtRelaxedIso_Trk50_eta2p1_v12, fragment.HLT_Ele16_Ele12_Ele8_CaloIdL_TrackIdL_v9, fragment.HLT_Rsq0p35_v15, fragment.HLT_Rsq0p40_v15, fragment.HLT_RsqMR300_Rsq0p09_MR200_v15, fragment.HLT_RsqMR320_Rsq0p09_MR200_v15, fragment.HLT_RsqMR300_Rsq0p09_MR200_4jet_v15, fragment.HLT_RsqMR320_Rsq0p09_MR200_4jet_v15, fragment.HLT_IsoMu27_MET90_v3, fragment.HLT_DoubleMediumChargedIsoPFTau35_Trk1_eta2p1_Reg_v12, fragment.HLT_DoubleMediumChargedIsoPFTau35_Trk1_TightID_eta2p1_Reg_v12, fragment.HLT_DoubleTightChargedIsoPFTau35_Trk1_eta2p1_Reg_v12, fragment.HLT_DoubleTightChargedIsoPFTau35_Trk1_TightID_eta2p1_Reg_v12, fragment.HLT_DoubleMediumChargedIsoPFTauHPS30_L1MaxMass_Trk1_eta2p1_Reg_v1, fragment.HLT_DoubleTightChargedIsoPFTauHPS35_Trk1_eta2p1_Reg_v1, fragment.HLT_DoubleMediumChargedIsoPFTauHPS35_Trk1_TightID_eta2p1_Reg_v1, fragment.HLT_DoubleMediumChargedIsoPFTauHPS35_Trk1_eta2p1_Reg_v4, fragment.HLT_DoubleTightChargedIsoPFTauHPS35_Trk1_TightID_eta2p1_Reg_v1, fragment.HLT_DoubleMediumChargedIsoPFTauHPS40_Trk1_eta2p1_Reg_v1, fragment.HLT_DoubleTightChargedIsoPFTauHPS40_Trk1_eta2p1_Reg_v1, fragment.HLT_DoubleMediumChargedIsoPFTauHPS40_Trk1_TightID_eta2p1_Reg_v1, fragment.HLT_DoubleTightChargedIsoPFTauHPS40_Trk1_TightID_eta2p1_Reg_v1, fragment.HLT_VBF_DoubleLooseChargedIsoPFTau20_Trk1_eta2p1_v3, fragment.HLT_VBF_DoubleLooseChargedIsoPFTauHPS20_Trk1_eta2p1_v1, fragment.HLT_VBF_DoubleMediumChargedIsoPFTauHPS20_Trk1_eta2p1_v1, fragment.HLT_VBF_DoubleTightChargedIsoPFTauHPS20_Trk1_eta2p1_v1, fragment.HLT_Photon50_R9Id90_HE10_IsoM_EBOnly_PFJetsMJJ300DEta3_PFMET50_v5, fragment.HLT_Photon75_R9Id90_HE10_IsoM_EBOnly_PFJetsMJJ300DEta3_v5, fragment.HLT_Photon75_R9Id90_HE10_IsoM_EBOnly_PFJetsMJJ600DEta3_v5, fragment.HLT_PFMET100_PFMHT100_IDTight_PFHT60_v9, fragment.HLT_PFMETNoMu100_PFMHTNoMu100_IDTight_PFHT60_v9, fragment.HLT_PFMETTypeOne100_PFMHT100_IDTight_PFHT60_v9, fragment.HLT_Mu18_Mu9_SameSign_v4, fragment.HLT_Mu18_Mu9_SameSign_DZ_v4, fragment.HLT_Mu18_Mu9_v4, fragment.HLT_Mu18_Mu9_DZ_v4, fragment.HLT_Mu20_Mu10_SameSign_v4, fragment.HLT_Mu20_Mu10_SameSign_DZ_v4, fragment.HLT_Mu20_Mu10_v4, fragment.HLT_Mu20_Mu10_DZ_v4, fragment.HLT_Mu23_Mu12_SameSign_v4, fragment.HLT_Mu23_Mu12_SameSign_DZ_v4, fragment.HLT_Mu23_Mu12_v4, fragment.HLT_Mu23_Mu12_DZ_v4, fragment.HLT_DoubleMu2_Jpsi_DoubleTrk1_Phi1p05_v6, fragment.HLT_DoubleMu2_Jpsi_DoubleTkMu0_Phi_v5, fragment.HLT_DoubleMu3_DCA_PFMET50_PFMHT60_v10, fragment.HLT_TripleMu_5_3_3_Mass3p8_DCA_v3, fragment.HLT_QuadPFJet98_83_71_15_DoublePFBTagDeepCSV_1p3_7p7_VBF1_v8, fragment.HLT_QuadPFJet103_88_75_15_DoublePFBTagDeepCSV_1p3_7p7_VBF1_v8, fragment.HLT_QuadPFJet111_90_80_15_DoublePFBTagDeepCSV_1p3_7p7_VBF1_v8, fragment.HLT_QuadPFJet98_83_71_15_PFBTagDeepCSV_1p3_VBF2_v8, fragment.HLT_QuadPFJet103_88_75_15_PFBTagDeepCSV_1p3_VBF2_v8, fragment.HLT_QuadPFJet105_88_76_15_PFBTagDeepCSV_1p3_VBF2_v8, fragment.HLT_QuadPFJet111_90_80_15_PFBTagDeepCSV_1p3_VBF2_v8, fragment.HLT_QuadPFJet98_83_71_15_v5, fragment.HLT_QuadPFJet103_88_75_15_v5, fragment.HLT_QuadPFJet105_88_76_15_v5, fragment.HLT_QuadPFJet111_90_80_15_v5, fragment.HLT_AK8PFJet330_TrimMass30_PFAK8BTagDeepCSV_p17_v2, fragment.HLT_AK8PFJet330_TrimMass30_PFAK8BTagDeepCSV_p1_v2, fragment.HLT_AK8PFJet330_TrimMass30_PFAK8BoostedDoubleB_p02_v3, fragment.HLT_AK8PFJet330_TrimMass30_PFAK8BoostedDoubleB_np2_v2, fragment.HLT_AK8PFJet330_TrimMass30_PFAK8BoostedDoubleB_np4_v2, fragment.HLT_Diphoton30_18_R9IdL_AND_HE_AND_IsoCaloId_NoPixelVeto_Mass55_v2, fragment.HLT_Diphoton30_18_R9IdL_AND_HE_AND_IsoCaloId_NoPixelVeto_v2, fragment.HLT_Mu12_IP6_ToCSCS_v1, fragment.HLT_Mu12_IP6_part0_v2, fragment.HLT_Mu12_IP6_part1_v2, fragment.HLT_Mu12_IP6_part2_v2, fragment.HLT_Mu12_IP6_part3_v2, fragment.HLT_Mu12_IP6_part4_v2, fragment.HLT_Mu9_IP5_ToCSCS_v1, fragment.HLT_Mu9_IP5_part0_v2, fragment.HLT_Mu9_IP5_part1_v2, fragment.HLT_Mu9_IP5_part2_v2, fragment.HLT_Mu9_IP5_part3_v2, fragment.HLT_Mu9_IP5_part4_v2, fragment.HLT_Mu7_IP4_ToCSCS_v1, fragment.HLT_Mu7_IP4_part0_v2, fragment.HLT_Mu7_IP4_part1_v2, fragment.HLT_Mu7_IP4_part2_v2, fragment.HLT_Mu7_IP4_part3_v2, fragment.HLT_Mu7_IP4_part4_v2, fragment.HLT_Mu9_IP4_ToCSCS_v1, fragment.HLT_Mu9_IP4_part0_v2, fragment.HLT_Mu9_IP4_part1_v2, fragment.HLT_Mu9_IP4_part2_v2, fragment.HLT_Mu9_IP4_part3_v2, fragment.HLT_Mu9_IP4_part4_v2, fragment.HLT_Mu8_IP5_ToCSCS_v1, fragment.HLT_Mu8_IP5_part0_v2, fragment.HLT_Mu8_IP5_part1_v2, fragment.HLT_Mu8_IP5_part2_v2, fragment.HLT_Mu8_IP5_part3_v2, fragment.HLT_Mu8_IP5_part4_v2, fragment.HLT_Mu8_IP6_ToCSCS_v1, fragment.HLT_Mu8_IP6_part0_v2, fragment.HLT_Mu8_IP6_part1_v2, fragment.HLT_Mu8_IP6_part2_v2, fragment.HLT_Mu8_IP6_part3_v2, fragment.HLT_Mu8_IP6_part4_v2, fragment.HLT_Mu9_IP6_ToCSCS_v1, fragment.HLT_Mu9_IP6_part0_v3, fragment.HLT_Mu9_IP6_part1_v3, fragment.HLT_Mu9_IP6_part2_v3, fragment.HLT_Mu9_IP6_part3_v3, fragment.HLT_Mu9_IP6_part4_v3, fragment.HLT_Mu8_IP3_ToCSCS_v1, fragment.HLT_Mu8_IP3_part0_v3, fragment.HLT_Mu8_IP3_part1_v3, fragment.HLT_Mu8_IP3_part2_v3, fragment.HLT_Mu8_IP3_part3_v3, fragment.HLT_Mu8_IP3_part4_v3, fragment.HLT_Mu9_IP0_part0_v2, fragment.HLT_Mu9_IP3_part0_v2, fragment.HLT_QuadPFJet105_88_76_15_DoublePFBTagDeepCSV_1p3_7p7_VBF1_v8, fragment.HLT_TrkMu6NoFiltersNoVtx_v1, fragment.HLT_TrkMu16NoFiltersNoVtx_v1, fragment.HLT_DoubleTrkMu_16_6_NoFiltersNoVtx_v1, fragment.HLTriggerFinalPath, fragment.HLTAnalyzerEndpath, fragment.ScoutingPFOutput, fragment.ScoutingCaloMuonOutput ))
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/HIon/V8 (CMSSW_11_0_0_pre9)
  tableName = cms.string('/dev/CMSSW_11_0_0/HIon/V8')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_10_6_0/PRef
tableName = cms.string('/dev/CMSSW_10_6_0/PRef')"
-------------------------------------------------------------------------
"# /dev/CMSSW_10_6_0/HIon/V3 (CMSSW_10_6_0_pre4)
  tableName = cms.string('/dev/CMSSW_10_6_0/HIon/V3')
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/PIon/V8 (CMSSW_11_0_0_pre9)
  tableName = cms.string('/dev/CMSSW_11_0_0/PIon/V8')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_0_0/PIon/V8 (CMSSW_11_0_0_pre9)
tableName = cms.string('/dev/CMSSW_11_0_0/PIon/V8')"
-------------------------------------------------------------------------
"# /dev/CMSSW_10_6_0/PIon/V3 (CMSSW_10_6_0_pre4)
  tableName = cms.string('/dev/CMSSW_10_6_0/PIon/V3')
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/PRef/V8 (CMSSW_11_0_0_pre9)
  tableName = cms.string('/dev/CMSSW_11_0_0/PRef/V8')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_11_0_0/PRef/V8 (CMSSW_11_0_0_pre9)
tableName = cms.string('/dev/CMSSW_11_0_0/PRef/V8')"
-------------------------------------------------------------------------
"# /dev/CMSSW_10_6_0/PRef/V3 (CMSSW_10_6_0_pre4)
  tableName = cms.string('/dev/CMSSW_10_6_0/PRef/V3')
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"from HLTrigger.HLTfilters.triggerResultsFilter_cfi import triggerResultsFilter as streamPhysicsCommissioning_datasetCosmics_selector
streamPhysicsCommissioning_datasetCosmics_selector.hltResults = cms.InputTag('TriggerResults', '', 'HLT')
streamPhysicsCommissioning_datasetCosmics_selector.l1tResults = cms.InputTag('')
streamPhysicsCommissioning_datasetCosmics_selector.throw      = cms.bool(False)
streamPhysicsCommissioning_datasetCosmics_selector.triggerConditions = cms.vstring('HLT_L1SingleMuCosmics_v1')
"
-------------------------------------------------------------------------
"from HLTrigger.HLTfilters.triggerResultsFilter_cfi import triggerResultsFilter as streamPhysicsCommissioning_datasetHLTPhysics_selector
streamPhysicsCommissioning_datasetHLTPhysics_selector.hltResults = cms.InputTag('TriggerResults', '', 'HLT')
streamPhysicsCommissioning_datasetHLTPhysics_selector.l1tResults = cms.InputTag('')
streamPhysicsCommissioning_datasetHLTPhysics_selector.triggerConditions = cms.vstring(
     'HLT_L1_CDC_SingleMu_3_er1p2_TOP120_DPHI2p618_3p142_v2'
)"
-------------------------------------------------------------------------
"from HLTrigger.HLTfilters.triggerResultsFilter_cfi import triggerResultsFilter as streamPhysicsCommissioning_datasetCosmics_selector
streamPhysicsCommissioning_datasetCosmics_selector.hltResults = cms.InputTag('TriggerResults', '', 'HLT')
streamPhysicsCommissioning_datasetCosmics_selector.l1tResults = cms.InputTag('')
streamPhysicsCommissioning_datasetCosmics_selector.throw      = cms.bool(False)
streamPhysicsCommissioning_datasetCosmics_selector.triggerConditions = cms.vstring('HLT_L1SingleMuCosmics_v1')
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/GRun/V8 (CMSSW_11_0_0_pre9)
  tableName = cms.string('/dev/CMSSW_11_0_0/GRun/V8')
"
-------------------------------------------------------------------------
"process.transferSystem.destinations = cms.vstring(
    'Tier0', 
    'DQM',
    'ECAL', 
    'EventDisplay',
    'Lustre'
)

process.transferSystem.transferModes = cms.string('default')

process.transferSystem.test = cms.PSet()
process.transferSystem.emulator = cms.PSet()
process.transferSystem.test.streamA = cms.PSet()
process.transferSystem.test.streamCalibration = cms.PSet()
process.transferSystem.test.streamDQM = cms.PSet()
process.transferSystem.test.streamDQMCalibration = cms.PSet()
process.transferSystem.test.streamEcalCalibration = cms.PSet()
process.transferSystem.test.streamEventDisplay = cms.PSet()  
process.transferSystem.test.streamExpressCosmics = cms.PSet()
process.transferSystem.test.streamNanoDST = cms.PSet()
process.transferSystem.test.streamRPCMON = cms.PSet()
process.transferSystem.test.streamTrackerCalibration = cms.PSet()
process.transferSystem.test.streamLookArea = cms.PSet()

process.HLTPSetInitialCkfTrajectoryFilterForHI = cms.PSet(
    minimumNumberOfHits = cms.int32(4),
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    seedExtension = cms.double(1.2),
    chargeSignificance = cms.double(3.0),
    pixelSeedExtension = cms.bool(False),
    strictSeedExtension = cms.bool(True),
    nSigmaMinPt = cms.double(5.0),
    maxCCCLostHits = cms.int32(0),
    minPt = cms.double(0.5),
    maxConsecLostHits = cms.int32(1),
    minNumberOfHits = cms.int32(4),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(0),
    constantValueForLostHitsFractionFilter = cms.double(1.4),
    seedPairPenalty = cms.double(0.6),
    maxNumberOfHits = cms.int32(20),
    minNumberOfHitsForLoopers = cms.int32(6),
    minGoodStripCharge = cms.double(50.0),
    refToPSet_ = cms.string('HLTSiStripClusterChargeCutNone'),
    minNumberOfHitsPerLoop = cms.int32(2),
    minHitsMinPt = cms.int32(3),
    maxLostHitsFraction = cms.double(0.15),
    maxLostHits = cms.int32(5)
)

process.HLTIter0PSetTrajectoryBuilderIT = cms.PSet(
    ComponentType = cms.string('CkfTrajectoryBuilder'),
    lostHitPenalty = cms.double(30.0),
    TTRHBuilder = cms.string('hltESPTTRHBWithTrackAngle'),
    propagatorOpposite = cms.string('PropagatorWithMaterialParabolicMfOpposite'),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('HLTIter0PSetTrajectoryFilterIT')
    ),
    propagatorAlong = cms.string('PropagatorWithMaterialParabolicMf'),
    maxCand = cms.int32(5),
    alwaysUseInvalidHits = cms.bool(False),
    estimator = cms.string('hltESPChi2ChargeMeasurementEstimator9'),
    intermediateCleaning = cms.bool(True),
    updator = cms.string('KFUpdator')"
-------------------------------------------------------------------------
"# /dev/CMSSW_10_6_0/GRun/V3 (CMSSW_10_6_0_pre4)
  tableName = cms.string('/dev/CMSSW_10_6_0/GRun/V3')
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"'Cosmics',
"
-------------------------------------------------------------------------
"'Cosmics', 'Commissioning'"
-------------------------------------------------------------------------
"'Cosmics',
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"Cosmics = cms.vstring( 'HLT_L1SingleMuCosmics_v1' ),
"
-------------------------------------------------------------------------
"process.datasets = cms.PSet(
   Commissioning = cms.vstring( 'HLT_IsoTrackHB_v4',
     'HLT_IsoTrackHE_v4',
     'HLT_L1_CDC_SingleMu_3_er1p2_TOP120_DPHI2p618_3p142_v2' ),
   DQMOnlineBeamspot = cms.vstring( 'HLT_HT300_Beamspot_v11',
     'HLT_HT450_Beamspot_v11',
     'HLT_ZeroBias_Beamspot_v4' ),
   Cosmics = cms.vstring( 'HLT_L1SingleMuCosmics_v1' ),"
-------------------------------------------------------------------------
"Cosmics = cms.vstring( 'HLT_L1SingleMuCosmics_v1' ),
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"'HLT_L1SingleMuCosmics_v1',
"
-------------------------------------------------------------------------
"'HLT_L1SingleMuCosmics_v1',"
-------------------------------------------------------------------------
"'HLT_L1SingleMuCosmics_v1',
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"'HLT_Photon35_TwoProngs35_v1')cms.vstring( 'HLT_Photon50_R9Id90_HE10_IsoM_EBOnly_PFJetsMJJ300DEta3_PFMET50_v5',
'HLT_Photon50_R9Id90_HE10_IsoM_v14',
"
-------------------------------------------------------------------------
"process.datasets = cms.PSet(
    'HLT_Photon300_NoHE_v12',
    'HLT_Photon30_HoverELoose_v10',
    'HLT_Photon33_v5',
    'HLT_Photon50_v13',
    'HLT_Photon60_R9Id90_CaloIdL_IsoL_DisplacedIdL_PFHT350MinPFJet15_v11',
    'HLT_Photon60_R9Id90_CaloIdL_IsoL_DisplacedIdL_v5',
    'HLT_Photon35_TwoProngs35_v1',
    cms.vstring('HLT_Photon50_R9Id90_HE10_IsoM_EBOnly_PFJetsMJJ300DEta3_PFMET50_v5',
    'HLT_Photon50_R9Id90_HE10_IsoM_v14',
    )
)"
-------------------------------------------------------------------------
"'HLT_Photon35_TwoProngs35_v1')cms.vstring( 'HLT_Photon50_R9Id90_HE10_IsoM_EBOnly_PFJetsMJJ300DEta3_PFMET50_v5',
'HLT_Photon50_R9Id90_HE10_IsoM_v14',
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"process.hltL1sSingleMuCosmics = cms.EDFilter( ""HLTL1TSeed"",
    L1SeedsLogicalExpression = cms.string( ""L1_SingleMuCosmics"" ),
    L1EGammaInputTag = cms.InputTag( 'hltGtStage2Digis','EGamma' ),
    L1JetInputTag = cms.InputTag( 'hltGtStage2Digis','Jet' ),
    saveTags = cms.bool( True ),
    L1ObjectMapInputTag = cms.InputTag( ""hltGtStage2ObjectMap"" ),
    L1EtSumInputTag = cms.InputTag( 'hltGtStage2Digis','EtSum' ),
    L1TauInputTag = cms.InputTag( 'hltGtStage2Digis','Tau' ),
    L1MuonInputTag = cms.InputTag( 'hltGtStage2Digis','Muon' ),
    L1GlobalInputTag = cms.InputTag( ""hltGtStage2Digis"" )
)
process.hltPreL1SingleMuCosmics = cms.EDFilter( ""HLTPrescaler"",
    L1GtReadoutRecordTag = cms.InputTag( ""hltGtStage2Digis"" ),
    offset = cms.uint32( 0 )
)
process.hltL1MuCosmicsL1Filtered0 = cms.EDFilter( ""HLTMuonL1TFilter"",
    saveTags = cms.bool( True ),
    PreviousCandTag = cms.InputTag( ""hltL1sSingleMuCosmics"" ),
    MinPt = cms.double( 0.0 ),
    MinN = cms.int32( 1 ),
    MaxEta = cms.double( 2.5 ),
    CentralBxOnly = cms.bool( True ),
    SelectQualities = cms.vint32(  ),
    CandTag = cms.InputTag( 'hltGtStage2Digis','Muon' )
)
"
-------------------------------------------------------------------------
"process.HLTRerunForCosmics = cmsEDFilter.HLTL1TSeed(
    L1SeedsLogicalExpression = cms.string( ""L1_SingleMuCosmics"" ),
    L1EGammaInputTag = cms.InputTag( 'hltGtStage2Digis','EGamma' ),
    L1JetInputTag = cms.InputTag( 'hltGtStage2Digis','Jet' ),
    saveTags = cms.bool( True ),
    L1ObjectMapInputTag = cms.InputTag( ""hltGtStage2ObjectMap"" ),
    L1EtSumInputTag = cms.InputTag( 'hltGtStage2Digis','EtSum' ),
    L1TauInputTag = cms.InputTag( 'hltGtStage2Digis','Tau' ),
    L1MuonInputTag = cms.InputTag( 'hltGtStage2Digis','Muon' ),
    L1GlobalInputTag = cms.InputTag( ""hltGtStage2Digis"" )
)
process.hltPreL1RerunForCosmics = cms.EDFilter( ""HLTPrescaler"",
    L1GtReadoutRecordTag = cms.InputTag( ""hltGtStage2Digis"" ),
    offset = cms.uint32( 0 )
)
process.hltCosmicsL1Filtered0 = cms.EDFilter( ""HLTMuonL1TFilter"",
    saveTags = cms.bool( True ),
    PreviousCandTag = cms.InputTag( ""HLTRerunForCosmics"" ),
    MinPt = cms.double( 0.0 ),
    MinN = cms.int32( 1 ),
    MaxEta = cms.double( 2.5 ),
    CentralBxOnly = cms.bool( True ),
    SelectQualities = cms.vint32(  ),
    CandTag = cms.InputTag( 'hltGtStage2Digis','Muon' )
)"
-------------------------------------------------------------------------
"process.hltL1sSingleMuCosmics = cms.EDFilter( ""HLTL1TSeed"",
    L1SeedsLogicalExpression = cms.string( ""L1_SingleMuCosmics"" ),
    L1EGammaInputTag = cms.InputTag( 'hltGtStage2Digis','EGamma' ),
    L1JetInputTag = cms.InputTag( 'hltGtStage2Digis','Jet' ),
    saveTags = cms.bool( True ),
    L1ObjectMapInputTag = cms.InputTag( ""hltGtStage2ObjectMap"" ),
    L1EtSumInputTag = cms.InputTag( 'hltGtStage2Digis','EtSum' ),
    L1TauInputTag = cms.InputTag( 'hltGtStage2Digis','Tau' ),
    L1MuonInputTag = cms.InputTag( 'hltGtStage2Digis','Muon' ),
    L1GlobalInputTag = cms.InputTag( ""hltGtStage2Digis"" )
)
process.hltPreL1SingleMuCosmics = cms.EDFilter( ""HLTPrescaler"",
    L1GtReadoutRecordTag = cms.InputTag( ""hltGtStage2Digis"" ),
    offset = cms.uint32( 0 )
)
process.hltL1MuCosmicsL1Filtered0 = cms.EDFilter( ""HLTMuonL1TFilter"",
    saveTags = cms.bool( True ),
    PreviousCandTag = cms.InputTag( ""hltL1sSingleMuCosmics"" ),
    MinPt = cms.double( 0.0 ),
    MinN = cms.int32( 1 ),
    MaxEta = cms.double( 2.5 ),
    CentralBxOnly = cms.bool( True ),
    SelectQualities = cms.vint32(  ),
    CandTag = cms.InputTag( 'hltGtStage2Digis','Muon' )
)
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"'HLT_L1SingleMuCosmics_v1',
"
-------------------------------------------------------------------------
"'HLT_L1SingleMuCosmics_v1 / 1',"
-------------------------------------------------------------------------
"'HLT_L1SingleMuCosmics_v1',
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"'HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned_v9 / 3')cms.vstring( 'HLT_MET105_IsoTrk50_v9 / 3',
'HLT_MET120_IsoTrk50_v9 / 3',
"
-------------------------------------------------------------------------
"process.hltPreDQMOutputSmart = cms.EDFilter( ""TriggerResultsFilter"",
       'HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned_v9 / 3',
       'HLT_MET105_IsoTrk50_v9 / 3',
       'HLT_MET120_IsoTrk50_v9 / 3',"
-------------------------------------------------------------------------
"'HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned_v9 / 3')cms.vstring( 'HLT_MET105_IsoTrk50_v9 / 3',
'HLT_MET120_IsoTrk50_v9 / 3',
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"'HLT_ZeroBias_FirstCollisionInTrain_v4 / 3')cms.vstring( 'HLT_ZeroBias_LastCollisionInTrain_v3 / 3',
'HLT_ZeroBias_FirstBXAfterTrain_v3 / 3',
"
-------------------------------------------------------------------------
"'HLT_ZeroBias_FirstCollisionAfterAbortGap_v5 / 3',
'HLT_ZeroBias_LastCollisionInTrain_v3 / 3',
'HLT_ZeroBias_FirstBXAfterTrain_v3 / 3',"
-------------------------------------------------------------------------
"'HLT_ZeroBias_FirstCollisionInTrain_v4 / 3')cms.vstring( 'HLT_ZeroBias_LastCollisionInTrain_v3 / 3',
'HLT_ZeroBias_FirstBXAfterTrain_v3 / 3',
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"'HLT_L1SingleMuCosmics_v1',
"
-------------------------------------------------------------------------
"'HLT_L1SingleMuCosmics_v1',"
-------------------------------------------------------------------------
"'HLT_L1SingleMuCosmics_v1',
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"'HLT_L1SingleMuCosmics_v1',
"
-------------------------------------------------------------------------
"'HLT_L1SingleMuCosmics_v1',"
-------------------------------------------------------------------------
"'HLT_L1SingleMuCosmics_v1',
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"'HLT_Photon35_TwoProngs35_v1')cms.vstring( 'HLT_Photon50_R9Id90_HE10_IsoM_EBOnly_PFJetsMJJ300DEta3_PFMET50_v5',
'HLT_Photon50_R9Id90_HE10_IsoM_v14',
"
-------------------------------------------------------------------------
"process.hltOutptDQM = cms.OutputModule( ""PoolOutputModule"",
   'HLT_Photon300_NoHE_v12',
   'HLT_Photon30_HoverELoose_v10',
   'HLT_Photon33_v5',
   'HLT_Photon50_v13',
   'HLT_Photon60_R9Id90_CaloIdL_IsoL_DisplacedIdL_PFHT350MinPFJet15_v11',
   'HLT_Photon60_R9Id90_CaloIdL_IsoL_DisplacedIdL_v5',
   'HLT_Photon35_TwoProngs35_v1',
   'HLT_Photon50_R9Id90_HE10_IsoM_EBOnly_PFJetsMJJ300DEta3_PFMET50_v5',
   'HLT_Photon50_R9Id90_HE10_IsoM_v14',"
-------------------------------------------------------------------------
"'HLT_Photon35_TwoProngs35_v1')cms.vstring( 'HLT_Photon50_R9Id90_HE10_IsoM_EBOnly_PFJetsMJJ300DEta3_PFMET50_v5',
'HLT_Photon50_R9Id90_HE10_IsoM_v14',
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"process.HLT_L1SingleMuCosmics_v1 = cms.Path( process.HLTBeginSequence  process.hltL1sSingleMuCosmics  process.hltPreL1SingleMuCosmics  process.hltL1MuCosmicsL1Filtered0  process.HLTEndSequence )
"
-------------------------------------------------------------------------
process.HLT_L1SingleMuCosmics_v1 = cms.Path( process.HLTBeginSequence + process.hltL1sSingleMuCosmics + process.hltPreL1SingleMuCosmics + process.hltL1MuCosmicsL1Filtered0 + process.HLTEndSequence )
-------------------------------------------------------------------------
"process.HLT_L1SingleMuCosmics_v1 = cms.Path( process.HLTBeginSequence  process.hltL1sSingleMuCosmics  process.hltPreL1SingleMuCosmics  process.hltL1MuCosmicsL1Filtered0  process.HLTEndSequence )
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"process.HLTSchedule = cms.Schedule( *(process.HLTriggerFirstPath, process.HLT_AK8PFJet360_TrimMass30_v18, process.HLT_AK8PFJet380_TrimMass30_v11, process.HLT_AK8PFJet400_TrimMass30_v12, process.HLT_AK8PFJet420_TrimMass30_v11, process.HLT_AK8PFHT750_TrimMass50_v12, process.HLT_AK8PFHT800_TrimMass50_v12, process.HLT_AK8PFHT850_TrimMass50_v11, process.HLT_AK8PFHT900_TrimMass50_v11, process.HLT_CaloJet500_NoJetID_v12, process.HLT_CaloJet550_NoJetID_v7, process.HLT_DoubleMu5_Upsilon_DoubleEle3_CaloIdL_TrackIdL_v4, process.HLT_DoubleMu3_DoubleEle7p5_CaloIdL_TrackIdL_Upsilon_v4, process.HLT_Trimuon5_3p5_2_Upsilon_Muon_v5, process.HLT_TrimuonOpen_5_3p5_2_Upsilon_Muon_v3, process.HLT_DoubleEle25_CaloIdL_MW_v4, process.HLT_DoubleEle27_CaloIdL_MW_v4, process.HLT_DoubleEle33_CaloIdL_MW_v17, process.HLT_DoubleEle24_eta2p1_WPTight_Gsf_v7, process.HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_DZ_PFHT350_v20, process.HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_PFHT350_v20, process.HLT_Ele27_Ele37_CaloIdL_MW_v4, process.HLT_Mu27_Ele37_CaloIdL_MW_v5, process.HLT_Mu37_Ele27_CaloIdL_MW_v5, process.HLT_Mu37_TkMu27_v5, process.HLT_DoubleMu4_3_Bs_v14, process.HLT_DoubleMu4_3_Jpsi_v2, process.HLT_DoubleMu4_JpsiTrk_Displaced_v15, process.HLT_DoubleMu4_LowMassNonResonantTrk_Displaced_v15, process.HLT_DoubleMu3_Trk_Tau3mu_v12, process.HLT_DoubleMu3_TkMu_DsTau3Mu_v4, process.HLT_DoubleMu4_PsiPrimeTrk_Displaced_v15, process.HLT_DoubleMu4_Mass3p8_DZ_PFHT350_v8, process.HLT_Mu3_PFJet40_v16, process.HLT_Mu7p5_L2Mu2_Jpsi_v10, process.HLT_Mu7p5_L2Mu2_Upsilon_v10, process.HLT_Mu7p5_Track2_Jpsi_v11, process.HLT_Mu7p5_Track3p5_Jpsi_v11, process.HLT_Mu7p5_Track7_Jpsi_v11, process.HLT_Mu7p5_Track2_Upsilon_v11, process.HLT_Mu7p5_Track3p5_Upsilon_v11, process.HLT_Mu7p5_Track7_Upsilon_v11, process.HLT_Mu3_L1SingleMu5orSingleMu7_v1, process.HLT_DoublePhoton33_CaloIdL_v6, process.HLT_DoublePhoton70_v6, process.HLT_DoublePhoton85_v14, process.HLT_Ele20_WPTight_Gsf_v6, process.HLT_Ele15_WPLoose_Gsf_v3, process.HLT_Ele17_WPLoose_Gsf_v3, process.HLT_Ele20_WPLoose_Gsf_v6, process.HLT_Ele20_eta2p1_WPLoose_Gsf_v6, process.HLT_DiEle27_WPTightCaloOnly_L1DoubleEG_v4, process.HLT_Ele27_WPTight_Gsf_v16, process.HLT_Ele28_WPTight_Gsf_v1, process.HLT_Ele30_WPTight_Gsf_v1, process.HLT_Ele32_WPTight_Gsf_v15, process.HLT_Ele35_WPTight_Gsf_v9, process.HLT_Ele35_WPTight_Gsf_L1EGMT_v5, process.HLT_Ele38_WPTight_Gsf_v9, process.HLT_Ele40_WPTight_Gsf_v9, process.HLT_Ele32_WPTight_Gsf_L1DoubleEG_v9, process.HLT_Ele24_eta2p1_WPTight_Gsf_LooseChargedIsoPFTau30_eta2p1_CrossL1_v13, process.HLT_Ele24_eta2p1_WPTight_Gsf_LooseChargedIsoPFTauHPS30_eta2p1_CrossL1_v1, process.HLT_Ele24_eta2p1_WPTight_Gsf_MediumChargedIsoPFTauHPS30_eta2p1_CrossL1_v1, process.HLT_Ele24_eta2p1_WPTight_Gsf_TightChargedIsoPFTauHPS30_eta2p1_CrossL1_v1, process.HLT_Ele24_eta2p1_WPTight_Gsf_LooseChargedIsoPFTauHPS30_eta2p1_TightID_CrossL1_v1, process.HLT_Ele24_eta2p1_WPTight_Gsf_MediumChargedIsoPFTauHPS30_eta2p1_TightID_CrossL1_v1, process.HLT_Ele24_eta2p1_WPTight_Gsf_TightChargedIsoPFTauHPS30_eta2p1_TightID_CrossL1_v1, process.HLT_HT450_Beamspot_v11, process.HLT_HT300_Beamspot_v11, process.HLT_ZeroBias_Beamspot_v4, process.HLT_IsoMu20_eta2p1_LooseChargedIsoPFTau27_eta2p1_CrossL1_v12, process.HLT_IsoMu20_eta2p1_LooseChargedIsoPFTauHPS27_eta2p1_CrossL1_v4, process.HLT_IsoMu20_eta2p1_MediumChargedIsoPFTauHPS27_eta2p1_CrossL1_v1, process.HLT_IsoMu20_eta2p1_TightChargedIsoPFTauHPS27_eta2p1_CrossL1_v1, process.HLT_IsoMu20_eta2p1_LooseChargedIsoPFTauHPS27_eta2p1_TightID_CrossL1_v1, process.HLT_IsoMu20_eta2p1_MediumChargedIsoPFTauHPS27_eta2p1_TightID_CrossL1_v1, process.HLT_IsoMu20_eta2p1_TightChargedIsoPFTauHPS27_eta2p1_TightID_CrossL1_v1, process.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTau35_Trk1_eta2p1_Reg_CrossL1_v12, process.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTau35_Trk1_TightID_eta2p1_Reg_CrossL1_v12, process.HLT_IsoMu24_eta2p1_TightChargedIsoPFTau35_Trk1_eta2p1_Reg_CrossL1_v12, process.HLT_IsoMu24_eta2p1_TightChargedIsoPFTau35_Trk1_TightID_eta2p1_Reg_CrossL1_v12, process.HLT_IsoMu24_eta2p1_TightChargedIsoPFTauHPS35_Trk1_eta2p1_Reg_CrossL1_v1, process.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTauHPS35_Trk1_TightID_eta2p1_Reg_CrossL1_v1, process.HLT_IsoMu24_eta2p1_TightChargedIsoPFTauHPS35_Trk1_TightID_eta2p1_Reg_CrossL1_v1, process.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTauHPS35_Trk1_eta2p1_Reg_CrossL1_v4, process.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTauHPS30_Trk1_eta2p1_Reg_CrossL1_v1, process.HLT_IsoMu27_LooseChargedIsoPFTau20_Trk1_eta2p1_SingleL1_v5, process.HLT_IsoMu27_LooseChargedIsoPFTauHPS20_Trk1_eta2p1_SingleL1_v1, process.HLT_IsoMu27_MediumChargedIsoPFTauHPS20_Trk1_eta2p1_SingleL1_v1, process.HLT_IsoMu27_TightChargedIsoPFTauHPS20_Trk1_eta2p1_SingleL1_v1, process.HLT_IsoMu20_v15, process.HLT_IsoMu24_v13, process.HLT_IsoMu24_eta2p1_v15, process.HLT_IsoMu27_v16, process.HLT_IsoMu30_v4, process.HLT_UncorrectedJetE30_NoBPTX_v6, process.HLT_UncorrectedJetE30_NoBPTX3BX_v6, process.HLT_UncorrectedJetE60_NoBPTX3BX_v6, process.HLT_UncorrectedJetE70_NoBPTX3BX_v6, process.HLT_L1SingleMu18_v3, process.HLT_L1SingleMu25_v2, process.HLT_L1SingleMuCosmics_v1, process.HLT_L2Mu10_v7, process.HLT_L2Mu10_NoVertex_NoBPTX3BX_v5, process.HLT_L2Mu10_NoVertex_NoBPTX_v6, process.HLT_L2Mu45_NoVertex_3Sta_NoBPTX3BX_v4, process.HLT_L2Mu40_NoVertex_3Sta_NoBPTX3BX_v5, process.HLT_L2Mu50_v2, process.HLT_L2Mu23NoVtx_2Cha_v1, process.HLT_L2Mu23NoVtx_2Cha_CosmicSeed_v1, process.HLT_DoubleL2Mu30NoVtx_2Cha_CosmicSeed_Eta2p4_v2, process.HLT_DoubleL2Mu30NoVtx_2Cha_Eta2p4_v2, process.HLT_DoubleL2Mu50_v2, process.HLT_DoubleL2Mu23NoVtx_2Cha_CosmicSeed_v2, process.HLT_DoubleL2Mu23NoVtx_2Cha_CosmicSeed_NoL2Matched_v2, process.HLT_DoubleL2Mu25NoVtx_2Cha_CosmicSeed_v2, process.HLT_DoubleL2Mu25NoVtx_2Cha_CosmicSeed_NoL2Matched_v2, process.HLT_DoubleL2Mu25NoVtx_2Cha_CosmicSeed_Eta2p4_v2, process.HLT_DoubleL2Mu23NoVtx_2Cha_v2, process.HLT_DoubleL2Mu23NoVtx_2Cha_NoL2Matched_v2, process.HLT_DoubleL2Mu25NoVtx_2Cha_v2, process.HLT_DoubleL2Mu25NoVtx_2Cha_NoL2Matched_v2, process.HLT_DoubleL2Mu25NoVtx_2Cha_Eta2p4_v2, process.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_v14, process.HLT_Mu19_TrkIsoVVL_Mu9_TrkIsoVVL_v3, process.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v15, process.HLT_Mu19_TrkIsoVVL_Mu9_TrkIsoVVL_DZ_v3, process.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_Mass8_v5, process.HLT_Mu19_TrkIsoVVL_Mu9_TrkIsoVVL_DZ_Mass8_v3, process.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_Mass3p8_v5, process.HLT_Mu19_TrkIsoVVL_Mu9_TrkIsoVVL_DZ_Mass3p8_v3, process.HLT_Mu25_TkMu0_Onia_v8, process.HLT_Mu30_TkMu0_Psi_v1, process.HLT_Mu30_TkMu0_Upsilon_v1, process.HLT_Mu20_TkMu0_Phi_v8, process.HLT_Mu25_TkMu0_Phi_v8, process.HLT_Mu12_v3, process.HLT_Mu15_v3, process.HLT_Mu20_v12, process.HLT_Mu27_v13, process.HLT_Mu50_v13, process.HLT_Mu55_v3, process.HLT_OldMu100_v3, process.HLT_TkMu100_v2, process.HLT_DiPFJet15_NoCaloMatched_v16, process.HLT_DiPFJet25_NoCaloMatched_v16, process.HLT_DiPFJet15_FBEta3_NoCaloMatched_v17, process.HLT_DiPFJet25_FBEta3_NoCaloMatched_v17, process.HLT_DiPFJetAve40_v14, process.HLT_DiPFJetAve60_v14, process.HLT_DiPFJetAve80_v13, process.HLT_DiPFJetAve140_v13, process.HLT_DiPFJetAve200_v13, process.HLT_DiPFJetAve260_v14, process.HLT_DiPFJetAve320_v14, process.HLT_DiPFJetAve400_v14, process.HLT_DiPFJetAve500_v14, process.HLT_DiPFJetAve15_HFJEC_v17, process.HLT_DiPFJetAve25_HFJEC_v17, process.HLT_DiPFJetAve35_HFJEC_v17, process.HLT_DiPFJetAve60_HFJEC_v15, process.HLT_DiPFJetAve80_HFJEC_v16, process.HLT_DiPFJetAve100_HFJEC_v16, process.HLT_DiPFJetAve160_HFJEC_v16, process.HLT_DiPFJetAve220_HFJEC_v16, process.HLT_DiPFJetAve300_HFJEC_v16, process.HLT_AK8PFJet15_v3, process.HLT_AK8PFJet25_v3, process.HLT_AK8PFJet40_v16, process.HLT_AK8PFJet60_v15, process.HLT_AK8PFJet80_v15, process.HLT_AK8PFJet140_v15, process.HLT_AK8PFJet200_v15, process.HLT_AK8PFJet260_v16, process.HLT_AK8PFJet320_v16, process.HLT_AK8PFJet400_v16, process.HLT_AK8PFJet450_v16, process.HLT_AK8PFJet500_v16, process.HLT_AK8PFJet550_v11, process.HLT_PFJet15_v3, process.HLT_PFJet25_v3, process.HLT_PFJet40_v21, process.HLT_PFJet60_v21, process.HLT_PFJet80_v20, process.HLT_PFJet140_v19, process.HLT_PFJet200_v19, process.HLT_PFJet260_v20, process.HLT_PFJet320_v20, process.HLT_PFJet400_v20, process.HLT_PFJet450_v21, process.HLT_PFJet500_v21, process.HLT_PFJet550_v11, process.HLT_PFJetFwd15_v3, process.HLT_PFJetFwd25_v3, process.HLT_PFJetFwd40_v19, process.HLT_PFJetFwd60_v19, process.HLT_PFJetFwd80_v18, process.HLT_PFJetFwd140_v18, process.HLT_PFJetFwd200_v18, process.HLT_PFJetFwd260_v19, process.HLT_PFJetFwd320_v19, process.HLT_PFJetFwd400_v19, process.HLT_PFJetFwd450_v19, process.HLT_PFJetFwd500_v19, process.HLT_AK8PFJetFwd15_v3, process.HLT_AK8PFJetFwd25_v3, process.HLT_AK8PFJetFwd40_v15, process.HLT_AK8PFJetFwd60_v14, process.HLT_AK8PFJetFwd80_v14, process.HLT_AK8PFJetFwd140_v14, process.HLT_AK8PFJetFwd200_v14, process.HLT_AK8PFJetFwd260_v15, process.HLT_AK8PFJetFwd320_v15, process.HLT_AK8PFJetFwd400_v15, process.HLT_AK8PFJetFwd450_v15, process.HLT_AK8PFJetFwd500_v15, process.HLT_PFHT180_v17, process.HLT_PFHT250_v17, process.HLT_PFHT370_v17, process.HLT_PFHT430_v17, process.HLT_PFHT510_v17, process.HLT_PFHT590_v17, process.HLT_PFHT680_v17, process.HLT_PFHT780_v17, process.HLT_PFHT890_v17, process.HLT_PFHT1050_v18, process.HLT_PFHT500_PFMET100_PFMHT100_IDTight_v12, process.HLT_PFHT500_PFMET110_PFMHT110_IDTight_v12, process.HLT_PFHT700_PFMET85_PFMHT85_IDTight_v12, process.HLT_PFHT700_PFMET95_PFMHT95_IDTight_v12, process.HLT_PFHT800_PFMET75_PFMHT75_IDTight_v12, process.HLT_PFHT800_PFMET85_PFMHT85_IDTight_v12, process.HLT_PFMET110_PFMHT110_IDTight_v20, process.HLT_PFMET120_PFMHT120_IDTight_v20, process.HLT_PFMET130_PFMHT130_IDTight_v20, process.HLT_PFMET140_PFMHT140_IDTight_v20, process.HLT_PFMET100_PFMHT100_IDTight_CaloBTagDeepCSV_3p1_v8, process.HLT_PFMET110_PFMHT110_IDTight_CaloBTagDeepCSV_3p1_v8, process.HLT_PFMET120_PFMHT120_IDTight_CaloBTagDeepCSV_3p1_v8, process.HLT_PFMET130_PFMHT130_IDTight_CaloBTagDeepCSV_3p1_v8, process.HLT_PFMET140_PFMHT140_IDTight_CaloBTagDeepCSV_3p1_v8, process.HLT_PFMET120_PFMHT120_IDTight_PFHT60_v9, process.HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v9, process.HLT_PFMETTypeOne120_PFMHT120_IDTight_PFHT60_v9, process.HLT_PFMETTypeOne110_PFMHT110_IDTight_v12, process.HLT_PFMETTypeOne120_PFMHT120_IDTight_v12, process.HLT_PFMETTypeOne130_PFMHT130_IDTight_v12, process.HLT_PFMETTypeOne140_PFMHT140_IDTight_v11, process.HLT_PFMETNoMu110_PFMHTNoMu110_IDTight_v20, process.HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_v20, process.HLT_PFMETNoMu130_PFMHTNoMu130_IDTight_v19, process.HLT_PFMETNoMu140_PFMHTNoMu140_IDTight_v19, process.HLT_MonoCentralPFJet80_PFMETNoMu110_PFMHTNoMu110_IDTight_v20, process.HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v20, process.HLT_MonoCentralPFJet80_PFMETNoMu130_PFMHTNoMu130_IDTight_v19, process.HLT_MonoCentralPFJet80_PFMETNoMu140_PFMHTNoMu140_IDTight_v19, process.HLT_L1ETMHadSeeds_v2, process.HLT_CaloMHT90_v4, process.HLT_CaloMET80_NotCleaned_v4, process.HLT_CaloMET90_NotCleaned_v4, process.HLT_CaloMET100_NotCleaned_v4, process.HLT_CaloMET110_NotCleaned_v4, process.HLT_CaloMET250_NotCleaned_v4, process.HLT_CaloMET70_HBHECleaned_v4, process.HLT_CaloMET80_HBHECleaned_v4, process.HLT_CaloMET90_HBHECleaned_v4, process.HLT_CaloMET100_HBHECleaned_v4, process.HLT_CaloMET250_HBHECleaned_v4, process.HLT_CaloMET300_HBHECleaned_v4, process.HLT_CaloMET350_HBHECleaned_v4, process.HLT_PFMET200_NotCleaned_v9, process.HLT_PFMET200_HBHECleaned_v9, process.HLT_PFMET250_HBHECleaned_v9, process.HLT_PFMET300_HBHECleaned_v9, process.HLT_PFMET200_HBHE_BeamHaloCleaned_v9, process.HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned_v9, process.HLT_MET105_IsoTrk50_v9, process.HLT_MET120_IsoTrk50_v9, process.HLT_SingleJet30_Mu12_SinglePFJet40_v11, process.HLT_Mu12_DoublePFJets40_CaloBTagDeepCSV_p71_v2, process.HLT_Mu12_DoublePFJets100_CaloBTagDeepCSV_p71_v2, process.HLT_Mu12_DoublePFJets200_CaloBTagDeepCSV_p71_v2, process.HLT_Mu12_DoublePFJets350_CaloBTagDeepCSV_p71_v2, process.HLT_Mu12_DoublePFJets40MaxDeta1p6_DoubleCaloBTagDeepCSV_p71_v2, process.HLT_Mu12_DoublePFJets54MaxDeta1p6_DoubleCaloBTagDeepCSV_p71_v2, process.HLT_Mu12_DoublePFJets62MaxDeta1p6_DoubleCaloBTagDeepCSV_p71_v2, process.HLT_DoublePFJets40_CaloBTagDeepCSV_p71_v2, process.HLT_DoublePFJets100_CaloBTagDeepCSV_p71_v2, process.HLT_DoublePFJets200_CaloBTagDeepCSV_p71_v2, process.HLT_DoublePFJets350_CaloBTagDeepCSV_p71_v2, process.HLT_DoublePFJets116MaxDeta1p6_DoubleCaloBTagDeepCSV_p71_v2, process.HLT_DoublePFJets128MaxDeta1p6_DoubleCaloBTagDeepCSV_p71_v2, process.HLT_Photon300_NoHE_v12, process.HLT_Mu8_TrkIsoVVL_v12, process.HLT_Mu8_DiEle12_CaloIdL_TrackIdL_DZ_v18, process.HLT_Mu8_DiEle12_CaloIdL_TrackIdL_v18, process.HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT350_DZ_v19, process.HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT350_v19, process.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_v13, process.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_PFDiJet30_v1, process.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_CaloDiJet30_v1, process.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_PFDiJet30_PFBtagDeepCSV_1p5_v1, process.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_CaloDiJet30_CaloBtagDeepCSV_1p5_v1, process.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_v11, process.HLT_Mu17_TrkIsoVVL_v13, process.HLT_Mu19_TrkIsoVVL_v4, process.HLT_BTagMu_AK4DiJet20_Mu5_v13, process.HLT_BTagMu_AK4DiJet40_Mu5_v13, process.HLT_BTagMu_AK4DiJet70_Mu5_v13, process.HLT_BTagMu_AK4DiJet110_Mu5_v13, process.HLT_BTagMu_AK4DiJet170_Mu5_v12, process.HLT_BTagMu_AK4Jet300_Mu5_v12, process.HLT_BTagMu_AK8DiJet170_Mu5_v9, process.HLT_BTagMu_AK8Jet170_DoubleMu5_v2, process.HLT_BTagMu_AK8Jet300_Mu5_v12, process.HLT_BTagMu_AK4DiJet20_Mu5_noalgo_v13, process.HLT_BTagMu_AK4DiJet40_Mu5_noalgo_v13, process.HLT_BTagMu_AK4DiJet70_Mu5_noalgo_v13, process.HLT_BTagMu_AK4DiJet110_Mu5_noalgo_v13, process.HLT_BTagMu_AK4DiJet170_Mu5_noalgo_v12, process.HLT_BTagMu_AK4Jet300_Mu5_noalgo_v12, process.HLT_BTagMu_AK8DiJet170_Mu5_noalgo_v9, process.HLT_BTagMu_AK8Jet170_DoubleMu5_noalgo_v2, process.HLT_BTagMu_AK8Jet300_Mu5_noalgo_v12, process.HLT_Ele15_Ele8_CaloIdL_TrackIdL_IsoVL_v3, process.HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v19, process.HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_v19, process.HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v15, process.HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_v7, process.HLT_Mu12_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_v7, process.HLT_Mu12_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_v15, process.HLT_Mu12_DoublePhoton20_v5, process.HLT_TriplePhoton_20_20_20_CaloIdLV2_v3, process.HLT_TriplePhoton_20_20_20_CaloIdLV2_R9IdVL_v3, process.HLT_TriplePhoton_30_30_10_CaloIdLV2_v4, process.HLT_TriplePhoton_30_30_10_CaloIdLV2_R9IdVL_v4, process.HLT_TriplePhoton_35_35_5_CaloIdLV2_R9IdVL_v4, process.HLT_Photon20_v2, process.HLT_Photon33_v5, process.HLT_Photon50_v13, process.HLT_Photon75_v13, process.HLT_Photon90_v13, process.HLT_Photon120_v13, process.HLT_Photon150_v6, process.HLT_Photon175_v14, process.HLT_Photon200_v13, process.HLT_Photon100EB_TightID_TightIso_v2, process.HLT_Photon110EB_TightID_TightIso_v2, process.HLT_Photon120EB_TightID_TightIso_v2, process.HLT_Photon100EBHE10_v2, process.HLT_Photon100EEHE10_v2, process.HLT_Photon100EE_TightID_TightIso_v2, process.HLT_Photon50_R9Id90_HE10_IsoM_v14, process.HLT_Photon75_R9Id90_HE10_IsoM_v14, process.HLT_Photon75_R9Id90_HE10_IsoM_EBOnly_CaloMJJ300_PFJetsMJJ400DEta3_v5, process.HLT_Photon75_R9Id90_HE10_IsoM_EBOnly_CaloMJJ400_PFJetsMJJ600DEta3_v5, process.HLT_Photon90_R9Id90_HE10_IsoM_v14, process.HLT_Photon120_R9Id90_HE10_IsoM_v14, process.HLT_Photon165_R9Id90_HE10_IsoM_v15, process.HLT_Photon90_CaloIdL_PFHT700_v16, process.HLT_Diphoton30_22_R9Id_OR_IsoCaloId_AND_HE_R9Id_Mass90_v13, process.HLT_Diphoton30_22_R9Id_OR_IsoCaloId_AND_HE_R9Id_Mass95_v13, process.HLT_Diphoton30PV_18PV_R9Id_AND_IsoCaloId_AND_HE_R9Id_PixelVeto_Mass55_v15, process.HLT_Diphoton30PV_18PV_R9Id_AND_IsoCaloId_AND_HE_R9Id_NoPixelVeto_Mass55_v13, process.HLT_Photon35_TwoProngs35_v1, process.HLT_IsoMu24_TwoProngs35_v1, process.HLT_Dimuon0_Jpsi_L1_NoOS_v7, process.HLT_Dimuon0_Jpsi_NoVertexing_NoOS_v7, process.HLT_Dimuon0_Jpsi_v8, process.HLT_Dimuon0_Jpsi_NoVertexing_v8, process.HLT_Dimuon0_Jpsi_L1_4R_0er1p5R_v7, process.HLT_Dimuon0_Jpsi_NoVertexing_L1_4R_0er1p5R_v7, process.HLT_Dimuon0_Jpsi3p5_Muon2_v5, process.HLT_Dimuon0_Upsilon_L1_4p5_v9, process.HLT_Dimuon0_Upsilon_L1_5_v9, process.HLT_Dimuon0_Upsilon_L1_4p5NoOS_v8, process.HLT_Dimuon0_Upsilon_L1_4p5er2p0_v9, process.HLT_Dimuon0_Upsilon_L1_4p5er2p0M_v7, process.HLT_Dimuon0_Upsilon_NoVertexing_v7, process.HLT_Dimuon0_Upsilon_L1_5M_v8, process.HLT_Dimuon0_LowMass_L1_0er1p5R_v7, process.HLT_Dimuon0_LowMass_L1_0er1p5_v8, process.HLT_Dimuon0_LowMass_v8, process.HLT_Dimuon0_LowMass_L1_4_v8, process.HLT_Dimuon0_LowMass_L1_4R_v7, process.HLT_Dimuon0_LowMass_L1_TM530_v6, process.HLT_Dimuon0_Upsilon_Muon_L1_TM0_v6, process.HLT_Dimuon0_Upsilon_Muon_NoL1Mass_v6, process.HLT_TripleMu_5_3_3_Mass3p8_DZ_v8, process.HLT_TripleMu_10_5_5_DZ_v10, process.HLT_TripleMu_12_10_5_v10, process.HLT_Tau3Mu_Mu7_Mu1_TkMu1_Tau15_v4, process.HLT_Tau3Mu_Mu7_Mu1_TkMu1_Tau15_Charge1_v4, process.HLT_Tau3Mu_Mu7_Mu1_TkMu1_IsoTau15_v4, process.HLT_Tau3Mu_Mu7_Mu1_TkMu1_IsoTau15_Charge1_v4, process.HLT_DoubleMu3_DZ_PFMET50_PFMHT60_v10, process.HLT_DoubleMu3_DZ_PFMET70_PFMHT70_v10, process.HLT_DoubleMu3_DZ_PFMET90_PFMHT90_v10, process.HLT_DoubleMu3_Trk_Tau3mu_NoL1Mass_v6, process.HLT_DoubleMu4_Jpsi_Displaced_v7, process.HLT_DoubleMu4_Jpsi_NoVertexing_v7, process.HLT_DoubleMu4_JpsiTrkTrk_Displaced_v7, process.HLT_DoubleMu43NoFiltersNoVtx_v4, process.HLT_DoubleMu48NoFiltersNoVtx_v4, process.HLT_Mu43NoFiltersNoVtx_Photon43_CaloIdL_v5, process.HLT_Mu48NoFiltersNoVtx_Photon48_CaloIdL_v5, process.HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v1, process.HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v1, process.HLT_DoubleMu33NoFiltersNoVtxDisplaced_v1, process.HLT_DoubleMu40NoFiltersNoVtxDisplaced_v1, process.HLT_DoubleMu20_7_Mass0to30_L1_DM4_v7, process.HLT_DoubleMu20_7_Mass0to30_L1_DM4EG_v8, process.HLT_HT425_v9, process.HLT_HT430_DisplacedDijet40_DisplacedTrack_v13, process.HLT_HT500_DisplacedDijet40_DisplacedTrack_v13, process.HLT_HT430_DisplacedDijet60_DisplacedTrack_v13, process.HLT_HT400_DisplacedDijet40_DisplacedTrack_v13, process.HLT_HT650_DisplacedDijet60_Inclusive_v13, process.HLT_HT550_DisplacedDijet60_Inclusive_v13, process.HLT_DiJet110_35_Mjj650_PFMET110_v9, process.HLT_DiJet110_35_Mjj650_PFMET120_v9, process.HLT_DiJet110_35_Mjj650_PFMET130_v9, process.HLT_TripleJet110_35_35_Mjj650_PFMET110_v9, process.HLT_TripleJet110_35_35_Mjj650_PFMET120_v9, process.HLT_TripleJet110_35_35_Mjj650_PFMET130_v9, process.HLT_Ele30_eta2p1_WPTight_Gsf_CentralPFJet35_EleCleaned_v13, process.HLT_Ele28_eta2p1_WPTight_Gsf_HT150_v13, process.HLT_Ele28_HighEta_SC20_Mass55_v13, process.HLT_DoubleMu20_7_Mass0to30_Photon23_v8, process.HLT_Ele15_IsoVVVL_PFHT450_CaloBTagDeepCSV_4p5_v8, process.HLT_Ele15_IsoVVVL_PFHT450_PFMET50_v16, process.HLT_Ele15_IsoVVVL_PFHT450_v16, process.HLT_Ele50_IsoVVVL_PFHT450_v16, process.HLT_Ele15_IsoVVVL_PFHT600_v20, process.HLT_Mu4_TrkIsoVVL_DiPFJet90_40_DEta3p5_MJJ750_HTT300_PFMETNoMu60_v15, process.HLT_Mu8_TrkIsoVVL_DiPFJet40_DEta3p5_MJJ750_HTT300_PFMETNoMu60_v16, process.HLT_Mu10_TrkIsoVVL_DiPFJet40_DEta3p5_MJJ750_HTT350_PFMETNoMu60_v15, process.HLT_Mu15_IsoVVVL_PFHT450_CaloBTagDeepCSV_4p5_v8, process.HLT_Mu15_IsoVVVL_PFHT450_PFMET50_v15, process.HLT_Mu15_IsoVVVL_PFHT450_v15, process.HLT_Mu50_IsoVVVL_PFHT450_v15, process.HLT_Mu15_IsoVVVL_PFHT600_v19, process.HLT_Mu3er1p5_PFJet100er2p5_PFMET70_PFMHT70_IDTight_v2, process.HLT_Mu3er1p5_PFJet100er2p5_PFMET80_PFMHT80_IDTight_v2, process.HLT_Mu3er1p5_PFJet100er2p5_PFMET90_PFMHT90_IDTight_v2, process.HLT_Mu3er1p5_PFJet100er2p5_PFMET100_PFMHT100_IDTight_v2, process.HLT_Mu3er1p5_PFJet100er2p5_PFMETNoMu70_PFMHTNoMu70_IDTight_v2, process.HLT_Mu3er1p5_PFJet100er2p5_PFMETNoMu80_PFMHTNoMu80_IDTight_v2, process.HLT_Mu3er1p5_PFJet100er2p5_PFMETNoMu90_PFMHTNoMu90_IDTight_v2, process.HLT_Mu3er1p5_PFJet100er2p5_PFMETNoMu100_PFMHTNoMu100_IDTight_v2, process.HLT_Dimuon10_PsiPrime_Barrel_Seagulls_v7, process.HLT_Dimuon20_Jpsi_Barrel_Seagulls_v7, process.HLT_Dimuon12_Upsilon_y1p4_v2, process.HLT_Dimuon14_Phi_Barrel_Seagulls_v7, process.HLT_Dimuon18_PsiPrime_v14, process.HLT_Dimuon25_Jpsi_v14, process.HLT_Dimuon18_PsiPrime_noCorrL1_v6, process.HLT_Dimuon24_Upsilon_noCorrL1_v6, process.HLT_Dimuon24_Phi_noCorrL1_v6, process.HLT_Dimuon25_Jpsi_noCorrL1_v6, process.HLT_DiMu4_Ele9_CaloIdL_TrackIdL_DZ_Mass3p8_v17, process.HLT_DiMu9_Ele9_CaloIdL_TrackIdL_DZ_v17, process.HLT_DiMu9_Ele9_CaloIdL_TrackIdL_v17, process.HLT_DoubleIsoMu20_eta2p1_v7, process.HLT_TrkMu12_DoubleTrkMu5NoFiltersNoVtx_v6, process.HLT_TrkMu16_DoubleTrkMu6NoFiltersNoVtx_v12, process.HLT_TrkMu17_DoubleTrkMu8NoFiltersNoVtx_v13, process.HLT_Mu8_v12, process.HLT_Mu17_v13, process.HLT_Mu19_v4, process.HLT_Mu17_Photon30_IsoCaloId_v6, process.HLT_Ele8_CaloIdL_TrackIdL_IsoVL_PFJet30_v16, process.HLT_Ele12_CaloIdL_TrackIdL_IsoVL_PFJet30_v18, process.HLT_Ele15_CaloIdL_TrackIdL_IsoVL_PFJet30_v3, process.HLT_Ele23_CaloIdL_TrackIdL_IsoVL_PFJet30_v18, process.HLT_Ele8_CaloIdM_TrackIdM_PFJet30_v18, process.HLT_Ele17_CaloIdM_TrackIdM_PFJet30_v16, process.HLT_Ele23_CaloIdM_TrackIdM_PFJet30_v18, process.HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165_v18, process.HLT_Ele115_CaloIdVT_GsfTrkIdT_v14, process.HLT_Ele135_CaloIdVT_GsfTrkIdT_v7, process.HLT_Ele145_CaloIdVT_GsfTrkIdT_v8, process.HLT_Ele200_CaloIdVT_GsfTrkIdT_v8, process.HLT_Ele250_CaloIdVT_GsfTrkIdT_v13, process.HLT_Ele300_CaloIdVT_GsfTrkIdT_v13, process.HLT_PFHT330PT30_QuadPFJet_75_60_45_40_TriplePFBTagDeepCSV_4p5_v3, process.HLT_PFHT330PT30_QuadPFJet_75_60_45_40_v9, process.HLT_PFHT400_SixPFJet32_DoublePFBTagDeepCSV_2p94_v8, process.HLT_PFHT400_SixPFJet32_v8, process.HLT_PFHT450_SixPFJet36_PFBTagDeepCSV_1p59_v7, process.HLT_PFHT450_SixPFJet36_v7, process.HLT_PFHT400_FivePFJet_100_100_60_30_30_v8, process.HLT_PFHT400_FivePFJet_100_100_60_30_30_DoublePFBTagDeepCSV_4p5_v8, process.HLT_PFHT400_FivePFJet_120_120_60_30_30_DoublePFBTagDeepCSV_4p5_v8, process.HLT_PFHT350_v19, process.HLT_PFHT350MinPFJet15_v9, process.HLT_Photon60_R9Id90_CaloIdL_IsoL_v5, process.HLT_Photon60_R9Id90_CaloIdL_IsoL_DisplacedIdL_v5, process.HLT_Photon60_R9Id90_CaloIdL_IsoL_DisplacedIdL_PFHT350MinPFJet15_v11, process.HLT_ECALHT800_v10, process.HLT_DiSC30_18_EIso_AND_HE_Mass70_v13, process.HLT_Physics_v7, process.HLT_Physics_part0_v7, process.HLT_Physics_part1_v7, process.HLT_Physics_part2_v7, process.HLT_Physics_part3_v7, process.HLT_Physics_part4_v7, process.HLT_Physics_part5_v7, process.HLT_Physics_part6_v7, process.HLT_Physics_part7_v7, process.DST_Physics_v7, process.HLT_Random_v3, process.HLT_ZeroBias_v6, process.HLT_ZeroBias_Alignment_v1, process.HLT_ZeroBias_part0_v6, process.HLT_ZeroBias_part1_v6, process.HLT_ZeroBias_part2_v6, process.HLT_ZeroBias_part3_v6, process.HLT_ZeroBias_part4_v6, process.HLT_ZeroBias_part5_v6, process.HLT_ZeroBias_part6_v6, process.HLT_ZeroBias_part7_v6, process.DST_ZeroBias_v2, process.DST_HT250_CaloScouting_v10, process.DST_HT250_CaloBTagScouting_v10, process.DST_HT410_PFScouting_v16, process.DST_HT410_BTagScouting_v16, process.DST_ZeroBias_BTagScouting_v15, process.DST_ZeroBias_CaloScouting_PFScouting_v14, process.DST_CaloJet40_BTagScouting_v15, process.DST_CaloJet40_CaloScouting_PFScouting_v15, process.DST_CaloJet40_CaloBTagScouting_v14, process.DST_L1HTT_BTagScouting_v15, process.DST_L1HTT_CaloScouting_PFScouting_v15, process.DST_L1HTT_CaloBTagScouting_v14, process.DST_L1DoubleMu_BTagScouting_v16, process.DST_L1DoubleMu_CaloScouting_PFScouting_v15, process.DST_DoubleMu3_noVtx_CaloScouting_Monitoring_v6, process.DST_DoubleMu3_noVtx_CaloScouting_v6, process.DST_DoubleMu1_noVtx_CaloScouting_v2, process.DST_DoubleMu3_noVtx_Mass10_PFScouting_v3, process.HLT_AK4CaloJet30_v11, process.HLT_AK4CaloJet40_v10, process.HLT_AK4CaloJet50_v10, process.HLT_AK4CaloJet80_v10, process.HLT_AK4CaloJet100_v10, process.HLT_AK4CaloJet120_v9, process.HLT_AK4PFJet30_v19, process.HLT_AK4PFJet50_v19, process.HLT_AK4PFJet80_v19, process.HLT_AK4PFJet100_v19, process.HLT_AK4PFJet120_v18, process.HLT_SinglePhoton10_Eta3p1ForPPRef_v8, process.HLT_SinglePhoton20_Eta3p1ForPPRef_v9, process.HLT_SinglePhoton30_Eta3p1ForPPRef_v9, process.HLT_Photon20_HoverELoose_v10, process.HLT_Photon30_HoverELoose_v10, process.HLT_EcalCalibration_v4, process.HLT_HcalCalibration_v5, process.AlCa_EcalPhiSym_v9, process.HLT_L1UnpairedBunchBptxMinus_v2, process.HLT_L1UnpairedBunchBptxPlus_v2, process.HLT_L1NotBptxOR_v3, process.HLT_L1_CDC_SingleMu_3_er1p2_TOP120_DPHI2p618_3p142_v2, process.HLT_CDC_L2cosmic_10_er1p0_v1, process.HLT_CDC_L2cosmic_5p5_er1p0_v1, process.HLT_HcalNZS_v13, process.HLT_HcalPhiSym_v15, process.HLT_HcalIsolatedbunch_v5, process.HLT_IsoTrackHB_v4, process.HLT_IsoTrackHE_v4, process.HLT_ZeroBias_FirstCollisionAfterAbortGap_v5, process.HLT_ZeroBias_IsolatedBunches_v5, process.HLT_ZeroBias_FirstCollisionInTrain_v4, process.HLT_ZeroBias_LastCollisionInTrain_v3, process.HLT_ZeroBias_FirstBXAfterTrain_v3, process.AlCa_RPCMuonNormalisation_v13, process.AlCa_LumiPixels_Random_v4, process.AlCa_LumiPixels_ZeroBias_v8, process.MC_ReducedIterativeTracking_v12, process.MC_PFMET_v17, process.MC_AK4PFJets_v17, process.MC_PFBTagDeepCSV_v10, process.MC_PFHT_v16, process.MC_PFMHT_v16, process.MC_CaloMET_v8, process.MC_CaloMET_JetIdCleaned_v9, process.MC_AK4CaloJets_v9, process.MC_AK4CaloJetsFromPV_v8, process.MC_CaloBTagDeepCSV_v8, process.MC_CaloHT_v8, process.MC_CaloMHT_v8, process.MC_AK8PFJets_v17, process.MC_AK8TrimPFJets_v17, process.MC_AK8PFHT_v16, process.MC_AK8CaloHT_v8, process.MC_Diphoton10_10_R9Id_OR_IsoCaloId_AND_HE_R9Id_Mass10_v13, process.MC_DoubleEle5_CaloIdL_MW_v15, process.MC_Ele5_WPTight_Gsf_v8, process.MC_Ele15_Ele10_CaloIdL_TrackIdL_IsoVL_DZ_v15, process.MC_IsoMu_v15, process.MC_DoubleMu_TrkIsoVVL_DZ_v11, process.MC_DoubleMuNoFiltersNoVtx_v7, process.AlCa_EcalPi0EBonly_v13, process.AlCa_EcalPi0EEonly_v13, process.AlCa_EcalEtaEBonly_v13, process.AlCa_EcalEtaEEonly_v13, process.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_v12, process.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET90_v12, process.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET100_v12, process.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET110_v8, process.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET120_v8, process.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET130_v8, process.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET140_v3, process.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_v12, process.HLT_MediumChargedIsoPFTau180HighPtRelaxedIso_Trk50_eta2p1_1pr_v11, process.HLT_MediumChargedIsoPFTau180HighPtRelaxedIso_Trk50_eta2p1_v12, process.HLT_MediumChargedIsoPFTau200HighPtRelaxedIso_Trk50_eta2p1_v12, process.HLT_MediumChargedIsoPFTau220HighPtRelaxedIso_Trk50_eta2p1_v12, process.HLT_Ele16_Ele12_Ele8_CaloIdL_TrackIdL_v9, process.HLT_Rsq0p35_v15, process.HLT_Rsq0p40_v15, process.HLT_RsqMR300_Rsq0p09_MR200_v15, process.HLT_RsqMR320_Rsq0p09_MR200_v15, process.HLT_RsqMR300_Rsq0p09_MR200_4jet_v15, process.HLT_RsqMR320_Rsq0p09_MR200_4jet_v15, process.HLT_IsoMu27_MET90_v3, process.HLT_DoubleMediumChargedIsoPFTau35_Trk1_eta2p1_Reg_v12, process.HLT_DoubleMediumChargedIsoPFTau35_Trk1_TightID_eta2p1_Reg_v12, process.HLT_DoubleTightChargedIsoPFTau35_Trk1_eta2p1_Reg_v12, process.HLT_DoubleTightChargedIsoPFTau35_Trk1_TightID_eta2p1_Reg_v12, process.HLT_DoubleMediumChargedIsoPFTauHPS30_L1MaxMass_Trk1_eta2p1_Reg_v1, process.HLT_DoubleTightChargedIsoPFTauHPS35_Trk1_eta2p1_Reg_v1, process.HLT_DoubleMediumChargedIsoPFTauHPS35_Trk1_TightID_eta2p1_Reg_v1, process.HLT_DoubleMediumChargedIsoPFTauHPS35_Trk1_eta2p1_Reg_v4, process.HLT_DoubleTightChargedIsoPFTauHPS35_Trk1_TightID_eta2p1_Reg_v1, process.HLT_DoubleMediumChargedIsoPFTauHPS40_Trk1_eta2p1_Reg_v1, process.HLT_DoubleTightChargedIsoPFTauHPS40_Trk1_eta2p1_Reg_v1, process.HLT_DoubleMediumChargedIsoPFTauHPS40_Trk1_TightID_eta2p1_Reg_v1, process.HLT_DoubleTightChargedIsoPFTauHPS40_Trk1_TightID_eta2p1_Reg_v1, process.HLT_VBF_DoubleLooseChargedIsoPFTau20_Trk1_eta2p1_v3, process.HLT_VBF_DoubleLooseChargedIsoPFTauHPS20_Trk1_eta2p1_v1, process.HLT_VBF_DoubleMediumChargedIsoPFTauHPS20_Trk1_eta2p1_v1, process.HLT_VBF_DoubleTightChargedIsoPFTauHPS20_Trk1_eta2p1_v1, process.HLT_Photon50_R9Id90_HE10_IsoM_EBOnly_PFJetsMJJ300DEta3_PFMET50_v5, process.HLT_Photon75_R9Id90_HE10_IsoM_EBOnly_PFJetsMJJ300DEta3_v5, process.HLT_Photon75_R9Id90_HE10_IsoM_EBOnly_PFJetsMJJ600DEta3_v5, process.HLT_PFMET100_PFMHT100_IDTight_PFHT60_v9, process.HLT_PFMETNoMu100_PFMHTNoMu100_IDTight_PFHT60_v9, process.HLT_PFMETTypeOne100_PFMHT100_IDTight_PFHT60_v9, process.HLT_Mu18_Mu9_SameSign_v4, process.HLT_Mu18_Mu9_SameSign_DZ_v4, process.HLT_Mu18_Mu9_v4, process.HLT_Mu18_Mu9_DZ_v4, process.HLT_Mu20_Mu10_SameSign_v4, process.HLT_Mu20_Mu10_SameSign_DZ_v4, process.HLT_Mu20_Mu10_v4, process.HLT_Mu20_Mu10_DZ_v4, process.HLT_Mu23_Mu12_SameSign_v4, process.HLT_Mu23_Mu12_SameSign_DZ_v4, process.HLT_Mu23_Mu12_v4, process.HLT_Mu23_Mu12_DZ_v4, process.HLT_DoubleMu2_Jpsi_DoubleTrk1_Phi1p05_v6, process.HLT_DoubleMu2_Jpsi_DoubleTkMu0_Phi_v5, process.HLT_DoubleMu3_DCA_PFMET50_PFMHT60_v10, process.HLT_TripleMu_5_3_3_Mass3p8_DCA_v3, process.HLT_QuadPFJet98_83_71_15_DoublePFBTagDeepCSV_1p3_7p7_VBF1_v8, process.HLT_QuadPFJet103_88_75_15_DoublePFBTagDeepCSV_1p3_7p7_VBF1_v8, process.HLT_QuadPFJet111_90_80_15_DoublePFBTagDeepCSV_1p3_7p7_VBF1_v8, process.HLT_QuadPFJet98_83_71_15_PFBTagDeepCSV_1p3_VBF2_v8, process.HLT_QuadPFJet103_88_75_15_PFBTagDeepCSV_1p3_VBF2_v8, process.HLT_QuadPFJet105_88_76_15_PFBTagDeepCSV_1p3_VBF2_v8, process.HLT_QuadPFJet111_90_80_15_PFBTagDeepCSV_1p3_VBF2_v8, process.HLT_QuadPFJet98_83_71_15_v5, process.HLT_QuadPFJet103_88_75_15_v5, process.HLT_QuadPFJet105_88_76_15_v5, process.HLT_QuadPFJet111_90_80_15_v5, process.HLT_AK8PFJet330_TrimMass30_PFAK8BTagDeepCSV_p17_v2, process.HLT_AK8PFJet330_TrimMass30_PFAK8BTagDeepCSV_p1_v2, process.HLT_AK8PFJet330_TrimMass30_PFAK8BoostedDoubleB_p02_v3, process.HLT_AK8PFJet330_TrimMass30_PFAK8BoostedDoubleB_np2_v2, process.HLT_AK8PFJet330_TrimMass30_PFAK8BoostedDoubleB_np4_v2, process.HLT_Diphoton30_18_R9IdL_AND_HE_AND_IsoCaloId_NoPixelVeto_Mass55_v2, process.HLT_Diphoton30_18_R9IdL_AND_HE_AND_IsoCaloId_NoPixelVeto_v2, process.HLT_Mu12_IP6_ToCSCS_v1, process.HLT_Mu12_IP6_part0_v2, process.HLT_Mu12_IP6_part1_v2, process.HLT_Mu12_IP6_part2_v2, process.HLT_Mu12_IP6_part3_v2, process.HLT_Mu12_IP6_part4_v2, process.HLT_Mu9_IP5_ToCSCS_v1, process.HLT_Mu9_IP5_part0_v2, process.HLT_Mu9_IP5_part1_v2, process.HLT_Mu9_IP5_part2_v2, process.HLT_Mu9_IP5_part3_v2, process.HLT_Mu9_IP5_part4_v2, process.HLT_Mu7_IP4_ToCSCS_v1, process.HLT_Mu7_IP4_part0_v2, process.HLT_Mu7_IP4_part1_v2, process.HLT_Mu7_IP4_part2_v2, process.HLT_Mu7_IP4_part3_v2, process.HLT_Mu7_IP4_part4_v2, process.HLT_Mu9_IP4_ToCSCS_v1, process.HLT_Mu9_IP4_part0_v2, process.HLT_Mu9_IP4_part1_v2, process.HLT_Mu9_IP4_part2_v2, process.HLT_Mu9_IP4_part3_v2, process.HLT_Mu9_IP4_part4_v2, process.HLT_Mu8_IP5_ToCSCS_v1, process.HLT_Mu8_IP5_part0_v2, process.HLT_Mu8_IP5_part1_v2, process.HLT_Mu8_IP5_part2_v2, process.HLT_Mu8_IP5_part3_v2, process.HLT_Mu8_IP5_part4_v2, process.HLT_Mu8_IP6_ToCSCS_v1, process.HLT_Mu8_IP6_part0_v2, process.HLT_Mu8_IP6_part1_v2, process.HLT_Mu8_IP6_part2_v2, process.HLT_Mu8_IP6_part3_v2, process.HLT_Mu8_IP6_part4_v2, process.HLT_Mu9_IP6_ToCSCS_v1, process.HLT_Mu9_IP6_part0_v3, process.HLT_Mu9_IP6_part1_v3, process.HLT_Mu9_IP6_part2_v3, process.HLT_Mu9_IP6_part3_v3, process.HLT_Mu9_IP6_part4_v3, process.HLT_Mu8_IP3_ToCSCS_v1, process.HLT_Mu8_IP3_part0_v3, process.HLT_Mu8_IP3_part1_v3, process.HLT_Mu8_IP3_part2_v3, process.HLT_Mu8_IP3_part3_v3, process.HLT_Mu8_IP3_part4_v3, process.HLT_Mu9_IP0_part0_v2, process.HLT_Mu9_IP3_part0_v2, process.HLT_QuadPFJet105_88_76_15_DoublePFBTagDeepCSV_1p3_7p7_VBF1_v8, process.HLT_TrkMu6NoFiltersNoVtx_v1, process.HLT_TrkMu16NoFiltersNoVtx_v1, process.HLT_DoubleTrkMu_16_6_NoFiltersNoVtx_v1, process.HLTriggerFinalPath, process.HLTAnalyzerEndpath, process.ParkingHLTPhysicsOutput, process.ParkingZeroBiasOutput, process.PhysicsCommissioningOutput, process.PhysicsEGammaOutput, process.PhysicsEndOfFillOutput, process.PhysicsHadronsTausOutput, process.PhysicsMuonsOutput, process.ParkingBPH1Output, process.ParkingBPH2Output, process.ParkingBPH3Output, process.ParkingBPH4Output, process.ParkingBPH5Output, process.DQMOutput, process.DQMOnlineBeamspotOutput, process.DQMCalibrationOutput, process.DQMEventDisplayOutput, process.HLTMonitorOutput, process.RPCMONOutput, process.CalibrationOutput, process.EcalCalibrationOutput, process.ALCAPHISYMOutput, process.ALCALUMIPIXELSOutput, process.ALCALUMIPIXELSEXPRESSOutput, process.ALCAP0Output, process.ExpressOutput, process.ExpressAlignmentOutput, process.NanoDSTOutput, process.ScoutingPFOutput, process.ScoutingCaloMuonOutput, process.PhysicsScoutingMonitorOutput, process.PhysicsHLTPhysics1Output, process.PhysicsHLTPhysics2Output, process.PhysicsHLTPhysics3Output, process.PhysicsHLTPhysics4Output, process.PhysicsZeroBias1Output, process.PhysicsZeroBias2Output, process.PhysicsZeroBias3Output, process.PhysicsZeroBias4Output ))
"
-------------------------------------------------------------------------
"process.HLTSchedule = cms.Schedule( *(process.HLTriggerFirstPath, process.HLT_AK8PFJet360_TrimMass30_v18, process.HLT_AK8PFJet380_TrimMass30_v11, process.HLT_AK8PFJet400_TrimMass30_v12, process.HLT_AK8PFJet420_TrimMass30_v11, process.HLT_AK8PFHT750_TrimMass50_v12, process.HLT_AK8PFHT800_TrimMass50_v12, process.HLT_AK8PFHT850_TrimMass50_v11, process.HLT_AK8PFHT900_TrimMass50_v11, process.HLT_CaloJet500_NoJetID_v12, process.HLT_CaloJet550_NoJetID_v7, process.HLT_DoubleMu5_Upsilon_DoubleEle3_CaloIdL_TrackIdL_v4, process.HLT_DoubleMu3_DoubleEle7p5_CaloIdL_TrackIdL_Upsilon_v4, process.HLT_Trimuon5_3p5_2_Upsilon_Muon_v5, process.HLT_TrimuonOpen_5_3p5_2_Upsilon_Muon_v3, process.HLT_DoubleEle25_CaloIdL_MW_v4, process.HLT_DoubleEle27_CaloIdL_MW_v4, process.HLT_DoubleEle33_CaloIdL_MW_v17, process.HLT_DoubleEle24_eta2p1_WPTight_Gsf_v7, process.HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_DZ_PFHT350_v20, process.HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_PFHT350_v20, process.HLT_Ele27_Ele37_CaloIdL_MW_v4, process.HLT_Mu27_Ele37_CaloIdL_MW_v5, process.HLT_Mu37_Ele27_CaloIdL_MW_v5, process.HLT_Mu37_TkMu27_v5, process.HLT_DoubleMu4_3_Bs_v14, process.HLT_DoubleMu4_3_Jpsi_v2, process.HLT_DoubleMu4_JpsiTrk_Displaced_v15, process.HLT_DoubleMu4_LowMassNonResonantTrk_Displaced_v15, process.HLT_DoubleMu3_Trk_Tau3mu_v12, process.HLT_DoubleMu3_TkMu_DsTau3Mu_v4, process.HLT_DoubleMu4_PsiPrimeTrk_Displaced_v15, process.HLT_DoubleMu4_Mass3p8_DZ_PFHT350_v8, process.HLT_Mu3_PFJet40_v16, process.HLT_Mu7p5_L2Mu2_Jpsi_v10, process.HLT_Mu7p5_L2Mu2"
-------------------------------------------------------------------------
"process.HLTSchedule = cms.Schedule( *(process.HLTriggerFirstPath, process.HLT_AK8PFJet360_TrimMass30_v18, process.HLT_AK8PFJet380_TrimMass30_v11, process.HLT_AK8PFJet400_TrimMass30_v12, process.HLT_AK8PFJet420_TrimMass30_v11, process.HLT_AK8PFHT750_TrimMass50_v12, process.HLT_AK8PFHT800_TrimMass50_v12, process.HLT_AK8PFHT850_TrimMass50_v11, process.HLT_AK8PFHT900_TrimMass50_v11, process.HLT_CaloJet500_NoJetID_v12, process.HLT_CaloJet550_NoJetID_v7, process.HLT_DoubleMu5_Upsilon_DoubleEle3_CaloIdL_TrackIdL_v4, process.HLT_DoubleMu3_DoubleEle7p5_CaloIdL_TrackIdL_Upsilon_v4, process.HLT_Trimuon5_3p5_2_Upsilon_Muon_v5, process.HLT_TrimuonOpen_5_3p5_2_Upsilon_Muon_v3, process.HLT_DoubleEle25_CaloIdL_MW_v4, process.HLT_DoubleEle27_CaloIdL_MW_v4, process.HLT_DoubleEle33_CaloIdL_MW_v17, process.HLT_DoubleEle24_eta2p1_WPTight_Gsf_v7, process.HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_DZ_PFHT350_v20, process.HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_PFHT350_v20, process.HLT_Ele27_Ele37_CaloIdL_MW_v4, process.HLT_Mu27_Ele37_CaloIdL_MW_v5, process.HLT_Mu37_Ele27_CaloIdL_MW_v5, process.HLT_Mu37_TkMu27_v5, process.HLT_DoubleMu4_3_Bs_v14, process.HLT_DoubleMu4_3_Jpsi_v2, process.HLT_DoubleMu4_JpsiTrk_Displaced_v15, process.HLT_DoubleMu4_LowMassNonResonantTrk_Displaced_v15, process.HLT_DoubleMu3_Trk_Tau3mu_v12, process.HLT_DoubleMu3_TkMu_DsTau3Mu_v4, process.HLT_DoubleMu4_PsiPrimeTrk_Displaced_v15, process.HLT_DoubleMu4_Mass3p8_DZ_PFHT350_v8, process.HLT_Mu3_PFJet40_v16, process.HLT_Mu7p5_L2Mu2_Jpsi_v10, process.HLT_Mu7p5_L2Mu2_Upsilon_v10, process.HLT_Mu7p5_Track2_Jpsi_v11, process.HLT_Mu7p5_Track3p5_Jpsi_v11, process.HLT_Mu7p5_Track7_Jpsi_v11, process.HLT_Mu7p5_Track2_Upsilon_v11, process.HLT_Mu7p5_Track3p5_Upsilon_v11, process.HLT_Mu7p5_Track7_Upsilon_v11, process.HLT_Mu3_L1SingleMu5orSingleMu7_v1, process.HLT_DoublePhoton33_CaloIdL_v6, process.HLT_DoublePhoton70_v6, process.HLT_DoublePhoton85_v14, process.HLT_Ele20_WPTight_Gsf_v6, process.HLT_Ele15_WPLoose_Gsf_v3, process.HLT_Ele17_WPLoose_Gsf_v3, process.HLT_Ele20_WPLoose_Gsf_v6, process.HLT_Ele20_eta2p1_WPLoose_Gsf_v6, process.HLT_DiEle27_WPTightCaloOnly_L1DoubleEG_v4, process.HLT_Ele27_WPTight_Gsf_v16, process.HLT_Ele28_WPTight_Gsf_v1, process.HLT_Ele30_WPTight_Gsf_v1, process.HLT_Ele32_WPTight_Gsf_v15, process.HLT_Ele35_WPTight_Gsf_v9, process.HLT_Ele35_WPTight_Gsf_L1EGMT_v5, process.HLT_Ele38_WPTight_Gsf_v9, process.HLT_Ele40_WPTight_Gsf_v9, process.HLT_Ele32_WPTight_Gsf_L1DoubleEG_v9, process.HLT_Ele24_eta2p1_WPTight_Gsf_LooseChargedIsoPFTau30_eta2p1_CrossL1_v13, process.HLT_Ele24_eta2p1_WPTight_Gsf_LooseChargedIsoPFTauHPS30_eta2p1_CrossL1_v1, process.HLT_Ele24_eta2p1_WPTight_Gsf_MediumChargedIsoPFTauHPS30_eta2p1_CrossL1_v1, process.HLT_Ele24_eta2p1_WPTight_Gsf_TightChargedIsoPFTauHPS30_eta2p1_CrossL1_v1, process.HLT_Ele24_eta2p1_WPTight_Gsf_LooseChargedIsoPFTauHPS30_eta2p1_TightID_CrossL1_v1, process.HLT_Ele24_eta2p1_WPTight_Gsf_MediumChargedIsoPFTauHPS30_eta2p1_TightID_CrossL1_v1, process.HLT_Ele24_eta2p1_WPTight_Gsf_TightChargedIsoPFTauHPS30_eta2p1_TightID_CrossL1_v1, process.HLT_HT450_Beamspot_v11, process.HLT_HT300_Beamspot_v11, process.HLT_ZeroBias_Beamspot_v4, process.HLT_IsoMu20_eta2p1_LooseChargedIsoPFTau27_eta2p1_CrossL1_v12, process.HLT_IsoMu20_eta2p1_LooseChargedIsoPFTauHPS27_eta2p1_CrossL1_v4, process.HLT_IsoMu20_eta2p1_MediumChargedIsoPFTauHPS27_eta2p1_CrossL1_v1, process.HLT_IsoMu20_eta2p1_TightChargedIsoPFTauHPS27_eta2p1_CrossL1_v1, process.HLT_IsoMu20_eta2p1_LooseChargedIsoPFTauHPS27_eta2p1_TightID_CrossL1_v1, process.HLT_IsoMu20_eta2p1_MediumChargedIsoPFTauHPS27_eta2p1_TightID_CrossL1_v1, process.HLT_IsoMu20_eta2p1_TightChargedIsoPFTauHPS27_eta2p1_TightID_CrossL1_v1, process.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTau35_Trk1_eta2p1_Reg_CrossL1_v12, process.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTau35_Trk1_TightID_eta2p1_Reg_CrossL1_v12, process.HLT_IsoMu24_eta2p1_TightChargedIsoPFTau35_Trk1_eta2p1_Reg_CrossL1_v12, process.HLT_IsoMu24_eta2p1_TightChargedIsoPFTau35_Trk1_TightID_eta2p1_Reg_CrossL1_v12, process.HLT_IsoMu24_eta2p1_TightChargedIsoPFTauHPS35_Trk1_eta2p1_Reg_CrossL1_v1, process.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTauHPS35_Trk1_TightID_eta2p1_Reg_CrossL1_v1, process.HLT_IsoMu24_eta2p1_TightChargedIsoPFTauHPS35_Trk1_TightID_eta2p1_Reg_CrossL1_v1, process.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTauHPS35_Trk1_eta2p1_Reg_CrossL1_v4, process.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTauHPS30_Trk1_eta2p1_Reg_CrossL1_v1, process.HLT_IsoMu27_LooseChargedIsoPFTau20_Trk1_eta2p1_SingleL1_v5, process.HLT_IsoMu27_LooseChargedIsoPFTauHPS20_Trk1_eta2p1_SingleL1_v1, process.HLT_IsoMu27_MediumChargedIsoPFTauHPS20_Trk1_eta2p1_SingleL1_v1, process.HLT_IsoMu27_TightChargedIsoPFTauHPS20_Trk1_eta2p1_SingleL1_v1, process.HLT_IsoMu20_v15, process.HLT_IsoMu24_v13, process.HLT_IsoMu24_eta2p1_v15, process.HLT_IsoMu27_v16, process.HLT_IsoMu30_v4, process.HLT_UncorrectedJetE30_NoBPTX_v6, process.HLT_UncorrectedJetE30_NoBPTX3BX_v6, process.HLT_UncorrectedJetE60_NoBPTX3BX_v6, process.HLT_UncorrectedJetE70_NoBPTX3BX_v6, process.HLT_L1SingleMu18_v3, process.HLT_L1SingleMu25_v2, process.HLT_L1SingleMuCosmics_v1, process.HLT_L2Mu10_v7, process.HLT_L2Mu10_NoVertex_NoBPTX3BX_v5, process.HLT_L2Mu10_NoVertex_NoBPTX_v6, process.HLT_L2Mu45_NoVertex_3Sta_NoBPTX3BX_v4, process.HLT_L2Mu40_NoVertex_3Sta_NoBPTX3BX_v5, process.HLT_L2Mu50_v2, process.HLT_L2Mu23NoVtx_2Cha_v1, process.HLT_L2Mu23NoVtx_2Cha_CosmicSeed_v1, process.HLT_DoubleL2Mu30NoVtx_2Cha_CosmicSeed_Eta2p4_v2, process.HLT_DoubleL2Mu30NoVtx_2Cha_Eta2p4_v2, process.HLT_DoubleL2Mu50_v2, process.HLT_DoubleL2Mu23NoVtx_2Cha_CosmicSeed_v2, process.HLT_DoubleL2Mu23NoVtx_2Cha_CosmicSeed_NoL2Matched_v2, process.HLT_DoubleL2Mu25NoVtx_2Cha_CosmicSeed_v2, process.HLT_DoubleL2Mu25NoVtx_2Cha_CosmicSeed_NoL2Matched_v2, process.HLT_DoubleL2Mu25NoVtx_2Cha_CosmicSeed_Eta2p4_v2, process.HLT_DoubleL2Mu23NoVtx_2Cha_v2, process.HLT_DoubleL2Mu23NoVtx_2Cha_NoL2Matched_v2, process.HLT_DoubleL2Mu25NoVtx_2Cha_v2, process.HLT_DoubleL2Mu25NoVtx_2Cha_NoL2Matched_v2, process.HLT_DoubleL2Mu25NoVtx_2Cha_Eta2p4_v2, process.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_v14, process.HLT_Mu19_TrkIsoVVL_Mu9_TrkIsoVVL_v3, process.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v15, process.HLT_Mu19_TrkIsoVVL_Mu9_TrkIsoVVL_DZ_v3, process.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_Mass8_v5, process.HLT_Mu19_TrkIsoVVL_Mu9_TrkIsoVVL_DZ_Mass8_v3, process.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_Mass3p8_v5, process.HLT_Mu19_TrkIsoVVL_Mu9_TrkIsoVVL_DZ_Mass3p8_v3, process.HLT_Mu25_TkMu0_Onia_v8, process.HLT_Mu30_TkMu0_Psi_v1, process.HLT_Mu30_TkMu0_Upsilon_v1, process.HLT_Mu20_TkMu0_Phi_v8, process.HLT_Mu25_TkMu0_Phi_v8, process.HLT_Mu12_v3, process.HLT_Mu15_v3, process.HLT_Mu20_v12, process.HLT_Mu27_v13, process.HLT_Mu50_v13, process.HLT_Mu55_v3, process.HLT_OldMu100_v3, process.HLT_TkMu100_v2, process.HLT_DiPFJet15_NoCaloMatched_v16, process.HLT_DiPFJet25_NoCaloMatched_v16, process.HLT_DiPFJet15_FBEta3_NoCaloMatched_v17, process.HLT_DiPFJet25_FBEta3_NoCaloMatched_v17, process.HLT_DiPFJetAve40_v14, process.HLT_DiPFJetAve60_v14, process.HLT_DiPFJetAve80_v13, process.HLT_DiPFJetAve140_v13, process.HLT_DiPFJetAve200_v13, process.HLT_DiPFJetAve260_v14, process.HLT_DiPFJetAve320_v14, process.HLT_DiPFJetAve400_v14, process.HLT_DiPFJetAve500_v14, process.HLT_DiPFJetAve15_HFJEC_v17, process.HLT_DiPFJetAve25_HFJEC_v17, process.HLT_DiPFJetAve35_HFJEC_v17, process.HLT_DiPFJetAve60_HFJEC_v15, process.HLT_DiPFJetAve80_HFJEC_v16, process.HLT_DiPFJetAve100_HFJEC_v16, process.HLT_DiPFJetAve160_HFJEC_v16, process.HLT_DiPFJetAve220_HFJEC_v16, process.HLT_DiPFJetAve300_HFJEC_v16, process.HLT_AK8PFJet15_v3, process.HLT_AK8PFJet25_v3, process.HLT_AK8PFJet40_v16, process.HLT_AK8PFJet60_v15, process.HLT_AK8PFJet80_v15, process.HLT_AK8PFJet140_v15, process.HLT_AK8PFJet200_v15, process.HLT_AK8PFJet260_v16, process.HLT_AK8PFJet320_v16, process.HLT_AK8PFJet400_v16, process.HLT_AK8PFJet450_v16, process.HLT_AK8PFJet500_v16, process.HLT_AK8PFJet550_v11, process.HLT_PFJet15_v3, process.HLT_PFJet25_v3, process.HLT_PFJet40_v21, process.HLT_PFJet60_v21, process.HLT_PFJet80_v20, process.HLT_PFJet140_v19, process.HLT_PFJet200_v19, process.HLT_PFJet260_v20, process.HLT_PFJet320_v20, process.HLT_PFJet400_v20, process.HLT_PFJet450_v21, process.HLT_PFJet500_v21, process.HLT_PFJet550_v11, process.HLT_PFJetFwd15_v3, process.HLT_PFJetFwd25_v3, process.HLT_PFJetFwd40_v19, process.HLT_PFJetFwd60_v19, process.HLT_PFJetFwd80_v18, process.HLT_PFJetFwd140_v18, process.HLT_PFJetFwd200_v18, process.HLT_PFJetFwd260_v19, process.HLT_PFJetFwd320_v19, process.HLT_PFJetFwd400_v19, process.HLT_PFJetFwd450_v19, process.HLT_PFJetFwd500_v19, process.HLT_AK8PFJetFwd15_v3, process.HLT_AK8PFJetFwd25_v3, process.HLT_AK8PFJetFwd40_v15, process.HLT_AK8PFJetFwd60_v14, process.HLT_AK8PFJetFwd80_v14, process.HLT_AK8PFJetFwd140_v14, process.HLT_AK8PFJetFwd200_v14, process.HLT_AK8PFJetFwd260_v15, process.HLT_AK8PFJetFwd320_v15, process.HLT_AK8PFJetFwd400_v15, process.HLT_AK8PFJetFwd450_v15, process.HLT_AK8PFJetFwd500_v15, process.HLT_PFHT180_v17, process.HLT_PFHT250_v17, process.HLT_PFHT370_v17, process.HLT_PFHT430_v17, process.HLT_PFHT510_v17, process.HLT_PFHT590_v17, process.HLT_PFHT680_v17, process.HLT_PFHT780_v17, process.HLT_PFHT890_v17, process.HLT_PFHT1050_v18, process.HLT_PFHT500_PFMET100_PFMHT100_IDTight_v12, process.HLT_PFHT500_PFMET110_PFMHT110_IDTight_v12, process.HLT_PFHT700_PFMET85_PFMHT85_IDTight_v12, process.HLT_PFHT700_PFMET95_PFMHT95_IDTight_v12, process.HLT_PFHT800_PFMET75_PFMHT75_IDTight_v12, process.HLT_PFHT800_PFMET85_PFMHT85_IDTight_v12, process.HLT_PFMET110_PFMHT110_IDTight_v20, process.HLT_PFMET120_PFMHT120_IDTight_v20, process.HLT_PFMET130_PFMHT130_IDTight_v20, process.HLT_PFMET140_PFMHT140_IDTight_v20, process.HLT_PFMET100_PFMHT100_IDTight_CaloBTagDeepCSV_3p1_v8, process.HLT_PFMET110_PFMHT110_IDTight_CaloBTagDeepCSV_3p1_v8, process.HLT_PFMET120_PFMHT120_IDTight_CaloBTagDeepCSV_3p1_v8, process.HLT_PFMET130_PFMHT130_IDTight_CaloBTagDeepCSV_3p1_v8, process.HLT_PFMET140_PFMHT140_IDTight_CaloBTagDeepCSV_3p1_v8, process.HLT_PFMET120_PFMHT120_IDTight_PFHT60_v9, process.HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v9, process.HLT_PFMETTypeOne120_PFMHT120_IDTight_PFHT60_v9, process.HLT_PFMETTypeOne110_PFMHT110_IDTight_v12, process.HLT_PFMETTypeOne120_PFMHT120_IDTight_v12, process.HLT_PFMETTypeOne130_PFMHT130_IDTight_v12, process.HLT_PFMETTypeOne140_PFMHT140_IDTight_v11, process.HLT_PFMETNoMu110_PFMHTNoMu110_IDTight_v20, process.HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_v20, process.HLT_PFMETNoMu130_PFMHTNoMu130_IDTight_v19, process.HLT_PFMETNoMu140_PFMHTNoMu140_IDTight_v19, process.HLT_MonoCentralPFJet80_PFMETNoMu110_PFMHTNoMu110_IDTight_v20, process.HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v20, process.HLT_MonoCentralPFJet80_PFMETNoMu130_PFMHTNoMu130_IDTight_v19, process.HLT_MonoCentralPFJet80_PFMETNoMu140_PFMHTNoMu140_IDTight_v19, process.HLT_L1ETMHadSeeds_v2, process.HLT_CaloMHT90_v4, process.HLT_CaloMET80_NotCleaned_v4, process.HLT_CaloMET90_NotCleaned_v4, process.HLT_CaloMET100_NotCleaned_v4, process.HLT_CaloMET110_NotCleaned_v4, process.HLT_CaloMET250_NotCleaned_v4, process.HLT_CaloMET70_HBHECleaned_v4, process.HLT_CaloMET80_HBHECleaned_v4, process.HLT_CaloMET90_HBHECleaned_v4, process.HLT_CaloMET100_HBHECleaned_v4, process.HLT_CaloMET250_HBHECleaned_v4, process.HLT_CaloMET300_HBHECleaned_v4, process.HLT_CaloMET350_HBHECleaned_v4, process.HLT_PFMET200_NotCleaned_v9, process.HLT_PFMET200_HBHECleaned_v9, process.HLT_PFMET250_HBHECleaned_v9, process.HLT_PFMET300_HBHECleaned_v9, process.HLT_PFMET200_HBHE_BeamHaloCleaned_v9, process.HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned_v9, process.HLT_MET105_IsoTrk50_v9, process.HLT_MET120_IsoTrk50_v9, process.HLT_SingleJet30_Mu12_SinglePFJet40_v11, process.HLT_Mu12_DoublePFJets40_CaloBTagDeepCSV_p71_v2, process.HLT_Mu12_DoublePFJets100_CaloBTagDeepCSV_p71_v2, process.HLT_Mu12_DoublePFJets200_CaloBTagDeepCSV_p71_v2, process.HLT_Mu12_DoublePFJets350_CaloBTagDeepCSV_p71_v2, process.HLT_Mu12_DoublePFJets40MaxDeta1p6_DoubleCaloBTagDeepCSV_p71_v2, process.HLT_Mu12_DoublePFJets54MaxDeta1p6_DoubleCaloBTagDeepCSV_p71_v2, process.HLT_Mu12_DoublePFJets62MaxDeta1p6_DoubleCaloBTagDeepCSV_p71_v2, process.HLT_DoublePFJets40_CaloBTagDeepCSV_p71_v2, process.HLT_DoublePFJets100_CaloBTagDeepCSV_p71_v2, process.HLT_DoublePFJets200_CaloBTagDeepCSV_p71_v2, process.HLT_DoublePFJets350_CaloBTagDeepCSV_p71_v2, process.HLT_DoublePFJets116MaxDeta1p6_DoubleCaloBTagDeepCSV_p71_v2, process.HLT_DoublePFJets128MaxDeta1p6_DoubleCaloBTagDeepCSV_p71_v2, process.HLT_Photon300_NoHE_v12, process.HLT_Mu8_TrkIsoVVL_v12, process.HLT_Mu8_DiEle12_CaloIdL_TrackIdL_DZ_v18, process.HLT_Mu8_DiEle12_CaloIdL_TrackIdL_v18, process.HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT350_DZ_v19, process.HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT350_v19, process.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_v13, process.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_PFDiJet30_v1, process.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_CaloDiJet30_v1, process.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_PFDiJet30_PFBtagDeepCSV_1p5_v1, process.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_CaloDiJet30_CaloBtagDeepCSV_1p5_v1, process.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_v11, process.HLT_Mu17_TrkIsoVVL_v13, process.HLT_Mu19_TrkIsoVVL_v4, process.HLT_BTagMu_AK4DiJet20_Mu5_v13, process.HLT_BTagMu_AK4DiJet40_Mu5_v13, process.HLT_BTagMu_AK4DiJet70_Mu5_v13, process.HLT_BTagMu_AK4DiJet110_Mu5_v13, process.HLT_BTagMu_AK4DiJet170_Mu5_v12, process.HLT_BTagMu_AK4Jet300_Mu5_v12, process.HLT_BTagMu_AK8DiJet170_Mu5_v9, process.HLT_BTagMu_AK8Jet170_DoubleMu5_v2, process.HLT_BTagMu_AK8Jet300_Mu5_v12, process.HLT_BTagMu_AK4DiJet20_Mu5_noalgo_v13, process.HLT_BTagMu_AK4DiJet40_Mu5_noalgo_v13, process.HLT_BTagMu_AK4DiJet70_Mu5_noalgo_v13, process.HLT_BTagMu_AK4DiJet110_Mu5_noalgo_v13, process.HLT_BTagMu_AK4DiJet170_Mu5_noalgo_v12, process.HLT_BTagMu_AK4Jet300_Mu5_noalgo_v12, process.HLT_BTagMu_AK8DiJet170_Mu5_noalgo_v9, process.HLT_BTagMu_AK8Jet170_DoubleMu5_noalgo_v2, process.HLT_BTagMu_AK8Jet300_Mu5_noalgo_v12, process.HLT_Ele15_Ele8_CaloIdL_TrackIdL_IsoVL_v3, process.HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v19, process.HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_v19, process.HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v15, process.HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_v7, process.HLT_Mu12_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_v7, process.HLT_Mu12_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_v15, process.HLT_Mu12_DoublePhoton20_v5, process.HLT_TriplePhoton_20_20_20_CaloIdLV2_v3, process.HLT_TriplePhoton_20_20_20_CaloIdLV2_R9IdVL_v3, process.HLT_TriplePhoton_30_30_10_CaloIdLV2_v4, process.HLT_TriplePhoton_30_30_10_CaloIdLV2_R9IdVL_v4, process.HLT_TriplePhoton_35_35_5_CaloIdLV2_R9IdVL_v4, process.HLT_Photon20_v2, process.HLT_Photon33_v5, process.HLT_Photon50_v13, process.HLT_Photon75_v13, process.HLT_Photon90_v13, process.HLT_Photon120_v13, process.HLT_Photon150_v6, process.HLT_Photon175_v14, process.HLT_Photon200_v13, process.HLT_Photon100EB_TightID_TightIso_v2, process.HLT_Photon110EB_TightID_TightIso_v2, process.HLT_Photon120EB_TightID_TightIso_v2, process.HLT_Photon100EBHE10_v2, process.HLT_Photon100EEHE10_v2, process.HLT_Photon100EE_TightID_TightIso_v2, process.HLT_Photon50_R9Id90_HE10_IsoM_v14, process.HLT_Photon75_R9Id90_HE10_IsoM_v14, process.HLT_Photon75_R9Id90_HE10_IsoM_EBOnly_CaloMJJ300_PFJetsMJJ400DEta3_v5, process.HLT_Photon75_R9Id90_HE10_IsoM_EBOnly_CaloMJJ400_PFJetsMJJ600DEta3_v5, process.HLT_Photon90_R9Id90_HE10_IsoM_v14, process.HLT_Photon120_R9Id90_HE10_IsoM_v14, process.HLT_Photon165_R9Id90_HE10_IsoM_v15, process.HLT_Photon90_CaloIdL_PFHT700_v16, process.HLT_Diphoton30_22_R9Id_OR_IsoCaloId_AND_HE_R9Id_Mass90_v13, process.HLT_Diphoton30_22_R9Id_OR_IsoCaloId_AND_HE_R9Id_Mass95_v13, process.HLT_Diphoton30PV_18PV_R9Id_AND_IsoCaloId_AND_HE_R9Id_PixelVeto_Mass55_v15, process.HLT_Diphoton30PV_18PV_R9Id_AND_IsoCaloId_AND_HE_R9Id_NoPixelVeto_Mass55_v13, process.HLT_Photon35_TwoProngs35_v1, process.HLT_IsoMu24_TwoProngs35_v1, process.HLT_Dimuon0_Jpsi_L1_NoOS_v7, process.HLT_Dimuon0_Jpsi_NoVertexing_NoOS_v7, process.HLT_Dimuon0_Jpsi_v8, process.HLT_Dimuon0_Jpsi_NoVertexing_v8, process.HLT_Dimuon0_Jpsi_L1_4R_0er1p5R_v7, process.HLT_Dimuon0_Jpsi_NoVertexing_L1_4R_0er1p5R_v7, process.HLT_Dimuon0_Jpsi3p5_Muon2_v5, process.HLT_Dimuon0_Upsilon_L1_4p5_v9, process.HLT_Dimuon0_Upsilon_L1_5_v9, process.HLT_Dimuon0_Upsilon_L1_4p5NoOS_v8, process.HLT_Dimuon0_Upsilon_L1_4p5er2p0_v9, process.HLT_Dimuon0_Upsilon_L1_4p5er2p0M_v7, process.HLT_Dimuon0_Upsilon_NoVertexing_v7, process.HLT_Dimuon0_Upsilon_L1_5M_v8, process.HLT_Dimuon0_LowMass_L1_0er1p5R_v7, process.HLT_Dimuon0_LowMass_L1_0er1p5_v8, process.HLT_Dimuon0_LowMass_v8, process.HLT_Dimuon0_LowMass_L1_4_v8, process.HLT_Dimuon0_LowMass_L1_4R_v7, process.HLT_Dimuon0_LowMass_L1_TM530_v6, process.HLT_Dimuon0_Upsilon_Muon_L1_TM0_v6, process.HLT_Dimuon0_Upsilon_Muon_NoL1Mass_v6, process.HLT_TripleMu_5_3_3_Mass3p8_DZ_v8, process.HLT_TripleMu_10_5_5_DZ_v10, process.HLT_TripleMu_12_10_5_v10, process.HLT_Tau3Mu_Mu7_Mu1_TkMu1_Tau15_v4, process.HLT_Tau3Mu_Mu7_Mu1_TkMu1_Tau15_Charge1_v4, process.HLT_Tau3Mu_Mu7_Mu1_TkMu1_IsoTau15_v4, process.HLT_Tau3Mu_Mu7_Mu1_TkMu1_IsoTau15_Charge1_v4, process.HLT_DoubleMu3_DZ_PFMET50_PFMHT60_v10, process.HLT_DoubleMu3_DZ_PFMET70_PFMHT70_v10, process.HLT_DoubleMu3_DZ_PFMET90_PFMHT90_v10, process.HLT_DoubleMu3_Trk_Tau3mu_NoL1Mass_v6, process.HLT_DoubleMu4_Jpsi_Displaced_v7, process.HLT_DoubleMu4_Jpsi_NoVertexing_v7, process.HLT_DoubleMu4_JpsiTrkTrk_Displaced_v7, process.HLT_DoubleMu43NoFiltersNoVtx_v4, process.HLT_DoubleMu48NoFiltersNoVtx_v4, process.HLT_Mu43NoFiltersNoVtx_Photon43_CaloIdL_v5, process.HLT_Mu48NoFiltersNoVtx_Photon48_CaloIdL_v5, process.HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v1, process.HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v1, process.HLT_DoubleMu33NoFiltersNoVtxDisplaced_v1, process.HLT_DoubleMu40NoFiltersNoVtxDisplaced_v1, process.HLT_DoubleMu20_7_Mass0to30_L1_DM4_v7, process.HLT_DoubleMu20_7_Mass0to30_L1_DM4EG_v8, process.HLT_HT425_v9, process.HLT_HT430_DisplacedDijet40_DisplacedTrack_v13, process.HLT_HT500_DisplacedDijet40_DisplacedTrack_v13, process.HLT_HT430_DisplacedDijet60_DisplacedTrack_v13, process.HLT_HT400_DisplacedDijet40_DisplacedTrack_v13, process.HLT_HT650_DisplacedDijet60_Inclusive_v13, process.HLT_HT550_DisplacedDijet60_Inclusive_v13, process.HLT_DiJet110_35_Mjj650_PFMET110_v9, process.HLT_DiJet110_35_Mjj650_PFMET120_v9, process.HLT_DiJet110_35_Mjj650_PFMET130_v9, process.HLT_TripleJet110_35_35_Mjj650_PFMET110_v9, process.HLT_TripleJet110_35_35_Mjj650_PFMET120_v9, process.HLT_TripleJet110_35_35_Mjj650_PFMET130_v9, process.HLT_Ele30_eta2p1_WPTight_Gsf_CentralPFJet35_EleCleaned_v13, process.HLT_Ele28_eta2p1_WPTight_Gsf_HT150_v13, process.HLT_Ele28_HighEta_SC20_Mass55_v13, process.HLT_DoubleMu20_7_Mass0to30_Photon23_v8, process.HLT_Ele15_IsoVVVL_PFHT450_CaloBTagDeepCSV_4p5_v8, process.HLT_Ele15_IsoVVVL_PFHT450_PFMET50_v16, process.HLT_Ele15_IsoVVVL_PFHT450_v16, process.HLT_Ele50_IsoVVVL_PFHT450_v16, process.HLT_Ele15_IsoVVVL_PFHT600_v20, process.HLT_Mu4_TrkIsoVVL_DiPFJet90_40_DEta3p5_MJJ750_HTT300_PFMETNoMu60_v15, process.HLT_Mu8_TrkIsoVVL_DiPFJet40_DEta3p5_MJJ750_HTT300_PFMETNoMu60_v16, process.HLT_Mu10_TrkIsoVVL_DiPFJet40_DEta3p5_MJJ750_HTT350_PFMETNoMu60_v15, process.HLT_Mu15_IsoVVVL_PFHT450_CaloBTagDeepCSV_4p5_v8, process.HLT_Mu15_IsoVVVL_PFHT450_PFMET50_v15, process.HLT_Mu15_IsoVVVL_PFHT450_v15, process.HLT_Mu50_IsoVVVL_PFHT450_v15, process.HLT_Mu15_IsoVVVL_PFHT600_v19, process.HLT_Mu3er1p5_PFJet100er2p5_PFMET70_PFMHT70_IDTight_v2, process.HLT_Mu3er1p5_PFJet100er2p5_PFMET80_PFMHT80_IDTight_v2, process.HLT_Mu3er1p5_PFJet100er2p5_PFMET90_PFMHT90_IDTight_v2, process.HLT_Mu3er1p5_PFJet100er2p5_PFMET100_PFMHT100_IDTight_v2, process.HLT_Mu3er1p5_PFJet100er2p5_PFMETNoMu70_PFMHTNoMu70_IDTight_v2, process.HLT_Mu3er1p5_PFJet100er2p5_PFMETNoMu80_PFMHTNoMu80_IDTight_v2, process.HLT_Mu3er1p5_PFJet100er2p5_PFMETNoMu90_PFMHTNoMu90_IDTight_v2, process.HLT_Mu3er1p5_PFJet100er2p5_PFMETNoMu100_PFMHTNoMu100_IDTight_v2, process.HLT_Dimuon10_PsiPrime_Barrel_Seagulls_v7, process.HLT_Dimuon20_Jpsi_Barrel_Seagulls_v7, process.HLT_Dimuon12_Upsilon_y1p4_v2, process.HLT_Dimuon14_Phi_Barrel_Seagulls_v7, process.HLT_Dimuon18_PsiPrime_v14, process.HLT_Dimuon25_Jpsi_v14, process.HLT_Dimuon18_PsiPrime_noCorrL1_v6, process.HLT_Dimuon24_Upsilon_noCorrL1_v6, process.HLT_Dimuon24_Phi_noCorrL1_v6, process.HLT_Dimuon25_Jpsi_noCorrL1_v6, process.HLT_DiMu4_Ele9_CaloIdL_TrackIdL_DZ_Mass3p8_v17, process.HLT_DiMu9_Ele9_CaloIdL_TrackIdL_DZ_v17, process.HLT_DiMu9_Ele9_CaloIdL_TrackIdL_v17, process.HLT_DoubleIsoMu20_eta2p1_v7, process.HLT_TrkMu12_DoubleTrkMu5NoFiltersNoVtx_v6, process.HLT_TrkMu16_DoubleTrkMu6NoFiltersNoVtx_v12, process.HLT_TrkMu17_DoubleTrkMu8NoFiltersNoVtx_v13, process.HLT_Mu8_v12, process.HLT_Mu17_v13, process.HLT_Mu19_v4, process.HLT_Mu17_Photon30_IsoCaloId_v6, process.HLT_Ele8_CaloIdL_TrackIdL_IsoVL_PFJet30_v16, process.HLT_Ele12_CaloIdL_TrackIdL_IsoVL_PFJet30_v18, process.HLT_Ele15_CaloIdL_TrackIdL_IsoVL_PFJet30_v3, process.HLT_Ele23_CaloIdL_TrackIdL_IsoVL_PFJet30_v18, process.HLT_Ele8_CaloIdM_TrackIdM_PFJet30_v18, process.HLT_Ele17_CaloIdM_TrackIdM_PFJet30_v16, process.HLT_Ele23_CaloIdM_TrackIdM_PFJet30_v18, process.HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165_v18, process.HLT_Ele115_CaloIdVT_GsfTrkIdT_v14, process.HLT_Ele135_CaloIdVT_GsfTrkIdT_v7, process.HLT_Ele145_CaloIdVT_GsfTrkIdT_v8, process.HLT_Ele200_CaloIdVT_GsfTrkIdT_v8, process.HLT_Ele250_CaloIdVT_GsfTrkIdT_v13, process.HLT_Ele300_CaloIdVT_GsfTrkIdT_v13, process.HLT_PFHT330PT30_QuadPFJet_75_60_45_40_TriplePFBTagDeepCSV_4p5_v3, process.HLT_PFHT330PT30_QuadPFJet_75_60_45_40_v9, process.HLT_PFHT400_SixPFJet32_DoublePFBTagDeepCSV_2p94_v8, process.HLT_PFHT400_SixPFJet32_v8, process.HLT_PFHT450_SixPFJet36_PFBTagDeepCSV_1p59_v7, process.HLT_PFHT450_SixPFJet36_v7, process.HLT_PFHT400_FivePFJet_100_100_60_30_30_v8, process.HLT_PFHT400_FivePFJet_100_100_60_30_30_DoublePFBTagDeepCSV_4p5_v8, process.HLT_PFHT400_FivePFJet_120_120_60_30_30_DoublePFBTagDeepCSV_4p5_v8, process.HLT_PFHT350_v19, process.HLT_PFHT350MinPFJet15_v9, process.HLT_Photon60_R9Id90_CaloIdL_IsoL_v5, process.HLT_Photon60_R9Id90_CaloIdL_IsoL_DisplacedIdL_v5, process.HLT_Photon60_R9Id90_CaloIdL_IsoL_DisplacedIdL_PFHT350MinPFJet15_v11, process.HLT_ECALHT800_v10, process.HLT_DiSC30_18_EIso_AND_HE_Mass70_v13, process.HLT_Physics_v7, process.HLT_Physics_part0_v7, process.HLT_Physics_part1_v7, process.HLT_Physics_part2_v7, process.HLT_Physics_part3_v7, process.HLT_Physics_part4_v7, process.HLT_Physics_part5_v7, process.HLT_Physics_part6_v7, process.HLT_Physics_part7_v7, process.DST_Physics_v7, process.HLT_Random_v3, process.HLT_ZeroBias_v6, process.HLT_ZeroBias_Alignment_v1, process.HLT_ZeroBias_part0_v6, process.HLT_ZeroBias_part1_v6, process.HLT_ZeroBias_part2_v6, process.HLT_ZeroBias_part3_v6, process.HLT_ZeroBias_part4_v6, process.HLT_ZeroBias_part5_v6, process.HLT_ZeroBias_part6_v6, process.HLT_ZeroBias_part7_v6, process.DST_ZeroBias_v2, process.DST_HT250_CaloScouting_v10, process.DST_HT250_CaloBTagScouting_v10, process.DST_HT410_PFScouting_v16, process.DST_HT410_BTagScouting_v16, process.DST_ZeroBias_BTagScouting_v15, process.DST_ZeroBias_CaloScouting_PFScouting_v14, process.DST_CaloJet40_BTagScouting_v15, process.DST_CaloJet40_CaloScouting_PFScouting_v15, process.DST_CaloJet40_CaloBTagScouting_v14, process.DST_L1HTT_BTagScouting_v15, process.DST_L1HTT_CaloScouting_PFScouting_v15, process.DST_L1HTT_CaloBTagScouting_v14, process.DST_L1DoubleMu_BTagScouting_v16, process.DST_L1DoubleMu_CaloScouting_PFScouting_v15, process.DST_DoubleMu3_noVtx_CaloScouting_Monitoring_v6, process.DST_DoubleMu3_noVtx_CaloScouting_v6, process.DST_DoubleMu1_noVtx_CaloScouting_v2, process.DST_DoubleMu3_noVtx_Mass10_PFScouting_v3, process.HLT_AK4CaloJet30_v11, process.HLT_AK4CaloJet40_v10, process.HLT_AK4CaloJet50_v10, process.HLT_AK4CaloJet80_v10, process.HLT_AK4CaloJet100_v10, process.HLT_AK4CaloJet120_v9, process.HLT_AK4PFJet30_v19, process.HLT_AK4PFJet50_v19, process.HLT_AK4PFJet80_v19, process.HLT_AK4PFJet100_v19, process.HLT_AK4PFJet120_v18, process.HLT_SinglePhoton10_Eta3p1ForPPRef_v8, process.HLT_SinglePhoton20_Eta3p1ForPPRef_v9, process.HLT_SinglePhoton30_Eta3p1ForPPRef_v9, process.HLT_Photon20_HoverELoose_v10, process.HLT_Photon30_HoverELoose_v10, process.HLT_EcalCalibration_v4, process.HLT_HcalCalibration_v5, process.AlCa_EcalPhiSym_v9, process.HLT_L1UnpairedBunchBptxMinus_v2, process.HLT_L1UnpairedBunchBptxPlus_v2, process.HLT_L1NotBptxOR_v3, process.HLT_L1_CDC_SingleMu_3_er1p2_TOP120_DPHI2p618_3p142_v2, process.HLT_CDC_L2cosmic_10_er1p0_v1, process.HLT_CDC_L2cosmic_5p5_er1p0_v1, process.HLT_HcalNZS_v13, process.HLT_HcalPhiSym_v15, process.HLT_HcalIsolatedbunch_v5, process.HLT_IsoTrackHB_v4, process.HLT_IsoTrackHE_v4, process.HLT_ZeroBias_FirstCollisionAfterAbortGap_v5, process.HLT_ZeroBias_IsolatedBunches_v5, process.HLT_ZeroBias_FirstCollisionInTrain_v4, process.HLT_ZeroBias_LastCollisionInTrain_v3, process.HLT_ZeroBias_FirstBXAfterTrain_v3, process.AlCa_RPCMuonNormalisation_v13, process.AlCa_LumiPixels_Random_v4, process.AlCa_LumiPixels_ZeroBias_v8, process.MC_ReducedIterativeTracking_v12, process.MC_PFMET_v17, process.MC_AK4PFJets_v17, process.MC_PFBTagDeepCSV_v10, process.MC_PFHT_v16, process.MC_PFMHT_v16, process.MC_CaloMET_v8, process.MC_CaloMET_JetIdCleaned_v9, process.MC_AK4CaloJets_v9, process.MC_AK4CaloJetsFromPV_v8, process.MC_CaloBTagDeepCSV_v8, process.MC_CaloHT_v8, process.MC_CaloMHT_v8, process.MC_AK8PFJets_v17, process.MC_AK8TrimPFJets_v17, process.MC_AK8PFHT_v16, process.MC_AK8CaloHT_v8, process.MC_Diphoton10_10_R9Id_OR_IsoCaloId_AND_HE_R9Id_Mass10_v13, process.MC_DoubleEle5_CaloIdL_MW_v15, process.MC_Ele5_WPTight_Gsf_v8, process.MC_Ele15_Ele10_CaloIdL_TrackIdL_IsoVL_DZ_v15, process.MC_IsoMu_v15, process.MC_DoubleMu_TrkIsoVVL_DZ_v11, process.MC_DoubleMuNoFiltersNoVtx_v7, process.AlCa_EcalPi0EBonly_v13, process.AlCa_EcalPi0EEonly_v13, process.AlCa_EcalEtaEBonly_v13, process.AlCa_EcalEtaEEonly_v13, process.HLT_IsoMu24_eta2p1_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_v12, process.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET90_v12, process.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET100_v12, process.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET110_v8, process.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET120_v8, process.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET130_v8, process.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_MET140_v3, process.HLT_MediumChargedIsoPFTau50_Trk30_eta2p1_1pr_v12, process.HLT_MediumChargedIsoPFTau180HighPtRelaxedIso_Trk50_eta2p1_1pr_v11, process.HLT_MediumChargedIsoPFTau180HighPtRelaxedIso_Trk50_eta2p1_v12, process.HLT_MediumChargedIsoPFTau200HighPtRelaxedIso_Trk50_eta2p1_v12, process.HLT_MediumChargedIsoPFTau220HighPtRelaxedIso_Trk50_eta2p1_v12, process.HLT_Ele16_Ele12_Ele8_CaloIdL_TrackIdL_v9, process.HLT_Rsq0p35_v15, process.HLT_Rsq0p40_v15, process.HLT_RsqMR300_Rsq0p09_MR200_v15, process.HLT_RsqMR320_Rsq0p09_MR200_v15, process.HLT_RsqMR300_Rsq0p09_MR200_4jet_v15, process.HLT_RsqMR320_Rsq0p09_MR200_4jet_v15, process.HLT_IsoMu27_MET90_v3, process.HLT_DoubleMediumChargedIsoPFTau35_Trk1_eta2p1_Reg_v12, process.HLT_DoubleMediumChargedIsoPFTau35_Trk1_TightID_eta2p1_Reg_v12, process.HLT_DoubleTightChargedIsoPFTau35_Trk1_eta2p1_Reg_v12, process.HLT_DoubleTightChargedIsoPFTau35_Trk1_TightID_eta2p1_Reg_v12, process.HLT_DoubleMediumChargedIsoPFTauHPS30_L1MaxMass_Trk1_eta2p1_Reg_v1, process.HLT_DoubleTightChargedIsoPFTauHPS35_Trk1_eta2p1_Reg_v1, process.HLT_DoubleMediumChargedIsoPFTauHPS35_Trk1_TightID_eta2p1_Reg_v1, process.HLT_DoubleMediumChargedIsoPFTauHPS35_Trk1_eta2p1_Reg_v4, process.HLT_DoubleTightChargedIsoPFTauHPS35_Trk1_TightID_eta2p1_Reg_v1, process.HLT_DoubleMediumChargedIsoPFTauHPS40_Trk1_eta2p1_Reg_v1, process.HLT_DoubleTightChargedIsoPFTauHPS40_Trk1_eta2p1_Reg_v1, process.HLT_DoubleMediumChargedIsoPFTauHPS40_Trk1_TightID_eta2p1_Reg_v1, process.HLT_DoubleTightChargedIsoPFTauHPS40_Trk1_TightID_eta2p1_Reg_v1, process.HLT_VBF_DoubleLooseChargedIsoPFTau20_Trk1_eta2p1_v3, process.HLT_VBF_DoubleLooseChargedIsoPFTauHPS20_Trk1_eta2p1_v1, process.HLT_VBF_DoubleMediumChargedIsoPFTauHPS20_Trk1_eta2p1_v1, process.HLT_VBF_DoubleTightChargedIsoPFTauHPS20_Trk1_eta2p1_v1, process.HLT_Photon50_R9Id90_HE10_IsoM_EBOnly_PFJetsMJJ300DEta3_PFMET50_v5, process.HLT_Photon75_R9Id90_HE10_IsoM_EBOnly_PFJetsMJJ300DEta3_v5, process.HLT_Photon75_R9Id90_HE10_IsoM_EBOnly_PFJetsMJJ600DEta3_v5, process.HLT_PFMET100_PFMHT100_IDTight_PFHT60_v9, process.HLT_PFMETNoMu100_PFMHTNoMu100_IDTight_PFHT60_v9, process.HLT_PFMETTypeOne100_PFMHT100_IDTight_PFHT60_v9, process.HLT_Mu18_Mu9_SameSign_v4, process.HLT_Mu18_Mu9_SameSign_DZ_v4, process.HLT_Mu18_Mu9_v4, process.HLT_Mu18_Mu9_DZ_v4, process.HLT_Mu20_Mu10_SameSign_v4, process.HLT_Mu20_Mu10_SameSign_DZ_v4, process.HLT_Mu20_Mu10_v4, process.HLT_Mu20_Mu10_DZ_v4, process.HLT_Mu23_Mu12_SameSign_v4, process.HLT_Mu23_Mu12_SameSign_DZ_v4, process.HLT_Mu23_Mu12_v4, process.HLT_Mu23_Mu12_DZ_v4, process.HLT_DoubleMu2_Jpsi_DoubleTrk1_Phi1p05_v6, process.HLT_DoubleMu2_Jpsi_DoubleTkMu0_Phi_v5, process.HLT_DoubleMu3_DCA_PFMET50_PFMHT60_v10, process.HLT_TripleMu_5_3_3_Mass3p8_DCA_v3, process.HLT_QuadPFJet98_83_71_15_DoublePFBTagDeepCSV_1p3_7p7_VBF1_v8, process.HLT_QuadPFJet103_88_75_15_DoublePFBTagDeepCSV_1p3_7p7_VBF1_v8, process.HLT_QuadPFJet111_90_80_15_DoublePFBTagDeepCSV_1p3_7p7_VBF1_v8, process.HLT_QuadPFJet98_83_71_15_PFBTagDeepCSV_1p3_VBF2_v8, process.HLT_QuadPFJet103_88_75_15_PFBTagDeepCSV_1p3_VBF2_v8, process.HLT_QuadPFJet105_88_76_15_PFBTagDeepCSV_1p3_VBF2_v8, process.HLT_QuadPFJet111_90_80_15_PFBTagDeepCSV_1p3_VBF2_v8, process.HLT_QuadPFJet98_83_71_15_v5, process.HLT_QuadPFJet103_88_75_15_v5, process.HLT_QuadPFJet105_88_76_15_v5, process.HLT_QuadPFJet111_90_80_15_v5, process.HLT_AK8PFJet330_TrimMass30_PFAK8BTagDeepCSV_p17_v2, process.HLT_AK8PFJet330_TrimMass30_PFAK8BTagDeepCSV_p1_v2, process.HLT_AK8PFJet330_TrimMass30_PFAK8BoostedDoubleB_p02_v3, process.HLT_AK8PFJet330_TrimMass30_PFAK8BoostedDoubleB_np2_v2, process.HLT_AK8PFJet330_TrimMass30_PFAK8BoostedDoubleB_np4_v2, process.HLT_Diphoton30_18_R9IdL_AND_HE_AND_IsoCaloId_NoPixelVeto_Mass55_v2, process.HLT_Diphoton30_18_R9IdL_AND_HE_AND_IsoCaloId_NoPixelVeto_v2, process.HLT_Mu12_IP6_ToCSCS_v1, process.HLT_Mu12_IP6_part0_v2, process.HLT_Mu12_IP6_part1_v2, process.HLT_Mu12_IP6_part2_v2, process.HLT_Mu12_IP6_part3_v2, process.HLT_Mu12_IP6_part4_v2, process.HLT_Mu9_IP5_ToCSCS_v1, process.HLT_Mu9_IP5_part0_v2, process.HLT_Mu9_IP5_part1_v2, process.HLT_Mu9_IP5_part2_v2, process.HLT_Mu9_IP5_part3_v2, process.HLT_Mu9_IP5_part4_v2, process.HLT_Mu7_IP4_ToCSCS_v1, process.HLT_Mu7_IP4_part0_v2, process.HLT_Mu7_IP4_part1_v2, process.HLT_Mu7_IP4_part2_v2, process.HLT_Mu7_IP4_part3_v2, process.HLT_Mu7_IP4_part4_v2, process.HLT_Mu9_IP4_ToCSCS_v1, process.HLT_Mu9_IP4_part0_v2, process.HLT_Mu9_IP4_part1_v2, process.HLT_Mu9_IP4_part2_v2, process.HLT_Mu9_IP4_part3_v2, process.HLT_Mu9_IP4_part4_v2, process.HLT_Mu8_IP5_ToCSCS_v1, process.HLT_Mu8_IP5_part0_v2, process.HLT_Mu8_IP5_part1_v2, process.HLT_Mu8_IP5_part2_v2, process.HLT_Mu8_IP5_part3_v2, process.HLT_Mu8_IP5_part4_v2, process.HLT_Mu8_IP6_ToCSCS_v1, process.HLT_Mu8_IP6_part0_v2, process.HLT_Mu8_IP6_part1_v2, process.HLT_Mu8_IP6_part2_v2, process.HLT_Mu8_IP6_part3_v2, process.HLT_Mu8_IP6_part4_v2, process.HLT_Mu9_IP6_ToCSCS_v1, process.HLT_Mu9_IP6_part0_v3, process.HLT_Mu9_IP6_part1_v3, process.HLT_Mu9_IP6_part2_v3, process.HLT_Mu9_IP6_part3_v3, process.HLT_Mu9_IP6_part4_v3, process.HLT_Mu8_IP3_ToCSCS_v1, process.HLT_Mu8_IP3_part0_v3, process.HLT_Mu8_IP3_part1_v3, process.HLT_Mu8_IP3_part2_v3, process.HLT_Mu8_IP3_part3_v3, process.HLT_Mu8_IP3_part4_v3, process.HLT_Mu9_IP0_part0_v2, process.HLT_Mu9_IP3_part0_v2, process.HLT_QuadPFJet105_88_76_15_DoublePFBTagDeepCSV_1p3_7p7_VBF1_v8, process.HLT_TrkMu6NoFiltersNoVtx_v1, process.HLT_TrkMu16NoFiltersNoVtx_v1, process.HLT_DoubleTrkMu_16_6_NoFiltersNoVtx_v1, process.HLTriggerFinalPath, process.HLTAnalyzerEndpath, process.ParkingHLTPhysicsOutput, process.ParkingZeroBiasOutput, process.PhysicsCommissioningOutput, process.PhysicsEGammaOutput, process.PhysicsEndOfFillOutput, process.PhysicsHadronsTausOutput, process.PhysicsMuonsOutput, process.ParkingBPH1Output, process.ParkingBPH2Output, process.ParkingBPH3Output, process.ParkingBPH4Output, process.ParkingBPH5Output, process.DQMOutput, process.DQMOnlineBeamspotOutput, process.DQMCalibrationOutput, process.DQMEventDisplayOutput, process.HLTMonitorOutput, process.RPCMONOutput, process.CalibrationOutput, process.EcalCalibrationOutput, process.ALCAPHISYMOutput, process.ALCALUMIPIXELSOutput, process.ALCALUMIPIXELSEXPRESSOutput, process.ALCAP0Output, process.ExpressOutput, process.ExpressAlignmentOutput, process.NanoDSTOutput, process.ScoutingPFOutput, process.ScoutingCaloMuonOutput, process.PhysicsScoutingMonitorOutput, process.PhysicsHLTPhysics1Output, process.PhysicsHLTPhysics2Output, process.PhysicsHLTPhysics3Output, process.PhysicsHLTPhysics4Output, process.PhysicsZeroBias1Output, process.PhysicsZeroBias2Output, process.PhysicsZeroBias3Output, process.PhysicsZeroBias4Output ))
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/HIon/V8 (CMSSW_11_0_0_pre9)
  tableName = cms.string('/dev/CMSSW_11_0_0/HIon/V8')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_10_6_0/PRef/V2 (CMSSW_10_6_0_pre4)
tableName = cms.string('/dev/CMSSW_10_6_0/PRef/V2')"
-------------------------------------------------------------------------
"# /dev/CMSSW_10_6_0/HIon/V3 (CMSSW_10_6_0_pre4)
  tableName = cms.string('/dev/CMSSW_10_6_0/HIon/V3')
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/PIon/V8 (CMSSW_11_0_0_pre9)
  tableName = cms.string('/dev/CMSSW_11_0_0/PIon/V8')
"
-------------------------------------------------------------------------
"# Source: /dev/CMSSW_11_0_0/PIon/V8 (CMSSW_11_0_0_pre9)
tableName = cms.string('/dev/CMSSW_11_0_0/PIon/V8')"
-------------------------------------------------------------------------
"# /dev/CMSSW_10_6_0/PIon/V3 (CMSSW_10_6_0_pre4)
  tableName = cms.string('/dev/CMSSW_10_6_0/PIon/V3')
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_11_0_0/PRef/V8 (CMSSW_11_0_0_pre9)
  tableName = cms.string('/dev/CMSSW_11_0_0/PRef/V8')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_10_6_0/PRef (CMSSW_10_6_0_pre4)
tableName = cms.string('/dev/CMSSW_10_6_0/PRef')"
-------------------------------------------------------------------------
"# /dev/CMSSW_10_6_0/PRef/V3 (CMSSW_10_6_0_pre4)
  tableName = cms.string('/dev/CMSSW_10_6_0/PRef/V3')
"
-------------------------------------------------------------------------
"Recom
PRs: 28125, 28126"
-------------------------------------------------------------------------
=========================================================================
"### Example how to check timing
### Example how to check memory
#process.SimpleMemoryCheck = cms.Service(""SimpleMemoryCheck"",ignoreTotal = cms.untracked.int32(1) )
"
-------------------------------------------------------------------------
"# Example how to check timing and memory
process.SimpleMemoryCheck = cms.Service(""SimpleMemoryCheck"",
    ignoreTotal = cms.untracked.int32(1)
)"
-------------------------------------------------------------------------
"### Example how to check timing
### Example how to check memory
#process.SimpleMemoryCheck = cms.Service(""SimpleMemoryCheck"",ignoreTotal = cms.untracked.int32(1) )
"
-------------------------------------------------------------------------
"Recom
PRs: 28096, 28098"
-------------------------------------------------------------------------
=========================================================================
"'/store/relval/CMSSW_11_0_0_pre6/RelValTTbar_13/MINIAODSIM/PU25ns_110X_upgrade2018_realistic_v3-v1/20000/F38B9A9F-4B4B-3D4B-8C9D-9A9B945194EF.root',
"
-------------------------------------------------------------------------
"'/store/relval/CMSSW_11_0_0_pre7/RelValTTbar_13/MINIAODSIM/PU25ns_110X_upgrade2018_realistic_v3-v1/20000/F38B9A9F-4B4B-3D4B-8C9D-9A9B945194EF.root',"
-------------------------------------------------------------------------
"'/store/relval/CMSSW_11_0_0_pre6/RelValTTbar_13/MINIAODSIM/PU25ns_110X_upgrade2018_realistic_v3-v1/20000/F38B9A9F-4B4B-3D4B-8C9D-9A9B945194EF.root',
"
-------------------------------------------------------------------------
"Recom
PRs: 28096, 28098"
-------------------------------------------------------------------------
=========================================================================
"### Pick a global tag that includes the desired JER-SFs
"
-------------------------------------------------------------------------
### Pick a global tag that includes the desired pt-dependent JER-SFs
-------------------------------------------------------------------------
"### Pick a global tag that includes the desired JER-SFs
"
-------------------------------------------------------------------------
"Recom
PRs: 28096, 28098"
-------------------------------------------------------------------------
=========================================================================
"### Example how to read the JER-SF from a db file
#from CondCore.DBCommon.CondDBSetup_cfi import *
#process.jer = cms.ESSource(""PoolDBESSource"",
#        CondDBSetup,
#        toGet = cms.VPSet(
#            # Resolution
#            cms.PSet(
#                record = cms.string('JetResolutionRcd'),
#                tag    = cms.string('JR_Autumn18_V7_MC_PtResolution_AK4PFchs'),
#                label  = cms.untracked.string('AK4PFchs_pt')
#                ),
#
#            # Scale factors
#            cms.PSet(
#                record = cms.string('JetResolutionScaleFactorRcd'),
#                tag    = cms.string('JR_Autumn18_V7_MC_SF_AK4PFchs'),
#                label  = cms.untracked.string('AK4PFchs')
#                ),
#            ),
#        connect = cms.string('sqlite:Autumn18_V7_MC.db')
#        )
#
#process.es_prefer_jer = cms.ESPrefer('PoolDBESSource', 'jer')
"
-------------------------------------------------------------------------
"```python
from Configuration.StandardSequences.Eras import eras
from Configuration.AlCa.GlobalTag import GlobalTag

process.load(""Configuration.StandardSequences.Services_cff"")
process.load(""JetMETCorrections.Modules.JetResolutionESProducer_cfi"")

process.slimmedJetsSmeared = cms.EDProducer('SmearedPATJetProducer',
    src = cms.InputTag('slimmedJets'),
    upOrDown = cms.int32(0),
    rho = cms.InputTag('fixedGridRhoFastjetAll'),
    resolutionFile = cms.FileInPath('JetMETCorrections/JetResolution/data/Autumn18_V7_MC/AK4PFchs_ptResolution.txt'),
    scaleFactorFiles = cms.VPSet(
        cms.PSet(
            sfName = cms.string('JR_Autumn18_V7_MC_SF_AK4PFchs'),
            sfType = cms.string('SimpleJetResolutionScaleFactor')
        )
    )
)

process.MINIAODSIMoutput_step = cms.EndPath(process.MINIAODSIMoutput)
```"
-------------------------------------------------------------------------
"### Example how to read the JER-SF from a db file
#from CondCore.DBCommon.CondDBSetup_cfi import *
#process.jer = cms.ESSource(""PoolDBESSource"",
#        CondDBSetup,
#        toGet = cms.VPSet(
#            # Resolution
#            cms.PSet(
#                record = cms.string('JetResolutionRcd'),
#                tag    = cms.string('JR_Autumn18_V7_MC_PtResolution_AK4PFchs'),
#                label  = cms.untracked.string('AK4PFchs_pt')
#                ),
#
#            # Scale factors
#            cms.PSet(
#                record = cms.string('JetResolutionScaleFactorRcd'),
#                tag    = cms.string('JR_Autumn18_V7_MC_SF_AK4PFchs'),
#                label  = cms.untracked.string('AK4PFchs')
#                ),
#            ),
#        connect = cms.string('sqlite:Autumn18_V7_MC.db')
#        )
#
#process.es_prefer_jer = cms.ESPrefer('PoolDBESSource', 'jer')
"
-------------------------------------------------------------------------
"Recom
PRs: 28096, 28098"
-------------------------------------------------------------------------
=========================================================================
"### Example how to check timing
### Example how to check memory
#process.SimpleMemoryCheck = cms.Service(""SimpleMemoryCheck"",ignoreTotal = cms.untracked.int32(1) )
"
-------------------------------------------------------------------------
"# process.SimpleMemoryCheck = cms.Service(""SimpleMemoryCheck"", ignoreTotal = cms.untracked.bool(True))"
-------------------------------------------------------------------------
"### Example how to check timing
### Example how to check memory
#process.SimpleMemoryCheck = cms.Service(""SimpleMemoryCheck"",ignoreTotal = cms.untracked.int32(1) )
"
-------------------------------------------------------------------------
"Recom
PRs: 28096, 28097"
-------------------------------------------------------------------------
=========================================================================
"'/store/relval/CMSSW_11_0_0_pre6/RelValTTbar_13/MINIAODSIM/PU25ns_110X_upgrade2018_realistic_v3-v1/20000/F38B9A9F-4B4B-3D4B-8C9D-9A9B945194EF.root',
"
-------------------------------------------------------------------------
- '/store/relval/CMSSW_11_0_0_pre6/RelValTTbar_13/MINIAODSIM/PU25ns_110X_upgrade2018_realistic_v3-v1/20000/F38B9A9F-4B4B-3D4B-8C9D-9A9B945194EF.root'
-------------------------------------------------------------------------
"'/store/relval/CMSSW_11_0_0_pre6/RelValTTbar_13/MINIAODSIM/PU25ns_110X_upgrade2018_realistic_v3-v1/20000/F38B9A9F-4B4B-3D4B-8C9D-9A9B945194EF.root',
"
-------------------------------------------------------------------------
"Recom
PRs: 28096, 28097"
-------------------------------------------------------------------------
=========================================================================
"### Pick a global tag that includes the desired JER-SFs
"
-------------------------------------------------------------------------
### Pick a global tag that includes the desired JER-SFs and phi-dependent JECs.
-------------------------------------------------------------------------
"### Pick a global tag that includes the desired JER-SFs
"
-------------------------------------------------------------------------
"Recom
PRs: 28096, 28097"
-------------------------------------------------------------------------
=========================================================================
"### Example how to read the JER-SF from a db file
#from CondCore.DBCommon.CondDBSetup_cfi import *
#process.jer = cms.ESSource(""PoolDBESSource"",
#        CondDBSetup,
#        toGet = cms.VPSet(
#            # Resolution
#            cms.PSet(
#                record = cms.string('JetResolutionRcd'),
#                tag    = cms.string('JR_Autumn18_V7_MC_PtResolution_AK4PFchs'),
#                label  = cms.untracked.string('AK4PFchs_pt')
#                ),
#
#            # Scale factors
#            cms.PSet(
#                record = cms.string('JetResolutionScaleFactorRcd'),
#                tag    = cms.string('JR_Autumn18_V7_MC_SF_AK4PFchs'),
#                label  = cms.untracked.string('AK4PFchs')
#                ),
#            ),
#        connect = cms.string('sqlite:Autumn18_V7_MC.db')
#        )
#
#process.es_prefer_jer = cms.ESPrefer('PoolDBESSource', 'jer')
"
-------------------------------------------------------------------------
"```python
from Configuration.AlCa.GlobalTag import GlobalTag
import FWCore.ParameterSet.Config as cms
from Configuration.StandardSequences.Eras import eras

process.GlobalTag = GlobalTag(process.GlobalTag, '106X_upgrade2018_realistic_v15', '')

# Example how to read the JER-SF from a db file
process.jer = cms.ESSource(""PoolDBESSource"",
    CondDBSetup,
    toGet = cms.VPSet(
        # Resolution
        cms.PSet(
            record = cms.string('JetResolutionRcd'),
            tag    = cms.string('JR_Autumn18_V7_MC_PtResolution_AK4PFchs'),
            label  = cms.string('AK4PFchs_pt')
        ),

        # Scale factors
        cms.PSet(
            record = cms.string('JetResolutionScaleFactorRcd'),
            tag    = cms.string('JR_Autumn18_V7_MC_SF_AK4PFchs'),
            label  = cms.string('AK4PFchs')
        ),
    ),
    connect = cms.string('sqlite:Autumn18_V7_MC.db')
)

process.es_prefer_jer = cms.ESPrefer('PoolDBESSource', 'jer')
```  "
-------------------------------------------------------------------------
"### Example how to read the JER-SF from a db file
#from CondCore.DBCommon.CondDBSetup_cfi import *
#process.jer = cms.ESSource(""PoolDBESSource"",
#        CondDBSetup,
#        toGet = cms.VPSet(
#            # Resolution
#            cms.PSet(
#                record = cms.string('JetResolutionRcd'),
#                tag    = cms.string('JR_Autumn18_V7_MC_PtResolution_AK4PFchs'),
#                label  = cms.untracked.string('AK4PFchs_pt')
#                ),
#
#            # Scale factors
#            cms.PSet(
#                record = cms.string('JetResolutionScaleFactorRcd'),
#                tag    = cms.string('JR_Autumn18_V7_MC_SF_AK4PFchs'),
#                label  = cms.untracked.string('AK4PFchs')
#                ),
#            ),
#        connect = cms.string('sqlite:Autumn18_V7_MC.db')
#        )
#
#process.es_prefer_jer = cms.ESPrefer('PoolDBESSource', 'jer')
"
-------------------------------------------------------------------------
"Recom
PRs: 28096, 28097"
-------------------------------------------------------------------------
=========================================================================
"from RecoJets.JetProducers.ak4PFJets_cfi import ak4PFJetsCS
"
-------------------------------------------------------------------------
"from RecoJets.JetProducers.ak4PFJets_cfi import ak4PFJetsCS, ak4PFJetsSK"
-------------------------------------------------------------------------
"from RecoJets.JetProducers.ak4PFJets_cfi import ak4PFJetsCS
"
-------------------------------------------------------------------------
"Recom
PRs: 27826, 28052"
-------------------------------------------------------------------------
=========================================================================
"setattr(proc, jetCollection, ak4PFJetsCS.clone(
    src                       = pfCand,
    doAreaFastjet             = True,
    jetPtMin                  = minPt,
    jetAlgorithm              = supportedJetAlgos[recoJetInfo.jetAlgo],
    rParam                    = recoJetInfo.jetSizeNr,
    useConstituentSubtraction = recoJetInfo.doCS,
    csRParam                  = 0.4 if recoJetInfo.doCS else -1.,
    csRho_EtaMax              = PFJetParameters.Rho_EtaMax if recoJetInfo.doCS else -1.,
    useExplicitGhosts         = recoJetInfo.doCS or recoJetInfo.jetPUMethod == ""sk"",
"
-------------------------------------------------------------------------
"setattr(proc, jetCollection, ak4PFJetsCS.clone(
    src                       = pfCand,
    doAreaFastjet             = True,
    jetPtMin                  = minPt,
    jetAlgorithm              = supportedJetAlgos[recoJetInfo.jetAlgo],
    rParam                    = recoJetInfo.jetSizeNr,
    useConstituentSubtraction = recoJetInfo.doCS,
    csRParam                  = 0.4 if recoJetInfo.doCS else -1.,
    csRho_EtaMax              = PFJetParameters.Rho_EtaMax if recoJetInfo.doCS else -1.,
    useExplicitGhosts         = recoJetInfo.jetPUMethod == ""sk"" or recoJetInfo.doCS,
   # Updated the order to set the 'useExplicitGhosts' property based on condition
   ))"
-------------------------------------------------------------------------
"setattr(proc, jetCollection, ak4PFJetsCS.clone(
    src                       = pfCand,
    doAreaFastjet             = True,
    jetPtMin                  = minPt,
    jetAlgorithm              = supportedJetAlgos[recoJetInfo.jetAlgo],
    rParam                    = recoJetInfo.jetSizeNr,
    useConstituentSubtraction = recoJetInfo.doCS,
    csRParam                  = 0.4 if recoJetInfo.doCS else -1.,
    csRho_EtaMax              = PFJetParameters.Rho_EtaMax if recoJetInfo.doCS else -1.,
    useExplicitGhosts         = recoJetInfo.doCS or recoJetInfo.jetPUMethod == ""sk"",
"
-------------------------------------------------------------------------
"Recom
PRs: 27826, 28052"
-------------------------------------------------------------------------
=========================================================================
"looseId        = looseJetId,
"
-------------------------------------------------------------------------
looseId = None
-------------------------------------------------------------------------
"looseId        = looseJetId,
"
-------------------------------------------------------------------------
"Recom
PRs: 27826, 28052"
-------------------------------------------------------------------------
=========================================================================
"jetCorrFactorsSource = [jetCorrFactors],
"
-------------------------------------------------------------------------
"jetCorrFactorsSource = cms.VInputTag(cms.InputTag(jetCorrFactors)),"
-------------------------------------------------------------------------
"jetCorrFactorsSource = [jetCorrFactors],
"
-------------------------------------------------------------------------
"Recom
PRs: 27826, 28052"
-------------------------------------------------------------------------
=========================================================================
"cleanupL1T = ('SimL1TCalorimeter'
              ,'SimL1TCalorimeterTask'
              ,'SimL1TMuonCommon'
              ,'SimL1TMuonCommonTask'
              ,'SimL1TMuon'
              ,'SimL1TMuonTask'
              ,'SimL1TechnicalTriggers'
              ,'SimL1TechnicalTriggersTask'
              ,'SimL1EmulatorCore'
              ,'SimL1EmulatorCoreTask'
              ,'ecalDigiSequence'
              ,'ecalDigiTask'
              ,'hcalDigiSequence'
              ,'hcalDigiTask'
              ,'calDigi'
              ,'calDigiTask'
              ,'me0TriggerPseudoDigis'
              ,'me0TriggerPseudoDigiTask'
              ,'hgcalTriggerPrimitives'
              ,'hgcalTriggerPrimitivesTask'
              ,'hgcalVFE'
              ,'hgcalVFEProducer'
              ,'hgcalBackEndLayer2'
              ,'hgcalBackEndLayer2Producer'
              ,'hgcalTowerMap'
              ,'hgcalTowerMapProducer'
              ,'hgcalConcentrator'
              ,'hgcalConcentratorProducer'
              ,'hgcalBackEndLayer1'
              ,'hgcalBackEndLayer1Producer'
              ,'hgcalTower'
              ,'hgcalTowerProducer'
              ,'hgcalTriggerGeometryESProducer')
for obj in cleanupL1T:
"
-------------------------------------------------------------------------
"cleanupL1T = ('SimL1TCalorimeter'
              ,'SimL1TCalorimeterTask'
              ,'SimL1TMuonCommon'
              ,'SimL1TMuonCommonTask'
              ,'SimL1TMuon'
              ,'SimL1TMuonTask'
              ,'SimL1TechnicalTriggers'
              ,'SimL1TechnicalTriggersTask'
              ,'SimL1EmulatorCore'
              ,'SimL1EmulatorCoreTask'
              ,'ecalDigiSequence'
              ,'ecalDigiTask'
              ,'hcalDigiSequence'
              ,'hcalDigiTask'
              ,'calDigi'
              ,'calDigiTask'
              ,'me0TriggerPseudoDigis'
              ,'me0TriggerPseudoDigiTask'
              ,'hgcalTriggerPrimitives'
              ,'hgcalTriggerPrimitivesTask'
              ,'hgcalVFE'
              ,'hgcalVFEProducer'
              ,'hgcalBackEndLayer2'
              ,'hgcalBackEndLayer2Producer'
              ,'hgcalTowerMap'
              ,'hgcalTowerMapProducer'
              ,'hgcalConcentrator'
              ,'hgcalConcentratorProducer'
              ,'hgcalBackEndLayer1'
              ,'hgcalBackEndLayer1Producer'
              ,'hgcalTower'
              ,'hgcalTowerProducer'
              ,'hgcalTriggerGeometryESProducer')

# special L1T cleanup
for obj in cleanupL1T:
    if hasattr(process, obj):
        delattr(process, obj)"
-------------------------------------------------------------------------
"cleanupL1T = ('SimL1TCalorimeter'
              ,'SimL1TCalorimeterTask'
              ,'SimL1TMuonCommon'
              ,'SimL1TMuonCommonTask'
              ,'SimL1TMuon'
              ,'SimL1TMuonTask'
              ,'SimL1TechnicalTriggers'
              ,'SimL1TechnicalTriggersTask'
              ,'SimL1EmulatorCore'
              ,'SimL1EmulatorCoreTask'
              ,'ecalDigiSequence'
              ,'ecalDigiTask'
              ,'hcalDigiSequence'
              ,'hcalDigiTask'
              ,'calDigi'
              ,'calDigiTask'
              ,'me0TriggerPseudoDigis'
              ,'me0TriggerPseudoDigiTask'
              ,'hgcalTriggerPrimitives'
              ,'hgcalTriggerPrimitivesTask'
              ,'hgcalVFE'
              ,'hgcalVFEProducer'
              ,'hgcalBackEndLayer2'
              ,'hgcalBackEndLayer2Producer'
              ,'hgcalTowerMap'
              ,'hgcalTowerMapProducer'
              ,'hgcalConcentrator'
              ,'hgcalConcentratorProducer'
              ,'hgcalBackEndLayer1'
              ,'hgcalBackEndLayer1Producer'
              ,'hgcalTower'
              ,'hgcalTowerProducer'
              ,'hgcalTriggerGeometryESProducer')
for obj in cleanupL1T:
"
-------------------------------------------------------------------------
"Recom
PRs: 28012, 28013"
-------------------------------------------------------------------------
=========================================================================
"tsk = Task(*self.taskLeaves)
if len(self.l) > 0:
    # why doesn't (sum(self.l) work?
    seq = self.l[0]
    return self._type(seq, tsk)
else:
    return self._type(tsk)
"
-------------------------------------------------------------------------
"if len(self.l) > 1:
    # why doesn't (sum(self.l) work?
    seq = self.l[1]
    return self._type(seq, tsk)
else:
    return self._type(tsk)"
-------------------------------------------------------------------------
"tsk = Task(*self.taskLeaves)
if len(self.l) > 0:
    # why doesn't (sum(self.l) work?
    seq = self.l[0]
    return self._type(seq, tsk)
else:
    return self._type(tsk)
"
-------------------------------------------------------------------------
"Recom
PRs: 28006, 28007"
-------------------------------------------------------------------------
=========================================================================
"t1 = Task(m1,m2,m3)
s1 = Sequence(t1)
s2 = s1.expandAndClone()
l[:] = []
s2.visit(namesVisitor)
self.assertEqual(l, [])
self.assertTrue(s2.dumpPython(None) == ""cms.Sequence(cms.Task(process.m1, process.m2, process.m3))\n"")
"
-------------------------------------------------------------------------
"t1 = Task(m1,m2,m3)
s1 = Sequence(t1)
s2 = s1.expandAndClone()
l[:] = []
namesVisitor = VisitorOnNames()
s2.visit(namesVisitor)
self.assertEqual(l, [])
self.assertTrue(s2.dumpPython(None) == ""cms.Sequence(cms.Task(process.m1, process.m2, process.m3))\n"")"
-------------------------------------------------------------------------
"t1 = Task(m1,m2,m3)
s1 = Sequence(t1)
s2 = s1.expandAndClone()
l[:] = []
s2.visit(namesVisitor)
self.assertEqual(l, [])
self.assertTrue(s2.dumpPython(None) == ""cms.Sequence(cms.Task(process.m1, process.m2, process.m3))\n"")
"
-------------------------------------------------------------------------
"Recom
PRs: 28006, 28007"
-------------------------------------------------------------------------
=========================================================================
"'run2_data_promptlike_HEfail' : '110X_dataRun2_PromptLike_HEfail_v5',
'run2_data_promptlike'    : '110X_dataRun2_PromptLike_v5',
'run2_data_promptlike_hi' : '110X_dataRun2_PromptLike_HI_v5',
"
-------------------------------------------------------------------------
"'run2_data_promptlike_HEfail' : '110X_dataRun2_PromptLike_HEfail_v5',
'run2_data_promptlike'    : '110X_dataRun2_PromptLike_v5',
'run2_data_promptlike_hi' : '110X_dataRun2_PromptLike_HI_v5',"
-------------------------------------------------------------------------
"'phase1_2018_realistic'    :  '106X_upgrade2018_realistic_v8',
'phase1_2018_realistic_HEfail' :  '106X_upgrade2018_realistic_HEfail_v8',
"
-------------------------------------------------------------------------
"Recom
PRs: 27923, 27934"
-------------------------------------------------------------------------
=========================================================================
"databases['v1']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hltdev_reader', '-s', 'ConvertMe!' )
databases['v1']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_r',         '-s', 'ConvertMe!' )
databases['v1']['adg']     = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gui_r',     '-s', 'ConvertMe!' )
databases['v2']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['adg']     = ( '-t', 'oracle', '-h', 'cmsonr1-adg1-s.cern.ch', '-d', 'cms_orcon_adg.cern.ch', '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
"
-------------------------------------------------------------------------
"databases['v1']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hltdev_reader', '-s', 'ConvertMe!' )
databases['v1']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_r',         '-s', 'ConvertMe!' )
databases['v1']['adg']     = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gui_r',     '-s', 'ConvertMe!' )
databases['v2']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['adg']     = ( '-t', 'oracle', '-h', 'cmsonr1-adg1-s.cern.ch', '-d', 'cms_orcon_adg.cern.ch', '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )"
-------------------------------------------------------------------------
"databases['v1']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hltdev_reader', '-s', 'ConvertMe!' )
databases['v1']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_r',         '-s', 'ConvertMe!' )
databases['v1']['adg']     = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gui_r',     '-s', 'ConvertMe!' )
databases['v2']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['adg']     = ( '-t', 'oracle', '-h', 'cmsonr1-adg1-s.cern.ch', '-d', 'cms_orcon_adg.cern.ch', '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
"
-------------------------------------------------------------------------
"Recom
PRs: 27756, 27760"
-------------------------------------------------------------------------
=========================================================================
"databases['v1']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hltdev_reader', '-s', 'ConvertMe!' )
databases['v1']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_r',         '-s', 'ConvertMe!' )
databases['v1']['adg']     = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gui_r',     '-s', 'ConvertMe!' )
databases['v2']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['adg']     = ( '-t', 'oracle', '-h', 'cmsonr1-adg1-s.cern.ch', '-d', 'cms_orcon_adg.cern.ch', '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
"
-------------------------------------------------------------------------
"```python
# Update the database host names used by the ConfDB offline converter to access the ADG copy of the online database
# Existing database configurations
databases['v1']['hltdev']  = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hltdev_reader', '-s', 'ConvertMe!' )  # for backwards compatibility
databases['v1']['orcoff']  = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gui_r',     '-s', 'ConvertMe!' )  # for backwards compatibility
databases['v2']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['adg']     = ( '-t', 'oracle', '-h', 'cmsonr1-adg1-s.cern.ch', '-d', 'cms_orcon_adg.cern.ch', '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
```"
-------------------------------------------------------------------------
"databases['v1']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hltdev_reader', '-s', 'ConvertMe!' )
databases['v1']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_r',         '-s', 'ConvertMe!' )
databases['v1']['adg']     = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gui_r',     '-s', 'ConvertMe!' )
databases['v2']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['adg']     = ( '-t', 'oracle', '-h', 'cmsonr1-adg1-s.cern.ch', '-d', 'cms_orcon_adg.cern.ch', '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
"
-------------------------------------------------------------------------
"Recom
PRs: 27756, 27759"
-------------------------------------------------------------------------
=========================================================================
"databases['v1']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hltdev_reader', '-s', 'ConvertMe!' )
databases['v1']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_r',         '-s', 'ConvertMe!' )
databases['v1']['adg']     = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gui_r',     '-s', 'ConvertMe!' )
databases['v2']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['adg']     = ( '-t', 'oracle', '-h', 'cmsonr1-adg1-s.cern.ch', '-d', 'cms_orcon_adg.cern.ch', '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
"
-------------------------------------------------------------------------
"databases['v1']['offline']  = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',            '-d', 'cms_cond.cern.ch',      '-u', 'cms_hltdev_reader', '-s', 'ConvertMe!' )
databases['v1']['online']   = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',                '-d', 'cms_rcms.cern.ch',        '-u', 'cms_hlt_r',         '-s', 'ConvertMe!' )
databases['v1']['adg']      = ( '-t', 'oracle', '-h', 'cmsr1-adg1-s.cern.ch', '-d', 'cms_orcon_adg.cern.ch', '-u', 'cms_hlt_r',         '-s', 'ConvertMe!' )
databases['v2']['offline']  = ( '-t', 'oracle', '-h', 'cmsr1-adg1-s.cern.ch', '-d', 'cms_orcon_adg.cern.ch', '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['online']   = ( '-t', 'oracle', '-h', 'cmsonr1-adg1-s.cern.ch', '-d', 'cms_orcon_adg.cern.ch', '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['adg']      = ( '-t', 'oracle', '-h', 'cmsonr1-adg1-s.cern.ch', '-d', 'cms_orcon_adg.cern.ch', '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )"
-------------------------------------------------------------------------
"databases['v1']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hltdev_reader', '-s', 'ConvertMe!' )
databases['v1']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_r',         '-s', 'ConvertMe!' )
databases['v1']['adg']     = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gui_r',     '-s', 'ConvertMe!' )
databases['v2']['offline'] = ( '-t', 'oracle', '-h', 'cmsr1-s.cern.ch',        '-d', 'cms_cond.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['online']  = ( '-t', 'oracle', '-h', 'cmsonr1-s.cms',          '-d', 'cms_rcms.cern.ch',      '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
databases['v2']['adg']     = ( '-t', 'oracle', '-h', 'cmsonr1-adg1-s.cern.ch', '-d', 'cms_orcon_adg.cern.ch', '-u', 'cms_hlt_gdr_r',     '-s', 'ConvertMe!' )
"
-------------------------------------------------------------------------
"Recom
PRs: 27756, 27757"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '110X_dataRun2_v4',
'run2_data'         :   '110X_dataRun2_v4',
'run2_data_relval'  :   '110X_dataRun2_relval_v4',
"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v4',
'run2_data'         :   '110X_dataRun2_v4',
'run2_data_relval'  :   '110X_dataRun2_relval_v4',
'run2_data_promptlike_HEfail' : '110X_dataRun2_PromptLike_HEfail_Candidate_2019_08_02_16_55_52',"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v20',
'run2_data'         :   '106X_dataRun2_v20',
'run2_data_relval'  :   '106X_dataRun2_relval_v19',
"
-------------------------------------------------------------------------
"Recom
PRs: 27733, 27734"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '110X_dataRun2_v5',
'run2_data'         :   '110X_dataRun2_v5',
'run2_data_relval'  :   '110X_dataRun2_relval_v5',
'run2_data_promptlike_HEfail' : '110X_dataRun2_PromptLike_HEfail_v3',
'run2_data_promptlike'    : '110X_dataRun2_PromptLike_v3',
'run2_data_promptlike_hi' : '110X_dataRun2_PromptLike_HI_v3',
"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v5',
'run2_data'         :   '110X_dataRun2_v5',
'run2_data_relval'  :   '110X_dataRun2_relval_v5',
'run2_data_promptlike_HEfail' : '110X_dataRun2_PromptLike_HEfail_v3',
'run2_data_promptlike'    : '110X_dataRun2_PromptLike_v3',
'run2_data_promptlike_hi' : '110X_dataRun2_PromptLike_HI_v3',"
-------------------------------------------------------------------------
"'phase1_2021_realistic'    : '106X_upgrade2021_realistic_v9', # GT containing realistic conditions for Phase1 2021
"
-------------------------------------------------------------------------
"Recom
PRs: 27644, 27651"
-------------------------------------------------------------------------
=========================================================================
"'run2_design'       :   '110X_mcRun2_design_v2',
'run2_mc'           :   '110X_mcRun2_asymptotic_v2',
'run2_mc_cosmics'   :   '110X_mcRun2cosmics_startup_deco_v2',
'run2_mc_pa'        :   '110X_mcRun2_pA_v2',
"
-------------------------------------------------------------------------
"'run2_design'          :   '110X_mcRun2_design_v6',
'run2_mc'              :   '110X_mcRun2_asymptotic_v5',
'run2_mc_cosmics'      :   '110X_mcRun2cosmics_startup_deco_v3',
'run2_mc_pa'           :   '110X_mcRun2_pA_v5',"
-------------------------------------------------------------------------
"'run2_design'       :   '106X_mcRun2_design_v6',
'run2_mc'           :   '106X_mcRun2_asymptotic_v6',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_startup_deco_v3',
'run2_mc_pa'        :   '106X_mcRun2_pA_v5',
"
-------------------------------------------------------------------------
"Recom
PRs: 27600, 27606"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '110X_dataRun2_v2',
'run2_data'         :   '110X_dataRun2_v2',
'run2_data_relval'  :   '110X_dataRun2_relval_v2',
"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v18',
'run2_data'         :   '110X_dataRun2_v18',
'run2_data_relval'  :   '110X_dataRun2_relval_v18',"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v18',
'run2_data'         :   '106X_dataRun2_v18',
'run2_data_relval'  :   '106X_dataRun2_relval_v17',
"
-------------------------------------------------------------------------
"Recom
PRs: 27604, 27605"
-------------------------------------------------------------------------
=========================================================================
"self.promptCustoms = [ 'Configuration/DataProcessing/RecoTLR.customisePostEra_Run3' ]
self.expressCustoms = [ 'Configuration/DataProcessing/RecoTLR.customisePostEra_Run3_express_trackingOnly' ]
self.visCustoms = [ 'Configuration/DataProcessing/RecoTLR.customisePostEra_Run3' ]
"
-------------------------------------------------------------------------
"self.promptCustoms = [ 'RecoTLR.customisePostEra_Run3' ]
self.expressCustoms = [ 'RecoTLR.customisePostEra_Run3_express_trackingOnly' ]
self.visCustoms = [ 'RecoTLR.customisePostEra_Run3' ]"
-------------------------------------------------------------------------
"self.promptCustoms = [ 'Configuration/DataProcessing/RecoTLR.customisePostEra_Run3' ]
self.expressCustoms = [ 'Configuration/DataProcessing/RecoTLR.customisePostEra_Run3_express_trackingOnly' ]
self.visCustoms = [ 'Configuration/DataProcessing/RecoTLR.customisePostEra_Run3' ]
"
-------------------------------------------------------------------------
"Recom
PRs: 27536, 27537"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2017_realistic'    :  '106X_mc2017_realistic_v7',
"
-------------------------------------------------------------------------
"'phase1_2017_realistic'    :  '106X_mc2017cosmics_realistic_deco_v3',"
-------------------------------------------------------------------------
"'phase1_2017_realistic'    :  '106X_mc2017_realistic_v7',
"
-------------------------------------------------------------------------
"Recom
PRs: 27342, 27420"
-------------------------------------------------------------------------
=========================================================================
"if not hasattr(self.process, self.updatedTauName):
    embedID = self.cms.EDProducer(""PATTauIDEmbedder"",
       src = self.cms.InputTag('slimmedTaus'),
       tauIDSources = tauIDSources
    )
    setattr(self.process, self.updatedTauName, embedID)
else: #assume same type
    tauIDSources = self.cms.PSet(
        getattr(self.process, self.updatedTauName).tauIDSources,
        tauIDSources)
    getattr(self.process, self.updatedTauName).tauIDSources = tauIDSources
"
-------------------------------------------------------------------------
"if not hasattr(self.process, self.updatedTauName):
    embedID = self.cms.EDProducer(""PATTauIDEmbedder"",
       src = self.cms.InputTag('slimmedTausNewID'),
       tauIDSources = tauIDSources
    )
    setattr(self.process, self.updatedTauName, embedID)
else: #assume same type
    tauIDSources = self.cms.PSet(
        getattr(self.process, self.updatedTauName).tauIDSources,
        tauIDSources)
    getattr(self.process, self.updatedTauName).tauIDSources = tauIDSources"
-------------------------------------------------------------------------
"if not hasattr(self.process, self.updatedTauName):
    embedID = self.cms.EDProducer(""PATTauIDEmbedder"",
       src = self.cms.InputTag('slimmedTaus'),
       tauIDSources = tauIDSources
    )
    setattr(self.process, self.updatedTauName, embedID)
else: #assume same type
    tauIDSources = self.cms.PSet(
        getattr(self.process, self.updatedTauName).tauIDSources,
        tauIDSources)
    getattr(self.process, self.updatedTauName).tauIDSources = tauIDSources
"
-------------------------------------------------------------------------
"Recom
PRs: 27397, 27398"
-------------------------------------------------------------------------
=========================================================================
"Plot1D('idDeepTau2017v2VSe', 'idDeepTau2017v2VSe', 256, -0.5, 255.5, 'byDeepTau2017v2VSe ID working points (deepTau2017v2): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight'),
Plot1D('idDeepTau2017v2VSmu', 'idDeepTau2017v2VSmu', 16, -0.5, 15.5, 'byDeepTau2017v2VSmu ID working points (deepTau2017v2): bitmask 1 = VLoose, 2 = Loose, 4 = Medium, 8 = Tight'),
Plot1D('idDeepTau2017v2VSjet', 'idDeepTau2017v2VSjet', 256, -0.5, 255.5, 'byDeepTau2017v2VSjet ID working points (deepTau2017v2): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight'),
"
-------------------------------------------------------------------------
"nanoDQM = DQMEDAnalyzer(""NanoAODDQM"",
                 Plot1D('idDeepTau2017v2VSe', 'idDeepTau2017v2VSe', 256, -0.5, 255.5, 'byDeepTau2017v2VSe ID working points (deepTau2017v2): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight'),
                 Plot1D('idDeepTau2017v2VSmu', 'idDeepTau2017v2VSmu', 16, -0.5, 15.5, 'byDeepTau2017v2VSmu ID working points (deepTau2017v2): bitmask 1 = VLoose, 2 = Loose, 4 = Medium, 8 = Tight'),
                 Plot1D('idDeepTau2017v2VSjet', 'idDeepTau2017v2VSjet', 256, -0.5, 255.5, 'byDeepTau2017v2VSjet ID working points (deepTau2017v2): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight'),
                 NoPlot('jetIdx'),
                 Plot1D('leadTkDeltaEta', 'leadTkDeltaEta', 20, -0.1, 0.1, 'eta of the leading track, minus tau eta'),
                 Plot1D('leadTkDeltaPhi', 'leadTkDeltaPhi', 20, -0.1, 0.1, 'phi of the leading track, minus tau phi'),"
-------------------------------------------------------------------------
"Plot1D('idDeepTau2017v2VSe', 'idDeepTau2017v2VSe', 256, -0.5, 255.5, 'byDeepTau2017v2VSe ID working points (deepTau2017v2): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight'),
Plot1D('idDeepTau2017v2VSmu', 'idDeepTau2017v2VSmu', 16, -0.5, 15.5, 'byDeepTau2017v2VSmu ID working points (deepTau2017v2): bitmask 1 = VLoose, 2 = Loose, 4 = Medium, 8 = Tight'),
Plot1D('idDeepTau2017v2VSjet', 'idDeepTau2017v2VSjet', 256, -0.5, 255.5, 'byDeepTau2017v2VSjet ID working points (deepTau2017v2): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight'),
"
-------------------------------------------------------------------------
"Recom
PRs: 27226, 27227"
-------------------------------------------------------------------------
=========================================================================
"Plot1D('rawDeepTau2017v2VSe', 'rawDeepTau2017v2VSe', 20, 0, 1, 'byDeepTau2017v2VSe raw output discriminator (deepTau2017v2)'),
Plot1D('rawDeepTau2017v2VSmu', 'rawDeepTau2017v2VSmu', 20, 0, 1, 'byDeepTau2017v2VSmu raw output discriminator (deepTau2017v2)'),
Plot1D('rawDeepTau2017v2VSjet', 'rawDeepTau2017v2VSjet', 20, 0, 1, 'byDeepTau2017v2VSjet raw output discriminator (deepTau2017v2)'),
"
-------------------------------------------------------------------------
"Plot1D('rawDeepTau2017v2VSe', 'rawDeepTau2017v2VSe', 20, 0, 1, 'byDeepTau2017v2VSe raw output discriminator (deepTau2017v2)'),
Plot1D('rawDeepTau2017v2VSmu', 'rawDeepTau2017v2VSmu', 20, 0, 1, 'byDeepTau2017v2VSmu raw output discriminator (deepTau2017v2)'),
Plot1D('rawDeepTau2017v2VSjet', 'rawDeepTau2017v2VSjet', 20, 0, 1, 'byDeepTau2017v2VSjet raw output discriminator (deepTau2017v2)'),"
-------------------------------------------------------------------------
"Plot1D('rawDeepTau2017v2VSe', 'rawDeepTau2017v2VSe', 20, 0, 1, 'byDeepTau2017v2VSe raw output discriminator (deepTau2017v2)'),
Plot1D('rawDeepTau2017v2VSmu', 'rawDeepTau2017v2VSmu', 20, 0, 1, 'byDeepTau2017v2VSmu raw output discriminator (deepTau2017v2)'),
Plot1D('rawDeepTau2017v2VSjet', 'rawDeepTau2017v2VSjet', 20, 0, 1, 'byDeepTau2017v2VSjet raw output discriminator (deepTau2017v2)'),
"
-------------------------------------------------------------------------
"Recom
PRs: 27226, 27227"
-------------------------------------------------------------------------
=========================================================================
"cut = cms.string(""pt > 18 && tauID('decayModeFindingNewDMs') && (tauID('byLooseCombinedIsolationDeltaBetaCorr3Hits') || tauID('byVLooseIsolationMVArun2v1DBoldDMwLT2015') || tauID('byVLooseIsolationMVArun2v1DBnewDMwLT') || tauID('byVLooseIsolationMVArun2v1DBdR03oldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBnewDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBdR03oldDMwLT2017v2') || tauID('byVVVLooseDeepTau2017v2VSjet'))"")
 Configuration.Eras.Modifier_run2_nanoAOD_94X2016_cff import run2_nanoAOD_94X2016
 Configuration.Eras.Modifier_run2_nanoAOD_94XMiniAODv2_cff import run2_nanoAOD_94XMiniAODv2
 Configuration.Eras.Modifier_run2_nanoAOD_102Xv1_cff import run2_nanoAOD_102Xv1
era in [run2_nanoAOD_94X2016,run2_nanoAOD_94XMiniAODv2,run2_nanoAOD_102Xv1]:
era.toModify(finalTaus,
             cut = cms.string(""pt > 18 && tauID('decayModeFindingNewDMs') && (tauID('byLooseCombinedIsolationDeltaBetaCorr3Hits') || tauID('byVLooseIsolationMVArun2v1DBoldDMwLT2015') || tauID('byVLooseIsolationMVArun2v1DBnewDMwLT') || tauID('byVLooseIsolationMVArun2v1DBdR03oldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBnewDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBdR03oldDMwLT2017v2'))"")
)
"
-------------------------------------------------------------------------
"finalTaus = cms.EDFilter(""PATTauRefSelector"",
     src = cms.InputTag(""slimmedTausUpdated""),
     cut = cms.string(""pt > 18 && tauID('decayModeFindingNewDMs') && (tauID('byLooseCombinedIsolationDeltaBetaCorr3Hits') || tauID('byVLooseIsolationMVArun2v1DBoldDMwLT2015') || tauID('byVLooseIsolationMVArun2v1DBnewDMwLT') || tauID('byVLooseIsolationMVArun2v1DBdR03oldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBnewDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBdR03oldDMwLT2017v2'))"")
)

from Configuration.Eras.Modifier_run2_nanoAOD_94X2016_cff import run2_nanoAOD_94X2016
from Configuration.Eras.Modifier_run2_nanoAOD_94XMiniAODv2_cff import run2_nanoAOD_94XMiniAODv2
from Configuration.Eras.Modifier_run2_nanoAOD_102Xv1_cff import run2_nanoAOD_102Xv1

for era in [run2_nanoAOD_94X2016, run2_nanoAOD_94XMiniAODv2, run2_nanoAOD_102Xv1]:
     era.toModify(finalTaus,
                cut = cms.string(""pt > 18 && tauID('decayModeFindingNewDMs') && (tauID('byLooseCombinedIsolationDeltaBetaCorr3Hits') || tauID('byVLooseIsolationMVArun2v1DBoldDMwLT2015') || tauID('byVLooseIsolationMVArun2v1DBnewDMwLT') || tauID('byVLooseIsolationMVArun2v1DBdR03oldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBnewDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBdR03oldDMwLT2017v2'))"")
     )"
-------------------------------------------------------------------------
"cut = cms.string(""pt > 18 && tauID('decayModeFindingNewDMs') && (tauID('byLooseCombinedIsolationDeltaBetaCorr3Hits') || tauID('byVLooseIsolationMVArun2v1DBoldDMwLT2015') || tauID('byVLooseIsolationMVArun2v1DBnewDMwLT') || tauID('byVLooseIsolationMVArun2v1DBdR03oldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBnewDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBdR03oldDMwLT2017v2') || tauID('byVVVLooseDeepTau2017v2VSjet'))"")
 Configuration.Eras.Modifier_run2_nanoAOD_94X2016_cff import run2_nanoAOD_94X2016
 Configuration.Eras.Modifier_run2_nanoAOD_94XMiniAODv2_cff import run2_nanoAOD_94XMiniAODv2
 Configuration.Eras.Modifier_run2_nanoAOD_102Xv1_cff import run2_nanoAOD_102Xv1
era in [run2_nanoAOD_94X2016,run2_nanoAOD_94XMiniAODv2,run2_nanoAOD_102Xv1]:
era.toModify(finalTaus,
             cut = cms.string(""pt > 18 && tauID('decayModeFindingNewDMs') && (tauID('byLooseCombinedIsolationDeltaBetaCorr3Hits') || tauID('byVLooseIsolationMVArun2v1DBoldDMwLT2015') || tauID('byVLooseIsolationMVArun2v1DBnewDMwLT') || tauID('byVLooseIsolationMVArun2v1DBdR03oldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT') || tauID('byVVLooseIsolationMVArun2v1DBoldDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBnewDMwLT2017v2') || tauID('byVVLooseIsolationMVArun2v1DBdR03oldDMwLT2017v2'))"")
)
"
-------------------------------------------------------------------------
"Recom
PRs: 27226, 27227"
-------------------------------------------------------------------------
=========================================================================
"def _tauId4WPMask(pattern,doc):
    return _tauIdWPMask(pattern, choices=(""VLoose"", ""Loose"", ""Medium"", ""Tight""), doc=doc)
def _tauId8WPMask(pattern,doc):
    return _tauIdWPMask(pattern,choices=(""VVVLoose"",""VVLoose"",""VLoose"",""Loose"",""Medium"",""Tight"",""VTight"",""VVTight""),doc=doc)
"
-------------------------------------------------------------------------
"def _tauId4WPMask(pattern,doc):
    return _tauIdWPMask(pattern,choices=(""VLoose"",""Loose"",""Medium"",""Tight""),doc=doc)
 def _tauId8WPMask(pattern,doc):
     return _tauIdWPMask(pattern,choices=(""VVVLoose"",""VVLoose"",""VLoose"",""Loose"",""Medium"",""Tight"",""VTight"",""VVTight""),doc=doc)"
-------------------------------------------------------------------------
"def _tauId4WPMask(pattern,doc):
    return _tauIdWPMask(pattern, choices=(""VLoose"", ""Loose"", ""Medium"", ""Tight""), doc=doc)
def _tauId8WPMask(pattern,doc):
    return _tauIdWPMask(pattern,choices=(""VVVLoose"",""VVLoose"",""VLoose"",""Loose"",""Medium"",""Tight"",""VTight"",""VVTight""),doc=doc)
"
-------------------------------------------------------------------------
"Recom
PRs: 27226, 27227"
-------------------------------------------------------------------------
=========================================================================
"_deepTauVars2017v2 = cms.PSet(
    rawDeepTau2017v2VSe = Var(""tauID('byDeepTau2017v2VSeraw')"", float, doc=""byDeepTau2017v2VSe raw output discriminator (deepTau2017v2)"", precision=10),
    rawDeepTau2017v2VSmu = Var(""tauID('byDeepTau2017v2VSmuraw')"", float, doc=""byDeepTau2017v2VSmu raw output discriminator (deepTau2017v2)"", precision=10),
    rawDeepTau2017v2VSjet = Var(""tauID('byDeepTau2017v2VSjetraw')"", float, doc=""byDeepTau2017v2VSjet raw output discriminator (deepTau2017v2)"", precision=10),
    idDeepTau2017v2VSe = _tauId8WPMask(""by%sDeepTau2017v2VSe"", doc=""byDeepTau2017v2VSe ID working points (deepTau2017v2)""),
    idDeepTau2017v2VSmu = _tauId4WPMask(""by%sDeepTau2017v2VSmu"", doc=""byDeepTau2017v2VSmu ID working points (deepTau2017v2)""),
    idDeepTau2017v2VSjet = _tauId8WPMask(""by%sDeepTau2017v2VSjet"", doc=""byDeepTau2017v2VSjet ID working points (deepTau2017v2)""),
)
    _mvaIsoVars2017v2,
    _deepTauVars2017v2
"
-------------------------------------------------------------------------
"_mvaDeepTauVars2017v2 = cms.PSet(
    rawDeepTau2017v2VSe = Var(""tauID('byDeepTau2017v2VSeraw')"", float, doc=""byDeepTau2017v2VSe raw output discriminator (deepTau2017v2)"", precision=10),
    rawDeepTau2017v2VSmu = Var(""tauID('byDeepTau2017v2VSmuraw')"", float, doc=""byDeepTau2017v2VSmu raw output discriminator (deepTau2017v2)"", precision=10),
    rawDeepTau2017v2VSjet = Var(""tauID('byDeepTau2017v2VSjetraw')"", float, doc=""byDeepTau2017v2VSjet raw output discriminator (deepTau2017v2)"", precision=10),
    idDeepTau2017v2VSe = _tauId8WPMask(""by%sDeepTau2017v2VSe"", doc=""byDeepTau2017v2VSe ID working points (deepTau2017v2)""),
    idDeepTau2017v2VSmu = _tauId4WPMask(""by%sDeepTau2017v2VSmu"", doc=""byDeepTau2017v2VSmu ID working points (deepTau2017v2)""),
    idDeepTau2017v2VSjet = _tauId8WPMask(""by%sDeepTau2017v2VSjet"", doc=""byDeepTau2017v2VSjet ID working points (deepTau2017v2)""),
)
_mvaIsoVars2017v2 = cms.PSet(
    # existing content
)
_deepTauVars2017v2 = cms.PSet(
    # existing content
)"
-------------------------------------------------------------------------
"_deepTauVars2017v2 = cms.PSet(
    rawDeepTau2017v2VSe = Var(""tauID('byDeepTau2017v2VSeraw')"", float, doc=""byDeepTau2017v2VSe raw output discriminator (deepTau2017v2)"", precision=10),
    rawDeepTau2017v2VSmu = Var(""tauID('byDeepTau2017v2VSmuraw')"", float, doc=""byDeepTau2017v2VSmu raw output discriminator (deepTau2017v2)"", precision=10),
    rawDeepTau2017v2VSjet = Var(""tauID('byDeepTau2017v2VSjetraw')"", float, doc=""byDeepTau2017v2VSjet raw output discriminator (deepTau2017v2)"", precision=10),
    idDeepTau2017v2VSe = _tauId8WPMask(""by%sDeepTau2017v2VSe"", doc=""byDeepTau2017v2VSe ID working points (deepTau2017v2)""),
    idDeepTau2017v2VSmu = _tauId4WPMask(""by%sDeepTau2017v2VSmu"", doc=""byDeepTau2017v2VSmu ID working points (deepTau2017v2)""),
    idDeepTau2017v2VSjet = _tauId8WPMask(""by%sDeepTau2017v2VSjet"", doc=""byDeepTau2017v2VSjet ID working points (deepTau2017v2)""),
)
    _mvaIsoVars2017v2,
    _deepTauVars2017v2
"
-------------------------------------------------------------------------
"Recom
PRs: 27226, 27227"
-------------------------------------------------------------------------
=========================================================================
"for era in [run2_nanoAOD_94XMiniAODv1,run2_nanoAOD_94X2016,run2_nanoAOD_94XMiniAODv2,run2_nanoAOD_102Xv1]:
    era.toModify(tauTable.variables,
                 rawDeepTau2017v2VSe = None,
                 rawDeepTau2017v2VSmu = None,
                 rawDeepTau2017v2VSjet = None,
                 idDeepTau2017v2VSe = None,
                 idDeepTau2017v2VSmu = None,
                 idDeepTau2017v2VSjet = None
    )
"
-------------------------------------------------------------------------
"from PhysicsTools.NanoAOD.common_cff import *
from PhysicsTools.NanoAOD.taus_updatedMVAIds_cff import *
from PhysicsTools.JetMCAlgos.TauGenJets_cfi import *
from Configuration.Eras.Modifier_run2_miniAOD_80XLegacy_cff import *
from PhysicsTools.JetMCAlgos.TauGenJetsDecayModeSelectorAllHadrons_cfi import *
from Configuration.Eras.Modifier_run2_nanoAOD_94XMiniAODv1_cff import *

# Modify tauTable variables for stability
tauTable.toModify(tauTable.variables,
                  rawDeepTau2017v2VSe = None,
                  rawDeepTau2017v2VSmu = None,
                  rawDeepTau2017v2VSjet = None,
                  idDeepTau2017v2VSe = None,
                  idDeepTau2017v2VSmu = None,
                  idDeepTau2017v2VSjet = None
)"
-------------------------------------------------------------------------
"for era in [run2_nanoAOD_94XMiniAODv1,run2_nanoAOD_94X2016,run2_nanoAOD_94XMiniAODv2,run2_nanoAOD_102Xv1]:
    era.toModify(tauTable.variables,
                 rawDeepTau2017v2VSe = None,
                 rawDeepTau2017v2VSmu = None,
                 rawDeepTau2017v2VSjet = None,
                 idDeepTau2017v2VSe = None,
                 idDeepTau2017v2VSmu = None,
                 idDeepTau2017v2VSjet = None
    )
"
-------------------------------------------------------------------------
"Recom
PRs: 27226, 27227"
-------------------------------------------------------------------------
=========================================================================
"import six
"
-------------------------------------------------------------------------
"from RecoTauTag.RecoTau.TauDiscriminatorTools import noPrediscriminants
from RecoTauTag.RecoTau.PATTauDiscriminationByMVAIsolationRun2_cff import patDiscriminationByIsolationMVArun2v1raw, patDiscriminationByIsolationMVArun2v1VLoose
import os
import re"
-------------------------------------------------------------------------
"import six
"
-------------------------------------------------------------------------
"Recom
PRs: 27189, 27209"
-------------------------------------------------------------------------
=========================================================================
"for target,points in six.iteritems(workingPoints_):
    for point,cut in six.iteritems(points):
"
-------------------------------------------------------------------------
"```python
import six
for target, points in six.iteritems(workingPoints_):
    for point, cut in six.iteritems(points):
``` "
-------------------------------------------------------------------------
"for target,points in six.iteritems(workingPoints_):
    for point,cut in six.iteritems(points):
"
-------------------------------------------------------------------------
"Recom
PRs: 27189, 27209"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2018_realistic_hi' :  '106X_upgrade2018_realistic_HI_v4',
"
-------------------------------------------------------------------------
"'phase1_2018_realistic_hi' :  '106X_upgrade2018_realistic_HI_v4',  "
-------------------------------------------------------------------------
"'phase1_2018_realistic_hi' :  '106X_upgrade2018_realistic_HI_v4',
"
-------------------------------------------------------------------------
"Recom
PRs: 27089, 27205"
-------------------------------------------------------------------------
=========================================================================
"('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event allocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event allocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event allocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event deallocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event deallocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit allocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit allocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit allocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit deallocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit deallocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit deallocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO allocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO allocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO allocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO deallocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO deallocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process RECO allocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process RECO allocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process RECO'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process DQM allocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process DQM deallocated'),
"
-------------------------------------------------------------------------
"('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event allocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event deallocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit allocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit deallocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO allocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO deallocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process RECO allocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process RECO')"
-------------------------------------------------------------------------
"('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event allocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event allocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event allocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event deallocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event deallocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit allocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit allocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit allocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit deallocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit deallocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'explicit deallocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO allocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO allocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO allocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO deallocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO deallocated_VsPU'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process reRECO'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process RECO allocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process RECO allocated_VsScalLumi'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process RECO'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process DQM allocated'),
('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process DQM deallocated'),
"
-------------------------------------------------------------------------
"Recom
PRs: 27198, 27202"
-------------------------------------------------------------------------
=========================================================================
"addMixingScenario(""2018_25ns_UltraLegacy_PoissonOOTPU"",{'file': 'SimGeneral.MixingModule.mix_2018_25ns_UltraLegacy_PoissonOOTPU_cfi'})
"
-------------------------------------------------------------------------
"addMixingScenario(""2018_25ns_UltraLegacy_PoissonOOTPU"",{'file': 'SimGeneral.MixingModule.mix_probFunction_25ns_PoissonOOTPU_cfi.nbPileupEvents')"
-------------------------------------------------------------------------
"addMixingScenario(""2018_25ns_UltraLegacy_PoissonOOTPU"",{'file': 'SimGeneral.MixingModule.mix_2018_25ns_UltraLegacy_PoissonOOTPU_cfi'})
"
-------------------------------------------------------------------------
"Recom
PRs: 27035, 27200"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
from SimGeneral.MixingModule.mix_probFunction_25ns_PoissonOOTPU_cfi import *
mix.input.nbPileupEvents.probFunctionVariable = cms.vint32(
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
    10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
    20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
    30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
    40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
    50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
    60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
    70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
    80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
    90, 91, 92, 93, 94, 95, 96, 97, 98
    )
mix.input.nbPileupEvents.probValue = cms.vdouble(
    8.89374611122e-07, 1.1777062868e-05, 3.99725585118e-05, 0.000129888015252, 0.000265224848687,
    0.000313088635109, 0.000353781668514, 0.000508787237162, 0.000873670065767, 0.00147166880932,
    0.00228230649018, 0.00330375581273, 0.00466047608406, 0.00624959203029, 0.00810375867901,
    0.010306521821, 0.0129512453978, 0.0160303925502, 0.0192913204592, 0.0223108613632,
    0.0249798930986, 0.0273973789867, 0.0294402350483, 0.031029854302, 0.0324583524255,
    0.0338264469857, 0.0351267479019, 0.0360320204259, 0.0367489568401, 0.0374133183052,
    0.0380352633799, 0.0386200967002, 0.039124376968, 0.0394201612616, 0.0394673457109,
    0.0391705388069, 0.0384758587461, 0.0372984548399, 0.0356497876549, 0.0334655175178,
    0.030823567063, 0.0278340752408, 0.0246009685048, 0.0212676009273, 0.0180250593982,
    0.0149129830776, 0.0120582333486, 0.00953400069415, 0.00738546929512, 0.00563442079939,
    0.00422052915668, 0.00312446316347, 0.00228717533955, 0.00164064894334, 0.00118425084792,
    0.000847785826565, 0.000603466454784, 0.000419347268964, 0.000291768785963, 0.000199761337863,
    0.000136624574661, 9.46855200945e-05, 6.80243180179e-05, 4.94806013765e-05, 3.53122628249e-05,
    2.556765786e-05, 1.75845711623e-05, 1.23828210848e-05, 9.31669724108e-06, 6.0713272037e-06,
    3.95387384933e-06, 2.02760874107e-06, 1.22535149516e-06, 9.79612472109e-07, 7.61730246474e-07,
    4.2748847738e-07, 2.41170461205e-07, 1.38701083552e-07, 3.37678010922e-08, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0
    )
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
from SimGeneral.MixingModule.mix_probFunction_25ns_PoissonOOTPU_cfi import mix

mix.input.nbPileupEvents.probFunctionVariable = cms.vint32(
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
    10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
    20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
    30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
    40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
    50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
    60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
    70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
    80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
    90, 91, 92, 93, 94, 95, 96, 97, 98
    )

mix.input.nbPileupEvents.probValue = cms.vdouble(
    8.89374611122e-07, 1.1777062868e-05, 3.99725585118e-05, 0.000129888015252, 0.000265224848687,
    0.000313088635109, 0.000353781668514, 0.000508787237162, 0.000873670065767, 0.00147166880932,
    0.00228230649018, 0.00330375581273, 0.00466047608406, 0.00624959203029, 0.00810375867901,
    0.010306521821, 0.0129512453978, 0.0160303925502, 0.0192913204592, 0.0223108613632,
    0.0249798930986, 0.0273973789867, 0.0294402350483, 0.031029854302, 0.0324583524255,
    0.0338264469857, 0.0351267479019, 0.0360320204259, 0.0367489568401, 0.0374133183052,
    0.0380352633799, 0.0386200967002, 0.039124376968, 0.0394201612616, 0.0394673457109,
    0.0391705388069, 0.0384758587461, 0.0372984548399, 0.0356497876549, 0.0334655175178,
    0.030823567063, 0.0278340752408, 0.0246009685048, 0.0212676009273, 0.0180250593982,
    0.0149129830776, 0.0120582333486, 0.00953400069415, 0.00738546929512, 0.00563442079939,
    0.00422052915668, 0.00312446316347, 0.00228717533955, 0.00164064894334, 0.00118425084792,
    0.000847785826565, 0.000603466454784, 0.000419347268964, 0.000291768785963, 0.000199761337863,
    0.000136624574661, 9.46855200945e-05, 6.80243180179e-05, 4.94806013765e-05, 3.53122628249e-05,
    2.556765786e-05, 1.75845711623e-05, 1.23828210848e-05, 9.31669724108e-06, 6.0713272037e-06,
    3.95387384933e-06, 2.02760874107e-06, 1.22535149516e-06, 9.79612472109e-07, 7.61730246474e-07,
    4.2748847738e-07, 2.41170461205e-07, 1.38701083552e-07, 3.37678010922e-08, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0
    )"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
from SimGeneral.MixingModule.mix_probFunction_25ns_PoissonOOTPU_cfi import *
mix.input.nbPileupEvents.probFunctionVariable = cms.vint32(
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
    10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
    20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
    30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
    40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
    50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
    60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
    70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
    80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
    90, 91, 92, 93, 94, 95, 96, 97, 98
    )
mix.input.nbPileupEvents.probValue = cms.vdouble(
    8.89374611122e-07, 1.1777062868e-05, 3.99725585118e-05, 0.000129888015252, 0.000265224848687,
    0.000313088635109, 0.000353781668514, 0.000508787237162, 0.000873670065767, 0.00147166880932,
    0.00228230649018, 0.00330375581273, 0.00466047608406, 0.00624959203029, 0.00810375867901,
    0.010306521821, 0.0129512453978, 0.0160303925502, 0.0192913204592, 0.0223108613632,
    0.0249798930986, 0.0273973789867, 0.0294402350483, 0.031029854302, 0.0324583524255,
    0.0338264469857, 0.0351267479019, 0.0360320204259, 0.0367489568401, 0.0374133183052,
    0.0380352633799, 0.0386200967002, 0.039124376968, 0.0394201612616, 0.0394673457109,
    0.0391705388069, 0.0384758587461, 0.0372984548399, 0.0356497876549, 0.0334655175178,
    0.030823567063, 0.0278340752408, 0.0246009685048, 0.0212676009273, 0.0180250593982,
    0.0149129830776, 0.0120582333486, 0.00953400069415, 0.00738546929512, 0.00563442079939,
    0.00422052915668, 0.00312446316347, 0.00228717533955, 0.00164064894334, 0.00118425084792,
    0.000847785826565, 0.000603466454784, 0.000419347268964, 0.000291768785963, 0.000199761337863,
    0.000136624574661, 9.46855200945e-05, 6.80243180179e-05, 4.94806013765e-05, 3.53122628249e-05,
    2.556765786e-05, 1.75845711623e-05, 1.23828210848e-05, 9.31669724108e-06, 6.0713272037e-06,
    3.95387384933e-06, 2.02760874107e-06, 1.22535149516e-06, 9.79612472109e-07, 7.61730246474e-07,
    4.2748847738e-07, 2.41170461205e-07, 1.38701083552e-07, 3.37678010922e-08, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0
    )
"
-------------------------------------------------------------------------
"Recom
PRs: 27035, 27200"
-------------------------------------------------------------------------
=========================================================================
"#include ""Geometry/Records/interface/StackedTrackerGeometryRecord.h""
"
-------------------------------------------------------------------------
"add_import(""Geometry.Records.StackedTrackerGeometryRecord"")"
-------------------------------------------------------------------------
"#include ""Geometry/Records/interface/StackedTrackerGeometryRecord.h""
"
-------------------------------------------------------------------------
"Recom
PRs: 27090, 27101"
-------------------------------------------------------------------------
=========================================================================
"TP_minNLayersStub= conf_.getParameter< int >(""TP_minNLayersStub""); //min number of layers with stubs in the tracking particle to consider matching                                                                  // consider matching
TP_select_eventid = conf_.getParameter<int>(""TP_select_eventid""); // PI or not
"
-------------------------------------------------------------------------
"TP_minNLayersStub = cms.int32(4)  # min number of layers with stubs in the tracking particle to consider matching
# consider matching
TP_select_eventid = conf_.getParameter<int>(""TP_select_eventid"");  # PI or not"
-------------------------------------------------------------------------
"TP_minNLayersStub= conf_.getParameter< int >(""TP_minNLayersStub""); //min number of layers with stubs in the tracking particle to consider matching                                                                  // consider matching
TP_select_eventid = conf_.getParameter<int>(""TP_select_eventid""); // PI or not
"
-------------------------------------------------------------------------
"Recom
PRs: 27090, 27101"
-------------------------------------------------------------------------
=========================================================================
"edm::ESHandle<TrackerTopology> tTopoHandle;
iSetup.get<TrackerTopologyRcd>().get(tTopoHandle);
const TrackerTopology* const tTopo = tTopoHandle.product();
for (auto iterTP: *trackingParticleHandle) {
  edm::Ptr< TrackingParticle > tp_ptr(trackingParticleHandle, this_tp);
  float tmp_tp_pt  = iterTP.pt();
  //Calculate nLayers variable
  std::vector< edm::Ref< edmNew::DetSetVector< TTStub< Ref_Phase2TrackerDigi_ > >, TTStub< Ref_Phase2TrackerDigi_ > > > theStubRefs = MCTruthTTStubHandle->findTTStubRefs(tp_ptr);
  int hasStubInLayer[11] = {0};
  for (unsigned int is=0; is<theStubRefs.size(); is) {
    DetId detid( theStubRefs.at(is)->getDetId() );
    int layer = -1;
    if ( detid.subdetId()==StripSubdetector::TOB )
      layer = static_cast<int>(tTopo->layer(detid)) - 1; //fill in array as entries 0-5
    else if ( detid.subdetId()==StripSubdetector::TID )
      layer = static_cast<int>(tTopo->layer(detid))  5; //fill in array as entries 6-10
    //treat genuine stubs separately (==2 is genuine, ==1 is not)
    if (MCTruthTTStubHandle->findTrackingParticlePtr(theStubRefs.at(is)).isNull() && hasStubInLayer[layer]<2)
      hasStubInLayer[layer] = 1;
    else
      hasStubInLayer[layer] = 2;
  }
  int nStubLayerTP = 0;
  int nStubLayerTP_g = 0;
  for (int isum=0; isum<11; isum) {
    if ( hasStubInLayer[isum] >= 1)
      nStubLayerTP = 1;
    else if ( hasStubInLayer[isum] == 2)
      nStubLayerTP_g = 1;
  }
  if (std::fabs(tmp_tp_eta) > TP_maxEta)
    continue;
  // Fill the 1D distribution plots for tracking particles, to monitor change in stub definition
  if (tmp_tp_pt > TP_minPt && nStubLayerTP>=TP_minNLayersStub) {
    trackParts_Pt ->Fill(tmp_tp_pt);
    trackParts_Eta->Fill(tmp_tp_eta);
    trackParts_Phi->Fill(tmp_tp_phi);
  }
  if (TP_select_eventid == 0 && tmp_eventid != 0)
    continue; //only care about tracking particles from the primary interaction for efficiency/resolution
  int nStubTP = -1;
  if ( MCTruthTTStubHandle.isValid() ) {
    std::vector< edm::Ref< edmNew::DetSetVector< TTStub< Ref_Phase2TrackerDigi_ > >, TTStub< Ref_Phase2TrackerDigi_ > > > theStubRefs = MCTruthTTStubHandle->findTTStubRefs(tp_ptr);
    nStubTP = (int) theStubRefs.size();
  }
  if ( MCTruthTTClusterHandle.isValid() && MCTruthTTClusterHandle->findTTClusterRefs(tp_ptr).empty() )
    continue;
"
-------------------------------------------------------------------------
"```
// Calculate nLayers variable
std::vector<edm::Ref<DetSetVector<TTStub<Ref_Phase2TrackerDigi_>>, TTStub<Ref_Phase2TrackerDigi_>> > theStubRefs = MCTruthTTStubHandle->findTTStubRefs(tp_ptr);
int hasStubInLayer[11] = {0};
for (unsigned int is = 0; is < theStubRefs.size(); is++) {
    DetId detid(theStubRefs.at(is)->getDetId());
    int layer = -1;
    if(detid.subdetId() == StripSubdetector::TOB)
        layer = static_cast<int>(tTopo->layer(detid)) - 1; // fill in array as entries 0-5
    else if(detid.subdetId() == StripSubdetector::TID)
        layer = static_cast<int>(tTopo->layer(detid)) + 5; // fill in array as entries 6-10
    // treat genuine stubs separately (==2 is genuine, ==1 is not)
    if(MCTruthTTStubHandle->findTrackingParticlePtr(theStubRefs.at(is)).isNull() && hasStubInLayer[layer] < 2)
        hasStubInLayer[layer] = 1;
    else
        hasStubInLayer[layer] = 2;
}
int nStubLayerTP = 0;
int nStubLayerTP_g = 0;
for (int isum = 0; isum < 11; isum++) {
    if(hasStubInLayer[isum] >= 1)
        nStubLayerTP = 1;
    else if(hasStubInLayer[isum] == 2)
        nStubLayerTP_g = 1;
}
if(std::fabs(tmp_tp_eta) > TP_maxEta)
    continue;

// Fill the 1D distribution plots for tracking particles, to monitor change in stub definition
if(tmp_tp_pt > TP_minPt && nStubLayerTP >= TP_minNLayersStub) {
    trackParts_Pt->Fill(tmp_tp_pt);
    trackParts_Eta->Fill(tmp_tp_eta);
    trackParts_Phi->Fill(tmp_tp_phi);
}
if(TP_select_eventid == 0 && tmp_eventid != 0)
    continue; // only care about tracking particles from the primary interaction for efficiency/resolution

int nStubTP = -1;
if(MCTruthTTStubHandle.isValid()) {
    std::vector<edm::Ref<DetSetVector<TTStub<Ref_Phase2TrackerDigi_>>, TTStub<Ref_Phase2TrackerDigi_>> > theStubRefs = MCTruthTTStubHandle->findTTStubRefs(tp_ptr);
    nStubTP = (int)theStubRefs.size();
}
if(MCTruthTTClusterHandle.isValid() && MCTruthTTClusterHandle->findTTClusterRefs(tp_ptr).empty())
    continue;
```  "
-------------------------------------------------------------------------
"edm::ESHandle<TrackerTopology> tTopoHandle;
iSetup.get<TrackerTopologyRcd>().get(tTopoHandle);
const TrackerTopology* const tTopo = tTopoHandle.product();
for (auto iterTP: *trackingParticleHandle) {
  edm::Ptr< TrackingParticle > tp_ptr(trackingParticleHandle, this_tp);
  float tmp_tp_pt  = iterTP.pt();
  //Calculate nLayers variable
  std::vector< edm::Ref< edmNew::DetSetVector< TTStub< Ref_Phase2TrackerDigi_ > >, TTStub< Ref_Phase2TrackerDigi_ > > > theStubRefs = MCTruthTTStubHandle->findTTStubRefs(tp_ptr);
  int hasStubInLayer[11] = {0};
  for (unsigned int is=0; is<theStubRefs.size(); is) {
    DetId detid( theStubRefs.at(is)->getDetId() );
    int layer = -1;
    if ( detid.subdetId()==StripSubdetector::TOB )
      layer = static_cast<int>(tTopo->layer(detid)) - 1; //fill in array as entries 0-5
    else if ( detid.subdetId()==StripSubdetector::TID )
      layer = static_cast<int>(tTopo->layer(detid))  5; //fill in array as entries 6-10
    //treat genuine stubs separately (==2 is genuine, ==1 is not)
    if (MCTruthTTStubHandle->findTrackingParticlePtr(theStubRefs.at(is)).isNull() && hasStubInLayer[layer]<2)
      hasStubInLayer[layer] = 1;
    else
      hasStubInLayer[layer] = 2;
  }
  int nStubLayerTP = 0;
  int nStubLayerTP_g = 0;
  for (int isum=0; isum<11; isum) {
    if ( hasStubInLayer[isum] >= 1)
      nStubLayerTP = 1;
    else if ( hasStubInLayer[isum] == 2)
      nStubLayerTP_g = 1;
  }
  if (std::fabs(tmp_tp_eta) > TP_maxEta)
    continue;
  // Fill the 1D distribution plots for tracking particles, to monitor change in stub definition
  if (tmp_tp_pt > TP_minPt && nStubLayerTP>=TP_minNLayersStub) {
    trackParts_Pt ->Fill(tmp_tp_pt);
    trackParts_Eta->Fill(tmp_tp_eta);
    trackParts_Phi->Fill(tmp_tp_phi);
  }
  if (TP_select_eventid == 0 && tmp_eventid != 0)
    continue; //only care about tracking particles from the primary interaction for efficiency/resolution
  int nStubTP = -1;
  if ( MCTruthTTStubHandle.isValid() ) {
    std::vector< edm::Ref< edmNew::DetSetVector< TTStub< Ref_Phase2TrackerDigi_ > >, TTStub< Ref_Phase2TrackerDigi_ > > > theStubRefs = MCTruthTTStubHandle->findTTStubRefs(tp_ptr);
    nStubTP = (int) theStubRefs.size();
  }
  if ( MCTruthTTClusterHandle.isValid() && MCTruthTTClusterHandle->findTTClusterRefs(tp_ptr).empty() )
    continue;
"
-------------------------------------------------------------------------
"Recom
PRs: 27090, 27101"
-------------------------------------------------------------------------
=========================================================================
"float tmp_tp_VtxR = sqrt(tmp_tp_vx * tmp_tp_vx  tmp_tp_vy * tmp_tp_vy);
"
-------------------------------------------------------------------------
"```cpp
float tmp_tp_VtxR = sqrt(tmp_tp_vx * tmp_tp_vx + tmp_tp_vy * tmp_tp_vy); // update expression to include a missing operator
```"
-------------------------------------------------------------------------
"float tmp_tp_VtxR = sqrt(tmp_tp_vx * tmp_tp_vx  tmp_tp_vy * tmp_tp_vy);
"
-------------------------------------------------------------------------
"Recom
PRs: 27090, 27101"
-------------------------------------------------------------------------
=========================================================================
"if (tmp_tp_VtxR < 1.0) {
  tp_pt->Fill(tmp_tp_pt); //pT effic, no cut on pT, but VtxR cut
  if (tmp_tp_pt<=10)
    tp_pt_zoom->Fill(tmp_tp_pt); //pT effic, no cut on pT, but VtxR cut
tp_VtxR->Fill(tmp_tp_VtxR); // VtxR efficiency has no cut on VtxR
if (tmp_tp_VtxR > 1.0)
if (nStubTP < TP_minNStub || nStubLayerTP < TP_minNLayersStub)
  continue; //nStub cut not included in denominator of efficiency plots
// ----------------------------------------------------------------------------------------------
// look for L1 tracks matched to the tracking particle
int tp_nMatch = 0;
if ( MCTruthTTTrackHandle.isValid() ) {
  std::vector< edm::Ptr< TTTrack< Ref_Phase2TrackerDigi_ > > > matchedTracks =
    MCTruthTTTrackHandle->findTTTrackPtrs(tp_ptr);
  // loop over matched L1 tracks
  // here, ""match"" means tracks that can be associated to a TrackingParticle
  // with at least one hit of at least one of its clusters
  // https://twiki.cern.ch/twiki/bin/viewauth/CMS/SLHCTrackerTriggerSWTools#MC_truth_for_TTTrack
  int trkCounter = 0;
  for (auto thisTrack: matchedTracks) {
    if (!MCTruthTTTrackHandle->isGenuine(thisTrack))
      continue;
    // ----------------------------------------------------------------------------------------------
    // further require L1 track to be (loosely) genuine, that there is only
    // one TP matched to the track
    //  have >= L1Tk_minNStub stubs for it to be a valid match
    int tmp_trk_nstub = thisTrack->getStubRefs().size();
    if (tmp_trk_nstub < L1Tk_minNStub)
      continue;
    float dmatch_pt  = 999;
    float dmatch_eta = 999;
    float dmatch_phi = 999;
    int match_id = 999;
    edm::Ptr< TrackingParticle > my_tp = MCTruthTTTrackHandle->findTrackingParticlePtr(thisTrack);
    dmatch_pt  = std::fabs(my_tp->p4().pt() - tmp_tp_pt);
    dmatch_eta = std::fabs(my_tp->p4().eta() - tmp_tp_eta);
    dmatch_phi = std::fabs(my_tp->p4().phi() - tmp_tp_phi);
    match_id = my_tp->pdgId();
    float tmp_trk_chi2dof = (thisTrack->getChi2(L1Tk_nPar)) / (2*tmp_trk_nstub - L1Tk_nPar);
    // ensure that track is uniquely matched to the TP we are looking at!
    if (dmatch_pt<0.1 && dmatch_eta<0.1 && dmatch_phi<0.1 && tmp_tp_pdgid==match_id) {
      tp_nMatch;
      if (i_track < 0 || tmp_trk_chi2dof < i_chi2dof) {
        i_track = trkCounter;
        i_chi2dof = tmp_trk_chi2dof;
      }
    trkCounter;
  } // end loop over matched L1 tracks
  if (tp_nMatch < 1)
    continue;
  // Get information on the matched tracks
  float tmp_matchtrk_pt      = -999;
  float tmp_matchtrk_eta     = -999;
  float tmp_matchtrk_phi     = -999;
  float tmp_matchtrk_VtxZ    = -999;
  float tmp_matchtrk_chi2    = -999;
  float tmp_matchtrk_chi2dof = -999;
  int tmp_matchTrk_nStub     = -999;
  float tmp_matchtrk_d0      = -999;
  tmp_matchtrk_pt      = matchedTracks[i_track]->getMomentum(L1Tk_nPar).perp();
  tmp_matchtrk_eta     = matchedTracks[i_track]->getMomentum(L1Tk_nPar).eta();
  tmp_matchtrk_phi     = matchedTracks[i_track]->getMomentum(L1Tk_nPar).phi();
  tmp_matchtrk_VtxZ    = matchedTracks[i_track]->getPOCA(L1Tk_nPar).z();
  tmp_matchtrk_chi2    = matchedTracks[i_track]->getChi2(L1Tk_nPar);
  tmp_matchtrk_chi2dof = matchedTracks[i_track]->getChi2Red(L1Tk_nPar);
  tmp_matchTrk_nStub   = (int) matchedTracks[i_track]->getStubRefs().size();
  Track_MatchedChi2Red->Fill(tmp_matchtrk_chi2dof);
  //for d0
  tmp_matchtrk_d0 = -tmp_matchtrk_x0*sin(tmp_matchtrk_phi)  tmp_matchtrk_y0*cos(tmp_matchtrk_phi);
  //Add cuts for the matched tracks, numerator
  if (tmp_tp_pt > TP_maxPt) continue;
  if (tmp_matchTrk_nStub < L1Tk_minNStub || tmp_matchtrk_chi2 > L1Tk_maxChi2
     || tmp_matchtrk_chi2dof > L1Tk_maxChi2dof)
     continue;
  // fill matched track histograms (if passes all criteria)
  match_tp_pt->Fill(tmp_tp_pt);
  if (tmp_tp_pt>0 && tmp_tp_pt<=10)
    match_tp_pt_zoom->Fill(tmp_tp_pt);
  match_tp_eta->Fill(tmp_tp_eta);
  match_tp_d0->Fill(tmp_tp_d0);
  match_tp_VtxR->Fill(tmp_tp_VtxR);
  match_tp_VtxZ->Fill(tmp_tp_VtxZ);
  // Eta and pT histograms for resolution
  float pt_diff = tmp_matchtrk_pt - tmp_tp_pt;
  float pt_res = pt_diff/tmp_tp_pt;
  float eta_res = tmp_matchtrk_eta - tmp_tp_eta;
  float phi_res = tmp_matchtrk_phi - tmp_tp_phi;
  float VtxZ_res = tmp_matchtrk_VtxZ - tmp_tp_VtxZ;
  float d0_res = tmp_matchtrk_d0 - tmp_tp_d0;
  // fill total resolution histograms
  res_pt->Fill(pt_diff);
  res_ptRel->Fill(pt_res);
  res_eta->Fill(eta_res);
  // Fill resolution plots for different abs(eta) bins:
  // (0, 0.7), (0.7, 1.0), (1.0, 1.2), (1.2, 1.6), (1.6, 2.0), (2.0, 2.4)
  if (std::fabs(tmp_tp_eta) >= 0 && std::fabs(tmp_tp_eta) < 0.7) {
    reseta_eta0to0p7->Fill(eta_res);
    resphi_eta0to0p7->Fill(phi_res);
    resVtxZ_eta0to0p7->Fill(VtxZ_res);
    resd0_eta0to0p7->Fill(d0_res);
    if (tmp_tp_pt >= 2 && tmp_tp_pt < 3)
      respt_eta0to0p7_pt2to3->Fill(pt_res);
    else if (tmp_tp_pt >= 3 && tmp_tp_pt < 8)
      respt_eta0to0p7_pt3to8->Fill(pt_res);
    else if (tmp_tp_pt >= 8)
      respt_eta0to0p7_pt8toInf->Fill(pt_res);
  } else if (std::fabs(tmp_tp_eta) >= 0.7 && std::fabs(tmp_tp_eta) < 1.0) {
    reseta_eta0p7to1->Fill(eta_res);
    resphi_eta0p7to1->Fill(phi_res);
    resVtxZ_eta0p7to1->Fill(VtxZ_res);
    resd0_eta0p7to1->Fill(d0_res);
    if (tmp_tp_pt >= 2 && tmp_tp_pt < 3)
      respt_eta0p7to1_pt2to3->Fill(pt_res);
    else if (tmp_tp_pt >= 3 && tmp_tp_pt < 8)
      respt_eta0p7to1_pt3to8->Fill(pt_res);
    else if (tmp_tp_pt >= 8)
      respt_eta0p7to1_pt8toInf->Fill(pt_res);
  } else if (std::fabs(tmp_tp_eta) >= 1.0 && std::fabs(tmp_tp_eta) < 1.2) {
    reseta_eta1to1p2->Fill(eta_res);
    resphi_eta1to1p2->Fill(phi_res);
    resVtxZ_eta1to1p2->Fill(VtxZ_res);
    resd0_eta1to1p2->Fill(d0_res);
    if (tmp_tp_pt >= 2 && tmp_tp_pt < 3)
      respt_eta1to1p2_pt2to3->Fill(pt_res);
    else if (tmp_tp_pt >= 3 && tmp_tp_pt < 8)
      respt_eta1to1p2_pt3to8->Fill(pt_res);
    else if (tmp_tp_pt >= 8)
      respt_eta1to1p2_pt8toInf->Fill(pt_res);
  } else if (std::fabs(tmp_tp_eta) >= 1.2 && std::fabs(tmp_tp_eta) < 1.6) {
    reseta_eta1p2to1p6->Fill(eta_res);
    resphi_eta1p2to1p6->Fill(phi_res);
    resVtxZ_eta1p2to1p6->Fill(VtxZ_res);
    resd0_eta1p2to1p6->Fill(d0_res);
    if (tmp_tp_pt >= 2 && tmp_tp_pt < 3)
      respt_eta1p2to1p6_pt2to3->Fill(pt_res);
    else if (tmp_tp_pt >= 3 && tmp_tp_pt < 8)
      respt_eta1p2to1p6_pt3to8->Fill(pt_res);
    else if (tmp_tp_pt >= 8)
      respt_eta1p2to1p6_pt8toInf->Fill(pt_res);
  } else if (std::fabs(tmp_tp_eta) >= 1.6 && std::fabs(tmp_tp_eta) < 2.0) {
    reseta_eta1p6to2->Fill(eta_res);
    resphi_eta1p6to2->Fill(phi_res);
    resVtxZ_eta1p6to2->Fill(VtxZ_res);
    resd0_eta1p6to2->Fill(d0_res);
    if (tmp_tp_pt >= 2 && tmp_tp_pt < 3)
      respt_eta1p6to2_pt2to3->Fill(pt_res);
    else if (tmp_tp_pt >= 3 && tmp_tp_pt < 8)
      respt_eta1p6to2_pt3to8->Fill(pt_res);
    else if (tmp_tp_pt >= 8)
      respt_eta1p6to2_pt8toInf->Fill(pt_res);
  }
  else if (std::fabs(tmp_tp_eta) >= 2.0 && std::fabs(tmp_tp_eta) <= 2.4) {
    reseta_eta2to2p4->Fill(eta_res);
    resphi_eta2to2p4->Fill(phi_res);
    resVtxZ_eta2to2p4->Fill(VtxZ_res);
    resd0_eta2to2p4->Fill(d0_res);
    if (tmp_tp_pt >= 2 && tmp_tp_pt < 3)
      respt_eta2to2p4_pt2to3->Fill(pt_res);
    else if (tmp_tp_pt >= 3 && tmp_tp_pt < 8)
      respt_eta2to2p4_pt3to8->Fill(pt_res);
    else if (tmp_tp_pt >= 8)
      respt_eta2to2p4_pt8toInf->Fill(pt_res);
  }
} //if MC TTTrack handle is valid
//end loop over tracking particles
"
-------------------------------------------------------------------------
"if (tmp_tp_VtxR < 1.0) {
  tp_pt->Fill(tmp_tp_pt); //pT effic, no cut on pT, but VtxR cut
  if (tmp_tp_pt<=10)
    tp_pt_zoom->Fill(tmp_tp_pt); //pT effic, no cut on pT, but VtxR cut
  tp_VtxR->Fill(tmp_tp_VtxR); // VtxR efficiency has no cut on VtxR
  if (tmp_tp_VtxR > 1.0) continue;

  if (nStubTP < TP_minNStub || nStubLayerTP < TP_minNLayersStub) continue; //nStub cut not included in denominator of efficiency plots

  int tp_nMatch = 0;
  if ( MCTruthTTTrackHandle.isValid() ) {
    std::vector< edm::Ptr< TTTrack< Ref_Phase2TrackerDigi_ > > > matchedTracks =
      MCTruthTTTrackHandle->findTTTrackPtrs(tp_ptr);
  
    int trkCounter = 0;
    for (auto thisTrack: matchedTracks) {
      if (!MCTruthTTTrackHandle->isGenuine(thisTrack)) continue;
  
      int tmp_trk_nstub = thisTrack->getStubRefs().size();
      if (tmp_trk_nstub < L1Tk_minNStub) continue;

      float dmatch_pt  = 999;
      float dmatch_eta = 999;
      float dmatch_phi = 999;
      int match_id = 999;
      edm::Ptr< TrackingParticle > my_tp = MCTruthTTTrackHandle->findTrackingParticlePtr(thisTrack);
      dmatch_pt  = std::fabs(my_tp->p4().pt() - tmp_tp_pt);
      dmatch_eta = std::fabs(my_tp->p4().eta() - tmp_tp_eta);
      dmatch_phi = std::fabs(my_tp->p4().phi() - tmp_tp_phi);
      match_id = my_tp->pdgId();
      float tmp_trk_chi2dof = (thisTrack->getChi2(L1Tk_nPar)) / (2*tmp_trk_nstub - L1Tk_nPar);
    
      if (dmatch_pt < 0.1 && dmatch_eta < 0.1 && dmatch_phi < 0.1 && tmp_tp_pdgid == match_id) {
        tp_nMatch;
        if (i_track < 0 || tmp_trk_chi2dof < i_chi2dof) {
          i_track = trkCounter;
          i_chi2dof = tmp_trk_chi2dof;
        }
        trkCounter;
      } 
    }

    if (tp_nMatch < 1) continue;

    float tmp_matchtrk_pt      = -999;
    float tmp_matchtrk_eta     = -999;
    float tmp_matchtrk_phi     = -999;
    float tmp_matchtrk_VtxZ    = -999;
    float tmp_matchtrk_chi2    = -999;
    float tmp_matchtrk_chi2dof = -999;
    int tmp_matchTrk_nStub     = -999;
    float tmp_matchtrk_d0      = -999;
  
    tmp_matchtrk_pt      = matchedTracks[i_track]->getMomentum(L1Tk_nPar).perp();
    tmp_matchtrk_eta     = matchedTracks[i_track]->getMomentum(L1Tk_nPar).eta();
    tmp_matchtrk_phi     = matchedTracks[i_track]->getMomentum(L1Tk_nPar).phi();
    tmp_matchtrk_VtxZ    = matchedTracks[i_track]->getPOCA(L1Tk_nPar).z();
    tmp_matchtrk_chi2    = matchedTracks[i_track]->getChi2(L1Tk_nPar);
    tmp_matchtrk_chi2dof = matchedTracks[i_track]->getChi2Red(L1Tk_nPar);
    tmp_matchTrk_nStub   = (int) matchedTracks[i_track]->getStubRefs().size();
    Track_MatchedChi2Red->Fill(tmp_matchtrk_chi2dof);
 
    tmp_matchtrk_d0 = -tmp_matchtrk_x0*sin(tmp_matchtrk_phi) + tmp_matchtrk_y0*cos(tmp_matchtrk_phi);

    if (tmp_tp_pt > TP_maxPt || tmp_matchTrk_nStub < L1Tk_minNStub || tmp_matchtrk_chi2 > L1Tk_maxChi2
       || tmp_matchtrk_chi2dof > L1Tk_maxChi2dof) continue;

    match_tp_pt->Fill(tmp_tp_pt);
    if (tmp_tp_pt > 0 && tmp_tp_pt <= 10) match_tp_pt_zoom->Fill(tmp_tp_pt);
    match_tp_eta->Fill(tmp_tp_eta);
    match_tp_d0->Fill(tmp_tp_d0);
    match_tp_VtxR->Fill(tmp_tp_VtxR);
    match_tp_VtxZ->Fill(tmp_tp_VtxZ);

    float pt_diff = tmp_matchtrk_pt - tmp_tp_pt;
    float pt_res = pt_diff/tmp_tp_pt;
    float eta_res = tmp_matchtrk_eta - tmp_tp_eta;
    float phi_res = tmp_matchtrk_phi - tmp_tp_phi;
    float VtxZ_res = tmp_matchtrk_VtxZ - tmp_tp_VtxZ;
    float d0_res = tmp_matchtrk_d0 - tmp_tp_d0;
  
    res_pt->Fill(pt_diff);
    res_ptRel->Fill(pt_res);
    res_eta->Fill(eta_res);
  
    if (std::fabs(tmp_tp_eta) >= 0 && std::fabs(tmp_tp_eta) < 0.7) {
      reseta_eta0to0p7->Fill(eta_res);
      resphi_eta0to0p7->Fill(phi_res);
      resVtxZ_eta0to0p7->Fill(VtxZ_res);
      resd0_eta0to0p7->Fill(d0_res);
      if (tmp_tp_pt >= 2 && tmp_tp_pt < 3) respt_eta0to0p7_pt2to3->Fill(pt_res);
      else if (tmp_tp_pt >= 3 && tmp_tp_pt < 8) respt_eta0to0p7_pt3to8->Fill(pt_res);
      else if (tmp_tp_pt >= 8) respt_eta0to0p7_pt8toInf->Fill(pt_res);
    } 
    // code for other eta ranges omitted for brevity
  } 
}"
-------------------------------------------------------------------------
"if (tmp_tp_VtxR < 1.0) {
  tp_pt->Fill(tmp_tp_pt); //pT effic, no cut on pT, but VtxR cut
  if (tmp_tp_pt<=10)
    tp_pt_zoom->Fill(tmp_tp_pt); //pT effic, no cut on pT, but VtxR cut
tp_VtxR->Fill(tmp_tp_VtxR); // VtxR efficiency has no cut on VtxR
if (tmp_tp_VtxR > 1.0)
if (nStubTP < TP_minNStub || nStubLayerTP < TP_minNLayersStub)
  continue; //nStub cut not included in denominator of efficiency plots
// ----------------------------------------------------------------------------------------------
// look for L1 tracks matched to the tracking particle
int tp_nMatch = 0;
if ( MCTruthTTTrackHandle.isValid() ) {
  std::vector< edm::Ptr< TTTrack< Ref_Phase2TrackerDigi_ > > > matchedTracks =
    MCTruthTTTrackHandle->findTTTrackPtrs(tp_ptr);
  // loop over matched L1 tracks
  // here, ""match"" means tracks that can be associated to a TrackingParticle
  // with at least one hit of at least one of its clusters
  // https://twiki.cern.ch/twiki/bin/viewauth/CMS/SLHCTrackerTriggerSWTools#MC_truth_for_TTTrack
  int trkCounter = 0;
  for (auto thisTrack: matchedTracks) {
    if (!MCTruthTTTrackHandle->isGenuine(thisTrack))
      continue;
    // ----------------------------------------------------------------------------------------------
    // further require L1 track to be (loosely) genuine, that there is only
    // one TP matched to the track
    //  have >= L1Tk_minNStub stubs for it to be a valid match
    int tmp_trk_nstub = thisTrack->getStubRefs().size();
    if (tmp_trk_nstub < L1Tk_minNStub)
      continue;
    float dmatch_pt  = 999;
    float dmatch_eta = 999;
    float dmatch_phi = 999;
    int match_id = 999;
    edm::Ptr< TrackingParticle > my_tp = MCTruthTTTrackHandle->findTrackingParticlePtr(thisTrack);
    dmatch_pt  = std::fabs(my_tp->p4().pt() - tmp_tp_pt);
    dmatch_eta = std::fabs(my_tp->p4().eta() - tmp_tp_eta);
    dmatch_phi = std::fabs(my_tp->p4().phi() - tmp_tp_phi);
    match_id = my_tp->pdgId();
    float tmp_trk_chi2dof = (thisTrack->getChi2(L1Tk_nPar)) / (2*tmp_trk_nstub - L1Tk_nPar);
    // ensure that track is uniquely matched to the TP we are looking at!
    if (dmatch_pt<0.1 && dmatch_eta<0.1 && dmatch_phi<0.1 && tmp_tp_pdgid==match_id) {
      tp_nMatch;
      if (i_track < 0 || tmp_trk_chi2dof < i_chi2dof) {
        i_track = trkCounter;
        i_chi2dof = tmp_trk_chi2dof;
      }
    trkCounter;
  } // end loop over matched L1 tracks
  if (tp_nMatch < 1)
    continue;
  // Get information on the matched tracks
  float tmp_matchtrk_pt      = -999;
  float tmp_matchtrk_eta     = -999;
  float tmp_matchtrk_phi     = -999;
  float tmp_matchtrk_VtxZ    = -999;
  float tmp_matchtrk_chi2    = -999;
  float tmp_matchtrk_chi2dof = -999;
  int tmp_matchTrk_nStub     = -999;
  float tmp_matchtrk_d0      = -999;
  tmp_matchtrk_pt      = matchedTracks[i_track]->getMomentum(L1Tk_nPar).perp();
  tmp_matchtrk_eta     = matchedTracks[i_track]->getMomentum(L1Tk_nPar).eta();
  tmp_matchtrk_phi     = matchedTracks[i_track]->getMomentum(L1Tk_nPar).phi();
  tmp_matchtrk_VtxZ    = matchedTracks[i_track]->getPOCA(L1Tk_nPar).z();
  tmp_matchtrk_chi2    = matchedTracks[i_track]->getChi2(L1Tk_nPar);
  tmp_matchtrk_chi2dof = matchedTracks[i_track]->getChi2Red(L1Tk_nPar);
  tmp_matchTrk_nStub   = (int) matchedTracks[i_track]->getStubRefs().size();
  Track_MatchedChi2Red->Fill(tmp_matchtrk_chi2dof);
  //for d0
  tmp_matchtrk_d0 = -tmp_matchtrk_x0*sin(tmp_matchtrk_phi)  tmp_matchtrk_y0*cos(tmp_matchtrk_phi);
  //Add cuts for the matched tracks, numerator
  if (tmp_tp_pt > TP_maxPt) continue;
  if (tmp_matchTrk_nStub < L1Tk_minNStub || tmp_matchtrk_chi2 > L1Tk_maxChi2
     || tmp_matchtrk_chi2dof > L1Tk_maxChi2dof)
     continue;
  // fill matched track histograms (if passes all criteria)
  match_tp_pt->Fill(tmp_tp_pt);
  if (tmp_tp_pt>0 && tmp_tp_pt<=10)
    match_tp_pt_zoom->Fill(tmp_tp_pt);
  match_tp_eta->Fill(tmp_tp_eta);
  match_tp_d0->Fill(tmp_tp_d0);
  match_tp_VtxR->Fill(tmp_tp_VtxR);
  match_tp_VtxZ->Fill(tmp_tp_VtxZ);
  // Eta and pT histograms for resolution
  float pt_diff = tmp_matchtrk_pt - tmp_tp_pt;
  float pt_res = pt_diff/tmp_tp_pt;
  float eta_res = tmp_matchtrk_eta - tmp_tp_eta;
  float phi_res = tmp_matchtrk_phi - tmp_tp_phi;
  float VtxZ_res = tmp_matchtrk_VtxZ - tmp_tp_VtxZ;
  float d0_res = tmp_matchtrk_d0 - tmp_tp_d0;
  // fill total resolution histograms
  res_pt->Fill(pt_diff);
  res_ptRel->Fill(pt_res);
  res_eta->Fill(eta_res);
  // Fill resolution plots for different abs(eta) bins:
  // (0, 0.7), (0.7, 1.0), (1.0, 1.2), (1.2, 1.6), (1.6, 2.0), (2.0, 2.4)
  if (std::fabs(tmp_tp_eta) >= 0 && std::fabs(tmp_tp_eta) < 0.7) {
    reseta_eta0to0p7->Fill(eta_res);
    resphi_eta0to0p7->Fill(phi_res);
    resVtxZ_eta0to0p7->Fill(VtxZ_res);
    resd0_eta0to0p7->Fill(d0_res);
    if (tmp_tp_pt >= 2 && tmp_tp_pt < 3)
      respt_eta0to0p7_pt2to3->Fill(pt_res);
    else if (tmp_tp_pt >= 3 && tmp_tp_pt < 8)
      respt_eta0to0p7_pt3to8->Fill(pt_res);
    else if (tmp_tp_pt >= 8)
      respt_eta0to0p7_pt8toInf->Fill(pt_res);
  } else if (std::fabs(tmp_tp_eta) >= 0.7 && std::fabs(tmp_tp_eta) < 1.0) {
    reseta_eta0p7to1->Fill(eta_res);
    resphi_eta0p7to1->Fill(phi_res);
    resVtxZ_eta0p7to1->Fill(VtxZ_res);
    resd0_eta0p7to1->Fill(d0_res);
    if (tmp_tp_pt >= 2 && tmp_tp_pt < 3)
      respt_eta0p7to1_pt2to3->Fill(pt_res);
    else if (tmp_tp_pt >= 3 && tmp_tp_pt < 8)
      respt_eta0p7to1_pt3to8->Fill(pt_res);
    else if (tmp_tp_pt >= 8)
      respt_eta0p7to1_pt8toInf->Fill(pt_res);
  } else if (std::fabs(tmp_tp_eta) >= 1.0 && std::fabs(tmp_tp_eta) < 1.2) {
    reseta_eta1to1p2->Fill(eta_res);
    resphi_eta1to1p2->Fill(phi_res);
    resVtxZ_eta1to1p2->Fill(VtxZ_res);
    resd0_eta1to1p2->Fill(d0_res);
    if (tmp_tp_pt >= 2 && tmp_tp_pt < 3)
      respt_eta1to1p2_pt2to3->Fill(pt_res);
    else if (tmp_tp_pt >= 3 && tmp_tp_pt < 8)
      respt_eta1to1p2_pt3to8->Fill(pt_res);
    else if (tmp_tp_pt >= 8)
      respt_eta1to1p2_pt8toInf->Fill(pt_res);
  } else if (std::fabs(tmp_tp_eta) >= 1.2 && std::fabs(tmp_tp_eta) < 1.6) {
    reseta_eta1p2to1p6->Fill(eta_res);
    resphi_eta1p2to1p6->Fill(phi_res);
    resVtxZ_eta1p2to1p6->Fill(VtxZ_res);
    resd0_eta1p2to1p6->Fill(d0_res);
    if (tmp_tp_pt >= 2 && tmp_tp_pt < 3)
      respt_eta1p2to1p6_pt2to3->Fill(pt_res);
    else if (tmp_tp_pt >= 3 && tmp_tp_pt < 8)
      respt_eta1p2to1p6_pt3to8->Fill(pt_res);
    else if (tmp_tp_pt >= 8)
      respt_eta1p2to1p6_pt8toInf->Fill(pt_res);
  } else if (std::fabs(tmp_tp_eta) >= 1.6 && std::fabs(tmp_tp_eta) < 2.0) {
    reseta_eta1p6to2->Fill(eta_res);
    resphi_eta1p6to2->Fill(phi_res);
    resVtxZ_eta1p6to2->Fill(VtxZ_res);
    resd0_eta1p6to2->Fill(d0_res);
    if (tmp_tp_pt >= 2 && tmp_tp_pt < 3)
      respt_eta1p6to2_pt2to3->Fill(pt_res);
    else if (tmp_tp_pt >= 3 && tmp_tp_pt < 8)
      respt_eta1p6to2_pt3to8->Fill(pt_res);
    else if (tmp_tp_pt >= 8)
      respt_eta1p6to2_pt8toInf->Fill(pt_res);
  }
  else if (std::fabs(tmp_tp_eta) >= 2.0 && std::fabs(tmp_tp_eta) <= 2.4) {
    reseta_eta2to2p4->Fill(eta_res);
    resphi_eta2to2p4->Fill(phi_res);
    resVtxZ_eta2to2p4->Fill(VtxZ_res);
    resd0_eta2to2p4->Fill(d0_res);
    if (tmp_tp_pt >= 2 && tmp_tp_pt < 3)
      respt_eta2to2p4_pt2to3->Fill(pt_res);
    else if (tmp_tp_pt >= 3 && tmp_tp_pt < 8)
      respt_eta2to2p4_pt3to8->Fill(pt_res);
    else if (tmp_tp_pt >= 8)
      respt_eta2to2p4_pt8toInf->Fill(pt_res);
  }
} //if MC TTTrack handle is valid
//end loop over tracking particles
"
-------------------------------------------------------------------------
"Recom
PRs: 27090, 27101"
-------------------------------------------------------------------------
=========================================================================
"TP_minNLayersStub = cms.int32(4),   # require TP to have >= X number of layers hit with stubs
"
-------------------------------------------------------------------------
"TP_minNLayersStub = cms.int32(4),   # require TP to have >= X number of layers hit with stubs"
-------------------------------------------------------------------------
"TP_minNLayersStub = cms.int32(4),   # require TP to have >= X number of layers hit with stubs
"
-------------------------------------------------------------------------
"Recom
PRs: 27090, 27101"
-------------------------------------------------------------------------
=========================================================================
"'BeamSpot': 'Run3RoundOptics25ns13TeVLowSigmaZ',
"
-------------------------------------------------------------------------
'BeamSpot': 'Run3RoundOpticsLowSigmaZ'
-------------------------------------------------------------------------
"'BeamSpot': 'Run3RoundOptics25ns13TeVLowSigmaZ',
"
-------------------------------------------------------------------------
"Recom
PRs: 26968, 26970"
-------------------------------------------------------------------------
=========================================================================
"command = ['compareHistograms.py', '-b', os.path.join(base_dir, file_name), \
"
-------------------------------------------------------------------------
"command = ['compareHistograms.py', '-b', os.path.join(base_dir, file_name), '-p', os.path.join(pr_dir, file_name), '-o', output_dir, '-n', pr_number, '-t', test_number, '-r', release_format]"
-------------------------------------------------------------------------
"command = ['compareHistograms.py', '-b', os.path.join(base_dir, file_name), \
"
-------------------------------------------------------------------------
"Recom
PRs: 26930, 26955"
-------------------------------------------------------------------------
=========================================================================
"except Exception as ex:
    print('Exception comparing two root files: %s' % ex)
"
-------------------------------------------------------------------------
"except Exception as ex:
    print(f'Exception comparing two root files: {ex}')"
-------------------------------------------------------------------------
"except Exception as ex:
    print('Exception comparing two root files: %s' % ex)
"
-------------------------------------------------------------------------
"Recom
PRs: 26930, 26955"
-------------------------------------------------------------------------
=========================================================================
"command = ['visDQMUpload.py', 'https://cmsweb.cern.ch/dqm/dev', file]
"
-------------------------------------------------------------------------
"import argparse
import os
import subprocess
import glob
import threading
import sys

def upload(files):
    while files:
        try:
            file = files.pop()
            command = ['visDQMUpload.py', 'https://cmsweb.cern.ch/dqm/dev', file]
            print('Uploading output:')
            print(' '.join(command))"
-------------------------------------------------------------------------
"command = ['visDQMUpload.py', 'https://cmsweb.cern.ch/dqm/dev', file]
"
-------------------------------------------------------------------------
"Recom
PRs: 26930, 26955"
-------------------------------------------------------------------------
=========================================================================
"new_dir_list = dirs_list  [node.GetName()]
"
-------------------------------------------------------------------------
dirs_list.append(node.GetName())
-------------------------------------------------------------------------
"new_dir_list = dirs_list  [node.GetName()]
"
-------------------------------------------------------------------------
"Recom
PRs: 26934, 26935"
-------------------------------------------------------------------------
=========================================================================
"for modifier in run2_nanoAOD_94XMiniAODv1,run2_nanoAOD_94XMiniAODv2,run2_nanoAOD_94X2016:
run2_nanoAOD_102Xv1.toModify(calibratedPatElectrons102X, src = ""slimmedElectronsTo106X"")
"
-------------------------------------------------------------------------
"for modifier in run2_nanoAOD_94XMiniAODv1, run2_nanoAOD_94XMiniAODv2, run2_nanoAOD_94X2016:
     modifier.toModify(calibratedPatElectrons102X, src = ""slimmedElectronsTo106X"")"
-------------------------------------------------------------------------
"for modifier in run2_nanoAOD_94XMiniAODv1,run2_nanoAOD_94XMiniAODv2,run2_nanoAOD_94X2016:
run2_nanoAOD_102Xv1.toModify(calibratedPatElectrons102X, src = ""slimmedElectronsTo106X"")
"
-------------------------------------------------------------------------
"Recom
PRs: 26844, 26845"
-------------------------------------------------------------------------
=========================================================================
"modifier.toModify(calibratedPatPhotons102Xv1, src = ""slimmedPhotonsTo106X"")
"
-------------------------------------------------------------------------
"modifier.toModify(calibratedPatPhots94Xv2, src = ""slimmedPhotonsTo106X"")"
-------------------------------------------------------------------------
"modifier.toModify(calibratedPatPhotons102Xv1, src = ""slimmedPhotonsTo106X"")
"
-------------------------------------------------------------------------
"Recom
PRs: 26844, 26845"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
"
-------------------------------------------------------------------------
from Configuration.Eras.Modifier_phase1Pixel_cff.phase1Pixel import phase1Pixel
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
"
-------------------------------------------------------------------------
"Recom
PRs: 26700, 26783"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Eras.Modifier_phase2_tracker_cff import phase2_tracker
"
-------------------------------------------------------------------------
from Configuration.Eras.Modifier_fastSim_cff import fastSim
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_phase2_tracker_cff import phase2_tracker
"
-------------------------------------------------------------------------
"Recom
PRs: 26700, 26783"
-------------------------------------------------------------------------
=========================================================================
"const edm::EDGetTokenT< edm::Association<reco::TrackCollection> > gsf2trk_;	
"
-------------------------------------------------------------------------
const edm::EDGetTokenT< edm::Association<reco::TrackCollection> > gsf2trk_;
-------------------------------------------------------------------------
"const edm::EDGetTokenT< edm::Association<reco::TrackCollection> > gsf2trk_;	
"
-------------------------------------------------------------------------
"Recom
PRs: 26325, 26404"
-------------------------------------------------------------------------
=========================================================================
"gsf2trk_{consumes<edm::Association<reco::TrackCollection> >(iConfig.getParameter<edm::InputTag>(""gsfToTrack""))},
"
-------------------------------------------------------------------------
"gsf2trk_{consumes<edm::Association<reco::TrackCollection> >(iConfig.getParameter<edm::InputTag>(""gsfToTrack""))},"
-------------------------------------------------------------------------
"gsf2trk_{consumes<edm::Association<reco::TrackCollection> >(iConfig.getParameter<edm::InputTag>(""gsfToTrack""))},
"
-------------------------------------------------------------------------
"Recom
PRs: 26325, 26404"
-------------------------------------------------------------------------
=========================================================================
"edm::Handle<edm::Association<reco::TrackCollection> > gsf2trk;
iEvent.getByToken(gsf2trk_, gsf2trk);
"
-------------------------------------------------------------------------
"lowPtGsfToTrackLinks = cms.EDProducer(""LowPtGSFToTrackLinks"",
                                      gsfTracks = cms.InputTag('packedPFCandidates'),
                                      tracks = cms.InputTag('generalTracks')
                                     )"
-------------------------------------------------------------------------
"edm::Handle<edm::Association<reco::TrackCollection> > gsf2trk;
iEvent.getByToken(gsf2trk_, gsf2trk);
"
-------------------------------------------------------------------------
"Recom
PRs: 26325, 26404"
-------------------------------------------------------------------------
=========================================================================
"reco::TrackRef trk = (*gsf2trk)[gref];
if(trk.id() != tracks.id()) {
	throw cms::Exception(""WrongCollection"", ""The reco::Track collection used to match against the GSF Tracks was not used to produce such tracks"");
}
"
-------------------------------------------------------------------------
"reco::TrackRef trk = (*gsf2trk)[gref];
if(trk.id() != gsftracks.id()) {
	throw cms::Exception(""WrongCollection"", ""The reco::Track collection used to match against the GSF Tracks was not used to produce such tracks"");
}"
-------------------------------------------------------------------------
"reco::TrackRef trk = (*gsf2trk)[gref];
if(trk.id() != tracks.id()) {
	throw cms::Exception(""WrongCollection"", ""The reco::Track collection used to match against the GSF Tracks was not used to produce such tracks"");
}
"
-------------------------------------------------------------------------
"Recom
PRs: 26325, 26404"
-------------------------------------------------------------------------
=========================================================================
"desc.add<edm::InputTag>(""gsfToTrack"", edm::InputTag(""lowPtGsfToTrackLinks""));
"
-------------------------------------------------------------------------
"desc.add<edm::InputTag>(""gsfToTrack"", edm::InputTag(""lowPtGsfToTrackLinksDefault""));"
-------------------------------------------------------------------------
"desc.add<edm::InputTag>(""gsfToTrack"", edm::InputTag(""lowPtGsfToTrackLinks""));
"
-------------------------------------------------------------------------
"Recom
PRs: 26325, 26404"
-------------------------------------------------------------------------
=========================================================================
"'keep *_lowPtGsfToTrackLinks_*_*',
"
-------------------------------------------------------------------------
"'keep recoLowPtGsfToTrackLinks_lowPtGsfToTrackLinks_*_*',"
-------------------------------------------------------------------------
"'keep *_lowPtGsfToTrackLinks_*_*',
"
-------------------------------------------------------------------------
"Recom
PRs: 26325, 26404"
-------------------------------------------------------------------------
=========================================================================
"'keep *_lowPtGsfToTrackLinks_*_*',
"
-------------------------------------------------------------------------
"RecoEgammaRECO = cms.PSet(
         'keep *_lowPtGsfToTrackLinksDefault_*_*',
         'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
         'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
         'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
         'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
         'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
         'keep floatedmValueMap_lowPtGsfElectronID_*_*',"
-------------------------------------------------------------------------
"'keep *_lowPtGsfToTrackLinks_*_*',
"
-------------------------------------------------------------------------
"Recom
PRs: 26325, 26404"
-------------------------------------------------------------------------
=========================================================================
"'keep *_lowPtGsfToTrackLinks_*_*',
"
-------------------------------------------------------------------------
"'keep lowPtGsfToTrackLinks_lowPtGsfToTrackLinks_*_*',"
-------------------------------------------------------------------------
"'keep *_lowPtGsfToTrackLinks_*_*',
"
-------------------------------------------------------------------------
"Recom
PRs: 26325, 26404"
-------------------------------------------------------------------------
=========================================================================
"#include <string>
#include ""DataFormats/Candidate/interface/Candidate.h""
#include ""DataFormats/ParticleFlowCandidate/interface/PFCandidate.h""
#include ""DataFormats/ParticleFlowCandidate/interface/PFCandidateFwd.h""
#include ""DataFormats/GsfTrackReco/interface/GsfTrack.h""
#include ""DataFormats/GsfTrackReco/interface/GsfTrackFwd.h""
#include ""DataFormats/Common/interface/Association.h""
#include ""FWCore/Framework/interface/global/EDProducer.h""
#include ""FWCore/Framework/interface/Event.h""
#include ""FWCore/Framework/interface/EventSetup.h""
#include ""FWCore/Framework/interface/Frameworkfwd.h""
#include ""FWCore/ParameterSet/interface/ParameterSet.h""
#include ""FWCore/Utilities/interface/Exception.h""
#include ""DataFormats/ParticleFlowReco/interface/PreId.h""
#include ""DataFormats/ParticleFlowReco/interface/PreIdFwd.h""
#include ""DataFormats/EgammaReco/interface/ElectronSeed.h""
#include ""DataFormats/EgammaReco/interface/ElectronSeedFwd.h""
#include ""DataFormats/EgammaReco/interface/ElectronSeedFwd.h""
#include ""DataFormats/TrackReco/interface/Track.h""
#include ""FWCore/Framework/interface/MakerMacros.h""
class LowPtGSFToTrackLinker : public edm::global::EDProducer<> {
public:
	explicit LowPtGSFToTrackLinker(const edm::ParameterSet&);
	~LowPtGSFToTrackLinker() override;
    
	void produce(edm::StreamID, edm::Event&, const edm::EventSetup&) const override;
	static void fillDescriptions(edm::ConfigurationDescriptions&);
   
private:
	const edm::EDGetTokenT<reco::TrackCollection>          tracks_;
	const edm::EDGetTokenT< std::vector<reco::PreId> > preid_;	
	const edm::EDGetTokenT< std::vector<reco::GsfTrack> > gsftracks_;	
};
LowPtGSFToTrackLinker::LowPtGSFToTrackLinker(const edm::ParameterSet& iConfig) :
  tracks_{consumes<reco::TrackCollection>(iConfig.getParameter<edm::InputTag>(""tracks""))},
  preid_{consumes<std::vector<reco::PreId> >(iConfig.getParameter<edm::InputTag>(""gsfPreID""))},
  gsftracks_{consumes<std::vector<reco::GsfTrack> >(iConfig.getParameter<edm::InputTag>(""gsfTracks""))} {     
		produces< edm::Association<reco::TrackCollection> > ();
	}
LowPtGSFToTrackLinker::~LowPtGSFToTrackLinker() {}
void LowPtGSFToTrackLinker::produce(edm::StreamID, edm::Event& iEvent, const edm::EventSetup& iSetup) const {
	edm::Handle<std::vector<reco::GsfTrack> > gsftracks;
	iEvent.getByToken(gsftracks_, gsftracks);
	edm::Handle<reco::TrackCollection> tracks;
	iEvent.getByToken(tracks_, tracks);
	edm::Handle<std::vector<reco::PreId> > preid;
	iEvent.getByToken(preid_, preid);
	// collection sizes, for reference
	const size_t ngsf = gsftracks->size();
	//store mapping for association
	std::vector<int> gsf2track(ngsf, -1);
	//map Track --> GSF and fill GSF --> PackedCandidates and GSF --> Lost associations
	for(unsigned int igsf=0; igsf < ngsf; igsf) {
		reco::GsfTrackRef gref(gsftracks, igsf);
		reco::TrackRef trk = preid->at(
			gref->seedRef().castTo<reco::ElectronSeedRef>().index()
			).trackRef();
		if(trk.id() != tracks.id()) {
			throw cms::Exception(""WrongCollection"", ""The reco::Track collection used to match against the GSF Tracks was not used to produce such tracks"");
		}
		size_t trkid = trk.index();
		gsf2track[igsf] = trkid;
	}
	// create output collections from the mappings
	auto assoc = std::make_unique< edm::Association<reco::TrackCollection> >(tracks);
	edm::Association<reco::TrackCollection>::Filler filler(*assoc);
	filler.insert(gsftracks, gsf2track.begin(), gsf2track.end());
	filler.fill();
	iEvent.put(std::move(assoc));
}
void LowPtGSFToTrackLinker::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
	edm::ParameterSetDescription desc;
	desc.add<edm::InputTag>(""tracks"", edm::InputTag(""generalTracks""));
	desc.add<edm::InputTag>(""gsfPreID"", edm::InputTag(""lowPtGsfElectronSeeds""));
	desc.add<edm::InputTag>(""gsfTracks"", edm::InputTag(""lowPtGsfEleGsfTracks""));
	descriptions.add(""lowPtGsfToTrackLinksDefault"", desc);
}
DEFINE_FWK_MODULE(LowPtGSFToTrackLinker);
"
-------------------------------------------------------------------------
"#include ""RecoEgamma/EgammaElectronProducers/interface/lowPtGsfToTrackLinksDefault.h""
#include ""RecoEgamma/EgammaElectronProducers/interface/lowPtGsfToTrackLinks.h""
#include ""FWCore/Framework/interface/Event.h""
#include ""FWCore/Framework/interface/MakerMacros.h""

void LowPtGSFToTrackLinker::clone(const edm::EventSetup& iSetup) {
    produce(iSetup);
}

DEFINE_EDM_PLUGIN(LowPtGSFToTrackLinker);"
-------------------------------------------------------------------------
"#include <string>
#include ""DataFormats/Candidate/interface/Candidate.h""
#include ""DataFormats/ParticleFlowCandidate/interface/PFCandidate.h""
#include ""DataFormats/ParticleFlowCandidate/interface/PFCandidateFwd.h""
#include ""DataFormats/GsfTrackReco/interface/GsfTrack.h""
#include ""DataFormats/GsfTrackReco/interface/GsfTrackFwd.h""
#include ""DataFormats/Common/interface/Association.h""
#include ""FWCore/Framework/interface/global/EDProducer.h""
#include ""FWCore/Framework/interface/Event.h""
#include ""FWCore/Framework/interface/EventSetup.h""
#include ""FWCore/Framework/interface/Frameworkfwd.h""
#include ""FWCore/ParameterSet/interface/ParameterSet.h""
#include ""FWCore/Utilities/interface/Exception.h""
#include ""DataFormats/ParticleFlowReco/interface/PreId.h""
#include ""DataFormats/ParticleFlowReco/interface/PreIdFwd.h""
#include ""DataFormats/EgammaReco/interface/ElectronSeed.h""
#include ""DataFormats/EgammaReco/interface/ElectronSeedFwd.h""
#include ""DataFormats/EgammaReco/interface/ElectronSeedFwd.h""
#include ""DataFormats/TrackReco/interface/Track.h""
#include ""FWCore/Framework/interface/MakerMacros.h""
class LowPtGSFToTrackLinker : public edm::global::EDProducer<> {
public:
	explicit LowPtGSFToTrackLinker(const edm::ParameterSet&);
	~LowPtGSFToTrackLinker() override;
    
	void produce(edm::StreamID, edm::Event&, const edm::EventSetup&) const override;
	static void fillDescriptions(edm::ConfigurationDescriptions&);
   
private:
	const edm::EDGetTokenT<reco::TrackCollection>          tracks_;
	const edm::EDGetTokenT< std::vector<reco::PreId> > preid_;	
	const edm::EDGetTokenT< std::vector<reco::GsfTrack> > gsftracks_;	
};
LowPtGSFToTrackLinker::LowPtGSFToTrackLinker(const edm::ParameterSet& iConfig) :
  tracks_{consumes<reco::TrackCollection>(iConfig.getParameter<edm::InputTag>(""tracks""))},
  preid_{consumes<std::vector<reco::PreId> >(iConfig.getParameter<edm::InputTag>(""gsfPreID""))},
  gsftracks_{consumes<std::vector<reco::GsfTrack> >(iConfig.getParameter<edm::InputTag>(""gsfTracks""))} {     
		produces< edm::Association<reco::TrackCollection> > ();
	}
LowPtGSFToTrackLinker::~LowPtGSFToTrackLinker() {}
void LowPtGSFToTrackLinker::produce(edm::StreamID, edm::Event& iEvent, const edm::EventSetup& iSetup) const {
	edm::Handle<std::vector<reco::GsfTrack> > gsftracks;
	iEvent.getByToken(gsftracks_, gsftracks);
	edm::Handle<reco::TrackCollection> tracks;
	iEvent.getByToken(tracks_, tracks);
	edm::Handle<std::vector<reco::PreId> > preid;
	iEvent.getByToken(preid_, preid);
	// collection sizes, for reference
	const size_t ngsf = gsftracks->size();
	//store mapping for association
	std::vector<int> gsf2track(ngsf, -1);
	//map Track --> GSF and fill GSF --> PackedCandidates and GSF --> Lost associations
	for(unsigned int igsf=0; igsf < ngsf; igsf) {
		reco::GsfTrackRef gref(gsftracks, igsf);
		reco::TrackRef trk = preid->at(
			gref->seedRef().castTo<reco::ElectronSeedRef>().index()
			).trackRef();
		if(trk.id() != tracks.id()) {
			throw cms::Exception(""WrongCollection"", ""The reco::Track collection used to match against the GSF Tracks was not used to produce such tracks"");
		}
		size_t trkid = trk.index();
		gsf2track[igsf] = trkid;
	}
	// create output collections from the mappings
	auto assoc = std::make_unique< edm::Association<reco::TrackCollection> >(tracks);
	edm::Association<reco::TrackCollection>::Filler filler(*assoc);
	filler.insert(gsftracks, gsf2track.begin(), gsf2track.end());
	filler.fill();
	iEvent.put(std::move(assoc));
}
void LowPtGSFToTrackLinker::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
	edm::ParameterSetDescription desc;
	desc.add<edm::InputTag>(""tracks"", edm::InputTag(""generalTracks""));
	desc.add<edm::InputTag>(""gsfPreID"", edm::InputTag(""lowPtGsfElectronSeeds""));
	desc.add<edm::InputTag>(""gsfTracks"", edm::InputTag(""lowPtGsfEleGsfTracks""));
	descriptions.add(""lowPtGsfToTrackLinksDefault"", desc);
}
DEFINE_FWK_MODULE(LowPtGSFToTrackLinker);
"
-------------------------------------------------------------------------
"Recom
PRs: 26325, 26404"
-------------------------------------------------------------------------
=========================================================================
"# GSFTrack to track association
from RecoEgamma.EgammaElectronProducers.lowPtGsfToTrackLinks_cfi import *
"
-------------------------------------------------------------------------
"# GsfTrack to track association
from RecoEgamma.EgammaElectronProducers.lowPtGsfToTrackLinksDefault_cfi import *
"
-------------------------------------------------------------------------
"# GSFTrack to track association
from RecoEgamma.EgammaElectronProducers.lowPtGsfToTrackLinks_cfi import *
"
-------------------------------------------------------------------------
"Recom
PRs: 26325, 26404"
-------------------------------------------------------------------------
=========================================================================
"lowPtGsfToTrackLinks,
"
-------------------------------------------------------------------------
"lowPtGsfToTrackLinksDefault.currentTimeMillis(),"
-------------------------------------------------------------------------
"lowPtGsfToTrackLinks,
"
-------------------------------------------------------------------------
"Recom
PRs: 26325, 26404"
-------------------------------------------------------------------------
=========================================================================
"from RecoEgamma.EgammaElectronProducers.lowPtGsfToTrackLinksDefault_cfi import *
lowPtGsfToTrackLinks = lowPtGsfToTrackLinksDefault.clone()
"
-------------------------------------------------------------------------
"from RecoEgamma.EgammaElectronProducers.lowPtGsfToTrackLinksDefault_cfi import lowPtGsfToTrackLinksDefault
lowPtGsfToTrackLinks = lowPtGsfToTrackLinksDefault.clone()"
-------------------------------------------------------------------------
"from RecoEgamma.EgammaElectronProducers.lowPtGsfToTrackLinksDefault_cfi import *
lowPtGsfToTrackLinks = lowPtGsfToTrackLinksDefault.clone()
"
-------------------------------------------------------------------------
"Recom
PRs: 26325, 26404"
-------------------------------------------------------------------------
=========================================================================
"# keep hidden valley particles
    ""keep (4900001 <= abs(pdgId) <= 4900991)"",
# keep dark matter particles
    ""keep (51 <= abs(pdgId) <= 53)"",
"
-------------------------------------------------------------------------
"prunedGenParticles = cms.EDProducer(""GenParticlePruner"",
 # keep hidden valley and dark matter particles
	""keep (4900001 <= abs(pdgId) <= 4900991) || (51 <= abs(pdgId) <= 53)"", 
 #keep SUSY particles
 	""keep (1000001 <= abs(pdgId) <= 1000039 ) || ( 2000001 <= abs(pdgId) <= 2000015)"",
 # keep protons 
         ""keep pdgId = 2212"",
         ""keep status == 3 || ( 21 <= status <= 29) || ( 11 <= status <= 19)"",  #keep event summary (status=3 for pythia6, 21 <= status <= 29 for pythia8)"
-------------------------------------------------------------------------
"# keep hidden valley particles
    ""keep (4900001 <= abs(pdgId) <= 4900991)"",
# keep dark matter particles
    ""keep (51 <= abs(pdgId) <= 53)"",
"
-------------------------------------------------------------------------
"Recom
PRs: 26339, 26341"
-------------------------------------------------------------------------
=========================================================================
"# keep hidden valley particles
    ""keep (4900001 <= abs(pdgId) <= 4900991)"",
# keep dark matter particles
    ""keep (51 <= abs(pdgId) <= 53)"",
"
-------------------------------------------------------------------------
"prunedGenParticles = cms.EDProducer(""GenParticlePruner"",
    # keep hidden valley particles
    ""keep (4900001 <= abs(pdgId) <= 4900991)"",
    # keep dark matter particles
    ""keep (51 <= abs(pdgId) <= 53)"",
    # keep SUSY particles
    ""keep (1000001 <= abs(pdgId) <= 1000039 ) || ( 2000001 <= abs(pdgId) <= 2000015)"",
    # keep protons 
    ""keep pdgId = 2212"",
    # keep event summary (status=3 for pythia6, 21 <= status <= 29 for pythia8)
    ""keep status == 3 || ( 21 <= status <= 29) || ( 11 <= status <= 19)""
)"
-------------------------------------------------------------------------
"# keep hidden valley particles
    ""keep (4900001 <= abs(pdgId) <= 4900991)"",
# keep dark matter particles
    ""keep (51 <= abs(pdgId) <= 53)"",
"
-------------------------------------------------------------------------
"Recom
PRs: 26339, 26340"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
herwig7CommonMergingSettingsBlock = cms.PSet(
    hw_common_merging_settings = cms.vstring(
            'read snippets/PPCollider.in', 
            'cd /Herwig/EventHandlers', 
            'library FxFx.so', 
            'create Herwig::FxFxEventHandler theLesHouchesHandler', 
            'cd /Herwig/EventHandlers', 
            'library FxFx.so', 
            'create Herwig::FxFxFileReader theLHReader', 
            'cd /Herwig/Shower', 
            'library FxFxHandler.so', 
            'create Herwig::FxFxHandler FxFxHandler', 
            'set /Herwig/Shower/FxFxHandler:ShowerModel /Herwig/Shower/ShowerModel', 
            'set /Herwig/Shower/FxFxHandler:SplittingGenerator /Herwig/Shower/SplittingGenerator', 
            'cd /Herwig/EventHandlers', 
            'create ThePEG::Cuts   /Herwig/Cuts/NoCuts', 
            'cd /Herwig/EventHandlers', 
            'insert theLesHouchesHandler:FxFxReaders[0] theLHReader', 
            'set theLesHouchesHandler:WeightOption VarNegWeight', 
            'set theLesHouchesHandler:PartonExtractor /Herwig/Partons/PPExtractor', 
            'set theLesHouchesHandler:CascadeHandler /Herwig/Shower/FxFxHandler', 
            'set theLesHouchesHandler:HadronizationHandler /Herwig/Hadronization/ClusterHadHandler', 
            'set theLesHouchesHandler:DecayHandler /Herwig/Decays/DecayHandler', 
            'set /Herwig/Shower/ShowerHandler:MaxPtIsMuF Yes', 
            'set /Herwig/Shower/ShowerHandler:RestrictPhasespace Yes', 
            'set /Herwig/Shower/PartnerFinder:PartnerMethod Random', 
            'set /Herwig/Shower/PartnerFinder:ScaleChoice Partner', 
            'cd /Herwig/EventHandlers', 
            'set theLHReader:AllowedToReOpen No',
            'set theLHReader:WeightWarnings    false', 
            'set theLHReader:FileName cmsgrid_final.lhe', 
            'set theLHReader:MomentumTreatment      RescaleEnergy', 
            'set theLHReader:Cuts  /Herwig/Cuts/NoCuts', 
            'cd /Herwig/Generators', 
            'set EventGenerator:EventHandler  /Herwig/EventHandlers/theLesHouchesHandler',  
            'set EventGenerator:PrintEvent     1', 
            'set EventGenerator:MaxErrors      10000', 
            'cd /Herwig/Shower', 
            'set /Herwig/Shower/FxFxHandler:MPIHandler  /Herwig/UnderlyingEvent/MPIHandler', 
            'set /Herwig/Shower/FxFxHandler:RemDecayer  /Herwig/Partons/RemnantDecayer', 
            'set /Herwig/Shower/FxFxHandler:ShowerAlpha  AlphaQCD', 
            'set FxFxHandler:HeavyQVeto Yes', 
            'set FxFxHandler:HardProcessDetection Automatic', 
            'set FxFxHandler:ihrd        3', 
            'set FxFxHandler:njetsmax      4', 
            'set FxFxHandler:drjmin      0', 
            'cd /Herwig/Shower', 
            'set FxFxHandler:VetoIsTurnedOff VetoingIsOn', 
            'set FxFxHandler:MergeMode TreeMG5', 
            'set FxFxHandler:ETClus 20*GeV', 
            'set FxFxHandler:RClus 1.0', 
            'set FxFxHandler:EtaClusMax 5', 
            'set FxFxHandler:RClusFactor 1.5'
    )
)
"
-------------------------------------------------------------------------
"import Configuration.Generator.Herwig7Settings.Herwig7LHECommonSettings_cfi as cms

herwig7CommonMergingSettingsBlock = cms.PSet(
    hw_lhe_common_settings = cms.vstring(
        'read snippets/PPCollider.in', 
        'cd /Herwig/EventHandlers', 
        'library FxFx.so', 
        'create Herwig::FxFxEventHandler theLesHouchesHandler', 
        'cd /Herwig/EventHandlers', 
        'library FxFx.so', 
        'create Herwig::FxFxFileReader theLHReader', 
        'cd /Herwig/Shower', 
        'library FxFxHandler.so', 
        'create Herwig::FxFxHandler FxFxHandler', 
        'set /Herwig/Shower/FxFxHandler:ShowerModel /Herwig/Shower/ShowerModel', 
        'set /Herwig/Shower/FxFxHandler:SplittingGenerator /Herwig/Shower/SplittingGenerator', 
        'cd /Herwig/EventHandlers', 
        'create ThePEG::Cuts /Herwig/Cuts/NoCuts', 
        'cd /Herwig/EventHandlers', 
        'insert theLesHouchesHandler:FxFxReaders[0] theLHReader', 
        'set theLHReader:AllowedToReOpen No',
        'set theLHReader:WeightWarnings false', 
        'set theLHReader:FileName cmsgrid_final.lhe', 
        'set theLHReader:MomentumTreatment RescaleEnergy', 
        'set theLHReader:Cuts /Herwig/Cuts/NoCuts', 
        'set theLesHouchesHandler:WeightOption VarNegWeight',
        'set theLesHouchesHandler:PartonExtractor /Herwig/Partons/PPExtractor', 
        'set theLesHouchesHandler:CascadeHandler /Herwig/Shower/FxFxHandler', 
        'set theLesHouchesHandler:HadronizationHandler /Herwig/Hadronization/ClusterHadHandler', 
        'set theLesHouchesHandler:DecayHandler /Herwig/Decays/DecayHandler', 
        'set /Herwig/Shower/ShowerHandler:MaxPtIsMuF Yes', 
        'set /Herwig/Shower/ShowerHandler:RestrictPhasespace Yes', 
        'set /Herwig/Shower/PartnerFinder:PartnerMethod Random', 
        'set /Herwig/Shower/PartnerFinder:ScaleChoice Partner', 
        'cd /Herwig/Generators', 
        'set EventGenerator:EventHandler /Herwig/EventHandlers/theLesHouchesHandler',  
        'set EventGenerator:PrintEvent 1', 
        'set EventGenerator:MaxErrors 10000', 
        'cd /Herwig/Shower', 
        'set /Herwig/Shower/FxFxHandler:MPIHandler /Herwig/UnderlyingEvent/MPIHandler', 
        'set /Herwig/Shower/FxFxHandler:RemDecayer /Herwig/Partons/RemnantDecayer', 
        'set /Herwig/Shower/FxFxHandler:ShowerAlpha AlphaQCD', 
        'set FxFxHandler:HeavyQVeto Yes', 
        'set FxFxHandler:HardProcessDetection Automatic', 
        'set FxFxHandler:ihrd 3', 
        'set FxFxHandler:njetsmax 4', 
        'set FxFxHandler:drjmin 0', 
        'cd /Herwig/Shower', 
        'set FxFxHandler:VetoIsTurnedOff VetoingIsOn', 
        'set FxFxHandler:MergeMode TreeMG5', 
        'set FxFxHandler:ETClus 20*GeV', 
        'set FxFxHandler:RClus 1.0', 
        'set FxFxHandler:EtaClusMax 5', 
        'set FxFxHandler:RClusFactor 1.5'
    )
)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
herwig7CommonMergingSettingsBlock = cms.PSet(
    hw_common_merging_settings = cms.vstring(
            'read snippets/PPCollider.in', 
            'cd /Herwig/EventHandlers', 
            'library FxFx.so', 
            'create Herwig::FxFxEventHandler theLesHouchesHandler', 
            'cd /Herwig/EventHandlers', 
            'library FxFx.so', 
            'create Herwig::FxFxFileReader theLHReader', 
            'cd /Herwig/Shower', 
            'library FxFxHandler.so', 
            'create Herwig::FxFxHandler FxFxHandler', 
            'set /Herwig/Shower/FxFxHandler:ShowerModel /Herwig/Shower/ShowerModel', 
            'set /Herwig/Shower/FxFxHandler:SplittingGenerator /Herwig/Shower/SplittingGenerator', 
            'cd /Herwig/EventHandlers', 
            'create ThePEG::Cuts   /Herwig/Cuts/NoCuts', 
            'cd /Herwig/EventHandlers', 
            'insert theLesHouchesHandler:FxFxReaders[0] theLHReader', 
            'set theLesHouchesHandler:WeightOption VarNegWeight', 
            'set theLesHouchesHandler:PartonExtractor /Herwig/Partons/PPExtractor', 
            'set theLesHouchesHandler:CascadeHandler /Herwig/Shower/FxFxHandler', 
            'set theLesHouchesHandler:HadronizationHandler /Herwig/Hadronization/ClusterHadHandler', 
            'set theLesHouchesHandler:DecayHandler /Herwig/Decays/DecayHandler', 
            'set /Herwig/Shower/ShowerHandler:MaxPtIsMuF Yes', 
            'set /Herwig/Shower/ShowerHandler:RestrictPhasespace Yes', 
            'set /Herwig/Shower/PartnerFinder:PartnerMethod Random', 
            'set /Herwig/Shower/PartnerFinder:ScaleChoice Partner', 
            'cd /Herwig/EventHandlers', 
            'set theLHReader:AllowedToReOpen No',
            'set theLHReader:WeightWarnings    false', 
            'set theLHReader:FileName cmsgrid_final.lhe', 
            'set theLHReader:MomentumTreatment      RescaleEnergy', 
            'set theLHReader:Cuts  /Herwig/Cuts/NoCuts', 
            'cd /Herwig/Generators', 
            'set EventGenerator:EventHandler  /Herwig/EventHandlers/theLesHouchesHandler', 
            'set EventGenerator:NumberOfEvents 100000000', 
            'set EventGenerator:PrintEvent     1', 
            'set EventGenerator:MaxErrors      10000', 
            'cd /Herwig/Shower', 
            'set /Herwig/Shower/FxFxHandler:MPIHandler  /Herwig/UnderlyingEvent/MPIHandler', 
            'set /Herwig/Shower/FxFxHandler:RemDecayer  /Herwig/Partons/RemnantDecayer', 
            'set /Herwig/Shower/FxFxHandler:ShowerAlpha  AlphaQCD', 
            'set FxFxHandler:HeavyQVeto Yes', 
            'set FxFxHandler:HardProcessDetection Automatic', 
            'set FxFxHandler:ihrd        3', 
            'set FxFxHandler:njetsmax      4', 
            'set FxFxHandler:drjmin      0', 
            'cd /Herwig/Shower', 
            'set FxFxHandler:VetoIsTurnedOff VetoingIsOn', 
            'set FxFxHandler:MergeMode TreeMG5', 
            'set FxFxHandler:ETClus 20*GeV', 
            'set FxFxHandler:RClus 1.0', 
            'set FxFxHandler:EtaClusMax 5', 
            'set FxFxHandler:RClusFactor 1.5'
    )
)
"
-------------------------------------------------------------------------
"Recom
PRs: 26122, 26124"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
herwig7LHECommonSettingsBlock = cms.PSet(
    hw_lhe_common_settings = cms.vstring(
        'read snippets/PPCollider.in',
        'cd /Herwig/Generators',
        'cd /Herwig/EventHandlers',
        'library LesHouches.so',
        'create ThePEG::LesHouchesEventHandler LesHouchesHandler',
        'set LesHouchesHandler:PartonExtractor /Herwig/Partons/PPExtractor',
        'set LesHouchesHandler:CascadeHandler /Herwig/Shower/ShowerHandler',
        'set LesHouchesHandler:DecayHandler /Herwig/Decays/DecayHandler',
        'set LesHouchesHandler:HadronizationHandler /Herwig/Hadronization/ClusterHadHandler',
        'set LesHouchesHandler:WeightOption VarNegWeight',
        'set /Herwig/Generators/EventGenerator:EventHandler /Herwig/EventHandlers/LesHouchesHandler',
        'create ThePEG::Cuts /Herwig/Cuts/NoCuts',
        'create ThePEG::LHAPDF /Herwig/Partons/LHAPDF ThePEGLHAPDF.so',
        'set /Herwig/Partons/LHAPDF:PDFName NNPDF31_nnlo_as_0118',
        'set /Herwig/Partons/LHAPDF:RemnantHandler /Herwig/Partons/HadronRemnants',
        'set /Herwig/Particles/p:PDF /Herwig/Partons/LHAPDF',
        'set /Herwig/Particles/pbar-:PDF /Herwig/Partons/LHAPDF',
        'set /Herwig/Partons/PPExtractor:FirstPDF  /Herwig/Partons/LHAPDF',
        'set /Herwig/Partons/PPExtractor:SecondPDF /Herwig/Partons/LHAPDF',
        'create ThePEG::LesHouchesFileReader LesHouchesReader',
        'set LesHouchesReader:FileName cmsgrid_final.lhe',
        'set LesHouchesReader:AllowedToReOpen No',
        'set LesHouchesReader:InitPDFs 0',
        'set LesHouchesReader:Cuts /Herwig/Cuts/NoCuts',
        'set LesHouchesReader:MomentumTreatment RescaleEnergy',
        'set LesHouchesReader:PDFA /Herwig/Partons/LHAPDF',
        'set LesHouchesReader:PDFB /Herwig/Partons/LHAPDF',
        'insert LesHouchesHandler:LesHouchesReaders 0 LesHouchesReader'
    )
)
"
-------------------------------------------------------------------------
"```python
import FWCore.ParameterSet.Config as cms
herwig7LHECommonSettingsBlock = cms.PSet(
    hw_lhe_common_settings = cms.vstring(
        'read snippets/PPCollider.in',
        'cd /Herwig/Generators',
        'cd /Herwig/EventHandlers',
        'library LesHouches.so',
        'create ThePEG::LesHouchesEventHandler LesHouchesHandler',
        'set LesHouchesHandler:PartonExtractor /Herwig/Partons/PPExtractor',
        'set LesHouchesHandler:CascadeHandler /Herwig/Shower/ShowerHandler',
        'set LesHouchesHandler:DecayHandler /Herwig/Decays/DecayHandler',
        'set LesHouchesHandler:HadronizationHandler /Herwig/Hadronization/ClusterHadHandler',
        'set LesHouchesHandler:WeightOption VarNegWeight',
        'set /Herwig/Generators/EventGenerator:EventHandler /Herwig/EventHandlers/LesHouchesHandler',
        'create ThePEG::Cuts /Herwig/Cuts/NoCuts',
        'create ThePEG::LHAPDF /Herwig/Partons/LHAPDF ThePEGLHAPDF.so',
        'set /Herwig/Partons/LHAPDF:PDFName NNPDF31_nnlo_as_0118',
        'set /Herwig/Partons/LHAPDF:RemnantHandler /Herwig/Partons/HadronRemnants',
        'set /Herwig/Particles/p:PDF /Herwig/Partons/LHAPDF',
        'set /Herwig/Particles/pbar-:PDF /Herwig/Partons/LHAPDF',
        'set /Herwig/Partons/PPExtractor:FirstPDF  /Herwig/Partons/LHAPDF',
        'set /Herwig/Partons/PPExtractor:SecondPDF /Herwig/Partons/LHAPDF',
        'create ThePEG::LesHouchesFileReader LesHouchesReader',
        'set LesHouchesReader:FileName cmsgrid_final.lhe',
        'set LesHouchesReader:AllowedToReOpen No',
        'set LesHouchesReader:InitPDFs 0',
        'set LesHouchesReader:Cuts /Herwig/Cuts/NoCuts',
        'set LesHouchesReader:MomentumTreatment RescaleEnergy',
        'set LesHouchesReader:PDFA /Herwig/Partons/LHAPDF',
        'set LesHouchesReader:PDFB /Herwig/Partons/LHAPDF',
        'insert LesHouchesHandler:LesHouchesReaders 0 LesHouchesReader'
    )
)
```"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
herwig7LHECommonSettingsBlock = cms.PSet(
    hw_lhe_common_settings = cms.vstring(
        'read snippets/PPCollider.in',
        'cd /Herwig/Generators',
        'cd /Herwig/EventHandlers',
        'library LesHouches.so',
        'create ThePEG::LesHouchesEventHandler LesHouchesHandler',
        'set LesHouchesHandler:PartonExtractor /Herwig/Partons/PPExtractor',
        'set LesHouchesHandler:CascadeHandler /Herwig/Shower/ShowerHandler',
        'set LesHouchesHandler:DecayHandler /Herwig/Decays/DecayHandler',
        'set LesHouchesHandler:HadronizationHandler /Herwig/Hadronization/ClusterHadHandler',
        'set LesHouchesHandler:WeightOption VarNegWeight',
        'set /Herwig/Generators/EventGenerator:EventHandler /Herwig/EventHandlers/LesHouchesHandler',
        'create ThePEG::Cuts /Herwig/Cuts/NoCuts',
        'create ThePEG::LHAPDF /Herwig/Partons/LHAPDF ThePEGLHAPDF.so',
        'set /Herwig/Partons/LHAPDF:PDFName NNPDF31_nnlo_as_0118',
        'set /Herwig/Partons/LHAPDF:RemnantHandler /Herwig/Partons/HadronRemnants',
        'set /Herwig/Particles/p:PDF /Herwig/Partons/LHAPDF',
        'set /Herwig/Particles/pbar-:PDF /Herwig/Partons/LHAPDF',
        'set /Herwig/Partons/PPExtractor:FirstPDF  /Herwig/Partons/LHAPDF',
        'set /Herwig/Partons/PPExtractor:SecondPDF /Herwig/Partons/LHAPDF',
        'create ThePEG::LesHouchesFileReader LesHouchesReader',
        'set LesHouchesReader:FileName cmsgrid_final.lhe',
        'set LesHouchesReader:AllowedToReOpen No',
        'set LesHouchesReader:InitPDFs 0',
        'set LesHouchesReader:Cuts /Herwig/Cuts/NoCuts',
        'set LesHouchesReader:MomentumTreatment RescaleEnergy',
        'set LesHouchesReader:PDFA /Herwig/Partons/LHAPDF',
        'set LesHouchesReader:PDFB /Herwig/Partons/LHAPDF',
        'insert LesHouchesHandler:LesHouchesReaders 0 LesHouchesReader'
    )
)
"
-------------------------------------------------------------------------
"Recom
PRs: 26122, 26124"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
herwig7LHEMG5aMCatNLOSettingsBlock = cms.PSet(
    hw_lhe_MG5aMCatNLO_settings = cms.vstring(
        'set /Herwig/Shower/KinematicsReconstructor:InitialInitialBoostOption LongTransBoost',
        'set /Herwig/Shower/KinematicsReconstructor:ReconstructionOption General',
        'set /Herwig/Shower/KinematicsReconstructor:FinalStateReconOption Default',
        'set /Herwig/Shower/KinematicsReconstructor:InitialStateReconOption Rapidity',
        'set /Herwig/Shower/ShowerHandler:SpinCorrelations Yes',
        'set /Herwig/Particles/t:NominalMass 172.5'
    )
)
"
-------------------------------------------------------------------------
"from Configuration.Generator.Herwig7Settings.Herwig7LHECommonSettings_cfi import *
herwig7LHEMG5aMCatNLOSettingsBlock = cms.PSet(
    hw_lhe_MG5aMCatNLO_settings = cms.vstring(
        'set /Herwig/Shower/KinematicsReconstructor:InitialInitialBoostOption LongTransBoost',
        'set /Herwig/Shower/KinematicsReconstructor:ReconstructionOption General',
        'set /Herwig/Shower/KinematicsReconstructor:FinalStateReconOption Default',
        'set /Herwig/Shower/KinematicsReconstructor:InitialStateReconOption Rapidity',
        'set /Herwig/Shower/ShowerHandler:SpinCorrelations Yes',
        'set /Herwig/Particles/t:NominalMass 172.5'
    )
)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
herwig7LHEMG5aMCatNLOSettingsBlock = cms.PSet(
    hw_lhe_MG5aMCatNLO_settings = cms.vstring(
        'set /Herwig/Shower/KinematicsReconstructor:InitialInitialBoostOption LongTransBoost',
        'set /Herwig/Shower/KinematicsReconstructor:ReconstructionOption General',
        'set /Herwig/Shower/KinematicsReconstructor:FinalStateReconOption Default',
        'set /Herwig/Shower/KinematicsReconstructor:InitialStateReconOption Rapidity',
        'set /Herwig/Shower/ShowerHandler:SpinCorrelations Yes',
        'set /Herwig/Particles/t:NominalMass 172.5'
    )
)
"
-------------------------------------------------------------------------
"Recom
PRs: 26122, 26124"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
herwig7LHEPowhegSettingsBlock = cms.PSet(
    hw_lhe_Powheg_settings = cms.vstring(
        'set /Herwig/Shower/ShowerHandler:MaxPtIsMuF Yes',
        'set /Herwig/Shower/ShowerHandler:RestrictPhasespace Yes',
        'set /Herwig/Shower/PartnerFinder:PartnerMethod Random',
        'set /Herwig/Shower/PartnerFinder:ScaleChoice Partner',
        'set /Herwig/Shower/GtoQQbarSplitFn:AngularOrdered Yes',
        'set /Herwig/Shower/GammatoQQbarSplitFn:AngularOrdered Yes',
        'set /Herwig/Particles/t:NominalMass 172.5'
    )
)
"
-------------------------------------------------------------------------
"from Configuration.Generator.Herwig7Settings.Herwig7LHEPowhegSettings_cfi import *

herwig7LHEPowhegSettingsBlock = cms.PSet(
    hw_lhe_Powheg_settings = cms.vstring(
        'set /Herwig/Shower/ShowerHandler:MaxPtIsMuF Yes',
        'set /Herwig/Shower/ShowerHandler:RestrictPhasespace Yes',
        'set /Herwig/Shower/PartnerFinder:PartnerMethod Random',
        'set /Herwig/Shower/PartnerFinder:ScaleChoice Partner',
        'set /Herwig/Shower/GtoQQbarSplitFn:AngularOrdered Yes',
        'set /Herwig/Shower/GammatoQQbarSplitFn:AngularOrdered Yes',
        'set /Herwig/Particles/t:NominalMass 172.5'
    )
)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
herwig7LHEPowhegSettingsBlock = cms.PSet(
    hw_lhe_Powheg_settings = cms.vstring(
        'set /Herwig/Shower/ShowerHandler:MaxPtIsMuF Yes',
        'set /Herwig/Shower/ShowerHandler:RestrictPhasespace Yes',
        'set /Herwig/Shower/PartnerFinder:PartnerMethod Random',
        'set /Herwig/Shower/PartnerFinder:ScaleChoice Partner',
        'set /Herwig/Shower/GtoQQbarSplitFn:AngularOrdered Yes',
        'set /Herwig/Shower/GammatoQQbarSplitFn:AngularOrdered Yes',
        'set /Herwig/Particles/t:NominalMass 172.5'
    )
)
"
-------------------------------------------------------------------------
"Recom
PRs: 26122, 26124"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
externalLHEProducer = cms.EDProducer(""ExternalLHEProducer"",
    args = cms.vstring('/cvmfs/cms.cern.ch/phys_generator/gridpacks/2017/13TeV/madgraph/V5_2.4.2/DYJetsToQQ_HT180toInf/v1/DYJetsToQQ_HT180toInf_slc6_amd64_gcc481_CMSSW_7_1_30_tarball.tar.xz'),
    nEvents = cms.untracked.uint32(5000),
    numberOfParameters = cms.uint32(1),
    outputFile = cms.string('cmsgrid_final.lhe'),
    scriptName = cms.FileInPath('GeneratorInterface/LHEInterface/data/run_generic_tarball_cvmfs.sh')
)
from Configuration.Generator.Herwig7Settings.Herwig7StableParticlesForDetector_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7CH3TuneSettings_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7CommonMergingSettings_cfi import *
generator = cms.EDFilter(""Herwig7GeneratorFilter"",
    herwig7CommonMergingSettingsBlock,
    herwig7StableParticlesForDetectorBlock,
    herwig7CH3SettingsBlock,
    configFiles = cms.vstring(),
    crossSection = cms.untracked.double(-1),
    dataLocation = cms.string('${HERWIGPATH:-6}'),
    eventHandlers = cms.string('/Herwig/EventHandlers'),
    filterEfficiency = cms.untracked.double(1.0),
    generatorModule = cms.string('/Herwig/Generators/EventGenerator'),    
    hw_user_settings = cms.vstring(
        'cd /Herwig/EventHandlers',
        'set EventHandler:LuminosityFunction:Energy 13000*GeV',
        'cd /',
        'set /Herwig/Particles/h0:NominalMass 125.0',
        'set /Herwig/Shower/FxFxHandler:njetsmax    4',
        'set /Herwig/Shower/FxFxHandler:RClus 1.0',
        'set /Herwig/Shower/FxFxHandler:ETClus 20*GeV'
    ),     
    parameterSets = cms.vstring(
        'hw_common_merging_settings',
        'herwig7CH3PDF', 
        'herwig7CH3AlphaS', 
        'herwig7CH3MPISettings', 
        'herwig7StableParticlesForDetector',
        'hw_user_settings'
    ),
    repository = cms.string('${HERWIGPATH}/HerwigDefaults.rpo'),
    run = cms.string('Merging'),
    runModeList = cms.untracked.string('read,run'),
)
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
externalLHEProducer = cms.EDProducer(""ExternalLHEProducer"",
    args = cms.vstring('/cvmfs/cms.cern.ch/phys_generator/gridpacks/powheg/V2/TT_hvq/TT_hdamp_NNPDF31_NNLO_inclusive.tgz'),
    nEvents = cms.untracked.uint32(5000),
    numberOfParameters = cms.uint32(1),
    outputFile = cms.string('cmsgrid_final.lhe'),
    scriptName = cms.FileInPath('GeneratorInterface/LHEInterface/data/run_generic_tarball_cvmfs.sh')
)
from Configuration.Generator.Herwig7Settings.Herwig7StableParticlesForDetector_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7CH3TuneSettings_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7CommonMergingSettings_cfi import *
generator = cms.EDFilter(""Herwig7GeneratorFilter"",
    herwig7CommonMergingSettingsBlock,
    herwig7StableParticlesForDetectorBlock,
    herwig7CH3SettingsBlock,
    configFiles = cms.vstring(),
    crossSection = cms.untracked.double(-1),
    dataLocation = cms.string(''),
    eventHandlers = cms.string('/Herwig/EventHandlers'),
    filterEfficiency = cms.untracked.double(1.0),
    generatorModule = cms.string('/Herwig/Generators/EventGenerator'),    
    hw_user_settings = cms.vstring(
        'cd /Herwig/EventHandlers',
        'set EventHandler:LuminosityFunction:Energy 13000*GeV',
        'cd /',
        'set /Herwig/Particles/h0:NominalMass 125.0',
        'set /Herwig/Shower/FxFxHandler:njetsmax    4',
        'set /Herwig/Shower/FxFxHandler:RClus 1.0',
        'set /Herwig/Shower/FxFxHandler:ETClus 20*GeV'
    ),     
    parameterSets = cms.vstring(
        'hw_common_merging_settings',
        'herwig7CH3PDF', 
        'herwig7CH3AlphaS', 
        'herwig7CH3MPISettings', 
        'herwig7StableParticlesForDetector',
        'hw_user_settings'
    ),
    repository = cms.string('/cvmfs/cms.cern.ch/phys_generator/gridpacks/powheg/V2/TT_hvq/TT_hdamp_NNPDF31_NNLO_inclusive.tgz/HerwigDefaults.rpo'),
    run = cms.string('Merging'),
    runModeList = cms.untracked.string('read')"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
externalLHEProducer = cms.EDProducer(""ExternalLHEProducer"",
    args = cms.vstring('/cvmfs/cms.cern.ch/phys_generator/gridpacks/2017/13TeV/madgraph/V5_2.4.2/DYJetsToQQ_HT180toInf/v1/DYJetsToQQ_HT180toInf_slc6_amd64_gcc481_CMSSW_7_1_30_tarball.tar.xz'),
    nEvents = cms.untracked.uint32(5000),
    numberOfParameters = cms.uint32(1),
    outputFile = cms.string('cmsgrid_final.lhe'),
    scriptName = cms.FileInPath('GeneratorInterface/LHEInterface/data/run_generic_tarball_cvmfs.sh')
)
from Configuration.Generator.Herwig7Settings.Herwig7StableParticlesForDetector_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7CH3TuneSettings_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7CommonMergingSettings_cfi import *
generator = cms.EDFilter(""Herwig7GeneratorFilter"",
    herwig7CommonMergingSettingsBlock,
    herwig7StableParticlesForDetectorBlock,
    herwig7CH3SettingsBlock,
    configFiles = cms.vstring(),
    crossSection = cms.untracked.double(-1),
    dataLocation = cms.string('${HERWIGPATH:-6}'),
    eventHandlers = cms.string('/Herwig/EventHandlers'),
    filterEfficiency = cms.untracked.double(1.0),
    generatorModule = cms.string('/Herwig/Generators/EventGenerator'),    
    hw_user_settings = cms.vstring(
        'cd /Herwig/EventHandlers',
        'set EventHandler:LuminosityFunction:Energy 13000*GeV',
        'cd /',
        'set /Herwig/Particles/h0:NominalMass 125.0',
        'set /Herwig/Shower/FxFxHandler:njetsmax    4',
        'set /Herwig/Shower/FxFxHandler:RClus 1.0',
        'set /Herwig/Shower/FxFxHandler:ETClus 20*GeV'
    ),     
    parameterSets = cms.vstring(
        'hw_common_merging_settings',
        'herwig7CH3PDF', 
        'herwig7CH3AlphaS', 
        'herwig7CH3MPISettings', 
        'herwig7StableParticlesForDetector',
        'hw_user_settings'
    ),
    repository = cms.string('${HERWIGPATH}/HerwigDefaults.rpo'),
    run = cms.string('Merging'),
    runModeList = cms.untracked.string('read,run'),
)
"
-------------------------------------------------------------------------
"Recom
PRs: 26122, 26124"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
externalLHEProducer = cms.EDProducer(""ExternalLHEProducer"",
    args = cms.vstring('/cvmfs/cms.cern.ch/phys_generator/gridpacks/2017/13TeV/powheg/V2/TT_hvq/TT_hdamp_NNPDF31_NNLO_inclusive.tgz'),
    nEvents = cms.untracked.uint32(5000),
    numberOfParameters = cms.uint32(1),
    outputFile = cms.string('cmsgrid_final.lhe'),
    scriptName = cms.FileInPath('GeneratorInterface/LHEInterface/data/run_generic_tarball_cvmfs.sh')
)
from Configuration.Generator.Herwig7Settings.Herwig7LHECommonSettings_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7StableParticlesForDetector_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7CH3TuneSettings_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7LHEPowhegSettings_cfi import *
generator = cms.EDFilter(""Herwig7GeneratorFilter"",
    herwig7LHECommonSettingsBlock,
    herwig7LHEPowhegSettingsBlock,
    herwig7StableParticlesForDetectorBlock,
    herwig7CH3SettingsBlock,
    configFiles = cms.vstring(),
    crossSection = cms.untracked.double(-1),
    dataLocation = cms.string('${HERWIGPATH:-6}'),
    eventHandlers = cms.string('/Herwig/EventHandlers'),
    filterEfficiency = cms.untracked.double(1.0),
    generatorModule = cms.string('/Herwig/Generators/EventGenerator'),    
    hw_user_settings = cms.vstring(
        'cd /Herwig/EventHandlers',
        'set EventHandler:LuminosityFunction:Energy 13000*GeV',
        'cd /',
        'set /Herwig/Particles/h0:NominalMass 125.0'
    ),     
    parameterSets = cms.vstring(
        'hw_lhe_common_settings',
        'hw_lhe_Powheg_settings',
        'herwig7CH3PDF', 
        'herwig7CH3AlphaS', 
        'herwig7CH3MPISettings', 
        'herwig7StableParticlesForDetector',
        'hw_user_settings'
    ),
    repository = cms.string('${HERWIGPATH}/HerwigDefaults.rpo'),
    run = cms.string('InterfaceMatchboxTest'),
    runModeList = cms.untracked.string('read,run'),
)
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
externalLHEProducer = cms.EDProducer(""ExternalLHEProducer"",
    args = cms.vstring('/cvmfs/cms.cern.ch/phys_generator/gridpacks/2017/13TeV/powheg/V2/TT_hvq/TT_hdamp_NNPDF31_NNLO_inclusive.tgz'),
    nEvents = cms.untracked.uint32(5000),
    numberOfParameters = cms.uint32(1),
    outputFile = cms.string('cmsgrid_final.lhe'),
    scriptName = cms.FileInPath('GeneratorInterface/LHEInterface/data/run_generic_tarball_cvmfs.sh')
)
from Configuration.Generator.Herwig7Settings.Herwig7LHECommonSettings_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7StableParticlesForDetector_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7CH3TuneSettings_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7LHEPowhegSettings_cfi import *
generator = cms.EDFilter(""Herwig7GeneratorFilter"",
    herwig7LHECommonSettingsBlock,
    herwig7LHEPowhegSettingsBlock,
    herwig7StableParticlesForDetectorBlock,
    herwig7CH3SettingsBlock,
    configFiles = cms.vstring(),
    crossSection = cms.untracked.double(-1),
    dataLocation = cms.string('${HERWIGPATH:-6}'),
    eventHandlers = cms.string('/Herwig/EventHandlers'),
    filterEfficiency = cms.untracked.double(1.0),
    generatorModule = cms.string('/Herwig/Generators/EventGenerator'),    
    hw_user_settings = cms.vstring(
        'cd /Herwig/EventHandlers',
        'set EventHandler:LuminosityFunction:Energy 13000*GeV',
        'cd /',
        'set /Herwig/Particles/h0:NominalMass 125.0'
    ),     
    parameterSets = cms.vstring(
        'hw_lhe_common_settings',
        'hw_lhe_Powheg_settings',
        'herwig7CH3PDF', 
        'herwig7CH3AlphaS', 
        'herwig7CH3MPISettings', 
        'herwig7StableParticlesForDetector',
        'hw_user_settings'
    ),
    repository = cms.string('${HERWIGPATH}/HerwigDefaults.rpo'),
    run = cms.string('InterfaceMatchboxTest'),
    runModeList = cms.untracked.string('read,run'),
)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
externalLHEProducer = cms.EDProducer(""ExternalLHEProducer"",
    args = cms.vstring('/cvmfs/cms.cern.ch/phys_generator/gridpacks/2017/13TeV/powheg/V2/TT_hvq/TT_hdamp_NNPDF31_NNLO_inclusive.tgz'),
    nEvents = cms.untracked.uint32(5000),
    numberOfParameters = cms.uint32(1),
    outputFile = cms.string('cmsgrid_final.lhe'),
    scriptName = cms.FileInPath('GeneratorInterface/LHEInterface/data/run_generic_tarball_cvmfs.sh')
)
from Configuration.Generator.Herwig7Settings.Herwig7LHECommonSettings_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7StableParticlesForDetector_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7CH3TuneSettings_cfi import *
from Configuration.Generator.Herwig7Settings.Herwig7LHEPowhegSettings_cfi import *
generator = cms.EDFilter(""Herwig7GeneratorFilter"",
    herwig7LHECommonSettingsBlock,
    herwig7LHEPowhegSettingsBlock,
    herwig7StableParticlesForDetectorBlock,
    herwig7CH3SettingsBlock,
    configFiles = cms.vstring(),
    crossSection = cms.untracked.double(-1),
    dataLocation = cms.string('${HERWIGPATH:-6}'),
    eventHandlers = cms.string('/Herwig/EventHandlers'),
    filterEfficiency = cms.untracked.double(1.0),
    generatorModule = cms.string('/Herwig/Generators/EventGenerator'),    
    hw_user_settings = cms.vstring(
        'cd /Herwig/EventHandlers',
        'set EventHandler:LuminosityFunction:Energy 13000*GeV',
        'cd /',
        'set /Herwig/Particles/h0:NominalMass 125.0'
    ),     
    parameterSets = cms.vstring(
        'hw_lhe_common_settings',
        'hw_lhe_Powheg_settings',
        'herwig7CH3PDF', 
        'herwig7CH3AlphaS', 
        'herwig7CH3MPISettings', 
        'herwig7StableParticlesForDetector',
        'hw_user_settings'
    ),
    repository = cms.string('${HERWIGPATH}/HerwigDefaults.rpo'),
    run = cms.string('InterfaceMatchboxTest'),
    runModeList = cms.untracked.string('read,run'),
)
"
-------------------------------------------------------------------------
"Recom
PRs: 26122, 26124"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
pythia8PSweightsSettingsBlock = cms.PSet(
    pythia8PSweightsSettings = cms.vstring(
        'UncertaintyBands:doVariations = on',
# 3 sets of variations for ISR&FSR up/down
# Reduced sqrt(2)/(1/sqrt(2)), Default 2/0.5 and Conservative 4/0.25 variations
# 32 decorrelated variations of muR and non-singular terms (cNS) for each branching type
        'UncertaintyBands:List = {\
isrRedHi isr:muRfac=0.707,fsrRedHi fsr:muRfac=0.707,isrRedLo isr:muRfac=1.414,fsrRedLo fsr:muRfac=1.414,\
isrDefHi isr:muRfac=0.5,fsrDefHi fsr:muRfac=0.5,isrDefLo isr:muRfac=2.0,fsrDefLo fsr:muRfac=2.0,\
isrConHi isr:muRfac=0.25,fsrConHi fsr:muRfac=0.25,isrConLo isr:muRfac=4.0,fsrConLo fsr:muRfac=4.0,\
fsr_G2GG_muR_dn fsr:G2GG:muRfac=0.5,\
fsr_G2GG_muR_up fsr:G2GG:muRfac=2.0,\
fsr_G2QQ_muR_dn fsr:G2QQ:muRfac=0.5,\
fsr_G2QQ_muR_up fsr:G2QQ:muRfac=2.0,\
fsr_Q2QG_muR_dn fsr:Q2QG:muRfac=0.5,\
fsr_Q2QG_muR_up fsr:Q2QG:muRfac=2.0,\
fsr_X2XG_muR_dn fsr:X2XG:muRfac=0.5,\
fsr_X2XG_muR_up fsr:X2XG:muRfac=2.0,\
fsr_G2GG_cNS_dn fsr:G2GG:cNS=-2.0,\
fsr_G2GG_cNS_up fsr:G2GG:cNS=2.0,\
fsr_G2QQ_cNS_dn fsr:G2QQ:cNS=-2.0,\
fsr_G2QQ_cNS_up fsr:G2QQ:cNS=2.0,\
fsr_Q2QG_cNS_dn fsr:Q2QG:cNS=-2.0,\
fsr_Q2QG_cNS_up fsr:Q2QG:cNS=2.0,\
fsr_X2XG_cNS_dn fsr:X2XG:cNS=-2.0,\
fsr_X2XG_cNS_up fsr:X2XG:cNS=2.0,\
isr_G2GG_muR_dn isr:G2GG:muRfac=0.5,\
isr_G2GG_muR_up isr:G2GG:muRfac=2.0,\
isr_G2QQ_muR_dn isr:G2QQ:muRfac=0.5,\
isr_G2QQ_muR_up isr:G2QQ:muRfac=2.0,\
isr_Q2QG_muR_dn isr:Q2QG:muRfac=0.5,\
isr_Q2QG_muR_up isr:Q2QG:muRfac=2.0,\
isr_X2XG_muR_dn isr:X2XG:muRfac=0.5,\
isr_X2XG_muR_up isr:X2XG:muRfac=2.0,\
isr_G2GG_cNS_dn isr:G2GG:cNS=-2.0,\
isr_G2GG_cNS_up isr:G2GG:cNS=2.0,\
isr_G2QQ_cNS_dn isr:G2QQ:cNS=-2.0,\
isr_G2QQ_cNS_up isr:G2QQ:cNS=2.0,\
isr_Q2QG_cNS_dn isr:Q2QG:cNS=-2.0,\
isr_Q2QG_cNS_up isr:Q2QG:cNS=2.0,\
isr_X2XG_cNS_dn isr:X2XG:cNS=-2.0,\
isr_X2XG_cNS_up isr:X2XG:cNS=2.0}',
        
        'UncertaintyBands:nFlavQ = 4', # define X=bottom/top in X2XG variations
        'UncertaintyBands:MPIshowers = on',
        'UncertaintyBands:overSampleFSR = 10.0',
        'UncertaintyBands:overSampleISR = 10.0',
        'UncertaintyBands:FSRpTmin2Fac = 20',
        'UncertaintyBands:ISRpTmin2Fac = 1'
        )
)
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
pythia8PSweightsSettingsBlock = cms.PSet(
    pythia8PSweightsSettings = cms.vstring(
        'UncertaintyBands:doVariations = on',
        'UncertaintyBands:List = {\
isrRedHi isr:muRfac=0.707,fsrRedHi fsr:muRfac=0.707,isrRedLo isr:muRfac=1.414,fsrRedLo fsr:muRfac=1.414,\
isrDefHi isr:muRfac=0.5,fsrDefHi fsr:muRfac=0.5,isrDefLo isr:muRfac=2.0,fsrDefLo fsr:muRfac=2.0,\
isrConHi isr:muRfac=0.25,fsrConHi fsr:muRfac=0.25,isrConLo isr:muRfac=4.0,fsrConLo fsr:muRfac=4.0,\
fsr_G2GG_muR_dn fsr:G2GG:muRfac=0.5,\
fsr_G2GG_muR_up fsr:G2GG:muRfac=2.0,\
fsr_G2QQ_muR_dn fsr:G2QQ:muRfac=0.5,\
fsr_G2QQ_muR_up fsr:G2QQ:muRfac=2.0,\
fsr_Q2QG_muR_dn fsr:Q2QG:muRfac=0.5,\
fsr_Q2QG_muR_up fsr:Q2QG:muRfac=2.0,\
fsr_X2XG_muR_dn fsr:X2XG:muRfac=0.5,\
fsr_X2XG_muR_up fsr:X2XG:muRfac=2.0,\
fsr_G2GG_cNS_dn fsr:G2GG:cNS=-2.0,\
fsr_G2GG_cNS_up fsr:G2GG:cNS=2.0,\
fsr_G2QQ_cNS_dn fsr:G2QQ:cNS=-2.0,\
fsr_G2QQ_cNS_up fsr:G2QQ:cNS=2.0,\
fsr_Q2QG_cNS_dn fsr:Q2QG:cNS=-2.0,\
fsr_Q2QG_cNS_up fsr:Q2QG:cNS=2.0,\
fsr_X2XG_cNS_dn fsr:X2XG:cNS=-2.0,\
fsr_X2XG_cNS_up fsr:X2XG:cNS=2.0,\
isr_G2GG_muR_dn isr:G2GG:muRfac=0.5,\
isr_G2GG_muR_up isr:G2GG:muRfac=2.0,\
isr_G2QQ_muR_dn isr:G2QQ:muRfac=0.5,\
isr_G2QQ_muR_up isr:G2QQ:muRfac=2.0,\
isr_Q2QG_muR_dn isr:Q2QG:muRfac=0.5,\
isr_Q2QG_muR_up isr:Q2QG:muRfac=2.0,\
isr_X2XG_muR_dn isr:X2XG:muRfac=0.5,\
isr_X2XG_muR_up isr:X2XG:muRfac=2.0,\
isr_G2GG_cNS_dn isr:G2GG:cNS=-2.0,\
isr_G2GG_cNS_up isr:G2GG:cNS=2.0,\
isr_G2QQ_cNS_dn isr:G2QQ:cNS=-2.0,\
isr_G2QQ_cNS_up isr:G2QQ:cNS=2.0,\
isr_Q2QG_cNS_dn isr:Q2QG:cNS=-2.0,\
isr_Q2QG_cNS_up isr:Q2QG:cNS=2.0,\
isr_X2XG_cNS_dn isr:X2XG:cNS=-2.0,\
isr_X2XG_cNS_up isr:X2XG:cNS=2.0}',        
        'UncertaintyBands:nFlavQ = 4', 
        'UncertaintyBands:MPIshowers = on',
        'UncertaintyBands:overSampleFSR = 10.0',
        'UncertaintyBands:overSampleISR = 10.0',
        'UncertaintyBands:FSRpTmin2Fac = 20',
        'UncertaintyBands:ISRpTmin2Fac = 1'
        )
)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
pythia8PSweightsSettingsBlock = cms.PSet(
    pythia8PSweightsSettings = cms.vstring(
        'UncertaintyBands:doVariations = on',
# 3 sets of variations for ISR&FSR up/down
# Reduced sqrt(2)/(1/sqrt(2)), Default 2/0.5 and Conservative 4/0.25 variations
# 32 decorrelated variations of muR and non-singular terms (cNS) for each branching type
        'UncertaintyBands:List = {\
isrRedHi isr:muRfac=0.707,fsrRedHi fsr:muRfac=0.707,isrRedLo isr:muRfac=1.414,fsrRedLo fsr:muRfac=1.414,\
isrDefHi isr:muRfac=0.5,fsrDefHi fsr:muRfac=0.5,isrDefLo isr:muRfac=2.0,fsrDefLo fsr:muRfac=2.0,\
isrConHi isr:muRfac=0.25,fsrConHi fsr:muRfac=0.25,isrConLo isr:muRfac=4.0,fsrConLo fsr:muRfac=4.0,\
fsr_G2GG_muR_dn fsr:G2GG:muRfac=0.5,\
fsr_G2GG_muR_up fsr:G2GG:muRfac=2.0,\
fsr_G2QQ_muR_dn fsr:G2QQ:muRfac=0.5,\
fsr_G2QQ_muR_up fsr:G2QQ:muRfac=2.0,\
fsr_Q2QG_muR_dn fsr:Q2QG:muRfac=0.5,\
fsr_Q2QG_muR_up fsr:Q2QG:muRfac=2.0,\
fsr_X2XG_muR_dn fsr:X2XG:muRfac=0.5,\
fsr_X2XG_muR_up fsr:X2XG:muRfac=2.0,\
fsr_G2GG_cNS_dn fsr:G2GG:cNS=-2.0,\
fsr_G2GG_cNS_up fsr:G2GG:cNS=2.0,\
fsr_G2QQ_cNS_dn fsr:G2QQ:cNS=-2.0,\
fsr_G2QQ_cNS_up fsr:G2QQ:cNS=2.0,\
fsr_Q2QG_cNS_dn fsr:Q2QG:cNS=-2.0,\
fsr_Q2QG_cNS_up fsr:Q2QG:cNS=2.0,\
fsr_X2XG_cNS_dn fsr:X2XG:cNS=-2.0,\
fsr_X2XG_cNS_up fsr:X2XG:cNS=2.0,\
isr_G2GG_muR_dn isr:G2GG:muRfac=0.5,\
isr_G2GG_muR_up isr:G2GG:muRfac=2.0,\
isr_G2QQ_muR_dn isr:G2QQ:muRfac=0.5,\
isr_G2QQ_muR_up isr:G2QQ:muRfac=2.0,\
isr_Q2QG_muR_dn isr:Q2QG:muRfac=0.5,\
isr_Q2QG_muR_up isr:Q2QG:muRfac=2.0,\
isr_X2XG_muR_dn isr:X2XG:muRfac=0.5,\
isr_X2XG_muR_up isr:X2XG:muRfac=2.0,\
isr_G2GG_cNS_dn isr:G2GG:cNS=-2.0,\
isr_G2GG_cNS_up isr:G2GG:cNS=2.0,\
isr_G2QQ_cNS_dn isr:G2QQ:cNS=-2.0,\
isr_G2QQ_cNS_up isr:G2QQ:cNS=2.0,\
isr_Q2QG_cNS_dn isr:Q2QG:cNS=-2.0,\
isr_Q2QG_cNS_up isr:Q2QG:cNS=2.0,\
isr_X2XG_cNS_dn isr:X2XG:cNS=-2.0,\
isr_X2XG_cNS_up isr:X2XG:cNS=2.0}',
        
        'UncertaintyBands:nFlavQ = 4', # define X=bottom/top in X2XG variations
        'UncertaintyBands:MPIshowers = on',
        'UncertaintyBands:overSampleFSR = 10.0',
        'UncertaintyBands:overSampleISR = 10.0',
        'UncertaintyBands:FSRpTmin2Fac = 20',
        'UncertaintyBands:ISRpTmin2Fac = 1'
        )
)
"
-------------------------------------------------------------------------
"Recom
PRs: 25860, 26067"
-------------------------------------------------------------------------
=========================================================================
"from PhysicsTools.PatAlgos.lowPtGsfLinksDefault_cfi import *
lowPtGsfLinks = lowPtGsfLinksDefault.clone()
"
-------------------------------------------------------------------------
"from PhysicsTools.PatAlgos.lowPtGsfLinksDefault_cfi import lowPtGsfLinksDefault
lowPtGsfLinks = lowPtGsfLinksDefault.clone()"
-------------------------------------------------------------------------
"from PhysicsTools.PatAlgos.lowPtGsfLinksDefault_cfi import *
lowPtGsfLinks = lowPtGsfLinksDefault.clone()
"
-------------------------------------------------------------------------
"Recom
PRs: 26031, 26036"
-------------------------------------------------------------------------
=========================================================================
"""--pileup_input"" : ""dbs:/RelValFS_PREMIXUP18_PU50/%s/PREMIX""%(baseDataSetRelease[20],),
"
-------------------------------------------------------------------------
"FS_PREMIXUP18_PU50_OVERLAY = merge([
         {""-s"" : ""GEN,SIM,RECOBEFMIX,DIGI:pdigi_valid,DATAMIX,L1,DIGI2RAW,L1Reco,RECO,VALIDATION"",
          ""--datamix"" : ""PreMix"",
          ""--pileup_input"" : ""dbs:/RelValFS_PREMIXUP18_PU50/%s/PREMIX""%(baseDataSetRelease[20],),
          ""--procModifiers"": ""premix_stage2"",
          },
         Kby(100,500),step1FastUpg2018Defaults])"
-------------------------------------------------------------------------
"""-s"":""GEN,SIM,RECOBEFMIX,DIGI,L1,DIGI2RAW"",
""--datatier"":""GEN-SIM-DIGI-RAW"",
"
-------------------------------------------------------------------------
"Recom
PRs: 25683, 25754"
-------------------------------------------------------------------------
=========================================================================
"steps['DIGIHI2018']=merge([{'-s':'DIGI:pdigi_hi,L1,DIGI2RAW,HLT:@fake2'}, hiDefaults2018, {'--pileup':'HiMixNoPU'}, step2Upg2015Defaults])
"
-------------------------------------------------------------------------
"steps['DIGIHI2018']=merge([{'-s':'reGEN,reSIM,DIGI:pdigi_hi,L1,DIGI2RAW,HLT:@fake2'}, hiDefaults2018, {'--pileup':'HiMixNoPU'}, step2Upg2015Defaults])"
-------------------------------------------------------------------------
"steps['DIGIHI2018']=merge([{'-s':'DIGI:pdigi_hi,L1,DIGI2RAW,HLT:@fake2'}, hiDefaults2018, {'--pileup':'HiMixNoPU'}, step2Upg2015Defaults])
"
-------------------------------------------------------------------------
"Recom
PRs: 25480, 25481"
-------------------------------------------------------------------------
=========================================================================
"#skip newCombinedSeeds if it is a trivial seed merger
"
-------------------------------------------------------------------------
"- Remove the comment line ""#skip newCombinedSeeds if it is a trivial seed merger"""
-------------------------------------------------------------------------
"#skip newCombinedSeeds if it is a trivial seed merger
"
-------------------------------------------------------------------------
"Recom
PRs: 25199, 25202"
-------------------------------------------------------------------------
=========================================================================
"InputLabel = cms.InputTag(""rawDataCollector""),
"
-------------------------------------------------------------------------
"InputLabel = cms.InputTag(""rawDataCollector"")"
-------------------------------------------------------------------------
"InputLabel = cms.InputTag(""rawDataCollector""),
"
-------------------------------------------------------------------------
"Recom
PRs: 25193, 25194"
-------------------------------------------------------------------------
=========================================================================
"InputLabel = cms.InputTag(""rawDataCollector""),
"
-------------------------------------------------------------------------
"InputLabel = cms.InputTag(""rawDataCollector"", ""stage2Raw"")"
-------------------------------------------------------------------------
"InputLabel = cms.InputTag(""rawDataCollector""),
"
-------------------------------------------------------------------------
"Recom
PRs: 25193, 25194"
-------------------------------------------------------------------------
=========================================================================
"InputLabel = cms.InputTag(""rawDataCollector""),
"
-------------------------------------------------------------------------
"gmtStage2Digis = cms.EDProducer(
     ""L1TRawToDigi"",
     Setup = cms.string(""stage2::GMTSetup""),
     FedIds = cms.vint32(1402),
     InputLabel = cms.InputTag(""rawDataCollector""),
 )"
-------------------------------------------------------------------------
"InputLabel = cms.InputTag(""rawDataCollector""),
"
-------------------------------------------------------------------------
"Recom
PRs: 25193, 25194"
-------------------------------------------------------------------------
=========================================================================
"InputLabel = cms.InputTag(""rawDataCollector""),
"
-------------------------------------------------------------------------
"Setup           = cms.InputTag(""rawDataCollector""),"
-------------------------------------------------------------------------
"InputLabel = cms.InputTag(""rawDataCollector""),
"
-------------------------------------------------------------------------
"Recom
PRs: 25193, 25194"
-------------------------------------------------------------------------
=========================================================================
"PbPbZMuHLTFilter = copy.deepcopy(hltHighLevel)
PbPbZMuHLTFilter.throw = cms.bool(False)
PbPbZMuHLTFilter.HLTPaths = [""HLT_HIL3Mu*""]
looseMuonsForPbPbZMuSkim = cms.EDFilter(""TrackSelector"",
"
-------------------------------------------------------------------------
"PbPbZMuHLTFilter = copy.deepcopy(hltHighLevel)
PbPbZMuHLTFilter.throw = cms.bool(False)
PbPbZMuHLTFilter.HLTPaths = [""HLT_HIL3Mu*""]
looseMuonsForPbPbZMuSkim = cms.EDFilter(""TrackSelector"",
                              src = cms.InputTag(""generalTracks""),
                              cut = cms.string('pt > 10 &&  abs(eta)<2.4 &&  (charge!=0)'),
                              filter = cms.bool(True)                                
)"
-------------------------------------------------------------------------
"PbPbZMuHLTFilter = copy.deepcopy(hltHighLevel)
PbPbZMuHLTFilter.throw = cms.bool(False)
PbPbZMuHLTFilter.HLTPaths = [""HLT_HIL3Mu*""]
looseMuonsForPbPbZMuSkim = cms.EDFilter(""TrackSelector"",
"
-------------------------------------------------------------------------
"Recom
PRs: 25172, 25191"
-------------------------------------------------------------------------
=========================================================================
"ConcretelooseMuonsForPbPbZMuSkim = cms.EDProducer(""ConcreteChargedCandidateProducer"",
                                              src = cms.InputTag(""looseMuonsForPbPbZMuSkim""),
tkIsoDepositTkForPbPbZMuSkim = cms.EDProducer(""CandIsoDepositProducer"",
                                src = cms.InputTag(""ConcretelooseMuonsForPbPbZMuSkim""),
"
-------------------------------------------------------------------------
"looseMuonsForZMuSkim = cms.EDProducer(""ConcreteChargedCandidateProducer"",
                                        src = cms.InputTag(""looseMuonsForZMuSkim""),
tkIsoDepositTkForZMuSkim = cms.EDProducer(""CandIsoDepositProducer"",
                                src = cms.InputTag(""looseMuonsForZMuSkim""),"
-------------------------------------------------------------------------
"ConcretelooseMuonsForPbPbZMuSkim = cms.EDProducer(""ConcreteChargedCandidateProducer"",
                                              src = cms.InputTag(""looseMuonsForPbPbZMuSkim""),
tkIsoDepositTkForPbPbZMuSkim = cms.EDProducer(""CandIsoDepositProducer"",
                                src = cms.InputTag(""ConcretelooseMuonsForPbPbZMuSkim""),
"
-------------------------------------------------------------------------
"Recom
PRs: 25172, 25191"
-------------------------------------------------------------------------
=========================================================================
"allPatTracksForPbPbZMuSkim = patGenericParticles.clone(
    src = cms.InputTag(""ConcretelooseMuonsForPbPbZMuSkim""),
        src = cms.InputTag(""tkIsoDepositTkForPbPbZMuSkim""),
        tracker = cms.InputTag(""tkIsoDepositTkForPbPbZMuSkim""),
"
-------------------------------------------------------------------------
"allPatTracksForZMuSkim = pat::GenericParticle::clone(
    src = cms.InputTag(""ConcretelooseMuonsForZMuSkim""),
    isolation = cms.PSet(
        tracker = cms.PSet(
            src = cms.InputTag(""tkIsoDepositTkForZMuSkim""),
            tracker = cms.InputTag(""tkIsoDepositTkForZMuSkim""),
            deltaR = cms.double(0.3),
            veto = cms.double(0.015)
            )
        )
    )"
-------------------------------------------------------------------------
"allPatTracksForPbPbZMuSkim = patGenericParticles.clone(
    src = cms.InputTag(""ConcretelooseMuonsForPbPbZMuSkim""),
        src = cms.InputTag(""tkIsoDepositTkForPbPbZMuSkim""),
        tracker = cms.InputTag(""tkIsoDepositTkForPbPbZMuSkim""),
"
-------------------------------------------------------------------------
"Recom
PRs: 25172, 25191"
-------------------------------------------------------------------------
=========================================================================
"looseIsoMuonsForPbPbZMuSkim = cms.EDFilter(""PATGenericParticleSelector"",  
                             src = cms.InputTag(""allPatTracksForPbPbZMuSkim""), 
"
-------------------------------------------------------------------------
"allPatTracksForZMuSkim = patGenericParticles.clone(
                              cut = cms.string(""(userIsolation('pat::TrackIso')/pt)<0.4""),
                              filter = cms.bool(True)
                              )

looseIsoMuonsForPbPbZMuSkim = cms.EDFilter(""PATGenericParticleSelector"",
                             src = cms.InputTag(""allPatTracksForZMuSkim""),"
-------------------------------------------------------------------------
"looseIsoMuonsForPbPbZMuSkim = cms.EDFilter(""PATGenericParticleSelector"",  
                             src = cms.InputTag(""allPatTracksForPbPbZMuSkim""), 
"
-------------------------------------------------------------------------
"Recom
PRs: 25172, 25191"
-------------------------------------------------------------------------
=========================================================================
"tightMuonsForPbPbZMuSkim = cms.EDFilter(""MuonSelector"",
"
-------------------------------------------------------------------------
"tightMuonsForPbPbZMuSkim = cms.EDFilter(""PATGenericParticleSelector"","
-------------------------------------------------------------------------
"tightMuonsForPbPbZMuSkim = cms.EDFilter(""MuonSelector"",
"
-------------------------------------------------------------------------
"Recom
PRs: 25172, 25191"
-------------------------------------------------------------------------
=========================================================================
"dimuonsForPbPbZMuSkim = cms.EDProducer(""CandViewShallowCloneCombiner"",
                         decay = cms.string(""tightMuonsForPbPbZMuSkim looseIsoMuonsForPbPbZMuSkim"")
dimuonsFilterForPbPbZMuSkim = cms.EDFilter(""CandViewCountFilter"",
                             src = cms.InputTag(""dimuonsForPbPbZMuSkim""),
diMuonSelSeqForPbPbZMuSkim = cms.Sequence(
                            PbPbZMuHLTFilter *
                            looseMuonsForPbPbZMuSkim *
                            ConcretelooseMuonsForPbPbZMuSkim *
                            tkIsoDepositTkForPbPbZMuSkim *
                            allPatTracksForPbPbZMuSkim *
                            looseIsoMuonsForPbPbZMuSkim * 
                            tightMuonsForPbPbZMuSkim *
                            dimuonsForPbPbZMuSkim *
                            dimuonsFilterForPbPbZMuSkim 
"
-------------------------------------------------------------------------
"dimuonsForPbPbZMuSkim = cms.EDProducer(""CandViewShallowCloneCombiner"",
                         decay = cms.string(""tightMuonsForPbPbZMuSkim looseIsoMuonsForPbPbZMuSkim"")
dimuonsFilterForPbPbZMuSkim = cms.EDFilter(""CandViewCountFilter"",
                             src = cms.InputTag(""dimuonsForPbPbZMuSkim""),
				    minNumber = cms.uint32(1)
diMuonSelSeqForPbPbZMuSkim = cms.Sequence(
                            PbPbZMuHLTFilter *
                            looseMuonsForPbPbZMuSkim *
                            ConcretelooseMuonsForPbPbZMuSkim *
                            tkIsoDepositTkForPbPbZMuSkim *
                            allPatTracksForPbPbZMuSkim *
                            looseIsoMuonsForPbPbZMuSkim * 
                            tightMuonsForPbPbZMuSkim *
                            dimuonsForPbPbZMuSkim *
                            dimuonsFilterForPbPbZMuSkim 
							)"
-------------------------------------------------------------------------
"dimuonsForPbPbZMuSkim = cms.EDProducer(""CandViewShallowCloneCombiner"",
                         decay = cms.string(""tightMuonsForPbPbZMuSkim looseIsoMuonsForPbPbZMuSkim"")
dimuonsFilterForPbPbZMuSkim = cms.EDFilter(""CandViewCountFilter"",
                             src = cms.InputTag(""dimuonsForPbPbZMuSkim""),
diMuonSelSeqForPbPbZMuSkim = cms.Sequence(
                            PbPbZMuHLTFilter *
                            looseMuonsForPbPbZMuSkim *
                            ConcretelooseMuonsForPbPbZMuSkim *
                            tkIsoDepositTkForPbPbZMuSkim *
                            allPatTracksForPbPbZMuSkim *
                            looseIsoMuonsForPbPbZMuSkim * 
                            tightMuonsForPbPbZMuSkim *
                            dimuonsForPbPbZMuSkim *
                            dimuonsFilterForPbPbZMuSkim 
"
-------------------------------------------------------------------------
"Recom
PRs: 25172, 25191"
-------------------------------------------------------------------------
=========================================================================
"ZMuSkimPathPbPb = cms.Path( diMuonSelSeqForPbPbZMuSkim )
    paths = (ZMuSkimPathPbPb),
"
-------------------------------------------------------------------------
"ZMuSkimPathPbPb = cms.Path( diMuonSelSeqForPbPbZMuSkim )
SKIMStreamPbPbZMu.paths = (ZMuSkimPathPbPb),"
-------------------------------------------------------------------------
"ZMuSkimPathPbPb = cms.Path( diMuonSelSeqForPbPbZMuSkim )
    paths = (ZMuSkimPathPbPb),
"
-------------------------------------------------------------------------
"Recom
PRs: 25172, 25191"
-------------------------------------------------------------------------
=========================================================================
"MaxNumberOfPixelClusters = 150000,
MaxNumberOfCosmicClusters = 500000
"
-------------------------------------------------------------------------
"pp_on_AA_2018.toModify(trackerClusterCheck,
                doClusterCheck=True, 
                cut = ""strip < 1000000 && pixel < 150000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + strip/2.)"",
                MaxNumberOfPixelClusters = 150000,
                MaxNumberOfCosmicClusters = 500000
                )"
-------------------------------------------------------------------------
"MaxNumberOfPixelClusters = 150000,
MaxNumberOfCosmicClusters = 500000
"
-------------------------------------------------------------------------
"Recom
PRs: 25189, 25190"
-------------------------------------------------------------------------
=========================================================================
"'keep FEDRawDataCollection_virginRawDataRepacker_*_*',
'keep FEDRawDataCollection_rawDataReducedFormat_*_*'),
"
-------------------------------------------------------------------------
"REPACKRAWEventContent = cms.PSet(
       'drop *',
       'drop FEDRawDataCollection_*_*_*',
       'keep FEDRawDataCollection_virginRawDataRepacker_*_*',
       'keep FEDRawDataCollection_rawDataReducedFormat_*_*',
       splitLevel = cms.untracked.int32(0),
     )"
-------------------------------------------------------------------------
"'keep FEDRawDataCollection_virginRawDataRepacker_*_*',
'keep FEDRawDataCollection_rawDataReducedFormat_*_*'),
"
-------------------------------------------------------------------------
"Recom
PRs: 25178, 25181"
-------------------------------------------------------------------------
=========================================================================
"DQMNone = cms.Sequence()
"
-------------------------------------------------------------------------
DQMNone = cms.Sequence( dqmDcsInfo @none )
-------------------------------------------------------------------------
"DQMNone = cms.Sequence()
"
-------------------------------------------------------------------------
"Recom
PRs: 25098, 25099"
-------------------------------------------------------------------------
=========================================================================
"'dqmHarvesting'],
one',
DQMOffline',
one'],
"
-------------------------------------------------------------------------
"Remove the unnecessary single quotes from the given code snippet:

```python
'dqmHarvesting',
'one',
'DQMOffline',
'one',
```"
-------------------------------------------------------------------------
"'dqmHarvesting'],
one',
DQMOffline',
one'],
"
-------------------------------------------------------------------------
"Recom
PRs: 25098, 25099"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
    for e in [pA_2016, ppRef_2017, pp_on_AA_2018]:
    for e in [pA_2016, ppRef_2017, pp_on_AA_2018]:
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
for e in [pA_2016, ppRef_2017, pp_on_AA_2018]:"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
    for e in [pA_2016, ppRef_2017, pp_on_AA_2018]:
    for e in [pA_2016, ppRef_2017, pp_on_AA_2018]:
"
-------------------------------------------------------------------------
"Recom
PRs: 25059, 25076"
-------------------------------------------------------------------------
=========================================================================
"""HLT_HIL1DoubleMuOpen_v1"", #for HI
""HLT_HIL1DoubleMuOpen_OS_Centrality_40_100_v1"", #for HI
""HLT_HIL1DoubleMuOpen_Centrality_50_100_v1"", #for HI
""HLT_HIL1DoubleMu10_v1"", #for HI
""HLT_HIL2_L1DoubleMu10_v1"", #for HI
""HLT_HIL3_L1DoubleMu10_v1"", #for HI
""HLT_HIL2DoubleMuOpen_v1"", #for HI
""HLT_HIL3DoubleMuOpen_v1"", #for HI
""HLT_HIL3DoubleMuOpen_M60120_v1"", #for HI
""HLT_HIL3DoubleMuOpen_JpsiPsi_v1"", #for HI
""HLT_HIL3DoubleMuOpen_Upsi_v1"", #for HI
""HLT_HIL3Mu0_L2Mu0_v1"", #for HI
""HLT_HIL3Mu0NHitQ10_L2Mu0_MAXdR3p5_M1to5_v1"", #for HI
""HLT_HIL3Mu2p5NHitQ10_L2Mu2_M7toinf_v1"", #for HI
""HLT_HIL1MuOpen_Centrality_70_100_v1"", #for HI
""HLT_HIL1MuOpen_Centrality_80_100_v1"", #for HI
""HLT_HIL2Mu3_NHitQ15_v1"", #for HI
""HLT_HIL2Mu5_NHitQ15_v1"", #for HI
""HLT_HIL2Mu7_NHitQ15_v1"", #for HI
""HLT_HIL3Mu3_L1TripleMuOpen_v1"", #for HI
""HLT_HIL3Mu12_v1"", #for HI
""HLT_HIL3Mu15_v1"", #for HI
""HLT_HIL3Mu20_v1"", #for HI
""HLT_HIL3Mu3_NHitQ10_v1"", #for HI
""HLT_HIL3Mu5_NHitQ10_v1"", #for HI
""HLT_HIL3Mu7_NHitQ10_v1"" #for HI
"
-------------------------------------------------------------------------
"""HLT_HIL1DoubleMuOpen_v1"", #for HI
""HLT_HIL1DoubleMuOpen_OS_Centrality_40_100_v1"", #for HI
""HLT_HIL1DoubleMuOpen_Centrality_50_100_v1"", #for HI
""HLT_HIL1DoubleMu10_v1"", #for HI
""HLT_HIL2_L1DoubleMu10_v1"", #for HI
""HLT_HIL3_L1DoubleMu10_v1"", #for HI
""HLT_HIL2DoubleMuOpen_v1"", #for HI
""HLT_HIL3DoubleMuOpen_v1"", #for HI
""HLT_HIL3DoubleMuOpen_M60120_v1"", #for HI
""HLT_HIL3DoubleMuOpen_JpsiPsi_v1"", #for HI
""HLT_HIL3DoubleMuOpen_Upsi_v1"", #for HI
""HLT_HIL3Mu0_L2Mu0_v1"", #for HI
""HLT_HIL3Mu0NHitQ10_L2Mu0_MAXdR3p5_M1to5_v1"", #for HI
""HLT_HIL3Mu2p5NHitQ10_L2Mu2_M7toinf_v1"", #for HI
""HLT_HIL1MuOpen_Centrality_70_100_v1"", #for HI
""HLT_HIL1MuOpen_Centrality_80_100_v1"", #for HI
""HLT_HIL2Mu3_NHitQ15_v1"", #for HI
""HLT_HIL2Mu5_NHitQ15_v1"", #for HI
""HLT_HIL2Mu7_NHitQ15_v1"", #for HI
""HLT_HIL3Mu3_L1TripleMuOpen_v1"", #for HI
""HLT_HIL3Mu12_v1"", #for HI
""HLT_HIL3Mu15_v1"", #for HI
""HLT_HIL3Mu20_v1"", #for HI
""HLT_HIL3Mu3_NHitQ10_v1"", #for HI
""HLT_HIL3Mu5_NHitQ10_v1"", #for HI
""HLT_HIL3Mu7_NHitQ10_v1"" #for HI"
-------------------------------------------------------------------------
"""HLT_HIL1DoubleMuOpen_v1"", #for HI
""HLT_HIL1DoubleMuOpen_OS_Centrality_40_100_v1"", #for HI
""HLT_HIL1DoubleMuOpen_Centrality_50_100_v1"", #for HI
""HLT_HIL1DoubleMu10_v1"", #for HI
""HLT_HIL2_L1DoubleMu10_v1"", #for HI
""HLT_HIL3_L1DoubleMu10_v1"", #for HI
""HLT_HIL2DoubleMuOpen_v1"", #for HI
""HLT_HIL3DoubleMuOpen_v1"", #for HI
""HLT_HIL3DoubleMuOpen_M60120_v1"", #for HI
""HLT_HIL3DoubleMuOpen_JpsiPsi_v1"", #for HI
""HLT_HIL3DoubleMuOpen_Upsi_v1"", #for HI
""HLT_HIL3Mu0_L2Mu0_v1"", #for HI
""HLT_HIL3Mu0NHitQ10_L2Mu0_MAXdR3p5_M1to5_v1"", #for HI
""HLT_HIL3Mu2p5NHitQ10_L2Mu2_M7toinf_v1"", #for HI
""HLT_HIL1MuOpen_Centrality_70_100_v1"", #for HI
""HLT_HIL1MuOpen_Centrality_80_100_v1"", #for HI
""HLT_HIL2Mu3_NHitQ15_v1"", #for HI
""HLT_HIL2Mu5_NHitQ15_v1"", #for HI
""HLT_HIL2Mu7_NHitQ15_v1"", #for HI
""HLT_HIL3Mu3_L1TripleMuOpen_v1"", #for HI
""HLT_HIL3Mu12_v1"", #for HI
""HLT_HIL3Mu15_v1"", #for HI
""HLT_HIL3Mu20_v1"", #for HI
""HLT_HIL3Mu3_NHitQ10_v1"", #for HI
""HLT_HIL3Mu5_NHitQ10_v1"", #for HI
""HLT_HIL3Mu7_NHitQ10_v1"" #for HI
"
-------------------------------------------------------------------------
"Recom
PRs: 25059, 25076"
-------------------------------------------------------------------------
=========================================================================
"from primaryVertexValidation import PrimaryVertexValidation
"
-------------------------------------------------------------------------
from Alignment.OfflineValidation.TkAlAllInOneTool.primaryVertexValidation import PrimaryVertexValidation
-------------------------------------------------------------------------
"from primaryVertexValidation import PrimaryVertexValidation
"
-------------------------------------------------------------------------
"Recom
PRs: 24761, 25074"
-------------------------------------------------------------------------
=========================================================================
"class PreexistingPrimaryVertexValidation(PreexistingValidation, PrimaryVertexValidation):
    removemandatories = {""isda"",""ismc"",""runboundary"",""vertexcollection"",""lumilist"",""ptCut"",""etaCut"",""runControl"",""numberOfBins""}
    def getRepMap(self):
        result = super(PreexistingPrimaryVertexValidation, self).getRepMap()
        result.update({
                       ""filetoplot"": self.general[""file""],
                     })
        return result
    def appendToMerge(self, *args, **kwargs):
        raise AllInOneError(""Shouldn't be here..."")
"
-------------------------------------------------------------------------
"class PreexistingPrimaryVertexValidation(PreexistingValidation, PrimaryVertexValidation):
    def appendToMerge(self, *args, **kwargs):
        raise AllInOneError(""Shouldn't be here..."")"
-------------------------------------------------------------------------
"class PreexistingPrimaryVertexValidation(PreexistingValidation, PrimaryVertexValidation):
    removemandatories = {""isda"",""ismc"",""runboundary"",""vertexcollection"",""lumilist"",""ptCut"",""etaCut"",""runControl"",""numberOfBins""}
    def getRepMap(self):
        result = super(PreexistingPrimaryVertexValidation, self).getRepMap()
        result.update({
                       ""filetoplot"": self.general[""file""],
                     })
        return result
    def appendToMerge(self, *args, **kwargs):
        raise AllInOneError(""Shouldn't be here..."")
"
-------------------------------------------------------------------------
"Recom
PRs: 24761, 25074"
-------------------------------------------------------------------------
=========================================================================
"""filetoplot"": ""root://eoscms//eos/cms.oO[finalResultFile]Oo."",
"
-------------------------------------------------------------------------
"            ""filetoplot"": "".oO[datadir]Oo./%s/%s/%s"" % (self.outputBaseName, self.name, alignment.name),
"
-------------------------------------------------------------------------
"""filetoplot"": ""root://eoscms//eos/cms.oO[finalResultFile]Oo."",
"
-------------------------------------------------------------------------
"Recom
PRs: 24761, 25074"
-------------------------------------------------------------------------
=========================================================================
"return (' loadFileList(""%(filetoplot)s"",'
        '""PVValidation"", ""%(title)s"", %(color)s, %(style)s);\n')%repMap
"
-------------------------------------------------------------------------
"return ' loadFileList(""%(filetoplot)s"",'\
        '""PVValidation"", ""%(title)s"", %(color)s, %(style)s);\n' % repMap"
-------------------------------------------------------------------------
"return (' loadFileList(""%(filetoplot)s"",'
        '""PVValidation"", ""%(title)s"", %(color)s, %(style)s);\n')%repMap
"
-------------------------------------------------------------------------
"Recom
PRs: 24761, 25074"
-------------------------------------------------------------------------
=========================================================================
"elif valType == ""preexistingprimaryvertex"":
    validation = PreexistingPrimaryVertexValidation(name, self.__config)
"
-------------------------------------------------------------------------
"elif valType == ""preexistingprimaryvertex"":
    validation = PreexistingPrimaryVertexValidation(name, Alignment( alignments.strip(), self.__config ), self.__config )"
-------------------------------------------------------------------------
"elif valType == ""preexistingprimaryvertex"":
    validation = PreexistingPrimaryVertexValidation(name, self.__config)
"
-------------------------------------------------------------------------
"Recom
PRs: 24761, 25074"
-------------------------------------------------------------------------
=========================================================================
"'run2_data_promptlike'    : '103X_dataRun2_PromptLike_v6',
'run2_data_promptlike_hi' : '103X_dataRun2_PromptLike_HI_v1',
'run2_hlt_relval'      :   '103X_dataRun2_HLT_relval_v4',
'run2_hlt_relval_hi'   :   '103X_dataRun2_HLT_relval_HI_v1',
"
-------------------------------------------------------------------------
"
'run2_data_promptlike'    : '103X_dataRun2_PromptLike_v6',
'run2_data_promptlike_hi' : '103X_dataRun2_PromptLike_HI_v1',
'run2_hlt_relval'      :   '101X_dataRun2_HLT_frozen_v6',
'run2_hlt_relval_hi'   :   '101X_dataRun2_HLT_HI_frozen_v7',"
-------------------------------------------------------------------------
"'run2_data_promptlike'    : '103X_dataRun2_PromptLike_v6',
'run2_data_promptlike_hi' : '103X_dataRun2_PromptLike_HI_v1',
'run2_hlt_relval'      :   '103X_dataRun2_HLT_relval_v4',
'run2_hlt_relval_hi'   :   '103X_dataRun2_HLT_relval_HI_v1',
"
-------------------------------------------------------------------------
"Recom
PRs: 25068, 25069"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2018_realistic_hi' : '103X_upgrade2018_realistic_HI_v9',
"
-------------------------------------------------------------------------
"'phase1_2018_realistic_hi' : '103X_upgrade2018_realistic_HI_v9',"
-------------------------------------------------------------------------
"'phase1_2018_realistic_hi' : '103X_upgrade2018_realistic_HI_v9',
"
-------------------------------------------------------------------------
"Recom
PRs: 25068, 25069"
-------------------------------------------------------------------------
=========================================================================
"## customizations for the pp_on_AA_2018 eras
from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
OutALCARECOHcalCalMinBiasHI = copy.deepcopy(OutALCARECOHcalCalMinBias_noDrop)
OutALCARECOHcalCalMinBiasHI.outputCommands.insert(0, ""drop *"")
OutALCARECOHcalCalMinBiasHI.outputCommands.insert(6, ""keep HFRecHitsSorted_hfreco_*_*"")
#Specify to use HI output for the pp_on_AA_2018 eras
pp_on_AA_2018.toReplaceWith(OutALCARECOHcalCalMinBias,OutALCARECOHcalCalMinBiasHI)
"
-------------------------------------------------------------------------
"```python
## customizations for the pp_on_AA_2018 eras
from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
OutALCARECOHcalCalMinBiasHI = copy.deepcopy(OutALCARECOHcalCalMinBias_noDrop)
OutALCARECOHcalCalMinBiasHI.outputCommands.insert(0, ""drop *"")
OutALCARECOHcalCalMinBiasHI.outputCommands.insert(6, ""keep HFRecHitsSorted_hfreco_*_*"")
#Specify to use HI output for the pp_on_AA_2018 eras
pp_on_AA_2018.toModify(OutALCARECOHcalCalMinBias,OutALCARECOHcalCalMinBiasHI)
```"
-------------------------------------------------------------------------
"## customizations for the pp_on_AA_2018 eras
from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
OutALCARECOHcalCalMinBiasHI = copy.deepcopy(OutALCARECOHcalCalMinBias_noDrop)
OutALCARECOHcalCalMinBiasHI.outputCommands.insert(0, ""drop *"")
OutALCARECOHcalCalMinBiasHI.outputCommands.insert(6, ""keep HFRecHitsSorted_hfreco_*_*"")
#Specify to use HI output for the pp_on_AA_2018 eras
pp_on_AA_2018.toReplaceWith(OutALCARECOHcalCalMinBias,OutALCARECOHcalCalMinBiasHI)
"
-------------------------------------------------------------------------
"Recom
PRs: 25007, 25009"
-------------------------------------------------------------------------
=========================================================================
"## customizations for the pp_on_AA_2018 eras
from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
pp_on_AA_2018.toModify(hcalminbiasHLT,
                       eventSetupPathsKey='HcalCalMinBiasHI'
)
"
-------------------------------------------------------------------------
"```python
from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
pp_on_AA_2018.toModify(hcalminbiasHLT,
                       eventSetupPathsKey='HcalCalMinBiasHI'
)
```"
-------------------------------------------------------------------------
"## customizations for the pp_on_AA_2018 eras
from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
pp_on_AA_2018.toModify(hcalminbiasHLT,
                       eventSetupPathsKey='HcalCalMinBiasHI'
)
"
-------------------------------------------------------------------------
"Recom
PRs: 25007, 25009"
-------------------------------------------------------------------------
=========================================================================
"#Specify to use HI output for the pp_on_AA_2018 eras
seqALCARECOHcalCalMinBiasHI = cms.Sequence(hbherecoNoise*hfrecoNoise*hfrecoMBNZS*horecoNoise)
pp_on_AA_2018.toReplaceWith(seqALCARECOHcalCalMinBias,
                            seqALCARECOHcalCalMinBiasHI
)
"
-------------------------------------------------------------------------
"seqALCARECOHcalCalMinBiasHI = cms.Sequence(hbherecoNoise*hfrecoNoise*hfrecoMBNZS*horecoNoise) # HI output for the pp_on_AA_2018 eras
pp_on_AA_2018.toModify(seqALCARECOHcalCalMinBias,
                            seqALCARECOHcalCalMinBiasHI
)"
-------------------------------------------------------------------------
"#Specify to use HI output for the pp_on_AA_2018 eras
seqALCARECOHcalCalMinBiasHI = cms.Sequence(hbherecoNoise*hfrecoNoise*hfrecoMBNZS*horecoNoise)
pp_on_AA_2018.toReplaceWith(seqALCARECOHcalCalMinBias,
                            seqALCARECOHcalCalMinBiasHI
)
"
-------------------------------------------------------------------------
"Recom
PRs: 25007, 25009"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
pp_on_AA_2018.toModify(ALCARECOHcalCalPhisymDQM,
                       hbheInputMB = ""hbhereco"",
                       hoInputMB = ""horeco""
)
"
-------------------------------------------------------------------------
"from Configuration.ProcessModifiers.pp_on_AA_cff import pp_on_AA
pp_on_AA.toModify(ALCARECOHcalCalPhisymDQM,
                  hbheInputMB = ""hbhereco"",
                  hoInputMB = ""horeco""
)"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
pp_on_AA_2018.toModify(ALCARECOHcalCalPhisymDQM,
                       hbheInputMB = ""hbhereco"",
                       hoInputMB = ""horeco""
)
"
-------------------------------------------------------------------------
"Recom
PRs: 25007, 25009"
-------------------------------------------------------------------------
=========================================================================
"OutALCARECODtCalibHI.outputCommands.append(""keep *_offlinePrimaryVertices__*"")
OutALCARECODtCalibHI.outputCommands.append(""keep *_offlinePrimaryVerticesWithBS_*_*"")
OutALCARECODtCalibHI.outputCommands.append(""keep *_offlinePrimaryVerticesFromCosmicTracks_*_*"")
"
-------------------------------------------------------------------------
"OutALCARECODtCalibHI.outputCommands.extend([
    ""keep *_offlinePrimaryVertices__*"",
    ""keep *_offlinePrimaryVerticesWithBS_*_*"",
    ""keep *_offlinePrimaryVerticesFromCosmicTracks_*_*""
])"
-------------------------------------------------------------------------
"OutALCARECODtCalibHI.outputCommands.append(""keep *_offlinePrimaryVertices__*"")
OutALCARECODtCalibHI.outputCommands.append(""keep *_offlinePrimaryVerticesWithBS_*_*"")
OutALCARECODtCalibHI.outputCommands.append(""keep *_offlinePrimaryVerticesFromCosmicTracks_*_*"")
"
-------------------------------------------------------------------------
"Recom
PRs: 25004, 25008"
-------------------------------------------------------------------------
=========================================================================
"steps['RunHI2018']={'INPUT':InputInfo(dataSet='/HIMinimumBias0/Tier0_REPLAY_vocms015-v214/RAW',label='hi2018',run=[325174],events=10000,location='STD')}
steps['RunHI2018Reduced']={'INPUT':InputInfo(dataSet='/HIMinimumBiasReducedFormat0/Tier0_REPLAY_vocms015-v214/RAW',label='hi2018reduced',run=[325174],events=10000,location='STD')}
"
-------------------------------------------------------------------------
"steps['RunHI2018']={'INPUT':InputInfo(dataSet='/HIMinimumBias0/Tier0_REPLAY_vocms015-v214/RAW',label='hi2018',run=[325174],events=10000,location='STD')}
steps['RunHI2018Reduced']={'INPUT':InputInfo(dataSet='/HIMinimumBiasReducedFormat0/Tier0_REPLAY_vocms015-v214/RAW',label='hi2018reduced',run=[325174],events=10000,location='STD')}"
-------------------------------------------------------------------------
"steps['RunHI2018']={'INPUT':InputInfo(dataSet='/HIMinimumBias0/Tier0_REPLAY_vocms015-v214/RAW',label='hi2018',run=[325174],events=10000,location='STD')}
steps['RunHI2018Reduced']={'INPUT':InputInfo(dataSet='/HIMinimumBiasReducedFormat0/Tier0_REPLAY_vocms015-v214/RAW',label='hi2018reduced',run=[325174],events=10000,location='STD')}
"
-------------------------------------------------------------------------
"Recom
PRs: 25005, 25006"
-------------------------------------------------------------------------
=========================================================================
"from DQM.TrackingMonitorSource.PPonAATrackingOnly_custom import customise_PPonAATrackingOnlyDQM as _customise_PPonAATrackingOnlyDQM
_customise_PPonAATrackingOnlyDQM(process)
"
-------------------------------------------------------------------------
"from FWCore.ParameterSet.Config import process
from DQM.TrackingMonitorSource.Tools.customise_DQMSequenceHiConformalTracks import customise_DQMSequenceHiConformalTracks
if hasattr(process, 'dqmofflineOnPAT_step'):
    customise_DQMSequenceHiConformalTracks(process)
    return process"
-------------------------------------------------------------------------
"from DQM.TrackingMonitorSource.PPonAATrackingOnly_custom import customise_PPonAATrackingOnlyDQM as _customise_PPonAATrackingOnlyDQM
_customise_PPonAATrackingOnlyDQM(process)
"
-------------------------------------------------------------------------
"Recom
PRs: 24996, 24997"
-------------------------------------------------------------------------
=========================================================================
"""""""
_Utils_
Tools to customise the DQM offline configuration run on the dedicated express-like stream during pp_on_AA
""""""
import FWCore.ParameterSet.Config as cms
def customise_PPonAATrackingOnlyDQM(process):
    if hasattr(process,'dqmofflineOnPAT_step'):
        process=customise_DQMSequenceHiConformalTracks(process)
    return process   
def customise_DQMSequenceHiConformalTracks(process):
    process.TrackingDQMSourceTier0Common.remove(process.hiConformalPixelTracksQA)	
    return process
	
"
-------------------------------------------------------------------------
"""""""
_Utils_
Tools to customise the DQM offline configuration run on the dedicated express-like stream during pp_on_AA
""""""
import FWCore.ParameterSet.Config as cms

def customise_PPonAATrackingOnlyDQM(process):
    if hasattr(process,'dqmofflineOnPAT_step'):
        process=customise_DQMSequenceHiConformalTracks(process)
    return process   

def customise_DQMSequenceHiConformalTracks(process):
    process.TrackingDQMSourceTier0Common.remove(process.hiConformalPixelTracksQA)	
    return process
```"
-------------------------------------------------------------------------
"""""""
_Utils_
Tools to customise the DQM offline configuration run on the dedicated express-like stream during pp_on_AA
""""""
import FWCore.ParameterSet.Config as cms
def customise_PPonAATrackingOnlyDQM(process):
    if hasattr(process,'dqmofflineOnPAT_step'):
        process=customise_DQMSequenceHiConformalTracks(process)
    return process   
def customise_DQMSequenceHiConformalTracks(process):
    process.TrackingDQMSourceTier0Common.remove(process.hiConformalPixelTracksQA)	
    return process
	
"
-------------------------------------------------------------------------
"Recom
PRs: 24996, 24997"
-------------------------------------------------------------------------
=========================================================================
"## customizations for the pp_on_AA eras
from Configuration.Eras.Modifier_pp_on_XeXe_2017_cff import pp_on_XeXe_2017
from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
(pp_on_XeXe_2017 | pp_on_AA_2018).toModify(ALCARECOSiStripCalMinBiasAAGHLT,
                                           eventSetupPathsKey='SiStripCalMinBiasAAGHI'
                                           )
"
-------------------------------------------------------------------------
"from Configuration.ProcessModifiers.pp_on_AA_cff import pp_on_AA
from CalibTracker.SiStripCommon.SiStripDCSFilter_cfi import SiStripDCSFilter
from Configuration.Eras.Modifier_pp_on_XeXe_2017_cff import pp_on_XeXe_2017
from HLTrigger.HLTfilters.hltHighLevel_cfi import hltHighLevel

(pp_on_AA | pp_on_XeXe_2017).toModify(ALCARECOSiStripCalMinBiasAAGHLT,
                                      eventSetupPathsKey='SiStripCalMinBiasAAGHI'
                                      )"
-------------------------------------------------------------------------
"## customizations for the pp_on_AA eras
from Configuration.Eras.Modifier_pp_on_XeXe_2017_cff import pp_on_XeXe_2017
from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
(pp_on_XeXe_2017 | pp_on_AA_2018).toModify(ALCARECOSiStripCalMinBiasAAGHLT,
                                           eventSetupPathsKey='SiStripCalMinBiasAAGHI'
                                           )
"
-------------------------------------------------------------------------
"Recom
PRs: 24975, 24976"
-------------------------------------------------------------------------
=========================================================================
"from CommonTools.ParticleFlow.goodOfflinePrimaryVertices_cfi import *
"
-------------------------------------------------------------------------
from RecoVertex.PrimaryVertexProducer.OfflinePrimaryVertices_cfi import *
-------------------------------------------------------------------------
"from CommonTools.ParticleFlow.goodOfflinePrimaryVertices_cfi import *
"
-------------------------------------------------------------------------
"Recom
PRs: 24958, 24960"
-------------------------------------------------------------------------
=========================================================================
"goodOfflinePrimaryVertices 
"
-------------------------------------------------------------------------
"goodOfflinePrimaryVerticesEI = cms.EDFilter(""VertexSelector"",
    src = cms.InputTag('offlinePrimaryVertices'),
    cut = cms.string('!isFake && ndof > 4 && abs(z) <= 24 && position.Rho <= 2'),
    filter = cms.bool(True)  # For filtering, set to True
)"
-------------------------------------------------------------------------
"goodOfflinePrimaryVertices 
"
-------------------------------------------------------------------------
"Recom
PRs: 24958, 24960"
-------------------------------------------------------------------------
=========================================================================
"mandatories = [
           ""eosdir"",
       ]
       self.checkInput(""general"", knownSimpleOptions = defaults.keys()  mandatories)
       general = self.getResultingSection( ""general"", defaultDict = defaults, demandPars = mandatories )
"
-------------------------------------------------------------------------
"mandatories = [
            ""eosdir"",
        ]
self.checkInput(""general"", knownSimpleOptions = defaults.keys(), mandatories=mandatories)
general = self.getResultingSection(""general"", defaultDict=defaults, demandPars=mandatories)"
-------------------------------------------------------------------------
"mandatories = [
           ""eosdir"",
       ]
       self.checkInput(""general"", knownSimpleOptions = defaults.keys()  mandatories)
       general = self.getResultingSection( ""general"", defaultDict = defaults, demandPars = mandatories )
"
-------------------------------------------------------------------------
"Recom
PRs: 24952, 24950"
-------------------------------------------------------------------------
=========================================================================
"GlobalTag.globaltag = ""103X_dataRun2_Express_v1""
"
-------------------------------------------------------------------------
"from Configuration.StandardSequences.FrontierConditions_GlobalTag_cff import *
GlobalTag.globaltag = ""103X_dataRun2_Express_v1"""
-------------------------------------------------------------------------
"GlobalTag.globaltag = ""103X_dataRun2_Express_v1""
"
-------------------------------------------------------------------------
"Recom
PRs: 24944, 24945"
-------------------------------------------------------------------------
=========================================================================
"GlobalTag.globaltag = ""103X_dataRun2_HLT_v1""
"
-------------------------------------------------------------------------
"```python
process.GlobalTag.globaltag = ""103X_dataRun2_HLT_v1""
```"
-------------------------------------------------------------------------
"GlobalTag.globaltag = ""103X_dataRun2_HLT_v1""
"
-------------------------------------------------------------------------
"Recom
PRs: 24944, 24945"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
# HLT dimuon trigger
import HLTrigger.HLTfilters.hltHighLevel_cfi
hltEMuHI = HLTrigger.HLTfilters.hltHighLevel_cfi.hltHighLevel.clone()
hltEMuHI.HLTPaths = [""HLT_HIL1Mu5Eta2p5_Ele20Gsf_v*""]
hltEMuHI.throw = False
hltEMuHI.andOr = True
# selection of valid vertex
primaryVertexFilterForEMu = cms.EDFilter(""VertexSelector"",
    src = cms.InputTag(""offlinePrimaryVertices""),
    cut = cms.string(""!isFake && abs(z) <= 25 && position.Rho <= 2""), 
    filter = cms.bool(True),   # otherwise it won't filter the events
    )
# single lepton selector                                                                                                                                               
electronSelectorForEMu = cms.EDFilter(""GsfElectronRefSelector"",
                                   src = cms.InputTag(""gedGsfElectrons""),
                                   cut = cms.string(""pt > 20 && abs(eta)<1.44"")
                                   )
muonSelectorForEMu = cms.EDFilter(""MuonSelector"",
                                  src = cms.InputTag(""muons""),
                                  cut = cms.string(""(isTrackerMuon && isGlobalMuon) && pt > 20.""),
                                  filter = cms.bool(True)
    )
# EMu skim sequence
emuSkimSequence = cms.Sequence(
    hltEMuHI *
    primaryVertexFilterForEMu *
    electronSelectorForEMu * 
    muonSelectorForEMu
)
"
-------------------------------------------------------------------------
"from __future__ import print_function
import DPGAnalysis.Skims.Skims_DPG_cff as cms
from Configuration.Skimming import Skims_PDWG_cff

# HLT dimuon trigger
import HLTrigger.HLTfilters.hltHighLevel_cfi
hltEMuHI = HLTrigger.HLTfilters.hltHighLevel_cfi.hltHighLevel.clone()
hltEMuHI.HLTPaths = [""HLT_HIL1Mu5Eta2p5_Ele20Gsf_v*""]
hltEMuHI.throw = False
hltEMuHI.andOr = True

# selection of valid vertex
primaryVertexFilterForEMu = cms.EDFilter(""VertexSelector"",
    src = cms.InputTag(""offlinePrimaryVertices""),
    cut = cms.string(""!isFake && abs(z) <= 25 && position.Rho <= 2""), 
    filter = cms.bool(True),
)

# single lepton selector
electronSelectorForEMu = cms.EDFilter(""GsfElectronRefSelector"",
    src = cms.InputTag(""gedGsfElectrons""),
    cut = cms.string(""pt > 20 && abs(eta)<1.44"")
)

muonSelectorForEMu = cms.EDFilter(""MuonSelector"",
    src = cms.InputTag(""muons""),
    cut = cms.string(""(isTrackerMuon && isGlobalMuon) && pt > 20.""),
    filter = cms.bool(True)
)

# EMu skim sequence
emuSkimSequence = cms.Sequence(
    hltEMuHI *
    primaryVertexFilterForEMu *
    electronSelectorForEMu * 
    muonSelectorForEMu
)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
# HLT dimuon trigger
import HLTrigger.HLTfilters.hltHighLevel_cfi
hltEMuHI = HLTrigger.HLTfilters.hltHighLevel_cfi.hltHighLevel.clone()
hltEMuHI.HLTPaths = [""HLT_HIL1Mu5Eta2p5_Ele20Gsf_v*""]
hltEMuHI.throw = False
hltEMuHI.andOr = True
# selection of valid vertex
primaryVertexFilterForEMu = cms.EDFilter(""VertexSelector"",
    src = cms.InputTag(""offlinePrimaryVertices""),
    cut = cms.string(""!isFake && abs(z) <= 25 && position.Rho <= 2""), 
    filter = cms.bool(True),   # otherwise it won't filter the events
    )
# single lepton selector                                                                                                                                               
electronSelectorForEMu = cms.EDFilter(""GsfElectronRefSelector"",
                                   src = cms.InputTag(""gedGsfElectrons""),
                                   cut = cms.string(""pt > 20 && abs(eta)<1.44"")
                                   )
muonSelectorForEMu = cms.EDFilter(""MuonSelector"",
                                  src = cms.InputTag(""muons""),
                                  cut = cms.string(""(isTrackerMuon && isGlobalMuon) && pt > 20.""),
                                  filter = cms.bool(True)
    )
# EMu skim sequence
emuSkimSequence = cms.Sequence(
    hltEMuHI *
    primaryVertexFilterForEMu *
    electronSelectorForEMu * 
    muonSelectorForEMu
)
"
-------------------------------------------------------------------------
"Recom
PRs: 24927, 24928"
-------------------------------------------------------------------------
=========================================================================
"hltZEEHI.HLTPaths = [""HLT_HIDoubleEle10Gsf_v*""]
"
-------------------------------------------------------------------------
"hltZEEHI.HLTPaths = cms.vstring(""HLT_HIDoubleEle10Gsf_v*"")"
-------------------------------------------------------------------------
"hltZEEHI.HLTPaths = [""HLT_HIDoubleEle10Gsf_v*""]
"
-------------------------------------------------------------------------
"Recom
PRs: 24927, 24928"
-------------------------------------------------------------------------
=========================================================================
"hltZMMPbPb = HLTrigger.HLTfilters.hltHighLevel_cfi.hltHighLevel.clone()
hltZMMPbPb.HLTPaths = [""HLT_HIL1DoubleMu10_v*""]
hltZMMPbPb.throw = False
hltZMMPbPb.andOr = True
"
-------------------------------------------------------------------------
"hltZMMPbPb = cms.EDFilter(""HLTHighLevel"",
    TriggerResultsTag = cms.InputTag(""TriggerResults"", """", ""HLT""),
    HLTPaths = cms.vstring(""HLT_HIL1DoubleMu10_v*""),
    throw = cms.bool(False),
    andOr = cms.bool(True)
)"
-------------------------------------------------------------------------
"hltZMMPbPb = HLTrigger.HLTfilters.hltHighLevel_cfi.hltHighLevel.clone()
hltZMMPbPb.HLTPaths = [""HLT_HIL1DoubleMu10_v*""]
hltZMMPbPb.throw = False
hltZMMPbPb.andOr = True
"
-------------------------------------------------------------------------
"Recom
PRs: 24927, 24928"
-------------------------------------------------------------------------
=========================================================================
"hltZMMPbPb *
"
-------------------------------------------------------------------------
"hltZMMPbPb = cms.Sequence(
    hltFilterForZMM *
    dimuonSelectorForZMM *
    dimuonMassCutFilterForZMM *"
-------------------------------------------------------------------------
"hltZMMPbPb *
"
-------------------------------------------------------------------------
"Recom
PRs: 24927, 24928"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Skimming.PbPb_EMuSkim_cff import *
emuSkimPath = cms.Path( emuSkimSequence )
SKIMStreamPbPbEMu = cms.FilteredStream(
    name = 'PbPbEMu',
    paths = (emuSkimPath),
"
-------------------------------------------------------------------------
"from Configuration.Skimming.Skims_PbPb_cff import *
SKIMStreamPbPbEMu = cms.FilteredStream(
    name = 'PbPbEMu',
    paths = (emuSkimPath),
    responsible = 'HI PAG',
    dataTier = cms.untracked.string('RAW-RECO')"
-------------------------------------------------------------------------
"from Configuration.Skimming.PbPb_EMuSkim_cff import *
emuSkimPath = cms.Path( emuSkimSequence )
SKIMStreamPbPbEMu = cms.FilteredStream(
    name = 'PbPbEMu',
    paths = (emuSkimPath),
"
-------------------------------------------------------------------------
"Recom
PRs: 24927, 24928"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Skimming.PbPb_ZEESkim_cff import *
SKIMStreamPbPbZEE = cms.FilteredStream(
    name = 'PbPbZEE',
"
-------------------------------------------------------------------------
"from DPGAnalysis.Skims.Skims_PbPb_cff import *
SKIMStreamPbPbZEE = cms.FilteredStream( 
    name = 'PbPbZEE',"
-------------------------------------------------------------------------
"from Configuration.Skimming.PbPb_ZEESkim_cff import *
SKIMStreamPbPbZEE = cms.FilteredStream(
    name = 'PbPbZEE',
"
-------------------------------------------------------------------------
"Recom
PRs: 24927, 24928"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Skimming.PbPb_ZMMSkim_cff import *
SKIMStreamPbPbZMM = cms.FilteredStream(
    name = 'PbPbZMM',
"
-------------------------------------------------------------------------
"from DPGAnalysis.Skims.Skims_PbPb_cff import *
SKIMStreamPbPbZMM = cms.FilteredStream(
    name = 'PbPbZMM',"
-------------------------------------------------------------------------
"from Configuration.Skimming.PbPb_ZMMSkim_cff import *
SKIMStreamPbPbZMM = cms.FilteredStream(
    name = 'PbPbZMM',
"
-------------------------------------------------------------------------
"Recom
PRs: 24927, 24928"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Skimming.Skims_PbPb_cff import *
"
-------------------------------------------------------------------------
from Configuration.Skimming.Skims_PbPb_cff import *
-------------------------------------------------------------------------
"from Configuration.Skimming.Skims_PbPb_cff import *
"
-------------------------------------------------------------------------
"Recom
PRs: 24927, 24928"
-------------------------------------------------------------------------
=========================================================================
"globaltag = 'auto:phase1_2018_design'    #APEs are copied from this GT (and IdealGeometry and TrackerTopology are used)
"
-------------------------------------------------------------------------
"```python
from Configuration.AlCa.GlobalTag import GlobalTag
process.GlobalTag = GlobalTag(process.GlobalTag, globaltag, '')
```"
-------------------------------------------------------------------------
"globaltag = 'auto:phase1_2018_design'    #APEs are copied from this GT (and IdealGeometry and TrackerTopology are used)
"
-------------------------------------------------------------------------
"Recom
PRs: 24925, 24926"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.AlCa.GlobalTag import GlobalTag
process.GlobalTag = GlobalTag(process.GlobalTag, globaltag, '')
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

from Configuration.AlCa.GlobalTag import GlobalTag
process.GlobalTag = cms.Process.GlobalTag(GlobalTag(process.GlobalTag, globaltag, ''))"
-------------------------------------------------------------------------
"from Configuration.AlCa.GlobalTag import GlobalTag
process.GlobalTag = GlobalTag(process.GlobalTag, globaltag, '')
"
-------------------------------------------------------------------------
"Recom
PRs: 24925, 24926"
-------------------------------------------------------------------------
=========================================================================
"process.CondDB.connect = 'sqlite_file:'outputfilename
                                          process.CondDB,
                                          toPut = cms.VPSet(cms.PSet(record = cms.string('TrackerAlignmentRcd'),
                                                                     ),
                                                            cms.PSet(record = cms.string('TrackerAlignmentErrorExtendedRcd'),
                                                                     ),
                                          )
"
-------------------------------------------------------------------------
"```python
process.CondDB = cms.PSet(
    connect = cms.string('sqlite_file:' + outputfilename),
    toPut = cms.VPSet(
        cms.PSet(record = cms.string('TrackerAlignmentRcd')),
        cms.PSet(record = cms.string('TrackerAlignmentErrorExtendedRcd'))
    )
)
```"
-------------------------------------------------------------------------
"process.CondDB.connect = 'sqlite_file:'outputfilename
                                          process.CondDB,
                                          toPut = cms.VPSet(cms.PSet(record = cms.string('TrackerAlignmentRcd'),
                                                                     ),
                                                            cms.PSet(record = cms.string('TrackerAlignmentErrorExtendedRcd'),
                                                                     ),
                                          )
"
-------------------------------------------------------------------------
"Recom
PRs: 24925, 24926"
-------------------------------------------------------------------------
=========================================================================
"'--outputCommands':'""drop FEDRawDataCollection_*__HLT"",""drop FEDRawDataCollection_*__LHC""', 
"
-------------------------------------------------------------------------
"Adapted based on the information provided:
```python
# '--customise_commands':'\'process.RAWoutput.outputCommands.append(\""drop *_*_*_HLT*\"")\'',
'--outputCommands':'""drop FEDRawDataCollection_*__HLT""',
```
"
-------------------------------------------------------------------------
"'--outputCommands':'""drop FEDRawDataCollection_*__HLT"",""drop FEDRawDataCollection_*__LHC""', 
"
-------------------------------------------------------------------------
"Recom
PRs: 24910, 24921"
-------------------------------------------------------------------------
=========================================================================
"process.valBmtfAlgoSel.feds = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"process.BMTFTriggerAlgoSelector.feds = cms.InputTag(""rawDataRepacker"")"
-------------------------------------------------------------------------
"process.valBmtfAlgoSel.feds = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"Recom
PRs: 24853, 24881"
-------------------------------------------------------------------------
=========================================================================
"if isHeavyIon:
    process.tasksPath = process.zdcQIE10Task
"
-------------------------------------------------------------------------
"process.tasksPath = cms.Path(
        +process.zdcQIE10Task
 )"
-------------------------------------------------------------------------
"if isHeavyIon:
    process.tasksPath = process.zdcQIE10Task
"
-------------------------------------------------------------------------
"Recom
PRs: 24866, 24871"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
herwig7CH2SettingsBlock = cms.PSet(
    herwig7CH2PDF = cms.vstring(
            'cd /Herwig/Partons',
            'create ThePEG::LHAPDF PDFSet_nnlo ThePEGLHAPDF.so',
            'set PDFSet_nnlo:PDFName NNPDF31_nnlo_as_0118.LHgrid',
            'set PDFSet_nnlo:RemnantHandler HadronRemnants',
            'set /Herwig/Particles/p:PDF PDFSet_nnlo',
            'set /Herwig/Particles/pbar-:PDF PDFSet_nnlo',
            'set /Herwig/Partons/PPExtractor:FirstPDF  PDFSet_nnlo',
            'set /Herwig/Partons/PPExtractor:SecondPDF PDFSet_nnlo',
            'set /Herwig/Shower/ShowerHandler:PDFA PDFSet_nnlo',
            'set /Herwig/Shower/ShowerHandler:PDFB PDFSet_nnlo',
            
            'create ThePEG::LHAPDF PDFSet_lo ThePEGLHAPDF.so',
            'set PDFSet_lo:PDFName NNPDF31_lo_as_0118.LHgrid',
            'set PDFSet_lo:RemnantHandler HadronRemnants',
            'set /Herwig/Shower/ShowerHandler:PDFARemnant PDFSet_lo',
            'set /Herwig/Shower/ShowerHandler:PDFBRemnant PDFSet_lo',
            'set /Herwig/Partons/MPIExtractor:FirstPDF PDFSet_lo',
            'set /Herwig/Partons/MPIExtractor:SecondPDF PDFSet_lo',
            'cd /',
        ),
    herwig7CH2AlphaS = cms.vstring(
        'cd /Herwig/Shower',
        'set AlphaQCD:AlphaMZ 0.118',
        'cd /'
        ),
    herwig7CH2MPISettings = cms.vstring(
        'read snippets/SoftModel.in',
        'set /Herwig/Hadronization/ColourReconnector:ReconnectionProbability 0.479',
        'set /Herwig/UnderlyingEvent/MPIHandler:pTmin0 3.138',
        'set /Herwig/UnderlyingEvent/MPIHandler:InvRadius 1.174',
        'set /Herwig/UnderlyingEvent/MPIHandler:Power 0.1203',
        'set /Herwig/Partons/RemnantDecayer:ladderPower -0.08',
        'set /Herwig/Partons/RemnantDecayer:ladderNorm 0.95',
                                )
)
"
-------------------------------------------------------------------------
"```python
import FWCore.ParameterSet.Config as cms
herwig7CH2SettingsBlock = cms.PSet(
    herwig7CH2PDF = cms.vstring(
            'cd /Herwig/Partons',
            'create ThePEG::LHAPDF PDFSet_nnlo ThePEGLHAPDF.so',
            'set PDFSet_nnlo:PDFName NNPDF31_nnlo_as_0118.LHgrid',
            'set PDFSet_nnlo:RemnantHandler HadronRemnants',
            'set /Herwig/Particles/p:PDF PDFSet_nnlo',
            'set /Herwig/Particles/pbar-:PDF PDFSet_nnlo',
            'set /Herwig/Partons/PPExtractor:FirstPDF  PDFSet_nnlo',
            'set /Herwig/Partons/PPExtractor:SecondPDF PDFSet_nnlo',
            'set /Herwig/Shower/ShowerHandler:PDFA PDFSet_nnlo',
            'set /Herwig/Shower/ShowerHandler:PDFB PDFSet_nnlo',
            
            'create ThePEG::LHAPDF PDFSet_lo ThePEGLHAPDF.so',
            'set PDFSet_lo:PDFName NNPDF31_lo_as_0118.LHgrid',
            'set PDFSet_lo:RemnantHandler HadronRemnants',
            'set /Herwig/Shower/ShowerHandler:PDFARemnant PDFSet_lo',
            'set /Herwig/Shower/ShowerHandler:PDFBRemnant PDFSet_lo',
            'set /Herwig/Partons/MPIExtractor:FirstPDF PDFSet_lo',
            'set /Herwig/Partons/MPIExtractor:SecondPDF PDFSet_lo',
            'cd /',
        ),
    herwig7CH2AlphaS = cms.vstring(
        'cd /Herwig/Shower',
        'set AlphaQCD:AlphaMZ 0.118',
        'cd /'
        ),
    herwig7CH2MPISettings = cms.vstring(
        'read snippets/SoftModel.in',
        'set /Herwig/Hadronization/ColourReconnector:ReconnectionProbability 0.479',
        'set /Herwig/UnderlyingEvent/MPIHandler:pTmin0 3.138',
        'set /Herwig/UnderlyingEvent/MPIHandler:InvRadius 1.174',
        'set /Herwig/UnderlyingEvent/MPIHandler:Power 0.1203',
        'set /Herwig/Partons/RemnantDecayer:ladderPower -0.08',
        'set /Herwig/Partons/RemnantDecayer:ladderNorm 0.95',
                                )
)
```"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
herwig7CH2SettingsBlock = cms.PSet(
    herwig7CH2PDF = cms.vstring(
            'cd /Herwig/Partons',
            'create ThePEG::LHAPDF PDFSet_nnlo ThePEGLHAPDF.so',
            'set PDFSet_nnlo:PDFName NNPDF31_nnlo_as_0118.LHgrid',
            'set PDFSet_nnlo:RemnantHandler HadronRemnants',
            'set /Herwig/Particles/p:PDF PDFSet_nnlo',
            'set /Herwig/Particles/pbar-:PDF PDFSet_nnlo',
            'set /Herwig/Partons/PPExtractor:FirstPDF  PDFSet_nnlo',
            'set /Herwig/Partons/PPExtractor:SecondPDF PDFSet_nnlo',
            'set /Herwig/Shower/ShowerHandler:PDFA PDFSet_nnlo',
            'set /Herwig/Shower/ShowerHandler:PDFB PDFSet_nnlo',
            
            'create ThePEG::LHAPDF PDFSet_lo ThePEGLHAPDF.so',
            'set PDFSet_lo:PDFName NNPDF31_lo_as_0118.LHgrid',
            'set PDFSet_lo:RemnantHandler HadronRemnants',
            'set /Herwig/Shower/ShowerHandler:PDFARemnant PDFSet_lo',
            'set /Herwig/Shower/ShowerHandler:PDFBRemnant PDFSet_lo',
            'set /Herwig/Partons/MPIExtractor:FirstPDF PDFSet_lo',
            'set /Herwig/Partons/MPIExtractor:SecondPDF PDFSet_lo',
            'cd /',
        ),
    herwig7CH2AlphaS = cms.vstring(
        'cd /Herwig/Shower',
        'set AlphaQCD:AlphaMZ 0.118',
        'cd /'
        ),
    herwig7CH2MPISettings = cms.vstring(
        'read snippets/SoftModel.in',
        'set /Herwig/Hadronization/ColourReconnector:ReconnectionProbability 0.479',
        'set /Herwig/UnderlyingEvent/MPIHandler:pTmin0 3.138',
        'set /Herwig/UnderlyingEvent/MPIHandler:InvRadius 1.174',
        'set /Herwig/UnderlyingEvent/MPIHandler:Power 0.1203',
        'set /Herwig/Partons/RemnantDecayer:ladderPower -0.08',
        'set /Herwig/Partons/RemnantDecayer:ladderNorm 0.95',
                                )
)
"
-------------------------------------------------------------------------
"Recom
PRs: 24823, 24840"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
herwig7StableParticlesForDetectorBlock = cms.PSet(
    herwig7StableParticlesForDetector = cms.vstring(
        'set /Herwig/Decays/DecayHandler:MaxLifeTime 10*mm',
        'set /Herwig/Decays/DecayHandler:LifeTimeOption Average',
        )
)
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

herwig7StableParticlesForDetectorBlock = cms.PSet(
    herwig7StableParticlesForDetector = cms.vstring(
        'set /Herwig/Decays/DecayHandler:MaxLifeTime 10*mm',
        'set /Herwig/Decays/DecayHandler:LifeTimeOption Average',
    )
)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
herwig7StableParticlesForDetectorBlock = cms.PSet(
    herwig7StableParticlesForDetector = cms.vstring(
        'set /Herwig/Decays/DecayHandler:MaxLifeTime 10*mm',
        'set /Herwig/Decays/DecayHandler:LifeTimeOption Average',
        )
)
"
-------------------------------------------------------------------------
"Recom
PRs: 24823, 24840"
-------------------------------------------------------------------------
=========================================================================
"SherpackLocation = cms.string('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/sherpa/2.2.2'),
SherpackChecksum = cms.string('5edf2e9dde5d3be90a6f3a7c43156ea2'),
"
-------------------------------------------------------------------------
"SherpackLocation = cms.string('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc530/13TeV/sherpa/2.2.2'),
SherpackChecksum = cms.string('5edf2e9dde5d3be90a6f3a7c43156ea2')"
-------------------------------------------------------------------------
"SherpackLocation = cms.string('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/sherpa/2.2.2'),
SherpackChecksum = cms.string('5edf2e9dde5d3be90a6f3a7c43156ea2'),
"
-------------------------------------------------------------------------
"Recom
PRs: 20515, 24809"
-------------------------------------------------------------------------
=========================================================================
"SherpackLocation = cms.string('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/sherpa/2.2.2'),
SherpackChecksum = cms.string('0070c9688d9ee496b63cf04f79d2cf5b'),
"
-------------------------------------------------------------------------
"SherpackLocation = cms.string('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc530/sherpa/2.2.2'),
SherpackChecksum = cms.string('e42dbcf1fd458704875e157ece69d3db'),"
-------------------------------------------------------------------------
"SherpackLocation = cms.string('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/sherpa/2.2.2'),
SherpackChecksum = cms.string('0070c9688d9ee496b63cf04f79d2cf5b'),
"
-------------------------------------------------------------------------
"Recom
PRs: 20515, 24809"
-------------------------------------------------------------------------
=========================================================================
"workflows[250200.118]=['ProdZEE_13_pmx25ns',['ProdZEE_13UP18','DIGIPRMXUP18_PROD_PU25','RECOPRMXUP18PROD_PU25','NANOEDMMC2018_PROD']]
workflows[250206.118]=['ProdZMM_13_pmx25ns',['ProdZMM_13UP18','DIGIPRMXUP18_PROD_PU25','RECOPRMXUP18PROD_PU25','NANOEDMMC2018_PROD']]
workflows[250202.118]=['ProdTTbar_13_pmx25ns',['ProdTTbar_13UP18','DIGIPRMXUP18_PROD_PU25','RECOPRMXUP18PROD_PU25','NANOEDMMC2018_PROD']]
"
-------------------------------------------------------------------------
"workflows[250200.118]=['ProdZEE_13_pmx25ns',['ProdZEE_13UP18','DIGIPRMXUP18_PROD_PU25','RECOPRMXUP18PROD_PU25','NANOEDMMC2018_PROD']]
workflows[250206.118]=['ProdZMM_13_pmx25ns',['ProdZMM_13UP18','DIGIPRMXUP18_PROD_PU25','RECOPRMXUP18PROD_PU25','NANOEDMMC2018_PROD']]
workflows[250202.118]=['ProdTTbar_13_pmx25ns',['ProdTTbar_13UP18','DIGIPRMXUP18_PROD_PU25','RECOPRMXUP18PROD_PU25','NANOEDMMC2018_PROD']]"
-------------------------------------------------------------------------
"workflows[250200.118]=['ProdZEE_13_pmx25ns',['ProdZEE_13UP18','DIGIPRMXUP18_PROD_PU25','RECOPRMXUP18PROD_PU25','NANOEDMMC2018_PROD']]
workflows[250206.118]=['ProdZMM_13_pmx25ns',['ProdZMM_13UP18','DIGIPRMXUP18_PROD_PU25','RECOPRMXUP18PROD_PU25','NANOEDMMC2018_PROD']]
workflows[250202.118]=['ProdTTbar_13_pmx25ns',['ProdTTbar_13UP18','DIGIPRMXUP18_PROD_PU25','RECOPRMXUP18PROD_PU25','NANOEDMMC2018_PROD']]
"
-------------------------------------------------------------------------
"Recom
PRs: 24583, 24618"
-------------------------------------------------------------------------
=========================================================================
"# step1 gensim: for 2018 prod
step1Up2018ProdDefaults = merge ([{'--beamspot':'Realistic25ns13TeVEarly2018Collision','--eventcontent':'RAWSIM','--geometry':'DB:Extended'},step1Up2018Defaults])
"
-------------------------------------------------------------------------
"# step1 gensim: for 2018 prod
step1Up2018ProdDefaults = merge ([{'--beamspot':'Realistic25ns13TeVEarly2018Collision','--eventcontent':'RAWSIM','--geometry':'DB:Extended'},step1Up2018Defaults])"
-------------------------------------------------------------------------
"# step1 gensim: for 2018 prod
step1Up2018ProdDefaults = merge ([{'--beamspot':'Realistic25ns13TeVEarly2018Collision','--eventcontent':'RAWSIM','--geometry':'DB:Extended'},step1Up2018Defaults])
"
-------------------------------------------------------------------------
"Recom
PRs: 24583, 24618"
-------------------------------------------------------------------------
=========================================================================
"def gen2018prod(fragment,howMuch):
    global step1Up2018ProdDefaults
    return merge([{'cfg':fragment},howMuch,step1Up2018ProdDefaults])
"
-------------------------------------------------------------------------
"def gen2017(fragment,howMuch):
 def gen2018(fragment,howMuch):
     global step1Up2018Defaults
     return merge([{'cfg':fragment},howMuch,step1Up2018Defaults])"
-------------------------------------------------------------------------
"def gen2018prod(fragment,howMuch):
    global step1Up2018ProdDefaults
    return merge([{'cfg':fragment},howMuch,step1Up2018ProdDefaults])
"
-------------------------------------------------------------------------
"Recom
PRs: 24583, 24618"
-------------------------------------------------------------------------
=========================================================================
"steps['ProdTTbar_13UP18']=gen2018prod('TTbar_13TeV_TuneCUETP8M1_cfi',Kby(9,50))
steps['ProdZEE_13UP18']=gen2018prod('ZEE_13TeV_TuneCUETP8M1_cfi',Kby(9,50))
steps['ProdZMM_13UP18']=gen2018prod('ZMM_13TeV_TuneCUETP8M1_cfi',Kby(18,100))
"
-------------------------------------------------------------------------
"steps['TTbar_13UP18']=gen2018('TTbar_13TeV_TuneCUETP8M1_cfi',Kby(9,50))
steps['ZEE_13UP18']=gen2018('ZEE_13TeV_TuneCUETP8M1_cfi',Kby(9,50))
steps['ZMM_13UP18']=gen2018('ZMM_13TeV_TuneCUETP8M1_cfi',Kby(18,100))"
-------------------------------------------------------------------------
"steps['ProdTTbar_13UP18']=gen2018prod('TTbar_13TeV_TuneCUETP8M1_cfi',Kby(9,50))
steps['ProdZEE_13UP18']=gen2018prod('ZEE_13TeV_TuneCUETP8M1_cfi',Kby(9,50))
steps['ProdZMM_13UP18']=gen2018prod('ZMM_13TeV_TuneCUETP8M1_cfi',Kby(18,100))
"
-------------------------------------------------------------------------
"Recom
PRs: 24583, 24618"
-------------------------------------------------------------------------
=========================================================================
"premixProd25ns2018 = merge([{'-s':'DIGI,DATAMIX,L1,DIGI2RAW,HLT:@relval2018','--datatier':'GEN-SIM-RAW','--geometry':'DB:Extended'},premixProd25ns])
"
-------------------------------------------------------------------------
"premixProd25ns2018 = merge([{'-s':'DIGI,DATAMIX,L1,DIGI2RAW,HLT:@relval2018','--datatier':'GEN-SIM-RAW'},premixProd25ns])"
-------------------------------------------------------------------------
"premixProd25ns2018 = merge([{'-s':'DIGI,DATAMIX,L1,DIGI2RAW,HLT:@relval2018','--datatier':'GEN-SIM-RAW','--geometry':'DB:Extended'},premixProd25ns])
"
-------------------------------------------------------------------------
"Recom
PRs: 24583, 24618"
-------------------------------------------------------------------------
=========================================================================
"steps['RECOPRMXUP18PROD_PU25']=merge([{'--era':'Run2_2018','--conditions':'auto:phase1_2018_realistic','--procModifiers':'premix_stage2'},recoPremixUp17prod])
"
-------------------------------------------------------------------------
"steps['RECOPRMXUP18PROD_PU25']=merge([{'--era':'Run2_2018','--conditions':'auto:phase1_2018_realistic','--procModifiers':'premix_stage2'}, recoPremixUp17prod])"
-------------------------------------------------------------------------
"steps['RECOPRMXUP18PROD_PU25']=merge([{'--era':'Run2_2018','--conditions':'auto:phase1_2018_realistic','--procModifiers':'premix_stage2'},recoPremixUp17prod])
"
-------------------------------------------------------------------------
"Recom
PRs: 24583, 24618"
-------------------------------------------------------------------------
=========================================================================
"stepNanoEDMMCProd   = merge([{ '--mc':'', '-s': 'NANO', '--eventcontent' : 'NANOEDMAODSIM','--datatier': 'NANOAODSIM'    }, stepNanoAODDefaults ])
"
-------------------------------------------------------------------------
"stepNanoEDMMCProd   = merge([{ '--mc':'', '--eventcontent' : 'NANOEDMAODSIM','--datatier': 'NANOAODSIM'    }, stepNanoAODDefaults ])"
-------------------------------------------------------------------------
"stepNanoEDMMCProd   = merge([{ '--mc':'', '-s': 'NANO', '--eventcontent' : 'NANOEDMAODSIM','--datatier': 'NANOAODSIM'    }, stepNanoAODDefaults ])
"
-------------------------------------------------------------------------
"Recom
PRs: 24583, 24618"
-------------------------------------------------------------------------
=========================================================================
"steps['NANOEDMMC2018_PROD'] = merge([{'--conditions': 'auto:phase1_2018_realistic', '--era': 'Run2_2018', '--filein':'file:step3_inMINIAODSIM.root'}, stepNanoEDMMCProd ])
"
-------------------------------------------------------------------------
"steps['NANOEDMMC2018_PROD'] = merge([{'--conditions': 'auto:phase1_2018_realistic', '--era': 'Run2_2018'}, steps['NANOEDMMC2017_94XMiniAODv2'] ])"
-------------------------------------------------------------------------
"steps['NANOEDMMC2018_PROD'] = merge([{'--conditions': 'auto:phase1_2018_realistic', '--era': 'Run2_2018', '--filein':'file:step3_inMINIAODSIM.root'}, stepNanoEDMMCProd ])
"
-------------------------------------------------------------------------
"Recom
PRs: 24583, 24618"
-------------------------------------------------------------------------
=========================================================================
"phase1Pixel.toModify(pvMonitor, EtaBin=31, EtaMin=-3.0, EtaMax=3.0)
"
-------------------------------------------------------------------------
"phase1Pixel.toModify(pvMonitor, EtaBin=31, EtaMin=-3.0, EtaMax=3.0)"
-------------------------------------------------------------------------
"phase1Pixel.toModify(pvMonitor, EtaBin=31, EtaMin=-3.0, EtaMax=3.0)
"
-------------------------------------------------------------------------
"Recom
PRs: 24614, 24616"
-------------------------------------------------------------------------
=========================================================================
"pythia8CP5TuneDownSettingsBlock = cms.PSet(
    pythia8CP5TuneDownSettings = cms.vstring(
"
-------------------------------------------------------------------------
"pythia8CP5TuneDownSettingsBlock = cms.PSet(
    pythia8CP5TuneDownSettings = cms.vstring(
        'Tune:pp 14',
        'Tune:ee 7',
        'MultipartonInteractions:ecmPow=0.03344',"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
pythia8CP5TuneUpSettingsBlock = cms.PSet(
    pythia8CP5TuneUpSettings = cms.vstring(
    'Tune:pp 14',
        'Tune:ee 7',
        'MultipartonInteractions:ecmPow=0.03344',
        'PDF:pSet=20',
        'MultipartonInteractions:bProfile=2',
        'MultipartonInteractions:pT0Ref=1.407',
        'MultipartonInteractions:coreRadius=0.6671',
        'MultipartonInteractions:coreFraction=0.4281',
        'ColourReconnection:range=4.881',
        'SigmaTotal:zeroAXB=off',
        'SpaceShower:alphaSorder=2',
        'SpaceShower:alphaSvalue=0.118',
        'SigmaProcess:alphaSvalue=0.118',
        'SigmaProcess:alphaSorder=2',
        'MultipartonInteractions:alphaSvalue=0.118',
        'MultipartonInteractions:alphaSorder=2',
        'TimeShower:alphaSorder=2',
        'TimeShower:alphaSvalue=0.118',
        )
)
"
-------------------------------------------------------------------------
"Recom
PRs: 24527, 24585"
-------------------------------------------------------------------------
=========================================================================
"pythia8CP5TuneDownSettingsBlock = cms.PSet(
    pythia8CP5TuneDownSettings = cms.vstring(
"
-------------------------------------------------------------------------
"```python
pythia8CP5TuneDownSettingsBlock = cms.PSet(
    pythia8CP5TuneDownSettings = cms.vstring(
        'Tune:pp 14',
        'Tune:ee 7',
        'MultipartonInteractions:ecmPow=0.03344',
```"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
pythia8CP5TuneDownSettingsBlock = cms.PSet(
    pythia8CP5TuneDownSettings = cms.vstring(
    'Tune:pp 14',
        'Tune:ee 7',
        'MultipartonInteractions:ecmPow=0.03344',
        'PDF:pSet=20',
        'MultipartonInteractions:bProfile=2',
		'MultipartonInteractions:pT0Ref=1.46',
        'MultipartonInteractions:coreRadius=0.6879',
        'MultipartonInteractions:coreFraction=0.7253',
        'ColourReconnection:range=4.691',
        'SigmaTotal:zeroAXB=off',
        'SpaceShower:alphaSorder=2',
        'SpaceShower:alphaSvalue=0.118',
        'SigmaProcess:alphaSvalue=0.118',
        'SigmaProcess:alphaSorder=2',
        'MultipartonInteractions:alphaSvalue=0.118',
        'MultipartonInteractions:alphaSorder=2',
        'TimeShower:alphaSorder=2',
        'TimeShower:alphaSvalue=0.118',
        )
)
"
-------------------------------------------------------------------------
"Recom
PRs: 24527, 24584"
-------------------------------------------------------------------------
=========================================================================
"pythia8CP5TuneDownSettingsBlock = cms.PSet(
    pythia8CP5TuneDownSettings = cms.vstring(
"
-------------------------------------------------------------------------
"pythia8CP5TuneDownSettingsBlock = cms.PSet(
    pythia8CP5TuneDownSettings = cms.vstring(
        'Tune:pp 14',
        'Tune:ee 7',
        'MultipartonInteractions:ecmPow=0.03344',"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
pythia8CP5TuneDownSettingsBlock = cms.PSet(
    pythia8CP5TuneDownSettings = cms.vstring(
    'Tune:pp 14',
        'Tune:ee 7',
        'MultipartonInteractions:ecmPow=0.03344',
        'PDF:pSet=20',
        'MultipartonInteractions:bProfile=2',
		'MultipartonInteractions:pT0Ref=1.46',
        'MultipartonInteractions:coreRadius=0.6879',
        'MultipartonInteractions:coreFraction=0.7253',
        'ColourReconnection:range=4.691',
        'SigmaTotal:zeroAXB=off',
        'SpaceShower:alphaSorder=2',
        'SpaceShower:alphaSvalue=0.118',
        'SigmaProcess:alphaSvalue=0.118',
        'SigmaProcess:alphaSorder=2',
        'MultipartonInteractions:alphaSvalue=0.118',
        'MultipartonInteractions:alphaSorder=2',
        'TimeShower:alphaSorder=2',
        'TimeShower:alphaSvalue=0.118',
        )
)
"
-------------------------------------------------------------------------
"Recom
PRs: 24527, 24581"
-------------------------------------------------------------------------
=========================================================================
"pythia8CP5TuneUpSettingsBlock = cms.PSet(
    pythia8CP5TuneUpSettings = cms.vstring(
"
-------------------------------------------------------------------------
"```python
pythia8CP5TuneUpSettingsBlock = cms.PSet(
    Tune = cms.vstring(
```"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
pythia8CP5TuneUpSettingsBlock = cms.PSet(
    pythia8CP5TuneUpSettings = cms.vstring(
    'Tune:pp 14',
        'Tune:ee 7',
        'MultipartonInteractions:ecmPow=0.03344',
        'PDF:pSet=20',
        'MultipartonInteractions:bProfile=2',
        'MultipartonInteractions:pT0Ref=1.407',
        'MultipartonInteractions:coreRadius=0.6671',
        'MultipartonInteractions:coreFraction=0.4281',
        'ColourReconnection:range=4.881',
        'SigmaTotal:zeroAXB=off',
        'SpaceShower:alphaSorder=2',
        'SpaceShower:alphaSvalue=0.118',
        'SigmaProcess:alphaSvalue=0.118',
        'SigmaProcess:alphaSorder=2',
        'MultipartonInteractions:alphaSvalue=0.118',
        'MultipartonInteractions:alphaSorder=2',
        'TimeShower:alphaSorder=2',
        'TimeShower:alphaSvalue=0.118',
        )
)
"
-------------------------------------------------------------------------
"Recom
PRs: 24528, 24580"
-------------------------------------------------------------------------
=========================================================================
"# GlobalTag for Run2 data 2018B relvals only: HEM-15-16 fail
'run2_data_promptlike_HEfail' : '103X_dataRun2_PromptLike_HEfail_v3',
"
-------------------------------------------------------------------------
"# GlobalTag for Run2 data 2018B relvals only: HEM-15-16 fail
'run2_data_promptlike_HEfail' : '103X_dataRun2_PromptLike_HEfail_v3',"
-------------------------------------------------------------------------
"# GlobalTag for Run2 data 2018B relvals only: HEM-15-16 fail
'run2_data_promptlike_HEfail' : '102X_dataRun2_PromptLike_HEfail_v1',
"
-------------------------------------------------------------------------
"Recom
PRs: 24493, 24550"
-------------------------------------------------------------------------
=========================================================================
"# GlobalTag for MC production with realistic conditions for full Phase1 2018 detector: HEM-15-16 fail
'phase1_2018_realistic_HEfail'    : '103X_upgrade2018_realistic_HEfail_v1',
"
-------------------------------------------------------------------------
"# GlobalTag for MC production with realistic conditions for full Phase1 2018 detector: HEM-15-16 fail
'phase1_2018_realistic_HEfail'    : '103X_upgrade2018_realistic_HEfail_v1',"
-------------------------------------------------------------------------
"# GlobalTag for MC production with realistic conditions for full Phase1 2018 detector: HEM-15-16 fail
'phase1_2018_realistic_HEfail'    : '102X_upgrade2018_realistic_v12HEfail_v1',
"
-------------------------------------------------------------------------
"Recom
PRs: 24493, 24550"
-------------------------------------------------------------------------
=========================================================================
"wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt_HEfail']=1
wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt_BadHcalMitig']=1
wmsplit['HLTDR2_2018_BadHcalMitig']=1
"
-------------------------------------------------------------------------
"wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt_HEfail']=1
wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt_BadHcalMitig']=1
wmsplit['HLTDR2_2018_BadHcalMitig']=1
wmsplit['HLTDR2_2018']=1"
-------------------------------------------------------------------------
"wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt_HEfail']=1
wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt_BadHcalMitig']=1
wmsplit['HLTDR2_2018_BadHcalMitig']=1
"
-------------------------------------------------------------------------
"Recom
PRs: 24493, 24550"
-------------------------------------------------------------------------
=========================================================================
"workflows[11024.2]=['',['TTbar_13UP18HEfailINPUT','DigiFullHEfail','RecoFullHEfail','HARVESTFullHEfail','NanoFullHEfail']]
workflows[11024.3]=['',['TTbar_13UP18BadHcalMitigINPUT','DigiFullBadHcalMitig','RecoFullBadHcalMitig','HARVESTFullBadHcalMitig','NanoFullBadHcalMitig']]
"
-------------------------------------------------------------------------
"workflows[11024.2]=['',['TTbar_13UP18HEfailINPUT','DigiFullHEfail','RecoFullHEfail','HARVESTFullHEfail','NanoFullHEfail']]
workflows[11024.3]=['',['TTbar_13UP18BadHcalMitigINPUT','DigiFullBadHcalMitig','RecoFullBadHcalMitig','HARVESTFullBadHcalMitig','NanoFullBadHcalMitig']]"
-------------------------------------------------------------------------
"workflows[11024.2]=['',['TTbar_13UP18HEfailINPUT','DigiFullHEfail','RecoFullHEfail','HARVESTFullHEfail','NanoFullHEfail']]
workflows[11024.3]=['',['TTbar_13UP18BadHcalMitigINPUT','DigiFullBadHcalMitig','RecoFullBadHcalMitig','HARVESTFullBadHcalMitig','NanoFullBadHcalMitig']]
"
-------------------------------------------------------------------------
"Recom
PRs: 24493, 24550"
-------------------------------------------------------------------------
=========================================================================
"workflows[136.8642] = ['',['RunJetHT2018BHEfail','HLTDR2_2018','RECODR2_2018reHLT_skimJetHT_Prompt_HEfail','HARVEST2018_HEfail']]
workflows[136.8643] = ['',['RunJetHT2018BBadHcalMitig','HLTDR2_2018_BadHcalMitig','RECODR2_2018reHLT_skimJetHT_Prompt_BadHcalMitig','HARVEST2018_BadHcalMitig']]
"
-------------------------------------------------------------------------
"workflows[136.8642] = ['',['RunJetHT2018BHEfail','HLTDR2_2018','RECODR2_2018reHLT_skimJetHT_Prompt_HEfail','HARVEST2018_HEfail']]
workflows[136.8643] = ['',['RunJetHT2018BBadHcalMitig','HLTDR2_2018_BadHcalMitig','RECODR2_2018reHLT_skimJetHT_Prompt_BadHcalMitig','HARVEST2018_BadHcalMitig']]"
-------------------------------------------------------------------------
"workflows[136.8642] = ['',['RunJetHT2018BHEfail','HLTDR2_2018','RECODR2_2018reHLT_skimJetHT_Prompt_HEfail','HARVEST2018_HEfail']]
workflows[136.8643] = ['',['RunJetHT2018BBadHcalMitig','HLTDR2_2018_BadHcalMitig','RECODR2_2018reHLT_skimJetHT_Prompt_BadHcalMitig','HARVEST2018_BadHcalMitig']]
"
-------------------------------------------------------------------------
"Recom
PRs: 24493, 24550"
-------------------------------------------------------------------------
=========================================================================
"steps['RunJetHT2018BHEfail']={'INPUT':InputInfo(dataSet='/JetHT/Run2018B-v1/RAW',label='HEfail',events=100000,location='STD', ls=Run2018B)}
steps['RunJetHT2018BBadHcalMitig']={'INPUT':InputInfo(dataSet='/JetHT/Run2018B-v1/RAW',label='BadHcalMitig',events=100000,location='STD', ls=Run2018B)}
"
-------------------------------------------------------------------------
"steps['RunJetHT2018BHEfail']={'INPUT':InputInfo(dataSet='/JetHT/Run2018B-v1/RAW',label='HEfail',events=100000,location='STD', ls=Run2018B)}
steps['RunJetHT2018BBadHcalMitig']={'INPUT':InputInfo(dataSet='/JetHT/Run2018B-v1/RAW',label='BadHcalMitig',events=100000,location='STD', ls=Run2018B)}"
-------------------------------------------------------------------------
"steps['RunJetHT2018BHEfail']={'INPUT':InputInfo(dataSet='/JetHT/Run2018B-v1/RAW',label='HEfail',events=100000,location='STD', ls=Run2018B)}
steps['RunJetHT2018BBadHcalMitig']={'INPUT':InputInfo(dataSet='/JetHT/Run2018B-v1/RAW',label='BadHcalMitig',events=100000,location='STD', ls=Run2018B)}
"
-------------------------------------------------------------------------
"Recom
PRs: 24493, 24550"
-------------------------------------------------------------------------
=========================================================================
"steps['TTbar_13UP18HEfailINPUT']={'INPUT':InputInfo(dataSet='/RelValTTbar_13/%s/GEN-SIM'%(baseDataSetRelease[16],),location='STD')}
steps['TTbar_13UP18BadHcalMitigINPUT']={'INPUT':InputInfo(dataSet='/RelValTTbar_13/%s/GEN-SIM'%(baseDataSetRelease[16],),label='Mitig',location='STD')}
"
-------------------------------------------------------------------------
"steps['TTbar_13UP18HEfailINPUT']={'INPUT':InputInfo(dataSet='/RelValTTbar_13/%s/GEN-SIM'%(baseDataSetRelease[16],),location='STD')}
steps['TTbar_13UP18BadHcalMitigINPUT']={'INPUT':InputInfo(dataSet='/RelValTTbar_13/%s/GEN-SIM'%(baseDataSetRelease[16],),label='Mitig',location='STD'})"
-------------------------------------------------------------------------
"steps['TTbar_13UP18HEfailINPUT']={'INPUT':InputInfo(dataSet='/RelValTTbar_13/%s/GEN-SIM'%(baseDataSetRelease[16],),location='STD')}
steps['TTbar_13UP18BadHcalMitigINPUT']={'INPUT':InputInfo(dataSet='/RelValTTbar_13/%s/GEN-SIM'%(baseDataSetRelease[16],),label='Mitig',location='STD')}
"
-------------------------------------------------------------------------
"Recom
PRs: 24493, 24550"
-------------------------------------------------------------------------
=========================================================================
"steps['HLTDR2_2018_BadHcalMitig']=merge( [ {'--era' : 'Run2_2018,pf_badHcalMitigation'},steps['HLTDR2_2018'] ] )
"
-------------------------------------------------------------------------
"steps['HLTDR2_2018_BadHcalMitig']=merge( [ {'--era' : 'Run2_2018,pf_badHcalMitigation'},steps['HLTDR2_2018'] ] )"
-------------------------------------------------------------------------
"steps['HLTDR2_2018_BadHcalMitig']=merge( [ {'--era' : 'Run2_2018,pf_badHcalMitigation'},steps['HLTDR2_2018'] ] )
"
-------------------------------------------------------------------------
"Recom
PRs: 24493, 24550"
-------------------------------------------------------------------------
=========================================================================
"steps['RECODR2_2018reHLT_skimJetHT_Prompt_HEfail']=merge([{'--conditions':'auto:run2_data_promptlike_HEfail'},steps['RECODR2_2018reHLT_skimJetHT']])
steps['RECODR2_2018reHLT_skimJetHT_Prompt_BadHcalMitig']=merge([{'--conditions':'auto:run2_data_promptlike_HEfail','--era':'Run2_2018,pf_badHcalMitigation'},steps['RECODR2_2018reHLT_skimJetHT']])
"
-------------------------------------------------------------------------
"steps['RECODR2_2018reHLT_skimJetHT_Prompt_HEfail']=merge([{'--conditions':'auto:run2_data_promptlike_HEfail'},steps['RECODR2_2018reHLT_skimJetHT']])
steps['RECODR2_2018reHLT_skimJetHT_Prompt_BadHcalMitig']=merge([{'--conditions':'auto:run2_data_promptlike_HEfail','--era':'Run2_2018,pf_badHcalMitigation'},steps['RECODR2_2018reHLT_skimJetHT']])"
-------------------------------------------------------------------------
"steps['RECODR2_2018reHLT_skimJetHT_Prompt_HEfail']=merge([{'--conditions':'auto:run2_data_promptlike_HEfail'},steps['RECODR2_2018reHLT_skimJetHT']])
steps['RECODR2_2018reHLT_skimJetHT_Prompt_BadHcalMitig']=merge([{'--conditions':'auto:run2_data_promptlike_HEfail','--era':'Run2_2018,pf_badHcalMitigation'},steps['RECODR2_2018reHLT_skimJetHT']])
"
-------------------------------------------------------------------------
"Recom
PRs: 24493, 24550"
-------------------------------------------------------------------------
=========================================================================
"steps['HARVEST2018_HEfail'] = merge([ {'--conditions':'auto:run2_data_promptlike_HEfail'}, steps['HARVEST2018'] ])
steps['HARVEST2018_BadHcalMitig'] = merge([ {'--era' : 'Run2_2018,pf_badHcalMitigation','--conditions':'auto:run2_data_promptlike_HEfail'}, steps['HARVEST2018'] ])
"
-------------------------------------------------------------------------
"steps['HARVEST2018_HEfail'] = merge([ {'--conditions':'auto:run2_data_promptlike_HEfail'}, steps['HARVEST2018'] ])
steps['HARVEST2018_BadHcalMitig'] = merge([ {'--era' : 'Run2_2018,pf_badHcalMitigation', '--conditions':'auto:run2_data_promptlike_HEfail'}, steps['HARVEST2018'] ])"
-------------------------------------------------------------------------
"steps['HARVEST2018_HEfail'] = merge([ {'--conditions':'auto:run2_data_promptlike_HEfail'}, steps['HARVEST2018'] ])
steps['HARVEST2018_BadHcalMitig'] = merge([ {'--era' : 'Run2_2018,pf_badHcalMitigation','--conditions':'auto:run2_data_promptlike_HEfail'}, steps['HARVEST2018'] ])
"
-------------------------------------------------------------------------
"Recom
PRs: 24493, 24550"
-------------------------------------------------------------------------
=========================================================================
"steps['HEfail'] = {'--conditions':'auto:phase1_2018_realistic_HEfail',
                   '-n':'10',
                   '--pileup':'AVE_50_BX_25ns','--pileup_input':'das:/RelValMinBias_13/%s/GEN-SIM'%(baseDataSetRelease[16]),
                   '--era' : 'Run2_2018',
                   '--geometry' : 'DB:Extended'
                  }
steps['DigiFullHEfail']=merge([{'-s':'DIGI:pdigi_valid,L1,DIGI2RAW,HLT:@relval2018','--datatier':'GEN-SIM-DIGI-RAW','--eventcontent':'FEVTDEBUGHLT'}, steps['HEfail']])    
steps['RecoFullHEfail']=merge([{'-s':'RAW2DIGI,L1Reco,RECO,RECOSIM,EI,PAT,VALIDATION:@standardValidation@miniAODValidation,DQM:@standardDQM@ExtraHLT@miniAODDQM',
                                '--datatier':'GEN-SIM-RECO,MINIAODSIM,DQMIO',
                                '--runUnscheduled':'',
                                '--eventcontent':'RECOSIM,MINIAODSIM,DQM',
                               }, steps['HEfail']])
steps['HARVESTFullHEfail']=merge([{'-s':'HARVESTING:@standardValidation@standardDQM@ExtraHLT@miniAODValidation@miniAODDQM','--mc':'','--scenario' : 'pp','--filetype':'DQM'}, steps['HEfail']])
steps['NanoFullHEfail']={'-s':'NANO',
                         '--conditions':'auto:phase1_2018_realistic_HEfail',
                         '-n':'10',
                         '--era' : 'Run2_2018',
                         '--geometry' : 'DB:Extended',
                         '--datatier':'NANOAODSIM',
                         '--eventcontent':'NANOEDMAODSIM',
                         '--filein':'file:step3_inMINIAODSIM.root'}
steps['DigiFullBadHcalMitig']=merge([{'--era' : 'Run2_2018,pf_badHcalMitigation'}, steps['DigiFullHEfail']])
steps['RecoFullBadHcalMitig']=merge([{'--era' : 'Run2_2018,pf_badHcalMitigation'}, steps['RecoFullHEfail']])
steps['HARVESTFullBadHcalMitig']=merge([{'--era' : 'Run2_2018,pf_badHcalMitigation'}, steps['HARVESTFullHEfail']])
steps['NanoFullBadHcalMitig']=merge([{'--era' : 'Run2_2018,pf_badHcalMitigation'}, steps['NanoFullHEfail']])
"
-------------------------------------------------------------------------
"steps['HARVESTNANOAOD2018']=merge([{'--conditions': 'auto:run2_data_promptlike',
steps['NANOMERGE'] = { '-s': 'ENDJOB', '-n': 1000 , '--eventcontent' : 'NANOAODSIM','--datatier': 'NANOAODSIM', '--conditions': 'auto:run2_mc' }
#################################################################################
####From this line till the end of the file :
####UPGRADE WORKFLOWS IN PREPARATION - Gaelle's sandbox -
Required dependency: Configuration.PyReleaseValidation.upgradeWorkflowComponents, MatrixUtil, Configuration.HLT.autoHLT, Configuration.AlCa.autoPCL, 
Original metadata: [10.2.X] add HEM-15-16 relval workflows
auto-merge: disabled--Backport of #24493 .
alca-approved, backport-ok, comparison-available, fully-signed, orp-approved, pdmv-approved, tests-approved, upgrade-approved

steps['HEfail'] = {'--conditions':'auto:phase1_2018_realistic_HEfail',
                   '-n':'10',
                   '--pileup':'AVE_50_BX_25ns','--pileup_input':'das:/RelValMinBias_13/%s/GEN-SIM'%(baseDataSetRelease[16]),
                   '--era' : 'Run2_2018',
                   '--geometry' : 'DB:Extended'
                  }
steps['DigiFullHEfail']=merge([{'-s':'DIGI:pdigi_valid,L1,DIGI2RAW,HLT:@relval2018','--datatier':'GEN-SIM-DIGI-RAW','--eventcontent':'FEVTDEBUGHLT'}, steps['HEfail']])    
steps['RecoFullHEfail']=merge([{'-s':'RAW2DIGI,L1Reco,RECO,RECOSIM,EI,PAT,VALIDATION:@standardValidation@miniAODValidation,DQM:@standardDQM@ExtraHLT@miniAODDQM',
                                '--datatier':'GEN-SIM-RECO,MINIAODSIM,DQMIO',
                                '--runUnscheduled':'',
                                '--eventcontent':'RECOSIM,MINIAODSIM,DQM',
                               }, steps['HEfail']])
steps['HARVESTFullHEfail']=merge([{'-s':'HARVESTING:@standardValidation@standardDQM@ExtraHLT@miniAODValidation@miniAODDQM','--mc':'','--scenario' : 'pp','--filetype':'DQM'}, steps['HEfail']])
steps['NanoFullHEfail']={'-s':'NANO',
                         '--conditions':'auto:phase1_2018_realistic_HEfail',
                         '-n':'10',
                         '--era' : 'Run2_2018',
                         '--geometry' : 'DB:Extended',
                         '--datatier':'NANOAODSIM',
                         '--eventcontent':'NANOEDMAODSIM',
                         '--filein':'file:step3_inMINIAODSIM.root'}
steps['DigiFullBadHcalMitig']=merge([{'--era' : 'Run2_2018,pf_badHcalMitigation'}, steps['DigiFullHEfail']])
steps['RecoFullBadHcalMitig']=merge([{'--era' : 'Run2_2018,pf_badHcalMitigation'}, steps['RecoFullHEfail']])
steps['HARVESTFullBadHcalMitig']=merge([{'--era' : 'Run2_2018,pf_badHcalMitigation'}, steps['HARVESTFullHEfail']])
steps['NanoFullBadHcalMitig']=merge([{'--era' : 'Run2_2018,pf_badHcalMitigation'}, steps['NanoFullHEfail']])
"
-------------------------------------------------------------------------
"steps['HEfail'] = {'--conditions':'auto:phase1_2018_realistic_HEfail',
                   '-n':'10',
                   '--pileup':'AVE_50_BX_25ns','--pileup_input':'das:/RelValMinBias_13/%s/GEN-SIM'%(baseDataSetRelease[16]),
                   '--era' : 'Run2_2018',
                   '--geometry' : 'DB:Extended'
                  }
steps['DigiFullHEfail']=merge([{'-s':'DIGI:pdigi_valid,L1,DIGI2RAW,HLT:@relval2018','--datatier':'GEN-SIM-DIGI-RAW','--eventcontent':'FEVTDEBUGHLT'}, steps['HEfail']])    
steps['RecoFullHEfail']=merge([{'-s':'RAW2DIGI,L1Reco,RECO,RECOSIM,EI,PAT,VALIDATION:@standardValidation@miniAODValidation,DQM:@standardDQM@ExtraHLT@miniAODDQM',
                                '--datatier':'GEN-SIM-RECO,MINIAODSIM,DQMIO',
                                '--runUnscheduled':'',
                                '--eventcontent':'RECOSIM,MINIAODSIM,DQM',
                               }, steps['HEfail']])
steps['HARVESTFullHEfail']=merge([{'-s':'HARVESTING:@standardValidation@standardDQM@ExtraHLT@miniAODValidation@miniAODDQM','--mc':'','--scenario' : 'pp','--filetype':'DQM'}, steps['HEfail']])
steps['NanoFullHEfail']={'-s':'NANO',
                         '--conditions':'auto:phase1_2018_realistic_HEfail',
                         '-n':'10',
                         '--era' : 'Run2_2018',
                         '--geometry' : 'DB:Extended',
                         '--datatier':'NANOAODSIM',
                         '--eventcontent':'NANOEDMAODSIM',
                         '--filein':'file:step3_inMINIAODSIM.root'}
steps['DigiFullBadHcalMitig']=merge([{'--era' : 'Run2_2018,pf_badHcalMitigation'}, steps['DigiFullHEfail']])
steps['RecoFullBadHcalMitig']=merge([{'--era' : 'Run2_2018,pf_badHcalMitigation'}, steps['RecoFullHEfail']])
steps['HARVESTFullBadHcalMitig']=merge([{'--era' : 'Run2_2018,pf_badHcalMitigation'}, steps['HARVESTFullHEfail']])
steps['NanoFullBadHcalMitig']=merge([{'--era' : 'Run2_2018,pf_badHcalMitigation'}, steps['NanoFullHEfail']])
"
-------------------------------------------------------------------------
"Recom
PRs: 24493, 24550"
-------------------------------------------------------------------------
=========================================================================
"process.onlineMetaDataDigis.onlineMetaDataInputLabel = cms.InputTag(""rawDataRepacker"")
process.onlineMetaDataRawToDigi.onlineMetaDataInputLabel = cms.InputTag(""rawDataRepacker"")
process.ctppsPixelDigis.inputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"process.caloLayer1Digis.InputLabel = cms.InputTag(""rawDataRepacker"")
process.castorDigis.InputLabel = cms.InputTag(""rawDataRepacker"")
process.ctppsPixelDigis.inputLabel = cms.InputTag(""rawDataRepacker"")"
-------------------------------------------------------------------------
"process.onlineMetaDataDigis.onlineMetaDataInputLabel = cms.InputTag(""rawDataRepacker"")
process.onlineMetaDataRawToDigi.onlineMetaDataInputLabel = cms.InputTag(""rawDataRepacker"")
process.ctppsPixelDigis.inputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"Recom
PRs: 24529, 24530"
-------------------------------------------------------------------------
=========================================================================
"process.caloLayer1Digis.InputLabel = cms.InputTag(""rawDataRepacker"")
process.l1tStage2BmtfZeroSupp.rawData = cms.InputTag(""rawDataRepacker"")
process.l1tStage2BmtfZeroSuppFatEvts.rawData = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"process.caloLayer1Digis.InputLabel = cms.InputTag(""rawDataRepacker"")
process.l1tStage2BmtfZeroSupp.rawData = cms.InputTag(""rawDataRepacker"")
process.l1tStage2BmtfZeroSuppFatEvts.rawData = cms.InputTag(""rawDataRepacker"")"
-------------------------------------------------------------------------
"process.caloLayer1Digis.InputLabel = cms.InputTag(""rawDataRepacker"")
process.l1tStage2BmtfZeroSupp.rawData = cms.InputTag(""rawDataRepacker"")
process.l1tStage2BmtfZeroSuppFatEvts.rawData = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"Recom
PRs: 24529, 24530"
-------------------------------------------------------------------------
=========================================================================
"process.onlineMetaDataDigis.onlineMetaDataInputLabel = cms.InputTag(""rawDataRepacker"")
process.onlineMetaDataRawToDigi.onlineMetaDataInputLabel = cms.InputTag(""rawDataRepacker"")
process.ctppsPixelDigis.inputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"process.caloLayer1Digis.InputLabel = cms.InputTag(""rawDataRepacker"")
process.onlineMetaDataRawToDigi.onlineMetaDataInputLabel = cms.InputTag(""rawDataRepacker"")
process.ctppsPixelDigis.InputLabel = cms.InputTag(""rawDataRepacker"")"
-------------------------------------------------------------------------
"process.onlineMetaDataDigis.onlineMetaDataInputLabel = cms.InputTag(""rawDataRepacker"")
process.onlineMetaDataRawToDigi.onlineMetaDataInputLabel = cms.InputTag(""rawDataRepacker"")
process.ctppsPixelDigis.inputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"Recom
PRs: 24529, 24530"
-------------------------------------------------------------------------
=========================================================================
"process.caloLayer1Digis.InputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"process.caloLayer1Digis.InputLabel = cms.InputTag(""rawDataRepacker"")"
-------------------------------------------------------------------------
"process.caloLayer1Digis.InputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"Recom
PRs: 24529, 24530"
-------------------------------------------------------------------------
=========================================================================
"if (process.runType.getRunType() == process.runType.hi_run):
  process.muonGEMDigis.InputLabel = cms.InputTag(""rawDataRepacker"")                                                                                                                                          
"
-------------------------------------------------------------------------
"```python
if process.runType.getRunType() == process.runType.hi_run:
    process.muonGEMDigis.InputLabel = cms.InputTag(""rawDataRepacker"")
```"
-------------------------------------------------------------------------
"if (process.runType.getRunType() == process.runType.hi_run):
  process.muonGEMDigis.InputLabel = cms.InputTag(""rawDataRepacker"")                                                                                                                                          
"
-------------------------------------------------------------------------
"Recom
PRs: 24525, 24526"
-------------------------------------------------------------------------
=========================================================================
"process.muonGEMDigis.InputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"process.muonGEMDigis.InputTag = cms.InputTag(""rawDataRepacker"")"
-------------------------------------------------------------------------
"process.muonGEMDigis.InputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"Recom
PRs: 24499, 24500"
-------------------------------------------------------------------------
=========================================================================
"process.totemTimingRawToDigi.rawDataTag = cms.InputTag(""rawDataRepacker"")
process.RPCTwinMuxRawToDigi.inputTag = cms.InputTag(""rawDataRepacker"")
process.omtfStage2Digis.inputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"if (process.runType.getRunType() == process.runType.hi_run):
    process.totemTimingRawToDigi.rawDataTag = cms.InputTag(""rawDataRepacker"")
    process.RPCTwinMuxRawToDigi.inputTag = cms.InputTag(""rawDataRepacker"")
    process.omtfStage2Digis.inputLabel = cms.InputTag(""rawDataRepacker"")"
-------------------------------------------------------------------------
"process.totemTimingRawToDigi.rawDataTag = cms.InputTag(""rawDataRepacker"")
process.RPCTwinMuxRawToDigi.inputTag = cms.InputTag(""rawDataRepacker"")
process.omtfStage2Digis.inputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"Recom
PRs: 24499, 24500"
-------------------------------------------------------------------------
=========================================================================
"process.muonGEMDigis.InputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"process.muonGEMDigis.InputTag = cms.InputTag(""rawDataRepacker"")"
-------------------------------------------------------------------------
"process.muonGEMDigis.InputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"Recom
PRs: 24499, 24500"
-------------------------------------------------------------------------
=========================================================================
"process.totemTimingRawToDigi.rawDataTag = cms.InputTag(""rawDataRepacker"")
process.RPCTwinMuxRawToDigi.inputTag = cms.InputTag(""rawDataRepacker"")
process.omtfStage2Digis.inputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"process.totemTimingRawToDigi.rawDataTag = cms.InputTag(""rawDataRepacker"")
process.rpcTwinMuxRawToDigi.InputLabel = cms.InputTag(""rawDataRepacker"")
process.omtfStage2Digis.InputLabel = cms.InputTag(""rawDataRepacker"")"
-------------------------------------------------------------------------
"process.totemTimingRawToDigi.rawDataTag = cms.InputTag(""rawDataRepacker"")
process.RPCTwinMuxRawToDigi.inputTag = cms.InputTag(""rawDataRepacker"")
process.omtfStage2Digis.inputLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"Recom
PRs: 24499, 24500"
-------------------------------------------------------------------------
=========================================================================
"my_id_modules = ['RecoEgamma.ElectronIdentification.Identification.cutBasedElectronID_Summer16_80X_V1_cff',
                 'RecoEgamma.ElectronIdentification.Identification.cutBasedElectronID_Fall17_94X_V1_cff']
"
-------------------------------------------------------------------------
"my_id_modules = ['RecoEgamma.ElectronIdentification.Identification.cutBasedElectronID_Summer16_80X_V1_cff',
                 'RecoEgamma.ElectronIdentification.Identification.cutBasedElectronID_Fall17_94X_V1_cff',
                 'RecoEgamma.ElectronIdentification.egmGsfElectronIDs_cff']"
-------------------------------------------------------------------------
"my_id_modules = ['RecoEgamma.ElectronIdentification.Identification.cutBasedElectronID_Summer16_80X_V1_cff',
                 'RecoEgamma.ElectronIdentification.Identification.cutBasedElectronID_Fall17_94X_V1_cff']
"
-------------------------------------------------------------------------
"Recom
PRs: 24379, 24453"
-------------------------------------------------------------------------
=========================================================================
"# Revision: 1.19 
# Source: /local/reps/CMSSW/CMSSW/Configuration/Applications/python/ConfigBuilder.py,v 
# with command line options: step4 --conditions 100X_dataRun2_Express_v2 -s ALCAHARVEST:SiPixelQuality --data --era Run2_2017 --filein file:PromptCalibProdSiPixel.root --scenario pp -n 1 --fileout file:step4.root
from Configuration.StandardSequences.Eras import eras
process = cms.Process('ALCAHARVEST',eras.Run2_2018)
process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
process.load('Configuration.StandardSequences.MagneticField_AutoFromDBCurrent_cff')
process.MessageLogger.cerr.FwkReport.reportEvery = 50000
"
-------------------------------------------------------------------------
"# Revision: 1.19 
# Source: /local/reps/CMSSW/CMSSW/Configuration/Applications/python/ConfigBuilder.py,v 
# with command line options: step4 --conditions 100X_dataRun2_Express_v2 -s ALCAHARVEST:SiPixelQuality --data --era Run2_2017 --filein file:PromptCalibProdSiPixel.root --scenario pp -n 1 --fileout file:step4.root
import FWCore.ParameterSet.Config as cms

from Configuration.StandardSequences.Eras import eras
process = cms.Process('ALCAHARVEST', eras.Run2_2018)
process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
process.load('Configuration.StandardSequences.MagneticField_AutoFromDBCurrent_cff')
process.MessageLogger.cerr.FwkReport.reportEvery = 50000"
-------------------------------------------------------------------------
"# Revision: 1.19 
# Source: /local/reps/CMSSW/CMSSW/Configuration/Applications/python/ConfigBuilder.py,v 
# with command line options: step4 --conditions 100X_dataRun2_Express_v2 -s ALCAHARVEST:SiPixelQuality --data --era Run2_2017 --filein file:PromptCalibProdSiPixel.root --scenario pp -n 1 --fileout file:step4.root
from Configuration.StandardSequences.Eras import eras
process = cms.Process('ALCAHARVEST',eras.Run2_2018)
process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
process.load('Configuration.StandardSequences.MagneticField_AutoFromDBCurrent_cff')
process.MessageLogger.cerr.FwkReport.reportEvery = 50000
"
-------------------------------------------------------------------------
"Recom
PRs: 24439, 24443"
-------------------------------------------------------------------------
=========================================================================
"# Production Info
process.configurationMetadata = cms.untracked.PSet(
    annotation = cms.untracked.string('step4 nevts:1'),
    name = cms.untracked.string('Applications'),
    version = cms.untracked.string('$Revision: 1.19 $')
# Output definition
# Other statements
process.PoolDBOutputService.toPut.extend(process.ALCAHARVESTSiPixelQuality_dbOutput)
process.pclMetadataWriter.recordsToMap.extend(process.ALCAHARVESTSiPixelQuality_metadata)
process.GlobalTag = GlobalTag(process.GlobalTag, '102X_dataRun2_Express_v1', '')
process.ALCAHARVESTDQMSaveAndMetadataWriter = cms.Path(process.dqmSaverprocess.pclMetadataWriter)
process.EcalPedestals = cms.Path(process.ALCAHARVESTEcalPedestals)
process.LumiPCC = cms.Path(process.ALCAHARVESTLumiPCC)
process.BeamSpotByRun = cms.Path(process.ALCAHARVESTBeamSpotByRun)
process.SiPixelQuality = cms.Path(process.ALCAHARVESTSiPixelQuality)#process.siPixelPhase1DQMHarvester)
process.SiStripGains = cms.Path(process.ALCAHARVESTSiStripGains)
process.BeamSpotHPByRun = cms.Path(process.ALCAHARVESTBeamSpotHPByRun)
process.SiPixelAli = cms.Path(process.ALCAHARVESTSiPixelAli)
process.BeamSpotByLumi = cms.Path(process.ALCAHARVESTBeamSpotByLumi)
process.BeamSpotHPByLumi = cms.Path(process.ALCAHARVESTBeamSpotHPByLumi)
process.SiStripGainsAAG = cms.Path(process.ALCAHARVESTSiStripGainsAAG)
process.SiStripQuality = cms.Path(process.ALCAHARVESTSiStripQuality)
process.schedule = cms.Schedule(process.SiPixelQuality,process.ALCAHARVESTDQMSaveAndMetadataWriter)
from PhysicsTools.PatAlgos.tools.helpers import associatePatAlgosToolsTask
associatePatAlgosToolsTask(process)
# Customisation from command line
# Add early deletion of temporary data products to reduce peak memory need
from Configuration.StandardSequences.earlyDeleteSettings_cff import customiseEarlyDelete
process = customiseEarlyDelete(process)
# End adding early deletion
"
-------------------------------------------------------------------------
"process.configurationMetadata = cms.untracked.PSet(
    annotation = cms.untracked.string('step4 nevts:1'),
    name = cms.untracked.string('Applications'),
    version = cms.untracked.string('$Revision: 1.19 $')
)

process.PoolDBOutputService.toPut.extend(process.ALCAHARVESTSiPixelQuality_dbOutput)
process.pclMetadataWriter.recordsToMap.extend(process.ALCAHARVESTSiPixelQuality_metadata)
process.GlobalTag = GlobalTag(process.GlobalTag, '102X_dataRun2_Express_v1', '')

process.ALCAHARVESTDQMSaveAndMetadataWriter = cms.Path(process.dqmSaverprocess.pclMetadataWriter)
process.EcalPedestals = cms.Path(process.ALCAHARVESTEcalPedestals)
process.LumiPCC = cms.Path(process.ALCAHARVESTLumiPCC)
process.BeamSpotByRun = cms.Path(process.ALCAHARVESTBeamSpotByRun)
process.SiPixelQuality = cms.Path(process.ALCAHARVESTSiPixelQuality)
process.SiStripGains = cms.Path(process.ALCAHARVESTSiStripGains)
process.BeamSpotHPByRun = cms.Path(process.ALCAHARVESTBeamSpotHPByRun)
process.SiPixelAli = cms.Path(process.ALCAHARVESTSiPixelAli)
process.BeamSpotByLumi = cms.Path(process.ALCAHARVESTBeamSpotByLumi)
process.BeamSpotHPByLumi = cms.Path(process.ALCAHARVESTBeamSpotHPByLumi)
process.SiStripGainsAAG = cms.Path(process.ALCAHARVESTSiStripGainsAAG)
process.SiStripQuality = cms.Path(process.ALCAHARVESTSiStripQuality)

process.schedule = cms.Schedule(process.SiPixelQuality, process.ALCAHARVESTDQMSaveAndMetadataWriter)

from PhysicsTools.PatAlgos.tools.helpers import associatePatAlgosToolsTask
associatePatAlgosToolsTask(process)

from Configuration.StandardSequences.earlyDeleteSettings_cff import customiseEarlyDelete
process = customiseEarlyDelete(process)"
-------------------------------------------------------------------------
"# Production Info
process.configurationMetadata = cms.untracked.PSet(
    annotation = cms.untracked.string('step4 nevts:1'),
    name = cms.untracked.string('Applications'),
    version = cms.untracked.string('$Revision: 1.19 $')
# Output definition
# Other statements
process.PoolDBOutputService.toPut.extend(process.ALCAHARVESTSiPixelQuality_dbOutput)
process.pclMetadataWriter.recordsToMap.extend(process.ALCAHARVESTSiPixelQuality_metadata)
process.GlobalTag = GlobalTag(process.GlobalTag, '102X_dataRun2_Express_v1', '')
process.ALCAHARVESTDQMSaveAndMetadataWriter = cms.Path(process.dqmSaverprocess.pclMetadataWriter)
process.EcalPedestals = cms.Path(process.ALCAHARVESTEcalPedestals)
process.LumiPCC = cms.Path(process.ALCAHARVESTLumiPCC)
process.BeamSpotByRun = cms.Path(process.ALCAHARVESTBeamSpotByRun)
process.SiPixelQuality = cms.Path(process.ALCAHARVESTSiPixelQuality)#process.siPixelPhase1DQMHarvester)
process.SiStripGains = cms.Path(process.ALCAHARVESTSiStripGains)
process.BeamSpotHPByRun = cms.Path(process.ALCAHARVESTBeamSpotHPByRun)
process.SiPixelAli = cms.Path(process.ALCAHARVESTSiPixelAli)
process.BeamSpotByLumi = cms.Path(process.ALCAHARVESTBeamSpotByLumi)
process.BeamSpotHPByLumi = cms.Path(process.ALCAHARVESTBeamSpotHPByLumi)
process.SiStripGainsAAG = cms.Path(process.ALCAHARVESTSiStripGainsAAG)
process.SiStripQuality = cms.Path(process.ALCAHARVESTSiStripQuality)
process.schedule = cms.Schedule(process.SiPixelQuality,process.ALCAHARVESTDQMSaveAndMetadataWriter)
from PhysicsTools.PatAlgos.tools.helpers import associatePatAlgosToolsTask
associatePatAlgosToolsTask(process)
# Customisation from command line
# Add early deletion of temporary data products to reduce peak memory need
from Configuration.StandardSequences.earlyDeleteSettings_cff import customiseEarlyDelete
process = customiseEarlyDelete(process)
# End adding early deletion
"
-------------------------------------------------------------------------
"Recom
PRs: 24439, 24443"
-------------------------------------------------------------------------
=========================================================================
"cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard2/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard3/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard4/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard5/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard6/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard2/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard3/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard4/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard5/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard6/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
"
-------------------------------------------------------------------------
"cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard2/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard3/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard4/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard5/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard6/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard2/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard3/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard4/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard5/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard6/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),"
-------------------------------------------------------------------------
"cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard2/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard3/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard4/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard5/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard6/CaloLayer2/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard2/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard3/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard4/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard5/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGTBoardComparison_MismatchRatioMax0""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGT/uGTBoardComparisons/Board1vsBoard6/Muons/mismatchRatio""),
    QualityTestSummaryEnabled = cms.uint32(1)
    ),
"
-------------------------------------------------------------------------
"Recom
PRs: 24352, 24353"
-------------------------------------------------------------------------
=========================================================================
"args = cms.vstring('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/Powheg/V2/RelValidation/VBFH/VBF_H_slc6_amd64_gcc630_CMSSW_9_3_9_patch1_VBF_new_reducedPdf.tgz'),
"
-------------------------------------------------------------------------
args = cms.vstring('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/Powheg/V2/RelValidation/VBFH/VBF_H_slc6_amd64_gcc630_CMSSW_9_3_9_patch1_VBF_new_reducedPdf.tgz')
-------------------------------------------------------------------------
"args = cms.vstring('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/Powheg/V2/RelValidation/VBFH/VBF_H_slc6_amd64_gcc630_CMSSW_9_3_9_patch1_VBF_new_reducedPdf.tgz'),
"
-------------------------------------------------------------------------
"Recom
PRs: 24208, 24343"
-------------------------------------------------------------------------
=========================================================================
"args = cms.vstring('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/Powheg/V2/RelValidation/VH/HWJ_slc6_amd64_gcc630_CMSSW_9_3_9_patch1_VH_new_reducedPdf.tgz'),
"
-------------------------------------------------------------------------
args = cms.vstring('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/Powheg/V2/RelValidation/VH/HWJ_slc6_amd64_gcc630_CMSSW_9_3_9_patch1_VH_new.tgz')
-------------------------------------------------------------------------
"args = cms.vstring('/cvmfs/cms.cern.ch/phys_generator/gridpacks/slc6_amd64_gcc630/13TeV/Powheg/V2/RelValidation/VH/HWJ_slc6_amd64_gcc630_CMSSW_9_3_9_patch1_VH_new_reducedPdf.tgz'),
"
-------------------------------------------------------------------------
"Recom
PRs: 24208, 24343"
-------------------------------------------------------------------------
=========================================================================
"# loading Meta tags used by commonDQM
process.load('EventFilter.OnlineMetaDataRawToDigi.onlineMetaDataRawToDigi_cfi')
process.onlineMetaDataDigis = cms.EDProducer('OnlineMetaDataRawToDigi')
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
from Configuration.StandardSequences.Eras import eras

# loading Meta tags used by commonDQM
process.load(""DQM.Integration.config.online_customizations_cfi"")
process.onlineMetaDataDigis = cms.EDProducer('onlineMetaDataDigis')"
-------------------------------------------------------------------------
"# loading Meta tags used by commonDQM
process.load('EventFilter.OnlineMetaDataRawToDigi.onlineMetaDataRawToDigi_cfi')
process.onlineMetaDataDigis = cms.EDProducer('OnlineMetaDataRawToDigi')
"
-------------------------------------------------------------------------
"Recom
PRs: 24213, 24218"
-------------------------------------------------------------------------
=========================================================================
"process.onlineMetaDataDigis *
"
-------------------------------------------------------------------------
"process.load(""DQM.Integration.config.online_customizations_cfi"")"
-------------------------------------------------------------------------
"process.onlineMetaDataDigis *
"
-------------------------------------------------------------------------
"Recom
PRs: 24213, 24218"
-------------------------------------------------------------------------
=========================================================================
"TrackMon.TrackPt2DBin = cms.int32(100)
"
-------------------------------------------------------------------------
TrackMon.TrackPt2DBin = cms.int32(100)
-------------------------------------------------------------------------
"TrackMon.TrackPt2DBin = cms.int32(100)
"
-------------------------------------------------------------------------
"Recom
PRs: 23940, 23986"
-------------------------------------------------------------------------
=========================================================================
"alcaBeamSpotProducerHPLowPU.PVFitter.errorScale = cms.untracked.double(0.9)
"
-------------------------------------------------------------------------
alcaBeamSpotProducerHPLowPU.PVFitter.errorScale = cms.untracked.double(0.9)
-------------------------------------------------------------------------
"alcaBeamSpotProducerHPLowPU.PVFitter.errorScale = cms.untracked.double(0.9)
"
-------------------------------------------------------------------------
"Recom
PRs: 23558, 23559"
-------------------------------------------------------------------------
=========================================================================
"MeasurementState = ""default"",
"
-------------------------------------------------------------------------
"MeasurementState = ""default"" # added as a default measurement state"
-------------------------------------------------------------------------
"MeasurementState = ""default"",
"
-------------------------------------------------------------------------
"Recom
PRs: 23523, 23528"
-------------------------------------------------------------------------
=========================================================================
"QualityTestName = cms.string(""uGTDE_CentralBxMismatchRatio""),
QualityTestHist = cms.string(""L1TEMU/L1TdeStage2uGT/dataEmulMismatchRatio_CentralBX""),
QualityTestSummaryEnabled = cms.uint32(1)
"
-------------------------------------------------------------------------
"QualityTestName = cms.untracked.string(""uGTDE_CentralBxMismatchRatio""),
QualityTestHist = cms.untracked.string(""L1TEMU/L1TdeStage2uGT/dataEmulMismatchRatio_CentralBX""),
QualityTestSummaryEnabled = cms.untracked.uint32(1)"
-------------------------------------------------------------------------
"QualityTestName = cms.string(""uGTDE_CentralBxMismatchRatio""),
QualityTestHist = cms.string(""L1TEMU/L1TdeStage2uGT/dataEmulMismatchRatio_CentralBX""),
QualityTestSummaryEnabled = cms.uint32(1)
"
-------------------------------------------------------------------------
"Recom
PRs: 23440, 23441"
-------------------------------------------------------------------------
=========================================================================
"from DQM.L1TMonitorClient.L1TStage2uGTDEQualityTests_cfi import *
"
-------------------------------------------------------------------------
from DQM.L1TMonitorClient.L1TStage2uGTDEQualityTests_cfi import *
-------------------------------------------------------------------------
"from DQM.L1TMonitorClient.L1TStage2uGTDEQualityTests_cfi import *
"
-------------------------------------------------------------------------
"Recom
PRs: 23440, 23441"
-------------------------------------------------------------------------
=========================================================================
"l1TStage2uGTDEQualityTests 
"
-------------------------------------------------------------------------
"l1TStage2uGTDEQualityTests = cms.EDAnalyzer(""QualityTester"",
    qtList = cms.untracked.FileInPath(""DQM/L1TMonitorClient/data/L1TStage2uGTDEQualityTests.xml""),
    prescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    testInEventloop = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    qtestOnEndJob = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(""verboseQT"")
)"
-------------------------------------------------------------------------
"l1TStage2uGTDEQualityTests 
"
-------------------------------------------------------------------------
"Recom
PRs: 23440, 23441"
-------------------------------------------------------------------------
=========================================================================
"# quality tests for L1T Stage2 uGT Data vs Emulator 
 
import FWCore.ParameterSet.Config as cms
l1TStage2uGTDEQualityTests = cms.EDAnalyzer(""QualityTester"",
    qtList=cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TStage2uGTDEQualityTests.xml'),
    QualityTestPrescaler=cms.untracked.int32(1),
    getQualityTestsFromFile=cms.untracked.bool(True),
    testInEventloop=cms.untracked.bool(False),
    qtestOnEndLumi=cms.untracked.bool(True),
    qtestOnEndRun=cms.untracked.bool(True),
    qtestOnEndJob=cms.untracked.bool(False),
    reportThreshold=cms.untracked.string(""""),
    verboseQT=cms.untracked.bool(True)
)
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

l1TStage2uGTDEQualityTests = cms.EDAnalyzer(""QualityTester"",
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TStage2uGTDEQualityTests.xml'),
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    testInEventloop = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    qtestOnEndJob = cms.untracked.bool(False),
    reportThreshold = cms.untracked.string(""""),
    verboseQT = cms.untracked.bool(True)
)"
-------------------------------------------------------------------------
"# quality tests for L1T Stage2 uGT Data vs Emulator 
 
import FWCore.ParameterSet.Config as cms
l1TStage2uGTDEQualityTests = cms.EDAnalyzer(""QualityTester"",
    qtList=cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TStage2uGTDEQualityTests.xml'),
    QualityTestPrescaler=cms.untracked.int32(1),
    getQualityTestsFromFile=cms.untracked.bool(True),
    testInEventloop=cms.untracked.bool(False),
    qtestOnEndLumi=cms.untracked.bool(True),
    qtestOnEndRun=cms.untracked.bool(True),
    qtestOnEndJob=cms.untracked.bool(False),
    reportThreshold=cms.untracked.string(""""),
    verboseQT=cms.untracked.bool(True)
)
"
-------------------------------------------------------------------------
"Recom
PRs: 23440, 23441"
-------------------------------------------------------------------------
=========================================================================
"errorScale = cms.untracked.double(1.1),
"
-------------------------------------------------------------------------
"nSigmaCut = cms.untracked.double(50.),"
-------------------------------------------------------------------------
"errorScale = cms.untracked.double(1.1),
"
-------------------------------------------------------------------------
"Recom
PRs: 23361, 23362"
-------------------------------------------------------------------------
=========================================================================
"highBetaStar_2018.toReplaceWith(mixedTripletStepTrackingRegionsB, _mixedTripletStepTrackingRegionsCommon.clone())
"
-------------------------------------------------------------------------
"mixedTripletStepTrackingRegionsTracking = mixedTripletStepTrackingRegionsB.clone(
    trackingRegion = cms.InputTag('mixedTripletStepTrackingRegionsCommon')
)"
-------------------------------------------------------------------------
"highBetaStar_2018.toReplaceWith(mixedTripletStepTrackingRegionsB, _mixedTripletStepTrackingRegionsCommon.clone())
"
-------------------------------------------------------------------------
"Recom
PRs: 23238, 23360"
-------------------------------------------------------------------------
=========================================================================
"validityRange = cms.EventRange(""290873:min - 311625:max""),
"
-------------------------------------------------------------------------
"validityRange = cms.EventRange(min = 290873, max = 311625),"
-------------------------------------------------------------------------
"validityRange = cms.EventRange(""290873:min - 311625:max""),
"
-------------------------------------------------------------------------
"Recom
PRs: 23119, 23356"
-------------------------------------------------------------------------
=========================================================================
"vertexConstraint = cms.EDProducer(
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

vertexConstraint = cms.EDProducer(
"
-------------------------------------------------------------------------
"vertexConstraint = cms.EDProducer(
"
-------------------------------------------------------------------------
"Recom
PRs: 23301, 23302"
-------------------------------------------------------------------------
=========================================================================
"bool taggingMode_;
"
-------------------------------------------------------------------------
+ bool OnlyHardProcessBHadrons_;
-------------------------------------------------------------------------
"bool taggingMode_;
"
-------------------------------------------------------------------------
"Recom
PRs: 21743, 23167"
-------------------------------------------------------------------------
=========================================================================
"taggingMode_ = iConfig.getParameter<bool>(""taggingMode"");
produces<bool>();
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='taggingMode_', ctx=Store())], value=iConfig.getParameter<bool>(""taggingMode""))"
-------------------------------------------------------------------------
"taggingMode_ = iConfig.getParameter<bool>(""taggingMode"");
produces<bool>();
"
-------------------------------------------------------------------------
"Recom
PRs: 21743, 23167"
-------------------------------------------------------------------------
=========================================================================
"bool pass = HasAdditionalBHadron(*genBHadIndex,*genBHadFlavour,*genBHadPlusMothers,AllTopMothers);
iEvent.put(std::make_unique<bool>(pass));
return taggingMode_ || pass;
"
-------------------------------------------------------------------------
"Rewrite this - bool pass = HasAdditionalBHadron(*genBHadIndex,*genBHadFlavour,*genBHadPlusMothers,AllTopMothers);
iEvent.put(std::make_unique<bool>(pass));

return options.taggingMode or pass;"
-------------------------------------------------------------------------
"bool pass = HasAdditionalBHadron(*genBHadIndex,*genBHadFlavour,*genBHadPlusMothers,AllTopMothers);
iEvent.put(std::make_unique<bool>(pass));
return taggingMode_ || pass;
"
-------------------------------------------------------------------------
"Recom
PRs: 21743, 23167"
-------------------------------------------------------------------------
=========================================================================
"OnlyHardProcessBHadrons = cms.bool(False),
taggingMode               = cms.bool(False)
"
-------------------------------------------------------------------------
"OnlyHardProcessBHadrons = cms.untracked.bool(False),
taggingMode = cms.untracked.bool(False)"
-------------------------------------------------------------------------
"OnlyHardProcessBHadrons = cms.bool(False),
taggingMode             = cms.bool(False)
"
-------------------------------------------------------------------------
"Recom
PRs: 21743, 23167"
-------------------------------------------------------------------------
=========================================================================
"options.register('runOnGenOrAODsim', False, VarParsing.multiplicity.singleton, VarParsing.varType.bool, ""GEN SIM"")
"
-------------------------------------------------------------------------
"options.register('runOnGenOrAODsim', False, VarParsing.multiplicity.singleton, VarParsing.varType.bool, ""GEN SIM"")"
-------------------------------------------------------------------------
"options.register('runOnGenOrAODsim', False, VarParsing.multiplicity.singleton, VarParsing.varType.bool, ""GEN SIM"")
"
-------------------------------------------------------------------------
"Recom
PRs: 21743, 23167"
-------------------------------------------------------------------------
=========================================================================
"options.inputFiles=['/store/mc/RunIIFall17MiniAOD/TTToSemiLeptonic_TuneCP5_PSweights_13TeV-powheg-pythia8/MINIAODSIM/94X_mc2017_realistic_v10-v1/50000/DC5D3109-F2E1-E711-A26E-A0369FC5FC9C.root']
"
-------------------------------------------------------------------------
options.inputFiles = ['/store/mc/RunIIFall17MiniAOD/TTToSemiLeptonic_TuneCP5_PSweights_13TeV-powheg-pythia8/MINIAODSIM/94X_mc2017_realistic_v10-v1/50000/DC5D3109-F2E1-E711-A26E-A0369FC5FC9C.root']
-------------------------------------------------------------------------
"options.inputFiles=['/store/mc/RunIIFall17MiniAOD/TTToSemiLeptonic_TuneCP5_PSweights_13TeV-powheg-pythia8/MINIAODSIM/94X_mc2017_realistic_v10-v1/50000/DC5D3109-F2E1-E711-A26E-A0369FC5FC9C.root']
"
-------------------------------------------------------------------------
"Recom
PRs: 21743, 23167"
-------------------------------------------------------------------------
=========================================================================
"genParticles = genParticleCollection,
taggingMode  = cms.bool(True),
t ""If taggingMode is set to true, the filter will write a branch into the tree instead of filtering the events""
t ""taggingMode is set to "", process.ttHFGenFilter.taggingMode
"
-------------------------------------------------------------------------
"genParticles = genParticleCollection
taggingMode  = cms.bool(True)
t ""If taggingMode is set to true, the filter will write a branch into the tree instead of filtering the events""
t ""taggingMode is set to "", process.ttHFGenFilter.taggingMode
genParticles = genParticleCollection,"
-------------------------------------------------------------------------
"genParticles = genParticleCollection,
taggingMode  = cms.bool(True),
t ""If taggingMode is set to true, the filter will write a branch into the tree instead of filtering the events""
t ""taggingMode is set to "", process.ttHFGenFilter.taggingMode
"
-------------------------------------------------------------------------
"Recom
PRs: 21743, 23167"
-------------------------------------------------------------------------
=========================================================================
"avoidCategories = cms.vstring('MemoryCheck')
"
-------------------------------------------------------------------------
"avoidCategories = cms.vstring('MemoryCheck', 'HLTObjectsMonitor')"
-------------------------------------------------------------------------
"avoidCategories = cms.vstring('MemoryCheck')
"
-------------------------------------------------------------------------
"Recom
PRs: 23153, 23152"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.ProcessModifiers.run2_HECollapse_2018_cff import run2_HECollapse_2018
process = cms.Process(""DQM"", run2_HECollapse_2018)
"
-------------------------------------------------------------------------
"from Configuration.ProcessModifiers.run2_HECollapse_2018_cff import run2_HECollapse_2018
process = cms.Process(""DQM"")
process = run2_HECollapse_2018(process)"
-------------------------------------------------------------------------
"from Configuration.ProcessModifiers.run2_HECollapse_2018_cff import run2_HECollapse_2018
process = cms.Process(""DQM"", run2_HECollapse_2018)
"
-------------------------------------------------------------------------
"Recom
PRs: 23148, 23149"
-------------------------------------------------------------------------
=========================================================================
"run2_DT_2018.toModify(dtTriggerSynchMonitor,processDDU = False)
"
-------------------------------------------------------------------------
"run2_DT_2018.toModify(
    dtTriggerSynchMonitor,
    processDDU = cms.bool(False)
)"
-------------------------------------------------------------------------
"run2_DT_2018.toModify(dtTriggerSynchMonitor,processDDU = False)
"
-------------------------------------------------------------------------
"Recom
PRs: 23144, 23145"
-------------------------------------------------------------------------
=========================================================================
"monitorDir = cms.untracked.string(""L1TEMU/L1TStage2CaloLayer2"")
"
-------------------------------------------------------------------------
"monitorDir = cms.untracked.string(""L1TEMU/L1TStage2CaloLayer2DE"")"
-------------------------------------------------------------------------
"monitorDir = cms.untracked.string(""L1TEMU/L1TStage2CaloLayer2"")
"
-------------------------------------------------------------------------
"Recom
PRs: 23096, 23097"
-------------------------------------------------------------------------
=========================================================================
"l1tStage2CaloLayer2DEClientSummary
"
-------------------------------------------------------------------------
"l1tStage2EmulatorClients = cms.Sequence(
                       + l1tStage2uGMTEmulatorClient
                       + l1tStage2BMTFEmulatorClient
                       + l1tStage2OMTFEmulatorClient
                       # Removed l1tStage2CaloLayer2DEClientSummary
                   )"
-------------------------------------------------------------------------
"l1tStage2CaloLayer2DEClientSummary
"
-------------------------------------------------------------------------
"Recom
PRs: 23096, 23097"
-------------------------------------------------------------------------
=========================================================================
"process.l1tdeStage2CaloLayer1.fedRawDataLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"from DQM.Integration.config.online_customizations_cfi import *
from HLTrigger.HLTfilters.hltHighLevel_cfi import *
from FWCore.ParameterSet.Config as cms
from Configuration.StandardSequences.Eras import eras
process.load('DQM.Integration.config.inputsource_cfi')
process.load('FWCore.ParameterSet.Config as cms')
process.load('Configuration.StandardSequences.Eras as eras')

if (process.runType.getRunType() == process.runType.hi_run):
    process.caloStage1Digis.InputLabel = cms.InputTag(""rawDataRepacker"")
    process.caloStage2Digis.InputLabel = cms.InputTag(""rawDataRepacker"")
    process.simHcalTriggerPrimitiveDigis.InputTagFEDRaw = cms.InputTag(""rawDataRepacker"")
    process.gtStage2Digis.InputLabel = cms.InputTag(""rawDataRepacker"")
    process.selfFatEventFilter.rawInput = cms.InputTag(""rawDataRepacker"")
    process.l1tdeStage2CaloLayer1.fedRawDataLabel = cms.InputTag(""rawDataRepacker"")"
-------------------------------------------------------------------------
"process.l1tdeStage2CaloLayer1.fedRawDataLabel = cms.InputTag(""rawDataRepacker"")
"
-------------------------------------------------------------------------
"Recom
PRs: 23082, 23083"
-------------------------------------------------------------------------
=========================================================================
"valHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('hcalDigis'),cms.InputTag('hcalDigis'))
"
-------------------------------------------------------------------------
"valHcalTriggerPrimitiveDigis.inputLabel = cms.VInputTag(cms.InputTag('hcalDigis'),cms.InputTag('hcalDigis'))"
-------------------------------------------------------------------------
"valHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('hcalDigis'),cms.InputTag('hcalDigis'))
"
-------------------------------------------------------------------------
"Recom
PRs: 23039, 23040"
-------------------------------------------------------------------------
=========================================================================
"SiPixelPhase1Geometry.onlineblock = 150
"
-------------------------------------------------------------------------
"from DQM.SiPixelPhase1DeadFEDChannels.SiPixelPhase1DeadFEDChannels_cfi import *

SiPixelPhase1DeadFEDChannelsAnalyzer
SiPixelPhase1DeadFEDChannelsHarvester = SiPixelPhase1DeadFEDChannelsAnalyzer"
-------------------------------------------------------------------------
"SiPixelPhase1Geometry.onlineblock = 150
"
-------------------------------------------------------------------------
"Recom
PRs: 22959, 22960"
-------------------------------------------------------------------------
=========================================================================
"from DQM.SiPixelPhase1DeadFEDChannels.SiPixelPhase1DeadFEDChannels_cfi import *
"
-------------------------------------------------------------------------
from DQM.SiPixelPhase1DeadFEDChannelsAnalyzer.SiPixelPhase1DeadFEDChannelsAnalyzer_cfi import *
-------------------------------------------------------------------------
"from DQM.SiPixelPhase1DeadFEDChannels.SiPixelPhase1DeadFEDChannels_cfi import *
"
-------------------------------------------------------------------------
"Recom
PRs: 22959, 22960"
-------------------------------------------------------------------------
=========================================================================
"SiPixelPhase1DeadFEDChannelsAnalyzer
"
-------------------------------------------------------------------------
"+ Expr(value=Name(id='SiPixelPhase1DeadFEDChannelsHarvester', ctx=Load()))"
-------------------------------------------------------------------------
"SiPixelPhase1DeadFEDChannelsAnalyzer
"
-------------------------------------------------------------------------
"Recom
PRs: 22959, 22960"
-------------------------------------------------------------------------
=========================================================================
"SiPixelPhase1DeadFEDChannelsHarvester
"
-------------------------------------------------------------------------
SiPixelPhase1DeadFEDChannelsAnalyzer
-------------------------------------------------------------------------
"SiPixelPhase1DeadFEDChannelsHarvester
"
-------------------------------------------------------------------------
"Recom
PRs: 22959, 22960"
-------------------------------------------------------------------------
=========================================================================
"SiPixelPhase1DeadFEDChannelsAnalyzer
"
-------------------------------------------------------------------------
SiPixelPhase1DeadFEDChannelsHarvester
-------------------------------------------------------------------------
"SiPixelPhase1DeadFEDChannelsAnalyzer
"
-------------------------------------------------------------------------
"Recom
PRs: 22959, 22960"
-------------------------------------------------------------------------
=========================================================================
"SiPixelPhase1DeadFEDChannelsAnalyzer
"
-------------------------------------------------------------------------
"Expr(value=Name(id='SiPixelPhase1DeadFEDChannelsHarvester', ctx=Load()))"
-------------------------------------------------------------------------
"SiPixelPhase1DeadFEDChannelsAnalyzer
"
-------------------------------------------------------------------------
"Recom
PRs: 22959, 22960"
-------------------------------------------------------------------------
=========================================================================
"if self.config.fragment: paths.append( ""Scouting*Output"" )
"
-------------------------------------------------------------------------
"if 'fragment' in self.config:
        paths.append( ""Scouting*Output"" )"
-------------------------------------------------------------------------
"if self.config.fragment: paths.append( ""Scouting*Output"" )
"
-------------------------------------------------------------------------
"Recom
PRs: 22943, 22945"
-------------------------------------------------------------------------
=========================================================================
"if self.config.fragment: paths.append( ""Scouting*Output"" )
"
-------------------------------------------------------------------------
"if 'GlobalTag' in config:  
    paths.append( ""Scouting*Output"" )"
-------------------------------------------------------------------------
"if self.config.fragment: paths.append( ""Scouting*Output"" )
"
-------------------------------------------------------------------------
"Recom
PRs: 22943, 22945"
-------------------------------------------------------------------------
=========================================================================
"GlobalTag.globaltag = ""101X_dataRun2_Express_v7""
"
-------------------------------------------------------------------------
"from Configuration.StandardSequences.FrontierConditions_GlobalTag_cff import *
GlobalTag.globaltag = ""101X_dataRun2_Express_v7"""
-------------------------------------------------------------------------
"GlobalTag.globaltag = ""101X_dataRun2_Express_v7""
"
-------------------------------------------------------------------------
"Recom
PRs: 22923, 22922"
-------------------------------------------------------------------------
=========================================================================
"GlobalTag.globaltag = ""101X_dataRun2_HLT_v7""
"
-------------------------------------------------------------------------
"```python
GlobalTag.globaltag = cms.string(""101X_dataRun2_HLT_v7"")
```"
-------------------------------------------------------------------------
"GlobalTag.globaltag = ""101X_dataRun2_HLT_v7""
"
-------------------------------------------------------------------------
"Recom
PRs: 22923, 22922"
-------------------------------------------------------------------------
=========================================================================
"process.HLTSiStripClusterChargeCutNone = cms.PSet(  value = cms.double( -1.0 ) )
"
-------------------------------------------------------------------------
process.HLTSiStripClusterChargeCutNone = cms.PSet(  value = cms.double( -1.0 ) ) # for SiStrip HLT DQM
-------------------------------------------------------------------------
"process.HLTSiStripClusterChargeCutNone = cms.PSet(  value = cms.double( -1.0 ) )
"
-------------------------------------------------------------------------
"Recom
PRs: 22901, 22902"
-------------------------------------------------------------------------
=========================================================================
"DoubleMu33NoFiltersNoVtxDisplaced_monitoring = hltMuonmonitoring.clone()
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.FolderName = cms.string('HLT/EXO/DoubleMu33NoFiltersNoVtxDisplaced/')
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.nmuons = cms.uint32(2)
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_DoubleMu33NoFiltersNoVtxDisplaced_v*"")
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
DoubleMu40NoFiltersNoVtxDisplaced_monitoring = hltMuonmonitoring.clone()
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.FolderName = cms.string('HLT/EXO/DoubleMu40NoFiltersNoVtxDisplaced/')
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.nmuons = cms.uint32(2)
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_DoubleMu40NoFiltersNoVtxDisplaced_v*"")
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
"
-------------------------------------------------------------------------
"Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",
""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",
""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.muonSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",
""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")"
-------------------------------------------------------------------------
"DoubleMu33NoFiltersNoVtxDisplaced_monitoring = hltMuonmonitoring.clone()
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.FolderName = cms.string('HLT/EXO/DoubleMu33NoFiltersNoVtxDisplaced/')
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.nmuons = cms.uint32(2)
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_DoubleMu33NoFiltersNoVtxDisplaced_v*"")
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
DoubleMu40NoFiltersNoVtxDisplaced_monitoring = hltMuonmonitoring.clone()
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.FolderName = cms.string('HLT/EXO/DoubleMu40NoFiltersNoVtxDisplaced/')
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.nmuons = cms.uint32(2)
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_DoubleMu40NoFiltersNoVtxDisplaced_v*"")
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
"
-------------------------------------------------------------------------
"Recom
PRs: 22808, 22869"
-------------------------------------------------------------------------
=========================================================================
"Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.muonSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 43')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.muonSelection = cms.string('pt > 43')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
     DoubleMu33NoFiltersNoVtxDisplaced_monitoring
     DoubleMu40NoFiltersNoVtxDisplaced_monitoring
     Mu43NoFiltersNoVtx_Photon43_CaloIdL_monitoring
     Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring
     Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring
     Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring
     Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring
     Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring
     Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring
"
-------------------------------------------------------------------------
"```python
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"", ""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"", ""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"", ""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"", ""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.muonSelection = cms.string('pt > 38')

Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"", ""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"", ""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 43')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"", ""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"", ""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.muonSelection = cms.string('pt > 43')

DoubleMu33NoFiltersNoVtxDisplaced_monitoring
DoubleMu40NoFiltersNoVtxDisplaced_monitoring
```"
-------------------------------------------------------------------------
"Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.muonSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 43')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.muonSelection = cms.string('pt > 43')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
     DoubleMu43NoFiltersNoVtx_monitoring
     DoubleMu33NoFiltersNoVtxDisplaced_monitoring
     DoubleMu40NoFiltersNoVtxDisplaced_monitoring
     Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring
     Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring
     Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring
     Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring
     Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring
     Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring
"
-------------------------------------------------------------------------
"Recom
PRs: 22808, 22869"
-------------------------------------------------------------------------
=========================================================================
"""HLT_DoubleMu33NoFiltersNoVtxDisplaced_v"", # 2017 displaced mu-mu, muons with dxy> 0.01 cm (main)
""HLT_DoubleMu40NoFiltersNoVtxDisplaced_v"", # 2017 displaced mu-mu, muons with dxy> 0.01 cm (backup)
"
-------------------------------------------------------------------------
"DisplacedDimuonPSet = cms.PSet(
     hltPathsToCheck = cms.vstring(
         ""HLT_DoubleMu43NoFiltersNoVtx_v"", # 2017 displaced mu-mu (main)
         ""HLT_DoubleMu48NoFiltersNoVtx_v"", # 2017 displaced mu-mu (backup)
         ""HLT_DoubleMu33NoFiltersNoVtxDisplaced_v"", # 2017 displaced mu-mu, muons with dxy> 0.01 cm (main)
         ""HLT_DoubleMu40NoFiltersNoVtxDisplaced_v"", # 2017 displaced mu-mu, muons with dxy> 0.01 cm (backup)
         ),
     recMuonLabel  = cms.InputTag(""muons""),
     # -- Analysis specific cuts"
-------------------------------------------------------------------------
"""HLT_DoubleMu33NoFiltersNoVtxDisplaced_v"", # 2017 displaced mu-mu, muons with dxy> 0.01 cm (main)
""HLT_DoubleMu40NoFiltersNoVtxDisplaced_v"", # 2017 displaced mu-mu, muons with dxy> 0.01 cm (backup)
"
-------------------------------------------------------------------------
"Recom
PRs: 22809, 22867"
-------------------------------------------------------------------------
=========================================================================
"""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v"", # 2017 displaced e-mu, muon with dxy> 0.01cm (main)
""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v"", # 2017 displaced e-mu, muon with dxy> 0.01cm (backup)
"
-------------------------------------------------------------------------
"DisplacedMuEGPSet = cms.PSet(
     hltPathsToCheck = cms.vstring(
         ""HLT_Mu43NoFiltersNoVtx_Photon43_CaloIdL_v"", # 2017 displaced e-mu (main)
         ""HLT_Mu48NoFiltersNoVtx_Photon48_CaloIdL_v"", # 2017 displaced e-mu (backup)
         ""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v"", # 2017 displaced e-mu, muon with dxy> 0.01cm (main)
         ""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v"", # 2017 displaced e-mu, muon with dxy> 0.01cm (backup)
         ),
     recElecLabel  = cms.InputTag(""gedGsfElectrons""),
     recMuonLabel  = cms.InputTag(""muons""),"
-------------------------------------------------------------------------
"""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v"", # 2017 displaced e-mu, muon with dxy> 0.01cm (main)
""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v"", # 2017 displaced e-mu, muon with dxy> 0.01cm (backup)
"
-------------------------------------------------------------------------
"Recom
PRs: 22809, 22867"
-------------------------------------------------------------------------
=========================================================================
"aveDigiOcc_(iConfig.getParameter<ParameterSet>(""SiPixelStatusManagerParameters"").getUntrackedParameter<int>(""aveDigiOcc"")),
siPixelStatusManager_(iConfig, consumesCollector()){  
debug_ = iConfig.getUntrackedParameter<bool>(""debug"");
"
-------------------------------------------------------------------------
"Save the changes as follows - 
aveDigiOcc_ = iConfig.getParameter<ParameterSet>(""SiPixelStatusManagerParameters"").getUntrackedParameter<int>(""aveDigiOcc"");
siPixelStatusManager_ = SiPixelStatusHarvester(iConfig, consumesCollector());  
debug_ = iConfig.getUntrackedParameter<bool>(""debug"");"
-------------------------------------------------------------------------
"aveDigiOcc_(iConfig.getParameter<ParameterSet>(""SiPixelStatusManagerParameters"").getUntrackedParameter<int>(""aveDigiOcc"")),
siPixelStatusManager_(iConfig, consumesCollector()){  
debug_ = iConfig.getUntrackedParameter<bool>(""debug"");
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"// IOV for final payloads. FEDerror25 and pcl
std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t> finalIOV;
std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t> fedError25IOV;
std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t> pclIOV;
"
-------------------------------------------------------------------------
"// IOV for final payloads. FEDerror25 and pcl
std::map<std::pair<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t>, edm::LuminosityBlockNumber_t> finalIOV;
std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t> fedError25IOV;
std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t> pclIOV;"
-------------------------------------------------------------------------
"// IOV for final payloads. FEDerror25 and pcl
std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t> finalIOV;
std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t> fedError25IOV;
std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t> pclIOV;
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"} // loop over modules
finalIOV[it->first] = it->first;
fedError25IOV[it->first] = it->first;
poolDbService->writeOne<SiPixelQuality>(siPixelQuality, thisIOV, recordName_""_stuckTBM"");
 for PCL combines permanent bad/stuckTBM/other
nalIOV[it->first] = it->first;
lIOV[it->first] = it->first;
p over final IOV
ap<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t>::iterator itIOV;
IOV=finalIOV.begin();itIOV!=finalIOV.end();itIOV){
edm::LuminosityBlockID lu(iRun.id().run(),itIOV->first);
thisIOV = (cond::Time_t)(lu.value());
edm::LuminosityBlockNumber_t lumiStuckTBMs = SiPixelStatusHarvester::stepIOV(itIOV->first,fedError25IOV);
edm::LuminosityBlockNumber_t lumiPCL = SiPixelStatusHarvester::stepIOV(itIOV->first,pclIOV);
// get badROC list due to FEDerror25 = stuckTBM  permanent bad components
std::map<int, std::vector<int> > tmpFEDerror25 = FEDerror25Map[lumiStuckTBMs];
// get SiPixelDetectorStatus
SiPixelDetectorStatus tmpSiPixelStatus = siPixelStatusMap[lumiPCL];
"
-------------------------------------------------------------------------
"```cpp
    } // loop over modules
    finalIOV[it->first] = it->first;
    fedError25IOV[it->first] = it->first;

    poolDbService->writeOne<SiPixelQuality>(siPixelQuality, thisIOV, recordName_""_stuckTBM"");

    // For PCL combines permanent bad/stuckTBM/other
    finalIOV[it->first] = it->first;
    fedError25IOV[it->first] = it->first;

    // Loop over final IOV
    map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t>::iterator itIOV;
    for (itIOV = finalIOV.begin(); itIOV != finalIOV.end(); itIOV++) {
        edm::LuminosityBlockID lu(iRun.id().run(), itIOV->first);
        thisIOV = (cond::Time_t)(lu.value());
        edm::LuminosityBlockNumber_t lumiStuckTBMs = SiPixelStatusHarvester::stepIOV(itIOV->first, fedError25IOV);
        edm::LuminosityBlockNumber_t lumiPCL = SiPixelStatusHarvester::stepIOV(itIOV->first, pclIOV);
        // Get badROC list due to FEDerror25 = stuckTBM and permanent bad components
        std::map<int, std::vector<int>> tmpFEDerror25 = FEDerror25Map[lumiStuckTBMs];
        // Get SiPixelDetectorStatus
        SiPixelDetectorStatus tmpSiPixelStatus = siPixelStatusMap[lumiPCL];
    }
```"
-------------------------------------------------------------------------
"} // loop over modules
finalIOV[it->first] = it->first;
fedError25IOV[it->first] = it->first;
poolDbService->writeOne<SiPixelQuality>(siPixelQuality, thisIOV, recordName_""_stuckTBM"");
 for PCL combines permanent bad/stuckTBM/other
nalIOV[it->first] = it->first;
lIOV[it->first] = it->first;
p over final IOV
ap<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t>::iterator itIOV;
IOV=finalIOV.begin();itIOV!=finalIOV.end();itIOV){
edm::LuminosityBlockID lu(iRun.id().run(),itIOV->first);
thisIOV = (cond::Time_t)(lu.value());
edm::LuminosityBlockNumber_t lumiStuckTBMs = SiPixelStatusHarvester::stepIOV(itIOV->first,fedError25IOV);
edm::LuminosityBlockNumber_t lumiPCL = SiPixelStatusHarvester::stepIOV(itIOV->first,pclIOV);
// get badROC list due to FEDerror25 = stuckTBM  permanent bad components
std::map<int, std::vector<int> > tmpFEDerror25 = FEDerror25Map[lumiStuckTBMs];
// get SiPixelDetectorStatus
SiPixelDetectorStatus tmpSiPixelStatus = siPixelStatusMap[lumiPCL];
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"// create the bad module list for PCL, prompt and other
"
-------------------------------------------------------------------------
"// Create the disabled module list for PCL, prompt, and other"
-------------------------------------------------------------------------
"// create the bad module list for PCL, prompt and other
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"//PCL bad roc list
//FEDerror25 list
// from prompt = PCL bad - stuckTBM =  PCL bad - FEDerror25  permanent bad
   // if not FEDerror25 or permanent bad
   BadRocListPrompt.push_back(uint32_t(iroc));
// other source of bad components = prompt - permanent bad = PCL bad - FEDerror25
// or to be safe, say not FEDerro25 and not permanent bad
   // if not permanent and not stuck TBM
   BadRocListOther.push_back(uint32_t(iroc)); 
oop over ROCs
mpt
er
badrocsOther= 0;
rue) // only produce the tag for all sources of bad components for debugging reason
rvice->writeOne<SiPixelQuality>(siPixelQualityPCL, thisIOV, recordName_""_PCL"");
e->writeOne<SiPixelQuality>(siPixelQualityPrompt, thisIOV, recordName_""_prompt"");
e->writeOne<SiPixelQuality>(siPixelQualityOther, thisIOV, recordName_""_other"");
V
"
-------------------------------------------------------------------------
"        //PCL bad roc list
        //FEDerror25 list
        // from prompt = PCL bad - stuckTBM =  PCL bad - FEDerror25  permanent bad
        // if not FEDerror25 or permanent bad
        if(rocOccupancy<1.e-4*DetAverage){

          BadRocListPCL.push_back(uint32_t(iroc));
          std::vector<int>::iterator it = std::find(listFEDerror25.begin(), listFEDerror25.end(),iroc);
        
          if(it==listFEDerror25.end() || badPixelInfo_->IsRocBad(detid, iroc)) 

          if(it!=listFEDerror25.end() || badPixelInfo_->IsRocBad(detid, iroc)) 
        }

        // other source of bad components = prompt - permanent bad = PCL bad - FEDerror25
        // or to be safe, say not FEDerro25 and not permanent bad
        if(it==listFEDerror25.end() && !badPixelInfo_->IsRocBad(detid, iroc))
        // if not permanent and not stuck TBM
        BadRocListOther.push_back(uint32_t(iroc));
        
        // loop over ROCs
        // mpt
        // er
        short badrocsOther= 0;
         
        // end module loop
        // only produce the tag for all sources of bad components for debugging reason
        service->writeOne<SiPixelQuality>(siPixelQualityPCL, thisIOV, recordName+""_PCL"");
        service->writeOne<SiPixelQuality>(siPixelQualityPrompt, thisIOV, recordName+""_prompt"");
        service->writeOne<SiPixelQuality>(siPixelQualityOther, thisIOV, recordName+""_other"");
"
-------------------------------------------------------------------------
"//PCL bad roc list
//FEDerror25 list
// from prompt = PCL bad - stuckTBM =  PCL bad - FEDerror25  permanent bad
   // if not FEDerror25 or permanent bad
   BadRocListPrompt.push_back(uint32_t(iroc));
// other source of bad components = prompt - permanent bad = PCL bad - FEDerror25
// or to be safe, say not FEDerro25 and not permanent bad
   // if not permanent and not stuck TBM
   BadRocListOther.push_back(uint32_t(iroc)); 
oop over ROCs
mpt
er
badrocsOther= 0;
rue) // only produce the tag for all sources of bad components for debugging reason
rvice->writeOne<SiPixelQuality>(siPixelQualityPCL, thisIOV, recordName_""_PCL"");
e->writeOne<SiPixelQuality>(siPixelQualityPrompt, thisIOV, recordName_""_prompt"");
e->writeOne<SiPixelQuality>(siPixelQualityOther, thisIOV, recordName_""_other"");
V
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"// step function for IOV
edm::LuminosityBlockNumber_t SiPixelStatusHarvester::stepIOV(edm::LuminosityBlockNumber_t pin, std::map<edm::LuminosityBlockNumber_t,edm::LuminosityBlockNumber_t> IOV){
   std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t>::iterator itIOV;
   for(itIOV=IOV.begin();itIOV!=IOV.end();itIOV){
       std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t>::iterator nextItIOV;
       nextItIOV = itIOV; nextItIOV;
       if(nextItIOV!=IOV.end()){ 
          if(pin>=itIOV->first && pin<nextItIOV->first){
             return itIOV->first;
          }
       }
       else{
          if(pin>=itIOV->first){
             return itIOV->first;
          }
       }
   }
   // return the firstIOV in case all above fail
   return (IOV.begin())->first;
   
}
"
-------------------------------------------------------------------------
"```cpp
// step function for IOV
edm::LuminosityBlockNumber_t SiPixelStatusHarvester::stepIOV(edm::LuminosityBlockNumber_t pin, std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t> IOV){
   std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t>::iterator itIOV;
   for(itIOV = IOV.begin(); itIOV != IOV.end(); itIOV++){
       std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t>::iterator nextItIOV = itIOV;
       nextItIOV++;
       if(nextItIOV != IOV.end()){ 
          if(pin >= itIOV->first && pin < nextItIOV->first){
             return itIOV->first;
          }
       }
       else{
          if(pin >= itIOV->first){
             return itIOV->first;
          }
       }
   }
   // return the firstIOV in case all above fail
   return (IOV.begin())->first;
}
```"
-------------------------------------------------------------------------
"// step function for IOV
edm::LuminosityBlockNumber_t SiPixelStatusHarvester::stepIOV(edm::LuminosityBlockNumber_t pin, std::map<edm::LuminosityBlockNumber_t,edm::LuminosityBlockNumber_t> IOV){
   std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t>::iterator itIOV;
   for(itIOV=IOV.begin();itIOV!=IOV.end();itIOV){
       std::map<edm::LuminosityBlockNumber_t, edm::LuminosityBlockNumber_t>::iterator nextItIOV;
       nextItIOV = itIOV; nextItIOV;
       if(nextItIOV!=IOV.end()){ 
          if(pin>=itIOV->first && pin<nextItIOV->first){
             return itIOV->first;
          }
       }
       else{
          if(pin>=itIOV->first){
             return itIOV->first;
          }
       }
   }
   // return the firstIOV in case all above fail
   return (IOV.begin())->first;
   
}
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"if (pgdu == nullptr) continue;
"
-------------------------------------------------------------------------
if (const PixelGeomDetUnit *pgdu = dynamic_cast<const PixelGeomDetUnit*>((*it)); pgdu == nullptr) continue;
-------------------------------------------------------------------------
"if (pgdu == nullptr) continue;
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"if(!iEvent.getByToken(fSiPixelClusterToken_, hClusterColl)){
   edm::LogWarning(""SiPixelStatusProducer"") << "" edmNew::DetSetVector<SiPixelCluster> ""<<fPixelClusterLabel_<<"" does not exist!""<<endl;
   return;
}
iEvent.getByToken(fSiPixelClusterToken_, hClusterColl);
if (hClusterColl.isValid()){
   for (const auto& clusters: *hClusterColl) { //loop over different clusters in a clusters vector (module)
         for(const auto& clu: clusters) { // loop over cluster in a given detId (module)
"
-------------------------------------------------------------------------
"```cpp
// Check if the cluster collection exists in the event
if (!iEvent.getByToken(fSiPixelClusterToken_, hClusterColl)) {
   edm::LogWarning(""SiPixelStatusProducer"") << "" edmNew::DetSetVector<SiPixelCluster> "" << fPixelClusterLabel_ << "" does not exist!"" << endl;
   return;
}

// Get the cluster collection from the event
iEvent.getByToken(fSiPixelClusterToken_, hClusterColl);

// Check if the cluster collection is valid
if (hClusterColl.isValid()) {
   for (const auto& clusters: *hClusterColl) { // Loop over different clusters in a clusters vector (module)
      for (const auto& clu: clusters) { // Loop over cluster in a given detId (module)
```"
-------------------------------------------------------------------------
"if(!iEvent.getByToken(fSiPixelClusterToken_, hClusterColl)){
   edm::LogWarning(""SiPixelStatusProducer"") << "" edmNew::DetSetVector<SiPixelCluster> ""<<fPixelClusterLabel_<<"" does not exist!""<<endl;
   return;
}
iEvent.getByToken(fSiPixelClusterToken_, hClusterColl);
if (hClusterColl.isValid()){
   for (const auto& clusters: *hClusterColl) { //loop over different clusters in a clusters vector (module)
         for(const auto& clu: clusters) { // loop over cluster in a given detId (module)
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"} // hClusterColl.isValid()
else{
    edm::LogWarning(""SiPixelStatusProducer"") << "" edmNew::DetSetVector<SiPixelCluster> ""<<fPixelClusterLabel_<<"" is NOT Valid!""<<endl;
}
"
-------------------------------------------------------------------------
"} // hClusterColl.isValid()
else{
    std::cout << "" edmNew::DetSetVector<SiPixelCluster> ""<<fPixelClusterLabel_<<"" is NOT Valid!"" << std::endl;
}"
-------------------------------------------------------------------------
"} // hClusterColl.isValid()
else{
    edm::LogWarning(""SiPixelStatusProducer"") << "" edmNew::DetSetVector<SiPixelCluster> ""<<fPixelClusterLabel_<<"" is NOT Valid!""<<endl;
}
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"// collection has to exist
if (!iEvent.getByToken(tk, pixelFEDChannelCollectionHandle)) {
   edm::LogWarning(""SiPixelStatusProducer"") << "" PixelFEDChannelCollection with index ""<<tk.index()<<"" does NOT exist!""<<endl;
   continue;
}
// collection has to be valid
if(!pixelFEDChannelCollectionHandle.isValid()) {
   edm::LogWarning(""SiPixelStatusProducer"") << "" PixelFEDChannelCollection with index ""<<tk.index()<<"" is NOT valid!""<<endl;
   continue;
}
"
-------------------------------------------------------------------------
"if (!iEvent.getByToken(tk, pixelFEDChannelCollectionHandle)) {
   edm::LogWarning(""SiPixelStatusProducer"") << "" PixelFEDChannelCollection with index ""<<tk.index()<<"" does NOT exist!"";
   continue;
}
if (!pixelFEDChannelCollectionHandle.isValid()) {
   edm::LogWarning(""SiPixelStatusProducer"") << "" PixelFEDChannelCollection with index ""<<tk.index()<<"" is NOT valid!"";
   continue;
}"
-------------------------------------------------------------------------
"// collection has to exist
if (!iEvent.getByToken(tk, pixelFEDChannelCollectionHandle)) {
   edm::LogWarning(""SiPixelStatusProducer"") << "" PixelFEDChannelCollection with index ""<<tk.index()<<"" does NOT exist!""<<endl;
   continue;
}
// collection has to be valid
if(!pixelFEDChannelCollectionHandle.isValid()) {
   edm::LogWarning(""SiPixelStatusProducer"") << "" PixelFEDChannelCollection with index ""<<tk.index()<<"" is NOT valid!""<<endl;
   continue;
}
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"lumiSeg.put(std::move(result), std::string(""siPixelStatus""));
edm::LogInfo(""SiPixelStatusProducer"")
"
-------------------------------------------------------------------------
"```cpp
 lumiSeg.put(std::move(fDet), std::string(""siPixelStatus""));
 edm::LogInfo(""SiPixelStatusProducer"")
```"
-------------------------------------------------------------------------
"lumiSeg.put(std::move(result), std::string(""siPixelStatus""));
edm::LogInfo(""SiPixelStatusProducer"")
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"recordName   = cms.untracked.string(""SiPixelQualityFromDbRcd"")
"
-------------------------------------------------------------------------
"record = cms.string(""SiPixelQualityFromDbRcd"")"
-------------------------------------------------------------------------
"recordName   = cms.untracked.string(""SiPixelQualityFromDbRcd"")
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"siPixelStatusVtr_.clear();
-----------------------------------------------------------------------------------------------
SiPixelStatusManager::rankByLumi(SiPixelDetectorStatus status1,SiPixelDetectorStatus status2) 
urn (status1.getLSRange().first < status2.getLSRange().first); }
SiPixelStatusManager::createPayloads(){
 sort the vector according to lumi
d::sort(siPixelStatusVtr_.begin(), siPixelStatusVtr_.end(), SiPixelStatusManager::rankByLumi);
 create FEDerror25 ROCs and bad ROCs from PCL
PixelStatusManager::createFEDerror25();
PixelStatusManager::createBadComponents();
 realse the cost of siPixelStatusVtr_ since it is not needed anymore
PixelStatusVtr_.clear();
"
-------------------------------------------------------------------------
"SiPixelStatusManager::rankByLumi(SiPixelDetectorStatus status1, SiPixelDetectorStatus status2) {
    return (status1.getLSRange().first < status2.getLSRange().first);
}
void SiPixelStatusManager::createPayloads(){
    // Sort the vector according to lumi
    std::sort(siPixelStatusVtr_.begin(), siPixelStatusVtr_.end(), SiPixelStatusManager::rankByLumi);
    
    // Create FEDerror25 ROCs and bad ROCs from PCL
    PixelStatusManager::createFEDerror25();
    PixelStatusManager::createBadComponents();
    
    // Release the memory of siPixelStatusVtr_ since it is not needed anymore
    siPixelStatusVtr_.clear();
}"
-------------------------------------------------------------------------
"siPixelStatusVtr_.clear();
-----------------------------------------------------------------------------------------------
SiPixelStatusManager::rankByLumi(SiPixelDetectorStatus status1,SiPixelDetectorStatus status2) 
urn (status1.getLSRange().first < status2.getLSRange().first); }
SiPixelStatusManager::createPayloads(){
 sort the vector according to lumi
d::sort(siPixelStatusVtr_.begin(), siPixelStatusVtr_.end(), SiPixelStatusManager::rankByLumi);
 create FEDerror25 ROCs and bad ROCs from PCL
PixelStatusManager::createFEDerror25();
PixelStatusManager::createBadComponents();
 realse the cost of siPixelStatusVtr_ since it is not needed anymore
PixelStatusVtr_.clear();
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"SiPixelDetectorStatus tmpStatus = (*siPixelStatusHandle);
if(tmpStatus.digiOccDET()>0){ // only put in SiPixelDetectorStatus with non zero digi (pixel hit)
  siPixelStatusVtr_.push_back(tmpStatus);
}
   edm::LogWarning(""SiPixelStatusManager"")
    << "" SiPixelDetectorStatus is not valid for run ""<<iLumi.run()<<"" lumi ""<<iLumi.luminosityBlock()<< std::endl;
PixelStatusVtr_iterator firstStatus    = siPixelStatusVtr_.begin();
PixelStatusVtr_iterator lastStatus     = siPixelStatusVtr_.end();
PixelStatusMap_.clear();
"
-------------------------------------------------------------------------
"SiPixelDetectorStatus tmpStatus = (*siPixelStatusHandle);
if(tmpStatus.digiOccDET()>0){ // check digiOccDET
  siPixelStatusVtr_.push_back(tmpStatus);
} else {
  edm::LogWarning(""SiPixelStatusManager"")
    << "" SiPixelDetectorStatus is not valid for run ""<<iLumi.run()<<"" lumi ""<<iLumi.luminosityBlock()<< std::endl;
}
PixelStatusVtr_iterator firstStatus    = siPixelStatusVtr_.begin();
PixelStatusVtr_iterator lastStatus     = siPixelStatusVtr_.end();
PixelStatusMap_.clear();"
-------------------------------------------------------------------------
"SiPixelDetectorStatus tmpStatus = (*siPixelStatusHandle);
if(tmpStatus.digiOccDET()>0){ // only put in SiPixelDetectorStatus with non zero digi (pixel hit)
  siPixelStatusVtr_.push_back(tmpStatus);
}
   edm::LogWarning(""SiPixelStatusManager"")
    << "" SiPixelDetectorStatus is not valid for run ""<<iLumi.run()<<"" lumi ""<<iLumi.luminosityBlock()<< std::endl;
PixelStatusVtr_iterator firstStatus    = siPixelStatusVtr_.begin();
PixelStatusVtr_iterator lastStatus     = siPixelStatusVtr_.end();
PixelStatusMap_.clear();
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"for (siPixelStatusVtr_iterator it = firstStatus; it != lastStatus; it) {
       tmpLumi = edm::LuminosityBlockNumber_t(it->getLSRange().first);
       tmpSiPixelStatus = (*it); 
      tmpSiPixelStatus.updateDetectorStatus((*it));
      tmpSiPixelStatus.setLSRange(int(tmpLumi), (*it).getLSRange().second);
    siPixelStatusVtr_iterator currentIt = it;
    siPixelStatusVtr_iterator nextIt = (currentIt);
         siPixelStatusMap_[tmpLumi] = tmpSiPixelStatus;
// (only when siPixelStatusVtr_.size() > nLumi_ or equivalently current siPixelStatusMap_.size()>1
if(siPixelStatusVtr_.size()%nLumi_!=0 && siPixelStatusMap_.size()>1){
   siPixelStatusMap_iterator iterEnd = siPixelStatusMap_.end();
"
-------------------------------------------------------------------------
"for (auto it = firstStatus; it != lastStatus; ++it) {
       tmpLumi = edm::LuminosityBlockNumber_t(it->getLSRange().first);
       tmpSiPixelStatus = (*it); 
       tmpSiPixelStatus.updateDetectorStatus((*it));
       tmpSiPixelStatus.setLSRange(int(tmpLumi), (*it).getLSRange().second);
       auto currentIt = it;
       auto nextIt = std::next(currentIt);
       siPixelStatusMap_[tmpLumi] = tmpSiPixelStatus;
       if (siPixelStatusVtr_.size() > nLumi_ || siPixelStatusMap_.size() > 1) {
           if(siPixelStatusVtr_.size() % nLumi_ != 0 && siPixelStatusMap_.size() > 1){
               auto iterEnd = siPixelStatusMap_.end();
           }
       }
}"
-------------------------------------------------------------------------
"for (siPixelStatusVtr_iterator it = firstStatus; it != lastStatus; it) {
       tmpLumi = edm::LuminosityBlockNumber_t(it->getLSRange().first);
       tmpSiPixelStatus = (*it); 
      tmpSiPixelStatus.updateDetectorStatus((*it));
      tmpSiPixelStatus.setLSRange(int(tmpLumi), (*it).getLSRange().second);
    siPixelStatusVtr_iterator currentIt = it;
    siPixelStatusVtr_iterator nextIt = (currentIt);
         siPixelStatusMap_[tmpLumi] = tmpSiPixelStatus;
// (only when siPixelStatusVtr_.size() > nLumi_ or equivalently current siPixelStatusMap_.size()>1
if(siPixelStatusVtr_.size()%nLumi_!=0 && siPixelStatusMap_.size()>1){
   siPixelStatusMap_iterator iterEnd = siPixelStatusMap_.end();
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"(iterBeforeLastIOV->second).setLSRange((iterBeforeLastIOV->second).getLSRange().first, (iterLastIOV->second).getLSRange().second);
siPixelStatusMap_.erase(iterLastIOV);
::LuminosityBlockNumber_t tmpLumi;
 (siPixelStatusVtr_iterator it = firstStatus; it != lastStatus; it) {
        tmpLumi = edm::LuminosityBlockNumber_t(it->getLSRange().first);
        tmpSiPixelStatus = (*it);
        tmpSiPixelStatus.updateDetectorStatus((*it));
        tmpSiPixelStatus.setLSRange(int(tmpLumi),(*it).getLSRange().second);
  siPixelStatusVtr_iterator currentIt = it;
  siPixelStatusVtr_iterator nextIt = (currentIt);
    siPixelStatusMap_[tmpLumi]=tmpSiPixelStatus;
"
-------------------------------------------------------------------------
"```cpp
(iterBeforeLastIOV->second).updateDetectorStatus(iterLastIOV->second);
siPixelStatusMap_.erase(iterLastIOV);
::LuminosityBlockNumber_t tmpLumi;
(siPixelStatusVtr_iterator it = firstStatus; it != lastStatus; it) {
  tmpLumi = edm::LuminosityBlockNumber_t(it->getLSRange().first);
  tmpSiPixelStatus = (*it);
  tmpSiPixelStatus.updateDetectorStatus((*it));
  tmpSiPixelStatus.setLSRange(int(tmpLumi), (*it).getLSRange().second);
  siPixelStatusVtr_iterator currentIt = it;
  siPixelStatusVtr_iterator nextIt = (currentIt);
  siPixelStatusMap_[tmpLumi] = tmpSiPixelStatus;
```
"
-------------------------------------------------------------------------
"(iterBeforeLastIOV->second).setLSRange((iterBeforeLastIOV->second).getLSRange().first, (iterLastIOV->second).getLSRange().second);
siPixelStatusMap_.erase(iterLastIOV);
::LuminosityBlockNumber_t tmpLumi;
 (siPixelStatusVtr_iterator it = firstStatus; it != lastStatus; it) {
        tmpLumi = edm::LuminosityBlockNumber_t(it->getLSRange().first);
        tmpSiPixelStatus = (*it);
        tmpSiPixelStatus.updateDetectorStatus((*it));
        tmpSiPixelStatus.setLSRange(int(tmpLumi),(*it).getLSRange().second);
  siPixelStatusVtr_iterator currentIt = it;
  siPixelStatusVtr_iterator nextIt = (currentIt);
    siPixelStatusMap_[tmpLumi]=tmpSiPixelStatus;
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"if(siPixelStatusMap_.size()>1){
   siPixelStatusMap_iterator iterEnd = siPixelStatusMap_.end();
"
-------------------------------------------------------------------------
"if(siPixelStatusMap_.size()>1){

       // start from the end iterator of the std::map
       // the last IOV
       siPixelStatusMap_iterator iterEnd = siPixelStatusMap_.end();"
-------------------------------------------------------------------------
"if(siPixelStatusMap_.size()>1){
   siPixelStatusMap_iterator iterEnd = siPixelStatusMap_.end();
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"(iterBeforeLastIOV->second).setLSRange((iterBeforeLastIOV->second).getLSRange().first, (iterLastIOV->second).getLSRange().second);
siPixelStatusMap_.erase(iterLastIOV);
(outputBase_ == ""runbased"" || ( (int(siPixelStatusVtr_.size()) <= nLumi_ && outputBase_ == ""nLumibased"")) ){
LuminosityBlockNumber_t tmpLumi = edm::LuminosityBlockNumber_t(firstStatus->getLSRange().first);
elDetectorStatus tmpSiPixelStatus = (*firstStatus);
elStatusVtr_iterator nextStatus = siPixelStatusVtr_.begin();
siPixelStatusVtr_iterator it = nextStatus; it != lastStatus; it) {
 tmpSiPixelStatus.updateDetectorStatus((*it));
 tmpSiPixelStatus.setLSRange(int(tmpLumi),(*it).getLSRange().second); 
"
-------------------------------------------------------------------------
"(iterBeforeLastIOV->second).setLSRange((iterBeforeLastIOV->second).getLSRange().first, (iterLastIOV->second).getLSRange().second);
siPixelStatusMap_.erase(iterLastIOV);
if(outputBase_ == ""runbased"" || ((int(siPixelStatusVtr_.size()) <= nLumi_ && outputBase_ == ""nLumibased""))) {
    LuminosityBlockNumber_t tmpLumi = edm::LuminosityBlockNumber_t(firstStatus->getLSRange().first);
    elDetectorStatus tmpSiPixelStatus = (*firstStatus);
    elStatusVtr_iterator nextStatus = siPixelStatusVtr_.begin();
    for(siPixelStatusVtr_iterator it = nextStatus; it != lastStatus; it++) {
        tmpSiPixelStatus.updateDetectorStatus((*it));
        tmpSiPixelStatus.setLSRange(int(tmpLumi), (*it).getLSRange().second);
        // continue processing as needed for each iteration
    }
}"
-------------------------------------------------------------------------
"(iterBeforeLastIOV->second).setLSRange((iterBeforeLastIOV->second).getLSRange().first, (iterLastIOV->second).getLSRange().second);
siPixelStatusMap_.erase(iterLastIOV);
(outputBase_ == ""runbased"" || ( (int(siPixelStatusVtr_.size()) <= nLumi_ && outputBase_ == ""nLumibased"")) ){
LuminosityBlockNumber_t tmpLumi = edm::LuminosityBlockNumber_t(firstStatus->getLSRange().first);
elDetectorStatus tmpSiPixelStatus = (*firstStatus);
elStatusVtr_iterator nextStatus = siPixelStatusVtr_.begin();
siPixelStatusVtr_iterator it = nextStatus; it != lastStatus; it) {
 tmpSiPixelStatus.updateDetectorStatus((*it));
 tmpSiPixelStatus.setLSRange(int(tmpLumi),(*it).getLSRange().second); 
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"siPixelStatusVtr_iterator firstStatus = siPixelStatusVtr_.begin();
edm::LuminosityBlockNumber_t  firstLumi = edm::LuminosityBlockNumber_t(firstStatus->getLSRange().first);
SiPixelDetectorStatus  firstFEDerror25 = (*firstStatus);
siPixelStatusVtr_iterator lastStatus = siPixelStatusVtr_.end();
edm::LuminosityBlockNumber_t previousLumi = firstLumi;
siPixelStatusVtr_iterator secondStatus = siPixelStatusVtr_.begin();
for (siPixelStatusVtr_iterator it = secondStatus; it != lastStatus; it) {
    // init for each lumi section (iterator)
    edm::LuminosityBlockNumber_t tmpLumi = edm::LuminosityBlockNumber_t(it->getLSRange().first);
    SiPixelDetectorStatus tmpFEDerror25 = (*it);
"
-------------------------------------------------------------------------
"```cpp
siPixelStatusVtr_iterator firstStatus = siPixelStatusVtr_.begin();
edm::LuminosityBlockNumber_t firstLumi = edm::LuminosityBlockNumber_t(firstStatus->getLSRange().first);
SiPixelDetectorStatus firstFEDerror25 = (*firstStatus);
siPixelStatusVtr_iterator lastStatus = siPixelStatusVtr_.end();
edm::LuminosityBlockNumber_t previousLumi = firstLumi;
siPixelStatusVtr_iterator secondStatus = siPixelStatusVtr_.begin();
for (siPixelStatusVtr_iterator it = secondStatus; it != lastStatus; ++it) {
    // init for each lumi section (iterator)
    edm::LuminosityBlockNumber_t tmpLumi = edm::LuminosityBlockNumber_t(it->getLSRange().first);
    SiPixelDetectorStatus tmpFEDerror25 = (*it);
```"
-------------------------------------------------------------------------
"siPixelStatusVtr_iterator firstStatus = siPixelStatusVtr_.begin();
edm::LuminosityBlockNumber_t  firstLumi = edm::LuminosityBlockNumber_t(firstStatus->getLSRange().first);
SiPixelDetectorStatus  firstFEDerror25 = (*firstStatus);
siPixelStatusVtr_iterator lastStatus = siPixelStatusVtr_.end();
edm::LuminosityBlockNumber_t previousLumi = firstLumi;
siPixelStatusVtr_iterator secondStatus = siPixelStatusVtr_.begin();
for (siPixelStatusVtr_iterator it = secondStatus; it != lastStatus; it) {
    // init for each lumi section (iterator)
    edm::LuminosityBlockNumber_t tmpLumi = edm::LuminosityBlockNumber_t(it->getLSRange().first);
    SiPixelDetectorStatus tmpFEDerror25 = (*it);
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"if ALCAHARVESTSiPixelQuality.debug == cms.untracked.bool(True) :
   ALCAHARVESTSiPixelQuality_dbOutput.append(
       cms.PSet(record = cms.string('SiPixelQualityFromDbRcd_PCL'),
                tag = cms.string('SiPixelQualityFromDbRcd_PCL'),
                timetype = cms.untracked.string('lumiid')
                )
   )
"
-------------------------------------------------------------------------
"if ALCAHARVESTSiPixelQuality.debug == cms.untracked.bool(True) :
   ALCAHARVESTSiPixelQuality_dbOutput.extend(
       [cms.PSet(record = cms.string('SiPixelQualityFromDbRcd_PCL'),
                tag = cms.string('SiPixelQualityFromDbRcd_PCL'),
                timetype = cms.untracked.string('lumiid')
                )]
   )"
-------------------------------------------------------------------------
"if ALCAHARVESTSiPixelQuality.debug == cms.untracked.bool(True) :
   ALCAHARVESTSiPixelQuality_dbOutput.append(
       cms.PSet(record = cms.string('SiPixelQualityFromDbRcd_PCL'),
                tag = cms.string('SiPixelQualityFromDbRcd_PCL'),
                timetype = cms.untracked.string('lumiid')
                )
   )
"
-------------------------------------------------------------------------
"Recom
PRs: 22853, 22854"
-------------------------------------------------------------------------
=========================================================================
"for obj in ('SimL1TCalorimeter','SimL1TMuonCommon','SimL1TMuon','SimL1TechnicalTriggers','SimL1EmulatorCore','ecalDigiSequence','hcalDigiSequence','calDigi','me0TriggerPseudoDigiSequence','hgcalTriggerGeometryESProducer'):
"
-------------------------------------------------------------------------
"for obj in ('SimL1TCalorimeter','SimL1TMuonCommon','SimL1TMuon','SimL1TechnicalTriggers','SimL1EmulatorCore','ecalDigiSequence','hcalDigiSequence','calDigi','me0TriggerPseudoDigiSequence','hgcalTriggerGeometryESProducer'):
    if hasattr(process, obj):
        delattr(process, obj)"
-------------------------------------------------------------------------
"for obj in ('SimL1TCalorimeter','SimL1TMuonCommon','SimL1TMuon','SimL1TechnicalTriggers','SimL1EmulatorCore','ecalDigiSequence','hcalDigiSequence','calDigi','me0TriggerPseudoDigiSequence','hgcalTriggerGeometryESProducer'):
"
-------------------------------------------------------------------------
"Recom
PRs: 22813, 22822"
-------------------------------------------------------------------------
=========================================================================
"process.load('DQM.L1TMonitor.L1TStage2FED_cff') # stage2 L1T
"
-------------------------------------------------------------------------
"```python
from EventFilter.EcalRawToDigi.EcalUnpackerData_cfi import *
from DQM.Integration.config.online_customizations_cfi import *
from FWCore.ParameterSet.Config as cms
from FWCore.MessageLogger.MessageLogger import *
from FWCore.Service.dqmSource_cfi import *
from DQMServices.Core.DQMGlobalEndPath_cfi import *
from DQM.Environment.DQM_ENV_GlobalTag_cfi import *

# L1T sequence:
path = 'L1T/%s/' % folder_name
process.l1tStage2Fed.FEDDirName = cms.untracked.string(path)
# Pixel sequence:
```"
-------------------------------------------------------------------------
"process.load('DQM.L1TMonitor.L1TStage2FED_cff') # stage2 L1T
"
-------------------------------------------------------------------------
"Recom
PRs: 22784, 22795"
-------------------------------------------------------------------------
=========================================================================
"'Omtf' : [1],
"
-------------------------------------------------------------------------
" 'OMTF' : [1],"
-------------------------------------------------------------------------
"'Omtf' : [1],
"
-------------------------------------------------------------------------
"Recom
PRs: 22771, 22793"
-------------------------------------------------------------------------
=========================================================================
"ignoreBin = cms.untracked.vint32(ignoreBins['Omtf']),
"
-------------------------------------------------------------------------
"ignoreBins = cms.untracked.vint32(ignoreBins['Omtf']),"
-------------------------------------------------------------------------
"ignoreBin = cms.untracked.vint32(ignoreBins['Omtf']),
"
-------------------------------------------------------------------------
"Recom
PRs: 22771, 22793"
-------------------------------------------------------------------------
=========================================================================
"l1tStage2OmtfOutVsuGMTInRatioClient.ignoreBin = cms.untracked.vint32(ignoreBins['Omtf'])
"
-------------------------------------------------------------------------
l1tStage2OmtfOutVsuGMTInRatioClient.ignoreBin = cms.untracked.vint32(ugmtDqmDir)
-------------------------------------------------------------------------
"l1tStage2OmtfOutVsuGMTInRatioClient.ignoreBin = cms.untracked.vint32(ignoreBins['Omtf'])
"
-------------------------------------------------------------------------
"Recom
PRs: 22771, 22793"
-------------------------------------------------------------------------
=========================================================================
"ignoreBin = cms.untracked.vint32([1]), # ignore the BX range bin
"
-------------------------------------------------------------------------
"ignoreBin = cms.untracked.vint32(l1tStage2uGMTOutVsuGTIn.ignoreBin), # ignore the BX range bin"
-------------------------------------------------------------------------
"ignoreBin = cms.untracked.vint32([1]), # ignore the BX range bin
"
-------------------------------------------------------------------------
"Recom
PRs: 22751, 22792"
-------------------------------------------------------------------------
=========================================================================
"from DQM.L1TMonitor.L1TStage2uGT_cff import l1tStage2uGMTOutVsuGTIn
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='ignoreBin', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Attribute(value=Name(id='cms', ctx=Load()), attr='untracked', ctx=Load()), attr='vint32', ctx=Load()), args=[Attribute(value=Name(id='l1tStage2uGMTOutVsuGTIn', ctx=Load()), attr='ignoreBin', ctx=Load())], keywords=[])], ctx=Load())"
-------------------------------------------------------------------------
"from DQM.L1TMonitor.L1TStage2uGT_cff import l1tStage2uGMTOutVsuGTIn
"
-------------------------------------------------------------------------
"Recom
PRs: 22751, 22792"
-------------------------------------------------------------------------
=========================================================================
"ignoreBin = cms.untracked.vint32(l1tStage2uGMTOutVsuGTIn.ignoreBin),
"
-------------------------------------------------------------------------
"ignoreBin = (cms.untracked.vint32(l1tStage2uGMTOutVsuGTIn.ignoreBin),)"
-------------------------------------------------------------------------
"ignoreBin = cms.untracked.vint32(l1tStage2uGMTOutVsuGTIn.ignoreBin),
"
-------------------------------------------------------------------------
"Recom
PRs: 22751, 22792"
-------------------------------------------------------------------------
=========================================================================
"AAGFilter = triggerResultsFilter.clone(triggerConditions = cms.vstring(""HLT_ZeroBias_FirstCollisionAfterAbortGap_*""),
                                       hltResults = cms.InputTag( ""TriggerResults"", """", ""HLT"" ),
                                       l1tResults = cms.InputTag( """" ),
                                       throw = cms.bool(False)
                                       )
IsolatedMuonFilter = triggerResultsFilter.clone(triggerConditions = cms.vstring(""HLT_IsoMu20_*""),
                                                hltResults = cms.InputTag( ""TriggerResults"", """", ""HLT"" ),
                                                l1tResults = cms.InputTag( """" ),
                                                throw = cms.bool(False)
                                                )
ZeroBiasFilter = triggerResultsFilter.clone(triggerConditions = cms.vstring(""HLT_ZeroBias_*"",),
                                            hltResults = cms.InputTag( ""TriggerResults"", """", ""HLT"" ),
                                            l1tResults = cms.InputTag( """" ),
                                            throw = cms.bool(False)
                                            )
"
-------------------------------------------------------------------------
"```python
AAGFilter = triggerResultsFilter.clone(triggerConditions = cms.vstring(""HLT_ZeroBias_FirstCollisionAfterAbortGap_*""),
                                       hltResults = cms.InputTag( ""TriggerResults"", """", ""HLT"" ),
                                       l1tResults = cms.InputTag( """" ),
                                       throw = cms.bool(False)
                                       )
IsolatedMuonFilter = triggerResultsFilter.clone(triggerConditions = cms.vstring(""HLT_IsoMu20_*""),
                                                hltResults = cms.InputTag( ""TriggerResults"", """", ""HLT"" ),
                                                l1tResults = cms.InputTag( """" ),
                                                throw = cms.bool(False)
                                                )
ZeroBiasFilter = triggerResultsFilter.clone(triggerConditions = cms.vstring(""HLT_ZeroBias_*""),
                                            hltResults = cms.InputTag( ""TriggerResults"", """", ""HLT"" ),
                                            l1tResults = cms.InputTag( """" ),
                                            throw = cms.bool(False)
                                            )
```"
-------------------------------------------------------------------------
"AAGFilter = triggerResultsFilter.clone(triggerConditions = cms.vstring(""HLT_ZeroBias_FirstCollisionAfterAbortGap_*""),
                                       hltResults = cms.InputTag( ""TriggerResults"", """", ""HLT"" ),
                                       l1tResults = cms.InputTag( """" ),
                                       throw = cms.bool(False)
                                       )
IsolatedMuonFilter = triggerResultsFilter.clone(triggerConditions = cms.vstring(""HLT_IsoMu20_*""),
                                                hltResults = cms.InputTag( ""TriggerResults"", """", ""HLT"" ),
                                                l1tResults = cms.InputTag( """" ),
                                                throw = cms.bool(False)
                                                )
ZeroBiasFilter = triggerResultsFilter.clone(triggerConditions = cms.vstring(""HLT_ZeroBias_*"",),
                                            hltResults = cms.InputTag( ""TriggerResults"", """", ""HLT"" ),
                                            l1tResults = cms.InputTag( """" ),
                                            throw = cms.bool(False)
                                            )
"
-------------------------------------------------------------------------
"Recom
PRs: 22740, 22791"
-------------------------------------------------------------------------
=========================================================================
"OfflineGainNtuple_StdBunch = cms.Sequence( ZeroBiasFilter  ~AAGFilter  siStripBFieldOnFilter  
OfflineGainNtuple_StdBunch0T = cms.Sequence( ZeroBiasFilter  ~AAGFilter  siStripBFieldOffFilter  
"
-------------------------------------------------------------------------
"OfflineGainNtuple_StdBunch = cms.Sequence( ZeroBiasFilter + AAGFilter + siStripBFieldOnFilter +
  
OfflineGainNtuple_StdBunch0T = cms.Sequence( ZeroBiasFilter + AAGFilter + siStripBFieldOffFilter +"
-------------------------------------------------------------------------
"OfflineGainNtuple_StdBunch = cms.Sequence( ZeroBiasFilter  ~AAGFilter  siStripBFieldOnFilter  
OfflineGainNtuple_StdBunch0T = cms.Sequence( ZeroBiasFilter  ~AAGFilter  siStripBFieldOffFilter  
"
-------------------------------------------------------------------------
"Recom
PRs: 22740, 22791"
-------------------------------------------------------------------------
=========================================================================
"OfflineGainNtuple_IsoMuon = cms.Sequence( siStripBFieldOnFilter  IsolatedMuonFilter 
OfflineGainNtuple_IsoMuon0T = cms.Sequence( siStripBFieldOffFilter  IsolatedMuonFilter 
"
-------------------------------------------------------------------------
"OfflineGainNtuple_IsoMuon = cms.Sequence( siStripBFieldOnFilter + IsolatedMuonFilter +
OfflineGainNtuple_IsoMuon0T = cms.Sequence( siStripBFieldOffFilter + IsolatedMuonFilter +"
-------------------------------------------------------------------------
"OfflineGainNtuple_IsoMuon = cms.Sequence( siStripBFieldOnFilter  IsolatedMuonFilter 
OfflineGainNtuple_IsoMuon0T = cms.Sequence( siStripBFieldOffFilter  IsolatedMuonFilter 
"
-------------------------------------------------------------------------
"Recom
PRs: 22740, 22791"
-------------------------------------------------------------------------
=========================================================================
"GlobalTag.globaltag = ""100X_dataRun2_HLT_v3""
"
-------------------------------------------------------------------------
"```python
process.GlobalTag = GlobalTag(process.GlobalTag, '100X_dataRun2_HLT_v3', '')
```"
-------------------------------------------------------------------------
"GlobalTag.globaltag = ""100X_dataRun2_HLT_v3""
"
-------------------------------------------------------------------------
"Recom
PRs: 22627, 22572"
-------------------------------------------------------------------------
=========================================================================
"'keep *_hgcalTriggerPrimitiveDigiProducer_towerMap_*',
"
-------------------------------------------------------------------------
"'keep *_hgcalTriggerPrimitiveDigiProducer_tower_*',"
-------------------------------------------------------------------------
"'keep *_hgcalTriggerPrimitiveDigiProducer_towerMap_*',
"
-------------------------------------------------------------------------
"Recom
PRs: 22387, 22480"
-------------------------------------------------------------------------
=========================================================================
"0x00200000,
"
-------------------------------------------------------------------------
"0x01c00000,"
-------------------------------------------------------------------------
"0x00200000,
"
-------------------------------------------------------------------------
"Recom
PRs: 22371, 22374"
-------------------------------------------------------------------------
=========================================================================
"process = cms.Process(""L1TStage2DQM"", eras.Run2_2018)
"
-------------------------------------------------------------------------
"process = cms.Process(""L1TStage2EmulatorDQM"", eras.Run3)"
-------------------------------------------------------------------------
"process = cms.Process(""L1TStage2DQM"", eras.Run2_2018)
"
-------------------------------------------------------------------------
"Recom
PRs: 22350, 22351"
-------------------------------------------------------------------------
=========================================================================
"process = cms.Process(""L1TStage2EmulatorDQM"", eras.Run2_2018)
"
-------------------------------------------------------------------------
"process = cms.Process(""L1TStage2EmulatorDQM"", eras.Run3)"
-------------------------------------------------------------------------
"process = cms.Process(""L1TStage2EmulatorDQM"", eras.Run2_2018)
"
-------------------------------------------------------------------------
"Recom
PRs: 22350, 22351"
-------------------------------------------------------------------------
=========================================================================
"ignoreHFfb2 = cms.untracked.bool(False),
"
-------------------------------------------------------------------------
"FWCore.ParameterSet.Config as cms

l1tStage2CaloLayer1 = EDAnalyzer('L1TStage2CaloLayer1',
     hcalTPSourceSent = cms.InputTag(""hcalDigis""),
     fedRawDataLabel  = cms.InputTag(""rawDataCollector""),
     histFolder = cms.string('L1T/L1TStage2CaloLayer1'),
 )"
-------------------------------------------------------------------------
"ignoreHFfb2 = cms.untracked.bool(False),
"
-------------------------------------------------------------------------
"Recom
PRs: 22348, 22349"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2018_design'       : '100X_upgrade2018_design_IdealBS_v7',
'phase1_2018_realistic'    : '100X_upgrade2018_realistic_v11',
'phase1_2018_cosmics'      :   '100X_upgrade2018cosmics_realistic_deco_v9',
"
-------------------------------------------------------------------------
"'phase1_2018_design'       : '100X_postLS2_design_v2', 
'phase1_2018_realistic'    : '100X_postLS2_realistic_v3',
'phase1_2018_cosmics'      : '100X_postLS2cosmics_realistic_deco_v3',"
-------------------------------------------------------------------------
"'phase1_2018_design'       : '100X_upgrade2018_design_IdealBS_v7',
'phase1_2018_realistic'    : '100X_upgrade2018_realistic_v11',
'phase1_2018_cosmics'      :   '100X_upgrade2018cosmics_realistic_deco_v9',
"
-------------------------------------------------------------------------
"Recom
PRs: 22121, 22263"
-------------------------------------------------------------------------
=========================================================================
"process.load(""DQM.SiStripCommon.TkHistoMap_cff"")
"
-------------------------------------------------------------------------
"process.load(""DQM.SiStripCommon.TkHistoMap_cfi"")"
-------------------------------------------------------------------------
"process.load(""DQM.SiStripCommon.TkHistoMap_cff"")
"
-------------------------------------------------------------------------
"Recom
PRs: 22148, 22149"
-------------------------------------------------------------------------
=========================================================================
",ReadPrescalesFromFile = cms.bool(False)
"
-------------------------------------------------------------------------
" ,ReadPrescalesFromFile = cms.bool(True)"
-------------------------------------------------------------------------
",ReadPrescalesFromFile = cms.bool(False)
"
-------------------------------------------------------------------------
"Recom
PRs: 22131, 22132"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2018_realistic'    : '100X_upgrade2018_realistic_v9',
'phase1_2018_cosmics'      :   '100X_upgrade2018cosmics_realistic_deco_v7',
"
-------------------------------------------------------------------------
"'phase1_2018_realistic'    : '100X_upgrade2018_realistic_v9',  # GT for MC production with realistic conditions for full Phase1 2018 detector
'phase1_2018_cosmics'      : '100X_upgrade2018cosmics_realistic_deco_v7',  # GT for MC production (cosmics) with realistic conditions for full Phase1 2018 detector, Strip tracker in DECO mode"
-------------------------------------------------------------------------
"'phase1_2018_design'       : '100X_upgrade2018_design_IdealBS_v6',
'phase1_2018_realistic'    : '100X_upgrade2018_realistic_v10',
'phase1_2018_cosmics'      :   '100X_upgrade2018cosmics_realistic_deco_v8',
"
-------------------------------------------------------------------------
"Recom
PRs: 22075, 22078"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
# the BMTF DQM module
from DQM.L1TMonitor.L1TStage2BMTF_cfi import *
# zero suppression DQM
l1tStage2BmtfZeroSupp = cms.EDAnalyzer(
    ""L1TMP7ZeroSupp"",
    fedIds = cms.vint32(1376, 1377),
    rawData = cms.InputTag(""rawDataCollector""),
    # mask for inputs (pt==0 defines empty muon)
    maskCapId1 = cms.untracked.vint32(0x01c00000,
                                      0x01c00000,
                                      0x01c00000,
                                      0x01c00000,
                                      0x00000000,
                                      0x00000000),
    # mask for outputs (pt==0 defines empty muon)
    maskCapId2 = cms.untracked.vint32(0x000001FF,
                                      0x00000000,
                                      0x000001FF,
                                      0x00000000,
                                      0x000001FF,
                                      0x00000000),
    # no masks defined for caption IDs 0 and 3-11
    maxFEDReadoutSize = cms.untracked.int32(7000),
    monitorDir = cms.untracked.string(""L1T/L1TStage2BMTF/zeroSuppression/AllEvts""),
    verbose = cms.untracked.bool(False),
)
# ZS of validation events (to be used after fat event filter)
l1tStage2BmtfZeroSuppFatEvts = l1tStage2BmtfZeroSupp.clone()
l1tStage2BmtfZeroSuppFatEvts.monitorDir = cms.untracked.string(""L1T/L1TStage2BMTF/zeroSuppression/FatEvts"")
l1tStage2BmtfZeroSuppFatEvts.maxFEDReadoutSize = cms.untracked.int32(25000)
# sequences
l1tStage2BmtfOnlineDQMSeq = cms.Sequence(
    l1tStage2Bmtf 
    l1tStage2BmtfZeroSupp
)
l1tStage2BmtfValidationEventOnlineDQMSeq = cms.Sequence(
    l1tStage2BmtfZeroSuppFatEvts
)
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
from DQM.L1TMonitorClient.L1TStage2BMTFClient_cff import *
l1tStage2BmtfZeroSupp = cms.EDAnalyzer(
    ""L1TMP7ZeroSupp"",
    fedIds = cms.vint32(1376, 1377),
    rawData = cms.InputTag(""rawDataCollector""),
    # mask for inputs (pt==0 defines empty muon)
    maskCapId1 = cms.untracked.vint32(0x01c00000,
                                      0x01c00000,
                                      0x01c00000,
                                      0x01c00000,
                                      0x00000000,
                                      0x00000000),
    # mask for outputs (pt==0 defines empty muon)
    maskCapId2 = cms.untracked.vint32(0x000001FF,
                                      0x00000000,
                                      0x000001FF,
                                      0x00000000,
                                      0x000001FF,
                                      0x00000000),
    # no masks defined for caption IDs 0 and 3-11
    maxFEDReadoutSize = cms.untracked.int32(7000),
    monitorDir = cms.untracked.string(""L1T/L1TStage2BMTF/zeroSuppression/AllEvts""),
    verbose = cms.untracked.bool(False),
)
l1tStage2BmtfZeroSuppFatEvts = l1tStage2BmtfZeroSupp.clone()
l1tStage2BmtfZeroSuppFatEvts.monitorDir = cms.untracked.string(""L1T/L1TStage2BMTF/zeroSuppression/FatEvts"")
l1tStage2BmtfZeroSuppFatEvts.maxFEDReadoutSize = cms.untracked.int32(25000)
l1tStage2BmtfOnlineDQMSeq = cms.Sequence(
    l1tStage2Bmtf,
    l1tStage2BmtfZeroSupp
)
l1tStage2BmtfValidationEventOnlineDQMSeq = cms.Sequence(
    l1tStage2BmtfZeroSuppFatEvts
)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
# the BMTF DQM module
from DQM.L1TMonitor.L1TStage2BMTF_cfi import *
# zero suppression DQM
l1tStage2BmtfZeroSupp = cms.EDAnalyzer(
    ""L1TMP7ZeroSupp"",
    fedIds = cms.vint32(1376, 1377),
    rawData = cms.InputTag(""rawDataCollector""),
    # mask for inputs (pt==0 defines empty muon)
    maskCapId1 = cms.untracked.vint32(0x01c00000,
                                      0x01c00000,
                                      0x01c00000,
                                      0x01c00000,
                                      0x00000000,
                                      0x00000000),
    # mask for outputs (pt==0 defines empty muon)
    maskCapId2 = cms.untracked.vint32(0x000001FF,
                                      0x00000000,
                                      0x000001FF,
                                      0x00000000,
                                      0x000001FF,
                                      0x00000000),
    # no masks defined for caption IDs 0 and 3-11
    maxFEDReadoutSize = cms.untracked.int32(7000),
    monitorDir = cms.untracked.string(""L1T/L1TStage2BMTF/zeroSuppression/AllEvts""),
    verbose = cms.untracked.bool(False),
)
# ZS of validation events (to be used after fat event filter)
l1tStage2BmtfZeroSuppFatEvts = l1tStage2BmtfZeroSupp.clone()
l1tStage2BmtfZeroSuppFatEvts.monitorDir = cms.untracked.string(""L1T/L1TStage2BMTF/zeroSuppression/FatEvts"")
l1tStage2BmtfZeroSuppFatEvts.maxFEDReadoutSize = cms.untracked.int32(25000)
# sequences
l1tStage2BmtfOnlineDQMSeq = cms.Sequence(
    l1tStage2Bmtf 
    l1tStage2BmtfZeroSupp
)
l1tStage2BmtfValidationEventOnlineDQMSeq = cms.Sequence(
    l1tStage2BmtfZeroSuppFatEvts
)
"
-------------------------------------------------------------------------
"Recom
PRs: 21900, 22050"
-------------------------------------------------------------------------
=========================================================================
"from DQM.L1TMonitor.L1TStage2BMTF_cff import *
"
-------------------------------------------------------------------------
from DQM.L1TMonitorClient.L1TStage2BMTFClient_cff import *
-------------------------------------------------------------------------
"from DQM.L1TMonitor.L1TStage2BMTF_cff import *
"
-------------------------------------------------------------------------
"Recom
PRs: 21900, 22050"
-------------------------------------------------------------------------
=========================================================================
"l1tStage2BmtfOnlineDQMSeq 
"
-------------------------------------------------------------------------
"l1tStage2BmtfOnlineDQMSeq = cms.Sequence(
    l1tStage2CaloLayer1 +
    l1tStage2CaloLayer2 +
    l1tStage2Omtf +
    l1tStage2Emtf +
    l1tStage2uGMTOnlineDQMSeq +
    l1tStage2BmtfClient
)"
-------------------------------------------------------------------------
"l1tStage2BmtfOnlineDQMSeq 
"
-------------------------------------------------------------------------
"Recom
PRs: 21900, 22050"
-------------------------------------------------------------------------
=========================================================================
"l1tStage2BmtfValidationEventOnlineDQMSeq 
"
-------------------------------------------------------------------------
"Expr(value=Name(id='l1tStage2BmtfClientValidationEventOnlineDQMSeq', ctx=Load()))"
-------------------------------------------------------------------------
"l1tStage2BmtfValidationEventOnlineDQMSeq 
"
-------------------------------------------------------------------------
"Recom
PRs: 21900, 22050"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
from DQMServices.Core.DQMEDHarvester import DQMEDHarvester
# directory path shortening
bmtfDqmDir = 'L1T/L1TStage2BMTF'
bmtfZSDqmDir = bmtfDqmDir'/zeroSuppression'
errHistNumStr = 'errorSummaryNum'
errHistDenStr = 'errorSummaryDen'
# zero suppression
l1tStage2BmtfZeroSuppRatioClient = DQMEDHarvester(""L1TStage2RatioClient"",
    monitorDir = cms.untracked.string(bmtfZSDqmDir'/AllEvts'),
    inputNum = cms.untracked.string(bmtfZSDqmDir'/AllEvts/'errHistNumStr),
    inputDen = cms.untracked.string(bmtfZSDqmDir'/AllEvts/'errHistDenStr),
    ratioName = cms.untracked.string('mismatchRatio'),
    ratioTitle = cms.untracked.string('Summary of bad zero suppression rates'),
    yAxisTitle = cms.untracked.string('# fail / # total'),
    binomialErr = cms.untracked.bool(True)
)
l1tStage2BmtfZeroSuppFatEvtsRatioClient = l1tStage2BmtfZeroSuppRatioClient.clone()
l1tStage2BmtfZeroSuppFatEvtsRatioClient.monitorDir = cms.untracked.string(bmtfZSDqmDir'/FatEvts')
l1tStage2BmtfZeroSuppFatEvtsRatioClient.inputNum = cms.untracked.string(bmtfZSDqmDir'/FatEvts/'errHistNumStr)
l1tStage2BmtfZeroSuppFatEvtsRatioClient.inputDen = cms.untracked.string(bmtfZSDqmDir'/FatEvts/'errHistDenStr)
l1tStage2BmtfZeroSuppFatEvtsRatioClient.ratioTitle = cms.untracked.string('Summary of bad zero suppression rates')
# sequences
l1tStage2BmtfZeroSuppCompClient = cms.Sequence(
    l1tStage2BmtfZeroSuppRatioClient
   l1tStage2BmtfZeroSuppFatEvtsRatioClient
)
l1tStage2BmtfClient = cms.Sequence(
    l1tStage2BmtfZeroSuppCompClient
)
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
from DQMServices.Core.DQMEDHarvester import DQMEDHarvester
# directory path shortening
bmtfDqmDir = 'L1T/L1TStage2BMTF'
bmtfZSDqmDir = bmtfDqmDir + '/zeroSuppression'
errHistNumStr = 'errorSummaryNum'
errHistDenStr = 'errorSummaryDen'
# zero suppression
l1tStage2BmtfZeroSuppRatioClient = DQMEDHarvester(""L1TStage2RatioClient"",
    monitorDir = cms.untracked.string(bmtfZSDqmDir + '/AllEvts'),
    inputNum = cms.untracked.string(bmtfZSDqmDir + '/AllEvts/' + errHistNumStr),
    inputDen = cms.untracked.string(bmtfZSDqmDir + '/AllEvts/' + errHistDenStr),
    ratioName = cms.untracked.string('mismatchRatio'),
    ratioTitle = cms.untracked.string('Summary of bad zero suppression rates'),
    yAxisTitle = cms.untracked.string('# fail / # total'),
    binomialErr = cms.untracked.bool(True)
)
l1tStage2BmtfZeroSuppFatEvtsRatioClient = l1tStage2BmtfZeroSuppRatioClient.clone()
l1tStage2BmtfZeroSuppFatEvtsRatioClient.monitorDir = cms.untracked.string(bmtfZSDqmDir + '/FatEvts')
l1tStage2BmtfZeroSuppFatEvtsRatioClient.inputNum = cms.untracked.string(bmtfZSDqmDir + '/FatEvts/' + errHistNumStr)
l1tStage2BmtfZeroSuppFatEvtsRatioClient.inputDen = cms.untracked.string(bmtfZSDqmDir + '/FatEvts/' + errHistDenStr)
l1tStage2BmtfZeroSuppFatEvtsRatioClient.ratioTitle = cms.untracked.string('Summary of bad zero suppression rates')
# sequences
l1tStage2BmtfZeroSuppCompClient = cms.Sequence(
    l1tStage2BmtfZeroSuppRatioClient,
    l1tStage2BmtfZeroSuppFatEvtsRatioClient
)
l1tStage2BmtfClient = cms.Sequence(
    l1tStage2BmtfZeroSuppCompClient
)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
from DQMServices.Core.DQMEDHarvester import DQMEDHarvester
# directory path shortening
bmtfDqmDir = 'L1T/L1TStage2BMTF'
bmtfZSDqmDir = bmtfDqmDir'/zeroSuppression'
errHistNumStr = 'errorSummaryNum'
errHistDenStr = 'errorSummaryDen'
# zero suppression
l1tStage2BmtfZeroSuppRatioClient = DQMEDHarvester(""L1TStage2RatioClient"",
    monitorDir = cms.untracked.string(bmtfZSDqmDir'/AllEvts'),
    inputNum = cms.untracked.string(bmtfZSDqmDir'/AllEvts/'errHistNumStr),
    inputDen = cms.untracked.string(bmtfZSDqmDir'/AllEvts/'errHistDenStr),
    ratioName = cms.untracked.string('mismatchRatio'),
    ratioTitle = cms.untracked.string('Summary of bad zero suppression rates'),
    yAxisTitle = cms.untracked.string('# fail / # total'),
    binomialErr = cms.untracked.bool(True)
)
l1tStage2BmtfZeroSuppFatEvtsRatioClient = l1tStage2BmtfZeroSuppRatioClient.clone()
l1tStage2BmtfZeroSuppFatEvtsRatioClient.monitorDir = cms.untracked.string(bmtfZSDqmDir'/FatEvts')
l1tStage2BmtfZeroSuppFatEvtsRatioClient.inputNum = cms.untracked.string(bmtfZSDqmDir'/FatEvts/'errHistNumStr)
l1tStage2BmtfZeroSuppFatEvtsRatioClient.inputDen = cms.untracked.string(bmtfZSDqmDir'/FatEvts/'errHistDenStr)
l1tStage2BmtfZeroSuppFatEvtsRatioClient.ratioTitle = cms.untracked.string('Summary of bad zero suppression rates')
# sequences
l1tStage2BmtfZeroSuppCompClient = cms.Sequence(
    l1tStage2BmtfZeroSuppRatioClient
   l1tStage2BmtfZeroSuppFatEvtsRatioClient
)
l1tStage2BmtfClient = cms.Sequence(
    l1tStage2BmtfZeroSuppCompClient
)
"
-------------------------------------------------------------------------
"Recom
PRs: 21900, 22050"
-------------------------------------------------------------------------
=========================================================================
"# BMTF client
from DQM.L1TMonitorClient.L1TStage2BMTFClient_cff import *
"
-------------------------------------------------------------------------
"# BMTF client
from DQM.L1TMonitorClient.L1TStage2BMTFClient_cff import l1tStage2BmtfClient"
-------------------------------------------------------------------------
"# BMTF client
from DQM.L1TMonitorClient.L1TStage2BMTFClient_cff import *
"
-------------------------------------------------------------------------
"Recom
PRs: 21900, 22050"
-------------------------------------------------------------------------
=========================================================================
"l1tStage2BmtfClient
"
-------------------------------------------------------------------------
l1tStage2uGTClient
-------------------------------------------------------------------------
"l1tStage2BmtfClient
"
-------------------------------------------------------------------------
"Recom
PRs: 21900, 22050"
-------------------------------------------------------------------------
=========================================================================
"run2_miniAOD_80XLegacy.toModify( fatJetTable.variables, msoftdrop_chs = Var(""userFloat('ak8PFJetsCHSSoftDropMass')"",float, doc=""Legacy uncorrected soft drop mass with CHS"",precision=10))
"
-------------------------------------------------------------------------
"run2_miniAOD_80XLegacy.toModify( fatJetTable.variables.msoftdrop_chs, expr = cms.string(""userFloat(\'ak8PFJetsCHSSoftDropMass\')""),)"
-------------------------------------------------------------------------
"run2_miniAOD_80XLegacy.toModify( fatJetTable.variables, msoftdrop_chs = Var(""userFloat('ak8PFJetsCHSSoftDropMass')"",float, doc=""Legacy uncorrected soft drop mass with CHS"",precision=10))
"
-------------------------------------------------------------------------
"Recom
PRs: 22037, 22038"
-------------------------------------------------------------------------
=========================================================================
"process = customiseFor22001(process)
    
"
-------------------------------------------------------------------------
process = customiseFor21821(process)
-------------------------------------------------------------------------
"process = customiseFor22001(process)
"
-------------------------------------------------------------------------
"Recom
PRs: 22001, 22002"
-------------------------------------------------------------------------
=========================================================================
"src=cms.InputTag(""slimmedJetsPuppi""),
 jetSource = cms.InputTag('slimmedJetsPuppi'),
"
-------------------------------------------------------------------------
process.updatedPatJetsPuppiJetSpecific.userData.userFloats.src = []
-------------------------------------------------------------------------
"src=cms.InputTag(""slimmedJetsPuppi""),
 jetSource = cms.InputTag('slimmedJetsPuppi'),
"
-------------------------------------------------------------------------
"Recom
PRs: 21759, 21941"
-------------------------------------------------------------------------
=========================================================================
"_pp_on_XeXe_extraCommands = ['keep CrossingFramePlaybackInfoNew_mix_*_*','keep *_heavyIon_*_*']
from Configuration.Eras.Modifier_pp_on_XeXe_2017_cff import pp_on_XeXe_2017
pp_on_XeXe_2017.toModify( SimGeneralRAW, outputCommands = SimGeneralRAW.outputCommands  _pp_on_XeXe_extraCommands )
pp_on_XeXe_2017.toModify( SimGeneralFEVTDEBUG, outputCommands = SimGeneralFEVTDEBUG.outputCommands  _pp_on_XeXe_extraCommands )
pp_on_XeXe_2017.toModify( SimGeneralRECO, outputCommands = SimGeneralRECO.outputCommands  _pp_on_XeXe_extraCommands )
pp_on_XeXe_2017.toModify( SimGeneralAOD, outputCommands = SimGeneralAOD.outputCommands  _pp_on_XeXe_extraCommands )
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_pp_on_XeXe_2017_cff import pp_on_XeXe_2017
_pp_on_XeXe_extraCommands = ['keep CrossingFramePlaybackInfoNew_mix_*_*', 'keep *_heavyIon_*_*']
pp_on_XeXe_2017.toModify(SimGeneralRAW, outputCommands=SimGeneralRAW.outputCommands + _pp_on_XeXe_extraCommands)
pp_on_XeXe_2017.toModify(SimGeneralFEVTDEBUG, outputCommands=SimGeneralFEVTDEBUG.outputCommands + _pp_on_XeXe_extraCommands)
pp_on_XeXe_2017.toModify(SimGeneralRECO, outputCommands=SimGeneralRECO.outputCommands + _pp_on_XeXe_extraCommands)
pp_on_XeXe_2017.toModify(SimGeneralAOD, outputCommands=SimGeneralAOD.outputCommands + _pp_on_XeXe_extraCommands)"
-------------------------------------------------------------------------
"_pp_on_XeXe_extraCommands = ['keep CrossingFramePlaybackInfoNew_mix_*_*','keep *_heavyIon_*_*']
from Configuration.Eras.Modifier_pp_on_XeXe_2017_cff import pp_on_XeXe_2017
pp_on_XeXe_2017.toModify( SimGeneralRAW, outputCommands = SimGeneralRAW.outputCommands  _pp_on_XeXe_extraCommands )
pp_on_XeXe_2017.toModify( SimGeneralFEVTDEBUG, outputCommands = SimGeneralFEVTDEBUG.outputCommands  _pp_on_XeXe_extraCommands )
pp_on_XeXe_2017.toModify( SimGeneralRECO, outputCommands = SimGeneralRECO.outputCommands  _pp_on_XeXe_extraCommands )
pp_on_XeXe_2017.toModify( SimGeneralAOD, outputCommands = SimGeneralAOD.outputCommands  _pp_on_XeXe_extraCommands )
"
-------------------------------------------------------------------------
"Recom
PRs: 21760, 21761"
-------------------------------------------------------------------------
=========================================================================
"if int( self.general[""maxevents""] ) < 0 and self.NJobs > 1:
if int( self.general[""maxevents""] ) / self.NJobs != float( self.general[""maxevents""] ) / self.NJobs:
    msg = (""maxevents has to be divisible by parallelJobs"")
    raise AllInOneError(msg)
"
-------------------------------------------------------------------------
"if int( self.general[""maxtracks""] ) < 0 and self.NJobs > 1:
    if int( self.general[""maxtracks""] ) / self.NJobs != float( self.general[""maxtracks""] ) / self.NJobs:
        msg = (""maxtracks has to be divisible by parallelJobs"")
        raise AllInOneError(msg)"
-------------------------------------------------------------------------
"if int( self.general[""maxevents""] ) < 0 and self.NJobs > 1:
if int( self.general[""maxevents""] ) / self.NJobs != float( self.general[""maxevents""] ) / self.NJobs:
    msg = (""maxevents has to be divisible by parallelJobs"")
    raise AllInOneError(msg)
"
-------------------------------------------------------------------------
"Recom
PRs: 21223, 21224"
-------------------------------------------------------------------------
=========================================================================
"try:
    self.NTracks = int(self.general[""maxtracks""])
    if self.NTracks < 0: raise ValueError
except ValueError:
    raise AllInOneError(""maxtracks has to be a positive integer, or 0 for no limit"")
if self.NTracks / self.NJobs != float(self.NTracks) / self.NJobs:
    raise AllInOneError(""maxtracks has to be divisible by parallelJobs"")
"
-------------------------------------------------------------------------
"try:
    self.maxTracks = int(self.general[""maxtracks""])
    if self.maxTracks < 0: 
        raise ValueError
except ValueError:
    raise AllInOneError(""maxtracks has to be a positive integer, or 0 for no limit"")
if self.maxTracks / self.parallelJobs != float(self.maxTracks) / self.parallelJobs:
    raise AllInOneError(""maxTracks has to be divisible by parallelJobs"")"
-------------------------------------------------------------------------
"try:
    self.NTracks = int(self.general[""maxtracks""])
    if self.NTracks < 0: raise ValueError
except ValueError:
    raise AllInOneError(""maxtracks has to be a positive integer, or 0 for no limit"")
if self.NTracks / self.NJobs != float(self.NTracks) / self.NJobs:
    raise AllInOneError(""maxtracks has to be divisible by parallelJobs"")
"
-------------------------------------------------------------------------
"Recom
PRs: 21223, 21224"
-------------------------------------------------------------------------
=========================================================================
"process.TrackerOfflineValidation.oO[offlineValidationMode]Oo..maxTracks = .oO[maxtracks]Oo./ .oO[parallelJobs]Oo.
"
-------------------------------------------------------------------------
process.TrackerOfflineValidation.oO[offlineValidationMode]Oo..maxTracks = .oO[maxTracks]Oo./ .oO[parallelJobs]Oo.
-------------------------------------------------------------------------
"process.TrackerOfflineValidation.oO[offlineValidationMode]Oo..maxTracks = .oO[maxtracks]Oo./ .oO[parallelJobs]Oo.
"
-------------------------------------------------------------------------
"Recom
PRs: 21223, 21224"
-------------------------------------------------------------------------
=========================================================================
"digitizer.digiCfg.chargeCollectionEfficiency = cms.vdouble(endOfLifeCCEs)
digitizer.digiCfg.noise_MIP = cms.double( 1.0/5.0 )
"
-------------------------------------------------------------------------
"endOfLifeCCEs = [0.02, 0.025, 0.035]

digitizer.digiCfg.chargeCollectionEfficiency = cms.vdouble(endOfLifeCCEs)
digitizer.digiCfg.noise_MIP = cms.double(1.0 / 5.0)"
-------------------------------------------------------------------------
"digitizer.digiCfg.chargeCollectionEfficiency = cms.vdouble(endOfLifeCCEs)
digitizer.digiCfg.noise_MIP = cms.double( 1.0/5.0 )
"
-------------------------------------------------------------------------
"Recom
PRs: 21156, 21157"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Generator.Pythia8CharmoniumSettings_cfi import *
"
-------------------------------------------------------------------------
"+ ImportFrom(module='Configuration.Generator.Pythia8BottomoniumSettings_cfi', names=[alias(name='*')], level=0)"
-------------------------------------------------------------------------
"from Configuration.Generator.Pythia8CharmoniumSettings_cfi import *
"
-------------------------------------------------------------------------
"Recom
PRs: 21047, 21049"
-------------------------------------------------------------------------
=========================================================================
"pythia8CharmoniumSettingsBlock,
			    'pythia8CharmoniumSettings',
"
-------------------------------------------------------------------------
"- pythia8BottomoniumSettingsBlock,
+ Name(id='pythia8BottomoniumSettingsBlock', ctx=Load()),"
-------------------------------------------------------------------------
"pythia8CharmoniumSettingsBlock,
			    'pythia8CharmoniumSettings',
"
-------------------------------------------------------------------------
"Recom
PRs: 21047, 21049"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Generator.Pythia8CharmoniumSettings_cfi import *
"
-------------------------------------------------------------------------
+ from Configuration.Generator.Pythia8BottomoniumSettings_cfi import *
-------------------------------------------------------------------------
"from Configuration.Generator.Pythia8CharmoniumSettings_cfi import *
"
-------------------------------------------------------------------------
"Recom
PRs: 21047, 21049"
-------------------------------------------------------------------------
=========================================================================
"pythia8CharmoniumSettingsBlock,
			    'pythia8CharmoniumSettings',
"
-------------------------------------------------------------------------
"pythia8BottomoniumSettingsBlock,
                            'pythia8BottomoniumSettings',"
-------------------------------------------------------------------------
"pythia8CharmoniumSettingsBlock,
			    'pythia8CharmoniumSettings',
"
-------------------------------------------------------------------------
"Recom
PRs: 21047, 21049"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Generator.Pythia8CharmoniumSettings_cfi import *
"
-------------------------------------------------------------------------
from Configuration.Generator.Pythia8BottomoniumSettings_cfi import *
-------------------------------------------------------------------------
"from Configuration.Generator.Pythia8CharmoniumSettings_cfi import *
"
-------------------------------------------------------------------------
"Recom
PRs: 21047, 21049"
-------------------------------------------------------------------------
=========================================================================
"pythia8CharmoniumSettingsBlock,
			    'pythia8CharmoniumSettings',
"
-------------------------------------------------------------------------
"+ Expr(value=Tuple(elts=[Name(id='pythia8BottomoniumSettingsBlock', ctx=Load())], ctx=Load()))"
-------------------------------------------------------------------------
"pythia8CharmoniumSettingsBlock,
			    'pythia8CharmoniumSettings',
"
-------------------------------------------------------------------------
"Recom
PRs: 21047, 21049"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Generator.Pythia8CharmoniumSettings_cfi import *
"
-------------------------------------------------------------------------
- from Configuration.Generator.Pythia8BottomoniumSettings_cfi import *
-------------------------------------------------------------------------
"from Configuration.Generator.Pythia8CharmoniumSettings_cfi import *
"
-------------------------------------------------------------------------
"Recom
PRs: 21047, 21049"
-------------------------------------------------------------------------
=========================================================================
"pythia8CharmoniumSettingsBlock,
			    'pythia8CharmoniumSettings',
"
-------------------------------------------------------------------------
"          pythia8BottomoniumSettingsBlock,
          'pythia8BottomoniumSettings',"
-------------------------------------------------------------------------
"pythia8CharmoniumSettingsBlock,
			    'pythia8CharmoniumSettings',
"
-------------------------------------------------------------------------
"Recom
PRs: 21047, 21049"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
pythia8BottomoniumSettingsBlock = cms.PSet(
    pythia8BottomoniumSettings = cms.vstring(
            'Bottomonium:O(3S1)[3S1(1)] = 9.28',
            'Bottomonium:O(3S1)[3S1(8)] = 0.15',
            'Bottomonium:O(3S1)[1S0(8)] = 0.02',
            'Bottomonium:O(3S1)[3P0(8)] = 0.02',
            'Bottomonium:gg2bbbar(3S1)[3S1(1)]g = on',
            'Bottomonium:gg2bbbar(3S1)[3S1(1)]gm = on',
            'Bottomonium:gg2bbbar(3S1)[3S1(8)]g = on',
            'Bottomonium:qg2bbbar(3S1)[3S1(8)]q = on',
            'Bottomonium:qqbar2bbbar(3S1)[3S1(8)]g = on',
            'Bottomonium:gg2bbbar(3S1)[1S0(8)]g = on',
            'Bottomonium:qg2bbbar(3S1)[1S0(8)]q = on',
            'Bottomonium:qqbar2bbbar(3S1)[1S0(8)]g = on',
            'Bottomonium:gg2bbbar(3S1)[3PJ(8)]g = on',
            'Bottomonium:qg2bbbar(3S1)[3PJ(8)]q = on',
            'Bottomonium:qqbar2bbbar(3S1)[3PJ(8)]g = on',
    )
)
"
-------------------------------------------------------------------------
"import Configuration.Generator.Pythia8BottomoniumSettings_cfi
pythia8BottomoniumSettingsBlock = Configuration.Generator.Pythia8BottomoniumSettings_cfi.pythia8BottomoniumSettingsBlock"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
pythia8BottomoniumSettingsBlock = cms.PSet(
    pythia8BottomoniumSettings = cms.vstring(
            'Bottomonium:O(3S1)[3S1(1)] = 9.28',
            'Bottomonium:O(3S1)[3S1(8)] = 0.15',
            'Bottomonium:O(3S1)[1S0(8)] = 0.02',
            'Bottomonium:O(3S1)[3P0(8)] = 0.02',
            'Bottomonium:gg2bbbar(3S1)[3S1(1)]g = on',
            'Bottomonium:gg2bbbar(3S1)[3S1(1)]gm = on',
            'Bottomonium:gg2bbbar(3S1)[3S1(8)]g = on',
            'Bottomonium:qg2bbbar(3S1)[3S1(8)]q = on',
            'Bottomonium:qqbar2bbbar(3S1)[3S1(8)]g = on',
            'Bottomonium:gg2bbbar(3S1)[1S0(8)]g = on',
            'Bottomonium:qg2bbbar(3S1)[1S0(8)]q = on',
            'Bottomonium:qqbar2bbbar(3S1)[1S0(8)]g = on',
            'Bottomonium:gg2bbbar(3S1)[3PJ(8)]g = on',
            'Bottomonium:qg2bbbar(3S1)[3PJ(8)]q = on',
            'Bottomonium:qqbar2bbbar(3S1)[3PJ(8)]g = on',
    )
)
"
-------------------------------------------------------------------------
"Recom
PRs: 21047, 21049"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
pythia8CharmoniumSettingsBlock = cms.PSet(
    pythia8CharmoniumSettings = cms.vstring(
            'Charmonium:O(3S1)[3S1(1)] = 1.16',
            'Charmonium:O(3S1)[3S1(8)] = 0.0119',
            'Charmonium:O(3S1)[1S0(8)] = 0.01',
            'Charmonium:O(3S1)[3P0(8)] = 0.01',
            'Charmonium:gg2ccbar(3S1)[3S1(1)]g = on',
            'Charmonium:gg2ccbar(3S1)[3S1(1)]gm = on',
            'Charmonium:gg2ccbar(3S1)[3S1(8)]g = on',
            'Charmonium:qg2ccbar(3S1)[3S1(8)]q = on',
            'Charmonium:qqbar2ccbar(3S1)[3S1(8)]g = on',
            'Charmonium:gg2ccbar(3S1)[1S0(8)]g = on',
            'Charmonium:qg2ccbar(3S1)[1S0(8)]q = on',
            'Charmonium:qqbar2ccbar(3S1)[1S0(8)]g = on',
            'Charmonium:gg2ccbar(3S1)[3PJ(8)]g = on',
            'Charmonium:qg2ccbar(3S1)[3PJ(8)]q = on',
            'Charmonium:qqbar2ccbar(3S1)[3PJ(8)]g = on',
    )
)
"
-------------------------------------------------------------------------
"import Configuration.Generator.Pythia8CharmoniumSettings_cfi
pythia8CharmoniumSettingsBlock = cms.PSet(
    pythia8CharmoniumSettings = cms.vstring(
        'Charmonium:O(3S1)[3S1(1)] = 1.16',
        'Charmonium:O(3S1)[3S1(8)] = 0.0119',
        'Charmonium:O(3S1)[1S0(8)] = 0.01',
        'Charmonium:O(3S1)[3P0(8)] = 0.01',
        'Charmonium:gg2ccbar(3S1)[3S1(1)]g = on',
        'Charmonium:gg2ccbar(3S1)[3S1(1)]gm = on',
        'Charmonium:gg2ccbar(3S1)[3S1(8)]g = on',
        'Charmonium:qg2ccbar(3S1)[3S1(8)]q = on',
        'Charmonium:qqbar2ccbar(3S1)[3S1(8)]g = on',
        'Charmonium:gg2ccbar(3S1)[1S0(8)]g = on',
        'Charmonium:qg2ccbar(3S1)[1S0(8)]q = on',
        'Charmonium:qqbar2ccbar(3S1)[1S0(8)]g = on',
        'Charmonium:gg2ccbar(3S1)[3PJ(8)]g = on',
        'Charmonium:qg2ccbar(3S1)[3PJ(8)]q = on',
        'Charmonium:qqbar2ccbar(3S1)[3PJ(8)]g = on',
    )
)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
pythia8CharmoniumSettingsBlock = cms.PSet(
    pythia8CharmoniumSettings = cms.vstring(
            'Charmonium:O(3S1)[3S1(1)] = 1.16',
            'Charmonium:O(3S1)[3S1(8)] = 0.0119',
            'Charmonium:O(3S1)[1S0(8)] = 0.01',
            'Charmonium:O(3S1)[3P0(8)] = 0.01',
            'Charmonium:gg2ccbar(3S1)[3S1(1)]g = on',
            'Charmonium:gg2ccbar(3S1)[3S1(1)]gm = on',
            'Charmonium:gg2ccbar(3S1)[3S1(8)]g = on',
            'Charmonium:qg2ccbar(3S1)[3S1(8)]q = on',
            'Charmonium:qqbar2ccbar(3S1)[3S1(8)]g = on',
            'Charmonium:gg2ccbar(3S1)[1S0(8)]g = on',
            'Charmonium:qg2ccbar(3S1)[1S0(8)]q = on',
            'Charmonium:qqbar2ccbar(3S1)[1S0(8)]g = on',
            'Charmonium:gg2ccbar(3S1)[3PJ(8)]g = on',
            'Charmonium:qg2ccbar(3S1)[3PJ(8)]q = on',
            'Charmonium:qqbar2ccbar(3S1)[3PJ(8)]g = on',
    )
)
"
-------------------------------------------------------------------------
"Recom
PRs: 21047, 21049"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Generator.Pythia8BottomoniumSettings_cfi import *
"
-------------------------------------------------------------------------
"+ ImportFrom(module='Configuration.Generator.Pythia8BottomoniumSettings_cfi', names=[alias(name='*')], level=0)"
-------------------------------------------------------------------------
"from Configuration.Generator.Pythia8BottomoniumSettings_cfi import *
"
-------------------------------------------------------------------------
"Recom
PRs: 21047, 21049"
-------------------------------------------------------------------------
=========================================================================
"pythia8BottomoniumSettingsBlock,
			    'pythia8BottomoniumSettings',
"
-------------------------------------------------------------------------
"pythia8BottomoniumSettingsBlock,
             'pythia8BottomoniumSettings',
+             pythia8BottomoniumSettingsBlock = cms.PSet(
+                pythia8BottomoniumSettings = cms.vstring(
                    'Bottomonium:gg2bbbar(3S1)[3S1(1)]gm = on'
+                 )
+             ),"
-------------------------------------------------------------------------
"pythia8BottomoniumSettingsBlock,
			    'pythia8BottomoniumSettings',
"
-------------------------------------------------------------------------
"Recom
PRs: 21047, 21049"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Generator.Pythia8BottomoniumSettings_cfi import *
"
-------------------------------------------------------------------------
from Configuration.Generator.Pythia8BottomoniumSettings_cfi import pythia8BottomoniumSettingsBlock
-------------------------------------------------------------------------
"from Configuration.Generator.Pythia8BottomoniumSettings_cfi import *
"
-------------------------------------------------------------------------
"Recom
PRs: 21047, 21049"
-------------------------------------------------------------------------
=========================================================================
"pythia8BottomoniumSettingsBlock,
			    'pythia8BottomoniumSettings',
"
-------------------------------------------------------------------------
"+ pythia8BottomoniumSettingsBlock,
			    'pythia8BottomoniumSettings',"
-------------------------------------------------------------------------
"pythia8BottomoniumSettingsBlock,
			    'pythia8BottomoniumSettings',
"
-------------------------------------------------------------------------
"Recom
PRs: 21047, 21049"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Generator.Pythia8BottomoniumSettings_cfi import *
"
-------------------------------------------------------------------------
"ImportFrom(module='Configuration.Generator.Pythia8BottomoniumSettings_cfi', names=[alias(name='*')], level=0)"
-------------------------------------------------------------------------
"from Configuration.Generator.Pythia8BottomoniumSettings_cfi import *
"
-------------------------------------------------------------------------
"Recom
PRs: 21047, 21049"
-------------------------------------------------------------------------
=========================================================================
"pythia8BottomoniumSettingsBlock,
			    'pythia8BottomoniumSettings',
"
-------------------------------------------------------------------------
"pythia8BottomoniumSettingsBlock,
			    'pythia8BottomoniumSettings',"
-------------------------------------------------------------------------
"pythia8BottomoniumSettingsBlock,
			    'pythia8BottomoniumSettings',
"
-------------------------------------------------------------------------
"Recom
PRs: 21047, 21049"
-------------------------------------------------------------------------
=========================================================================
"cms.PSet(
    QualityTestName = cms.string(""uGMT_BMTFhwEtaSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/BMTFInput/ugmtBMTFhwEta""),
    QualityTestSummaryEnabled = cms.uint32(0)
    ),
"
-------------------------------------------------------------------------
"l1tStage2EventInfoClient = DQMEDHarvester(""L1TEventInfoClient"",
                             QualityTestHist = cms.string(""L1T/L1TStage2uGMT/BMTFInput/ugmtBMTFglbhwPhi""),
                             QualityTestSummaryEnabled = cms.uint32(0)
                             ),
                         cms.PSet(
                             QualityTestName = cms.string(""uGMT_BMTFhwEtaMeanAt0""),
                             QualityTestHist = cms.string(""L1T/L1TStage2uGMT/BMTFInput/ugmtBMTFhwEta""),
                             QualityTestSummaryEnabled = cms.uint32(0)
                             ),"
-------------------------------------------------------------------------
"cms.PSet(
    QualityTestName = cms.string(""uGMT_BMTFhwEtaSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/BMTFInput/ugmtBMTFhwEta""),
    QualityTestSummaryEnabled = cms.uint32(0)
    ),
"
-------------------------------------------------------------------------
"Recom
PRs: 20831, 20833"
-------------------------------------------------------------------------
=========================================================================
"cms.PSet(
    QualityTestName = cms.string(""uGMT_OMTFhwPhiNegSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/OMTFInput/ugmtOMTFglbhwPhiNeg""),
    QualityTestSummaryEnabled = cms.uint32(0)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGMT_OMTFhwEtaSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/OMTFInput/ugmtOMTFhwEta""),
    QualityTestSummaryEnabled = cms.uint32(0)
    ),
"
-------------------------------------------------------------------------
"cms.PSet(
    QualityTestName = cms.string(""uGMT_OMTFhwPhiNegSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/OMTFInput/ugmtOMTFglbhwPhiNeg""),
    QualityTestSummaryEnabled = cms.uint32(0)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGMT_OMTFhwEtaSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/OMTFInput/ugmtOMTFhwEta""),
    QualityTestSummaryEnabled = cms.uint32(0)
    ),"
-------------------------------------------------------------------------
"cms.PSet(
    QualityTestName = cms.string(""uGMT_OMTFhwPhiNegSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/OMTFInput/ugmtOMTFglbhwPhiNeg""),
    QualityTestSummaryEnabled = cms.uint32(0)
    ),
cms.PSet(
    QualityTestName = cms.string(""uGMT_OMTFhwEtaSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/OMTFInput/ugmtOMTFhwEta""),
    QualityTestSummaryEnabled = cms.uint32(0)
    ),
"
-------------------------------------------------------------------------
"Recom
PRs: 20831, 20833"
-------------------------------------------------------------------------
=========================================================================
"cms.PSet(
    QualityTestName = cms.string(""uGMT_EMTFMuonPhiSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/ugmtMuonPhiEmtf""),
    QualityTestSummaryEnabled = cms.uint32(0)
    ),
"
-------------------------------------------------------------------------
"l1tStage2EventInfoClient = DQMEDHarvester(""L1TEventInfoClient"",
                                 QualityTestHist = cms.string(""L1T/L1TStage2uGMT/EMTFInput/ugmtEMTFBX""),
                                 QualityTestSummaryEnabled = cms.uint32(1)
                                 ),
                             cms.PSet(
                                 QualityTestName = cms.string(""uGMT_EMTFMuonPhiMeanAt0""),
                                 QualityTestHist = cms.string(""L1T/L1TStage2uGMT/ugmtMuonPhiEmtf""),
                                 QualityTestSummaryEnabled = cms.uint32(0)
                             ),"
-------------------------------------------------------------------------
"cms.PSet(
    QualityTestName = cms.string(""uGMT_EMTFMuonPhiSpectrum""),
    QualityTestHist = cms.string(""L1T/L1TStage2uGMT/ugmtMuonPhiEmtf""),
    QualityTestSummaryEnabled = cms.uint32(0)
    ),
"
-------------------------------------------------------------------------
"Recom
PRs: 20831, 20833"
-------------------------------------------------------------------------
=========================================================================
"QualityTestName = cms.string(""zeroSupp_MismatchRatioMax0""),
QualityTestName = cms.string(""zeroSupp_MismatchRatioMax0""),
"
-------------------------------------------------------------------------
"QualityTestHist = cms.string(""L1T/L1TStage2uGMT/zeroSuppression/AllEvts/mismatchRatio""),
QualityTestSummaryEnabled = cms.uint32(1)
), cms.PSet(
QualityTestHist = cms.string(""L1T/L1TStage2uGMT/zeroSuppression/FatEvts/mismatchRatio""),
QualityTestSummaryEnabled = cms.uint32(1)
), cms.PSet(
QualityTestName = cms.string(""zeroSupp_MismatchRatioMax0""),
QualityTestHist = cms.string(""L1T/L1TStage2uGMT/zeroSuppression/AllEvts/mismatchRatio""),
QualityTestSummaryEnabled = cms.uint32(1)
), cms.PSet(
QualityTestName = cms.string(""zeroSupp_MismatchRatioMax0""),
QualityTestHist = cms.string(""L1T/L1TStage2uGMT/zeroSuppression/FatEvts/mismatchRatio""),
QualityTestSummaryEnabled = cms.uint32(1)
),"
-------------------------------------------------------------------------
"QualityTestName = cms.string(""zeroSupp_MismatchRatioMax0""),
QualityTestName = cms.string(""zeroSupp_MismatchRatioMax0""),
"
-------------------------------------------------------------------------
"Recom
PRs: 20831, 20833"
-------------------------------------------------------------------------
=========================================================================
"#        ""keep recoPFBlocks_*_*_*"",
# Full Event content
"
-------------------------------------------------------------------------
"RecoParticleFlowFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
    'drop CaloTowersSorted_towerMakerPF_*_*',
    'keep recoPFBlocks_*_*_*'
    )
)"
-------------------------------------------------------------------------
"#        ""keep recoPFBlocks_*_*_*"",
# Full Event content
"
-------------------------------------------------------------------------
"Recom
PRs: 20614, 20615"
-------------------------------------------------------------------------
=========================================================================
"'keep recoPFClusters_particleFlowClusterECAL_*_*',
"
-------------------------------------------------------------------------
"RecoParticleFlowFEVT = cms.PSet(
    'keep recoPFClusters_particleFlowClusterECAL_*',
    'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
    'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
    #'keep recoPFClusters_*_*_*',
    'keep recoPFClusters_particleFlowClusterHCAL_*_*',
    'keep recoPFClusters_particleFlowClusterHO_*_*',
    'keep recoPFClusters_particleFlowClusterHF_*_*',
)"
-------------------------------------------------------------------------
"'keep recoPFClusters_particleFlowClusterECAL_*_*',
"
-------------------------------------------------------------------------
"Recom
PRs: 20614, 20615"
-------------------------------------------------------------------------
=========================================================================
"'keep recoSuperClusters_particleFlowEGamma_*_*',
"
-------------------------------------------------------------------------
"'keep recoSuperClusters_particleFlowEGamma_*_*',"
-------------------------------------------------------------------------
"'keep recoSuperClusters_particleFlowEGamma_*_*',
"
-------------------------------------------------------------------------
"Recom
PRs: 20614, 20615"
-------------------------------------------------------------------------
=========================================================================
"'drop CaloTowersSorted_towerMakerPF_*_*',
"
-------------------------------------------------------------------------
'drop CaloTowersSorted_towerMakerPF_*'
-------------------------------------------------------------------------
"'drop CaloTowersSorted_towerMakerPF_*_*',
"
-------------------------------------------------------------------------
"Recom
PRs: 20614, 20615"
-------------------------------------------------------------------------
=========================================================================
")
"
-------------------------------------------------------------------------
"RecoParticleFlowRECO = cms.PSet(
     'keep *_particleFlowTmpPtrs_*_*',
     'keep *_chargedHadronPFTrackIsolation_*_*'
         )
 # AOD content
 RecoParticleFlowAOD = cms.PSet(
     outputCommands = cms.untracked.vstring(
         'keep recoPFCandidates_particleFlowTmp_electrons_*',
         'keep recoPFCandidates_particleFlowEGamma_*'
     )
 )"
-------------------------------------------------------------------------
")
"
-------------------------------------------------------------------------
"Recom
PRs: 20614, 20615"
-------------------------------------------------------------------------
=========================================================================
"phase2_hgcal.toModify( RecoParticleFlowFEVT, outputCommands = RecoParticleFlowFEVT.outputCommands  [
"
-------------------------------------------------------------------------
"phase2_hgcal.toModify(RecoParticleFlowFEVT, outputCommands = RecoParticleFlowFEVT.outputCommands + ["
-------------------------------------------------------------------------
"phase2_hgcal.toModify( RecoParticleFlowFEVT, outputCommands = RecoParticleFlowFEVT.outputCommands  [
"
-------------------------------------------------------------------------
"Recom
PRs: 20614, 20615"
-------------------------------------------------------------------------
=========================================================================
"'keep *_simPFProducer_*_*'
"
-------------------------------------------------------------------------
"'keep *_simPFProducer_*_*',"
-------------------------------------------------------------------------
"'keep *_simPFProducer_*_*'
"
-------------------------------------------------------------------------
"Recom
PRs: 20614, 20615"
-------------------------------------------------------------------------
=========================================================================
"'keep recoSuperClusters_simPFProducer_*_*'
"
-------------------------------------------------------------------------
" 'keep *_particleFlowSuperClusterHGCalFromMultiCl_*_*', "
-------------------------------------------------------------------------
"'keep recoSuperClusters_simPFProducer_*_*'
"
-------------------------------------------------------------------------
"Recom
PRs: 20614, 20615"
-------------------------------------------------------------------------
=========================================================================
"phase2_timing.toModify(
    RecoParticleFlowFEVT,
phase2_timing.toModify(
    RecoParticleFlowRECO,
phase2_timing.toModify(
    RecoParticleFlowAOD,
"
-------------------------------------------------------------------------
"phase2_timing.toModify(
    RecoParticleFlowFEVT,
    outputCommands = RecoParticleFlowFEVT.outputCommands + [
        'keep *_ecalBarrelClusterFastTimer_*_*'
        ])
phase2_timing.toModify(
    RecoParticleFlowRECO,
    outputCommands = RecoParticleFlowRECO.outputCommands + [
        'keep *_ecalBarrelClusterFastTimer_*_*'
        ])
phase2_timing.toModify(
    RecoParticleFlowAOD,
    outputCommands = RecoParticleFlowAOD.outputCommands + [
        'keep *_ecalBarrelClusterFastTimer_*_*'
        ])"
-------------------------------------------------------------------------
"phase2_timing.toModify(
    RecoParticleFlowFEVT,
phase2_timing.toModify(
    RecoParticleFlowRECO,
phase2_timing.toModify(
    RecoParticleFlowAOD,
"
-------------------------------------------------------------------------
"Recom
PRs: 20614, 20615"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Eras.Era_Run2_2017_cff import Run2_2017
        self.eras=Run2_2017
        self.skims=['AlCaPCCZeroBiasAlCaPCCRandom']
"
-------------------------------------------------------------------------
"from Configuration.Eras import Era_Run2_2017_cff
self.eras = Era_Run2_2017_cff.Run2_2017
self.skims = ['AlCaPCCZeroBias','AlCaPCCRandom']"
-------------------------------------------------------------------------
"from Configuration.Eras.Era_Run2_2017_cff import Run2_2017
        self.eras=Run2_2017
        self.skims=['AlCaPCCZeroBiasAlCaPCCRandom']
"
-------------------------------------------------------------------------
"Recom
PRs: 20580, 20585"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
pythia8CP1 = cms.PSet(
    pythia8CP1Settings = cms.vstring(
        'Tune:pp 14',
	'Tune:ee 7',
	'PDF:pSet=17',
	'MultipartonInteractions:bProfile=2',
	'MultipartonInteractions:ecmPow=0.1543',
	'MultipartonInteractions:pT0Ref=2.40',
	'MultipartonInteractions:coreRadius=0.5436',
	'MultipartonInteractions:coreFraction=0.6836',
	'ColourReconnection:range=2.633',
	'SigmaTotal:zeroAXB=off',
	'SpaceShower:rapidityOrder=off',
	)
)
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

pythia8CP5 = cms.PSet(
    pythia8CP5Settings = cms.vstring(
        'Tune:pp 14',
        'Tune:ee 7',
        'PDF:pSet=17',
        'MultipartonInteractions:bProfile=2',
        'MultipartonInteractions:ecmPow=0.1543',
        'MultipartonInteractions:pT0Ref=2.40',
        'MultipartonInteractions:coreRadius=0.5436',
        'MultipartonInteractions:coreFraction=0.6836',
        'ColourReconnection:range=2.633',
        'SigmaTotal:zeroAXB=off',
        'SpaceShower:rapidityOrder=off',
    )
)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
pythia8CP1 = cms.PSet(
    pythia8CP1Settings = cms.vstring(
        'Tune:pp 14',
	'Tune:ee 7',
	'PDF:pSet=17',
	'MultipartonInteractions:bProfile=2',
	'MultipartonInteractions:ecmPow=0.1543',
	'MultipartonInteractions:pT0Ref=2.40',
	'MultipartonInteractions:coreRadius=0.5436',
	'MultipartonInteractions:coreFraction=0.6836',
	'ColourReconnection:range=2.633',
	'SigmaTotal:zeroAXB=off',
	'SpaceShower:rapidityOrder=off',
	)
)
"
-------------------------------------------------------------------------
"Recom
PRs: 20319, 20497"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
pythia8CP1star = cms.PSet(
    pythia8CP1starSettings = cms.vstring(
	'Tune:pp 14',
	'Tune:ee 7',
	'MultipartonInteractions:ecmPow=0.1391',
	'PDF:pSet=17',
	'MultipartonInteractions:bProfile=2',
	'MultipartonInteractions:pT0Ref=2.306',
	'MultipartonInteractions:coreRadius=0.3755',
	'MultipartonInteractions:coreFraction=0.3269',
	'ColourReconnection:range=2.323',
	'SigmaTotal:zeroAXB=off', 
	'SpaceShower:rapidityOrder=off',
	'SpaceShower:alphaSvalue=0.13',
        'TimeShower:alphaSvalue=0.13',
	)
)
"
-------------------------------------------------------------------------
"from FWCore.ParameterSet.Config import cms

pythia8CP1star = cms.PSet(
    pythia8CP1starSettings = cms.vstring(
	'Tune:pp 14',
	'Tune:ee 7',
	'MultipartonInteractions:ecmPow=0.1391',
	'PDF:pSet=17',
	'MultipartonInteractions:bProfile=2',
	'MultipartonInteractions:pT0Ref=2.306',
	'MultipartonInteractions:coreRadius=0.3755',
	'MultipartonInteractions:coreFraction=0.3269',
	'ColourReconnection:range=2.323',
	'SigmaTotal:zeroAXB=off', 
	'SpaceShower:rapidityOrder=off',
	'SpaceShower:alphaSvalue=0.13',
        'TimeShower:alphaSvalue=0.13',
	)
)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
pythia8CP1star = cms.PSet(
    pythia8CP1starSettings = cms.vstring(
	'Tune:pp 14',
	'Tune:ee 7',
	'MultipartonInteractions:ecmPow=0.1391',
	'PDF:pSet=17',
	'MultipartonInteractions:bProfile=2',
	'MultipartonInteractions:pT0Ref=2.306',
	'MultipartonInteractions:coreRadius=0.3755',
	'MultipartonInteractions:coreFraction=0.3269',
	'ColourReconnection:range=2.323',
	'SigmaTotal:zeroAXB=off', 
	'SpaceShower:rapidityOrder=off',
	'SpaceShower:alphaSvalue=0.13',
        'TimeShower:alphaSvalue=0.13',
	)
)
"
-------------------------------------------------------------------------
"Recom
PRs: 20319, 20497"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
pythia8CP3 = cms.PSet(
    pythia8CP3Settings = cms.vstring(
    'Tune:pp 14',
    'Tune:ee 7',	
    'MultipartonInteractions:ecmPow=0.02266',
    'PDF:pSet=19',
    'MultipartonInteractions:bProfile=2',
    'MultipartonInteractions:pT0Ref=1.516',
    'MultipartonInteractions:coreRadius=0.5396',
    'MultipartonInteractions:coreFraction=0.3869',
    'ColourReconnection:range=4.727',
    'SigmaTotal:zeroAXB=off',    
    'SpaceShower:alphaSorder=2',
    'SpaceShower:alphaSvalue=0.118',
    'SigmaProcess:alphaSvalue=0.118',
    'SigmaProcess:alphaSorder=2',
    'MultipartonInteractions:alphaSvalue=0.118',
    'MultipartonInteractions:alphaSorder=2',
    'TimeShower:alphaSorder=2',
    'TimeShower:alphaSvalue=0.118',
    'SpaceShower:rapidityOrder=off', 
        )
)
"
-------------------------------------------------------------------------
"```python
import FWCore.ParameterSet.Config as cms

pythia8CP5 = cms.PSet(
    pythia8CP5Settings = cms.vstring(
        'Tune:pp 14',
        'Tune:ee 7',	
        'MultipartonInteractions:ecmPow=0.02266',
        'PDF:pSet=19',
        'MultipartonInteractions:bProfile=2',
        'MultipartonInteractions:pT0Ref=1.516',
        'MultipartonInteractions:coreRadius=0.5396',
        'MultipartonInteractions:coreFraction=0.3869',
        'ColourReconnection:range=4.727',
        'SigmaTotal:zeroAXB=off',    
        'SpaceShower:alphaSorder=2',
        'SpaceShower:alphaSvalue=0.118',
        'SigmaProcess:alphaSvalue=0.118',
        'SigmaProcess:alphaSorder=2',
        'MultipartonInteractions:alphaSvalue=0.118',
        'MultipartonInteractions:alphaSorder=2',
        'TimeShower:alphaSorder=2',
        'TimeShower:alphaSvalue=0.118',
        'SpaceShower:rapidityOrder=off', 
    )
)
```"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
pythia8CP3 = cms.PSet(
    pythia8CP3Settings = cms.vstring(
    'Tune:pp 14',
    'Tune:ee 7',	
    'MultipartonInteractions:ecmPow=0.02266',
    'PDF:pSet=19',
    'MultipartonInteractions:bProfile=2',
    'MultipartonInteractions:pT0Ref=1.516',
    'MultipartonInteractions:coreRadius=0.5396',
    'MultipartonInteractions:coreFraction=0.3869',
    'ColourReconnection:range=4.727',
    'SigmaTotal:zeroAXB=off',    
    'SpaceShower:alphaSorder=2',
    'SpaceShower:alphaSvalue=0.118',
    'SigmaProcess:alphaSvalue=0.118',
    'SigmaProcess:alphaSorder=2',
    'MultipartonInteractions:alphaSvalue=0.118',
    'MultipartonInteractions:alphaSorder=2',
    'TimeShower:alphaSorder=2',
    'TimeShower:alphaSvalue=0.118',
    'SpaceShower:rapidityOrder=off', 
        )
)
"
-------------------------------------------------------------------------
"Recom
PRs: 20319, 20497"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
pythia8CP4 = cms.PSet(
    pythia8CP4Settings = cms.vstring(
    'Tune:pp 14',
    'Tune:ee 7',
    'MultipartonInteractions:ecmPow=0.02012',
    'PDF:pSet=20',
    'MultipartonInteractions:bProfile=2',
    'MultipartonInteractions:pT0Ref=1.483',
    'MultipartonInteractions:coreRadius=0.5971',
    'MultipartonInteractions:coreFraction=0.3053',
    'ColourReconnection:range=5.613',
    'SigmaTotal:zeroAXB=off', 
    'SpaceShower:alphaSorder=2',
    'SpaceShower:alphaSvalue=0.118',
    'SigmaProcess:alphaSvalue=0.118',
    'SigmaProcess:alphaSorder=2',
    'MultipartonInteractions:alphaSvalue=0.118',
    'MultipartonInteractions:alphaSorder=2',
    'TimeShower:alphaSorder=2',
    'TimeShower:alphaSvalue=0.118',
    'SpaceShower:rapidityOrder=off', 
   )
)
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
pythia8CP5 = cms.PSet(
    pythia8CP5Settings = cms.vstring(
    'Tune:pp 14',
    'Tune:ee 7',
    'MultipartonInteractions:ecmPow=0.02012',
    'PDF:pSet=20',
    'MultipartonInteractions:bProfile=2',
    'MultipartonInteractions:pT0Ref=1.483',
    'MultipartonInteractions:coreRadius=0.5971',
    'MultipartonInteractions:coreFraction=0.3053',
    'ColourReconnection:range=5.613',
    'SigmaTotal:zeroAXB=off', 
    'SpaceShower:alphaSorder=2',
    'SpaceShower:alphaSvalue=0.118',
    'SigmaProcess:alphaSvalue=0.118',
    'SigmaProcess:alphaSorder=2',
    'MultipartonInteractions:alphaSvalue=0.118',
    'MultipartonInteractions:alphaSorder=2',
    'TimeShower:alphaSorder=2',
    'TimeShower:alphaSvalue=0.118',
    'SpaceShower:rapidityOrder=off', 
   )
)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
pythia8CP4 = cms.PSet(
    pythia8CP4Settings = cms.vstring(
    'Tune:pp 14',
    'Tune:ee 7',
    'MultipartonInteractions:ecmPow=0.02012',
    'PDF:pSet=20',
    'MultipartonInteractions:bProfile=2',
    'MultipartonInteractions:pT0Ref=1.483',
    'MultipartonInteractions:coreRadius=0.5971',
    'MultipartonInteractions:coreFraction=0.3053',
    'ColourReconnection:range=5.613',
    'SigmaTotal:zeroAXB=off', 
    'SpaceShower:alphaSorder=2',
    'SpaceShower:alphaSvalue=0.118',
    'SigmaProcess:alphaSvalue=0.118',
    'SigmaProcess:alphaSorder=2',
    'MultipartonInteractions:alphaSvalue=0.118',
    'MultipartonInteractions:alphaSorder=2',
    'TimeShower:alphaSorder=2',
    'TimeShower:alphaSvalue=0.118',
    'SpaceShower:rapidityOrder=off', 
   )
)
"
-------------------------------------------------------------------------
"Recom
PRs: 20319, 20497"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
pythia8CP5 = cms.PSet(
    pythia8CP5Settings = cms.vstring(
    'Tune:pp 14',
        'Tune:ee 7',
        'MultipartonInteractions:ecmPow=0.03344',
        'PDF:pSet=20',
        'MultipartonInteractions:bProfile=2',
        'MultipartonInteractions:pT0Ref=1.41',
        'MultipartonInteractions:coreRadius=0.7634',
        'MultipartonInteractions:coreFraction=0.63',
        'ColourReconnection:range=5.176',
        'SigmaTotal:zeroAXB=off',
        'SpaceShower:alphaSorder=2',
        'SpaceShower:alphaSvalue=0.118',
        'SigmaProcess:alphaSvalue=0.118',
        'SigmaProcess:alphaSorder=2',
        'MultipartonInteractions:alphaSvalue=0.118',
        'MultipartonInteractions:alphaSorder=2',
        'TimeShower:alphaSorder=2',
        'TimeShower:alphaSvalue=0.118',
        )
)
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
pythia8CP5 = cms.PSet(
    pythia8CP5Settings = cms.vstring(
        'Tune:pp 14',
        'Tune:ee 7',
        'MultipartonInteractions:ecmPow=0.03344',
        'PDF:pSet=20',
        'MultipartonInteractions:bProfile=2',
        'MultipartonInteractions:pT0Ref=1.41',
        'MultipartonInteractions:coreRadius=0.7634',
        'MultipartonInteractions:coreFraction=0.63',
        'ColourReconnection:range=5.176',
        'SigmaTotal:zeroAXB=off',
        'SpaceShower:alphaSorder=2',
        'SpaceShower:alphaSvalue=0.118',
        'SigmaProcess:alphaSvalue=0.118',
        'SigmaProcess:alphaSorder=2',
        'MultipartonInteractions:alphaSvalue=0.118',
        'MultipartonInteractions:alphaSorder=2',
        'TimeShower:alphaSorder=2',
        'TimeShower:alphaSvalue=0.118',
    )
)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
pythia8CP5 = cms.PSet(
    pythia8CP5Settings = cms.vstring(
    'Tune:pp 14',
        'Tune:ee 7',
        'MultipartonInteractions:ecmPow=0.03344',
        'PDF:pSet=20',
        'MultipartonInteractions:bProfile=2',
        'MultipartonInteractions:pT0Ref=1.41',
        'MultipartonInteractions:coreRadius=0.7634',
        'MultipartonInteractions:coreFraction=0.63',
        'ColourReconnection:range=5.176',
        'SigmaTotal:zeroAXB=off',
        'SpaceShower:alphaSorder=2',
        'SpaceShower:alphaSvalue=0.118',
        'SigmaProcess:alphaSvalue=0.118',
        'SigmaProcess:alphaSorder=2',
        'MultipartonInteractions:alphaSvalue=0.118',
        'MultipartonInteractions:alphaSorder=2',
        'TimeShower:alphaSorder=2',
        'TimeShower:alphaSvalue=0.118',
        )
)
"
-------------------------------------------------------------------------
"Recom
PRs: 20319, 20497"
-------------------------------------------------------------------------
=========================================================================
"AlCaRecoMatrix = {""AlCaLumiPixels"" : ""AlCaPCCZeroBiasAlCaPCCRandom"",
"
-------------------------------------------------------------------------
"AlCaRecoMatrix = {""AlCaPCCZeroBiasAlCaPCCRandom"" : ""Charmonium""}"
-------------------------------------------------------------------------
"AlCaRecoMatrix = {""AlCaLumiPixels"" : ""AlCaPCCZeroBiasAlCaPCCRandom"",
"
-------------------------------------------------------------------------
"Recom
PRs: 20473, 20486"
-------------------------------------------------------------------------
=========================================================================
"'keep *_slimmedGenJets__*',
'keep *_slimmedGenJetsAK8__*',
"
-------------------------------------------------------------------------
"'keep *_slimmedGenJetsFlavourInfos_*_*',
'keep *_slimmedGenJets__*',"
-------------------------------------------------------------------------
"MicroEventContentGEN = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_slimmedGenJetsFlavourInfos_*_*',
        'keep *_slimmedGenJets__*',
        'keep *_slimmedGenJetsAK8__*',
        'keep *_genMetTrue_*_*',
    )
)
MicroEventContentMC = cms.PSet(
    outputCommands = cms.untracked.vstring(MicroEventContent.outputCommands)
)
MicroEventContentMC.outputCommands = MicroEventContentGEN.outputCommands
MicroEventContentMC.outputCommands = [
                                        'keep PileupSummaryInfos_slimmedAddPileupInfo_*_*',
                                        # RUN
                                        'keep L1GtTriggerMenuLite_l1GtTriggerMenuLite__*'
                                      ]
"
-------------------------------------------------------------------------
"Recom
PRs: 19853, 20485"
-------------------------------------------------------------------------
=========================================================================
"""selectedOfflinePrimaryVerticesWithBS""
),
"
-------------------------------------------------------------------------
"""selectedOfflinePrimaryVerticesWithBS"",
)"
-------------------------------------------------------------------------
"""selectedOfflinePrimaryVerticesWithBS""
),
"
-------------------------------------------------------------------------
"Recom
PRs: 19935, 20483"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Eras.Modifier_phase2_timing_layer_cff import phase2_timing_layer
_vertexRecoCollectionsTiming = cms.VInputTag(""offlinePrimaryVertices"",
                                             ""offlinePrimaryVerticesWithBS"",
                                             ""selectedOfflinePrimaryVertices"",
                                             ""selectedOfflinePrimaryVerticesWithBS"",
                                             ""offlinePrimaryVertices4D"",
                                             ""selectedOfflinePrimaryVertices4D"",
                                             )
selectedOfflinePrimaryVertices4D = selectedOfflinePrimaryVertices.clone(src = cms.InputTag(""offlinePrimaryVertices4D""))
_vertexAnalysisSelectionTiming = vertexAnalysisSelection.copy()
_vertexAnalysisSelectionTiming = selectedOfflinePrimaryVertices4D
phase2_timing_layer.toModify( vertexAnalysis, 
                              vertexRecoCollections = _vertexRecoCollectionsTiming
                              )
phase2_timing_layer.toReplaceWith( vertexAnalysisSelection,
                                   _vertexAnalysisSelectionTiming )
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_phase2_timing_layer_cff import phase2_timing_layer
from Configuration.Eras.Modifier_trackingLowPU_cff import trackingLowPU
from Configuration.Eras.Modifier_trackingPhase2PU140_cff import trackingPhase2PU140
from SimTracker.TrackAssociation.trackingParticleRecoTrackAsssociation_cfi import _trackingParticleRecoTrackAsssociation

_vertexRecoCollectionsTiming = cms.VInputTag(""offlinePrimaryVertices"",
                                             ""offlinePrimaryVerticesWithBS"",
                                             ""selectedOfflinePrimaryVertices"",
                                             ""selectedOfflinePrimaryVerticesWithBS"",
                                             ""offlinePrimaryVertices4D"",
                                             ""selectedOfflinePrimaryVertices4D"",
                                            )
selectedOfflinePrimaryVertices4D = selectedOfflinePrimaryVertices.clone(src = cms.InputTag(""offlinePrimaryVertices4D""))
_vertexAnalysisSelectionTiming = vertexAnalysisSelection.copy()
_vertexAnalysisSelectionTiming = selectedOfflinePrimaryVertices4D

phase2_timing_layer.toModify(vertexAnalysis,
                              vertexRecoCollections = _vertexRecoCollectionsTiming
                             )
phase2_timing_layer.toReplaceWith(vertexAnalysisSelection,
                                   _vertexAnalysisSelectionTiming
                                  )"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_phase2_timing_layer_cff import phase2_timing_layer
_vertexRecoCollectionsTiming = cms.VInputTag(""offlinePrimaryVertices"",
                                             ""offlinePrimaryVerticesWithBS"",
                                             ""selectedOfflinePrimaryVertices"",
                                             ""selectedOfflinePrimaryVerticesWithBS"",
                                             ""offlinePrimaryVertices4D"",
                                             ""selectedOfflinePrimaryVertices4D"",
                                             )
selectedOfflinePrimaryVertices4D = selectedOfflinePrimaryVertices.clone(src = cms.InputTag(""offlinePrimaryVertices4D""))
_vertexAnalysisSelectionTiming = vertexAnalysisSelection.copy()
_vertexAnalysisSelectionTiming = selectedOfflinePrimaryVertices4D
phase2_timing_layer.toModify( vertexAnalysis, 
                              vertexRecoCollections = _vertexRecoCollectionsTiming
                              )
phase2_timing_layer.toReplaceWith( vertexAnalysisSelection,
                                   _vertexAnalysisSelectionTiming )
"
-------------------------------------------------------------------------
"Recom
PRs: 19935, 20483"
-------------------------------------------------------------------------
=========================================================================
"AlCaRecoMatrix = {""AlCaLumiPixels"" : ""AlCaPCCZeroBiasAlCaPCCRandom"",
"
-------------------------------------------------------------------------
"AlCaRecoMatrix = {""AlCaLumiPixels"" : ""AlCaPCCZeroBias+AlCaPCCRandom"","
-------------------------------------------------------------------------
"AlCaRecoMatrix = {""AlCaLumiPixels"" : ""AlCaPCCZeroBiasAlCaPCCRandom"",
"
-------------------------------------------------------------------------
"Recom
PRs: 20473, 20474"
-------------------------------------------------------------------------
=========================================================================
")
"
-------------------------------------------------------------------------
"```python
     outputCommands = cms.untracked.vstring('keep recoTracks_GsfGlobalElectronTest_*_*',
         'keep recoGsfTracks_electronGsfTracks_*_*',
         'keep recoGsfTracks_electronGsfTracksFromMultiCl_*_*'
                                          
 )
```"
-------------------------------------------------------------------------
")
"
-------------------------------------------------------------------------
"Recom
PRs: 20368, 20407"
-------------------------------------------------------------------------
=========================================================================
"#include ""FWCore/Framework/interface/Event.h""
#include ""FWCore/Framework/interface/ESHandle.h""
#include ""FWCore/ParameterSet/interface/ParameterSet.h""
#include ""FWCore/ParameterSet/interface/ConfigurationDescriptions.h""
#include ""FWCore/ParameterSet/interface/ParameterSetDescription.h""
#include ""FWCore/MessageLogger/interface/MessageLogger.h""
#include ""DQMServices/Core/interface/DQMEDAnalyzer.h""
#include ""DQMServices/Core/interface/MonitorElement.h""
#include ""DataFormats/Common/interface/Handle.h""
#include ""DataFormats/VertexReco/interface/Vertex.h""
#include ""DataFormats/VertexReco/interface/VertexFwd.h""
#include ""DataFormats/BeamSpot/interface/BeamSpot.h""
#include ""DataFormats/Scalers/interface/LumiScalers.h""
#include ""TrackingTools/TransientTrack/interface/TransientTrack.h""
#include ""RecoVertex/VertexPrimitives/interface/TransientVertex.h""
#include ""TrackingTools/TransientTrack/interface/TransientTrackBuilder.h""
#include ""TrackingTools/Records/interface/TransientTrackRecord.h""
#include ""RecoVertex/AdaptiveVertexFit/interface/AdaptiveVertexFitter.h""
#include <random>
namespace {
  template <typename T, size_t N>
  std::array<T, N1> makeLogBins(const double min, const double max) {
    const double minLog10 = std::log10(min);
    const double maxLog10 = std::log10(max);
    const double width = (maxLog10-minLog10)/N;
    std::array<T, N1> ret;
    ret[0] = std::pow(10, minLog10);
    const double mult = std::pow(10, width);
    for ( size_t i=1; i<=N; i) {
      ret[i] = ret[i-1]*mult;
    }
    return ret;
  }
  template <typename T>
  T sqr(T val) {
    return val*val;
  }
}
class PrimaryVertexResolution: public DQMEDAnalyzer{
 public:
  PrimaryVertexResolution(const edm::ParameterSet& iConfig);
  ~PrimaryVertexResolution() override;
  void bookHistograms(DQMStore::IBooker&, edm::Run const&, edm::EventSetup const&) override;
  void analyze(const edm::Event&, const edm::EventSetup& ) override;
  static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);
 private:
  std::vector<reco::TransientTrack> sortTracksByPt(const reco::Vertex& thePV,
                                                   const TransientTrackBuilder& ttBuilder,
                                                   const reco::BeamSpot& beamspot);
  edm::EDGetTokenT<reco::VertexCollection> vertexSrc_;
  edm::EDGetTokenT<reco::BeamSpot> beamspotSrc_;
  edm::EDGetTokenT<LumiScalersCollection> lumiScalersSrc_;
  std::string rootFolder_;
  std::string transientTrackBuilder_;
  AdaptiveVertexFitter fitter_;
  struct BinningY {
    explicit BinningY(const edm::ParameterSet& iConfig):
      maxResol_(iConfig.getUntrackedParameter<double>(""maxResol"")),
      binsResol_(iConfig.getUntrackedParameter<int>(""binsResol"")),
      maxPull_(iConfig.getUntrackedParameter<double>(""maxPull"")),
      binsPull_(iConfig.getUntrackedParameter<int>(""binsPull""))
    {}
    const double maxResol_;
    const int binsResol_;
    const double maxPull_;
    const int binsPull_;
  };
  struct BinningX {
    explicit BinningX(const edm::ParameterSet& iConfig):
      minNtracks_(iConfig.getUntrackedParameter<double>(""minNtracks"")),
      maxNtracks_(iConfig.getUntrackedParameter<double>(""maxNtracks"")),
      binsNtracks_(iConfig.getUntrackedParameter<int>(""binsNtracks"")),
      minNvertices_(iConfig.getUntrackedParameter<double>(""minNvertices"")),
      maxNvertices_(iConfig.getUntrackedParameter<double>(""maxNvertices"")),
      binsNvertices_(iConfig.getUntrackedParameter<int>(""binsNvertices"")),
      minPt_(iConfig.getUntrackedParameter<double>(""minPt"")),
      maxPt_(iConfig.getUntrackedParameter<double>(""maxPt"")),
      minLumi_(iConfig.getUntrackedParameter<double>(""minLumi"")),
      maxLumi_(iConfig.getUntrackedParameter<double>(""maxLumi""))
    {}
    const int minNtracks_;
    const int maxNtracks_;
    const int binsNtracks_;
    const int minNvertices_;
    const int maxNvertices_;
    const int binsNvertices_;
    const double minPt_;
    const double maxPt_;
    const double minLumi_;
    const double maxLumi_;
  };
  class Resolution {
  public:
    Resolution(const reco::Vertex& vertex1, const reco::Vertex& vertex2) {
      const double diffx = vertex1.x() - vertex2.x();
      const double diffy = vertex1.y() - vertex2.y();
      const double diffz = vertex1.z() - vertex2.z();
      // Take into account the need to divide by sqrt(2) already in
      // the filling so that we can use DQMGenericClient for the
      // gaussian fits
      const double invSqrt2 = 1./std::sqrt(2.);
      resx_ = diffx * invSqrt2;
      resy_ = diffy * invSqrt2;
      resz_ = diffz * invSqrt2;
      pullx_ = diffx / std::sqrt(sqr(vertex1.xError())  sqr(vertex2.xError()));
      pully_ = diffy / std::sqrt(sqr(vertex1.yError())  sqr(vertex2.yError()));
      pullz_ = diffz / std::sqrt(sqr(vertex1.zError())  sqr(vertex2.zError()));
    }
    double resx() const { return resx_; }
    double resy() const { return resy_; }
    double resz() const { return resz_; }
    double pullx() const { return pullx_; }
    double pully() const { return pully_; }
    double pullz() const { return pullz_; }
  private:
    double resx_;
    double resy_;
    double resz_;
    double pullx_;
    double pully_;
    double pullz_;
  };
  class DiffPlots {
  public:
    explicit DiffPlots(const std::string& postfix, const BinningY& binY):
      postfix_(postfix),
      binningY_(binY)
    {}
    template <typename T>
    void bookLogX(DQMStore::IBooker& iBooker, const T& binArray) {
      book(iBooker, binArray.size()-1, binArray.front(), binArray.back());
      setLogX(binArray.size()-1, binArray.data());
    }
    template <typename ...Args>
    void book(DQMStore::IBooker& iBooker, Args&&... args) {
      const auto binsResol = binningY_.binsResol_;
      const auto maxResol = binningY_.maxResol_;
      hDiffX_ = iBooker.book2D(""res_x_vs_""postfix_, ""Resolution of X vs. ""postfix_, std::forward<Args>(args)..., binsResol,-maxResol,maxResol);
      hDiffY_ = iBooker.book2D(""res_y_vs_""postfix_, ""Resolution of Y vs. ""postfix_, std::forward<Args>(args)..., binsResol,-maxResol,maxResol);
      hDiffZ_ = iBooker.book2D(""res_z_vs_""postfix_, ""Resolution of Z vs. ""postfix_, std::forward<Args>(args)..., binsResol,-maxResol,maxResol);
      const auto binsPull = binningY_.binsPull_;
      const auto maxPull = binningY_.maxPull_;
      hPullX_ = iBooker.book2D(""pull_x_vs_""postfix_, ""Pull of X vs. ""postfix_, std::forward<Args>(args)..., binsPull,-maxPull,maxPull);
      hPullY_ = iBooker.book2D(""pull_y_vs_""postfix_, ""Pull of Y vs. ""postfix_, std::forward<Args>(args)..., binsPull,-maxPull,maxPull);
      hPullZ_ = iBooker.book2D(""pull_z_vs_""postfix_, ""Pull of Z vs. ""postfix_, std::forward<Args>(args)..., binsPull,-maxPull,maxPull);
    }
    template <typename ...Args>
    void setLogX(Args&&... args) {
      hDiffX_->getTH2F()->GetXaxis()->Set(std::forward<Args>(args)...);
      hDiffY_->getTH2F()->GetXaxis()->Set(std::forward<Args>(args)...);
      hDiffZ_->getTH2F()->GetXaxis()->Set(std::forward<Args>(args)...);
      hPullX_->getTH2F()->GetXaxis()->Set(std::forward<Args>(args)...);
      hPullY_->getTH2F()->GetXaxis()->Set(std::forward<Args>(args)...);
      hPullZ_->getTH2F()->GetXaxis()->Set(std::forward<Args>(args)...);
    }
    template <typename T>
    void fill(const Resolution& res, const T ref) {
      hDiffX_->Fill(ref, res.resx());
      hDiffY_->Fill(ref, res.resy());
      hDiffZ_->Fill(ref, res.resz());
      hPullX_->Fill(ref, res.pullx());
      hPullY_->Fill(ref, res.pully());
      hPullZ_->Fill(ref, res.pullz());
    }
  private:
    std::string postfix_;
    const BinningY& binningY_;
    MonitorElement *hDiffX_ = nullptr;
    MonitorElement *hDiffY_ = nullptr;
    MonitorElement *hDiffZ_ = nullptr;
    MonitorElement *hPullX_ = nullptr;
    MonitorElement *hPullY_ = nullptr;
    MonitorElement *hPullZ_ = nullptr;
  };
  class Plots {
  public:
    Plots(const BinningX& binX, const BinningY& binY):
      binningX_(binX),
      binningY_(binY),
      hDiff_Ntracks_(""ntracks"", binY),
      hDiff_sumPt_(""sumpt"", binY),
      hDiff_Nvertices_(""nvertices"", binY),
      hDiff_instLumiScal_(""instLumiScal"", binY)
    {}
    void book(DQMStore::IBooker& iBooker) {
      const auto binsResol = binningY_.binsResol_;
      const auto maxResol = binningY_.maxResol_;
      hDiffX_ = iBooker.book1D(""res_x"", ""Resolution of X"", binsResol, -maxResol, maxResol);
      hDiffY_ = iBooker.book1D(""res_y"", ""Resolution of Y"", binsResol, -maxResol, maxResol);
      hDiffZ_ = iBooker.book1D(""res_z"", ""Resolution of Z"", binsResol, -maxResol, maxResol);
      const auto binsPull = binningY_.binsPull_;
      const auto maxPull = binningY_.maxPull_;
      hPullX_ = iBooker.book1D(""pull_x"", ""Pull of X"", binsPull, -maxPull, maxPull);
      hPullY_ = iBooker.book1D(""pull_y"", ""Pull of Y"", binsPull, -maxPull, maxPull);
      hPullZ_ = iBooker.book1D(""pull_z"", ""Pull of Z"", binsPull, -maxPull, maxPull);
      hDiff_Ntracks_.book(iBooker, binningX_.binsNtracks_, binningX_.minNtracks_, binningX_.maxNtracks_);
      hDiff_Nvertices_.book(iBooker, binningX_.binsNvertices_, binningX_.minNvertices_, binningX_.maxNvertices_);
      constexpr int binsPt = 30;
      hDiff_sumPt_.bookLogX(iBooker, makeLogBins<float, binsPt>(binningX_.minPt_, binningX_.maxPt_));
      constexpr int binsLumi = 100;
      hDiff_instLumiScal_.bookLogX(iBooker, makeLogBins<float, binsLumi>(binningX_.minLumi_, binningX_.maxLumi_));
    }
    void calculateAndFillResolution(const std::vector<reco::TransientTrack>& tracks,
                                    size_t nvertices,
                                    const LumiScalersCollection& lumiScalers,
                                    std::mt19937& engine,
                                    AdaptiveVertexFitter& fitter);
  private:
    const BinningX& binningX_;
    const BinningY& binningY_;
    MonitorElement *hDiffX_ = nullptr;
    MonitorElement *hDiffY_ = nullptr;
    MonitorElement *hDiffZ_ = nullptr;
    MonitorElement *hPullX_ = nullptr;
    MonitorElement *hPullY_ = nullptr;
    MonitorElement *hPullZ_ = nullptr;
    DiffPlots hDiff_Ntracks_;
    DiffPlots hDiff_sumPt_;
    DiffPlots hDiff_Nvertices_;
    DiffPlots hDiff_instLumiScal_;
  };
  // Binning
  BinningX binningX_;
  BinningY binningY_;
  // Histograms
  Plots hPV_;
  Plots hOtherV_;
  std::mt19937 engine_;
};
PrimaryVertexResolution::PrimaryVertexResolution(const edm::ParameterSet& iConfig):
  vertexSrc_(consumes<reco::VertexCollection>(iConfig.getUntrackedParameter<edm::InputTag>(""vertexSrc""))),
  beamspotSrc_(consumes<reco::BeamSpot>(iConfig.getUntrackedParameter<edm::InputTag>(""beamspotSrc""))),
  lumiScalersSrc_(consumes<LumiScalersCollection>(iConfig.getUntrackedParameter<edm::InputTag>(""lumiScalersSrc""))),
  rootFolder_(iConfig.getUntrackedParameter<std::string>(""rootFolder"")),
  transientTrackBuilder_(iConfig.getUntrackedParameter<std::string>(""transientTrackBuilder"")),
  binningX_(iConfig),
  binningY_(iConfig),
  hPV_(binningX_, binningY_),
  hOtherV_(binningX_, binningY_)
{}
PrimaryVertexResolution::~PrimaryVertexResolution() {}
void PrimaryVertexResolution::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
  edm::ParameterSetDescription desc;
  desc.addUntracked<edm::InputTag>(""vertexSrc"", edm::InputTag(""trackingDQMgoodOfflinePrimaryVertices""));
  desc.addUntracked<edm::InputTag>(""beamspotSrc"", edm::InputTag(""offlineBeamSpot""));
  desc.addUntracked<edm::InputTag>(""lumiScalersSrc"", edm::InputTag(""scalersRawToDigi""));
  desc.addUntracked<std::string>(""rootFolder"", ""OfflinePV/Resolution"");
  desc.addUntracked<std::string>(""transientTrackBuilder"", ""TransientTrackBuilder"");
  // Y axes
  desc.addUntracked<double>(""maxResol"", 0.02);
  desc.addUntracked<int>(""binsResol"", 100);
  desc.addUntracked<double>(""maxPull"", 5);
  desc.addUntracked<int>(""binsPull"", 100);
  // X axes
  desc.addUntracked<double>(""minNtracks"", -0.5);
  desc.addUntracked<double>(""maxNtracks"", 119.5);
  desc.addUntracked<int>(""binsNtracks"", 60);
  desc.addUntracked<double>(""minNvertices"", -0.5);
  desc.addUntracked<double>(""maxNvertices"", 199.5);
  desc.addUntracked<int>(""binsNvertices"", 100);
  desc.addUntracked<double>(""minPt"", 1);
  desc.addUntracked<double>(""maxPt"", 1e3);
  desc.addUntracked<double>(""minLumi"", 200.);
  desc.addUntracked<double>(""maxLumi"", 20000.);
  descriptions.add(""primaryVertexResolution"", desc);
}
void PrimaryVertexResolution::bookHistograms(DQMStore::IBooker& iBooker, edm::Run const&, edm::EventSetup const&) {
  iBooker.setCurrentFolder(rootFolder_""/PV"");
  hPV_.book(iBooker);
  iBooker.setCurrentFolder(rootFolder_""/OtherV"");
  hOtherV_.book(iBooker);
}
void PrimaryVertexResolution::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup) {
  edm::Handle<reco::VertexCollection> hvertices;
  iEvent.getByToken(vertexSrc_, hvertices);
  const reco::VertexCollection& vertices = *hvertices;
  if(vertices.empty())
    return;
  edm::Handle<reco::BeamSpot> hbeamspot;
  iEvent.getByToken(beamspotSrc_, hbeamspot);
  const reco::BeamSpot& beamspot = *hbeamspot;
  edm::Handle<LumiScalersCollection> hscalers;
  iEvent.getByToken(lumiScalersSrc_, hscalers);
  const LumiScalersCollection& lumiScalers = *hscalers;
  edm::ESHandle<TransientTrackBuilder> ttBuilderHandle;
  iSetup.get<TransientTrackRecord>().get(transientTrackBuilder_, ttBuilderHandle);
  const TransientTrackBuilder& ttBuilder = *ttBuilderHandle;
  // deterministic seed from the event number
  // should not bias the result as the event number is already
  // assigned randomly-enough
  engine_.seed( iEvent.id().event()  (iEvent.id().luminosityBlock()<<10)  (iEvent.id().run()<<20) );
  // The PV
  auto iPV = cbegin(vertices);
  const reco::Vertex& thePV = *iPV;
  const auto nvertices = vertices.size();
  if(thePV.tracksSize() >= 4) {
    auto sortedTracks = sortTracksByPt(thePV, ttBuilder, beamspot);
    hPV_.calculateAndFillResolution(sortedTracks, nvertices, lumiScalers, engine_, fitter_);
  }
  iPV;
  // Other vertices
  for(auto endPV = cend(vertices); iPV != endPV; iPV) {
    if(iPV->tracksSize() >= 4) {
      auto sortedTracks = sortTracksByPt(*iPV, ttBuilder, beamspot);
      hOtherV_.calculateAndFillResolution(sortedTracks, nvertices, lumiScalers, engine_, fitter_);
    }
  }
}
std::vector<reco::TransientTrack> PrimaryVertexResolution::sortTracksByPt(const reco::Vertex& thePV,
                                                                          const TransientTrackBuilder& ttBuilder,
                                                                          const reco::BeamSpot& beamspot) {
  std::vector<const reco::Track *> sortedTracks;
  sortedTracks.reserve(thePV.tracksSize());
  std::transform(thePV.tracks_begin(), thePV.tracks_end(), std::back_inserter(sortedTracks), [](const reco::TrackBaseRef& ref) {
      return &(*ref);
    });
  std::sort(sortedTracks.begin(), sortedTracks.end(), [](const reco::Track *a, const reco::Track *b) {
      return a->pt() > b->pt();
    });
  std::vector<reco::TransientTrack> ttracks;
  ttracks.reserve(sortedTracks.size());
  std::transform(sortedTracks.begin(), sortedTracks.end(), std::back_inserter(ttracks), [&](const reco::Track *track) {
      auto tt =  ttBuilder.build(track);
      tt.setBeamSpot(beamspot);
      return tt;
    });
  return ttracks;
}
void PrimaryVertexResolution::Plots::calculateAndFillResolution(const std::vector<reco::TransientTrack>& tracks,
                                                                size_t nvertices,
                                                                const LumiScalersCollection& lumiScalers,
                                                                std::mt19937& engine,
                                                                AdaptiveVertexFitter& fitter) {
  const size_t end = tracks.size()%2 == 0 ? tracks.size() : tracks.size()-1;
  std::vector<reco::TransientTrack> set1, set2;
  set1.reserve(end/2); set2.reserve(end/2);
  auto dis = std::uniform_int_distribution<>(0, 1); // [0, 1]
  double sumpt1=0, sumpt2=0;
  for(size_t i=0; i<end; i = 2) {
    const size_t set1_i = dis(engine);
    const size_t set2_i = 1-set1_i;
    set1.push_back(tracks[iset1_i]);
    set2.push_back(tracks[iset2_i]);
    sumpt1 = set1.back().track().pt();
    sumpt2 = set2.back().track().pt();
  }
  // For resolution we only fit
  TransientVertex vertex1 = fitter.vertex(set1);
  TransientVertex vertex2 = fitter.vertex(set2);
  Resolution res(vertex1, vertex2);
  hDiffX_->Fill(res.resx());
  hDiffY_->Fill(res.resy());
  hDiffZ_->Fill(res.resz());
  hPullX_->Fill(res.pullx());
  hPullY_->Fill(res.pully());
  hPullZ_->Fill(res.pullz());
  hDiff_Ntracks_.fill(res, set1.size());
  hDiff_sumPt_.fill(res, (sumpt1sumpt2)/2.0); // taking average is probably the best we can do, anyway they should be close to each other
  hDiff_Nvertices_.fill(res, nvertices);
  if(!lumiScalers.empty()) {
    hDiff_instLumiScal_.fill(res, lumiScalers.front().instantLumi());
  }
}
#include ""FWCore/Framework/interface/MakerMacros.h""
DEFINE_FWK_MODULE(PrimaryVertexResolution);
"
-------------------------------------------------------------------------
"```cpp
#include ""FWCore/Framework/interface/Event.h""
#include ""FWCore/Framework/interface/ESHandle.h""
#include ""FWCore/ParameterSet/interface/ParameterSet.h""
#include ""FWCore/ParameterSet/interface/ConfigurationDescriptions.h""
#include ""FWCore/ParameterSet/interface/ParameterSetDescription.h""
#include ""FWCore/MessageLogger/interface/MessageLogger.h""
#include ""DQMServices/Core/interface/DQMEDAnalyzer.h""
#include ""DQMServices/Core/interface/MonitorElement.h""
#include ""DataFormats/Common/interface/Handle.h""
#include ""DataFormats/VertexReco/interface/Vertex.h""
#include ""DataFormats/VertexReco/interface/VertexFwd.h""
#include ""DataFormats/BeamSpot/interface/BeamSpot.h""
#include ""DataFormats/Scalers/interface/LumiScalers.h""
#include ""TrackingTools/TransientTrack/interface/TransientTrack.h""
#include ""RecoVertex/VertexPrimitives/interface/TransientVertex.h""
#include ""TrackingTools/TransientTrack/interface/TransientTrackBuilder.h""
#include ""TrackingTools/Records/interface/TransientTrackRecord.h""
#include ""RecoVertex/AdaptiveVertexFit/interface/AdaptiveVertexFitter.h""
#include <cmath>
#include <random>
#include <array>

namespace {
  template <typename T, size_t N>
  std::array<T, N> makeLogBins(const double min, const double max) {
    const double minLog10 = std::log10(min);
    const double maxLog10 = std::log10(max);
    const double width = (maxLog10 - minLog10) / N;
    std::array<T, N> ret;
    ret[0] = std::pow(10, minLog10);
    const double mult = std::pow(10, width);
    for (size_t i = 1; i <= N; i++) {
      ret[i] = ret[i - 1] * mult;
    }
    return ret;
  }

  template <typename T>
  T sqr(T val) {
    return val * val;
  }
}

class PrimaryVertexResolution : public DQMEDAnalyzer{
 public:
  PrimaryVertexResolution(const edm::ParameterSet& iConfig);
  ~PrimaryVertexResolution() override;
  void bookHistograms(DQMStore::IBooker&, edm::Run const&, edm::EventSetup const&) override;
  void analyze(const edm::Event&, const edm::EventSetup&) override;
  static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);

 private:
  std::vector<reco::TransientTrack> sortTracksByPt(const reco::Vertex& thePV, const TransientTrackBuilder& ttBuilder, const reco::BeamSpot& beamspot);
  edm::EDGetTokenT<reco::VertexCollection> vertexSrc_;
  edm::EDGetTokenT<reco::BeamSpot> beamspotSrc_;
  edm::EDGetTokenT<LumiScalersCollection> lumiScalersSrc_;
  std::string rootFolder_;
  std::string transientTrackBuilder_;
  AdaptiveVertexFitter fitter_;
  
  struct BinningY {
    explicit BinningY(const edm::ParameterSet& iConfig):
      maxResol_(iConfig.getUntrackedParameter<double>(""maxResol"")),
      binsResol_(iConfig.getUntrackedParameter<int>(""binsResol"")),
      maxPull_(iConfig.getUntrackedParameter<double>(""maxPull"")),
      binsPull_(iConfig.getUntrackedParameter<int>(""binsPull""))
    {}
    const double maxResol_;
    const int binsResol_;
    const double maxPull_;
    const int binsPull_;
  };

  struct BinningX {
    explicit BinningX(const edm::ParameterSet& iConfig):
      minNtracks_(iConfig.getUntrackedParameter<double>(""minNtracks"")),
      maxNtracks_(iConfig.getUntrackedParameter<double>(""maxNtracks"")),
      binsNtracks_(iConfig.getUntrackedParameter<int>(""binsNtracks"")),
      minNvertices_(iConfig.getUntrackedParameter<double>(""minNvertices"")),
      maxNvertices_(iConfig.getUntrackedParameter<double>(""maxNvertices"")),
      binsNvertices_(iConfig.getUntrackedParameter<int>(""binsNvertices"")),
      minPt_(iConfig.getUntrackedParameter<double>(""minPt"")),
      maxPt_(iConfig.getUntrackedParameter<double>(""maxPt"")),
      minLumi_(iConfig.getUntrackedParameter<double>(""minLumi"")),
      maxLumi_(iConfig.getUntrackedParameter<double>(""maxLumi""))
    {}
    const int minNtracks_;
    const int maxNtracks_;
    const int binsNtracks_;
    const int minNvertices_;
    const int maxNvertices_;
    const int binsNvertices_;
    const double minPt_;
    const double maxPt_;
    const double minLumi_;
    const double maxLumi_;
  };

  class Resolution {
  public:
    Resolution(const reco::Vertex& vertex1, const reco::Vertex& vertex2) {
      const double diffx = vertex1.x() - vertex2.x();
      const double diffy = vertex1.y() - vertex2.y();
      const double diffz = vertex1.z() - vertex2.z();
      const double invSqrt2 = 1./std::sqrt(2.);
      resx_ = diffx * invSqrt2;
      resy_ = diffy * invSqrt2;
      resz_ = diffz * invSqrt2;
      pullx_ = diffx / std::sqrt(sqr(vertex1.xError()) +  sqr(vertex2.xError()));
      pully_ = diffy / std::sqrt(sqr(vertex1.yError()) +  sqr(vertex2.yError()));
      pullz_ = diffz / std::sqrt(sqr(vertex1.zError()) +  sqr(vertex2.zError()));
    }
    double resx() const { return resx_; }
    double resy() const { return resy_; }
    double resz() const { return resz_; }
    double pullx() const { return pullx_; }
    double pully() const { return pully_; }
    double pullz() const { return pullz_; }
  private:
    double resx_;
    double resy_;
    double resz_;
    double pullx_;
    double pully_;
    double pullz_;
  };

  class DiffPlots {
  public:
    explicit DiffPlots(const std::string& postfix, const BinningY& binY):
      postfix_(postfix),
      binningY_(binY)
    {}

    template <typename T>
    void bookLogX(DQMStore::IBooker& iBooker, const T& binArray) {
      book(iBooker, binArray.size()-1, binArray.front(), binArray.back());
      setLogX(binArray.size()-1, binArray.data());
    }

    template <typename ...Args>
    void book(DQMStore::IBooker& iBooker, Args&&... args) {
      const auto binsResol = binningY_.binsResol_;
      const auto maxResol = binningY_.maxResol_;
      hDiffX_ = iBooker.book2D(""res_x_vs_"" + postfix_, ""Resolution of X vs. "" + postfix_, std::forward<Args>(args)..., binsResol, -maxResol, maxResol);
      hDiffY_ = iBooker.book2D(""res_y_vs_"" + postfix_, ""Resolution of Y vs. "" + postfix_, std::forward<Args>(args)..., binsResol, -maxResol, maxResol);
      hDiffZ_ = iBooker.book2D(""res_z_vs_"" + postfix_, ""Resolution of Z vs. "" + postfix_, std::forward<Args>(args)..., binsResol, -maxResol, maxResol);
      const auto binsPull = binningY_.binsPull_;
      const auto maxPull = binningY_.maxPull_;
      hPullX_ = iBooker.book2D(""pull_x_vs_"" + postfix_, ""Pull of X vs. "" + postfix_, std::forward<Args>(args)..., binsPull, -maxPull, maxPull);
      hPullY_ = iBooker.book2D(""pull_y_vs_"" + postfix_, ""Pull of Y vs. "" + postfix_, std::forward<Args>(args)..., binsPull, -maxPull, maxPull);
      hPullZ_ = iBooker.book2D(""pull_z_vs_"" + postfix_, ""Pull of Z vs. "" + postfix_, std::forward<Args>(args)..., binsPull, -maxPull, maxPull);
    }

    template <typename ...Args>
    void setLogX(Args&&... args) {
      hDiffX_->getTH2F()->GetXaxis()->Set(std::forward<Args>(args)...);
      hDiffY_->getTH2F()->GetXaxis()->Set(std::forward<Args>(args)...);
      hDiffZ_->getTH2F()->GetXaxis()->Set(std::forward<Args>(args)...);
      hPullX_->getTH2F()->GetXaxis()->Set(std::forward<Args>(args)...);
      hPullY_->getTH2F()->GetXaxis()->Set(std::forward<Args>(args)...);
      hPullZ_->getTH2F()->GetXaxis()->Set(std::forward<Args>(args)...);
    }

    template <typename T>
    void fill(const Resolution& res, const T ref) {
      hDiffX_->Fill(ref, res.resx());
      hDiffY_->Fill(ref, res.resy());
      hDiffZ_->Fill(ref, res.resz());
      hPullX_->Fill(ref, res.pullx());
      hPullY_->Fill(ref, res.pully());
      hPullZ_->Fill(ref, res.pullz());
    }
  private:
    std::string postfix_;
    const BinningY& binningY_;
    MonitorElement *hDiffX_ = nullptr;
    MonitorElement *hDiffY_ = nullptr;
    MonitorElement *hDiffZ_ = nullptr;
    MonitorElement *hPullX_ = nullptr;
    MonitorElement *hPullY_ = nullptr;
    MonitorElement *hPullZ_ = nullptr;
  };

  class Plots {
  public:
    Plots(const BinningX& binX, const BinningY& binY):
      binningX_(binX),
      binningY_(binY),
      hDiff_Ntracks_(""ntracks"", binY),
      hDiff_sumPt_(""sumpt"", binY),
      hDiff_Nvertices_(""nvertices"", binY),
      hDiff_instLumiScal_(""instLumiScal"", binY)
    {}
    void book(DQMStore::IBooker& iBooker) {
      const auto binsResol = binningY_.binsResol_;
      const auto maxResol = binningY_.maxResol_;
      hDiffX_ = iBooker.book1D(""res_x"", ""Resolution of X"", binsResol, -maxResol, maxResol);
      hDiffY_ = iBooker.book1D(""res_y"", ""Resolution of Y"", binsResol, -maxResol, maxResol);
      hDiffZ_ = iBooker.book1D(""res_z"", ""Resolution of Z"", binsResol, -maxResol, maxResol);
      const auto binsPull = binningY_.binsPull_;
      const auto maxPull = binningY_.maxPull_;
      hPullX_ = iBooker.book1D(""pull_x"", ""Pull of X"", binsPull, -maxPull, maxPull);
      hPullY_ = iBooker.book1D(""pull_y"", ""Pull of Y"", binsPull, -maxPull, maxPull);
      hPullZ_ = iBooker.book1D(""pull_z"", ""Pull of Z"", binsPull, -maxPull, maxPull);
      hDiff_Ntracks_.book(iBooker, binningX_.binsNtracks_, binningX_.minNtracks_, binningX_.maxNtracks_);
      hDiff_Nvertices_.book(iBooker, binningX_.binsNvertices_, binningX_.minNvertices_, binningX_.maxNvertices_);
      constexpr int binsPt = 30;
      hDiff_sumPt_.bookLogX(iBooker, makeLogBins<float, binsPt>(binningX_.minPt_, binningX_.maxPt_));
      constexpr int binsLumi = 100;
      hDiff_instLumiScal_.bookLogX(iBooker, makeLogBins<float, binsLumi>(binningX_.minLumi_, binningX_.maxLumi_));
    }
    void calculateAndFillResolution(const std::vector<reco::TransientTrack>& tracks,
                                    size_t nvertices,
                                    const LumiScalersCollection& lumiScalers,
                                    std::mt19937& engine,
                                    AdaptiveVertexFitter& fitter);
  private:
    const BinningX& binningX_;
    const BinningY& binningY_;
    MonitorElement *hDiffX_ = nullptr;
    MonitorElement *hDiffY_ = nullptr;
    MonitorElement *hDiffZ_ = nullptr;
    MonitorElement *hPullX_ = nullptr;
    MonitorElement *hPullY_ = nullptr;
    MonitorElement *hPullZ_ = nullptr;
    DiffPlots hDiff_Ntracks_;
    DiffPlots hDiff_sumPt_;
    DiffPlots hDiff_Nvertices_;
    DiffPlots hDiff_instLumiScal_;
  };

  // Binning
  BinningX binningX_;
  BinningY binningY_;
  // Histograms
  Plots hPV_;
  Plots hOtherV_;
  std::mt19937 engine_;
};

PrimaryVertexResolution::PrimaryVertexResolution(const edm::ParameterSet& iConfig):
  vertexSrc_(consumes<reco::VertexCollection>(iConfig.getUntrackedParameter<edm::InputTag>(""vertexSrc""))),
  beamspotSrc_(consumes<reco::BeamSpot>(iConfig.getUntrackedParameter<edm::InputTag>(""beamspotSrc""))),
  lumiScalersSrc_(consumes<LumiScalersCollection>(iConfig.getUntrackedParameter<edm::InputTag>(""lumiScalersSrc""))),
  rootFolder_(iConfig.getUntrackedParameter<std::string>(""rootFolder"")),
  transientTrackBuilder_(iConfig.getUntrackedParameter<std::string>(""transientTrackBuilder"")),
  binningX_(iConfig),
  binningY_(iConfig),
  hPV_(binningX_, binningY_),
  hOtherV_(binningX_, binningY_)
{}

PrimaryVertexResolution::~PrimaryVertexResolution() {}

void PrimaryVertexResolution::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
  edm::ParameterSetDescription desc;
  desc.addUntracked<edm::InputTag>(""vertexSrc"", edm::InputTag(""trackingDQMgoodOfflinePrimaryVertices""));
  desc.addUntracked<edm::InputTag>(""beamspotSrc"", edm::InputTag(""offlineBeamSpot""));
  desc.addUntracked<edm::InputTag>(""lumiScalersSrc"", edm::InputTag(""scalersRawToDigi""));
  desc.addUntracked<std::string>(""rootFolder"", ""OfflinePV/Resolution"");
  desc.addUntracked<std::string>(""transientTrackBuilder"", ""TransientTrackBuilder"");
  // Y axes
  desc.addUntracked<double>(""maxResol"", 0.02);
  desc.addUntracked<int>(""binsResol"", 100);
  desc.addUntracked<double>(""maxPull"", 5);
  desc.addUntracked<int>(""binsPull"", 100);
  // X axes
  desc.addUntracked<double>(""minNtracks"", -0.5);
  desc.addUntracked<double>(""maxNtracks"", 119.5);
  desc.addUntracked<int>(""binsNtracks"", 60);
  desc.addUntracked<double>(""minNvertices"", -0.5);
  desc.addUntracked<double>(""maxNvertices"", 199.5);
  desc.addUntracked<int>(""binsNvertices"", 100);
  desc.addUntracked<double>(""minPt"", 1);
  desc.addUntracked<double>(""maxPt"", 1e3);
  desc.addUntracked<double>(""minLumi"", 200.);
  desc.addUntracked<double>(""maxLumi"", 20000.);
  descriptions.add(""primaryVertexResolution"", desc);
}

void PrimaryVertexResolution::bookHistograms(DQMStore::IBooker& iBooker, edm::Run const&, edm::EventSetup const&) {
  iBooker.setCurrentFolder(rootFolder_ + ""/PV"");
  hPV_.book(iBooker);
  iBooker.setCurrentFolder(rootFolder_ + ""/OtherV"");
  hOtherV_.book(iBooker);
}

void PrimaryVertexResolution::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup) {
  edm::Handle<reco::VertexCollection> hvertices;
  iEvent.getByToken(vertexSrc_, hvertices);
  const reco::VertexCollection& vertices = *hvertices;
  if (vertices.empty())
    return;
  
  edm::Handle<reco::BeamSpot> hbeamspot;
  iEvent.getByToken(beamspotSrc_, hbeamspot);
  const reco::BeamSpot& beamspot = *hbeamspot;

  edm::Handle<LumiScalersCollection> hscalers;
  iEvent.getByToken(lumiScalersSrc_, hscalers);
  const LumiScalersCollection& lumiScalers = *hscalers;

  edm::ESHandle<TransientTrackBuilder> ttBuilderHandle;
  iSetup.get<TransientTrackRecord>().get(transientTrackBuilder_, ttBuilderHandle);
  const TransientTrackBuilder& ttBuilder = *ttBuilderHandle;

  engine_.seed(iEvent.id().event() ^ (iEvent.id().luminosityBlock()<<10) ^ (iEvent.id().run()<<20));

  // The PV
  auto iPV = vertices.begin();
  const reco::Vertex& thePV = *iPV;
  const auto nvertices = vertices.size();
  if (thePV.tracksSize() >= 4) {
    auto sortedTracks = sortTracksByPt(thePV, ttBuilder, beamspot);
    hPV_.calculateAndFillResolution(sortedTracks, nvertices, lumiScalers, engine_, fitter_);
  }

  iPV++;

  // Other vertices
  for (auto endPV = vertices.end(); iPV != endPV; iPV++) {
    if (iPV->tracksSize() >= 4) {
      auto sortedTracks = sortTracksByPt(*iPV, ttBuilder, beamspot);
      hOtherV_.calculateAndFillResolution(sortedTracks, nvertices, lumiScalers, engine_, fitter_);
    }
  }
}

std::vector<reco::TransientTrack> PrimaryVertexResolution::sortTracksByPt(const reco::Vertex& thePV, const TransientTrackBuilder& ttBuilder, const reco::BeamSpot& beamspot) {
  std::vector<const reco::Track*> sortedTracks;
  sortedTracks.reserve(thePV.tracksSize());
  std::transform(thePV.tracks_begin(), thePV.tracks_end(), std::back_inserter(sortedTracks), [](const reco"
-------------------------------------------------------------------------
"#include ""FWCore/Framework/interface/Event.h""
#include ""FWCore/Framework/interface/ESHandle.h""
#include ""FWCore/ParameterSet/interface/ParameterSet.h""
#include ""FWCore/ParameterSet/interface/ConfigurationDescriptions.h""
#include ""FWCore/ParameterSet/interface/ParameterSetDescription.h""
#include ""FWCore/MessageLogger/interface/MessageLogger.h""
#include ""DQMServices/Core/interface/DQMEDAnalyzer.h""
#include ""DQMServices/Core/interface/MonitorElement.h""
#include ""DataFormats/Common/interface/Handle.h""
#include ""DataFormats/VertexReco/interface/Vertex.h""
#include ""DataFormats/VertexReco/interface/VertexFwd.h""
#include ""DataFormats/BeamSpot/interface/BeamSpot.h""
#include ""DataFormats/Scalers/interface/LumiScalers.h""
#include ""TrackingTools/TransientTrack/interface/TransientTrack.h""
#include ""RecoVertex/VertexPrimitives/interface/TransientVertex.h""
#include ""TrackingTools/TransientTrack/interface/TransientTrackBuilder.h""
#include ""TrackingTools/Records/interface/TransientTrackRecord.h""
#include ""RecoVertex/AdaptiveVertexFit/interface/AdaptiveVertexFitter.h""
#include <random>
namespace {
  template <typename T, size_t N>
  std::array<T, N1> makeLogBins(const double min, const double max) {
    const double minLog10 = std::log10(min);
    const double maxLog10 = std::log10(max);
    const double width = (maxLog10-minLog10)/N;
    std::array<T, N1> ret;
    ret[0] = std::pow(10, minLog10);
    const double mult = std::pow(10, width);
    for ( size_t i=1; i<=N; i) {
      ret[i] = ret[i-1]*mult;
    }
    return ret;
  }
  template <typename T>
  T sqr(T val) {
    return val*val;
  }
}
class PrimaryVertexResolution: public DQMEDAnalyzer{
 public:
  PrimaryVertexResolution(const edm::ParameterSet& iConfig);
  ~PrimaryVertexResolution() override;
  void bookHistograms(DQMStore::IBooker&, edm::Run const&, edm::EventSetup const&) override;
  void analyze(const edm::Event&, const edm::EventSetup& ) override;
  static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);
 private:
  std::vector<reco::TransientTrack> sortTracksByPt(const reco::Vertex& thePV,
                                                   const TransientTrackBuilder& ttBuilder,
                                                   const reco::BeamSpot& beamspot);
  edm::EDGetTokenT<reco::VertexCollection> vertexSrc_;
  edm::EDGetTokenT<reco::BeamSpot> beamspotSrc_;
  edm::EDGetTokenT<LumiScalersCollection> lumiScalersSrc_;
  std::string rootFolder_;
  std::string transientTrackBuilder_;
  AdaptiveVertexFitter fitter_;
  struct BinningY {
    explicit BinningY(const edm::ParameterSet& iConfig):
      maxResol_(iConfig.getUntrackedParameter<double>(""maxResol"")),
      binsResol_(iConfig.getUntrackedParameter<int>(""binsResol"")),
      maxPull_(iConfig.getUntrackedParameter<double>(""maxPull"")),
      binsPull_(iConfig.getUntrackedParameter<int>(""binsPull""))
    {}
    const double maxResol_;
    const int binsResol_;
    const double maxPull_;
    const int binsPull_;
  };
  struct BinningX {
    explicit BinningX(const edm::ParameterSet& iConfig):
      minNtracks_(iConfig.getUntrackedParameter<double>(""minNtracks"")),
      maxNtracks_(iConfig.getUntrackedParameter<double>(""maxNtracks"")),
      binsNtracks_(iConfig.getUntrackedParameter<int>(""binsNtracks"")),
      minNvertices_(iConfig.getUntrackedParameter<double>(""minNvertices"")),
      maxNvertices_(iConfig.getUntrackedParameter<double>(""maxNvertices"")),
      binsNvertices_(iConfig.getUntrackedParameter<int>(""binsNvertices"")),
      minPt_(iConfig.getUntrackedParameter<double>(""minPt"")),
      maxPt_(iConfig.getUntrackedParameter<double>(""maxPt"")),
      minLumi_(iConfig.getUntrackedParameter<double>(""minLumi"")),
      maxLumi_(iConfig.getUntrackedParameter<double>(""maxLumi""))
    {}
    const int minNtracks_;
    const int maxNtracks_;
    const int binsNtracks_;
    const int minNvertices_;
    const int maxNvertices_;
    const int binsNvertices_;
    const double minPt_;
    const double maxPt_;
    const double minLumi_;
    const double maxLumi_;
  };
  class Resolution {
  public:
    Resolution(const reco::Vertex& vertex1, const reco::Vertex& vertex2) {
      const double diffx = vertex1.x() - vertex2.x();
      const double diffy = vertex1.y() - vertex2.y();
      const double diffz = vertex1.z() - vertex2.z();
      // Take into account the need to divide by sqrt(2) already in
      // the filling so that we can use DQMGenericClient for the
      // gaussian fits
      const double invSqrt2 = 1./std::sqrt(2.);
      resx_ = diffx * invSqrt2;
      resy_ = diffy * invSqrt2;
      resz_ = diffz * invSqrt2;
      pullx_ = diffx / std::sqrt(sqr(vertex1.xError())  sqr(vertex2.xError()));
      pully_ = diffy / std::sqrt(sqr(vertex1.yError())  sqr(vertex2.yError()));
      pullz_ = diffz / std::sqrt(sqr(vertex1.zError())  sqr(vertex2.zError()));
    }
    double resx() const { return resx_; }
    double resy() const { return resy_; }
    double resz() const { return resz_; }
    double pullx() const { return pullx_; }
    double pully() const { return pully_; }
    double pullz() const { return pullz_; }
  private:
    double resx_;
    double resy_;
    double resz_;
    double pullx_;
    double pully_;
    double pullz_;
  };
  class DiffPlots {
  public:
    explicit DiffPlots(const std::string& postfix, const BinningY& binY):
      postfix_(postfix),
      binningY_(binY)
    {}
    template <typename T>
    void bookLogX(DQMStore::IBooker& iBooker, const T& binArray) {
      book(iBooker, binArray.size()-1, binArray.front(), binArray.back());
      setLogX(binArray.size()-1, binArray.data());
    }
    template <typename ...Args>
    void book(DQMStore::IBooker& iBooker, Args&&... args) {
      const auto binsResol = binningY_.binsResol_;
      const auto maxResol = binningY_.maxResol_;
      hDiffX_ = iBooker.book2D(""res_x_vs_""postfix_, ""Resolution of X vs. ""postfix_, std::forward<Args>(args)..., binsResol,-maxResol,maxResol);
      hDiffY_ = iBooker.book2D(""res_y_vs_""postfix_, ""Resolution of Y vs. ""postfix_, std::forward<Args>(args)..., binsResol,-maxResol,maxResol);
      hDiffZ_ = iBooker.book2D(""res_z_vs_""postfix_, ""Resolution of Z vs. ""postfix_, std::forward<Args>(args)..., binsResol,-maxResol,maxResol);
      const auto binsPull = binningY_.binsPull_;
      const auto maxPull = binningY_.maxPull_;
      hPullX_ = iBooker.book2D(""pull_x_vs_""postfix_, ""Pull of X vs. ""postfix_, std::forward<Args>(args)..., binsPull,-maxPull,maxPull);
      hPullY_ = iBooker.book2D(""pull_y_vs_""postfix_, ""Pull of Y vs. ""postfix_, std::forward<Args>(args)..., binsPull,-maxPull,maxPull);
      hPullZ_ = iBooker.book2D(""pull_z_vs_""postfix_, ""Pull of Z vs. ""postfix_, std::forward<Args>(args)..., binsPull,-maxPull,maxPull);
    }
    template <typename ...Args>
    void setLogX(Args&&... args) {
      hDiffX_->getTH2F()->GetXaxis()->Set(std::forward<Args>(args)...);
      hDiffY_->getTH2F()->GetXaxis()->Set(std::forward<Args>(args)...);
      hDiffZ_->getTH2F()->GetXaxis()->Set(std::forward<Args>(args)...);
      hPullX_->getTH2F()->GetXaxis()->Set(std::forward<Args>(args)...);
      hPullY_->getTH2F()->GetXaxis()->Set(std::forward<Args>(args)...);
      hPullZ_->getTH2F()->GetXaxis()->Set(std::forward<Args>(args)...);
    }
    template <typename T>
    void fill(const Resolution& res, const T ref) {
      hDiffX_->Fill(ref, res.resx());
      hDiffY_->Fill(ref, res.resy());
      hDiffZ_->Fill(ref, res.resz());
      hPullX_->Fill(ref, res.pullx());
      hPullY_->Fill(ref, res.pully());
      hPullZ_->Fill(ref, res.pullz());
    }
  private:
    std::string postfix_;
    const BinningY& binningY_;
    MonitorElement *hDiffX_ = nullptr;
    MonitorElement *hDiffY_ = nullptr;
    MonitorElement *hDiffZ_ = nullptr;
    MonitorElement *hPullX_ = nullptr;
    MonitorElement *hPullY_ = nullptr;
    MonitorElement *hPullZ_ = nullptr;
  };
  class Plots {
  public:
    Plots(const BinningX& binX, const BinningY& binY):
      binningX_(binX),
      binningY_(binY),
      hDiff_Ntracks_(""ntracks"", binY),
      hDiff_sumPt_(""sumpt"", binY),
      hDiff_Nvertices_(""nvertices"", binY),
      hDiff_instLumiScal_(""instLumiScal"", binY)
    {}
    void book(DQMStore::IBooker& iBooker) {
      const auto binsResol = binningY_.binsResol_;
      const auto maxResol = binningY_.maxResol_;
      hDiffX_ = iBooker.book1D(""res_x"", ""Resolution of X"", binsResol, -maxResol, maxResol);
      hDiffY_ = iBooker.book1D(""res_y"", ""Resolution of Y"", binsResol, -maxResol, maxResol);
      hDiffZ_ = iBooker.book1D(""res_z"", ""Resolution of Z"", binsResol, -maxResol, maxResol);
      const auto binsPull = binningY_.binsPull_;
      const auto maxPull = binningY_.maxPull_;
      hPullX_ = iBooker.book1D(""pull_x"", ""Pull of X"", binsPull, -maxPull, maxPull);
      hPullY_ = iBooker.book1D(""pull_y"", ""Pull of Y"", binsPull, -maxPull, maxPull);
      hPullZ_ = iBooker.book1D(""pull_z"", ""Pull of Z"", binsPull, -maxPull, maxPull);
      hDiff_Ntracks_.book(iBooker, binningX_.binsNtracks_, binningX_.minNtracks_, binningX_.maxNtracks_);
      hDiff_Nvertices_.book(iBooker, binningX_.binsNvertices_, binningX_.minNvertices_, binningX_.maxNvertices_);
      constexpr int binsPt = 30;
      hDiff_sumPt_.bookLogX(iBooker, makeLogBins<float, binsPt>(binningX_.minPt_, binningX_.maxPt_));
      constexpr int binsLumi = 100;
      hDiff_instLumiScal_.bookLogX(iBooker, makeLogBins<float, binsLumi>(binningX_.minLumi_, binningX_.maxLumi_));
    }
    void calculateAndFillResolution(const std::vector<reco::TransientTrack>& tracks,
                                    size_t nvertices,
                                    const LumiScalersCollection& lumiScalers,
                                    std::mt19937& engine,
                                    AdaptiveVertexFitter& fitter);
  private:
    const BinningX& binningX_;
    const BinningY& binningY_;
    MonitorElement *hDiffX_ = nullptr;
    MonitorElement *hDiffY_ = nullptr;
    MonitorElement *hDiffZ_ = nullptr;
    MonitorElement *hPullX_ = nullptr;
    MonitorElement *hPullY_ = nullptr;
    MonitorElement *hPullZ_ = nullptr;
    DiffPlots hDiff_Ntracks_;
    DiffPlots hDiff_sumPt_;
    DiffPlots hDiff_Nvertices_;
    DiffPlots hDiff_instLumiScal_;
  };
  // Binning
  BinningX binningX_;
  BinningY binningY_;
  // Histograms
  Plots hPV_;
  Plots hOtherV_;
  std::mt19937 engine_;
};
PrimaryVertexResolution::PrimaryVertexResolution(const edm::ParameterSet& iConfig):
  vertexSrc_(consumes<reco::VertexCollection>(iConfig.getUntrackedParameter<edm::InputTag>(""vertexSrc""))),
  beamspotSrc_(consumes<reco::BeamSpot>(iConfig.getUntrackedParameter<edm::InputTag>(""beamspotSrc""))),
  lumiScalersSrc_(consumes<LumiScalersCollection>(iConfig.getUntrackedParameter<edm::InputTag>(""lumiScalersSrc""))),
  rootFolder_(iConfig.getUntrackedParameter<std::string>(""rootFolder"")),
  transientTrackBuilder_(iConfig.getUntrackedParameter<std::string>(""transientTrackBuilder"")),
  binningX_(iConfig),
  binningY_(iConfig),
  hPV_(binningX_, binningY_),
  hOtherV_(binningX_, binningY_)
{}
PrimaryVertexResolution::~PrimaryVertexResolution() {}
void PrimaryVertexResolution::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
  edm::ParameterSetDescription desc;
  desc.addUntracked<edm::InputTag>(""vertexSrc"", edm::InputTag(""trackingDQMgoodOfflinePrimaryVertices""));
  desc.addUntracked<edm::InputTag>(""beamspotSrc"", edm::InputTag(""offlineBeamSpot""));
  desc.addUntracked<edm::InputTag>(""lumiScalersSrc"", edm::InputTag(""scalersRawToDigi""));
  desc.addUntracked<std::string>(""rootFolder"", ""OfflinePV/Resolution"");
  desc.addUntracked<std::string>(""transientTrackBuilder"", ""TransientTrackBuilder"");
  // Y axes
  desc.addUntracked<double>(""maxResol"", 0.02);
  desc.addUntracked<int>(""binsResol"", 100);
  desc.addUntracked<double>(""maxPull"", 5);
  desc.addUntracked<int>(""binsPull"", 100);
  // X axes
  desc.addUntracked<double>(""minNtracks"", -0.5);
  desc.addUntracked<double>(""maxNtracks"", 119.5);
  desc.addUntracked<int>(""binsNtracks"", 60);
  desc.addUntracked<double>(""minNvertices"", -0.5);
  desc.addUntracked<double>(""maxNvertices"", 199.5);
  desc.addUntracked<int>(""binsNvertices"", 100);
  desc.addUntracked<double>(""minPt"", 1);
  desc.addUntracked<double>(""maxPt"", 1e3);
  desc.addUntracked<double>(""minLumi"", 200.);
  desc.addUntracked<double>(""maxLumi"", 20000.);
  descriptions.add(""primaryVertexResolution"", desc);
}
void PrimaryVertexResolution::bookHistograms(DQMStore::IBooker& iBooker, edm::Run const&, edm::EventSetup const&) {
  iBooker.setCurrentFolder(rootFolder_""/PV"");
  hPV_.book(iBooker);
  iBooker.setCurrentFolder(rootFolder_""/OtherV"");
  hOtherV_.book(iBooker);
}
void PrimaryVertexResolution::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup) {
  edm::Handle<reco::VertexCollection> hvertices;
  iEvent.getByToken(vertexSrc_, hvertices);
  const reco::VertexCollection& vertices = *hvertices;
  if(vertices.empty())
    return;
  edm::Handle<reco::BeamSpot> hbeamspot;
  iEvent.getByToken(beamspotSrc_, hbeamspot);
  const reco::BeamSpot& beamspot = *hbeamspot;
  edm::Handle<LumiScalersCollection> hscalers;
  iEvent.getByToken(lumiScalersSrc_, hscalers);
  const LumiScalersCollection& lumiScalers = *hscalers;
  edm::ESHandle<TransientTrackBuilder> ttBuilderHandle;
  iSetup.get<TransientTrackRecord>().get(transientTrackBuilder_, ttBuilderHandle);
  const TransientTrackBuilder& ttBuilder = *ttBuilderHandle;
  // deterministic seed from the event number
  // should not bias the result as the event number is already
  // assigned randomly-enough
  engine_.seed( iEvent.id().event()  (iEvent.id().luminosityBlock()<<10)  (iEvent.id().run()<<20) );
  // The PV
  auto iPV = cbegin(vertices);
  const reco::Vertex& thePV = *iPV;
  const auto nvertices = vertices.size();
  if(thePV.tracksSize() >= 4) {
    auto sortedTracks = sortTracksByPt(thePV, ttBuilder, beamspot);
    hPV_.calculateAndFillResolution(sortedTracks, nvertices, lumiScalers, engine_, fitter_);
  }
  iPV;
  // Other vertices
  for(auto endPV = cend(vertices); iPV != endPV; iPV) {
    if(iPV->tracksSize() >= 4) {
      auto sortedTracks = sortTracksByPt(*iPV, ttBuilder, beamspot);
      hOtherV_.calculateAndFillResolution(sortedTracks, nvertices, lumiScalers, engine_, fitter_);
    }
  }
}
std::vector<reco::TransientTrack> PrimaryVertexResolution::sortTracksByPt(const reco::Vertex& thePV,
                                                                          const TransientTrackBuilder& ttBuilder,
                                                                          const reco::BeamSpot& beamspot) {
  std::vector<const reco::Track *> sortedTracks;
  sortedTracks.reserve(thePV.tracksSize());
  std::transform(thePV.tracks_begin(), thePV.tracks_end(), std::back_inserter(sortedTracks), [](const reco::TrackBaseRef& ref) {
      return &(*ref);
    });
  std::sort(sortedTracks.begin(), sortedTracks.end(), [](const reco::Track *a, const reco::Track *b) {
      return a->pt() > b->pt();
    });
  std::vector<reco::TransientTrack> ttracks;
  ttracks.reserve(sortedTracks.size());
  std::transform(sortedTracks.begin(), sortedTracks.end(), std::back_inserter(ttracks), [&](const reco::Track *track) {
      auto tt =  ttBuilder.build(track);
      tt.setBeamSpot(beamspot);
      return tt;
    });
  return ttracks;
}
void PrimaryVertexResolution::Plots::calculateAndFillResolution(const std::vector<reco::TransientTrack>& tracks,
                                                                size_t nvertices,
                                                                const LumiScalersCollection& lumiScalers,
                                                                std::mt19937& engine,
                                                                AdaptiveVertexFitter& fitter) {
  const size_t end = tracks.size()%2 == 0 ? tracks.size() : tracks.size()-1;
  std::vector<reco::TransientTrack> set1, set2;
  set1.reserve(end/2); set2.reserve(end/2);
  auto dis = std::uniform_int_distribution<>(0, 1); // [0, 1]
  double sumpt1=0, sumpt2=0;
  for(size_t i=0; i<end; i = 2) {
    const size_t set1_i = dis(engine);
    const size_t set2_i = 1-set1_i;
    set1.push_back(tracks[iset1_i]);
    set2.push_back(tracks[iset2_i]);
    sumpt1 = set1.back().track().pt();
    sumpt2 = set2.back().track().pt();
  }
  // For resolution we only fit
  TransientVertex vertex1 = fitter.vertex(set1);
  TransientVertex vertex2 = fitter.vertex(set2);
  Resolution res(vertex1, vertex2);
  hDiffX_->Fill(res.resx());
  hDiffY_->Fill(res.resy());
  hDiffZ_->Fill(res.resz());
  hPullX_->Fill(res.pullx());
  hPullY_->Fill(res.pully());
  hPullZ_->Fill(res.pullz());
  hDiff_Ntracks_.fill(res, set1.size());
  hDiff_sumPt_.fill(res, (sumpt1sumpt2)/2.0); // taking average is probably the best we can do, anyway they should be close to each other
  hDiff_Nvertices_.fill(res, nvertices);
  if(!lumiScalers.empty()) {
    hDiff_instLumiScal_.fill(res, lumiScalers.front().instantLumi());
  }
}
#include ""FWCore/Framework/interface/MakerMacros.h""
DEFINE_FWK_MODULE(PrimaryVertexResolution);
"
-------------------------------------------------------------------------
"Recom
PRs: 20362, 20402"
-------------------------------------------------------------------------
=========================================================================
"from DQM.TrackingMonitorClient.primaryVertexResolutionClient_cfi import *
TrackingOfflineDQMClient = cms.Sequence(trackingQTester*trackingOfflineAnalyser*trackingEffFromHitPattern*voMonitoringClientSequence*primaryVertexResolutionClient)
"
-------------------------------------------------------------------------
"from DQM.TrackingMonitorClient.primaryVertexResolutionClient_cfi import *
TrackingDQMSourceTier0 = primaryVertexResolution
TrackingDQMSourceTier0Common = cms.Sequence(cms.ignore(trackingDQMgoodOfflinePrimaryVertices))
TrackingDQMSourceTier0Common = primaryVertexResolution
TrackingDQMSourceTier0MinBias = cms.Sequence(cms.ignore(trackingDQMgoodOfflinePrimaryVertices))
TrackingDQMSourceTier0MinBias = primaryVertexResolution"
-------------------------------------------------------------------------
"from DQM.TrackingMonitorClient.primaryVertexResolutionClient_cfi import *
TrackingOfflineDQMClient = cms.Sequence(trackingQTester*trackingOfflineAnalyser*trackingEffFromHitPattern*voMonitoringClientSequence*primaryVertexResolutionClient)
"
-------------------------------------------------------------------------
"Recom
PRs: 20362, 20402"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
from DQMServices.Core.DQMEDHarvester import DQMEDHarvester
primaryVertexResolutionClient = DQMEDHarvester(""DQMGenericClient"",
    subDirs = cms.untracked.vstring(""OfflinePV/Resolution/*""),
    efficiency = cms.vstring(),
    resolution = cms.vstring(
        ""res_x_vs_ntracks '#sigma(x) vs ntracks' res_x_vs_ntracks"",
        ""res_y_vs_ntracks '#sigma(y) vs ntracks' res_y_vs_ntracks"",
        ""res_z_vs_ntracks '#sigma(z) vs ntracks' res_z_vs_ntracks"",
        ""pull_x_vs_ntracks 'x pull vs ntracks' pull_x_vs_ntracks"",
        ""pull_y_vs_ntracks 'y pull vs ntracks' pull_y_vs_ntracks"",
        ""pull_z_vs_ntracks 'z pull vs ntracks' pull_z_vs_ntracks"",
        ""res_x_vs_sumpt '#sigma(x) vs sumpt' res_x_vs_sumpt"",
        ""res_y_vs_sumpt '#sigma(y) vs sumpt' res_y_vs_sumpt"",
        ""res_z_vs_sumpt '#sigma(z) vs sumpt' res_z_vs_sumpt"",
        ""pull_x_vs_sumpt 'x pull vs sumpt' pull_x_vs_sumpt"",
        ""pull_y_vs_sumpt 'y pull vs sumpt' pull_y_vs_sumpt"",
        ""pull_z_vs_sumpt 'z pull vs sumpt' pull_z_vs_sumpt"",
        ""res_x_vs_nvertices '#sigma(x) vs nvertices' res_x_vs_nvertices"",
        ""res_y_vs_nvertices '#sigma(y) vs nvertices' res_y_vs_nvertices"",
        ""res_z_vs_nvertices '#sigma(z) vs nvertices' res_z_vs_nvertices"",
        ""pull_x_vs_nvertices 'x pull vs nvertices' pull_x_vs_nvertices"",
        ""pull_y_vs_nvertices 'y pull vs nvertices' pull_y_vs_nvertices"",
        ""pull_z_vs_nvertices 'z pull vs nvertices' pull_z_vs_nvertices"",
        ""res_x_vs_instLumiScal '#sigma(x) vs instLumiScal' res_x_vs_instLumiScal"",
        ""res_y_vs_instLumiScal '#sigma(y) vs instLumiScal' res_y_vs_instLumiScal"",
        ""res_z_vs_instLumiScal '#sigma(z) vs instLumiScal' res_z_vs_instLumiScal"",
        ""pull_x_vs_instLumiScal 'x pull vs instLumiScal' pull_x_vs_instLumiScal"",
        ""pull_y_vs_instLumiScal 'y pull vs instLumiScal' pull_y_vs_instLumiScal"",
        ""pull_z_vs_instLumiScal 'z pull vs instLumiScal' pull_z_vs_instLumiScal"",
    )
)
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
from DQMServices.Core.DQMEDHarvester import DQMEDHarvester
primaryVertexResolutionClient = DQMEDHarvester(""DQMGenericClient"",
    subDirs = cms.untracked.vstring(""OfflinePV/Resolution/*""),
    efficiency = cms.vstring(),
    resolution = cms.vstring(
        ""res_x_vs_ntracks '#sigma(x) vs ntracks' res_x_vs_ntracks"",
        ""res_y_vs_ntracks '#sigma(y) vs ntracks' res_y_vs_ntracks"",
        ""res_z_vs_ntracks '#sigma(z) vs ntracks' res_z_vs_ntracks"",
        ""pull_x_vs_ntracks 'x pull vs ntracks' pull_x_vs_ntracks"",
        ""pull_y_vs_ntracks 'y pull vs ntracks' pull_y_vs_ntracks"",
        ""pull_z_vs_ntracks 'z pull vs ntracks' pull_z_vs_ntracks"",
        ""res_x_vs_sumpt '#sigma(x) vs sumpt' res_x_vs_sumpt"",
        ""res_y_vs_sumpt '#sigma(y) vs sumpt' res_y_vs_sumpt"",
        ""res_z_vs_sumpt '#sigma(z) vs sumpt' res_z_vs_sumpt"",
        ""pull_x_vs_sumpt 'x pull vs sumpt' pull_x_vs_sumpt"",
        ""pull_y_vs_sumpt 'y pull vs sumpt' pull_y_vs_sumpt"",
        ""pull_z_vs_sumpt 'z pull vs sumpt' pull_z_vs_sumpt"",
        ""res_x_vs_nvertices '#sigma(x) vs nvertices' res_x_vs_nvertices"",
        ""res_y_vs_nvertices '#sigma(y) vs nvertices' res_y_vs_nvertices"",
        ""res_z_vs_nvertices '#sigma(z) vs nvertices' res_z_vs_nvertices"",
        ""pull_x_vs_nvertices 'x pull vs nvertices' pull_x_vs_nvertices"",
        ""pull_y_vs_nvertices 'y pull vs nvertices' pull_y_vs_nvertices"",
        ""pull_z_vs_nvertices 'z pull vs nvertices' pull_z_vs_nvertices"",
        ""res_x_vs_instLumiScal '#sigma(x) vs instLumiScal' res_x_vs_instLumiScal"",
        ""res_y_vs_instLumiScal '#sigma(y) vs instLumiScal' res_y_vs_instLumiScal"",
        ""res_z_vs_instLumiScal '#sigma(z) vs instLumiScal' res_z_vs_instLumiScal"",
        ""pull_x_vs_instLumiScal 'x pull vs instLumiScal' pull_x_vs_instLumiScal"",
        ""pull_y_vs_instLumiScal 'y pull vs instLumiScal' pull_y_vs_instLumiScal"",
        ""pull_z_vs_instLumiScal 'z pull vs instLumiScal' pull_z_vs_instLumiScal"",
    )
)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
from DQMServices.Core.DQMEDHarvester import DQMEDHarvester
primaryVertexResolutionClient = DQMEDHarvester(""DQMGenericClient"",
    subDirs = cms.untracked.vstring(""OfflinePV/Resolution/*""),
    efficiency = cms.vstring(),
    resolution = cms.vstring(
        ""res_x_vs_ntracks '#sigma(x) vs ntracks' res_x_vs_ntracks"",
        ""res_y_vs_ntracks '#sigma(y) vs ntracks' res_y_vs_ntracks"",
        ""res_z_vs_ntracks '#sigma(z) vs ntracks' res_z_vs_ntracks"",
        ""pull_x_vs_ntracks 'x pull vs ntracks' pull_x_vs_ntracks"",
        ""pull_y_vs_ntracks 'y pull vs ntracks' pull_y_vs_ntracks"",
        ""pull_z_vs_ntracks 'z pull vs ntracks' pull_z_vs_ntracks"",
        ""res_x_vs_sumpt '#sigma(x) vs sumpt' res_x_vs_sumpt"",
        ""res_y_vs_sumpt '#sigma(y) vs sumpt' res_y_vs_sumpt"",
        ""res_z_vs_sumpt '#sigma(z) vs sumpt' res_z_vs_sumpt"",
        ""pull_x_vs_sumpt 'x pull vs sumpt' pull_x_vs_sumpt"",
        ""pull_y_vs_sumpt 'y pull vs sumpt' pull_y_vs_sumpt"",
        ""pull_z_vs_sumpt 'z pull vs sumpt' pull_z_vs_sumpt"",
        ""res_x_vs_nvertices '#sigma(x) vs nvertices' res_x_vs_nvertices"",
        ""res_y_vs_nvertices '#sigma(y) vs nvertices' res_y_vs_nvertices"",
        ""res_z_vs_nvertices '#sigma(z) vs nvertices' res_z_vs_nvertices"",
        ""pull_x_vs_nvertices 'x pull vs nvertices' pull_x_vs_nvertices"",
        ""pull_y_vs_nvertices 'y pull vs nvertices' pull_y_vs_nvertices"",
        ""pull_z_vs_nvertices 'z pull vs nvertices' pull_z_vs_nvertices"",
        ""res_x_vs_instLumiScal '#sigma(x) vs instLumiScal' res_x_vs_instLumiScal"",
        ""res_y_vs_instLumiScal '#sigma(y) vs instLumiScal' res_y_vs_instLumiScal"",
        ""res_z_vs_instLumiScal '#sigma(z) vs instLumiScal' res_z_vs_instLumiScal"",
        ""pull_x_vs_instLumiScal 'x pull vs instLumiScal' pull_x_vs_instLumiScal"",
        ""pull_y_vs_instLumiScal 'y pull vs instLumiScal' pull_y_vs_instLumiScal"",
        ""pull_z_vs_instLumiScal 'z pull vs instLumiScal' pull_z_vs_instLumiScal"",
    )
)
"
-------------------------------------------------------------------------
"Recom
PRs: 20362, 20402"
-------------------------------------------------------------------------
=========================================================================
"# better clone for now because goodOfflinePrimaryVertices is used also
# within the reco sequence, and without cloning framework will throw
# ""unrunnable schedule"" exception for workflows without --runUnscheduled
# import PV resolution
from DQM.TrackingMonitor.primaryVertexResolution_cfi import *
TrackingDQMSourceTier0 = cms.Sequence(cms.ignore(trackingDQMgoodOfflinePrimaryVertices))
"
-------------------------------------------------------------------------
"# importing PV resolution and adjusting the TrackingDQMSourceTier0 with the primaryVertexResolution module
from DQM.TrackingMonitor.primaryVertexResolution_cfi import *
TrackingDQMSourceTier0Common = cms.Sequence(cms.ignore(trackingDQMgoodOfflinePrimaryVertices))"
-------------------------------------------------------------------------
"# better clone for now because goodOfflinePrimaryVertices is used also
# within the reco sequence, and without cloning framework will throw
# ""unrunnable schedule"" exception for workflows without --runUnscheduled
# import PV resolution
from DQM.TrackingMonitor.primaryVertexResolution_cfi import *
TrackingDQMSourceTier0 = cms.Sequence(cms.ignore(trackingDQMgoodOfflinePrimaryVertices))
"
-------------------------------------------------------------------------
"Recom
PRs: 20362, 20402"
-------------------------------------------------------------------------
=========================================================================
"TrackingDQMSourceTier0 = primaryVertexResolution
TrackingDQMSourceTier0Common = cms.Sequence(cms.ignore(trackingDQMgoodOfflinePrimaryVertices))
"
-------------------------------------------------------------------------
"TrackingDQMSourceTier0Common = cms.Sequence(cms.ignore(trackingDQMgoodOfflinePrimaryVertices))  
TrackingDQMSourceTier0 = primaryVertexResolution"
-------------------------------------------------------------------------
"TrackingDQMSourceTier0 = primaryVertexResolution
TrackingDQMSourceTier0Common = cms.Sequence(cms.ignore(trackingDQMgoodOfflinePrimaryVertices))
"
-------------------------------------------------------------------------
"Recom
PRs: 20362, 20402"
-------------------------------------------------------------------------
=========================================================================
"TrackingDQMSourceTier0Common = primaryVertexResolution
TrackingDQMSourceTier0MinBias = cms.Sequence(cms.ignore(trackingDQMgoodOfflinePrimaryVertices))
"
-------------------------------------------------------------------------
"TrackingDQMSourceTier0Common = primaryVertexResolution
TrackingDQMSourceTier0MinBias = cms.Sequence(cms.ignore(trackingDQMgoodOfflinePrimaryVertices))"
-------------------------------------------------------------------------
"TrackingDQMSourceTier0Common = primaryVertexResolution
TrackingDQMSourceTier0MinBias = cms.Sequence(cms.ignore(trackingDQMgoodOfflinePrimaryVertices))
"
-------------------------------------------------------------------------
"Recom
PRs: 20362, 20402"
-------------------------------------------------------------------------
=========================================================================
"# PV resolution
TrackingDQMSourceTier0MinBias = primaryVertexResolution
"
-------------------------------------------------------------------------
"# PV resolution
TrackingDQMSourceTier0MinBias = TrackingDQMSourceTier0Common"
-------------------------------------------------------------------------
"# PV resolution
TrackingDQMSourceTier0MinBias = primaryVertexResolution
"
-------------------------------------------------------------------------
"Recom
PRs: 20362, 20402"
-------------------------------------------------------------------------
=========================================================================
"objtypeLatex=""#mu""
objtypeLatex=""#gamma""
objtypeLatex=""e""
objtypeLatex=""MET""
objtypeLatex=""#tau""
objtypeLatex=objtype
"
-------------------------------------------------------------------------
"def efficiency_string(objtype,plot_type,triggerpath):
     # --- IMPORTANT: Add here a elif if you are introduce a new collection
     #                (see EVTColContainer::getTypeString) 
     if objtype == ""Mu"" :
     elif objtype == ""Photon"": 
         objtypeLatex = ""#gamma""
     elif objtype == ""Ele"": 
         objtypeLatex = ""e""
     elif objtype == ""MET"" :
         objtypeLatex = ""MET""
     elif objtype == ""PFTau"": 
         objtypeLatex = ""#tau""
     else:
         objtypeLatex = objtype
 
     numer_description = ""# gen %s passed the %s"" % (objtypeLatex,triggerpath)
     denom_description = ""# gen %s "" % (objtypeLatex)"
-------------------------------------------------------------------------
"objtypeLatex=""#mu""
objtypeLatex=""#gamma""
objtypeLatex=""e""
objtypeLatex=""MET""
objtypeLatex=""#tau""
objtypeLatex=objtype
"
-------------------------------------------------------------------------
"Recom
PRs: 20344, 20345"
-------------------------------------------------------------------------
=========================================================================
"all_titles,input_type,triggerpath,input_type)
"
-------------------------------------------------------------------------
"all_titles, triggerpath, analysis[1], triggerpath, analysis[1]"
-------------------------------------------------------------------------
"all_titles,input_type,triggerpath,input_type)
"
-------------------------------------------------------------------------
"Recom
PRs: 20344, 20345"
-------------------------------------------------------------------------
=========================================================================
"s = _config.__getattribute__(an)
vstr = s.__getattribute__(""hltPathsToCheck"")
map(lambda x: triggers.add(x.replace(""_v"","""")),vstr)
      for trig in triggers:
          efficiency_strings.append(efficiency_string(obj,type,trig))
"
-------------------------------------------------------------------------
"analysis = _config.analysis
triggers = set([])
for an in analysis:
    vstr = getattr(an, ""hltPathsToCheck"")
    list(map(lambda x: triggers.add(x.replace(""_v"", """")), vstr))
    for trig in triggers:
        efficiency_strings.append(efficiency_string(obj, type, trig))"
-------------------------------------------------------------------------
"s = _config.__getattribute__(an)
vstr = s.__getattribute__(""hltPathsToCheck"")
map(lambda x: triggers.add(x.replace(""_v"","""")),vstr)
      for trig in triggers:
          efficiency_strings.append(efficiency_string(obj,type,trig))
"
-------------------------------------------------------------------------
"Recom
PRs: 20344, 20345"
-------------------------------------------------------------------------
=========================================================================
"hltSMPPostSingleEle
 hltSMPPostSingleMu
hltSMPPostSinglePhoton
"
-------------------------------------------------------------------------
"```python
analysis = cms.vstring('SinglePhoton', 'SingleEle')
```"
-------------------------------------------------------------------------
"hltSMPPostSingleEle
 hltSMPPostSingleMu
hltSMPPostSinglePhoton
"
-------------------------------------------------------------------------
"Recom
PRs: 20344, 20345"
-------------------------------------------------------------------------
=========================================================================
"""   abs(eta) < 1.479 && sigmaIetaIeta < 0.010  || ""\
""   abs(eta) > 1.479 && sigmaIetaIeta < 0.027 ) && ""\
"" ecalRecHitSumEtConeDR03 < (5.00.012*et) && hcalTowerSumEtConeDR03 < (5.00.0005*et )  && trkSumPtSolidConeDR03 < (5.0  0.0002*et)"" ),
"
-------------------------------------------------------------------------
"""   abs(eta) < 1.479 && sigmaIetaIeta < 0.010 || ""\
""   abs(eta) > 1.479 && sigmaIetaIeta < 0.027 ) && ""\
"" ecalRecHitSumEtConeDR03 < (5.0 / 12 * et) && hcalTowerSumEtConeDR03 < (5.0 / 20000 * et )  && trkSumPtSolidConeDR03 < (5.0 / 5000 * et)"" ),"
-------------------------------------------------------------------------
"""   abs(eta) < 1.479 && sigmaIetaIeta < 0.010  || ""\
""   abs(eta) > 1.479 && sigmaIetaIeta < 0.027 ) && ""\
"" ecalRecHitSumEtConeDR03 < (5.00.012*et) && hcalTowerSumEtConeDR03 < (5.00.0005*et )  && trkSumPtSolidConeDR03 < (5.0  0.0002*et)"" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 20344, 20345"
-------------------------------------------------------------------------
=========================================================================
"hltPathsToCheck = cms.vstring(
  ""HLT_Photon33_v"",
  ""HLT_Photon50_v"",
  ""HLT_Photon75_v"",
  ""HLT_Photon90_v"",
  ""HLT_Photon120_v"",
  ""HLT_Photon165_HE10_v"",
  ""HLT_Photon33_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon50_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon75_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon90_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon120_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon165_R9Id90_HE10_IsoM_v"",
  ),
recPhotonLabel  = cms.string(""photons""),
# -- Analysis specific cuts
minCandidates = cms.uint32(1), 
),
hltPathsToCheck = cms.vstring(
  ""HLT_Ele35_WPTight_Gsf_v"",
  ""HLT_Ele38_WPTight_Gsf_v"",
  ""HLT_Ele40_WPTight_Gsf_v"",
  ""HLT_Ele35_WPTight_Gsf_L1EGMT_v"",
  ),
recElecLabel  = cms.string(""gedGsfElectrons""),
# -- Analysis specific cuts
minCandidates = cms.uint32(1), 
),
"
-------------------------------------------------------------------------
"hltPathsToCheck = cms.vstring(
    ""HLT_Photon33_v"",
    ""HLT_Photon50_v"",
    ""HLT_Photon75_v"",
    ""HLT_Photon90_v"",
    ""HLT_Photon120_v"",
    ""HLT_Photon165_HE10_v"",
    ""HLT_Photon33_R9Id90_HE10_IsoM_v"",
    ""HLT_Photon50_R9Id90_HE10_IsoM_v"",
    ""HLT_Photon75_R9Id90_HE10_IsoM_v"",
    ""HLT_Photon90_R9Id90_HE10_IsoM_v"",
    ""HLT_Photon120_R9Id90_HE10_IsoM_v"",
    ""HLT_Photon165_R9Id90_HE10_IsoM_v"",
),

recPhotonLabel = cms.string(""photons""),

# -- Analysis specific cuts
minCandidates = cms.uint32(1), 

analysis = cms.vstring(
    ""SinglePhoton""
),

hltPathsToCheck = cms.vstring(
    ""HLT_Ele35_WPTight_Gsf_v"",
    ""HLT_Ele38_WPTight_Gsf_v"",
    ""HLT_Ele40_WPTight_Gsf_v"",
    ""HLT_Ele35_WPTight_Gsf_L1EGMT_v"",
),

recElecLabel = cms.string(""gedGsfElectrons""),

# -- Analysis specific cuts
minCandidates = cms.uint32(1), 

analysis = cms.vstring(
    ""SingleEle""
),"
-------------------------------------------------------------------------
"hltPathsToCheck = cms.vstring(
  ""HLT_Photon33_v"",
  ""HLT_Photon50_v"",
  ""HLT_Photon75_v"",
  ""HLT_Photon90_v"",
  ""HLT_Photon120_v"",
  ""HLT_Photon165_HE10_v"",
  ""HLT_Photon33_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon50_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon75_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon90_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon120_R9Id90_HE10_IsoM_v"",
  ""HLT_Photon165_R9Id90_HE10_IsoM_v"",
  ),
recPhotonLabel  = cms.string(""photons""),
# -- Analysis specific cuts
minCandidates = cms.uint32(1), 
),
hltPathsToCheck = cms.vstring(
  ""HLT_Ele35_WPTight_Gsf_v"",
  ""HLT_Ele38_WPTight_Gsf_v"",
  ""HLT_Ele40_WPTight_Gsf_v"",
  ""HLT_Ele35_WPTight_Gsf_L1EGMT_v"",
  ),
recElecLabel  = cms.string(""gedGsfElectrons""),
# -- Analysis specific cuts
minCandidates = cms.uint32(1), 
),
"
-------------------------------------------------------------------------
"Recom
PRs: 20344, 20345"
-------------------------------------------------------------------------
=========================================================================
"SimDoubleMuFilter = SimMuFilter.clone()
SimDoubleMuFilter.nMuSel = 2
SimMuFiltSeq = cms.Sequence(SimDoubleMuFilter)
"
-------------------------------------------------------------------------
"SimSingleMuFilter = SimMuFilter.clone()
SimSingleMuFilter.nMuSel = 1
SimMuFiltSeq = cms.Sequence(SimSingleMuFilter)"
-------------------------------------------------------------------------
"SimDoubleMuFilter = SimMuFilter.clone()
SimDoubleMuFilter.nMuSel = 2
SimMuFiltSeq = cms.Sequence(SimDoubleMuFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 20209, 20279"
-------------------------------------------------------------------------
=========================================================================
"SimSingleMuFilter = SimMuFilter.clone()
SimSingleMuFilter.nMuSel = 1
SimMuFiltSeq = cms.Sequence(SimSingleMuFilter)
"
-------------------------------------------------------------------------
"SimSingleMuFilter = SimMuFilter.clone()
SimSingleMuFilter.nMuSel = 1
SimMuFiltSeq = cms.Sequence(SimSingleMuFilter)"
-------------------------------------------------------------------------
"SimSingleMuFilter = SimMuFilter.clone()
SimSingleMuFilter.nMuSel = 1
SimMuFiltSeq = cms.Sequence(SimSingleMuFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 20209, 20279"
-------------------------------------------------------------------------
=========================================================================
"def replaceHcalTp(tag):
    replaceInputTag(tag, ""simHcalTriggerPrimitiveDigis"", ""DMHcalTriggerPrimitiveDigis"")
"
-------------------------------------------------------------------------
"```python
def replaceHcalTp(tag):
    replaceInputTag(tag, ""simHcalTriggerPrimitiveDigis"", ""DMHcalTriggerPrimitiveDigis"")
```"
-------------------------------------------------------------------------
"def replaceHcalTp(tag):
    replaceInputTag(tag, ""simHcalTriggerPrimitiveDigis"", ""DMHcalTriggerPrimitiveDigis"")
"
-------------------------------------------------------------------------
"Recom
PRs: 20266, 20267"
-------------------------------------------------------------------------
=========================================================================
"if analyzer.type_() == ""HcalDigisValidation"":
    replaceHcalTp(analyzer.dataTPs)
"
-------------------------------------------------------------------------
"def customiseForPreMixingInput(process):
    if analyzer.type_() == ""SiStripRecHitsValid"":
        replacePixelDigiSimLink(analyzer.pixelSimLinkSrc)
        replaceStripDigiSimLink(analyzer.stripSimLinkSrc)
    elif analyzer.type_() == ""HcalDigisValidation"":
        replaceHcalTp(analyzer.dataTPs)"
-------------------------------------------------------------------------
"if analyzer.type_() == ""HcalDigisValidation"":
    replaceHcalTp(analyzer.dataTPs)
"
-------------------------------------------------------------------------
"Recom
PRs: 20266, 20267"
-------------------------------------------------------------------------
=========================================================================
"dropZSmarkedPassed = cms.bool(False),
"
-------------------------------------------------------------------------
"dropZSmarkedPassed = cms.bool(False),"
-------------------------------------------------------------------------
"dropZSmarkedPassed = cms.bool(False),
"
-------------------------------------------------------------------------
"Recom
PRs: 20115, 20117"
-------------------------------------------------------------------------
=========================================================================
"dqmEnvSiStripQuality = cms.EDAnalyzer(""DQMEventInfo"",
                                      subSystemFolder = cms.untracked.string('AlCaReco'),  
                                      )
ALCAHARVESTSiStripQuality = cms.Sequence(EDMtoMEConvertSiStrip  alcaSiStripQualityHarvester  dqmEnvSiStripQuality)
"
-------------------------------------------------------------------------
"dqmEnvSiStripQuality = cms.EDAnalyzer(""DQMEventInfo"",
                                      subSystemFolder = cms.untracked.string('AlCaReco'),  
                                      )
alcaSiStripQualityHarvester = cms.EDProducer(""AlcaSiStripQualityHarvester"")
ALCAHARVESTSiStripQuality = cms.Sequence(EDMtoMEConvertSiStrip + alcaSiStripQualityHarvester + dqmEnvSiStripQuality)"
-------------------------------------------------------------------------
"dqmEnvSiStripQuality = cms.EDAnalyzer(""DQMEventInfo"",
                                      subSystemFolder = cms.untracked.string('AlCaReco'),  
                                      )
ALCAHARVESTSiStripQuality = cms.Sequence(EDMtoMEConvertSiStrip  alcaSiStripQualityHarvester  dqmEnvSiStripQuality)
"
-------------------------------------------------------------------------
"Recom
PRs: 20097, 20098"
-------------------------------------------------------------------------
=========================================================================
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'),cms.InputTag('mixData:HFQIE10DigiCollection'))
"
-------------------------------------------------------------------------
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData'),cms.InputTag('mixData'))"
-------------------------------------------------------------------------
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'),cms.InputTag('mixData:HFQIE10DigiCollection'))
"
-------------------------------------------------------------------------
"Recom
PRs: 20029, 20040"
-------------------------------------------------------------------------
=========================================================================
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'),cms.InputTag('mixData:HFQIE10DigiCollection'))
"
-------------------------------------------------------------------------
"DMHcalTriggerPrimitiveDigis.inputLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'), cms.InputTag('mixData:HFQIE10DigiCollection'))"
-------------------------------------------------------------------------
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'),cms.InputTag('mixData:HFQIE10DigiCollection'))
"
-------------------------------------------------------------------------
"Recom
PRs: 20029, 20040"
-------------------------------------------------------------------------
=========================================================================
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'),cms.InputTag('mixData:HFQIE10DigiCollection'))
"
-------------------------------------------------------------------------
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData','HBHEQIE11DigiCollection'),cms.InputTag('mixData','HFQIE10DigiCollection'))"
-------------------------------------------------------------------------
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'),cms.InputTag('mixData:HFQIE10DigiCollection'))
"
-------------------------------------------------------------------------
"Recom
PRs: 20029, 20040"
-------------------------------------------------------------------------
=========================================================================
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'),cms.InputTag('mixData:HFQIE10DigiCollection'))
"
-------------------------------------------------------------------------
"DMHcalTriggerPrimitiveDigis.inputLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'),cms.InputTag('mixData:HFQIE10DigiCollection'))"
-------------------------------------------------------------------------
"DMHcalTriggerPrimitiveDigis.inputUpgradeLabel = cms.VInputTag(cms.InputTag('mixData:HBHEQIE11DigiCollection'),cms.InputTag('mixData:HFQIE10DigiCollection'))
"
-------------------------------------------------------------------------
"Recom
PRs: 20029, 20040"
-------------------------------------------------------------------------
=========================================================================
"miniAOD_customizeOutput(output)
"
-------------------------------------------------------------------------
"miniAOD_customizeOutput(output, process)"
-------------------------------------------------------------------------
"miniAOD_customizeOutput(output)
"
-------------------------------------------------------------------------
"Recom
PRs: 19680, 20037"
-------------------------------------------------------------------------
=========================================================================
"cms.untracked.PSet(branch = cms.untracked.string(""patPackedCandidates_packedPFCandidates__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""recoGenParticles_prunedGenParticles__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""patTriggerObjectStandAlones_slimmedPatTrigger__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""patPackedGenParticles_packedGenParticles__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""patJets_slimmedJets__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""recoVertexs_offlineSlimmedPrimaryVertices__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""recoCaloClusters_reducedEgamma_reducedESClusters_*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""EcalRecHitsSorted_reducedEgamma_reducedEBRecHits_*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""EcalRecHitsSorted_reducedEgamma_reducedEERecHits_*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""recoGenJets_slimmedGenJets__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""patJets_slimmedJetsPuppi__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""EcalRecHitsSorted_reducedEgamma_reducedESRecHits_*""),splitLevel=cms.untracked.int32(99)),
"
-------------------------------------------------------------------------
"MicroEventContentMC.MiniAODOverrideBranchesSplitLevel += [
    cms.untracked.PSet(branch = cms.untracked.string(""patPackedCandidates_packedPFCandidates__*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""recoGenParticles_prunedGenParticles__*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""patTriggerObjectStandAlones_slimmedPatTrigger__*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""patPackedGenParticles_packedGenParticles__*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""patJets_slimmedJets__*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""recoVertexs_offlineSlimmedPrimaryVertices__*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""recoCaloClusters_reducedEgamma_reducedESClusters_*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""EcalRecHitsSorted_reducedEgamma_reducedEBRecHits_*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""EcalRecHitsSorted_reducedEgamma_reducedEERecHits_*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""recoGenJets_slimmedGenJets__*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""patJets_slimmedJetsPuppi__*""),splitLevel=cms.untracked.int32(99)),
    cms.untracked.PSet(branch = cms.untracked.string(""EcalRecHitsSorted_reducedEgamma_reducedESRecHits_*""),splitLevel=cms.untracked.int32(99)),
]"
-------------------------------------------------------------------------
"cms.untracked.PSet(branch = cms.untracked.string(""patPackedCandidates_packedPFCandidates__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""recoGenParticles_prunedGenParticles__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""patTriggerObjectStandAlones_slimmedPatTrigger__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""patPackedGenParticles_packedGenParticles__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""patJets_slimmedJets__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""recoVertexs_offlineSlimmedPrimaryVertices__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""recoCaloClusters_reducedEgamma_reducedESClusters_*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""EcalRecHitsSorted_reducedEgamma_reducedEBRecHits_*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""EcalRecHitsSorted_reducedEgamma_reducedEERecHits_*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""recoGenJets_slimmedGenJets__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""patJets_slimmedJetsPuppi__*""),splitLevel=cms.untracked.int32(99)),
cms.untracked.PSet(branch = cms.untracked.string(""EcalRecHitsSorted_reducedEgamma_reducedESRecHits_*""),splitLevel=cms.untracked.int32(99)),
"
-------------------------------------------------------------------------
"Recom
PRs: 19680, 20037"
-------------------------------------------------------------------------
=========================================================================
"out.splitLevel = cms.untracked.int32(0)
"
-------------------------------------------------------------------------
out.overrideBranchesSplitLevel = MiniAODOverrideBranchesSplitLevel
-------------------------------------------------------------------------
"out.splitLevel = cms.untracked.int32(0)
"
-------------------------------------------------------------------------
"Recom
PRs: 19680, 20037"
-------------------------------------------------------------------------
=========================================================================
"'keep LumiScalerss_scalersRawToDigi_*_*',
'keep DcsStatuss_scalersRawToDigi_*_*',
"
-------------------------------------------------------------------------
"'keep LumiScalers_*_*',
'keep DcsStatus_*_*',"
-------------------------------------------------------------------------
"'keep LumiScalerss_scalersRawToDigi_*_*',
'keep DcsStatuss_scalersRawToDigi_*_*',
"
-------------------------------------------------------------------------
"Recom
PRs: 19858, 19859"
-------------------------------------------------------------------------
=========================================================================
"'keep LumiScalerss_scalersRawToDigi_*_*',
'keep DcsStatuss_scalersRawToDigi_*_*',
"
-------------------------------------------------------------------------
"'keep LumiScalers_scalersRawToDigi_*_*',
'keep DcsStatus_scalersRawToDigi_*_*',"
-------------------------------------------------------------------------
"'keep LumiScalerss_scalersRawToDigi_*_*',
'keep DcsStatuss_scalersRawToDigi_*_*',
"
-------------------------------------------------------------------------
"Recom
PRs: 19858, 19859"
-------------------------------------------------------------------------
=========================================================================
"RAWMINIAODEventContent.outputCommands.extend(L1TriggerRAW.outputCommands)
RAWMINIAODEventContent.outputCommands.extend(HLTriggerRAW.outputCommands)
RAWMINIAODSIMEventContent.outputCommands.extend(L1TriggerRAW.outputCommands)
RAWMINIAODSIMEventContent.outputCommands.extend(HLTriggerRAW.outputCommands)
"
-------------------------------------------------------------------------
"RAWMINIAODEventContent.outputCommands.extend(L1TriggerRAW.outputCommands)
RAWMINIAODEventContent.outputCommands.extend(HLTriggerRAW.outputCommands)
RAWMINIAODSIMEventContent.outputCommands.extend(L1TriggerRAW.outputCommands)
RAWMINIAODSIMEventContent.outputCommands.extend(HLTriggerRAW.outputCommands)"
-------------------------------------------------------------------------
"RAWMINIAODEventContent.outputCommands.extend(L1TriggerRAW.outputCommands)
RAWMINIAODEventContent.outputCommands.extend(HLTriggerRAW.outputCommands)
RAWMINIAODSIMEventContent.outputCommands.extend(L1TriggerRAW.outputCommands)
RAWMINIAODSIMEventContent.outputCommands.extend(HLTriggerRAW.outputCommands)
RAWMINIAODEventContent.outputCommands.extend(cms.untracked.vstring(
    'keep FEDRawDataCollection_rawDataCollector_*_*',
    'keep FEDRawDataCollection_source_*_*'
))
RAWMINIAODSIMEventContent.outputCommands.extend(cms.untracked.vstring(
    'keep FEDRawDataCollection_rawDataCollector_*_*',
    'keep FEDRawDataCollection_source_*_*'
))
"
-------------------------------------------------------------------------
"Recom
PRs: 19846, 19847"
-------------------------------------------------------------------------
=========================================================================
"##DeepCSV path for JIRA CMSHLT-1496
   cms.PSet(
       pathNAME = cms.string(""HLT_PFHT380_SixPFJet32_DoublePFBTagDeepCSV_2p2""),
       moduleNAME = cms.string(""hltBTagPFDeepCSVp075Double""),
       label  = cms.string(""PF b-jet (double DeepCSV)""),
       xTITLE = cms.string(""PF b-jet""),
       etaBINNING    = cms.vdouble(-2.5,-2.0,-1.5,-1.0,-0.5,0.,0.5,1.0,1.5,2.0,2.5),
       ptBINNING     = cms.vdouble(0.,20.,30.,40.,50.,60.,70.,80.,90.,100.,150.,200.,250.,300.,400.,500.),
       phiBINNING    = cms.vdouble(-3.2,-3.,-2.8,-2.6,-2.4,-2.2,-2.0,-1.8,-1.6,-1.4,-1.2,-1.0,-0.8,-0.6,-0.4,-0.2,0.,0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0,2.2,2.4,2.6,2.8,3.0,3.2),
       massBINNING   = cms.vdouble(),
       dxyBINNING    = cms.vdouble(),
       dzBINNING    = cms.vdouble(),
       dimassBINNING = cms.vdouble(0.,50.,60.,70.,80.,90.,100.,110.,120.,130.,140.,150.,200.,250.,300.,400.,500.),
       displayInPrimary_eta      = cms.bool(True),
       displayInPrimary_phi      = cms.bool(True),
       displayInPrimary_pt       = cms.bool(True),
       displayInPrimary_mass     = cms.bool(False),
       displayInPrimary_energy   = cms.bool(False),
       displayInPrimary_csv      = cms.bool(True),
       displayInPrimary_etaVSphi = cms.bool(True),
       displayInPrimary_pt_HEP17 = cms.bool(True),
       displayInPrimary_pt_HEM17 = cms.bool(True),
       displayInPrimary_MR       = cms.bool(False),
       displayInPrimary_RSQ      = cms.bool(False),
       displayInPrimary_dxy      = cms.bool(False),
       displayInPrimary_dz       = cms.bool(False),
       displayInPrimary_dimass   = cms.bool(False),                      
       doPlot2D    = cms.untracked.bool(True),
       doPlotETA   = cms.untracked.bool(True),
       doPlotMASS  = cms.untracked.bool(False),
       doPlotENERGY = cms.untracked.bool(False),
       doPlotHEP17 = cms.untracked.bool(True),
       doPlotCSV   = cms.untracked.bool(True),
       doCALO      = cms.untracked.bool(False),
       doPF        = cms.untracked.bool(True),
       doPlotRazor = cms.untracked.bool(False),
       doPlotDXY    = cms.untracked.bool(False),
       doPlotDZ     = cms.untracked.bool(False),
       doPlotDiMass = cms.untracked.bool(True),
   ),
"
-------------------------------------------------------------------------
"btvObjects = cms.VPSet(
            cms.PSet(
                pathNAME = cms.string(""HLT_PFHT380_SixPFJet32_DoublePFBTagDeepCSV_2p2""),
                moduleNAME = cms.string(""hltBTagPFDeepCSVp075Double""),
                label = cms.string(""PF b-jet (double DeepCSV)""),
                xTITLE = cms.string(""PF b-jet""),
                etaBINNING = cms.vdouble(-2.5,-2.0,-1.5,-1.0,-0.5,0.,0.5,1.0,1.5,2.0,2.5),
                ptBINNING = cms.vdouble(0.,20.,30.,40.,50.,60.,70.,80.,90.,100.,150.,200.,250.,300.,400.,500.),
                phiBINNING = cms.vdouble(-3.2,-3.,-2.8,-2.6,-2.4,-2.2,-2.0,-1.8,-1.6,-1.4,-1.2,-1.0,-0.8,-0.6,-0.4,-0.2,0.,0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0,2.2,2.4,2.6,2.8,3.0,3.2),
                massBINNING = cms.vdouble(),
                dxyBINNING = cms.vdouble(),
                dzBINNING = cms.vdouble(),
                dimassBINNING = cms.vdouble(0.,50.,60.,70.,80.,90.,100.,110.,120.,130.,140.,150.,200.,250.,300.,400.,500.),
                displayInPrimary_eta = cms.bool(True),
                displayInPrimary_phi = cms.bool(True),
                displayInPrimary_pt = cms.bool(True),
                displayInPrimary_mass = cms.bool(False),
                displayInPrimary_energy = cms.bool(False),
                displayInPrimary_csv = cms.bool(True),
                displayInPrimary_etaVSphi = cms.bool(True),
                displayInPrimary_pt_HEP17 = cms.bool(True),
                displayInPrimary_pt_HEM17 = cms.bool(True),
                displayInPrimary_MR = cms.bool(False),
                displayInPrimary_RSQ = cms.bool(False),
                displayInPrimary_dxy = cms.bool(False),
                displayInPrimary_dz = cms.bool(False),
                displayInPrimary_dimass = cms.bool(False),
                doPlot2D = cms.untracked.bool(True),
                doPlotETA = cms.untracked.bool(True),
                doPlotMASS = cms.untracked.bool(False),
                doPlotENERGY = cms.untracked.bool(False),
                doPlotHEP17 = cms.untracked.bool(True),
                doPlotCSV = cms.untracked.bool(True),
                doCALO = cms.untracked.bool(False),
                doPF = cms.untracked.bool(True),
                doPlotRazor = cms.untracked.bool(False),
                doPlotDXY = cms.untracked.bool(False),
                doPlotDZ = cms.untracked.bool(False),
                doPlotDiMass = cms.untracked.bool(True),
            ),
        ),"
-------------------------------------------------------------------------
"##DeepCSV path for JIRA CMSHLT-1496
   cms.PSet(
       pathNAME = cms.string(""HLT_PFHT380_SixPFJet32_DoublePFBTagDeepCSV_2p2""),
       moduleNAME = cms.string(""hltBTagPFDeepCSVp075Double""),
       label  = cms.string(""PF b-jet (double DeepCSV)""),
       xTITLE = cms.string(""PF b-jet""),
       etaBINNING    = cms.vdouble(-2.5,-2.0,-1.5,-1.0,-0.5,0.,0.5,1.0,1.5,2.0,2.5),
       ptBINNING     = cms.vdouble(0.,20.,30.,40.,50.,60.,70.,80.,90.,100.,150.,200.,250.,300.,400.,500.),
       phiBINNING    = cms.vdouble(-3.2,-3.,-2.8,-2.6,-2.4,-2.2,-2.0,-1.8,-1.6,-1.4,-1.2,-1.0,-0.8,-0.6,-0.4,-0.2,0.,0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0,2.2,2.4,2.6,2.8,3.0,3.2),
       massBINNING   = cms.vdouble(),
       dxyBINNING    = cms.vdouble(),
       dzBINNING    = cms.vdouble(),
       dimassBINNING = cms.vdouble(0.,50.,60.,70.,80.,90.,100.,110.,120.,130.,140.,150.,200.,250.,300.,400.,500.),
       displayInPrimary_eta      = cms.bool(True),
       displayInPrimary_phi      = cms.bool(True),
       displayInPrimary_pt       = cms.bool(True),
       displayInPrimary_mass     = cms.bool(False),
       displayInPrimary_energy   = cms.bool(False),
       displayInPrimary_csv      = cms.bool(True),
       displayInPrimary_etaVSphi = cms.bool(True),
       displayInPrimary_pt_HEP17 = cms.bool(True),
       displayInPrimary_pt_HEM17 = cms.bool(True),
       displayInPrimary_MR       = cms.bool(False),
       displayInPrimary_RSQ      = cms.bool(False),
       displayInPrimary_dxy      = cms.bool(False),
       displayInPrimary_dz       = cms.bool(False),
       displayInPrimary_dimass   = cms.bool(False),                      
       doPlot2D    = cms.untracked.bool(True),
       doPlotETA   = cms.untracked.bool(True),
       doPlotMASS  = cms.untracked.bool(False),
       doPlotENERGY = cms.untracked.bool(False),
       doPlotHEP17 = cms.untracked.bool(True),
       doPlotCSV   = cms.untracked.bool(True),
       doCALO      = cms.untracked.bool(False),
       doPF        = cms.untracked.bool(True),
       doPlotRazor = cms.untracked.bool(False),
       doPlotDXY    = cms.untracked.bool(False),
       doPlotDZ     = cms.untracked.bool(False),
       doPlotDiMass = cms.untracked.bool(True),
   ),
"
-------------------------------------------------------------------------
"Recom
PRs: 19834, 19836"
-------------------------------------------------------------------------
=========================================================================
"def getRepMap(self, alignment=None):
    result = super(GenericValidationData_CTSR, self).getRepMap(alignment)
        ""use_d0cut"": str(self.use_d0cut),
"
-------------------------------------------------------------------------
"def getRepMap(self, alignment=None):
    result = super(GenericValidationData_CTSR, self).getRepMap(alignment)
    result.update({
        ""use_d0cut"": str(self.use_d0cut),
    })"
-------------------------------------------------------------------------
"def getRepMap(self, alignment=None):
    result = super(GenericValidationData_CTSR, self).getRepMap(alignment)
        ""use_d0cut"": str(self.use_d0cut),
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"def use_d0cut(self):
    return ""Cosmics"" not in self.general[""trackcollection""]  #use it for collisions only
@property
"
-------------------------------------------------------------------------
"def use_d0cut(self):
    return ""Cosmics"" not in self.general[""trackcollection""]  # use it for collisions only

@property
def TrackSelectionRefitting(self):
    return configTemplates.CommonTrackSelectionRefitting"
-------------------------------------------------------------------------
"def use_d0cut(self):
    return ""Cosmics"" not in self.general[""trackcollection""]  #use it for collisions only
@property
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"repMap = super(OfflineValidation, self).getRepMap(alignment)
"
-------------------------------------------------------------------------
"repMap = super(OfflineValidation, self).getRepMap(alignment = alignment)"
-------------------------------------------------------------------------
"repMap = super(OfflineValidation, self).getRepMap(alignment)
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"from genericValidation import GenericValidationData_CTSR, ValidationWithPlots, pythonboolstring
class PrimaryVertexValidation(GenericValidationData_CTSR, ValidationWithPlots):
"
-------------------------------------------------------------------------
"from genericValidation import GenericValidationData_CTSR, ValidationWithPlots, pythonboolstring
class PrimaryVertexValidation(GenericValidationData_CTSR, ValidationWithPlots):"
-------------------------------------------------------------------------
"from genericValidation import GenericValidationData_CTSR, ValidationWithPlots, pythonboolstring
class PrimaryVertexValidation(GenericValidationData_CTSR, ValidationWithPlots):
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"def DefinePath(self):
    return configTemplates.PVValidationPath
def ValidationSequence(self):
    #never enters anywhere, since we use the custom DefinePath which includes the goodVertexSkim
    return """"
def use_d0cut(self):
    return False
@property
def ProcessName(self):
    return ""PrimaryVertexValidation""
"
-------------------------------------------------------------------------
"class PrimaryVertexValidation(GenericValidationData, ValidationWithPlots):

    @property
    def ProcessName(self):
        return ""PrimaryVertexValidation""

    @property
    def createScript(self, path):
        return super(PrimaryVertexValidation, self).createScript(path, template = configTemplates.PVValidationScriptTemplate)"
-------------------------------------------------------------------------
"def DefinePath(self):
    return configTemplates.PVValidationPath
def ValidationSequence(self):
    #never enters anywhere, since we use the custom DefinePath which includes the goodVertexSkim
    return """"
def use_d0cut(self):
    return False
@property
def ProcessName(self):
    return ""PrimaryVertexValidation""
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"process.HighPurityTrackSelector.trackQualities = cms.vstring()
process.HighPurityTrackSelector.pMin     = cms.double(0.)
process.AlignmentTrackSelector.pMin      = cms.double(0.)
process.AlignmentTrackSelector.ptMin     = cms.double(0.)
process.AlignmentTrackSelector.nHitMin2D = cms.uint32(0)
process.AlignmentTrackSelector.nHitMin   = cms.double(0.)
process.AlignmentTrackSelector.d0Min     = cms.double(-999999.0)
process.AlignmentTrackSelector.d0Max     = cms.double(999999.0)
process.AlignmentTrackSelector.dzMin     = cms.double(-999999.0)
process.AlignmentTrackSelector.dzMax     = cms.double(999999.0)
"
-------------------------------------------------------------------------
"process.HighPurityTrackSelector.trackQualities = cms.vstring()
process.HighPurityTrackSelector.pMin     = cms.double(0.)
process.AlignmentTrackSelector.pMin      = cms.double(0.)
process.AlignmentTrackSelector.ptMin     = cms.double(0.)
process.AlignmentTrackSelector.nHitMin2D = cms.uint32(0)
process.AlignmentTrackSelector.nHitMin   = cms.double(0.)
process.AlignmentTrackSelector.d0Min     = cms.double(-99999.0)  # update margin value to -99999.0
process.AlignmentTrackSelector.d0Max     = cms.double(99999.0)   # update margin value to 99999.0
process.AlignmentTrackSelector.dzMin     = cms.double(-99999.0)  # update margin value to -99999.0
process.AlignmentTrackSelector.dzMax     = cms.double(99999.0)   # update margin value to 99999.0"
-------------------------------------------------------------------------
"process.HighPurityTrackSelector.trackQualities = cms.vstring()
process.HighPurityTrackSelector.pMin     = cms.double(0.)
process.AlignmentTrackSelector.pMin      = cms.double(0.)
process.AlignmentTrackSelector.ptMin     = cms.double(0.)
process.AlignmentTrackSelector.nHitMin2D = cms.uint32(0)
process.AlignmentTrackSelector.nHitMin   = cms.double(0.)
process.AlignmentTrackSelector.d0Min     = cms.double(-999999.0)
process.AlignmentTrackSelector.d0Max     = cms.double(999999.0)
process.AlignmentTrackSelector.dzMin     = cms.double(-999999.0)
process.AlignmentTrackSelector.dzMax     = cms.double(999999.0)
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"TrackCollectionTag = cms.InputTag(""FinalTrackRefitter""),
VertexCollectionTag = cms.InputTag("".oO[VertexCollection]Oo.""),
"
-------------------------------------------------------------------------
"TrackCollectionTag = cms.InputTag(""generalTracks""),
VertexCollectionTag = cms.InputTag(""offlinePrimaryVertices""),"
-------------------------------------------------------------------------
"TrackCollectionTag = cms.InputTag(""FinalTrackRefitter""),
VertexCollectionTag = cms.InputTag("".oO[VertexCollection]Oo.""),
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"                                                                                                   Tpurge = cms.double(2.0),         # cleaning
                                                                                                   dzCutOff = cms.double(3.),        # outlier rejection after freeze-out (T<Tmin)
"
-------------------------------------------------------------------------
"                                                                                                    Tpurge = cms.double(2.0),         # cleaning
                                                                                                   dzCutOff = cms.double(3.)        # outlier rejection after freeze-out (T<Tmin)"
-------------------------------------------------------------------------
"                                                                                                   Tpurge = cms.double(2.0),         # cleaning
                                                                                                   dzCutOff = cms.double(3.),        # outlier rejection after freeze-out (T<Tmin)
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"TrackCollectionTag = cms.InputTag(""FinalTrackRefitter""),
VertexCollectionTag = cms.InputTag("".oO[VertexCollection]Oo.""),
"
-------------------------------------------------------------------------
"TrackCollectionTag = cms.InputTag(""trackCollection""),
VertexCollectionTag = cms.InputTag("".oO[VertexCollection]Oo.""),"
-------------------------------------------------------------------------
"TrackCollectionTag = cms.InputTag(""FinalTrackRefitter""),
VertexCollectionTag = cms.InputTag("".oO[VertexCollection]Oo.""),
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"                                           TkFilterParameters = cms.PSet(algorithm=cms.string('filter'),
                                                                         maxNormalizedChi2 = cms.double(5.0),                        # chi2ndof < 20
                                                                         minPixelLayersWithHits=cms.int32(2),                        # PX hits > 2
                                                                         minSiliconLayersWithHits = cms.int32(5),                    # TK hits > 5
                                                                         minPt = cms.double(0.0),                                    # better for softish events
                                                                                                      )
"
-------------------------------------------------------------------------
"TkFilterParameters = cms.PSet(algorithm=cms.string('filter'),
                                         maxNormalizedChi2 = cms.double(5.0),                        # chi2ndof < 20
                                         minPixelLayersWithHits=cms.int32(2),                        # PX hits > 2
                                         minSiliconLayersWithHits = cms.int32(5),                    # TK hits > 5
                                         minPt = cms.double(0.0)                                      # better for softish events
                                         ),"
-------------------------------------------------------------------------
"                                           TkFilterParameters = cms.PSet(algorithm=cms.string('filter'),
                                                                         maxNormalizedChi2 = cms.double(5.0),                        # chi2ndof < 20
                                                                         minPixelLayersWithHits=cms.int32(2),                        # PX hits > 2
                                                                         minSiliconLayersWithHits = cms.int32(5),                    # TK hits > 5
                                                                         minPt = cms.double(0.0),                                    # better for softish events
                                                                                                      )
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"process.seqTrackselRefit*
"
-------------------------------------------------------------------------
process.TkAlTrackSelectorRefit*
-------------------------------------------------------------------------
"process.seqTrackselRefit*
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"ls -lh .
"
-------------------------------------------------------------------------
"for File in $(ls * )
"
-------------------------------------------------------------------------
"ls -lh .
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"cp .oO[Alignment/OfflineValidation]Oo./macros/FitPVResiduals.C .
"
-------------------------------------------------------------------------
cp .oO[Alignment/OfflineValidation]Oo./macros/FitPVResiduals.C .
-------------------------------------------------------------------------
"cp .oO[Alignment/OfflineValidation]Oo./macros/FitPVResiduals.C .
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"for PdfOutputFile in $(ls *pdf ); do
    xrdcp -f ${PdfOutputFile}  root://eoscms//eos/cms/store/caf/user/$USER/.oO[eosdir]Oo./plots/
    rfcp ${PdfOutputFile}  .oO[plotsdir]Oo.
done
"
-------------------------------------------------------------------------
"for PdfOutputFile in $(ls *pdf ); do
    xrdcp -f ${PdfOutputFile}  root://eoscms//eos/cms/store/caf/user/$USER/.oO[eosdir]Oo./plots/
    rfcp ${PdfOutputFile}  .oO[plotsdir]Oo./Biases/dzPhi
done"
-------------------------------------------------------------------------
"for PdfOutputFile in $(ls *pdf ); do
    xrdcp -f ${PdfOutputFile}  root://eoscms//eos/cms/store/caf/user/$USER/.oO[eosdir]Oo./plots/
    rfcp ${PdfOutputFile}  .oO[plotsdir]Oo.
done
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"wget https://raw.githubusercontent.com/mmusich/PVToolScripts/master/PolishedScripts/index.php
"
-------------------------------------------------------------------------
cp index.php .oO[plotsdir]Oo./Biases/
-------------------------------------------------------------------------
"wget https://raw.githubusercontent.com/mmusich/PVToolScripts/master/PolishedScripts/index.php
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"echo  -----------------------
"
-------------------------------------------------------------------------
print('-----------------------')
-------------------------------------------------------------------------
"echo  -----------------------
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"for PdfOutputFile in $(ls *pdf ); do
    xrdcp -f ${PdfOutputFile}  root://eoscms//eos/cms/store/caf/user/$USER/.oO[eosdir]Oo./plots/
done
"
-------------------------------------------------------------------------
"for PdfOutputFile in $(ls *pdf ); do
    xrdcp -f ${PdfOutputFile}  root://eoscms//eos/cms/store/caf/user/$USER/.oO[eosdir]Oo./plots/
done"
-------------------------------------------------------------------------
"for PdfOutputFile in $(ls *pdf ); do
    xrdcp -f ${PdfOutputFile}  root://eoscms//eos/cms/store/caf/user/$USER/.oO[eosdir]Oo./plots/
done
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"thePlotLimits->init(.oO[m_dxyPhiMax]Oo.,         // mean of dxy vs Phi
                    .oO[m_dzPhiMax]Oo.,          // mean of dz  vs Phi
                    .oO[m_dxyEtaMax]Oo.,         // mean of dxy vs Eta
                    .oO[m_dzEtaMax]Oo.,          // mean of dz  vs Eta
                    .oO[m_dxyPhiNormMax]Oo.,     // mean of dxy vs Phi (norm)
                    .oO[m_dzPhiNormMax]Oo.,      // mean of dz  vs Phi (norm)
                    .oO[m_dxyEtaNormMax]Oo.,     // mean of dxy vs Eta (norm)
                    .oO[m_dzEtaNormMax]Oo.,      // mean of dz  vs Eta (norm)
                    .oO[w_dxyPhiMax]Oo.,         // width of dxy vs Phi
                    .oO[w_dzPhiMax]Oo.,          // width of dz  vs Phi
                    .oO[w_dxyEtaMax]Oo.,         // width of dxy vs Eta
                    .oO[w_dzEtaMax]Oo.,          // width of dz  vs Eta
"
-------------------------------------------------------------------------
"ThePlotLimits.init(.oO[m_dxyPhiMax]Oo.,         // mean of dxy vs Phi
                           .oO[m_dzPhiMax]Oo.,          // mean of dz  vs Phi
                           .oO[m_dxyEtaMax]Oo.,         // mean of dxy vs Eta
                           .oO[m_dzEtaMax]Oo.,          // mean of dz  vs Eta
                           .oO[m_dxyPhiNormMax]Oo.,     // mean of dxy vs Phi (norm)
                           .oO[m_dzPhiNormMax]Oo.,      // mean of dz  vs Phi (norm)
                           .oO[m_dxyEtaNormMax]Oo.,     // mean of dxy vs Eta (norm)
                           .oO[m_dzEtaNormMax]Oo.,      // mean of dz  vs Eta (norm)
                           .oO[w_dxyPhiMax]Oo.,         // width of dxy vs Phi
                           .oO[w_dzPhiMax]Oo.,          // width of dz  vs Phi
                           .oO[w_dxyEtaMax]Oo.,         // width of dxy vs Eta
                           .oO[w_dzEtaMax]Oo.,          // width of dz  vs Eta, 
                           .oO[w_dxyPhiNormMax]Oo.,     // width of dxy vs Phi (norm)
                           .oO[w_dzPhiNormMax]Oo.,      // width of dz  vs Phi (norm)
                           .oO[w_dxyEtaNormMax]Oo.,     // width of dxy vs Eta (norm)"
-------------------------------------------------------------------------
"thePlotLimits->init(.oO[m_dxyPhiMax]Oo.,         // mean of dxy vs Phi
                    .oO[m_dzPhiMax]Oo.,          // mean of dz  vs Phi
                    .oO[m_dxyEtaMax]Oo.,         // mean of dxy vs Eta
                    .oO[m_dzEtaMax]Oo.,          // mean of dz  vs Eta
                    .oO[m_dxyPhiNormMax]Oo.,     // mean of dxy vs Phi (norm)
                    .oO[m_dzPhiNormMax]Oo.,      // mean of dz  vs Phi (norm)
                    .oO[m_dxyEtaNormMax]Oo.,     // mean of dxy vs Eta (norm)
                    .oO[m_dzEtaNormMax]Oo.,      // mean of dz  vs Eta (norm)
                    .oO[w_dxyPhiMax]Oo.,         // width of dxy vs Phi
                    .oO[w_dzPhiMax]Oo.,          // width of dz  vs Phi
                    .oO[w_dxyEtaMax]Oo.,         // width of dxy vs Eta
                    .oO[w_dzEtaMax]Oo.,          // width of dz  vs Eta
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"repMap = super(TrackSplittingValidation, self).getRepMap(alignment)
"
-------------------------------------------------------------------------
"repMap = TrackSplittingValidation.getRepMap(self, alignment)"
-------------------------------------------------------------------------
"repMap = super(TrackSplittingValidation, self).getRepMap(alignment)
"
-------------------------------------------------------------------------
"Recom
PRs: 19751, 19753"
-------------------------------------------------------------------------
=========================================================================
"steps['RECODR2reHLTAlCaTkCosmics']=merge([{'--hltProcess':'reHLT','--conditions':'auto:run2_data_relval','-s':'RAW2DIGI,L1Reco,RECO,SKIM:EXONoBPTXSkim,EI,PAT,ALCA:TkAlCosmicsInCollisions,DQM:@standardDQM@miniAODDQM'},steps['RECODR2_2016']])
"
-------------------------------------------------------------------------
"steps['RECODR2reHLTAlCaTkCosmics']=merge([{'--hltProcess':'reHLT','--conditions':'auto:run2_data_relval','-s':'RAW2DIGI,L1Reco,RECO,SKIM:EXONoBPTXSkim,EI,PAT,ALCA:TkAlCosmicsInCollisions,DQM:@standardDQM+@miniAODDQM'},steps['RECODR2_2016']])"
-------------------------------------------------------------------------
"steps['RECODR2reHLTAlCaTkCosmics']=merge([{'--hltProcess':'reHLT','--conditions':'auto:run2_data_relval','-s':'RAW2DIGI,L1Reco,RECO,SKIM:EXONoBPTXSkim,EI,PAT,ALCA:TkAlCosmicsInCollisions,DQM:@standardDQM@miniAODDQM'},steps['RECODR2_2016']])
"
-------------------------------------------------------------------------
"Recom
PRs: 19521, 19522"
-------------------------------------------------------------------------
=========================================================================
"'NoBPTX' : 'EXONoBPTXSkimLogErrorLogErrorMonitor',
"
-------------------------------------------------------------------------
"'NoBPTX' : 'EXONoBPTXSkim+LogError+LogErrorMonitor',"
-------------------------------------------------------------------------
"'NoBPTX' : 'EXONoBPTXSkimLogErrorLogErrorMonitor',
"
-------------------------------------------------------------------------
"Recom
PRs: 19521, 19522"
-------------------------------------------------------------------------
=========================================================================
"upgradeStepDict['ALCAFull'][k] = {'-s':'ALCA:TkAlMuonIsolatedTkAlMinBiasMuAlOverlapsEcalESAlignTkAlZMuMuHcalCalHBHEMuonFilterTkAlUpsilonMuMuTkAlJpsiMuMuSiStripCalMinBias',
"
-------------------------------------------------------------------------
"upgradeStepDict['ALCAFull'][k] = merge([{'-s':'ALCA:TkAlMuonIsolatedTkAlMinBiasMuAlOverlapsEcalESAlignTkAlZMuMuHcalCalHBHEMuonFilterTkAlUpsilonMuMuTkAlJpsiMuMuSiStripCalMinBias'}, upgradeStepDict['ALCAFull'][k]])"
-------------------------------------------------------------------------
"upgradeStepDict['ALCAFull'][k] = {'-s':'ALCA:TkAlMuonIsolatedTkAlMinBiasMuAlOverlapsEcalESAlignTkAlZMuMuHcalCalHBHEMuonFilterTkAlUpsilonMuMuTkAlJpsiMuMuSiStripCalMinBias',
"
-------------------------------------------------------------------------
"Recom
PRs: 19430, 19433"
-------------------------------------------------------------------------
=========================================================================
"# parameters taken from https://indico.cern.ch/event/641946/contributions/2604357/attachments/1466160/2266650/PlanB_TDR.pdf, slide 4 (brown line)
drdA = cms.double(5.0),
drdB = cms.double(0.675),
"
-------------------------------------------------------------------------
"# parameters taken from https://indico.cern.ch/event/641946/contributions/2604357/attachments/1466160/2266650/PlanB_TDR.pdf, slide 4 (brown line)
drdA = cms.double(5.0),
drdB = cms.double(0.675),"
-------------------------------------------------------------------------
"# parameters taken from https://indico.cern.ch/event/641946/contributions/2604357/attachments/1466160/2266650/PlanB_TDR.pdf, slide 4 (brown line)
drdA = cms.double(5.0),
drdB = cms.double(0.675),
"
-------------------------------------------------------------------------
"Recom
PRs: 19039, 19040"
-------------------------------------------------------------------------
=========================================================================
"# temporarily disabled until RecoLocalCalo/HcalRecProducers/python/HBHEPhase1Reconstructor_cfi.py:flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
"
-------------------------------------------------------------------------
"# setNoiseFlagsQIE11 temporarily disabled until flagParametersQIE11 is filled
# setNoiseFlagsQIE11 = cms.bool(True),"
-------------------------------------------------------------------------
"# temporarily disabled until RecoLocalCalo/HcalRecProducers/python/HBHEPhase1Reconstructor_cfi.py:flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
"
-------------------------------------------------------------------------
"Recom
PRs: 18853, 18855"
-------------------------------------------------------------------------
=========================================================================
"# temporarily disabled until RecoLocalCalo/HcalRecProducers/python/HBHEPhase1Reconstructor_cfi.py:flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
# temporarily disabled until RecoLocalCalo/HcalRecProducers/python/HBHEPhase1Reconstructor_cfi.py:flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
"
-------------------------------------------------------------------------
"```python
# temporarily disable setNoiseFlagsQIE11 for AlCa [920patch]
setNoiseFlagsQIE11 = cms.bool(True),
setNoiseFlagsQIE11 = cms.bool(True),
```"
-------------------------------------------------------------------------
"# temporarily disabled until RecoLocalCalo/HcalRecProducers/python/HBHEPhase1Reconstructor_cfi.py:flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
# temporarily disabled until RecoLocalCalo/HcalRecProducers/python/HBHEPhase1Reconstructor_cfi.py:flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
"
-------------------------------------------------------------------------
"Recom
PRs: 18853, 18855"
-------------------------------------------------------------------------
=========================================================================
"# temporarily disabled until RecoLocalCalo/HcalRecProducers/python/HBHEPhase1Reconstructor_cfi.py:flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
"
-------------------------------------------------------------------------
"#Temporarily disabled until the flagParametersQIE11 is filled in HBHEPhase1Reconstructor_cfi.py
#setNoiseFlagsQIE11 = cms.bool(True)"
-------------------------------------------------------------------------
"# temporarily disabled until RecoLocalCalo/HcalRecProducers/python/HBHEPhase1Reconstructor_cfi.py:flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
"
-------------------------------------------------------------------------
"Recom
PRs: 18853, 18855"
-------------------------------------------------------------------------
=========================================================================
"# temporarily disabled until RecoLocalCalo/HcalRecProducers/python/HBHEPhase1Reconstructor_cfi.py:flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
"
-------------------------------------------------------------------------
"# temporarily disable setNoiseFlagsQIE11 for NZS [91X]
# setNoiseFlagsQIE11 = cms.bool(True),"
-------------------------------------------------------------------------
"# temporarily disabled until RecoLocalCalo/HcalRecProducers/python/HBHEPhase1Reconstructor_cfi.py:flagParametersQIE11 is filled
#    setNoiseFlagsQIE11 = cms.bool(True),
"
-------------------------------------------------------------------------
"Recom
PRs: 18821, 18822"
-------------------------------------------------------------------------
=========================================================================
"workflows[numWFupgradeSteps['Timing']['offset']] = [ upgradeDatasetFromFragment[frag]""_Timing"", stepList['Timing']]
workflows[numWFupgradeSteps['Neutron']['offset']] = [ upgradeDatasetFromFragment[frag]""_Neutron"", stepList['Neutron']]
"
-------------------------------------------------------------------------
"workflows[numWFupgradeSteps['Timing']['offset']] = [upgradeDatasetFromFragment[frag]+""_Timing"", stepList['Timing']]
workflows[numWFupgradeSteps['Neutron']['offset']] = [upgradeDatasetFromFragment[frag]+""_Neutron"", stepList['Neutron']]"
-------------------------------------------------------------------------
"workflows[numWFupgradeSteps['Timing']['offset']] = [ upgradeDatasetFromFragment[frag]""_Timing"", stepList['Timing']]
workflows[numWFupgradeSteps['Neutron']['offset']] = [ upgradeDatasetFromFragment[frag]""_Neutron"", stepList['Neutron']]
"
-------------------------------------------------------------------------
"Recom
PRs: 18737, 18738"
-------------------------------------------------------------------------
=========================================================================
"neutronFrags = ['ZMM_14','MinBias_14TeV']
"
-------------------------------------------------------------------------
"neutronFrags = ['ZMM_14','MinBias_14TeV']"
-------------------------------------------------------------------------
"neutronFrags = ['ZMM_14','MinBias_14TeV']
"
-------------------------------------------------------------------------
"Recom
PRs: 18611, 18612"
-------------------------------------------------------------------------
=========================================================================
"if any(upgradeDatasetFromFragment[frag]==nfrag for nfrag in neutronFrags) and any(nkey in key for nkey in neutronKeys):
"
-------------------------------------------------------------------------
if any(upgradeDatasetFromFragment[frag]==nfrag for nfrag in neutronFrags) and any(nkey in key for nkey in Configuration.PyReleaseValidation.relval_steps.neutronKeys):
-------------------------------------------------------------------------
"if any(upgradeDatasetFromFragment[frag]==nfrag for nfrag in neutronFrags) and any(nkey in key for nkey in neutronKeys):
"
-------------------------------------------------------------------------
"Recom
PRs: 18611, 18612"
-------------------------------------------------------------------------
=========================================================================
"   # available conditions
    ecal_lumis = [300,1000,3000,4500]
    ecal_conditions = [
        ['EcalIntercalibConstantsRcd','EcalIntercalibConstants_TL{:d}_upgrade_8deg_mc'],
        ['EcalIntercalibConstantsMCRcd','EcalIntercalibConstantsMC_TL{:d}_upgrade_8deg_mc'],
        ['EcalLaserAPDPNRatiosRcd','EcalLaserAPDPNRatios_TL{:d}_upgrade_8deg_mc'],
        ['EcalPedestalsRcd','EcalPedestals_TL{:d}_upgradeTIA_8deg_mc'],
        ['EcalTPGLinearizationConstRcd','EcalTPGLinearizationConst_TL{:d}_upgrade_8deg_mc'],
    ]
    # try to get conditions
    if int(lumi) in ecal_lumis:
        if not hasattr(process.GlobalTag,'toGet'):
            process.GlobalTag.toGet=cms.VPSet()
        for ecal_condition in ecal_conditions:
            process.GlobalTag.toGet.append(cms.PSet(
                record = cms.string(ecal_condition[0]),
                tag = cms.string(ecal_condition[1].format(int(lumi))),
                connect = cms.string(""frontier://FrontierProd/CMS_CONDITIONS"")
                )
            )
        
"
-------------------------------------------------------------------------
"# available conditions
ecal_lumis = [300,1000,3000,4500]
ecal_conditions = [
    ['EcalIntercalibConstantsRcd','EcalIntercalibConstants_TL{:d}_upgrade_8deg_mc'],
    ['EcalIntercalibConstantsMCRcd','EcalIntercalibConstantsMC_TL{:d}_upgrade_8deg_mc'],
    ['EcalLaserAPDPNRatiosRcd','EcalLaserAPDPNRatios_TL{:d}_upgrade_8deg_mc'],
    ['EcalPedestalsRcd','EcalPedestals_TL{:d}_upgradeTIA_8deg_mc'],
    ['EcalTPGLinearizationConstRcd','EcalTPGLinearizationConst_TL{:d}_upgrade_8deg_mc'],
]
# try to get conditions
if int(lumi) in ecal_lumis:
    if not hasattr(process.GlobalTag,'toGet'):
        process.GlobalTag.toGet=cms.VPSet()
    for ecal_condition in ecal_conditions:
        process.GlobalTag.toGet.append(cms.PSet(
            record = cms.string(ecal_condition[0]),
            tag = cms.string(ecal_condition[1].format(int(lumi))),
            connect = cms.string(""frontier://FrontierProd/CMS_CONDITIONS"")
            )
        )"
-------------------------------------------------------------------------
"   # available conditions
    ecal_lumis = [300,1000,3000,4500]
    ecal_conditions = [
        ['EcalIntercalibConstantsRcd','EcalIntercalibConstants_TL{:d}_upgrade_8deg_mc'],
        ['EcalIntercalibConstantsMCRcd','EcalIntercalibConstantsMC_TL{:d}_upgrade_8deg_mc'],
        ['EcalLaserAPDPNRatiosRcd','EcalLaserAPDPNRatios_TL{:d}_upgrade_8deg_mc'],
        ['EcalPedestalsRcd','EcalPedestals_TL{:d}_upgradeTIA_8deg_mc'],
        ['EcalTPGLinearizationConstRcd','EcalTPGLinearizationConst_TL{:d}_upgrade_8deg_mc'],
    ]
    # try to get conditions
    if int(lumi) in ecal_lumis:
        if not hasattr(process.GlobalTag,'toGet'):
            process.GlobalTag.toGet=cms.VPSet()
        for ecal_condition in ecal_conditions:
            process.GlobalTag.toGet.append(cms.PSet(
                record = cms.string(ecal_condition[0]),
                tag = cms.string(ecal_condition[1].format(int(lumi))),
                connect = cms.string(""frontier://FrontierProd/CMS_CONDITIONS"")
                )
            )
        
"
-------------------------------------------------------------------------
"Recom
PRs: 18592, 18593"
-------------------------------------------------------------------------
=========================================================================
"PFJets = cms.InputTag(""ak4PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),
"
-------------------------------------------------------------------------
"PFJets = cms.InputTag(""PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),"
-------------------------------------------------------------------------
"PFJets = cms.InputTag(""ak4PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),
"
-------------------------------------------------------------------------
"Recom
PRs: 18384, 18386"
-------------------------------------------------------------------------
=========================================================================
"PFJets = cms.InputTag(""ak4PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),
"
-------------------------------------------------------------------------
"PFJets = cms.InputTag(""ak4PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),"
-------------------------------------------------------------------------
"PFJets = cms.InputTag(""ak4PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),
"
-------------------------------------------------------------------------
"Recom
PRs: 18384, 18386"
-------------------------------------------------------------------------
=========================================================================
"PFJets = cms.InputTag(""ak4PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),
"
-------------------------------------------------------------------------
"PFJets = cms.InputTag(""PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),"
-------------------------------------------------------------------------
"PFJets = cms.InputTag(""ak4PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),
"
-------------------------------------------------------------------------
"Recom
PRs: 18384, 18385"
-------------------------------------------------------------------------
=========================================================================
"PFJets = cms.InputTag(""ak4PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),
"
-------------------------------------------------------------------------
"PFJets = cms.InputTag(""ak4PFJets"", ""RECO""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO"", ""RECO""),"
-------------------------------------------------------------------------
"PFJets = cms.InputTag(""ak4PFJets""),
particleFlowClusterHO = cms.InputTag(""particleFlowClusterHO""),
"
-------------------------------------------------------------------------
"Recom
PRs: 18384, 18385"
-------------------------------------------------------------------------
=========================================================================
"defaultDataSets['2017']='CMSSW_9_0_0-90X_upgrade2017_realistic_v20_resub-v'
defaultDataSets['2017Design']='CMSSW_9_0_0-90X_upgrade2017_design_IdealBS_v19_resub-v'
"
-------------------------------------------------------------------------
"defaultDataSets['2017']='CMSSW_9_0_0-90X_upgrade2017_realistic_v20_resub-v'
defaultDataSets['2017Design']='CMSSW_9_0_0-90X_upgrade2017_design_IdealBS_v19_resub-v'"
-------------------------------------------------------------------------
"defaultDataSets['2017']='CMSSW_9_0_0-90X_upgrade2017_realistic_v20_resub-v'
defaultDataSets['2017Design']='CMSSW_9_0_0-90X_upgrade2017_design_IdealBS_v19_resub-v'
"
-------------------------------------------------------------------------
"Recom
PRs: 18142, 18143"
-------------------------------------------------------------------------
=========================================================================
"versionOverrides={'SingleNuE10_cf_2017':'2',
                  'SingleNuE10_cf_2017PU':'2'
}
"
-------------------------------------------------------------------------
"versionOverrides={'SingleNuE10_cf_2017v2':'2',
                  'SingleNuE10_cf_2017v2PU':'2'
}"
-------------------------------------------------------------------------
"versionOverrides={'SingleNuE10_cf_2017':'2',
                  'SingleNuE10_cf_2017PU':'2'
}
"
-------------------------------------------------------------------------
"Recom
PRs: 18142, 18143"
-------------------------------------------------------------------------
=========================================================================
"steps['RECOCOS']=merge([{'-s':'RAW2DIGI,L1Reco,RECO,DQM','--scenario':'cosmics'},stCond,step3Defaults])
"
-------------------------------------------------------------------------
"steps['RECOCOS']=merge([{'-s':'RAW2DIGI,L1Reco,RECO,DQM','--conditions':'auto:cosmics','--scenario':'cosmics'},step3Defaults])"
-------------------------------------------------------------------------
"steps['RECOCOS']=merge([{'-s':'RAW2DIGI,L1Reco,RECO,DQM','--scenario':'cosmics'},stCond,step3Defaults])
"
-------------------------------------------------------------------------
"Recom
PRs: 18094, 18104"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_9_0_1/HLT/V12 (CMSSW_9_0_0_pre6)
  tableName = cms.string('/dev/CMSSW_9_0_1/HLT/V12')
"
-------------------------------------------------------------------------
fragment.tableName = cms.string('/dev/CMSSW_9_0_1/HLT/V12')
-------------------------------------------------------------------------
"# /dev/CMSSW_9_0_1/HLT/V12 (CMSSW_9_0_0_pre6)
  tableName = cms.string('/dev/CMSSW_9_0_1/HLT/V12')
"
-------------------------------------------------------------------------
"Recom
PRs: 17852, 17853"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_9_0_1/GRun/V6 (CMSSW_9_0_0_pre6)
  tableName = cms.string('/dev/CMSSW_9_0_1/GRun/V6')
"
-------------------------------------------------------------------------
"fragment = cms.ProcessFragment( ""HLTPRef"" )
fragment.tableName = cms.string('/dev/CMSSW_9_0_1/GRun/V6')"
-------------------------------------------------------------------------
"# /dev/CMSSW_9_0_1/GRun/V6 (CMSSW_9_0_0_pre6)
  tableName = cms.string('/dev/CMSSW_9_0_1/GRun/V6')
"
-------------------------------------------------------------------------
"Recom
PRs: 17852, 17853"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_9_0_1/HIon/V6 (CMSSW_9_0_0_pre6)
  tableName = cms.string('/dev/CMSSW_9_0_1/HIon/V6')
"
-------------------------------------------------------------------------
fragment.tableName = cms.string('/dev/CMSSW_9_0_1/HIon/V6')
-------------------------------------------------------------------------
"# /dev/CMSSW_9_0_1/HIon/V6 (CMSSW_9_0_0_pre6)
  tableName = cms.string('/dev/CMSSW_9_0_1/HIon/V6')
"
-------------------------------------------------------------------------
"Recom
PRs: 17852, 17853"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_9_0_1/PIon/V6 (CMSSW_9_0_0_pre6)
  tableName = cms.string('/dev/CMSSW_9_0_1/PIon/V6')
"
-------------------------------------------------------------------------
fragment.HLTPRef = cms.string('/dev/CMSSW_9_0_1/PIon/V6')
-------------------------------------------------------------------------
"# /dev/CMSSW_9_0_1/PIon/V6 (CMSSW_9_0_0_pre6)
  tableName = cms.string('/dev/CMSSW_9_0_1/PIon/V6')
"
-------------------------------------------------------------------------
"Recom
PRs: 17852, 17853"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_9_0_1/PRef/V6 (CMSSW_9_0_0_pre6)
  tableName = cms.string('/dev/CMSSW_9_0_1/PRef/V6')
"
-------------------------------------------------------------------------
"# tableName
fragment.tableName = cms.string('/dev/CMSSW_9_0_1/PRef/V6')"
-------------------------------------------------------------------------
"# /dev/CMSSW_9_0_1/PRef/V6 (CMSSW_9_0_0_pre6)
  tableName = cms.string('/dev/CMSSW_9_0_1/PRef/V6')
"
-------------------------------------------------------------------------
"Recom
PRs: 17852, 17853"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_9_0_1/HLT/V12 (CMSSW_9_0_0_pre6)
  tableName = cms.string('/dev/CMSSW_9_0_1/HLT/V12')
"
-------------------------------------------------------------------------
process.tableName = cms.string('/dev/CMSSW_9_0_1/HLT/V12')
-------------------------------------------------------------------------
"# /dev/CMSSW_9_0_1/HLT/V12 (CMSSW_9_0_0_pre6)
  tableName = cms.string('/dev/CMSSW_9_0_1/HLT/V12')
"
-------------------------------------------------------------------------
"Recom
PRs: 17852, 17853"
-------------------------------------------------------------------------
=========================================================================
"process.ALCAELECTRONOutput = cms.EndPath( process.hltGtStage2Digis  process.hltPreALCAELECTRONOutput  process.hltPreALCAELECTRONOutputSmart  process.hltSelectedElectronFEDListProducerGsf  process.hltOutputALCAELECTRON )
"
-------------------------------------------------------------------------
process.ALCAELECTRONOutput = cms.EndPath( process.hltGtStage2Digis + process.hltPreALCAELECTRONOutput + process.hltPreALCAELECTRONOutputSmart + process.hltSelectedElectronFEDListProducerGsf + process.hltOutputALCAELECTRON )
-------------------------------------------------------------------------
"process.ALCAELECTRONOutput = cms.EndPath( process.hltGtStage2Digis  process.hltPreALCAELECTRONOutput  process.hltPreALCAELECTRONOutputSmart  process.hltSelectedElectronFEDListProducerGsf  process.hltOutputALCAELECTRON )
"
-------------------------------------------------------------------------
"Recom
PRs: 17852, 17853"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_9_0_1/GRun/V6 (CMSSW_9_0_0_pre6)
  tableName = cms.string('/dev/CMSSW_9_0_1/GRun/V6')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_9_0_1/GRun/V6 (CMSSW_9_0_0_pre6)
tableName = cms.string('/dev/CMSSW_9_0_1/GRun/V6')"
-------------------------------------------------------------------------
"# /dev/CMSSW_9_0_1/GRun/V6 (CMSSW_9_0_0_pre6)
  tableName = cms.string('/dev/CMSSW_9_0_1/GRun/V6')
"
-------------------------------------------------------------------------
"Recom
PRs: 17852, 17853"
-------------------------------------------------------------------------
=========================================================================
"process.HLTSchedule = cms.Schedule( *(process.HLTriggerFirstPath, process.HLT_AK8PFJet360_TrimMass30_v7, process.HLT_AK8PFJet400_TrimMass30_v1, process.HLT_AK8PFHT750_TrimMass50_v1, process.HLT_AK8PFHT800_TrimMass50_v1, process.HLT_AK8DiPFJet300_200_TrimMass30_BTagCSV_p20_v1, process.HLT_AK8DiPFJet280_200_TrimMass30_BTagCSV_p087_v1, process.HLT_AK8DiPFJet300_200_TrimMass30_BTagCSV_p087_v1, process.HLT_AK8DiPFJet300_200_TrimMass30_v1, process.HLT_AK8PFHT700_TrimR0p1PT0p03Mass50_v8, process.HLT_AK8PFHT650_TrimR0p1PT0p03Mass50_v7, process.HLT_AK8PFHT600_TrimR0p1PT0p03Mass50_BTagCSV_p20_v6, process.HLT_AK8DiPFJet280_200_TrimMass30_v5, process.HLT_AK8DiPFJet250_200_TrimMass30_v5, process.HLT_AK8DiPFJet280_200_TrimMass30_BTagCSV_p20_v5, process.HLT_AK8DiPFJet250_200_TrimMass30_BTagCSV_p20_v5, process.HLT_CaloJet500_NoJetID_v5, process.HLT_Dimuon13_PsiPrime_v6, process.HLT_Dimuon13_Upsilon_v6, process.HLT_Dimuon20_Jpsi_v6, process.HLT_DoubleEle24_22_eta2p1_WPLoose_Gsf_v8, process.HLT_DoubleEle33_CaloIdL_v7, process.HLT_DoubleEle33_CaloIdL_MW_v8, process.HLT_DoubleEle33_CaloIdL_GsfTrkIdVL_MW_v10, process.HLT_DoubleMediumCombinedIsoPFTau35_Trk1_eta2p1_Reg_v3, process.HLT_DoubleTightCombinedIsoPFTau35_Trk1_eta2p1_Reg_v3, process.HLT_DoubleMediumCombinedIsoPFTau40_Trk1_eta2p1_Reg_v2, process.HLT_DoubleTightCombinedIsoPFTau40_Trk1_eta2p1_Reg_v2, process.HLT_DoubleMediumCombinedIsoPFTau40_Trk1_eta2p1_v2, process.HLT_DoubleTightCombinedIsoPFTau40_Trk1_eta2p1_v2, process.HLT_DoubleEle37_Ele27_CaloIdL_GsfTrkIdVL_v7, process.HLT_DoubleMu33NoFiltersNoVtx_v5, process.HLT_DoubleMu38NoFiltersNoVtx_v5, process.HLT_DoubleMu23NoFiltersNoVtxDisplaced_v5, process.HLT_DoubleMu28NoFiltersNoVtxDisplaced_v5, process.HLT_DoubleMu0_v2, process.HLT_DoubleMu4_3_Bs_v7, process.HLT_DoubleMu4_3_Jpsi_Displaced_v7, process.HLT_DoubleMu4_JpsiTrk_Displaced_v7, process.HLT_DoubleMu4_LowMassNonResonantTrk_Displaced_v7, process.HLT_DoubleMu3_Trk_Tau3mu_v4, process.HLT_DoubleMu4_PsiPrimeTrk_Displaced_v7, process.HLT_Mu7p5_L2Mu2_Jpsi_v4, process.HLT_Mu7p5_L2Mu2_Upsilon_v4, process.HLT_Mu7p5_Track2_Jpsi_v4, process.HLT_Mu7p5_Track3p5_Jpsi_v4, process.HLT_Mu7p5_Track7_Jpsi_v4, process.HLT_Mu7p5_Track2_Upsilon_v4, process.HLT_Mu7p5_Track3p5_Upsilon_v4, process.HLT_Mu7p5_Track7_Upsilon_v4, process.HLT_Dimuon0er16_Jpsi_NoOS_NoVertexing_v4, process.HLT_Dimuon6_Jpsi_NoVertexing_v4, process.HLT_DoublePhoton60_v7, process.HLT_DoublePhoton85_v8, process.HLT_Ele20_eta2p1_WPLoose_Gsf_LooseIsoPFTau28_v3, process.HLT_Ele22_eta2p1_WPLoose_Gsf_LooseIsoPFTau29_v3, process.HLT_Ele22_eta2p1_WPLoose_Gsf_v9, process.HLT_Ele24_eta2p1_WPLoose_Gsf_LooseIsoPFTau30_v4, process.HLT_Ele25_WPTight_Gsf_v7, process.HLT_Ele25_eta2p1_WPTight_Gsf_v7, process.HLT_Ele27_WPLoose_Gsf_WHbbBoost_v9, process.HLT_Ele27_WPTight_Gsf_v7, process.HLT_Ele27_WPTight_Gsf_L1JetTauSeeded_v4, process.HLT_Ele27_eta2p1_WPLoose_Gsf_v8, process.HLT_Ele27_eta2p1_WPTight_Gsf_v8, process.HLT_Ele30_WPTight_Gsf_v1, process.HLT_Ele30_eta2p1_WPTight_Gsf_v1, process.HLT_Ele32_WPTight_Gsf_v1, process.HLT_Ele32_eta2p1_WPTight_Gsf_v8, process.HLT_Ele36_eta2p1_WPLoose_Gsf_LooseIsoPFTau20_SingleL1_v3, process.HLT_Ele45_CaloIdVT_GsfTrkIdT_PFJet200_PFJet50_v9, process.HLT_Ele105_CaloIdVT_GsfTrkIdT_v8, process.HLT_HT200_v4, process.HLT_HT275_v4, process.HLT_HT325_v4, process.HLT_HT425_v4, process.HLT_HT575_v4, process.HLT_HT430to450_v4, process.HLT_HT450to470_v4, process.HLT_HT470to500_v4, process.HLT_HT500to550_v4, process.HLT_HT550to650_v4, process.HLT_HT650_v5, process.HLT_IsoMu16_eta2p1_MET30_v4, process.HLT_IsoMu16_eta2p1_MET30_LooseIsoPFTau50_Trk30_eta2p1_v5, process.HLT_DoubleIsoMu17_eta2p1_noDzCut_v5, process.HLT_IsoMu19_eta2p1_LooseIsoPFTau20_v5, process.HLT_IsoMu19_eta2p1_LooseIsoPFTau20_SingleL1_v5, process.HLT_IsoMu19_eta2p1_MediumIsoPFTau32_Trk1_eta2p1_Reg_v5, process.HLT_IsoMu19_eta2p1_LooseCombinedIsoPFTau20_v1, process.HLT_IsoMu19_eta2p1_MediumCombinedIsoPFTau32_Trk1_eta2p1_Reg_v1, process.HLT_IsoMu19_eta2p1_TightCombinedIsoPFTau32_Trk1_eta2p1_Reg_v1, process.HLT_IsoMu21_eta2p1_MediumCombinedIsoPFTau32_Trk1_eta2p1_Reg_v1, process.HLT_IsoMu21_eta2p1_TightCombinedIsoPFTau32_Trk1_eta2p1_Reg_v1, process.HLT_IsoMu20_v6, process.HLT_IsoMu21_eta2p1_LooseIsoPFTau20_SingleL1_v5, process.HLT_IsoMu21_eta2p1_LooseIsoPFTau50_Trk30_eta2p1_SingleL1_v4, process.HLT_IsoMu21_eta2p1_MediumIsoPFTau32_Trk1_eta2p1_Reg_v5, process.HLT_IsoMu22_v5, process.HLT_IsoMu22_eta2p1_v4, process.HLT_IsoMu24_v4, process.HLT_IsoMu24_eta2p1_v3, process.HLT_IsoMu27_v7, process.HLT_IsoTkMu20_v7, process.HLT_IsoTkMu22_v5, process.HLT_IsoTkMu22_eta2p1_v4, process.HLT_IsoTkMu24_v4, process.HLT_IsoTkMu24_eta2p1_v3, process.HLT_IsoTkMu27_v7, process.HLT_JetE30_NoBPTX3BX_v4, process.HLT_JetE30_NoBPTX_v4, process.HLT_JetE50_NoBPTX3BX_v4, process.HLT_JetE70_NoBPTX3BX_v4, process.HLT_L1SingleMu18_v1, process.HLT_L2Mu10_v3, process.HLT_L2DoubleMu23_NoVertex_v6, process.HLT_L2DoubleMu28_NoVertex_2Cha_Angle2p5_Mass10_v6, process.HLT_L2DoubleMu38_NoVertex_2Cha_Angle2p5_Mass10_v6, process.HLT_L2Mu10_NoVertex_NoBPTX3BX_v2, process.HLT_L2Mu10_NoVertex_NoBPTX_v3, process.HLT_L2Mu45_NoVertex_3Sta_NoBPTX3BX_v1, process.HLT_L2Mu40_NoVertex_3Sta_NoBPTX3BX_v2, process.HLT_LooseIsoPFTau50_Trk30_eta2p1_v7, process.HLT_LooseIsoPFTau50_Trk30_eta2p1_MET90_v6, process.HLT_LooseIsoPFTau50_Trk30_eta2p1_MET110_v6, process.HLT_LooseIsoPFTau50_Trk30_eta2p1_MET120_v6, process.HLT_PFTau120_eta2p1_v5, process.HLT_PFTau140_eta2p1_v5, process.HLT_VLooseIsoPFTau120_Trk50_eta2p1_v5, process.HLT_VLooseIsoPFTau140_Trk50_eta2p1_v5, process.HLT_Mu17_Mu8_v5, process.HLT_Mu17_Mu8_DZ_v7, process.HLT_Mu17_Mu8_SameSign_v5, process.HLT_Mu17_Mu8_SameSign_DZ_v6, process.HLT_Mu20_Mu10_v5, process.HLT_Mu20_Mu10_DZ_v6, process.HLT_Mu20_Mu10_SameSign_v4, process.HLT_Mu20_Mu10_SameSign_DZ_v6, process.HLT_Mu17_TkMu8_DZ_v6, process.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_v6, process.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v7, process.HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_v5, process.HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_v6, process.HLT_Mu25_TkMu0_dEta18_Onia_v6, process.HLT_Mu27_TkMu8_v5, process.HLT_Mu30_TkMu11_v5, process.HLT_Mu30_eta2p1_PFJet150_PFJet50_v5, process.HLT_Mu40_TkMu11_v5, process.HLT_Mu40_eta2p1_PFJet200_PFJet50_v7, process.HLT_Mu20_v4, process.HLT_TkMu17_v1, process.HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_v3, process.HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_v3, process.HLT_TkMu20_v4, process.HLT_Mu24_eta2p1_v5, process.HLT_TkMu24_eta2p1_v5, process.HLT_Mu27_v5, process.HLT_TkMu27_v5, process.HLT_Mu45_eta2p1_v5, process.HLT_Mu50_v5, process.HLT_TkMu50_v3, process.HLT_Mu38NoFiltersNoVtx_Photon38_CaloIdL_v7, process.HLT_Mu42NoFiltersNoVtx_Photon42_CaloIdL_v7, process.HLT_Mu28NoFiltersNoVtxDisplaced_Photon28_CaloIdL_v7, process.HLT_Mu33NoFiltersNoVtxDisplaced_Photon33_CaloIdL_v7, process.HLT_Mu23NoFiltersNoVtx_Photon23_CaloIdL_v7, process.HLT_DoubleMu18NoFiltersNoVtx_v5, process.HLT_Mu28NoFiltersNoVtx_DisplacedJet40_Loose_v5, process.HLT_Mu38NoFiltersNoVtxDisplaced_DisplacedJet60_Tight_v5, process.HLT_Mu38NoFiltersNoVtxDisplaced_DisplacedJet60_Loose_v5, process.HLT_Mu38NoFiltersNoVtx_DisplacedJet60_Loose_v5, process.HLT_Mu28NoFiltersNoVtx_CentralCaloJet40_v5, process.HLT_PFHT300_PFMET110_v6, process.HLT_PFHT550_4JetPt50_v6, process.HLT_PFHT650_4JetPt50_v6, process.HLT_PFHT750_4JetPt70_v2, process.HLT_PFHT750_4JetPt80_v2, process.HLT_PFHT800_4JetPt50_v2, process.HLT_PFHT850_4JetPt50_v2, process.HLT_PFJet15_NoCaloMatched_v7, process.HLT_PFJet25_NoCaloMatched_v5, process.HLT_DiPFJet15_NoCaloMatched_v5, process.HLT_DiPFJet25_NoCaloMatched_v5, process.HLT_DiPFJet15_FBEta3_NoCaloMatched_v6, process.HLT_DiPFJet25_FBEta3_NoCaloMatched_v6, process.HLT_DiPFJetAve15_HFJEC_v6, process.HLT_DiPFJetAve25_HFJEC_v6, process.HLT_DiPFJetAve35_HFJEC_v6, process.HLT_AK8PFJet40_v5, process.HLT_AK8PFJet60_v4, process.HLT_AK8PFJet80_v4, process.HLT_AK8PFJet140_v4, process.HLT_AK8PFJet200_v4, process.HLT_AK8PFJet260_v5, process.HLT_AK8PFJet320_v5, process.HLT_AK8PFJet400_v5, process.HLT_AK8PFJet450_v5, process.HLT_AK8PFJet500_v5, process.HLT_PFJet40_v9, process.HLT_PFJet60_v9, process.HLT_PFJet80_v8, process.HLT_PFJet140_v8, process.HLT_PFJet200_v8, process.HLT_PFJet260_v9, process.HLT_PFJet320_v9, process.HLT_PFJet400_v9, process.HLT_PFJet450_v9, process.HLT_PFJet500_v9, process.HLT_DiPFJetAve40_v8, process.HLT_DiPFJetAve60_v8, process.HLT_DiPFJetAve80_v7, process.HLT_DiPFJetAve140_v7, process.HLT_DiPFJetAve200_v7, process.HLT_DiPFJetAve260_v8, process.HLT_DiPFJetAve320_v8, process.HLT_DiPFJetAve400_v8, process.HLT_DiPFJetAve500_v8, process.HLT_DiPFJetAve60_HFJEC_v8, process.HLT_DiPFJetAve80_HFJEC_v8, process.HLT_DiPFJetAve100_HFJEC_v8, process.HLT_DiPFJetAve160_HFJEC_v8, process.HLT_DiPFJetAve220_HFJEC_v9, process.HLT_DiPFJetAve300_HFJEC_v9, process.HLT_DiPFJet40_DEta3p5_MJJ600_PFMETNoMu140_v6, process.HLT_DiPFJet40_DEta3p5_MJJ600_PFMETNoMu80_v5, process.HLT_DiCentralPFJet170_v5, process.HLT_SingleCentralPFJet170_CFMax0p1_v5, process.HLT_DiCentralPFJet170_CFMax0p1_v5, process.HLT_DiCentralPFJet330_CFMax0p5_v5, process.HLT_DiCentralPFJet430_v5, process.HLT_DiJetVBF_PassThrough_v1, process.HLT_DiJetVBFMu_PassThrough_v1, process.HLT_PFHT125_v5, process.HLT_PFHT200_v6, process.HLT_PFHT250_v6, process.HLT_PFHT300_v7, process.HLT_PFHT350_v8, process.HLT_PFHT400_v7, process.HLT_PFHT475_v7, process.HLT_PFHT600_v8, process.HLT_PFHT650_v8, process.HLT_PFHT900_v6, process.HLT_PFHT200_PFAlphaT0p51_v8, process.HLT_PFHT200_DiPFJetAve90_PFAlphaT0p63_v8, process.HLT_PFHT250_DiPFJetAve90_PFAlphaT0p58_v8, process.HLT_PFHT300_DiPFJetAve90_PFAlphaT0p54_v8, process.HLT_PFHT350_DiPFJetAve90_PFAlphaT0p53_v8, process.HLT_PFHT400_DiPFJetAve90_PFAlphaT0p52_v8, process.HLT_MET60_IsoTrk35_Loose_v3, process.HLT_MET75_IsoTrk50_v6, process.HLT_MET90_IsoTrk50_v6, process.HLT_PFMET170_NotCleaned_v8, process.HLT_PFMET170_HBHECleaned_v9, process.HLT_PFMET170_BeamHaloCleaned_v7, process.HLT_PFMET170_HBHE_BeamHaloCleaned_v5, process.HLT_PFMETTypeOne190_HBHE_BeamHaloCleaned_v5, process.HLT_PFMET110_PFMHT110_IDTight_v8, process.HLT_PFMET120_PFMHT120_IDTight_v8, process.HLT_CaloMHTNoPU90_PFMET90_PFMHT90_IDTight_BTagCSV_p067_v7, process.HLT_CaloMHTNoPU90_PFMET90_PFMHT90_IDTight_v8, process.HLT_QuadPFJet_BTagCSV_p016_p11_VBF_Mqq200_v5, process.HLT_QuadPFJet_BTagCSV_p016_VBF_Mqq460_v5, process.HLT_QuadPFJet_BTagCSV_p016_p11_VBF_Mqq240_v5, process.HLT_QuadPFJet_BTagCSV_p016_VBF_Mqq500_v5, process.HLT_QuadPFJet_VBF_v8, process.HLT_L1_TripleJet_VBF_v5, process.HLT_QuadJet45_TripleBTagCSV_p087_v6, process.HLT_QuadJet45_DoubleBTagCSV_p087_v6, process.HLT_DoubleJet90_Double30_TripleBTagCSV_p087_v5, process.HLT_DoubleJet90_Double30_DoubleBTagCSV_p087_v5, process.HLT_DoubleJetsC100_DoubleBTagCSV_p026_DoublePFJetsC160_v5, process.HLT_DoubleJetsC100_DoubleBTagCSV_p014_DoublePFJetsC100MaxDeta1p6_v5, process.HLT_DoubleJetsC112_DoubleBTagCSV_p026_DoublePFJetsC172_v5, process.HLT_DoubleJetsC112_DoubleBTagCSV_p014_DoublePFJetsC112MaxDeta1p6_v5, process.HLT_DoubleJetsC100_SingleBTagCSV_p026_v3, process.HLT_DoubleJetsC100_SingleBTagCSV_p014_v3, process.HLT_DoubleJetsC100_SingleBTagCSV_p026_SinglePFJetC350_v5, process.HLT_DoubleJetsC100_SingleBTagCSV_p014_SinglePFJetC350_v5, process.HLT_Photon135_PFMET100_v8, process.HLT_Photon22_R9Id90_HE10_Iso40_EBOnly_PFMET40_v9, process.HLT_Photon22_R9Id90_HE10_Iso40_EBOnly_VBF_v7, process.HLT_Photon250_NoHE_v7, process.HLT_Photon300_NoHE_v7, process.HLT_Photon26_R9Id85_OR_CaloId24b40e_Iso50T80L_Photon16_AND_HE10_R9Id65_Eta2_Mass60_v9, process.HLT_Photon36_R9Id85_OR_CaloId24b40e_Iso50T80L_Photon22_AND_HE10_R9Id65_Eta2_Mass15_v9, process.HLT_Photon36_R9Id90_HE10_Iso40_EBOnly_PFMET40_v9, process.HLT_Photon36_R9Id90_HE10_Iso40_EBOnly_VBF_v8, process.HLT_Photon50_R9Id90_HE10_Iso40_EBOnly_PFMET40_v9, process.HLT_Photon50_R9Id90_HE10_Iso40_EBOnly_VBF_v7, process.HLT_Photon75_R9Id90_HE10_Iso40_EBOnly_PFMET40_v9, process.HLT_Photon75_R9Id90_HE10_Iso40_EBOnly_VBF_v7, process.HLT_Photon90_R9Id90_HE10_Iso40_EBOnly_PFMET40_v9, process.HLT_Photon90_R9Id90_HE10_Iso40_EBOnly_VBF_v7, process.HLT_Photon120_R9Id90_HE10_Iso40_EBOnly_PFMET40_v9, process.HLT_Photon120_R9Id90_HE10_Iso40_EBOnly_VBF_v7, process.HLT_Mu8_TrkIsoVVL_v5, process.HLT_Mu17_TrkIsoVVL_v4, process.HLT_Ele8_CaloIdL_TrackIdL_IsoVL_PFJet30_v7, process.HLT_Ele12_CaloIdL_TrackIdL_IsoVL_PFJet30_v9, process.HLT_Ele17_CaloIdL_TrackIdL_IsoVL_PFJet30_v7, process.HLT_Ele23_CaloIdL_TrackIdL_IsoVL_PFJet30_v9, process.HLT_BTagMu_DiJet20_Mu5_v5, process.HLT_BTagMu_DiJet40_Mu5_v5, process.HLT_BTagMu_DiJet70_Mu5_v5, process.HLT_BTagMu_DiJet110_Mu5_v5, process.HLT_BTagMu_DiJet170_Mu5_v4, process.HLT_BTagMu_Jet300_Mu5_v5, process.HLT_BTagMu_AK8Jet300_Mu5_v4, process.HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v9, process.HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_L1JetTauSeeded_v3, process.HLT_Ele17_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v9, process.HLT_Ele16_Ele12_Ele8_CaloIdL_TrackIdL_v8, process.HLT_Mu8_TrkIsoVVL_Ele17_CaloIdL_TrackIdL_IsoVL_v9, process.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_v4, process.HLT_Mu12_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_v3, process.HLT_Mu12_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_v4, process.HLT_Mu17_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_v9, process.HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_DZ_v3, process.HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_v9, process.HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v4, process.HLT_Mu33_Ele33_CaloIdL_GsfTrkIdVL_v3, process.HLT_Mu37_Ele27_CaloIdL_GsfTrkIdVL_v6, process.HLT_Mu27_Ele37_CaloIdL_GsfTrkIdVL_v6, process.HLT_Mu8_DiEle12_CaloIdL_TrackIdL_v9, process.HLT_Mu12_Photon25_CaloIdL_v8, process.HLT_Mu12_Photon25_CaloIdL_L1ISO_v8, process.HLT_Mu12_Photon25_CaloIdL_L1OR_v8, process.HLT_Mu17_Photon30_CaloIdL_L1ISO_v9, process.HLT_Mu17_Photon35_CaloIdL_L1ISO_v9, process.HLT_DiMu9_Ele9_CaloIdL_TrackIdL_v8, process.HLT_TripleMu_5_3_3_DZ_Mass3p8_v1, process.HLT_TripleMu_12_10_5_v4, process.HLT_Mu6_PFHT200_PFMET100_v5, process.HLT_Ele17_Ele12_CaloIdL_TrackIdL_IsoVL_v9, process.HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_v9, process.HLT_Ele12_CaloIdL_TrackIdL_IsoVL_v8, process.HLT_Ele17_CaloIdL_GsfTrkIdVL_v6, process.HLT_Ele17_CaloIdL_TrackIdL_IsoVL_v7, process.HLT_Ele23_CaloIdL_TrackIdL_IsoVL_v8, process.HLT_PFHT650_WideJetMJJ900DEtaJJ1p5_v8, process.HLT_PFHT650_WideJetMJJ950DEtaJJ1p5_v8, process.HLT_Photon22_v6, process.HLT_Photon30_v7, process.HLT_Photon36_v7, process.HLT_Photon50_v7, process.HLT_Photon75_v7, process.HLT_Photon90_v7, process.HLT_Photon120_v7, process.HLT_Photon175_v8, process.HLT_Photon165_HE10_v8, process.HLT_Photon22_R9Id90_HE10_IsoM_v7, process.HLT_Photon30_R9Id90_HE10_IsoM_v8, process.HLT_Photon36_R9Id90_HE10_IsoM_v8, process.HLT_Photon50_R9Id90_HE10_IsoM_v8, process.HLT_Photon75_R9Id90_HE10_IsoM_v8, process.HLT_Photon90_R9Id90_HE10_IsoM_v8, process.HLT_Photon120_R9Id90_HE10_IsoM_v8, process.HLT_Photon165_R9Id90_HE10_IsoM_v9, process.HLT_Diphoton30_18_R9Id_OR_IsoCaloId_AND_HE_R9Id_Mass90_v7, process.HLT_Diphoton30_18_R9Id_OR_IsoCaloId_AND_HE_R9Id_DoublePixelSeedMatch_Mass70_v7, process.HLT_Diphoton30PV_18PV_R9Id_AND_IsoCaloId_AND_HE_R9Id_DoublePixelVeto_Mass55_v7, process.HLT_Diphoton30_18_Solid_R9Id_AND_IsoCaloId_AND_HE_R9Id_Mass55_v7, process.HLT_Diphoton30EB_18EB_R9Id_OR_IsoCaloId_AND_HE_R9Id_DoublePixelVeto_Mass55_v7, process.HLT_Dimuon0_Jpsi_Muon_v5, process.HLT_Dimuon0_Upsilon_Muon_v5, process.HLT_QuadMuon0_Dimuon0_Jpsi_v4, process.HLT_QuadMuon0_Dimuon0_Upsilon_v4, process.HLT_Rsq0p25_v6, process.HLT_Rsq0p30_v6, process.HLT_RsqMR270_Rsq0p09_MR200_v6, process.HLT_RsqMR270_Rsq0p09_MR200_4jet_v6, process.HLT_Rsq0p02_MR400_TriPFJet80_60_40_DoubleBTagCSV_p063_Mbb60_200_v3, process.HLT_Rsq0p02_MR450_TriPFJet80_60_40_DoubleBTagCSV_p063_Mbb60_200_v3, process.HLT_Rsq0p02_MR500_TriPFJet80_60_40_DoubleBTagCSV_p063_Mbb60_200_v2, process.HLT_Rsq0p02_MR550_TriPFJet80_60_40_DoubleBTagCSV_p063_Mbb60_200_v2, process.HLT_HT250_DisplacedDijet40_DisplacedTrack_v5, process.HLT_HT350_DisplacedDijet40_DisplacedTrack_v5, process.HLT_HT350_DisplacedDijet80_DisplacedTrack_v5, process.HLT_HT350_DisplacedDijet80_Tight_DisplacedTrack_v5, process.HLT_HT350_DisplacedDijet40_Inclusive_v4, process.HLT_HT550_DisplacedDijet80_Inclusive_v2, process.HLT_HT650_DisplacedDijet80_Inclusive_v5, process.HLT_HT750_DisplacedDijet80_Inclusive_v5, process.HLT_VBF_DisplacedJet40_DisplacedTrack_v5, process.HLT_VBF_DisplacedJet40_DisplacedTrack_2TrackIP2DSig5_v5, process.HLT_VBF_DisplacedJet40_TightID_DisplacedTrack_v5, process.HLT_VBF_DisplacedJet40_TightID_Hadronic_v5, process.HLT_VBF_DisplacedJet40_VTightID_Hadronic_v5, process.HLT_VBF_DisplacedJet40_VVTightID_Hadronic_v5, process.HLT_VBF_DisplacedJet40_VTightID_DisplacedTrack_v5, process.HLT_VBF_DisplacedJet40_VVTightID_DisplacedTrack_v5, process.HLT_PFMETNoMu110_PFMHTNoMu110_IDTight_v8, process.HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_v8, process.HLT_MonoCentralPFJet80_PFMETNoMu110_PFMHTNoMu110_IDTight_v8, process.HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v8, process.HLT_Ele27_eta2p1_WPLoose_Gsf_HT200_v10, process.HLT_DoubleMu8_Mass8_PFHT300_v9, process.HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_v10, process.HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_PFHT300_v10, process.HLT_Mu10_CentralPFJet30_BTagCSV_p13_v5, process.HLT_DoubleMu3_PFMET50_v6, process.HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV_p13_v7, process.HLT_Ele15_IsoVVVL_BTagCSV_p067_PFHT400_v7, process.HLT_Ele15_IsoVVVL_PFHT600_v9, process.HLT_Ele15_IsoVVVL_PFHT400_PFMET50_v6, process.HLT_Ele15_IsoVVVL_PFHT400_v6, process.HLT_Ele50_IsoVVVL_PFHT400_v6, process.HLT_Mu8_TrkIsoVVL_DiPFJet40_DEta3p5_MJJ750_HTT300_PFMETNoMu60_v4, process.HLT_Mu10_TrkIsoVVL_DiPFJet40_DEta3p5_MJJ750_HTT350_PFMETNoMu60_v5, process.HLT_Mu15_IsoVVVL_BTagCSV_p067_PFHT400_v6, process.HLT_Mu15_IsoVVVL_PFHT600_v8, process.HLT_Mu15_IsoVVVL_PFHT400_PFMET50_v5, process.HLT_Mu15_IsoVVVL_PFHT400_v5, process.HLT_Mu50_IsoVVVL_PFHT400_v5, process.HLT_Dimuon16_Jpsi_v6, process.HLT_Dimuon8_PsiPrime_Barrel_v6, process.HLT_Dimuon8_Upsilon_Barrel_v6, process.HLT_Dimuon0_Phi_Barrel_v6, process.HLT_TrkMu15_DoubleTrkMu5NoFiltersNoVtx_v6, process.HLT_TrkMu17_DoubleTrkMu8NoFiltersNoVtx_v6, process.HLT_Mu8_v5, process.HLT_Mu17_v4, process.HLT_Mu3_PFJet40_v6, process.HLT_Ele8_CaloIdM_TrackIdM_PFJet30_v9, process.HLT_Ele12_CaloIdM_TrackIdM_PFJet30_v9, process.HLT_Ele17_CaloIdM_TrackIdM_PFJet30_v7, process.HLT_Ele23_CaloIdM_TrackIdM_PFJet30_v9, process.HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165_v7, process.HLT_PFHT400_SixJet30_DoubleBTagCSV_p056_v6, process.HLT_PFHT450_SixJet40_BTagCSV_p056_v6, process.HLT_PFHT400_SixJet30_v8, process.HLT_PFHT450_SixJet40_v8, process.HLT_Ele115_CaloIdVT_GsfTrkIdT_v7, process.HLT_Ele145_CaloIdVT_GsfTrkIdT_v1, process.HLT_Ele200_CaloIdVT_GsfTrkIdT_v1, process.HLT_Mu55_v4, process.HLT_Photon42_R9Id85_OR_CaloId24b40e_Iso50T80L_Photon25_AND_HE10_R9Id65_Eta2_Mass15_v9, process.HLT_Photon90_CaloIdL_PFHT600_v8, process.HLT_FullTracks_Multiplicity80_v4, process.HLT_FullTracks_Multiplicity100_v5, process.HLT_FullTracks_Multiplicity130_v5, process.HLT_FullTracks_Multiplicity150_v5, process.HLT_ECALHT800_v6, process.HLT_DiSC30_18_EIso_AND_HE_Mass70_v6, process.HLT_MET200_v5, process.HLT_Ele27_HighEta_Ele20_Mass55_v8, process.HLT_L1FatEvents_v2, process.HLT_Physics_v5, process.HLT_L1FatEvents_part0_v1, process.HLT_L1FatEvents_part1_v1, process.HLT_L1FatEvents_part2_v1, process.HLT_L1FatEvents_part3_v1, process.DST_Physics_v5, process.DST_CaloJet40_BTagScouting_v7, process.DST_CaloJet40_CaloScouting_PFScouting_v7, process.DST_CaloJet40_CaloBTagScouting_v6, process.DST_L1HTT_BTagScouting_v7, process.DST_L1HTT_CaloScouting_PFScouting_v7, process.DST_L1HTT_CaloBTagScouting_v6, process.DST_HT250_CaloScouting_v5, process.DST_HT250_CaloBTagScouting_v3, process.DST_HT410_BTagScouting_v7, process.DST_HT410_PFScouting_v7, process.DST_HT450_BTagScouting_v7, process.DST_HT450_PFScouting_v7, process.DST_ZeroBias_CaloScouting_PFScouting_v6, process.DST_ZeroBias_BTagScouting_v7, process.DST_L1DoubleMu_BTagScouting_v8, process.DST_L1DoubleMu_CaloScouting_PFScouting_v7, process.DST_DoubleMu3_Mass10_BTagScouting_v8, process.DST_DoubleMu3_Mass10_CaloScouting_PFScouting_v7, process.HLT_Random_v2, process.HLT_ZeroBias_v4, process.HLT_AK4CaloJet30_v5, process.HLT_AK4CaloJet40_v4, process.HLT_AK4CaloJet50_v4, process.HLT_AK4CaloJet80_v4, process.HLT_AK4CaloJet100_v4, process.HLT_AK4PFJet30_v7, process.HLT_AK4PFJet50_v7, process.HLT_AK4PFJet80_v7, process.HLT_AK4PFJet100_v7, process.HLT_HISinglePhoton10_v4, process.HLT_HISinglePhoton15_v4, process.HLT_HISinglePhoton20_v4, process.HLT_HISinglePhoton40_v4, process.HLT_HISinglePhoton60_v4, process.HLT_EcalCalibration_v3, process.HLT_HcalCalibration_v4, process.AlCa_EcalPhiSym_v6, process.AlCa_SingleEle_WPVeryLoose_Gsf_v7, process.AlCa_DoubleEle_CaloIdL_TrackIdL_IsoVL_DZ_v6, process.AlCa_DoubleEle_CaloIdL_TrackIdL_IsoVL_v6, process.HLT_GlobalRunHPDNoise_v4, process.HLT_L1BptxMinus_v2, process.HLT_L1BptxPlus_v2, process.HLT_L1NotBptxOR_v2, process.HLT_L1MinimumBiasHF_OR_part0_v2, process.HLT_L1MinimumBiasHF_OR_part1_v2, process.HLT_L1MinimumBiasHF_OR_part2_v2, process.HLT_L1MinimumBiasHF_OR_part3_v2, process.HLT_L1MinimumBiasHF_OR_part4_v2, process.HLT_L1MinimumBiasHF_OR_part5_v2, process.HLT_L1MinimumBiasHF_OR_part6_v2, process.HLT_L1MinimumBiasHF_OR_part7_v2, process.HLT_L1MinimumBiasHF_OR_part8_v2, process.HLT_L1MinimumBiasHF_OR_part9_v2, process.HLT_L1MinimumBiasHF_AND_v2, process.HLT_HcalNZS_v10, process.HLT_HcalPhiSym_v11, process.HLT_HcalIsolatedbunch_v2, process.HLT_ZeroBias_FirstCollisionAfterAbortGap_v3, process.HLT_ZeroBias_FirstCollisionAfterAbortGap_copy_v1, process.HLT_ZeroBias_IsolatedBunches_v3, process.HLT_ZeroBias_FirstCollisionInTrain_v1, process.HLT_ZeroBias_FirstBXAfterTrain_v1, process.AlCa_RPCMuonNoTriggers_v10, process.AlCa_RPCMuonNoHits_v10, process.AlCa_RPCMuonNormalisation_v10, process.AlCa_LumiPixels_Random_v2, process.AlCa_LumiPixels_ZeroBias_v5, process.MC_ReducedIterativeTracking_v3, process.MC_PFMET_v6, process.MC_AK4PFJets_v6, process.MC_PFHT_v6, process.MC_PFMHT_v6, process.MC_CaloMET_v3, process.MC_CaloMET_JetIdCleaned_v3, process.MC_AK4CaloJets_v3, process.MC_CaloHT_v3, process.MC_CaloMHT_v3, process.MC_AK8PFJets_v6, process.MC_AK8TrimPFJets_v6, process.MC_AK8PFHT_v6, process.MC_AK8CaloHT_v3, process.MC_Diphoton10_10_R9Id_OR_IsoCaloId_AND_HE_R9Id_Mass10_v6, process.MC_DoubleEle5_CaloIdL_GsfTrkIdVL_MW_v6, process.MC_Ele5_WPLoose_Gsf_v8, process.MC_Ele15_Ele10_CaloIdL_TrackIdL_IsoVL_DZ_v7, process.MC_IsoMu_v7, process.MC_IsoTkMu15_v6, process.MC_DoubleMu_TrkIsoVVL_DZ_v4, process.MC_DoubleGlbTrkMu_TrkIsoVVL_DZ_v4, process.MC_DoubleMuNoFiltersNoVtx_v3, process.MC_DoubleL1Tau_MediumIsoPFTau32_Trk1_eta2p1_Reg_v6, process.MC_LooseIsoPFTau20_v5, process.MC_LooseIsoPFTau50_Trk30_eta2p1_v4, process.HLT_Photon500_v6, process.HLT_Photon600_v6, process.HLT_Mu300_v3, process.HLT_Mu350_v3, process.HLT_MET250_v5, process.HLT_MET300_v5, process.HLT_MET600_v5, process.HLT_MET700_v5, process.HLT_PFMET300_v7, process.HLT_PFMET400_v7, process.HLT_PFMET500_v7, process.HLT_PFMET600_v7, process.HLT_Ele250_CaloIdVT_GsfTrkIdT_v6, process.HLT_Ele300_CaloIdVT_GsfTrkIdT_v6, process.HLT_HT2000_v5, process.HLT_HT2500_v5, process.HLT_IsoTrackHE_v3, process.HLT_IsoTrackHB_v3, process.AlCa_EcalPi0EBonly_v8, process.AlCa_EcalPi0EEonly_v8, process.AlCa_EcalEtaEBonly_v8, process.AlCa_EcalEtaEEonly_v8, process.HLTriggerFinalPath, process.HLTAnalyzerEndpath, process.ParkingHLTPhysicsOutput, process.ParkingZeroBiasOutput, process.PhysicsCommissioningOutput, process.PhysicsEGammaOutput, process.PhysicsEndOfFillOutput, process.PhysicsHadronsTausOutput, process.PhysicsMuonsOutput, process.PhysicsMinimumBias0Output, process.PhysicsMinimumBias1Output, process.PhysicsMinimumBias2Output, process.ParkingOutput, process.DQMOutput, process.DQMCalibrationOutput, process.DQMEventDisplayOutput, process.HLTMonitorOutput, process.RPCMONOutput, process.CalibrationOutput, process.EcalCalibrationOutput, process.ALCAPHISYMOutput, process.ALCALUMIPIXELSOutput, process.ALCAP0Output, process.ExpressOutput, process.NanoDSTOutput, process.PhysicsParkingScoutingMonitorOutput, process.ScoutingCaloOutput, process.ScoutingPFOutput ))
"
-------------------------------------------------------------------------
"process.HLTSchedule = cms.Schedule( *(
    process.HLTriggerFirstPath, process.HLT_AK8PFJet360_TrimMass30_v7, process.HLT_AK8PFJet400_TrimMass30_v1,
    process.HLT_AK8PFHT750_TrimMass50_v1, process.HLT_AK8PFHT800_TrimMass50_v1,
    process.HLT_AK8DiPFJet300_200_TrimMass30_BTagCSV_p20_v1, process.HLT_AK8DiPFJet280_200_TrimMass30_BTagCSV_p087_v1,
    process.HLT_AK8DiPFJet300_200_TrimMass30_BTagCSV_p087_v1, process.HLT_AK8DiPFJet300_200_TrimMass30_v1, 
    process.HLT_AK8PFHT700_TrimR0p1PT0p03Mass50_v8, process.HLT_AK8PFHT650_TrimR0p1PT0p03Mass50_v7, 
    process.HLT_AK8PFHT600_TrimR0p1PT0p03Mass50_BTagCSV_p20_v6, process.HLT_AK8DiPFJet280_200_TrimMass30_v5, 
    process.HLT_AK8DiPFJet250_200_TrimMass30_v5, process.HLT_AK8DiPFJet280_200_TrimMass30_BTagCSV_p20_v5, 
    process.HLT_AK8DiPFJet250_200_TrimMass30_BTagCSV_p20_v5, process.HLT_CaloJet500_NoJetID_v5, 
    process.HLT_Dimuon13_PsiPrime_v6, process.HLT_Dimuon13_Upsilon_v6, process.HLT_Dimuon20_Jpsi_v6, 
    process.HLT_DoubleEle24_22_eta2p1_WPLoose_Gsf_v8, process.HLT_DoubleEle33_CaloIdL_v7, process.HLT_DoubleEle33_CaloIdL_MW_v8, 
    process.HLT_DoubleEle33_CaloIdL_GsfTrkIdVL_MW_v10, process.HLT_DoubleMediumCombinedIsoPFTau35_Trk1_eta2p1_Reg_v3, 
    process.HLT_DoubleTightCombinedIsoPFTau35_Trk1_eta2p1_Reg_v3, process.HLT_DoubleMediumCombinedIsoPFTau40_Trk1_eta2p1_Reg_v2, 
    process.HLT_DoubleTightCombinedIsoPFTau40_Trk1_eta2p1_Reg_v2, process.HLT_DoubleMediumCombinedIsoPFTau40_Trk1_eta2p1_v2, 
    process.HLT_DoubleTightCombinedIsoPFTau40_Trk1_eta2p1_v2, process.HLT_DoubleEle37_Ele27_CaloIdL_GsfTrkIdVL_v7, 
    process.HLT_DoubleMu33NoFiltersNoVtx_v5, process.HLT_DoubleMu38NoFiltersNoVtx_v5, process.HLT_DoubleMu23NoFiltersNoVtxDisplaced_v5, 
    process.HLT_DoubleMu28NoFiltersNoVtxDisplaced_v5, process.HLT_DoubleMu0_v2, process.HLT_DoubleMu4_3_Bs_v7, 
    process.HLT_DoubleMu4_3_Jpsi_Displaced_v7, process.HLT_DoubleMu4_JpsiTrk_Displaced_v7, 
    process.HLT_DoubleMu4_LowMassNonResonantTrk_Displaced_v7, process.HLT_DoubleMu3_Trk_Tau3mu_v4, 
    process.HLT_DoubleMu4_PsiPrimeTrk_Displaced_v7, process.HLT_Mu7p5_L2Mu2_Jpsi_v4, process.HLT_Mu7p5_L2Mu2_Upsilon_v4, 
    process.HLT_Mu7p5_Track2_Jpsi_v4, process.HLT_Mu7p5_Track3p5_Jpsi_v4, process.HLT_Mu7p5_Track7_Jpsi_v4, 
    process.HLT_Mu7p5_Track2_Upsilon_v4, process.HLT_Mu7p5_Track3p5_Upsilon_v4, process.HLT_Mu7p5_Track7_Upsilon_v4, 
    process.HLT_Dimuon0er16_Jpsi_NoOS_NoVertexing_v4, process.HLT_Dimuon6_Jpsi_NoVertexing_v4, process.HLT_DoublePhoton60_v7, 
    process.HLT_DoublePhoton85_v8, process.HLT_Ele20_eta2p1_WPLoose_Gsf_LooseIsoPFTau28_v3, process.HLT_Ele22_eta2p1_WPLoose_Gsf_LooseIsoPFTau29_v3, 
    process.HLT_Ele22_eta2p1_WPLoose_Gsf_v9, process.HLT_Ele24_eta2p1_WPLoose_Gsf_LooseIsoPFTau30_v4, process.HLT_Ele25_WPTight_Gsf_v7, 
    process.HLT_Ele25_eta2p1_WPTight_Gsf_v7, process.HLT_Ele27_WPLoose_Gsf_WHbbBoost_v9, process.HLT_Ele27_WPTight_Gsf_v7, 
    process.HLT_Ele27_WPTight_Gsf_L1JetTauSeeded_v4, process.HLT_Ele27_eta2p1_WPLoose_Gsf_v8, process.HLT_Ele27_eta2p1_WPTight_Gsf_v8, 
    process.HLT_Ele30_WPTight_Gsf_v1, process.HLT_Ele30_eta2p1_WPTight_Gsf_v1, process.HLT_Ele32_WPTight_Gsf_v1, process.HLT_Ele32_eta2p1_WPTight_Gsf_v8, 
    process.HLT_Ele36_eta2p1_WPLoose_Gsf_LooseIsoPFTau20_SingleL1_v3, process.HLT_Ele45_CaloIdVT_GsfTrkIdT_PFJet200_PFJet50_v9, 
    process.HLT_Ele105_CaloIdVT_GsfTrkIdT_v8, process.HLT_HT200_v4, process.HLT_HT275_v4, process.HLT_HT325_v4, process.HLT_HT425_v4, 
    process.HLT_HT575_v4, process.HLT_HT430to450_v4, process.HLT_HT450to470_v4, process.HLT_HT470to500_v4, process.HLT_HT500to550_v4, 
    process.HLT_HT550to650_v4, process.HLT_HT650_v5, process.HLT_IsoMu16_eta2p1_MET30_v4, process.HLT_IsoMu16_eta2p1_MET30_LooseIsoPFTau50_Trk30_eta2p1_v5, 
    process.HLT_DoubleIsoMu17_eta2p1_noDzCut_v5, process.HLT_IsoMu19_eta2p1_LooseIsoPFTau20_v5, process.HLT_IsoMu19_eta2p1_LooseIsoPFTau20_SingleL1_v5, 
    process.HLT_IsoMu19_eta2p1_MediumIsoPFTau32_Trk1_eta2p1_Reg_v5, process.HLT_IsoMu19_eta2p1_LooseCombinedIsoPFTau20_v1, 
    process.HLT_IsoMu19_eta2p1_MediumCombinedIsoPFTau32_Trk1_eta2p1_Reg_v1, process.HLT_IsoMu19_eta2p1_TightCombinedIsoPFTau32_Trk1_eta2p1_Reg_v1, 
    process.HLT_IsoMu21_eta2p1_MediumCombinedIsoPFTau32_Trk1_eta2p1_Reg_v1, process.HLT_IsoMu21_eta2p1_TightCombinedIsoPFTau32_Trk1_eta2p1_Reg_v1, 
    process.HLT_IsoMu20_v6, process.HLT_IsoMu21_eta2p1_LooseIsoPFTau20_SingleL1_v5, process.HLT_IsoMu21_eta2p1_LooseIsoPFTau50_Trk30_eta2p1_SingleL1_v4, 
    process.HLT_IsoMu21_eta2p1_MediumIsoPFTau32_Trk1_eta2p1_Reg_v5, process.HLT_IsoMu22_v5, process.HLT_IsoMu22_eta2p1_v4, process.HLT_IsoMu24_v4, 
    process.HLT_IsoMu24_eta2p1_v3, process.HLT_IsoMu27_v7, process.HLT_IsoTkMu20_v7, process.HLT_IsoTkMu22_v5, process.HLT_IsoTkMu22_eta2p1_v4, 
    process.HLT_IsoTkMu24_v4, process.HLT_IsoTkMu24_eta2p1_v3, process.HLT_IsoTkMu27_v7, process.HLT_JetE30_NoBPTX3BX_v4, process.HLT_JetE30_NoBPTX_v4, 
    process.HLT_JetE50_NoBPTX3BX_v4, process.HLT_JetE70_NoBPTX3BX_v4, process.HLT_L1SingleMu18_v1, process.HLT_L2Mu10_v3, process.HLT_L2DoubleMu23_NoVertex_v6, 
    process.HLT_L2DoubleMu28_NoVertex_2Cha_Angle2p5_Mass10_v6, process.HLT_L2DoubleMu38_NoVertex_2Cha_Angle2p5_Mass10_v6, process.HLT_L2Mu10_NoVertex_NoBPTX3BX_v2, 
    process.HLT_L2Mu10_NoVertex_NoBPTX_v3, process.HLT_L2Mu45_NoVertex_3Sta_NoBPTX3BX_v1, process.HLT_L2Mu40_NoVertex_3Sta_NoBPTX3BX_v2, process.HLT_LooseIsoPFTau50_Trk30_eta2p1_v7, 
    ***
    process.HLT_PFMETNoMu110_PFMHTNoMu110_IDTight_v8, process.HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_v8, 
    process.HLT_MonoCentralPFJet80_PFMETNoMu110_PFMHTNoMu110_IDTight_v8, process.HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v8, 
    process.HLT_Ele27_eta2p1_WPLoose_Gsf_HT200_v10, process.HLT_DoubleMu8_Mass8_PFHT300_v9, 
    process.HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_v10, process.HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_PFHT300_v10, 
    process.HLT_Mu10_CentralPFJet30_BTagCSV_p13_v5, process.HLT_DoubleMu3_PFMET50_v6, process.HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV_p13_v7, 
    process.HLT_Ele15_IsoVVVL_BTagCSV_p067_PFHT400_v7, process.HLT_Ele15_IsoVVVL_PFHT600_v9, process.HLT_Ele15_IsoVVVL_PFHT400_PFMET50_v6, 
    process.HLT_Ele15_IsoVVVL_PFHT400_v6, process.HLT_Ele50_IsoVVVL_PFHT400_v6, process.HLT_Mu8_TrkIsoVVL_DiPFJet40_DEta3p5_MJJ750_HTT300_PFMETNoMu60_v4, 
    process.HLT_Mu10_TrkIsoVVL_DiPFJet40_DEta3p5_MJJ750_HTT350_PFMETNoMu60_v5, process.HLT_Mu15_IsoVVVL_BTagCSV_p067_PFHT400_v6, 
    process.HLT_Mu15_IsoVVVL_PFHT600_v8, process.HLT_Mu15_IsoVVVL_PFHT400_PFMET50_v5, process.HLT_Mu15_IsoVVVL_PFHT400_v5, 
    process.HLT_Mu50_IsoVVVL_PFHT400_v5, process.HLT_Dimuon16_Jpsi_v6, process.HLT_Dimuon8_PsiPrime_Barrel_v6, 
    process.HLT_Dimuon8_Upsilon_Barrel_v6, process.HLT_Dimuon0_Phi_Barrel_v6, process.HLT_TrkMu15_DoubleTrkMu5NoFiltersNoVtx_v6, 
    process.HLT_TrkMu17_DoubleTrkMu8NoFiltersNoVtx_v6, process.HLT_Mu8_v5, process.HLT_Mu17_v4, process.HLT_Mu3_PFJet40_v6, 
    process.HLT_Ele8_CaloIdM_TrackIdM_PFJet30_v9, process.HLT_Ele12_CaloIdM_TrackIdM_PFJet30_v9, process.HLT_Ele17_CaloIdM_TrackIdM_PFJet30_v7, 
    process.HLT_Ele23_CaloIdM_TrackIdM_PFJet30_v9, process.HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165_v7, 
    process.HLT_PFHT400_SixJet30_DoubleBTagCSV_p056_v6, process.HLT_PFHT450_SixJet40_BTagCSV_p056_v6, 
    process.HLT_PFHT400_SixJet30_v8, process.HLT_PFHT450_SixJet40_v8, process.HLT_Ele115_CaloIdVT_GsfTrkIdT_v7, 
    process.HLT_Ele145_CaloIdVT_GsfTrkIdT_v1, process.HLT_Ele200_CaloIdVT_GsfTrkIdT_v1, process.HLT_Mu55_v4, 
    process.HLT_Photon42_R9Id85_OR_CaloId24b40e_Iso50T80L_Photon25_AND_HE10_R9Id65_Eta2_Mass15_v9, process.HLT_Photon90_CaloIdL_PFHT600_v8, 
    process.HLT_FullTracks_Multiplicity80_v4, process.HLT_FullTracks_Multiplicity100_v5, process.HLT_FullTracks_Multiplicity130_v5, 
    process.HLT_FullTracks_Multiplicity150_v5, process.HLT_ECALHT800_v6, process.HLT_DiSC30_18_EIso_AND_HE_Mass70_v6, 
    process.HLT_MET200_v5, process.HLT_Ele27_HighEta_Ele20_Mass55_v8, process.HLT_L1FatEvents_v2, process.HLT_Physics_v5, 
    process.HLT_L1FatEvents_part0_v1, process.HLT_L1FatEvents_part1_v1, process.HLT_L1FatEvents_part2_v1, process.HLT_L1FatEvents_part3_v1, 
    process.HLT_L1FatEvents_part4_v1, process.HLT_L1FatEvents_part5_v1, process.HLT_L1FatEvents_part6_v1, process.HLT_L1FatEvents_part7_v1, 
    process.HLT_L1FatEvents_part8_v1, process.HLT_L1FatEvents_part9_v1, process.HLT_L1MinimumBiasHF_AND_v2, process.HLT_HcalNZS_v10, 
    process.HLT_HcalPhiSym_v11, process.HLT_HcalIsolatedbunch_v2, process.HLT_Random_v2, process.HLT_ZeroBias_v4, 
    process.HLT_AK4CaloJet30_v5, process.HLT_AK4CaloJet40_v4, process.HLT_AK4CaloJet50_v4, process.HLT_AK4CaloJet80_v4, 
    process.HLT_AK4CaloJet100_v4, process.HLT_AK4PFJet30_v7, process.HLT_AK4PFJet50_v7, process.HLT_AK4PFJet80_v7, process.HLT_AK4PFJet100_v7, 
    process.HLT_HISinglePhoton10_v4, process.HLT_HISinglePhoton15_v4, process.HLT_HISinglePhoton20_v4, process.HLT_HISinglePhoton40_v4, 
    process.HLT_HISinglePhoton60_v4, process.HLT_EcalCalibration_v3, process.HLT_HcalCalibration_v4, process.AlCa_EcalPi0EBonly_v8, 
    process.AlCa_EcalPi0EEonly_v8, process.AlCa_EcalEtaEBonly_v8, process.AlCa_EcalEtaEEonly_v8, process.HLTriggerFinalPath,
    process.HLTAnalyzerEndpath, process.ParkingHLTPhysicsOutput, process.ParkingZeroBiasOutput, process.PhysicsCommissioningOutput, 
    process.PhysicsEGammaOutput, process.PhysicsEndOfFillOutput, process.PhysicsHadronsTausOutput, process.PhysicsMuonsOutput, 
    process.PhysicsMinimumBias0Output, process.PhysicsMinimumBias1Output, process.PhysicsMinimumBias2Output, process.ParkingOutput, 
    process.DQMOutput, process.DQMCalibrationOutput, process.DQMEventDisplayOutput, process.HLTMonitorOutput, process.RPCMONOutput, 
    process.CalibrationOutput, process.EcalCalibrationOutput, process.ALCAPHISYMOutput, process.ALCALUMIPIXELSOutput, process.ALCAP0Output, 
    process.ExpressOutput, process.NanoDSTOutput, process.PhysicsParkingScoutingMonitorOutput, process.ScoutingCaloOutput, process.ScoutingPFOutput ))"
-------------------------------------------------------------------------
"process.HLTSchedule = cms.Schedule( *(process.HLTriggerFirstPath, process.HLT_AK8PFJet360_TrimMass30_v7, process.HLT_AK8PFJet400_TrimMass30_v1, process.HLT_AK8PFHT750_TrimMass50_v1, process.HLT_AK8PFHT800_TrimMass50_v1, process.HLT_AK8DiPFJet300_200_TrimMass30_BTagCSV_p20_v1, process.HLT_AK8DiPFJet280_200_TrimMass30_BTagCSV_p087_v1, process.HLT_AK8DiPFJet300_200_TrimMass30_BTagCSV_p087_v1, process.HLT_AK8DiPFJet300_200_TrimMass30_v1, process.HLT_AK8PFHT700_TrimR0p1PT0p03Mass50_v8, process.HLT_AK8PFHT650_TrimR0p1PT0p03Mass50_v7, process.HLT_AK8PFHT600_TrimR0p1PT0p03Mass50_BTagCSV_p20_v6, process.HLT_AK8DiPFJet280_200_TrimMass30_v5, process.HLT_AK8DiPFJet250_200_TrimMass30_v5, process.HLT_AK8DiPFJet280_200_TrimMass30_BTagCSV_p20_v5, process.HLT_AK8DiPFJet250_200_TrimMass30_BTagCSV_p20_v5, process.HLT_CaloJet500_NoJetID_v5, process.HLT_Dimuon13_PsiPrime_v6, process.HLT_Dimuon13_Upsilon_v6, process.HLT_Dimuon20_Jpsi_v6, process.HLT_DoubleEle24_22_eta2p1_WPLoose_Gsf_v8, process.HLT_DoubleEle33_CaloIdL_v7, process.HLT_DoubleEle33_CaloIdL_MW_v8, process.HLT_DoubleEle33_CaloIdL_GsfTrkIdVL_MW_v10, process.HLT_DoubleMediumCombinedIsoPFTau35_Trk1_eta2p1_Reg_v3, process.HLT_DoubleTightCombinedIsoPFTau35_Trk1_eta2p1_Reg_v3, process.HLT_DoubleMediumCombinedIsoPFTau40_Trk1_eta2p1_Reg_v2, process.HLT_DoubleTightCombinedIsoPFTau40_Trk1_eta2p1_Reg_v2, process.HLT_DoubleMediumCombinedIsoPFTau40_Trk1_eta2p1_v2, process.HLT_DoubleTightCombinedIsoPFTau40_Trk1_eta2p1_v2, process.HLT_DoubleEle37_Ele27_CaloIdL_GsfTrkIdVL_v7, process.HLT_DoubleMu33NoFiltersNoVtx_v5, process.HLT_DoubleMu38NoFiltersNoVtx_v5, process.HLT_DoubleMu23NoFiltersNoVtxDisplaced_v5, process.HLT_DoubleMu28NoFiltersNoVtxDisplaced_v5, process.HLT_DoubleMu0_v2, process.HLT_DoubleMu4_3_Bs_v7, process.HLT_DoubleMu4_3_Jpsi_Displaced_v7, process.HLT_DoubleMu4_JpsiTrk_Displaced_v7, process.HLT_DoubleMu4_LowMassNonResonantTrk_Displaced_v7, process.HLT_DoubleMu3_Trk_Tau3mu_v4, process.HLT_DoubleMu4_PsiPrimeTrk_Displaced_v7, process.HLT_Mu7p5_L2Mu2_Jpsi_v4, process.HLT_Mu7p5_L2Mu2_Upsilon_v4, process.HLT_Mu7p5_Track2_Jpsi_v4, process.HLT_Mu7p5_Track3p5_Jpsi_v4, process.HLT_Mu7p5_Track7_Jpsi_v4, process.HLT_Mu7p5_Track2_Upsilon_v4, process.HLT_Mu7p5_Track3p5_Upsilon_v4, process.HLT_Mu7p5_Track7_Upsilon_v4, process.HLT_Dimuon0er16_Jpsi_NoOS_NoVertexing_v4, process.HLT_Dimuon6_Jpsi_NoVertexing_v4, process.HLT_DoublePhoton60_v7, process.HLT_DoublePhoton85_v8, process.HLT_Ele20_eta2p1_WPLoose_Gsf_LooseIsoPFTau28_v3, process.HLT_Ele22_eta2p1_WPLoose_Gsf_LooseIsoPFTau29_v3, process.HLT_Ele22_eta2p1_WPLoose_Gsf_v9, process.HLT_Ele24_eta2p1_WPLoose_Gsf_LooseIsoPFTau30_v4, process.HLT_Ele25_WPTight_Gsf_v7, process.HLT_Ele25_eta2p1_WPTight_Gsf_v7, process.HLT_Ele27_WPLoose_Gsf_WHbbBoost_v9, process.HLT_Ele27_WPTight_Gsf_v7, process.HLT_Ele27_WPTight_Gsf_L1JetTauSeeded_v4, process.HLT_Ele27_eta2p1_WPLoose_Gsf_v8, process.HLT_Ele27_eta2p1_WPTight_Gsf_v8, process.HLT_Ele30_WPTight_Gsf_v1, process.HLT_Ele30_eta2p1_WPTight_Gsf_v1, process.HLT_Ele32_WPTight_Gsf_v1, process.HLT_Ele32_eta2p1_WPTight_Gsf_v8, process.HLT_Ele36_eta2p1_WPLoose_Gsf_LooseIsoPFTau20_SingleL1_v3, process.HLT_Ele45_CaloIdVT_GsfTrkIdT_PFJet200_PFJet50_v9, process.HLT_Ele105_CaloIdVT_GsfTrkIdT_v8, process.HLT_HT200_v4, process.HLT_HT275_v4, process.HLT_HT325_v4, process.HLT_HT425_v4, process.HLT_HT575_v4, process.HLT_HT430to450_v4, process.HLT_HT450to470_v4, process.HLT_HT470to500_v4, process.HLT_HT500to550_v4, process.HLT_HT550to650_v4, process.HLT_HT650_v5, process.HLT_IsoMu16_eta2p1_MET30_v4, process.HLT_IsoMu16_eta2p1_MET30_LooseIsoPFTau50_Trk30_eta2p1_v5, process.HLT_DoubleIsoMu17_eta2p1_noDzCut_v5, process.HLT_IsoMu19_eta2p1_LooseIsoPFTau20_v5, process.HLT_IsoMu19_eta2p1_LooseIsoPFTau20_SingleL1_v5, process.HLT_IsoMu19_eta2p1_MediumIsoPFTau32_Trk1_eta2p1_Reg_v5, process.HLT_IsoMu19_eta2p1_LooseCombinedIsoPFTau20_v1, process.HLT_IsoMu19_eta2p1_MediumCombinedIsoPFTau32_Trk1_eta2p1_Reg_v1, process.HLT_IsoMu19_eta2p1_TightCombinedIsoPFTau32_Trk1_eta2p1_Reg_v1, process.HLT_IsoMu21_eta2p1_MediumCombinedIsoPFTau32_Trk1_eta2p1_Reg_v1, process.HLT_IsoMu21_eta2p1_TightCombinedIsoPFTau32_Trk1_eta2p1_Reg_v1, process.HLT_IsoMu20_v6, process.HLT_IsoMu21_eta2p1_LooseIsoPFTau20_SingleL1_v5, process.HLT_IsoMu21_eta2p1_LooseIsoPFTau50_Trk30_eta2p1_SingleL1_v4, process.HLT_IsoMu21_eta2p1_MediumIsoPFTau32_Trk1_eta2p1_Reg_v5, process.HLT_IsoMu22_v5, process.HLT_IsoMu22_eta2p1_v4, process.HLT_IsoMu24_v4, process.HLT_IsoMu24_eta2p1_v3, process.HLT_IsoMu27_v7, process.HLT_IsoTkMu20_v7, process.HLT_IsoTkMu22_v5, process.HLT_IsoTkMu22_eta2p1_v4, process.HLT_IsoTkMu24_v4, process.HLT_IsoTkMu24_eta2p1_v3, process.HLT_IsoTkMu27_v7, process.HLT_JetE30_NoBPTX3BX_v4, process.HLT_JetE30_NoBPTX_v4, process.HLT_JetE50_NoBPTX3BX_v4, process.HLT_JetE70_NoBPTX3BX_v4, process.HLT_L1SingleMu18_v1, process.HLT_L2Mu10_v3, process.HLT_L2DoubleMu23_NoVertex_v6, process.HLT_L2DoubleMu28_NoVertex_2Cha_Angle2p5_Mass10_v6, process.HLT_L2DoubleMu38_NoVertex_2Cha_Angle2p5_Mass10_v6, process.HLT_L2Mu10_NoVertex_NoBPTX3BX_v2, process.HLT_L2Mu10_NoVertex_NoBPTX_v3, process.HLT_L2Mu45_NoVertex_3Sta_NoBPTX3BX_v1, process.HLT_L2Mu40_NoVertex_3Sta_NoBPTX3BX_v2, process.HLT_LooseIsoPFTau50_Trk30_eta2p1_v7, process.HLT_LooseIsoPFTau50_Trk30_eta2p1_MET90_v6, process.HLT_LooseIsoPFTau50_Trk30_eta2p1_MET110_v6, process.HLT_LooseIsoPFTau50_Trk30_eta2p1_MET120_v6, process.HLT_PFTau120_eta2p1_v5, process.HLT_PFTau140_eta2p1_v5, process.HLT_VLooseIsoPFTau120_Trk50_eta2p1_v5, process.HLT_VLooseIsoPFTau140_Trk50_eta2p1_v5, process.HLT_Mu17_Mu8_v5, process.HLT_Mu17_Mu8_DZ_v7, process.HLT_Mu17_Mu8_SameSign_v5, process.HLT_Mu17_Mu8_SameSign_DZ_v6, process.HLT_Mu20_Mu10_v5, process.HLT_Mu20_Mu10_DZ_v6, process.HLT_Mu20_Mu10_SameSign_v4, process.HLT_Mu20_Mu10_SameSign_DZ_v6, process.HLT_Mu17_TkMu8_DZ_v6, process.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_v6, process.HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v7, process.HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_v5, process.HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_v6, process.HLT_Mu25_TkMu0_dEta18_Onia_v6, process.HLT_Mu27_TkMu8_v5, process.HLT_Mu30_TkMu11_v5, process.HLT_Mu30_eta2p1_PFJet150_PFJet50_v5, process.HLT_Mu40_TkMu11_v5, process.HLT_Mu40_eta2p1_PFJet200_PFJet50_v7, process.HLT_Mu20_v4, process.HLT_TkMu17_v1, process.HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_v3, process.HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_v3, process.HLT_TkMu20_v4, process.HLT_Mu24_eta2p1_v5, process.HLT_TkMu24_eta2p1_v5, process.HLT_Mu27_v5, process.HLT_TkMu27_v5, process.HLT_Mu45_eta2p1_v5, process.HLT_Mu50_v5, process.HLT_TkMu50_v3, process.HLT_Mu38NoFiltersNoVtx_Photon38_CaloIdL_v7, process.HLT_Mu42NoFiltersNoVtx_Photon42_CaloIdL_v7, process.HLT_Mu28NoFiltersNoVtxDisplaced_Photon28_CaloIdL_v7, process.HLT_Mu33NoFiltersNoVtxDisplaced_Photon33_CaloIdL_v7, process.HLT_Mu23NoFiltersNoVtx_Photon23_CaloIdL_v7, process.HLT_DoubleMu18NoFiltersNoVtx_v5, process.HLT_Mu28NoFiltersNoVtx_DisplacedJet40_Loose_v5, process.HLT_Mu38NoFiltersNoVtxDisplaced_DisplacedJet60_Tight_v5, process.HLT_Mu38NoFiltersNoVtxDisplaced_DisplacedJet60_Loose_v5, process.HLT_Mu38NoFiltersNoVtx_DisplacedJet60_Loose_v5, process.HLT_Mu28NoFiltersNoVtx_CentralCaloJet40_v5, process.HLT_PFHT300_PFMET110_v6, process.HLT_PFHT550_4JetPt50_v6, process.HLT_PFHT650_4JetPt50_v6, process.HLT_PFHT750_4JetPt70_v2, process.HLT_PFHT750_4JetPt80_v2, process.HLT_PFHT800_4JetPt50_v2, process.HLT_PFHT850_4JetPt50_v2, process.HLT_PFJet15_NoCaloMatched_v7, process.HLT_PFJet25_NoCaloMatched_v5, process.HLT_DiPFJet15_NoCaloMatched_v5, process.HLT_DiPFJet25_NoCaloMatched_v5, process.HLT_DiPFJet15_FBEta3_NoCaloMatched_v6, process.HLT_DiPFJet25_FBEta3_NoCaloMatched_v6, process.HLT_DiPFJetAve15_HFJEC_v6, process.HLT_DiPFJetAve25_HFJEC_v6, process.HLT_DiPFJetAve35_HFJEC_v6, process.HLT_AK8PFJet40_v5, process.HLT_AK8PFJet60_v4, process.HLT_AK8PFJet80_v4, process.HLT_AK8PFJet140_v4, process.HLT_AK8PFJet200_v4, process.HLT_AK8PFJet260_v5, process.HLT_AK8PFJet320_v5, process.HLT_AK8PFJet400_v5, process.HLT_AK8PFJet450_v5, process.HLT_AK8PFJet500_v5, process.HLT_PFJet40_v9, process.HLT_PFJet60_v9, process.HLT_PFJet80_v8, process.HLT_PFJet140_v8, process.HLT_PFJet200_v8, process.HLT_PFJet260_v9, process.HLT_PFJet320_v9, process.HLT_PFJet400_v9, process.HLT_PFJet450_v9, process.HLT_PFJet500_v9, process.HLT_DiPFJetAve40_v8, process.HLT_DiPFJetAve60_v8, process.HLT_DiPFJetAve80_v7, process.HLT_DiPFJetAve140_v7, process.HLT_DiPFJetAve200_v7, process.HLT_DiPFJetAve260_v8, process.HLT_DiPFJetAve320_v8, process.HLT_DiPFJetAve400_v8, process.HLT_DiPFJetAve500_v8, process.HLT_DiPFJetAve60_HFJEC_v8, process.HLT_DiPFJetAve80_HFJEC_v8, process.HLT_DiPFJetAve100_HFJEC_v8, process.HLT_DiPFJetAve160_HFJEC_v8, process.HLT_DiPFJetAve220_HFJEC_v9, process.HLT_DiPFJetAve300_HFJEC_v9, process.HLT_DiPFJet40_DEta3p5_MJJ600_PFMETNoMu140_v6, process.HLT_DiPFJet40_DEta3p5_MJJ600_PFMETNoMu80_v5, process.HLT_DiCentralPFJet170_v5, process.HLT_SingleCentralPFJet170_CFMax0p1_v5, process.HLT_DiCentralPFJet170_CFMax0p1_v5, process.HLT_DiCentralPFJet330_CFMax0p5_v5, process.HLT_DiCentralPFJet430_v5, process.HLT_DiJetVBF_PassThrough_v1, process.HLT_DiJetVBFMu_PassThrough_v1, process.HLT_PFHT125_v5, process.HLT_PFHT200_v6, process.HLT_PFHT250_v6, process.HLT_PFHT300_v7, process.HLT_PFHT350_v8, process.HLT_PFHT400_v7, process.HLT_PFHT475_v7, process.HLT_PFHT600_v8, process.HLT_PFHT650_v8, process.HLT_PFHT900_v6, process.HLT_PFHT200_PFAlphaT0p51_v8, process.HLT_PFHT200_DiPFJetAve90_PFAlphaT0p63_v8, process.HLT_PFHT250_DiPFJetAve90_PFAlphaT0p58_v8, process.HLT_PFHT300_DiPFJetAve90_PFAlphaT0p54_v8, process.HLT_PFHT350_DiPFJetAve90_PFAlphaT0p53_v8, process.HLT_PFHT400_DiPFJetAve90_PFAlphaT0p52_v8, process.HLT_MET60_IsoTrk35_Loose_v3, process.HLT_MET75_IsoTrk50_v6, process.HLT_MET90_IsoTrk50_v6, process.HLT_PFMET170_NotCleaned_v8, process.HLT_PFMET170_HBHECleaned_v9, process.HLT_PFMET170_BeamHaloCleaned_v7, process.HLT_PFMET170_HBHE_BeamHaloCleaned_v5, process.HLT_PFMETTypeOne190_HBHE_BeamHaloCleaned_v5, process.HLT_PFMET110_PFMHT110_IDTight_v8, process.HLT_PFMET120_PFMHT120_IDTight_v8, process.HLT_CaloMHTNoPU90_PFMET90_PFMHT90_IDTight_BTagCSV_p067_v7, process.HLT_CaloMHTNoPU90_PFMET90_PFMHT90_IDTight_v8, process.HLT_QuadPFJet_BTagCSV_p016_p11_VBF_Mqq200_v5, process.HLT_QuadPFJet_BTagCSV_p016_VBF_Mqq460_v5, process.HLT_QuadPFJet_BTagCSV_p016_p11_VBF_Mqq240_v5, process.HLT_QuadPFJet_BTagCSV_p016_VBF_Mqq500_v5, process.HLT_QuadPFJet_VBF_v8, process.HLT_L1_TripleJet_VBF_v5, process.HLT_QuadJet45_TripleBTagCSV_p087_v6, process.HLT_QuadJet45_DoubleBTagCSV_p087_v6, process.HLT_DoubleJet90_Double30_TripleBTagCSV_p087_v5, process.HLT_DoubleJet90_Double30_DoubleBTagCSV_p087_v5, process.HLT_DoubleJetsC100_DoubleBTagCSV_p026_DoublePFJetsC160_v5, process.HLT_DoubleJetsC100_DoubleBTagCSV_p014_DoublePFJetsC100MaxDeta1p6_v5, process.HLT_DoubleJetsC112_DoubleBTagCSV_p026_DoublePFJetsC172_v5, process.HLT_DoubleJetsC112_DoubleBTagCSV_p014_DoublePFJetsC112MaxDeta1p6_v5, process.HLT_DoubleJetsC100_SingleBTagCSV_p026_v3, process.HLT_DoubleJetsC100_SingleBTagCSV_p014_v3, process.HLT_DoubleJetsC100_SingleBTagCSV_p026_SinglePFJetC350_v5, process.HLT_DoubleJetsC100_SingleBTagCSV_p014_SinglePFJetC350_v5, process.HLT_Photon135_PFMET100_v8, process.HLT_Photon22_R9Id90_HE10_Iso40_EBOnly_PFMET40_v9, process.HLT_Photon22_R9Id90_HE10_Iso40_EBOnly_VBF_v7, process.HLT_Photon250_NoHE_v7, process.HLT_Photon300_NoHE_v7, process.HLT_Photon26_R9Id85_OR_CaloId24b40e_Iso50T80L_Photon16_AND_HE10_R9Id65_Eta2_Mass60_v9, process.HLT_Photon36_R9Id85_OR_CaloId24b40e_Iso50T80L_Photon22_AND_HE10_R9Id65_Eta2_Mass15_v9, process.HLT_Photon36_R9Id90_HE10_Iso40_EBOnly_PFMET40_v9, process.HLT_Photon36_R9Id90_HE10_Iso40_EBOnly_VBF_v8, process.HLT_Photon50_R9Id90_HE10_Iso40_EBOnly_PFMET40_v9, process.HLT_Photon50_R9Id90_HE10_Iso40_EBOnly_VBF_v7, process.HLT_Photon75_R9Id90_HE10_Iso40_EBOnly_PFMET40_v9, process.HLT_Photon75_R9Id90_HE10_Iso40_EBOnly_VBF_v7, process.HLT_Photon90_R9Id90_HE10_Iso40_EBOnly_PFMET40_v9, process.HLT_Photon90_R9Id90_HE10_Iso40_EBOnly_VBF_v7, process.HLT_Photon120_R9Id90_HE10_Iso40_EBOnly_PFMET40_v9, process.HLT_Photon120_R9Id90_HE10_Iso40_EBOnly_VBF_v7, process.HLT_Mu8_TrkIsoVVL_v5, process.HLT_Mu17_TrkIsoVVL_v4, process.HLT_Ele8_CaloIdL_TrackIdL_IsoVL_PFJet30_v7, process.HLT_Ele12_CaloIdL_TrackIdL_IsoVL_PFJet30_v9, process.HLT_Ele17_CaloIdL_TrackIdL_IsoVL_PFJet30_v7, process.HLT_Ele23_CaloIdL_TrackIdL_IsoVL_PFJet30_v9, process.HLT_BTagMu_DiJet20_Mu5_v5, process.HLT_BTagMu_DiJet40_Mu5_v5, process.HLT_BTagMu_DiJet70_Mu5_v5, process.HLT_BTagMu_DiJet110_Mu5_v5, process.HLT_BTagMu_DiJet170_Mu5_v4, process.HLT_BTagMu_Jet300_Mu5_v5, process.HLT_BTagMu_AK8Jet300_Mu5_v4, process.HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v9, process.HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_L1JetTauSeeded_v3, process.HLT_Ele17_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v9, process.HLT_Ele16_Ele12_Ele8_CaloIdL_TrackIdL_v8, process.HLT_Mu8_TrkIsoVVL_Ele17_CaloIdL_TrackIdL_IsoVL_v9, process.HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_v4, process.HLT_Mu12_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_v3, process.HLT_Mu12_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_v4, process.HLT_Mu17_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_v9, process.HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_DZ_v3, process.HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_v9, process.HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v4, process.HLT_Mu33_Ele33_CaloIdL_GsfTrkIdVL_v3, process.HLT_Mu37_Ele27_CaloIdL_GsfTrkIdVL_v6, process.HLT_Mu27_Ele37_CaloIdL_GsfTrkIdVL_v6, process.HLT_Mu8_DiEle12_CaloIdL_TrackIdL_v9, process.HLT_Mu12_Photon25_CaloIdL_v8, process.HLT_Mu12_Photon25_CaloIdL_L1ISO_v8, process.HLT_Mu12_Photon25_CaloIdL_L1OR_v8, process.HLT_Mu17_Photon30_CaloIdL_L1ISO_v9, process.HLT_Mu17_Photon35_CaloIdL_L1ISO_v9, process.HLT_DiMu9_Ele9_CaloIdL_TrackIdL_v8, process.HLT_TripleMu_5_3_3_DZ_Mass3p8_v1, process.HLT_TripleMu_12_10_5_v4, process.HLT_Mu6_PFHT200_PFMET100_v5, process.HLT_Ele17_Ele12_CaloIdL_TrackIdL_IsoVL_v9, process.HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_v9, process.HLT_Ele12_CaloIdL_TrackIdL_IsoVL_v8, process.HLT_Ele17_CaloIdL_GsfTrkIdVL_v6, process.HLT_Ele17_CaloIdL_TrackIdL_IsoVL_v7, process.HLT_Ele23_CaloIdL_TrackIdL_IsoVL_v8, process.HLT_PFHT650_WideJetMJJ900DEtaJJ1p5_v8, process.HLT_PFHT650_WideJetMJJ950DEtaJJ1p5_v8, process.HLT_Photon22_v6, process.HLT_Photon30_v7, process.HLT_Photon36_v7, process.HLT_Photon50_v7, process.HLT_Photon75_v7, process.HLT_Photon90_v7, process.HLT_Photon120_v7, process.HLT_Photon175_v8, process.HLT_Photon165_HE10_v8, process.HLT_Photon22_R9Id90_HE10_IsoM_v7, process.HLT_Photon30_R9Id90_HE10_IsoM_v8, process.HLT_Photon36_R9Id90_HE10_IsoM_v8, process.HLT_Photon50_R9Id90_HE10_IsoM_v8, process.HLT_Photon75_R9Id90_HE10_IsoM_v8, process.HLT_Photon90_R9Id90_HE10_IsoM_v8, process.HLT_Photon120_R9Id90_HE10_IsoM_v8, process.HLT_Photon165_R9Id90_HE10_IsoM_v9, process.HLT_Diphoton30_18_R9Id_OR_IsoCaloId_AND_HE_R9Id_Mass90_v7, process.HLT_Diphoton30_18_R9Id_OR_IsoCaloId_AND_HE_R9Id_DoublePixelSeedMatch_Mass70_v7, process.HLT_Diphoton30PV_18PV_R9Id_AND_IsoCaloId_AND_HE_R9Id_DoublePixelVeto_Mass55_v7, process.HLT_Diphoton30_18_Solid_R9Id_AND_IsoCaloId_AND_HE_R9Id_Mass55_v7, process.HLT_Diphoton30EB_18EB_R9Id_OR_IsoCaloId_AND_HE_R9Id_DoublePixelVeto_Mass55_v7, process.HLT_Dimuon0_Jpsi_Muon_v5, process.HLT_Dimuon0_Upsilon_Muon_v5, process.HLT_QuadMuon0_Dimuon0_Jpsi_v4, process.HLT_QuadMuon0_Dimuon0_Upsilon_v4, process.HLT_Rsq0p25_v6, process.HLT_Rsq0p30_v6, process.HLT_RsqMR270_Rsq0p09_MR200_v6, process.HLT_RsqMR270_Rsq0p09_MR200_4jet_v6, process.HLT_Rsq0p02_MR400_TriPFJet80_60_40_DoubleBTagCSV_p063_Mbb60_200_v3, process.HLT_Rsq0p02_MR450_TriPFJet80_60_40_DoubleBTagCSV_p063_Mbb60_200_v3, process.HLT_Rsq0p02_MR500_TriPFJet80_60_40_DoubleBTagCSV_p063_Mbb60_200_v2, process.HLT_Rsq0p02_MR550_TriPFJet80_60_40_DoubleBTagCSV_p063_Mbb60_200_v2, process.HLT_HT250_DisplacedDijet40_DisplacedTrack_v5, process.HLT_HT350_DisplacedDijet40_DisplacedTrack_v5, process.HLT_HT350_DisplacedDijet80_DisplacedTrack_v5, process.HLT_HT350_DisplacedDijet80_Tight_DisplacedTrack_v5, process.HLT_HT350_DisplacedDijet40_Inclusive_v4, process.HLT_HT550_DisplacedDijet80_Inclusive_v2, process.HLT_HT650_DisplacedDijet80_Inclusive_v5, process.HLT_HT750_DisplacedDijet80_Inclusive_v5, process.HLT_VBF_DisplacedJet40_DisplacedTrack_v5, process.HLT_VBF_DisplacedJet40_DisplacedTrack_2TrackIP2DSig5_v5, process.HLT_VBF_DisplacedJet40_TightID_DisplacedTrack_v5, process.HLT_VBF_DisplacedJet40_TightID_Hadronic_v5, process.HLT_VBF_DisplacedJet40_VTightID_Hadronic_v5, process.HLT_VBF_DisplacedJet40_VVTightID_Hadronic_v5, process.HLT_VBF_DisplacedJet40_VTightID_DisplacedTrack_v5, process.HLT_VBF_DisplacedJet40_VVTightID_DisplacedTrack_v5, process.HLT_PFMETNoMu110_PFMHTNoMu110_IDTight_v8, process.HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_v8, process.HLT_MonoCentralPFJet80_PFMETNoMu110_PFMHTNoMu110_IDTight_v8, process.HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v8, process.HLT_Ele27_eta2p1_WPLoose_Gsf_HT200_v10, process.HLT_DoubleMu8_Mass8_PFHT300_v9, process.HLT_Mu8_Ele8_CaloIdM_TrackIdM_Mass8_PFHT300_v10, process.HLT_DoubleEle8_CaloIdM_TrackIdM_Mass8_PFHT300_v10, process.HLT_Mu10_CentralPFJet30_BTagCSV_p13_v5, process.HLT_DoubleMu3_PFMET50_v6, process.HLT_Ele10_CaloIdM_TrackIdM_CentralPFJet30_BTagCSV_p13_v7, process.HLT_Ele15_IsoVVVL_BTagCSV_p067_PFHT400_v7, process.HLT_Ele15_IsoVVVL_PFHT600_v9, process.HLT_Ele15_IsoVVVL_PFHT400_PFMET50_v6, process.HLT_Ele15_IsoVVVL_PFHT400_v6, process.HLT_Ele50_IsoVVVL_PFHT400_v6, process.HLT_Mu8_TrkIsoVVL_DiPFJet40_DEta3p5_MJJ750_HTT300_PFMETNoMu60_v4, process.HLT_Mu10_TrkIsoVVL_DiPFJet40_DEta3p5_MJJ750_HTT350_PFMETNoMu60_v5, process.HLT_Mu15_IsoVVVL_BTagCSV_p067_PFHT400_v6, process.HLT_Mu15_IsoVVVL_PFHT600_v8, process.HLT_Mu15_IsoVVVL_PFHT400_PFMET50_v5, process.HLT_Mu15_IsoVVVL_PFHT400_v5, process.HLT_Mu50_IsoVVVL_PFHT400_v5, process.HLT_Dimuon16_Jpsi_v6, process.HLT_Dimuon8_PsiPrime_Barrel_v6, process.HLT_Dimuon8_Upsilon_Barrel_v6, process.HLT_Dimuon0_Phi_Barrel_v6, process.HLT_TrkMu15_DoubleTrkMu5NoFiltersNoVtx_v6, process.HLT_TrkMu17_DoubleTrkMu8NoFiltersNoVtx_v6, process.HLT_Mu8_v5, process.HLT_Mu17_v4, process.HLT_Mu3_PFJet40_v6, process.HLT_Ele8_CaloIdM_TrackIdM_PFJet30_v9, process.HLT_Ele12_CaloIdM_TrackIdM_PFJet30_v9, process.HLT_Ele17_CaloIdM_TrackIdM_PFJet30_v7, process.HLT_Ele23_CaloIdM_TrackIdM_PFJet30_v9, process.HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165_v7, process.HLT_PFHT400_SixJet30_DoubleBTagCSV_p056_v6, process.HLT_PFHT450_SixJet40_BTagCSV_p056_v6, process.HLT_PFHT400_SixJet30_v8, process.HLT_PFHT450_SixJet40_v8, process.HLT_Ele115_CaloIdVT_GsfTrkIdT_v7, process.HLT_Ele145_CaloIdVT_GsfTrkIdT_v1, process.HLT_Ele200_CaloIdVT_GsfTrkIdT_v1, process.HLT_Mu55_v4, process.HLT_Photon42_R9Id85_OR_CaloId24b40e_Iso50T80L_Photon25_AND_HE10_R9Id65_Eta2_Mass15_v9, process.HLT_Photon90_CaloIdL_PFHT600_v8, process.HLT_FullTracks_Multiplicity80_v4, process.HLT_FullTracks_Multiplicity100_v5, process.HLT_FullTracks_Multiplicity130_v5, process.HLT_FullTracks_Multiplicity150_v5, process.HLT_ECALHT800_v6, process.HLT_DiSC30_18_EIso_AND_HE_Mass70_v6, process.HLT_MET200_v5, process.HLT_Ele27_HighEta_Ele20_Mass55_v8, process.HLT_L1FatEvents_v2, process.HLT_Physics_v5, process.HLT_L1FatEvents_part0_v1, process.HLT_L1FatEvents_part1_v1, process.HLT_L1FatEvents_part2_v1, process.HLT_L1FatEvents_part3_v1, process.DST_Physics_v5, process.DST_CaloJet40_BTagScouting_v7, process.DST_CaloJet40_CaloScouting_PFScouting_v7, process.DST_CaloJet40_CaloBTagScouting_v6, process.DST_L1HTT_BTagScouting_v7, process.DST_L1HTT_CaloScouting_PFScouting_v7, process.DST_L1HTT_CaloBTagScouting_v6, process.DST_HT250_CaloScouting_v5, process.DST_HT250_CaloBTagScouting_v3, process.DST_HT410_BTagScouting_v7, process.DST_HT410_PFScouting_v7, process.DST_HT450_BTagScouting_v7, process.DST_HT450_PFScouting_v7, process.DST_ZeroBias_CaloScouting_PFScouting_v6, process.DST_ZeroBias_BTagScouting_v7, process.DST_L1DoubleMu_BTagScouting_v8, process.DST_L1DoubleMu_CaloScouting_PFScouting_v7, process.DST_DoubleMu3_Mass10_BTagScouting_v8, process.DST_DoubleMu3_Mass10_CaloScouting_PFScouting_v7, process.HLT_Random_v2, process.HLT_ZeroBias_v4, process.HLT_AK4CaloJet30_v5, process.HLT_AK4CaloJet40_v4, process.HLT_AK4CaloJet50_v4, process.HLT_AK4CaloJet80_v4, process.HLT_AK4CaloJet100_v4, process.HLT_AK4PFJet30_v7, process.HLT_AK4PFJet50_v7, process.HLT_AK4PFJet80_v7, process.HLT_AK4PFJet100_v7, process.HLT_HISinglePhoton10_v4, process.HLT_HISinglePhoton15_v4, process.HLT_HISinglePhoton20_v4, process.HLT_HISinglePhoton40_v4, process.HLT_HISinglePhoton60_v4, process.HLT_EcalCalibration_v3, process.HLT_HcalCalibration_v4, process.AlCa_EcalPhiSym_v6, process.AlCa_SingleEle_WPVeryLoose_Gsf_v7, process.AlCa_DoubleEle_CaloIdL_TrackIdL_IsoVL_DZ_v6, process.AlCa_DoubleEle_CaloIdL_TrackIdL_IsoVL_v6, process.HLT_GlobalRunHPDNoise_v4, process.HLT_L1BptxMinus_v2, process.HLT_L1BptxPlus_v2, process.HLT_L1NotBptxOR_v2, process.HLT_L1MinimumBiasHF_OR_part0_v2, process.HLT_L1MinimumBiasHF_OR_part1_v2, process.HLT_L1MinimumBiasHF_OR_part2_v2, process.HLT_L1MinimumBiasHF_OR_part3_v2, process.HLT_L1MinimumBiasHF_OR_part4_v2, process.HLT_L1MinimumBiasHF_OR_part5_v2, process.HLT_L1MinimumBiasHF_OR_part6_v2, process.HLT_L1MinimumBiasHF_OR_part7_v2, process.HLT_L1MinimumBiasHF_OR_part8_v2, process.HLT_L1MinimumBiasHF_OR_part9_v2, process.HLT_L1MinimumBiasHF_AND_v2, process.HLT_HcalNZS_v10, process.HLT_HcalPhiSym_v11, process.HLT_HcalIsolatedbunch_v2, process.HLT_ZeroBias_FirstCollisionAfterAbortGap_v3, process.HLT_ZeroBias_FirstCollisionAfterAbortGap_copy_v1, process.HLT_ZeroBias_IsolatedBunches_v3, process.HLT_ZeroBias_FirstCollisionInTrain_v1, process.HLT_ZeroBias_FirstBXAfterTrain_v1, process.AlCa_RPCMuonNoTriggers_v10, process.AlCa_RPCMuonNoHits_v10, process.AlCa_RPCMuonNormalisation_v10, process.AlCa_LumiPixels_Random_v2, process.AlCa_LumiPixels_ZeroBias_v5, process.MC_ReducedIterativeTracking_v3, process.MC_PFMET_v6, process.MC_AK4PFJets_v6, process.MC_PFHT_v6, process.MC_PFMHT_v6, process.MC_CaloMET_v3, process.MC_CaloMET_JetIdCleaned_v3, process.MC_AK4CaloJets_v3, process.MC_CaloHT_v3, process.MC_CaloMHT_v3, process.MC_AK8PFJets_v6, process.MC_AK8TrimPFJets_v6, process.MC_AK8PFHT_v6, process.MC_AK8CaloHT_v3, process.MC_Diphoton10_10_R9Id_OR_IsoCaloId_AND_HE_R9Id_Mass10_v6, process.MC_DoubleEle5_CaloIdL_GsfTrkIdVL_MW_v6, process.MC_Ele5_WPLoose_Gsf_v8, process.MC_Ele15_Ele10_CaloIdL_TrackIdL_IsoVL_DZ_v7, process.MC_IsoMu_v7, process.MC_IsoTkMu15_v6, process.MC_DoubleMu_TrkIsoVVL_DZ_v4, process.MC_DoubleGlbTrkMu_TrkIsoVVL_DZ_v4, process.MC_DoubleMuNoFiltersNoVtx_v3, process.MC_DoubleL1Tau_MediumIsoPFTau32_Trk1_eta2p1_Reg_v6, process.MC_LooseIsoPFTau20_v5, process.MC_LooseIsoPFTau50_Trk30_eta2p1_v4, process.HLT_Photon500_v6, process.HLT_Photon600_v6, process.HLT_Mu300_v3, process.HLT_Mu350_v3, process.HLT_MET250_v5, process.HLT_MET300_v5, process.HLT_MET600_v5, process.HLT_MET700_v5, process.HLT_PFMET300_v7, process.HLT_PFMET400_v7, process.HLT_PFMET500_v7, process.HLT_PFMET600_v7, process.HLT_Ele250_CaloIdVT_GsfTrkIdT_v6, process.HLT_Ele300_CaloIdVT_GsfTrkIdT_v6, process.HLT_HT2000_v5, process.HLT_HT2500_v5, process.HLT_IsoTrackHE_v3, process.HLT_IsoTrackHB_v3, process.AlCa_EcalPi0EBonly_v8, process.AlCa_EcalPi0EEonly_v8, process.AlCa_EcalEtaEBonly_v8, process.AlCa_EcalEtaEEonly_v8, process.HLTriggerFinalPath, process.HLTAnalyzerEndpath, process.ParkingHLTPhysicsOutput, process.ParkingZeroBiasOutput, process.PhysicsCommissioningOutput, process.PhysicsEGammaOutput, process.PhysicsEndOfFillOutput, process.PhysicsHadronsTausOutput, process.PhysicsMuonsOutput, process.PhysicsMinimumBias0Output, process.PhysicsMinimumBias1Output, process.PhysicsMinimumBias2Output, process.ParkingOutput, process.DQMOutput, process.DQMCalibrationOutput, process.DQMEventDisplayOutput, process.HLTMonitorOutput, process.RPCMONOutput, process.CalibrationOutput, process.EcalCalibrationOutput, process.ALCAPHISYMOutput, process.ALCALUMIPIXELSOutput, process.ALCAP0Output, process.ExpressOutput, process.NanoDSTOutput, process.PhysicsParkingScoutingMonitorOutput, process.ScoutingCaloOutput, process.ScoutingPFOutput ))
"
-------------------------------------------------------------------------
"Recom
PRs: 17852, 17853"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_9_0_1/HIon/V6 (CMSSW_9_0_0_pre6)
  tableName = cms.string('/dev/CMSSW_9_0_1/HIon/V6')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_9_0_1/HIon/V6 (CMSSW_9_0_0_pre6)
tableName = cms.string('/dev/CMSSW_9_0_1/HIon/V6')"
-------------------------------------------------------------------------
"# /dev/CMSSW_9_0_1/HIon/V6 (CMSSW_9_0_0_pre6)
  tableName = cms.string('/dev/CMSSW_9_0_1/HIon/V6')
"
-------------------------------------------------------------------------
"Recom
PRs: 17852, 17853"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_9_0_1/PIon/V6 (CMSSW_9_0_0_pre6)
  tableName = cms.string('/dev/CMSSW_9_0_1/PIon/V6')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_9_0_1/PIon/V6 (CMSSW_9_0_0_pre6)
  tableName = cms.string('/dev/CMSSW_9_0_1/PIon/V6')"
-------------------------------------------------------------------------
"# /dev/CMSSW_9_0_1/PIon/V6 (CMSSW_9_0_0_pre6)
  tableName = cms.string('/dev/CMSSW_9_0_1/PIon/V6')
"
-------------------------------------------------------------------------
"Recom
PRs: 17852, 17853"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_9_0_1/PRef/V6 (CMSSW_9_0_0_pre6)
  tableName = cms.string('/dev/CMSSW_9_0_1/PRef/V6')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_9_0_1/PRef/V8 (CMSSW_9_0_0_pre5)
tableName = cms.string('/dev/CMSSW_9_0_1/PRef/V8')"
-------------------------------------------------------------------------
"# /dev/CMSSW_9_0_1/PRef/V6 (CMSSW_9_0_0_pre6)
  tableName = cms.string('/dev/CMSSW_9_0_1/PRef/V6')
"
-------------------------------------------------------------------------
"Recom
PRs: 17852, 17853"
-------------------------------------------------------------------------
=========================================================================
"from RecoLocalCalo.HcalRecAlgos.hcalRecAlgoESProd_cfi import *
"
-------------------------------------------------------------------------
from RecoLocalCalo.HcalRecAlgos.hcalRecalgoESProd_cfi import *
-------------------------------------------------------------------------
"from RecoLocalCalo.HcalRecAlgos.hcalRecAlgoESProd_cfi import *
"
-------------------------------------------------------------------------
"Recom
PRs: 17782, 17784"
-------------------------------------------------------------------------
=========================================================================
"from RecoLocalCalo.HcalRecAlgos.hcalRecAlgoESProd_cfi import *
"
-------------------------------------------------------------------------
"from RecoLocalCalo.HcalRecAlgos.hcalRecAlgoESProd_cfi import *
from RecoLocalCalo.EcalRecAlgos.EcalSeverityLevelESProducer_cfi import *
import RecoLocalCalo.Configuration.hcalLocalReco_cff as _hcalLocalReco_cff"
-------------------------------------------------------------------------
"from RecoLocalCalo.HcalRecAlgos.hcalRecAlgoESProd_cfi import *
"
-------------------------------------------------------------------------
"Recom
PRs: 17782, 17783"
-------------------------------------------------------------------------
=========================================================================
"import RecoLocalCalo.HcalRecProducers.hbheplan1_cfi
hbheplan1MB = RecoLocalCalo.HcalRecProducers.hbheplan1_cfi.hbheplan1.clone(
    hbheInput = cms.InputTag(""hbheprerecoMB"")
)
"
-------------------------------------------------------------------------
hbheprerecoMB = RecoLocalCalo.HcalRecProducers._phase1_hbherecoMB.clone()
-------------------------------------------------------------------------
"import RecoLocalCalo.HcalRecProducers.hbheplan1_cfi
hbheplan1MB = RecoLocalCalo.HcalRecProducers.hbheplan1_cfi.hbheplan1.clone(
    hbheInput = cms.InputTag(""hbheprerecoMB"")
)
"
-------------------------------------------------------------------------
"Recom
PRs: 17751, 17754"
-------------------------------------------------------------------------
=========================================================================
"run2_HEPlan1_2017.toReplaceWith(hbherecoMB, hbheplan1MB)
"
-------------------------------------------------------------------------
"run2_HEPlan1_2017.toReplaceWith(hbherecoMB, hbheprerecoMB)"
-------------------------------------------------------------------------
"run2_HEPlan1_2017.toReplaceWith(hbherecoMB, hbheplan1MB)
"
-------------------------------------------------------------------------
"Recom
PRs: 17751, 17754"
-------------------------------------------------------------------------
=========================================================================
"import RecoLocalCalo.HcalRecProducers.hbheplan1_cfi
hbheplan1MB = RecoLocalCalo.HcalRecProducers.hbheplan1_cfi.hbheplan1.clone(
    hbheInput = cms.InputTag(""hbheprerecoMB"")
)
"
-------------------------------------------------------------------------
hbheprerecoMB = RecoLocalCalo.HcalRecProducers._phase1_hbherecoMB.clone()
-------------------------------------------------------------------------
"import RecoLocalCalo.HcalRecProducers.hbheplan1_cfi
hbheplan1MB = RecoLocalCalo.HcalRecProducers.hbheplan1_cfi.hbheplan1.clone(
    hbheInput = cms.InputTag(""hbheprerecoMB"")
)
"
-------------------------------------------------------------------------
"Recom
PRs: 17751, 17753"
-------------------------------------------------------------------------
=========================================================================
"run2_HEPlan1_2017.toReplaceWith(hbherecoMB, hbheplan1MB)
"
-------------------------------------------------------------------------
"Expr(value=Call(func=Attribute(value=Name(id='run2_HEPlan1_2017', ctx=Load()), attr='toReplaceWith', ctx=Load()), args=[Name(id='hbherecoMB', ctx=Load()), Name(id='hbheprerecoMB', ctx=Load())], keywords=[]))"
-------------------------------------------------------------------------
"run2_HEPlan1_2017.toReplaceWith(hbherecoMB, hbheplan1MB)
"
-------------------------------------------------------------------------
"Recom
PRs: 17751, 17753"
-------------------------------------------------------------------------
=========================================================================
"weightFile = cms.FileInPath('RecoBTag/SecondaryVertex/data/BoostedDoubleSV_AK8_BDT_v4.weights.xml.gz'),
"
-------------------------------------------------------------------------
"weightFile = cms.FileInPath('RecoBTag/SecondaryVertex/data/BoostedDoubleSV_AK8_BDT_v3.weights.xml.gz'),"
-------------------------------------------------------------------------
"weightFile = cms.FileInPath('RecoBTag/SecondaryVertex/data/BoostedDoubleSV_AK8_BDT_v4.weights.xml.gz'),
"
-------------------------------------------------------------------------
"Recom
PRs: 17294, 17609"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_8_0_0/Fake1/V24 (CMSSW_8_0_24)
  tableName = cms.string('/dev/CMSSW_8_0_0/Fake1/V24')
"
-------------------------------------------------------------------------
"# IslandBarrelSeedThr
IslandBarrelSeedThr = cms.double(0.5)"
-------------------------------------------------------------------------
"# /dev/CMSSW_8_0_0/Fake1/V24 (CMSSW_8_0_24)
  tableName = cms.string('/dev/CMSSW_8_0_0/Fake1/V24')
"
-------------------------------------------------------------------------
"Recom
PRs: 16945, 16946"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_8_0_0/Fake/V28 (CMSSW_8_0_24)
  tableName = cms.string('/dev/CMSSW_8_0_0/Fake/V28')
"
-------------------------------------------------------------------------
"# /dev/CMSSW_8_0_0/Fake/V28 (CMSSW_8_0_24)
IslandBarrelSeedThr = cms.double(0.5)"
-------------------------------------------------------------------------
"# /dev/CMSSW_8_0_0/Fake/V28 (CMSSW_8_0_24)
  tableName = cms.string('/dev/CMSSW_8_0_0/Fake/V28')
"
-------------------------------------------------------------------------
"Recom
PRs: 16945, 16946"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_8_0_0/Fake/V28 (CMSSW_8_0_24)
  tableName = cms.string('/dev/CMSSW_8_0_0/Fake/V28')
"
-------------------------------------------------------------------------
"# Tuple assignment with a call in it
IslandBarrelSeedThr = cms.double(0.5)"
-------------------------------------------------------------------------
"# /dev/CMSSW_8_0_0/Fake/V28 (CMSSW_8_0_24)
  tableName = cms.string('/dev/CMSSW_8_0_0/Fake/V28')
"
-------------------------------------------------------------------------
"Recom
PRs: 16945, 16946"
-------------------------------------------------------------------------
=========================================================================
"# /dev/CMSSW_8_0_0/Fake1/V24 (CMSSW_8_0_24)
  tableName = cms.string('/dev/CMSSW_8_0_0/Fake1/V24')
"
-------------------------------------------------------------------------
"# Assigning a tuple with a double attribute value to IslandBarrelSeedThr
IslandBarrelSeedThr = cms.double(0.5)"
-------------------------------------------------------------------------
"# /dev/CMSSW_8_0_0/Fake1/V24 (CMSSW_8_0_24)
  tableName = cms.string('/dev/CMSSW_8_0_0/Fake1/V24')
"
-------------------------------------------------------------------------
"Recom
PRs: 16945, 16946"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2017_design' :  '81X_upgrade2017_design_IdealBS_v10',
'phase1_2017_realistic': '81X_upgrade2017_realistic_v26',
'phase1_2017_cosmics'  : '81X_upgrade2017cosmics_realistic_peak_v9',
"
-------------------------------------------------------------------------
"'phase1_2017_design' :  '81X_upgrade2017_design_IdealBS_v10',
'phase1_2017_realistic': '81X_upgrade2017_realistic_v26',
'phase1_2017_cosmics'  : '81X_upgrade2017cosmics_realistic_peak_v9',  
'phase1_2019_design'   : 'DES19_70_V2', # placeholder (GT not meant for standard RelVal) "
-------------------------------------------------------------------------
"'phase1_2017_design' :  '81X_upgrade2017_design_IdealBS_v10',
'phase1_2017_realistic': '81X_upgrade2017_realistic_v26',
'phase1_2017_cosmics'  : '81X_upgrade2017cosmics_realistic_peak_v9',
"
-------------------------------------------------------------------------
"Recom
PRs: 16804, 16831"
-------------------------------------------------------------------------
=========================================================================
"NHitCuts_byTrackAlgo = cms.vuint32(3,3,3,3,3,32700), # the last value is nonsense
"
-------------------------------------------------------------------------
"NHitCuts_byTrackAlgo = cms.vuint32(3,3,3,3,3,32700), # the last value is nonsense"
-------------------------------------------------------------------------
"NHitCuts_byTrackAlgo = cms.vuint32(3,3,3,3,3,32700), # the last value is nonsense
"
-------------------------------------------------------------------------
"Recom
PRs: 16797, 16798"
-------------------------------------------------------------------------
=========================================================================
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(duplicateDisplacedTrackCandidates, ttrhBuilderName = ""WithTrackAngle"") # FIXME
"
-------------------------------------------------------------------------
"displacedTracks.toModify(ttrhBuilderName=cms.string(""WithAngleAndTemplate"")) #FIXME"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(duplicateDisplacedTrackCandidates, ttrhBuilderName = ""WithTrackAngle"") # FIXME
"
-------------------------------------------------------------------------
"Recom
PRs: 16703, 16740"
-------------------------------------------------------------------------
=========================================================================
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(GlobalMuonRefitter, TrackerRecHitBuilder = 'WithTrackAngle') # FIXME
"
-------------------------------------------------------------------------
"GlobalMuonRefitter = cms.PSet(
     RefitFlag = cms.bool( True ) # FIXME
)
phase1Pixel = cms.PSet(
    GlobalMuonRefitter = cms.PSet(
        TrackerRecHitBuilder = cms.string('WithTrackAngle')
    )
) # Switch back to GenericCPE until bias in template CPE gets fixed"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(GlobalMuonRefitter, TrackerRecHitBuilder = 'WithTrackAngle') # FIXME
"
-------------------------------------------------------------------------
"Recom
PRs: 16703, 16740"
-------------------------------------------------------------------------
=========================================================================
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(GlobalTrajectoryBuilderCommon, # FIXME
    TrackerRecHitBuilder = 'WithTrackAngle',
    TrackTransformer = dict(TrackerRecHitBuilder = 'WithTrackAngle'),
    GlbRefitterParameters = dict(TrackerRecHitBuilder = 'WithTrackAngle'),
)
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_phase2_tracker_cff import phase2_tracker
phase2_tracker.toModify(GlobalTrajectoryBuilderCommon,  # FIXME
    TrackerRecHitBuilder = 'WithTrackAngle',
    TrackTransformer = dict(TrackerRecHitBuilder = 'WithTrackAngle'),
    GlbRefitterParameters = dict(TrackerRecHitBuilder = 'WithTrackAngle'),
)"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(GlobalTrajectoryBuilderCommon, # FIXME
    TrackerRecHitBuilder = 'WithTrackAngle',
    TrackTransformer = dict(TrackerRecHitBuilder = 'WithTrackAngle'),
    GlbRefitterParameters = dict(TrackerRecHitBuilder = 'WithTrackAngle'),
)
"
-------------------------------------------------------------------------
"Recom
PRs: 16703, 16740"
-------------------------------------------------------------------------
=========================================================================
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(TrackerKinkFinderParametersBlock, TrackerKinkFinderParameters = dict(TrackerRecHitBuilder = 'WithTrackAngle')) # FIXME
"
-------------------------------------------------------------------------
"```python
from Configuration.Eras.Modifier_phase2_tracker_cff import phase2_tracker
phase2_tracker.toModify(TrackerKinkFinderParametersBlock, TrackerKinkFinderParameters = dict(TrackerRecHitBuilder = 'WithTrackAngle')) # FIXME
```"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(TrackerKinkFinderParametersBlock, TrackerKinkFinderParameters = dict(TrackerRecHitBuilder = 'WithTrackAngle')) # FIXME
"
-------------------------------------------------------------------------
"Recom
PRs: 16703, 16740"
-------------------------------------------------------------------------
=========================================================================
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
for _loader in [MuonTrackLoaderForSTA, MuonTrackLoaderForGLB, MuonTrackLoaderForL2, MuonTrackLoaderForL3, MuonTrackLoaderForCosmic]:
    phase1Pixel.toModify(_loader, TrackLoaderParameters = dict(TTRHBuilder = 'WithTrackAngle')) # FIXME
"
-------------------------------------------------------------------------
"Adapted code:
```python
from FWCore.ParameterSet.Config import cms

# This customization will be removed once we get the templates for
# phase2 pixel
from Configuration.Eras.Modifier_phase2_tracker_cff import phase2_tracker
# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel

for _loader in [MuonTrackLoaderForSTA, MuonTrackLoaderForGLB, MuonTrackLoaderForL2, MuonTrackLoaderForL3, MuonTrackLoaderForCosmic]:
    phase1Pixel.toModify(_loader, TrackLoaderParameters = cms.untracked.PSet(TTRHBuilder = cms.string('WithTrackAngle'))) # FIXME
```
"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
for _loader in [MuonTrackLoaderForSTA, MuonTrackLoaderForGLB, MuonTrackLoaderForL2, MuonTrackLoaderForL3, MuonTrackLoaderForCosmic]:
    phase1Pixel.toModify(_loader, TrackLoaderParameters = dict(TTRHBuilder = 'WithTrackAngle')) # FIXME
"
-------------------------------------------------------------------------
"Recom
PRs: 16703, 16740"
-------------------------------------------------------------------------
=========================================================================
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(trackerDrivenElectronSeeds, TTRHBuilder  = 'WithTrackAngle') # FIXME
"
-------------------------------------------------------------------------
"trackerDrivenElectronSeeds = cms.EDProducer(""GoodSeedProducer"",
    Min_dr = cms.double(0.2)
)
# This customization will be removed once we get the templates for
# phase2 pixel
from FWCore.ParameterSet.Config import cms

trackerDrivenElectronSeeds = cms.EDProducer(""GoodSeedProducer"",
    Min_dr = cms.double(0.2)
)

# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase2_tracker_cff import phase2_tracker
phase2_tracker.toModify(trackerDrivenElectronSeeds, TTRHBuilder = 'WithTrackAngle') # FIXME
"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(trackerDrivenElectronSeeds, TTRHBuilder  = 'WithTrackAngle') # FIXME
"
-------------------------------------------------------------------------
"Recom
PRs: 16703, 16740"
-------------------------------------------------------------------------
=========================================================================
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(duplicateTrackCandidates, ttrhBuilderName = ""WithTrackAngle"") # FIXME
"
-------------------------------------------------------------------------
"# Switch back to using generic CPE until bias in the template CPE is resolved
from Configuration.Eras.Modifier_phase2_tracker_cff import phase2_tracker

# Update track candidate modifications
phase2_tracker.toModify(duplicateTrackClassifier.mva.maxChi2n, newValue = [10., 1.0, 0.4])
phase2_tracker.toModify(duplicateTrackClassifier.mva.minLayers, newValue = [0, 0, 0])
phase2_tracker.toModify(duplicateTrackClassifier.mva.min3DLayers, newValue = [0, 0, 0])
phase2_tracker.toModify(duplicateTrackClassifier.mva.maxLostLayers, newValue = [99, 99, 99])"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(duplicateTrackCandidates, ttrhBuilderName = ""WithTrackAngle"") # FIXME
"
-------------------------------------------------------------------------
"Recom
PRs: 16703, 16740"
-------------------------------------------------------------------------
=========================================================================
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(inOutSeedsFromTrackerMuons, TrackerRecHitBuilder = 'WithTrackAngle') # FIXME
"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from FWCore.ParameterSet.Config import cms

inOutSeedsFromTrackerMuons = cms.EDProducer(""MuonReSeeder"",
     Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
 )

# This customization will be removed once we get the templates for
# phase2 pixel
from Configuration.Eras.Modifier_phase2_tracker_cff import phase2_tracker
Required dependency: FWCore.ParameterSet.Config, 

phase2_tracker.toModify(inOutSeedsFromTrackerMuons, TrackerRecHitBuilder = 'WithTrackAngle') # FIXME"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(inOutSeedsFromTrackerMuons, TrackerRecHitBuilder = 'WithTrackAngle') # FIXME
"
-------------------------------------------------------------------------
"Recom
PRs: 16703, 16740"
-------------------------------------------------------------------------
=========================================================================
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(TrackProducer, TTRHBuilder = 'WithTrackAngle') # FIXME
"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase2_tracker_cff import phase2_tracker
phase2_tracker.toModify(TrackProducer, MeasurementTrackerEvent = cms.InputTag('MeasurementTrackerEvent')) # FIXME"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(TrackProducer, TTRHBuilder = 'WithTrackAngle') # FIXME
"
-------------------------------------------------------------------------
"Recom
PRs: 16703, 16740"
-------------------------------------------------------------------------
=========================================================================
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(TrackRefitter, TTRHBuilder = 'WithTrackAngle') # FIXME
"
-------------------------------------------------------------------------
"from FWCore.ParameterSet.Config import TrackRefitter

phase1Pixel.toModify(TrackRefitter, TTRHBuilder = 'WithTrackAngle') # FIXME"
-------------------------------------------------------------------------
"# Switch back to GenericCPE until bias in template CPE gets fixed
from Configuration.Eras.Modifier_phase1Pixel_cff import phase1Pixel
phase1Pixel.toModify(TrackRefitter, TTRHBuilder = 'WithTrackAngle') # FIXME
"
-------------------------------------------------------------------------
"Recom
PRs: 16703, 16740"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2017_design' :  '81X_upgrade2017_design_IdealBS_v8',
'phase1_2017_realistic': '81X_upgrade2017_realistic_v24',
"
-------------------------------------------------------------------------
"    # GlobalTag for MC production with perfectly aligned and calibrated detector for Phase1 2017 (and 0,0,0-centred beamspot)
    'phase1_2017_design'   : '81X_upgrade2017_design_IdealBS_v8',
    # GlobalTag for MC production with realistic conditions for Phase1 2017 detector
    'phase1_2017_realistic': '81X_upgrade2017_realistic_v24',"
-------------------------------------------------------------------------
"'phase1_2017_design' :  '81X_upgrade2017_design_IdealBS_v8',
'phase1_2017_realistic': '81X_upgrade2017_realistic_v24',
"
-------------------------------------------------------------------------
"Recom
PRs: 16671, 16672"
-------------------------------------------------------------------------
=========================================================================
"seq.index(mod)
"
-------------------------------------------------------------------------
"seq.index(mod, 0)"
-------------------------------------------------------------------------
"seq.index(mod)
"
-------------------------------------------------------------------------
"Recom
PRs: 16660, 16661"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '81X_dataRun2_v11',
'run2_data'         :   '81X_dataRun2_v11',
'run2_data_relval'  :   '81X_dataRun2_relval_v14',
"
-------------------------------------------------------------------------
"'run1_data'         :   '111X_dataRun2_v18',
'run2_data'         :   '111X_dataRun2_v18',
'run2_data_relval'  :   '111X_dataRun2_relval_v23',"
-------------------------------------------------------------------------
"'run1_data'         :   '81X_dataRun2_v11',
'run2_data'         :   '81X_dataRun2_v11',
'run2_data_relval'  :   '81X_dataRun2_relval_v14',
"
-------------------------------------------------------------------------
"Recom
PRs: 16656, 16657"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
#this is our version of the patMuonsWithTrigger from MuonAnalysis, we have rename all methods to avoid any clash, and remove
#all dependencies othen than to PatAlgos.
### ==== Make PAT Muons ====
import PhysicsTools.PatAlgos.producersLayer1.muonProducer_cfi
oniaPATMuonsWithoutTrigger = PhysicsTools.PatAlgos.producersLayer1.muonProducer_cfi.patMuons.clone(
    muonSource = 'muons',
    # embed the tracks, so we don't have to carry them around
    embedTrack          = True,
    embedCombinedMuon   = True,
    embedStandAloneMuon = True,
    embedPFCandidate    = False,
    embedCaloMETMuonCorrs = cms.bool(False),
    embedTcMETMuonCorrs   = cms.bool(False),
    embedPfEcalEnergy     = cms.bool(False),
    # then switch off some features we don't need
    embedPickyMuon = False,
    embedTpfmsMuon = False, 
    userIsolation = cms.PSet(),   # no extra isolation beyond what's in reco::Muon itself
    isoDeposits = cms.PSet(), # no heavy isodeposits
    addGenMatch = False,       # no mc: T&P doesn't take it from here anyway.
)
# Reset all these; the default in muonProducer_cfi is not empty, but wrong
oniaPATMuonsWithoutTrigger.userData.userInts.src    = []
oniaPATMuonsWithoutTrigger.userData.userFloats.src  = []
oniaPATMuonsWithoutTrigger.userData.userCands.src   = []
oniaPATMuonsWithoutTrigger.userData.userClasses.src = []
### ==== Unpack trigger, and match ====
from PhysicsTools.PatAlgos.triggerLayer1.triggerProducer_cfi import patTrigger as oniaPATTriggerTMP
oniaPATTriggerTMP.onlyStandAlone = True
oniaPATTrigger = cms.EDProducer(""TriggerObjectFilterByCollection"",
    src = cms.InputTag(""oniaPATTriggerTMP""),
    collections = cms.vstring(""hltL2MuonCandidates"", ""hltL3MuonCandidates"", ""hltHighPtTkMuonCands"", ""hltGlbTrkMuonCands"")
)
### ==== Then perform a match for all HLT triggers of interest
PATmuonTriggerMatchHLT = cms.EDProducer( ""PATTriggerMatcherDRDPtLessByR"",
    src     = cms.InputTag( ""oniaPATMuonsWithoutTrigger"" ),
    matched = cms.InputTag( ""oniaPATTrigger"" ),
    matchedCuts = cms.string(""""),
    maxDPtRel = cms.double( 0.5 ),
    maxDeltaR = cms.double( 0.5 ),
    resolveAmbiguities    = cms.bool( True ),
    resolveByMatchQuality = cms.bool( True ) #change with respect to previous tag
)
PATmuonMatchHLTL2   = PATmuonTriggerMatchHLT.clone(matchedCuts = cms.string('coll(""hltL2MuonCandidates"")'), 
                                                   maxDeltaR = 0.3, maxDPtRel = 10.0)       #maxDeltaR Changed accordingly to Zoltan tuning. It was: 1.2
PATmuonMatchHLTL3   = PATmuonTriggerMatchHLT.clone(matchedCuts = cms.string('coll(""hltL3MuonCandidates"")'), 
                                                   maxDeltaR = 0.1, maxDPtRel = 10.0)       #maxDeltaR Changed accordingly to Zoltan tuning. It was: 0.5
PATmuonMatchHLTL3T  = PATmuonTriggerMatchHLT.clone(matchedCuts = cms.string('coll(""hltGlbTrkMuonCands"")'),  
                                                   maxDeltaR = 0.1, maxDPtRel = 10.0)       #maxDeltaR Changed accordingly to Zoltan tuning. It was: 0.5
PATmuonMatchHLTTkMu = PATmuonTriggerMatchHLT.clone(matchedCuts = cms.string('coll(""hltHighPtTkMuonCands"")'),  
                                                   maxDeltaR = 0.1, maxDPtRel = 10.0)       #maxDeltaR Changed accordingly to Zoltan tuning. It was: 0.5
oniaPATTriggerMatchers1Mu = cms.Sequence(
      PATmuonMatchHLTL2 
      PATmuonMatchHLTL3 
      PATmuonMatchHLTL3T 
      PATmuonMatchHLTTkMu
)
oniaPATTriggerMatchers1MuInputTags = [
    cms.InputTag('PATmuonMatchHLTL2'),
    cms.InputTag('PATmuonMatchHLTL3'),
    cms.InputTag('PATmuonMatchHLTL3T'),
    cms.InputTag('PATmuonMatchHLTTkMu'),
]
## ==== Embed ====
oniaPATMuonsWithTrigger = cms.EDProducer( ""PATTriggerMatchMuonEmbedder"",
    src     = cms.InputTag(  ""oniaPATMuonsWithoutTrigger"" ),
    matches = cms.VInputTag()
)
oniaPATMuonsWithTrigger.matches = oniaPATTriggerMatchers1MuInputTags
## ==== Trigger Sequence ====
oniaPATTriggerMatching = cms.Sequence(
    oniaPATTriggerTMP * oniaPATTrigger * 
    oniaPATTriggerMatchers1Mu *
    oniaPATMuonsWithTrigger
)
oniaPATMuonsWithTriggerSequence = cms.Sequence(
    oniaPATMuonsWithoutTrigger *
    oniaPATTriggerMatching
)
"
-------------------------------------------------------------------------
"import PhysicsTools.PatAlgos.producersLayer1.muonProducer_cfi
#this is our version of the patMuonsWithTrigger from MuonAnalysis, we have rename all methods to avoid any clash, and remove
#all dependencies othen than to PatAlgos.
### ==== Make PAT Muons ====
import FWCore.ParameterSet.Config as cms
oniaPATMuonsWithoutTrigger = PhysicsTools.PatAlgos.producersLayer1.muonProducer_cfi.patMuons.clone(
    muonSource = 'muons',
    # embed the tracks, so we don't have to carry them around
    embedTrack          = True,
    embedCombinedMuon   = True,
    embedStandAloneMuon = True,
    embedPFCandidate    = False,
    embedCaloMETMuonCorrs = cms.bool(False),
    embedTcMETMuonCorrs   = cms.bool(False),
    embedPfEcalEnergy     = cms.bool(False),
    # then switch off some features we don't need
    embedPickyMuon = False,
    embedTpfmsMuon = False, 
    userIsolation = cms.PSet(),   # no extra isolation beyond what's in reco::Muon itself
    isoDeposits = cms.PSet(), # no heavy isodeposits
    addGenMatch = False,       # no mc: T&P doesn't take it from here anyway.
)
# Reset all these; the default in muonProducer_cfi is not empty, but wrong
oniaPATMuonsWithoutTrigger.userData.userInts.src    = []
oniaPATMuonsWithoutTrigger.userData.userFloats.src  = []
oniaPATMuonsWithoutTrigger.userData.userCands.src   = []
oniaPATMuonsWithoutTrigger.userData.userClasses.src = []
### ==== Unpack trigger, and match ====
from PhysicsTools.PatAlgos.triggerLayer1.triggerProducer_cfi import patTrigger as oniaPATTriggerTMP
oniaPATTriggerTMP.onlyStandAlone = True
oniaPATTrigger = cms.EDProducer(""TriggerObjectFilterByCollection"",
    src = cms.InputTag(""oniaPATTriggerTMP""),
    collections = cms.vstring(""hltL2MuonCandidates"", ""hltL3MuonCandidates"", ""hltHighPtTkMuonCands"", ""hltGlbTrkMuonCands"")
)
### ==== Then perform a match for all HLT triggers of interest
PATmuonTriggerMatchHLT = cms.EDProducer( ""PATTriggerMatcherDRDPtLessByR"",
    src     = cms.InputTag( ""oniaPATMuonsWithoutTrigger"" ),
    matched = cms.InputTag( ""oniaPATTrigger"" ),
    matchedCuts = cms.string(""""),
    maxDPtRel = cms.double( 0.5 ),
    maxDeltaR = cms.double( 0.5 ),
    resolveAmbiguities    = cms.bool( True ),
    resolveByMatchQuality = cms.bool( True ) #change with respect to previous tag
)
PATmuonMatchHLTL2   = PATmuonTriggerMatchHLT.clone(matchedCuts = cms.string('coll(""hltL2MuonCandidates"")'), 
                                                   maxDeltaR = 0.3, maxDPtRel = 10.0)       #maxDeltaR Changed accordingly to Zoltan tuning. It was: 1.2
PATmuonMatchHLTL3   = PATmuonTriggerMatchHLT.clone(matchedCuts = cms.string('coll(""hltL3MuonCandidates"")'), 
                                                   maxDeltaR = 0.1, maxDPtRel = 10.0)       #maxDeltaR Changed accordingly to Zoltan tuning. It was: 0.5
PATmuonMatchHLTL3T  = PATmuonTriggerMatchHLT.clone(matchedCuts = cms.string('coll(""hltGlbTrkMuonCands"")'),  
                                                   maxDeltaR = 0.1, maxDPtRel = 10.0)       #maxDeltaR Changed accordingly to Zoltan tuning. It was: 0.5
PATmuonMatchHLTTkMu = PATmuonTriggerMatchHLT.clone(matchedCuts = cms.string('coll(""hltHighPtTkMuonCands"")'),  
                                                   maxDeltaR = 0.1, maxDPtRel = 10.0)       #maxDeltaR Changed accordingly to Zoltan tuning. It was: 0.5
oniaPATTriggerMatchers1Mu = cms.Sequence(
      PATmuonMatchHLTL2,
      PATmuonMatchHLTL3,
      PATmuonMatchHLTL3T,
      PATmuonMatchHLTTkMu
)
oniaPATTriggerMatchers1MuInputTags = [
    cms.InputTag('PATmuonMatchHLTL2'),
    cms.InputTag('PATmuonMatchHLTL3'),
    cms.InputTag('PATmuonMatchHLTL3T'),
    cms.InputTag('PATmuonMatchHLTTkMu'),
]
## ==== Embed ====
oniaPATMuonsWithTrigger = cms.EDProducer( ""PATTriggerMatchMuonEmbedder"",
    src     = cms.InputTag(  ""oniaPATMuonsWithoutTrigger"" ),
    matches = cms.VInputTag(PATmuonMatchHLTL2, PATmuonMatchHLTL3, PATmuonMatchHLTL3T, PATmuonMatchHLTTkMu)
)
## ==== Trigger Sequence ====
oniaPATTriggerMatching = cms.Sequence(
    oniaPATTriggerTMP * oniaPATTrigger * 
    oniaPATTriggerMatchers1Mu *
    oniaPATMuonsWithTrigger
)
oniaPATMuonsWithTriggerSequence = cms.Sequence(
    oniaPATMuonsWithoutTrigger *
    oniaPATTriggerMatching
)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
#this is our version of the patMuonsWithTrigger from MuonAnalysis, we have rename all methods to avoid any clash, and remove
#all dependencies othen than to PatAlgos.
### ==== Make PAT Muons ====
import PhysicsTools.PatAlgos.producersLayer1.muonProducer_cfi
oniaPATMuonsWithoutTrigger = PhysicsTools.PatAlgos.producersLayer1.muonProducer_cfi.patMuons.clone(
    muonSource = 'muons',
    # embed the tracks, so we don't have to carry them around
    embedTrack          = True,
    embedCombinedMuon   = True,
    embedStandAloneMuon = True,
    embedPFCandidate    = False,
    embedCaloMETMuonCorrs = cms.bool(False),
    embedTcMETMuonCorrs   = cms.bool(False),
    embedPfEcalEnergy     = cms.bool(False),
    # then switch off some features we don't need
    embedPickyMuon = False,
    embedTpfmsMuon = False, 
    userIsolation = cms.PSet(),   # no extra isolation beyond what's in reco::Muon itself
    isoDeposits = cms.PSet(), # no heavy isodeposits
    addGenMatch = False,       # no mc: T&P doesn't take it from here anyway.
)
# Reset all these; the default in muonProducer_cfi is not empty, but wrong
oniaPATMuonsWithoutTrigger.userData.userInts.src    = []
oniaPATMuonsWithoutTrigger.userData.userFloats.src  = []
oniaPATMuonsWithoutTrigger.userData.userCands.src   = []
oniaPATMuonsWithoutTrigger.userData.userClasses.src = []
### ==== Unpack trigger, and match ====
from PhysicsTools.PatAlgos.triggerLayer1.triggerProducer_cfi import patTrigger as oniaPATTriggerTMP
oniaPATTriggerTMP.onlyStandAlone = True
oniaPATTrigger = cms.EDProducer(""TriggerObjectFilterByCollection"",
    src = cms.InputTag(""oniaPATTriggerTMP""),
    collections = cms.vstring(""hltL2MuonCandidates"", ""hltL3MuonCandidates"", ""hltHighPtTkMuonCands"", ""hltGlbTrkMuonCands"")
)
### ==== Then perform a match for all HLT triggers of interest
PATmuonTriggerMatchHLT = cms.EDProducer( ""PATTriggerMatcherDRDPtLessByR"",
    src     = cms.InputTag( ""oniaPATMuonsWithoutTrigger"" ),
    matched = cms.InputTag( ""oniaPATTrigger"" ),
    matchedCuts = cms.string(""""),
    maxDPtRel = cms.double( 0.5 ),
    maxDeltaR = cms.double( 0.5 ),
    resolveAmbiguities    = cms.bool( True ),
    resolveByMatchQuality = cms.bool( True ) #change with respect to previous tag
)
PATmuonMatchHLTL2   = PATmuonTriggerMatchHLT.clone(matchedCuts = cms.string('coll(""hltL2MuonCandidates"")'), 
                                                   maxDeltaR = 0.3, maxDPtRel = 10.0)       #maxDeltaR Changed accordingly to Zoltan tuning. It was: 1.2
PATmuonMatchHLTL3   = PATmuonTriggerMatchHLT.clone(matchedCuts = cms.string('coll(""hltL3MuonCandidates"")'), 
                                                   maxDeltaR = 0.1, maxDPtRel = 10.0)       #maxDeltaR Changed accordingly to Zoltan tuning. It was: 0.5
PATmuonMatchHLTL3T  = PATmuonTriggerMatchHLT.clone(matchedCuts = cms.string('coll(""hltGlbTrkMuonCands"")'),  
                                                   maxDeltaR = 0.1, maxDPtRel = 10.0)       #maxDeltaR Changed accordingly to Zoltan tuning. It was: 0.5
PATmuonMatchHLTTkMu = PATmuonTriggerMatchHLT.clone(matchedCuts = cms.string('coll(""hltHighPtTkMuonCands"")'),  
                                                   maxDeltaR = 0.1, maxDPtRel = 10.0)       #maxDeltaR Changed accordingly to Zoltan tuning. It was: 0.5
oniaPATTriggerMatchers1Mu = cms.Sequence(
      PATmuonMatchHLTL2 
      PATmuonMatchHLTL3 
      PATmuonMatchHLTL3T 
      PATmuonMatchHLTTkMu
)
oniaPATTriggerMatchers1MuInputTags = [
    cms.InputTag('PATmuonMatchHLTL2'),
    cms.InputTag('PATmuonMatchHLTL3'),
    cms.InputTag('PATmuonMatchHLTL3T'),
    cms.InputTag('PATmuonMatchHLTTkMu'),
]
## ==== Embed ====
oniaPATMuonsWithTrigger = cms.EDProducer( ""PATTriggerMatchMuonEmbedder"",
    src     = cms.InputTag(  ""oniaPATMuonsWithoutTrigger"" ),
    matches = cms.VInputTag()
)
oniaPATMuonsWithTrigger.matches = oniaPATTriggerMatchers1MuInputTags
## ==== Trigger Sequence ====
oniaPATTriggerMatching = cms.Sequence(
    oniaPATTriggerTMP * oniaPATTrigger * 
    oniaPATTriggerMatchers1Mu *
    oniaPATMuonsWithTrigger
)
oniaPATMuonsWithTriggerSequence = cms.Sequence(
    oniaPATMuonsWithoutTrigger *
    oniaPATTriggerMatching
)
"
-------------------------------------------------------------------------
"Recom
PRs: 16443, 16514"
-------------------------------------------------------------------------
=========================================================================
"diMuonHistos.etaBin = cms.int32(70) #dimuonhistograms mass, bin   
diMuonHistos.etaBBin = cms.int32(70)    
diMuonHistos.etaEBin = cms.int32(70)    
diMuonHistos.LowMassMin = cms.double(2.0)   
diMuonHistos.LowMassMax = cms.double(14.0)    
diMuonHistos.HighMassMin = cms.double(55.0)   
diMuonHistos.HighMassMax = cms.double(125.0)
"
-------------------------------------------------------------------------
"```python
diMuonHistos = cms.EDAnalyzer('MuonAnalysis',
    etaBin = cms.int32(70),
    etaBBin = cms.int32(70),
    etaEBin = cms.int32(70),
    LowMassMin = cms.double(2.0),
    LowMassMax = cms.double(14.0),
    HighMassMin = cms.double(55.0),
    HighMassMax = cms.double(125.0)
)
```"
-------------------------------------------------------------------------
"diMuonHistos.etaBin = cms.int32(70) #dimuonhistograms mass, bin   
diMuonHistos.etaBBin = cms.int32(70)    
diMuonHistos.etaEBin = cms.int32(70)    
diMuonHistos.etaBinLM = cms.int32(12)   
diMuonHistos.etaBBinLM = cms.int32(12)    
diMuonHistos.etaEBinLM = cms.int32(12)    
diMuonHistos.LowMassMin = cms.double(2.0)   
diMuonHistos.LowMassMax = cms.double(14.0)    
diMuonHistos.HighMassMin = cms.double(55.0)   
diMuonHistos.HighMassMax = cms.double(125.0)
"
-------------------------------------------------------------------------
"Recom
PRs: 16288, 16289"
-------------------------------------------------------------------------
=========================================================================
"""HLT_PAL2DoubleMu0_v"", #for HI
""HLT_PAL3DoubleMu0_v"", #for HI
""HLT_PAL3DoubleMu0_HIon_v"", #for HI
"
-------------------------------------------------------------------------
"""HLT_PAL2DoubleMu0_v"", #for HI
""HLT_PAL3DoubleMu0_v"", #for HI
""HLT_PAL3DoubleMu0_HIon_v"", #for HI"
-------------------------------------------------------------------------
"""HLT_PAL2DoubleMu0_v"", #for HI
""HLT_PAL3DoubleMu0_v"", #for HI
""HLT_PAL3DoubleMu0_HIon_v"", #for HI
"
-------------------------------------------------------------------------
"Recom
PRs: 16237, 16245"
-------------------------------------------------------------------------
=========================================================================
"SiPixelAliPedeAlignmentProducer.algoConfig.runAtPCL = True
"
-------------------------------------------------------------------------
SiPixelAliPedeAlignmentProducer.algoConfig.runAtPCL = cms.bool(True)
-------------------------------------------------------------------------
"SiPixelAliPedeAlignmentProducer.algoConfig.runAtPCL = True
"
-------------------------------------------------------------------------
"Recom
PRs: 16135, 16136"
-------------------------------------------------------------------------
=========================================================================
"SiPixelAliPedeAlignmentProducer.algoConfig.runAtPCL = True
"
-------------------------------------------------------------------------
SiPixelAliPedeAlignmentProducer.algoConfig.runAtPCL = cms.bool(True)
-------------------------------------------------------------------------
"SiPixelAliPedeAlignmentProducer.algoConfig.runAtPCL = True
"
-------------------------------------------------------------------------
"Recom
PRs: 16135, 16136"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu24_eta2p1_v'),"
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v')
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu24_eta2p1_v'),"
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu24_eta2p1_v'),"
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu24_eta2p1_v'),"
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu24_eta2p1_v'),"
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v')
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu24_eta2p1_v'),"
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu24_eta2p1_v'),"
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_PFHT350_DiPFJetAve90_PFAlphaT0p53_v'),"
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_PFHT400_DiPFJetAve90_PFAlphaT0p52_v'),"
-------------------------------------------------------------------------
"TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu22_eta2p1_v'),
"
-------------------------------------------------------------------------
"Recom
PRs: 16126, 16127"
-------------------------------------------------------------------------
=========================================================================
"### pPb Run2 ###
workflows[281]= ['',['EPOS_PPb_8160GeV_MinimumBias','DIGIUP15_PPb','RECOUP15_PPb','HARVESTUP15_PPb']]
"
-------------------------------------------------------------------------
"workflows[281]= ['',['EPOS_PPb_8160GeV_MinimumBias','DIGIUP15_PPb','RECOUP15_PPb','HARVESTUP15_PPb']]"
-------------------------------------------------------------------------
"### pPb Run2 ###
workflows[281]= ['',['EPOS_PPb_8160GeV_MinimumBias','DIGIUP15_PPb','RECOUP15_PPb','HARVESTUP15_PPb']]
"
-------------------------------------------------------------------------
"Recom
PRs: 16119, 16122"
-------------------------------------------------------------------------
=========================================================================
"## pPb Run2
step1PPbDefaultsUp15={'--beamspot':'Run2PPbBoost','--conditions':'auto:run2_mc_pa','--eventcontent':'RAWSIM'}
steps['EPOS_PPb_8160GeV_MinimumBias']=merge([{'-n':10},step1PPbDefaultsUp15,gen2015('ReggeGribovPartonMC_EposLHC_4080_4080GeV_pPb_cfi',Kby(9,100))])
"
-------------------------------------------------------------------------
"Adapted code snippet:

```python
## pPb Run2
step1PPbDefaultsUp15={'--beamspot':'Run2PPbBoost','--conditions':'auto:run2_mc_pa','--eventcontent':'RAWSIM'}
steps['EPOS_PPb_8160GeV_MinimumBias']=merge([{'-n':10},step1PPbDefaultsUp15,gen2023hiprod('EposLHC_4080_4080GeV_pPb_cfi',Kby(9,100)])
```"
-------------------------------------------------------------------------
"## pPb Run2
step1PPbDefaultsUp15={'--beamspot':'Run2PPbBoost','--conditions':'auto:run2_mc_pa','--eventcontent':'RAWSIM'}
steps['EPOS_PPb_8160GeV_MinimumBias']=merge([{'-n':10},step1PPbDefaultsUp15,gen2015('ReggeGribovPartonMC_EposLHC_4080_4080GeV_pPb_cfi',Kby(9,100))])
"
-------------------------------------------------------------------------
"Recom
PRs: 16119, 16122"
-------------------------------------------------------------------------
=========================================================================
"# for Run2 PPb workflows (NOTE: using HLT:@fake for the moment)
steps['DIGIUP15_PPb']=merge([{'-s':'DIGI:pdigi_valid,L1,DIGI2RAW,HLT:@fake','--conditions':'auto:run2_mc_pa'}, steps['DIGIUP15']])
"
-------------------------------------------------------------------------
"steps['DIGIUP15_PPb']=merge([{'-s':'DIGI:pdigi_valid,L1,DIGI2RAW,HLT:@fake','--conditions':'auto:run2_mc_pa'},steps['DIGIUP15']])
"
-------------------------------------------------------------------------
"# for Run2 PPb workflows (NOTE: using HLT:@fake for the moment)
steps['DIGIUP15_PPb']=merge([{'-s':'DIGI:pdigi_valid,L1,DIGI2RAW,HLT:@fake','--conditions':'auto:run2_mc_pa'}, steps['DIGIUP15']])
"
-------------------------------------------------------------------------
"Recom
PRs: 16119, 16122"
-------------------------------------------------------------------------
=========================================================================
"# for Run2 PPb workflows
steps['HARVESTUP15_PPb']=merge([{'--conditions':'auto:run2_mc_pa',}, steps['HARVESTMINUP15']])
"
-------------------------------------------------------------------------
"steps['HARVESTUP15_PPb']=merge([{'--conditions':'auto:run2_mc_pa'}, steps['HARVESTUP15_trackingOnly']])"
-------------------------------------------------------------------------
"# for Run2 PPb workflows
steps['HARVESTUP15_PPb']=merge([{'--conditions':'auto:run2_mc_pa',}, steps['HARVESTMINUP15']])
"
-------------------------------------------------------------------------
"Recom
PRs: 16119, 16122"
-------------------------------------------------------------------------
=========================================================================
"""HLT_Ele145_CaloIdVT_GsfTrkIdT_v"",
"
-------------------------------------------------------------------------
"         ""HLT_Ele145_CaloIdVT_GsfTrkIdT_v"", # Run2 proposal"
-------------------------------------------------------------------------
"""HLT_Ele145_CaloIdVT_GsfTrkIdT_v"",
"
-------------------------------------------------------------------------
"Recom
PRs: 16012, 15951"
-------------------------------------------------------------------------
=========================================================================
"edm::ParameterSet pAL1DoubleMuZMass_pset;
edm::ParameterSet pAL2DoubleMuZMass_pset;
edm::ParameterSet pAL3DoubleMuZMass_pset;
"
-------------------------------------------------------------------------
"FWCore.ParameterSet.Config as cms

...

cms.PSet al1DoubleMuZMass_pset;
cms.PSet al2DoubleMuZMass_pset;
cms.PSet al3DoubleMuZMass_pset;"
-------------------------------------------------------------------------
"edm::ParameterSet pAL1DoubleMuZMass_pset;
edm::ParameterSet pAL2DoubleMuZMass_pset;
edm::ParameterSet pAL3DoubleMuZMass_pset;
"
-------------------------------------------------------------------------
"Recom
PRs: 15759, 15913"
-------------------------------------------------------------------------
=========================================================================
"hltPlot pAL1DoubleMuZMass_;
hltPlot pAL2DoubleMuZMass_;
hltPlot pAL3DoubleMuZMass_;
"
-------------------------------------------------------------------------
"hltPlot AL1DoubleMuZMass_;
hltPlot AL2DoubleMuZMass_;
hltPlot AL3DoubleMuZMass_;"
-------------------------------------------------------------------------
"hltPlot pAL1DoubleMuZMass_;
hltPlot pAL2DoubleMuZMass_;
hltPlot pAL3DoubleMuZMass_;
"
-------------------------------------------------------------------------
"Recom
PRs: 15759, 15913"
-------------------------------------------------------------------------
=========================================================================
"pAL1DoubleMuZMass_pset = iConfig.getParameter<edm::ParameterSet>(""pAL1DoubleMuZMass"");
plotMap[&pAL1DoubleMuZMass_] = &pAL1DoubleMuZMass_pset;
pAL2DoubleMuZMass_pset = iConfig.getParameter<edm::ParameterSet>(""pAL2DoubleMuZMass"");
plotMap[&pAL2DoubleMuZMass_] = &pAL2DoubleMuZMass_pset;
pAL3DoubleMuZMass_pset = iConfig.getParameter<edm::ParameterSet>(""pAL3DoubleMuZMass"");
plotMap[&pAL3DoubleMuZMass_] = &pAL3DoubleMuZMass_pset;
"
-------------------------------------------------------------------------
"pAL1DoubleMuZMass_pset = iConfig.getParameter<edm::ParameterSet>(""pAL1DoubleMuZMass"");
plotMap[&pAL1DoubleMuZMass_] = &pAL1DoubleMuZMass_pset;
pAL2DoubleMuZMass_pset = iConfig.getParameter<edm::ParameterSet>(""pAL2DoubleMuZMass"");
plotMap[&pAL2DoubleMuZMass_] = &pAL2DoubleMuZMass_pset;
pAL3DoubleMuZMass_pset = iConfig.getParameter<edm::ParameterSet>(""pAL3DoubleMuZMass"");
plotMap[&pAL3DoubleMuZMass_] = &pAL3DoubleMuZMass_pset;
diMuonMass_pset = iConfig.getParameter<edm::ParameterSet>(""diMuonMass"");
plotMap[&diMuonMass_] = &diMuonMass_pset;
diElecMass_pset = iConfig.getParameter<edm::ParameterSet>(""diElecMass"");
plotMap[&diElecMass_] = &diElecMass_pset;
muonDxy_pset = iConfig.getParameter<edm::ParameterSet>(""muonDxy"");"
-------------------------------------------------------------------------
"pAL1DoubleMuZMass_pset = iConfig.getParameter<edm::ParameterSet>(""pAL1DoubleMuZMass"");
plotMap[&pAL1DoubleMuZMass_] = &pAL1DoubleMuZMass_pset;
pAL2DoubleMuZMass_pset = iConfig.getParameter<edm::ParameterSet>(""pAL2DoubleMuZMass"");
plotMap[&pAL2DoubleMuZMass_] = &pAL2DoubleMuZMass_pset;
pAL3DoubleMuZMass_pset = iConfig.getParameter<edm::ParameterSet>(""pAL3DoubleMuZMass"");
plotMap[&pAL3DoubleMuZMass_] = &pAL3DoubleMuZMass_pset;
"
-------------------------------------------------------------------------
"Recom
PRs: 15759, 15913"
-------------------------------------------------------------------------
=========================================================================
"else if (pathName == pAL1DoubleMuZMass_.pathName)
  {
    const double mu_mass(.105658);
    unsigned int kCnt0 = 0;
    for (const auto & key0: keys)
 unsigned int kCnt1 = 0;
 for (const auto & key1: keys)
   {
     if (key0 != key1 && kCnt1 > kCnt0) // avoid filling hists with same objs && avoid double counting separate objs
{
                       // if (abs(objects[key0].id()) == 13 && (objects[key0].id()objects[key1].id()==0))  // id is not filled for l1 stage2 muons
  //  {
                       TLorentzVector mu1, mu2, dimu;
                       mu1.SetPtEtaPhiM(objects[key0].pt(), objects[key0].eta(), objects[key0].phi(), mu_mass);
                       mu2.SetPtEtaPhiM(objects[key1].pt(), objects[key1].eta(), objects[key1].phi(), mu_mass);
                       dimu = mu1mu2;
                       if(dimu.M()>pAL1DoubleMuZMass_.xMin && dimu.M()<pAL1DoubleMuZMass_.xMax) pAL1DoubleMuZMass_.ME->Fill(dimu.M());
                       //  }
}
     kCnt1 =1;
   }
 kCnt0 =1;
  }
else if (pathName == pAL2DoubleMuZMass_.pathName)
  {
    const double mu_mass(.105658);
    unsigned int kCnt0 = 0;
    for (const auto & key0: keys)
 unsigned int kCnt1 = 0;
 for (const auto & key1: keys)
   {
     if (key0 != key1 && kCnt1 > kCnt0) // avoid filling hists with same objs && avoid double counting separate objs
{
  if (abs(objects[key0].id()) == 13 && (objects[key0].id()objects[key1].id()==0))  // check muon id and dimuon charge
    {
      TLorentzVector mu1, mu2, dimu;
      mu1.SetPtEtaPhiM(objects[key0].pt(), objects[key0].eta(), objects[key0].phi(), mu_mass);
      mu2.SetPtEtaPhiM(objects[key1].pt(), objects[key1].eta(), objects[key1].phi(), mu_mass);
      dimu = mu1mu2;
      if(dimu.M()>pAL2DoubleMuZMass_.xMin && dimu.M()<pAL2DoubleMuZMass_.xMax) pAL2DoubleMuZMass_.ME->Fill(dimu.M());
    }
}
     kCnt1 =1;
   }
 kCnt0 =1;
  }
else if (pathName == pAL3DoubleMuZMass_.pathName)
  {
    const double mu_mass(.105658);
    unsigned int kCnt0 = 0;
    for (const auto & key0: keys)
 unsigned int kCnt1 = 0;
 for (const auto & key1: keys)
   {
     if (key0 != key1 && kCnt1 > kCnt0) // avoid filling hists with same objs && avoid double counting separate objs
{
  if (abs(objects[key0].id()) == 13 && (objects[key0].id()objects[key1].id()==0))  // check muon id and dimuon charge
    {
      TLorentzVector mu1, mu2, dimu;
      mu1.SetPtEtaPhiM(objects[key0].pt(), objects[key0].eta(), objects[key0].phi(), mu_mass);
      mu2.SetPtEtaPhiM(objects[key1].pt(), objects[key1].eta(), objects[key1].phi(), mu_mass);
      dimu = mu1mu2;
      if(dimu.M()>pAL3DoubleMuZMass_.xMin && dimu.M()<pAL3DoubleMuZMass_.xMax) pAL3DoubleMuZMass_.ME->Fill(dimu.M());
    }
}
     kCnt1 =1;
   }
 kCnt0 =1;
  }
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

# Import stable information regarding the function name and setup
from DQMServices.Core.DQMEDAnalyzer import DQMEDAnalyzer

# Adapted code snippet
else if (pathName == pAL1DoubleMuZMass_.pathName):
    const double mu_mass(.105658)
    unsigned int kCnt0 = 0
    for (const auto & key0: keys):
        unsigned int kCnt1 = 0
        for (const auto & key1: keys):
            if (key0 != key1 && kCnt1 > kCnt0): # avoid filling hists with same objs && avoid double counting separate objs
                if (abs(objects[key0].id()) == 13 && (objects[key0].id()objects[key1].id()==0)):  # check muon id and dimuon charge
                    TLorentzVector mu1, mu2, dimu
                    mu1.SetPtEtaPhiM(objects[key0].pt(), objects[key0].eta(), objects[key0].phi(), mu_mass)
                    mu2.SetPtEtaPhiM(objects[key1].pt(), objects[key1].eta(), objects[key1].phi(), mu_mass)
                    dimu = mu1mu2
                    if(dimu.M()>pAL1DoubleMuZMass_.xMin && dimu.M()<pAL1DoubleMuZMass_.xMax):
                        pAL1DoubleMuZMass_.ME->Fill(dimu.M())
                kCnt1 =1
        kCnt0 =1

# Repeat the above structure for the other two cases (pAL2DoubleMuZMass_ and pAL3DoubleMuZMass_)"
-------------------------------------------------------------------------
"else if (pathName == pAL1DoubleMuZMass_.pathName)
  {
    const double mu_mass(.105658);
    unsigned int kCnt0 = 0;
    for (const auto & key0: keys)
 unsigned int kCnt1 = 0;
 for (const auto & key1: keys)
   {
     if (key0 != key1 && kCnt1 > kCnt0) // avoid filling hists with same objs && avoid double counting separate objs
{
                       // if (abs(objects[key0].id()) == 13 && (objects[key0].id()objects[key1].id()==0))  // id is not filled for l1 stage2 muons
  //  {
                       TLorentzVector mu1, mu2, dimu;
                       mu1.SetPtEtaPhiM(objects[key0].pt(), objects[key0].eta(), objects[key0].phi(), mu_mass);
                       mu2.SetPtEtaPhiM(objects[key1].pt(), objects[key1].eta(), objects[key1].phi(), mu_mass);
                       dimu = mu1mu2;
                       if(dimu.M()>pAL1DoubleMuZMass_.xMin && dimu.M()<pAL1DoubleMuZMass_.xMax) pAL1DoubleMuZMass_.ME->Fill(dimu.M());
                       //  }
}
     kCnt1 =1;
   }
 kCnt0 =1;
  }
else if (pathName == pAL2DoubleMuZMass_.pathName)
  {
    const double mu_mass(.105658);
    unsigned int kCnt0 = 0;
    for (const auto & key0: keys)
 unsigned int kCnt1 = 0;
 for (const auto & key1: keys)
   {
     if (key0 != key1 && kCnt1 > kCnt0) // avoid filling hists with same objs && avoid double counting separate objs
{
  if (abs(objects[key0].id()) == 13 && (objects[key0].id()objects[key1].id()==0))  // check muon id and dimuon charge
    {
      TLorentzVector mu1, mu2, dimu;
      mu1.SetPtEtaPhiM(objects[key0].pt(), objects[key0].eta(), objects[key0].phi(), mu_mass);
      mu2.SetPtEtaPhiM(objects[key1].pt(), objects[key1].eta(), objects[key1].phi(), mu_mass);
      dimu = mu1mu2;
      if(dimu.M()>pAL2DoubleMuZMass_.xMin && dimu.M()<pAL2DoubleMuZMass_.xMax) pAL2DoubleMuZMass_.ME->Fill(dimu.M());
    }
}
     kCnt1 =1;
   }
 kCnt0 =1;
  }
else if (pathName == pAL3DoubleMuZMass_.pathName)
  {
    const double mu_mass(.105658);
    unsigned int kCnt0 = 0;
    for (const auto & key0: keys)
 unsigned int kCnt1 = 0;
 for (const auto & key1: keys)
   {
     if (key0 != key1 && kCnt1 > kCnt0) // avoid filling hists with same objs && avoid double counting separate objs
{
  if (abs(objects[key0].id()) == 13 && (objects[key0].id()objects[key1].id()==0))  // check muon id and dimuon charge
    {
      TLorentzVector mu1, mu2, dimu;
      mu1.SetPtEtaPhiM(objects[key0].pt(), objects[key0].eta(), objects[key0].phi(), mu_mass);
      mu2.SetPtEtaPhiM(objects[key1].pt(), objects[key1].eta(), objects[key1].phi(), mu_mass);
      dimu = mu1mu2;
      if(dimu.M()>pAL3DoubleMuZMass_.xMin && dimu.M()<pAL3DoubleMuZMass_.xMax) pAL3DoubleMuZMass_.ME->Fill(dimu.M());
    }
}
     kCnt1 =1;
   }
 kCnt0 =1;
  }
"
-------------------------------------------------------------------------
"Recom
PRs: 15759, 15913"
-------------------------------------------------------------------------
=========================================================================
"pAL1DoubleMuZMass = cms.PSet(
    pathName = cms.string(""HLT_PAL1DoubleMu10""),
    moduleName = cms.string(""hltL1fL1sDoubleMu10BptxANDL1Filtered0""),
    plotLabel = cms.string(""PAL1DoubleMu10_ZMass""),
    axisLabel = cms.string(""dimuon mass [GeV]""),
    mainWorkspace = cms.bool(True),
    NbinsX = cms.int32(50),
    Xmin = cms.double(60.0),
    Xmax = cms.double(160.0)
    ),
pAL2DoubleMuZMass = cms.PSet(
    pathName = cms.string(""HLT_PAL2DoubleMu10""),
    moduleName = cms.string(""hltL2fL1sDoubleMu10BptxANDL1f0L2Filtered10""),
    plotLabel = cms.string(""PAL2DoubleMu10_ZMass""),
    axisLabel = cms.string(""dimuon mass [GeV]""),
    mainWorkspace = cms.bool(True),
    NbinsX = cms.int32(50),
    Xmin = cms.double(60.0),
    Xmax = cms.double(160.0)
    ),
pAL3DoubleMuZMass = cms.PSet(
    pathName = cms.string(""HLT_PAL3DoubleMu10""),
    moduleName = cms.string(""hltL3fL1sDoubleMu10BptxANDL1f0L2f10L3Filtered10""),
    plotLabel = cms.string(""PAL3DoubleMu10_ZMass""),
    axisLabel = cms.string(""dimuon mass [GeV]""),
    mainWorkspace = cms.bool(True),
    NbinsX = cms.int32(50),
    Xmin = cms.double(60.0),
    Xmax = cms.double(160.0)
    ),
"
-------------------------------------------------------------------------
"hltPAL1DoubleMuZMass = cms.PSet(
    pathName = cms.string(""HLT_PAL1DoubleMu10""),
    moduleName = cms.string(""hltL1fL1sDoubleMu10BptxANDL1Filtered0""),
    plotLabel = cms.string(""PAL1DoubleMu10_ZMass""),
    axisLabel = cms.string(""dimuon mass [GeV]""),
    mainWorkspace = cms.bool(True),
    NbinsX = cms.int32(50),
    Xmin = cms.double(60.0),
    Xmax = cms.double(160.0)
    ),
hltPAL2DoubleMuZMass = cms.PSet(
    pathName = cms.string(""HLT_PAL2DoubleMu10""),
    moduleName = cms.string(""hltL2fL1sDoubleMu10BptxANDL1f0L2Filtered10""),
    plotLabel = cms.string(""PAL2DoubleMu10_ZMass""),
    axisLabel = cms.string(""dimuon mass [GeV]""),
    mainWorkspace = cms.bool(True),
    NbinsX = cms.int32(50),
    Xmin = cms.double(60.0),
    Xmax = cms.double(160.0)
    ),
hltPAL3DoubleMuZMass = cms.PSet(
    pathName = cms.string(""HLT_PAL3DoubleMu10""),
    moduleName = cms.string(""hltL3fL1sDoubleMu10BptxANDL1f0L2f10L3Filtered10""),
    plotLabel = cms.string(""PAL3DoubleMu10_ZMass""),
    axisLabel = cms.string(""dimuon mass [GeV]""),
    mainWorkspace = cms.bool(True),
    NbinsX = cms.int32(50),
    Xmin = cms.double(60.0),
    Xmax = cms.double(160.0)
    ),"
-------------------------------------------------------------------------
"pAL1DoubleMuZMass = cms.PSet(
    pathName = cms.string(""HLT_PAL1DoubleMu10""),
    moduleName = cms.string(""hltL1fL1sDoubleMu10BptxANDL1Filtered0""),
    plotLabel = cms.string(""PAL1DoubleMu10_ZMass""),
    axisLabel = cms.string(""dimuon mass [GeV]""),
    mainWorkspace = cms.bool(True),
    NbinsX = cms.int32(50),
    Xmin = cms.double(60.0),
    Xmax = cms.double(160.0)
    ),
pAL2DoubleMuZMass = cms.PSet(
    pathName = cms.string(""HLT_PAL2DoubleMu10""),
    moduleName = cms.string(""hltL2fL1sDoubleMu10BptxANDL1f0L2Filtered10""),
    plotLabel = cms.string(""PAL2DoubleMu10_ZMass""),
    axisLabel = cms.string(""dimuon mass [GeV]""),
    mainWorkspace = cms.bool(True),
    NbinsX = cms.int32(50),
    Xmin = cms.double(60.0),
    Xmax = cms.double(160.0)
    ),
pAL3DoubleMuZMass = cms.PSet(
    pathName = cms.string(""HLT_PAL3DoubleMu10""),
    moduleName = cms.string(""hltL3fL1sDoubleMu10BptxANDL1f0L2f10L3Filtered10""),
    plotLabel = cms.string(""PAL3DoubleMu10_ZMass""),
    axisLabel = cms.string(""dimuon mass [GeV]""),
    mainWorkspace = cms.bool(True),
    NbinsX = cms.int32(50),
    Xmin = cms.double(60.0),
    Xmax = cms.double(160.0)
    ),
"
-------------------------------------------------------------------------
"Recom
PRs: 15759, 15913"
-------------------------------------------------------------------------
=========================================================================
"""HLT_PAL1DoubleMuOpen_v"", #for HI
""HLT_PAL1DoubleMuOpen_OS_v"", #for HI
""HLT_PAL1DoubleMuOpen_SS_v"", #for HI
""HLT_PAL1DoubleMu0_v"", #for HI
""HLT_PAL1DoubleMu0_HighQ_v"", #for HI
""HLT_PAL1DoubleMu0_MGT1_v"", #for HI
""HLT_PAL1DoubleMu10_v"", #for HI
""HLT_PAL2DoubleMuOpen_v"", #for HI
""HLT_PAL2DoubleMu10_v"", #for HI
""HLT_PAL3DoubleMuOpen_v"", #for HI
""HLT_PAL3DoubleMuOpen_HIon_v"", #for HI
""HLT_PAL3DoubleMu10_v"", #for HI
""HLT_PAL2Mu12_v"", #for HI
""HLT_PAL2Mu15_v"", #for HI
""HLT_PAL3Mu3_v"", #for HI 
""HLT_PAL3Mu5_v"", #for HI 
""HLT_PAL3Mu7_v"", #for HI 
""HLT_PAL3Mu12_v"", #for HI
""HLT_PAL3Mu15_v"" #for HI
"
-------------------------------------------------------------------------
"""hltMuonOfflineAnalyzer = cms.EDAnalyzer(""HLTMuonOfflineAnalyzer"",
   ""HLT_PAL1DoubleMuOpen_v"", #for HI
   ""HLT_PAL1DoubleMuOpen_OS_v"", #for HI
   ""HLT_PAL1DoubleMuOpen_SS_v"", #for HI
   ""HLT_PAL1DoubleMu0_v"", #for HI
   ""HLT_PAL1DoubleMu0_HighQ_v"", #for HI
   ""HLT_PAL1DoubleMu0_MGT1_v"", #for HI
   ""HLT_PAL1DoubleMu10_v"", #for HI
   ""HLT_PAL2DoubleMuOpen_v"", #for HI
   ""HLT_PAL2DoubleMu10_v"", #for HI
   ""HLT_PAL3DoubleMuOpen_v"", #for HI
   ""HLT_PAL3DoubleMuOpen_HIon_v"", #for HI
   ""HLT_PAL3DoubleMu10_v"", #for HI
   ""HLT_PAL2Mu12_v"", #for HI
   ""HLT_PAL2Mu15_v"", #for HI
   ""HLT_PAL3Mu3_v"", #for HI 
   ""HLT_PAL3Mu5_v"", #for HI 
   ""HLT_PAL3Mu7_v"", #for HI 
   ""HLT_PAL3Mu12_v"", #for HI
   ""HLT_PAL3Mu15_v"" #for HI
),"
-------------------------------------------------------------------------
"""HLT_PAL1DoubleMuOpen_v"", #for HI
""HLT_PAL1DoubleMuOpen_OS_v"", #for HI
""HLT_PAL1DoubleMuOpen_SS_v"", #for HI
""HLT_PAL1DoubleMu0_v"", #for HI
""HLT_PAL1DoubleMu0_HighQ_v"", #for HI
""HLT_PAL1DoubleMu0_MGT1_v"", #for HI
""HLT_PAL1DoubleMu10_v"", #for HI
""HLT_PAL2DoubleMuOpen_v"", #for HI
""HLT_PAL2DoubleMu10_v"", #for HI
""HLT_PAL3DoubleMuOpen_v"", #for HI
""HLT_PAL3DoubleMuOpen_HIon_v"", #for HI
""HLT_PAL3DoubleMu10_v"", #for HI
""HLT_PAL2Mu12_v"", #for HI
""HLT_PAL2Mu15_v"", #for HI
""HLT_PAL3Mu3_v"", #for HI 
""HLT_PAL3Mu5_v"", #for HI 
""HLT_PAL3Mu7_v"", #for HI 
""HLT_PAL3Mu12_v"", #for HI
""HLT_PAL3Mu15_v"" #for HI
"
-------------------------------------------------------------------------
"Recom
PRs: 15780, 15912"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
process = cms.Process(""TEST"")
process.load(""Configuration.StandardSequences.FrontierConditions_GlobalTag_cff"")
process.load(""Configuration.Geometry.GeometryDB_cff"")
process.load(""FWCore.MessageService.MessageLogger_cfi"")
process.MessageLogger.destinations = ['cout', 'cerr']
### needed to get the geometry
from Configuration.AlCa.GlobalTag import GlobalTag
process.GlobalTag = GlobalTag(process.GlobalTag,""auto:run2_design"")
from CondCore.CondDB.CondDB_cfi import *
CondDBAlignment = CondDB.clone(connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'))
                            
### example starting MC geometry that is known to be off-centered
process.ZeroGeom = cms.ESSource(""PoolDBESSource"",
                                CondDBAlignment,
                                timetype = cms.string(""runnumber""),
                                toGet = cms.VPSet(cms.PSet(record = cms.string('TrackerAlignmentRcd'),
                                                           tag = cms.string('TrackerAlignment_Asymptotic_Run2016_v1_mc')
                                                           )
                                                  )                                                            
                                )
				
CondDBAPE = CondDB.clone(connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'))
process.ZeroAPE = cms.ESSource(""PoolDBESSource"",
                               CondDBAPE,
                               timetype = cms.string(""runnumber""),
                               toGet = cms.VPSet(cms.PSet(record = cms.string('TrackerAlignmentErrorExtendedRcd'),
                                                          tag = cms.string('TrackerIdealGeometryErrorsExtended210_mc')
                                                          )
                                                 )
                               )
process.es_prefer_ZeroGeom = cms.ESPrefer(""PoolDBESSource"", ""ZeroGeom"")
process.es_prefer_ZeroAPE = cms.ESPrefer(""PoolDBESSource"", ""ZeroAPE"")
process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(1)
)
process.source = cms.Source(""EmptySource"")
GeometryIntoNtuplesRootFile = cms.untracked.string('InputGeometry.root')
# into ntuples
process.dump = cms.EDAnalyzer(""TrackerGeometryIntoNtuples"",
                              outputFile = GeometryIntoNtuplesRootFile,
                              outputTreename = cms.untracked.string('alignTree')
                              )
# geometry comparison
process.load(""Alignment.OfflineValidation.TrackerGeometryCompare_cfi"")
process.TrackerGeometryCompare.inputROOTFile1 = 'IDEAL'
process.TrackerGeometryCompare.inputROOTFile2 = GeometryIntoNtuplesRootFile
process.TrackerGeometryCompare.setCommonTrackerSystem = ""TPBBarrel""  # for MC
#process.TrackerGeometryCompare.setCommonTrackerSystem = ""TOBBarrel""  # for Data
process.TrackerGeometryCompare.levels = []
process.TrackerGeometryCompare.writeToDB = True
process.TFileService = cms.Service(""TFileService"",
                                   fileName=cms.string(""TPBCenteredOutputComparison.root"")  # for MC
                                   #fileName=cms.string(""TOBCenteredOutputComparison.root"") #for Data
                                   )
CondDBoutput=CondDB.clone(connect = cms.string('sqlite_file:TrackerAlignment_Asymptotic_Run2016_v1_mc_Centred.db'))
process.PoolDBOutputService = cms.Service(""PoolDBOutputService"",
                                          CondDBoutput,
                                          timetype = cms.untracked.string('runnumber'),
                                          toPut = cms.VPSet(cms.PSet(record = cms.string('TrackerAlignmentRcd'),
                                                                     tag = cms.string('Alignments')
                                                                     ),
                                                            cms.PSet(record = cms.string('TrackerAlignmentErrorExtendedRcd'),
                                                                     tag = cms.string('AlignmentErrorsExtended')
                                                                     )
                                                            )
                                          )
process.p = cms.Path(process.dump*process.TrackerGeometryCompare)
"
-------------------------------------------------------------------------
"import CondCore.DBCommon.CondDBSetup_cfi
import FWCore.ParameterSet.Config as cms

process = cms.Process(""TEST"")
process.load(""Configuration.StandardSequences.FrontierConditions_GlobalTag_cff"")
process.load(""Configuration.Geometry.GeometryDB_cff"")
process.load(""FWCore.MessageService.MessageLogger_cfi"")
process.MessageLogger.destinations = ['cout', 'cerr']
### needed to get the geometry
from FWCore.ParameterSet.Config import GlobalTag
process.GlobalTag = GlobalTag(process.GlobalTag,""auto:run2_design"")
from CondCore.DBCommon.CondDB_cfi import *
CondDBAlignment = CondDB.clone(connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'))
                            
### example starting MC geometry that is known to be off-centered
process.ZeroGeom = cms.ESSource(""PoolDBESSource"",
                                CondDBAlignment,
                                timetype = cms.string(""runnumber""),
                                toGet = cms.VPSet(cms.PSet(record = cms.string('TrackerAlignmentRcd'),
                                                           tag = cms.string('TrackerAlignment_Asymptotic_Run2016_v1_mc')
                                                           )
                                                  )                                                            
                                )
				
CondDBAPE = CondDB.clone(connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'))
process.ZeroAPE = cms.ESSource(""PoolDBESSource"",
                               CondDBAPE,
                               timetype = cms.string(""runnumber""),
                               toGet = cms.VPSet(cms.PSet(record = cms.string('TrackerAlignmentErrorExtendedRcd'),
                                                          tag = cms.string('TrackerIdealGeometryErrorsExtended210_mc')
                                                          )
                                                 )
                               )
process.es_prefer_ZeroGeom = cms.ESPrefer(""PoolDBESSource"", ""ZeroGeom"")
process.es_prefer_ZeroAPE = cms.ESPrefer(""PoolDBESSource"", ""ZeroAPE"")
process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(1)
)
process.source = cms.Source(""EmptySource"")
GeometryIntoNtuplesRootFile = cms.untracked.string('InputGeometry.root')
# into ntuples
process.dump = cms.EDAnalyzer(""TrackerGeometryIntoNtuples"",
                               outputFile = GeometryIntoNtuplesRootFile,
                               outputTreename = cms.untracked.string('alignTree')
                               )
# geometry comparison
process.load(""Alignment.OfflineValidation.TrackerGeometryCompare_cfi"")
process.TrackerGeometryCompare.inputROOTFile1 = 'IDEAL'
process.TrackerGeometryCompare.inputROOTFile2 = GeometryIntoNtuplesRootFile
process.TrackerGeometryCompare.setCommonTrackerSystem = ""TPBBarrel""  # for MC
#process.TrackerGeometryCompare.setCommonTrackerSystem = ""TOBBarrel""  # for Data
process.TrackerGeometryCompare.levels = []
process.TrackerGeometryCompare.writeToDB = True
process.TFileService = cms.Service(""TFileService"",
                                   fileName=cms.string(""TPBCenteredOutputComparison.root"")  # for MC
                                   #fileName=cms.string(""TOBCenteredOutputComparison.root"") #for Data
                                   )
CondDBoutput=CondDB.clone(connect = cms.string('sqlite_file:TrackerAlignment_Asymptotic_Run2016_v1_mc_Centred.db'))
process.PoolDBOutputService = cms.Service(""PoolDBOutputService"",
                                          CondDBoutput,
                                          timetype = cms.untracked.string('runnumber'),
                                          toPut = cms.VPSet(cms.PSet(record = cms.string('TrackerAlignmentRcd'),
                                                                     tag = cms.string('Alignments')
                                                                     ),
                                                            cms.PSet(record = cms.string('TrackerAlignmentErrorExtendedRcd'),
                                                                     tag = cms.string('AlignmentErrorsExtended')
                                                                     )
                                                            )
                                          )
process.p = cms.Path(process.dump*process.TrackerGeometryCompare)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
process = cms.Process(""TEST"")
process.load(""Configuration.StandardSequences.FrontierConditions_GlobalTag_cff"")
process.load(""Configuration.Geometry.GeometryDB_cff"")
process.load(""FWCore.MessageService.MessageLogger_cfi"")
process.MessageLogger.destinations = ['cout', 'cerr']
### needed to get the geometry
from Configuration.AlCa.GlobalTag import GlobalTag
process.GlobalTag = GlobalTag(process.GlobalTag,""auto:run2_design"")
from CondCore.CondDB.CondDB_cfi import *
CondDBAlignment = CondDB.clone(connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'))
                            
### example starting MC geometry that is known to be off-centered
process.ZeroGeom = cms.ESSource(""PoolDBESSource"",
                                CondDBAlignment,
                                timetype = cms.string(""runnumber""),
                                toGet = cms.VPSet(cms.PSet(record = cms.string('TrackerAlignmentRcd'),
                                                           tag = cms.string('TrackerAlignment_Asymptotic_Run2016_v1_mc')
                                                           )
                                                  )                                                            
                                )
				
CondDBAPE = CondDB.clone(connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'))
process.ZeroAPE = cms.ESSource(""PoolDBESSource"",
                               CondDBAPE,
                               timetype = cms.string(""runnumber""),
                               toGet = cms.VPSet(cms.PSet(record = cms.string('TrackerAlignmentErrorExtendedRcd'),
                                                          tag = cms.string('TrackerIdealGeometryErrorsExtended210_mc')
                                                          )
                                                 )
                               )
process.es_prefer_ZeroGeom = cms.ESPrefer(""PoolDBESSource"", ""ZeroGeom"")
process.es_prefer_ZeroAPE = cms.ESPrefer(""PoolDBESSource"", ""ZeroAPE"")
process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(1)
)
process.source = cms.Source(""EmptySource"")
GeometryIntoNtuplesRootFile = cms.untracked.string('InputGeometry.root')
# into ntuples
process.dump = cms.EDAnalyzer(""TrackerGeometryIntoNtuples"",
                              outputFile = GeometryIntoNtuplesRootFile,
                              outputTreename = cms.untracked.string('alignTree')
                              )
# geometry comparison
process.load(""Alignment.OfflineValidation.TrackerGeometryCompare_cfi"")
process.TrackerGeometryCompare.inputROOTFile1 = 'IDEAL'
process.TrackerGeometryCompare.inputROOTFile2 = GeometryIntoNtuplesRootFile
process.TrackerGeometryCompare.setCommonTrackerSystem = ""TPBBarrel""  # for MC
#process.TrackerGeometryCompare.setCommonTrackerSystem = ""TOBBarrel""  # for Data
process.TrackerGeometryCompare.levels = []
process.TrackerGeometryCompare.writeToDB = True
process.TFileService = cms.Service(""TFileService"",
                                   fileName=cms.string(""TPBCenteredOutputComparison.root"")  # for MC
                                   #fileName=cms.string(""TOBCenteredOutputComparison.root"") #for Data
                                   )
CondDBoutput=CondDB.clone(connect = cms.string('sqlite_file:TrackerAlignment_Asymptotic_Run2016_v1_mc_Centred.db'))
process.PoolDBOutputService = cms.Service(""PoolDBOutputService"",
                                          CondDBoutput,
                                          timetype = cms.untracked.string('runnumber'),
                                          toPut = cms.VPSet(cms.PSet(record = cms.string('TrackerAlignmentRcd'),
                                                                     tag = cms.string('Alignments')
                                                                     ),
                                                            cms.PSet(record = cms.string('TrackerAlignmentErrorExtendedRcd'),
                                                                     tag = cms.string('AlignmentErrorsExtended')
                                                                     )
                                                            )
                                          )
process.p = cms.Path(process.dump*process.TrackerGeometryCompare)
"
-------------------------------------------------------------------------
"Recom
PRs: 15910, 15911"
-------------------------------------------------------------------------
=========================================================================
"    # write alignments, APEs, and surface deformations to DB by default
    process.AlignmentProducer.saveApeToDB = True
    process.AlignmentProducer.saveDeformationsToDB = True
"
-------------------------------------------------------------------------
"# write alignments, APEs, and surface deformations to DB by default
    process.PoolDBOutputService.writeAlignment = cms.untracked.bool(True)
    process.PoolDBOutputService.appendToDB = cms.untracked.bool(True)"
-------------------------------------------------------------------------
"    # write alignments, APEs, and surface deformations to DB by default
    process.AlignmentProducer.saveApeToDB = True
    process.AlignmentProducer.saveDeformationsToDB = True
"
-------------------------------------------------------------------------
"Recom
PRs: 15802, 15803"
-------------------------------------------------------------------------
=========================================================================
")
"
-------------------------------------------------------------------------
"```python
import FWCore.ParameterSet.Config as cms

def setup(process, binary_files, tree_files):
    process.PoolDBOutputService.connect = ""sqlite_file:alignments_MP.db""
    # Reconfigure parts of the algorithm configuration
    # --------------------------------------------------------------------------
    process.AlignmentProducer.algoConfig.mergeBinaryFiles = binary_files
    process.AlignmentProducer.algoConfig.mergeTreeFiles = tree_files
    # Set a new source and path.
    # --------------------------------------------------------------------------
    process.maxEvents = cms.untracked.PSet(input = cms.untracked.int32(1))
```"
-------------------------------------------------------------------------
")
"
-------------------------------------------------------------------------
"Recom
PRs: 15802, 15803"
-------------------------------------------------------------------------
=========================================================================
"""keep abs(pdgId) == 13 && status == 1"", # keep muon parents
"
-------------------------------------------------------------------------
"""keep abs(pdgId) == 13 && status == 1"", # keep muon parents"
-------------------------------------------------------------------------
"""keep abs(pdgId) == 13 && status == 1"", # keep muon parents
"
-------------------------------------------------------------------------
"Recom
PRs: 14384, 15742"
-------------------------------------------------------------------------
=========================================================================
"from RecoMET.METFilters.globalTightHalo2016Filter_cfi import *
"
-------------------------------------------------------------------------
"Assign(targets=[Name(id='seqHotlineSkimSingleMuon', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='singleMuonSelector', ctx=Load())), op=Mult(), right=Name(id='singleMuonFilter', ctx=Load()))], keywords=[]))"
-------------------------------------------------------------------------
"from RecoMET.METFilters.globalTightHalo2016Filter_cfi import *
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimSingleMuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * singleMuonSelector * singleMuonFilter)
"
-------------------------------------------------------------------------
"seqHotlineSkimSingleMuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * \
                                            HBHENoiseFilterResultProducer * HBHENoiseFilter * \
                                            singleMuonSelector * singleMuonFilter)"
-------------------------------------------------------------------------
"seqHotlineSkimSingleMuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * singleMuonSelector * singleMuonFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimDoubleMuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * doubleMuonSelector * doubleMuonFilter)
"
-------------------------------------------------------------------------
"seqHotlineSkimDoubleMuon = cms.Sequence(
    primaryVertexFilter * HBHENoiseFilterResultProducer * HBHENoiseFilter * doubleMuonSelector * doubleMuonFilter
)"
-------------------------------------------------------------------------
"seqHotlineSkimDoubleMuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * doubleMuonSelector * doubleMuonFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimTripleMuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * tripleMuonSelector * tripleMuonFilter)
"
-------------------------------------------------------------------------
seqHotlineSkimTripleMuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * tripleMuonSelector * tripleMuonFilter)
-------------------------------------------------------------------------
"seqHotlineSkimTripleMuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * tripleMuonSelector * tripleMuonFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimSingleElectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * singleElectronSelector * singleElectronFilter)
"
-------------------------------------------------------------------------
seqHotlineSkimSingleElectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * singleElectronSelector * singleElectronFilter)
-------------------------------------------------------------------------
"seqHotlineSkimSingleElectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * singleElectronSelector * singleElectronFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimDoubleElectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * doubleElectronSelector * doubleElectronFilter)
"
-------------------------------------------------------------------------
seqHotlineSkimDoubleElectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * doubleElectronSelector * doubleElectronFilter)
-------------------------------------------------------------------------
"seqHotlineSkimDoubleElectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * doubleElectronSelector * doubleElectronFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimTripleElectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * tripleElectronSelector * tripleElectronFilter)
"
-------------------------------------------------------------------------
seqHotlineSkimTripleElectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * tripleElectronSelector * tripleElectronFilter)
-------------------------------------------------------------------------
"seqHotlineSkimTripleElectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * tripleElectronSelector * tripleElectronFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimSinglePhoton = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * singlePhotonSelector * singlePhotonFilter)
"
-------------------------------------------------------------------------
"seqHotlineSkimSinglePhoton = cms.Sequence(
    primaryVertexFilter *
    globalTightHalo2016Filter *
    HBHENoiseFilterResultProducer *
    HBHENoiseFilter *
    singlePhotonSelector *
    singlePhotonFilter
)"
-------------------------------------------------------------------------
"seqHotlineSkimSinglePhoton = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * singlePhotonSelector * singlePhotonFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimDoublePhoton = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * doublePhotonSelector * doublePhotonFilter)
"
-------------------------------------------------------------------------
"seqHotlineSkimDoublePhoton = cms.Sequence(
    primaryVertexFilter *
    globalTightHalo2016Filter *
    HBHENoiseFilterResultProducer *
    HBHENoiseFilter *
    doublePhotonSelector *
    doublePhotonFilter
)"
-------------------------------------------------------------------------
"seqHotlineSkimDoublePhoton = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * doublePhotonSelector * doublePhotonFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimTriplePhoton = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * triplePhotonSelector * triplePhotonFilter)
"
-------------------------------------------------------------------------
"seqHotlineSkimTriplePhoton = cms.Sequence(
    primaryVertexFilter *
    globalTightHalo2016Filter *
    HBHENoiseFilterResultProducer *
    HBHENoiseFilter *
    triplePhotonSelector *
    triplePhotonFilter
)"
-------------------------------------------------------------------------
"seqHotlineSkimTriplePhoton = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * triplePhotonSelector * triplePhotonFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimSingleJet = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * singleJetSelector * singleJetFilter)
"
-------------------------------------------------------------------------
"seqHotlineSkimSingleJet = cms.Sequence(
    primaryVertexFilter * 
    globalTightHalo2016Filter * 
    HBHENoiseFilterResultProducer * 
    HBHENoiseFilter * 
    singleJetSelector * 
    singleJetFilter
)"
-------------------------------------------------------------------------
"seqHotlineSkimSingleJet = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * singleJetSelector * singleJetFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimDoubleJet = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * doubleJetSelector * doubleJetFilter)
"
-------------------------------------------------------------------------
"seqHotlineSkimDoubleJet = cms.Sequence(
    primaryVertexFilter *
    globalTightHalo2016Filter *
    HBHENoiseFilterResultProducer *
    HBHENoiseFilter *
    doubleJetSelector *
    doubleJetFilter
)"
-------------------------------------------------------------------------
"seqHotlineSkimDoubleJet = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * doubleJetSelector * doubleJetFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimMultiJet = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * multiJetSelector * multiJetFilter)
"
-------------------------------------------------------------------------
"seqHotlineSkimMultiJet = cms.Sequence(
    primaryVertexFilter * 
    globalTightHalo2016Filter * 
    HBHENoiseFilterResultProducer * 
    HBHENoiseFilter * 
    multiJetSelector * 
    multiJetFilter
)"
-------------------------------------------------------------------------
"seqHotlineSkimMultiJet = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * multiJetSelector * multiJetFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimHT = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * htMht * htSelector * htFilter)
"
-------------------------------------------------------------------------
seqHotlineSkimHT = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * htMht * htSelector * htFilter)
-------------------------------------------------------------------------
"seqHotlineSkimHT = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * htMht * htSelector * htFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"seqHotlineSkimMassiveDimuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * dimuons * dimuonMassFilter)
seqHotlineSkimMassiveDielectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * dielectrons * dielectronMassFilter)
seqHotlineSkimMassiveEMu = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * diEMu * diEMuMassFilter)
"
-------------------------------------------------------------------------
"seqHotlineSkimMassiveDimuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * dimuons * dimuonMassFilter)
seqHotlineSkimMassiveDielectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * dielectrons * dielectronMassFilter)
seqHotlineSkimMassiveEMu = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * diEMu * diEMuMassFilter)"
-------------------------------------------------------------------------
"seqHotlineSkimMassiveDimuon = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * dimuons * dimuonMassFilter)
seqHotlineSkimMassiveDielectron = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * dielectrons * dielectronMassFilter)
seqHotlineSkimMassiveEMu = cms.Sequence(primaryVertexFilter * globalTightHalo2016Filter * HBHENoiseFilterResultProducer * HBHENoiseFilter * diEMu * diEMuMassFilter)
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"globalTightHalo2016Filter*
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='seqHotlineSkimSingleMuon', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='globalTightHalo2016Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='singleMuonSelector', ctx=Load())), op=Mult(), right=Name(id='singleMuonFilter', ctx=Load()))], keywords=[]))"
-------------------------------------------------------------------------
"globalTightHalo2016Filter*
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"globalTightHalo2016Filter*
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='seqHotlineSkimSingleMuon', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='CSCTightHalo2015Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='singleMuonSelector', ctx=Load())), op=Mult(), right=Name(id='singleMuonFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimDoubleMuon', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='CSCTightHalo2015Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='doubleMuonSelector', ctx=Load())), op=Mult(), right=Name(id='doubleMuonFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimTripleMuon', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='CSCTightHalo2015Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='tripleMuonSelector', ctx=Load())), op=Mult(), right=Name(id='tripleMuonFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimSingleElectron', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='CSCTightHalo2015Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='singleElectronSelector', ctx=Load())), op=Mult(), right=Name(id='singleElectronFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimDoubleElectron', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='CSCTightHalo2015Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='doubleElectronSelector', ctx=Load())), op=Mult(), right=Name(id='doubleElectronFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimTripleElectron', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='CSCTightHalo2015Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='tripleElectronSelector', ctx=Load())), op=Mult(), right=Name(id='tripleElectronFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimSinglePhoton', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='CSCTightHalo2015Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='singlePhotonSelector', ctx=Load())), op=Mult(), right=Name(id='singlePhotonFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimDoublePhoton', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='CSCTightHalo2015Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='doublePhotonSelector', ctx=Load())), op=Mult(), right=Name(id='doublePhotonFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimTriplePhoton', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='CSCTightHalo2015Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='triplePhotonSelector', ctx=Load())), op=Mult(), right=Name(id='triplePhotonFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimSingleJet', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='CSCTightHalo2015Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='singleJetSelector', ctx=Load())), op=Mult(), right=Name(id='singleJetFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimDoubleJet', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='CSCTightHalo2015Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='doubleJetSelector', ctx=Load())), op=Mult(), right=Name(id='doubleJetFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimMultiJet', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='CSCTightHalo2015Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='multiJetSelector', ctx=Load())), op=Mult(), right=Name(id='multiJetFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimHT', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='CSCTightHalo2015Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='htMht', ctx=Load())), op=Mult(), right=Name(id='htSelector', ctx=Load())), op=Mult(), right=Name(id='htFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimMassiveDimuon', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='CSCTightHalo2015Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='dimuons', ctx=Load())), op=Mult(), right=Name(id='dimuonMassFilter', ctx=Load()))], keywords=[]))

+ Assign(targets=[Name(id='seqHotlineSkimMassiveDielectron', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='CSCTightHalo2015Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='dielectrons', ctx=Load())), op=Mult(), right=Name(id='dielectronMassFilter', ctx=Load()))], keywords=[])"
-------------------------------------------------------------------------
"globalTightHalo2016Filter*
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"globalTightHalo2016Filter*
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='seqHotlineSkimSingleMuon', ctx=Store())], value=Call(func=Attribute(value=Name(id='cms', ctx=Load()), attr='Sequence', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='primaryVertexFilter', ctx=Load()), op=Mult(), right=Name(id='globalTightHalo2016Filter', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilterResultProducer', ctx=Load())), op=Mult(), right=Name(id='HBHENoiseFilter', ctx=Load())), op=Mult(), right=Name(id='singleMuonSelector', ctx=Load())), op=Mult(), right=Name(id='singleMuonFilter', ctx=Load()))], keywords=[]))"
-------------------------------------------------------------------------
"globalTightHalo2016Filter*
"
-------------------------------------------------------------------------
"Recom
PRs: 15727, 15728"
-------------------------------------------------------------------------
=========================================================================
"'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
# Lumi
'keep LumiScalerss_scalersRawToDigi_*_*',
"
-------------------------------------------------------------------------
"'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
'keep LumiScalerss_scalersRawToDigi_*_*',"
-------------------------------------------------------------------------
"'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
# Lumi
'keep LumiScalerss_scalersRawToDigi_*_*',
"
-------------------------------------------------------------------------
"Recom
PRs: 15585, 15622"
-------------------------------------------------------------------------
=========================================================================
"maxSVDeltaRToJet = cms.double(1.0),
"
-------------------------------------------------------------------------
"maxSVDeltaRToJet = cms.double(1.0),"
-------------------------------------------------------------------------
"maxSVDeltaRToJet = cms.double(1.0),
"
-------------------------------------------------------------------------
"Recom
PRs: 15445, 15446"
-------------------------------------------------------------------------
=========================================================================
"SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned = cms.EDAnalyzer(""SUSY_HLT_InclusiveHT"",
  trigSummary = cms.InputTag(""hltTriggerSummaryAOD""),
  pfMETCollection = cms.InputTag(""pfMet""),
  pfJetCollection = cms.InputTag(""ak4PFJetsCHS""),
  caloJetCollection = cms.InputTag(""ak4CaloJets""),
  TriggerResults = cms.InputTag('TriggerResults','','HLT'),
  TriggerPath = cms.string('HLT_PFMETTypeOne190_HBHE_BeamHaloCleaned_v'),
  TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu24_eta2p1_IterTrk02_v'),
  TriggerFilter = cms.InputTag('hltPFMETTypeOne190', '', 'HLT'), #the last filter in the path
  PtThrJet = cms.untracked.double(30.0),
  EtaThrJet = cms.untracked.double(3.0)
)
"
-------------------------------------------------------------------------
"SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned = cms.EDAnalyzer(""SUSY_HLT_InclusiveHT"",
  trigSummary = cms.InputTag(""hltTriggerSummaryAOD""),
  pfMETCollection = cms.InputTag(""pfMet""),
  pfJetCollection = cms.InputTag(""ak4PFJetsCHS""),
  caloJetCollection = cms.InputTag(""ak4CaloJets""),
  TriggerResults = cms.InputTag('TriggerResults','','HLT'),
  TriggerPath = cms.string('HLT_PFMETTypeOne190_HBHE_BeamHaloCleaned_v'),
  TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu24_eta2p1_IterTrk02_v'),
  TriggerFilter = cms.InputTag('hltPFMETTypeOne190', '', 'HLT'), #the last filter in the path
  PtThrJet = cms.untracked.double(30.0),
  EtaThrJet = cms.untracked.double(3.0)
)
"
-------------------------------------------------------------------------
"SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned = cms.EDAnalyzer(""SUSY_HLT_InclusiveHT"",
  trigSummary = cms.InputTag(""hltTriggerSummaryAOD""),
  pfMETCollection = cms.InputTag(""pfMet""),
  pfJetCollection = cms.InputTag(""ak4PFJetsCHS""),
  caloJetCollection = cms.InputTag(""ak4CaloJets""),
  TriggerResults = cms.InputTag('TriggerResults','','HLT'),
  TriggerPath = cms.string('HLT_PFMETTypeOne190_HBHE_BeamHaloCleaned_v'),
  TriggerPathAuxiliaryForHadronic = cms.string('HLT_IsoMu24_eta2p1_IterTrk02_v'),
  TriggerFilter = cms.InputTag('hltPFMETTypeOne190', '', 'HLT'), #the last filter in the path
  PtThrJet = cms.untracked.double(30.0),
  EtaThrJet = cms.untracked.double(3.0)
)
"
-------------------------------------------------------------------------
"Recom
PRs: 15108, 15109"
-------------------------------------------------------------------------
=========================================================================
"SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned_POSTPROCESSING = cms.EDAnalyzer(""DQMGenericClient"",
  subDirs = cms.untracked.vstring(""HLT/SUSYBSM/HLT_PFMETTypeOne190_HBHE_BeamHaloCleaned_v""),
  efficiency = cms.vstring(
    ""pfMetTurnOn_eff 'Efficiency vs PFMET' pfMetTurnOn_num pfMetTurnOn_den"",
    ""pfHTTurnOn_eff 'Efficiency vs PFHT' pfHTTurnOn_num pfHTTurnOn_den""
    ),
  resolution = cms.vstring("""")
)
                                     SUSY_HLT_InclusiveMET_NotCleaned 
                                     SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned
                                                    SUSY_HLT_InclusiveMET_NotCleaned_POSTPROCESSING 
                                                    SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned_POSTPROCESSING
"
-------------------------------------------------------------------------
"SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned = cms.Sequence(SUSY_HLT_InclusiveMET_Default +
                                      SUSY_HLT_InclusiveMET_NoiseCleaned +
                                      SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned +
 )

 SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned_POSTPROCESSING = cms.Sequence(SUSY_HLT_InclusiveMET_Default_POSTPROCESSING +
                                                     SUSY_HLT_InclusiveMET_NoiseCleaned_POSTPROCESSING +
                                                     SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned_POSTPROCESSING +
 )"
-------------------------------------------------------------------------
"SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned_POSTPROCESSING = cms.EDAnalyzer(""DQMGenericClient"",
  subDirs = cms.untracked.vstring(""HLT/SUSYBSM/HLT_PFMETTypeOne190_HBHE_BeamHaloCleaned_v""),
  efficiency = cms.vstring(
    ""pfMetTurnOn_eff 'Efficiency vs PFMET' pfMetTurnOn_num pfMetTurnOn_den"",
    ""pfHTTurnOn_eff 'Efficiency vs PFHT' pfHTTurnOn_num pfHTTurnOn_den""
    ),
  resolution = cms.vstring("""")
)
                                     SUSY_HLT_InclusiveMET_NotCleaned 
                                     SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned
                                                    SUSY_HLT_InclusiveMET_NotCleaned_POSTPROCESSING 
                                                    SUSY_HLT_InclusiveType1PFMET_HBHE_BeamHaloCleaned_POSTPROCESSING
"
-------------------------------------------------------------------------
"Recom
PRs: 15108, 15109"
-------------------------------------------------------------------------
=========================================================================
"'HLT_Ele27_eta2p1_',
'HLT_IsoMu22_'
"
-------------------------------------------------------------------------
"HLT_Ele27_eta2p1,
'HLT_IsoMu22'"
-------------------------------------------------------------------------
"'HLT_Ele27_eta2p1_',
'HLT_IsoMu22_'
"
-------------------------------------------------------------------------
"Recom
PRs: 14986, 14987"
-------------------------------------------------------------------------
=========================================================================
"""HLT_PFMET120_* OR HLT_CaloMHTNoPU90_PFMET90_PFMHT90_IDTight_* OR HLT_QuadPFJet_VBF* OR HLT_Ele27_eta2p1_* OR HLT_IsoMu22_*""),
tResults = cms.InputTag( """" ),
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

hltResults = cms.InputTag( ""TriggerResults"", """", ""HLT"" ),"
-------------------------------------------------------------------------
"""HLT_PFMET120_* OR HLT_CaloMHTNoPU90_PFMET90_PFMHT90_IDTight_* OR HLT_QuadPFJet_VBF* OR HLT_Ele27_eta2p1_* OR HLT_IsoMu22_*""),
tResults = cms.InputTag( """" ),
"
-------------------------------------------------------------------------
"Recom
PRs: 14986, 14987"
-------------------------------------------------------------------------
=========================================================================
"'HLT_Ele27_eta2p1_',
'HLT_IsoMu22_'
"
-------------------------------------------------------------------------
"```python
'HltVertexValidationVertices= cms.EDAnalyzer(""HLTVertexPerformanceAnalyzer"",
 	HLT_QuadPFJet_VBF',
 	HLT_QuadPFJet_VBF',
 	HLT_QuadPFJet_VBF',
 	),
 	Vertex = cms.VInputTag(
 		cms.InputTag(""hltVerticesL3""), 
 		cms.InputTag(""hltVerticesL3""), 
 	),
 	VertexRecoTrack = cms.InputTag('hltTracksIter')
 	),

```"
-------------------------------------------------------------------------
"'HLT_Ele27_eta2p1_',
'HLT_IsoMu22_'
"
-------------------------------------------------------------------------
"Recom
PRs: 14986, 14987"
-------------------------------------------------------------------------
=========================================================================
"'HLT_Ele27_eta2p1_',
'HLT_IsoMu22_'
"
-------------------------------------------------------------------------
"                'HLT_Ele27_eta2p1',
                'HLT_IsoMu22',"
-------------------------------------------------------------------------
"'HLT_Ele27_eta2p1_',
'HLT_IsoMu22_'
"
-------------------------------------------------------------------------
"Recom
PRs: 14986, 14987"
-------------------------------------------------------------------------
=========================================================================
"#process.load(""HLTriggerOffline.Btag.HltBtagValidationFastSim_cff"")
	fileNames = cms.untracked.vstring(""root://xrootd.ba.infn.it//store/relval/CMSSW_8_0_11/RelValTTbar_13/GEN-SIM-DIGI-RAW-HLTDEBUG/80X_mcRun2_asymptotic_v14_reHLT_HS-v1/10000/1AAA874F-0D33-E611-B99E-0CC47A4D75EE.root"")
"
-------------------------------------------------------------------------
"process.load(""HLTriggerOffline.Btag.HltBtagValidationFastSim_cff"")
process.source = cms.Source(""PoolSource"",
    fileNames = cms.untracked.vstring(""root://xrootd.ba.infn.it//store/relval/CMSSW_7_5_0_pre6/RelValTTbar_13/GEN-SIM-DIGI-RAW-HLTDEBUG/75X_mcRun2_asymptotic_v1_v1/00000/E511C308-11B8-E511-B3F6-0025905C9848.root"")
)"
-------------------------------------------------------------------------
"#process.load(""HLTriggerOffline.Btag.HltBtagValidationFastSim_cff"")
	fileNames = cms.untracked.vstring(""root://xrootd.ba.infn.it//store/relval/CMSSW_8_0_11/RelValTTbar_13/GEN-SIM-DIGI-RAW-HLTDEBUG/80X_mcRun2_asymptotic_v14_reHLT_HS-v1/10000/1AAA874F-0D33-E611-B99E-0CC47A4D75EE.root"")
"
-------------------------------------------------------------------------
"Recom
PRs: 14986, 14987"
-------------------------------------------------------------------------
=========================================================================
"#    * ak8PFCHSL1FastjetL2L3ResidualCorrectorChain #not working in all matrix tests, yet
"
-------------------------------------------------------------------------
"    * ak8PFCHSL1FastjetL2L3ResidualCorrectorChain #not stable in all matrix tests, hence disabled"
-------------------------------------------------------------------------
"#    * ak8PFCHSL1FastjetL2L3ResidualCorrectorChain #not working in all matrix tests, yet
"
-------------------------------------------------------------------------
"Recom
PRs: 14705, 14706"
-------------------------------------------------------------------------
=========================================================================
"#    PFJetCollectionLabel   = cms.InputTag(""ak8PFJetsCHS""), # does not work in all matrix tests, yet
#    PFJetCorLabel        = cms.InputTag(""ak8PFCHSL1FastjetL2L3ResidualCorrector""), # does not work in all matrix tests, yet 
PFJetCollectionLabel   = cms.InputTag(""ak4PFJets""),
PFJetCorLabel        = cms.InputTag(""ak4PFL1FastL2L3ResidualCorrector""), #dummy residual corrections now also provided for MC GTs
"
-------------------------------------------------------------------------
"#    PFJetCollectionLabel   = cms.InputTag(""ak8PFJetsCHS""), # does not work in all matrix tests, yet
#    PFJetCorLabel        = cms.InputTag(""ak8PFCHSL1FastjetL2L3ResidualCorrector""), # does not work in all matrix tests, yet 
PFJetCollectionLabel   = cms.InputTag(""ak4PFJets""),
PFJetCorLabel        = cms.InputTag(""ak4PFL1FastL2L3ResidualCorrector""), #dummy residual corrections now also provided for MC GTs"
-------------------------------------------------------------------------
"#    PFJetCollectionLabel   = cms.InputTag(""ak8PFJetsCHS""), # does not work in all matrix tests, yet
#    PFJetCorLabel        = cms.InputTag(""ak8PFCHSL1FastjetL2L3ResidualCorrector""), # does not work in all matrix tests, yet 
PFJetCollectionLabel   = cms.InputTag(""ak4PFJets""),
PFJetCorLabel        = cms.InputTag(""ak4PFL1FastL2L3ResidualCorrector""), #dummy residual corrections now also provided for MC GTs
"
-------------------------------------------------------------------------
"Recom
PRs: 14705, 14706"
-------------------------------------------------------------------------
=========================================================================
"L1Taus                = cms.untracked.InputTag(""hltCaloStage2Digis"", ""Tau""),
L1ETM                 = cms.untracked.InputTag(""hltCaloStage2Digis"",""EtSum""),
"
-------------------------------------------------------------------------
"L1Taus                = cms.untracked.InputTag(""hltCaloStage2Digis"", ""Tau""),
L1ETMMin              = cms.untracked.double(50),"
-------------------------------------------------------------------------
"L1Taus                = cms.untracked.InputTag(""hltCaloStage2Digis"", ""Tau""),
L1ETM                 = cms.untracked.InputTag(""hltCaloStage2Digis"",""EtSum""),
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"l1stage2Taus_     = ps.getUntrackedParameter<edm::InputTag>(""L1Taus"");
l1stage2TausToken_= cc.consumes<l1t::TauBxCollection>(l1stage2Taus_);
l1stage2Sums_     = ps.getUntrackedParameter<edm::InputTag>(""L1ETM"");
l1stage2SumsToken_= cc.consumes<l1t::EtSumBxCollection>(l1stage2Sums_);
"
-------------------------------------------------------------------------
"l1stage2Taus_     = ps.getUntrackedParameter<edm::InputTag>(""L1Taus"");
l1stage2TausToken_= cc.consumes<l1t::TauBxCollection>(l1stage2Taus_);
l1stage2Sums_     = ps.getUntrackedParameter<edm::InputTag>(""L1ETMMin"");
l1stage2SumsToken_= cc.consumes<l1t::EtSumBxCollection>(l1stage2Sums_);"
-------------------------------------------------------------------------
"l1stage2Taus_     = ps.getUntrackedParameter<edm::InputTag>(""L1Taus"");
l1stage2TausToken_= cc.consumes<l1t::TauBxCollection>(l1stage2Taus_);
l1stage2Sums_     = ps.getUntrackedParameter<edm::InputTag>(""L1ETM"");
l1stage2SumsToken_= cc.consumes<l1t::EtSumBxCollection>(l1stage2Sums_);
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"    edm::Handle<l1t::TauBxCollection> taus;
    iEvent.getByToken(l1stage2TausToken_, taus);  
            
    edm::Handle<l1t::EtSumBxCollection> sums;
    iEvent.getByToken(l1stage2SumsToken_, sums);
      for(l1t::TauBxCollection::const_iterator i = taus->begin(); i != taus->end(); i) {
"
-------------------------------------------------------------------------
"    edm::Handle<l1t::TauBxCollection> taus;
    iEvent.getByToken(l1stage2TausToken_, taus);  
      
    edm::Handle<l1t::EtSumBxCollection> sums;
    iEvent.getByToken(l1stage2SumsToken_, sums);
    for (l1t::TauBxCollection::const_iterator i = taus->begin(); i != taus->end(); ++i) {"
-------------------------------------------------------------------------
"    edm::Handle<l1t::TauBxCollection> taus;
    iEvent.getByToken(l1stage2TausToken_, taus);  
            
    edm::Handle<l1t::EtSumBxCollection> sums;
    iEvent.getByToken(l1stage2SumsToken_, sums);
      for(l1t::TauBxCollection::const_iterator i = taus->begin(); i != taus->end(); i) {
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"edm::LogWarning(""HLTTauDQMOffline"") << ""HLTTauDQML1Plotter::analyze: unable to read L1 tau collection "" << l1stage2Taus_.encode();
(sums.isValid() && sums.product()->size() > 0) {
if(!doRefAnalysis_) {
  for (int ibx = sums->getFirstBX(); ibx <= sums->getLastBX(); ibx) {
    for (l1t::EtSumBxCollection::const_iterator it=sums->begin(ibx); it!=sums->end(ibx); it) {
      int type = static_cast<int>( it->getType() );
      if(type == l1t::EtSum::EtSumType::kMissingEt) l1etmEt_->Fill(it->et());
edm::LogWarning(""HLTTauDQMOffline"") << ""HLTTauDQML1Plotter::analyze: unable to read L1 met collection "" << l1stage2Sums_.encode();
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms 
l1etmEt_->Fill(it->et());
   }
  }
 }
}

if (sums.isValid() && sums.product()->size() > 0) {
 if (!doRefAnalysis_) {
   for (int ibx = sums->getFirstBX(); ibx <= sums->getLastBX(); ibx) {
     for (l1t::EtSumBxCollection::const_iterator it = sums->begin(ibx); it != sums->end(ibx); it) {
       int type = static_cast<int>(it->getType());
       if (type == l1t::EtSum::EtSumType::kMissingEt) {
         l1etmEt_->Fill(it->et());
       }
     }
   }
 }
}

edm::LogWarning(""HLTTauDQMOffline"") << ""HLTTauDQML1Plotter::analyze: unable to read L1 met collection "" << l1stage2Sums_.encode();"
-------------------------------------------------------------------------
"edm::LogWarning(""HLTTauDQMOffline"") << ""HLTTauDQML1Plotter::analyze: unable to read L1 tau collection "" << l1stage2Taus_.encode();
(sums.isValid() && sums.product()->size() > 0) {
if(!doRefAnalysis_) {
  for (int ibx = sums->getFirstBX(); ibx <= sums->getLastBX(); ibx) {
    for (l1t::EtSumBxCollection::const_iterator it=sums->begin(ibx); it!=sums->end(ibx); it) {
      int type = static_cast<int>( it->getType() );
      if(type == l1t::EtSum::EtSumType::kMissingEt) l1etmEt_->Fill(it->et());
edm::LogWarning(""HLTTauDQMOffline"") << ""HLTTauDQML1Plotter::analyze: unable to read L1 met collection "" << l1stage2Sums_.encode();
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"if(sums.isValid() && sums.product()->size() > 0) {
  for (int ibx = sums->getFirstBX(); ibx <= sums->getLastBX(); ibx) {
    for (l1t::EtSumBxCollection::const_iterator it=sums->begin(ibx); it!=sums->end(ibx); it) {
      int type = static_cast<int>( it->getType() );
      if(type == l1t::EtSum::EtSumType::kMissingEt) {
        l1etmEt_->Fill(it->et());
        l1etmPhi_->Fill(it->phi());
        if( it->et() > l1ETMMin_){
          l1etmEtEffNum_->Fill(it->et());
      }
  }
"
-------------------------------------------------------------------------
"```cpp
if(sums.isValid() && sums.product()->size() > 0) {
  for (int ibx = sums->getFirstBX(); ibx <= sums->getLastBX(); ++ibx) {
    for (l1t::EtSumBxCollection::const_iterator it=sums->begin(ibx); it!=sums->end(ibx); ++it) {
      int type = static_cast<int>( it->getType() );
      if(type == l1t::EtSum::EtSumType::kMissingEt) {
        l1etmEt_->Fill(it->et());
        l1etmPhi_->Fill(it->phi());
        if( it->et() > l1ETMMin_){
          l1etmEtEffNum_->Fill(it->et());
        }
      }
    }
  }
}
```"
-------------------------------------------------------------------------
"if(sums.isValid() && sums.product()->size() > 0) {
  for (int ibx = sums->getFirstBX(); ibx <= sums->getLastBX(); ibx) {
    for (l1t::EtSumBxCollection::const_iterator it=sums->begin(ibx); it!=sums->end(ibx); it) {
      int type = static_cast<int>( it->getType() );
      if(type == l1t::EtSum::EtSumType::kMissingEt) {
        l1etmEt_->Fill(it->et());
        l1etmPhi_->Fill(it->phi());
        if( it->et() > l1ETMMin_){
          l1etmEtEffNum_->Fill(it->et());
      }
  }
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"//std::cout << ""check menu "" << HLTCP.tableName() << std::endl;
if(moduleType == ""HLTL1TSeed"") {
"
-------------------------------------------------------------------------
"// Checking the menu and retrieving the table name
std::cout << ""check menu "" << HLTCP.tableName() << std::endl;
if(moduleType == ""HLTL1TSeed"") {"
-------------------------------------------------------------------------
"//std::cout << ""check menu "" << HLTCP.tableName() << std::endl;
if(moduleType == ""HLTL1TSeed"") {
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"isFirstL1Seed_ = HLTCP.moduleType(std::get<kName>(filterIndices_[0])) == ""HLTL1TSeed"";
"
-------------------------------------------------------------------------
"isFirstL1Seed_ = hltCP.moduleType(edm::ParameterSet::Item<kName>(filterIndices_[0])) == ""HLTL1TSeed"";"
-------------------------------------------------------------------------
"isFirstL1Seed_ = HLTCP.moduleType(std::get<kName>(filterIndices_[0])) == ""HLTL1TSeed"";
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"#ifdef EDM_ML_DEBUG  
"
-------------------------------------------------------------------------
"```cpp
#ifdef FWCore_ParameterSet_Config
```"
-------------------------------------------------------------------------
"#ifdef EDM_ML_DEBUG  
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"//std::cout << ""trigger object id "" << isL1 << "" "" << trgObj.id << "" "" << trigger::TriggerL1Tau << "" ""<< trigger::TriggerTau << std::endl;
if(! ((isL1 && trgObj.id == trigger::TriggerL1Tau) || trgObj.id == trigger::TriggerTau ) )
  //std::cout << ""trigger object DR match"" << std::endl;
"
-------------------------------------------------------------------------
"//std::cout << ""trigger object id "" << isL1 << "" "" << trgObj.id << "" "" << trigger::TriggerL1Tau << "" ""<< trigger::TriggerTau << std::endl;

// Check if the trigger object ID matches TriggerL1Tau or TriggerTau
if(!((isL1 && trgObj.id == trigger::TriggerL1Tau) || trgObj.id == trigger::TriggerTau)) {
    //std::cout << ""trigger object DR match"" << std::endl;

    // Adding the offlineMatching function call here for better context organization
    offlineMatching(i, triggerObjects, offlineObjects, dR, matchedObjects, matchedTriggerObjects);
}"
-------------------------------------------------------------------------
"//std::cout << ""trigger object id "" << isL1 << "" "" << trgObj.id << "" "" << trigger::TriggerL1Tau << "" ""<< trigger::TriggerTau << std::endl;
if(! ((isL1 && trgObj.id == trigger::TriggerL1Tau) || trgObj.id == trigger::TriggerTau ) )
  //std::cout << ""trigger object DR match"" << std::endl;
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"if(! ((isL1 && (trgObj.id == trigger::TriggerL1EG))
"
-------------------------------------------------------------------------
"```cpp
if(!((trgObj.id == trigger::TriggerElectron) || (trgObj.id == trigger::TriggerPhoton)))
```"
-------------------------------------------------------------------------
"if(! ((isL1 && (trgObj.id == trigger::TriggerL1EG))
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"const int ntaus = hltPath_.getFilterNTaus(hltPath_.getLastL3TauFilterIndex());
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

# Book di-object invariant mass histogram only for mu+tau, ele+tau, and di-tau paths
hMass_ = None
if doRefAnalysis_:
    const int neles = hltPath_.getFilterNElectrons(hltPath_.getLastL3ElectronFilterIndex())
    const int nmus = hltPath_.getFilterNMuons(hltPath_.getLastL3MuonFilterIndex())
    const int ntaus = hltPath_.getFilterNTaus(hltPath_.getLastL3TauFilterIndex())"
-------------------------------------------------------------------------
"const int ntaus = hltPath_.getFilterNTaus(hltPath_.getLastL3TauFilterIndex());
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"  // Triggered object kinematics
  for(const HLTTauDQMPath::Object& obj: triggerObjs) {
    if(obj.id == trigger::TriggerTau){
 hTrigTauEt_->Fill(obj.object.pt());
TrigTauEta_->Fill(obj.object.eta());
TrigTauPhi_->Fill(obj.object.phi());
    }
    if(obj.id == trigger::TriggerElectron || obj.id == trigger::TriggerPhoton){
      hTrigElectronEt_->Fill(obj.object.pt());
      hTrigElectronEta_->Fill(obj.object.eta());
      hTrigElectronPhi_->Fill(obj.object.phi());
    }
    if(obj.id == trigger::TriggerMuon){   
      hTrigMuonEt_->Fill(obj.object.pt());   
      hTrigMuonEta_->Fill(obj.object.eta());
      hTrigMuonPhi_->Fill(obj.object.phi());
    }
    if(obj.id == trigger::TriggerMET){
      hTrigMETEt_->Fill(obj.object.pt());
      hTrigMETPhi_->Fill(obj.object.phi());
    }
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

def HLTTauDQMPathPlotter::analyze(const edm::TriggerResults& triggerResults, const std::vector<HLTTauDQMPath::Object>& triggerObjs) {
    // Triggered object kinematics
    for(const HLTTauDQMPath::Object& obj: triggerObjs) {
        if(obj.id == trigger::TriggerTau){
            hTrigTauEt_->Fill(obj.object.pt());
            TrigTauEta_->Fill(obj.object.eta());
            TrigTauPhi_->Fill(obj.object.phi());
        }
        if(obj.id == trigger::TriggerElectron || obj.id == trigger::TriggerPhoton){
            hTrigElectronEt_->Fill(obj.object.pt());
            hTrigElectronEta_->Fill(obj.object.eta());
            hTrigElectronPhi_->Fill(obj.object.phi());
        }
        if(obj.id == trigger::TriggerMuon){   
            hTrigMuonEt_->Fill(obj.object.pt());   
            hTrigMuonEta_->Fill(obj.object.eta());
            hTrigMuonPhi_->Fill(obj.object.phi());
        }
        if(obj.id == trigger::TriggerMET){
            hTrigMETEt_->Fill(obj.object.pt());
            hTrigMETPhi_->Fill(obj.object.phi());
        }
    }
}"
-------------------------------------------------------------------------
"  // Triggered object kinematics
  for(const HLTTauDQMPath::Object& obj: triggerObjs) {
    if(obj.id == trigger::TriggerTau){
 hTrigTauEt_->Fill(obj.object.pt());
TrigTauEta_->Fill(obj.object.eta());
TrigTauPhi_->Fill(obj.object.phi());
    }
    if(obj.id == trigger::TriggerElectron || obj.id == trigger::TriggerPhoton){
      hTrigElectronEt_->Fill(obj.object.pt());
      hTrigElectronEta_->Fill(obj.object.eta());
      hTrigElectronPhi_->Fill(obj.object.phi());
    }
    if(obj.id == trigger::TriggerMuon){   
      hTrigMuonEt_->Fill(obj.object.pt());   
      hTrigMuonEta_->Fill(obj.object.eta());
      hTrigMuonPhi_->Fill(obj.object.phi());
    }
    if(obj.id == trigger::TriggerMET){
      hTrigMETEt_->Fill(obj.object.pt());
      hTrigMETPhi_->Fill(obj.object.phi());
    }
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"L1Taus                = cms.untracked.InputTag(""hltCaloStage2Digis"", ""Tau""),
L1ETM                 = cms.untracked.InputTag(""hltCaloStage2Digis"",""EtSum""),
"
-------------------------------------------------------------------------
"L1Taus                = cms.untracked.InputTag(""hltL1extraParticles"", ""Tau""),
L1ETM                 = cms.untracked.InputTag(""hltL1extraParticles"", ""MET""),"
-------------------------------------------------------------------------
"L1Taus                = cms.untracked.InputTag(""hltCaloStage2Digis"", ""Tau""),
L1ETM                 = cms.untracked.InputTag(""hltCaloStage2Digis"",""EtSum""),
"
-------------------------------------------------------------------------
"Recom
PRs: 14395, 14427"
-------------------------------------------------------------------------
=========================================================================
"b2gElePlusSingleJetHLTValidation  = cms.EDAnalyzer('B2GSingleLeptonHLTValidation',
        # Directory
        sDir         = cms.untracked.string('HLT/B2GHLTValidation/B2G/ElePlusSingleJet/'),
        # Electrons
        sElectrons   = cms.untracked.string('gedGsfElectrons'),
        ptElectrons  = cms.untracked.double(50.),
        etaElectrons = cms.untracked.double(2.5),
        minElectrons = cms.untracked.uint32(1),
        # Muons
        sMuons       = cms.untracked.string('muons'),
        ptMuons      = cms.untracked.double(40.),
        etaMuons     = cms.untracked.double(2.1),
        minMuons     = cms.untracked.uint32(0),
        # Jets
        sJets        = cms.untracked.string('ak4PFJetsCHS'),
        ptJets0      = cms.untracked.double(140.),
        ptJets1      = cms.untracked.double(-1.0),
        etaJets      = cms.untracked.double(2.4),
        minJets      = cms.untracked.uint32(1),
        # Trigger
        sTrigger     = cms.untracked.string(""TriggerResults""),
        vsPaths      = cms.untracked.vstring(['HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet140',
                                              'HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165']),
)
"
-------------------------------------------------------------------------
"b2gElePlusSingleJetHLTValidation = cms.EDAnalyzer('B2GSingleLeptonHLTValidation',
         # Directory
         sDir         = cms.untracked.string('HLT/B2GHLTValidation/B2G/ElePlusSingleJet/'),
         # Electrons
         sElectrons   = cms.untracked.string('gedGsfElectrons'),
         ptElectrons  = cms.untracked.double(50.),
         etaElectrons = cms.untracked.double(2.5),
         minElectrons = cms.untracked.uint32(1),
         # Muons
         sMuons       = cms.untracked.string('muons'),
         ptMuons      = cms.untracked.double(40.),
         etaMuons     = cms.untracked.double(2.1),
         minMuons     = cms.untracked.uint32(0),
         # Jets
         sJets        = cms.untracked.string('ak4PFJetsCHS'),
         ptJets0      = cms.untracked.double(140.),
         ptJets1      = cms.untracked.double(-1.0),
         etaJets      = cms.untracked.double(2.4),
         minJets      = cms.untracked.uint32(1),
         # Trigger
         sTrigger     = cms.untracked.string(""TriggerResults""),
         vsPaths      = cms.untracked.vstring(['HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet140',
                                               'HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165']),
 )"
-------------------------------------------------------------------------
"b2gElePlusSingleJetHLTValidation  = cms.EDAnalyzer('B2GSingleLeptonHLTValidation',
        # Directory
        sDir         = cms.untracked.string('HLT/B2GHLTValidation/B2G/ElePlusSingleJet/'),
        # Electrons
        sElectrons   = cms.untracked.string('gedGsfElectrons'),
        ptElectrons  = cms.untracked.double(50.),
        etaElectrons = cms.untracked.double(2.5),
        minElectrons = cms.untracked.uint32(1),
        # Muons
        sMuons       = cms.untracked.string('muons'),
        ptMuons      = cms.untracked.double(40.),
        etaMuons     = cms.untracked.double(2.1),
        minMuons     = cms.untracked.uint32(0),
        # Jets
        sJets        = cms.untracked.string('ak4PFJetsCHS'),
        ptJets0      = cms.untracked.double(140.),
        ptJets1      = cms.untracked.double(-1.0),
        etaJets      = cms.untracked.double(2.4),
        minJets      = cms.untracked.uint32(1),
        # Trigger
        sTrigger     = cms.untracked.string(""TriggerResults""),
        vsPaths      = cms.untracked.vstring(['HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet140',
                                              'HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165']),
)
"
-------------------------------------------------------------------------
"Recom
PRs: 14129, 14144"
-------------------------------------------------------------------------
=========================================================================
"import os
import ROOT
"
-------------------------------------------------------------------------
"import os
from TkAlExceptions import AllInOneError"
-------------------------------------------------------------------------
"import os
import ROOT
"
-------------------------------------------------------------------------
"Recom
PRs: 13814, 13815"
-------------------------------------------------------------------------
=========================================================================
"        try: #make sure color is an int
            int(self.color)
        except ValueError:
            try:   #kRed, kBlue, ...
                self.color = str(getattr(ROOT, self.color))
                int(self.color)
            except (AttributeError, ValueError):
                raise ValueError(""color has to be an integer or a ROOT constant (kRed, kBlue, ...)!"")
        try: #make sure style is an int
            int(self.style)
        except ValueError:
            raise ValueError(""style has to be an integer!"")
"
-------------------------------------------------------------------------
"```python
        try:  # make sure color is an int
            int(self.color)
        except ValueError:
            try:  # kRed, kBlue, ...
                self.color = str(getattr(ROOT, self.color))
                int(self.color)
            except (AttributeError, ValueError):
                raise ValueError(""color has to be an integer or a ROOT constant (kRed, kBlue, ...)!"")

        try:  # make sure style is an int
            int(self.style)
        except ValueError:
            raise ValueError(""style has to be an integer!"")
```"
-------------------------------------------------------------------------
"        try: #make sure color is an int
            int(self.color)
        except ValueError:
            try:   #kRed, kBlue, ...
                self.color = str(getattr(ROOT, self.color))
                int(self.color)
            except (AttributeError, ValueError):
                raise ValueError(""color has to be an integer or a ROOT constant (kRed, kBlue, ...)!"")
        try: #make sure style is an int
            int(self.style)
        except ValueError:
            raise ValueError(""style has to be an integer!"")
"
-------------------------------------------------------------------------
"Recom
PRs: 13814, 13815"
-------------------------------------------------------------------------
=========================================================================
"try:
    for index, value in enumerate(the_map[key]):
        result = result.replace("".oO[""  key  ""[""  str(index)  ""]]Oo."", value)
except TypeError:
    raise TypeError(""Something is wrong in replaceByMap!  Need a string, dict, or list, but the_map(%s)=%s!""%(repr(key), repr(the_map[key])))
"
-------------------------------------------------------------------------
"try:
    for index, value in enumerate(the_map[key]):
        result = result.replace("".oO["" + key + ""["" + str(index) + ""]]Oo."", value)
except TypeError:
    raise TypeError(""Something is wrong in replaceByMap! Need a string, dict, or list, but the_map(%s)=%s!"" % (repr(key), repr(the_map[key])))

"
-------------------------------------------------------------------------
"try:
    for index, value in enumerate(the_map[key]):
        result = result.replace("".oO[""  key  ""[""  str(index)  ""]]Oo."", value)
except TypeError:
    raise TypeError(""Something is wrong in replaceByMap!  Need a string, dict, or list, but the_map(%s)=%s!""%(repr(key), repr(the_map[key])))
"
-------------------------------------------------------------------------
"Recom
PRs: 13814, 13815"
-------------------------------------------------------------------------
=========================================================================
