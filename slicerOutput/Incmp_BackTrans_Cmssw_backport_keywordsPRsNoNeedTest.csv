"tauGenJetsForNano = tauGenJets.clone(
GenParticles = ""finalGenParticles"",
includeNeutrinos = False


enJetsSelectorAllHadronsForNano = tauGenJetsSelectorAllHadrons.clone(
src = ""tauGenJetsForNano""

src = cms.InputTag(""tauGenJetsSelectorAllHadronsForNano""),
"
-------------------------------------------------------------------------
"tauGenJetsForNano = tauGenJets.clone(
GenParticles = ""finalGenParticles"",
includeNeutrinos = False

2_nanoAOD_106Xv1 & ~run2_nanoAOD_devel).toModify(tauGenJetsForNano, GenParticles = ""prunedGenParticles"")

enJetsSelectorAllHadronsForNano = tauGenJetsSelectorAllHadrons.clone(
src = ""tauGenJetsForNano""

src = cms.InputTag(""tauGenJetsSelectorAllHadronsForNano""),
"
-------------------------------------------------------------------------
"tauGenJetsForNano = tauGenJets.clone(
GenParticles = ""finalGenParticles"",
includeNeutrinos = False

2_nanoAOD_106Xv1 & ~run2_nanoAOD_devel).toModify(tauGenJetsForNano, GenParticles = ""prunedGenParticles"")

enJetsSelectorAllHadronsForNano = tauGenJetsSelectorAllHadrons.clone(
src = ""tauGenJetsForNano""

src = cms.InputTag(""tauGenJetsSelectorAllHadronsForNano""),
"
-------------------------------------------------------------------------
"Recom
PRs: 33522, 33525"
-------------------------------------------------------------------------
=========================================================================
"'run1_design'       :   '113X_mcRun1_design_v2',
'run1_mc'           :   '113X_mcRun1_realistic_v2',
'run1_mc_hi'        :   '113X_mcRun1_HeavyIon_v2',
'run1_mc_pa'        :   '113X_mcRun1_pA_v2',
"
-------------------------------------------------------------------------
"'run1_design'       :   '112X_mcRun1_design_v2',
'run1_mc'           :   '112X_mcRun1_realistic_v2',
'run1_mc_hi'        :   '112X_mcRun1_HeavyIon_v2',
'run1_mc_pa'        :   '112X_mcRun1_pA_v3',
"
-------------------------------------------------------------------------
"'run1_design'       :   '112X_mcRun1_design_v2',
'run1_mc'           :   '112X_mcRun1_realistic_v2',
'run1_mc_hi'        :   '112X_mcRun1_HeavyIon_v2',
'run1_mc_pa'        :   '112X_mcRun1_pA_v3',
"
-------------------------------------------------------------------------
"Recom
PRs: 33142, 33158"
-------------------------------------------------------------------------
=========================================================================
"'phase2_realistic'         : '113X_mcRun4_realistic_v6'
"
-------------------------------------------------------------------------
"'phase2_realistic'         : '112X_mcRun4_realistic_v7'
"
-------------------------------------------------------------------------
"'phase2_realistic'         : '112X_mcRun4_realistic_v7'
"
-------------------------------------------------------------------------
"Recom
PRs: 33142, 33158"
-------------------------------------------------------------------------
=========================================================================
"'run2_mc_50ns'      :   '113X_mcRun2_startup_v2',
'run2_mc_l1stage1'  :   '113X_mcRun2_asymptotic_l1stage1_v3',
'run2_design'       :   '113X_mcRun2_design_v3',
'run2_mc_pre_vfp'   :   '113X_mcRun2_asymptotic_preVFP_v3',
'run2_mc'           :   '113X_mcRun2_asymptotic_v3',
'run2_mc_cosmics'   :   '113X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'        :   '113X_mcRun2_HeavyIon_v3',
'run2_mc_pa'        :   '113X_mcRun2_pA_v3',
'run1_data'         :   '113X_dataRun2_v4',
'run2_data'         :   '113X_dataRun2_v4',
'run2_data_HEfail'  :   '113X_dataRun2_HEfail_v4',
'run2_data_relval'  :   '113X_dataRun2_relval_v4',
'run2_data_promptlike_hi' : '113X_dataRun2_PromptLike_HI_v4',
"
-------------------------------------------------------------------------
"'run2_mc_l1stage1'  :   '112X_mcRun2_asymptotic_l1stage1_v3',
'run2_design'       :   '112X_mcRun2_design_v3',
'run2_mc_pre_vfp'   :   '112X_mcRun2_asymptotic_preVFP_v4',
'run2_mc'           :   '112X_mcRun2_asymptotic_v4',
'run2_mc_cosmics'   :   '112X_mcRun2cosmics_asymptotic_deco_v4',
'run2_mc_hi'        :   '112X_mcRun2_HeavyIon_v3',
'run2_mc_pa'        :   '112X_mcRun2_pA_v3',
'run1_data'         :   '112X_dataRun2_v9',
'run2_data'         :   '112X_dataRun2_v9',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v9',
'run2_data_relval'  :   '112X_dataRun2_relval_v9',
'run2_data_promptlike_hi' : '112X_dataRun2_PromptLike_HI_v7',
"
-------------------------------------------------------------------------
"'run2_mc_l1stage1'  :   '112X_mcRun2_asymptotic_l1stage1_v3',
'run2_design'       :   '112X_mcRun2_design_v3',
'run2_mc_pre_vfp'   :   '112X_mcRun2_asymptotic_preVFP_v4',
'run2_mc'           :   '112X_mcRun2_asymptotic_v4',
'run2_mc_cosmics'   :   '112X_mcRun2cosmics_asymptotic_deco_v4',
'run2_mc_hi'        :   '112X_mcRun2_HeavyIon_v3',
'run2_mc_pa'        :   '112X_mcRun2_pA_v3',
'run1_data'         :   '112X_dataRun2_v9',
'run2_data'         :   '112X_dataRun2_v9',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v9',
'run2_data_relval'  :   '112X_dataRun2_relval_v9',
'run2_data_promptlike_hi' : '112X_dataRun2_PromptLike_HI_v7',
"
-------------------------------------------------------------------------
"Recom
PRs: 32959, 33011"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2017_design'       :  '113X_mc2017_design_v4',
'phase1_2017_realistic'    :  '113X_mc2017_realistic_v4',
'phase1_2017_cosmics'      :  '113X_mc2017cosmics_realistic_deco_v4',
'phase1_2017_cosmics_peak' :  '113X_mc2017cosmics_realistic_peak_v4',
'phase1_2018_design'       :  '113X_upgrade2018_design_v4',
'phase1_2018_realistic'    :  '113X_upgrade2018_realistic_v4',
'phase1_2018_realistic_rd' :  '113X_upgrade2018_realistic_RD_v2',
'phase1_2018_realistic_hi' :  '113X_upgrade2018_realistic_HI_v4',
'phase1_2018_realistic_HEfail' :  '113X_upgrade2018_realistic_HEfail_v4',
'phase1_2018_cosmics'      :  '113X_upgrade2018cosmics_realistic_deco_v4',
'phase1_2018_cosmics_peak' :  '113X_upgrade2018cosmics_realistic_peak_v4',
'phase1_2021_design'       : '113X_mcRun3_2021_design_v5', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '113X_mcRun3_2021_realistic_v7', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '113X_mcRun3_2021cosmics_realistic_deco_v6',
'phase1_2021_realistic_hi' : '113X_mcRun3_2021_realistic_HI_v5',
'phase1_2023_realistic'    : '113X_mcRun3_2023_realistic_v5', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '113X_mcRun3_2024_realistic_v5', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '112X_mc2017_design_v4',
'phase1_2017_realistic'    :  '112X_mc2017_realistic_v6',
'phase1_2017_cosmics'      :  '112X_mc2017cosmics_realistic_deco_v6',
'phase1_2017_cosmics_peak' :  '112X_mc2017cosmics_realistic_peak_v6',
'phase1_2018_design'       :  '112X_upgrade2018_design_v6',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v9',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v9',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v9',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v9',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v9',
'phase1_2021_design'       : '112X_mcRun3_2021_design_v14', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v17', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v17',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v17',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v17', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v17', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '112X_mc2017_design_v4',
'phase1_2017_realistic'    :  '112X_mc2017_realistic_v6',
'phase1_2017_cosmics'      :  '112X_mc2017cosmics_realistic_deco_v6',
'phase1_2017_cosmics_peak' :  '112X_mc2017cosmics_realistic_peak_v6',
'phase1_2018_design'       :  '112X_upgrade2018_design_v6',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v9',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v9',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v9',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v9',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v9',
'phase1_2021_design'       : '112X_mcRun3_2021_design_v14', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v17', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v17',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v17',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v17', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v17', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"Recom
PRs: 32959, 33011"
-------------------------------------------------------------------------
=========================================================================
"run2_nanoAOD_102Xv1.toModify( jetTable.variables, puId = Var(""userInt('pileupJetId:fullId')"",int,doc=""Pileup ID flags for pre-UL trainings"") )
run2_jme_2016.toModify( jetTable.variables, puId = Var(""userInt('pileupJetId:fullId')"",int,doc=""Pileup ID flags for pre-UL trainings""))
"
-------------------------------------------------------------------------
"puId106XUL18Disc = cms.InputTag('pileupJetId106XUL18:fullDiscriminant'),
"
-------------------------------------------------------------------------
"puId106XUL18Disc = cms.InputTag('pileupJetId106XUL18:fullDiscriminant'),
"
-------------------------------------------------------------------------
"Recom
PRs: 32887, 32995"
-------------------------------------------------------------------------
=========================================================================
"%(process)s.MessageLogger.TriggerSummaryProducerAOD = cms.untracked.PSet()
%(process)s.MessageLogger.L1GtTrigReport = cms.untracked.PSet()
%(process)s.MessageLogger.L1TGlobalSummary = cms.untracked.PSet()
%(process)s.MessageLogger.HLTrigReport = cms.untracked.PSet()
%(process)s.MessageLogger.FastReport = cms.untracked.PSet()
%(process)s.MessageLogger.ThroughputService = cms.untracked.PSet()
"
-------------------------------------------------------------------------
"%(process)s.MessageLogger.categories.append('ThroughputService')
"
-------------------------------------------------------------------------
"%(process)s.MessageLogger.categories.append('ThroughputService')
"
-------------------------------------------------------------------------
"Recom
PRs: 32961, 32962"
-------------------------------------------------------------------------
=========================================================================
"run2_nanoAOD_102Xv1.toModify( jetTable.variables, puId = Var(""userInt('pileupJetId:fullId')"",int,doc=""Pileup ID flags for pre-UL trainings"") )
run2_jme_2016.toModify( jetTable.variables, puId = Var(""userInt('pileupJetId:fullId')"",int,doc=""Pileup ID flags for pre-UL trainings""))
"
-------------------------------------------------------------------------
"( (run2_nanoAOD_106Xv1 & ~run2_nanoAOD_devel) | run2_nanoAOD_102Xv1 ).toModify( jetTable.variables, puIdDisc = Var(""userFloat('puId102XDisc')"",float,doc=""Pileup ID discriminant with 102X (2018) training"", precision=10)  )
( (run2_nanoAOD_106Xv1 & ~run2_nanoAOD_devel) | run2_nanoAOD_102Xv1 ).toModify( jetTable.variables, puId = Var(""userInt('pileupJetId:fullId')"",int,doc=""Pileup ID flags for pre-UL trainings"")  )
"
-------------------------------------------------------------------------
"( (run2_nanoAOD_106Xv1 & ~run2_nanoAOD_devel) | run2_nanoAOD_102Xv1 ).toModify( jetTable.variables, puIdDisc = Var(""userFloat('puId102XDisc')"",float,doc=""Pileup ID discriminant with 102X (2018) training"", precision=10)  )
( (run2_nanoAOD_106Xv1 & ~run2_nanoAOD_devel) | run2_nanoAOD_102Xv1 ).toModify( jetTable.variables, puId = Var(""userInt('pileupJetId:fullId')"",int,doc=""Pileup ID flags for pre-UL trainings"")  )
"
-------------------------------------------------------------------------
"Recom
PRs: 32887, 32951"
-------------------------------------------------------------------------
=========================================================================
"# GlobalTag for MC production (2015 L1 Trigger Stage1) with startup-like alignment and calibrations for Run2, L1 trigger in Stage1 mode
"
-------------------------------------------------------------------------
"'run2_mc_l1stage1'  :   '112X_mcRun2_asymptotic_l1stage1_v2',
'run2_design'       :   '112X_mcRun2_design_v2',
'run2_mc_pre_vfp'   :   '112X_mcRun2_asymptotic_preVFP_v3',
'run2_mc'           :   '112X_mcRun2_asymptotic_v3',
'run2_mc_cosmics'   :   '112X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'        :   '112X_mcRun2_HeavyIon_v2',
'run2_mc_pa'        :   '112X_mcRun2_pA_v2',
'run1_data'         :   '112X_dataRun2_v8',
'run2_data'         :   '112X_dataRun2_v8',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v8',
'run2_data_relval'  :   '112X_dataRun2_relval_v8',
'run2_data_promptlike_hi' : '112X_dataRun2_PromptLike_HI_v6',
'run2_hlt_relval'      :   '112X_dataRun2_HLT_relval_v3',
'run2_hlt_relval_hi'   :   '112X_dataRun2_HLT_relval_HI_v2',
'run3_data_express'        :   '112X_dataRun3_Express_v2',
'run3_data_promptlike'     :   '112X_dataRun3_Prompt_v2',
'phase1_2017_design'       :  '112X_mc2017_design_v3',
'phase1_2017_realistic'    :  '112X_mc2017_realistic_v5',
'phase1_2017_cosmics'      :  '112X_mc2017cosmics_realistic_deco_v5',
'phase1_2017_cosmics_peak' :  '112X_mc2017cosmics_realistic_peak_v5',
'phase1_2018_design'       :  '112X_upgrade2018_design_v5',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v8',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v8',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v8',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v8',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v8',
'phase1_2021_design'       : '112X_mcRun3_2021_design_v13', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v16', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v16',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v16',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v16', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v16', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '112X_mcRun4_realistic_v6'
"
-------------------------------------------------------------------------
"'run2_mc_l1stage1'  :   '112X_mcRun2_asymptotic_l1stage1_v2',
'run2_design'       :   '112X_mcRun2_design_v2',
'run2_mc_pre_vfp'   :   '112X_mcRun2_asymptotic_preVFP_v3',
'run2_mc'           :   '112X_mcRun2_asymptotic_v3',
'run2_mc_cosmics'   :   '112X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'        :   '112X_mcRun2_HeavyIon_v2',
'run2_mc_pa'        :   '112X_mcRun2_pA_v2',
'run1_data'         :   '112X_dataRun2_v8',
'run2_data'         :   '112X_dataRun2_v8',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v8',
'run2_data_relval'  :   '112X_dataRun2_relval_v8',
'run2_data_promptlike_hi' : '112X_dataRun2_PromptLike_HI_v6',
'run2_hlt_relval'      :   '112X_dataRun2_HLT_relval_v3',
'run2_hlt_relval_hi'   :   '112X_dataRun2_HLT_relval_HI_v2',
'run3_data_express'        :   '112X_dataRun3_Express_v2',
'run3_data_promptlike'     :   '112X_dataRun3_Prompt_v2',
'phase1_2017_design'       :  '112X_mc2017_design_v3',
'phase1_2017_realistic'    :  '112X_mc2017_realistic_v5',
'phase1_2017_cosmics'      :  '112X_mc2017cosmics_realistic_deco_v5',
'phase1_2017_cosmics_peak' :  '112X_mc2017cosmics_realistic_peak_v5',
'phase1_2018_design'       :  '112X_upgrade2018_design_v5',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v8',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v8',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v8',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v8',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v8',
'phase1_2021_design'       : '112X_mcRun3_2021_design_v13', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v16', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v16',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v16',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v16', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v16', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '112X_mcRun4_realistic_v6'
"
-------------------------------------------------------------------------
"Recom
PRs: 32758, 32772"
-------------------------------------------------------------------------
=========================================================================
"output->push_back(L2MuonTrajectorySeed(seedTSOS, container, alongMomentum, dummyRef));
  output->push_back(L2MuonTrajectorySeed(seedTSOS, container, alongMomentum, dummyRef));
"
-------------------------------------------------------------------------
"TrajectorySeed::const_iterator tsci = assoOffseed->recHits().first, tscie = assoOffseed->recHits().second;
output->push_back(L2MuonTrajectorySeed(seedTSOS, container, alongMomentum, dummyRef));
  output->push_back(L2MuonTrajectorySeed(seedTSOS, container, alongMomentum, dummyRef));
"
-------------------------------------------------------------------------
"TrajectorySeed::const_iterator tsci = assoOffseed->recHits().first, tscie = assoOffseed->recHits().second;
output->push_back(L2MuonTrajectorySeed(seedTSOS, container, alongMomentum, dummyRef));
  output->push_back(L2MuonTrajectorySeed(seedTSOS, container, alongMomentum, dummyRef));
"
-------------------------------------------------------------------------
"Recom
PRs: 32699, 32700"
-------------------------------------------------------------------------
=========================================================================
"'run1_design'       :   '106X_mcRun1_design_v4',
'run1_mc'           :   '106X_mcRun1_realistic_v4',
'run1_mc_hi'        :   '106X_mcRun1_HeavyIon_v4',
'run1_mc_pa'        :   '106X_mcRun1_pA_v4',
'run2_mc_50ns'      :   '106X_mcRun2_startup_v5',
'run2_mc_l1stage1'  :   '106X_mcRun2_asymptotic_l1stage1_v5',
'run2_design'       :   '106X_mcRun2_design_v8',
'run2_mc_pre_vfp'   :   '106X_mcRun2_asymptotic_preVFP_v10',
'run2_mc'           :   '106X_mcRun2_asymptotic_v16',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'        :   '106X_mcRun2_HeavyIon_v5',
'run2_mc_pa'        :   '106X_mcRun2_pA_v6',
'run1_data'         :   '106X_dataRun2_v33',
'run2_data'         :   '106X_dataRun2_v33',
'run2_data_relval'  :   '106X_dataRun2_relval_v31',
'run2_data_promptlike_HEfail' : '106X_dataRun2_PromptLike_HEfail_v14',
'run2_data_promptlike'    : '106X_dataRun2_PromptLike_v15',
'run2_data_promptlike_hi' : '106X_dataRun2_PromptLike_HI_v15',
"
-------------------------------------------------------------------------
"'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v5',
"
-------------------------------------------------------------------------
"'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v5',
"
-------------------------------------------------------------------------
"Recom
PRs: 32435, 32581"
-------------------------------------------------------------------------
=========================================================================
"'run1_design'       :   '106X_mcRun1_design_v4',
'run1_mc'           :   '106X_mcRun1_realistic_v4',
'run1_mc_hi'        :   '106X_mcRun1_HeavyIon_v4',
'run1_mc_pa'        :   '106X_mcRun1_pA_v4',
'run2_mc_50ns'      :   '106X_mcRun2_startup_v5',
'run2_mc_l1stage1'  :   '106X_mcRun2_asymptotic_l1stage1_v5',
'run2_design'       :   '106X_mcRun2_design_v8',
'run2_mc_pre_vfp'   :   '106X_mcRun2_asymptotic_preVFP_v10',
'run2_mc'           :   '106X_mcRun2_asymptotic_v16',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'        :   '106X_mcRun2_HeavyIon_v5',
'run2_mc_pa'        :   '106X_mcRun2_pA_v6',
'run1_data'         :   '106X_dataRun2_v33',
'run2_data'         :   '106X_dataRun2_v33',
'run2_data_relval'  :   '106X_dataRun2_relval_v31',
'run2_data_promptlike_HEfail' : '106X_dataRun2_PromptLike_HEfail_v14',
'run2_data_promptlike'    : '106X_dataRun2_PromptLike_v15',
'run2_data_promptlike_hi' : '106X_dataRun2_PromptLike_HI_v15',
"
-------------------------------------------------------------------------
"'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v5',
"
-------------------------------------------------------------------------
"'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v5',
"
-------------------------------------------------------------------------
"Recom
PRs: 32435, 32580"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2017_design'       :  '113X_mc2017_design_v2',
'phase1_2017_realistic'    :  '113X_mc2017_realistic_v2',
'phase1_2017_cosmics'      :  '113X_mc2017cosmics_realistic_deco_v2',
'phase1_2017_cosmics_peak' :  '113X_mc2017cosmics_realistic_peak_v2',
'phase1_2018_design'       :  '113X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '113X_upgrade2018_realistic_v2',
'phase1_2018_realistic_hi' :  '113X_upgrade2018_realistic_HI_v2',
'phase1_2018_realistic_HEfail' :  '113X_upgrade2018_realistic_HEfail_v2',
'phase1_2018_cosmics'      :  '113X_upgrade2018cosmics_realistic_deco_v2',
'phase1_2018_cosmics_peak' :  '113X_upgrade2018cosmics_realistic_peak_v2',
'phase1_2021_design'       : '113X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '113X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '113X_mcRun3_2021cosmics_realistic_deco_v3',
'phase1_2021_realistic_hi' : '113X_mcRun3_2021_realistic_HI_v2',
'phase1_2023_realistic'    : '113X_mcRun3_2023_realistic_v2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '113X_mcRun3_2024_realistic_v2', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '113X_mcRun4_realistic_v2'
"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '111X_mc2017_design_v3',
'phase1_2017_realistic'    :  '111X_mc2017_realistic_v3',
'phase1_2017_cosmics'      :  '111X_mc2017cosmics_realistic_deco_v2',
'phase1_2017_cosmics_peak' :  '111X_mc2017cosmics_realistic_peak_v2',
'phase1_2018_design'       :  '111X_upgrade2018_design_v3',
'phase1_2018_realistic'    :  '111X_upgrade2018_realistic_v3',
'phase1_2018_realistic_hi' :  '111X_upgrade2018_realistic_HI_v2',
'phase1_2018_realistic_HEfail' :  '111X_upgrade2018_realistic_HEfail_v3',
'phase1_2018_cosmics'      :   '111X_upgrade2018cosmics_realistic_deco_v3',
'phase1_2018_cosmics_peak' :   '111X_upgrade2018cosmics_realistic_peak_v3',
'phase1_2021_design'       : '111X_mcRun3_2021_design_v8', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '111X_mcRun3_2021_realistic_v8', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '111X_mcRun3_2021cosmics_realistic_deco_v8',
'phase1_2021_realistic_hi' : '111X_mcRun3_2021_realistic_HI_v10',
'phase1_2023_realistic'    : '111X_mcRun3_2023_realistic_v7', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '111X_mcRun3_2024_realistic_v7', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '111X_mcRun4_realistic_T15_v3'
"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '111X_mc2017_design_v3',
'phase1_2017_realistic'    :  '111X_mc2017_realistic_v3',
'phase1_2017_cosmics'      :  '111X_mc2017cosmics_realistic_deco_v2',
'phase1_2017_cosmics_peak' :  '111X_mc2017cosmics_realistic_peak_v2',
'phase1_2018_design'       :  '111X_upgrade2018_design_v3',
'phase1_2018_realistic'    :  '111X_upgrade2018_realistic_v3',
'phase1_2018_realistic_hi' :  '111X_upgrade2018_realistic_HI_v2',
'phase1_2018_realistic_HEfail' :  '111X_upgrade2018_realistic_HEfail_v3',
'phase1_2018_cosmics'      :   '111X_upgrade2018cosmics_realistic_deco_v3',
'phase1_2018_cosmics_peak' :   '111X_upgrade2018cosmics_realistic_peak_v3',
'phase1_2021_design'       : '111X_mcRun3_2021_design_v8', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '111X_mcRun3_2021_realistic_v8', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '111X_mcRun3_2021cosmics_realistic_deco_v8',
'phase1_2021_realistic_hi' : '111X_mcRun3_2021_realistic_HI_v10',
'phase1_2023_realistic'    : '111X_mcRun3_2023_realistic_v7', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '111X_mcRun3_2024_realistic_v7', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '111X_mcRun4_realistic_T15_v3'
"
-------------------------------------------------------------------------
"Recom
PRs: 32513, 32533"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2017_design'       :  '113X_mc2017_design_v2',
'phase1_2017_realistic'    :  '113X_mc2017_realistic_v2',
'phase1_2017_cosmics'      :  '113X_mc2017cosmics_realistic_deco_v2',
'phase1_2017_cosmics_peak' :  '113X_mc2017cosmics_realistic_peak_v2',
'phase1_2018_design'       :  '113X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '113X_upgrade2018_realistic_v2',
'phase1_2018_realistic_hi' :  '113X_upgrade2018_realistic_HI_v2',
'phase1_2018_realistic_HEfail' :  '113X_upgrade2018_realistic_HEfail_v2',
'phase1_2018_cosmics'      :  '113X_upgrade2018cosmics_realistic_deco_v2',
'phase1_2018_cosmics_peak' :  '113X_upgrade2018cosmics_realistic_peak_v2',
'phase1_2021_design'       : '113X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '113X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '113X_mcRun3_2021cosmics_realistic_deco_v3',
'phase1_2021_realistic_hi' : '113X_mcRun3_2021_realistic_HI_v2',
'phase1_2023_realistic'    : '113X_mcRun3_2023_realistic_v2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '113X_mcRun3_2024_realistic_v2', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '113X_mcRun4_realistic_v2'
"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '112X_mc2017_design_v2',
'phase1_2017_realistic'    :  '112X_mc2017_realistic_v4',
'phase1_2017_cosmics'      :  '112X_mc2017cosmics_realistic_deco_v4',
'phase1_2017_cosmics_peak' :  '112X_mc2017cosmics_realistic_peak_v4',
'phase1_2018_design'       :  '112X_upgrade2018_design_v4',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v7',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v7',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v7',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v7',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v7',
'phase1_2021_design'       : '112X_mcRun3_2021_design_v12', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v14', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v14',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v14',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v14', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v14', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '112X_mcRun4_realistic_v5'
"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '112X_mc2017_design_v2',
'phase1_2017_realistic'    :  '112X_mc2017_realistic_v4',
'phase1_2017_cosmics'      :  '112X_mc2017cosmics_realistic_deco_v4',
'phase1_2017_cosmics_peak' :  '112X_mc2017cosmics_realistic_peak_v4',
'phase1_2018_design'       :  '112X_upgrade2018_design_v4',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v7',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v7',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v7',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v7',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v7',
'phase1_2021_design'       : '112X_mcRun3_2021_design_v12', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v14', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v14',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v14',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v14', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v14', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '112X_mcRun4_realistic_v5'
"
-------------------------------------------------------------------------
"Recom
PRs: 32513, 32532"
-------------------------------------------------------------------------
=========================================================================
"'run1_design'       :   '113X_mcRun1_design_v1',
'run1_mc'           :   '113X_mcRun1_realistic_v1',
'run1_mc_hi'        :   '113X_mcRun1_HeavyIon_v1',
'run1_mc_pa'        :   '113X_mcRun1_pA_v1',
'run2_mc_50ns'      :   '113X_mcRun2_startup_v1',
'run2_mc_l1stage1'  :   '113X_mcRun2_asymptotic_l1stage1_v1',
'run2_design'       :   '113X_mcRun2_design_v1',
"
-------------------------------------------------------------------------
"'run1_design'       :   '106X_mcRun1_design_v4',
'run1_mc'           :   '106X_mcRun1_realistic_v4',
'run1_mc_hi'        :   '106X_mcRun1_HeavyIon_v4',
'run1_mc_pa'        :   '106X_mcRun1_pA_v4',
'run2_mc_50ns'      :   '106X_mcRun2_startup_v5',
'run2_mc_l1stage1'  :   '106X_mcRun2_asymptotic_l1stage1_v5',
'run2_design'       :   '106X_mcRun2_design_v8',
'run2_mc_pre_vfp'   :   '106X_mcRun2_asymptotic_preVFP_v10',
'run2_mc'           :   '106X_mcRun2_asymptotic_v16',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'        :   '106X_mcRun2_HeavyIon_v5',
'run2_mc_pa'        :   '106X_mcRun2_pA_v6',
'run1_data'         :   '106X_dataRun2_v33',
'run2_data'         :   '106X_dataRun2_v33',
'run2_data_relval'  :   '106X_dataRun2_relval_v31',
'run2_data_promptlike_HEfail' : '106X_dataRun2_PromptLike_HEfail_v14',
'run2_data_promptlike'    : '106X_dataRun2_PromptLike_v15',
'run2_data_promptlike_hi' : '106X_dataRun2_PromptLike_HI_v15',
"
-------------------------------------------------------------------------
"'run1_design'       :   '106X_mcRun1_design_v4',
'run1_mc'           :   '106X_mcRun1_realistic_v4',
'run1_mc_hi'        :   '106X_mcRun1_HeavyIon_v4',
'run1_mc_pa'        :   '106X_mcRun1_pA_v4',
'run2_mc_50ns'      :   '106X_mcRun2_startup_v5',
'run2_mc_l1stage1'  :   '106X_mcRun2_asymptotic_l1stage1_v5',
'run2_design'       :   '106X_mcRun2_design_v8',
'run2_mc_pre_vfp'   :   '106X_mcRun2_asymptotic_preVFP_v10',
'run2_mc'           :   '106X_mcRun2_asymptotic_v16',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'        :   '106X_mcRun2_HeavyIon_v5',
'run2_mc_pa'        :   '106X_mcRun2_pA_v6',
'run1_data'         :   '106X_dataRun2_v33',
'run2_data'         :   '106X_dataRun2_v33',
'run2_data_relval'  :   '106X_dataRun2_relval_v31',
'run2_data_promptlike_HEfail' : '106X_dataRun2_PromptLike_HEfail_v14',
'run2_data_promptlike'    : '106X_dataRun2_PromptLike_v15',
'run2_data_promptlike_hi' : '106X_dataRun2_PromptLike_HI_v15',
"
-------------------------------------------------------------------------
"Recom
PRs: 32421, 32435"
-------------------------------------------------------------------------
=========================================================================
"'run2_mc_hi'        :   '113X_mcRun2_HeavyIon_v1',
'run2_mc_pa'        :   '113X_mcRun2_pA_v1',
"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '106X_mc2017_design_IdealBS_v6',
'phase1_2017_realistic'    :  '106X_mc2017_realistic_v9',
'phase1_2017_cosmics'      :  '106X_mc2017cosmics_realistic_deco_v4',
'phase1_2017_cosmics_peak' :  '106X_mc2017cosmics_realistic_peak_v4',
'phase1_2018_design'       :  '106X_upgrade2018_design_v8',
'phase1_2018_realistic'    :  '106X_upgrade2018_realistic_v16',
'phase1_2018_realistic_hi' :  '106X_upgrade2018_realistic_HI_v7',
'phase1_2018_realistic_HEfail' :  '106X_upgrade2018_realistic_HEfail_v16',
'phase1_2018_cosmics'      :   '106X_upgrade2018cosmics_realistic_deco_v13',
'phase1_2018_cosmics_peak' :   '106X_upgrade2018cosmics_realistic_peak_v13',
'phase1_2021_design'       : '106X_upgrade2021_design_v6', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '106X_upgrade2021_realistic_v12', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '106X_upgrade2021cosmics_realistic_deco_v5',
'phase2_realistic'         : '106X_upgrade2023_realistic_v6'
"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '106X_mc2017_design_IdealBS_v6',
'phase1_2017_realistic'    :  '106X_mc2017_realistic_v9',
'phase1_2017_cosmics'      :  '106X_mc2017cosmics_realistic_deco_v4',
'phase1_2017_cosmics_peak' :  '106X_mc2017cosmics_realistic_peak_v4',
'phase1_2018_design'       :  '106X_upgrade2018_design_v8',
'phase1_2018_realistic'    :  '106X_upgrade2018_realistic_v16',
'phase1_2018_realistic_hi' :  '106X_upgrade2018_realistic_HI_v7',
'phase1_2018_realistic_HEfail' :  '106X_upgrade2018_realistic_HEfail_v16',
'phase1_2018_cosmics'      :   '106X_upgrade2018cosmics_realistic_deco_v13',
'phase1_2018_cosmics_peak' :   '106X_upgrade2018cosmics_realistic_peak_v13',
'phase1_2021_design'       : '106X_upgrade2021_design_v6', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '106X_upgrade2021_realistic_v12', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '106X_upgrade2021cosmics_realistic_deco_v5',
'phase2_realistic'         : '106X_upgrade2023_realistic_v6'
"
-------------------------------------------------------------------------
"Recom
PRs: 32421, 32435"
-------------------------------------------------------------------------
=========================================================================
"'keep patPackedCandidates_packedPFCandidatesRemoved_*_*',
"
-------------------------------------------------------------------------
"run2_miniAOD_pp_on_AA_103X.toModify(PFTowers,src = 'cleanedParticleFlow')
"
-------------------------------------------------------------------------
"run2_miniAOD_pp_on_AA_103X.toModify(PFTowers,src = 'cleanedParticleFlow')
"
-------------------------------------------------------------------------
"Recom
PRs: 31668, 32330"
-------------------------------------------------------------------------
=========================================================================
"sort_ = iConfig.getParameter<bool>(""sort"");
"
-------------------------------------------------------------------------
"sort_ = iConfig.getParameter<bool>( ""sort"" );
"
-------------------------------------------------------------------------
"sort_ = iConfig.getParameter<bool>( ""sort"" );
"
-------------------------------------------------------------------------
"Recom
PRs: 32297, 32298"
-------------------------------------------------------------------------
=========================================================================
"'run1_mc_pa'        :   '112X_mcRun1_pA_v2',
"
-------------------------------------------------------------------------
"'run2_mc_cosmics'   :   '106X_mcRun2cosmics_asymptotic_deco_v2',
"
-------------------------------------------------------------------------
"'run2_mc_cosmics'   :   '106X_mcRun2cosmics_asymptotic_deco_v2',
"
-------------------------------------------------------------------------
"Recom
PRs: 32224, 32247"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '112X_dataRun2_v6',
'run2_data'         :   '112X_dataRun2_v6',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v6',
'run2_data_relval'  :   '112X_dataRun2_relval_v6',
"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v31',
'run2_data'         :   '106X_dataRun2_v31',
'run2_data_relval'  :   '106X_dataRun2_relval_v29',
"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v31',
'run2_data'         :   '106X_dataRun2_v31',
'run2_data_relval'  :   '106X_dataRun2_relval_v29',
"
-------------------------------------------------------------------------
"Recom
PRs: 32169, 32170"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v5',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v5',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v5',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v5',
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v12', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v12',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v12', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v12', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"'phase1_2018_realistic'    :  '106X_upgrade2018_realistic_v13',
'phase1_2018_realistic_HEfail' :  '106X_upgrade2018_realistic_HEfail_v14',
'phase1_2018_cosmics'      :   '106X_upgrade2018cosmics_realistic_deco_v11',
'phase1_2018_cosmics_peak' :   '106X_upgrade2018cosmics_realistic_peak_v11',
"
-------------------------------------------------------------------------
"'phase1_2018_realistic'    :  '106X_upgrade2018_realistic_v13',
'phase1_2018_realistic_HEfail' :  '106X_upgrade2018_realistic_HEfail_v14',
'phase1_2018_cosmics'      :   '106X_upgrade2018cosmics_realistic_deco_v11',
'phase1_2018_cosmics_peak' :   '106X_upgrade2018cosmics_realistic_peak_v11',
"
-------------------------------------------------------------------------
"Recom
PRs: 32169, 32170"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '112X_dataRun2_v2',
'run2_data'         :   '112X_dataRun2_v2',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v2',
'run2_data_relval'  :   '112X_dataRun2_relval_v2',
"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v30',
'run2_data'         :   '106X_dataRun2_v30',
'run2_data_relval'  :   '106X_dataRun2_relval_v28',
"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v30',
'run2_data'         :   '106X_dataRun2_v30',
'run2_data_relval'  :   '106X_dataRun2_relval_v28',
"
-------------------------------------------------------------------------
"Recom
PRs: 30478, 32120"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v1',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v1',
'phase1_2018_cosmics'      :   '112X_upgrade2018cosmics_realistic_deco_v1',
'phase1_2018_cosmics_peak' :   '112X_upgrade2018cosmics_realistic_peak_v1',
"
-------------------------------------------------------------------------
"'phase1_2017_realistic'    :  '106X_mc2017_realistic_v8',
'phase1_2017_cosmics'      :  '106X_mc2017cosmics_realistic_deco_v3',
'phase1_2017_cosmics_peak' :  '106X_mc2017cosmics_realistic_peak_v3',
'phase1_2018_realistic'    :  '106X_upgrade2018_realistic_v12',
'phase1_2018_realistic_HEfail' :  '106X_upgrade2018_realistic_HEfail_v12',
'phase1_2018_cosmics'      :   '106X_upgrade2018cosmics_realistic_deco_v10',
'phase1_2018_cosmics_peak' :   '106X_upgrade2018cosmics_realistic_peak_v10',
"
-------------------------------------------------------------------------
"'phase1_2017_realistic'    :  '106X_mc2017_realistic_v8',
'phase1_2017_cosmics'      :  '106X_mc2017cosmics_realistic_deco_v3',
'phase1_2017_cosmics_peak' :  '106X_mc2017cosmics_realistic_peak_v3',
'phase1_2018_realistic'    :  '106X_upgrade2018_realistic_v12',
'phase1_2018_realistic_HEfail' :  '106X_upgrade2018_realistic_HEfail_v12',
'phase1_2018_cosmics'      :   '106X_upgrade2018cosmics_realistic_deco_v10',
'phase1_2018_cosmics_peak' :   '106X_upgrade2018cosmics_realistic_peak_v10',
"
-------------------------------------------------------------------------
"Recom
PRs: 30478, 32120"
-------------------------------------------------------------------------
=========================================================================
"Plot1D('charge', 'charge', 3, -1.5, 1.5, 'electric charge')
"
-------------------------------------------------------------------------
"run2_miniAOD_80XLegacy.toModify(nanoDQM.vplots, IsoTrack = None)

"
-------------------------------------------------------------------------
"run2_miniAOD_80XLegacy.toModify(nanoDQM.vplots, IsoTrack = None)

"
-------------------------------------------------------------------------
"Recom
PRs: 33208, 32107"
-------------------------------------------------------------------------
=========================================================================
"'run1_design'       :   '112X_mcRun1_design_v1',
'run1_mc'           :   '112X_mcRun1_realistic_v1',
'run1_mc_hi'        :   '112X_mcRun1_HeavyIon_v1',
'run1_mc_pa'        :   '112X_mcRun1_pA_v1',
'run2_mc_50ns'      :   '112X_mcRun2_startup_v1',
'run2_mc_l1stage1'  :   '112X_mcRun2_asymptotic_l1stage1_v1',
'run2_design'       :   '112X_mcRun2_design_v1',
'run2_mc_pre_vfp'   :   '112X_mcRun2_asymptotic_preVFP_v1',
'run2_mc'           :   '112X_mcRun2_asymptotic_v1',
'run2_mc_cosmics'   :   '112X_mcRun2cosmics_startup_deco_v1',
'run2_mc_hi'        :   '112X_mcRun2_HeavyIon_v1',
'run2_mc_pa'        :   '112X_mcRun2_pA_v1',
'run1_data'         :   '112X_dataRun2_v5',
'run2_data'         :   '112X_dataRun2_v5',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v5',
'run2_data_relval'  :   '112X_dataRun2_relval_v5',
'run2_data_promptlike_hi' : '112X_dataRun2_PromptLike_HI_v2',
'run1_hlt'          :   '101X_dataRun2_HLT_frozen_v10',
'run2_hlt'          :   '101X_dataRun2_HLT_frozen_v10',
'run2_hlt_relval'      :   '103X_dataRun2_HLT_relval_v9',
'run2_hlt_relval_hi'   :   '103X_dataRun2_HLT_relval_HI_v5',
'run2_hlt_hi'       :   '101X_dataRun2_HLTHI_frozen_v10',
'run3_data_express'        :   '111X_dataRun3_Express_v4',
'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v4',
'phase1_2017_design'       :  '112X_mc2017_design_v1',
'phase1_2017_realistic'    :  '112X_mc2017_realistic_v3',
'phase1_2017_cosmics'      :  '112X_mc2017cosmics_realistic_deco_v3',
'phase1_2017_cosmics_peak' :  '112X_mc2017cosmics_realistic_peak_v3',
'phase1_2018_design'       :  '112X_upgrade2018_design_v3',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v4',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v5',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v4',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v4',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v4',
'phase1_2021_design'       : '112X_mcRun3_2021_design_v9', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v9', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v9',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v10',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v9', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v9', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '112X_mcRun4_realistic_v3'
"
-------------------------------------------------------------------------
"'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v4',
"
-------------------------------------------------------------------------
"'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v4',
"
-------------------------------------------------------------------------
"Recom
PRs: 31780, 32074"
-------------------------------------------------------------------------
=========================================================================
"_correctionFile2018UL    = ""EgammaAnalysis/ElectronTools/data/ScalesSmearings/Run2018_29Sep2020_RunFineEtaR9Gain""
"
-------------------------------------------------------------------------
"from Configuration.ProcessModifiers.run2_miniAOD_UL_cff import run2_miniAOD_UL

(run2_miniAOD_UL & run2_egamma_2017).toModify(calibratedEgammaSettings,correctionFile = _correctionFile2017UL)
(run2_miniAOD_UL & run2_egamma_2018).toModify(calibratedEgammaSettings,correctionFile = _correctionFile2018UL)
"
-------------------------------------------------------------------------
"from Configuration.ProcessModifiers.run2_miniAOD_UL_cff import run2_miniAOD_UL

(run2_miniAOD_UL & run2_egamma_2017).toModify(calibratedEgammaSettings,correctionFile = _correctionFile2017UL)
(run2_miniAOD_UL & run2_egamma_2018).toModify(calibratedEgammaSettings,correctionFile = _correctionFile2018UL)
"
-------------------------------------------------------------------------
"Recom
PRs: 31936, 31995"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '112X_dataRun2_v4',
'run2_data'         :   '112X_dataRun2_v4',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v4',
'run2_data_relval'  :   '112X_dataRun2_relval_v4',
"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v29',
'run2_data'         :   '106X_dataRun2_v29',
'run2_data_relval'  :   '106X_dataRun2_relval_v27',
"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v29',
'run2_data'         :   '106X_dataRun2_v29',
'run2_data_relval'  :   '106X_dataRun2_relval_v27',
"
-------------------------------------------------------------------------
"Recom
PRs: 31635, 31702"
-------------------------------------------------------------------------
=========================================================================
"defaultEOSlistCommand = 'xrdfs root://eoscms.cern.ch ls '
defaultEOSmkdirCommand = 'xrdfs root://eoscms.cern.ch mkdir '
defaultEOSfeCommand = 'xrdfs root://eoscms.cern.ch stat -q IsReadable '
"
-------------------------------------------------------------------------
"defaultEOSLoadPath = 'root://eoscms.cern.ch/'
defaultEOSlistCommand = 'xrdfs 'defaultEOSLoadPath' ls '
defaultEOSmkdirCommand = 'xrdfs 'defaultEOSLoadPath' mkdir '
defaultEOSfeCommand = 'xrdfs 'defaultEOSLoadPath' stat -q IsReadable '
if len(elements):
"
-------------------------------------------------------------------------
"defaultEOSLoadPath = 'root://eoscms.cern.ch/'
defaultEOSlistCommand = 'xrdfs 'defaultEOSLoadPath' ls '
defaultEOSmkdirCommand = 'xrdfs 'defaultEOSLoadPath' mkdir '
defaultEOSfeCommand = 'xrdfs 'defaultEOSLoadPath' stat -q IsReadable '
if len(elements):
"
-------------------------------------------------------------------------
"Recom
PRs: 31553, 31561"
-------------------------------------------------------------------------
=========================================================================
"defaultEOSlistCommand = 'xrdfs root://eoscms.cern.ch ls '
defaultEOSmkdirCommand = 'xrdfs root://eoscms.cern.ch mkdir '
defaultEOSfeCommand = 'xrdfs root://eoscms.cern.ch stat -q IsReadable '
"
-------------------------------------------------------------------------
"defaultEOSLoadPath = 'root://eoscms.cern.ch/'
defaultEOSlistCommand = 'xrdfs 'defaultEOSLoadPath' ls '
defaultEOSmkdirCommand = 'xrdfs 'defaultEOSLoadPath' mkdir '
defaultEOSfeCommand = 'xrdfs 'defaultEOSLoadPath' stat -q IsReadable '
"
-------------------------------------------------------------------------
"defaultEOSLoadPath = 'root://eoscms.cern.ch/'
defaultEOSlistCommand = 'xrdfs 'defaultEOSLoadPath' ls '
defaultEOSmkdirCommand = 'xrdfs 'defaultEOSLoadPath' mkdir '
defaultEOSfeCommand = 'xrdfs 'defaultEOSLoadPath' stat -q IsReadable '
"
-------------------------------------------------------------------------
"Recom
PRs: 31553, 31560"
-------------------------------------------------------------------------
=========================================================================
"'run3_data_express'        :   '111X_dataRun3_Express_v2',
'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v2',
"
-------------------------------------------------------------------------
"'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v2',
"
-------------------------------------------------------------------------
"'run3_data_promptlike'     :   '111X_dataRun3_Prompt_v2',
"
-------------------------------------------------------------------------
"Recom
PRs: 31358, 31392"
-------------------------------------------------------------------------
=========================================================================
"@staticmethod
def get_wmsplit():
    """"""
    Return a ""wmsplit"" dictionary that contain non-default LumisPerJob values
    """"""
    wmsplit = {}
        wmsplit['DIGIHI'] = 5
        wmsplit['RECOHI'] = 5
        wmsplit['HLTD'] = 5
        wmsplit['RECODreHLT'] = 2
        wmsplit['DIGIPU'] = 4
        wmsplit['DIGIPU1'] = 4
        wmsplit['RECOPU1'] = 1
        wmsplit['DIGIUP15_PU50'] = 1
        wmsplit['RECOUP15_PU50'] = 1
        wmsplit['DIGIUP15_PU25'] = 1
        wmsplit['RECOUP15_PU25'] = 1
        wmsplit['DIGIUP15_PU25HS'] = 1
        wmsplit['RECOUP15_PU25HS'] = 1
        wmsplit['DIGIHIMIX'] = 5
        wmsplit['RECOHIMIX'] = 5
        wmsplit['RECODSplit'] = 1
        wmsplit['SingleMuPt10_UP15_ID'] = 1
        wmsplit['DIGIUP15_ID'] = 1
        wmsplit['RECOUP15_ID'] = 1
        wmsplit['TTbar_13_ID'] = 1
        wmsplit['SingleMuPt10FS_ID'] = 1
        wmsplit['TTbarFS_ID'] = 1
        wmsplit['RECODR2_50nsreHLT'] = 5
        wmsplit['RECODR2_25nsreHLT'] = 5
        wmsplit['RECODR2_2016reHLT'] = 5
        wmsplit['RECODR2_50nsreHLT_HIPM'] = 5
        wmsplit['RECODR2_25nsreHLT_HIPM'] = 5
        wmsplit['RECODR2_2016reHLT_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimSingleMu'] = 1
        wmsplit['RECODR2_2016reHLT_skimDoubleEG'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuonEG'] = 1
        wmsplit['RECODR2_2016reHLT_skimJetHT'] = 1
        wmsplit['RECODR2_2016reHLT_skimMET'] = 1
        wmsplit['RECODR2_2016reHLT_skimSinglePh'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuOnia'] = 1
        wmsplit['RECODR2_2016reHLT_skimSingleMu_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimDoubleEG_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuonEG_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimJetHT_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimMET_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimSinglePh_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuOnia_HIPM'] = 1
        wmsplit['RECODR2_2017reHLT_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_skimSingleMu_Prompt_Lumi'] = 1
        wmsplit['RECODR2_2017reHLT_skimDoubleEG_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_skimMET_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_skimMuOnia_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_Prompt_L1TEgDQM'] = 1
        wmsplit['RECODR2_2018reHLT_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimSingleMu_Prompt_Lumi'] = 1
        wmsplit['RECODR2_2018reHLT_skimDoubleEG_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimMET_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuOnia_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimEGamma_Prompt_L1TEgDQM'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuonEG_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimCharmonium_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt_HEfail'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt_BadHcalMitig'] = 1
        wmsplit['RECODR2_2018reHLTAlCaTkCosmics_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimDisplacedJet_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_ZBPrompt'] = 1
        wmsplit['RECODR2_2018reHLT_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimSingleMu_Offline_Lumi'] = 1
        wmsplit['RECODR2_2018reHLT_skimDoubleEG_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimMET_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuOnia_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimEGamma_Offline_L1TEgDQM'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuonEG_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimCharmonium_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Offline_HEfail'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Offline_BadHcalMitig'] = 1
        wmsplit['RECODR2_2018reHLTAlCaTkCosmics_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimDisplacedJet_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_ZBOffline'] = 1
        wmsplit['HLTDR2_50ns'] = 1
        wmsplit['HLTDR2_25ns'] = 1
        wmsplit['HLTDR2_2016'] = 1
        wmsplit['HLTDR2_2017'] = 1
        wmsplit['HLTDR2_2018'] = 1
        wmsplit['HLTDR2_2018_BadHcalMitig'] = 1
        wmsplit['Hadronizer'] = 1
        wmsplit['DIGIUP15'] = 1
        wmsplit['RECOUP15'] = 1
        wmsplit['RECOAODUP15'] = 5
        wmsplit['DBLMINIAODMCUP15NODQM'] = 5
        wmsplit['Digi'] = 5
        wmsplit['Reco'] = 5
        wmsplit['DigiPU'] = 1
        wmsplit['RecoPU'] = 1
        wmsplit['RECOHID11'] = 1
        wmsplit['DIGIUP17'] = 1
        wmsplit['RECOUP17'] = 1
        wmsplit['DIGIUP17_PU25'] = 1
        wmsplit['RECOUP17_PU25'] = 1
        wmsplit['DIGICOS_UP16'] = 1
        wmsplit['RECOCOS_UP16'] = 1
        wmsplit['DIGICOS_UP17'] = 1
        wmsplit['RECOCOS_UP17'] = 1
        wmsplit['DIGICOS_UP18'] = 1
        wmsplit['RECOCOS_UP18'] = 1
        wmsplit['DIGICOS_UP21'] = 1
        wmsplit['RECOCOS_UP21'] = 1
        wmsplit['HYBRIDRepackHI2015VR'] = 1
        wmsplit['HYBRIDZSHI2015'] = 1
        wmsplit['RECOHID15'] = 1
        wmsplit['RECOHID18'] = 1
            if 'PU' not in key:
                continue

            wmsplit['DigiTriggerPU_'  key] = 1
            wmsplit['RecoGlobalPU_'  key] = 1

    except Exception as ex:
        print('Exception while building a wmsplit dictionary: %s' % (str(ex)))
        return {}

    return wmsplit
def prepare(self, mReader, directories, mode='init'):
    wmsplit = MatrixInjector.get_wmsplit()
"
-------------------------------------------------------------------------
"@staticmethod
def get_wmsplit():
    """"""
    Return a ""wmsplit"" dictionary that contain non-default LumisPerJob values
    """"""
    wmsplit = {}
        wmsplit['RECODreHLT']=2
"
-------------------------------------------------------------------------
"@staticmethod
def get_wmsplit():
    """"""
    Return a ""wmsplit"" dictionary that contain non-default LumisPerJob values
    """"""
    wmsplit = {}
        wmsplit['RECODreHLT']=2
"
-------------------------------------------------------------------------
"Recom
PRs: 31122, 31138"
-------------------------------------------------------------------------
=========================================================================
"@staticmethod
def get_wmsplit():
    """"""
    Return a ""wmsplit"" dictionary that contain non-default LumisPerJob values
    """"""
    wmsplit = {}
        wmsplit['DIGIHI'] = 5
        wmsplit['RECOHI'] = 5
        wmsplit['HLTD'] = 5
        wmsplit['RECODreHLT'] = 2
        wmsplit['DIGIPU'] = 4
        wmsplit['DIGIPU1'] = 4
        wmsplit['RECOPU1'] = 1
        wmsplit['DIGIUP15_PU50'] = 1
        wmsplit['RECOUP15_PU50'] = 1
        wmsplit['DIGIUP15_PU25'] = 1
        wmsplit['RECOUP15_PU25'] = 1
        wmsplit['DIGIUP15_PU25HS'] = 1
        wmsplit['RECOUP15_PU25HS'] = 1
        wmsplit['DIGIHIMIX'] = 5
        wmsplit['RECOHIMIX'] = 5
        wmsplit['RECODSplit'] = 1
        wmsplit['SingleMuPt10_UP15_ID'] = 1
        wmsplit['DIGIUP15_ID'] = 1
        wmsplit['RECOUP15_ID'] = 1
        wmsplit['TTbar_13_ID'] = 1
        wmsplit['SingleMuPt10FS_ID'] = 1
        wmsplit['TTbarFS_ID'] = 1
        wmsplit['RECODR2_50nsreHLT'] = 5
        wmsplit['RECODR2_25nsreHLT'] = 5
        wmsplit['RECODR2_2016reHLT'] = 5
        wmsplit['RECODR2_50nsreHLT_HIPM'] = 5
        wmsplit['RECODR2_25nsreHLT_HIPM'] = 5
        wmsplit['RECODR2_2016reHLT_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimSingleMu'] = 1
        wmsplit['RECODR2_2016reHLT_skimDoubleEG'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuonEG'] = 1
        wmsplit['RECODR2_2016reHLT_skimJetHT'] = 1
        wmsplit['RECODR2_2016reHLT_skimMET'] = 1
        wmsplit['RECODR2_2016reHLT_skimSinglePh'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuOnia'] = 1
        wmsplit['RECODR2_2016reHLT_skimSingleMu_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimDoubleEG_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuonEG_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimJetHT_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimMET_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimSinglePh_HIPM'] = 1
        wmsplit['RECODR2_2016reHLT_skimMuOnia_HIPM'] = 1
        wmsplit['RECODR2_2017reHLT_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_skimSingleMu_Prompt_Lumi'] = 1
        wmsplit['RECODR2_2017reHLT_skimDoubleEG_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_skimMET_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_skimMuOnia_Prompt'] = 1
        wmsplit['RECODR2_2017reHLT_Prompt_L1TEgDQM'] = 1
        wmsplit['RECODR2_2018reHLT_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimSingleMu_Prompt_Lumi'] = 1
        wmsplit['RECODR2_2018reHLT_skimDoubleEG_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimMET_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuOnia_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimEGamma_Prompt_L1TEgDQM'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuonEG_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimCharmonium_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt_HEfail'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Prompt_BadHcalMitig'] = 1
        wmsplit['RECODR2_2018reHLTAlCaTkCosmics_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_skimDisplacedJet_Prompt'] = 1
        wmsplit['RECODR2_2018reHLT_ZBPrompt'] = 1
        wmsplit['RECODR2_2018reHLT_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimSingleMu_Offline_Lumi'] = 1
        wmsplit['RECODR2_2018reHLT_skimDoubleEG_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimMET_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuOnia_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimEGamma_Offline_L1TEgDQM'] = 1
        wmsplit['RECODR2_2018reHLT_skimMuonEG_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimCharmonium_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Offline_HEfail'] = 1
        wmsplit['RECODR2_2018reHLT_skimJetHT_Offline_BadHcalMitig'] = 1
        wmsplit['RECODR2_2018reHLTAlCaTkCosmics_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_skimDisplacedJet_Offline'] = 1
        wmsplit['RECODR2_2018reHLT_ZBOffline'] = 1
        wmsplit['HLTDR2_50ns'] = 1
        wmsplit['HLTDR2_25ns'] = 1
        wmsplit['HLTDR2_2016'] = 1
        wmsplit['HLTDR2_2017'] = 1
        wmsplit['HLTDR2_2018'] = 1
        wmsplit['HLTDR2_2018_BadHcalMitig'] = 1
        wmsplit['Hadronizer'] = 1
        wmsplit['DIGIUP15'] = 1
        wmsplit['RECOUP15'] = 1
        wmsplit['RECOAODUP15'] = 5
        wmsplit['DBLMINIAODMCUP15NODQM'] = 5
        wmsplit['Digi'] = 5
        wmsplit['Reco'] = 5
        wmsplit['DigiPU'] = 1
        wmsplit['RecoPU'] = 1
        wmsplit['RECOHID11'] = 1
        wmsplit['DIGIUP17'] = 1
        wmsplit['RECOUP17'] = 1
        wmsplit['DIGIUP17_PU25'] = 1
        wmsplit['RECOUP17_PU25'] = 1
        wmsplit['DIGICOS_UP16'] = 1
        wmsplit['RECOCOS_UP16'] = 1
        wmsplit['DIGICOS_UP17'] = 1
        wmsplit['RECOCOS_UP17'] = 1
        wmsplit['DIGICOS_UP18'] = 1
        wmsplit['RECOCOS_UP18'] = 1
        wmsplit['DIGICOS_UP21'] = 1
        wmsplit['RECOCOS_UP21'] = 1
        wmsplit['HYBRIDRepackHI2015VR'] = 1
        wmsplit['HYBRIDZSHI2015'] = 1
        wmsplit['RECOHID15'] = 1
        wmsplit['RECOHID18'] = 1
            if 'PU' not in key:
                continue

            wmsplit['DigiTriggerPU_'  key] = 1
            wmsplit['RecoGlobalPU_'  key] = 1

    except Exception as ex:
        print('Exception while building a wmsplit dictionary: %s' % (str(ex)))
        return {}

    return wmsplit
def prepare(self, mReader, directories, mode='init'):
    wmsplit = MatrixInjector.get_wmsplit()
"
-------------------------------------------------------------------------
"@staticmethod
def get_wmsplit():
    """"""
    Return a ""wmsplit"" dictionary that contain non-default LumisPerJob values
    """"""
    wmsplit = {}
        wmsplit['RECODreHLT']=2
"
-------------------------------------------------------------------------
"@staticmethod
def get_wmsplit():
    """"""
    Return a ""wmsplit"" dictionary that contain non-default LumisPerJob values
    """"""
    wmsplit = {}
        wmsplit['RECODreHLT']=2
"
-------------------------------------------------------------------------
"Recom
PRs: 31122, 31137"
-------------------------------------------------------------------------
=========================================================================
"JetIDWPU = jetpassid;  // && PileupJetIdentifier::passJetId( puidmvaflag, PileupJetIdentifier::kLoose )
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_run2_nanoAOD_106Xv1_cff import run2_nanoAOD_106Xv1
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_run2_nanoAOD_106Xv1_cff import run2_nanoAOD_106Xv1
"
-------------------------------------------------------------------------
"Recom
PRs: 30638, 31126"
-------------------------------------------------------------------------
=========================================================================
"""name""  : ""JetPuppi"",
""doc""   : ""AK4 PF Puppi jets with JECs applied, after basic selection (pt > 2)"",  
""ptcut"" : ""pt > 2"",      
""doQGL"" : True,
""doPUIDVar"": True,
""doBTag"": True,
""name""  : ""JetPF"",
""doc""   : ""AK4 PF jets with JECs applied, after basic selection (pt > 2)"",
""ptcut"" : ""pt > 2"",   
k4calo"" : {
""name"": ""JetCalo"",
""doc"" : ""AK4 Calo jets with JECs applied"",
""name""  : ""FatJetCHS"",
""doc""   : ""AK8 PF CHS jets with JECs applied, after basic selection (pt > 100)"", 
""ptcut"" : ""pt > 100""    
k8pf"" : {
""name""  : ""FatJetPF"",
""doc""   : ""AK8 PF jets with JECs applied, after basic selection (pt > 100)"", 
""ptcut"" : ""pt > 100"", 

ETVARS = cms.PSet(P4Vars,
onstituents   = jetTable.variables.nConstituents,

TVARS = cms.PSet(P4Vars,
wFactor       = jetTable.variables.rawFactor,
ea            = jetTable.variables.area,
HEF           = jetTable.variables.chHEF,
HEF           = jetTable.variables.neHEF,
EmEF          = jetTable.variables.chEmEF,
EmEF          = jetTable.variables.neEmEF,
EF            = jetTable.variables.muEF,
HEF           = Var(""HFHadronEnergyFraction()"",float,doc = ""hadronic energy fraction in HF"",precision = 6),
EmEF          = Var(""HFEMEnergyFraction()"",float,doc = ""electromagnetic energy fraction in HF"",precision = 6),
uons          = jetTable.variables.nMuons,
lectrons      = jetTable.variables.nElectrons,
onstituents   = jetTable.variables.nConstituents,
onstChHads    = Var(""chargedHadronMultiplicity()"",int,doc=""number of charged hadrons in the jet""),
onstNeuHads   = Var(""neutralHadronMultiplicity()"",int,doc=""number of neutral hadrons in the jet""),
onstHFHads    = Var(""HFHadronMultiplicity()"", int,doc=""number of HF hadrons in the jet""),
onstHFEMs     = Var(""HFEMMultiplicity()"",int,doc=""number of HF EMs in the jet""),
onstMuons     = Var(""muonMultiplicity()"",int,doc=""number of muons in the jet""),
onstElecs     = Var(""electronMultiplicity()"",int,doc=""number of electrons in the jet""),
onstPhotons   = Var(""photonMultiplicity()"",int,doc=""number of photons in the jet""),

VARS = cms.PSet(
Id_dR2Mean    = Var(""userFloat('puId_dR2Mean')"",float,doc=""pT^2-weighted average square distance of jet constituents from the jet axis (PileUp ID BDT input variable)"", precision= 6),
Id_majW       = Var(""userFloat('puId_majW')"",float,doc=""major axis of jet ellipsoid in eta-phi plane (PileUp ID BDT input variable)"", precision= 6)  ,
Id_minW       = Var(""userFloat('puId_minW')"",float,doc=""minor axis of jet ellipsoid in eta-phi plane (PileUp ID BDT input variable)"", precision= 6)  ,
Id_frac01     = Var(""userFloat('puId_frac01')"",float,doc=""fraction of constituents' pT contained within dR <0.1 (PileUp ID BDT input variable)"", precision= 6)  ,
Id_frac02     = Var(""userFloat('puId_frac02')"",float,doc=""fraction of constituents' pT contained within 0.1< dR <0.2 (PileUp ID BDT input variable)"", precision= 6) ,
Id_frac03     = Var(""userFloat('puId_frac03')"",float,doc=""fraction of constituents' pT contained within 0.2< dR <0.3 (PileUp ID BDT input variable)"", precision= 6) ,
Id_frac04     = Var(""userFloat('puId_frac04')"",float,doc=""fraction of constituents' pT contained within 0.3< dR <0.4 (PileUp ID BDT input variable)"", precision= 6) ,
Id_ptD        = Var(""userFloat('puId_ptD')"",float,doc=""pT-weighted average pT of constituents (PileUp ID BDT input variable)"", precision= 6) ,
Id_beta       = Var(""userFloat('puId_beta')"",float,doc=""fraction of pT of charged constituents associated to PV (PileUp ID BDT input variable)"", precision= 6) ,
Id_pull       = Var(""userFloat('puId_pull')"",float,doc=""magnitude of pull vector (PileUp ID BDT input variable)"", precision= 6) ,
Id_jetR       = Var(""userFloat('puId_jetR')"",float,doc=""fraction of jet pT carried by the leading constituent (PileUp ID BDT input variable)"", precision= 6) ,
Id_jetRchg    = Var(""userFloat('puId_jetRchg')"",float,doc=""fraction of jet pT carried by the leading charged constituent (PileUp ID BDT input variable)"", precision= 6) ,
Id_nCharged   = Var(""userInt('puId_nCharged')"",int,doc=""number of charged constituents (PileUp ID BDT input variable)""),

ARS = cms.PSet(
l_axis2       =  Var(""userFloat('qgl_axis2')"",float,doc=""ellipse minor jet axis (Quark vs Gluon likelihood input variable)"", precision= 6),
l_ptD         =  Var(""userFloat('qgl_ptD')"",float,doc=""pT-weighted average pT of constituents (Quark vs Gluon likelihood input variable)"", precision= 6),
l_mult        =  Var(""userInt('qgl_mult')"", int,doc=""PF candidates multiplicity (Quark vs Gluon likelihood input variable)""),

VARS = cms.PSet(
agCMVA  = jetTable.variables.btagCMVA,
agDeepB = jetTable.variables.btagDeepB,
agCSVV2 = jetTable.variables.btagCSVV2,
agDeepC = jetTable.variables.btagDeepC,

JETVARS = cms.PSet(
agDeepFlavB   = jetTable.variables.btagDeepFlavB,
agDeepFlavC   = jetTable.variables.btagDeepFlavC,
agDeepFlavG   = Var(""bDiscriminator('pfDeepFlavourJetTags:probg')"",float,doc=""DeepFlavour gluon tag raw score"",precision=10),
agDeepFlavUDS = Var(""bDiscriminator('pfDeepFlavourJetTags:probuds')"",float,doc=""DeepFlavour uds tag raw score"",precision=10)

JETVARS = cms.PSet(P4Vars,
f       = Var(""emEnergyFraction()"", float, doc = ""electromagnetic energy fraction"", precision = 10),

***************************************

co Jets related functions

***************************************
AddJetID(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName=""""):
tup modules to calculate PF jet ID 

PUPPIJet = True if ""Puppi"" in jetName else False

oseJetId = ""looseJetId{}"".format(jetName)
tattr(proc, looseJetId, proc.looseJetId.clone(
  src = jetSrc,
  filterParams=proc.looseJetId.filterParams.clone(
    version =""WINTER16""
  ),

ghtJetId = ""tightJetId{}"".format(jetName)
tattr(proc, tightJetId, proc.tightJetId.clone(
  src = jetSrc,
  filterParams=proc.tightJetId.filterParams.clone(
    version = ""SUMMER18{}"".format(""PUPPI"" if isPUPPIJet else """")
  ),
)


ghtJetIdLepVeto = ""tightJetIdLepVeto{}"".format(jetName)
tattr(proc, tightJetIdLepVeto, proc.tightJetIdLepVeto.clone(
  src = jetSrc,
  filterParams=proc.tightJetIdLepVeto.filterParams.clone(
    version = ""SUMMER18{}"".format(""PUPPI"" if isPUPPIJet else """")
  ),

n2_jme_2016.toModify(getattr(proc, tightJetId) .filterParams,        version = ""WINTER16"" )
n2_jme_2016.toModify(getattr(proc, tightJetIdLepVeto) .filterParams, version = ""WINTER16"" )
n2_jme_2017.toModify(getattr(proc, tightJetId) .filterParams,        version = ""WINTER17{}"".format(""PUPPI"" if isPUPPIJet else """"))
n2_jme_2017.toModify(getattr(proc, tightJetIdLepVeto) .filterParams, version = ""WINTER17{}"".format(""PUPPI"" if isPUPPIJet else """"))


Save variables as userInts in each jet

tJetWithUserData = ""{}WithUserData"".format(jetSrc)
tattr(proc, patJetWithUserData).userInts.tightId = cms.InputTag(tightJetId)
tattr(proc, patJetWithUserData).userInts.tightIdLepVeto = cms.InputTag(tightJetIdLepVeto)
n2_jme_2016.toModify(getattr(proc, patJetWithUserData).userInts, looseId = cms.InputTag(looseJetId))

Specfiy variables in the jetTable to save in NanoAOD

tattr(proc, jetTableName).variables.jetId = Var(""userInt('tightId')*24*userInt('tightIdLepVeto')"",int,doc=""Jet ID flags bit1 is loose (always false in 2017 since it does not exist), bit2 is tight, bit3 is tightLepVeto"")
n2_jme_2016.toModify(getattr(proc, jetTableName).variables, jetId = Var(""userInt('tightIdLepVeto')*4userInt('tightId')*2userInt('looseId')"",int, doc=""Jet ID flags bit1 is loose, bit2 is tight, bit3 is tightLepVeto""))
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, tightJetId))
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, tightJetId))1, getattr(proc, tightJetIdLepVeto))

tattr(proc,""_""jetSequenceName""_2016"", getattr(proc,jetSequenceName).copy())
tattr(proc,""_""jetSequenceName""_2016"").insert(getattr(proc, ""_""jetSequenceName""_2016"").index(getattr(proc, tightJetId)), getattr(proc, looseJetId))
n2_jme_2016.toReplaceWith(getattr(proc,jetSequenceName), getattr(proc, ""_""jetSequenceName""_2016""))
turn proc

AddPileUpJetIDVars(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName=""""):
""
tup modules to calculate pileup jet ID input variables for PF jet
""
Calculate pileup jet ID variables
JetIdVarsCalculator = ""puJetIdCalculator{}"".format(jetName) 
tattr(proc, puJetIdVarsCalculator, pileupJetIdCalculator.clone(
  jets = jetSrc,
  vertexes  = ""offlineSlimmedPrimaryVertices"",
  inputIsCorrected = True,
  applyJec  = False,
  usePuppi = True if ""Puppi"" in jetName else False
)
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, puJetIdVarsCalculator))
JetIDVar = ""puJetIDVar{}"".format(jetName)
tattr(proc, puJetIDVar, cms.EDProducer(""PileupJetIDVarProducer"",
  srcJet = cms.InputTag(jetSrc),    
  srcPileupJetId = cms.InputTag(puJetIdVarsCalculator)
)
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, puJetIdVarsCalculator))1, getattr(proc, puJetIDVar))
Save variables as userFloats and userInts for each jet
tJetWithUserData = ""{}WithUserData"".format(jetSrc)
tattr(proc,patJetWithUserData).userFloats.puId_dR2Mean  = cms.InputTag(""{}:dR2Mean"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_majW     = cms.InputTag(""{}:majW"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_minW     = cms.InputTag(""{}:minW"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac01   = cms.InputTag(""{}:frac01"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac02   = cms.InputTag(""{}:frac02"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac03   = cms.InputTag(""{}:frac03"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac04   = cms.InputTag(""{}:frac04"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_ptD      = cms.InputTag(""{}:ptD"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_beta     = cms.InputTag(""{}:beta"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_pull     = cms.InputTag(""{}:pull"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_jetR     = cms.InputTag(""{}:jetR"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_jetRchg  = cms.InputTag(""{}:jetRchg"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userInts.puId_nCharged   = cms.InputTag(""{}:nCharged"".format(puJetIDVar))


Specfiy variables in the jet table to save in NanoAOD

tattr(proc,jetTableName).variables.puId_dR2Mean  = PUIDVARS.puId_dR2Mean 
tattr(proc,jetTableName).variables.puId_majW     = PUIDVARS.puId_majW    
tattr(proc,jetTableName).variables.puId_minW     = PUIDVARS.puId_minW    
tattr(proc,jetTableName).variables.puId_frac01   = PUIDVARS.puId_frac01  
tattr(proc,jetTableName).variables.puId_frac02   = PUIDVARS.puId_frac02  
tattr(proc,jetTableName).variables.puId_frac03   = PUIDVARS.puId_frac03  
tattr(proc,jetTableName).variables.puId_frac04   = PUIDVARS.puId_frac04  
tattr(proc,jetTableName).variables.puId_ptD      = PUIDVARS.puId_ptD      
tattr(proc,jetTableName).variables.puId_beta     = PUIDVARS.puId_beta    
tattr(proc,jetTableName).variables.puId_pull     = PUIDVARS.puId_pull     
tattr(proc,jetTableName).variables.puId_jetR     = PUIDVARS.puId_jetR    
tattr(proc,jetTableName).variables.puId_jetRchg  = PUIDVARS.puId_jetRchg 
tattr(proc,jetTableName).variables.puId_nCharged = PUIDVARS.puId_nCharged 

turn proc

AddQGLTaggerVars(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName="""", calculateQGLVars=False):
""
hedule the QGTagger module to calculate input variables to the QG likelihood 
""

LTagger=""qgtagger{}"".format(jetName)
tJetWithUserData=""{}WithUserData"".format(jetSrc)

 calculateQGLVars:
setattr(proc, QGLTagger, qgtagger.clone(
    srcJets=jetSrc
  )
)
Save variables as userFloats and userInts for each jet
tattr(proc,patJetWithUserData).userFloats.qgl_axis2 = cms.InputTag(QGLTagger"":axis2"")
tattr(proc,patJetWithUserData).userFloats.qgl_ptD   = cms.InputTag(QGLTagger"":ptD"")
tattr(proc,patJetWithUserData).userInts.qgl_mult    = cms.InputTag(QGLTagger"":mult"")

Specfiy variables in the jet table to save in NanoAOD
tattr(proc,jetTableName).variables.qgl_axis2 =  QGLVARS.qgl_axis2
tattr(proc,jetTableName).variables.qgl_ptD   =  QGLVARS.qgl_ptD
tattr(proc,jetTableName).variables.qgl_mult  =  QGLVARS.qgl_mult

 calculateQGLVars:
getattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, QGLTagger))

turn proc

AddBTaggingScores(proc, jetTableName=""""):
""
ore b-tagging scores from various algortihm
""

tattr(proc, jetTableName).variables.btagCMVA      = jetTable.variables.btagCMVA
tattr(proc, jetTableName).variables.btagDeepB     = jetTable.variables.btagDeepB
tattr(proc, jetTableName).variables.btagCSVV2     = jetTable.variables.btagCSVV2
tattr(proc, jetTableName).variables.btagDeepC     = jetTable.variables.btagDeepC
tattr(proc, jetTableName).variables.btagDeepFlavB = jetTable.variables.btagDeepFlavB
tattr(proc, jetTableName).variables.btagDeepFlavC = jetTable.variables.btagDeepFlavC

turn proc

AddDeepJetGluonLQuarkScores(proc, jetTableName=""""):
""
ore DeepJet raw score in jetTable for gluon and light quark
""

tattr(proc, jetTableName).variables.btagDeepFlavG   = DEEPJETVARS.btagDeepFlavG  
tattr(proc, jetTableName).variables.btagDeepFlavUDS = DEEPJETVARS.btagDeepFlavUDS

turn proc

AddNewPatJets(proc, recoJetInfo, runOnMC):
""
d patJet into custom nanoAOD
""

tName = recoJetInfo.jetUpper
yload = recoJetInfo.jetCorrPayload 
PF    = recoJetInfo.doPF
Calo  = recoJetInfo.doCalo

 recoJetInfo.inputCollection != """":
patJetFinalColl = recoJetInfo.inputCollection
se: 
patJetFinalColl = ""selectedUpdatedPatJets{}Final"".format(jetName)

 doCalo:
patJetFinalColl = ""selectedPatJets{}"".format(jetName)

noInfoForJet = nanoInfo_recojets[recoJetInfo.jet]
tTablePrefix = nanoInfoForJet[""name""]
tTableDoc    = nanoInfoForJet[""doc""]
cut          = nanoInfoForJet[""ptcut""] if ""ptcut"" in nanoInfoForJet else """"
PUIDVar      = nanoInfoForJet[""doPUIDVar""] if ""doPUIDVar"" in nanoInfoForJet else False
QGL          = nanoInfoForJet[""doQGL""] if ""doQGL"" in nanoInfoForJet else False
BTag         = nanoInfoForJet[""doBTag""] if ""doBTag"" in nanoInfoForJet else False

vePatJets(proc, 
jetName, payload, patJetFinalColl, jetTablePrefix, jetTableDoc, doPF, doCalo, 
ptcut=ptcut, doPUIDVar=doPUIDVar, doQGL=doQGL, doBTag=doBTag, runOnMC=runOnMC


turn proc

SavePatJets(proc, jetName, payload, patJetFinalColl, jetTablePrefix, jetTableDoc, 
            doPF, doCalo, ptcut="""", doPUIDVar=False, doQGL=False, doBTag=False, runOnMC=False):
""
hedule modules for a given patJet collection and save its variables into custom NanoAOD
""
Setup jet correction factors
tCorrFactors = ""jetCorrFactorsNano{}"".format(jetName)
tattr(proc, jetCorrFactors, jetCorrFactorsNano.clone(
  src = patJetFinalColl,
  payload = payload,
)

Update jets
cJets = ""updatedJets{}"".format(jetName)
tattr(proc, srcJets, updatedJets.clone(
  jetSource = patJetFinalColl,
  jetCorrFactorsSource=[jetCorrFactors],
)


Setup UserDataEmbedder
cJetsWithUserData = ""updatedJets{}WithUserData"".format(jetName)
tattr(proc, srcJetsWithUserData, cms.EDProducer(""PATJetUserDataEmbedder"",
  src = cms.InputTag(srcJets),
  userFloats = cms.PSet(),    
  userInts = cms.PSet(),
)


Filter jets with pt cut
nalJetsForTable = ""finalJets{}"".format(jetName)
tattr(proc, finalJetsForTable, finalJets.clone(
  src = srcJetsWithUserData,
  cut = ptcut
)


Save jets in table
bleContent = PFJETVARS
 doCalo:
tableContent =  CALOJETVARS

tTable = ""jet{}Table"".format(jetName)
tattr(proc,jetTable, cms.EDProducer(""SimpleCandidateFlatTableProducer"",
  src = cms.InputTag(finalJetsForTable),
  cut = cms.string(""""), # Don't specify cuts here
  name = cms.string(jetTablePrefix),
  doc  = cms.string(jetTableDoc),
  singleton = cms.bool(False), # the number of entries is variable
  extension = cms.bool(False), # this is the main table for the jets
  variables = cms.PSet(tableContent)
)

tattr(proc,jetTable).variables.pt.precision=10


Save MC-only jet variables in table

tMCTable = ""jet{}MCTable"".format(jetName)
tattr(proc, jetMCTable, cms.EDProducer(""SimpleCandidateFlatTableProducer"",
  src = cms.InputTag(finalJetsForTable),
  cut = getattr(proc,jetTable).cut,
  name = cms.string(jetTablePrefix),
  singleton = cms.bool(False),
  extension = cms.bool(True), # this is an extension table
  variables = cms.PSet(
    partonFlavour = Var(""partonFlavour()"", int, doc=""flavour from parton matching""),
    hadronFlavour = Var(""hadronFlavour()"", int, doc=""flavour from hadron ghost clustering""),
    genJetIdx = Var(""?genJetFwdRef().backRef().isNonnull()?genJetFwdRef().backRef().key():-1"", int, doc=""index of matched gen jet""),
  )
)


Define the jet modules sequence first
tSequenceName = ""jet{}Sequence"".format(jetName)
tattr(proc, jetSequenceName, cms.Sequence(
  getattr(proc,jetCorrFactors)
  getattr(proc,srcJets)
  getattr(proc,srcJetsWithUserData)
  getattr(proc,finalJetsForTable)
)


Define the jet table sequences 
tTableSequenceName = ""jet{}TablesSequence"".format(jetName)
tattr(proc, jetTableSequenceName, cms.Sequence(getattr(proc,jetTable)))
tTableSequenceMCName = ""jet{}MCTablesSequence"".format(jetName)
tattr(proc, jetTableSequenceMCName, cms.Sequence(getattr(proc,jetMCTable)))

 runOnMC:
proc.nanoSequenceMC = getattr(proc,jetSequenceName)
proc.nanoSequenceMC = getattr(proc,jetTableSequenceName)
proc.nanoSequenceMC = getattr(proc,jetTableSequenceMCName)
se:
proc.nanoSequence = getattr(proc,jetSequenceName)
proc.nanoSequence = getattr(proc,jetTableSequenceName)


Schedule plugins to calculate Jet ID, PileUp Jet ID input variables, and Quark-Gluon Likehood input variables.

 doPF:
proc = AddJetID(proc, jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName)
if doPUIDVar:
  proc = AddPileUpJetIDVars(proc, jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName)
if doQGL:
  proc = AddQGLTaggerVars(proc,jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName, calculateQGLVars=True)

Save b-tagging algorithm scores. Should only be done for jet collection with b-tagging 
calculated when reclustered or collection saved with b-tagging info in MiniAOD

 doBTag:
AddBTaggingScores(proc,jetTableName=jetTable)
AddDeepJetGluonLQuarkScores(proc,jetTableName=jetTable)

turn proc

ReclusterAK4CHSJets(proc, recoJA, runOnMC):
""
cluster AK4 CHS jets and replace slimmedJets
at is used as default to save AK4 CHS jets 
 NanoAODs.  
""
int(""custom_jme_cff::ReclusterAK4CHSJets: Recluster AK4 PF CHS jets"")
Recluster AK4 CHS jets

g = { 
""jet"" : ""ak4pfchs"",   
""inputCollection"" : """",                 
""genJetsCollection"": ""AK4GenJetsNoNu"",
""bTagDiscriminators"": bTagDiscriminatorsForAK4

coJetInfo = recoJA.addRecoJetCollection(proc, **cfg) 

tName = recoJetInfo.jetUpper
tJetFinalColl = ""selectedUpdatedPatJets{}Final"".format(jetName)


Change the input jet source for jetCorrFactorsNano 
and updatedJets
oc.jetCorrFactorsNano.src=patJetFinalColl
oc.updatedJets.jetSource=patJetFinalColl


Change pt cut

oc.finalJets.cut = ""pt > 2""
oc.simpleCleanerTable.jetSel = ""pt > 10"" # Change this from 15 -> 10 


Add variables 

oc.jetTable.variables.hfHEF         = PFJETVARS.hfHEF
oc.jetTable.variables.hfEmEF        = PFJETVARS.hfEmEF
oc.jetTable.variables.nConstChHads  = PFJETVARS.nConstChHads
oc.jetTable.variables.nConstNeuHads = PFJETVARS.nConstNeuHads
oc.jetTable.variables.nConstHFHads  = PFJETVARS.nConstHFHads
oc.jetTable.variables.nConstHFEMs   = PFJETVARS.nConstHFEMs
oc.jetTable.variables.nConstMuons   = PFJETVARS.nConstMuons
oc.jetTable.variables.nConstElecs   = PFJETVARS.nConstElecs
oc.jetTable.variables.nConstPhotons = PFJETVARS.nConstPhotons

oc.jetTable.doc = cms.string(""AK4 PF CHS Jets with JECs applied, after basic selection (pt > 2)"")


Setup pileup jet ID with 80X training.
leupJetId80X = ""pileupJetId80X""
tattr(proc, pileupJetId80X, pileupJetId.clone(
  jets=""updatedJets"",
  algos=cms.VPSet(_chsalgos_81x),
  inputIsCorrected=True,
  applyJec=False,
  vertexes=""offlineSlimmedPrimaryVertices""
)

oc.jetSequence.insert(proc.jetSequence.index(proc.pileupJetId94X), getattr(proc, pileupJetId80X)) 

oc.updatedJetsWithUserData.userInts.puId80XfullId = cms.InputTag('pileupJetId80X:fullId')
n2_jme_2016.toModify(proc.updatedJetsWithUserData.userFloats, puId80XDisc = cms.InputTag(""pileupJetId80X:fullDiscriminant""))

oc.jetTable.variables.puId = Var(""userInt('puId80XfullId')"", int, doc=""Pilup ID flags with 80X (2016) training"")
n2_jme_2016.toModify(proc.jetTable.variables, puIdDisc = Var(""userFloat('puId80XDisc')"",float,doc=""Pilup ID discriminant with 80X (2016) training"",precision=10))

oc = AddPileUpJetIDVars(proc, 
jetName="""", 
jetSrc=""updatedJets"", 
jetTableName=""jetTable"",
jetSequenceName=""jetSequence""

Save variables as userFloats and userInts in each jet

oc.updatedJetsWithUserData.userFloats.qgl_axis2 = cms.InputTag(""qgtagger:axis2"")
oc.updatedJetsWithUserData.userFloats.qgl_ptD   = cms.InputTag(""qgtagger:ptD"")
oc.updatedJetsWithUserData.userInts.qgl_mult    = cms.InputTag(""qgtagger:mult"")

Specfiy variables in the jetTable to save in NanoAOD

oc.jetTable.variables.qgl_axis2 =  QGLVARS.qgl_axis2
oc.jetTable.variables.qgl_ptD   =  QGLVARS.qgl_ptD
oc.jetTable.variables.qgl_mult  =  QGLVARS.qgl_mult
Save DeepJet raw score for gluon and light quarks
oc.jetTable.variables.btagDeepFlavG   = DEEPJETVARS.btagDeepFlavG  
oc.jetTable.variables.btagDeepFlavUDS = DEEPJETVARS.btagDeepFlavUDS

turn proc

AddVariablesForAK8PuppiJets(proc):
""
d more variables for AK8 PFPUPPI jets
""

 These variables are not stored for AK8PFCHS (slimmedJetsAK8)
 in MiniAOD if their pt < 170 GeV. Hence the conditional fill.

oc.fatJetTable.variables.chHEF  = Var(""?isPFJet()?chargedHadronEnergyFraction():-1"", float, doc=""charged Hadron Energy Fraction"", precision = 6)
oc.fatJetTable.variables.neHEF  = Var(""?isPFJet()?neutralHadronEnergyFraction():-1"", float, doc=""neutral Hadron Energy Fraction"", precision = 6)
oc.fatJetTable.variables.chEmEF = Var(""?isPFJet()?chargedEmEnergyFraction():-1"", float, doc=""charged Electromagnetic Energy Fraction"", precision = 6)
oc.fatJetTable.variables.neEmEF = Var(""?isPFJet()?neutralEmEnergyFraction():-1"", float, doc=""neutral Electromagnetic Energy Fraction"", precision = 6)
oc.fatJetTable.variables.muEF   = Var(""?isPFJet()?muonEnergyFraction():-1"", float, doc=""muon Energy Fraction"", precision = 6)
oc.fatJetTable.variables.hfHEF  = Var(""?isPFJet()?HFHadronEnergyFraction():-1"", float, doc=""energy fraction in forward hadronic calorimeter"", precision = 6)
oc.fatJetTable.variables.hfEmEF = Var(""?isPFJet()?HFEMEnergyFraction():-1"", float, doc=""energy fraction in forward EM calorimeter"", precision = 6)
oc.fatJetTable.variables.nConstChHads   = Var(""?isPFJet()?chargedHadronMultiplicity():-1"",int, doc=""number of charged hadrons in the jet"")
oc.fatJetTable.variables.nConstNeuHads  = Var(""?isPFJet()?neutralHadronMultiplicity():-1"",int, doc=""number of neutral hadrons in the jet"")
oc.fatJetTable.variables.nConstHFHads   = Var(""?isPFJet()?HFHadronMultiplicity():-1"", int, doc=""number of HF Hadrons in the jet"")
oc.fatJetTable.variables.nConstHFEMs    = Var(""?isPFJet()?HFEMMultiplicity():-1"", int, doc=""number of HF EMs in the jet"")
oc.fatJetTable.variables.nConstMuons    = Var(""?isPFJet()?muonMultiplicity():-1"", int, doc=""number of muons in the jet"")
oc.fatJetTable.variables.nConstElecs    = Var(""?isPFJet()?electronMultiplicity():-1"", int, doc=""number of electrons in the jet"")
oc.fatJetTable.variables.nConstPhotons  = Var(""?isPFJet()?photonMultiplicity():-1"", int, doc=""number of photons in the jet"")

turn proc
***************************************


n Jets related functions


***************************************
AddNewGenJets(proc, genJetInfo):
""
d genJet into custom nanoAOD
""

nJetName         = genJetInfo.jetUpper
nJetAlgo         = genJetInfo.jetAlgo
nJetSize         = genJetInfo.jetSize
nJetSizeNr       = genJetInfo.jetSizeNr
nJetFinalColl    = ""{}{}{}"".format(genJetAlgo.upper(), genJetSize, ""GenJetsNoNu"")
nJetTablePrefix  = nanoInfo_genjets[genJetInfo.jet][""name""]
nJetTableDoc     = nanoInfo_genjets[genJetInfo.jet][""doc""]
veGenJets(proc, genJetName, genJetAlgo, genJetSizeNr, genJetFinalColl, genJetTablePrefix, genJetTableDoc, runOnMC=False)

turn proc

SaveGenJets(proc, genJetName, genJetAlgo, genJetSizeNr, genJetFinalColl, genJetTablePrefix, genJetTableDoc, runOnMC=False):
""
hedule modules for a given genJet collection and save its variables into custom NanoAOD
""

nJetTableThisJet = ""jet{}Table"".format(genJetName)
tattr(proc, genJetTableThisJet, genJetTable.clone(
  src       = genJetFinalColl,
  cut       = ""pt > 1"",
  name      = genJetTablePrefix,
  doc       = genJetTableDoc,
  variables = GENJETVARS
)


nJetFlavourAssociationThisJet = ""genJet{}FlavourAssociation"".format(genJetName)
tattr(proc, genJetFlavourAssociationThisJet, genJetFlavourAssociation.clone(
  jets           = getattr(proc,genJetTableThisJet).src,
  jetAlgorithm   = supportedJetAlgos[genJetAlgo],
  rParam         = genJetSizeNr,
)


nJetFlavourTableThisJet = ""genJet{}FlavourTable"".format(genJetName)
tattr(proc, genJetFlavourTableThisJet, genJetFlavourTable.clone(
  name            = getattr(proc,genJetTableThisJet).name,
  src             = getattr(proc,genJetTableThisJet).src,
  cut             = getattr(proc,genJetTableThisJet).cut,
  jetFlavourInfos = genJetFlavourAssociationThisJet,
)


nJetSequenceName = ""genJet{}Sequence"".format(genJetName)
tattr(proc, genJetSequenceName, cms.Sequence(
  getattr(proc,genJetTableThisJet)
  getattr(proc,genJetFlavourAssociationThisJet)
  getattr(proc,genJetFlavourTableThisJet)
)

oc.nanoSequenceMC.insert(proc.nanoSequenceMC.index(proc.jetMC)1, getattr(proc,genJetSequenceName)) 

turn proc

ReclusterAK4GenJets(proc, genJA):
""
cluster AK4 Gen jets and replace 
immedGenJets that is used as default 
 save AK4 Gen jets in NanoAODs. 
""
int(""custom_jme_cff::ReclusterAK4GenJets: Recluster AK4 Gen jets"")
Recluster AK4 Gen jet
g = { 
""jet"" : ""ak4gen"",   

nJetInfo = genJA.addGenJetCollection(proc, **cfg)
nJetName            = genJetInfo.jetUpper
nJetAlgo            = genJetInfo.jetAlgo
nJetSize            = genJetInfo.jetSize
nJetSizeNr          = genJetInfo.jetSizeNr
lectedPatGenJets    = ""{}{}{}"".format(genJetAlgo.upper(), genJetSize, ""GenJetsNoNu"")


Change jet source to the newly clustered jet collection. Set very low pt cut for jets 
to be stored in the GenJet Table

oc.genJetTable.src = selectedPatGenJets
oc.genJetTable.cut = ""pt > 1""
oc.genJetTable.doc  =""AK4 Gen jets (made with visible genparticles)""

nJetFlavourAssociationThisJet = ""genJet{}FlavourAssociation"".format(genJetName)
tattr(proc, genJetFlavourAssociationThisJet, genJetFlavourAssociation.clone(
  jets           = proc.genJetTable.src,
  jetAlgorithm   = supportedJetAlgos[genJetAlgo],
  rParam         = genJetSizeNr,
)

oc.jetMC.insert(proc.jetMC.index(proc.genJetFlavourTable), getattr(proc, genJetFlavourAssociationThisJet)) 
turn proc

AddVariablesForAK4GenJets(proc):
oc.genJetTable.variables.nConstituents = GENJETVARS.nConstituents
turn proc

AddVariablesForAK8GenJets(proc):
oc.genJetAK8Table.variables.nConstituents = GENJETVARS.nConstituents
turn proc

========================================================================

sc. functions

========================================================================
RemoveAllJetPtCuts(proc):
""
move default pt cuts for all jets set in jets_cff.py 
""

oc.finalJets.cut             = """" # 15 -> 10
oc.finalJetsAK8.cut          = """" # 170 -> 170
oc.genJetTable.cut           = """" # 10 -> 8
oc.genJetFlavourTable.cut    = """" # 10 -> 8
oc.genJetAK8Table.cut        = """" # 100 -> 80
oc.genJetAK8FlavourTable.cut = """" # 100 -> 80

turn proc
========================================================================

STOMIZATION function

========================================================================
PrepJMECustomNanoAOD(process,runOnMC):

##########################################################################
Remove all default jet pt cuts from jets_cff.py
##########################################################################
ocess = RemoveAllJetPtCuts(process)

#########################################################################
Gen-level jets related functions. Only for MC.
#########################################################################
nJA = GenJetAdder()
 runOnMC:
############################################################################
# Save additional variables for AK8 GEN jets
############################################################################
process = AddVariablesForAK8GenJets(process)
###########################################################################
# Recluster AK4 GEN jets
###########################################################################
process = ReclusterAK4GenJets(process, genJA)
process = AddVariablesForAK4GenJets(process)
###########################################################################
# Add additional GEN jets to NanoAOD
###########################################################################
for jetConfig in config_genjets:
  cfg = { k : v for k, v in jetConfig.items() if k != ""enabled""}
  genJetInfo = genJA.addGenJetCollection(process, **cfg)
  AddNewGenJets(process, genJetInfo)

#########################################################################

Reco-level jets related functions. For both MC and data.

#########################################################################
#########################################################################
Save additional variables for AK8Puppi jets
#########################################################################
ocess = AddVariablesForAK8PuppiJets(process)
#########################################################################
Recluster AK4 CHS jets and replace ""slimmedJets""
#########################################################################
ocess = ReclusterAK4CHSJets(process, recoJA, runOnMC)
#########################################################################
Add additional Reco jets to NanoAOD
#########################################################################
cfg = { k : v for k, v in jetConfig.items() if k != ""enabled""}
AddNewPatJets(process, recoJetInfo, runOnMC)

"
-------------------------------------------------------------------------
"""name""  : ""JetPuppi"",
""doc""   : ""AK4 PF Puppi jets with JECs applied, after basic selection (pt > 2)"",  
""ptcut"" : ""pt > 2"",      
""doQGL"" : True,
""doPUIDVar"": True,
""doBTag"": True,
""name""  : ""JetPF"",
""doc""   : ""AK4 PF jets with JECs applied, after basic selection (pt > 2)"",
""ptcut"" : ""pt > 2"",   
k4calo"" : {
""name"": ""JetCalo"",
""doc"" : ""AK4 Calo jets with JECs applied"",
""name""  : ""FatJetCHS"",
""doc""   : ""AK8 PF CHS jets with JECs applied, after basic selection (pt > 100)"", 
""ptcut"" : ""pt > 100""    
k8pf"" : {
""name""  : ""FatJetPF"",
""doc""   : ""AK8 PF jets with JECs applied, after basic selection (pt > 100)"", 
""ptcut"" : ""pt > 100"", 

ETVARS = cms.PSet(P4Vars,
onstituents   = jetTable.variables.nConstituents,

TVARS = cms.PSet(P4Vars,
wFactor       = jetTable.variables.rawFactor,
ea            = jetTable.variables.area,
HEF           = jetTable.variables.chHEF,
HEF           = jetTable.variables.neHEF,
EmEF          = jetTable.variables.chEmEF,
EmEF          = jetTable.variables.neEmEF,
EF            = jetTable.variables.muEF,
HEF           = Var(""HFHadronEnergyFraction()"",float,doc = ""hadronic energy fraction in HF"",precision = 6),
EmEF          = Var(""HFEMEnergyFraction()"",float,doc = ""electromagnetic energy fraction in HF"",precision = 6),
uons          = jetTable.variables.nMuons,
lectrons      = jetTable.variables.nElectrons,
onstituents   = jetTable.variables.nConstituents,
onstChHads    = Var(""chargedHadronMultiplicity()"",int,doc=""number of charged hadrons in the jet""),
onstNeuHads   = Var(""neutralHadronMultiplicity()"",int,doc=""number of neutral hadrons in the jet""),
onstHFHads    = Var(""HFHadronMultiplicity()"", int,doc=""number of HF hadrons in the jet""),
onstHFEMs     = Var(""HFEMMultiplicity()"",int,doc=""number of HF EMs in the jet""),
onstMuons     = Var(""muonMultiplicity()"",int,doc=""number of muons in the jet""),
onstElecs     = Var(""electronMultiplicity()"",int,doc=""number of electrons in the jet""),
onstPhotons   = Var(""photonMultiplicity()"",int,doc=""number of photons in the jet""),

VARS = cms.PSet(
Id_dR2Mean    = Var(""userFloat('puId_dR2Mean')"",float,doc=""pT^2-weighted average square distance of jet constituents from the jet axis (PileUp ID BDT input variable)"", precision= 6),
Id_majW       = Var(""userFloat('puId_majW')"",float,doc=""major axis of jet ellipsoid in eta-phi plane (PileUp ID BDT input variable)"", precision= 6)  ,
Id_minW       = Var(""userFloat('puId_minW')"",float,doc=""minor axis of jet ellipsoid in eta-phi plane (PileUp ID BDT input variable)"", precision= 6)  ,
Id_frac01     = Var(""userFloat('puId_frac01')"",float,doc=""fraction of constituents' pT contained within dR <0.1 (PileUp ID BDT input variable)"", precision= 6)  ,
Id_frac02     = Var(""userFloat('puId_frac02')"",float,doc=""fraction of constituents' pT contained within 0.1< dR <0.2 (PileUp ID BDT input variable)"", precision= 6) ,
Id_frac03     = Var(""userFloat('puId_frac03')"",float,doc=""fraction of constituents' pT contained within 0.2< dR <0.3 (PileUp ID BDT input variable)"", precision= 6) ,
Id_frac04     = Var(""userFloat('puId_frac04')"",float,doc=""fraction of constituents' pT contained within 0.3< dR <0.4 (PileUp ID BDT input variable)"", precision= 6) ,
Id_ptD        = Var(""userFloat('puId_ptD')"",float,doc=""pT-weighted average pT of constituents (PileUp ID BDT input variable)"", precision= 6) ,
Id_beta       = Var(""userFloat('puId_beta')"",float,doc=""fraction of pT of charged constituents associated to PV (PileUp ID BDT input variable)"", precision= 6) ,
Id_pull       = Var(""userFloat('puId_pull')"",float,doc=""magnitude of pull vector (PileUp ID BDT input variable)"", precision= 6) ,
Id_jetR       = Var(""userFloat('puId_jetR')"",float,doc=""fraction of jet pT carried by the leading constituent (PileUp ID BDT input variable)"", precision= 6) ,
Id_jetRchg    = Var(""userFloat('puId_jetRchg')"",float,doc=""fraction of jet pT carried by the leading charged constituent (PileUp ID BDT input variable)"", precision= 6) ,
Id_nCharged   = Var(""userInt('puId_nCharged')"",int,doc=""number of charged constituents (PileUp ID BDT input variable)""),

ARS = cms.PSet(
l_axis2       =  Var(""userFloat('qgl_axis2')"",float,doc=""ellipse minor jet axis (Quark vs Gluon likelihood input variable)"", precision= 6),
l_ptD         =  Var(""userFloat('qgl_ptD')"",float,doc=""pT-weighted average pT of constituents (Quark vs Gluon likelihood input variable)"", precision= 6),
l_mult        =  Var(""userInt('qgl_mult')"", int,doc=""PF candidates multiplicity (Quark vs Gluon likelihood input variable)""),

VARS = cms.PSet(
agCMVA  = jetTable.variables.btagCMVA,
agDeepB = jetTable.variables.btagDeepB,
agCSVV2 = jetTable.variables.btagCSVV2,
agDeepC = jetTable.variables.btagDeepC,

JETVARS = cms.PSet(
agDeepFlavB   = jetTable.variables.btagDeepFlavB,
agDeepFlavC   = jetTable.variables.btagDeepFlavC,
agDeepFlavG   = Var(""bDiscriminator('pfDeepFlavourJetTags:probg')"",float,doc=""DeepFlavour gluon tag raw score"",precision=10),
agDeepFlavUDS = Var(""bDiscriminator('pfDeepFlavourJetTags:probuds')"",float,doc=""DeepFlavour uds tag raw score"",precision=10)

JETVARS = cms.PSet(P4Vars,
f       = Var(""emEnergyFraction()"", float, doc = ""electromagnetic energy fraction"", precision = 10),

***************************************

co Jets related functions

***************************************
AddJetID(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName=""""):
tup modules to calculate PF jet ID 

PUPPIJet = True if ""Puppi"" in jetName else False

oseJetId = ""looseJetId{}"".format(jetName)
tattr(proc, looseJetId, proc.looseJetId.clone(
  src = jetSrc,
  filterParams=proc.looseJetId.filterParams.clone(
    version =""WINTER16""
  ),

ghtJetId = ""tightJetId{}"".format(jetName)
tattr(proc, tightJetId, proc.tightJetId.clone(
  src = jetSrc,
  filterParams=proc.tightJetId.filterParams.clone(
    version = ""SUMMER18{}"".format(""PUPPI"" if isPUPPIJet else """")
  ),


ghtJetIdLepVeto = ""tightJetIdLepVeto{}"".format(jetName)
tattr(proc, tightJetIdLepVeto, proc.tightJetIdLepVeto.clone(
  src = jetSrc,
  filterParams=proc.tightJetIdLepVeto.filterParams.clone(
    version = ""SUMMER18{}"".format(""PUPPI"" if isPUPPIJet else """")
  ),
)

n2_jme_2016.toModify(getattr(proc, tightJetId) .filterParams,        version = ""WINTER16"" )
n2_jme_2016.toModify(getattr(proc, tightJetIdLepVeto) .filterParams, version = ""WINTER16"" )
n2_jme_2017.toModify(getattr(proc, tightJetId) .filterParams,        version = ""WINTER17{}"".format(""PUPPI"" if isPUPPIJet else """"))
n2_jme_2017.toModify(getattr(proc, tightJetIdLepVeto) .filterParams, version = ""WINTER17{}"".format(""PUPPI"" if isPUPPIJet else """"))


Save variables as userInts in each jet

tJetWithUserData = ""{}WithUserData"".format(jetSrc)
tattr(proc, patJetWithUserData).userInts.tightId = cms.InputTag(tightJetId)
tattr(proc, patJetWithUserData).userInts.tightIdLepVeto = cms.InputTag(tightJetIdLepVeto)
n2_jme_2016.toModify(getattr(proc, patJetWithUserData).userInts, looseId = cms.InputTag(looseJetId))


Specfiy variables in the jetTable to save in NanoAOD

tattr(proc, jetTableName).variables.jetId = Var(""userInt('tightId')*24*userInt('tightIdLepVeto')"",int,doc=""Jet ID flags bit1 is loose (always false in 2017 since it does not exist), bit2 is tight, bit3 is tightLepVeto"")
n2_jme_2016.toModify(getattr(proc, jetTableName).variables, jetId = Var(""userInt('tightIdLepVeto')*4userInt('tightId')*2userInt('looseId')"",int, doc=""Jet ID flags bit1 is loose, bit2 is tight, bit3 is tightLepVeto""))
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, tightJetId))
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, tightJetId))1, getattr(proc, tightJetIdLepVeto))

tattr(proc,""_""jetSequenceName""_2016"", getattr(proc,jetSequenceName).copy())
tattr(proc,""_""jetSequenceName""_2016"").insert(getattr(proc, ""_""jetSequenceName""_2016"").index(getattr(proc, tightJetId)), getattr(proc, looseJetId))
n2_jme_2016.toReplaceWith(getattr(proc,jetSequenceName), getattr(proc, ""_""jetSequenceName""_2016""))
turn proc
AddPileUpJetIDVars(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName=""""):
""
tup modules to calculate pileup jet ID input variables for PF jet
""
Calculate pileup jet ID variables
JetIdVarsCalculator = ""puJetIdCalculator{}"".format(jetName) 
tattr(proc, puJetIdVarsCalculator, pileupJetIdCalculator.clone(
  jets = jetSrc,
  vertexes  = ""offlineSlimmedPrimaryVertices"",
  inputIsCorrected = True,
  applyJec  = False,
  usePuppi = True if ""Puppi"" in jetName else False
)
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, puJetIdVarsCalculator))
JetIDVar = ""puJetIDVar{}"".format(jetName)
tattr(proc, puJetIDVar, cms.EDProducer(""PileupJetIDVarProducer"",
  srcJet = cms.InputTag(jetSrc),    
  srcPileupJetId = cms.InputTag(puJetIdVarsCalculator)
)
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, puJetIdVarsCalculator))1, getattr(proc, puJetIDVar))
Save variables as userFloats and userInts for each jet
tJetWithUserData = ""{}WithUserData"".format(jetSrc)
tattr(proc,patJetWithUserData).userFloats.puId_dR2Mean  = cms.InputTag(""{}:dR2Mean"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_majW     = cms.InputTag(""{}:majW"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_minW     = cms.InputTag(""{}:minW"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac01   = cms.InputTag(""{}:frac01"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac02   = cms.InputTag(""{}:frac02"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac03   = cms.InputTag(""{}:frac03"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac04   = cms.InputTag(""{}:frac04"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_ptD      = cms.InputTag(""{}:ptD"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_beta     = cms.InputTag(""{}:beta"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_pull     = cms.InputTag(""{}:pull"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_jetR     = cms.InputTag(""{}:jetR"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_jetRchg  = cms.InputTag(""{}:jetRchg"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userInts.puId_nCharged   = cms.InputTag(""{}:nCharged"".format(puJetIDVar))
Specfiy variables in the jet table to save in NanoAOD
tattr(proc,jetTableName).variables.puId_dR2Mean  = PUIDVARS.puId_dR2Mean 
tattr(proc,jetTableName).variables.puId_majW     = PUIDVARS.puId_majW    
tattr(proc,jetTableName).variables.puId_minW     = PUIDVARS.puId_minW    
tattr(proc,jetTableName).variables.puId_frac01   = PUIDVARS.puId_frac01  
tattr(proc,jetTableName).variables.puId_frac02   = PUIDVARS.puId_frac02  
tattr(proc,jetTableName).variables.puId_frac03   = PUIDVARS.puId_frac03  
tattr(proc,jetTableName).variables.puId_frac04   = PUIDVARS.puId_frac04  
tattr(proc,jetTableName).variables.puId_ptD      = PUIDVARS.puId_ptD      
tattr(proc,jetTableName).variables.puId_beta     = PUIDVARS.puId_beta    
tattr(proc,jetTableName).variables.puId_pull     = PUIDVARS.puId_pull     
tattr(proc,jetTableName).variables.puId_jetR     = PUIDVARS.puId_jetR    
tattr(proc,jetTableName).variables.puId_jetRchg  = PUIDVARS.puId_jetRchg 
tattr(proc,jetTableName).variables.puId_nCharged = PUIDVARS.puId_nCharged 

turn proc

AddQGLTaggerVars(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName="""", calculateQGLVars=False):
""
hedule the QGTagger module to calculate input variables to the QG likelihood 
""

LTagger=""qgtagger{}"".format(jetName)
tJetWithUserData=""{}WithUserData"".format(jetSrc)

 calculateQGLVars:
setattr(proc, QGLTagger, qgtagger.clone(
    srcJets=jetSrc
  )
)
Save variables as userFloats and userInts for each jet

tattr(proc,patJetWithUserData).userFloats.qgl_axis2 = cms.InputTag(QGLTagger"":axis2"")
tattr(proc,patJetWithUserData).userFloats.qgl_ptD   = cms.InputTag(QGLTagger"":ptD"")
tattr(proc,patJetWithUserData).userInts.qgl_mult    = cms.InputTag(QGLTagger"":mult"")

Specfiy variables in the jet table to save in NanoAOD
tattr(proc,jetTableName).variables.qgl_axis2 =  QGLVARS.qgl_axis2
tattr(proc,jetTableName).variables.qgl_ptD   =  QGLVARS.qgl_ptD
tattr(proc,jetTableName).variables.qgl_mult  =  QGLVARS.qgl_mult

 calculateQGLVars:
getattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, QGLTagger))

turn proc

AddBTaggingScores(proc, jetTableName=""""):
""
ore b-tagging scores from various algortihm
""

tattr(proc, jetTableName).variables.btagCMVA      = jetTable.variables.btagCMVA
tattr(proc, jetTableName).variables.btagDeepB     = jetTable.variables.btagDeepB
tattr(proc, jetTableName).variables.btagCSVV2     = jetTable.variables.btagCSVV2
tattr(proc, jetTableName).variables.btagDeepC     = jetTable.variables.btagDeepC
tattr(proc, jetTableName).variables.btagDeepFlavB = jetTable.variables.btagDeepFlavB
tattr(proc, jetTableName).variables.btagDeepFlavC = jetTable.variables.btagDeepFlavC

turn proc

AddDeepJetGluonLQuarkScores(proc, jetTableName=""""):
""
ore DeepJet raw score in jetTable for gluon and light quark
""

tattr(proc, jetTableName).variables.btagDeepFlavG   = DEEPJETVARS.btagDeepFlavG  
tattr(proc, jetTableName).variables.btagDeepFlavUDS = DEEPJETVARS.btagDeepFlavUDS

turn proc

AddNewPatJets(proc, recoJetInfo, runOnMC):
""
d patJet into custom nanoAOD
""

tName = recoJetInfo.jetUpper
yload = recoJetInfo.jetCorrPayload 
PF    = recoJetInfo.doPF
Calo  = recoJetInfo.doCalo

 recoJetInfo.inputCollection != """":
patJetFinalColl = recoJetInfo.inputCollection
se: 
patJetFinalColl = ""selectedUpdatedPatJets{}Final"".format(jetName)

 doCalo:
patJetFinalColl = ""selectedPatJets{}"".format(jetName)

noInfoForJet = nanoInfo_recojets[recoJetInfo.jet]
tTablePrefix = nanoInfoForJet[""name""]
tTableDoc    = nanoInfoForJet[""doc""]
cut          = nanoInfoForJet[""ptcut""] if ""ptcut"" in nanoInfoForJet else """"
PUIDVar      = nanoInfoForJet[""doPUIDVar""] if ""doPUIDVar"" in nanoInfoForJet else False
QGL          = nanoInfoForJet[""doQGL""] if ""doQGL"" in nanoInfoForJet else False
BTag         = nanoInfoForJet[""doBTag""] if ""doBTag"" in nanoInfoForJet else False

vePatJets(proc, 
jetName, payload, patJetFinalColl, jetTablePrefix, jetTableDoc, doPF, doCalo, 
ptcut=ptcut, doPUIDVar=doPUIDVar, doQGL=doQGL, doBTag=doBTag, runOnMC=runOnMC


turn proc

SavePatJets(proc, jetName, payload, patJetFinalColl, jetTablePrefix, jetTableDoc, 
            doPF, doCalo, ptcut="""", doPUIDVar=False, doQGL=False, doBTag=False, runOnMC=False):
""
hedule modules for a given patJet collection and save its variables into custom NanoAOD
""

Setup jet correction factors
tCorrFactors = ""jetCorrFactorsNano{}"".format(jetName)
tattr(proc, jetCorrFactors, jetCorrFactorsNano.clone(
  src = patJetFinalColl,
  payload = payload,
)


Update jets

cJets = ""updatedJets{}"".format(jetName)
tattr(proc, srcJets, updatedJets.clone(
  jetSource = patJetFinalColl,
  jetCorrFactorsSource=[jetCorrFactors],
)


Setup UserDataEmbedder
cJetsWithUserData = ""updatedJets{}WithUserData"".format(jetName)
tattr(proc, srcJetsWithUserData, cms.EDProducer(""PATJetUserDataEmbedder"",
  src = cms.InputTag(srcJets),
  userFloats = cms.PSet(),    
  userInts = cms.PSet(),
)


Filter jets with pt cut
nalJetsForTable = ""finalJets{}"".format(jetName)
tattr(proc, finalJetsForTable, finalJets.clone(
  src = srcJetsWithUserData,
  cut = ptcut
)


Save jets in table
bleContent = PFJETVARS
 doCalo:
tableContent =  CALOJETVARS

tTable = ""jet{}Table"".format(jetName)
tattr(proc,jetTable, cms.EDProducer(""SimpleCandidateFlatTableProducer"",
  src = cms.InputTag(finalJetsForTable),
  cut = cms.string(""""), # Don't specify cuts here
  name = cms.string(jetTablePrefix),
  doc  = cms.string(jetTableDoc),
  singleton = cms.bool(False), # the number of entries is variable
  extension = cms.bool(False), # this is the main table for the jets
  variables = cms.PSet(tableContent)
)
tattr(proc,jetTable).variables.pt.precision=10


Save MC-only jet variables in table

tMCTable = ""jet{}MCTable"".format(jetName)
tattr(proc, jetMCTable, cms.EDProducer(""SimpleCandidateFlatTableProducer"",
  src = cms.InputTag(finalJetsForTable),
  cut = getattr(proc,jetTable).cut,
  name = cms.string(jetTablePrefix),
  singleton = cms.bool(False),
  extension = cms.bool(True), # this is an extension table
  variables = cms.PSet(
    partonFlavour = Var(""partonFlavour()"", int, doc=""flavour from parton matching""),
    hadronFlavour = Var(""hadronFlavour()"", int, doc=""flavour from hadron ghost clustering""),
    genJetIdx = Var(""?genJetFwdRef().backRef().isNonnull()?genJetFwdRef().backRef().key():-1"", int, doc=""index of matched gen jet""),
  )
)


Define the jet modules sequence first

tSequenceName = ""jet{}Sequence"".format(jetName)
tattr(proc, jetSequenceName, cms.Sequence(
  getattr(proc,jetCorrFactors)
  getattr(proc,srcJets)
  getattr(proc,srcJetsWithUserData)
  getattr(proc,finalJetsForTable)
)


Define the jet table sequences 
tTableSequenceName = ""jet{}TablesSequence"".format(jetName)
tattr(proc, jetTableSequenceName, cms.Sequence(getattr(proc,jetTable)))

tTableSequenceMCName = ""jet{}MCTablesSequence"".format(jetName)
tattr(proc, jetTableSequenceMCName, cms.Sequence(getattr(proc,jetMCTable)))

 runOnMC:
proc.nanoSequenceMC = getattr(proc,jetSequenceName)
proc.nanoSequenceMC = getattr(proc,jetTableSequenceName)
proc.nanoSequenceMC = getattr(proc,jetTableSequenceMCName)
se:
proc.nanoSequence = getattr(proc,jetSequenceName)
proc.nanoSequence = getattr(proc,jetTableSequenceName)


Schedule plugins to calculate Jet ID, PileUp Jet ID input variables, and Quark-Gluon Likehood input variables.

 doPF:
proc = AddJetID(proc, jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName)
if doPUIDVar:
  proc = AddPileUpJetIDVars(proc, jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName)
if doQGL:
  proc = AddQGLTaggerVars(proc,jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName, calculateQGLVars=True)


Save b-tagging algorithm scores. Should only be done for jet collection with b-tagging 
calculated when reclustered or collection saved with b-tagging info in MiniAOD
 doBTag:
AddBTaggingScores(proc,jetTableName=jetTable)
AddDeepJetGluonLQuarkScores(proc,jetTableName=jetTable)

turn proc

ReclusterAK4CHSJets(proc, recoJA, runOnMC):
""
cluster AK4 CHS jets and replace slimmedJets
at is used as default to save AK4 CHS jets 
 NanoAODs.  
""
int(""custom_jme_cff::ReclusterAK4CHSJets: Recluster AK4 PF CHS jets"")


Recluster AK4 CHS jets

g = { 
""jet"" : ""ak4pfchs"",   
""inputCollection"" : """",                 
""genJetsCollection"": ""AK4GenJetsNoNu"",
""bTagDiscriminators"": bTagDiscriminatorsForAK4

coJetInfo = recoJA.addRecoJetCollection(proc, **cfg) 

tName = recoJetInfo.jetUpper
tJetFinalColl = ""selectedUpdatedPatJets{}Final"".format(jetName)


Change the input jet source for jetCorrFactorsNano 
and updatedJets
oc.jetCorrFactorsNano.src=patJetFinalColl
oc.updatedJets.jetSource=patJetFinalColl


Change pt cut

oc.finalJets.cut = ""pt > 2""
oc.simpleCleanerTable.jetSel = ""pt > 10"" # Change this from 15 -> 10 


Add variables 

oc.jetTable.variables.hfHEF         = PFJETVARS.hfHEF
oc.jetTable.variables.hfEmEF        = PFJETVARS.hfEmEF
oc.jetTable.variables.nConstChHads  = PFJETVARS.nConstChHads
oc.jetTable.variables.nConstNeuHads = PFJETVARS.nConstNeuHads
oc.jetTable.variables.nConstHFHads  = PFJETVARS.nConstHFHads
oc.jetTable.variables.nConstHFEMs   = PFJETVARS.nConstHFEMs
oc.jetTable.variables.nConstMuons   = PFJETVARS.nConstMuons
oc.jetTable.variables.nConstElecs   = PFJETVARS.nConstElecs
oc.jetTable.variables.nConstPhotons = PFJETVARS.nConstPhotons

oc.jetTable.doc = cms.string(""AK4 PF CHS Jets with JECs applied, after basic selection (pt > 2)"")


Setup pileup jet ID with 80X training.

pileupJetId80X = ""pileupJetId80X""
setattr(proc, pileupJetId80X, pileupJetId.clone(
    jets=""updatedJets"",
    algos=cms.VPSet(_chsalgos_81x),
    inputIsCorrected=True,
    applyJec=False,
    vertexes=""offlineSlimmedPrimaryVertices""
  )
)
proc.jetSequence.insert(proc.jetSequence.index(proc.pileupJetId94X), getattr(proc, pileupJetId80X)) 

proc.updatedJetsWithUserData.userInts.puId80XfullId = cms.InputTag('pileupJetId80X:fullId')
run2_jme_2016.toModify(proc.updatedJetsWithUserData.userFloats, puId80XDisc = cms.InputTag(""pileupJetId80X:fullDiscriminant""))

proc.jetTable.variables.puId = Var(""userInt('puId80XfullId')"", int, doc=""Pilup ID flags with 80X (2016) training"")
run2_jme_2016.toModify(proc.jetTable.variables, puIdDisc = Var(""userFloat('puId80XDisc')"",float,doc=""Pilup ID discriminant with 80X (2016) training"",precision=10))

oc = AddPileUpJetIDVars(proc, 
jetName="""", 
jetSrc=""updatedJets"", 
jetTableName=""jetTable"",
jetSequenceName=""jetSequence""


Add variables for quark guon likelihood tagger studies.
Save variables as userFloats and userInts in each jet

oc.updatedJetsWithUserData.userFloats.qgl_axis2 = cms.InputTag(""qgtagger:axis2"")
oc.updatedJetsWithUserData.userFloats.qgl_ptD   = cms.InputTag(""qgtagger:ptD"")
oc.updatedJetsWithUserData.userInts.qgl_mult    = cms.InputTag(""qgtagger:mult"")

Specfiy variables in the jetTable to save in NanoAOD

oc.jetTable.variables.qgl_axis2 =  QGLVARS.qgl_axis2
oc.jetTable.variables.qgl_ptD   =  QGLVARS.qgl_ptD
oc.jetTable.variables.qgl_mult  =  QGLVARS.qgl_mult

Save DeepJet raw score for gluon and light quarks

oc.jetTable.variables.btagDeepFlavG   = DEEPJETVARS.btagDeepFlavG  
oc.jetTable.variables.btagDeepFlavUDS = DEEPJETVARS.btagDeepFlavUDS

turn proc

AddVariablesForAK8PuppiJets(proc):
""
d more variables for AK8 PFPUPPI jets
""


 These variables are not stored for AK8PFCHS (slimmedJetsAK8)
 in MiniAOD if their pt < 170 GeV. Hence the conditional fill.

oc.fatJetTable.variables.chHEF  = Var(""?isPFJet()?chargedHadronEnergyFraction():-1"", float, doc=""charged Hadron Energy Fraction"", precision = 6)
oc.fatJetTable.variables.neHEF  = Var(""?isPFJet()?neutralHadronEnergyFraction():-1"", float, doc=""neutral Hadron Energy Fraction"", precision = 6)
oc.fatJetTable.variables.chEmEF = Var(""?isPFJet()?chargedEmEnergyFraction():-1"", float, doc=""charged Electromagnetic Energy Fraction"", precision = 6)
oc.fatJetTable.variables.neEmEF = Var(""?isPFJet()?neutralEmEnergyFraction():-1"", float, doc=""neutral Electromagnetic Energy Fraction"", precision = 6)
oc.fatJetTable.variables.muEF   = Var(""?isPFJet()?muonEnergyFraction():-1"", float, doc=""muon Energy Fraction"", precision = 6)
oc.fatJetTable.variables.hfHEF  = Var(""?isPFJet()?HFHadronEnergyFraction():-1"", float, doc=""energy fraction in forward hadronic calorimeter"", precision = 6)
oc.fatJetTable.variables.hfEmEF = Var(""?isPFJet()?HFEMEnergyFraction():-1"", float, doc=""energy fraction in forward EM calorimeter"", precision = 6)
oc.fatJetTable.variables.nConstChHads   = Var(""?isPFJet()?chargedHadronMultiplicity():-1"",int, doc=""number of charged hadrons in the jet"")
oc.fatJetTable.variables.nConstNeuHads  = Var(""?isPFJet()?neutralHadronMultiplicity():-1"",int, doc=""number of neutral hadrons in the jet"")
oc.fatJetTable.variables.nConstHFHads   = Var(""?isPFJet()?HFHadronMultiplicity():-1"", int, doc=""number of HF Hadrons in the jet"")
oc.fatJetTable.variables.nConstHFEMs    = Var(""?isPFJet()?HFEMMultiplicity():-1"", int, doc=""number of HF EMs in the jet"")
oc.fatJetTable.variables.nConstMuons    = Var(""?isPFJet()?muonMultiplicity():-1"", int, doc=""number of muons in the jet"")
oc.fatJetTable.variables.nConstElecs    = Var(""?isPFJet()?electronMultiplicity():-1"", int, doc=""number of electrons in the jet"")
oc.fatJetTable.variables.nConstPhotons  = Var(""?isPFJet()?photonMultiplicity():-1"", int, doc=""number of photons in the jet"")

turn proc
***************************************


n Jets related functions


***************************************
AddNewGenJets(proc, genJetInfo):
""
d genJet into custom nanoAOD
""

nJetName         = genJetInfo.jetUpper
nJetAlgo         = genJetInfo.jetAlgo
nJetSize         = genJetInfo.jetSize
nJetSizeNr       = genJetInfo.jetSizeNr
nJetFinalColl    = ""{}{}{}"".format(genJetAlgo.upper(), genJetSize, ""GenJetsNoNu"")
nJetTablePrefix  = nanoInfo_genjets[genJetInfo.jet][""name""]
nJetTableDoc     = nanoInfo_genjets[genJetInfo.jet][""doc""]

veGenJets(proc, genJetName, genJetAlgo, genJetSizeNr, genJetFinalColl, genJetTablePrefix, genJetTableDoc, runOnMC=False)

turn proc

SaveGenJets(proc, genJetName, genJetAlgo, genJetSizeNr, genJetFinalColl, genJetTablePrefix, genJetTableDoc, runOnMC=False):
""
hedule modules for a given genJet collection and save its variables into custom NanoAOD
""

nJetTableThisJet = ""jet{}Table"".format(genJetName)
tattr(proc, genJetTableThisJet, genJetTable.clone(
  src       = genJetFinalColl,
  cut       = ""pt > 1"",
  name      = genJetTablePrefix,
  doc       = genJetTableDoc,
  variables = GENJETVARS
)

nJetFlavourAssociationThisJet = ""genJet{}FlavourAssociation"".format(genJetName)
tattr(proc, genJetFlavourAssociationThisJet, genJetFlavourAssociation.clone(
  jets           = getattr(proc,genJetTableThisJet).src,
  jetAlgorithm   = supportedJetAlgos[genJetAlgo],
  rParam         = genJetSizeNr,
)


nJetFlavourTableThisJet = ""genJet{}FlavourTable"".format(genJetName)
tattr(proc, genJetFlavourTableThisJet, genJetFlavourTable.clone(
  name            = getattr(proc,genJetTableThisJet).name,
  src             = getattr(proc,genJetTableThisJet).src,
  cut             = getattr(proc,genJetTableThisJet).cut,
  jetFlavourInfos = genJetFlavourAssociationThisJet,
)


nJetSequenceName = ""genJet{}Sequence"".format(genJetName)
tattr(proc, genJetSequenceName, cms.Sequence(
  getattr(proc,genJetTableThisJet)
  getattr(proc,genJetFlavourAssociationThisJet)
  getattr(proc,genJetFlavourTableThisJet)
)

oc.nanoSequenceMC.insert(proc.nanoSequenceMC.index(proc.jetMC)1, getattr(proc,genJetSequenceName)) 

turn proc

ReclusterAK4GenJets(proc, genJA):
""
cluster AK4 Gen jets and replace 
immedGenJets that is used as default 
 save AK4 Gen jets in NanoAODs. 
""
int(""custom_jme_cff::ReclusterAK4GenJets: Recluster AK4 Gen jets"")
Recluster AK4 Gen jet
g = { 
""jet"" : ""ak4gen"",   

nJetInfo = genJA.addGenJetCollection(proc, **cfg)

nJetName            = genJetInfo.jetUpper
nJetAlgo            = genJetInfo.jetAlgo
nJetSize            = genJetInfo.jetSize
nJetSizeNr          = genJetInfo.jetSizeNr
lectedPatGenJets    = ""{}{}{}"".format(genJetAlgo.upper(), genJetSize, ""GenJetsNoNu"")


Change jet source to the newly clustered jet collection. Set very low pt cut for jets 
to be stored in the GenJet Table

oc.genJetTable.src = selectedPatGenJets
oc.genJetTable.cut = ""pt > 1""
oc.genJetTable.doc  =""AK4 Gen jets (made with visible genparticles)""

nJetFlavourAssociationThisJet = ""genJet{}FlavourAssociation"".format(genJetName)
tattr(proc, genJetFlavourAssociationThisJet, genJetFlavourAssociation.clone(
  jets           = proc.genJetTable.src,
  jetAlgorithm   = supportedJetAlgos[genJetAlgo],
  rParam         = genJetSizeNr,
)

oc.jetMC.insert(proc.jetMC.index(proc.genJetFlavourTable), getattr(proc, genJetFlavourAssociationThisJet)) 
turn proc

AddVariablesForAK4GenJets(proc):
oc.genJetTable.variables.nConstituents = GENJETVARS.nConstituents
turn proc

AddVariablesForAK8GenJets(proc):
oc.genJetAK8Table.variables.nConstituents = GENJETVARS.nConstituents
turn proc

========================================================================

sc. functions

========================================================================
RemoveAllJetPtCuts(proc):
""
move default pt cuts for all jets set in jets_cff.py 
""
oc.finalJets.cut             = """" # 15 -> 10
oc.finalJetsAK8.cut          = """" # 170 -> 170
oc.genJetTable.cut           = """" # 10 -> 8
oc.genJetFlavourTable.cut    = """" # 10 -> 8
oc.genJetAK8Table.cut        = """" # 100 -> 80
oc.genJetAK8FlavourTable.cut = """" # 100 -> 80
turn proc

========================================================================

STOMIZATION function

========================================================================
PrepJMECustomNanoAOD(process,runOnMC):

##########################################################################
Remove all default jet pt cuts from jets_cff.py
##########################################################################
ocess = RemoveAllJetPtCuts(process)

#########################################################################

Gen-level jets related functions. Only for MC.
#########################################################################
nJA = GenJetAdder()
 runOnMC:
############################################################################
# Save additional variables for AK8 GEN jets
############################################################################
process = AddVariablesForAK8GenJets(process)
###########################################################################
# Recluster AK4 GEN jets
###########################################################################
process = ReclusterAK4GenJets(process, genJA)
process = AddVariablesForAK4GenJets(process)
###########################################################################
# Add additional GEN jets to NanoAOD
###########################################################################
for jetConfig in config_genjets:
  cfg = { k : v for k, v in jetConfig.items() if k != ""enabled""}
  genJetInfo = genJA.addGenJetCollection(process, **cfg)
  AddNewGenJets(process, genJetInfo)

#########################################################################
Reco-level jets related functions. For both MC and data.

#########################################################################
#########################################################################
Save additional variables for AK8Puppi jets
#########################################################################
ocess = AddVariablesForAK8PuppiJets(process)
#########################################################################
Recluster AK4 CHS jets and replace ""slimmedJets""
#########################################################################
ocess = ReclusterAK4CHSJets(process, recoJA, runOnMC)
#########################################################################
Add additional Reco jets to NanoAOD
#########################################################################
cfg = { k : v for k, v in jetConfig.items() if k != ""enabled""}
AddNewPatJets(process, recoJetInfo, runOnMC)

turn process
turn process
turn process
"
-------------------------------------------------------------------------
"""name""  : ""JetPuppi"",
""doc""   : ""AK4 PF Puppi jets with JECs applied, after basic selection (pt > 2)"",  
""ptcut"" : ""pt > 2"",      
""doQGL"" : True,
""doPUIDVar"": True,
""doBTag"": True,
""name""  : ""JetPF"",
""doc""   : ""AK4 PF jets with JECs applied, after basic selection (pt > 2)"",
""ptcut"" : ""pt > 2"",   
k4calo"" : {
""name"": ""JetCalo"",
""doc"" : ""AK4 Calo jets with JECs applied"",
""name""  : ""FatJetCHS"",
""doc""   : ""AK8 PF CHS jets with JECs applied, after basic selection (pt > 100)"", 
""ptcut"" : ""pt > 100""    
k8pf"" : {
""name""  : ""FatJetPF"",
""doc""   : ""AK8 PF jets with JECs applied, after basic selection (pt > 100)"", 
""ptcut"" : ""pt > 100"", 

ETVARS = cms.PSet(P4Vars,
onstituents   = jetTable.variables.nConstituents,

TVARS = cms.PSet(P4Vars,
wFactor       = jetTable.variables.rawFactor,
ea            = jetTable.variables.area,
HEF           = jetTable.variables.chHEF,
HEF           = jetTable.variables.neHEF,
EmEF          = jetTable.variables.chEmEF,
EmEF          = jetTable.variables.neEmEF,
EF            = jetTable.variables.muEF,
HEF           = Var(""HFHadronEnergyFraction()"",float,doc = ""hadronic energy fraction in HF"",precision = 6),
EmEF          = Var(""HFEMEnergyFraction()"",float,doc = ""electromagnetic energy fraction in HF"",precision = 6),
uons          = jetTable.variables.nMuons,
lectrons      = jetTable.variables.nElectrons,
onstituents   = jetTable.variables.nConstituents,
onstChHads    = Var(""chargedHadronMultiplicity()"",int,doc=""number of charged hadrons in the jet""),
onstNeuHads   = Var(""neutralHadronMultiplicity()"",int,doc=""number of neutral hadrons in the jet""),
onstHFHads    = Var(""HFHadronMultiplicity()"", int,doc=""number of HF hadrons in the jet""),
onstHFEMs     = Var(""HFEMMultiplicity()"",int,doc=""number of HF EMs in the jet""),
onstMuons     = Var(""muonMultiplicity()"",int,doc=""number of muons in the jet""),
onstElecs     = Var(""electronMultiplicity()"",int,doc=""number of electrons in the jet""),
onstPhotons   = Var(""photonMultiplicity()"",int,doc=""number of photons in the jet""),

VARS = cms.PSet(
Id_dR2Mean    = Var(""userFloat('puId_dR2Mean')"",float,doc=""pT^2-weighted average square distance of jet constituents from the jet axis (PileUp ID BDT input variable)"", precision= 6),
Id_majW       = Var(""userFloat('puId_majW')"",float,doc=""major axis of jet ellipsoid in eta-phi plane (PileUp ID BDT input variable)"", precision= 6)  ,
Id_minW       = Var(""userFloat('puId_minW')"",float,doc=""minor axis of jet ellipsoid in eta-phi plane (PileUp ID BDT input variable)"", precision= 6)  ,
Id_frac01     = Var(""userFloat('puId_frac01')"",float,doc=""fraction of constituents' pT contained within dR <0.1 (PileUp ID BDT input variable)"", precision= 6)  ,
Id_frac02     = Var(""userFloat('puId_frac02')"",float,doc=""fraction of constituents' pT contained within 0.1< dR <0.2 (PileUp ID BDT input variable)"", precision= 6) ,
Id_frac03     = Var(""userFloat('puId_frac03')"",float,doc=""fraction of constituents' pT contained within 0.2< dR <0.3 (PileUp ID BDT input variable)"", precision= 6) ,
Id_frac04     = Var(""userFloat('puId_frac04')"",float,doc=""fraction of constituents' pT contained within 0.3< dR <0.4 (PileUp ID BDT input variable)"", precision= 6) ,
Id_ptD        = Var(""userFloat('puId_ptD')"",float,doc=""pT-weighted average pT of constituents (PileUp ID BDT input variable)"", precision= 6) ,
Id_beta       = Var(""userFloat('puId_beta')"",float,doc=""fraction of pT of charged constituents associated to PV (PileUp ID BDT input variable)"", precision= 6) ,
Id_pull       = Var(""userFloat('puId_pull')"",float,doc=""magnitude of pull vector (PileUp ID BDT input variable)"", precision= 6) ,
Id_jetR       = Var(""userFloat('puId_jetR')"",float,doc=""fraction of jet pT carried by the leading constituent (PileUp ID BDT input variable)"", precision= 6) ,
Id_jetRchg    = Var(""userFloat('puId_jetRchg')"",float,doc=""fraction of jet pT carried by the leading charged constituent (PileUp ID BDT input variable)"", precision= 6) ,
Id_nCharged   = Var(""userInt('puId_nCharged')"",int,doc=""number of charged constituents (PileUp ID BDT input variable)""),

ARS = cms.PSet(
l_axis2       =  Var(""userFloat('qgl_axis2')"",float,doc=""ellipse minor jet axis (Quark vs Gluon likelihood input variable)"", precision= 6),
l_ptD         =  Var(""userFloat('qgl_ptD')"",float,doc=""pT-weighted average pT of constituents (Quark vs Gluon likelihood input variable)"", precision= 6),
l_mult        =  Var(""userInt('qgl_mult')"", int,doc=""PF candidates multiplicity (Quark vs Gluon likelihood input variable)""),

VARS = cms.PSet(
agCMVA  = jetTable.variables.btagCMVA,
agDeepB = jetTable.variables.btagDeepB,
agCSVV2 = jetTable.variables.btagCSVV2,
agDeepC = jetTable.variables.btagDeepC,

JETVARS = cms.PSet(
agDeepFlavB   = jetTable.variables.btagDeepFlavB,
agDeepFlavC   = jetTable.variables.btagDeepFlavC,
agDeepFlavG   = Var(""bDiscriminator('pfDeepFlavourJetTags:probg')"",float,doc=""DeepFlavour gluon tag raw score"",precision=10),
agDeepFlavUDS = Var(""bDiscriminator('pfDeepFlavourJetTags:probuds')"",float,doc=""DeepFlavour uds tag raw score"",precision=10)

JETVARS = cms.PSet(P4Vars,
f       = Var(""emEnergyFraction()"", float, doc = ""electromagnetic energy fraction"", precision = 10),

***************************************

co Jets related functions

***************************************
AddJetID(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName=""""):
tup modules to calculate PF jet ID 

PUPPIJet = True if ""Puppi"" in jetName else False

oseJetId = ""looseJetId{}"".format(jetName)
tattr(proc, looseJetId, proc.looseJetId.clone(
  src = jetSrc,
  filterParams=proc.looseJetId.filterParams.clone(
    version =""WINTER16""
  ),

ghtJetId = ""tightJetId{}"".format(jetName)
tattr(proc, tightJetId, proc.tightJetId.clone(
  src = jetSrc,
  filterParams=proc.tightJetId.filterParams.clone(
    version = ""SUMMER18{}"".format(""PUPPI"" if isPUPPIJet else """")
  ),


ghtJetIdLepVeto = ""tightJetIdLepVeto{}"".format(jetName)
tattr(proc, tightJetIdLepVeto, proc.tightJetIdLepVeto.clone(
  src = jetSrc,
  filterParams=proc.tightJetIdLepVeto.filterParams.clone(
    version = ""SUMMER18{}"".format(""PUPPI"" if isPUPPIJet else """")
  ),
)

n2_jme_2016.toModify(getattr(proc, tightJetId) .filterParams,        version = ""WINTER16"" )
n2_jme_2016.toModify(getattr(proc, tightJetIdLepVeto) .filterParams, version = ""WINTER16"" )
n2_jme_2017.toModify(getattr(proc, tightJetId) .filterParams,        version = ""WINTER17{}"".format(""PUPPI"" if isPUPPIJet else """"))
n2_jme_2017.toModify(getattr(proc, tightJetIdLepVeto) .filterParams, version = ""WINTER17{}"".format(""PUPPI"" if isPUPPIJet else """"))


Save variables as userInts in each jet

tJetWithUserData = ""{}WithUserData"".format(jetSrc)
tattr(proc, patJetWithUserData).userInts.tightId = cms.InputTag(tightJetId)
tattr(proc, patJetWithUserData).userInts.tightIdLepVeto = cms.InputTag(tightJetIdLepVeto)
n2_jme_2016.toModify(getattr(proc, patJetWithUserData).userInts, looseId = cms.InputTag(looseJetId))


Specfiy variables in the jetTable to save in NanoAOD

tattr(proc, jetTableName).variables.jetId = Var(""userInt('tightId')*24*userInt('tightIdLepVeto')"",int,doc=""Jet ID flags bit1 is loose (always false in 2017 since it does not exist), bit2 is tight, bit3 is tightLepVeto"")
n2_jme_2016.toModify(getattr(proc, jetTableName).variables, jetId = Var(""userInt('tightIdLepVeto')*4userInt('tightId')*2userInt('looseId')"",int, doc=""Jet ID flags bit1 is loose, bit2 is tight, bit3 is tightLepVeto""))
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, tightJetId))
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, tightJetId))1, getattr(proc, tightJetIdLepVeto))

tattr(proc,""_""jetSequenceName""_2016"", getattr(proc,jetSequenceName).copy())
tattr(proc,""_""jetSequenceName""_2016"").insert(getattr(proc, ""_""jetSequenceName""_2016"").index(getattr(proc, tightJetId)), getattr(proc, looseJetId))
n2_jme_2016.toReplaceWith(getattr(proc,jetSequenceName), getattr(proc, ""_""jetSequenceName""_2016""))
turn proc
AddPileUpJetIDVars(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName=""""):
""
tup modules to calculate pileup jet ID input variables for PF jet
""
Calculate pileup jet ID variables
JetIdVarsCalculator = ""puJetIdCalculator{}"".format(jetName) 
tattr(proc, puJetIdVarsCalculator, pileupJetIdCalculator.clone(
  jets = jetSrc,
  vertexes  = ""offlineSlimmedPrimaryVertices"",
  inputIsCorrected = True,
  applyJec  = False,
  usePuppi = True if ""Puppi"" in jetName else False
)
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, puJetIdVarsCalculator))
JetIDVar = ""puJetIDVar{}"".format(jetName)
tattr(proc, puJetIDVar, cms.EDProducer(""PileupJetIDVarProducer"",
  srcJet = cms.InputTag(jetSrc),    
  srcPileupJetId = cms.InputTag(puJetIdVarsCalculator)
)
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, puJetIdVarsCalculator))1, getattr(proc, puJetIDVar))
Save variables as userFloats and userInts for each jet
tJetWithUserData = ""{}WithUserData"".format(jetSrc)
tattr(proc,patJetWithUserData).userFloats.puId_dR2Mean  = cms.InputTag(""{}:dR2Mean"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_majW     = cms.InputTag(""{}:majW"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_minW     = cms.InputTag(""{}:minW"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac01   = cms.InputTag(""{}:frac01"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac02   = cms.InputTag(""{}:frac02"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac03   = cms.InputTag(""{}:frac03"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac04   = cms.InputTag(""{}:frac04"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_ptD      = cms.InputTag(""{}:ptD"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_beta     = cms.InputTag(""{}:beta"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_pull     = cms.InputTag(""{}:pull"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_jetR     = cms.InputTag(""{}:jetR"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_jetRchg  = cms.InputTag(""{}:jetRchg"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userInts.puId_nCharged   = cms.InputTag(""{}:nCharged"".format(puJetIDVar))
Specfiy variables in the jet table to save in NanoAOD
tattr(proc,jetTableName).variables.puId_dR2Mean  = PUIDVARS.puId_dR2Mean 
tattr(proc,jetTableName).variables.puId_majW     = PUIDVARS.puId_majW    
tattr(proc,jetTableName).variables.puId_minW     = PUIDVARS.puId_minW    
tattr(proc,jetTableName).variables.puId_frac01   = PUIDVARS.puId_frac01  
tattr(proc,jetTableName).variables.puId_frac02   = PUIDVARS.puId_frac02  
tattr(proc,jetTableName).variables.puId_frac03   = PUIDVARS.puId_frac03  
tattr(proc,jetTableName).variables.puId_frac04   = PUIDVARS.puId_frac04  
tattr(proc,jetTableName).variables.puId_ptD      = PUIDVARS.puId_ptD      
tattr(proc,jetTableName).variables.puId_beta     = PUIDVARS.puId_beta    
tattr(proc,jetTableName).variables.puId_pull     = PUIDVARS.puId_pull     
tattr(proc,jetTableName).variables.puId_jetR     = PUIDVARS.puId_jetR    
tattr(proc,jetTableName).variables.puId_jetRchg  = PUIDVARS.puId_jetRchg 
tattr(proc,jetTableName).variables.puId_nCharged = PUIDVARS.puId_nCharged 

turn proc

AddQGLTaggerVars(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName="""", calculateQGLVars=False):
""
hedule the QGTagger module to calculate input variables to the QG likelihood 
""

LTagger=""qgtagger{}"".format(jetName)
tJetWithUserData=""{}WithUserData"".format(jetSrc)

 calculateQGLVars:
setattr(proc, QGLTagger, qgtagger.clone(
    srcJets=jetSrc
  )
)
Save variables as userFloats and userInts for each jet

tattr(proc,patJetWithUserData).userFloats.qgl_axis2 = cms.InputTag(QGLTagger"":axis2"")
tattr(proc,patJetWithUserData).userFloats.qgl_ptD   = cms.InputTag(QGLTagger"":ptD"")
tattr(proc,patJetWithUserData).userInts.qgl_mult    = cms.InputTag(QGLTagger"":mult"")

Specfiy variables in the jet table to save in NanoAOD
tattr(proc,jetTableName).variables.qgl_axis2 =  QGLVARS.qgl_axis2
tattr(proc,jetTableName).variables.qgl_ptD   =  QGLVARS.qgl_ptD
tattr(proc,jetTableName).variables.qgl_mult  =  QGLVARS.qgl_mult

 calculateQGLVars:
getattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, QGLTagger))

turn proc

AddBTaggingScores(proc, jetTableName=""""):
""
ore b-tagging scores from various algortihm
""

tattr(proc, jetTableName).variables.btagCMVA      = jetTable.variables.btagCMVA
tattr(proc, jetTableName).variables.btagDeepB     = jetTable.variables.btagDeepB
tattr(proc, jetTableName).variables.btagCSVV2     = jetTable.variables.btagCSVV2
tattr(proc, jetTableName).variables.btagDeepC     = jetTable.variables.btagDeepC
tattr(proc, jetTableName).variables.btagDeepFlavB = jetTable.variables.btagDeepFlavB
tattr(proc, jetTableName).variables.btagDeepFlavC = jetTable.variables.btagDeepFlavC

turn proc

AddDeepJetGluonLQuarkScores(proc, jetTableName=""""):
""
ore DeepJet raw score in jetTable for gluon and light quark
""

tattr(proc, jetTableName).variables.btagDeepFlavG   = DEEPJETVARS.btagDeepFlavG  
tattr(proc, jetTableName).variables.btagDeepFlavUDS = DEEPJETVARS.btagDeepFlavUDS

turn proc

AddNewPatJets(proc, recoJetInfo, runOnMC):
""
d patJet into custom nanoAOD
""

tName = recoJetInfo.jetUpper
yload = recoJetInfo.jetCorrPayload 
PF    = recoJetInfo.doPF
Calo  = recoJetInfo.doCalo

 recoJetInfo.inputCollection != """":
patJetFinalColl = recoJetInfo.inputCollection
se: 
patJetFinalColl = ""selectedUpdatedPatJets{}Final"".format(jetName)

 doCalo:
patJetFinalColl = ""selectedPatJets{}"".format(jetName)

noInfoForJet = nanoInfo_recojets[recoJetInfo.jet]
tTablePrefix = nanoInfoForJet[""name""]
tTableDoc    = nanoInfoForJet[""doc""]
cut          = nanoInfoForJet[""ptcut""] if ""ptcut"" in nanoInfoForJet else """"
PUIDVar      = nanoInfoForJet[""doPUIDVar""] if ""doPUIDVar"" in nanoInfoForJet else False
QGL          = nanoInfoForJet[""doQGL""] if ""doQGL"" in nanoInfoForJet else False
BTag         = nanoInfoForJet[""doBTag""] if ""doBTag"" in nanoInfoForJet else False

vePatJets(proc, 
jetName, payload, patJetFinalColl, jetTablePrefix, jetTableDoc, doPF, doCalo, 
ptcut=ptcut, doPUIDVar=doPUIDVar, doQGL=doQGL, doBTag=doBTag, runOnMC=runOnMC


turn proc

SavePatJets(proc, jetName, payload, patJetFinalColl, jetTablePrefix, jetTableDoc, 
            doPF, doCalo, ptcut="""", doPUIDVar=False, doQGL=False, doBTag=False, runOnMC=False):
""
hedule modules for a given patJet collection and save its variables into custom NanoAOD
""

Setup jet correction factors
tCorrFactors = ""jetCorrFactorsNano{}"".format(jetName)
tattr(proc, jetCorrFactors, jetCorrFactorsNano.clone(
  src = patJetFinalColl,
  payload = payload,
)


Update jets

cJets = ""updatedJets{}"".format(jetName)
tattr(proc, srcJets, updatedJets.clone(
  jetSource = patJetFinalColl,
  jetCorrFactorsSource=[jetCorrFactors],
)


Setup UserDataEmbedder
cJetsWithUserData = ""updatedJets{}WithUserData"".format(jetName)
tattr(proc, srcJetsWithUserData, cms.EDProducer(""PATJetUserDataEmbedder"",
  src = cms.InputTag(srcJets),
  userFloats = cms.PSet(),    
  userInts = cms.PSet(),
)


Filter jets with pt cut
nalJetsForTable = ""finalJets{}"".format(jetName)
tattr(proc, finalJetsForTable, finalJets.clone(
  src = srcJetsWithUserData,
  cut = ptcut
)


Save jets in table
bleContent = PFJETVARS
 doCalo:
tableContent =  CALOJETVARS

tTable = ""jet{}Table"".format(jetName)
tattr(proc,jetTable, cms.EDProducer(""SimpleCandidateFlatTableProducer"",
  src = cms.InputTag(finalJetsForTable),
  cut = cms.string(""""), # Don't specify cuts here
  name = cms.string(jetTablePrefix),
  doc  = cms.string(jetTableDoc),
  singleton = cms.bool(False), # the number of entries is variable
  extension = cms.bool(False), # this is the main table for the jets
  variables = cms.PSet(tableContent)
)
tattr(proc,jetTable).variables.pt.precision=10


Save MC-only jet variables in table

tMCTable = ""jet{}MCTable"".format(jetName)
tattr(proc, jetMCTable, cms.EDProducer(""SimpleCandidateFlatTableProducer"",
  src = cms.InputTag(finalJetsForTable),
  cut = getattr(proc,jetTable).cut,
  name = cms.string(jetTablePrefix),
  singleton = cms.bool(False),
  extension = cms.bool(True), # this is an extension table
  variables = cms.PSet(
    partonFlavour = Var(""partonFlavour()"", int, doc=""flavour from parton matching""),
    hadronFlavour = Var(""hadronFlavour()"", int, doc=""flavour from hadron ghost clustering""),
    genJetIdx = Var(""?genJetFwdRef().backRef().isNonnull()?genJetFwdRef().backRef().key():-1"", int, doc=""index of matched gen jet""),
  )
)


Define the jet modules sequence first

tSequenceName = ""jet{}Sequence"".format(jetName)
tattr(proc, jetSequenceName, cms.Sequence(
  getattr(proc,jetCorrFactors)
  getattr(proc,srcJets)
  getattr(proc,srcJetsWithUserData)
  getattr(proc,finalJetsForTable)
)


Define the jet table sequences 
tTableSequenceName = ""jet{}TablesSequence"".format(jetName)
tattr(proc, jetTableSequenceName, cms.Sequence(getattr(proc,jetTable)))

tTableSequenceMCName = ""jet{}MCTablesSequence"".format(jetName)
tattr(proc, jetTableSequenceMCName, cms.Sequence(getattr(proc,jetMCTable)))

 runOnMC:
proc.nanoSequenceMC = getattr(proc,jetSequenceName)
proc.nanoSequenceMC = getattr(proc,jetTableSequenceName)
proc.nanoSequenceMC = getattr(proc,jetTableSequenceMCName)
se:
proc.nanoSequence = getattr(proc,jetSequenceName)
proc.nanoSequence = getattr(proc,jetTableSequenceName)


Schedule plugins to calculate Jet ID, PileUp Jet ID input variables, and Quark-Gluon Likehood input variables.

 doPF:
proc = AddJetID(proc, jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName)
if doPUIDVar:
  proc = AddPileUpJetIDVars(proc, jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName)
if doQGL:
  proc = AddQGLTaggerVars(proc,jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName, calculateQGLVars=True)


Save b-tagging algorithm scores. Should only be done for jet collection with b-tagging 
calculated when reclustered or collection saved with b-tagging info in MiniAOD
 doBTag:
AddBTaggingScores(proc,jetTableName=jetTable)
AddDeepJetGluonLQuarkScores(proc,jetTableName=jetTable)

turn proc

ReclusterAK4CHSJets(proc, recoJA, runOnMC):
""
cluster AK4 CHS jets and replace slimmedJets
at is used as default to save AK4 CHS jets 
 NanoAODs.  
""
int(""custom_jme_cff::ReclusterAK4CHSJets: Recluster AK4 PF CHS jets"")


Recluster AK4 CHS jets

g = { 
""jet"" : ""ak4pfchs"",   
""inputCollection"" : """",                 
""genJetsCollection"": ""AK4GenJetsNoNu"",
""bTagDiscriminators"": bTagDiscriminatorsForAK4

coJetInfo = recoJA.addRecoJetCollection(proc, **cfg) 

tName = recoJetInfo.jetUpper
tJetFinalColl = ""selectedUpdatedPatJets{}Final"".format(jetName)


Change the input jet source for jetCorrFactorsNano 
and updatedJets
oc.jetCorrFactorsNano.src=patJetFinalColl
oc.updatedJets.jetSource=patJetFinalColl


Change pt cut

oc.finalJets.cut = ""pt > 2""
oc.simpleCleanerTable.jetSel = ""pt > 10"" # Change this from 15 -> 10 


Add variables 

oc.jetTable.variables.hfHEF         = PFJETVARS.hfHEF
oc.jetTable.variables.hfEmEF        = PFJETVARS.hfEmEF
oc.jetTable.variables.nConstChHads  = PFJETVARS.nConstChHads
oc.jetTable.variables.nConstNeuHads = PFJETVARS.nConstNeuHads
oc.jetTable.variables.nConstHFHads  = PFJETVARS.nConstHFHads
oc.jetTable.variables.nConstHFEMs   = PFJETVARS.nConstHFEMs
oc.jetTable.variables.nConstMuons   = PFJETVARS.nConstMuons
oc.jetTable.variables.nConstElecs   = PFJETVARS.nConstElecs
oc.jetTable.variables.nConstPhotons = PFJETVARS.nConstPhotons

oc.jetTable.doc = cms.string(""AK4 PF CHS Jets with JECs applied, after basic selection (pt > 2)"")


Setup pileup jet ID with 80X training.

pileupJetId80X = ""pileupJetId80X""
setattr(proc, pileupJetId80X, pileupJetId.clone(
    jets=""updatedJets"",
    algos=cms.VPSet(_chsalgos_81x),
    inputIsCorrected=True,
    applyJec=False,
    vertexes=""offlineSlimmedPrimaryVertices""
  )
)
proc.jetSequence.insert(proc.jetSequence.index(proc.pileupJetId94X), getattr(proc, pileupJetId80X)) 

proc.updatedJetsWithUserData.userInts.puId80XfullId = cms.InputTag('pileupJetId80X:fullId')
run2_jme_2016.toModify(proc.updatedJetsWithUserData.userFloats, puId80XDisc = cms.InputTag(""pileupJetId80X:fullDiscriminant""))

proc.jetTable.variables.puId = Var(""userInt('puId80XfullId')"", int, doc=""Pilup ID flags with 80X (2016) training"")
run2_jme_2016.toModify(proc.jetTable.variables, puIdDisc = Var(""userFloat('puId80XDisc')"",float,doc=""Pilup ID discriminant with 80X (2016) training"",precision=10))

oc = AddPileUpJetIDVars(proc, 
jetName="""", 
jetSrc=""updatedJets"", 
jetTableName=""jetTable"",
jetSequenceName=""jetSequence""


Add variables for quark guon likelihood tagger studies.
Save variables as userFloats and userInts in each jet

oc.updatedJetsWithUserData.userFloats.qgl_axis2 = cms.InputTag(""qgtagger:axis2"")
oc.updatedJetsWithUserData.userFloats.qgl_ptD   = cms.InputTag(""qgtagger:ptD"")
oc.updatedJetsWithUserData.userInts.qgl_mult    = cms.InputTag(""qgtagger:mult"")

Specfiy variables in the jetTable to save in NanoAOD

oc.jetTable.variables.qgl_axis2 =  QGLVARS.qgl_axis2
oc.jetTable.variables.qgl_ptD   =  QGLVARS.qgl_ptD
oc.jetTable.variables.qgl_mult  =  QGLVARS.qgl_mult

Save DeepJet raw score for gluon and light quarks

oc.jetTable.variables.btagDeepFlavG   = DEEPJETVARS.btagDeepFlavG  
oc.jetTable.variables.btagDeepFlavUDS = DEEPJETVARS.btagDeepFlavUDS

turn proc

AddVariablesForAK8PuppiJets(proc):
""
d more variables for AK8 PFPUPPI jets
""


 These variables are not stored for AK8PFCHS (slimmedJetsAK8)
 in MiniAOD if their pt < 170 GeV. Hence the conditional fill.

oc.fatJetTable.variables.chHEF  = Var(""?isPFJet()?chargedHadronEnergyFraction():-1"", float, doc=""charged Hadron Energy Fraction"", precision = 6)
oc.fatJetTable.variables.neHEF  = Var(""?isPFJet()?neutralHadronEnergyFraction():-1"", float, doc=""neutral Hadron Energy Fraction"", precision = 6)
oc.fatJetTable.variables.chEmEF = Var(""?isPFJet()?chargedEmEnergyFraction():-1"", float, doc=""charged Electromagnetic Energy Fraction"", precision = 6)
oc.fatJetTable.variables.neEmEF = Var(""?isPFJet()?neutralEmEnergyFraction():-1"", float, doc=""neutral Electromagnetic Energy Fraction"", precision = 6)
oc.fatJetTable.variables.muEF   = Var(""?isPFJet()?muonEnergyFraction():-1"", float, doc=""muon Energy Fraction"", precision = 6)
oc.fatJetTable.variables.hfHEF  = Var(""?isPFJet()?HFHadronEnergyFraction():-1"", float, doc=""energy fraction in forward hadronic calorimeter"", precision = 6)
oc.fatJetTable.variables.hfEmEF = Var(""?isPFJet()?HFEMEnergyFraction():-1"", float, doc=""energy fraction in forward EM calorimeter"", precision = 6)
oc.fatJetTable.variables.nConstChHads   = Var(""?isPFJet()?chargedHadronMultiplicity():-1"",int, doc=""number of charged hadrons in the jet"")
oc.fatJetTable.variables.nConstNeuHads  = Var(""?isPFJet()?neutralHadronMultiplicity():-1"",int, doc=""number of neutral hadrons in the jet"")
oc.fatJetTable.variables.nConstHFHads   = Var(""?isPFJet()?HFHadronMultiplicity():-1"", int, doc=""number of HF Hadrons in the jet"")
oc.fatJetTable.variables.nConstHFEMs    = Var(""?isPFJet()?HFEMMultiplicity():-1"", int, doc=""number of HF EMs in the jet"")
oc.fatJetTable.variables.nConstMuons    = Var(""?isPFJet()?muonMultiplicity():-1"", int, doc=""number of muons in the jet"")
oc.fatJetTable.variables.nConstElecs    = Var(""?isPFJet()?electronMultiplicity():-1"", int, doc=""number of electrons in the jet"")
oc.fatJetTable.variables.nConstPhotons  = Var(""?isPFJet()?photonMultiplicity():-1"", int, doc=""number of photons in the jet"")

turn proc
***************************************


n Jets related functions


***************************************
AddNewGenJets(proc, genJetInfo):
""
d genJet into custom nanoAOD
""

nJetName         = genJetInfo.jetUpper
nJetAlgo         = genJetInfo.jetAlgo
nJetSize         = genJetInfo.jetSize
nJetSizeNr       = genJetInfo.jetSizeNr
nJetFinalColl    = ""{}{}{}"".format(genJetAlgo.upper(), genJetSize, ""GenJetsNoNu"")
nJetTablePrefix  = nanoInfo_genjets[genJetInfo.jet][""name""]
nJetTableDoc     = nanoInfo_genjets[genJetInfo.jet][""doc""]

veGenJets(proc, genJetName, genJetAlgo, genJetSizeNr, genJetFinalColl, genJetTablePrefix, genJetTableDoc, runOnMC=False)

turn proc

SaveGenJets(proc, genJetName, genJetAlgo, genJetSizeNr, genJetFinalColl, genJetTablePrefix, genJetTableDoc, runOnMC=False):
""
hedule modules for a given genJet collection and save its variables into custom NanoAOD
""

nJetTableThisJet = ""jet{}Table"".format(genJetName)
tattr(proc, genJetTableThisJet, genJetTable.clone(
  src       = genJetFinalColl,
  cut       = ""pt > 1"",
  name      = genJetTablePrefix,
  doc       = genJetTableDoc,
  variables = GENJETVARS
)

nJetFlavourAssociationThisJet = ""genJet{}FlavourAssociation"".format(genJetName)
tattr(proc, genJetFlavourAssociationThisJet, genJetFlavourAssociation.clone(
  jets           = getattr(proc,genJetTableThisJet).src,
  jetAlgorithm   = supportedJetAlgos[genJetAlgo],
  rParam         = genJetSizeNr,
)


nJetFlavourTableThisJet = ""genJet{}FlavourTable"".format(genJetName)
tattr(proc, genJetFlavourTableThisJet, genJetFlavourTable.clone(
  name            = getattr(proc,genJetTableThisJet).name,
  src             = getattr(proc,genJetTableThisJet).src,
  cut             = getattr(proc,genJetTableThisJet).cut,
  jetFlavourInfos = genJetFlavourAssociationThisJet,
)


nJetSequenceName = ""genJet{}Sequence"".format(genJetName)
tattr(proc, genJetSequenceName, cms.Sequence(
  getattr(proc,genJetTableThisJet)
  getattr(proc,genJetFlavourAssociationThisJet)
  getattr(proc,genJetFlavourTableThisJet)
)

oc.nanoSequenceMC.insert(proc.nanoSequenceMC.index(proc.jetMC)1, getattr(proc,genJetSequenceName)) 

turn proc

ReclusterAK4GenJets(proc, genJA):
""
cluster AK4 Gen jets and replace 
immedGenJets that is used as default 
 save AK4 Gen jets in NanoAODs. 
""
int(""custom_jme_cff::ReclusterAK4GenJets: Recluster AK4 Gen jets"")
Recluster AK4 Gen jet
g = { 
""jet"" : ""ak4gen"",   

nJetInfo = genJA.addGenJetCollection(proc, **cfg)

nJetName            = genJetInfo.jetUpper
nJetAlgo            = genJetInfo.jetAlgo
nJetSize            = genJetInfo.jetSize
nJetSizeNr          = genJetInfo.jetSizeNr
lectedPatGenJets    = ""{}{}{}"".format(genJetAlgo.upper(), genJetSize, ""GenJetsNoNu"")


Change jet source to the newly clustered jet collection. Set very low pt cut for jets 
to be stored in the GenJet Table

oc.genJetTable.src = selectedPatGenJets
oc.genJetTable.cut = ""pt > 1""
oc.genJetTable.doc  =""AK4 Gen jets (made with visible genparticles)""

nJetFlavourAssociationThisJet = ""genJet{}FlavourAssociation"".format(genJetName)
tattr(proc, genJetFlavourAssociationThisJet, genJetFlavourAssociation.clone(
  jets           = proc.genJetTable.src,
  jetAlgorithm   = supportedJetAlgos[genJetAlgo],
  rParam         = genJetSizeNr,
)

oc.jetMC.insert(proc.jetMC.index(proc.genJetFlavourTable), getattr(proc, genJetFlavourAssociationThisJet)) 
turn proc

AddVariablesForAK4GenJets(proc):
oc.genJetTable.variables.nConstituents = GENJETVARS.nConstituents
turn proc

AddVariablesForAK8GenJets(proc):
oc.genJetAK8Table.variables.nConstituents = GENJETVARS.nConstituents
turn proc

========================================================================

sc. functions

========================================================================
RemoveAllJetPtCuts(proc):
""
move default pt cuts for all jets set in jets_cff.py 
""
oc.finalJets.cut             = """" # 15 -> 10
oc.finalJetsAK8.cut          = """" # 170 -> 170
oc.genJetTable.cut           = """" # 10 -> 8
oc.genJetFlavourTable.cut    = """" # 10 -> 8
oc.genJetAK8Table.cut        = """" # 100 -> 80
oc.genJetAK8FlavourTable.cut = """" # 100 -> 80
turn proc

========================================================================

STOMIZATION function

========================================================================
PrepJMECustomNanoAOD(process,runOnMC):

##########################################################################
Remove all default jet pt cuts from jets_cff.py
##########################################################################
ocess = RemoveAllJetPtCuts(process)

#########################################################################

Gen-level jets related functions. Only for MC.
#########################################################################
nJA = GenJetAdder()
 runOnMC:
############################################################################
# Save additional variables for AK8 GEN jets
############################################################################
process = AddVariablesForAK8GenJets(process)
###########################################################################
# Recluster AK4 GEN jets
###########################################################################
process = ReclusterAK4GenJets(process, genJA)
process = AddVariablesForAK4GenJets(process)
###########################################################################
# Add additional GEN jets to NanoAOD
###########################################################################
for jetConfig in config_genjets:
  cfg = { k : v for k, v in jetConfig.items() if k != ""enabled""}
  genJetInfo = genJA.addGenJetCollection(process, **cfg)
  AddNewGenJets(process, genJetInfo)

#########################################################################
Reco-level jets related functions. For both MC and data.

#########################################################################
#########################################################################
Save additional variables for AK8Puppi jets
#########################################################################
ocess = AddVariablesForAK8PuppiJets(process)
#########################################################################
Recluster AK4 CHS jets and replace ""slimmedJets""
#########################################################################
ocess = ReclusterAK4CHSJets(process, recoJA, runOnMC)
#########################################################################
Add additional Reco jets to NanoAOD
#########################################################################
cfg = { k : v for k, v in jetConfig.items() if k != ""enabled""}
AddNewPatJets(process, recoJetInfo, runOnMC)

turn process
turn process
turn process
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"self.addProcessAndTask(proc, pfCand, puppi.clone(
    candName = self.pfLabel,
"
-------------------------------------------------------------------------
"self.addProcessAndTask(proc, pfCand, puppi.clone(
    candName = self.pfLabel,
    clonePackedCands = True,
    useExistingWeights = True,
"
-------------------------------------------------------------------------
"self.addProcessAndTask(proc, pfCand, puppi.clone(
    candName = self.pfLabel,
    clonePackedCands = True,
    useExistingWeights = True,
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"jetCollection = '{}Collection'.format(jetUpper)
#
# Cluster new jet
#
if recoJetInfo.jetPUMethod == ""chs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCHS.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""puppi"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsPuppi.clone(
      src = self.pfLabel,
      srcWeights = pfCand
    )
  )
elif recoJetInfo.jetPUMethod == ""sk"":
  self.addProcessAndTask(proc, pfCand, ak4PFJetsSK.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""cs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCS.clone(
    src = pfCand,
  )
)
else:
  self.addProcessAndTask(proc, jetCollection, ak4PFJets.clone(
    src = pfCand,
getattr(proc, jetCollection).jetAlgorithm = supportedJetAlgos[recoJetInfo.jetAlgo]
getattr(proc, jetCollection).rParam = recoJetInfo.jetSizeNr

============================================

Make patJet collection

============================================
Jet correction 
"
-------------------------------------------------------------------------
"jetCollection = '{}Collection'.format(jetUpper)
#
# Cluster new jet
#
if recoJetInfo.jetPUMethod == ""chs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCHS.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""puppi"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsPuppi.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""sk"":
  self.addProcessAndTask(proc, pfCand, ak4PFJetsSK.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""cs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCS.clone(
    src = pfCand,
  )
)
else:
  self.addProcessAndTask(proc, jetCollection, ak4PFJets.clone(
    src = pfCand,
getattr(proc, jetCollection).jetAlgorithm = supportedJetAlgos[recoJetInfo.jetAlgo]
getattr(proc, jetCollection).rParam = recoJetInfo.jetSizeNr

============================================

Make patJet collection

============================================
Jet correction 
"
-------------------------------------------------------------------------
"jetCollection = '{}Collection'.format(jetUpper)
#
# Cluster new jet
#
if recoJetInfo.jetPUMethod == ""chs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCHS.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""puppi"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsPuppi.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""sk"":
  self.addProcessAndTask(proc, pfCand, ak4PFJetsSK.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""cs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCS.clone(
    src = pfCand,
  )
)
else:
  self.addProcessAndTask(proc, jetCollection, ak4PFJets.clone(
    src = pfCand,
getattr(proc, jetCollection).jetAlgorithm = supportedJetAlgos[recoJetInfo.jetAlgo]
getattr(proc, jetCollection).rParam = recoJetInfo.jetSizeNr

============================================

Make patJet collection

============================================
Jet correction 
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2018_design'       :  '112X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v3',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v3',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v3',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v3',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v3',
"
-------------------------------------------------------------------------
"'phase1_2018_design'       :  '111X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '111X_upgrade2018_realistic_v2',
'phase1_2018_realistic_hi' :  '111X_upgrade2018_realistic_HI_v1',
'phase1_2018_realistic_HEfail' :  '111X_upgrade2018_realistic_HEfail_v2',
'phase1_2018_cosmics'      :   '111X_upgrade2018cosmics_realistic_deco_v2',
'phase1_2018_cosmics_peak' :   '111X_upgrade2018cosmics_realistic_peak_v2',
"
-------------------------------------------------------------------------
"'phase1_2018_design'       :  '111X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '111X_upgrade2018_realistic_v2',
'phase1_2018_realistic_hi' :  '111X_upgrade2018_realistic_HI_v1',
'phase1_2018_realistic_HEfail' :  '111X_upgrade2018_realistic_HEfail_v2',
'phase1_2018_cosmics'      :   '111X_upgrade2018cosmics_realistic_deco_v2',
'phase1_2018_cosmics_peak' :   '111X_upgrade2018cosmics_realistic_peak_v2',
"
-------------------------------------------------------------------------
"Recom
PRs: 31050, 31119"
-------------------------------------------------------------------------
=========================================================================
"run2_miniAOD_devel.toModify(calibratedEgammaSettings,correctionFile = _correctionFile2017UL)
"
-------------------------------------------------------------------------
"run2_miniAOD_UL.toModify( process.patElectrons, getdBFromTrack = True)
"
-------------------------------------------------------------------------
"run2_miniAOD_UL.toModify( process.patElectrons, getdBFromTrack = True)
"
-------------------------------------------------------------------------
"Recom
PRs: 30199, 31072"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '112X_dataRun2_v3',
'run2_data'         :   '112X_dataRun2_v3',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v3',
'run2_data_relval'  :   '112X_dataRun2_relval_v3',
"
-------------------------------------------------------------------------
"'run1_data'         :   '111X_dataRun2_v4',
'run2_data'         :   '111X_dataRun2_v4',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v4',
'run2_data_relval'  :   '111X_dataRun2_relval_v4',
"
-------------------------------------------------------------------------
"'run1_data'         :   '111X_dataRun2_v4',
'run2_data'         :   '111X_dataRun2_v4',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v4',
'run2_data_relval'  :   '111X_dataRun2_relval_v4',
"
-------------------------------------------------------------------------
"Recom
PRs: 30984, 31017"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v5', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v5', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v5',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v5',
"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '111X_mcRun3_2021_design_v7', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '111X_mcRun3_2021_realistic_v7', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '111X_mcRun3_2021cosmics_realistic_deco_v7',
'phase1_2021_realistic_hi' : '111X_mcRun3_2021_realistic_HI_v9',
"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '111X_mcRun3_2021_design_v7', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '111X_mcRun3_2021_realistic_v7', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '111X_mcRun3_2021cosmics_realistic_deco_v7',
'phase1_2021_realistic_hi' : '111X_mcRun3_2021_realistic_HI_v9',
"
-------------------------------------------------------------------------
"Recom
PRs: 30907, 30993"
-------------------------------------------------------------------------
=========================================================================
"for (int i2 = 0; i2 < 4; i2)
  mvacut_[i0][4][i2] = pt4050[i2];
"
-------------------------------------------------------------------------
"_stdalgos    = _chsalgos_81x
"
-------------------------------------------------------------------------
"_stdalgos    = _chsalgos_81x
"
-------------------------------------------------------------------------
"Recom
PRs: 30773, 30935"
-------------------------------------------------------------------------
=========================================================================
"'hlt_data_GRun' : ['cmsDriver.py RelVal -s L1REPACK:Full --data --scenario=pp -n 10 --conditions auto:run3_hlt_GRun --relval 9000,50 --datatier ""RAW"" --eventcontent RAW --customise=HLTrigger/Configuration/CustomConfigs.L1T --era Run3 --fileout file:RelVal_Raw_GRun_DATA.root --filein /store/data/Run2018D/EphemeralHLTPhysics1/RAW/v1/000/323/775/00000/2E066536-5CF2-B340-A73B-209640F29FF6.root --customise_commands=\'if hasattr(process,""simMuonGEMPadTask""): setattr(process,""simMuonGEMPadTask"",cms.Task())\'',
'hlt_data_PIon' : ['cmsDriver.py RelVal -s L1REPACK:Full --data --scenario=pp -n 10 --conditions auto:run3_hlt_PIon --relval 9000,50 --datatier ""RAW"" --customise=HLTrigger/Configuration/CustomConfigs.L1T --era Run3 --eventcontent RAW --fileout file:RelVal_Raw_PIon_DATA.root --filein /store/data/Run2018D/EphemeralHLTPhysics1/RAW/v1/000/323/775/00000/2E066536-5CF2-B340-A73B-209640F29FF6.root --customise_commands=\'if hasattr(process,""simMuonGEMPadTask""): setattr(process,""simMuonGEMPadTask"",cms.Task())\'',
'hlt_data_PRef' : ['cmsDriver.py RelVal -s L1REPACK:Full --data --scenario=pp -n 10 --conditions auto:run3_hlt_PRef --relval 9000,50 --datatier ""RAW"" --customise=HLTrigger/Configuration/CustomConfigs.L1T --era Run3 --eventcontent RAW --fileout file:RelVal_Raw_PRef_DATA.root --filein /store/data/Run2018D/EphemeralHLTPhysics1/RAW/v1/000/323/775/00000/2E066536-5CF2-B340-A73B-209640F29FF6.root --customise_commands=\'if hasattr(process,""simMuonGEMPadTask""): setattr(process,""simMuonGEMPadTask"",cms.Task())\'',
"
-------------------------------------------------------------------------
"'hlt_mc_2018' : ['cmsDriver.py TTbar_Tauola_13TeV_TuneCUETP8M1_cfi -s GEN,SIM,DIGI,L1,DIGI2RAW --mc --scenario=pp -n 10 --conditions auto:run2_mc_2018 --relval 9000,50 --datatier ""GEN-SIM-RAW"" --eventcontent RAWSIM --customise=HLTrigger/Configuration/CustomConfigs.L1T --era Run2_2018 --fileout file:RelVal_Raw_2018_MC.root',
           'HLTrigger/Configuration/test/OnLine_HLT_2018.py',
           'cmsDriver.py RelVal -s HLT:2018,RAW2DIGI,L1Reco,RECO --mc --scenario=pp -n 10 --conditions auto:run2_mc_2018 --relval 9000,50 --datatier ""RAW-HLT-RECO"" --eventcontent FEVTDEBUGHLT --customise=HLTrigger/Configuration/CustomConfigs.L1THLT --era Run2_2018 --processName=HLTRECO --filein file:RelVal_Raw_2018_MC.root --fileout file:RelVal_Raw_2018_MC_HLT_RECO.root'], 
"
-------------------------------------------------------------------------
"'hlt_mc_2018' : ['cmsDriver.py TTbar_Tauola_13TeV_TuneCUETP8M1_cfi -s GEN,SIM,DIGI,L1,DIGI2RAW --mc --scenario=pp -n 10 --conditions auto:run2_mc_2018 --relval 9000,50 --datatier ""GEN-SIM-RAW"" --eventcontent RAWSIM --customise=HLTrigger/Configuration/CustomConfigs.L1T --era Run2_2018 --fileout file:RelVal_Raw_2018_MC.root',
           'HLTrigger/Configuration/test/OnLine_HLT_2018.py',
           'cmsDriver.py RelVal -s HLT:2018,RAW2DIGI,L1Reco,RECO --mc --scenario=pp -n 10 --conditions auto:run2_mc_2018 --relval 9000,50 --datatier ""RAW-HLT-RECO"" --eventcontent FEVTDEBUGHLT --customise=HLTrigger/Configuration/CustomConfigs.L1THLT --era Run2_2018 --processName=HLTRECO --filein file:RelVal_Raw_2018_MC.root --fileout file:RelVal_Raw_2018_MC_HLT_RECO.root'], 
"
-------------------------------------------------------------------------
"Recom
PRs: 30882, 30884"
-------------------------------------------------------------------------
=========================================================================
"float etaLo = (absie < nEta_ ? towerEtas_[absie - 1] : towerEtas_[absie - 2]);
float etaHi = (absie < nEta_ ? towerEtas_[absie] : towerEtas_[absie - 1]);
"
-------------------------------------------------------------------------
"offset  = cms.vdouble( 1.793,  1.827,  2.363,  2.538,  2.812,  2.642),
scale   = cms.vdouble( 0.138,  0.137,  0.124,  0.115,  0.106,  0.121),
kind    = cms.string('calo'),
"
-------------------------------------------------------------------------
"offset  = cms.vdouble( 1.793,  1.827,  2.363,  2.538,  2.812,  2.642),
scale   = cms.vdouble( 0.138,  0.137,  0.124,  0.115,  0.106,  0.121),
kind    = cms.string('calo'),
"
-------------------------------------------------------------------------
"Recom
PRs: 30736, 30772"
-------------------------------------------------------------------------
=========================================================================
"#lastLumiFile = cms.untracked.string('last_lumi.txt'),
lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),
"
-------------------------------------------------------------------------
"lastLumiFile = cms.untracked.string('last_lumi.txt'),
#lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),
"
-------------------------------------------------------------------------
"lastLumiFile = cms.untracked.string('last_lumi.txt'),
#lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),
"
-------------------------------------------------------------------------
"Recom
PRs: 30690, 30696"
-------------------------------------------------------------------------
=========================================================================
"#lastLumiFile = cms.untracked.string('last_lumi.txt'),
lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),
"
-------------------------------------------------------------------------
"lastLumiFile = cms.untracked.string('last_lumi.txt'),
#lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),
"
-------------------------------------------------------------------------
"lastLumiFile = cms.untracked.string('last_lumi.txt'),
#lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),
"
-------------------------------------------------------------------------
"Recom
PRs: 30690, 30696"
-------------------------------------------------------------------------
=========================================================================
"} else {
  n_sorted.emplace_back(
      i, -1, -btagbtvdeep::mindrsvpfcand(svs_unsorted, cand, jet_radius_), cand->pt() / jet.pt());
  n_indexes.push_back(i);
ort collections in added order of priority
:sort(n_sorted.begin(), n_sorted.end(), btagbtvdeep::SortingClass<std::size_t>::compareByABCInv);
:vector<size_t> c_sortedindices, n_sortedindices;
rtedindices = btagbtvdeep::invertSortingVector(n_sorted);
ures.n_pf_features.clear();
ures.n_pf_features.resize(n_sorted.size());
if (cand->pt() < min_candidate_pt_)
auto packed_cand = dynamic_cast<const pat::PackedCandidate*>(cand);
auto reco_cand = dynamic_cast<const reco::PFCandidate*>(cand);

// need some edm::Ptr or edm::Ref if reco candidates
reco::PFCandidatePtr reco_ptr;
if (pf_jet) {
  reco_ptr = pf_jet->getPFConstituent(i);
} else if (pat_jet && reco_cand) {
  reco_ptr = pat_jet->getPFConstituent(i);
}
"
-------------------------------------------------------------------------
"} else {
    n_sorted.emplace_back(i, -1, -btagbtvdeep::mindrsvpfcand(svs_unsorted, cand, jet_radius_), cand->pt() / jet.pt());
    n_indexes.push_back(i);
collections in added order of priority
t(c_sorted.begin(), c_sorted.end(), btagbtvdeep::SortingClass<std::size_t>::compareByABCInv);
t(n_sorted.begin(), n_sorted.end(), btagbtvdeep::SortingClass<std::size_t>::compareByABCInv);
tor<size_t> c_sortedindices, n_sortedindices;
indices = btagbtvdeep::invertSortingVector(n_sorted);
.n_pf_features.clear();
.n_pf_features.resize(n_sorted.size());
"
-------------------------------------------------------------------------
"} else {
    n_sorted.emplace_back(i, -1, -btagbtvdeep::mindrsvpfcand(svs_unsorted, cand, jet_radius_), cand->pt() / jet.pt());
    n_indexes.push_back(i);
collections in added order of priority
t(c_sorted.begin(), c_sorted.end(), btagbtvdeep::SortingClass<std::size_t>::compareByABCInv);
t(n_sorted.begin(), n_sorted.end(), btagbtvdeep::SortingClass<std::size_t>::compareByABCInv);
tor<size_t> c_sortedindices, n_sortedindices;
indices = btagbtvdeep::invertSortingVector(n_sorted);
.n_pf_features.clear();
.n_pf_features.resize(n_sorted.size());
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v2',
'phase1_2021_realistic_hi' :  '112X_mcRun3_2021_realistic_HI_v2',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v2', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '110X_mcRun3_2021_design_v8', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '110X_mcRun3_2021_realistic_v10', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '110X_mcRun3_2021cosmics_realistic_deco_v7',
'phase1_2023_realistic'    : '110X_mcRun3_2023_realistic_v10', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '110X_mcRun3_2024_realistic_v10', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '110X_mcRun3_2021_design_v8', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '110X_mcRun3_2021_realistic_v10', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '110X_mcRun3_2021cosmics_realistic_deco_v7',
'phase1_2023_realistic'    : '110X_mcRun3_2023_realistic_v10', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '110X_mcRun3_2024_realistic_v10', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"Recom
PRs: 30221, 30300"
-------------------------------------------------------------------------
=========================================================================
"'run2_mc_pre_vfp'   :   '111X_mcRun2_asymptotic_preVFP_v1',
'run2_mc'           :   '111X_mcRun2_asymptotic_v1',
'run2_mc_cosmics'   :   '111X_mcRun2cosmics_startup_deco_v1',
"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '106X_mcRun2_asymptotic_preVFP_v8',
'run2_mc'           :   '106X_mcRun2_asymptotic_v13',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_startup_deco_v7',
"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '106X_mcRun2_asymptotic_preVFP_v8',
'run2_mc'           :   '106X_mcRun2_asymptotic_v13',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_startup_deco_v7',
"
-------------------------------------------------------------------------
"Recom
PRs: 30151, 30287"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v2',
'phase1_2021_realistic_hi' :  '112X_mcRun3_2021_realistic_HI_v2',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v2', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '111X_mcRun3_2021_design_v6', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '111X_mcRun3_2021_realistic_v6', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '111X_mcRun3_2021cosmics_realistic_deco_v6',
'phase1_2021_realistic_hi' : '111X_mcRun3_2021_realistic_HI_v7',
'phase1_2023_realistic'    : '111X_mcRun3_2023_realistic_v6', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '111X_mcRun3_2024_realistic_v6', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '111X_mcRun3_2021_design_v6', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '111X_mcRun3_2021_realistic_v6', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '111X_mcRun3_2021cosmics_realistic_deco_v6',
'phase1_2021_realistic_hi' : '111X_mcRun3_2021_realistic_HI_v7',
'phase1_2023_realistic'    : '111X_mcRun3_2023_realistic_v6', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '111X_mcRun3_2024_realistic_v6', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"Recom
PRs: 30221, 30267"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v1', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v1', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v1',
'phase1_2021_realistic_hi' :  '112X_mcRun3_2021_realistic_HI_v1',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v1', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v1', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '111X_mcRun3_2021_design_v5', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '111X_mcRun3_2021_realistic_v5', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '111X_mcRun3_2021cosmics_realistic_deco_v5',
'phase1_2021_realistic_hi' :  '111X_mcRun3_2021_realistic_HI_v6',
'phase1_2023_realistic'    : '111X_mcRun3_2023_realistic_v5', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '111X_mcRun3_2024_realistic_v5', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '111X_mcRun3_2021_design_v5', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '111X_mcRun3_2021_realistic_v5', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '111X_mcRun3_2021cosmics_realistic_deco_v5',
'phase1_2021_realistic_hi' :  '111X_mcRun3_2021_realistic_HI_v6',
'phase1_2023_realistic'    : '111X_mcRun3_2023_realistic_v5', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '111X_mcRun3_2024_realistic_v5', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"Recom
PRs: 30195, 30233"
-------------------------------------------------------------------------
=========================================================================
"'run2_mc_pre_vfp'   :   '111X_mcRun2_asymptotic_preVFP_v1',
'run2_mc'           :   '111X_mcRun2_asymptotic_v1',
'run2_mc_cosmics'   :   '111X_mcRun2cosmics_startup_deco_v1',
"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '110X_mcRun2_asymptotic_preVFP_v7',
'run2_mc'           :   '110X_mcRun2_asymptotic_v9',
'run2_mc_cosmics'   :   '110X_mcRun2cosmics_startup_deco_v8',
"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '110X_mcRun2_asymptotic_preVFP_v7',
'run2_mc'           :   '110X_mcRun2_asymptotic_v9',
'run2_mc_cosmics'   :   '110X_mcRun2cosmics_startup_deco_v8',
"
-------------------------------------------------------------------------
"Recom
PRs: 30151, 30203"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v3',
'run2_data'         :   '111X_dataRun2_v3',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v3',
'run2_data_relval'  :   '111X_dataRun2_relval_v3',
"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v28',
'run2_data'         :   '106X_dataRun2_v28',
'run2_data_relval'  :   '106X_dataRun2_relval_v26',
"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v28',
'run2_data'         :   '106X_dataRun2_v28',
'run2_data_relval'  :   '106X_dataRun2_relval_v26',
"
-------------------------------------------------------------------------
"Recom
PRs: 29629, 30132"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v3',
'run2_data'         :   '111X_dataRun2_v3',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v3',
'run2_data_relval'  :   '111X_dataRun2_relval_v3',
"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v13',
'run2_data'         :   '110X_dataRun2_v13',
'run2_data_relval'  :   '110X_dataRun2_relval_v13',
"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v13',
'run2_data'         :   '110X_dataRun2_v13',
'run2_data_relval'  :   '110X_dataRun2_relval_v13',
"
-------------------------------------------------------------------------
"Recom
PRs: 29629, 30131"
-------------------------------------------------------------------------
=========================================================================
"trainingVariables_102X_Eta0To3 = [
"
-------------------------------------------------------------------------
"run2_miniAOD_devel.toModify(pileupJetId, algos = _chsalgos_102x)
"
-------------------------------------------------------------------------
"run2_miniAOD_devel.toModify(pileupJetId, algos = _chsalgos_102x)
"
-------------------------------------------------------------------------
"Recom
PRs: 28984, 29376"
-------------------------------------------------------------------------
=========================================================================
"void LumiProducerFromBrilcalc::produce(edm::StreamID iStreamID,
edm::Event& iEvent,
const edm::EventSetup& iSetup) const {
"
-------------------------------------------------------------------------
"iEvent.getByToken(lumiToken_, lumi);
"
-------------------------------------------------------------------------
"iEvent.getByToken(lumiToken_, lumi);
"
-------------------------------------------------------------------------
"Recom
PRs: 29271, 29322"
-------------------------------------------------------------------------
=========================================================================
"trainingVariables_102X_Eta0To3 = [
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_run2_miniAOD_devel_cff import run2_miniAOD_devel
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_run2_miniAOD_devel_cff import run2_miniAOD_devel
"
-------------------------------------------------------------------------
"Recom
PRs: 28984, 29045"
-------------------------------------------------------------------------
=========================================================================
"trainingVariables_102X_Eta3To5 = list(trainingVariables_102X_Eta0To3)
trainingVariables_102X_Eta3To5.remove('beta')
trainingVariables_102X_Eta3To5.remove('jetRchg')
trainingVariables_102X_Eta3To5.remove('nCharged')

full_102x_chs.trainings[0].tmvaVariables = trainingVariables_102X_Eta0To3
full_102x_chs.trainings[1].tmvaVariables = trainingVariables_102X_Eta0To3
full_102x_chs.trainings[2].tmvaVariables = trainingVariables_102X_Eta0To3
full_102x_chs.trainings[3].tmvaVariables = trainingVariables_102X_Eta3To5
trainingVariables_94X_Eta0To3 = list(trainingVariables_102X_Eta0To3)
trainingVariables_94X_Eta3To5 = list(trainingVariables_102X_Eta3To5)
full_94x_chs.trainings[0].tmvaVariables = trainingVariables_94X_Eta0To3
full_94x_chs.trainings[1].tmvaVariables = trainingVariables_94X_Eta0To3
full_94x_chs.trainings[2].tmvaVariables = trainingVariables_94X_Eta0To3
full_94x_chs.trainings[3].tmvaVariables = trainingVariables_94X_Eta3To5
"
-------------------------------------------------------------------------
"run2_miniAOD_devel.toReplaceWith(_stdalgos, _chsalgos_102x)
"
-------------------------------------------------------------------------
"run2_miniAOD_devel.toReplaceWith(_stdalgos, _chsalgos_102x)
"
-------------------------------------------------------------------------
"Recom
PRs: 28984, 29045"
-------------------------------------------------------------------------
=========================================================================
"trainingVariables_102X_Eta0To3 = [
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_run2_miniAOD_devel_cff import run2_miniAOD_devel
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_run2_miniAOD_devel_cff import run2_miniAOD_devel
"
-------------------------------------------------------------------------
"Recom
PRs: 28984, 29044"
-------------------------------------------------------------------------
=========================================================================
"trainingVariables_102X_Eta3To5 = list(trainingVariables_102X_Eta0To3)
trainingVariables_102X_Eta3To5.remove('beta')
trainingVariables_102X_Eta3To5.remove('jetRchg')
trainingVariables_102X_Eta3To5.remove('nCharged')

full_102x_chs.trainings[0].tmvaVariables = trainingVariables_102X_Eta0To3
full_102x_chs.trainings[1].tmvaVariables = trainingVariables_102X_Eta0To3
full_102x_chs.trainings[2].tmvaVariables = trainingVariables_102X_Eta0To3
full_102x_chs.trainings[3].tmvaVariables = trainingVariables_102X_Eta3To5
trainingVariables_94X_Eta0To3 = list(trainingVariables_102X_Eta0To3)
trainingVariables_94X_Eta3To5 = list(trainingVariables_102X_Eta3To5)
full_94x_chs.trainings[0].tmvaVariables = trainingVariables_94X_Eta0To3
full_94x_chs.trainings[1].tmvaVariables = trainingVariables_94X_Eta0To3
full_94x_chs.trainings[2].tmvaVariables = trainingVariables_94X_Eta0To3
full_94x_chs.trainings[3].tmvaVariables = trainingVariables_94X_Eta3To5
"
-------------------------------------------------------------------------
"run2_miniAOD_devel.toReplaceWith(_stdalgos, _chsalgos_102x)
"
-------------------------------------------------------------------------
"run2_miniAOD_devel.toReplaceWith(_stdalgos, _chsalgos_102x)
"
-------------------------------------------------------------------------
"Recom
PRs: 28984, 29044"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v2',
'run2_data'         :   '111X_dataRun2_v2',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v2',
'run2_data_relval'  :   '111X_dataRun2_relval_v2',
"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v27',
'run2_data'         :   '106X_dataRun2_v27',
'run2_data_relval'  :   '106X_dataRun2_relval_v25',
"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v27',
'run2_data'         :   '106X_dataRun2_v27',
'run2_data_relval'  :   '106X_dataRun2_relval_v25',
"
-------------------------------------------------------------------------
"Recom
PRs: 29023, 29029"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v2',
'run2_data'         :   '111X_dataRun2_v2',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v2',
'run2_data_relval'  :   '111X_dataRun2_relval_v2',
"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v12',
'run2_data'         :   '110X_dataRun2_v12',
'run2_data_relval'  :   '110X_dataRun2_relval_v12',
"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v12',
'run2_data'         :   '110X_dataRun2_v12',
'run2_data_relval'  :   '110X_dataRun2_relval_v12',
"
-------------------------------------------------------------------------
"Recom
PRs: 29023, 29028"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v1',
'run2_data'         :   '111X_dataRun2_v1',
'run2_data_HEfail' : '111X_dataRun2_HEfail_v1',
'run2_data_relval'  :   '111X_dataRun2_relval_v1',
"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v26',
'run2_data'         :   '106X_dataRun2_v26',
'run2_data_relval'  :   '106X_dataRun2_relval_v24',
"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v26',
'run2_data'         :   '106X_dataRun2_v26',
'run2_data_relval'  :   '106X_dataRun2_relval_v24',
"
-------------------------------------------------------------------------
"Recom
PRs: 28981, 28990"
-------------------------------------------------------------------------
=========================================================================
"'run2_mc_pre_vfp'   :   '110X_mcRun2_asymptotic_preVFP_v3',
"
-------------------------------------------------------------------------
"'run2_design'       :   '106X_mcRun2_design_v7',
'run2_mc_pre_vfp'           :   '106X_mcRun2_asymptotic_preVFP_v3',
'run2_mc'           :   '106X_mcRun2_asymptotic_v9',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_startup_deco_v6',
"
-------------------------------------------------------------------------
"'run2_design'       :   '106X_mcRun2_design_v7',
'run2_mc_pre_vfp'           :   '106X_mcRun2_asymptotic_preVFP_v3',
'run2_mc'           :   '106X_mcRun2_asymptotic_v9',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_startup_deco_v6',
"
-------------------------------------------------------------------------
"Recom
PRs: 28624, 28989"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v1',
'run2_data'         :   '111X_dataRun2_v1',
'run2_data_HEfail' : '111X_dataRun2_HEfail_v1',
'run2_data_relval'  :   '111X_dataRun2_relval_v1',
"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v11',
'run2_data'         :   '110X_dataRun2_v11',
'run2_data_relval'  :   '110X_dataRun2_relval_v11',
"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v11',
'run2_data'         :   '110X_dataRun2_v11',
'run2_data_relval'  :   '110X_dataRun2_relval_v11',
"
-------------------------------------------------------------------------
"Recom
PRs: 28981, 28982"
-------------------------------------------------------------------------
=========================================================================
"for ps in process.cscSegments.algo_psets[4].algo_psets: ps.enlarge = True   
return process
"
-------------------------------------------------------------------------
"for ps in process.cscSegments.algo_psets[4].algo_psets: ps.enlarge = True

"
-------------------------------------------------------------------------
"for ps in process.cscSegments.algo_psets[4].algo_psets: ps.enlarge = True

"
-------------------------------------------------------------------------
"Recom
PRs: 28979, 28953"
-------------------------------------------------------------------------
=========================================================================
"Photospp::Photos::createHistoryEntries(true, 746);  // P-H-O
"
-------------------------------------------------------------------------
"src = cms.InputTag(""generator:unsmeared""),
"
-------------------------------------------------------------------------
"src = cms.InputTag(""generator:unsmeared""),
"
-------------------------------------------------------------------------
"Recom
PRs: 28785, 28817"
-------------------------------------------------------------------------
=========================================================================
"desc.add<double>(""PtMaxPhotons"", -1.);
"
-------------------------------------------------------------------------
"EtaMaxCharged   = cms.double(99999.),
"
-------------------------------------------------------------------------
"EtaMaxCharged   = cms.double(99999.),
"
-------------------------------------------------------------------------
"Recom
PRs: 28735, 28736"
-------------------------------------------------------------------------
=========================================================================
"import HLTrigger.HLTfilters.hltHighLevel_cfi
ALCARECOSiPixelCalCosmicsHLTFilter = HLTrigger.HLTfilters.hltHighLevel_cfi.hltHighLevel.clone(
andOr = True, ## choose logical OR between Triggerbits
# eventually this needs to sterred via Global Tag in AlCaRecoTriggerBits
eventSetupPathsKey = '',
throw = False # tolerate triggers stated above, but not available
rt Alignment.CommonAlignmentProducer.AlignmentTrackSelector_cfi
RECOSiPixelCalCosmics =  Alignment.CommonAlignmentProducer.AlignmentTrackSelector_cfi.AlignmentTrackSelector.clone(
"
-------------------------------------------------------------------------
"steps['RECODR2_2016reHLT_skimSingleMu']=merge([{'-s':'RAW2DIGI,L1Reco,RECO,SKIM:ZMuMuTau,EI,PAT,ALCA:SiPixelCalSingleMuonSiStripCalZeroBiasSiStripCalMinBiasTkAlMinBiasEcalESAlign,DQM:@standardDQM@ExtraHLT@miniAODDQM@L1TMuon'},steps['RECODR2_2016reHLT']])
steps['RECODR2_2016reHLT_skimMuonEG']=merge([{'-s':'RAW2DIGI,L1Reco,RECO,SKIM:TopMuEG,EI,PAT,ALCA:SiPixelCalSingleMuonSiStripCalZeroBiasSiStripCalMinBiasTkAlMinBiasEcalESAlign,DQM:@standardDQM@ExtraHLT@miniAODDQM'},steps['RECODR2_2016reHLT']])
steps['RECODR2_2017reHLT_skimSingleMu']=merge([{'-s':'RAW2DIGI,L1Reco,RECO,SKIM:MuonPOGSkimZMuMuTau,EI,PAT,ALCA:SiPixelCalSingleMuonSiStripCalZeroBiasSiStripCalMinBiasTkAlMinBiasEcalESAlign,DQM:@standardDQM@ExtraHLT@miniAODDQM@L1TMuon'},steps['RECODR2_2017reHLT']])
"
-------------------------------------------------------------------------
"steps['RECODR2_2016reHLT_skimSingleMu']=merge([{'-s':'RAW2DIGI,L1Reco,RECO,SKIM:ZMuMuTau,EI,PAT,ALCA:SiPixelCalSingleMuonSiStripCalZeroBiasSiStripCalMinBiasTkAlMinBiasEcalESAlign,DQM:@standardDQM@ExtraHLT@miniAODDQM@L1TMuon'},steps['RECODR2_2016reHLT']])
steps['RECODR2_2016reHLT_skimMuonEG']=merge([{'-s':'RAW2DIGI,L1Reco,RECO,SKIM:TopMuEG,EI,PAT,ALCA:SiPixelCalSingleMuonSiStripCalZeroBiasSiStripCalMinBiasTkAlMinBiasEcalESAlign,DQM:@standardDQM@ExtraHLT@miniAODDQM'},steps['RECODR2_2016reHLT']])
steps['RECODR2_2017reHLT_skimSingleMu']=merge([{'-s':'RAW2DIGI,L1Reco,RECO,SKIM:MuonPOGSkimZMuMuTau,EI,PAT,ALCA:SiPixelCalSingleMuonSiStripCalZeroBiasSiStripCalMinBiasTkAlMinBiasEcalESAlign,DQM:@standardDQM@ExtraHLT@miniAODDQM@L1TMuon'},steps['RECODR2_2017reHLT']])
"
-------------------------------------------------------------------------
"Recom
PRs: 28574, 28731"
-------------------------------------------------------------------------
=========================================================================
"'Cosmics'        : 'SiPixelCalCosmicsTkAlCosmics0TMuAlGlobalCosmicsHcalCalHOCosmicsDtCalibCosmics',
"
-------------------------------------------------------------------------
"import HLTrigger.HLTfilters.hltHighLevel_cfi
ALCARECOSiPixelCalCosmicsHLTFilter = HLTrigger.HLTfilters.hltHighLevel_cfi.hltHighLevel.clone(
andOr = True, ## choose logical OR between Triggerbits
# eventually this needs to sterred via Global Tag in AlCaRecoTriggerBits
eventSetupPathsKey = '',
throw = False # tolerate triggers stated above, but not available
rt Alignment.CommonAlignmentProducer.AlignmentTrackSelector_cfi
RECOSiPixelCalCosmics =  Alignment.CommonAlignmentProducer.AlignmentTrackSelector_cfi.AlignmentTrackSelector.clone(
"
-------------------------------------------------------------------------
"import HLTrigger.HLTfilters.hltHighLevel_cfi
ALCARECOSiPixelCalCosmicsHLTFilter = HLTrigger.HLTfilters.hltHighLevel_cfi.hltHighLevel.clone(
andOr = True, ## choose logical OR between Triggerbits
# eventually this needs to sterred via Global Tag in AlCaRecoTriggerBits
eventSetupPathsKey = '',
throw = False # tolerate triggers stated above, but not available
rt Alignment.CommonAlignmentProducer.AlignmentTrackSelector_cfi
RECOSiPixelCalCosmics =  Alignment.CommonAlignmentProducer.AlignmentTrackSelector_cfi.AlignmentTrackSelector.clone(
"
-------------------------------------------------------------------------
"Recom
PRs: 28535, 28574"
-------------------------------------------------------------------------
=========================================================================
"# Fixed Emittance (X2) in Beam spot extracted from data for 2017 pp run @ 5 TeV
Fixed_EmitRealistic5TeVppCollision2017VtxSmearingParameters = cms.PSet(
Phi = cms.double(0.0),
BetaStar = cms.double(311),
Emittance = cms.double(7.6e-8),
Alpha = cms.double(0.0),
SigmaZ = cms.double(5.82),
TimeOffset = cms.double(0.0),
X0 = cms.double(-0.0228),
Y0 = cms.double(0.0795),
Z0 = cms.double(0.619)



"
-------------------------------------------------------------------------
"# Fixed Emittance (X2) in Beam spot extracted from data for 2017 pp run @ 5 TeV
Fixed_EmitRealistic5TeVppCollision2017VtxSmearingParameters = cms.PSet(
Phi = cms.double(0.0),
BetaStar = cms.double(311),
Emittance = cms.double(7.6e-8),
Alpha = cms.double(0.0),
SigmaZ = cms.double(5.82),
TimeOffset = cms.double(0.0),
X0 = cms.double(-0.0228),
Y0 = cms.double(0.0795),
Z0 = cms.double(0.619)




"
-------------------------------------------------------------------------
"# Fixed Emittance (X2) in Beam spot extracted from data for 2017 pp run @ 5 TeV
Fixed_EmitRealistic5TeVppCollision2017VtxSmearingParameters = cms.PSet(
Phi = cms.double(0.0),
BetaStar = cms.double(311),
Emittance = cms.double(7.6e-8),
Alpha = cms.double(0.0),
SigmaZ = cms.double(5.82),
TimeOffset = cms.double(0.0),
X0 = cms.double(-0.0228),
Y0 = cms.double(0.0795),
Z0 = cms.double(0.619)




"
-------------------------------------------------------------------------
"Recom
PRs: 28580, 28573"
-------------------------------------------------------------------------
=========================================================================
"fastSim.toReplaceWith(trackingGlobalRecoTask, cms.Task(doAlldEdXEstimatorsTask, trackExtrapolator))
"
-------------------------------------------------------------------------
"fastSim.toReplaceWith(trackingGlobalReco,cms.Sequence(doAlldEdXEstimators*trackExtrapolator))
"
-------------------------------------------------------------------------
"fastSim.toReplaceWith(trackingGlobalReco,cms.Sequence(doAlldEdXEstimators*trackExtrapolator))
"
-------------------------------------------------------------------------
"Recom
PRs: 28257, 28259"
-------------------------------------------------------------------------
=========================================================================
"fastSim.toReplaceWith(doAlldEdXEstimatorsTask, cms.Task(dedxHarmonic2, dedxPixelHarmonic2))
"
-------------------------------------------------------------------------
"fastSim.toReplaceWith(doAlldEdXEstimators, cms.Sequence(dedxHarmonic2  dedxPixelHarmonic2))
"
-------------------------------------------------------------------------
"fastSim.toReplaceWith(doAlldEdXEstimators, cms.Sequence(dedxHarmonic2  dedxPixelHarmonic2))
"
-------------------------------------------------------------------------
"Recom
PRs: 28257, 28259"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Eras.Modifier_run2_tau_ul_2018_cff import run2_tau_ul_2018
Run3 = cms.ModifierChain(Run2_2018.copyAndExclude([run2_GEM_2017,run2_egamma_2018,run2_tau_ul_2018]), run3_common, run3_GEM, run3_HB)
"
-------------------------------------------------------------------------
"for era in [run2_miniAOD_devel,run2_tau_ul_2016,run2_tau_ul_2018]:
era.toModify(tauTable,
             variables = cms.PSet(_variablesMiniV2,_deepTauVars2017v2p1)
)
era in [run2_nanoAOD_94X2016,run2_nanoAOD_94XMiniAODv2,run2_nanoAOD_102Xv1]:
era.toModify(tauTable,
             variables = _variablesMiniV2
)
"
-------------------------------------------------------------------------
"for era in [run2_miniAOD_devel,run2_tau_ul_2016,run2_tau_ul_2018]:
era.toModify(tauTable,
             variables = cms.PSet(_variablesMiniV2,_deepTauVars2017v2p1)
)
era in [run2_nanoAOD_94X2016,run2_nanoAOD_94XMiniAODv2,run2_nanoAOD_102Xv1]:
era.toModify(tauTable,
             variables = _variablesMiniV2
)
"
-------------------------------------------------------------------------
"Recom
PRs: 27882, 28046"
-------------------------------------------------------------------------
=========================================================================
"'run2_data_promptlike_HEfail' : '110X_dataRun2_PromptLike_HEfail_v5',
'run2_data_promptlike'    : '110X_dataRun2_PromptLike_v5',
'run2_data_promptlike_hi' : '110X_dataRun2_PromptLike_HI_v5',
"
-------------------------------------------------------------------------
"'phase1_2018_realistic'    :  '106X_upgrade2018_realistic_v8',
'phase1_2018_realistic_HEfail' :  '106X_upgrade2018_realistic_HEfail_v8',
"
-------------------------------------------------------------------------
"'phase1_2018_realistic'    :  '106X_upgrade2018_realistic_v8',
'phase1_2018_realistic_HEfail' :  '106X_upgrade2018_realistic_HEfail_v8',
"
-------------------------------------------------------------------------
"Recom
PRs: 27923, 27934"
-------------------------------------------------------------------------
=========================================================================
"Plot1D('idDeepTau2017v2p1VSe', 'idDeepTau2017v2p1VSe', 256, -0.5, 255.5, 'byDeepTau2017v2p1VSe ID working points (deepTau2017v2p1): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight'),
Plot1D('idDeepTau2017v2p1VSmu', 'idDeepTau2017v2p1VSmu', 16, -0.5, 15.5, 'byDeepTau2017v2p1VSmu ID working points (deepTau2017v2p1): bitmask 1 = VLoose, 2 = Loose, 4 = Medium, 8 = Tight'),
Plot1D('idDeepTau2017v2p1VSjet', 'idDeepTau2017v2p1VSjet', 256, -0.5, 255.5, 'byDeepTau2017v2p1VSjet ID working points (deepTau2017v2p1): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight'),
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_run2_tau_ul_2018_cff import run2_tau_ul_2018
Run3 = cms.ModifierChain(Run2_2018.copyAndExclude([run2_GEM_2017,run2_egamma_2018,run2_tau_ul_2018]), run3_common, run3_GEM, run3_HB)
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_run2_tau_ul_2018_cff import run2_tau_ul_2018
Run3 = cms.ModifierChain(Run2_2018.copyAndExclude([run2_GEM_2017,run2_egamma_2018,run2_tau_ul_2018]), run3_common, run3_GEM, run3_HB)
"
-------------------------------------------------------------------------
"Recom
PRs: 27878, 27882"
-------------------------------------------------------------------------
=========================================================================
"Plot1D('idDeepTau2017v2p1VSe', 'idDeepTau2017v2p1VSe', 256, -0.5, 255.5, 'byDeepTau2017v2p1VSe ID working points (deepTau2017v2p1): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight'),
Plot1D('idDeepTau2017v2p1VSmu', 'idDeepTau2017v2p1VSmu', 16, -0.5, 15.5, 'byDeepTau2017v2p1VSmu ID working points (deepTau2017v2p1): bitmask 1 = VLoose, 2 = Loose, 4 = Medium, 8 = Tight'),
Plot1D('idDeepTau2017v2p1VSjet', 'idDeepTau2017v2p1VSjet', 256, -0.5, 255.5, 'byDeepTau2017v2p1VSjet ID working points (deepTau2017v2p1): bitmask 1 = VVVLoose, 2 = VVLoose, 4 = VLoose, 8 = Loose, 16 = Medium, 32 = Tight, 64 = VTight, 128 = VVTight'),
"
-------------------------------------------------------------------------
"""deepTau2017v2p1"",
"
-------------------------------------------------------------------------
"""deepTau2017v2p1"",
"
-------------------------------------------------------------------------
"Recom
PRs: 27878, 27879"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '110X_dataRun2_v4',
'run2_data'         :   '110X_dataRun2_v4',
'run2_data_relval'  :   '110X_dataRun2_relval_v4',
"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v20',
'run2_data'         :   '106X_dataRun2_v20',
'run2_data_relval'  :   '106X_dataRun2_relval_v19',
"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v20',
'run2_data'         :   '106X_dataRun2_v20',
'run2_data_relval'  :   '106X_dataRun2_relval_v19',
"
-------------------------------------------------------------------------
"Recom
PRs: 27733, 27734"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '110X_dataRun2_v5',
'run2_data'         :   '110X_dataRun2_v5',
'run2_data_relval'  :   '110X_dataRun2_relval_v5',
'run2_data_promptlike_HEfail' : '110X_dataRun2_PromptLike_HEfail_v3',
'run2_data_promptlike'    : '110X_dataRun2_PromptLike_v3',
'run2_data_promptlike_hi' : '110X_dataRun2_PromptLike_HI_v3',
"
-------------------------------------------------------------------------
"'phase1_2021_realistic'    : '106X_upgrade2021_realistic_v9', # GT containing realistic conditions for Phase1 2021
"
-------------------------------------------------------------------------
"'phase1_2021_realistic'    : '106X_upgrade2021_realistic_v9', # GT containing realistic conditions for Phase1 2021
"
-------------------------------------------------------------------------
"Recom
PRs: 27644, 27651"
-------------------------------------------------------------------------
=========================================================================
"if (rechit.getOOTIndex() != CTPPSDiamondRecHit::TIMESLICE_WITHOUT_LEADING && rechit.getOOTIndex() >= 0 &&
    potPlots_[detId_pot].pixelTomographyAll.count(rechit.getOOTIndex()) > 0 &&
"
-------------------------------------------------------------------------
"ctppsDQM = cms.Sequence()
ctppsDQMElastic = cms.Sequence()
_ctppsDQM = ctppsDQM.copy()
_ctppsDQMElastic = ctppsDQMElastic.copy()

_ctppsDQM = cms.Sequence(
"
-------------------------------------------------------------------------
"ctppsDQM = cms.Sequence()
ctppsDQMElastic = cms.Sequence()
_ctppsDQM = ctppsDQM.copy()
_ctppsDQMElastic = ctppsDQMElastic.copy()

_ctppsDQM = cms.Sequence(
"
-------------------------------------------------------------------------
"Recom
PRs: 27591, 27620"
-------------------------------------------------------------------------
=========================================================================
"'run2_design'       :   '110X_mcRun2_design_v2',
'run2_mc'           :   '110X_mcRun2_asymptotic_v2',
'run2_mc_cosmics'   :   '110X_mcRun2cosmics_startup_deco_v2',
'run2_mc_pa'        :   '110X_mcRun2_pA_v2',
"
-------------------------------------------------------------------------
"'run2_design'       :   '106X_mcRun2_design_v6',
'run2_mc'           :   '106X_mcRun2_asymptotic_v6',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_startup_deco_v3',
'run2_mc_pa'        :   '106X_mcRun2_pA_v5',
"
-------------------------------------------------------------------------
"'run2_design'       :   '106X_mcRun2_design_v6',
'run2_mc'           :   '106X_mcRun2_asymptotic_v6',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_startup_deco_v3',
'run2_mc_pa'        :   '106X_mcRun2_pA_v5',
"
-------------------------------------------------------------------------
"Recom
PRs: 27600, 27606"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '110X_dataRun2_v2',
'run2_data'         :   '110X_dataRun2_v2',
'run2_data_relval'  :   '110X_dataRun2_relval_v2',
"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v18',
'run2_data'         :   '106X_dataRun2_v18',
'run2_data_relval'  :   '106X_dataRun2_relval_v17',
"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v18',
'run2_data'         :   '106X_dataRun2_v18',
'run2_data_relval'  :   '106X_dataRun2_relval_v17',
"
-------------------------------------------------------------------------
"Recom
PRs: 27604, 27605"
-------------------------------------------------------------------------
=========================================================================
"('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'event deallocated'),
"
-------------------------------------------------------------------------
"# This might throw when another thread pops the last filename immediately after this one
_summary_html(output_dir, pr_list, summary_dir):
 result.replace('$PR_LIST$', pr_list)
"
-------------------------------------------------------------------------
"# This might throw when another thread pops the last filename immediately after this one
_summary_html(output_dir, pr_list, summary_dir):
 result.replace('$PR_LIST$', pr_list)
"
-------------------------------------------------------------------------
"Recom
PRs: 26737, 26929"
-------------------------------------------------------------------------
=========================================================================
"('DQMData', 'Run %s' % RUN_NR, 'DQM', 'Run summary', 'TimerService', 'process RECO deallocated'),
"
-------------------------------------------------------------------------
"parser.add_argument('-n', '--pr-number', help='This is obsolete and should NOT be used.', required=False)
parser.add_argument('-l', '--pr-list', help='A list of PRs participating in the comparison', default='')

# Get the repository and a number of the PR which triggered the comparison
pr_number = args.pr_list.split(' ')[0].split('/')[1].replace('#', '_')

collect_and_compare_files(args.base_dir, args.pr_dir, args.output_dir, args.nprocs, pr_number, args.test_number, args.release_format)
generate_summary_html(args.output_dir, args.pr_list, args.summary_dir)
"
-------------------------------------------------------------------------
"parser.add_argument('-n', '--pr-number', help='This is obsolete and should NOT be used.', required=False)
parser.add_argument('-l', '--pr-list', help='A list of PRs participating in the comparison', default='')

# Get the repository and a number of the PR which triggered the comparison
pr_number = args.pr_list.split(' ')[0].split('/')[1].replace('#', '_')

collect_and_compare_files(args.base_dir, args.pr_dir, args.output_dir, args.nprocs, pr_number, args.test_number, args.release_format)
generate_summary_html(args.output_dir, args.pr_list, args.summary_dir)
"
-------------------------------------------------------------------------
"Recom
PRs: 26737, 26929"
-------------------------------------------------------------------------
=========================================================================
"iobc_.reset(new HepMC::IO_GenEvent(dumpEvents, ios::out));
"
-------------------------------------------------------------------------
"step1LHEGenDQM = merge([{'-s':'LHE,GEN,VALIDATION:genvalid','--datatier'    : 'GEN-SIM,LHE,DQMIO','--eventcontent': 'LHE,RAWSIM,DQM'},step1GenDefaults])
"
-------------------------------------------------------------------------
"step1LHEGenDQM = merge([{'-s':'LHE,GEN,VALIDATION:genvalid','--datatier'    : 'GEN-SIM,LHE,DQMIO','--eventcontent': 'LHE,RAWSIM,DQM'},step1GenDefaults])
"
-------------------------------------------------------------------------
"Recom
PRs: 26905, 26910"
-------------------------------------------------------------------------
=========================================================================
"TTrigger::TTrigger(const std::vector<std::string> &muonTriggerNames, const std::vector<std::string> &muonTriggerObjectNames) { 
"
-------------------------------------------------------------------------
"run2_HLTconditions_2016.toReplaceWith(topMonitorHLT, topMonitorHLT_2016)
"
-------------------------------------------------------------------------
"run2_HLTconditions_2016.toReplaceWith(topMonitorHLT, topMonitorHLT_2016)
"
-------------------------------------------------------------------------
"Recom
PRs: 26355, 26861"
-------------------------------------------------------------------------
=========================================================================
"mvaName = cms.string(""RecoTauTag_tauIdMVAIsoDBnewDMwLT2017v2""),
mvaOpt = cms.string(""DBnewDMwLTwGJ""),
"
-------------------------------------------------------------------------
"_makePatTausTaskWithRetrainedMVATauID.add(process.hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLTTask,
                                          process.hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLTTask,
                                          process.hpsPFTauIsolationSums03Task,
                                          process.hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLTTask)
"
-------------------------------------------------------------------------
"_makePatTausTaskWithRetrainedMVATauID.add(process.hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLTTask,
                                          process.hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLTTask,
                                          process.hpsPFTauIsolationSums03Task,
                                          process.hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLTTask)
"
-------------------------------------------------------------------------
"Recom
PRs: 26541, 26859"
-------------------------------------------------------------------------
=========================================================================
"for modifier in run2_nanoAOD_94XMiniAODv1,run2_nanoAOD_94XMiniAODv2,run2_nanoAOD_94X2016:
run2_nanoAOD_102Xv1.toModify(calibratedPatElectrons102X, src = ""slimmedElectronsTo106X"")
"
-------------------------------------------------------------------------
"workflows[136.8521] = ['',['RunJetHT2018A_nano','NANOEDM2018_102Xv1','HARVESTNANOAOD2018_102Xv1']]
"
-------------------------------------------------------------------------
"workflows[136.8521] = ['',['RunJetHT2018A_nano','NANOEDM2018_102Xv1','HARVESTNANOAOD2018_102Xv1']]
"
-------------------------------------------------------------------------
"Recom
PRs: 26844, 26854"
-------------------------------------------------------------------------
=========================================================================
"modifier.toModify(calibratedPatPhotons102Xv1, src = ""slimmedPhotonsTo106X"")
"
-------------------------------------------------------------------------
"steps['NANOEDM2018_102Xv1'] = merge([ {'--era': 'Run2_2018,run2_nanoAOD_102Xv1'}, steps['NANOEDM2018'] ])
"
-------------------------------------------------------------------------
"steps['NANOEDM2018_102Xv1'] = merge([ {'--era': 'Run2_2018,run2_nanoAOD_102Xv1'}, steps['NANOEDM2018'] ])
"
-------------------------------------------------------------------------
"Recom
PRs: 26844, 26854"
-------------------------------------------------------------------------
=========================================================================
"qualityCuts = [-0.2, 0.0, 0.98],
"
-------------------------------------------------------------------------
"pp_on_AA_2018.toModify(pixelPairStep, qualityCuts = [-0.2, 0.0, 0.98])
"
-------------------------------------------------------------------------
"pp_on_AA_2018.toModify(pixelPairStep, qualityCuts = [-0.2, 0.0, 0.98])
"
-------------------------------------------------------------------------
"Recom
PRs: 26217, 26216"
-------------------------------------------------------------------------
=========================================================================
"descriptions.add(""lowPtGsfLinksDefault"", desc);
"
-------------------------------------------------------------------------
"from PhysicsTools.PatAlgos.lowPtGsfLinksDefault_cfi import *
lowPtGsfLinks = lowPtGsfLinksDefault.clone()
"
-------------------------------------------------------------------------
"from PhysicsTools.PatAlgos.lowPtGsfLinksDefault_cfi import *
lowPtGsfLinks = lowPtGsfLinksDefault.clone()
"
-------------------------------------------------------------------------
"Recom
PRs: 26031, 26036"
-------------------------------------------------------------------------
=========================================================================
"""--pileup_input"" : ""dbs:/RelValFS_PREMIXUP18_PU50/%s/PREMIX""%(baseDataSetRelease[20],),
"
-------------------------------------------------------------------------
"""-s"":""GEN,SIM,RECOBEFMIX,DIGI,L1,DIGI2RAW"",
""--datatier"":""GEN-SIM-DIGI-RAW"",
"
-------------------------------------------------------------------------
"""-s"":""GEN,SIM,RECOBEFMIX,DIGI,L1,DIGI2RAW"",
""--datatier"":""GEN-SIM-DIGI-RAW"",
"
-------------------------------------------------------------------------
"Recom
PRs: 25683, 25754"
-------------------------------------------------------------------------
=========================================================================
"if ( !mvaOutputNormalizationName_.empty() ) {
"
-------------------------------------------------------------------------
"if ""againstEle2018"" in self.toKeep:
    antiElectronDiscrMVA6_version = ""MVA6v3_noeveto""
    ### Define new anti-e discriminants
    ## Raw
    from RecoTauTag.RecoTau.PATTauDiscriminationAgainstElectronMVA6_cfi import patTauDiscriminationAgainstElectronMVA6
    self.process.patTauDiscriminationByElectronRejectionMVA62018Raw = patTauDiscriminationAgainstElectronMVA6.clone(
        Prediscriminants = noPrediscriminants, #already selected for MiniAOD
        vetoEcalCracks = self.cms.bool(False), #keep taus in EB-EE cracks
        mvaName_NoEleMatch_wGwoGSF_BL = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_BL',
        mvaName_NoEleMatch_wGwoGSF_EC = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_EC',
        mvaName_NoEleMatch_woGwoGSF_BL = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_BL',
        mvaName_NoEleMatch_woGwoGSF_EC = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_EC',
        mvaName_wGwGSF_BL = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_BL',
        mvaName_wGwGSF_EC = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_EC',
        mvaName_woGwGSF_BL = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_BL',
        mvaName_woGwGSF_EC = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_EC'
    )
    ## WPs
    from RecoTauTag.RecoTau.PATTauDiscriminantCutMultiplexer_cfi import patTauDiscriminantCutMultiplexer
    # VLoose
    self.process.patTauDiscriminationByVLooseElectronRejectionMVA62018 = patTauDiscriminantCutMultiplexer.clone(
        PATTauProducer = self.process.patTauDiscriminationByElectronRejectionMVA62018Raw.PATTauProducer,
        Prediscriminants = self.process.patTauDiscriminationByElectronRejectionMVA62018Raw.Prediscriminants,
        toMultiplex = self.cms.InputTag(""patTauDiscriminationByElectronRejectionMVA62018Raw""),
        key = self.cms.InputTag(""patTauDiscriminationByElectronRejectionMVA62018Raw"",""category""),
        mapping = self.cms.VPSet(
            self.cms.PSet(
                category = self.cms.uint32(0),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_BL_WPeff98'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(2),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_BL_WPeff98'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(5),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_BL_WPeff98'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(7),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_BL_WPeff98'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(8),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_EC_WPeff98'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(10),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_EC_WPeff98'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(13),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_EC_WPeff98'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(15),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_EC_WPeff98'),
                variable = self.cms.string('pt')
            )
        )
    )
    # Loose
    self.process.patTauDiscriminationByLooseElectronRejectionMVA62018 = self.process.patTauDiscriminationByVLooseElectronRejectionMVA62018.clone(
        mapping = self.cms.VPSet(
            self.cms.PSet(
                category = self.cms.uint32(0),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_BL_WPeff90'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(2),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_BL_WPeff90'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(5),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_BL_WPeff90'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(7),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_BL_WPeff90'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(8),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_EC_WPeff90'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(10),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_EC_WPeff90'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(13),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_EC_WPeff90'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(15),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_EC_WPeff90'),
                variable = self.cms.string('pt')
            )
        )
    )
    # Medium
    self.process.patTauDiscriminationByMediumElectronRejectionMVA62018 = self.process.patTauDiscriminationByVLooseElectronRejectionMVA62018.clone(
        mapping = self.cms.VPSet(
            self.cms.PSet(
                category = self.cms.uint32(0),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_BL_WPeff80'),
                variable = self.cms.string('pt')
             ),
            self.cms.PSet(
                category = self.cms.uint32(2),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_BL_WPeff80'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(5),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_BL_WPeff80'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(7),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_BL_WPeff80'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(8),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_EC_WPeff80'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(10),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_EC_WPeff80'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(13),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_EC_WPeff80'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(15),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_EC_WPeff80'),
                variable = self.cms.string('pt')
            )
        )
    )
    # Tight
    self.process.patTauDiscriminationByTightElectronRejectionMVA62018 = self.process.patTauDiscriminationByVLooseElectronRejectionMVA62018.clone(
        mapping = self.cms.VPSet(
            self.cms.PSet(
                category = self.cms.uint32(0),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_BL_WPeff70'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(2),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_BL_WPeff70'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(5),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_BL_WPeff70'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(7),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_BL_WPeff70'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(8),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_EC_WPeff70'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(10),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_EC_WPeff70'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(13),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_EC_WPeff70'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(15),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_EC_WPeff70'),
                variable = self.cms.string('pt')
            )
        )
    )
    # VTight
    self.process.patTauDiscriminationByVTightElectronRejectionMVA62018 = self.process.patTauDiscriminationByVLooseElectronRejectionMVA62018.clone(
        mapping = self.cms.VPSet(
            self.cms.PSet(
                category = self.cms.uint32(0),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_BL_WPeff60'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(2),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_BL_WPeff60'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(5),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_BL_WPeff60'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(7),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_BL_WPeff60'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(8),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_EC_WPeff60'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(10),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_EC_WPeff60'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(13),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_EC_WPeff60'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(15),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_EC_WPeff60'),
                variable = self.cms.string('pt')
            )
        )
    )
    ### Put all new anti-e discrminats to a sequence
    self.process.patTauDiscriminationByElectronRejectionMVA62018Task = self.cms.Task(
        self.process.patTauDiscriminationByElectronRejectionMVA62018Raw,
        self.process.patTauDiscriminationByVLooseElectronRejectionMVA62018,
        self.process.patTauDiscriminationByLooseElectronRejectionMVA62018,
        self.process.patTauDiscriminationByMediumElectronRejectionMVA62018,
        self.process.patTauDiscriminationByTightElectronRejectionMVA62018,
        self.process.patTauDiscriminationByVTightElectronRejectionMVA62018
    )
    self.process.patTauDiscriminationByElectronRejectionMVA62018Seq = self.cms.Sequence(self.process.patTauDiscriminationByElectronRejectionMVA62018Task)
    self.process.rerunMvaIsolationTask.add(self.process.patTauDiscriminationByElectronRejectionMVA62018Task)
    self.process.rerunMvaIsolationSequence = self.process.patTauDiscriminationByElectronRejectionMVA62018Seq

    _againstElectronTauIDSources = self.cms.PSet(
        againstElectronMVA6Raw2018 = self.cms.InputTag(""patTauDiscriminationByElectronRejectionMVA62018Raw""),
        againstElectronMVA6category2018 = self.cms.InputTag(""patTauDiscriminationByElectronRejectionMVA62018Raw"",""category""),
        againstElectronVLooseMVA62018 = self.cms.InputTag(""patTauDiscriminationByVLooseElectronRejectionMVA62018""),
        againstElectronLooseMVA62018 = self.cms.InputTag(""patTauDiscriminationByLooseElectronRejectionMVA62018""),
        againstElectronMediumMVA62018 = self.cms.InputTag(""patTauDiscriminationByMediumElectronRejectionMVA62018""),
        againstElectronTightMVA62018 = self.cms.InputTag(""patTauDiscriminationByTightElectronRejectionMVA62018""),
        againstElectronVTightMVA62018 = self.cms.InputTag(""patTauDiscriminationByVTightElectronRejectionMVA62018"")
    )
    _tauIDSourcesWithAgainistEle = self.cms.PSet(
        tauIDSources.clone(),
        _againstElectronTauIDSources
    )
    tauIDSources =_tauIDSourcesWithAgainistEle.clone()

##
"
-------------------------------------------------------------------------
"if ""againstEle2018"" in self.toKeep:
    antiElectronDiscrMVA6_version = ""MVA6v3_noeveto""
    ### Define new anti-e discriminants
    ## Raw
    from RecoTauTag.RecoTau.PATTauDiscriminationAgainstElectronMVA6_cfi import patTauDiscriminationAgainstElectronMVA6
    self.process.patTauDiscriminationByElectronRejectionMVA62018Raw = patTauDiscriminationAgainstElectronMVA6.clone(
        Prediscriminants = noPrediscriminants, #already selected for MiniAOD
        vetoEcalCracks = self.cms.bool(False), #keep taus in EB-EE cracks
        mvaName_NoEleMatch_wGwoGSF_BL = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_BL',
        mvaName_NoEleMatch_wGwoGSF_EC = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_EC',
        mvaName_NoEleMatch_woGwoGSF_BL = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_BL',
        mvaName_NoEleMatch_woGwoGSF_EC = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_EC',
        mvaName_wGwGSF_BL = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_BL',
        mvaName_wGwGSF_EC = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_EC',
        mvaName_woGwGSF_BL = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_BL',
        mvaName_woGwGSF_EC = 'RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_EC'
    )
    ## WPs
    from RecoTauTag.RecoTau.PATTauDiscriminantCutMultiplexer_cfi import patTauDiscriminantCutMultiplexer
    # VLoose
    self.process.patTauDiscriminationByVLooseElectronRejectionMVA62018 = patTauDiscriminantCutMultiplexer.clone(
        PATTauProducer = self.process.patTauDiscriminationByElectronRejectionMVA62018Raw.PATTauProducer,
        Prediscriminants = self.process.patTauDiscriminationByElectronRejectionMVA62018Raw.Prediscriminants,
        toMultiplex = self.cms.InputTag(""patTauDiscriminationByElectronRejectionMVA62018Raw""),
        key = self.cms.InputTag(""patTauDiscriminationByElectronRejectionMVA62018Raw"",""category""),
        mapping = self.cms.VPSet(
            self.cms.PSet(
                category = self.cms.uint32(0),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_BL_WPeff98'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(2),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_BL_WPeff98'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(5),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_BL_WPeff98'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(7),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_BL_WPeff98'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(8),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_EC_WPeff98'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(10),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_EC_WPeff98'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(13),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_EC_WPeff98'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(15),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_EC_WPeff98'),
                variable = self.cms.string('pt')
            )
        )
    )
    # Loose
    self.process.patTauDiscriminationByLooseElectronRejectionMVA62018 = self.process.patTauDiscriminationByVLooseElectronRejectionMVA62018.clone(
        mapping = self.cms.VPSet(
            self.cms.PSet(
                category = self.cms.uint32(0),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_BL_WPeff90'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(2),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_BL_WPeff90'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(5),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_BL_WPeff90'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(7),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_BL_WPeff90'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(8),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_EC_WPeff90'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(10),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_EC_WPeff90'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(13),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_EC_WPeff90'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(15),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_EC_WPeff90'),
                variable = self.cms.string('pt')
            )
        )
    )
    # Medium
    self.process.patTauDiscriminationByMediumElectronRejectionMVA62018 = self.process.patTauDiscriminationByVLooseElectronRejectionMVA62018.clone(
        mapping = self.cms.VPSet(
            self.cms.PSet(
                category = self.cms.uint32(0),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_BL_WPeff80'),
                variable = self.cms.string('pt')
             ),
            self.cms.PSet(
                category = self.cms.uint32(2),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_BL_WPeff80'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(5),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_BL_WPeff80'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(7),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_BL_WPeff80'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(8),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_EC_WPeff80'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(10),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_EC_WPeff80'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(13),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_EC_WPeff80'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(15),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_EC_WPeff80'),
                variable = self.cms.string('pt')
            )
        )
    )
    # Tight
    self.process.patTauDiscriminationByTightElectronRejectionMVA62018 = self.process.patTauDiscriminationByVLooseElectronRejectionMVA62018.clone(
        mapping = self.cms.VPSet(
            self.cms.PSet(
                category = self.cms.uint32(0),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_BL_WPeff70'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(2),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_BL_WPeff70'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(5),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_BL_WPeff70'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(7),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_BL_WPeff70'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(8),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_EC_WPeff70'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(10),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_EC_WPeff70'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(13),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_EC_WPeff70'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(15),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_EC_WPeff70'),
                variable = self.cms.string('pt')
            )
        )
    )
    # VTight
    self.process.patTauDiscriminationByVTightElectronRejectionMVA62018 = self.process.patTauDiscriminationByVLooseElectronRejectionMVA62018.clone(
        mapping = self.cms.VPSet(
            self.cms.PSet(
                category = self.cms.uint32(0),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_BL_WPeff60'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(2),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_BL_WPeff60'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(5),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_BL_WPeff60'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(7),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_BL_WPeff60'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(8),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_woGwoGSF_EC_WPeff60'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(10),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_NoEleMatch_wGwoGSF_EC_WPeff60'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(13),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_woGwGSF_EC_WPeff60'),
                variable = self.cms.string('pt')
            ),
            self.cms.PSet(
                category = self.cms.uint32(15),
                cut = self.cms.string('RecoTauTag_antiElectron'antiElectronDiscrMVA6_version'_gbr_wGwGSF_EC_WPeff60'),
                variable = self.cms.string('pt')
            )
        )
    )
    ### Put all new anti-e discrminats to a sequence
    self.process.patTauDiscriminationByElectronRejectionMVA62018Task = self.cms.Task(
        self.process.patTauDiscriminationByElectronRejectionMVA62018Raw,
        self.process.patTauDiscriminationByVLooseElectronRejectionMVA62018,
        self.process.patTauDiscriminationByLooseElectronRejectionMVA62018,
        self.process.patTauDiscriminationByMediumElectronRejectionMVA62018,
        self.process.patTauDiscriminationByTightElectronRejectionMVA62018,
        self.process.patTauDiscriminationByVTightElectronRejectionMVA62018
    )
    self.process.patTauDiscriminationByElectronRejectionMVA62018Seq = self.cms.Sequence(self.process.patTauDiscriminationByElectronRejectionMVA62018Task)
    self.process.rerunMvaIsolationTask.add(self.process.patTauDiscriminationByElectronRejectionMVA62018Task)
    self.process.rerunMvaIsolationSequence = self.process.patTauDiscriminationByElectronRejectionMVA62018Seq

    _againstElectronTauIDSources = self.cms.PSet(
        againstElectronMVA6Raw2018 = self.cms.InputTag(""patTauDiscriminationByElectronRejectionMVA62018Raw""),
        againstElectronMVA6category2018 = self.cms.InputTag(""patTauDiscriminationByElectronRejectionMVA62018Raw"",""category""),
        againstElectronVLooseMVA62018 = self.cms.InputTag(""patTauDiscriminationByVLooseElectronRejectionMVA62018""),
        againstElectronLooseMVA62018 = self.cms.InputTag(""patTauDiscriminationByLooseElectronRejectionMVA62018""),
        againstElectronMediumMVA62018 = self.cms.InputTag(""patTauDiscriminationByMediumElectronRejectionMVA62018""),
        againstElectronTightMVA62018 = self.cms.InputTag(""patTauDiscriminationByTightElectronRejectionMVA62018""),
        againstElectronVTightMVA62018 = self.cms.InputTag(""patTauDiscriminationByVTightElectronRejectionMVA62018"")
    )
    _tauIDSourcesWithAgainistEle = self.cms.PSet(
        tauIDSources.clone(),
        _againstElectronTauIDSources
    )
    tauIDSources =_tauIDSourcesWithAgainistEle.clone()

##
"
-------------------------------------------------------------------------
"Recom
PRs: 25486, 25488"
-------------------------------------------------------------------------
=========================================================================
"if ( !mvaOutputNormalizationName_.empty() ) {
"
-------------------------------------------------------------------------
"from Configuration.AlCa.GlobalTag import GlobalTag
process.GlobalTag = GlobalTag(process.GlobalTag, 'auto:phase1_2017_realistic', '')
"
-------------------------------------------------------------------------
"from Configuration.AlCa.GlobalTag import GlobalTag
process.GlobalTag = GlobalTag(process.GlobalTag, 'auto:phase1_2017_realistic', '')
"
-------------------------------------------------------------------------
"Recom
PRs: 25486, 25488"
-------------------------------------------------------------------------
=========================================================================
"872437052,872420649,872421950,872437185,
872422564,872421566,872421695,872421955,
872421567,872437184,872421951,872421694,
872437056,872437057,872437313])
"
-------------------------------------------------------------------------
"(run2_nanoAOD_94XMiniAODv1 | run2_nanoAOD_94XMiniAODv2 | run2_nanoAOD_102Xv1).toModify(ecalBadCalibFilter, EcalRecHitSource = 'reducedEgamma:reducedEERecHits')
"
-------------------------------------------------------------------------
"(run2_nanoAOD_94XMiniAODv1 | run2_nanoAOD_94XMiniAODv2 | run2_nanoAOD_102Xv1).toModify(ecalBadCalibFilter, EcalRecHitSource = 'reducedEgamma:reducedEERecHits')
"
-------------------------------------------------------------------------
"Recom
PRs: 25436, 25459"
-------------------------------------------------------------------------
=========================================================================
"

"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
pp_on_AA_2018.toModify(_entry, outputCommands = _entry.outputCommands  ['keep FEDRawDataCollection_rawDataRepacker_*_*'])
"
-------------------------------------------------------------------------
"from Configuration.Eras.Modifier_pp_on_AA_2018_cff import pp_on_AA_2018
pp_on_AA_2018.toModify(_entry, outputCommands = _entry.outputCommands  ['keep FEDRawDataCollection_rawDataRepacker_*_*'])
"
-------------------------------------------------------------------------
"Recom
PRs: 25178, 25181"
-------------------------------------------------------------------------
=========================================================================
"theLayerDets);
"
-------------------------------------------------------------------------
"""PixelQuadrupletEDProducer"": ""none"",
"
-------------------------------------------------------------------------
"""PixelQuadrupletEDProducer"": ""none"",
"
-------------------------------------------------------------------------
"Recom
PRs: 24624, 24798"
-------------------------------------------------------------------------
=========================================================================
"# GlobalTag for Run2 data 2018B relvals only: HEM-15-16 fail
'run2_data_promptlike_HEfail' : '103X_dataRun2_PromptLike_HEfail_v3',
"
-------------------------------------------------------------------------
"# GlobalTag for Run2 data 2018B relvals only: HEM-15-16 fail
'run2_data_promptlike_HEfail' : '102X_dataRun2_PromptLike_HEfail_v1',
"
-------------------------------------------------------------------------
"# GlobalTag for Run2 data 2018B relvals only: HEM-15-16 fail
'run2_data_promptlike_HEfail' : '102X_dataRun2_PromptLike_HEfail_v1',
"
-------------------------------------------------------------------------
"Recom
PRs: 24493, 24550"
-------------------------------------------------------------------------
=========================================================================
"# GlobalTag for MC production with realistic conditions for full Phase1 2018 detector: HEM-15-16 fail
'phase1_2018_realistic_HEfail'    : '103X_upgrade2018_realistic_HEfail_v1',
"
-------------------------------------------------------------------------
"# GlobalTag for MC production with realistic conditions for full Phase1 2018 detector: HEM-15-16 fail
'phase1_2018_realistic_HEfail'    : '102X_upgrade2018_realistic_v12HEfail_v1',
"
-------------------------------------------------------------------------
"# GlobalTag for MC production with realistic conditions for full Phase1 2018 detector: HEM-15-16 fail
'phase1_2018_realistic_HEfail'    : '102X_upgrade2018_realistic_v12HEfail_v1',
"
-------------------------------------------------------------------------
"Recom
PRs: 24493, 24550"
-------------------------------------------------------------------------
=========================================================================
"double absL2muonEta=std::abs(L2muonEta);
"
-------------------------------------------------------------------------
"/**
\class    TSGForOIFromL2
\brief    Create L3MuonTrajectorySeeds from L2 Muons updated at vertex in an outside-in manner
\author   Benjamin Radburn-Smith, Santiago Folgueras, Bibhuprasad Mahakud, Jan Frederik Schulte (Purdue University, West Lafayette, USA)
/

nclude ""RecoMuon/TrackerSeedGenerator/plugins/TSGForOIFromL2.h""
nclude ""DataFormats/TrackerCommon/interface/TrackerTopology.h""
nclude ""DataFormats/Math/interface/deltaR.h""

nclude <memory>


GForOIFromL2::TSGForOIFromL2(const edm::ParameterSet & iConfig) :
src_(consumes<reco::TrackCollection>(iConfig.getParameter<edm::InputTag>(""src""))),
maxSeeds_(iConfig.getParameter<uint32_t>(""maxSeeds"")),
maxHitlessSeeds_(iConfig.getParameter<uint32_t>(""maxHitlessSeeds"")),
maxHitSeeds_(iConfig.getParameter<uint32_t>(""maxHitSeeds"")),
numOfLayersToTry_(iConfig.getParameter<int32_t>(""layersToTry"")),
numOfHitsToTry_(iConfig.getParameter<int32_t>(""hitsToTry"")),
numL2ValidHitsCutAllEta_(iConfig.getParameter<uint32_t>(""numL2ValidHitsCutAllEta"")),
numL2ValidHitsCutAllEndcap_(iConfig.getParameter<uint32_t>(""numL2ValidHitsCutAllEndcap"")),  
fixedErrorRescalingForHits_(iConfig.getParameter<double>(""fixedErrorRescaleFactorForHits"")),
fixedErrorRescalingForHitless_(iConfig.getParameter<double>(""fixedErrorRescaleFactorForHitless"")),
adjustErrorsDynamicallyForHits_(iConfig.getParameter<bool>(""adjustErrorsDynamicallyForHits"")),
adjustErrorsDynamicallyForHitless_(iConfig.getParameter<bool>(""adjustErrorsDynamicallyForHitless"")),
estimatorName_(iConfig.getParameter<std::string>(""estimator"")),
minEtaForTEC_(iConfig.getParameter<double>(""minEtaForTEC"")),
maxEtaForTOB_(iConfig.getParameter<double>(""maxEtaForTOB"")),
useHitLessSeeds_(iConfig.getParameter<bool>(""UseHitLessSeeds"")),
updator_(new KFUpdator()), measurementTrackerTag_(consumes<MeasurementTrackerEvent>(iConfig.getParameter<edm::InputTag>(""MeasurementTrackerEvent""))),
pT1_(iConfig.getParameter<double>(""pT1"")),
pT2_(iConfig.getParameter<double>(""pT2"")),
pT3_(iConfig.getParameter<double>(""pT3"")),
eta1_(iConfig.getParameter<double>(""eta1"")),
eta2_(iConfig.getParameter<double>(""eta2"")),
eta3_(iConfig.getParameter<double>(""eta3"")),
eta4_(iConfig.getParameter<double>(""eta4"")),
eta5_(iConfig.getParameter<double>(""eta5"")),
eta6_(iConfig.getParameter<double>(""eta6"")),
eta7_(iConfig.getParameter<double>(""eta7"")),
SF1_(iConfig.getParameter<double>(""SF1"")),
SF2_(iConfig.getParameter<double>(""SF2"")),
SF3_(iConfig.getParameter<double>(""SF3"")),
SF4_(iConfig.getParameter<double>(""SF4"")),
SF5_(iConfig.getParameter<double>(""SF5"")),
SF6_(iConfig.getParameter<double>(""SF6"")),
tsosDiff1_(iConfig.getParameter<double>(""tsosDiff1"")),
tsosDiff2_(iConfig.getParameter<double>(""tsosDiff2"")),
propagatorName_(iConfig.getParameter<std::string>(""propagatorName"")), 
theCategory_(std::string(""Muon|RecoMuon|TSGForOIFromL2""))

produces<std::vector<TrajectorySeed> >();


GForOIFromL2::~TSGForOIFromL2() {




 Produce seeds

id TSGForOIFromL2::produce(edm::StreamID sid, edm::Event& iEvent, const edm::EventSetup& iSetup) const {

// Initialize variables
unsigned int numSeedsMade = 0;
unsigned int layerCount = 0;
unsigned int hitlessSeedsMadeIP = 0;
unsigned int hitlessSeedsMadeMuS = 0;
unsigned int hitSeedsMade = 0;

// Surface used to make a TSOS at the PCA to the beamline
Plane::PlanePointer dummyPlane = Plane::build(Plane::PositionType(), Plane::RotationType());

// Read ESHandles
edm::Handle<MeasurementTrackerEvent>          measurementTrackerH;
edm::ESHandle<Chi2MeasurementEstimatorBase>   estimatorH;
edm::ESHandle<MagneticField>                  magfieldH;
edm::ESHandle<Propagator>                     propagatorAlongH;
edm::ESHandle<Propagator>                     propagatorOppositeH;
edm::ESHandle<TrackerGeometry>                tmpTkGeometryH;
edm::ESHandle<GlobalTrackingGeometry>         geometryH;

iSetup.get<IdealMagneticFieldRecord>().get(magfieldH);
iSetup.get<TrackingComponentsRecord>().get(propagatorName_, propagatorOppositeH);
iSetup.get<TrackingComponentsRecord>().get(propagatorName_, propagatorAlongH);
iSetup.get<GlobalTrackingGeometryRecord>().get(geometryH);
iSetup.get<TrackerDigiGeometryRecord>().get(tmpTkGeometryH);
iSetup.get<TrackingComponentsRecord>().get(estimatorName_,estimatorH);
iEvent.getByToken(measurementTrackerTag_, measurementTrackerH);

// Read L2 track collection
edm::Handle<reco::TrackCollection> l2TrackCol;
iEvent.getByToken(src_, l2TrackCol);

// The product
std::unique_ptr<std::vector<TrajectorySeed> > result(new std::vector<TrajectorySeed>());

// Get vector of Detector layers
std::vector<BarrelDetLayer const*> const& tob = measurementTrackerH->geometricSearchTracker()->tobLayers();
std::vector<ForwardDetLayer const*> const& tecPositive = tmpTkGeometryH->isThere(GeomDetEnumerators::P2OTEC) ? 
                                                              measurementTrackerH->geometricSearchTracker()->posTidLayers() : 
                                                              measurementTrackerH->geometricSearchTracker()->posTecLayers(); 
std::vector<ForwardDetLayer const*> const& tecNegative = tmpTkGeometryH->isThere(GeomDetEnumerators::P2OTEC) ? 
                                                              measurementTrackerH->geometricSearchTracker()->negTidLayers() : 
                                                              measurementTrackerH->geometricSearchTracker()->negTecLayers();

// Get suitable propagators
std::unique_ptr<Propagator> propagatorAlong = SetPropagationDirection(*propagatorAlongH,alongMomentum);
std::unique_ptr<Propagator> propagatorOpposite = SetPropagationDirection(*propagatorOppositeH,oppositeToMomentum);

// Stepping Helix Propagator for propogation from muon system to tracker
edm::ESHandle<Propagator> SHPOpposite;
iSetup.get<TrackingComponentsRecord>().get(""hltESPSteppingHelixPropagatorOpposite"", SHPOpposite);

// Loop over the L2's and make seeds for all of them
LogTrace(theCategory_) << ""TSGForOIFromL2::produce: Number of L2's: "" << l2TrackCol->size();
for (unsigned int l2TrackColIndex(0); l2TrackColIndex!=l2TrackCol->size(); l2TrackColIndex) {

  const reco::TrackRef l2(l2TrackCol, l2TrackColIndex);

  // Container of Seeds
  std::vector<TrajectorySeed> out;
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: L2 muon pT, eta, phi --> "" << l2->pt() << "" , "" << l2->eta() << "" , "" << l2->phi() << std::endl;

  FreeTrajectoryState fts = trajectoryStateTransform::initialFreeState(*l2, magfieldH.product());

  dummyPlane->move(fts.position() - dummyPlane->position());
  TrajectoryStateOnSurface tsosAtIP = TrajectoryStateOnSurface(fts, *dummyPlane);
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: Created TSOSatIP: "" << tsosAtIP << std::endl;
  
  // Get the TSOS on the innermost layer of the L2
  TrajectoryStateOnSurface tsosAtMuonSystem = trajectoryStateTransform::innerStateOnSurface(*l2, *geometryH, magfieldH.product());
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: Created TSOSatMuonSystem: "" << tsosAtMuonSystem <<std::endl;
  
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: Check the error of the L2 parameter and use hit seeds if big errors"" << std::endl;

  StateOnTrackerBound fromInside(propagatorAlong.get());
  TrajectoryStateOnSurface outerTkStateInside = fromInside(fts);

  StateOnTrackerBound fromOutside(&*SHPOpposite);
  TrajectoryStateOnSurface outerTkStateOutside = fromOutside(tsosAtMuonSystem);

  // Check if the two positions (using updated and not-updated TSOS) agree withing certain extent.
  // If both TSOSs agree, use only the one at vertex, as it uses more information. If they do not agree, search for seeds based on both.
  double L2muonEta=l2->eta();
  double absL2muonEta=std::abs(L2muonEta);
  bool useBoth = false;
  if (outerTkStateInside.isValid() && outerTkStateOutside.isValid()) {
    //following commented out variables dist1 (5 par compatibility of tsos at outertracker surface)  
    //dist2 (angle between two tsos) could further be explored in combination of L2 valid hits for seeding. So kept for 
    //future developers 
    //auto dist1 = match_Chi2(outerTkStateInside,outerTkStateOutside);//for future developers
    //auto dist2 = deltaR(outerTkStateInside.globalMomentum(),outerTkStateOutside.globalMomentum());//for future developers
    //if ((dist1 > tsosDiff1_ || dist2 > tsosDiff2_) && l2->numberOfValidHits() < 20) useBoth = true;//for future developers
    if (l2->numberOfValidHits() < numL2ValidHitsCutAllEta_) useBoth = true;
    if (l2->numberOfValidHits() < numL2ValidHitsCutAllEndcap_ && absL2muonEta > eta7_) useBoth = true;
    if (absL2muonEta > eta1_ && absL2muonEta < eta1_) useBoth = true;
  }

  numSeedsMade = 0;
  hitlessSeedsMadeIP = 0;
  hitlessSeedsMadeMuS = 0;
  hitSeedsMade = 0;

  // calculate scale factors
  double errorSFHits = (adjustErrorsDynamicallyForHits_? calculateSFFromL2(l2) : fixedErrorRescalingForHits_);
  double errorSFHitless = (adjustErrorsDynamicallyForHitless_? calculateSFFromL2(l2) : fixedErrorRescalingForHitless_);

  // BARREL
  if (absL2muonEta < maxEtaForTOB_) {
    layerCount = 0;
    for (auto it=tob.rbegin(); it!=tob.rend(); it) { 
      LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: looping in TOB layer "" << layerCount << std::endl;
      if ( useHitLessSeeds_ && hitlessSeedsMadeIP < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsWithoutHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, errorSFHitless, hitlessSeedsMadeIP, numSeedsMade, out);

      // Do not create hitbased seeds in barrel region
      if (absL2muonEta > 1.0 && hitSeedsMade < maxHitSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsFromHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, measurementTrackerH, errorSFHits, hitSeedsMade, numSeedsMade, layerCount, out);

      if (useBoth) {
        if ( useHitLessSeeds_ && hitlessSeedsMadeMuS < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
           makeSeedsWithoutHits(**it, outerTkStateOutside, *(propagatorOpposite.get()), estimatorH, errorSFHitless, hitlessSeedsMadeMuS, numSeedsMade, out);
      }
    }
    LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2:::produce: NumSeedsMade = "" << numSeedsMade << "" , layerCount = "" << layerCount << std::endl;
  }

  // Reset number of seeds if in overlap region
  if (absL2muonEta > minEtaForTEC_ && absL2muonEta < maxEtaForTOB_) {
    numSeedsMade = 0;
    hitlessSeedsMadeIP = 0;
    hitlessSeedsMadeMuS = 0;
    hitSeedsMade = 0;
  }

  // ENDCAP
  if (L2muonEta > minEtaForTEC_) {
    layerCount = 0;
    for (auto it=tecPositive.rbegin(); it!=tecPositive.rend(); it) {
      LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: looping in TEC layer "" << layerCount << std::endl;
      if ( useHitLessSeeds_ && hitlessSeedsMadeIP < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsWithoutHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, errorSFHitless, hitlessSeedsMadeIP, numSeedsMade, out);

      if (absL2muonEta > 1.0 && hitSeedsMade < maxHitSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsFromHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, measurementTrackerH, errorSFHits, hitSeedsMade, numSeedsMade, layerCount, out);

      if (useBoth) {
        if ( useHitLessSeeds_ && hitlessSeedsMadeMuS < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
           makeSeedsWithoutHits(**it, outerTkStateOutside, *(propagatorOpposite.get()), estimatorH, errorSFHitless, hitlessSeedsMadeMuS, numSeedsMade, out);
      } 
    }
    LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2:::produce: NumSeedsMade = "" << numSeedsMade << "" , layerCount = "" << layerCount << std::endl;
  }

  // ENDCAP-
  if (L2muonEta < -minEtaForTEC_) {
    layerCount = 0;
    for (auto it=tecNegative.rbegin(); it!=tecNegative.rend(); it) {
      LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: looping in TEC- layer "" << layerCount << std::endl;
      if ( useHitLessSeeds_ && hitlessSeedsMadeIP < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsWithoutHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, errorSFHitless, hitlessSeedsMadeIP, numSeedsMade, out);

      if (absL2muonEta > 1.0 && hitSeedsMade < maxHitSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsFromHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, measurementTrackerH, errorSFHits, hitSeedsMade, numSeedsMade, layerCount, out);

      if (useBoth) {
        if ( useHitLessSeeds_ && hitlessSeedsMadeMuS < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
           makeSeedsWithoutHits(**it, outerTkStateOutside, *(propagatorOpposite.get()), estimatorH, errorSFHitless, hitlessSeedsMadeMuS, numSeedsMade, out);
      }
    }
    LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2:::produce: NumSeedsMade = "" << numSeedsMade << "" , layerCount = "" << layerCount << std::endl;
  }

  for (std::vector<TrajectorySeed>::iterator it=out.begin(); it!=out.end(); it) {
    result->push_back(*it);
  }

} // L2Collection

edm::LogInfo(theCategory_) << ""TSGForOIFromL2::produce: number of seeds made: "" << result->size();

iEvent.put(std::move(result));




 Create seeds without hits on a given layer (TOB or TEC)

id TSGForOIFromL2::makeSeedsWithoutHits(
                              const GeometricSearchDet& layer,
                              const TrajectoryStateOnSurface& tsos,
                              const Propagator& propagatorAlong,
                              edm::ESHandle<Chi2MeasurementEstimatorBase>& estimator,
                              double errorSF,
                              unsigned int& hitlessSeedsMade,
                              unsigned int& numSeedsMade,
                              std::vector<TrajectorySeed>& out) const {
  
// create hitless seeds
LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsWithoutHits: Start hitless"" << std::endl;
std::vector< GeometricSearchDet::DetWithState > dets;
layer.compatibleDetsV(tsos, propagatorAlong, *estimator, dets);
if (!dets.empty()) {
  auto const& detOnLayer = dets.front().first;
  auto const& tsosOnLayer = dets.front().second;
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsWithoutHits: tsosOnLayer "" << tsosOnLayer << std::endl;
  if (!tsosOnLayer.isValid()) {
    edm::LogInfo(theCategory_) << ""ERROR!: Hitless TSOS is not valid!"";
  }
  else {
    dets.front().second.rescaleError(errorSF);
    PTrajectoryStateOnDet const& ptsod = trajectoryStateTransform::persistentState(tsosOnLayer,detOnLayer->geographicalId().rawId());
    TrajectorySeed::recHitContainer rHC;
    out.push_back(TrajectorySeed(ptsod,rHC,oppositeToMomentum));
    LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsWithoutHits: TSOS (Hitless) done "" << std::endl;
    hitlessSeedsMade;
    numSeedsMade;
 }

  




 Find hits on a given layer (TOB or TEC) and create seeds from updated TSOS with hit

id TSGForOIFromL2::makeSeedsFromHits(
              const GeometricSearchDet& layer,
              const TrajectoryStateOnSurface& tsos,
              const Propagator& propagatorAlong,
              edm::ESHandle<Chi2MeasurementEstimatorBase>& estimator,
              edm::Handle<MeasurementTrackerEvent>& measurementTracker,
              double errorSF,
              unsigned int& hitSeedsMade,
              unsigned int& numSeedsMade,
              unsigned int& layerCount,
              std::vector<TrajectorySeed>& out) const {

if (layerCount > numOfLayersToTry_) return;

// Error Rescaling
TrajectoryStateOnSurface onLayer(tsos);
onLayer.rescaleError(errorSF);

std::vector< GeometricSearchDet::DetWithState > dets;
layer.compatibleDetsV(onLayer, propagatorAlong, *estimator, dets);

// Find Measurements on each DetWithState
LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsFromHits: Find measurements on each detWithState  "" << dets.size() << std::endl;
std::vector<TrajectoryMeasurement> meas;
for (std::vector<GeometricSearchDet::DetWithState>::iterator it=dets.begin(); it!=dets.end(); it) {
  MeasurementDetWithData det = measurementTracker->idToDet(it->first->geographicalId());
  if (det.isNull()) continue;
  if (!it->second.isValid()) continue;	// Skip if TSOS is not valid

  std::vector <TrajectoryMeasurement> mymeas = det.fastMeasurements(it->second, onLayer, propagatorAlong, *estimator);	// Second TSOS is not used
  for (std::vector<TrajectoryMeasurement>::const_iterator it2 = mymeas.begin(), ed2 = mymeas.end(); it2 != ed2; it2) {
    if (it2->recHit()->isValid()) meas.push_back(*it2);	// Only save those which are valid
  }
}

// Update TSOS using TMs after sorting, then create Trajectory Seed and put into vector
LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsFromHits: Update TSOS using TMs after sorting, then create Trajectory Seed, number of TM = "" << meas.size() << std::endl;
std::sort(meas.begin(), meas.end(), TrajMeasLessEstim());

unsigned int found = 0;
for (std::vector<TrajectoryMeasurement>::const_iterator it=meas.begin(); it!=meas.end(); it) {
  TrajectoryStateOnSurface updatedTSOS = updator_->update(it->forwardPredictedState(), *it->recHit());
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsFromHits: TSOS for TM "" << found << std::endl;
  if (not updatedTSOS.isValid()) continue;
  
  edm::OwnVector<TrackingRecHit> seedHits;
  seedHits.push_back(*it->recHit()->hit());
  PTrajectoryStateOnDet const& pstate = trajectoryStateTransform::persistentState(updatedTSOS, it->recHit()->geographicalId().rawId());
  TrajectorySeed seed(pstate, std::move(seedHits), oppositeToMomentum);
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsFromHits: Number of seedHits: "" << seedHits.size() << std::endl;
  out.push_back(seed);
  found;
  numSeedsMade;
  hitSeedsMade;
  if (found == numOfHitsToTry_) break;
  if (hitSeedsMade > maxHitSeeds_) return;
}

if (found) layerCount;





 Calculate the dynamic error SF by analysing the L2

uble TSGForOIFromL2::calculateSFFromL2(const reco::TrackRef track) const {
  
double theSF = 1.0;
// L2 direction vs pT blowup - as was previously done:
// Split into 4 pT ranges: <pT1_, pT1_<pT2_, pT2_<pT3_, <pT4_: 13,30,70
// Split into different eta ranges depending in pT
double abseta = std::abs(track->eta());
if (track->pt() <= pT1_) theSF = SF1_;
else if (track->pt() > pT1_ && track->pt() <= pT2_) {
  if (abseta <= eta3_) theSF = SF3_;
  else if (abseta > eta3_ && abseta <= eta6_) theSF = SF2_;
  else if (abseta > eta6_) theSF = SF3_;
}
else if (track->pt() > pT2_ && track->pt() <= pT3_) {
  if (abseta <= eta1_) theSF = SF6_;
  else if (abseta > eta1_  && abseta <= eta2_) theSF = SF4_;
  else if (abseta > eta2_  && abseta <= eta3_) theSF = SF6_;
  else if (abseta > eta3_ && abseta <= eta4_) theSF = SF1_;
  else if (abseta > eta4_ && abseta <= eta5_) theSF = SF1_;
  else if (abseta > eta5_ ) theSF = SF5_;
}
else if (track->pt() > pT3_) {
  if (abseta <= eta3_) theSF = SF5_;
  else if (abseta > eta3_ && abseta <= eta4_) theSF = SF4_;
  else if (abseta > eta4_ && abseta <= eta5_) theSF = SF4_;
  else if (abseta > eta5_ ) theSF = SF5_;
}
  
LogTrace(theCategory_) << ""TSGForOIFromL2::calculateSFFromL2: SF has been calculated as: "" << theSF;
  
return theSF;
  



 calculate Chi^2 of two trajectory states

uble TSGForOIFromL2::match_Chi2(const TrajectoryStateOnSurface& tsos1,
                          const TrajectoryStateOnSurface& tsos2) const {

if ( !tsos1.isValid() || !tsos2.isValid() ) return -1.;

AlgebraicVector5 v(tsos1.localParameters().vector() - tsos2.localParameters().vector());
AlgebraicSymMatrix55 m(tsos1.localError().matrix()  tsos2.localError().matrix());

bool ierr = !m.Invert();

if ( ierr ) {
  edm::LogInfo(""TSGForOIFromL2"") << ""Error inverting covariance matrix"";
  return -1;
}

double est = ROOT::Math::Similarity(v,m);

return est;







id TSGForOIFromL2::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {

edm::ParameterSetDescription desc;
desc.add<edm::InputTag>(""src"",edm::InputTag(""hltL2Muons"",""UpdatedAtVtx""));
desc.add<int>(""layersToTry"",2);
desc.add<double>(""fixedErrorRescaleFactorForHitless"",2.0);
desc.add<int>(""hitsToTry"",1);
desc.add<bool>(""adjustErrorsDynamicallyForHits"",false);
desc.add<bool>(""adjustErrorsDynamicallyForHitless"",true);
desc.add<edm::InputTag>(""MeasurementTrackerEvent"",edm::InputTag(""hltSiStripClusters""));
desc.add<bool>(""UseHitLessSeeds"",true);
desc.add<std::string>(""estimator"",""hltESPChi2MeasurementEstimator100"");
desc.add<double>(""maxEtaForTOB"",1.8);
desc.add<double>(""minEtaForTEC"",0.7);
desc.addUntracked<bool>(""debug"",false);
desc.add<double>(""fixedErrorRescaleFactorForHits"",1.0);
desc.add<unsigned int>(""maxSeeds"",20);
desc.add<unsigned int>(""maxHitlessSeeds"",5);
desc.add<unsigned int>(""maxHitSeeds"",1);
desc.add<unsigned int>(""numL2ValidHitsCutAllEta"",20);
desc.add<unsigned int>(""numL2ValidHitsCutAllEndcap"",30);
desc.add<double>(""pT1"",13.0);
desc.add<double>(""pT2"",30.0);
desc.add<double>(""pT3"",70.0);
desc.add<double>(""eta1"",0.2);
desc.add<double>(""eta2"",0.3);
desc.add<double>(""eta3"",1.0);
desc.add<double>(""eta4"",1.2);
desc.add<double>(""eta5"",1.6);
desc.add<double>(""eta6"",1.4);
desc.add<double>(""eta7"",2.1);
desc.add<double>(""SF1"",3.0);
desc.add<double>(""SF2"",4.0);
desc.add<double>(""SF3"",5.0);
desc.add<double>(""SF4"",7.0);
desc.add<double>(""SF5"",10.0);
desc.add<double>(""SF6"",2.0);
desc.add<double>(""tsosDiff1"",0.2);
desc.add<double>(""tsosDiff2"",0.02);
desc.add<std::string>(""propagatorName"",""PropagatorWithMaterialParabolicMf"");
descriptions.add(""TSGForOIFromL2"",desc);



FINE_FWK_MODULE(TSGForOIFromL2);
"
-------------------------------------------------------------------------
"/**
\class    TSGForOIFromL2
\brief    Create L3MuonTrajectorySeeds from L2 Muons updated at vertex in an outside-in manner
\author   Benjamin Radburn-Smith, Santiago Folgueras, Bibhuprasad Mahakud, Jan Frederik Schulte (Purdue University, West Lafayette, USA)
/

nclude ""RecoMuon/TrackerSeedGenerator/plugins/TSGForOIFromL2.h""
nclude ""DataFormats/TrackerCommon/interface/TrackerTopology.h""
nclude ""DataFormats/Math/interface/deltaR.h""

nclude <memory>


GForOIFromL2::TSGForOIFromL2(const edm::ParameterSet & iConfig) :
src_(consumes<reco::TrackCollection>(iConfig.getParameter<edm::InputTag>(""src""))),
maxSeeds_(iConfig.getParameter<uint32_t>(""maxSeeds"")),
maxHitlessSeeds_(iConfig.getParameter<uint32_t>(""maxHitlessSeeds"")),
maxHitSeeds_(iConfig.getParameter<uint32_t>(""maxHitSeeds"")),
numOfLayersToTry_(iConfig.getParameter<int32_t>(""layersToTry"")),
numOfHitsToTry_(iConfig.getParameter<int32_t>(""hitsToTry"")),
numL2ValidHitsCutAllEta_(iConfig.getParameter<uint32_t>(""numL2ValidHitsCutAllEta"")),
numL2ValidHitsCutAllEndcap_(iConfig.getParameter<uint32_t>(""numL2ValidHitsCutAllEndcap"")),  
fixedErrorRescalingForHits_(iConfig.getParameter<double>(""fixedErrorRescaleFactorForHits"")),
fixedErrorRescalingForHitless_(iConfig.getParameter<double>(""fixedErrorRescaleFactorForHitless"")),
adjustErrorsDynamicallyForHits_(iConfig.getParameter<bool>(""adjustErrorsDynamicallyForHits"")),
adjustErrorsDynamicallyForHitless_(iConfig.getParameter<bool>(""adjustErrorsDynamicallyForHitless"")),
estimatorName_(iConfig.getParameter<std::string>(""estimator"")),
minEtaForTEC_(iConfig.getParameter<double>(""minEtaForTEC"")),
maxEtaForTOB_(iConfig.getParameter<double>(""maxEtaForTOB"")),
useHitLessSeeds_(iConfig.getParameter<bool>(""UseHitLessSeeds"")),
updator_(new KFUpdator()), measurementTrackerTag_(consumes<MeasurementTrackerEvent>(iConfig.getParameter<edm::InputTag>(""MeasurementTrackerEvent""))),
pT1_(iConfig.getParameter<double>(""pT1"")),
pT2_(iConfig.getParameter<double>(""pT2"")),
pT3_(iConfig.getParameter<double>(""pT3"")),
eta1_(iConfig.getParameter<double>(""eta1"")),
eta2_(iConfig.getParameter<double>(""eta2"")),
eta3_(iConfig.getParameter<double>(""eta3"")),
eta4_(iConfig.getParameter<double>(""eta4"")),
eta5_(iConfig.getParameter<double>(""eta5"")),
eta6_(iConfig.getParameter<double>(""eta6"")),
eta7_(iConfig.getParameter<double>(""eta7"")),
SF1_(iConfig.getParameter<double>(""SF1"")),
SF2_(iConfig.getParameter<double>(""SF2"")),
SF3_(iConfig.getParameter<double>(""SF3"")),
SF4_(iConfig.getParameter<double>(""SF4"")),
SF5_(iConfig.getParameter<double>(""SF5"")),
SF6_(iConfig.getParameter<double>(""SF6"")),
tsosDiff1_(iConfig.getParameter<double>(""tsosDiff1"")),
tsosDiff2_(iConfig.getParameter<double>(""tsosDiff2"")),
propagatorName_(iConfig.getParameter<std::string>(""propagatorName"")), 
theCategory_(std::string(""Muon|RecoMuon|TSGForOIFromL2""))

produces<std::vector<TrajectorySeed> >();


GForOIFromL2::~TSGForOIFromL2() {




 Produce seeds

id TSGForOIFromL2::produce(edm::StreamID sid, edm::Event& iEvent, const edm::EventSetup& iSetup) const {

// Initialize variables
unsigned int numSeedsMade = 0;
unsigned int layerCount = 0;
unsigned int hitlessSeedsMadeIP = 0;
unsigned int hitlessSeedsMadeMuS = 0;
unsigned int hitSeedsMade = 0;

// Surface used to make a TSOS at the PCA to the beamline
Plane::PlanePointer dummyPlane = Plane::build(Plane::PositionType(), Plane::RotationType());

// Read ESHandles
edm::Handle<MeasurementTrackerEvent>          measurementTrackerH;
edm::ESHandle<Chi2MeasurementEstimatorBase>   estimatorH;
edm::ESHandle<MagneticField>                  magfieldH;
edm::ESHandle<Propagator>                     propagatorAlongH;
edm::ESHandle<Propagator>                     propagatorOppositeH;
edm::ESHandle<TrackerGeometry>                tmpTkGeometryH;
edm::ESHandle<GlobalTrackingGeometry>         geometryH;

iSetup.get<IdealMagneticFieldRecord>().get(magfieldH);
iSetup.get<TrackingComponentsRecord>().get(propagatorName_, propagatorOppositeH);
iSetup.get<TrackingComponentsRecord>().get(propagatorName_, propagatorAlongH);
iSetup.get<GlobalTrackingGeometryRecord>().get(geometryH);
iSetup.get<TrackerDigiGeometryRecord>().get(tmpTkGeometryH);
iSetup.get<TrackingComponentsRecord>().get(estimatorName_,estimatorH);
iEvent.getByToken(measurementTrackerTag_, measurementTrackerH);

// Read L2 track collection
edm::Handle<reco::TrackCollection> l2TrackCol;
iEvent.getByToken(src_, l2TrackCol);

// The product
std::unique_ptr<std::vector<TrajectorySeed> > result(new std::vector<TrajectorySeed>());

// Get vector of Detector layers
std::vector<BarrelDetLayer const*> const& tob = measurementTrackerH->geometricSearchTracker()->tobLayers();
std::vector<ForwardDetLayer const*> const& tecPositive = tmpTkGeometryH->isThere(GeomDetEnumerators::P2OTEC) ? 
                                                              measurementTrackerH->geometricSearchTracker()->posTidLayers() : 
                                                              measurementTrackerH->geometricSearchTracker()->posTecLayers(); 
std::vector<ForwardDetLayer const*> const& tecNegative = tmpTkGeometryH->isThere(GeomDetEnumerators::P2OTEC) ? 
                                                              measurementTrackerH->geometricSearchTracker()->negTidLayers() : 
                                                              measurementTrackerH->geometricSearchTracker()->negTecLayers();

// Get suitable propagators
std::unique_ptr<Propagator> propagatorAlong = SetPropagationDirection(*propagatorAlongH,alongMomentum);
std::unique_ptr<Propagator> propagatorOpposite = SetPropagationDirection(*propagatorOppositeH,oppositeToMomentum);

// Stepping Helix Propagator for propogation from muon system to tracker
edm::ESHandle<Propagator> SHPOpposite;
iSetup.get<TrackingComponentsRecord>().get(""hltESPSteppingHelixPropagatorOpposite"", SHPOpposite);

// Loop over the L2's and make seeds for all of them
LogTrace(theCategory_) << ""TSGForOIFromL2::produce: Number of L2's: "" << l2TrackCol->size();
for (unsigned int l2TrackColIndex(0); l2TrackColIndex!=l2TrackCol->size(); l2TrackColIndex) {

  const reco::TrackRef l2(l2TrackCol, l2TrackColIndex);

  // Container of Seeds
  std::vector<TrajectorySeed> out;
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: L2 muon pT, eta, phi --> "" << l2->pt() << "" , "" << l2->eta() << "" , "" << l2->phi() << std::endl;

  FreeTrajectoryState fts = trajectoryStateTransform::initialFreeState(*l2, magfieldH.product());

  dummyPlane->move(fts.position() - dummyPlane->position());
  TrajectoryStateOnSurface tsosAtIP = TrajectoryStateOnSurface(fts, *dummyPlane);
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: Created TSOSatIP: "" << tsosAtIP << std::endl;
  
  // Get the TSOS on the innermost layer of the L2
  TrajectoryStateOnSurface tsosAtMuonSystem = trajectoryStateTransform::innerStateOnSurface(*l2, *geometryH, magfieldH.product());
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: Created TSOSatMuonSystem: "" << tsosAtMuonSystem <<std::endl;
  
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: Check the error of the L2 parameter and use hit seeds if big errors"" << std::endl;

  StateOnTrackerBound fromInside(propagatorAlong.get());
  TrajectoryStateOnSurface outerTkStateInside = fromInside(fts);

  StateOnTrackerBound fromOutside(&*SHPOpposite);
  TrajectoryStateOnSurface outerTkStateOutside = fromOutside(tsosAtMuonSystem);

  // Check if the two positions (using updated and not-updated TSOS) agree withing certain extent.
  // If both TSOSs agree, use only the one at vertex, as it uses more information. If they do not agree, search for seeds based on both.
  double L2muonEta=l2->eta();
  double absL2muonEta=std::abs(L2muonEta);
  bool useBoth = false;
  if (outerTkStateInside.isValid() && outerTkStateOutside.isValid()) {
    //following commented out variables dist1 (5 par compatibility of tsos at outertracker surface)  
    //dist2 (angle between two tsos) could further be explored in combination of L2 valid hits for seeding. So kept for 
    //future developers 
    //auto dist1 = match_Chi2(outerTkStateInside,outerTkStateOutside);//for future developers
    //auto dist2 = deltaR(outerTkStateInside.globalMomentum(),outerTkStateOutside.globalMomentum());//for future developers
    //if ((dist1 > tsosDiff1_ || dist2 > tsosDiff2_) && l2->numberOfValidHits() < 20) useBoth = true;//for future developers
    if (l2->numberOfValidHits() < numL2ValidHitsCutAllEta_) useBoth = true;
    if (l2->numberOfValidHits() < numL2ValidHitsCutAllEndcap_ && absL2muonEta > eta7_) useBoth = true;
    if (absL2muonEta > eta1_ && absL2muonEta < eta1_) useBoth = true;
  }

  numSeedsMade = 0;
  hitlessSeedsMadeIP = 0;
  hitlessSeedsMadeMuS = 0;
  hitSeedsMade = 0;

  // calculate scale factors
  double errorSFHits = (adjustErrorsDynamicallyForHits_? calculateSFFromL2(l2) : fixedErrorRescalingForHits_);
  double errorSFHitless = (adjustErrorsDynamicallyForHitless_? calculateSFFromL2(l2) : fixedErrorRescalingForHitless_);

  // BARREL
  if (absL2muonEta < maxEtaForTOB_) {
    layerCount = 0;
    for (auto it=tob.rbegin(); it!=tob.rend(); it) { 
      LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: looping in TOB layer "" << layerCount << std::endl;
      if ( useHitLessSeeds_ && hitlessSeedsMadeIP < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsWithoutHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, errorSFHitless, hitlessSeedsMadeIP, numSeedsMade, out);

      // Do not create hitbased seeds in barrel region
      if (absL2muonEta > 1.0 && hitSeedsMade < maxHitSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsFromHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, measurementTrackerH, errorSFHits, hitSeedsMade, numSeedsMade, layerCount, out);

      if (useBoth) {
        if ( useHitLessSeeds_ && hitlessSeedsMadeMuS < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
           makeSeedsWithoutHits(**it, outerTkStateOutside, *(propagatorOpposite.get()), estimatorH, errorSFHitless, hitlessSeedsMadeMuS, numSeedsMade, out);
      }
    }
    LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2:::produce: NumSeedsMade = "" << numSeedsMade << "" , layerCount = "" << layerCount << std::endl;
  }

  // Reset number of seeds if in overlap region
  if (absL2muonEta > minEtaForTEC_ && absL2muonEta < maxEtaForTOB_) {
    numSeedsMade = 0;
    hitlessSeedsMadeIP = 0;
    hitlessSeedsMadeMuS = 0;
    hitSeedsMade = 0;
  }

  // ENDCAP
  if (L2muonEta > minEtaForTEC_) {
    layerCount = 0;
    for (auto it=tecPositive.rbegin(); it!=tecPositive.rend(); it) {
      LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: looping in TEC layer "" << layerCount << std::endl;
      if ( useHitLessSeeds_ && hitlessSeedsMadeIP < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsWithoutHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, errorSFHitless, hitlessSeedsMadeIP, numSeedsMade, out);

      if (absL2muonEta > 1.0 && hitSeedsMade < maxHitSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsFromHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, measurementTrackerH, errorSFHits, hitSeedsMade, numSeedsMade, layerCount, out);

      if (useBoth) {
        if ( useHitLessSeeds_ && hitlessSeedsMadeMuS < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
           makeSeedsWithoutHits(**it, outerTkStateOutside, *(propagatorOpposite.get()), estimatorH, errorSFHitless, hitlessSeedsMadeMuS, numSeedsMade, out);
      } 
    }
    LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2:::produce: NumSeedsMade = "" << numSeedsMade << "" , layerCount = "" << layerCount << std::endl;
  }

  // ENDCAP-
  if (L2muonEta < -minEtaForTEC_) {
    layerCount = 0;
    for (auto it=tecNegative.rbegin(); it!=tecNegative.rend(); it) {
      LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: looping in TEC- layer "" << layerCount << std::endl;
      if ( useHitLessSeeds_ && hitlessSeedsMadeIP < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsWithoutHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, errorSFHitless, hitlessSeedsMadeIP, numSeedsMade, out);

      if (absL2muonEta > 1.0 && hitSeedsMade < maxHitSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsFromHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, measurementTrackerH, errorSFHits, hitSeedsMade, numSeedsMade, layerCount, out);

      if (useBoth) {
        if ( useHitLessSeeds_ && hitlessSeedsMadeMuS < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
           makeSeedsWithoutHits(**it, outerTkStateOutside, *(propagatorOpposite.get()), estimatorH, errorSFHitless, hitlessSeedsMadeMuS, numSeedsMade, out);
      }
    }
    LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2:::produce: NumSeedsMade = "" << numSeedsMade << "" , layerCount = "" << layerCount << std::endl;
  }

  for (std::vector<TrajectorySeed>::iterator it=out.begin(); it!=out.end(); it) {
    result->push_back(*it);
  }

} // L2Collection

edm::LogInfo(theCategory_) << ""TSGForOIFromL2::produce: number of seeds made: "" << result->size();

iEvent.put(std::move(result));




 Create seeds without hits on a given layer (TOB or TEC)

id TSGForOIFromL2::makeSeedsWithoutHits(
                              const GeometricSearchDet& layer,
                              const TrajectoryStateOnSurface& tsos,
                              const Propagator& propagatorAlong,
                              edm::ESHandle<Chi2MeasurementEstimatorBase>& estimator,
                              double errorSF,
                              unsigned int& hitlessSeedsMade,
                              unsigned int& numSeedsMade,
                              std::vector<TrajectorySeed>& out) const {
  
// create hitless seeds
LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsWithoutHits: Start hitless"" << std::endl;
std::vector< GeometricSearchDet::DetWithState > dets;
layer.compatibleDetsV(tsos, propagatorAlong, *estimator, dets);
if (!dets.empty()) {
  auto const& detOnLayer = dets.front().first;
  auto const& tsosOnLayer = dets.front().second;
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsWithoutHits: tsosOnLayer "" << tsosOnLayer << std::endl;
  if (!tsosOnLayer.isValid()) {
    edm::LogInfo(theCategory_) << ""ERROR!: Hitless TSOS is not valid!"";
  }
  else {
    dets.front().second.rescaleError(errorSF);
    PTrajectoryStateOnDet const& ptsod = trajectoryStateTransform::persistentState(tsosOnLayer,detOnLayer->geographicalId().rawId());
    TrajectorySeed::recHitContainer rHC;
    out.push_back(TrajectorySeed(ptsod,rHC,oppositeToMomentum));
    LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsWithoutHits: TSOS (Hitless) done "" << std::endl;
    hitlessSeedsMade;
    numSeedsMade;
 }

  




 Find hits on a given layer (TOB or TEC) and create seeds from updated TSOS with hit

id TSGForOIFromL2::makeSeedsFromHits(
              const GeometricSearchDet& layer,
              const TrajectoryStateOnSurface& tsos,
              const Propagator& propagatorAlong,
              edm::ESHandle<Chi2MeasurementEstimatorBase>& estimator,
              edm::Handle<MeasurementTrackerEvent>& measurementTracker,
              double errorSF,
              unsigned int& hitSeedsMade,
              unsigned int& numSeedsMade,
              unsigned int& layerCount,
              std::vector<TrajectorySeed>& out) const {

if (layerCount > numOfLayersToTry_) return;

// Error Rescaling
TrajectoryStateOnSurface onLayer(tsos);
onLayer.rescaleError(errorSF);

std::vector< GeometricSearchDet::DetWithState > dets;
layer.compatibleDetsV(onLayer, propagatorAlong, *estimator, dets);

// Find Measurements on each DetWithState
LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsFromHits: Find measurements on each detWithState  "" << dets.size() << std::endl;
std::vector<TrajectoryMeasurement> meas;
for (std::vector<GeometricSearchDet::DetWithState>::iterator it=dets.begin(); it!=dets.end(); it) {
  MeasurementDetWithData det = measurementTracker->idToDet(it->first->geographicalId());
  if (det.isNull()) continue;
  if (!it->second.isValid()) continue;	// Skip if TSOS is not valid

  std::vector <TrajectoryMeasurement> mymeas = det.fastMeasurements(it->second, onLayer, propagatorAlong, *estimator);	// Second TSOS is not used
  for (std::vector<TrajectoryMeasurement>::const_iterator it2 = mymeas.begin(), ed2 = mymeas.end(); it2 != ed2; it2) {
    if (it2->recHit()->isValid()) meas.push_back(*it2);	// Only save those which are valid
  }
}

// Update TSOS using TMs after sorting, then create Trajectory Seed and put into vector
LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsFromHits: Update TSOS using TMs after sorting, then create Trajectory Seed, number of TM = "" << meas.size() << std::endl;
std::sort(meas.begin(), meas.end(), TrajMeasLessEstim());

unsigned int found = 0;
for (std::vector<TrajectoryMeasurement>::const_iterator it=meas.begin(); it!=meas.end(); it) {
  TrajectoryStateOnSurface updatedTSOS = updator_->update(it->forwardPredictedState(), *it->recHit());
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsFromHits: TSOS for TM "" << found << std::endl;
  if (not updatedTSOS.isValid()) continue;
  
  edm::OwnVector<TrackingRecHit> seedHits;
  seedHits.push_back(*it->recHit()->hit());
  PTrajectoryStateOnDet const& pstate = trajectoryStateTransform::persistentState(updatedTSOS, it->recHit()->geographicalId().rawId());
  TrajectorySeed seed(pstate, std::move(seedHits), oppositeToMomentum);
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsFromHits: Number of seedHits: "" << seedHits.size() << std::endl;
  out.push_back(seed);
  found;
  numSeedsMade;
  hitSeedsMade;
  if (found == numOfHitsToTry_) break;
  if (hitSeedsMade > maxHitSeeds_) return;
}

if (found) layerCount;





 Calculate the dynamic error SF by analysing the L2

uble TSGForOIFromL2::calculateSFFromL2(const reco::TrackRef track) const {
  
double theSF = 1.0;
// L2 direction vs pT blowup - as was previously done:
// Split into 4 pT ranges: <pT1_, pT1_<pT2_, pT2_<pT3_, <pT4_: 13,30,70
// Split into different eta ranges depending in pT
double abseta = std::abs(track->eta());
if (track->pt() <= pT1_) theSF = SF1_;
else if (track->pt() > pT1_ && track->pt() <= pT2_) {
  if (abseta <= eta3_) theSF = SF3_;
  else if (abseta > eta3_ && abseta <= eta6_) theSF = SF2_;
  else if (abseta > eta6_) theSF = SF3_;
}
else if (track->pt() > pT2_ && track->pt() <= pT3_) {
  if (abseta <= eta1_) theSF = SF6_;
  else if (abseta > eta1_  && abseta <= eta2_) theSF = SF4_;
  else if (abseta > eta2_  && abseta <= eta3_) theSF = SF6_;
  else if (abseta > eta3_ && abseta <= eta4_) theSF = SF1_;
  else if (abseta > eta4_ && abseta <= eta5_) theSF = SF1_;
  else if (abseta > eta5_ ) theSF = SF5_;
}
else if (track->pt() > pT3_) {
  if (abseta <= eta3_) theSF = SF5_;
  else if (abseta > eta3_ && abseta <= eta4_) theSF = SF4_;
  else if (abseta > eta4_ && abseta <= eta5_) theSF = SF4_;
  else if (abseta > eta5_ ) theSF = SF5_;
}
  
LogTrace(theCategory_) << ""TSGForOIFromL2::calculateSFFromL2: SF has been calculated as: "" << theSF;
  
return theSF;
  



 calculate Chi^2 of two trajectory states

uble TSGForOIFromL2::match_Chi2(const TrajectoryStateOnSurface& tsos1,
                          const TrajectoryStateOnSurface& tsos2) const {

if ( !tsos1.isValid() || !tsos2.isValid() ) return -1.;

AlgebraicVector5 v(tsos1.localParameters().vector() - tsos2.localParameters().vector());
AlgebraicSymMatrix55 m(tsos1.localError().matrix()  tsos2.localError().matrix());

bool ierr = !m.Invert();

if ( ierr ) {
  edm::LogInfo(""TSGForOIFromL2"") << ""Error inverting covariance matrix"";
  return -1;
}

double est = ROOT::Math::Similarity(v,m);

return est;







id TSGForOIFromL2::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {

edm::ParameterSetDescription desc;
desc.add<edm::InputTag>(""src"",edm::InputTag(""hltL2Muons"",""UpdatedAtVtx""));
desc.add<int>(""layersToTry"",2);
desc.add<double>(""fixedErrorRescaleFactorForHitless"",2.0);
desc.add<int>(""hitsToTry"",1);
desc.add<bool>(""adjustErrorsDynamicallyForHits"",false);
desc.add<bool>(""adjustErrorsDynamicallyForHitless"",true);
desc.add<edm::InputTag>(""MeasurementTrackerEvent"",edm::InputTag(""hltSiStripClusters""));
desc.add<bool>(""UseHitLessSeeds"",true);
desc.add<std::string>(""estimator"",""hltESPChi2MeasurementEstimator100"");
desc.add<double>(""maxEtaForTOB"",1.8);
desc.add<double>(""minEtaForTEC"",0.7);
desc.addUntracked<bool>(""debug"",false);
desc.add<double>(""fixedErrorRescaleFactorForHits"",1.0);
desc.add<unsigned int>(""maxSeeds"",20);
desc.add<unsigned int>(""maxHitlessSeeds"",5);
desc.add<unsigned int>(""maxHitSeeds"",1);
desc.add<unsigned int>(""numL2ValidHitsCutAllEta"",20);
desc.add<unsigned int>(""numL2ValidHitsCutAllEndcap"",30);
desc.add<double>(""pT1"",13.0);
desc.add<double>(""pT2"",30.0);
desc.add<double>(""pT3"",70.0);
desc.add<double>(""eta1"",0.2);
desc.add<double>(""eta2"",0.3);
desc.add<double>(""eta3"",1.0);
desc.add<double>(""eta4"",1.2);
desc.add<double>(""eta5"",1.6);
desc.add<double>(""eta6"",1.4);
desc.add<double>(""eta7"",2.1);
desc.add<double>(""SF1"",3.0);
desc.add<double>(""SF2"",4.0);
desc.add<double>(""SF3"",5.0);
desc.add<double>(""SF4"",7.0);
desc.add<double>(""SF5"",10.0);
desc.add<double>(""SF6"",2.0);
desc.add<double>(""tsosDiff1"",0.2);
desc.add<double>(""tsosDiff2"",0.02);
desc.add<std::string>(""propagatorName"",""PropagatorWithMaterialParabolicMf"");
descriptions.add(""TSGForOIFromL2"",desc);



FINE_FWK_MODULE(TSGForOIFromL2);
"
-------------------------------------------------------------------------
"Recom
PRs: 24267, 24324"
-------------------------------------------------------------------------
=========================================================================
"double absL2muonEta=std::abs(L2muonEta);
"
-------------------------------------------------------------------------
"/**
\class    TSGForOIFromL2
\brief    Create L3MuonTrajectorySeeds from L2 Muons updated at vertex in an outside-in manner
\author   Benjamin Radburn-Smith, Santiago Folgueras, Bibhuprasad Mahakud, Jan Frederik Schulte (Purdue University, West Lafayette, USA)
/

nclude ""RecoMuon/TrackerSeedGenerator/plugins/TSGForOIFromL2.h""
nclude ""DataFormats/TrackerCommon/interface/TrackerTopology.h""
nclude ""DataFormats/Math/interface/deltaR.h""

nclude <memory>


GForOIFromL2::TSGForOIFromL2(const edm::ParameterSet & iConfig) :
src_(consumes<reco::TrackCollection>(iConfig.getParameter<edm::InputTag>(""src""))),
maxSeeds_(iConfig.getParameter<uint32_t>(""maxSeeds"")),
maxHitlessSeeds_(iConfig.getParameter<uint32_t>(""maxHitlessSeeds"")),
maxHitSeeds_(iConfig.getParameter<uint32_t>(""maxHitSeeds"")),
numOfLayersToTry_(iConfig.getParameter<int32_t>(""layersToTry"")),
numOfHitsToTry_(iConfig.getParameter<int32_t>(""hitsToTry"")),
numL2ValidHitsCutAllEta_(iConfig.getParameter<uint32_t>(""numL2ValidHitsCutAllEta"")),
numL2ValidHitsCutAllEndcap_(iConfig.getParameter<uint32_t>(""numL2ValidHitsCutAllEndcap"")),  
fixedErrorRescalingForHits_(iConfig.getParameter<double>(""fixedErrorRescaleFactorForHits"")),
fixedErrorRescalingForHitless_(iConfig.getParameter<double>(""fixedErrorRescaleFactorForHitless"")),
adjustErrorsDynamicallyForHits_(iConfig.getParameter<bool>(""adjustErrorsDynamicallyForHits"")),
adjustErrorsDynamicallyForHitless_(iConfig.getParameter<bool>(""adjustErrorsDynamicallyForHitless"")),
estimatorName_(iConfig.getParameter<std::string>(""estimator"")),
minEtaForTEC_(iConfig.getParameter<double>(""minEtaForTEC"")),
maxEtaForTOB_(iConfig.getParameter<double>(""maxEtaForTOB"")),
useHitLessSeeds_(iConfig.getParameter<bool>(""UseHitLessSeeds"")),
updator_(new KFUpdator()), measurementTrackerTag_(consumes<MeasurementTrackerEvent>(iConfig.getParameter<edm::InputTag>(""MeasurementTrackerEvent""))),
pT1_(iConfig.getParameter<double>(""pT1"")),
pT2_(iConfig.getParameter<double>(""pT2"")),
pT3_(iConfig.getParameter<double>(""pT3"")),
eta1_(iConfig.getParameter<double>(""eta1"")),
eta2_(iConfig.getParameter<double>(""eta2"")),
eta3_(iConfig.getParameter<double>(""eta3"")),
eta4_(iConfig.getParameter<double>(""eta4"")),
eta5_(iConfig.getParameter<double>(""eta5"")),
eta6_(iConfig.getParameter<double>(""eta6"")),
eta7_(iConfig.getParameter<double>(""eta7"")),
SF1_(iConfig.getParameter<double>(""SF1"")),
SF2_(iConfig.getParameter<double>(""SF2"")),
SF3_(iConfig.getParameter<double>(""SF3"")),
SF4_(iConfig.getParameter<double>(""SF4"")),
SF5_(iConfig.getParameter<double>(""SF5"")),
SF6_(iConfig.getParameter<double>(""SF6"")),
tsosDiff1_(iConfig.getParameter<double>(""tsosDiff1"")),
tsosDiff2_(iConfig.getParameter<double>(""tsosDiff2"")),
propagatorName_(iConfig.getParameter<std::string>(""propagatorName"")), 
theCategory_(std::string(""Muon|RecoMuon|TSGForOIFromL2""))

produces<std::vector<TrajectorySeed> >();


GForOIFromL2::~TSGForOIFromL2() {




 Produce seeds

id TSGForOIFromL2::produce(edm::StreamID sid, edm::Event& iEvent, const edm::EventSetup& iSetup) const {

// Initialize variables
unsigned int numSeedsMade = 0;
unsigned int layerCount = 0;
unsigned int hitlessSeedsMadeIP = 0;
unsigned int hitlessSeedsMadeMuS = 0;
unsigned int hitSeedsMade = 0;

// Surface used to make a TSOS at the PCA to the beamline
Plane::PlanePointer dummyPlane = Plane::build(Plane::PositionType(), Plane::RotationType());

// Read ESHandles
edm::Handle<MeasurementTrackerEvent>          measurementTrackerH;
edm::ESHandle<Chi2MeasurementEstimatorBase>   estimatorH;
edm::ESHandle<MagneticField>                  magfieldH;
edm::ESHandle<Propagator>                     propagatorAlongH;
edm::ESHandle<Propagator>                     propagatorOppositeH;
edm::ESHandle<TrackerGeometry>                tmpTkGeometryH;
edm::ESHandle<GlobalTrackingGeometry>         geometryH;

iSetup.get<IdealMagneticFieldRecord>().get(magfieldH);
iSetup.get<TrackingComponentsRecord>().get(propagatorName_, propagatorOppositeH);
iSetup.get<TrackingComponentsRecord>().get(propagatorName_, propagatorAlongH);
iSetup.get<GlobalTrackingGeometryRecord>().get(geometryH);
iSetup.get<TrackerDigiGeometryRecord>().get(tmpTkGeometryH);
iSetup.get<TrackingComponentsRecord>().get(estimatorName_,estimatorH);
iEvent.getByToken(measurementTrackerTag_, measurementTrackerH);

// Read L2 track collection
edm::Handle<reco::TrackCollection> l2TrackCol;
iEvent.getByToken(src_, l2TrackCol);

// The product
std::unique_ptr<std::vector<TrajectorySeed> > result(new std::vector<TrajectorySeed>());

// Get vector of Detector layers
std::vector<BarrelDetLayer const*> const& tob = measurementTrackerH->geometricSearchTracker()->tobLayers();
std::vector<ForwardDetLayer const*> const& tecPositive = tmpTkGeometryH->isThere(GeomDetEnumerators::P2OTEC) ? 
                                                              measurementTrackerH->geometricSearchTracker()->posTidLayers() : 
                                                              measurementTrackerH->geometricSearchTracker()->posTecLayers(); 
std::vector<ForwardDetLayer const*> const& tecNegative = tmpTkGeometryH->isThere(GeomDetEnumerators::P2OTEC) ? 
                                                              measurementTrackerH->geometricSearchTracker()->negTidLayers() : 
                                                              measurementTrackerH->geometricSearchTracker()->negTecLayers();

// Get suitable propagators
std::unique_ptr<Propagator> propagatorAlong = SetPropagationDirection(*propagatorAlongH,alongMomentum);
std::unique_ptr<Propagator> propagatorOpposite = SetPropagationDirection(*propagatorOppositeH,oppositeToMomentum);

// Stepping Helix Propagator for propogation from muon system to tracker
edm::ESHandle<Propagator> SHPOpposite;
iSetup.get<TrackingComponentsRecord>().get(""hltESPSteppingHelixPropagatorOpposite"", SHPOpposite);

// Loop over the L2's and make seeds for all of them
LogTrace(theCategory_) << ""TSGForOIFromL2::produce: Number of L2's: "" << l2TrackCol->size();
for (unsigned int l2TrackColIndex(0); l2TrackColIndex!=l2TrackCol->size(); l2TrackColIndex) {

  const reco::TrackRef l2(l2TrackCol, l2TrackColIndex);

  // Container of Seeds
  std::vector<TrajectorySeed> out;
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: L2 muon pT, eta, phi --> "" << l2->pt() << "" , "" << l2->eta() << "" , "" << l2->phi() << std::endl;

  FreeTrajectoryState fts = trajectoryStateTransform::initialFreeState(*l2, magfieldH.product());

  dummyPlane->move(fts.position() - dummyPlane->position());
  TrajectoryStateOnSurface tsosAtIP = TrajectoryStateOnSurface(fts, *dummyPlane);
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: Created TSOSatIP: "" << tsosAtIP << std::endl;
  
  // Get the TSOS on the innermost layer of the L2
  TrajectoryStateOnSurface tsosAtMuonSystem = trajectoryStateTransform::innerStateOnSurface(*l2, *geometryH, magfieldH.product());
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: Created TSOSatMuonSystem: "" << tsosAtMuonSystem <<std::endl;
  
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: Check the error of the L2 parameter and use hit seeds if big errors"" << std::endl;

  StateOnTrackerBound fromInside(propagatorAlong.get());
  TrajectoryStateOnSurface outerTkStateInside = fromInside(fts);

  StateOnTrackerBound fromOutside(&*SHPOpposite);
  TrajectoryStateOnSurface outerTkStateOutside = fromOutside(tsosAtMuonSystem);

  // Check if the two positions (using updated and not-updated TSOS) agree withing certain extent.
  // If both TSOSs agree, use only the one at vertex, as it uses more information. If they do not agree, search for seeds based on both.
  double L2muonEta=l2->eta();
  double absL2muonEta=std::abs(L2muonEta);
  bool useBoth = false;
  if (outerTkStateInside.isValid() && outerTkStateOutside.isValid()) {
    //following commented out variables dist1 (5 par compatibility of tsos at outertracker surface)  
    //dist2 (angle between two tsos) could further be explored in combination of L2 valid hits for seeding. So kept for 
    //future developers 
    //auto dist1 = match_Chi2(outerTkStateInside,outerTkStateOutside);//for future developers
    //auto dist2 = deltaR(outerTkStateInside.globalMomentum(),outerTkStateOutside.globalMomentum());//for future developers
    //if ((dist1 > tsosDiff1_ || dist2 > tsosDiff2_) && l2->numberOfValidHits() < 20) useBoth = true;//for future developers
    if (l2->numberOfValidHits() < numL2ValidHitsCutAllEta_) useBoth = true;
    if (l2->numberOfValidHits() < numL2ValidHitsCutAllEndcap_ && absL2muonEta > eta7_) useBoth = true;
    if (absL2muonEta > eta1_ && absL2muonEta < eta1_) useBoth = true;
  }

  numSeedsMade = 0;
  hitlessSeedsMadeIP = 0;
  hitlessSeedsMadeMuS = 0;
  hitSeedsMade = 0;

  // calculate scale factors
  double errorSFHits = (adjustErrorsDynamicallyForHits_? calculateSFFromL2(l2) : fixedErrorRescalingForHits_);
  double errorSFHitless = (adjustErrorsDynamicallyForHitless_? calculateSFFromL2(l2) : fixedErrorRescalingForHitless_);

  // BARREL
  if (absL2muonEta < maxEtaForTOB_) {
    layerCount = 0;
    for (auto it=tob.rbegin(); it!=tob.rend(); it) { 
      LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: looping in TOB layer "" << layerCount << std::endl;
      if ( useHitLessSeeds_ && hitlessSeedsMadeIP < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsWithoutHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, errorSFHitless, hitlessSeedsMadeIP, numSeedsMade, out);

      // Do not create hitbased seeds in barrel region
      if (absL2muonEta > 1.0 && hitSeedsMade < maxHitSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsFromHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, measurementTrackerH, errorSFHits, hitSeedsMade, numSeedsMade, layerCount, out);

      if (useBoth) {
        if ( useHitLessSeeds_ && hitlessSeedsMadeMuS < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
           makeSeedsWithoutHits(**it, outerTkStateOutside, *(propagatorOpposite.get()), estimatorH, errorSFHitless, hitlessSeedsMadeMuS, numSeedsMade, out);
      }
    }
    LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2:::produce: NumSeedsMade = "" << numSeedsMade << "" , layerCount = "" << layerCount << std::endl;
  }

  // Reset number of seeds if in overlap region
  if (absL2muonEta > minEtaForTEC_ && absL2muonEta < maxEtaForTOB_) {
    numSeedsMade = 0;
    hitlessSeedsMadeIP = 0;
    hitlessSeedsMadeMuS = 0;
    hitSeedsMade = 0;
  }

  // ENDCAP
  if (L2muonEta > minEtaForTEC_) {
    layerCount = 0;
    for (auto it=tecPositive.rbegin(); it!=tecPositive.rend(); it) {
      LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: looping in TEC layer "" << layerCount << std::endl;
      if ( useHitLessSeeds_ && hitlessSeedsMadeIP < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsWithoutHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, errorSFHitless, hitlessSeedsMadeIP, numSeedsMade, out);

      if (absL2muonEta > 1.0 && hitSeedsMade < maxHitSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsFromHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, measurementTrackerH, errorSFHits, hitSeedsMade, numSeedsMade, layerCount, out);

      if (useBoth) {
        if ( useHitLessSeeds_ && hitlessSeedsMadeMuS < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
           makeSeedsWithoutHits(**it, outerTkStateOutside, *(propagatorOpposite.get()), estimatorH, errorSFHitless, hitlessSeedsMadeMuS, numSeedsMade, out);
      } 
    }
    LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2:::produce: NumSeedsMade = "" << numSeedsMade << "" , layerCount = "" << layerCount << std::endl;
  }

  // ENDCAP-
  if (L2muonEta < -minEtaForTEC_) {
    layerCount = 0;
    for (auto it=tecNegative.rbegin(); it!=tecNegative.rend(); it) {
      LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: looping in TEC- layer "" << layerCount << std::endl;
      if ( useHitLessSeeds_ && hitlessSeedsMadeIP < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsWithoutHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, errorSFHitless, hitlessSeedsMadeIP, numSeedsMade, out);

      if (absL2muonEta > 1.0 && hitSeedsMade < maxHitSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsFromHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, measurementTrackerH, errorSFHits, hitSeedsMade, numSeedsMade, layerCount, out);

      if (useBoth) {
        if ( useHitLessSeeds_ && hitlessSeedsMadeMuS < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
           makeSeedsWithoutHits(**it, outerTkStateOutside, *(propagatorOpposite.get()), estimatorH, errorSFHitless, hitlessSeedsMadeMuS, numSeedsMade, out);
      }
    }
    LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2:::produce: NumSeedsMade = "" << numSeedsMade << "" , layerCount = "" << layerCount << std::endl;
  }

  for (std::vector<TrajectorySeed>::iterator it=out.begin(); it!=out.end(); it) {
    result->push_back(*it);
  }

} // L2Collection

edm::LogInfo(theCategory_) << ""TSGForOIFromL2::produce: number of seeds made: "" << result->size();

iEvent.put(std::move(result));




 Create seeds without hits on a given layer (TOB or TEC)

id TSGForOIFromL2::makeSeedsWithoutHits(
                              const GeometricSearchDet& layer,
                              const TrajectoryStateOnSurface& tsos,
                              const Propagator& propagatorAlong,
                              edm::ESHandle<Chi2MeasurementEstimatorBase>& estimator,
                              double errorSF,
                              unsigned int& hitlessSeedsMade,
                              unsigned int& numSeedsMade,
                              std::vector<TrajectorySeed>& out) const {
  
// create hitless seeds
LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsWithoutHits: Start hitless"" << std::endl;
std::vector< GeometricSearchDet::DetWithState > dets;
layer.compatibleDetsV(tsos, propagatorAlong, *estimator, dets);
if (!dets.empty()) {
  auto const& detOnLayer = dets.front().first;
  auto const& tsosOnLayer = dets.front().second;
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsWithoutHits: tsosOnLayer "" << tsosOnLayer << std::endl;
  if (!tsosOnLayer.isValid()) {
    edm::LogInfo(theCategory_) << ""ERROR!: Hitless TSOS is not valid!"";
  }
  else {
    dets.front().second.rescaleError(errorSF);
    PTrajectoryStateOnDet const& ptsod = trajectoryStateTransform::persistentState(tsosOnLayer,detOnLayer->geographicalId().rawId());
    TrajectorySeed::recHitContainer rHC;
    out.push_back(TrajectorySeed(ptsod,rHC,oppositeToMomentum));
    LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsWithoutHits: TSOS (Hitless) done "" << std::endl;
    hitlessSeedsMade;
    numSeedsMade;
 }

  




 Find hits on a given layer (TOB or TEC) and create seeds from updated TSOS with hit

id TSGForOIFromL2::makeSeedsFromHits(
              const GeometricSearchDet& layer,
              const TrajectoryStateOnSurface& tsos,
              const Propagator& propagatorAlong,
              edm::ESHandle<Chi2MeasurementEstimatorBase>& estimator,
              edm::Handle<MeasurementTrackerEvent>& measurementTracker,
              double errorSF,
              unsigned int& hitSeedsMade,
              unsigned int& numSeedsMade,
              unsigned int& layerCount,
              std::vector<TrajectorySeed>& out) const {

if (layerCount > numOfLayersToTry_) return;

// Error Rescaling
TrajectoryStateOnSurface onLayer(tsos);
onLayer.rescaleError(errorSF);

std::vector< GeometricSearchDet::DetWithState > dets;
layer.compatibleDetsV(onLayer, propagatorAlong, *estimator, dets);

// Find Measurements on each DetWithState
LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsFromHits: Find measurements on each detWithState  "" << dets.size() << std::endl;
std::vector<TrajectoryMeasurement> meas;
for (std::vector<GeometricSearchDet::DetWithState>::iterator it=dets.begin(); it!=dets.end(); it) {
  MeasurementDetWithData det = measurementTracker->idToDet(it->first->geographicalId());
  if (det.isNull()) continue;
  if (!it->second.isValid()) continue;	// Skip if TSOS is not valid

  std::vector <TrajectoryMeasurement> mymeas = det.fastMeasurements(it->second, onLayer, propagatorAlong, *estimator);	// Second TSOS is not used
  for (std::vector<TrajectoryMeasurement>::const_iterator it2 = mymeas.begin(), ed2 = mymeas.end(); it2 != ed2; it2) {
    if (it2->recHit()->isValid()) meas.push_back(*it2);	// Only save those which are valid
  }
}

// Update TSOS using TMs after sorting, then create Trajectory Seed and put into vector
LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsFromHits: Update TSOS using TMs after sorting, then create Trajectory Seed, number of TM = "" << meas.size() << std::endl;
std::sort(meas.begin(), meas.end(), TrajMeasLessEstim());

unsigned int found = 0;
for (std::vector<TrajectoryMeasurement>::const_iterator it=meas.begin(); it!=meas.end(); it) {
  TrajectoryStateOnSurface updatedTSOS = updator_->update(it->forwardPredictedState(), *it->recHit());
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsFromHits: TSOS for TM "" << found << std::endl;
  if (not updatedTSOS.isValid()) continue;
  
  edm::OwnVector<TrackingRecHit> seedHits;
  seedHits.push_back(*it->recHit()->hit());
  PTrajectoryStateOnDet const& pstate = trajectoryStateTransform::persistentState(updatedTSOS, it->recHit()->geographicalId().rawId());
  TrajectorySeed seed(pstate, std::move(seedHits), oppositeToMomentum);
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsFromHits: Number of seedHits: "" << seedHits.size() << std::endl;
  out.push_back(seed);
  found;
  numSeedsMade;
  hitSeedsMade;
  if (found == numOfHitsToTry_) break;
  if (hitSeedsMade > maxHitSeeds_) return;
}

if (found) layerCount;





 Calculate the dynamic error SF by analysing the L2

uble TSGForOIFromL2::calculateSFFromL2(const reco::TrackRef track) const {
  
double theSF = 1.0;
// L2 direction vs pT blowup - as was previously done:
// Split into 4 pT ranges: <pT1_, pT1_<pT2_, pT2_<pT3_, <pT4_: 13,30,70
// Split into different eta ranges depending in pT
double abseta = std::abs(track->eta());
if (track->pt() <= pT1_) theSF = SF1_;
else if (track->pt() > pT1_ && track->pt() <= pT2_) {
  if (abseta <= eta3_) theSF = SF3_;
  else if (abseta > eta3_ && abseta <= eta6_) theSF = SF2_;
  else if (abseta > eta6_) theSF = SF3_;
}
else if (track->pt() > pT2_ && track->pt() <= pT3_) {
  if (abseta <= eta1_) theSF = SF6_;
  else if (abseta > eta1_  && abseta <= eta2_) theSF = SF4_;
  else if (abseta > eta2_  && abseta <= eta3_) theSF = SF6_;
  else if (abseta > eta3_ && abseta <= eta4_) theSF = SF1_;
  else if (abseta > eta4_ && abseta <= eta5_) theSF = SF1_;
  else if (abseta > eta5_ ) theSF = SF5_;
}
else if (track->pt() > pT3_) {
  if (abseta <= eta3_) theSF = SF5_;
  else if (abseta > eta3_ && abseta <= eta4_) theSF = SF4_;
  else if (abseta > eta4_ && abseta <= eta5_) theSF = SF4_;
  else if (abseta > eta5_ ) theSF = SF5_;
}
  
LogTrace(theCategory_) << ""TSGForOIFromL2::calculateSFFromL2: SF has been calculated as: "" << theSF;
  
return theSF;
  



 calculate Chi^2 of two trajectory states

uble TSGForOIFromL2::match_Chi2(const TrajectoryStateOnSurface& tsos1,
                          const TrajectoryStateOnSurface& tsos2) const {

if ( !tsos1.isValid() || !tsos2.isValid() ) return -1.;

AlgebraicVector5 v(tsos1.localParameters().vector() - tsos2.localParameters().vector());
AlgebraicSymMatrix55 m(tsos1.localError().matrix()  tsos2.localError().matrix());

bool ierr = !m.Invert();

if ( ierr ) {
  edm::LogInfo(""TSGForOIFromL2"") << ""Error inverting covariance matrix"";
  return -1;
}

double est = ROOT::Math::Similarity(v,m);

return est;







id TSGForOIFromL2::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {

edm::ParameterSetDescription desc;
desc.add<edm::InputTag>(""src"",edm::InputTag(""hltL2Muons"",""UpdatedAtVtx""));
desc.add<int>(""layersToTry"",2);
desc.add<double>(""fixedErrorRescaleFactorForHitless"",2.0);
desc.add<int>(""hitsToTry"",1);
desc.add<bool>(""adjustErrorsDynamicallyForHits"",false);
desc.add<bool>(""adjustErrorsDynamicallyForHitless"",true);
desc.add<edm::InputTag>(""MeasurementTrackerEvent"",edm::InputTag(""hltSiStripClusters""));
desc.add<bool>(""UseHitLessSeeds"",true);
desc.add<std::string>(""estimator"",""hltESPChi2MeasurementEstimator100"");
desc.add<double>(""maxEtaForTOB"",1.8);
desc.add<double>(""minEtaForTEC"",0.7);
desc.addUntracked<bool>(""debug"",false);
desc.add<double>(""fixedErrorRescaleFactorForHits"",1.0);
desc.add<unsigned int>(""maxSeeds"",20);
desc.add<unsigned int>(""maxHitlessSeeds"",5);
desc.add<unsigned int>(""maxHitSeeds"",1);
desc.add<unsigned int>(""numL2ValidHitsCutAllEta"",20);
desc.add<unsigned int>(""numL2ValidHitsCutAllEndcap"",30);
desc.add<double>(""pT1"",13.0);
desc.add<double>(""pT2"",30.0);
desc.add<double>(""pT3"",70.0);
desc.add<double>(""eta1"",0.2);
desc.add<double>(""eta2"",0.3);
desc.add<double>(""eta3"",1.0);
desc.add<double>(""eta4"",1.2);
desc.add<double>(""eta5"",1.6);
desc.add<double>(""eta6"",1.4);
desc.add<double>(""eta7"",2.1);
desc.add<double>(""SF1"",3.0);
desc.add<double>(""SF2"",4.0);
desc.add<double>(""SF3"",5.0);
desc.add<double>(""SF4"",7.0);
desc.add<double>(""SF5"",10.0);
desc.add<double>(""SF6"",2.0);
desc.add<double>(""tsosDiff1"",0.2);
desc.add<double>(""tsosDiff2"",0.02);
desc.add<std::string>(""propagatorName"",""PropagatorWithMaterialParabolicMf"");
descriptions.add(""TSGForOIFromL2"",desc);



FINE_FWK_MODULE(TSGForOIFromL2);
"
-------------------------------------------------------------------------
"/**
\class    TSGForOIFromL2
\brief    Create L3MuonTrajectorySeeds from L2 Muons updated at vertex in an outside-in manner
\author   Benjamin Radburn-Smith, Santiago Folgueras, Bibhuprasad Mahakud, Jan Frederik Schulte (Purdue University, West Lafayette, USA)
/

nclude ""RecoMuon/TrackerSeedGenerator/plugins/TSGForOIFromL2.h""
nclude ""DataFormats/TrackerCommon/interface/TrackerTopology.h""
nclude ""DataFormats/Math/interface/deltaR.h""

nclude <memory>


GForOIFromL2::TSGForOIFromL2(const edm::ParameterSet & iConfig) :
src_(consumes<reco::TrackCollection>(iConfig.getParameter<edm::InputTag>(""src""))),
maxSeeds_(iConfig.getParameter<uint32_t>(""maxSeeds"")),
maxHitlessSeeds_(iConfig.getParameter<uint32_t>(""maxHitlessSeeds"")),
maxHitSeeds_(iConfig.getParameter<uint32_t>(""maxHitSeeds"")),
numOfLayersToTry_(iConfig.getParameter<int32_t>(""layersToTry"")),
numOfHitsToTry_(iConfig.getParameter<int32_t>(""hitsToTry"")),
numL2ValidHitsCutAllEta_(iConfig.getParameter<uint32_t>(""numL2ValidHitsCutAllEta"")),
numL2ValidHitsCutAllEndcap_(iConfig.getParameter<uint32_t>(""numL2ValidHitsCutAllEndcap"")),  
fixedErrorRescalingForHits_(iConfig.getParameter<double>(""fixedErrorRescaleFactorForHits"")),
fixedErrorRescalingForHitless_(iConfig.getParameter<double>(""fixedErrorRescaleFactorForHitless"")),
adjustErrorsDynamicallyForHits_(iConfig.getParameter<bool>(""adjustErrorsDynamicallyForHits"")),
adjustErrorsDynamicallyForHitless_(iConfig.getParameter<bool>(""adjustErrorsDynamicallyForHitless"")),
estimatorName_(iConfig.getParameter<std::string>(""estimator"")),
minEtaForTEC_(iConfig.getParameter<double>(""minEtaForTEC"")),
maxEtaForTOB_(iConfig.getParameter<double>(""maxEtaForTOB"")),
useHitLessSeeds_(iConfig.getParameter<bool>(""UseHitLessSeeds"")),
updator_(new KFUpdator()), measurementTrackerTag_(consumes<MeasurementTrackerEvent>(iConfig.getParameter<edm::InputTag>(""MeasurementTrackerEvent""))),
pT1_(iConfig.getParameter<double>(""pT1"")),
pT2_(iConfig.getParameter<double>(""pT2"")),
pT3_(iConfig.getParameter<double>(""pT3"")),
eta1_(iConfig.getParameter<double>(""eta1"")),
eta2_(iConfig.getParameter<double>(""eta2"")),
eta3_(iConfig.getParameter<double>(""eta3"")),
eta4_(iConfig.getParameter<double>(""eta4"")),
eta5_(iConfig.getParameter<double>(""eta5"")),
eta6_(iConfig.getParameter<double>(""eta6"")),
eta7_(iConfig.getParameter<double>(""eta7"")),
SF1_(iConfig.getParameter<double>(""SF1"")),
SF2_(iConfig.getParameter<double>(""SF2"")),
SF3_(iConfig.getParameter<double>(""SF3"")),
SF4_(iConfig.getParameter<double>(""SF4"")),
SF5_(iConfig.getParameter<double>(""SF5"")),
SF6_(iConfig.getParameter<double>(""SF6"")),
tsosDiff1_(iConfig.getParameter<double>(""tsosDiff1"")),
tsosDiff2_(iConfig.getParameter<double>(""tsosDiff2"")),
propagatorName_(iConfig.getParameter<std::string>(""propagatorName"")), 
theCategory_(std::string(""Muon|RecoMuon|TSGForOIFromL2""))

produces<std::vector<TrajectorySeed> >();


GForOIFromL2::~TSGForOIFromL2() {




 Produce seeds

id TSGForOIFromL2::produce(edm::StreamID sid, edm::Event& iEvent, const edm::EventSetup& iSetup) const {

// Initialize variables
unsigned int numSeedsMade = 0;
unsigned int layerCount = 0;
unsigned int hitlessSeedsMadeIP = 0;
unsigned int hitlessSeedsMadeMuS = 0;
unsigned int hitSeedsMade = 0;

// Surface used to make a TSOS at the PCA to the beamline
Plane::PlanePointer dummyPlane = Plane::build(Plane::PositionType(), Plane::RotationType());

// Read ESHandles
edm::Handle<MeasurementTrackerEvent>          measurementTrackerH;
edm::ESHandle<Chi2MeasurementEstimatorBase>   estimatorH;
edm::ESHandle<MagneticField>                  magfieldH;
edm::ESHandle<Propagator>                     propagatorAlongH;
edm::ESHandle<Propagator>                     propagatorOppositeH;
edm::ESHandle<TrackerGeometry>                tmpTkGeometryH;
edm::ESHandle<GlobalTrackingGeometry>         geometryH;

iSetup.get<IdealMagneticFieldRecord>().get(magfieldH);
iSetup.get<TrackingComponentsRecord>().get(propagatorName_, propagatorOppositeH);
iSetup.get<TrackingComponentsRecord>().get(propagatorName_, propagatorAlongH);
iSetup.get<GlobalTrackingGeometryRecord>().get(geometryH);
iSetup.get<TrackerDigiGeometryRecord>().get(tmpTkGeometryH);
iSetup.get<TrackingComponentsRecord>().get(estimatorName_,estimatorH);
iEvent.getByToken(measurementTrackerTag_, measurementTrackerH);

// Read L2 track collection
edm::Handle<reco::TrackCollection> l2TrackCol;
iEvent.getByToken(src_, l2TrackCol);

// The product
std::unique_ptr<std::vector<TrajectorySeed> > result(new std::vector<TrajectorySeed>());

// Get vector of Detector layers
std::vector<BarrelDetLayer const*> const& tob = measurementTrackerH->geometricSearchTracker()->tobLayers();
std::vector<ForwardDetLayer const*> const& tecPositive = tmpTkGeometryH->isThere(GeomDetEnumerators::P2OTEC) ? 
                                                              measurementTrackerH->geometricSearchTracker()->posTidLayers() : 
                                                              measurementTrackerH->geometricSearchTracker()->posTecLayers(); 
std::vector<ForwardDetLayer const*> const& tecNegative = tmpTkGeometryH->isThere(GeomDetEnumerators::P2OTEC) ? 
                                                              measurementTrackerH->geometricSearchTracker()->negTidLayers() : 
                                                              measurementTrackerH->geometricSearchTracker()->negTecLayers();

// Get suitable propagators
std::unique_ptr<Propagator> propagatorAlong = SetPropagationDirection(*propagatorAlongH,alongMomentum);
std::unique_ptr<Propagator> propagatorOpposite = SetPropagationDirection(*propagatorOppositeH,oppositeToMomentum);

// Stepping Helix Propagator for propogation from muon system to tracker
edm::ESHandle<Propagator> SHPOpposite;
iSetup.get<TrackingComponentsRecord>().get(""hltESPSteppingHelixPropagatorOpposite"", SHPOpposite);

// Loop over the L2's and make seeds for all of them
LogTrace(theCategory_) << ""TSGForOIFromL2::produce: Number of L2's: "" << l2TrackCol->size();
for (unsigned int l2TrackColIndex(0); l2TrackColIndex!=l2TrackCol->size(); l2TrackColIndex) {

  const reco::TrackRef l2(l2TrackCol, l2TrackColIndex);

  // Container of Seeds
  std::vector<TrajectorySeed> out;
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: L2 muon pT, eta, phi --> "" << l2->pt() << "" , "" << l2->eta() << "" , "" << l2->phi() << std::endl;

  FreeTrajectoryState fts = trajectoryStateTransform::initialFreeState(*l2, magfieldH.product());

  dummyPlane->move(fts.position() - dummyPlane->position());
  TrajectoryStateOnSurface tsosAtIP = TrajectoryStateOnSurface(fts, *dummyPlane);
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: Created TSOSatIP: "" << tsosAtIP << std::endl;
  
  // Get the TSOS on the innermost layer of the L2
  TrajectoryStateOnSurface tsosAtMuonSystem = trajectoryStateTransform::innerStateOnSurface(*l2, *geometryH, magfieldH.product());
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: Created TSOSatMuonSystem: "" << tsosAtMuonSystem <<std::endl;
  
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: Check the error of the L2 parameter and use hit seeds if big errors"" << std::endl;

  StateOnTrackerBound fromInside(propagatorAlong.get());
  TrajectoryStateOnSurface outerTkStateInside = fromInside(fts);

  StateOnTrackerBound fromOutside(&*SHPOpposite);
  TrajectoryStateOnSurface outerTkStateOutside = fromOutside(tsosAtMuonSystem);

  // Check if the two positions (using updated and not-updated TSOS) agree withing certain extent.
  // If both TSOSs agree, use only the one at vertex, as it uses more information. If they do not agree, search for seeds based on both.
  double L2muonEta=l2->eta();
  double absL2muonEta=std::abs(L2muonEta);
  bool useBoth = false;
  if (outerTkStateInside.isValid() && outerTkStateOutside.isValid()) {
    //following commented out variables dist1 (5 par compatibility of tsos at outertracker surface)  
    //dist2 (angle between two tsos) could further be explored in combination of L2 valid hits for seeding. So kept for 
    //future developers 
    //auto dist1 = match_Chi2(outerTkStateInside,outerTkStateOutside);//for future developers
    //auto dist2 = deltaR(outerTkStateInside.globalMomentum(),outerTkStateOutside.globalMomentum());//for future developers
    //if ((dist1 > tsosDiff1_ || dist2 > tsosDiff2_) && l2->numberOfValidHits() < 20) useBoth = true;//for future developers
    if (l2->numberOfValidHits() < numL2ValidHitsCutAllEta_) useBoth = true;
    if (l2->numberOfValidHits() < numL2ValidHitsCutAllEndcap_ && absL2muonEta > eta7_) useBoth = true;
    if (absL2muonEta > eta1_ && absL2muonEta < eta1_) useBoth = true;
  }

  numSeedsMade = 0;
  hitlessSeedsMadeIP = 0;
  hitlessSeedsMadeMuS = 0;
  hitSeedsMade = 0;

  // calculate scale factors
  double errorSFHits = (adjustErrorsDynamicallyForHits_? calculateSFFromL2(l2) : fixedErrorRescalingForHits_);
  double errorSFHitless = (adjustErrorsDynamicallyForHitless_? calculateSFFromL2(l2) : fixedErrorRescalingForHitless_);

  // BARREL
  if (absL2muonEta < maxEtaForTOB_) {
    layerCount = 0;
    for (auto it=tob.rbegin(); it!=tob.rend(); it) { 
      LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: looping in TOB layer "" << layerCount << std::endl;
      if ( useHitLessSeeds_ && hitlessSeedsMadeIP < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsWithoutHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, errorSFHitless, hitlessSeedsMadeIP, numSeedsMade, out);

      // Do not create hitbased seeds in barrel region
      if (absL2muonEta > 1.0 && hitSeedsMade < maxHitSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsFromHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, measurementTrackerH, errorSFHits, hitSeedsMade, numSeedsMade, layerCount, out);

      if (useBoth) {
        if ( useHitLessSeeds_ && hitlessSeedsMadeMuS < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
           makeSeedsWithoutHits(**it, outerTkStateOutside, *(propagatorOpposite.get()), estimatorH, errorSFHitless, hitlessSeedsMadeMuS, numSeedsMade, out);
      }
    }
    LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2:::produce: NumSeedsMade = "" << numSeedsMade << "" , layerCount = "" << layerCount << std::endl;
  }

  // Reset number of seeds if in overlap region
  if (absL2muonEta > minEtaForTEC_ && absL2muonEta < maxEtaForTOB_) {
    numSeedsMade = 0;
    hitlessSeedsMadeIP = 0;
    hitlessSeedsMadeMuS = 0;
    hitSeedsMade = 0;
  }

  // ENDCAP
  if (L2muonEta > minEtaForTEC_) {
    layerCount = 0;
    for (auto it=tecPositive.rbegin(); it!=tecPositive.rend(); it) {
      LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: looping in TEC layer "" << layerCount << std::endl;
      if ( useHitLessSeeds_ && hitlessSeedsMadeIP < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsWithoutHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, errorSFHitless, hitlessSeedsMadeIP, numSeedsMade, out);

      if (absL2muonEta > 1.0 && hitSeedsMade < maxHitSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsFromHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, measurementTrackerH, errorSFHits, hitSeedsMade, numSeedsMade, layerCount, out);

      if (useBoth) {
        if ( useHitLessSeeds_ && hitlessSeedsMadeMuS < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
           makeSeedsWithoutHits(**it, outerTkStateOutside, *(propagatorOpposite.get()), estimatorH, errorSFHitless, hitlessSeedsMadeMuS, numSeedsMade, out);
      } 
    }
    LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2:::produce: NumSeedsMade = "" << numSeedsMade << "" , layerCount = "" << layerCount << std::endl;
  }

  // ENDCAP-
  if (L2muonEta < -minEtaForTEC_) {
    layerCount = 0;
    for (auto it=tecNegative.rbegin(); it!=tecNegative.rend(); it) {
      LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::produce: looping in TEC- layer "" << layerCount << std::endl;
      if ( useHitLessSeeds_ && hitlessSeedsMadeIP < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsWithoutHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, errorSFHitless, hitlessSeedsMadeIP, numSeedsMade, out);

      if (absL2muonEta > 1.0 && hitSeedsMade < maxHitSeeds_ && numSeedsMade < maxSeeds_ ) 
         makeSeedsFromHits(**it, tsosAtIP, *(propagatorAlong.get()), estimatorH, measurementTrackerH, errorSFHits, hitSeedsMade, numSeedsMade, layerCount, out);

      if (useBoth) {
        if ( useHitLessSeeds_ && hitlessSeedsMadeMuS < maxHitlessSeeds_ && numSeedsMade < maxSeeds_ ) 
           makeSeedsWithoutHits(**it, outerTkStateOutside, *(propagatorOpposite.get()), estimatorH, errorSFHitless, hitlessSeedsMadeMuS, numSeedsMade, out);
      }
    }
    LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2:::produce: NumSeedsMade = "" << numSeedsMade << "" , layerCount = "" << layerCount << std::endl;
  }

  for (std::vector<TrajectorySeed>::iterator it=out.begin(); it!=out.end(); it) {
    result->push_back(*it);
  }

} // L2Collection

edm::LogInfo(theCategory_) << ""TSGForOIFromL2::produce: number of seeds made: "" << result->size();

iEvent.put(std::move(result));




 Create seeds without hits on a given layer (TOB or TEC)

id TSGForOIFromL2::makeSeedsWithoutHits(
                              const GeometricSearchDet& layer,
                              const TrajectoryStateOnSurface& tsos,
                              const Propagator& propagatorAlong,
                              edm::ESHandle<Chi2MeasurementEstimatorBase>& estimator,
                              double errorSF,
                              unsigned int& hitlessSeedsMade,
                              unsigned int& numSeedsMade,
                              std::vector<TrajectorySeed>& out) const {
  
// create hitless seeds
LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsWithoutHits: Start hitless"" << std::endl;
std::vector< GeometricSearchDet::DetWithState > dets;
layer.compatibleDetsV(tsos, propagatorAlong, *estimator, dets);
if (!dets.empty()) {
  auto const& detOnLayer = dets.front().first;
  auto const& tsosOnLayer = dets.front().second;
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsWithoutHits: tsosOnLayer "" << tsosOnLayer << std::endl;
  if (!tsosOnLayer.isValid()) {
    edm::LogInfo(theCategory_) << ""ERROR!: Hitless TSOS is not valid!"";
  }
  else {
    dets.front().second.rescaleError(errorSF);
    PTrajectoryStateOnDet const& ptsod = trajectoryStateTransform::persistentState(tsosOnLayer,detOnLayer->geographicalId().rawId());
    TrajectorySeed::recHitContainer rHC;
    out.push_back(TrajectorySeed(ptsod,rHC,oppositeToMomentum));
    LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsWithoutHits: TSOS (Hitless) done "" << std::endl;
    hitlessSeedsMade;
    numSeedsMade;
 }

  




 Find hits on a given layer (TOB or TEC) and create seeds from updated TSOS with hit

id TSGForOIFromL2::makeSeedsFromHits(
              const GeometricSearchDet& layer,
              const TrajectoryStateOnSurface& tsos,
              const Propagator& propagatorAlong,
              edm::ESHandle<Chi2MeasurementEstimatorBase>& estimator,
              edm::Handle<MeasurementTrackerEvent>& measurementTracker,
              double errorSF,
              unsigned int& hitSeedsMade,
              unsigned int& numSeedsMade,
              unsigned int& layerCount,
              std::vector<TrajectorySeed>& out) const {

if (layerCount > numOfLayersToTry_) return;

// Error Rescaling
TrajectoryStateOnSurface onLayer(tsos);
onLayer.rescaleError(errorSF);

std::vector< GeometricSearchDet::DetWithState > dets;
layer.compatibleDetsV(onLayer, propagatorAlong, *estimator, dets);

// Find Measurements on each DetWithState
LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsFromHits: Find measurements on each detWithState  "" << dets.size() << std::endl;
std::vector<TrajectoryMeasurement> meas;
for (std::vector<GeometricSearchDet::DetWithState>::iterator it=dets.begin(); it!=dets.end(); it) {
  MeasurementDetWithData det = measurementTracker->idToDet(it->first->geographicalId());
  if (det.isNull()) continue;
  if (!it->second.isValid()) continue;	// Skip if TSOS is not valid

  std::vector <TrajectoryMeasurement> mymeas = det.fastMeasurements(it->second, onLayer, propagatorAlong, *estimator);	// Second TSOS is not used
  for (std::vector<TrajectoryMeasurement>::const_iterator it2 = mymeas.begin(), ed2 = mymeas.end(); it2 != ed2; it2) {
    if (it2->recHit()->isValid()) meas.push_back(*it2);	// Only save those which are valid
  }
}

// Update TSOS using TMs after sorting, then create Trajectory Seed and put into vector
LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsFromHits: Update TSOS using TMs after sorting, then create Trajectory Seed, number of TM = "" << meas.size() << std::endl;
std::sort(meas.begin(), meas.end(), TrajMeasLessEstim());

unsigned int found = 0;
for (std::vector<TrajectoryMeasurement>::const_iterator it=meas.begin(); it!=meas.end(); it) {
  TrajectoryStateOnSurface updatedTSOS = updator_->update(it->forwardPredictedState(), *it->recHit());
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsFromHits: TSOS for TM "" << found << std::endl;
  if (not updatedTSOS.isValid()) continue;
  
  edm::OwnVector<TrackingRecHit> seedHits;
  seedHits.push_back(*it->recHit()->hit());
  PTrajectoryStateOnDet const& pstate = trajectoryStateTransform::persistentState(updatedTSOS, it->recHit()->geographicalId().rawId());
  TrajectorySeed seed(pstate, std::move(seedHits), oppositeToMomentum);
  LogTrace(""TSGForOIFromL2"") << ""TSGForOIFromL2::makeSeedsFromHits: Number of seedHits: "" << seedHits.size() << std::endl;
  out.push_back(seed);
  found;
  numSeedsMade;
  hitSeedsMade;
  if (found == numOfHitsToTry_) break;
  if (hitSeedsMade > maxHitSeeds_) return;
}

if (found) layerCount;





 Calculate the dynamic error SF by analysing the L2

uble TSGForOIFromL2::calculateSFFromL2(const reco::TrackRef track) const {
  
double theSF = 1.0;
// L2 direction vs pT blowup - as was previously done:
// Split into 4 pT ranges: <pT1_, pT1_<pT2_, pT2_<pT3_, <pT4_: 13,30,70
// Split into different eta ranges depending in pT
double abseta = std::abs(track->eta());
if (track->pt() <= pT1_) theSF = SF1_;
else if (track->pt() > pT1_ && track->pt() <= pT2_) {
  if (abseta <= eta3_) theSF = SF3_;
  else if (abseta > eta3_ && abseta <= eta6_) theSF = SF2_;
  else if (abseta > eta6_) theSF = SF3_;
}
else if (track->pt() > pT2_ && track->pt() <= pT3_) {
  if (abseta <= eta1_) theSF = SF6_;
  else if (abseta > eta1_  && abseta <= eta2_) theSF = SF4_;
  else if (abseta > eta2_  && abseta <= eta3_) theSF = SF6_;
  else if (abseta > eta3_ && abseta <= eta4_) theSF = SF1_;
  else if (abseta > eta4_ && abseta <= eta5_) theSF = SF1_;
  else if (abseta > eta5_ ) theSF = SF5_;
}
else if (track->pt() > pT3_) {
  if (abseta <= eta3_) theSF = SF5_;
  else if (abseta > eta3_ && abseta <= eta4_) theSF = SF4_;
  else if (abseta > eta4_ && abseta <= eta5_) theSF = SF4_;
  else if (abseta > eta5_ ) theSF = SF5_;
}
  
LogTrace(theCategory_) << ""TSGForOIFromL2::calculateSFFromL2: SF has been calculated as: "" << theSF;
  
return theSF;
  



 calculate Chi^2 of two trajectory states

uble TSGForOIFromL2::match_Chi2(const TrajectoryStateOnSurface& tsos1,
                          const TrajectoryStateOnSurface& tsos2) const {

if ( !tsos1.isValid() || !tsos2.isValid() ) return -1.;

AlgebraicVector5 v(tsos1.localParameters().vector() - tsos2.localParameters().vector());
AlgebraicSymMatrix55 m(tsos1.localError().matrix()  tsos2.localError().matrix());

bool ierr = !m.Invert();

if ( ierr ) {
  edm::LogInfo(""TSGForOIFromL2"") << ""Error inverting covariance matrix"";
  return -1;
}

double est = ROOT::Math::Similarity(v,m);

return est;







id TSGForOIFromL2::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {

edm::ParameterSetDescription desc;
desc.add<edm::InputTag>(""src"",edm::InputTag(""hltL2Muons"",""UpdatedAtVtx""));
desc.add<int>(""layersToTry"",2);
desc.add<double>(""fixedErrorRescaleFactorForHitless"",2.0);
desc.add<int>(""hitsToTry"",1);
desc.add<bool>(""adjustErrorsDynamicallyForHits"",false);
desc.add<bool>(""adjustErrorsDynamicallyForHitless"",true);
desc.add<edm::InputTag>(""MeasurementTrackerEvent"",edm::InputTag(""hltSiStripClusters""));
desc.add<bool>(""UseHitLessSeeds"",true);
desc.add<std::string>(""estimator"",""hltESPChi2MeasurementEstimator100"");
desc.add<double>(""maxEtaForTOB"",1.8);
desc.add<double>(""minEtaForTEC"",0.7);
desc.addUntracked<bool>(""debug"",false);
desc.add<double>(""fixedErrorRescaleFactorForHits"",1.0);
desc.add<unsigned int>(""maxSeeds"",20);
desc.add<unsigned int>(""maxHitlessSeeds"",5);
desc.add<unsigned int>(""maxHitSeeds"",1);
desc.add<unsigned int>(""numL2ValidHitsCutAllEta"",20);
desc.add<unsigned int>(""numL2ValidHitsCutAllEndcap"",30);
desc.add<double>(""pT1"",13.0);
desc.add<double>(""pT2"",30.0);
desc.add<double>(""pT3"",70.0);
desc.add<double>(""eta1"",0.2);
desc.add<double>(""eta2"",0.3);
desc.add<double>(""eta3"",1.0);
desc.add<double>(""eta4"",1.2);
desc.add<double>(""eta5"",1.6);
desc.add<double>(""eta6"",1.4);
desc.add<double>(""eta7"",2.1);
desc.add<double>(""SF1"",3.0);
desc.add<double>(""SF2"",4.0);
desc.add<double>(""SF3"",5.0);
desc.add<double>(""SF4"",7.0);
desc.add<double>(""SF5"",10.0);
desc.add<double>(""SF6"",2.0);
desc.add<double>(""tsosDiff1"",0.2);
desc.add<double>(""tsosDiff2"",0.02);
desc.add<std::string>(""propagatorName"",""PropagatorWithMaterialParabolicMf"");
descriptions.add(""TSGForOIFromL2"",desc);



FINE_FWK_MODULE(TSGForOIFromL2);
"
-------------------------------------------------------------------------
"Recom
PRs: 24267, 24323"
-------------------------------------------------------------------------
=========================================================================
"versionOverrides={'BuMixing_BMuonFilter_forSTEAM_13TeV_TuneCUETP8M1_2017':'2','SingleElectronPt10_pythia8_2017':'2','HSCPstop_M_200_TuneCUETP8M1_13TeV_pythia8_2017':'2','RSGravitonToGammaGamma_kMpl01_M_3000_TuneCUETP8M1_13TeV_pythia8_2017':'2','WprimeToENu_M-2000_TuneCUETP8M1_13TeV-pythia8_2017':'2','DisplacedSUSY_stopToBottom_M_300_1000mm_TuneCUETP8M1_13TeV_pythia8_2017':'2','TenE_E_0_200_pythia8_2017':'2','TenE_E_0_200_pythia8_2017PU':'2'}
"
-------------------------------------------------------------------------
"'CMSSW_10_2_0-102X_mcRun2_asymptotic_v3_gcc7_FastSim-v1',    # 7 - fastSim MinBias for mixing
'CMSSW_10_2_0-PU25ns_102X_mcRun2_asymptotic_v3_gcc7_FastSim-v1',# 8 - fastSim premixed MinBias
'CMSSW_10_2_0-102X_upgrade2018_realistic_v9_gcc7-v1',        # 9 - Run2 HI GEN-SIM for mixing
'CMSSW_10_2_0-PU25ns_102X_upgrade2018_realistic_v9_gcc7-v1',  #15 - fullSim PU 25ns UP18 premix
'CMSSW_10_2_0-102X_upgrade2018_realistic_v9_gcc7-v1',  #16 - GENSIM input 2018
"
-------------------------------------------------------------------------
"'CMSSW_10_2_0-102X_mcRun2_asymptotic_v3_gcc7_FastSim-v1',    # 7 - fastSim MinBias for mixing
'CMSSW_10_2_0-PU25ns_102X_mcRun2_asymptotic_v3_gcc7_FastSim-v1',# 8 - fastSim premixed MinBias
'CMSSW_10_2_0-102X_upgrade2018_realistic_v9_gcc7-v1',        # 9 - Run2 HI GEN-SIM for mixing
'CMSSW_10_2_0-PU25ns_102X_upgrade2018_realistic_v9_gcc7-v1',  #15 - fullSim PU 25ns UP18 premix
'CMSSW_10_2_0-102X_upgrade2018_realistic_v9_gcc7-v1',  #16 - GENSIM input 2018
"
-------------------------------------------------------------------------
"Recom
PRs: 23955, 24024"
-------------------------------------------------------------------------
=========================================================================
"
bool pass = HasAdditionalBHadron(*genBHadIndex,*genBHadFlavour,*genBHadPlusMothers,AllTopMothers);

iEvent.put(std::make_unique<bool>(pass));

return taggingMode_ || pass;
"
-------------------------------------------------------------------------
"bool pass = HasAdditionalBHadron(*genBHadIndex,*genBHadFlavour,*genBHadPlusMothers,AllTopMothers);

iEvent.put(std::make_unique<bool>(pass));
return taggingMode_ || pass;
"
-------------------------------------------------------------------------
"bool pass = HasAdditionalBHadron(*genBHadIndex,*genBHadFlavour,*genBHadPlusMothers,AllTopMothers);

iEvent.put(std::make_unique<bool>(pass));
return taggingMode_ || pass;
"
-------------------------------------------------------------------------
"Recom
PRs: 21743, 23167"
-------------------------------------------------------------------------
=========================================================================
"OnlyHardProcessBHadrons = cms.bool(False),
taggingMode               = cms.bool(False)
"
-------------------------------------------------------------------------
"OnlyHardProcessBHadrons = cms.bool(False),
taggingMode             = cms.bool(False)
"
-------------------------------------------------------------------------
"OnlyHardProcessBHadrons = cms.bool(False),
taggingMode             = cms.bool(False)
"
-------------------------------------------------------------------------
"Recom
PRs: 21743, 23167"
-------------------------------------------------------------------------
=========================================================================
"
DoubleMu33NoFiltersNoVtxDisplaced_monitoring = hltMuonmonitoring.clone()
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.FolderName = cms.string('HLT/EXO/DoubleMu33NoFiltersNoVtxDisplaced/')
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.nmuons = cms.uint32(2)
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_DoubleMu33NoFiltersNoVtxDisplaced_v*"")
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

DoubleMu40NoFiltersNoVtxDisplaced_monitoring = hltMuonmonitoring.clone()
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.FolderName = cms.string('HLT/EXO/DoubleMu40NoFiltersNoVtxDisplaced/')
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.nmuons = cms.uint32(2)
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_DoubleMu40NoFiltersNoVtxDisplaced_v*"")
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

"
-------------------------------------------------------------------------
"DoubleMu33NoFiltersNoVtxDisplaced_monitoring = hltMuonmonitoring.clone()
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.FolderName = cms.string('HLT/EXO/DoubleMu33NoFiltersNoVtxDisplaced/')
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.nmuons = cms.uint32(2)
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_DoubleMu33NoFiltersNoVtxDisplaced_v*"")
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

DoubleMu40NoFiltersNoVtxDisplaced_monitoring = hltMuonmonitoring.clone()
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.FolderName = cms.string('HLT/EXO/DoubleMu40NoFiltersNoVtxDisplaced/')
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.nmuons = cms.uint32(2)
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_DoubleMu40NoFiltersNoVtxDisplaced_v*"")
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

"
-------------------------------------------------------------------------
"DoubleMu33NoFiltersNoVtxDisplaced_monitoring = hltMuonmonitoring.clone()
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.FolderName = cms.string('HLT/EXO/DoubleMu33NoFiltersNoVtxDisplaced/')
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.nmuons = cms.uint32(2)
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_DoubleMu33NoFiltersNoVtxDisplaced_v*"")
DoubleMu33NoFiltersNoVtxDisplaced_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

DoubleMu40NoFiltersNoVtxDisplaced_monitoring = hltMuonmonitoring.clone()
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.FolderName = cms.string('HLT/EXO/DoubleMu40NoFiltersNoVtxDisplaced/')
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.nmuons = cms.uint32(2)
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_DoubleMu40NoFiltersNoVtxDisplaced_v*"")
DoubleMu40NoFiltersNoVtxDisplaced_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

"
-------------------------------------------------------------------------
"Recom
PRs: 22808, 22869"
-------------------------------------------------------------------------
=========================================================================
"Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")



Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")




Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.muonSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")



Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")



Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 43')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")




Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.muonSelection = cms.string('pt > 43')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

DoubleMu33NoFiltersNoVtxDisplaced_monitoring
DoubleMu40NoFiltersNoVtxDisplaced_monitoring
Mu43NoFiltersNoVtx_Photon43_CaloIdL_monitoring
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring
"
-------------------------------------------------------------------------
"Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")



Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")




Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.muonSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")



Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")



Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 43')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")




Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.muonSelection = cms.string('pt > 43')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
DoubleMu43NoFiltersNoVtx_monitoring
DoubleMu33NoFiltersNoVtxDisplaced_monitoring
DoubleMu40NoFiltersNoVtxDisplaced_monitoring
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring
"
-------------------------------------------------------------------------
"Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")



Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")




Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.muonSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")



Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")



Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 43')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")




Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.muonSelection = cms.string('pt > 43')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
DoubleMu43NoFiltersNoVtx_monitoring
DoubleMu33NoFiltersNoVtxDisplaced_monitoring
DoubleMu40NoFiltersNoVtxDisplaced_monitoring
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring
"
-------------------------------------------------------------------------
"Recom
PRs: 22808, 22869"
-------------------------------------------------------------------------
=========================================================================
"//	ONLINE ONLY!
if (_ptype==fOnline) {
	if (rawidHBHEValid != 0) {
	}
	if (rawidHFValid!=0) {
		_cOccupancyEmulvsBX_TTSubdet.fill(HcalTrigTowerDetId(rawidHFValid), bx,
			numHF);
		_cOccupancyCutEmulvsBX_TTSubdet.fill(HcalTrigTowerDetId(rawidHFValid), bx,
			numCutHF);
		_cOccupancyEmulvsLS_TTSubdet.fill(HcalTrigTowerDetId(rawidHFValid), 
			_currentLS,numHF);
		_cOccupancyCutEmulvsLS_TTSubdet.fill(HcalTrigTowerDetId(rawidHFValid), 
			_currentLS, numCutHF);
		_cMsnDatavsLS_TTSubdet.fill(HcalTrigTowerDetId(rawidHFValid),
			_currentLS, numMsnHF);
		_cMsnCutDatavsLS_TTSubdet.fill(HcalTrigTowerDetId(rawidHFValid),
			_currentLS, numMsnCutHF);
		_cMsnDatavsBX_TTSubdet.fill(HcalTrigTowerDetId(rawidHFValid),
			bx, numMsnHF);
"
-------------------------------------------------------------------------
"process.emulTPDigisNoTDCCut.parameters = cms.untracked.PSet(
ADCThresholdHF = cms.uint32(255),
TDCMaskHF = cms.uint64(0xFFFFFFFFFFFFFFFF)

"
-------------------------------------------------------------------------
"process.emulTPDigisNoTDCCut.parameters = cms.untracked.PSet(
ADCThresholdHF = cms.uint32(255),
TDCMaskHF = cms.uint64(0xFFFFFFFFFFFFFFFF)

"
-------------------------------------------------------------------------
"Recom
PRs: 22552, 22553"
-------------------------------------------------------------------------
=========================================================================
"'keep *_hgcalTriggerPrimitiveDigiProducer_towerMap_*',
"
-------------------------------------------------------------------------
"from  L1Trigger.L1THGCal.hgcalTriggerPrimitives_cff import *
_phase2_siml1emulator = SimL1Emulator.copy()
_phase2_siml1emulator = hgcalTriggerPrimitives
from Configuration.Eras.Modifier_phase2_hgcal_cff import phase2_hgcal
phase2_hgcal.toReplaceWith( SimL1Emulator , _phase2_siml1emulator )
"
-------------------------------------------------------------------------
"from  L1Trigger.L1THGCal.hgcalTriggerPrimitives_cff import *
_phase2_siml1emulator = SimL1Emulator.copy()
_phase2_siml1emulator = hgcalTriggerPrimitives
from Configuration.Eras.Modifier_phase2_hgcal_cff import phase2_hgcal
phase2_hgcal.toReplaceWith( SimL1Emulator , _phase2_siml1emulator )
"
-------------------------------------------------------------------------
"Recom
PRs: 22387, 22487"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2018_realistic'    : '100X_upgrade2018_realistic_v9',
'phase1_2018_cosmics'      :   '100X_upgrade2018cosmics_realistic_deco_v7',
"
-------------------------------------------------------------------------
"'phase1_2018_design'       : '100X_upgrade2018_design_IdealBS_v6',
'phase1_2018_realistic'    : '100X_upgrade2018_realistic_v10',
'phase1_2018_cosmics'      :   '100X_upgrade2018cosmics_realistic_deco_v8',
"
-------------------------------------------------------------------------
"'phase1_2018_design'       : '100X_upgrade2018_design_IdealBS_v6',
'phase1_2018_realistic'    : '100X_upgrade2018_realistic_v10',
'phase1_2018_cosmics'      :   '100X_upgrade2018cosmics_realistic_deco_v8',
"
-------------------------------------------------------------------------
"Recom
PRs: 22075, 22078"
-------------------------------------------------------------------------
=========================================================================
"process = customiseFor22001(process)
    
"
-------------------------------------------------------------------------
"process = customiseFor22001(process)
"
-------------------------------------------------------------------------
"process = customiseFor22001(process)
"
-------------------------------------------------------------------------
"Recom
PRs: 22001, 22002"
-------------------------------------------------------------------------
=========================================================================
"
from Configuration.Eras.Modifier_pp_on_XeXe_2017_cff import pp_on_XeXe_2017
pp_on_XeXe_2017.toModify(getattr(process,'nb1AK8PuppiSoftDrop'postfix), cuts = ['pt > 999999', 'pt > 999999', 'pt > 999999'] )
pp_on_XeXe_2017.toModify(getattr(process,'nb2AK8PuppiSoftDrop'postfix), cuts = ['pt > 999999', 'pt > 999999', 'pt > 999999'] )

"
-------------------------------------------------------------------------
"steps['RECOPPREF2017']=merge([ppRefDefaults2017,step3Up2015Defaults])
"
-------------------------------------------------------------------------
"steps['RECOPPREF2017']=merge([ppRefDefaults2017,step3Up2015Defaults])
"
-------------------------------------------------------------------------
"Recom
PRs: 20749, 21069"
-------------------------------------------------------------------------
=========================================================================
"double matching_eff=1;
double matching_efferr=1;
"
-------------------------------------------------------------------------
"m_prescaleFactorsAlgoTrig = 0ULL;
m_triggerMaskAlgoTrig = 0ULL;
"
-------------------------------------------------------------------------
"m_prescaleFactorsAlgoTrig = 0ULL;
m_triggerMaskAlgoTrig = 0ULL;
"
-------------------------------------------------------------------------
"Recom
PRs: 20952, 20999"
-------------------------------------------------------------------------
=========================================================================
"matching_eff = thisEventEffStat.filterEfficiency(3);
matching_efferr = thisEventEffStat.filterEfficiencyError(3);
"
-------------------------------------------------------------------------
"if (maskedBxs.size()>0){
"
-------------------------------------------------------------------------
"if (maskedBxs.size()>0){
"
-------------------------------------------------------------------------
"Recom
PRs: 20952, 20999"
-------------------------------------------------------------------------
=========================================================================
"

matching_eff << "" /- "" 
matching_efferr <<""   [TO BE USED IN MCM]"";

"
-------------------------------------------------------------------------
"if (maskedBxs.size()>0){
"
-------------------------------------------------------------------------
"if (maskedBxs.size()>0){
"
-------------------------------------------------------------------------
"Recom
PRs: 20952, 20999"
-------------------------------------------------------------------------
=========================================================================
"'keep *_slimmedGenJets__*',
'keep *_slimmedGenJetsAK8__*',
"
-------------------------------------------------------------------------
"
MicroEventContentGEN = cms.PSet(
outputCommands = cms.untracked.vstring(
    'keep *_slimmedGenJetsFlavourInfos_*_*',
    'keep *_slimmedGenJets__*',
    'keep *_slimmedGenJetsAK8__*',
    'keep *_genMetTrue_*_*',
)


oEventContentMC = cms.PSet(
outputCommands = cms.untracked.vstring(MicroEventContent.outputCommands)

oEventContentMC.outputCommands = MicroEventContentGEN.outputCommands
oEventContentMC.outputCommands = [
                                    'keep PileupSummaryInfos_slimmedAddPileupInfo_*_*',
                                    # RUN
                                    'keep L1GtTriggerMenuLite_l1GtTriggerMenuLite__*'
                                  ]
"
-------------------------------------------------------------------------
"
MicroEventContentGEN = cms.PSet(
outputCommands = cms.untracked.vstring(
    'keep *_slimmedGenJetsFlavourInfos_*_*',
    'keep *_slimmedGenJets__*',
    'keep *_slimmedGenJetsAK8__*',
    'keep *_genMetTrue_*_*',
)


oEventContentMC = cms.PSet(
outputCommands = cms.untracked.vstring(MicroEventContent.outputCommands)

oEventContentMC.outputCommands = MicroEventContentGEN.outputCommands
oEventContentMC.outputCommands = [
                                    'keep PileupSummaryInfos_slimmedAddPileupInfo_*_*',
                                    # RUN
                                    'keep L1GtTriggerMenuLite_l1GtTriggerMenuLite__*'
                                  ]
"
-------------------------------------------------------------------------
"Recom
PRs: 19853, 20485"
-------------------------------------------------------------------------
=========================================================================
"if (dbstatusPtr == channelStatus_->getMap().end())
    edm::LogError(""Invalid DetId supplied"");
"
-------------------------------------------------------------------------
"process.GlobalTag = GlobalTag(process.GlobalTag, 'auto:run2_data', '')  

"
-------------------------------------------------------------------------
"process.GlobalTag = GlobalTag(process.GlobalTag, 'auto:run2_data', '')  

"
-------------------------------------------------------------------------
"Recom
PRs: 19793, 19911"
-------------------------------------------------------------------------
=========================================================================
"# update PF thresholds, based on https://indico.cern.ch/event/653123/contributions/2659235/attachments/1491385/2318364/170711_upsg_ledovskoy.pdf
ecal_thresholds = {
    300 : 0.103,
    1000 : 0.175,
    3000 : 0.435,
    4500 : 0.707,
}
ecal_seed_multiplier = 2.5

"
-------------------------------------------------------------------------
"'phase2_realistic'         : '91X_upgrade2023_realistic_v3'
"
-------------------------------------------------------------------------
"'phase2_realistic'         : '91X_upgrade2023_realistic_v3'
"
-------------------------------------------------------------------------
"Recom
PRs: 19687, 19688"
-------------------------------------------------------------------------
=========================================================================
"from Configuration.Eras.Modifier_tracker_apv_vfp30_2016_cff import tracker_apv_vfp30_2016 as _tracker_apv_vfp30_2016
_tracker_apv_vfp30_2016.toModify(_muonSeededMeasurementEstimatorForInOutBase, MinPtForHitRecoveryInGluedDet=1e9)
"
-------------------------------------------------------------------------
"def customizeHitRecoveryInGluedDetTkSeedsOnly(process):
process = customizeMinPtForHitRecoveryInGluedDet(process,0.9)
if hasattr(process, ""Chi2MeasurementEstimatorForP5""): # keep disabled for cosmics
    process.Chi2MeasurementEstimatorForP5.MinPtForHitRecoveryInGluedDet = 100000
for X in ""muonSeededMeasurementEstimatorForOutIn"", ""hitCollectorForOutInMuonSeeds"":
    if not hasattr(process, X): continue
    getattr(process, X).MinPtForHitRecoveryInGluedDet = 100000
return process


"
-------------------------------------------------------------------------
"def customizeHitRecoveryInGluedDetTkSeedsOnly(process):
process = customizeMinPtForHitRecoveryInGluedDet(process,0.9)
if hasattr(process, ""Chi2MeasurementEstimatorForP5""): # keep disabled for cosmics
    process.Chi2MeasurementEstimatorForP5.MinPtForHitRecoveryInGluedDet = 100000
for X in ""muonSeededMeasurementEstimatorForOutIn"", ""hitCollectorForOutInMuonSeeds"":
    if not hasattr(process, X): continue
    getattr(process, X).MinPtForHitRecoveryInGluedDet = 100000
return process


"
-------------------------------------------------------------------------
"Recom
PRs: 17807, 18218"
-------------------------------------------------------------------------
=========================================================================
"diMuonHistos.etaBin = cms.int32(70) #dimuonhistograms mass, bin   
diMuonHistos.etaBBin = cms.int32(70)    
diMuonHistos.etaEBin = cms.int32(70)    
diMuonHistos.LowMassMin = cms.double(2.0)   
diMuonHistos.LowMassMax = cms.double(14.0)    
diMuonHistos.HighMassMin = cms.double(55.0)   
diMuonHistos.HighMassMax = cms.double(125.0)
"
-------------------------------------------------------------------------
"diMuonHistos.etaBin = cms.int32(70) #dimuonhistograms mass, bin   
diMuonHistos.etaBBin = cms.int32(70)    
diMuonHistos.etaEBin = cms.int32(70)    
diMuonHistos.etaBinLM = cms.int32(12)   
diMuonHistos.etaBBinLM = cms.int32(12)    
diMuonHistos.etaEBinLM = cms.int32(12)    
diMuonHistos.LowMassMin = cms.double(2.0)   
diMuonHistos.LowMassMax = cms.double(14.0)    
diMuonHistos.HighMassMin = cms.double(55.0)   
diMuonHistos.HighMassMax = cms.double(125.0)
"
-------------------------------------------------------------------------
"diMuonHistos.etaBin = cms.int32(70) #dimuonhistograms mass, bin   
diMuonHistos.etaBBin = cms.int32(70)    
diMuonHistos.etaEBin = cms.int32(70)    
diMuonHistos.etaBinLM = cms.int32(12)   
diMuonHistos.etaBBinLM = cms.int32(12)    
diMuonHistos.etaEBinLM = cms.int32(12)    
diMuonHistos.LowMassMin = cms.double(2.0)   
diMuonHistos.LowMassMax = cms.double(14.0)    
diMuonHistos.HighMassMin = cms.double(55.0)   
diMuonHistos.HighMassMax = cms.double(125.0)
"
-------------------------------------------------------------------------
"Recom
PRs: 16288, 16289"
-------------------------------------------------------------------------
=========================================================================
"# for Run2 PPb workflows (NOTE: using HLT:@fake for the moment)
steps['DIGIUP15_PPb']=merge([{'-s':'DIGI:pdigi_valid,L1,DIGI2RAW,HLT:@fake','--conditions':'auto:run2_mc_pa'}, steps['DIGIUP15']])
"
-------------------------------------------------------------------------
"# for Run2 PPb workflows (NOTE: using HLT:@fake for the moment)
steps['DIGIUP15_PPb']=merge([{'-s':'DIGI:pdigi_valid,L1,DIGI2RAW,HLT:@fake','--conditions':'auto:run2_mc_pa'}, steps['DIGIUP15']])

"
-------------------------------------------------------------------------
"# for Run2 PPb workflows (NOTE: using HLT:@fake for the moment)
steps['DIGIUP15_PPb']=merge([{'-s':'DIGI:pdigi_valid,L1,DIGI2RAW,HLT:@fake','--conditions':'auto:run2_mc_pa'}, steps['DIGIUP15']])

"
-------------------------------------------------------------------------
"Recom
PRs: 16119, 16122"
-------------------------------------------------------------------------
=========================================================================
"if (event[i].pT() >= quarkPt_) { 
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
process = cms.Process(""TEST"")

process.load(""Configuration.StandardSequences.SimulationRandomNumberGeneratorSeeds_cff"")
process.source = cms.Source(""EmptySource"")

process.generator = cms.EDFilter(""Pythia8GeneratorFilter"",
maxEventsToPrint = cms.untracked.int32(1),
pythiaPylistVerbosity = cms.untracked.int32(1),
filterEfficiency = cms.untracked.double(1.0),
pythiaHepMCVerbosity = cms.untracked.bool(False),
comEnergy = cms.double(13000.),
PythiaParameters = cms.PSet(
    pythia8_pthook = cms.vstring(
        'SoftQCD:nonDiffractive = on',         # QCD process, all quark are produced, but bquark (5) only 1.4% of the time, 
                                               # Lets hadronize just those, 

        'PTFilter:filter = on',                # turn on the filter, for testing turn off and see how increase the number of 
                                               # required pythia events to pass process.bfilter
        'PTFilter:quarkToFilter = 5',          # filter in b quark
        'PTFilter:scaleToFilter = 1.0',        # at the scale shawering of 1 GeV (this should be not affect the kinematical distribution at low pT)
        'PTFilter:quarkRapidity = 10.',        # do nothing on the rapidity of this quark, (at the most quark are about 8 units)
        'PTFilter:quarkPt = -0.1'              # do nothing of the pT of the quark
    ),
    parameterSets = cms.vstring('pythia8_pthook')
)


ess.bfilter = cms.EDFilter(""PythiaFilter"",ParticleID = cms.untracked.int32(5))

ess.load(""FWCore.MessageLogger.MessageLogger_cfi"")
ess.MessageLogger = cms.Service(""MessageLogger"",
cout = cms.untracked.PSet(
    default = cms.untracked.PSet(
        limit = cms.untracked.int32(2)
    )
),
destinations = cms.untracked.vstring('cout')


ess.RandomNumberGeneratorService = cms.Service(""RandomNumberGeneratorService"",
generator = cms.PSet(initialSeed = cms.untracked.uint32(123456789))


n no PTFilter is off. will need this amount to have about 150 in the output
cess.maxEvents = cms.untracked.PSet(input = cms.untracked.int32(10000))

n PTFilter is on, just those
ess.maxEvents = cms.untracked.PSet(input = cms.untracked.int32(147))

ess.GEN = cms.OutputModule(""PoolOutputModule"",
    fileName = cms.untracked.string('pthookfilter.root'),
    SelectEvents = cms.untracked.PSet(SelectEvents = cms.vstring('p'))


ess.p = cms.Path(process.generator*process.bfilter)
ess.outpath = cms.EndPath(process.GEN)

ess.schedule = cms.Schedule(process.p, process.outpath)
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
process = cms.Process(""TEST"")

process.load(""Configuration.StandardSequences.SimulationRandomNumberGeneratorSeeds_cff"")
process.source = cms.Source(""EmptySource"")

process.generator = cms.EDFilter(""Pythia8GeneratorFilter"",
maxEventsToPrint = cms.untracked.int32(1),
pythiaPylistVerbosity = cms.untracked.int32(1),
filterEfficiency = cms.untracked.double(1.0),
pythiaHepMCVerbosity = cms.untracked.bool(False),
comEnergy = cms.double(13000.),
PythiaParameters = cms.PSet(
    pythia8_pthook = cms.vstring(
        'SoftQCD:nonDiffractive = on',         # QCD process, all quark are produced, but bquark (5) only 1.4% of the time, 
                                               # Lets hadronize just those, 

        'PTFilter:filter = on',                # turn on the filter, for testing turn off and see how increase the number of 
                                               # required pythia events to pass process.bfilter
        'PTFilter:quarkToFilter = 5',          # filter in b quark
        'PTFilter:scaleToFilter = 1.0',        # at the scale shawering of 1 GeV (this should be not affect the kinematical distribution at low pT)
        'PTFilter:quarkRapidity = 10.',        # do nothing on the rapidity of this quark, (at the most quark are about 8 units)
        'PTFilter:quarkPt = -0.1'              # do nothing of the pT of the quark
    ),
    parameterSets = cms.vstring('pythia8_pthook')
)


ess.bfilter = cms.EDFilter(""PythiaFilter"",ParticleID = cms.untracked.int32(5))

ess.load(""FWCore.MessageLogger.MessageLogger_cfi"")
ess.MessageLogger = cms.Service(""MessageLogger"",
cout = cms.untracked.PSet(
    default = cms.untracked.PSet(
        limit = cms.untracked.int32(2)
    )
),
destinations = cms.untracked.vstring('cout')


ess.RandomNumberGeneratorService = cms.Service(""RandomNumberGeneratorService"",
generator = cms.PSet(initialSeed = cms.untracked.uint32(123456789))


n no PTFilter is off. will need this amount to have about 150 in the output
cess.maxEvents = cms.untracked.PSet(input = cms.untracked.int32(10000))

n PTFilter is on, just those
ess.maxEvents = cms.untracked.PSet(input = cms.untracked.int32(147))

ess.GEN = cms.OutputModule(""PoolOutputModule"",
    fileName = cms.untracked.string('pthookfilter.root'),
    SelectEvents = cms.untracked.PSet(SelectEvents = cms.vstring('p'))


ess.p = cms.Path(process.generator*process.bfilter)
ess.outpath = cms.EndPath(process.GEN)

ess.schedule = cms.Schedule(process.p, process.outpath)
"
-------------------------------------------------------------------------
"Recom
PRs: 15723, 16023"
-------------------------------------------------------------------------
=========================================================================
"setSignificanceMatrix(srcMET.getSignificanceMatrix());

"
-------------------------------------------------------------------------
"fname = 'root://eoscms.cern.ch//store/relval/CMSSW_8_0_19/DoubleEG/MINIAOD/80X_dataRun2_relval_v16_RelVal_doubEG2015D-v1/00000/004197B7-4B6E-E611-AAC0-0CC47A4D763C.root'
fname = 'root://eoscms.cern.ch//store/relval/CMSSW_8_0_19/RelValTTbar_13/MINIAODSIM/PU25ns_80X_mcRun2_asymptotic_v17_gs7120p2-v1/00000/18AFB53D-766E-E611-A80A-0CC47A78A408.root'
"
-------------------------------------------------------------------------
"fname = 'root://eoscms.cern.ch//store/relval/CMSSW_8_0_19/DoubleEG/MINIAOD/80X_dataRun2_relval_v16_RelVal_doubEG2015D-v1/00000/004197B7-4B6E-E611-AAC0-0CC47A4D763C.root'
fname = 'root://eoscms.cern.ch//store/relval/CMSSW_8_0_19/RelValTTbar_13/MINIAODSIM/PU25ns_80X_mcRun2_asymptotic_v17_gs7120p2-v1/00000/18AFB53D-766E-E611-A80A-0CC47A78A408.root'
"
-------------------------------------------------------------------------
"Recom
PRs: 15565, 15600"
-------------------------------------------------------------------------
=========================================================================
"auto inputMuonsOld = UnpackerFactory::get()->make(""stage2::BMTFUnpackerInputsOldQual"");
auto inputMuonsNew = UnpackerFactory::get()->make(""stage2::BMTFUnpackerInputsNewQual"");
      if (iL == 12 || iL == 14 || ( iL > 26 && iL < 32) || iL == 60 || iL == 62)
         continue;
      if (fw < 2452619552)
         res[iL] = inputMuonsOld;
      else
         res[iL] = inputMuonsNew;
   res[123] = outputMuon;
"
-------------------------------------------------------------------------
"#include ""FWCore/MessageLogger/interface/MessageLogger.h""
#include ""EventFilter/L1TRawToDigi/plugins/UnpackerFactory.h""
"
-------------------------------------------------------------------------
"#include ""FWCore/MessageLogger/interface/MessageLogger.h""
#include ""EventFilter/L1TRawToDigi/plugins/UnpackerFactory.h""
"
-------------------------------------------------------------------------
"Recom
PRs: 15387, 15388"
-------------------------------------------------------------------------
=========================================================================
"tmvaWeights   = cms.string(""RecoJets/JetProducers/data/pileupJetId_80X_Eta2p5to2p75_BDT.weights.xml.gz""),
"
-------------------------------------------------------------------------
"_chsalgos_81x = cms.VPSet(full_81x_chs,cutbased)
_stdalgos    = _chsalgos_81x
"
-------------------------------------------------------------------------
"_chsalgos_81x = cms.VPSet(full_81x_chs,cutbased)
_stdalgos    = _chsalgos_81x
"
-------------------------------------------------------------------------
"Recom
PRs: 14723, 15211"
-------------------------------------------------------------------------
=========================================================================
"Chi_2 = residual*residual / sigma_str_2;
"
-------------------------------------------------------------------------
"from EventFilter.TotemRawToDigi.totemRawToDigi_cff import *
"
-------------------------------------------------------------------------
"from EventFilter.TotemRawToDigi.totemRawToDigi_cff import *
"
-------------------------------------------------------------------------
"Recom
PRs: 14605, 14880"
-------------------------------------------------------------------------
=========================================================================
