{"label-and-assign.py": {"libraries": ["argparse", "os", "operator", "github", "sys", "datetime", "github.GithubException.GithubException", "random", "json", "pathlib"], "function_names": ["get_team_members", "get_last_account_assigned", "main", "label_and_assign_issue", "get_triage_next_account"], "function_calls": ["get_team_members", "get_last_account_assigned", "main", "sorted", "str", "label_and_assign_issue", "print", "get_triage_next_account", "list"], "class_names": [], "class_method_calls": ["options.team", "next_triage_account.login", "options.repo", "sys.stderr", "org.login", "parser.exit", "g.get_organization", "github.Github", "org.get_repo", "org.get_team_by_slug", "repo.full_name", "argparse.ArgumentParser", "json.loads", "json.dumps", "CACHE_FILENAME.write_text", "CACHE_FILENAME.read_text", "pathlib.Path", "os.environ", "random.choice", "parser.add_argument", "options.label", "CACHE_FILENAME.exists", "options.issue", "options.org", "issue.add_to_labels", "team.get_members", "CACHE_FILENAME.parent", "previous_account.login", "repo.get_issue", "operator.attrgetter", "parser.parse_args", "datetime.datetime", "issue.add_to_assignees"]}, "update_winrepo.py": {"libraries": ["argparse", "os"], "function_names": [], "function_calls": ["open", "print"], "class_names": [], "class_method_calls": ["f.writelines", "os.getcwd", "new_contents.append", "args.file", "args.version", "argparse.ArgumentParser", "version.startswith", "arg_parser.add_argument", "arg_parser.parse_args", "f.readlines"]}, "saltautodoc.py": {"libraries": ["sphinx.ext.autodoc.FunctionDocumenter"], "function_names": ["format_name", "add_documenter", "setup"], "function_calls": ["len", "hasattr", "super"], "class_names": ["SaltFunctionDocumenter"], "class_method_calls": ["self.objpath", "app.add_autodocumenter", "app.connect", "self.module"]}, "saltdomain.py": {"libraries": ["itertools", "os", "sphinx.domains.python", "sphinx.domains.python.PyObject", "sphinx.util.nodes.nested_parse_with_titles", "re", "sphinx.util.nodes.set_source_info", "docutils.statemachine.ViewList", "docutils.nodes", "sphinx.locale._", "docutils.parsers.rst.Directive", "sphinx.util.nodes.make_refnode", "salt", "sphinx.addnodes", "sphinx.domains.ObjType", "sphinx.roles.XRefRole"], "function_names": ["parse_file", "setup", "run", "resolve_xref", "parse_lit"], "function_calls": ["_", "len", "SLSXRefRole", "bool", "make_refnode", "super", "str", "ObjType", "nested_parse_with_titles", "ViewList", "dict", "set_source_info", "OSError", "open"], "class_names": ["SLSXRefRole", "LiterateCoding", "SaltDomain", "State", "CurrentFormula", "Event", "Formula", "SaltModuleIndex", "LiterateFormula"], "class_method_calls": ["env.docname", "os.pardir", "self.options", "addnodes.index", "self.parse_lit", "app.add_domain", "list_item.children", "nodes.section", "nodes.target", "comment.match", "enum.append", "python_domain.PythonModuleIndex", "itertools.groupby", "salt.__file__", "nodes.list_item", "node.document", "list_item.append", "self.arguments", "app.add_config_value", "nodes.enumerated_list", "self.state", "i.rstrip", "env.temp_data", "nodes.container", "re.compile", "object_types.update", "document.reporter", "initial_data.update", "env.domaindata", "roles.update", "section.append", "python_domain.PythonDomain", "self.lineno", "self.data", "self.parse_file", "nodes.literal_block", "node.append", "comment.sub", "app.add_crossref_type", "config.formulas_dirs", "directives.update", "os.path", "sls_path.replace", "sections.append", "f.readlines"]}, "saltrepo.py": {"libraries": [], "function_names": ["source_read_handler", "setup"], "function_calls": [], "class_names": [], "class_method_calls": ["app.config", "app.connect"]}, "conf.py": {"libraries": ["time", "os", "re", "shutil", "textwrap", "sphinx.util.logging", "sys", "types", "sphinx.directives.other.TocTree", "salt.version", "pathlib"], "function_names": ["copy_release_templates_pre", "setup", "extract_module_deprecations", "_normalize_version", "skip_mod_init_member", "copy_release_templates_post", "run"], "function_calls": ["super", "str", "dict", "isinstance"], "class_names": ["ReleasesTree"], "class_method_calls": ["os.pardir", "name.startswith", "msg.splitlines", "fpath.relative_to", "salt_version.info", "salt.version", "app.connect", "obj.__name__", "obj.__deprecated__", "shutil.copyfile", "fpath.unlink", "release_template_files_dir.iterdir", "os.environ", "pathlib.Path", "sys.path", "log.info", "re.sub", "time.strftime", "fpath.name", "types.FunctionType", "salt_version.major", "release.startswith", "path.split", "x.zfill", "logging.getLogger", "TocTree.option_spec", "dest.exists", "sys.version_info", "entries.sort", "app._copied_release_files", "os.path", "dest.relative_to", "textwrap.dedent", "app.add_directive"]}, "noxfile.py": {"libraries": ["nox.virtualenv.VirtualEnv", "glob", "os", "tarfile", "nox", "gzip", "shutil", "sqlite3", "sys", "datetime", "nox.command", "tempfile", "contextlib", "json", "pathlib", "nox.command.CommandFailed"], "function_names": ["_report_coverage", "test_zeromq_m2crypto", "write", "create_json_coverage_reports", "pytest_zeromq", "_pytest", "__init__", "_create_xml_coverage_reports", "pytest_pycryptodome", "pytest_tcp_m2crypto", "test_tcp", "build", "session_warn", "create_html_coverage_report", "pytest", "_get_session_python_version_info", "_create_ci_directories", "test_parametrized", "pytest_cloud", "test_cloud", "test_tcp_pycryptodome", "lint_tests_pre_commit", "ci_test_onedir_pkgs", "pytest_tcp_pycryptodome", "combine_coverage", "_lint_pre_commit", "pytest_zeromq_pycryptodome", "docs_man", "create_xml_coverage_reports", "coverage_report", "fileno", "pytest_m2crypto", "compress_dependencies", "lint", "ci_test_tcp", "_lint", "session_run_always", "_install_coverage_requirement", "pytest_tornado", "lint_salt", "lint_salt_pre_commit", "test_pycryptodome", "test", "combine_coverage_onedir", "_get_pydir", "pytest_zeromq_m2crypto", "changelog", "lint_tests", "decompress_dependencies", "report_coverage", "create_json_coverage_reports_onedir", "test_tornado", "_install_requirements", "tar_reset", "_get_pip_requirements_file", "find_session_runner", "test_m2crypto", "docs", "_upgrade_pip_setuptools_and_wheel", "_ci_test", "pre_archive_cleanup", "test_zeromq", "create_xml_coverage_reports_onedir", "test_tcp_m2crypto", "ci_test_onedir", "ci_test_onedir_tcp", "test_zeromq_pycryptodome", "_run_with_coverage", "docs_html", "ci_test", "pytest_tcp", "recompress"], "function_calls": ["_report_coverage", "Recompress", "any", "_pytest", "sorted", "_create_xml_coverage_reports", "VirtualEnv", "session_warn", "_get_session_python_version_info", "_create_ci_directories", "list", "open", "next", "int", "_lint_pre_commit", "_lint", "session_run_always", "_install_coverage_requirement", "str", "_get_pydir", "tuple", "ValueError", "_install_requirements", "_get_pip_requirements_file", "find_session_runner", "_upgrade_pip_setuptools_and_wheel", "_ci_test", "exit", "_run_with_coverage", "print"], "class_names": ["Recompress", "Tee"], "class_method_calls": ["fpath.write_text", "_coverage_cmd_args.append", "tarinfo.gid", "ARTIFACTS_DIR.joinpath", "sys.stderr", "nox.options", "python_path_env_var.split", "targz.name", "session.debug", "env.update", "session.warn", "install_command.append", "os.environ", "pathlib.Path", "sys.exit", "REPO_ROOT.joinpath", "rfile.extractall", "install_command.extend", "targz.unlink", "tarfile.DIRTYPE", "session.run", "fixed_link.relative_to", "nox.parametrize", "self._first", "session.notify", "tarinfo.uname", "ONEDIR_ARTIFACT_PATH.relative_to", "tarinfo.pax_headers", "args.append", "cmd_args.append", "EXTRA_REQUIREMENTS_INSTALL.split", "tarinfo.mtime", "shutil.which", "cmdline.append", "ENV_FILE.read_text", "tarinfo.type", "chunk_cmd.append", "self.mtime", "os.pathsep", "ENV_FILE.unlink", "nox_dependencies_tarball_path.exists", "ci_test_onedir_path.relative_to", "chunks.values", "shutil.move", "COVERAGE_OUTPUT_DIR.chmod", "os.chdir", "pytest_args.append", "os.path", "session.name", "nox_dependencies_tarball_path.unlink", "targz.stem", "path.is_symlink", "python_path_entries.remove", "fpath.relative_to", "cmd_args.pop", "name.relative_to", "self._second", "session_name.replace", "session.python", "session._runner", "chunk_cmd.extend", "res.fetchone", "recompress.recompress", "resolved_link.split", "os.sep", "tempfile.mkdtemp", "rfh.read", "tarinfo.uid", "args.extend", "tarinfo.mode", "ONEDIR_ARTIFACT_PATH.exists", "glob.glob", "s.signatures", "COVERAGE_OUTPUT_DIR.relative_to", "wfile.add", "sys.platform", "session.install", "broken_link.unlink", "broken_link.symlink_to", "part.isdigit", "ARTIFACTS_DIR.mkdir", "cmd.append", "db.execute", "tarinfo.gname", "sitecustomize_dir.strip", "tempd.joinpath", "gz.write", "contextlib.suppress", "kwargs.items", "session.run_always", "dirname.name", "sitecustomize_dir.relative_to", "session.posargs", "arg.startswith", "ENV_FILE.exists", "gzip.GzipFile", "COVERAGE_OUTPUT_DIR.mkdir", "self.tar_reset", "fpath.read_text", "shutil.rmtree", "tarinfo.name", "json.loads", "nox.session", "os.readlink", "extracted_dir.rglob", "python_path_entries.insert", "os.scandir", "pkg.relative_to", "session_py_version.strip", "ARTIFACTS_DIR.chmod", "session.log", "path.is_file", "sitecustomize_dir.exists", "session.error", "d_src.mkdir", "tarfile.open", "targz.relative_to", "datetime.datetime", "sqlite3.connect"]}, "_salt_onedir_extras.py": {"libraries": ["sys", "pathlib"], "function_names": ["setup"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["pathlib.Path", "sys.path", "sys.version_info", "sys.platform", "extras_parent_path.parent"]}, "freeze.py": {"libraries": ["bbfreeze.Freezer"], "function_names": [], "function_calls": ["fre", "Freezer"], "class_names": [], "class_method_calls": ["fre.include_py", "fre.use_compression", "fre.addScript"]}, "sodium_grabber_installer.py": {"libraries": ["distutils.core.Extension", "distutils.core.setup", "os.path"], "function_names": [], "function_calls": ["Extension", "setup"], "class_names": [], "class_method_calls": ["path.dirname", "path.join"]}, "build.py": {"libraries": ["argparse", "tarfile", "os", "os.path.join", "os.path.dirname", "shutil.copy", "sys", "subprocess.check_call", "salt.version", "os.path.abspath"], "function_names": ["srcfilter"], "function_calls": ["abspath", "dirname", "check_call", "print", "join", "copy"], "class_names": [], "class_method_calls": ["os.environ", "ti.name", "sys.path", "os.listdir", "argparse.ArgumentParser", "parser.add_argument", "tf.add", "args.buildid", "parser.parse_args", "tarfile.open", "salt.version"]}, "test_custom_full_path.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.REPO_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_custom_master.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_custom_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_custom_minion.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_custom_rel_path.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.REPO_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_default.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.REPO_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_default_master.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_default_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_default_minion.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_existing.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.EXISTING_CONTENT", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_existing_custom.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.REPO_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_existing_custom_master.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_existing_custom_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_existing_custom_minion.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_existing_default.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.REPO_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_existing_default_master.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_existing_default_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_existing_default_minion.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_install_dir_custom.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "install", "test_config_present", "test_config_correct", "inst_dir"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.REPO_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_install_dir_custom_master.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "install", "test_config_present", "test_config_correct", "inst_dir"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_install_dir_custom_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "install", "test_config_present", "test_config_correct", "inst_dir"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_install_dir_custom_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "install", "test_config_present", "test_config_correct", "inst_dir"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_install_dir_default.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "install", "test_config_present", "test_config_correct", "inst_dir"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.REPO_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_install_dir_default_master.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "install", "test_config_present", "test_config_correct", "inst_dir"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_install_dir_default_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "install", "test_config_present", "test_config_correct", "inst_dir"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_install_dir_default_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "install", "test_config_present", "test_config_correct", "inst_dir"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_install_dir_existing.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "install", "test_config_present", "test_config_correct", "inst_dir"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.EXISTING_CONTENT", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_install_dir_move_old_install.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present_old_location", "install", "test_config_present", "test_config_correct", "inst_dir"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.OLD_DIR", "pytest.DATA_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.OLD_CONTENT"]}, "test_old_install.py": {"libraries": ["os", "pytest"], "function_names": ["test_ssm_present_old_location", "test_config_present_old_location", "test_binaries_present_old_location", "install", "test_config_correct"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.OLD_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.OLD_CONTENT"]}, "test_old_install_custom.py": {"libraries": ["os", "pytest"], "function_names": ["test_ssm_present_old_location", "test_config_present_old_location", "test_binaries_present_old_location", "install", "test_config_correct"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.OLD_DIR", "pytest.REPO_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN"]}, "test_old_install_custom_master.py": {"libraries": ["os", "pytest"], "function_names": ["test_ssm_present_old_location", "test_config_present_old_location", "test_binaries_present_old_location", "install", "test_config_correct"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.OLD_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN"]}, "test_old_install_custom_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_ssm_present_old_location", "test_config_present_old_location", "test_binaries_present_old_location", "install", "test_config_correct"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.OLD_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN"]}, "test_old_install_custom_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_ssm_present_old_location", "test_config_present_old_location", "test_binaries_present_old_location", "install", "test_config_correct"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.OLD_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN"]}, "test_old_install_default.py": {"libraries": ["os", "pytest"], "function_names": ["test_ssm_present_old_location", "test_config_present_old_location", "test_binaries_present_old_location", "install", "test_config_correct"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.OLD_DIR", "pytest.REPO_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN"]}, "test_old_install_default_master.py": {"libraries": ["os", "pytest"], "function_names": ["test_ssm_present_old_location", "test_config_present_old_location", "test_binaries_present_old_location", "install", "test_config_correct"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.OLD_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN"]}, "test_old_install_default_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_ssm_present_old_location", "test_config_present_old_location", "test_binaries_present_old_location", "install", "test_config_correct"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.OLD_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN"]}, "test_old_install_default_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_ssm_present_old_location", "test_config_present_old_location", "test_binaries_present_old_location", "install", "test_config_correct"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.OLD_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN"]}, "test_old_install_move.py": {"libraries": ["os", "pytest"], "function_names": ["test_ssm_present_old_location", "test_config_present_old_location", "test_binaries_present_old_location", "install", "test_config_correct"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.OLD_DIR", "pytest.DATA_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.OLD_CONTENT"]}, "test_old_install_move_custom.py": {"libraries": ["os", "pytest"], "function_names": ["test_ssm_present_old_location", "test_config_present_old_location", "test_binaries_present_old_location", "install", "test_config_correct"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.OLD_DIR", "pytest.REPO_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_old_install_move_custom_master.py": {"libraries": ["os", "pytest"], "function_names": ["test_ssm_present_old_location", "test_config_present_old_location", "test_binaries_present_old_location", "install", "test_config_correct"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.OLD_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_old_install_move_custom_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_ssm_present_old_location", "test_config_present_old_location", "test_binaries_present_old_location", "install", "test_config_correct"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.OLD_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_old_install_move_custom_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_ssm_present_old_location", "test_config_present_old_location", "test_binaries_present_old_location", "install", "test_config_correct"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.OLD_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_old_install_move_default.py": {"libraries": ["os", "pytest"], "function_names": ["test_ssm_present_old_location", "test_config_present_old_location", "test_binaries_present_old_location", "install", "test_config_correct"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.OLD_DIR", "pytest.REPO_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_old_install_move_default_master.py": {"libraries": ["os", "pytest"], "function_names": ["test_ssm_present_old_location", "test_config_present_old_location", "test_binaries_present_old_location", "install", "test_config_correct"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.OLD_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_old_install_move_default_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_ssm_present_old_location", "test_config_present_old_location", "test_binaries_present_old_location", "install", "test_config_correct"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.OLD_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_old_install_move_default_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_ssm_present_old_location", "test_config_present_old_location", "test_binaries_present_old_location", "install", "test_config_correct"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.OLD_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "conftest.py": {"libraries": ["psutil", "time", "os", "winreg", "shutil", "subprocess", "pytest"], "function_names": ["old_install", "existing_config", "delete_key", "custom_config", "clean_env", "run_command", "pytest_configure", "reg_key_exists"], "function_calls": ["run_command", "reg_key_exists", "delete_key", "open"], "class_names": [], "class_method_calls": ["time.sleep", "time.time", "pytest.CUSTOM_CONTENT", "winreg.KEY_READ", "winreg.HKEY_LOCAL_MACHINE", "os.makedirs", "pytest.OLD_CONTENT", "f.writelines", "f.write", "proc.kill", "shutil.rmtree", "result.stdout", "pytest.helpers", "winreg.KEY_ALL_ACCESS", "key.rpartition", "p.name", "pytest.DATA_DIR", "pytest.INST_DIR", "os.environ", "psutil.process_iter", "proc.name", "pytest.EXISTING_CONTENT", "winreg.DeleteKey", "winreg.OpenKey", "pytest.INST_BIN", "pytest.OLD_DIR", "os.chdir", "pytest.REPO_DIR", "subprocess.run", "os.path", "os.remove"]}, "test_manual_custom_full_path.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.REPO_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_manual_custom_master.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_manual_custom_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_manual_custom_minion.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_manual_custom_rel_path.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.REPO_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_manual_default.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.REPO_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_manual_default_master.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_manual_default_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_manual_default_minion.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_manual_existing.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.EXISTING_CONTENT", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_manual_existing_custom.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.REPO_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_manual_existing_custom_master.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_manual_existing_custom_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_manual_existing_custom_minion.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_manual_existing_default.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.REPO_DIR", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_manual_existing_default_master.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_manual_existing_default_minion.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "test_manulal_existing_default_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["install", "test_config_present", "test_config_correct", "test_binaries_present"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.fixture", "pytest.helpers", "os.path", "f.readlines", "pytest.INST_BIN", "pytest.DATA_DIR"]}, "run.py": {"libraries": ["salt.utils.profile", "salt.exceptions.SaltClientError", "salt.utils.parsers", "salt.utils.verify.check_user", "salt.runner", "salt.defaults.exitcodes"], "function_names": ["run"], "function_calls": ["str", "check_user", "SystemExit", "isinstance"], "class_names": ["SaltRun"], "class_method_calls": ["runner.run", "self.config", "runner.print_docs", "self.exit", "self.options", "self.parse_args", "salt.defaults", "ret.get", "salt.runner", "salt.utils"]}, "__init__.py": {"libraries": ["salt.client.mixins", "salt.channel.client", "salt.utils.error", "salt.loader", "salt.config", "salt.utils.network", "collections.abc.Mapping"], "function_names": ["cmd_async", "__init__", "master_call", "call_func", "cmd", "cmd_sync"], "function_calls": ["super", "str", "isinstance"], "class_names": ["WheelClient"], "class_method_calls": ["self.asynchronous", "self.low", "self.opts", "salt.loader", "channel.send", "kwargs.get", "salt.client", "self.functions", "self.master_call", "self.context", "low.get", "salt.channel", "salt.utils"]}, "_compat.py": {"libraries": ["sys"], "function_names": ["disable_stdlib_finder", "make_param", "find_spec", "matches", "__compat_repr__", "install"], "function_calls": ["disable_stdlib_finder", "getattr", "hasattr", "map", "locals", "filter", "cls"], "class_names": ["NullFinder", "PyPy_repr"], "class_method_calls": ["finder.find_distributions", "sys.meta_path", "self._fields"]}, "handlers.py": {"libraries": ["salt._logging.mixins.ExcInfoOnLogLevelFormatMixin", "logging", "sys", "collections.deque", "logging.handlers"], "function_names": ["handle", "__init__", "flush", "handleError", "sync_with_handlers"], "function_calls": ["deque", "super"], "class_names": ["SysLogHandler", "WatchedFileHandler", "DeferredStreamHandler", "StreamHandler", "RotatingFileHandler", "FileHandler"], "class_method_calls": ["logging.WARNING", "self.level", "sys.stderr", "sys.exc_info", "self.__emitting", "exc.winerror", "self.baseFilename", "sys.platform", "self.acquire", "self.__messages", "exc_type.__name__", "logging.StreamHandler", "logging.raiseExceptions", "logging.FileHandler", "handler.handle", "logging.getLogger", "sys.version_info", "self.release", "logging.handlers"]}, "impl.py": {"libraries": ["salt.utils.immutabletypes.ImmutableDict", "salt._logging.mixins.LoggingMixinMeta", "os", "salt._logging.handlers.SysLogHandler", "salt.loader", "salt.utils.files", "salt.utils.verify", "pathlib", "salt.defaults.exitcodes", "salt._logging.handlers.RotatingFileHandler", "salt.exceptions.LoggingRuntimeError", "types", "atexit", "salt.utils.user", "traceback", "salt.utils.immutabletypes.freeze", "salt._logging.handlers.StreamHandler", "socket", "re", "multiprocessing", "logging", "salt.utils.textformat.TextFormat", "urllib.parse", "salt.utils.ctx.RequestContext", "pip._internal.utils._log", "salt._logging.handlers.WatchedFileHandler", "sys", "salt._logging.handlers.DeferredStreamHandler"], "function_names": ["set_lowest_log_level", "__init__", "is_logfile_handler_configured", "setup_log_granular_levels", "shutdown_logfile_handler", "is_temp_handler_configured", "get_log_record_factory", "freeze_logging_options_dict", "get_logging_level_from_string", "set_lowest_log_level_by_opts", "in_mainprocess", "_log", "shutdown_console_handler", "setup_console_handler", "get_extended_logging_handlers", "is_console_handler_configured", "setup_logfile_handler", "setup_temp_handler", "shutdown_logging", "__new__", "is_extended_logging_configured", "setup_logging", "get_console_handler", "get_lowest_log_level", "__global_logging_exception_handler", "shutdown_temp_handler", "set_log_record_factory", "get_temp_handler", "setup_extended_logging", "shutdown_extended_logging", "get_logging_options_dict", "get_logfile_handler", "set_logging_options_dict", "makeRecord"], "function_calls": ["set_lowest_log_level", "super", "sorted", "StreamHandler", "is_logfile_handler_configured", "setup_log_granular_levels", "freeze", "is_temp_handler_configured", "dict", "RuntimeError", "get_logging_level_from_string", "set_lowest_log_level_by_opts", "shutdown_logfile_handler", "max", "list", "DeferredStreamHandler", "shutdown_console_handler", "int", "get_extended_logging_handlers", "setup_console_handler", "is_console_handler_configured", "setup_logfile_handler", "setup_temp_handler", "is_extended_logging_configured", "LoggingRuntimeError", "SysLogHandler", "get_console_handler", "str", "shutdown_temp_handler", "set_log_record_factory", "get_temp_handler", "setup_extended_logging", "tuple", "get_handlers_func", "isinstance", "len", "_format_exception", "getattr", "hasattr", "WatchedFileHandler", "TextFormat", "shutdown_extended_logging", "get_logging_options_dict", "get_logfile_handler", "RotatingFileHandler", "print", "min"], "class_names": ["SaltLogRecord", "SaltColorLogRecord", "SaltLoggingClass"], "class_method_calls": ["logging.WARNING", "logging.setLoggerClass", "LOG_LEVELS.get", "sys.__excepthook__", "logging.ERROR", "sys.stderr", "logfile_handler.close", "RequestContext.current", "socket.SOCK_DGRAM", "atexit.unregister", "LOGGING_LOGGER_CLASS._log", "logging.setLogRecordFactory", "setup_logfile_handler.__handler__", "handler.setLevel", "re.compile", "pathlib.Path", "traceback.format_exception", "self.process", "logging.Formatter", "logging.addLevelName", "exc_type.__name__", "extra.pop", "_logger.error", "path.stem", "LOG_LEVELS.items", "logrecord.exc_info_on_loglevel_formatted", "logging.DEBUG", "salt.utils", "formatter._fmt", "os.getpid", "salt.loader", "types.GeneratorType", "_stderr.write", "log.warning", "SaltLogRecord.__init__", "logging.root", "logging.Logger", "self.levelname", "level.lower", "LOGGING_LOGGER_CLASS.makeRecord", "match.group", "handler.close", "console_handler.close", "path.resolve", "handler.acquire", "MODNAME_PATTERN.search", "handler.formatter", "parsed_log_path.path", "setup_console_handler.__handler__", "fmt.replace", "self.getMessage", "log_granular_levels.items", "sys.version_info", "syslog_opts.pop", "handler.stream", "socket.SOCK_STREAM", "logrecord.exc_info_on_loglevel", "self.colorlevel", "providers.items", "logging.GARBAGE", "logging.handlers", "handler.lock", "digits.isdigit", "self.colorname", "sys.exc_info", "SysLogHandler.LOG_USER", "msg.decode", "atexit.register", "SaltLoggingClass.verbose", "facility_name.startswith", "logging.TRACE", "self.colormsg", "get_log_record_factory.__factory__", "setup_extended_logging.__handlers__", "self.colorprocess", "logging.QUIET", "_args.append", "item.decode", "handler.setFormatter", "log.info", "logging.LogRecord", "urllib.parse", "handler.level", "logging.INFO", "log_levels.append", "set_logging_options_dict.__options_dict__", "handler.sync_with_handlers", "logging.PROFILE", "self.bracketlevel", "logging.CRITICAL", "formatter.datefmt", "self.bracketprocess", "logging.NullHandler", "setup_temp_handler.__handler__", "parsed_log_path.scheme", "self.name", "SaltLoggingClass.debug", "logging.getLoggerClass", "logrecord.exc_info_on_loglevel_instance", "handler.createLock", "handler.release", "multiprocessing.current_process", "self.bracketname", "in_mainprocess.__pid__", "handler.flush", "log.debug", "match.groupdict", "log.trace", "additional_handlers.append", "logrecord.jid", "opts.get", "parsed_log_path.port", "sys.excepthook", "logging.getLogger", "parsed_log_path.hostname", "sys.__stderr__", "logging.NOTSET", "set_lowest_log_level.__log_level__", "_logger.setLevel"]}, "mixins.py": {"libraries": ["salt.utils.event", "os", "collections.abc.MutableMapping", "salt.utils.state", "signal", "salt.utils.job", "salt.utils.error", "salt.ext.tornado.stack_context", "fnmatch", "salt.utils.versions", "salt.utils.args", "salt.output", "weakref", "salt.utils.user", "salt.utils.lazy", "traceback", "salt.exceptions", "salt.utils.process", "logging", "salt.channel.client", "salt.utils.platform", "salt._logging", "salt.utils.doc", "collections.abc.Mapping", "salt.minion", "salt.utils.jid", "copy"], "function_names": ["__len__", "__init__", "master_call", "_gen_async_pub", "print_async_event", "wrapper", "__delitem__", "asynchronous", "store_job", "__iter__", "_proc_function", "__getattr__", "cmd_async", "__getitem__", "cmd", "low", "functions_dict", "get_docs", "cmd_sync", "__setstate__", "__getstate__", "_proc_function_remote", "__setitem__", "mminion"], "function_calls": ["len", "frozenset", "getattr", "hasattr", "func", "sorted", "str", "set", "iter", "dict", "NotImplementedError", "tuple", "cls", "ClientFuncsDict", "list", "isinstance"], "class_names": ["ClientStateMixin", "AsyncClientMixin", "SyncClientMixin", "ClientFuncsDict"], "class_method_calls": ["os.getpid", "fun.startswith", "channel.send", "completed_funcs.append", "self._proc_function", "self.mminion", "self.functions", "self.print_async_event", "fnmatch.filter", "func.__doc__", "log.warning", "mod_name.split", "kwargs.pop", "event.get", "self._mminion", "instance.cmd_sync", "self.store_job", "pub_data.get", "self._gen_async_pub", "instance.low", "self.__init__", "self.tag_prefix", "event.get_event", "proc.start", "self.context", "self.master_call", "proc.join", "copy.copy", "salt.output", "signal.SIGINT", "f_call.get", "namespaced_event.fire_event", "self.low", "self.opts", "func_globals.items", "traceback.format_exc", "salt.exceptions", "self_functions.keys", "log.error", "signal.SIGTERM", "self.__class__", "arglist.append", "self._proc_function_remote", "log.info", "low.get", "salt.ext", "proc_func.__qualname__", "kwargs_key.startswith", "arg.endswith", "logging.getLogger", "self.client", "salt._logging", "logging.DEBUG", "weakref.proxy", "salt.channel", "salt.minion", "salt.utils"]}, "auto.py": {"libraries": ["os", "salt.ext.tornado.platform.posix.Waker", "time.monotonic", "salt.ext.tornado.platform.common.Waker", "__future__.absolute_import", "__future__.division", "__future__.print_function", "monotonic.monotonic", "salt.ext.tornado.platform.windows.set_close_exec", "salt.ext.tornado.platform.posix.set_close_exec", "monotime"], "function_names": ["set_close_exec"], "function_calls": [], "class_names": [], "class_method_calls": ["os.environ", "os.name"]}, "django.py": {"libraries": ["os", "django.contrib.auth", "logging", "sys", "django", "django.db.connection"], "function_names": ["__django_auth_setup", "is_connection_usable", "auth", "__virtual__", "acl"], "function_calls": ["__django_auth_setup", "is_connection_usable", "eval", "locals", "__import__", "globals", "isinstance"], "class_names": [], "class_method_calls": ["os.environ", "django_model_fullname.split", "logging.getLogger", "connection.connection", "sys.path", "django.VERSION", "user.is_active", "connection.close", "DJANGO_AUTH_CLASS.objects", "django.setup", "django.contrib", "a.minion_fn", "a.user_fk", "a.minion_or_fn_matcher", "log.debug"]}, "file.py": {"libraries": ["salt.utils.json", "salt.utils.data", "os", "salt.utils.files"], "function_names": ["save"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "os.path", "name.startswith", "os.makedirs"]}, "keystone.py": {"libraries": [], "function_names": ["tenant_present", "project_present", "endpoint_absent", "role_present", "_create_endpoint", "user_present", "user_absent", "role_absent", "__virtual__", "_api_version", "service_present", "tenant_absent", "endpoint_present", "_changes", "service_absent", "project_absent"], "function_calls": ["tenant_present", "_create_endpoint", "float", "set", "_api_version", "tenant_absent", "dict", "_changes", "list"], "class_names": [], "class_method_calls": ["endpoint.get", "__opts__.get", "ret.get"]}, "ldap.py": {"libraries": ["salt.utils.oset.OrderedSet", "logging", "salt.utils.odict.OrderedDict", "inspect", "salt.utils.stringutils.to_bytes", "copy"], "function_names": ["_toset", "_update_entry", "managed", "_process_entries"], "function_calls": ["len", "OrderedDict", "OrderedSet", "sorted", "str", "set", "connect", "to_bytes", "_update_entry", "_process_entries", "_toset", "ValueError", "isinstance"], "class_names": [], "class_method_calls": ["changed_new.get", "directives.items", "errs.append", "entry.get", "new.get", "n.get", "dn_set.update", "inspect.getmodule", "vals.update", "x.pop", "entries_dict.items", "copy.deepcopy", "o.get", "log.exception", "changed_old.get", "state.items", "to_delete.add", "old.get", "connect_spec.setdefault", "logging.getLogger", "dn_to_delete.add", "ldap3.LDAPError", "entry.pop", "x.items"]}, "mysql.py": {"libraries": ["salt.utils.job", "MySQLdb", "contextlib.contextmanager", "salt.utils.data", "salt.returners", "salt.exceptions", "MySQLdb.err.OperationalError", "salt.utils.json", "MySQLdb.cursors", "logging", "sys", "MySQLdb.connections.OperationalError", "pymysql", "MySQLdb.converters"], "function_names": ["event_return", "returner", "save_load", "get_jids", "prep_jid", "_get_serv", "get_fun", "get_minions", "get_jid", "get_load", "__virtual__", "_get_options", "clean_old_jobs", "save_minions", "_archive_jobs", "get_jids_filter", "_purge_jobs"], "function_calls": ["save_load", "prep_jid", "bool", "int", "_get_serv", "str", "_get_options", "_archive_jobs", "_purge_jobs", "isinstance"], "class_names": [], "class_method_calls": ["cur.fetchone", "conn.ping", "sql.format", "MySQLdb.DatabaseError", "__opts__.get", "_options.get", "sys.stderr", "conn.cursor", "MySQLdb.IntegrityError", "cursor.execute", "log.critical", "event.get", "_options.items", "cur.execute", "log.debug", "cur.fetchall", "pymysql.install_as_MySQLdb", "salt.returners", "salt.exceptions", "log.error", "ret.get", "v.lower", "logging.getLogger", "ret.append", "err.args", "salt.utils", "MySQLdb.Error", "MySQLdb.connect"]}, "pam.py": {"libraries": ["logging", "os", "salt.utils.files"], "function_names": ["__virtual__", "read_file", "_parse"], "function_calls": ["len", "_parse"], "class_names": [], "class_method_calls": ["contents.splitlines", "logging.getLogger", "line.split", "ifile.read", "log.error", "rules.append", "part.endswith", "salt.utils", "os.path", "line.startswith", "part.replace"]}, "pki.py": {"libraries": ["M2Crypto.X509", "Cryptodome.Util.asn1", "logging", "salt.utils.files", "Crypto.Util.asn1", "OpenSSL"], "function_names": ["__virtual__", "auth"], "function_calls": ["Exception", "dict"], "class_names": [], "class_method_calls": ["cacert.get_pubkey", "der_sig_in.payload", "c.FILETYPE_PEM", "cert.get_subject", "c.load_certificate", "der_sig_in.decode", "OpenSSL.crypto", "der.decode", "log.debug", "cert.get_signature_algorithm", "cert.verify", "asn1.DerObject", "c.verify", "log.info", "c.dump_certificate", "c.FILETYPE_ASN1", "X509.load_cert", "logging.getLogger", "X509.load_cert_string", "f.read", "asn1.DerSequence", "salt.utils", "X509.FORMAT_PEM"]}, "rest.py": {"libraries": ["salt.utils.http", "logging", "salt.template.compile_template", "salt.loader"], "function_names": ["get", "query", "set_"], "function_calls": ["query", "compile_template"], "class_names": [], "class_method_calls": ["logging.getLogger", "http.query", "salt.loader", "key.split", "__opts__.get", "pair.split"]}, "sharedsecret.py": {"libraries": ["logging"], "function_names": ["auth"], "function_calls": [], "class_names": [], "class_method_calls": ["__opts__.get", "logging.getLogger"]}, "yubico.py": {"libraries": ["yubico_client.Yubico", "logging", "yubico_client.yubico_exceptions"], "function_names": ["auth", "__get_yubico_users", "groups"], "function_calls": ["Yubico", "auth", "__get_yubico_users", "print", "list"], "class_names": [], "class_method_calls": ["client.verify", "log.info", "logging.getLogger", "yubico_exceptions.StatusCodeError"]}, "adb.py": {"libraries": ["salt.utils.path", "logging", "salt.utils.beacons"], "function_names": ["__virtual__", "beacon", "validate"], "function_calls": ["any", "int", "list", "isinstance"], "class_names": [], "class_method_calls": ["log.trace", "found_devices.append", "out.split", "logging.getLogger", "ret.append", "last_state.get", "config.get", "line.split", "log.error", "log.info", "last_state.keys", "salt.utils"]}, "aix_account.py": {"libraries": ["logging"], "function_names": ["__virtual__", "beacon", "validate"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["log.error", "logging.getLogger", "ret.append"]}, "avahi_announce.py": {"libraries": ["avahi", "time", "dbus", "salt.utils.beacons", "logging", "dbus.DBusException", "salt.utils.stringutils"], "function_names": ["__virtual__", "beacon", "_enforce_txt_record_maxlen", "validate"], "function_calls": ["len", "int", "_enforce_txt_record_maxlen", "all", "isinstance"], "class_names": [], "class_method_calls": ["time.sleep", "config.get", "avahi.PROTO_UNSPEC", "avahi.DBUS_INTERFACE_ENTRY_GROUP", "__grains__.get", "GROUP.Reset", "avahi.IF_UNSPEC", "GROUP.Commit", "avahi.DBUS_INTERFACE_SERVER", "avahi.DBUS_PATH_SERVER", "BUS.get_object", "dbus.Interface", "dbus.UInt16", "log.error", "GROUP.AddService", "dbus.SystemBus", "dbus.UInt32", "grain.find", "logging.getLogger", "ret.append", "GROUP.UpdateServiceTxt", "avahi.DBUS_NAME", "avahi.dict_to_txt_array", "SERVER.EntryGroupNew", "__grains__.copy", "LAST_GRAINS.get", "salt.utils"]}, "bonjour_announce.py": {"libraries": ["time", "select", "salt.utils.beacons", "logging", "salt.utils.stringutils", "pybonjour", "atexit"], "function_names": ["_register_callback", "beacon", "__virtual__", "validate", "_close_sd_ref", "_enforce_txt_record_maxlen"], "function_calls": ["len", "int", "str", "_enforce_txt_record_maxlen", "all", "isinstance"], "class_names": [], "class_method_calls": ["pybonjour.kDNSServiceErr_NoError", "grain.find", "time.sleep", "logging.getLogger", "SD_REF.close", "ret.append", "config.get", "select.select", "log.error", "pybonjour.TXTRecord", "__grains__.get", "atexit.register", "__grains__.copy", "LAST_GRAINS.get", "salt.utils", "pybonjour.DNSServiceUpdateRecord", "pybonjour.DNSServiceProcessResult", "pybonjour.DNSServiceRegister"]}, "btmp.py": {"libraries": ["os", "dateutil.parser", "salt.utils.beacons", "logging", "salt.utils.stringutils", "datetime", "salt.utils.files", "struct"], "function_names": ["_gather_group_members", "_validate_time_range", "beacon", "__virtual__", "validate", "_check_time_range", "_get_loc"], "function_calls": ["len", "bool", "_gather_group_members", "_validate_time_range", "_check_time_range", "all", "enumerate", "isinstance"], "class_names": [], "class_method_calls": ["__context__.get", "struct.unpack", "logging.getLogger", "fp_.seek", "ret.append", "log.error", "fp_.read", "dateutil_parser.parse", "struct.calcsize", "os.path", "log.warning", "fp_.tell", "salt.utils", "datetime.datetime"]}, "cert_info.py": {"libraries": ["OpenSSL.crypto", "salt.utils.beacons", "logging", "salt.utils.files", "datetime.datetime"], "function_names": ["__virtual__", "beacon", "validate"], "function_calls": ["next", "range", "str", "iter", "isinstance"], "class_names": [], "class_method_calls": ["config.get", "cert.get_extension", "datetime.today", "cert.get_subject", "cert.get_extension_count", "cert.get_notAfter", "cert.has_expired", "cert.get_serial_number", "cert.get_notBefore", "log.debug", "datetime.strptime", "crypto.Error", "cert.get_version", "cert.get_signature_algorithm", "crypto.FILETYPE_PEM", "log.error", "extensions.append", "cert.get_issuer", "crypto.load_certificate", "cert_date.strftime", "k.decode", "logging.getLogger", "ret.append", "v.decode", "fp_.read", "certificates.append", "salt.utils"]}, "diskusage.py": {"libraries": ["psutil", "re", "salt.utils.platform", "salt.utils.beacons", "logging"], "function_names": ["__virtual__", "beacon", "validate"], "function_calls": ["next", "float", "iter", "isinstance"], "class_names": [], "class_method_calls": ["psutil.disk_partitions", "re.match", "logging.getLogger", "ret.append", "mount.endswith", "log.error", "part.mountpoint", "psutil.disk_usage", "_current_usage.percent", "re.sub", "log.warning", "mount_re.upper", "salt.utils"]}, "glxinfo.py": {"libraries": ["salt.utils.path", "logging", "salt.utils.beacons"], "function_names": ["__virtual__", "beacon", "validate"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["log.trace", "logging.getLogger", "last_state.get", "ret.append", "log.error", "salt.utils"]}, "haproxy.py": {"libraries": ["logging", "salt.utils.beacons"], "function_names": ["__virtual__", "beacon", "validate"], "function_calls": ["int", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "ret.append", "config.get", "log.error", "salt.utils", "log.debug"]}, "inotify.py": {"libraries": ["os", "re", "salt.utils.beacons", "pyinotify", "logging", "fnmatch", "collections"], "function_names": ["close", "_enqueue", "beacon", "__virtual__", "_get_notifier", "validate", "_get_mask"], "function_calls": ["next", "getattr", "dir", "any", "set", "iter", "_get_notifier", "_get_mask", "list", "isinstance"], "class_names": [], "class_method_calls": ["event.maskname", "config.get", "wm.watches", "log.warning", "pyinotify.IN_DELETE", "notifier.check_events", "event.pathname", "pyinotify.ExcludeFilter", "queue.popleft", "pyinotify.Notifier", "re.search", "collections.deque", "var.startswith", "log.error", "pyinotify.IN_CREATE", "log.info", "wm.update_watch", "pyinotify.IN_MODIFY", "current.add", "notifier._watch_manager", "notifier.read_events", "pyinotify.WatchManager", "fnmatch.fnmatch", "logging.getLogger", "ret.append", "wm.add_watch", "notifier.process_events", "os.path", "MASKS.get", "salt.utils", "event.path", "excl.append"]}, "journald.py": {"libraries": ["logging", "salt.utils.data", "systemd.journal", "salt.utils.beacons"], "function_names": ["__virtual__", "beacon", "validate", "_get_journal"], "function_calls": ["len", "_get_journal", "isinstance"], "class_names": [], "class_method_calls": ["systemd.journal", "logging.getLogger", "ret.append", "config.get", "sub.update", "log.error", "journal.get_next", "salt.utils"]}, "junos_rre_keys.py": {"libraries": [], "function_names": ["beacon"], "function_calls": [], "class_names": [], "class_method_calls": ["ret.append"]}, "load.py": {"libraries": ["logging", "os", "salt.utils.platform", "salt.utils.beacons"], "function_names": ["__virtual__", "beacon", "validate"], "function_calls": ["len", "any", "float", "dict", "zip", "isinstance"], "class_names": [], "class_method_calls": ["log.trace", "logging.getLogger", "ret.append", "config.get", "log.error", "salt.utils", "log.debug", "os.getloadavg"]}, "log_beacon.py": {"libraries": ["re", "salt.utils.platform", "salt.utils.beacons", "logging", "salt.utils.files"], "function_names": ["__virtual__", "beacon", "validate", "_get_loc"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["__context__.get", "txt.splitlines", "d.items", "logging.getLogger", "ret.append", "fp_.seek", "SKEL.copy", "config.get", "log.error", "fp_.read", "log.info", "reg.match", "fp_.tell", "salt.utils", "re.compile"]}, "memusage.py": {"libraries": ["psutil", "logging", "re", "salt.utils.beacons"], "function_names": ["__virtual__", "beacon", "validate"], "function_calls": ["float", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "ret.append", "psutil.virtual_memory", "log.error", "_current_usage.percent", "re.sub", "salt.utils"]}, "napalm_beacon.py": {"libraries": ["logging", "re", "salt.utils.napalm", "salt.utils.beacons"], "function_names": ["__virtual__", "beacon", "validate", "_compare"], "function_calls": ["next", "getattr", "float", "_compare", "iter", "isinstance"], "class_names": [], "class_method_calls": ["re.I", "re.match", "logging.getLogger", "ret.append", "cur_struct.items", "log.error", "fun_cfg.pop", "fun_ret.get", "salt.utils", "log.info", "cur_cmp.items", "mod.items", "re.compile", "log.debug", "numeric_compare.group", "_numeric_regex.match"]}, "network_info.py": {"libraries": ["psutil", "logging", "salt.utils.beacons"], "function_names": ["_to_list", "beacon", "validate", "__virtual__"], "function_calls": ["hasattr", "getattr", "any", "int", "_to_list", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "psutil.net_io_counters", "ret.append", "config.get", "salt.utils", "log.debug"]}, "network_settings.py": {"libraries": ["pyroute2.NDB", "pyroute2.IPDB", "salt.loader", "ast", "pyroute2.ndb.compat.ipdb_interfaces_view", "re", "salt.utils.beacons", "logging"], "function_names": ["__hash__", "_copy_interfaces_info", "beacon", "__virtual__", "validate"], "function_calls": ["hash", "IPDB", "sorted", "_copy_interfaces_info", "set", "tuple", "repr", "Hashabledict", "NDB", "ipdb_interfaces_view", "all", "isinstance"], "class_names": ["Hashabledict"], "class_method_calls": ["interfaces.append", "ast.literal_eval", "logging.getLogger", "ret.append", "salt.loader", "config.get", "_diff_stats_dict.update", "log.error", "_config.get", "re.search", "__grains__.update", "salt.utils", "IP.by_name", "log.debug", "self.items", "_interface_attrs_cpy.add"]}, "pkg.py": {"libraries": ["os", "salt.utils.functools.namespaced_function", "salt.modules.win_pkg._get_package_info", "salt.exceptions.MinionError", "salt.exceptions.CommandExecutionError", "salt.modules.win_pkg.refresh_db", "salt.modules.win_pkg._get_repo_details", "fnmatch", "salt.utils.versions", "salt.exceptions.SaltInvocationError", "salt.utils.args", "salt.utils.odict.OrderedDict", "salt.modules.win_pkg._reverse_cmp_pkg_versions", "re", "salt.modules.win_pkg.get_repo_data", "logging", "salt.modules.win_pkg._repo_process_pkg_sls", "salt.output.nested", "salt.modules.win_pkg._get_latest_pkg_version", "salt.modules.pkg_resource._repack_pkgs", "salt.modules.win_pkg._refresh_db_conditional", "salt.utils.platform", "salt.utils.pkg", "salt.modules.win_pkg.genrepo"], "function_names": ["_nested_output", "_find_unpurge_targets", "_resolve_capabilities", "_get_comparison_spec", "group_installed", "_verify_install", "removed", "unheld", "_fulfills_version_spec", "downloaded", "purged", "installed", "__virtual__", "mod_beacon", "patch_downloaded", "mod_watch", "patch_installed", "_check_ignore_epoch", "_uninstall", "latest", "mod_init", "held", "_preflight_check", "_fulfills_version_string", "_find_remove_targets", "mod_aggregate", "uptodate", "_find_download_targets", "_get_desired_pkg", "_find_advisory_targets", "_find_install_targets", "_parse_version_string"], "function_calls": ["any", "sorted", "_nested_output", "_resolve_capabilities", "_find_unpurge_targets", "dict", "_get_latest_pkg_version", "_get_comparison_spec", "_verify_install", "_normalize_name", "enumerate", "list", "_fulfills_version_spec", "next", "set", "patch_installed", "_check_ignore_epoch", "all", "globals", "_uninstall", "_repack_pkgs", "_preflight_check", "namespaced_function", "str", "_fulfills_version_string", "_find_remove_targets", "isinstance", "len", "bool", "_find_download_targets", "_get_package_info", "_get_desired_pkg", "iter", "_find_install_targets", "_find_advisory_targets", "_parse_version_string"], "class_names": [], "class_method_calls": ["chunk.get", "new_pkgs.items", "exc.strerror", "version_conditions_string.split", "nested.__opts__", "held_pkgs.add", "re.search", "desired.update", "comment.insert", "cur_prov.get", "desired.items", "re.compile", "x.keys", "kwargs.get", "problems.append", "targets.keys", "changes.get", "salt.utils", "version_conditions_string.strip", "reinstall_targets.append", "dpkgs.get", "comment.append", "x.get", "warnings.append", "pkgver.strip", "unhold_ret.get", "nested.output", "match.group", "result.append", "comments.append", "_locks.get", "desired.keys", "ret.setdefault", "pkgs.append", "lock_ver.lstrip", "log.error", "expected.items", "avail.get", "failed.append", "_ok.append", "pkgname.split", "sources.extend", "failed.extend", "lock_re.match", "targets.extend", "os.path", "exc.strerror_without_changes", "chunk.pop", "targets.items", "to_reinstall.items", "kwargs.pop", "new_pkgs.get", "changes.update", "new_caps.get", "hold_ret.get", "targets.append", "to_download.items", "exc.info", "dpkgs.update", "__salt__.get", "msg.format", "pkgs.extend", "__grains__.get", "cur_patches.get", "cur.get", "locks.update", "pkgver.endswith", "expected.keys", "_changes.update", "cver.keys", "targets.sort", "modified.append", "cur_pkgs.items", "cur_pkgs.get", "log.debug", "failed.sort", "packages.items", "pkg.items", "low.get", "fnmatch.fnmatch", "logging.getLogger", "err.format", "to_remove.items", "problems.get"]}, "proxy_example.py": {"libraries": ["salt.utils.http", "logging", "salt.utils.beacons"], "function_names": ["__virtual__", "beacon", "validate"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "ps.py": {"libraries": ["psutil", "time", "salt.exceptions.CommandExecutionError", "re", "salt.utils.data", "salt.utils.decorators.path", "salt.exceptions.SaltInvocationError", "datetime"], "function_names": ["cpu_percent", "num_cpus", "network_io_counters", "pkill", "boot_time", "lsof", "virtual_memory", "__virtual__", "_get_proc_username", "proc_info", "cpu_times", "disk_partitions", "ss", "_get_proc_status", "netstat", "swap_memory", "top", "total_physical_memory", "kill_pid", "disk_partition_usage", "disk_usage", "_get_proc_cmdline", "_get_proc_pid", "psaux", "status", "get_users", "get_pid_list", "pgrep", "_get_proc_name", "_get_proc_create_time", "disk_io_counters"], "function_calls": ["_get_proc_pid", "len", "int", "_get_proc_create_time", "str", "sorted", "set", "_get_proc_cmdline", "_get_proc_username", "disk_usage", "dict", "CommandExecutionError", "_get_proc_name", "SaltInvocationError", "disk_partitions", "list", "_get_proc_status"], "class_names": [], "class_method_calls": ["psutil.swap_memory", "time.sleep", "psutil.disk_partitions", "psutil.net_io_counters", "psutil.TOTAL_PHYMEM", "info.find", "psutil.cpu_count", "psutil.disk_io_counters", "proc.username", "psutil.AccessDenied", "proc.status", "proc.send_signal", "ps_aux.splitlines", "b_time.strftime", "ret.extend", "psutil.ZombieProcess", "x._asdict", "re.search", "partition._asdict", "proc.info", "start_usage.items", "ss_infos.splitlines", "result.append", "psutil.boot_time", "times._asdict", "process.memory_info", "usage.add", "found_infos.append", "re.compile", "process.cpu_times", "psutil.Process", "psutil.users", "psutil.process_iter", "psutil.virtual_memory", "proc.as_dict", "pattern.search", "proc.name", "netstat_infos.splitlines", "psutil.cpu_percent", "proc.create_time", "procs.append", "killed.append", "psutil.pids", "partition.update", "psutil.NoSuchProcess", "psutil.cpu_times", "psutil.disk_usage", "salt.utils", "datetime.datetime", "salt_exception_pattern.search", "proc.cmdline", "psutil.NUM_CPUS", "proc.pid"]}, "salt_monitor.py": {"libraries": ["salt.utils.beacons"], "function_names": ["_parse_args", "beacon", "validate"], "function_calls": ["next", "iter", "_parse_args", "map", "list", "isinstance"], "class_names": [], "class_method_calls": ["args_kwargs_dict.get", "_kwargs.update", "entry.items", "salt.utils", "events.append"]}, "salt_proxy.py": {"libraries": ["logging"], "function_names": ["configure_proxy"], "function_calls": [], "class_names": [], "class_method_calls": ["ret.update", "logging.getLogger"]}, "sensehat.py": {"libraries": ["logging", "sense_hat.SenseHat"], "function_names": ["clear", "get_pressure", "get_temperature_from_pressure", "get_pixel", "show_image", "get_humidity", "set_pixel", "get_pixels", "show_message", "low_light", "__virtual__", "get_temperature", "set_pixels", "get_temperature_from_humidity", "show_letter"], "function_calls": ["SenseHat"], "class_names": [], "class_method_calls": ["_sensehat.show_message", "_sensehat.get_pixels", "_sensehat.get_temperature_from_pressure", "logging.getLogger", "_sensehat.set_pixel", "_sensehat.show_letter", "_sensehat.clear", "_sensehat.load_image", "_sensehat.get_pixel", "log.error", "_sensehat.get_humidity", "_sensehat.get_pressure", "_sensehat.set_pixels", "_sensehat.get_temperature_from_humidity", "_sensehat.set_rotation", "_sensehat.low_light", "_sensehat.get_temperature"]}, "service.py": {"libraries": ["time", "salt.exceptions.CommandExecutionError", "salt.utils.data", "salt.utils.platform", "logging", "salt.utils.args.get_function_argspec", "salt.utils.systemd.booted"], "function_names": ["running", "_available", "_enable", "_disable", "_get_systemd_only", "disabled", "dead", "_add_warnings", "_enabled_used_error", "__virtual__", "mod_beacon", "_offline", "masked", "mod_watch", "unmasked", "enabled"], "function_calls": ["_available", "_enable", "hasattr", "_disable", "func", "booted", "_get_systemd_only", "_add_warnings", "_enabled_used_error", "_offline", "_argspec", "unmasked", "setattr", "isinstance"], "class_names": [], "class_method_calls": ["ret.update", "time.sleep", "_get_systemd_only.HAS_SYSTEMD", "ret.setdefault", "logging.getLogger", "kwargs.get", "__opts__.get", "current_warnings.extend", "stop_kwargs.update", "__grains__.get", "warnings.append", "exc.strerror", "ret.get", "start_kwargs.update", "salt.utils", "_beacon_data.get", "kwargs.pop"]}, "sh.py": {"libraries": ["time", "salt.utils.path", "salt.utils.vt", "logging", "salt.utils.stringutils"], "function_names": ["__virtual__", "beacon", "_get_shells", "validate"], "function_calls": ["any", "_get_shells", "enumerate", "list", "isinstance"], "class_names": [], "class_method_calls": ["track_pids.append", "logging.getLogger", "time.time", "ret.append", "line.split", "log.error", "err.split", "salt.utils"]}, "smartos_imgadm.py": {"libraries": ["salt.utils.path", "logging", "salt.utils.platform", "salt.utils.json"], "function_names": ["_split_docker_uuid", "delete", "source_add", "docker_to_uuid", "_is_docker_uuid", "update_installed", "vacuum", "list_installed", "show", "__virtual__", "_exit_status", "sources", "_parse_image_meta", "version", "source_delete", "avail", "get", "import_image", "_is_uuid"], "function_calls": ["len", "_split_docker_uuid", "sources", "list_installed", "get", "_parse_image_meta", "_exit_status", "docker_to_uuid", "_is_docker_uuid", "_is_uuid", "list"], "class_names": [], "class_method_calls": ["logging.getLogger", "uuid.split", "tag.startswith", "image.split", "result.append", "tag.split", "log.warning", "salt.utils", "log.debug", "result.keys"]}, "smartos_vmadm.py": {"libraries": ["salt.client", "salt.utils.odict.OrderedDict", "salt.exceptions.SaltClientError"], "function_names": ["stop", "start", "_action", "get", "reboot", "__virtual__", "is_running", "nodes", "list_vms"], "function_calls": ["len", "OrderedDict", "next", "_action", "int", "sorted", "iter", "isinstance"], "class_names": [], "class_method_calls": ["matched_vms.append", "ret.append", "salt.client", "ret.sort", "client.cmd_iter", "cn.keys"]}, "status.py": {"libraries": ["time", "fnmatch"], "function_names": ["reg"], "function_calls": [], "class_names": [], "class_method_calls": ["fnmatch.fnmatch", "time.time"]}, "swapusage.py": {"libraries": ["psutil", "logging", "re", "salt.utils.beacons"], "function_names": ["__virtual__", "beacon", "validate"], "function_calls": ["float", "isinstance"], "class_names": [], "class_method_calls": ["psutil.swap_memory", "logging.getLogger", "ret.append", "log.error", "_current_usage.percent", "re.sub", "salt.utils"]}, "telegram_bot_msg.py": {"libraries": ["logging", "telegram", "salt.utils.beacons"], "function_names": ["__virtual__", "beacon", "validate"], "function_calls": ["len", "all", "isinstance"], "class_names": [], "class_method_calls": ["logging.CRITICAL", "logging.getLogger", "telegram.Bot", "update.update_id", "ret.append", "config.get", "log.error", "message.chat", "bot.get_updates", "message.to_dict", "salt.utils", "log.debug", "update.message"]}, "twilio_txt_msg.py": {"libraries": ["twilio.rest.Client", "salt.utils.beacons", "logging", "twilio", "twilio.rest.TwilioRestClient"], "function_names": ["__virtual__", "beacon", "validate"], "function_calls": ["len", "TwilioRestClient", "int", "str", "tuple", "all", "isinstance"], "class_names": [], "class_method_calls": ["message.num_media", "log.trace", "logging.getLogger", "ret.append", "message.from_", "message.delete", "log.error", "pic.uri", "message.date_sent", "twilio.__version_info__", "salt.utils", "client.messages", "message.body", "message.sid", "client.media"]}, "watchdog.py": {"libraries": ["watchdog.events.FileSystemEventHandler", "watchdog.observers.Observer", "salt.utils.beacons", "logging", "collections"], "function_names": ["_validate", "_append_path_if_mask", "on_modified", "to_salt_event", "close", "__init__", "_validate_path", "on_moved", "beacon", "_get_queue", "_append_if_mask", "__virtual__", "_validate_mask", "validate", "on_created", "on_deleted"], "function_calls": ["_validate", "to_salt_event", "any", "Handler", "super", "str", "_validate_path", "Observer", "_get_queue", "_validate_mask", "ValidationError", "isinstance"], "class_names": ["ValidationError", "FileSystemEventHandler", "Handler"], "class_method_calls": ["self._append_if_mask", "config.get", "__context__.pop", "event.event_type", "event.src_path", "logging.debug", "queue.popleft", "collections.deque", "path_params.get", "self.queue", "observer.schedule", "log.error", "self._append_path_if_mask", "observer.stop", "_config.update", "logging.getLogger", "ret.append", "salt.utils", "observer.start", "self.masks"]}, "wtmp.py": {"libraries": ["os", "dateutil.parser", "salt.utils.beacons", "logging", "salt.utils.stringutils", "datetime", "salt.utils.files", "struct"], "function_names": ["_gather_group_members", "_validate_time_range", "beacon", "__virtual__", "validate", "_check_time_range", "_get_loc"], "function_calls": ["len", "bool", "_gather_group_members", "_validate_time_range", "_check_time_range", "all", "enumerate", "isinstance"], "class_names": [], "class_method_calls": ["__context__.get", "struct.unpack", "logging.getLogger", "fp_.seek", "ret.append", "__context__.pop", "log.error", "fp_.read", "dateutil_parser.parse", "struct.calcsize", "os.path", "log.warning", "fp_.tell", "salt.utils", "datetime.datetime"]}, "consul.py": {"libraries": ["logging"], "function_names": ["_acl_exists", "acl_absent", "acl_present", "_acl_changes"], "function_calls": ["_acl_exists", "_acl_changes"], "class_names": [], "class_method_calls": ["info.get", "logging.getLogger"]}, "etcd_cache.py": {"libraries": ["time", "etcd", "logging", "salt.payload", "base64", "salt.exceptions.SaltCacheError"], "function_names": ["updated", "ls", "flush", "__virtual__", "store", "_init_client", "contains", "_walk", "fetch"], "function_calls": ["_init_client", "_walk", "SaltCacheError", "int"], "class_names": [], "class_method_calls": ["logging.INFO", "r.key", "logging.getLogger", "keys.extend", "etcd.EtcdKeyNotFound", "time.time", "__opts__.get", "base64.b64decode", "client.write", "etcd._log", "client.read", "log.info", "salt.payload", "base64.b64encode", "r.dir", "client.delete", "path_prefix.strip", "etcd.Client"]}, "localfs.py": {"libraries": ["hashlib", "os", "salt.utils.path", "salt.config.DEFAULT_HASH_TYPE", "logging", "salt.payload", "salt.utils.files", "salt.utils.verify"], "function_names": ["get_token", "list_tokens", "mk_token", "rm_token"], "function_calls": ["str", "getattr", "hash_type"], "class_names": [], "class_method_calls": ["logging.getLogger", "ret.append", "fp_.write", "os.rename", "opts.get", "fp_.read", "os.urandom", "os.path", "salt.payload", "log.warning", "salt.utils", "os.remove"]}, "mysql_cache.py": {"libraries": ["pymysql", "time", "MySQLdb", "MySQLdb.err.OperationalError", "MySQLdb.cursors", "logging", "salt.payload", "MySQLdb.connections.OperationalError", "salt.utils.stringutils", "salt.exceptions.SaltCacheError", "copy", "MySQLdb.converters"], "function_names": ["force_reconnect", "updated", "ls", "run_query", "flush", "__virtual__", "store", "contains", "_init_client", "_create_table", "fetch"], "function_calls": ["len", "bool", "int", "run_query", "SaltCacheError", "repr", "_init_client", "_create_table"], "class_names": [], "class_method_calls": ["cur.fetchone", "time.sleep", "__context__.pop", "conn.cursor", "__context__.get", "cur.execute", "salt.payload", "log.debug", "cur.fetchall", "opts.pop", "copy.deepcopy", "pymysql.install_as_MySQLdb", "opts.get", "log.info", "mysql_kwargs.copy", "logging.getLogger", "k.split", "mysql_kwargs.pop", "k.startswith", "MySQLdb.connect", "cur.close"]}, "redis_cache.py": {"libraries": ["time", "itertools", "redis.exceptions.ConnectionError", "redis.exceptions.ResponseError", "redis", "rediscluster.RedisCluster", "logging", "salt.payload", "salt.utils.stringutils", "salt.exceptions.SaltCacheError"], "function_names": ["init_kwargs", "list_", "_get_timestamp_key", "_get_bank_keys_redis_key", "_get_redis_cache_opts", "_get_bank_redis_key", "_build_bank_hier", "updated", "flush", "__virtual__", "_get_key_redis_key", "store", "fetch", "joinbanks", "_get_redis_server", "contains", "_get_banks_to_remove", "_get_redis_keys_opts"], "function_calls": ["len", "_get_bank_keys_redis_key", "_get_timestamp_key", "_get_redis_cache_opts", "_get_bank_redis_key", "_build_bank_hier", "range", "int", "_get_redis_server", "SaltCacheError", "RedisCluster", "_get_banks_to_remove", "_get_redis_keys_opts", "_get_key_redis_key"], "class_names": [], "class_method_calls": ["redis_server.get", "time.time", "__opts__.get", "redis_pipe.sadd", "redis_server.smembers", "key.decode", "redis_server.type", "redis_pipe.srem", "salt.payload", "log.debug", "bank.decode", "redis.StrictRedis", "bank.split", "redis_pipe.execute", "log.error", "redis_server.sismember", "redis_pipe.smembers", "redis_server.pipeline", "logging.getLogger", "bank_paths_to_remove.extend", "redis_pipe.set", "redis_pipe.delete", "salt.utils", "itertools.accumulate"]}, "client.py": {"libraries": ["logging", "salt.channel.client", "salt.utils.versions.warn_until"], "function_names": ["factory"], "function_calls": ["warn_until"], "class_names": ["ReqChannel", "AsyncPubChannel", "PushChannel", "AsyncPullChannel", "AsyncReqChannel", "AsyncPushChannel", "PullChannel"], "class_method_calls": ["salt.channel", "logging.getLogger"]}, "server.py": {"libraries": ["logging", "salt.channel.server", "salt.utils.versions.warn_until"], "function_names": ["factory"], "function_calls": ["warn_until"], "class_names": ["PubServerChannel", "ReqServerChannel"], "class_method_calls": ["salt.channel", "logging.getLogger"]}, "api.py": {"libraries": ["logging", "salt.utils.parsers", "salt.utils.files", "salt.utils.verify.check_user", "salt.client.netapi"], "function_names": ["start", "prepare", "shutdown", "_handle_signals"], "function_calls": ["check_user", "super"], "class_names": ["SaltAPI"], "class_method_calls": ["self.config", "logging.getLogger", "self.daemonize_if_required", "msg.strip", "salt.client", "self.api", "self.set_pidfile", "log.info", "parsers.SaltAPIParser"]}, "batch.py": {"libraries": ["time", "salt.client", "salt.exceptions", "datetime.timedelta", "logging", "math", "salt.utils.stringutils", "salt.output", "datetime.datetime", "copy"], "function_names": ["__init__", "get_bnum", "partition", "gather_minions", "__update_wait", "run"], "function_calls": ["len", "next", "range", "int", "sorted", "set", "float", "partition", "iter", "max", "timedelta", "list", "isinstance"], "class_names": ["Batch"], "class_method_calls": ["time.sleep", "iters.remove", "nret.difference", "to_run.append", "self.options", "datetime.now", "self.__update_wait", "args.append", "active.remove", "math.ceil", "parts.update", "self.eauth", "iters.append", "data.pop", "salt.output", "log.debug", "self.minions", "self.pub_kwargs", "wait.append", "self.gather_minions", "self.opts", "self.quiet", "self.local", "self.get_bnum", "copy.deepcopy", "salt.client", "data.get", "log.error", "fret.add", "ret.keys", "ping_ret.keys", "to_run.pop", "logging.getLogger", "nret.add", "parts.items", "self.down_minions", "self.ping_gen", "salt.utils", "next_.append"]}, "call.py": {"libraries": ["os", "salt.config._expand_glob_path", "salt.utils.parsers", "salt.cli.caller", "salt.defaults.exitcodes"], "function_names": ["run"], "function_calls": ["_expand_glob_path"], "class_names": ["SaltCall"], "class_method_calls": ["self.config", "caller.print_docs", "self.exit", "caller.run", "self.options", "caller.print_grains", "os.path", "self.parse_args", "salt.defaults", "salt.utils", "salt.cli"]}, "caller.py": {"libraries": ["salt.utils.profile", "os", "salt.loader", "salt.utils.minion", "salt.utils.stringutils", "salt.utils.files", "salt.exceptions.CommandNotFoundError", "salt.defaults.exitcodes", "salt.exceptions.CommandExecutionError", "salt.payload", "salt.exceptions.SaltInvocationError", "salt.utils.args", "salt.output", "salt", "traceback", "salt._logging.LOG_LEVELS", "logging", "salt.channel.client", "salt.exceptions.SaltClientError", "sys", "salt.minion", "salt.utils.jid"], "function_names": ["factory", "call", "print_grains", "return_pub", "__init__", "print_docs", "run"], "function_calls": ["hasattr", "getattr", "super", "sorted", "str", "SaltInvocationError", "SystemExit", "ZeroMQCaller", "all", "isinstance"], "class_names": ["Caller", "ZeroMQCaller", "BaseCaller"], "class_method_calls": ["os.getpid", "LOG_LEVELS.get", "self.minion", "channel.send", "salt.loader", "name.startswith", "logging.ERROR", "func.__doc__", "sys.stderr", "salt.defaults", "msg.format", "fp_.write", "salt.payload", "ret.items", "self.call", "salt.output", "fun.split", "ret.copy", "self.opts", "traceback.format_exc", "sys.exit", "self.return_pub", "ret.get", "data.update", "logging.getLogger", "logging.DEBUG", "os.path", "salt.channel", "salt.minion", "salt.utils", "os.remove"]}, "cp.py": {"libraries": ["os", "salt.utils.files", "salt.utils.gzip_util", "errno", "salt.fileclient", "salt.exceptions.CommandExecutionError", "salt.utils.data", "salt.loader.dunder.__grains__", "fnmatch", "salt.loader.dunder.__opts__", "salt.loader.dunder.__pillar__", "salt.utils.templates", "salt.loader.dunder.__context__", "logging", "salt.utils.url", "salt.crypt", "urllib.parse", "salt.channel.client", "salt.utils.path", "salt.loader.dunder.__file_client__", "base64", "salt.minion"], "function_names": ["list_master_dirs", "envs", "cache_master", "_gather_pillar", "is_cached", "get_template", "cache_files", "_error", "cache_dest", "list_minion", "get_file_str", "get_file", "cache_dir", "get_url", "get_dir", "list_states", "_client", "list_master", "_render", "recv", "hash_file", "_auth", "recv_chunked", "list_master_symlinks", "stat_file", "cache_file", "push", "cache_local_file", "push_dir", "_render_filenames"], "function_calls": ["_auth", "_client", "cache_file", "str", "_gather_pillar", "_render_filenames", "_render", "is_cached", "CommandExecutionError", "hash_file", "push", "_error", "isinstance"], "class_names": [], "class_method_calls": ["client.dir_list", "client.hash_and_stat_file", "files.items", "client.get_file", "client.envs", "__context__.pop", "channel.send", "__opts__.get", "client.get_url", "salt.utils", "__file_client__.value", "os.makedirs", "kw.get", "fp_.tell", "errno.EEXIST", "client.symlink_list", "salt.fileclient", "client.list_states", "client.file_list", "os.sep", "base64.b64decode", "fp_.write", "tmpfile.replace", "upload_path.lstrip", "os.chmod", "errno.ENOENT", "client.cache_files", "client.is_cached", "fh_.close", "client.get_template", "__opts__.value", "log.debug", "ret.update", "client.get_dir", "client.cache_dir", "path.lstrip", "client.file_local_list", "log.error", "load_path_split_drive.split", "salt.crypt", "client.cache_dest", "client.cache_master", "client.hash_file", "urllib.parse", "tmpfile.startswith", "fnmatch.fnmatch", "logging.getLogger", "salt.pillar", "pillar.compile_pillar", "exc.errno", "fp_.read", "os.path", "fh_.write", "salt.channel", "client.cache_file", "auth.gen_token", "client.cache_local_file", "__grains__.value", "upload_path.strip"]}, "daemons.py": {"libraries": ["salt.utils.kinds", "salt.utils.verify.verify_socket", "os", "salt.utils.verify.verify_env", "salt.exceptions.SaltClientError", "warnings", "salt.utils.migrations", "salt.exceptions.get_error_message", "salt.exceptions.SaltSystemExit", "salt.utils.process.HAS_PSUTIL", "logging", "salt.utils.parsers", "salt.utils.network.ip_bracket", "salt.master", "salt.utils.verify.check_user", "salt.minion", "salt.utils.platform.is_junos"], "function_names": ["start", "shutdown", "call", "_real_start", "verify_hash_type", "action_log_info", "start_log_info", "prepare", "environment_failure", "shutdown_log_info", "_handle_signals"], "function_calls": ["verify_socket", "ip_bracket", "hasattr", "verify_env", "super", "is_junos", "get_error_message", "check_user", "SaltClientError", "isinstance"], "class_names": ["ProxyMinion", "Minion", "Syndic", "Master", "DaemonsMixin"], "class_method_calls": ["self.action_log_info", "self.minion", "exc.args", "os.listdir", "self.set_pidfile", "self.options", "salt.master", "self.verify_hash_type", "self.environment_failure", "log.warning", "self._real_start", "self.prepare", "error.code", "self.values", "self.shutdown", "self.daemonize_if_required", "self.check_running", "msg.strip", "log.error", "self.__class__", "log.exception", "log.info", "kinds.applKinds", "self.shutdown_log_info", "self.error", "migrations.migrate_paths", "self.syndic", "self.config", "logging.getLogger", "self.claim_process_responsibility", "exc.code", "os.path", "warnings.filterwarnings", "kinds.APPL_KIND_NAMES", "salt.minion", "salt.utils", "os.remove", "self.master"]}, "key.py": {"libraries": ["hashlib", "os", "salt.utils.sanitizers.clean", "salt.utils.crypt", "salt.key", "salt.utils.platform", "logging", "salt.crypt", "salt.utils.files"], "function_names": ["gen_keys", "key_str", "list_", "list_all", "delete", "master_key_str", "gen_signature", "finger", "reject_dict", "finger_master", "accept", "accept_dict", "reject", "gen", "delete_dict", "name_match", "gen_accept"], "function_calls": ["gen"], "class_names": [], "class_method_calls": ["skey.all_keys", "skey.delete_key", "hashlib.sha512", "salt.utils", "skey.key_str", "salt.key", "clean.filename", "fp_.write", "os.chmod", "skey.reject", "skey.name_match", "skey.gen_keys_signature", "os.urandom", "skey.finger", "skey.list_status", "salt.crypt", "logging.getLogger", "clean.id", "skey.gen_keys", "priv.rindex", "fp_.read", "os.path", "skey.accept", "os.remove"]}, "salt.py": {"libraries": ["salt.pillar", "salt.loader", "salt.exceptions.SaltClientError", "salt.client", "logging", "salt.utils.args", "copy"], "function_names": ["execute", "cmd"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "client.cmd", "salt.loader", "copy.deepcopy", "salt.pillar", "salt.client", "log.error", "opts.get", "salt.utils", "log.debug", "kwargs.pop"]}, "spm.py": {"libraries": ["salt.spm", "salt.utils.parsers", "salt.utils.verify.verify_env"], "function_names": ["run"], "function_calls": ["verify_env"], "class_names": ["SPM"], "class_method_calls": ["self.config", "salt.spm", "client.run", "parsers.SPMParser", "self.parse_args", "self.args"]}, "ssh.py": {"libraries": ["salt.exceptions.CommandExecutionError", "re", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["key_is_encrypted"], "function_calls": ["CommandExecutionError"], "class_names": [], "class_method_calls": ["salt.utils", "fp_.read", "re.search"]}, "netapi.py": {"libraries": ["signal", "logging", "salt.utils.process", "salt.loader"], "function_names": ["__init__", "_handle_signals", "run"], "function_calls": ["super", "netapi_func"], "class_names": ["RunNetapi", "NetapiClient"], "class_method_calls": ["self.opts", "signal.signal", "logging.getLogger", "self.process_manager", "self.fname", "salt.loader", "signal.SIG_DFL", "signal.getsignal", "log.error", "fun.endswith", "signal.SIGTERM", "log.info", "self.netapi", "self._handle_signals", "salt.utils", "signal.SIGINT"]}, "shell.py": {"libraries": ["time", "os", "salt.defaults.exitcodes", "re", "salt.utils.vt", "salt.utils.json", "logging", "sys", "subprocess", "saltwinshell", "salt.utils.nb_popen", "shlex"], "function_names": ["_run_cmd", "_copy_id_str_old", "send", "__init__", "_key_opts", "_copy_id_str_new", "_cmd_str", "_passwd_opts", "gen_shell", "_ssh_opts", "_run_nb_cmd", "exec_nb_cmd", "_split_cmd", "exec_cmd", "copy_id", "gen_key", "get_error"], "function_calls": ["str", "Shell"], "class_names": ["Shell"], "class_method_calls": ["stderr.replace", "time.sleep", "RSTR_RE.search", "term.has_unread_data", "self.host", "self._run_nb_cmd", "proc.recv_err", "self._ssh_opts", "self.timeout", "os.makedirs", "self._passwd_opts", "self.priv_passwd", "options.extend", "subprocess.PIPE", "log.warning", "salt.defaults", "re.M", "self._cmd_str", "self.remote_port_forwards", "self.identities_only", "self._copy_id_str_old", "self.user", "self._copy_id_str_new", "SUDO_PROMPT_RE.search", "cmd.split", "cmd_lst.append", "logmsg.replace", "self._run_cmd", "r_out.append", "re.compile", "log.debug", "SSH_PASSWORD_PROMPT_RE.search", "subprocess.call", "proc.returncode", "buff.endswith", "log.trace", "self.opts", "term.sendline", "sys.exit", "proc.recv", "options.append", "log.error", "self.tty", "self.sudo", "self.exec_cmd", "term.recv", "self.ssh_options", "host.strip", "term.signalstatus", "line.startswith", "r_err.append", "self.passwd", "KEY_VALID_RE.search", "self._key_opts", "term.exitstatus", "saltwinshell.Shell", "logging.getLogger", "ret.append", "self.get_error", "self._split_cmd", "term.close", "stdout.replace", "self.port", "os.path", "errstr.split", "command.append", "self.mods", "shlex.split", "salt.utils", "SSH_PRIVATE_KEY_PASSWORD_PROMPT_RE.search", "self.priv"]}, "ssh_py_shim.py": {"libraries": ["time", "hashlib", "os", "tarfile", "__future__.absolute_import", "__future__.print_function", "shutil", "sys", "subprocess", "stat", "locale"], "function_names": ["unpack_ext", "reset_time", "is_windows", "get_executable", "need_ext", "get_system_encoding", "need_deployment", "main", "get_hash", "unpack_thin"], "function_calls": ["reset_time", "need_deployment", "open", "int", "need_ext", "OptionsContainer", "hash_type", "is_windows", "main", "tuple", "ValueError", "unpack_thin", "len", "unpack_ext", "getattr", "get_executable", "iter", "get_system_encoding", "get_hash"], "class_names": ["OptionsContainer"], "class_method_calls": ["os.unlink", "stdout.decode", "time.time", "sys.argv", "os.listdir", "_fp.readlines", "proc.communicate", "sys.executable", "sys.stderr", "tarfile.TarFile", "subprocess.Popen", "os.makedirs", "dstat.st_mode", "dstat.st_uid", "subprocess.PIPE", "OPTIONS.config", "stt.st_mode", "line.strip", "salt_argv.extend", "hash_obj.hexdigest", "shutil.rmtree", "stdout.split", "os.chmod", "sys.stdout", "OPTIONS.tty", "stat.S_IRGRP", "stat.S_IWGRP", "os.utime", "proc.returncode", "subprocess.call", "sys.getdefaultencoding", "OPTIONS.cmd_umask", "os.environ", "sys.exit", "OPTIONS.delimiter", "locale.getpreferredencoding", "locale.getencoding", "sys.platform", "os.stat", "ifile.read", "tfile.close", "salt_argv.append", "argv_prepared.pop", "config.write", "OPTIONS.code_checksum", "shutil.move", "hash_obj.update", "sys.version_info", "sys.stdin", "tfile.extractall", "OPTIONS.hashfunc", "os.geteuid", "stat.S_IXGRP", "os.path", "os.umask", "OPTIONS.saltdir", "OPTIONS.checksum", "os.chown", "vpo.readline", "OPTIONS.ext_mods", "OPTIONS.wipe"]}, "state.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.state", "copy"], "function_names": ["get_sls_opts", "search_onfail_requisites", "gen_tag", "check_onfail_requisites", "merge_subreturn", "check_result"], "function_calls": ["bool", "str", "search_onfail_requisites", "check_onfail_requisites", "CommandExecutionError", "object", "check_result", "ValueError", "isinstance"], "class_names": [], "class_method_calls": ["st.get", "freqs.items", "copy.deepcopy", "kwargs.get", "highstate.items", "salt.state", "salt.config", "opts.get", "running.items", "fchunks.items", "state_result.get", "mod_.startswith", "original_return.setdefault", "rstate.get", "fdata.get", "fdata.items", "onfails.append"]}, "config.py": {"libraries": ["os", "salt.utils.yaml", "salt.config", "logging", "salt.utils.files", "salt.utils.verify"], "function_names": ["apply", "values", "update_config"], "function_calls": ["str", "values"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.config", "fp_.write", "os.path", "os.makedirs", "salt.utils", "log.debug"]}, "grains.py": {"libraries": ["re", "salt.defaults.DEFAULT_TARGET_DELIM"], "function_names": ["list_absent", "list_present", "absent", "append", "make_hashable", "exists", "present"], "function_calls": ["frozenset", "type", "set", "object", "make_hashable", "list", "isinstance"], "class_names": [], "class_method_calls": ["__context__.get", "result.add", "grain.append", "re.sub", "comments.append"]}, "mine.py": {"libraries": ["logging", "salt.utils.data"], "function_names": ["parse_function_definition", "minion_side_acl_denied", "wrap_acl_structure"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["function_kwargs.pop", "res.update", "logging.getLogger", "minion_acl_cache.get", "function_args.append", "function_definition.pop", "salt.utils", "log.debug", "function_kwargs.update"]}, "pillar.py": {"libraries": ["logging", "salt.utils.minions", "salt.pillar"], "function_names": ["clear_pillar_cache", "show_pillar_cache", "show_top", "show_pillar"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.pillar", "pillar.compile_pillar", "pillar.get_top", "__jid_event__.fire_event", "__opts__.get", "pillar.clear_pillar", "pillar.cache", "log.info", "ckminions.check_minions", "_pillar_cache.get", "ret.get", "salt.utils", "kwargs.pop"]}, "publish.py": {"libraries": ["time", "salt.channel.client", "salt.exceptions.SaltReqTimeoutError", "logging", "salt.payload", "salt.exceptions.SaltInvocationError", "salt.utils.args", "salt.crypt", "salt.transport"], "function_names": ["full_data", "__virtual__", "runner", "publish", "_parse_args", "_publish"], "function_calls": ["len", "SaltInvocationError", "set", "float", "_parse_args", "_publish", "isinstance"], "class_names": [], "class_method_calls": ["matching_master_uris.pop", "time.sleep", "logging.getLogger", "fun.startswith", "channel.send", "log.warning", "log.error", "__opts__.get", "salt.utils", "log.info", "salt.channel", "salt.crypt", "salt.transport", "auth.gen_token", "ret.keys"]}, "saltcheck.py": {"libraries": ["time", "os", "salt.utils.json.dumps", "salt.utils.yaml", "salt.defaults.DEFAULT_TARGET_DELIM", "salt.utils.path", "salt.utils.decorators.memoize", "salt.client", "salt.utils.data", "multiprocessing", "salt.exceptions", "salt.utils.functools", "salt.utils.platform", "salt.utils.json.loads", "logging", "salt.utils.odict.OrderedDict", "salt.utils.files", "copy"], "function_names": ["run_test", "__assert_not_equal", "__assert_equal", "__init__", "parallel_scheck", "state_apply", "load_test_suite", "_eval_failure_only_print", "__assert_false", "_load_file_salt_rendered", "__assert_in", "__assert_not_in", "_generate_sls_path", "_get_top_states", "__virtual__", "run_state_tests", "_is_valid_function", "_call_salt_command", "__assert_empty", "add_test_files_for_sls", "_render_file", "__assert_greater", "_check_assertions", "run_highstate_tests", "__assert_not_empty", "_run_assertions", "__assert_greater_equal", "__assert_true", "__is_valid_test", "_is_valid_module", "_generate_out_list", "report_highstate_tests", "__assert_less", "_copy_state_files", "__assert_less_equal", "_get_states", "_cast_expected_to_returned_type"], "function_calls": ["any", "sorted", "_eval_failure_only_print", "enumerate", "list", "OrderedDict", "int", "type", "SaltCheck", "set", "ret_type", "_get_top_states", "round", "run_state_tests", "_is_valid_function", "loads", "_render_file", "str", "dumps", "tuple", "isinstance", "len", "_is_valid_module", "bool", "_generate_out_list", "float", "StateTestLoader", "min"], "class_names": ["StateTestLoader", "SaltCheck"], "class_method_calls": ["self._run_assertions", "self.__assert_empty", "result.get", "self.__assert_in", "result.update", "scheck.run_test", "stl.test_dict", "state_name.replace", "item.items", "self.__assert_equal", "x.keys", "caller.cmd", "self.test_dict", "self._copy_state_files", "kwargs.get", "self.saltenv", "self.saltcheck_test_location", "self.__assert_less_equal", "self.__assert_greater_equal", "self.__assert_greater", "multiprocessing.cpu_count", "self._get_states", "salt.utils", "__opts__.get", "results.get", "sls_split.pop", "log.warning", "self._load_file_salt_rendered", "fp.read", "stl.found_states", "assert_k.startswith", "fun.split", "dict.get", "data.get", "self.__assert_false", "salt.client", "sls_name.split", "log.error", "this_cached_test_file.endswith", "self.__assert_not_equal", "state_name.split", "self.test_files", "os.path", "m_and_f.split", "self.results_dict", "multiprocessing.Pool", "kwargs.pop", "self.modules", "self._generate_sls_path", "os.sep", "self.__assert_true", "file_string.endswith", "self.sls_list_state", "self.__assert_not_empty", "states_missing_tests.append", "out_list.append", "self.found_states", "copy.deepcopy", "salt.exceptions", "log.info", "self._cast_expected_to_returned_type", "failed_tests.get", "self.assertions_list", "salt.config", "self.__is_valid_test", "self.__assert_not_in", "stl.add_test_files_for_sls", "mydict.items", "time.time", "dict.keys", "items.get", "all_sls_paths.append", "log.debug", "self._check_assertions", "self.path_type", "cached_copied_files.extend", "stl.load_test_suite", "logging.getLogger", "test_dict.get", "self.__assert_less", "cached_copied_files.remove", "k.startswith", "self._call_salt_command", "self.results_dict_summary"]}, "cli.py": {"libraries": ["salt.utils.cloud", "os", "salt.utils.verify.verify_env", "salt.config", "salt.syspaths", "logging", "sys", "salt.utils.parsers", "salt.exceptions.SaltCloudException", "salt.exceptions.SaltCloudSystemExit", "salt.utils.verify.check_user", "salt.output", "salt.cloud", "salt.utils.user", "salt.defaults.exitcodes"], "function_names": ["handle_exception", "print_confirm", "run"], "function_calls": ["verify_env", "set", "print", "check_user", "input", "isinstance"], "class_names": ["SaltCloud"], "class_method_calls": ["mapper.profile_list", "exc.args", "self.credential_username", "self.options", "sys.stderr", "matching.items", "self.credential_provider", "self.parse_args", "salt.defaults", "mapper.delete_map", "self.function_provider", "msg.format", "mapper.map_data", "mapper.provider_list", "exc.exit_code", "self.print_confirm", "syspaths.CONFIG_DIR", "mapper.map_providers_parallel", "res.lower", "names.add", "salt.output", "salt.cloud", "mapper.run_profile", "mapper.location_list", "err.errno", "sys.exit", "self.exit", "self.function_name", "log.error", "mapper.destroy", "mapper.image_list", "log.info", "mapper.size_list", "self.handle_exception", "self.error", "self.args", "mapper.get_vmnames_by_action", "mapper.do_action", "self.config", "logging.getLogger", "drivers.items", "machines.append", "mapper.do_function", "arg.split", "name.split", "args.remove", "mapper.run_map", "self.selected_query_option", "logging.DEBUG", "os.path", "mapper.rendered_map", "mapper.interpolated_map", "mapper.get_running_by_names", "dmap.get", "salt.utils"]}, "aliyun.py": {"libraries": ["salt.exceptions.SaltCloudNotFound", "salt.utils.cloud", "salt.exceptions.SaltCloudSystemExit", "time", "salt.utils.data", "salt.exceptions.SaltCloudExecutionFailure", "hashlib.sha1", "hmac", "salt.utils.json", "logging", "pprint", "salt.exceptions.SaltCloudExecutionTimeout", "salt.utils.stringutils.to_bytes", "urllib.parse", "requests", "salt.config", "uuid", "sys", "base64"], "function_names": ["create", "get_size", "__get_location", "_compute_signature", "percent_encode", "get_dependencies", "get_configured_provider", "list_nodes_min", "get_image", "show_image", "_get_active_provider_name", "__virtual__", "list_securitygroup", "list_nodes", "stop", "get_securitygroup", "_get_node", "list_nodes_full", "script", "destroy", "show_disk", "avail_images", "avail_locations", "list_availability_zones", "query", "start", "avail_sizes", "get_location", "create_node", "show_instance", "reboot", "__query_node_data", "list_nodes_select", "list_monitor_data"], "function_calls": ["SaltCloudNotFound", "sorted", "_compute_signature", "get_size", "__get_location", "percent_encode", "to_bytes", "get_dependencies", "get_configured_provider", "list", "SaltCloudSystemExit", "get_image", "_get_active_provider_name", "list_securitygroup", "get_securitygroup", "_get_node", "str", "list_nodes_full", "destroy", "avail_locations", "avail_images", "isinstance", "query", "create_node", "get_location", "avail_sizes", "show_instance"], "class_names": [], "class_method_calls": ["requests.get", "pprint.pformat", "time.sleep", "request.url", "result_instancestatus.update", "__opts__.get", "params.update", "log.warning", "result.get", "provider.split", "node.get", "config.is_profile_configured", "parameters.update", "res.replace", "line.decode", "time.gmtime", "log.debug", "ret.update", "kwargs.get", "data.get", "parameters.items", "provider.get", "config.get_cloud_config_value", "log.error", "log.info", "time.strftime", "uuid.uuid1", "urllib.parse", "request.text", "logging.getLogger", "config.check_driver_dependencies", "config.is_provider_configured", "__active_provider_name__.value", "request.status_code", "sys.stdin", "h.digest", "logging.DEBUG", "hmac.new", "salt.utils", "base64.encodestring"]}, "azurearm.py": {"libraries": ["msrestazure.azure_active_directory.MSIAuthentication", "msrestazure.azure_cloud.MetadataEndpointError", "operator.itemgetter", "salt.loader", "salt.config", "msrestazure.azure_cloud.get_cloud_from_metadata_endpoint", "salt.exceptions.SaltSystemExit", "azure.common.credentials.UserPassCredentials", "logging", "sys", "salt.utils.versions", "salt.utils.stringutils", "salt.utils.args", "salt.exceptions.SaltInvocationError", "salt.version", "azure.common.credentials.ServicePrincipalCredentials", "importlib"], "function_names": ["paged_object_to_list", "compare_list_of_dicts", "get_client", "__virtual__", "_determine_auth", "log_cloud_error", "create_object_model"], "function_calls": ["dir", "sorted", "Model", "get_cloud_from_metadata_endpoint", "MSIAuthentication", "enumerate", "next", "set", "Client", "isinstance", "len", "getattr", "itemgetter", "SaltInvocationError", "_determine_auth", "SaltSystemExit", "UserPassCredentials", "ServicePrincipalCredentials", "create_object_model", "cloud_logger"], "class_names": [], "class_method_calls": ["client.capitalize", "paged_return.append", "logging.getLogger", "kwargs.update", "kwargs.get", "sys.exit", "local_val.lower", "cloud_env.endpoints", "obj_list.append", "remote_val.lower", "Model._attribute_map", "importlib.import_module", "salt.utils", "page.as_dict", "salt.version", "client.config"]}, "clc.py": {"libraries": ["time", "requests.packages.urllib3.disable_warnings", "salt.config", "salt.utils.json", "logging", "clc", "salt.exceptions.SaltCloudSystemExit", "importlib"], "function_names": ["get_monthly_estimate", "get_server_alerts", "avail_sizes", "create", "get_creds", "get_build_status", "_get_active_provider_name", "list_nodes_full", "get_queue_data", "avail_locations", "__virtual__", "get_month_to_date", "get_dependencies", "get_configured_provider", "destroy", "get_group_estimate", "avail_images"], "function_calls": ["len", "SaltCloudSystemExit", "get_build_status", "get_creds", "str", "_get_active_provider_name", "list_nodes_full", "disable_warnings", "get_configured_provider", "round", "get_dependencies"], "class_names": [], "class_method_calls": ["ret.update", "time.sleep", "logging.getLogger", "clc.v2", "config.check_driver_dependencies", "config.is_provider_configured", "kwargs.items", "__active_provider_name__.value", "config.get_cloud_config_value", "clc.v1", "templates.update", "log.info", "importlib.import_module", "salt.utils"]}, "cloudstack.py": {"libraries": ["salt.utils.cloud", "salt.utils.event", "salt.utils.versions.Version", "libcloud.security", "salt.config", "salt.utils.functools.namespaced_function", "salt.cloud.libcloudfuncs.*", "logging", "pprint", "salt.exceptions.SaltCloudSystemExit", "libcloud.compute.drivers.cloudstack.CloudStackNetwork"], "function_names": ["cloudstack_displayname", "get_ip", "get_location", "get_security_groups", "get_key", "get_project", "create", "_get_active_provider_name", "get_networkid", "__virtual__", "get_conn", "get_configured_provider", "get_dependencies", "get_password", "destroy", "block_device_mappings", "get_keypair"], "function_calls": ["cloudstack_displayname", "get_project", "get_size", "get_conn", "get_configured_provider", "get_dependencies", "block_device_mappings", "Version", "SaltCloudSystemExit", "get_ip", "get_image", "_get_active_provider_name", "get_node", "get_networkid", "get_keypair", "globals", "get_key", "namespaced_function", "str", "len", "get_security_groups", "get_location", "CloudStackNetwork", "get_driver", "driver"], "class_names": [], "class_method_calls": ["Provider.CLOUDSTACK", "pprint.pformat", "volume.extra", "libcloud.__version__", "log.warning", "conn.list_volumes", "config.is_profile_configured", "conn.destroy_node", "ex_blockdevicemapping.get", "conn.attach_volume", "project.name", "conn.ex_list_projects", "data.private_ips", "data.extra", "conn.create_node", "log.debug", "conn.create_volume", "ret.update", "volume.name", "project.id", "libcloud.security", "location.name", "config.get_cloud_config_value", "log.error", "kwargs.copy", "conn.list_locations", "log.info", "location.id", "logging.getLogger", "conn.detach_volume", "config.check_driver_dependencies", "config.is_provider_configured", "__active_provider_name__.value", "data.__dict__", "logging.DEBUG", "data.public_ips", "log.isEnabledFor", "conn.destroy_volume", "salt.utils", "node.public_ips"]}, "digitalocean.py": {"libraries": ["salt.exceptions.SaltCloudNotFound", "time", "salt.utils.cloud", "os", "requests", "salt.exceptions.SaltCloudExecutionTimeout", "salt.config", "salt.exceptions.SaltCloudExecutionFailure", "salt.utils.json", "decimal", "logging", "pprint", "salt.utils.stringutils", "salt.exceptions.SaltInvocationError", "salt.utils.files", "salt.exceptions.SaltCloudSystemExit", "salt.exceptions.SaltCloudConfigError"], "function_names": ["create", "get_size", "get_keyid", "_list_nodes", "get_dependencies", "get_configured_provider", "remove_key", "_get_full_output", "__add_dns_addr__", "list_floating_ips", "get_image", "_get_active_provider_name", "create_key", "__virtual__", "show_floating_ip", "post_dns_record", "list_nodes", "stop", "import_keypair", "_get_node", "create_floating_ip", "unassign_floating_ip", "list_nodes_full", "script", "destroy", "destroy_dns_records", "list_keypairs", "avail_images", "avail_locations", "_get_ips", "query", "show_keypair", "assign_floating_ip", "create_node", "avail_sizes", "get_location", "start", "show_instance", "reboot", "__query_node_data", "list_nodes_select", "delete_floating_ip", "show_pricing"], "function_calls": ["SaltCloudNotFound", "get_size", "get_keyid", "_list_nodes", "get_dependencies", "get_configured_provider", "dict", "_get_full_output", "requester", "__add_dns_addr__", "list", "SaltCloudSystemExit", "get_image", "int", "create_key", "_get_active_provider_name", "post_dns_record", "repr", "zip", "_get_node", "str", "list_nodes_full", "destroy", "destroy_dns_records", "list_keypairs", "avail_locations", "avail_images", "isinstance", "len", "query", "_get_ips", "getattr", "avail_sizes", "get_location", "create_node", "show_instance", "SaltInvocationError", "SaltCloudConfigError"], "class_names": [], "class_method_calls": ["pprint.pformat", "time.sleep", "request.url", "kwargs.update", "profile.get", "key_pair.keys", "fqdn.split", "floating_ip.keys", "__opts__.get", "decimal.Decimal", "result.get", "provider.split", "config.is_profile_configured", "region.keys", "public_key_filename.read", "image.keys", "item.get", "private_ips.append", "vm_size.lower", "log.debug", "ret.update", "node.keys", "kwargs.get", "vm_.get", "data.get", "config.get_cloud_config_value", "log.error", "log.exception", "log.info", "ssh_key_names.split", "request.text", "logging.getLogger", "config.check_driver_dependencies", "config.is_provider_configured", "__active_provider_name__.value", "request.status_code", "fp_.read", "logging.DEBUG", "os.path", "networks.get", "salt.utils", "public_ips.append", "size.keys"]}, "dimensiondata.py": {"libraries": ["salt.utils.cloud", "libcloud.compute.base.NodeState", "salt.utils.functools.namespaced_function", "salt.exceptions.SaltCloudSystemExit", "salt.exceptions.SaltCloudExecutionFailure", "libcloud.loadbalancer.base.Member", "salt.cloud.libcloudfuncs.*", "libcloud.compute.providers.get_driver", "libcloud.loadbalancer.providers.get_driver", "libcloud.compute.base.NodeDriver", "socket", "libcloud.security", "libcloud.loadbalancer.types.Provider", "logging", "pprint", "salt.exceptions.SaltCloudExecutionTimeout", "libcloud", "netaddr.all_matching_cidrs", "salt.utils.versions.Version", "salt.config", "libcloud.compute.base.NodeAuthPassword", "libcloud.compute.types.Provider"], "function_names": ["_query_node_data", "stop", "create_lb", "create", "start", "_get_active_provider_name", "ssh_interface", "_to_event_data", "__virtual__", "get_dependencies", "get_configured_provider", "get_conn", "preferred_ip", "get_lb_conn", "_expand_balancer"], "function_calls": ["dir", "_to_event_data", "get_conn", "get_configured_provider", "get_dependencies", "Version", "list", "SaltCloudSystemExit", "ssh_interface", "_get_active_provider_name", "get_node", "preferred_ip", "globals", "Member", "namespaced_function", "str", "callable", "destroy", "get_lb_conn", "isinstance", "_expand_balancer", "getattr", "show_instance", "get_driver", "driver", "NodeAuthPassword", "get_driver_lb"], "class_names": [], "class_method_calls": ["pprint.pformat", "x.id", "conn.ex_list_network_domains", "lb_conn.ex_set_current_network_domain", "libcloud.__version__", "salt.utils", "log.warning", "config.is_profile_configured", "conn.ex_create_network_domain", "attribute_name.startswith", "data.private_ips", "data.extra", "y.name", "network_domain.id", "conn.create_node", "lb.__dict__", "log.debug", "obj.name", "ret.update", "NodeState.RUNNING", "lb_conn.create_balancer", "kwargs.get", "conn.ex_shutdown_graceful", "Provider.DIMENSIONDATA", "libcloud.security", "config.get_cloud_config_value", "socket.AF_INET", "log.error", "log.info", "members.append", "node.private_ips", "conn.ex_get_location_by_id", "Provider_lb.DIMENSIONDATA", "logging.getLogger", "config.check_driver_dependencies", "config.is_provider_configured", "conn.ex_start_node", "__active_provider_name__.value", "data.__dict__", "conn.ex_list_vlans", "logging.DEBUG", "socket.AF_INET6", "data.public_ips", "socket.inet_pton", "conn.list_images"]}, "ec2.py": {"libraries": ["salt.utils.cloud", "os", "salt.utils.stringutils", "salt.utils.files", "salt.exceptions.SaltCloudSystemExit", "time", "hashlib", "salt.utils.msgpack", "salt.exceptions.SaltCloudExecutionFailure", "salt.utils.hashutils", "salt.utils.aws", "functools.cmp_to_key", "salt.utils.yaml", "re", "hmac", "salt.utils.json", "decimal", "logging", "pprint", "salt.crypt", "salt.exceptions.SaltCloudConfigError", "binascii", "salt.exceptions.SaltCloudExecutionTimeout", "urllib.parse", "requests", "salt.config", "uuid", "salt.utils.compat", "base64", "salt.exceptions.SaltCloudException", "datetime", "salt.utils.http", "stat", "xml.etree.ElementTree"], "function_names": ["iam_profile", "securitygroup", "_load_params", "create_snapshot", "del_tags", "optimize_providers", "request_instance", "securitygroupid", "register_image", "ssh_interface", "_associate_eip_with_interface", "show_term_protect", "_extract_instance_info", "list_nodes", "keyname", "_modify_eni_properties", "script", "get_spot_config", "ssm_create_association", "create_attach_volumes", "delete_volume", "set_tags", "show_keypair", "query_instance", "queue_instances", "delete_keypair", "_get_subnet_from_subnet_query", "__query_ip_address", "create", "volume_list", "get_configured_provider", "_xml_to_dict", "sign", "ssm_describe_association", "enable_term_protect", "show_image", "_get_active_provider_name", "__virtual__", "enable_detailed_monitoring", "__attach_vol_to_instance", "show_volume", "volume_create", "_validate_key_path_and_mode", "create_keypair", "_get_node", "delvol_on_destroy", "avail_images", "_update_enis", "start", "disable_detailed_monitoring", "list_nodes_select", "get_imageid", "_create_eni_if_necessary", "get_availability_zone", "attach_volume", "get_placementgroup", "keepvol_on_destroy", "get_ssh_gateway_config", "list_nodes_min", "get_tags", "get_password_data", "_get_subnet_id_for_interface", "_toggle_term_protect", "create_volume", "get_provider", "get_subnetid", "_list_interface_private_addrs", "_param_from_config", "import_keypair", "list_nodes_full", "destroy", "avail_locations", "show_detailed_monitoring", "avail_sizes", "_toggle_delvol", "show_instance", "reboot", "delete_snapshot", "update_pricing", "_extract_name_tag", "get_console_output", "get_dependencies", "get_tenancy", "block_device_mappings", "describe_snapshots", "__query_spot_instance_request", "_request_eip", "rename", "show_delvol_on_destroy", "stop", "wait_for_instance", "copy_snapshot", "_wait_for_spot_instance", "disable_term_protect", "_parse_pricing", "_get_securitygroupname_id", "list_availability_zones", "query", "get_location", "_get_subnetname_id", "_list_nodes_full", "_t", "describe_volumes", "show_pricing", "detach_volume"], "function_calls": ["iam_profile", "securitygroup", "_load_params", "request_instance", "securitygroupid", "ssh_interface", "_associate_eip_with_interface", "show_term_protect", "_extract_instance_info", "keyname", "_modify_eni_properties", "str", "get_spot_config", "ssm_create_association", "create_attach_volumes", "set_tags", "query_instance", "hasattr", "queue_instances", "SaltCloudException", "iter", "_get_subnet_from_subnet_query", "map", "get_configured_provider", "_xml_to_dict", "sign", "list", "show_image", "_get_active_provider_name", "_validate_key_path_and_mode", "_get_node", "_update_enis", "len", "get_imageid", "_create_eni_if_necessary", "attach_volume", "get_availability_zone", "get_placementgroup", "sorted", "get_ssh_gateway_config", "SaltCloudExecutionTimeout", "enumerate", "SaltCloudSystemExit", "int", "get_tags", "get_password_data", "_get_subnet_id_for_interface", "cmp_to_key", "_toggle_term_protect", "zip", "create_volume", "get_provider", "get_subnetid", "_list_interface_private_addrs", "_param_from_config", "list_nodes_full", "destroy", "show_detailed_monitoring", "_toggle_delvol", "SaltCloudConfigError", "update_pricing", "_extract_name_tag", "get_console_output", "get_dependencies", "dict", "get_tenancy", "block_device_mappings", "update_callback", "next", "_request_eip", "set", "rename", "show_delvol_on_destroy", "wait_for_instance", "_wait_for_spot_instance", "_parse_pricing", "_get_securitygroupname_id", "isinstance", "list_availability_zones", "SaltCloudExecutionFailure", "get_location", "_get_subnetname_id", "_list_nodes_full", "_t", "describe_volumes"], "class_names": [], "class_method_calls": ["dev_list.index", "xmltree.tag", "interface.get", "result.get", "provider.split", "config.is_profile_configured", "result.raise_for_status", "aws.creds", "base64.b64decode", "item.get", "re.compile", "ret.update", "kwargs.get", "securitygroupid_set.add", "result.status_code", "instance_enis.append", "block_device_volume_id_map.items", "item.text", "bd_items.append", "config.is_provider_configured", "config.check_driver_dependencies", "logging.DEBUG", "stat.S_IMODE", "salt.utils", "password_data.get", "string_to_sign.encode", "pprint.pformat", "http.query", "__opts__.get", "exc.response", "log.warning", "kf_.read", "pprint.pprint", "interface.setdefault", "requests.exceptions", "image.startswith", "result.text", "base64.b64encode", "aws.AWS_MAX_RETRIES", "output.split", "fp_.close", "tags.values", "ret.setdefault", "data.get", "log.error", "fh_.read", "log.exception", "salt.crypt", "ret.get", "eni_devices.append", "d.items", "properties.items", "name.split", "os.path", "providers.items", "ET.fromstring", "requests.get", "querystring.replace", "decimal.Decimal", "params.update", "params_with_headers.get", "securitygroupid_set.union", "endpoint.strip", "aws.query", "tags.get", "tmp_providers.items", "fp_.write", "data.items", "ex_iam_profile.startswith", "item.tag", "tmp_data.items", "os.stat", "log.info", "params.copy", "urllib.parse", "logging.INFO", "assoc.get", "ret.append", "salt.config", "__active_provider_name__.value", "aws.sleep_exponential_backoff", "price_js.strip", "addresses.append", "item.values", "t.strftime", "hashlib.sha256", "uuid.uuid4", "binascii.a2b_base64", "time.sleep", "profile.get", "_bd.pop", "tags.items", "entry.get", "raw.get", "get_imageid.images", "log.log", "subnet.get", "re.S", "xmltree.text", "log.debug", "item.keys", "node_metadata.get", "log.trace", "image_description.lower", "param.update", "vm_.get", "provider.get", "config.get_cloud_config_value", "tag.get", "image_info.get", "eip_list.append", "re.sub", "instance.copy", "price_js.replace", "eni_desc.get", "logging.getLogger", "msg.encode", "hmac.new", "datetime.datetime", "items.append"]}, "gce.py": {"libraries": ["salt.utils.cloud", "os", "salt.utils.functools.namespaced_function", "salt.utils.files", "salt.exceptions.SaltCloudSystemExit", "ast.literal_eval", "salt.utils.msgpack", "salt.cloud.libcloudfuncs.*", "libcloud.common.google.ResourceInUseError", "libcloud.compute.providers.get_driver", "libcloud.loadbalancer.providers.get_driver", "libcloud.common.google.ResourceNotFoundError", "re", "libcloud.loadbalancer.types.Provider", "logging", "pprint", "libcloud", "salt.utils.versions.Version", "salt.config", "sys", "salt.utils.http", "libcloud.compute.types.Provider"], "function_names": ["_expand_disk", "__get_metadata", "create_subnetwork", "show_hc", "create", "update_pricing", "__get_location", "__get_host", "__get_ssh_interface", "attach_disk", "delete_fwrule", "create_disk", "_expand_node", "get_dependencies", "get_configured_provider", "get_conn", "__get_subnetwork", "attach_lb", "create_snapshot", "__get_image", "_expand_item", "delete_address", "request_instance", "__get_region", "show_address", "_get_active_provider_name", "__get_labels", "__virtual__", "delete_lb", "create_hc", "show_fwrule", "__get_tags", "delete_disk", "stop", "delete_hc", "__get_network", "delete_subnetwork", "__get_size", "__create_orget_address", "destroy", "show_disk", "create_attach_volumes", "detach_lb", "get_lb_conn", "avail_images", "_expand_address", "_expand_balancer", "create_network", "delete_network", "show_subnetwork", "create_lb", "__get_ssh_credentials", "avail_sizes", "_parse_allow", "create_fwrule", "create_address", "show_instance", "start", "reboot", "show_network", "show_lb", "detach_disk", "show_snapshot", "delete_snapshot", "show_pricing"], "function_calls": ["_expand_disk", "__get_metadata", "update_pricing", "dir", "__get_location", "__get_host", "attach_disk", "__get_ssh_interface", "create_disk", "_expand_node", "get_conn", "get_configured_provider", "literal_eval", "get_dependencies", "__get_subnetwork", "Version", "__get_image", "_expand_item", "enumerate", "SaltCloudSystemExit", "request_instance", "__get_region", "_get_active_provider_name", "__get_labels", "__get_tags", "globals", "__get_network", "namespaced_function", "__get_size", "__create_orget_address", "create_attach_volumes", "get_lb_conn", "_expand_address", "ord", "isinstance", "_expand_balancer", "len", "chr", "__get_ssh_credentials", "getattr", "_parse_allow", "create_address", "show_instance", "float", "get_driver", "driver", "get_driver_lb"], "class_names": [], "class_method_calls": ["z.name", "conn.ex_create_healthcheck", "conn.destroy_volume_snapshot", "conn.ex_get_volume", "conn.ex_destroy_healthcheck", "conn.ex_get_snapshot", "provider.split", "config.is_profile_configured", "sizes.append", "conn.attach_volume", "node.name", "addy.__dict__", "metadata.items", "conn.create_node", "size.__dict__", "re.compile", "log.errror", "conn.create_volume", "ret.update", "boot.lower", "external_ip.address", "kwargs.get", "ex_region.name", "lb_conn.balancer_attach_compute_node", "hci.name", "Provider_lb.GCE", "config.is_provider_configured", "config.check_driver_dependencies", "conn.ex_create_subnetwork", "allow_dict.append", "logging.DEBUG", "conn.ex_get_zone", "conn.list_images", "salt.utils", "attr.startswith", "pprint.pformat", "__opts__.get", "log.warning", "p.split", "conn.destroy_node", "conn.ex_destroy_subnetwork", "conn.ex_get_healthcheck", "member.id", "src_range.split", "conn.ex_get_firewall", "all_images.extend", "lb.__dict__", "item.__dict__", "conn.ex_get_region", "external_ip.lower", "conn.create_volume_snapshot", "log.error", "mtype.update", "lb_conn.balancer_detach_member", "node.private_ips", "external_ip.region", "conn.reboot_node", "conn.detach_volume", "conn.list_sizes", "conn.ex_destroy_address", "GCE_VM_NAME_REGEX.match", "conn.ex_stop_node", "os.path", "node_data.name", "conn.destroy_volume", "node.public_ips", "conn.ex_destroy_firewall", "ex_healthchecks.split", "sys.exc_info", "node.__dict__", "node.extra", "conn.ex_destroy_network", "volume.get", "conn.ex_get_node", "lb_conn.balancer_list_members", "conn.ex_get_subnetwork", "conn.ex_get_network", "gce.connection", "fwr.__dict__", "lb_conn.create_balancer", "location.name", "reg.name", "conn.ex_create_network", "log.info", "addy.region", "conn.ex_create_firewall", "conn.ex_get_address", "disk.name", "conn.ex_get_size", "size.extra", "os.getenv", "tp.name", "__active_provider_name__.value", "zone.__dict__", "conn.ex_create_address", "kwargs.update", "profile.get", "img.name", "Provider.GCE", "libcloud.__version__", "lb_conn.destroy_balancer", "log.debug", "log.trace", "disk.__dict__", "config.get_cloud_config_value", "conn.ex_get_image", "src_tags.split", "tp.__dict__", "lb_conn.get_balancer", "logging.getLogger", "disk.size", "conn.ex_start_node", "external_ip.name", "disk.extra", "dst_tags.split", "allow.split", "items.append"]}, "gogrid.py": {"libraries": ["time", "salt.utils.cloud", "salt.config", "salt.utils.hashutils", "logging", "pprint", "salt.exceptions.SaltCloudException", "salt.exceptions.SaltCloudSystemExit"], "function_names": ["create", "wait_for_apipass", "_query", "get_configured_provider", "_get_active_provider_name", "__virtual__", "list_public_ips", "list_nodes", "stop", "list_nodes_full", "destroy", "avail_images", "avail_locations", "start", "avail_sizes", "show_instance", "reboot", "list_nodes_select", "list_passwords", "list_common_lookups"], "function_calls": ["len", "SaltCloudSystemExit", "next", "int", "str", "_get_active_provider_name", "list_nodes_full", "_query", "SaltCloudException", "get_configured_provider", "list_public_ips", "iter", "list_passwords", "list_common_lookups", "avail_images", "list", "isinstance"], "class_names": [], "class_method_calls": ["ret.update", "pprint.pformat", "time.sleep", "logging.getLogger", "time.time", "config.is_provider_configured", "__active_provider_name__.value", "config.get_cloud_config_value", "__opts__.get", "log.error", "logging.DEBUG", "log.info", "salt.utils", "config.is_profile_configured", "log.debug"]}, "hetzner.py": {"libraries": ["hcloud", "time", "salt.config", "logging", "salt.exceptions.SaltCloudException", "salt.exceptions.SaltCloudSystemExit"], "function_names": ["create", "get_dependencies", "get_configured_provider", "_object_to_dict", "_connect_client", "_get_active_provider_name", "__virtual__", "list_ssh_keys", "list_nodes", "stop", "list_nodes_full", "resize", "destroy", "wait_until", "_datacenter_to_dict", "avail_images", "avail_locations", "_public_network_to_dict", "start", "avail_sizes", "show_instance", "reboot", "_private_network_to_dict"], "function_calls": ["SaltCloudSystemExit", "stop", "getattr", "show_instance", "_get_active_provider_name", "list_nodes_full", "str", "map", "get_dependencies", "get_configured_provider", "SaltCloudException", "_datacenter_to_dict", "wait_until", "_object_to_dict", "list", "_connect_client", "_public_network_to_dict"], "class_names": [], "class_method_calls": ["image.model", "vol.name", "time.sleep", "node.volumes", "datacenter.location", "time.time", "net.ipv4", "vm_.update", "client.server_types", "client.ssh_keys", "__opts__.get", "loc.model", "net.ipv6", "node.status", "node.public_net", "config.is_profile_configured", "node.private_net", "node.name", "client.servers", "key.name", "node.id", "node.image", "server.public_net", "node.labels", "client.datacenters", "log.debug", "size.model", "client.networks", "kwargs.get", "vm_.get", "size.name", "config.get_cloud_config_value", "node.server_type", "log.error", "log.info", "client.locations", "image.name", "datacenter.name", "client.images", "logging.getLogger", "loc.name", "config.check_driver_dependencies", "config.is_provider_configured", "ssh_keys.append", "server.delete", "__active_provider_name__.value", "node.created", "client.volumes", "server.power_on", "response.root_password", "hcloud.Client", "node.datacenter", "response.server", "server.power_off", "server.change_type", "server.reboot", "key.model"]}, "joyent.py": {"libraries": ["salt.exceptions.SaltCloudNotFound", "salt.utils.cloud", "os", "Cryptodome.Hash.SHA256", "salt.utils.files", "salt.exceptions.SaltCloudSystemExit", "salt.exceptions.SaltCloudExecutionFailure", "M2Crypto.EVP", "salt.utils.yaml", "salt.utils.json", "logging", "pprint", "inspect", "salt.exceptions.SaltCloudExecutionTimeout", "Cryptodome.Signature.PKCS1_v1_5", "salt.config", "Crypto.Signature.PKCS1_v1_5", "base64", "datetime", "Crypto.Hash.SHA256", "salt.utils.http", "http.client"], "function_names": ["create", "reformat_node", "get_size", "import_key", "get_configured_provider", "show_key", "_old_libcloud_node_state", "get_image", "_get_active_provider_name", "ssh_interface", "key_list", "get_node", "_get_proto", "__virtual__", "has_method", "list_nodes", "stop", "_query_ip_address", "delete_key", "list_nodes_full", "joyent_node_state", "destroy", "get_location_path", "avail_locations", "avail_images", "query", "query_instance", "create_node", "start", "get_location", "avail_sizes", "show_instance", "take_action", "reboot", "list_nodes_select", "list_keys"], "function_calls": ["dir", "reformat_node", "SaltCloudNotFound", "get_size", "get_configured_provider", "list", "SaltCloudSystemExit", "_old_libcloud_node_state", "get_image", "_get_active_provider_name", "get_node", "key_list", "_get_proto", "list_nodes", "str", "list_nodes_full", "joyent_node_state", "get_location_path", "avail_images", "isinstance", "len", "query", "query_instance", "create_node", "avail_sizes", "get_location", "show_instance", "take_action"], "class_names": [], "class_method_calls": ["pprint.pformat", "img_url.startswith", "__opts__.get", "user.split", "log.warning", "config.is_profile_configured", "hash_.update", "timenow.strftime", "metadata.items", "tag.items", "base64.b64encode", "log.debug", "md.final", "rsa_key.sign", "signed.decode", "item.keys", "kwargs.get", "vm_.get", "PKCS1_v1_5.new", "EVP.MessageDigest", "data.get", "config.get_cloud_config_value", "log.error", "log.info", "md.update", "salt.crypt", "rsa_.sign", "to_del.append", "logging.getLogger", "config.is_provider_configured", "__active_provider_name__.value", "timestamp.encode", "fp_.read", "logging.DEBUG", "os.path", "inspect.stack", "SHA256.new", "salt.utils", "http.client", "datetime.datetime"]}, "libvirt.py": {"libraries": ["os", "salt.utils.path", "subprocess", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["__virtual__", "ext_pillar", "gen_hyper_keys"], "function_calls": ["gen_hyper_keys"], "class_names": [], "class_method_calls": ["wfh.write", "os.listdir", "key.endswith", "fp_.read", "fp_.write", "salt.utils", "os.path", "subprocess.run", "pillar.get", "os.makedirs", "proc.stdout", "subprocess.PIPE", "subprocess.call"]}, "linode.py": {"libraries": ["salt.exceptions.SaltCloudNotFound", "time", "pathlib.Path", "requests", "salt.config", "re", "salt._compat.ipaddress", "abc", "logging", "pprint", "salt.exceptions.SaltCloudException", "datetime", "salt.exceptions.SaltCloudSystemExit", "salt.exceptions.SaltCloudConfigError", "json"], "function_names": ["create", "_get_ssh_interface", "__init__", "get_linode", "_wait_for_event", "_query", "_validate_name", "get_configured_provider", "_get_poll_interval", "_get_ssh_keys", "clone", "_get_status_descr_by_id", "_get_disk_size", "_update_linode", "list_nodes_min", "_wait_for_linode_status", "_get_datacenter_id", "boot", "_list_linodes", "_wait_for_status", "_get_active_provider_name", "_get_distribution_id", "__virtual__", "_get_dependencies", "_get_cloud_interface", "_get_linode_by_id", "_get_status_id_by_name", "create_config", "_decode_linode_plan_label", "list_nodes", "_create_disk_from_distro", "stop", "_get_password", "_wait_for_entity_status", "_get_api_version", "list_nodes_full", "_create_private_ip", "_create_swap_disk", "_get_swap_size", "destroy", "_get_ssh_key", "_wait_for_job", "_get_ratelimit_sleep", "_get_root_disk_size", "avail_images", "avail_locations", "_get_ips", "condition", "_get_response_json", "_check_event_status", "_get_private_ip", "avail_sizes", "start", "_get_linode_by_name", "_create_data_disk", "show_instance", "_clean_data", "_warn_for_api_v3", "reboot", "_get_api_key", "get_plan_id", "list_nodes_select", "_get_linode_id_from_name", "get_config_id", "_get_ssh_key_files", "_poll", "_get_linode_type", "_is_api_v3", "show_pricing"], "function_calls": ["_get_ssh_interface", "_get_ssh_key_files", "SaltCloudNotFound", "sorted", "get_linode", "_validate_name", "get_configured_provider", "_get_poll_interval", "_get_ssh_keys", "clone", "list", "SaltCloudSystemExit", "int", "_get_active_provider_name", "set", "Path", "_get_dependencies", "_get_cloud_interface", "LinodeAPIv3", "getter", "create_config", "_get_password", "range", "str", "_get_swap_size", "_get_ssh_key", "_get_ratelimit_sleep", "avail_locations", "condition", "len", "isinstance", "_get_private_ip", "LinodeAPIv4", "_warn_for_api_v3", "_get_api_key", "SaltCloudException", "get_config_id", "_get_api_version", "SaltCloudConfigError", "map", "_is_api_v3"], "class_names": ["LinodeAPI", "LinodeAPIv3", "LinodeAPIv4"], "class_method_calls": ["file.read_text", "self._poll", "LINODE_STATUS.get", "result.get", "provider.split", "config.is_profile_configured", "error.get", "result.raise_for_status", "self._decode_linode_plan_label", "self._get_distribution_id", "self._get_linode_by_name", "item.get", "json.dumps", "re.compile", "ret.update", "kwargs.get", "time.mktime", "self._get_status_id_by_name", "LINODE_STATUS.items", "err_response.status_code", "result.status_code", "self.list_nodes_full", "config.check_driver_dependencies", "config.is_provider_configured", "self._wait_for_status", "self._create_disk_from_distro", "self.boot", "logging.DEBUG", "self._wait_for_entity_status", "update_args.update", "pprint.pformat", "file.exists", "self._create_private_ip", "__opts__.get", "errors.append", "exc.response", "log.warning", "public.append", "re.match", "pprint.pprint", "requests.exceptions", "self._get_linode_by_id", "response.get", "result.text", "label.split", "log.error", "ret.get", "response.json", "file.is_file", "self._wait_for_event", "private.append", "ipaddress.ip_address", "self._get_datacenter_id", "self._get_response_json", "self._query", "self._get_ips", "self.avail_sizes", "self.get_plan_id", "event.get", "instance_type.get", "log.info", "data.update", "logging.INFO", "error_list.append", "__active_provider_name__.value", "self._list_linodes", "self._clean_data", "ips.items", "self.get_linode", "abc.abstractmethod", "time.sleep", "args.keys", "kwargs.update", "profile.get", "self._check_event_status", "self._get_linode_type", "node.get", "log.log", "err_response.reason", "log.debug", "log.trace", "vm_.get", "self._get_status_descr_by_id", "config.get_cloud_config_value", "self._wait_for_linode_status", "self._get_disk_size", "self._get_linode_id_from_name", "self._wait_for_job", "requests.request", "logging.getLogger", "self._create_swap_disk", "instance.get", "ssh_keys.add", "datetime.datetime", "self._update_linode"]}, "lxc.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError"], "function_names": ["running", "stopped", "frozen", "absent", "set_pass", "edited_conf", "present"], "function_calls": ["any"], "class_names": [], "class_method_calls": ["exc.strerror"]}, "msazure.py": {"libraries": ["logging", "salt.exceptions.SaltSystemExit", "azure"], "function_names": ["list_blobs", "get_storage_conn", "get_blob", "object_to_dict", "put_blob"], "function_calls": ["hasattr", "get_storage_conn", "object_to_dict", "SaltSystemExit", "isinstance"], "class_names": [], "class_method_calls": ["item.startswith", "storage_conn.list_blobs", "logging.getLogger", "kwargs.get", "storage_conn.get_blob_to_bytes", "ret.append", "storage_conn.put_block_blob_from_bytes", "item.name", "opts.get", "obj.__dict__", "data.blobs", "storage_conn.put_block_blob_from_path", "storage_conn.get_blob_to_path", "azure.storage"]}, "oneandone.py": {"libraries": ["salt.exceptions.SaltCloudNotFound", "time", "salt.utils.cloud", "os", "oneandone.client.BlockStorage", "oneandone.client.Server", "salt.exceptions.SaltCloudExecutionTimeout", "salt.config", "salt.exceptions.SaltCloudExecutionFailure", "oneandone.client.Hdd", "logging", "pprint", "salt.utils.stringutils", "oneandone.client.SshKey", "salt.utils.files", "salt.exceptions.SaltCloudSystemExit", "oneandone.client.OneAndOneService", "salt.exceptions.SaltCloudConfigError"], "function_names": ["create", "get_size", "get_conn", "get_configured_provider", "get_dependencies", "create_ssh_key", "get_image", "get_key_filename", "_get_active_provider_name", "get_node", "__virtual__", "_get_server", "_get_hdds", "list_nodes", "stop", "script", "list_nodes_full", "destroy", "_get_ssh_key", "create_block_storage", "_wait_for_completion", "avail_images", "avail_locations", "start", "avail_sizes", "_get_block_storage", "show_instance", "reboot", "get_wait_timeout", "__query_node_data", "list_nodes_select", "load_public_key"], "function_calls": ["Exception", "SaltCloudNotFound", "get_size", "get_conn", "get_configured_provider", "get_dependencies", "SaltCloudSystemExit", "next", "get_key_filename", "_get_active_provider_name", "get_node", "Hdd", "_get_server", "_get_hdds", "str", "list_nodes_full", "destroy", "_get_ssh_key", "_wait_for_completion", "avail_images", "bool", "avail_sizes", "_get_block_storage", "show_instance", "BlockStorage", "get_wait_timeout", "SshKey", "OneAndOneService", "SaltCloudConfigError", "load_public_key", "Server"], "class_names": [], "class_method_calls": ["server.specs", "pprint.pformat", "conn.list_appliances", "time.sleep", "time.time", "conn.list_datacenters", "conn.modify_server_status", "public_key.read", "__opts__.get", "conn.create_block_storage", "datacenters.append", "node.get", "config.is_profile_configured", "hdds.append", "conn.stop_server", "block_storage.server_id", "private_ips.append", "conn.fixed_server_flavors", "log.debug", "conn.delete_server", "ret.update", "conn.create_server", "block_storage.description", "block_storage.datacenter_id", "kwargs.get", "images.items", "config.get_cloud_config_value", "log.error", "conn.list_servers", "log.info", "conn.start_server", "logging.getLogger", "config.check_driver_dependencies", "config.is_provider_configured", "exc.message", "__active_provider_name__.value", "conn.create_ssh_key", "os.path", "logging.DEBUG", "salt.utils", "conn.get_server", "public_ips.append"]}, "opennebula.py": {"libraries": ["salt.exceptions.SaltCloudNotFound", "time", "os", "xmlrpc.client", "salt.exceptions.SaltCloudExecutionTimeout", "salt.config", "salt.utils.data", "salt.exceptions.SaltCloudExecutionFailure", "lxml.etree", "logging", "pprint", "salt.utils.files", "salt.exceptions.SaltCloudSystemExit", "salt.exceptions.SaltCloudConfigError"], "function_names": ["get_vm_id", "secgroup_info", "vn_add_ar", "vm_monitoring", "vm_snapshot_delete", "vm_resize", "list_vns", "vn_free_ar", "image_persistent", "secgroup_delete", "image_info", "list_nodes", "get_secgroup_id", "list_clusters", "vm_update", "list_security_groups", "vm_allocate", "get_template_id", "get_datastore_id", "vm_disk_snapshot_revert", "vn_hold", "create", "vm_info", "vn_release", "vn_delete", "get_configured_provider", "_require_disk_opts", "_xml_to_dict", "get_template", "image_snapshot_flatten", "template_delete", "_get_active_provider_name", "vm_attach_nic", "__virtual__", "vm_snapshot_create", "_get_node", "template_instantiate", "secgroup_allocate", "vm_detach_nic", "avail_images", "vn_reserve", "start", "__query_node_data", "list_nodes_select", "vm_disk_snapshot_delete", "vm_disk_snapshot_create", "image_update", "vm_action", "list_templates", "vm_deploy", "list_hosts", "image_allocate", "template_clone", "get_template_image", "_get_xml_rpc", "vn_info", "vm_attach", "list_nodes_full", "image_delete", "vm_migrate", "destroy", "_get_xml", "avail_locations", "avail_sizes", "show_instance", "reboot", "template_update", "secgroup_clone", "get_cluster_id", "list_datastores", "_list_nodes", "get_dependencies", "get_host_id", "_get_device_template", "image_snapshot_revert", "get_image", "image_clone", "secgroup_update", "get_one_version", "vm_snapshot_revert", "vn_allocate", "get_vn_id", "stop", "image_snapshot_delete", "template_allocate", "vm_detach", "get_image_id", "get_location", "vm_disk_save"], "function_calls": ["get_vm_id", "vm_action", "get_cluster_id", "SaltCloudNotFound", "list_datastores", "_list_nodes", "list_templates", "get_dependencies", "_require_disk_opts", "get_configured_provider", "get_host_id", "_xml_to_dict", "get_template", "get_datastore_id", "_get_device_template", "list", "SaltCloudSystemExit", "int", "list_vns", "_get_active_provider_name", "get_template_image", "_get_xml_rpc", "get_vn_id", "list_nodes", "get_secgroup_id", "_get_node", "str", "list_nodes_full", "list_clusters", "destroy", "get_image_id", "list_security_groups", "_get_xml", "avail_images", "avail_locations", "get_location", "show_instance", "get_template_id", "SaltCloudConfigError"], "class_names": [], "class_method_calls": ["pprint.pformat", "template.find", "time.sleep", "vm.find", "__opts__.get", "log.warning", "tree.find", "config.is_profile_configured", "vm_.find", "xmlrpc.client", "nic.find", "rfh.read", "host.find", "private_ips.append", "log.debug", "template.append", "group.find", "etree.XML", "item.tag", "kwargs.get", "vm_.get", "config.get_cloud_config_value", "log.error", "image.find", "log.info", "datastore.find", "logging.getLogger", "item.text", "config.check_driver_dependencies", "config.is_provider_configured", "__active_provider_name__.value", "cluster.find", "server.one", "v_network.find", "logging.DEBUG", "os.path", "salt.utils", "etree.XMLSyntaxError"]}, "openstack.py": {"libraries": ["os_client_config", "salt.utils.versions.Version", "os", "socket", "salt.exceptions.SaltCloudExecutionTimeout", "salt.config", "salt.exceptions.SaltCloudExecutionFailure", "shade", "logging", "pprint", "shade.openstackcloud", "ipaddress.ip_network", "salt.exceptions.SaltCloudSystemExit", "salt.exceptions.SaltCloudConfigError", "shade.exc", "copy", "ipaddress.ip_address"], "function_names": ["create", "get_dependencies", "get_configured_provider", "get_conn", "list_nodes_min", "list_subnets", "request_instance", "_get_active_provider_name", "ssh_interface", "__virtual__", "_clean_create_kwargs", "__query_node", "preferred_ip", "list_nodes", "list_nodes_full", "destroy", "ignore_cidr", "avail_images", "_get_ips", "call", "avail_sizes", "show_instance", "list_nodes_select", "list_networks"], "function_calls": ["ip_address", "get_conn", "get_configured_provider", "dict", "get_dependencies", "Version", "list", "SaltCloudSystemExit", "request_instance", "_get_active_provider_name", "ssh_interface", "_clean_create_kwargs", "preferred_ip", "list_nodes", "str", "list_nodes_full", "destroy", "ignore_cidr", "_get_ips", "isinstance", "getattr", "hasattr", "show_instance", "ip_network", "SaltCloudConfigError"], "class_names": [], "class_method_calls": ["pprint.pformat", "kwargs.items", "__opts__.get", "vm_.pop", "node.status", "conn.list_subnets", "log.warning", "kwargs.pop", "os_client_config.vendors", "node.name", "node.image", "node.id", "info.get", "log.debug", "conn.delete_server", "ret.update", "conn.create_server", "node.addresses", "ret.setdefault", "copy.deepcopy", "conn.list_flavors", "node.flavor", "vm_.get", "config.get_cloud_config_value", "socket.AF_INET", "log.error", "kwargs.copy", "conn.list_servers", "log.exception", "log.info", "shade.openstackcloud", "conn.get_image", "logging.getLogger", "conn.get_flavor", "config.is_provider_configured", "config.check_driver_dependencies", "ret.append", "__active_provider_name__.value", "fp_.read", "shade.__version__", "addr.get", "conn.list_networks", "socket.AF_INET6", "socket.inet_pton", "os.path", "conn.list_images", "conn.get_server", "shade.exc"]}, "packet.py": {"libraries": ["time", "salt.utils.cloud", "salt.config", "salt.utils.functools.namespaced_function", "packet", "salt.cloud.libcloudfuncs.script", "salt.cloud.libcloudfuncs.get_image", "logging", "pprint", "salt.exceptions.SaltCloudException", "salt.exceptions.SaltCloudSystemExit", "salt.cloud.libcloudfuncs.show_instance", "salt.cloud.libcloudfuncs.get_size"], "function_names": ["create", "avail_sizes", "_get_ssh_interface", "_wait_for_status", "_get_active_provider_name", "list_nodes_full", "list_nodes", "is_profile_configured", "__virtual__", "avail_projects", "get_configured_provider", "list_nodes_select", "destroy", "avail_images", "avail_locations", "get_devices_by_token", "list_nodes_min"], "function_calls": ["SaltCloudSystemExit", "getattr", "range", "int", "namespaced_function", "_wait_for_status", "_get_ssh_interface", "list_nodes_full", "_get_active_provider_name", "avail_locations", "is_profile_configured", "SaltCloudException", "get_configured_provider", "get_object", "globals", "get_devices_by_token", "list_nodes_min"], "class_names": [], "class_method_calls": ["manager.list_projects", "pprint.pformat", "time.sleep", "manager.list_facilities", "plan.name", "device.id", "volume.attach", "locations.values", "config.is_profile_configured", "profile_data.get", "device.state", "volume.state", "project.name", "log.log", "volume.__dict__", "packet.Manager", "obj.state", "device.ip_addresses", "plan.__dict__", "volume.delete", "manager.create_device", "log.debug", "ret.update", "manager.list_plans", "manager.list_devices", "project.id", "manager.list_operating_systems", "vm_.get", "config.get_cloud_config_value", "log.error", "log.info", "volume.id", "os_system.name", "os_system.__dict__", "facility.name", "device.hostname", "logging.INFO", "manager.call_api", "logging.getLogger", "volume.attached_to", "config.is_provider_configured", "device.__dict__", "__active_provider_name__.value", "manager.list_volumes", "project.__dict__", "logging.DEBUG", "manager.create_volume", "devices.extend", "facility.__dict__", "salt.utils", "volume.detach"]}, "parallels.py": {"libraries": ["salt.utils.yaml", "salt.utils.path", "salt.exceptions.CommandExecutionError", "salt.utils.data", "re", "logging", "salt.exceptions.SaltInvocationError", "shlex"], "function_names": ["delete", "prlctl", "clone", "exec_", "snapshot_name_to_id", "prlsrvctl", "snapshot", "_find_guids", "snapshot_id_to_name", "revert_snapshot", "stop", "_validate_snap_name", "reset", "exists", "start", "_normalize_args", "status", "restart", "list_snapshots", "delete_snapshot", "list_vms"], "function_calls": ["len", "_find_guids", "_normalize_args", "snapshot_id_to_name", "sorted", "str", "prlctl", "set", "_validate_snap_name", "snapshot_name_to_id", "CommandExecutionError", "list_vms", "SaltInvocationError", "list", "isinstance"], "class_names": [], "class_method_calls": ["snap_name.strip", "found_guid.groups", "cmd.extend", "re.finditer", "log.warning", "args.append", "re.match", "snap_id.strip", "re.compile", "args.extend", "re.I", "data.get", "named_ids.append", "guids.append", "ret.keys", "found_guid.group", "logging.getLogger", "shlex.split", "salt.utils"]}, "profitbricks.py": {"libraries": ["profitbricks.client.ProfitBricksService", "salt.exceptions.SaltCloudNotFound", "salt.utils.cloud", "os", "profitbricks.client.Server", "profitbricks.client.IPBlock", "salt.utils.stringutils", "salt.utils.files", "salt.exceptions.SaltCloudSystemExit", "profitbricks.client.LAN", "time", "profitbricks.client.NIC", "salt.exceptions.SaltCloudExecutionFailure", "profitbricks.client.LoadBalancer", "profitbricks.client.PBNotFoundError", "profitbricks", "profitbricks.client.PBError", "logging", "pprint", "profitbricks.client.Volume", "salt.exceptions.SaltCloudExecutionTimeout", "salt.exceptions.SaltCloudConfigError", "salt.utils.versions.Version", "salt.config", "profitbricks.client.Datacenter", "profitbricks.client.FirewallRule"], "function_names": ["get_datacenter", "create_loadbalancer", "create", "get_size", "list_loadbalancers", "set_public_lan", "_get_nics", "get_dependencies", "get_configured_provider", "get_conn", "_override_size", "create_datacenter", "get_image", "get_key_filename", "_get_active_provider_name", "ssh_interface", "get_node", "__virtual__", "reserve_ipblock", "_get_system_volume", "_get_server", "signal_event", "list_nodes", "stop", "list_images", "list_nodes_full", "get_datacenter_id", "destroy", "_get_data_volumes", "_get_firewall_rules", "version_compatible", "_wait_for_completion", "avail_images", "avail_locations", "start", "avail_sizes", "show_instance", "get_public_keys", "reboot", "get_wait_timeout", "__query_node_data", "list_datacenters", "_get_ip_addresses", "get_disk_type"], "function_calls": ["Exception", "get_datacenter", "SaltCloudNotFound", "get_size", "FirewallRule", "set_public_lan", "_get_nics", "get_conn", "get_configured_provider", "get_dependencies", "Version", "_override_size", "SaltCloudSystemExit", "get_image", "get_key_filename", "int", "LoadBalancer", "_get_active_provider_name", "ssh_interface", "get_node", "_get_system_volume", "_get_server", "LAN", "signal_event", "ProfitBricksService", "IPBlock", "get_disk_type", "str", "list_nodes_full", "get_datacenter_id", "_get_firewall_rules", "_get_data_volumes", "destroy", "version_compatible", "_wait_for_completion", "avail_images", "SaltCloudExecutionFailure", "NIC", "avail_sizes", "get_public_keys", "show_instance", "get_wait_timeout", "Volume", "SaltCloudConfigError", "_get_ip_addresses", "Datacenter", "Server"], "class_names": [], "class_method_calls": ["firewall_rules.items", "pprint.pformat", "time.sleep", "time.time", "conn.list_datacenters", "node.pop", "conn.reserve_ipblock", "volumes.items", "profitbricks.API_VERSION", "__opts__.get", "salt.utils", "volume.image_alias", "nic.nat", "datacenters.append", "config.is_profile_configured", "conn.create_datacenter", "conn.stop_server", "volume.image", "volumes.extend", "volume.ssh_keys", "conn.reboot_server", "lb.update", "log.debug", "conn.delete_server", "conn.get_attached_volumes", "nics.append", "conn.create_server", "ret.update", "conn.get_location", "kwargs.get", "nic.ips", "config.get_cloud_config_value", "conn.get_lan", "log.error", "node.update", "conn.list_servers", "conn.list_locations", "log.info", "conn.update_lan", "datacenter.update", "conn.list_loadbalancers", "conn.create_loadbalancer", "conn.start_server", "vm_.keys", "conn.delete_volume", "conn.get_request", "volume.image_password", "conn.get_datacenter", "rfh.readlines", "logging.getLogger", "ret.append", "config.check_driver_dependencies", "config.is_provider_configured", "conn.create_lan", "ssh_keys.append", "__active_provider_name__.value", "volume.availability_zone", "exc.message", "logging.DEBUG", "os.path", "image.update", "conn.list_images"]}, "proxmox.py": {"libraries": ["time", "salt.utils.cloud", "socket", "requests", "IPy.IP", "socket.gethostbyname", "salt.config", "re", "salt.exceptions.SaltCloudExecutionFailure", "salt.utils.json", "logging", "pprint", "salt.exceptions.SaltCloudSystemExit", "socket.gaierror", "salt.exceptions.SaltCloudExecutionTimeout", "urllib", "ipaddress.ip_network", "ipaddress.ip_address"], "function_names": ["create", "shutdown", "_find_agent_ip", "set_vm_status", "_import_api", "_stringlist_to_dictionary", "get_dependencies", "get_configured_provider", "_check_ip_available", "_lookup_proxmox_task", "_reconfigure_clone", "_get_vm_by_id", "get_vmconfig", "wait_for_created", "_get_active_provider_name", "get_resources_nodes", "__virtual__", "_authenticate", "preferred_ip", "list_nodes", "stop", "script", "list_nodes_full", "wait_for_state", "_get_properties", "get_vm_status", "destroy", "_dictionary_to_stringlist", "ignore_cidr", "avail_locations", "avail_images", "query", "create_node", "start", "_get_vm_by_name", "get_resources_vms", "show_instance", "list_nodes_select", "_parse_proxmox_upid", "_get_next_vmid"], "function_calls": ["sorted", "set_vm_status", "ip_address", "_import_api", "_stringlist_to_dictionary", "get_dependencies", "get_configured_provider", "dict", "_reconfigure_clone", "_lookup_proxmox_task", "SaltCloudExecutionTimeout", "_get_vm_by_id", "wait_for_created", "get_vmconfig", "list", "SaltCloudSystemExit", "next", "int", "_get_active_provider_name", "set", "_authenticate", "repr", "preferred_ip", "gethostbyname", "stop", "range", "str", "list_nodes_full", "wait_for_state", "_get_properties", "get_vm_status", "destroy", "_dictionary_to_stringlist", "ignore_cidr", "avail_locations", "IP", "isinstance", "len", "query", "SaltCloudExecutionFailure", "create_node", "start", "_get_vm_by_name", "get_resources_vms", "ip_network", "_parse_proxmox_upid", "_get_next_vmid"], "class_names": [], "class_method_calls": ["node.split", "requests.get", "pprint.pformat", "time.sleep", "time.time", "response.raise_for_status", "__opts__.get", "exc.response", "log.warning", "interface.get", "config.is_profile_configured", "re.MULTILINE", "response.text", "query_path.format", "re.match", "item.strip", "numerical.group", "re.DOTALL", "returned_data.text", "requests.exceptions", "re_filter.findall", "requests.delete", "private_ips.append", "re.compile", "log.debug", "vm_.get", "ips.append", "requests.post", "config.get_cloud_config_value", "socket.AF_INET", "log.error", "parameters.add", "log.info", "if_addr.get", "input_dict.keys", "path.split", "urllib.parse", "logging.getLogger", "input_string.split", "config.check_driver_dependencies", "config.is_provider_configured", "__active_provider_name__.value", "response.json", "requests.put", "logging.DEBUG", "socket.AF_INET6", "socket.inet_pton", "new_setting.update", "salt.utils", "public_ips.append"]}, "pyrax.py": {"libraries": ["salt.config", "salt.utils.data", "salt.utils.openstack.pyrax"], "function_names": ["queues_delete", "_get_active_provider_name", "queues_create", "__virtual__", "queues_exists", "get_conn", "get_configured_provider", "get_dependencies", "queues_show"], "function_calls": ["conn", "getattr", "_get_active_provider_name", "get_dependencies", "get_configured_provider", "get_conn"], "class_names": [], "class_method_calls": ["suop.HAS_PYRAX", "config.check_driver_dependencies", "vm_.get", "config.is_provider_configured", "conn.delete", "__active_provider_name__.value", "vm_.copy", "conn.show", "salt.utils", "conn.exists", "conn.create"]}, "qingcloud.py": {"libraries": ["salt.exceptions.SaltCloudNotFound", "time", "salt.utils.cloud", "requests", "salt.config", "salt.utils.data", "salt.exceptions.SaltCloudExecutionFailure", "hmac", "salt.utils.json", "logging", "pprint", "base64", "hashlib.sha256", "salt.exceptions.SaltCloudSystemExit", "salt.exceptions.SaltCloudExecutionTimeout", "urllib.parse"], "function_names": ["create", "_compute_signature", "_get_image", "get_dependencies", "get_configured_provider", "list_nodes_min", "show_image", "_get_active_provider_name", "__virtual__", "list_nodes", "_query_node_data", "stop", "list_nodes_full", "script", "_get_size", "_show_normalized_node", "destroy", "avail_images", "avail_locations", "query", "start", "avail_sizes", "show_instance", "reboot", "list_nodes_select", "_get_location", "_get_specified_zone"], "function_calls": ["SaltCloudNotFound", "sorted", "_compute_signature", "_get_image", "get_dependencies", "get_configured_provider", "list", "SaltCloudSystemExit", "int", "_get_active_provider_name", "range", "str", "list_nodes_full", "_get_size", "_show_normalized_node", "destroy", "avail_images", "avail_locations", "isinstance", "len", "query", "avail_sizes", "show_instance", "_get_location", "_get_specified_zone"], "class_names": [], "class_method_calls": ["requests.get", "pprint.pformat", "request.url", "pairs.append", "salt.utils", "result.get", "provider.split", "config.is_profile_configured", "full_node.update", "images.split", "method.upper", "private_ips.append", "time.gmtime", "base64.b64encode", "log.debug", "h.update", "vxnet.get", "full_node.get", "parameters.keys", "data.get", "kwargs.get", "config.get_cloud_config_value", "params.items", "node.update", "log.info", "time.strftime", "urllib.parse", "request.text", "logging.getLogger", "config.check_driver_dependencies", "config.is_provider_configured", "__active_provider_name__.value", "request.status_code", "h.digest", "hmac.new", "nodes.items"]}, "saltify.py": {"libraries": ["time", "salt.utils.cloud", "smbprotocol.exceptions.InternalError", "requests.exceptions.ReadTimeout", "requests.exceptions.RetryError", "winrm.exceptions.WinRMTransportError", "requests.exceptions.ConnectionError", "salt.config", "salt.client", "salt._compat.ipaddress", "logging", "requests.exceptions.ConnectTimeout", "salt.exceptions.SaltCloudException", "requests.exceptions.InvalidSchema", "salt.exceptions.SaltCloudSystemExit", "requests.exceptions.SSLError", "requests.exceptions.ProxyError"], "function_names": ["create", "avail_sizes", "_build_required_items", "show_instance", "_get_active_provider_name", "list_nodes_full", "_verify", "reboot", "__virtual__", "_list_nodes_full", "list_nodes_select", "get_configured_provider", "destroy", "avail_images", "avail_locations", "list_nodes"], "function_calls": ["SaltCloudSystemExit", "_build_required_items", "_get_active_provider_name", "list_nodes_full", "_verify", "SaltCloudException", "get_configured_provider", "_list_nodes_full", "isinstance"], "class_names": [], "class_method_calls": ["time.sleep", "vm_.update", "local.cmd", "ip_.is_loopback", "private_ips.append", "ret.items", "nodes.items", "log.debug", "ret.update", "vm_.get", "salt.client", "config.get_cloud_config_value", "log.error", "ip_.is_private", "log.info", "logging.getLogger", "config.is_provider_configured", "__active_provider_name__.value", "salt.utils", "public_ips.append", "ipaddress.ip_address"]}, "scaleway.py": {"libraries": ["salt.exceptions.SaltCloudNotFound", "time", "salt.utils.cloud", "os", "salt.exceptions.SaltCloudExecutionTimeout", "salt.config", "salt.exceptions.SaltCloudExecutionFailure", "salt.utils.json", "logging", "pprint", "salt.exceptions.SaltCloudSystemExit", "salt.exceptions.SaltCloudConfigError"], "function_names": ["query", "create_node", "get_image", "create", "_get_node", "show_instance", "_get_active_provider_name", "list_nodes_full", "script", "__virtual__", "__query_node_data", "get_configured_provider", "list_nodes_select", "destroy", "avail_images", "list_nodes"], "function_calls": ["query", "SaltCloudSystemExit", "create_node", "get_image", "range", "_get_node", "SaltCloudNotFound", "str", "show_instance", "list_nodes_full", "_get_active_provider_name", "reversed", "get_configured_provider", "destroy", "SaltCloudConfigError", "avail_images", "list", "isinstance"], "class_names": [], "class_method_calls": ["pprint.pformat", "time.sleep", "__opts__.get", "config.is_profile_configured", "node.get", "log.debug", "ret.update", "data.get", "config.get_cloud_config_value", "log.error", "log.info", "request.text", "logging.getLogger", "config.is_provider_configured", "__active_provider_name__.value", "request.status_code", "logging.DEBUG", "os.path", "salt.utils"]}, "softlayer.py": {"libraries": ["SoftLayer", "time", "salt.utils.cloud", "salt.config", "logging", "salt.exceptions.SaltCloudSystemExit"], "function_names": ["create", "get_dependencies", "get_configured_provider", "get_conn", "_get_active_provider_name", "__virtual__", "wait_for_ip", "list_nodes", "script", "list_nodes_full", "destroy", "get_credentials", "avail_images", "avail_locations", "list_vlans", "avail_sizes", "get_location", "show_instance", "list_custom_images", "list_nodes_select"], "function_calls": ["SaltCloudSystemExit", "bool", "get_location", "int", "show_instance", "_get_active_provider_name", "list_nodes_full", "str", "get_conn", "get_configured_provider", "get_dependencies", "list", "isinstance"], "class_names": [], "class_method_calls": ["time.sleep", "kwargs.update", "__opts__.get", "conn.getNetworkVlans", "log.warning", "config.is_profile_configured", "conn.createObject", "ret.update", "disks.split", "vm_.get", "kwargs.get", "SoftLayer.Client", "config.get_cloud_config_value", "pass_conn.getVirtualGuests", "log.error", "log.info", "size.strip", "conn.getCreateObjectOptions", "logging.getLogger", "config.check_driver_dependencies", "config.is_provider_configured", "__active_provider_name__.value", "conn.getBlockDeviceTemplateGroups", "logging.DEBUG", "conn.getVirtualGuests", "salt.utils", "conn.deleteObject"]}, "softlayer_hw.py": {"libraries": ["SoftLayer", "time", "salt.utils.cloud", "salt.config", "decimal", "logging", "salt.exceptions.SaltCloudSystemExit"], "function_names": ["show_all_prices", "create", "get_dependencies", "get_configured_provider", "get_conn", "get_passwd", "_get_active_provider_name", "__virtual__", "wait_for_ip", "list_nodes", "script", "list_nodes_full", "destroy", "avail_images", "avail_locations", "show_all_categories", "list_vlans", "avail_sizes", "get_location", "show_instance", "list_nodes_select", "show_pricing"], "function_calls": ["len", "SaltCloudSystemExit", "get_location", "show_instance", "_get_active_provider_name", "list_nodes_full", "get_conn", "get_configured_provider", "get_dependencies", "list"], "class_names": [], "class_method_calls": ["conn.getAvailableLocations", "time.sleep", "profile.get", "__opts__.get", "conn.createCancelServerTicket", "conn.getNetworkVlans", "decimal.Decimal", "conn.getLocations", "conn.getObject", "provider.split", "config.is_profile_configured", "price.get", "categories.append", "location.get", "ret.update", "kwargs.get", "vm_.get", "SoftLayer.Client", "config.get_cloud_config_value", "conn.getHardware", "conn.placeOrder", "pass_conn.getVirtualGuests", "log.error", "conn.getCategories", "log.info", "logging.getLogger", "config.check_driver_dependencies", "config.is_provider_configured", "__active_provider_name__.value", "logging.DEBUG", "salt.utils"]}, "tencentcloud.py": {"libraries": ["tencentcloud.vpc.v20170312.vpc_client", "salt.exceptions.SaltCloudNotFound", "time", "salt.utils.cloud", "tencentcloud.cvm.v20170312.models", "salt.config", "salt.utils.data", "salt.exceptions.SaltCloudExecutionFailure", "tencentcloud.common.profile.client_profile.ClientProfile", "tencentcloud.vpc.v20170312.models", "salt.utils.json", "tencentcloud.cvm.v20170312.cvm_client", "logging", "pprint", "salt.exceptions.SaltCloudSystemExit", "salt.exceptions.SaltCloudExecutionTimeout", "tencentcloud.common.credential"], "function_names": ["create", "_get_nodes", "__get_location", "get_dependencies", "get_configured_provider", "__get_image", "get_provider_client", "list_nodes_min", "show_image", "_get_active_provider_name", "__virtual__", "list_nodes", "stop", "__get_securitygroups", "_get_node", "list_nodes_full", "script", "_get_images", "__get_size", "destroy", "show_disk", "avail_locations", "avail_images", "list_availability_zones", "__get_availability_zone", "start", "avail_sizes", "show_instance", "list_securitygroups", "reboot", "list_custom_images", "__query_node_data", "list_nodes_select"], "function_calls": ["vars", "_get_nodes", "__get_location", "SaltCloudNotFound", "get_dependencies", "get_configured_provider", "__get_image", "enumerate", "get_provider_client", "list", "SaltCloudSystemExit", "_get_active_provider_name", "__get_securitygroups", "_get_node", "str", "list_nodes_full", "_get_images", "__get_size", "destroy", "avail_images", "isinstance", "list_availability_zones", "__get_availability_zone", "ClientProfile", "len", "avail_sizes", "show_instance", "list_securitygroups"], "class_names": [], "class_method_calls": ["credential.Credential", "disk.DiskType", "image.ImageSize", "client.DescribeRegions", "provider.split", "config.is_profile_configured", "req.ImageId", "sg.ProjectId", "req.Offset", "client.StopInstances", "ret.update", "client.DescribeSecurityGroups", "instance.ImageId", "req.InstanceIds", "config.is_provider_configured", "config.check_driver_dependencies", "cvm_models.RebootInstancesRequest", "logging.DEBUG", "req.HostName", "req.ImageIds", "salt.utils", "sg.SecurityGroupDesc", "instance.InstanceId", "cvm_models.DescribeZonesRequest", "pprint.pformat", "req.Filters", "image.ImageState", "__opts__.get", "req.LoginSettings", "resp.ImageSet", "instance.PrivateIpAddresses", "cpf.language", "req.SecurityGroupIds", "typeConfig.Zone", "zone.ZoneState", "client.DescribeInstanceTypeConfigs", "resp.RegionSet", "typeConfig.InstanceFamily", "region.Region", "image.Platform", "resp.InstanceTypeConfigSet", "cvm_models.DescribeInstancesRequest", "disk.SnapshotId", "log.error", "req.InternetAccessible", "sg.IsDefault", "image.ImageSource", "disk.DiskSize", "req.Limit", "image.ImageType", "instance.InstanceState", "instance.InstanceType", "req.VirtualPrivateCloud", "node.InstanceId", "client.RunInstances", "zone.Zone", "image.ImageName", "cvm_models.DescribeInstanceTypeConfigsRequest", "cvm_models.DescribeImagesRequest", "client.TerminateInstances", "cvm_models.DescribeRegionsRequest", "req.InstanceChargePrepaid", "client.DescribeImages", "client.DescribeInstances", "image.Architecture", "typeConfig.GPU", "req.Placement", "req.InstanceType", "req.ForceStop", "node.SystemDisk", "cvm_models.RunInstancesRequest", "disk.DiskId", "typeConfig.Memory", "req.SystemDisk", "ret.append", "resp.InstanceIdSet", "__active_provider_name__.value", "typeConfig.InstanceType", "region.RegionName", "client.DescribeZones", "cvm_models.TerminateInstancesRequest", "image.ImageId", "sg.SecurityGroupId", "time.sleep", "cvm_client.CvmClient", "vpc_models.DescribeSecurityGroupsRequest", "instance.InstanceName", "req.InstanceName", "disk.DeleteWithInstance", "resp.SecurityGroupSet", "sg.CreatedTime", "region.RegionState", "client.RebootInstances", "log.debug", "vpc_client.VpcClient", "resp.ZoneSet", "typeConfig.CPU", "node.DataDisks", "client.StartInstances", "req.InstanceChargeType", "vm_.get", "resp.InstanceSet", "sg.SecurityGroupName", "provider.get", "config.get_cloud_config_value", "cvm_models.StopInstancesRequest", "resp.TotalCount", "logging.getLogger", "zone.ZoneName", "instance.PublicIpAddresses", "cvm_models.StartInstancesRequest"]}, "vagrant.py": {"libraries": ["salt.exceptions.CommandExecutionError", "fnmatch", "salt.exceptions.SaltInvocationError", "salt.utils.args"], "function_names": ["running", "stopped", "initialized", "_vagrant_call", "powered_off", "__virtual__", "paused", "_find_init_change", "rebooted", "destroyed"], "function_calls": ["str", "_find_init_change", "_vagrant_call", "isinstance"], "class_names": [], "class_method_calls": ["kwargs.update", "kwargs.get", "kwargs.items", "fnmatch.filter", "salt.utils", "changed_nodes.append", "ignored_nodes.append", "kwargs.pop"]}, "virtualbox.py": {"libraries": ["time", "re", "salt.utils.data", "logging", "salt.utils.timeout.wait_for", "vboxapi", "salt.utils.compat"], "function_names": ["vb_get_network_addresses", "vb_machinestate_to_str", "vb_clone_vm", "vb_get_max_network_slots", "vb_wait_for_session_state", "vb_get_box", "vb_start_vm", "_start_machine", "vb_create_machine", "treat_machine_dict", "vb_wait_for_network_address", "vb_list_machines", "_check_session_state", "vb_get_network_adapters", "vb_stop_vm", "vb_get_machine", "vb_machinestate_to_tuple", "machine_get_machinestate_tuple", "vb_machine_exists", "vb_machinestate_to_description", "vb_xpcom_to_attribute_dict", "vb_get_manager", "machine_get_machinestate_str", "vb_destroy_machine"], "function_calls": ["vb_machinestate_to_str", "vb_get_max_network_slots", "dict", "vb_wait_for_session_state", "attribute_class", "vb_get_box", "enumerate", "int", "sum", "set", "range", "wait_for", "str", "vb_machinestate_to_tuple", "isinstance", "getattr", "hasattr", "vb_xpcom_to_attribute_dict", "vb_get_manager", "machine_get_machinestate_str"], "class_names": [], "class_method_calls": ["machinedict.get", "_virtualboxManager.vbox", "time.time", "MACHINE_STATES_ENUM.get", "_virtualboxManager.openMachineSession", "interface_attributes.difference", "_virtualboxManager.constants", "log.warning", "machine.state", "machine.unregister", "_virtualboxManager.getSessionObject", "ip_addresses.append", "attribute_tuples.append", "machine.deleteConfig", "source_machine.cloneTo", "re.search", "message.find", "machine.getNetworkAdapter", "_virtualboxManager.getVirtualBox", "XPCOM_ATTRIBUTES.get", "log.debug", "manager.getArray", "machine.getGuestPropertyValue", "_virtualboxManager.closeMachineSession", "MACHINE_STATES.get", "log.trace", "machine.update", "vbox.registerMachine", "log.error", "xp_session.state", "machine.get", "log.info", "interface_attributes.union", "progress.waitForCompletion", "vbox.findMachine", "vboxapi.VirtualBoxManager", "sysprops.getMaxNetworkAdapters", "e.message", "logging.getLogger", "console.powerDown", "machine.launchVMProcess", "inetwork_adapter.getProperties", "session.console", "vbox.createMachine", "network_adapters.append", "salt.utils"]}, "vmware.py": {"libraries": ["pyVmomi.VmomiSupport", "salt.modules.cmdmod", "pyVmomi.vmodl", "pyVim.connect.GetStub", "salt.utils.stringutils", "ssl", "pyVim.connect.SmartConnect", "http.client.BadStatusLine", "errno", "time", "atexit", "gssapi", "pyVim.connect.SoapStubAdapter", "salt.exceptions", "pyVmomi.vim", "logging", "com.vmware.vapi.std.errors_client.Unauthenticated", "pyVim.connect.GetSi", "salt.utils.path", "salt.utils.platform", "base64", "vmware.vapi.vsphere.client.create_vsphere_client", "pyVim.connect.Disconnect"], "function_names": ["update_cluster", "_get_dvs_portgroup", "erase_disk_partitions", "get_datacenters", "create_dvs", "configure_host_cache", "wait_for_task", "get_uplink_dvportgroup", "get_hosts", "_get_partition_info", "update_dvportgroup", "get_dvss", "assign_license", "_check_disks_in_diskgroup", "get_hardware_grains", "get_mor_by_property", "update_dvs", "get_license_assignment_manager", "list_clusters", "disconnect", "get_networks", "list_dvs", "list_objects", "list_folders", "get_assigned_licenses", "get_service_info", "get_all_luns", "list_datacenters", "get_network_adapter_type", "list_resourcepools", "list_networks", "get_folder", "create_cluster", "get_service_instance", "get_licenses", "get_resource_pools", "__virtual__", "unregister_vm", "_get_pnics", "get_gssapi_token", "get_host_cache", "update_vm", "get_network_folder", "list_datastore_clusters", "get_disks", "get_root_folder", "_get_new_computed_partition_spec", "get_datastore_files", "delete_vm", "list_vapps", "get_new_service_instance_stub", "get_managed_object_name", "_get_scsi_address_to_lun_key_map", "get_dvportgroups", "create_vm", "get_datacenter", "create_datacenter", "list_hosts", "set_dvs_network_resource_management_enabled", "convert_to_kb", "get_mor_using_container_view", "get_host_datastore_system", "create_dvportgroup", "register_vm", "get_vm_by_property", "_get_dvs", "is_connection_to_a_vcenter", "get_network_adapter_object_type", "get_cluster", "get_placement", "get_properties_of_managed_object", "get_datastores", "get_diskgroups", "create_vmfs_datastore", "get_mors_with_properties", "get_service_instance_from_managed_object", "get_customizationspec_ref", "list_datastores", "get_inventory", "get_storage_system", "_get_dvs_uplink_portgroup", "get_scsi_address_to_lun_map", "power_cycle_vm", "get_vsphere_client", "add_license", "_get_vnics", "esxcli", "get_license_manager", "get_content", "remove_dvportgroup", "get_disk_partition_info", "list_portgroups", "remove_datastore", "rename_datastore", "_get_service_instance", "_get_vnic_manager", "list_vms"], "function_calls": ["get_datacenters", "get_datacenter", "SoapStubAdapter", "wait_for_task", "sorted", "GetStub", "SmartConnect", "get_hosts", "get_inventory", "_get_partition_info", "GetSi", "get_storage_system", "int", "type", "get_resource_pools", "get_gssapi_token", "Disconnect", "get_host_datastore_system", "ImportError", "get_license_manager", "get_content", "get_network_folder", "str", "get_vm_by_property", "get_license_assignment_manager", "get_root_folder", "_get_new_computed_partition_spec", "list_dvs", "list_objects", "create_vsphere_client", "get_cluster", "ValueError", "isinstance", "len", "get_properties_of_managed_object", "hasattr", "get_datastores", "get_managed_object_name", "_get_scsi_address_to_lun_key_map", "_get_service_instance", "get_mors_with_properties", "get_service_instance_from_managed_object", "get_all_luns"], "class_names": [], "class_method_calls": ["vim.Datacenter", "vol.extent", "free_partition.start", "license_manager.AddLicense", "dvs_ref.EnableNetworkResourceManagement", "task_info.error", "vm_ref.UnregisterVM", "_pnic.device", "device_info.multipathInfo", "storage_system.storageDeviceInfo", "vim.VirtualMachine", "inventory.rootFolder", "vim.HostDatastoreSystem", "i.volume", "context.check_hostname", "vm_ref.Destroy_Task", "ctx.step", "gssapi.C_NT_USER_NAME", "partition_info.layout", "label.key", "target_disk.devicePath", "service_instance.CurrentTime", "vmodl.query", "_vnic.device", "root_folder.CreateDatacenter", "vim.HostCacheConfigurationManager", "partition_info.spec", "p.name", "folder_object.CreateVM_Task", "errno.EPIPE", "device_info.scsiLun", "vim.StoragePod", "lun_ids_to_scsi_addr_map.items", "selected_pools.append", "datastore_ref.name", "portgroup.name", "host_cache_manager.ConfigureHostCache_Task", "ssl.PROTOCOL_TLSv1", "portgroup_ref.ReconfigureDVPortgroup_Task", "lun_key_by_scsi_addr.update", "service_instance.RetrieveContent", "si.content", "cluster_ref.ReconfigureComputeResource_Task", "vim.VmfsDatastoreCreateSpec", "p.end", "ctx.established", "computed_partition_info.layout", "gssapi.InitContext", "vim.Datastore", "exc.msg", "exc.message", "disk.key", "datobj.name", "obj.get", "dvs_create_spec.configSpec", "container.view", "ds_props.get", "salt.utils", "entity_ref._moId", "task_info.state", "storage_system.ComputeDiskPartitionInfo", "storage_system.UpdateDiskPartitions", "dm.ssd", "vim.HostStorageSystem", "t.key", "vim.DVSCreateSpec", "vim.HostCacheConfigurationSpec", "vim.HostVmfsSpec", "vm_ref.ReconfigVM_Task", "spec.name", "context.verify_mode", "vim.VMwareDVSConfigSpec", "datastore_ref.RenameDatastore", "_data.identifierType", "p.start", "items.append", "dvs.portgroup", "mo_ref._stub", "base64.b64encode", "vim.HostDiskPartitionLayout", "license_assignment_manager.QueryAssignedLicenses", "new_stub.cookie", "vsan_storage_info.diskMapping", "vim.KeyValue", "vim.HostSystem", "task.__class__", "vim.Folder", "host_reference.configManager", "dc_ref.hostFolder", "log.error", "obj_ref.Destroy", "vim.DistributedVirtualPortgroup", "log.exception", "obj.propSet", "stub.cookie", "si._stub", "d.key", "a.assignedLicense", "vsan_host_config.storageInfo", "l.canonicalName", "vim.HostScsiDisk", "disk_group.nonSsd", "vim.HostVmfsVolume", "files.append", "l.lun", "vim.HostScsiDiskPartition", "task_info.result", "vol.name", "free_partition.end", "multipath_info.lun", "obj.obj", "stub.host", "datastore_names.extend", "ssl._create_unverified_context", "inventory.viewManager", "salt.modules", "virtual_machine.PowerOff", "_vnic.spec", "vim.HostDiskPartitionInfoPartitionFormat", "item.name", "vmodl.fault", "atexit.register", "host_reference.config", "host_ref.configManager", "vim.VirtualApp", "computed_partition_info.spec", "datacenter.vmFolder", "view.view", "vmodl.RuntimeFault", "ssl.create_default_context", "license_assignment_manager.UpdateAssignedLicense", "prop.name", "salt.exceptions", "task.info", "object_list.append", "log.info", "reference.__class__", "label.value", "p.partition", "prop.val", "vim.fault", "host_ref.config", "disk_group.ssd", "lun_key_by_scsi_addr.items", "license_manager.licenses", "vim.view", "exc.errno", "_pnic.mac", "e.diskName", "dvs_ref.CreateDVPortgroup_Task", "datobj.browser", "time.sleep", "time.time", "disk_ref.canonicalName", "dvs_ref.ReconfigureDvs_Task", "_data.identifierValue", "netw_folder_ref.CreateDVS_Task", "vim.Network", "properties.append", "vim.dvs", "exc.faultMessage", "exc.privilegeId", "p.type", "target_disk.uuid", "d.ssd", "host_ds_system.RemoveDatastore", "virtual_machine.PowerOn", "log.debug", "l.path", "log.trace", "disk_datastores.append", "d.canonicalName", "service_instance.content", "free_partition.type", "gssapi.Name", "partition_info.deviceName", "props.get", "vim.ClusterComputeResource", "filtered_hosts.append", "mo_ref.name", "VmomiSupport.GetRequestContext", "ssl.SSLContext", "unit.lower", "logging.getLogger", "vim.HostDiskPartitionSpec", "ssl.CERT_NONE", "disk.canonicalName", "vim.ResourcePool", "vim.vm", "service_instance._stub", "portgroup_ref.Destroy_Task", "vim.DistributedVirtualSwitch", "storage_system.RetrieveDiskPartitionInfo", "vim.ServiceInstance"]}, "vultrpy.py": {"libraries": ["time", "salt.config", "logging", "pprint", "salt.exceptions.SaltCloudSystemExit", "salt.exceptions.SaltCloudConfigError", "urllib.parse"], "function_names": ["create", "_query", "get_configured_provider", "wait_for_status", "_cache_provider_details", "_get_active_provider_name", "__virtual__", "list_firewall_groups", "wait_for_default_password", "_lookup_vultrid", "list_nodes", "list_scripts", "stop", "avail_firewall_groups", "list_nodes_full", "wait_for_hostname", "destroy", "list_keypairs", "avail_images", "avail_locations", "avail_scripts", "show_keypair", "start", "avail_sizes", "show_instance", "wait_for_server_state", "list_nodes_select", "avail_keys"], "function_calls": ["_query", "get_configured_provider", "list", "SaltCloudSystemExit", "int", "_cache_provider_details", "_get_active_provider_name", "_lookup_vultrid", "avail_firewall_groups", "str", "list_nodes_full", "list_keypairs", "avail_locations", "avail_images", "isinstance", "avail_scripts", "avail_sizes", "show_instance", "SaltCloudConfigError", "avail_keys"], "class_names": [], "class_method_calls": ["pprint.pformat", "time.sleep", "result.get", "ssh_key_ids.split", "locations.items", "log.debug", "ret.update", "data.get", "images.items", "config.get_cloud_config_value", "log.error", "main_ip.startswith", "log.info", "sizes.items", "urllib.parse", "logging.getLogger", "config.is_provider_configured", "__active_provider_name__.value", "logging.DEBUG"]}, "xen.py": {"libraries": ["time", "salt.utils.cloud", "salt.config", "XenAPI", "logging", "salt.exceptions.SaltCloudException", "salt.exceptions.SaltCloudSystemExit", "datetime.datetime"], "function_names": ["create", "shutdown", "suspend", "vif_list", "unpause", "get_configured_provider", "_determine_storage_repo", "sr_list", "destroy_template", "_provision_vm", "_deploy_salt_minion", "_get_active_provider_name", "__virtual__", "_get_dependencies", "_copy_vm", "get_vm_ip", "set_vm_ip", "pool_list", "list_nodes", "_determine_resource_pool", "_set_static_ip", "_run_async_task", "stop", "resume", "_get_vm", "host_list", "list_nodes_full", "_get_pool", "template_list", "destroy", "set_pv_args", "avail_locations", "avail_images", "start", "avail_sizes", "pif_list", "vbd_list", "vdi_list", "show_instance", "_clone_vm", "reboot", "_get_sr", "get_pv_args", "_wait_for_ip", "destroy_vm_vdis", "list_nodes_select", "_get_session", "pause"], "function_calls": ["shutdown", "_determine_storage_repo", "get_configured_provider", "SaltCloudSystemExit", "_provision_vm", "_deploy_salt_minion", "_get_active_provider_name", "type", "_copy_vm", "_get_dependencies", "round", "get_vm_ip", "set_vm_ip", "pool_list", "_run_async_task", "_determine_resource_pool", "_set_static_ip", "_get_vm", "str", "list_nodes_full", "_get_pool", "template_list", "len", "start", "show_instance", "_clone_vm", "_get_sr", "_wait_for_ip", "destroy_vm_vdis", "SaltCloudException", "_get_session"], "class_names": [], "class_method_calls": ["time.sleep", "ex.__dict__", "__opts__.get", "datetime.now", "session.xenapi", "salt.cache", "log.warning", "provider.split", "net.keys", "XenAPI.Session", "vm_cfg.keys", "log.debug", "ret.update", "pool_record.get", "vm_.get", "kwargs.get", "data.get", "url.split", "config.get_cloud_config_value", "XenAPI.Failure", "log.error", "log.info", "vm_.keys", "data.update", "logging.getLogger", "config.is_provider_configured", "config.check_driver_dependencies", "__active_provider_name__.value", "delta.seconds", "status.startswith", "cidr.split", "salt.utils"]}, "exceptions.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": ["InspectorSnapshotException", "InspectorQueryException", "SIException", "InspectorKiwiProcessorException"], "class_method_calls": []}, "libcloudfuncs.py": {"libraries": ["salt.exceptions.SaltCloudNotFound", "salt.utils.cloud", "salt.utils.event", "os", "libcloud.compute.deployment.ScriptDeployment", "libcloud.compute.deployment.MultiStepDeployment", "salt.config", "salt.client", "salt.utils.data", "logging", "libcloud.compute.providers.get_driver", "salt.exceptions.SaltCloudSystemExit", "libcloud.compute.types.NodeState", "libcloud.compute.types.Provider", "libcloud"], "function_names": ["avail_sizes", "get_location", "get_image", "get_size", "show_instance", "script", "avail_locations", "get_node", "check_libcloud_version", "reboot", "list_nodes_full", "conn_has_method", "destroy", "list_nodes_select", "avail_images", "list_nodes"], "function_calls": ["SaltCloudSystemExit", "ImportError", "getattr", "dir", "ScriptDeployment", "SaltCloudNotFound", "str", "int", "list_nodes_full", "get_node", "get_conn", "RuntimeError", "get_configured_provider", "tuple", "zip", "isinstance"], "class_names": [], "class_method_calls": ["attr.startswith", "img.name", "__opts__.get", "libcloud.__version__", "salt.utils", "conn.destroy_node", "node.__dict__", "mopts_.update", "conn.list_nodes", "node.extra", "client.cmd", "node.name", "node.image", "node.id", "node.state", "__active_provider_name__.split", "salt.client", "size.name", "log.error", "conn.list_locations", "log.info", "node.private_ips", "conn.reboot_node", "node.size", "logging.getLogger", "conn.list_sizes", "img.id", "salt.config", "size.id", "os.path", "conn.list_images", "node.public_ips"]}, "common.py": {"libraries": ["errno", "time", "socket", "salt.ext.tornado.util.errno_from_exception", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.platform.interface", "auto.set_close_exec"], "function_names": ["fileno", "try_close", "close", "write_fileno", "__init__", "consume", "wake"], "function_calls": ["try_close", "hasattr", "range", "set_close_exec", "errno_from_exception"], "class_names": ["Waker"], "class_method_calls": ["self.reader_fd", "f.close", "time.sleep", "socket.socket", "a.listen", "a.getsockname", "a.fileno", "socket.TCP_NODELAY", "socket.IPPROTO_TCP", "self.reader", "self.writer", "interface.Waker", "a.accept", "a.close", "errno.WSAEADDRINUSE", "a.bind", "socket.error"]}, "esxcluster.py": {"libraries": ["pyVmomi.VmomiSupport", "salt.config.schemas.esxcluster.LicenseSchema", "salt.exceptions", "salt.utils.dictupdate", "salt.config.schemas.esxcluster.ESXClusterConfigSchema", "salt.utils.listdiffer.list_diff", "logging", "sys", "functools.wraps", "salt.utils.dictdiffer.recursive_diff", "jsonschema"], "function_names": ["cluster_configured", "mod_init", "_deprecation_message", "vsan_datastore_configured", "__virtual__", "_get_vsan_datastore", "wrapped", "licenses_configured"], "function_calls": ["function", "str", "wraps", "_get_vsan_datastore", "recursive_diff", "list_diff"], "class_names": [], "class_method_calls": ["jsonschema.exceptions", "cluster_dict.get", "licenses.items", "exc.strerror", "ldiff.old_values", "sys.maxsize", "diff.new_values", "changes.update", "ex.err_msg", "current.get", "diff.changes_str", "VmomiSupport.versionMap", "ldiff.new_values", "ldiff.diffs", "comments.append", "ret.update", "log.trace", "diff.old_values", "ESXClusterConfigSchema.serialize", "salt.exceptions", "diff.diffs", "log.error", "log.info", "ldiff.changes_str2", "logging.getLogger", "dictupdate.update", "sys.version_info", "LicenseSchema.serialize", "jsonschema.validate", "salt.utils"]}, "esxdatacenter.py": {"libraries": ["logging", "salt.exceptions", "functools.wraps"], "function_names": ["datacenter_configured", "mod_init", "_deprecation_message", "__virtual__", "wrapped"], "function_calls": ["str", "function", "wraps"], "class_names": [], "class_method_calls": ["ret.update", "logging.getLogger", "log.error", "salt.exceptions", "log.info", "log.debug", "salt.utils", "comments.append"]}, "esxi.py": {"libraries": ["pyVmomi.VmomiSupport", "jsonschema", "salt.exceptions.ArgumentValueError", "salt.exceptions.CommandExecutionError", "re", "logging", "sys", "salt.exceptions.VMwareObjectRetrievalError", "salt.utils.decorators.depends", "salt.utils.files", "functools.wraps", "salt.exceptions.VMwareApiError", "salt.exceptions.VMwareSaltError", "salt.config.schemas.esxi.DiskGroupsDiskScsiAddressSchema", "salt.config.schemas.esxi.HostCacheSchema", "salt.exceptions.InvalidConfigError"], "function_names": ["_strip_key", "vsan_configured", "_deprecation_message", "_lookup_syslog_config", "vmotion_configured", "coredump_configured", "ssh_configured", "ntp_configured", "__virtual__", "password_present", "diskgroups_configured", "wrapped", "syslog_configured", "host_cache_configured"], "function_calls": ["len", "ImportError", "depends", "function", "VMwareObjectRetrievalError", "VMwareSaltError", "int", "_lookup_syslog_config", "str", "_strip_key", "VMwareApiError", "wraps", "set", "ArgumentValueError", "InvalidConfigError", "enumerate", "isinstance"], "class_names": [], "class_method_calls": ["jsonschema.exceptions", "m.group", "cache_disk_to_existing_diskgroup_map.get", "capacity_disk_displays.append", "enable.get", "key_string.replace", "current_vmotion_enabled.get", "changes.update", "re.match", "host_cache.get", "bad_scsi_addrs.append", "current_ssh_key.get", "syslog_configs.items", "added_capacity_disk_displays.append", "capacity_disk_ids.append", "VmomiSupport.versionMap", "DiskGroupsDiskScsiAddressSchema.serialize", "response.get", "disable.get", "log.debug", "comments.append", "removed_capacity_disk_ids.append", "current_config.get", "ret.update", "log.trace", "enabled.get", "log.error", "current_eligible_disks.get", "log.info", "line.startswith", "current_vsan_enabled.get", "HostCacheSchema.serialize", "ntp_running.get", "lookup.get", "reset.items", "logging.getLogger", "added_capacity_disk_ids.append", "sys.version_info", "current_service_policy.get", "removed_capacity_disk_displays.append", "ssh_running.get", "jsonschema.validate", "proxy_details.get", "val.get", "key_string.strip", "salt.utils", "current_firewall.get"]}, "esxvm.py": {"libraries": ["pyVmomi.VmomiSupport", "salt.exceptions", "logging", "sys", "salt.config.schemas.esxvm.ESXVirtualMachineConfigSchema", "functools.wraps", "jsonschema"], "function_names": ["_deprecation_message", "vm_updated", "vm_created", "vm_configured", "vm_cloned", "__virtual__", "wrapped", "vm_registered"], "function_calls": ["function", "vm_updated", "vm_created", "str", "wraps", "vm_cloned", "vm_registered"], "class_names": [], "class_method_calls": ["log.trace", "changes.update", "difference.changes_str", "jsonschema.exceptions", "logging.getLogger", "sys.version_info", "salt.exceptions", "log.error", "vm_file.file", "jsonschema.validate", "VmomiSupport.versionMap", "ESXVirtualMachineConfigSchema.serialize", "salt.utils", "diffs.items", "result.update", "vm_file.folderPath"]}, "minion.py": {"libraries": ["os", "salt.utils.platform", "salt.utils.process", "logging", "salt.payload", "salt.utils.files", "threading"], "function_names": ["running", "_check_cmdline", "_read_proc_file", "cache_jobs"], "function_calls": ["_check_cmdline", "_read_proc_file", "isinstance"], "class_names": [], "class_method_calls": ["os.getpid", "os.listdir", "os.makedirs", "log.warning", "x.name", "fp_.write", "salt.payload", "log.debug", "fp_.close", "threading.current_thread", "data.get", "opts.get", "threading.enumerate", "logging.getLogger", "ret.append", "fp_.read", "os.path", "salt.utils", "os.remove"]}, "vcenter.py": {"libraries": ["os", "salt.exceptions", "salt.utils.dictupdate.merge", "logging", "jsonschema", "salt.config.schemas.vcenter.VCenterProxySchema"], "function_names": ["find_credentials", "shutdown", "init", "__virtual__", "get_details", "ping"], "function_calls": ["merge", "find_credentials"], "class_names": [], "class_method_calls": ["VCenterProxySchema.serialize", "log.trace", "os.getpid", "jsonschema.exceptions", "logging.getLogger", "salt.exceptions", "opts.get", "jsonschema.validate", "log.info", "__pillar__.get", "log.debug", "proxy_conf.get", "log.critical"]}, "crypt.py": {"libraries": ["hashlib", "os", "salt.loader", "logging", "salt.exceptions.SaltInvocationError", "Cryptodome.Random", "salt.utils.files", "M2Crypto", "Crypto.Random"], "function_names": ["reinit_crypto", "decrypt", "pem_finger"], "function_calls": ["getattr", "TypeError", "rend_func", "SaltInvocationError", "enumerate", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "key.replace", "salt.loader", "x.strip", "renderers.get", "log.error", "fp_.readlines", "os.path", "salt.utils", "Random.atfork", "finger.rstrip", "key.encode"]}, "masterapi.py": {"libraries": ["salt.utils.event", "pwd", "os", "salt.state", "salt.acl", "salt.utils.dictupdate", "salt.cache", "salt.utils.stringutils", "salt.utils.files", "salt.utils.mine", "salt.utils.jid", "salt.utils.verify", "salt.utils.gzip_util", "time", "salt.auth", "salt.utils.job", "salt.defaults.DEFAULT_TARGET_DELIM", "salt.key", "fnmatch", "salt.payload", "salt.utils.args", "salt.runner", "salt.utils.minions", "salt.utils.atomicfile", "salt.utils.user", "salt.pillar.git_pillar", "re", "salt.client", "salt.exceptions", "logging", "salt.crypt", "salt.wheel", "salt.pillar", "salt.utils.gitfs", "salt.utils.path", "salt.utils.platform", "salt.minion", "stat", "salt.fileserver"], "function_names": ["check_autoreject", "__setup_fileserver", "__init__", "check_permissions", "_file_recv", "clean_old_jobs", "fileserver_update", "minion_runner", "_return", "__verify_minion_publish", "runner", "check_autosign", "check_signing_file", "mk_token", "mk_key", "minion_pub", "clean_expired_tokens", "_master_opts", "wheel", "pub_ret", "init_git_pillar", "_mine_get", "_pillar", "access_keys", "minion_publish", "check_autosign_dir", "get_token", "_minion_event", "_syndic_return", "_prep_auth_info", "destroy", "clean_pub_auth", "revoke_auth", "_mine_delete", "check_autosign_grains", "clean_fsbackend", "_mine", "_mine_flush", "publish", "_master_tops"], "function_calls": ["len", "any", "int", "mk_key", "str", "set", "list", "isinstance"], "class_names": ["AutoKey", "LocalFuncs", "RemoteFuncs"], "class_method_calls": ["fs_.file_list_emptydirs", "self.signing_files", "self.key", "mine_entry.get", "log.critical", "fileserver.update", "perms.update", "self._file_list_emptydirs", "salt.key", "ret.pop", "data.pop", "os.getuid", "fs_.serve_file", "loadauth.rm_token", "fs_.file_hash", "self.loadauth", "line.startswith", "fs_.envs", "self._file_find", "load.pop", "token_data.get", "self.wheel_", "logging.DEBUG", "self.mminion", "salt.utils", "self._file_envs", "entry.strip", "os.unlink", "stat.S_IWOTH", "self._dir_list", "salt.loader", "user.replace", "salt.acl", "fnmatch.filter", "self.__verify_minion_publish", "log.warning", "git_pillar.GLOBAL_ONLY", "auth_check.get", "arg_.append", "os.walk", "exc.__class__", "re.match", "publisher_acl.user_is_blacklisted", "user.pw_name", "functions_allowed.append", "publisher_acl.keys", "normpath.replace", "git_pillar.PER_REMOTE_ONLY", "salt.runner", "self._serve_file", "opts.update", "ret.setdefault", "acl_users.add", "salt.client", "log.error", "log.exception", "salt.crypt", "salt.wheel", "salt.pillar", "runner_client.asynchronous", "mminion.returners", "os.path", "self.__setup_fileserver", "exc.args", "self._prep_auth_info", "match_type.lower", "publisher_acl.cmd_is_blacklisted", "salt.cache", "fmode.st_gid", "fmode.st_mode", "os.makedirs", "self.check_autosign_dir", "line.strip", "fp_.write", "perms.extend", "os.chmod", "fs_._find_file", "extra.get", "stat.S_IWGRP", "fp_.seek", "self.local", "stat.S_IRUSR", "os.stat", "salt.exceptions", "log.info", "loadauth.get_tok", "self._return", "self.cache", "loadauth.list_tokens", "data.update", "self.check_signing_file", "ret.append", "pillar.compile_pillar", "load.get", "fp_.read", "stat.S_IWUSR", "os.chown", "keyapi.delete_key", "fileserver.servers", "os.remove", "self.event", "salt.fileserver", "self.check_permissions", "time.time", "fs_.dir_list", "os.listdir", "os.access", "self._symlink_list", "minion_side_acl.get", "salt.auth", "git_pillar.PER_REMOTE_OVERRIDES", "os.W_OK", "log.debug", "self.opts", "runner.run", "pwd.getpwnam", "self._file_list", "opts.get", "checker.check_minions", "log.profile", "self.check_autosign_grains", "self.ckminions", "pwd.getpwall", "logging.getLogger", "fs_.symlink_list", "arg.split", "self.tops", "fs_.file_list", "salt.minion", "self._file_hash"]}, "events.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "exitcodes.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "docker_events.py": {"libraries": ["traceback", "salt.utils.event", "salt.utils.json", "logging", "docker", "docker.utils"], "function_names": ["__virtual__", "start", "fire"], "function_calls": ["fire_master", "fire"], "class_names": [], "class_method_calls": ["logging.getLogger", "traceback.print_exc", "__opts__.get", "docker.APIClient", "event.decode", "salt.utils", "docker.Client", "client.events"]}, "fluent.py": {"libraries": ["logging", "salt.utils.event", "fluent.sender", "fluent.event"], "function_names": ["__virtual__", "start"], "function_calls": [], "class_names": [], "class_method_calls": ["sender.setup", "event_bus.get_event_block", "logging.getLogger", "event.Event", "__opts__.get", "log.info", "salt.utils"]}, "http_logstash.py": {"libraries": ["salt.utils.http", "fnmatch", "salt.utils.json", "salt.utils.event"], "function_names": ["_logstash", "start"], "function_calls": ["_logstash", "isinstance"], "class_names": [], "class_method_calls": ["salt.utils", "fnmatch.fnmatch", "event_bus.get_event", "__opts__.get"]}, "ircbot.py": {"libraries": ["salt.utils.event", "socket", "collections.namedtuple", "salt.ext.tornado.iostream", "re", "salt.ext.tornado.ioloop", "logging", "base64", "ssl"], "function_names": ["_message", "start", "fire", "_privmsg", "__init__", "_connect", "_command_ping", "_command_event", "_command_echo", "send_message", "_event", "_allow_nick", "read_messages", "_allow_host", "on_closed", "join_channel", "on_connect"], "function_calls": ["len", "hasattr", "getattr", "any", "namedtuple", "Event", "PrivEvent", "IRCClient", "fire_master", "fire", "isinstance"], "class_names": ["IRCClient"], "class_method_calls": ["self.join_channel", "raw.rstrip", "self._privmsg", "self.sasl", "self.host", "__opts__.get", "self._message", "self.password", "self._allow_host", "logging.info", "event.line", "self._event", "event.source", "self.on_closed", "re.match", "self.ssl", "socket.socket", "self._connect", "self.channels", "self.read_messages", "self.username", "event.nick", "base64.b64encode", "log.debug", "event.code", "self.io_loop", "self.allow_nicks", "self.allow_hosts", "line.encode", "socket.AF_INET", "self.send_message", "client.io_loop", "self.on_connect", "salt.ext", "logging.getLogger", "self.disable_query", "self._stream", "channel.startswith", "ssl.CERT_NONE", "self.nick", "socket.SOCK_STREAM", "self.port", "self.char", "search.group", "salt.utils", "event.channel", "self._allow_nick"]}, "junos_syslog.py": {"libraries": ["pyparsing.StringEnd", "pyparsing.Suppress", "time", "salt.utils.event", "twisted.internet.protocol.DatagramProtocol", "re", "pyparsing.nums", "twisted.internet.threads", "pyparsing.Combine", "pyparsing.string", "logging", "twisted.internet.reactor", "pyparsing.Optional", "pyparsing.alphas", "pyparsing.Word", "pyparsing.delimitedList", "pyparsing.LineEnd", "pyparsing.Regex"], "function_names": ["parse", "handle_error", "start", "datagramReceived", "__init__", "__virtual__", "send_event_to_salt", "parseData"], "function_calls": ["len", "Exception", "LineEnd", "Word", "StringEnd", "int", "range", "str", "_SyslogServerFactory", "Regex", "_Parser", "delimitedList", "Combine", "Suppress", "Optional", "isinstance"], "class_names": ["_SyslogServerFactory", "DatagramProtocol", "_Parser"], "class_method_calls": ["string.ascii_uppercase", "self.options", "string.ascii_lowercase", "d.addCallbacks", "threads.deferToThread", "self.__pattern_without_daemon", "self.title", "re.match", "self.send_event_to_salt", "self.handle_error", "event.get_master_event", "self.parseData", "err_msg.getErrorMessage", "log.debug", "reactor.listenUDP", "log.error", "obj.group", "log.info", "time.strftime", "data.decode", "logging.getLogger", "reactor.run", "self.__pattern", "self.obj"]}, "libvirt_events.py": {"libraries": ["logging", "salt.utils.event", "urllib.parse", "libvirt"], "function_names": ["get_address", "_pool_event_refresh_cb", "_domain_event_tunable_cb", "_domain_event_block_job_cb", "_secret_event_value_changed_cb", "_domain_event_pmsuspend_disk_cb", "_domain_event_reboot_cb", "_network_event_lifecycle_cb", "_domain_event_io_error_cb", "_domain_event_tray_change_cb", "_callbacks_cleanup", "_domain_event_lifecycle_cb", "_append_callback_id", "_compute_subprefix", "_salt_send_event", "_domain_event_rtc_change_cb", "_domain_event_migration_iteration_cb", "_get_domain_event_detail", "_domain_event_block_threshold_cb", "_domain_event_balloon_change_cb", "__virtual__", "_pool_event_lifecycle_cb", "_domain_event_device_added_cb", "_domain_event_device_removal_failed_cb", "_domain_event_control_error_cb", "_nodedev_event_update_cb", "_cleanup", "_secret_event_lifecycle_cb", "_salt_send_domain_event", "start", "_domain_event_disk_change_cb", "_domain_event_device_removed_cb", "_get_libvirt_enum_string", "_domain_event_graphics_cb", "_domain_event_agent_lifecycle_cb", "_register_callback", "_domain_event_job_completed_cb", "_nodedev_event_lifecycle_cb", "_domain_event_watchdog_cb", "_domain_event_pmsuspend_cb", "_domain_event_pmwakeup_cb", "_domain_event_metadata_change_cb"], "function_calls": ["get_address", "len", "register", "_salt_send_event", "hasattr", "getattr", "_compute_subprefix", "bool", "_get_libvirt_enum_string", "_register_callback", "_get_domain_event_detail", "_cleanup", "globals", "deregister", "_append_callback_id", "_callbacks_cleanup", "_salt_send_domain_event"], "class_names": [], "class_method_calls": ["attr.startswith", "libvirt.__dict__", "uri_tag.append", "pool.UUIDString", "register_name.replace", "__opts__.get", "libvirt.virEventRegisterDefaultImpl", "pool.name", "log.warning", "libvirt.openReadOnly", "cnx.close", "counts.items", "prefixes.count", "callback_ids.items", "net.UUIDString", "log.debug", "domain.name", "secret.UUIDString", "CALLBACK_DEFS.items", "uri.netloc", "dev.name", "libvirt.getVersion", "log.error", "log.exception", "net.name", "p.endswith", "conn.getURI", "urllib.parse", "data.update", "candidate.lower", "libvirt.virEventRunDefaultImpl", "uri.scheme", "logging.getLogger", "cnx.getURI", "uri.path", "domain.UUIDString", "all_data.update", "salt.utils", "domain.ID", "event_name.upper", "attr.split"]}, "logentries.py": {"libraries": ["time", "salt.utils.event", "socket", "salt.utils.json", "uuid", "logging", "ssl", "random", "certifi"], "function_names": ["start", "reopen_connection", "__init__", "put", "open_connection", "__virtual__", "event_bus_context", "close_connection"], "function_calls": ["event_bus_context", "SocketAppender", "getattr"], "class_names": ["TLSSocketAppender", "PlainTextSocketAppender"], "class_method_calls": ["time.sleep", "self.MIN_DELAY", "ssl.wrap_socket", "self.INVALID_TOKEN", "self.close_connection", "log.warning", "ssl.CERT_REQUIRED", "self.LE_API", "socket.socket", "appender.put", "self.LE_TLS_PORT", "appender.close_connection", "uuid.UUID", "self.open_connection", "self.reopen_connection", "log.debug", "random.uniform", "self.LINE_SEP", "self.verbose", "socket.AF_INET", "opts.get", "ssl.PROTOCOL_TLSv1", "event_bus.get_event", "appender.reopen_connection", "self.MAX_DELAY", "logging.getLogger", "data.replace", "self._conn", "sock.connect", "socket.SOCK_STREAM", "salt.utils", "self.LE_PORT", "certifi.where"]}, "logstash_engine.py": {"libraries": ["logging", "salt.utils.event", "logstash"], "function_names": ["__virtual__", "event_bus_context", "start"], "function_calls": ["event_bus_context", "logstashHandler"], "class_names": [], "class_method_calls": ["logging.INFO", "logging.getLogger", "logstash_logger.addHandler", "logstash_logger.setLevel", "opts.get", "event_bus.get_event", "logstash_logger.info", "salt.utils", "logstash.TCPLogstashHandler", "log.debug", "logstash.UDPLogstashHandler"]}, "napalm_syslog.py": {"libraries": ["salt.utils.zeromq.zmq", "salt.utils.event", "napalm_logs", "salt.utils.network", "logging", "salt.utils.stringutils", "napalm_logs.utils"], "function_names": ["__virtual__", "_zmq", "_get_transport_recv", "start"], "function_calls": ["_get_transport_recv", "transport_recv_fun"], "class_names": [], "class_method_calls": ["socket.connect", "context.socket", "log.warning", "log.critical", "zmq.SUBSCRIBE", "dict_object.get", "event.get_master_event", "socket.ipv6", "log.debug", "log.error", "log.info", "napalm_logs.utils", "zmq.Context", "auth.decrypt", "logging.getLogger", "socket.recv", "socket.setsockopt", "salt.utils", "zmq.SUB"]}, "reactor.py": {"libraries": ["glob", "salt.utils.event", "os", "salt.utils.yaml", "salt.utils.cache", "salt.client", "salt.state", "salt.utils.data", "salt.utils.master", "salt.utils.process", "salt.wheel", "logging", "fnmatch", "salt.utils.args", "salt.utils.files", "salt.runner", "salt.defaults.exitcodes"], "function_names": ["reactions", "list_all", "add_reactor", "call_reactions", "__init__", "wheel", "populate_client_cache", "resolve_aliases", "caller", "run", "list_reactors", "render_reaction", "local", "delete_reactor", "runner"], "function_calls": ["len", "frozenset", "next", "ReactWrap", "getattr", "super", "l_fun", "iter", "enumerate", "isinstance"], "class_names": ["ReactWrap", "Reactor"], "class_method_calls": ["react_call.get", "self.minion", "reactors.extend", "self.is_leader", "salt.state", "self.populate_client_cache", "event.fire_event", "self.render_template", "opts.copy", "log.warning", "kwargs.pop", "self.wrap", "event.iter_events", "self.aliases", "high.update", "salt.runner", "wrap_call.get", "self.pool", "log.debug", "self.verify_high", "self.add_reactor", "self.reactions", "self.opts", "glob.glob", "reactors.append", "self.reaction_class", "salt.client", "self.render_reaction", "ReactWrap.client_cache", "log.error", "self.compile_high_data", "self.order_chunks", "log.exception", "log.info", "self.delete_reactor", "salt.wheel", "ropt.keys", "self.list_reactors", "self.client_cache", "self.list_all", "self.resolve_aliases", "reactor.keys", "fnmatch.fnmatch", "logging.getLogger", "self.call_reactions", "react.update", "glob_ref.startswith", "os.nice", "self.event_user", "salt.minion", "salt.utils"]}, "redis_sentinel.py": {"libraries": ["logging", "salt.client", "redis"], "function_names": ["start", "__init__", "__virtual__", "work", "run"], "function_calls": ["super", "dict", "Listener", "zip", "list", "isinstance"], "class_names": ["Listener"], "class_method_calls": ["ret.update", "logging.getLogger", "self.fire_master", "redis.StrictRedis", "self.pubsub", "self.redis", "salt.client", "client.run", "ips.pop", "self.tag", "salt.utils", "log.debug", "local.cmd", "self.work"]}, "script.py": {"libraries": ["time", "salt.utils.event", "salt.loader", "salt.exceptions.CommandExecutionError", "salt.utils.process", "logging", "subprocess", "shlex"], "function_names": ["start", "_get_serializer", "_read_stdout"], "function_calls": ["getattr", "str", "iter", "_read_stdout", "CommandExecutionError", "fire_master", "_get_serializer"], "class_names": [], "class_method_calls": ["time.sleep", "salt.loader", "__opts__.get", "subprocess.Popen", "subprocess.PIPE", "event.get", "proc.wait", "proc.stdout", "proc.terminate", "log.debug", "serializer.deserialize", "log.error", "log.info", "subprocess.STDOUT", "subprocess.CalledProcessError", "logging.getLogger", "proc.poll", "shlex.split", "salt.utils", "proc.pid"]}, "slack.py": {"libraries": ["salt.utils.http", "logging", "http.client", "urllib.parse"], "function_names": ["query"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["_result.get", "logging.getLogger", "args.copy", "log.error", "log.debug", "result.get", "salt.utils", "http.client", "slack_functions.get", "urllib.parse"]}, "slack_bolt_engine.py": {"libraries": ["salt.utils.event", "itertools", "salt.loader", "time", "salt.utils.args", "salt.runner", "collections", "salt.output", "slack_bolt", "slack_bolt.adapter.socket_mode", "traceback", "salt.utils.yaml", "re", "salt.client", "salt.utils.json", "logging", "pprint", "salt.utils.slack", "salt.utils.http", "ast", "datetime", "salt.minion"], "function_names": ["run_commands_from_slack_async", "generate_triggered_messages", "check_cmd_against_group", "message_trigger", "__init__", "can_user_run", "get_slack_channels", "_groups_from_pillar", "get_target", "get_slack_users", "__virtual__", "_run_until", "message_text", "parse_args_and_kwargs", "get_config_groups", "get_jobs_from_runner", "just_data", "start", "control_message_target", "commandline_to_list", "format_return_text", "fire", "run_command_async"], "function_calls": ["len", "Exception", "next", "check_cmd_against_group", "sorted", "type", "str", "set", "SlackClient", "TypeError", "iter", "just_data", "fire_master", "all", "UserWarning", "ValueError"], "class_names": ["SlackClient"], "class_method_calls": ["all_slack_channels.get", "ret_groups.setdefault", "self.get_jobs_from_runner", "m_data.get", "use_groups.items", "self.format_return_text", "self.commandline_to_list", "self.handler", "re.compile", "cmdlist.append", "slack_bolt.App", "self._groups_from_pillar", "itertools.chain", "client.run_commands_from_slack_async", "self.app", "msg.keys", "slack_bolt.adapter", "salt.utils", "pprint.pformat", "__opts__.get", "self.get_config_groups", "log.warning", "args.append", "re.match", "mtch.group", "groups.items", "client.generate_triggered_messages", "self.control_message_target", "salt.runner", "salt.output", "self.message_trigger", "self.run_command_async", "data.get", "salt.client", "log.error", "log.exception", "outstanding.keys", "self.master_minion", "runner.cmd", "channel.send_message", "item.split", "val.get", "self._run_until", "job_result.get", "all_slack_users.clear", "use_cmdline.extend", "self.can_user_run", "all_slack_users.update", "data.items", "self.fire", "self.parse_args_and_kwargs", "traceback.format_exc", "self.get_target", "log.info", "self.bot_token", "self.get_slack_channels", "msg.get", "channel_id.startswith", "self.get_slack_users", "time.sleep", "kwargs.update", "time.time", "config.get", "group_config.get", "checked.get", "runner.asynchronous", "msg_text.startswith", "self.msg_queue", "ast.literal_eval", "bot_token.startswith", "self.app_token", "collections.deque", "log.debug", "log.trace", "item.startswith", "self.message_text", "all_slack_channels.update", "target.get", "all_slack_channels.clear", "local.cmd_async", "all_slack_users.get", "logging.getLogger", "salt.minion", "datetime.datetime"]}, "sqs_events.py": {"libraries": ["time", "salt.utils.event", "salt.utils.json", "boto.sqs", "logging"], "function_names": ["__virtual__", "_get_sqs_conn", "_process_queue", "start"], "function_calls": ["str", "_get_sqs_conn", "_process_queue", "fire_master", "isinstance"], "class_names": [], "class_method_calls": ["time.sleep", "logging.getLogger", "msg.get_body", "_profile.get", "q.set_message_class", "sqs.get_queue", "__opts__.get", "log.error", "boto.sqs", "msg.delete", "q.get_messages", "log.warning", "salt.utils", "boto.exception"]}, "stalekey.py": {"libraries": ["time", "os", "salt.utils.msgpack", "salt.config", "salt.key", "logging", "salt.utils.files", "salt.wheel", "salt.utils.minions"], "function_names": ["_read_presence", "start", "_get_keys", "_write_presence", "_delete_keys", "__virtual__"], "function_calls": ["_read_presence", "_delete_keys", "_get_keys", "_write_presence"], "class_names": [], "class_method_calls": ["time.sleep", "logging.getLogger", "time.time", "ck.connected_ids", "keys.all_keys", "wheel.cmd", "salt.key", "__opts__.get", "log.error", "os.path", "log.info", "minions.items", "salt.wheel", "salt.utils", "log.debug", "stale_keys.append"]}, "test.py": {"libraries": ["random", "salt.utils.data", "salt.exceptions.SaltInvocationError", "salt.state._gen_tag"], "function_names": ["succeed_without_changes", "nop", "configurable_test_state", "fail_without_changes", "show_notification", "fail_with_changes", "check_pillar", "mod_watch", "_if_str_then_list", "succeed_with_changes", "_check_key_type"], "function_calls": ["_gen_tag", "succeed_without_changes", "str", "_if_str_then_list", "SaltInvocationError", "_check_key_type", "isinstance"], "class_names": [], "class_method_calls": ["random.choice", "fine.items", "kwargs.get", "has_changes.append", "checks.items", "salt.utils", "failed.items"]}, "thorium.py": {"libraries": ["salt.thorium"], "function_names": ["start"], "function_calls": [], "class_names": [], "class_method_calls": ["state.start_runtime", "salt.thorium"]}, "webhook.py": {"libraries": ["salt.ext.tornado.httpserver", "salt.utils.event", "salt.ext.tornado.ioloop", "salt.ext.tornado.web"], "function_names": ["post", "start", "fire"], "function_calls": ["fire", "dict", "fire_master", "all", "isinstance"], "class_names": ["WebHook"], "class_method_calls": ["io_loop.start", "io_loop.make_current", "self.request", "__opts__.get", "http_server.listen", "salt.ext", "salt.utils"]}, "direct_call.py": {"libraries": [], "function_names": ["execute"], "function_calls": ["func"], "class_names": [], "class_method_calls": []}, "docker.py": {"libraries": [], "function_names": ["initialized", "shutdown", "init", "__virtual__", "module_executors"], "function_calls": [], "class_names": [], "class_method_calls": ["__context__.get", "__opts__.get"]}, "splay.py": {"libraries": ["logging", "time", "salt.utils.stringutils"], "function_names": ["execute", "__init__", "_calc_splay", "_get_hash"], "function_calls": ["_calc_splay", "int", "_get_hash", "float", "bytearray", "ValueError"], "class_names": [], "class_method_calls": ["time.sleep", "logging.getLogger", "data.get", "opts.get", "salt.utils", "log.debug"]}, "sudo.py": {"libraries": ["salt.syspaths", "salt.utils.path", "salt.utils.json", "shlex"], "function_names": ["__virtual__", "execute"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["data.get", "__opts__.get", "opts.get", "shlex.quote", "cmd_meta.get", "salt.utils", "cmd.append"]}, "transactional_update.py": {"libraries": ["salt.client.ssh.wrapper.state", "salt.modules.state.running", "salt.modules.state._check_queue", "salt.exceptions", "logging", "salt.modules.state._wait", "salt.utils.args", "salt.modules.state._prior_running_states", "salt.client.ssh.state"], "function_names": ["_global_params", "_pkg_params", "kdump", "pkg_remove", "sls", "run", "__virtual__", "single", "pending_transaction", "initrd", "dup", "cleanup_snapshots", "pkg_update", "rollback", "up", "pkg_install", "bootloader", "apply_", "highstate", "cleanup", "migration", "call", "cleanup_overlays", "_cmd", "grub_cfg", "reboot", "in_transaction", "transactional", "patch"], "function_calls": ["_global_params", "run", "transactional", "bool", "_check_queue", "any", "call", "_pkg_params", "str", "reboot", "pending_transaction", "sls", "in_transaction", "highstate", "_cmd", "globals", "list", "isinstance"], "class_names": [], "class_method_calls": ["command.split", "logging.getLogger", "local.get", "cmd.append", "params.append", "data.get", "params.extend", "e.message", "salt.exceptions", "cmd.extend", "snapshot.isnumeric", "safe_kwargs.items", "args.split", "snapshot.endswith", "salt.utils", "pkgs.split", "kwargs.pop"]}, "backports_abc.py": {"libraries": ["abc.ABCMeta", "inspect.isawaitable", "collections.abc", "inspect", "collections", "abc.abstractmethod"], "function_names": ["isawaitable", "__await__", "next", "send", "mk_awaitable", "close", "old_style_mro", "mk_gen", "__subclasshook__", "throw", "mk_coroutine", "get_mro", "__next__", "patch"], "function_calls": ["hasattr", "mk_awaitable", "typ", "type", "old_style_mro", "ABCMeta", "mk_gen", "iter", "RuntimeError", "mk_coroutine", "get_mro", "isinstance"], "class_names": ["Coroutine", "Generator"], "class_method_calls": ["cls.__mro__", "_collections_abc.Iterator", "inspect.isawaitable", "_collections_abc.Awaitable", "self.send", "val.with_traceback", "self.throw", "base.__dict__", "_collections_abc.Generator", "Generator.register", "B.__dict__", "_collections_abc.Coroutine", "cls.__bases__"]}, "ipaddress.py": {"libraries": ["re", "sys", "functools"], "function_names": ["__contains__", "_split_addr_prefix", "supernet", "get_mixed_type_key", "_make_netmask", "hosts", "_parse_hextet", "_compress_hextets", "__getitem__", "is_reserved", "_get_address_key", "subnet_of", "is_multicast", "_is_ascii", "__hash__", "ip", "is_private", "ipv4_mapped", "_find_address_range", "sixtofour", "__init__", "ip_address", "collapse_addresses", "_explode_shorthand_ip_string", "_is_subnet_of", "v6_int_to_packed", "packed", "_prefix_from_ip_string", "is_unspecified", "is_site_local", "__eq__", "is_loopback", "__lt__", "__sub__", "ip_interface", "v4_int_to_packed", "_ip_int_from_prefix", "summarize_address_range", "is_link_local", "max_prefixlen", "_parse_octet", "_report_invalid_netmask", "_prefix_from_ip_int", "address_exclude", "num_addresses", "_string_from_ip_int", "supernet_of", "__add__", "subnets", "broadcast_address", "is_global", "teredo", "_split_optional_netmask", "_get_networks_key", "_reverse_pointer", "prefixlen", "hostmask", "_prefix_from_prefix_string", "scope_id", "__reduce__", "_address_class", "exploded", "_collapse_addresses_internal", "overlaps", "__iter__", "with_hostmask", "_check_packed_address", "__repr__", "__str__", "version", "_check_int_address", "__int__", "_ip_int_from_string", "_split_scope_id", "reverse_pointer", "__format__", "_count_righthand_zero_bits", "ip_network", "compare_networks", "compressed", "with_prefixlen", "with_netmask"], "function_calls": ["any", "super", "sorted", "_collapse_addresses_internal", "IPv6Address", "IPv6Interface", "enumerate", "list", "IPv6Network", "IPv4Address", "frozenset", "next", "hash", "AssertionError", "int", "type", "set", "TypeError", "v6_int_to_packed", "NetmaskValueError", "IPv4Interface", "range", "str", "AddressValueError", "IndexError", "NotImplementedError", "ValueError", "isinstance", "len", "_split_optional_netmask", "hex", "_is_ascii", "getattr", "format", "_count_righthand_zero_bits", "ip", "v4_int_to_packed", "iter", "summarize_address_range", "_find_address_range", "IPv4Network", "map", "min"], "class_names": ["IPv6Interface", "NetmaskValueError", "IPv4Interface", "IPv6Network", "_BaseV4", "AddressValueError", "_IPv6Constants", "_BaseNetwork", "_BaseAddress", "_IPAddressBase", "IPv4Network", "IPv6Address", "_BaseV6", "_IPv4Constants", "IPv4Address"], "class_method_calls": ["self.netmask", "addrs.extend", "b._version", "self._is_subnet_of", "ip._ALL_ONES", "IPv6Address.__init__", "s1.subnets", "cls._parse_octet", "first._max_prefixlen", "cls._compress_hextets", "self._ALL_ONES", "last._ip", "cls._report_invalid_netmask", "other.network_address", "ip_str.split", "cls._ip", "parts.append", "re.compile", "IPv4Address._constants", "other.netmask", "self.__iter__", "self.is_private", "cls._prefix_from_ip_int", "ip.ip", "functools.total_ordering", "a._version", "to_merge.pop", "net.broadcast_address", "self._version", "self._constants", "ip_int.to_bytes", "self._split_addr_prefix", "last.broadcast_address", "IPv6Address._constants", "ip._ip", "other.__class__", "IPv6Address.__lt__", "cls._HEX_DIGITS", "self.exploded", "cls._ip_int_from_prefix", "cls._prefix_from_ip_string", "other.subnet_of", "a.broadcast_address", "IPv4Address.__eq__", "obj._get_networks_key", "IPv4Address.__lt__", "_IPAddressBase.__reduce__", "self._reverse_pointer", "obj.decode", "self._explode_shorthand_ip_string", "IPv6Address.__eq__", "self.__class__", "cls._parse_hextet", "self.network", "self._check_packed_address", "self._scope_id", "first._ip", "first.version", "net.supernet", "sys.version_info", "subnets.values", "obj.encode", "obj.isascii", "self._split_scope_id", "self.broadcast_address", "cls._netmask_cache", "nets.append", "other.prefixlen", "obj._get_address_key", "cls._ip_int_from_string", "int.from_bytes", "self._check_int_address", "IPv4Address.__init__", "other.broadcast_address", "a.network_address", "other._ip", "functools.lru_cache", "self.hosts", "ips.append", "address.to_bytes", "self._address_class", "_BaseNetwork.__init__", "ip_str.partition", "_address_fmt_re.fullmatch", "ip._max_prefixlen", "cls._HEXTET_COUNT", "ip._prefixlen", "ip._version", "cls._ALL_ONES", "self._max_prefixlen", "self.subnets", "self._string_from_ip_int", "subnets.get", "ip.network_address", "cls._max_prefixlen", "b.network_address", "other._version", "m.groups", "self.network_address", "self.prefixlen", "self._ip", "last.version", "other.network", "self._ip_int_from_string", "parts.pop", "b.broadcast_address", "prefixlen_str.isdigit", "self._make_netmask", "s2.subnets", "cls._prefix_from_prefix_string", "self.hostmask", "self._cache", "to_merge.append", "self.ip", "octet_str.isdigit", "self._prefixlen"]}, "saslprep.py": {"libraries": ["stringprep", "unicodedata"], "function_names": ["saslprep"], "function_calls": ["in_table_d1", "any", "TypeError", "in_table_c12", "in_table_b1", "in_table", "ValueError", "isinstance"], "class_names": [], "class_method_calls": ["stringprep.in_table_c12", "stringprep.in_table_d2", "stringprep.in_table_c4", "stringprep.in_table_c7", "stringprep.in_table_b1", "stringprep.in_table_a1", "unicodedata.ucd_3_2_0", "stringprep.in_table_d1", "stringprep.in_table_c5", "stringprep.in_table_c6", "stringprep.in_table_c8", "stringprep.in_table_c21_c22", "stringprep.in_table_c9", "stringprep.in_table_c3"]}, "ssl_match_hostname.py": {"libraries": ["re"], "function_names": ["_dnsname_match", "match_hostname"], "function_calls": ["len", "CertificateError", "_dnsname_match", "repr", "map", "ValueError"], "class_names": ["CertificateError"], "class_method_calls": ["re.escape", "leftmost.count", "pat.match", "pats.append", "re.IGNORECASE", "dn.lower", "dnsnames.append", "hostname.lower", "dn.split", "cert.get", "re.compile", "hostname.startswith", "leftmost.startswith"]}, "_locale_data.py": {"libraries": ["__future__.absolute_import", "__future__.division", "__future__.print_function"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "auth.py": {"libraries": ["salt.auth", "os", "salt.netapi", "salt.exceptions"], "function_names": ["del_token", "mk_token"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.auth", "salt.netapi", "salt.exceptions", "os.path", "auth.mk_token", "os.remove", "netapi._is_master_running"]}, "autoreload.py": {"libraries": ["traceback", "os", "functools", "salt.ext.tornado.log.gen_log", "weakref", "salt.ext.tornado.process", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.ioloop", "signal", "logging", "sys", "runpy", "subprocess", "types", "salt.ext.tornado.util.exec_in", "pkgutil"], "function_names": ["start", "add_reload_hook", "_reload", "_reload_on_update", "main", "watch", "wait", "_check_file"], "function_calls": ["len", "hasattr", "start", "getattr", "_check_file", "_reload", "exec_in", "set", "watch", "open", "fn", "wait", "print", "main", "globals", "list", "isinstance"], "class_names": [], "class_method_calls": ["io_loop.start", "os.P_NOWAIT", "sys.argv", "runpy.run_module", "ioloop.PeriodicCallback", "sys.executable", "sys.stderr", "subprocess.Popen", "traceback.extract_tb", "sys.exc_info", "weakref.WeakKeyDictionary", "scheduler.start", "e.code", "sys.modules", "path.endswith", "os.spawnv", "logging.basicConfig", "os._exit", "os.environ", "sys.exit", "os.pathsep", "sys.path", "sys.platform", "signal.ITIMER_REAL", "pkgutil.get_loader", "os.stat", "_reload_hooks.append", "types.ModuleType", "gen_log.info", "ioloop.IOLoop", "process.task_id", "gen_log.warning", "signal.setitimer", "f.read", "os.execv", "loader.get_filename", "os.path", "_watched_files.add", "e.filename", "functools.partial"]}, "concurrent.py": {"libraries": ["traceback", "salt.ext.tornado.stack_context.wrap", "typing", "salt.ext.tornado.util.raise_exc_info", "functools", "salt.ext.tornado.util.is_finalizing", "__future__.absolute_import", "__future__.division", "__future__.print_function", "textwrap", "salt.ext.tornado.util.ArgReplacer", "sys", "salt.ext.tornado.stack_context.ExceptionStackContext", "concurrent.futures", "platform", "salt.ext.tornado.log.app_log"], "function_names": ["running", "add_done_callback", "shutdown", "cancelled", "__init__", "cancel", "set_result", "result", "wrapper", "chain_future", "set_exception", "exception", "set_exc_info", "done", "clear", "run_on_executor_decorator", "__await__", "handle_error", "_clear_tb_log", "activate", "return_future", "submit", "exc_info", "run_callback", "copy", "_check_done", "__del__", "is_future", "run_on_executor", "_set_done"], "function_calls": ["Exception", "is_finalizing", "exec", "fn", "ArgReplacer", "raise_exc_info", "ExceptionStackContext", "wrap", "TracebackFuture", "run_on_executor_decorator", "StopIteration", "cb", "callback", "f", "ValueError", "isinstance", "len", "_TracebackLogger", "getattr", "ReturnValueIgnoredError", "DummyExecutor", "object"], "class_names": ["_TracebackLogger", "ReturnValueIgnoredError", "Future", "DummyExecutor"], "class_method_calls": ["exception.__class__", "self._clear_tb_log", "b.done", "future.add_done_callback", "self._check_done", "self._done", "sys.exc_info", "kwargs.pop", "platform.python_implementation", "self._tb_logger", "self.exc_info", "b.set_exc_info", "b.set_exception", "self._result", "a.exception", "self._callbacks", "b.set_result", "self.set_exc_info", "app_log.error", "a.add_done_callback", "replacer.replace", "kwargs.get", "traceback.format_exception", "future.set_result", "future.set_exc_info", "self._exc_info", "functools.wraps", "a.result", "self._log_traceback", "a.exc_info", "futures.Future", "sys.version_info", "future.result", "app_log.exception", "self.formatted_tb", "textwrap.dedent", "e.args", "self._set_done"]}, "curl_httpclient.py": {"libraries": ["functools", "salt.ext.tornado.httpclient.main", "pycurl", "io.BytesIO", "time", "__future__.absolute_import", "salt.ext.tornado.ioloop", "salt.ext.tornado.stack_context", "salt.ext.tornado.escape.native_str", "collections", "salt.ext.tornado.httpclient.AsyncHTTPClient", "__future__.division", "logging", "salt.ext.tornado.httpclient.HTTPResponse", "salt.ext.tornado.httputil", "threading", "salt.ext.tornado.httpclient.HTTPError", "salt.ext.tornado.escape.utf8", "__future__.print_function"], "function_names": ["_curl_setup_request", "_curl_debug", "_handle_timeout", "_handle_socket", "__init__", "fetch_impl", "write_function", "_handle_force_timeout", "_curl_create", "close", "_set_timeout", "_curl_header_callback", "_finish", "_process_queue", "handle_callback_exception", "_finish_pending_requests", "_handle_events", "initialize", "ioctl"], "function_calls": ["len", "hasattr", "range", "int", "super", "set", "callback", "KeyError", "HTTPResponse", "BytesIO", "CurlError", "dict", "utf8", "write_function", "main", "ValueError", "native_str"], "class_names": ["CurlError", "CurlAsyncHTTPClient"], "class_method_calls": ["pycurl.TOTAL_TIME", "pycurl.HEADERFUNCTION", "request.allow_nonstandard_methods", "request.client_cert", "threading.activeCount", "pycurl.SSL_VERIFYHOST", "ioloop.PeriodicCallback", "self._multi", "self._free_list", "pycurl.HTTPAUTH", "request.proxy_auth_mode", "request_buffer.read", "request.proxy_username", "self._force_timeout_callback", "pycurl.PROXY", "pycurl.PROTO_HTTPS", "pycurl.CAINFO", "buffer.seek", "pycurl.PROTOCOLS", "request.proxy_host", "pycurl.POLL_OUT", "curl.close", "pycurl.POST", "curl.info", "pycurl.POLL_IN", "logging.DEBUG", "request.ssl_options", "pycurl.HTTPGET", "pycurl.CUSTOMREQUEST", "self._curls", "pycurl.HTTP_CODE", "request.ca_certs", "pycurl.STARTTRANSFER_TIME", "curl.unsetopt", "pycurl.FOLLOWLOCATION", "pycurl.HTTPHEADER", "pycurl.NAMELOOKUP_TIME", "httputil.parse_response_start_line", "request.method", "pycurl.VERBOSE", "curl_log.isEnabledFor", "pycurl.UPLOAD", "HTTPError.__init__", "self._curl_create", "request.header_callback", "pycurl.CONNECT_TIME", "pycurl.WRITEFUNCTION", "self.errno", "stack_context.NullContext", "self._finish", "pycurl.IPRESOLVE_WHATEVER", "pycurl.SOCKET_TIMEOUT", "request.max_redirects", "self.io_loop", "pycurl.HTTPAUTH_DIGEST", "pycurl.POLL_INOUT", "pycurl.POSTFIELDSIZE", "request.connect_timeout", "pycurl.error", "pycurl.CurlMulti", "self.handle_callback_exception", "ioloop.IOLoop", "pycurl.PROXYUSERPWD", "pycurl.PROTO_HTTP", "request_buffer.seek", "pycurl.E_CALL_MULTI_PERFORM", "pycurl.REDIRECT_TIME", "pycurl.DEBUGFUNCTION", "httputil.HTTPHeaders", "pycurl.CSELECT_IN", "pycurl.IPRESOLVE_V4", "pycurl.READFUNCTION", "pycurl.TIMEOUT_MS", "pycurl.USERAGENT", "pycurl.USERPWD", "e.args", "pycurl.POLL_NONE", "self._handle_socket", "curl.setopt", "self._process_queue", "pycurl.NOSIGNAL", "request.url", "curl.getinfo", "header_line.rstrip", "pycurl.INFILESIZE", "request.client_key", "pycurl.IPRESOLVE", "header_line.decode", "request.allow_ipv6", "self._curl_debug", "error.code", "request.auth_mode", "pycurl.SSL_VERIFYPEER", "request.validate_cert", "self._curl_setup_request", "self._set_timeout", "pycurl.CSELECT_OUT", "request.network_interface", "pycurl.PROXYAUTH", "pycurl.SSLKEY", "request.headers", "self._finish_pending_requests", "pycurl.CONNECTTIMEOUT_MS", "request.decompress_response", "curl.IOCMD_RESTARTREAD", "pycurl.M_TIMERFUNCTION", "curl_options.values", "request.proxy_port", "pycurl.M_SOCKETFUNCTION", "httputil.HTTPInputError", "pycurl.NOBODY", "headers.parse_line", "debug_msg.splitlines", "self._handle_timeout", "pycurl.ENCODING", "request.request_timeout", "functools.partial", "request.streaming_callback", "time.time", "curl_log.debug", "self._curl_header_callback", "pycurl.Curl", "self._requests", "request.proxy_password", "request.body", "request.prepare_curl_callback", "buffer.write", "pycurl.IOCTLFUNCTION", "pycurl.INTERFACE", "self._handle_events", "pycurl.PRETRANSFER_TIME", "request.auth_username", "pycurl.REDIR_PROTOCOLS", "self._fds", "headers.clear", "header_line.startswith", "collections.deque", "pycurl.MAXREDIRS", "request.user_agent", "AsyncHTTPClient.configure", "request.follow_redirects", "pycurl.SSLCERT", "self._timeout", "pycurl.URL", "pycurl.PROXYPORT", "pycurl.EFFECTIVE_URL", "logging.getLogger", "pycurl.HTTPAUTH_BASIC", "self._handle_force_timeout", "debug_msg.strip", "pycurl.POLL_REMOVE", "request.auth_password", "buffer.close"]}, "escape.py": {"libraries": ["salt.ext.tornado.util.unicode_type", "salt.ext.tornado.util.PY3", "typing", "urllib.parse.parse_qs", "salt.ext.tornado.util.basestring_type", "urllib", "re", "__future__.absolute_import", "__future__.division", "__future__.print_function", "htmlentitydefs", "html.entities", "urlparse.parse_qs", "json", "urllib.parse"], "function_names": ["to_unicode", "make_link", "xhtml_escape", "url_escape", "to_basestring", "recursive_unicode", "url_unescape", "_convert_entity", "squeeze", "json_encode", "json_decode", "xhtml_unescape", "parse_qs_bytes", "utf8", "_build_unicode_map", "linkify"], "function_calls": ["_parse_qs", "_build_unicode_map", "dict", "extra_params", "list", "unquote", "int", "type", "TypeError", "utf8", "recursive_unicode", "unichr", "callable", "quote", "tuple", "isinstance", "to_unicode", "len", "xhtml_escape", "to_basestring", "unicode_type", "_unicode"], "class_names": [], "class_method_calls": ["obj.items", "m.group", "i.encode", "urllib_parse.quote_plus", "value.decode", "urllib_parse.quote", "value.encode", "match.group", "json.loads", "_XHTML_ESCAPE_RE.sub", "json.dumps", "urllib_parse.unquote", "re.compile", "re.sub", "_URL_RE.sub", "extra_params.strip", "htmlentitydefs.name2codepoint", "url.rfind", "urllib_parse.unquote_to_bytes", "urllib_parse.unquote_plus", "result.items"]}, "gen.py": {"libraries": ["itertools", "os", "salt.ext.tornado.concurrent.Future", "functools", "types.GeneratorType", "salt.ext.tornado.concurrent.is_future", "salt.ext.tornado.ioloop.IOLoop", "inspect.isawaitable", "salt.ext.tornado", "__builtin__", "__future__.absolute_import", "salt.ext.tornado.stack_context", "functools.singledispatch", "salt.ext.tornado.platform.asyncio", "types", "weakref", "collections", "salt.ext.tornado.log.app_log", "salt.ext.tornado.util.PY3", "salt.ext.tornado.util.raise_exc_info", "__future__.division", "textwrap", "singledispatch.singledispatch", "salt.ext.backports_abc.isawaitable", "salt.ext.tornado.concurrent.chain_future", "collections.abc.Generator", "__future__.print_function", "sys", "salt.ext.tornado.concurrent.TracebackFuture", "salt.ext.backports_abc.Generator", "builtins"], "function_names": ["_contains_yieldpoint", "__init__", "is_ready", "maybe_future", "_wrap_awaitable", "start_yield_point", "set_result", "_return_result", "_argument_adapter", "wrapper", "coroutine", "with_timeout", "__anext__", "run", "convert_yielded", "timeout_callback", "next", "is_coroutine_function", "handle_exception", "get_result", "inner", "multi_future", "_value_from_stopiteration", "done", "_make_coroutine_wrapper", "isawaitable", "multi", "callback", "engine", "cb", "_done_callback", "result_callback", "_deactivate_stack_context", "start", "error_callback", "register_callback", "final_callback", "Task", "sleep", "handle_yield", "__aiter__", "pop_result"], "function_calls": ["_contains_yieldpoint", "TimeoutError", "any", "super", "_wrap_awaitable", "exec", "start_yield_point", "dict", "KeyReuseError", "_argument_adapter", "UnknownKeyError", "chain_future", "convert_yielded", "list", "enumerate", "raise_exc_info", "next", "func", "set", "multi_future", "_value_from_stopiteration", "TracebackFuture", "zip", "all", "_make_coroutine_wrapper", "Future", "singledispatch", "isawaitable", "Return", "multi", "YieldFuture", "callback", "Arguments", "Runner", "MultiYieldPoint", "NotImplementedError", "ValueError", "isinstance", "len", "hasattr", "getattr", "ReturnValueIgnoredError", "BadYieldError", "iter", "LeakedCallbackError", "object", "is_future", "map", "_m"], "class_names": ["WaitIterator", "TimeoutError", "Return", "Callback", "YieldFuture", "BadYieldError", "ReturnValueIgnoredError", "WaitAll", "Wait", "Runner", "YieldPoint", "KeyReuseError", "LeakedCallbackError", "MultiYieldPoint", "UnknownKeyError"], "class_method_calls": ["types.coroutine", "_null_future.set_result", "x.__await__", "f.result", "self.key", "weakref.WeakKeyDictionary", "wrapper.__wrapped__", "yielded.set_exception", "f.set_result", "children.values", "self.pending_callbacks", "self.current_index", "self.unfinished_children", "os.environ", "_i.throw", "runner.result_callback", "self.args", "self.quiet_exceptions", "self.running", "self.value", "itertools.takewhile", "result.set_exception", "self._done_callback", "future.add_done_callback", "children.keys", "runner.register_callback", "self._finished", "self.result_fn", "_i.send", "app_log.error", "self.io_loop", "e.value", "future.set_result", "self.handle_yield", "yielded.is_ready", "self.handle_exception", "self.stack_context_deactivate", "IOLoop.current", "wrapper.__tornado_coroutine__", "sys.version_info", "self._return_result", "moment.set_result", "e.args", "self.set_result", "self._unfinished", "stack_context.ExceptionStackContext", "i.start", "self.done", "sys.exc_info", "kwargs.pop", "self.future", "self.children", "self.finished", "self._running_future", "io_loop.remove_timeout", "future.set_exc_info", "functools.wraps", "collections.namedtuple", "f.add_done_callback", "self.had_exception", "self._deactivate_stack_context", "listening.add", "stack_context.wrap", "textwrap.dedent", "self.run", "stack_context.StackContextInconsistentError", "functools.partial", "kwargs.values", "self.current_future", "kwargs.items", "self.gen", "result_list.append", "stack_context._state", "fut.set_result", "self.yield_point", "io_loop.add_timeout", "yielded.get_result", "future.done", "i.is_ready", "f.get_result", "collections.deque", "yielded.start", "unfinished_children.remove", "io_loop.add_future", "_i.close", "self.results", "self.next", "self.runner", "future.result", "self.result_future", "self.keys", "moment.__doc__"]}, "http1connection.py": {"libraries": ["salt.ext.tornado.util.PY3", "salt.ext.tornado.concurrent.Future", "salt.ext.tornado.iostream", "salt.ext.tornado.log.gen_log", "re", "salt.ext.tornado.util.GzipDecompressor", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.stack_context", "salt.ext.tornado.escape.native_str", "salt.ext.tornado.httputil", "salt.ext.tornado.gen", "salt.ext.tornado.escape.utf8", "salt.ext.tornado.log.app_log"], "function_names": ["write", "_read_body_until_close", "__init__", "detach", "_server_request_loop", "_read_fixed_body", "read_response", "_read_chunked_body", "close", "_on_write_complete", "on_connection_close", "_read_message", "_parse_headers", "set_close_callback", "_read_body", "set_body_timeout", "_can_keep_alive", "_clear_callbacks", "write_headers", "__exit__", "_on_connection_close", "data_received", "set_max_body_size", "headers_received", "finish", "__enter__", "_format_chunk", "_finish_request", "start_serving"], "function_calls": ["len", "_ExceptionLoggingContext", "native_str", "getattr", "HTTP1Connection", "any", "int", "ValueError", "callback", "HTTP1ConnectionParameters", "_GzipMessageDelegate", "utf8", "repr", "min", "Future", "GzipDecompressor", "isinstance"], "class_names": ["_ExceptionLoggingContext", "HTTP1Connection", "HTTP1ConnectionParameters", "_GzipMessageDelegate", "_QuietException", "HTTP1ServerConnection"], "class_method_calls": ["httputil.HTTPOutputError", "f.result", "self._read_fixed_body", "self.no_keep_alive", "lines.append", "self._delegate", "conn.close", "self._write_callback", "future.exception", "self._pending_write", "start_line.code", "self._response_start_line", "data.find", "gen.with_timeout", "data.decode", "headers.add", "l.encode", "self._clear_callbacks", "gen.Return", "gen.coroutine", "httputil.HTTPConnection", "connection_header.lower", "httputil.parse_response_start_line", "self._on_connection_close", "self._read_body_until_close", "httputil.parse_request_start_line", "self._can_keep_alive", "self._read_body", "self.context", "gen.TimeoutError", "delegate.on_connection_close", "self._write_finished", "start_line.version", "self._server_request_loop", "future.set_result", "self._serving_future", "gen.moment", "self._on_write_complete", "delegate.on_close", "self._finish_future", "self._chunking_output", "httputil.HTTPHeaders", "self._body_timeout", "delegate.start_request", "self._request_headers", "future.set_exception", "httputil.HTTPMessageDelegate", "delegate.data_received", "delegate.headers_received", "self._decompressor", "self._read_message", "self._finish_request", "self.max_header_size", "self._read_chunked_body", "self.params", "gen_log.info", "self._disconnect_on_finish", "self._expected_content_remaining", "self._write_future", "re.split", "conn.read_response", "start_line.method", "lines.extend", "self._request_start_line", "self.body_timeout", "self.stream", "self.decompress", "httputil.HTTPInputError", "stack_context.wrap", "self._parse_headers", "delegate.finish", "self._chunk_size", "self.chunk_size", "self.header_timeout", "self.close", "headers.get", "self.max_body_size", "self._format_chunk", "iostream.StreamClosedError", "headers.get_all", "self._read_finished", "self._max_body_size", "future.result", "self.is_client", "self._close_callback", "chunk_len.strip", "gen_log.error", "self.logger", "params.no_keep_alive", "httputil.HTTPServerConnectionDelegate", "iostream.UnsatisfiableReadError"]}, "httpclient.py": {"libraries": ["salt.ext.tornado.options.options", "time", "salt.ext.tornado.ioloop.IOLoop", "salt.ext.tornado.util.Configurable", "functools", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.options.parse_command_line", "salt.ext.tornado.simple_httpclient.SimpleAsyncHTTPClient", "salt.ext.tornado.stack_context", "salt.ext.tornado.escape.native_str", "salt.ext.tornado.concurrent.TracebackFuture", "salt.ext.tornado.httputil", "weakref", "salt.ext.tornado.escape.utf8", "salt.ext.tornado.options.define"], "function_names": ["__init__", "body_producer", "_async_clients", "fetch_impl", "prepare_curl_callback", "configure", "streaming_callback", "fetch", "close", "__getattr__", "handle_response", "__new__", "configurable_base", "headers", "__str__", "body", "main", "configurable_default", "header_callback", "rethrow", "handle_future", "initialize", "__del__", "__repr__"], "function_calls": ["HTTPError", "super", "sorted", "RuntimeError", "dict", "async_client_class", "HTTPClient", "IOLoop", "parse_command_line", "define", "utf8", "TracebackFuture", "setattr", "_RequestProxy", "NotImplementedError", "main", "ValueError", "isinstance", "getattr", "hasattr", "HTTPResponse", "HTTPRequest", "print", "native_str"], "class_names": ["HTTPError", "HTTPClient", "HTTPResponse", "HTTPRequest", "_RequestProxy", "AsyncHTTPClient"], "class_method_calls": ["self.proxy_auth_mode", "client.close", "response.body", "weakref.WeakKeyDictionary", "self.method", "future.exception", "self._body", "self.client_key", "cls.__name__", "self.effective_url", "self.body", "self.expect_100_continue", "self.proxy_password", "self._streaming_callback", "self.request", "self.ssl_options", "instance._instance_cache", "body.setter", "self.body_producer", "future.add_done_callback", "streaming_callback.setter", "exc.response", "self._body_producer", "self._header_callback", "self.auth_password", "self.headers", "client.fetch", "self.validate_cert", "self.io_loop", "request.request", "self._prepare_curl_callback", "httputil.format_timestamp", "future.set_result", "self.__class__", "prepare_curl_callback.setter", "cls._async_clients", "self.error", "self.fetch_impl", "self.url", "self.buffer", "IOLoop.current", "instance.io_loop", "httputil.responses", "self.network_interface", "httputil.HTTPHeaders", "self.proxy_host", "self.request_time", "options.print_body", "self._headers", "request.start_time", "request.url", "self._io_loop", "self.defaults", "self.ca_certs", "future.set_exception", "self.message", "self.code", "self.prepare_curl_callback", "self.allow_nonstandard_methods", "self.request_timeout", "self.auth_username", "self.header_callback", "self.decompress_response", "request.headers", "self._async_client", "self.proxy_username", "self._instance_cache", "body_producer.setter", "header_callback.setter", "stack_context.wrap", "self.streaming_callback", "self.__dict__", "self.user_agent", "functools.partial", "response.headers", "time.time", "self.follow_redirects", "self.proxy_port", "self.close", "self._closed", "HTTPRequest._DEFAULTS", "self.auth_mode", "options.validate_cert", "self.reason", "self.client_cert", "response.error", "options.follow_redirects", "self.connect_timeout", "self.max_redirects", "options.print_headers", "self.time_info", "future.result", "self.allow_ipv6", "self.start_time", "self.response", "headers.setter", "e.response"]}, "httpserver.py": {"libraries": ["salt.ext.tornado.util.Configurable", "socket", "salt.ext.tornado.http1connection.HTTP1ConnectionParameters", "salt.ext.tornado.iostream", "salt.ext.tornado.tcpserver.TCPServer", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.http1connection.HTTP1ServerConnection", "salt.ext.tornado.escape.native_str", "salt.ext.tornado.httputil", "salt.ext.tornado.gen", "salt.ext.tornado.netutil"], "function_names": ["configurable_default", "__str__", "close_all_connections", "__init__", "_unapply_xheaders", "on_connection_close", "on_close", "_cleanup", "start_request", "data_received", "initialize", "_apply_xheaders", "configurable_base", "headers_received", "finish", "handle_stream"], "function_calls": ["next", "_HTTPRequestContext", "_ProxyAdapter", "str", "set", "_CallableAdapter", "reversed", "HTTP1ConnectionParameters", "iter", "HTTP1ServerConnection", "native_str", "isinstance"], "class_names": ["HTTPServer", "_HTTPRequestContext", "_CallableAdapter", "_ProxyAdapter"], "class_method_calls": ["self._connections", "gen.coroutine", "self._chunks", "self.no_keep_alive", "self.connection", "conn.close", "headers.get", "httputil.HTTPMessageDelegate", "self.request_callback", "cand.strip", "self._orig_protocol", "ip.split", "self.address_family", "socket.AF_INET", "conn.start_serving", "self._cleanup", "stream.socket", "httputil.HTTPServerRequest", "self.trusted_downstream", "netutil.is_valid_ip", "iostream.SSLIOStream", "self.request", "self.address", "self.conn_params", "self.xheaders", "self.remote_ip", "TCPServer.__init__", "socket.AF_INET6", "self.delegate", "self._orig_remote_ip", "httputil.HTTPServerConnectionDelegate", "self.protocol"]}, "httputil.py": {"libraries": ["collections.abc.MutableMapping", "salt.ext.tornado.escape.parse_qs_bytes", "urllib.parse.parse_qsl", "urllib.parse.urlunparse", "calendar", "urlparse.urlparse", "urlparse.parse_qsl", "time", "typing", "doctest", "__future__.absolute_import", "urllib.urlencode", "salt.ext.tornado.escape.native_str", "collections", "email.utils", "urlparse.urlunparse", "salt.ext.tornado.util.PY3", "salt.ext.tornado.log.gen_log", "re", "__future__.division", "http.client.responses", "salt.ext.tornado.escape.utf8", "urllib.parse.urlencode", "Cookie", "http.cookies", "httplib.responses", "__future__.print_function", "numbers", "copy", "urllib.parse.urlparse", "datetime", "ssl.SSLError", "salt.ext.tornado.util.ObjectDict"], "function_names": ["supports_http_1_1", "write", "__len__", "parse_response_start_line", "__init__", "_int_or_none", "get_ssl_certificate", "parse_body_arguments", "parse_request_start_line", "_parseparam", "doctests", "parse_multipart_form_data", "add", "get_all", "__delitem__", "cookies", "parse", "_get_content_range", "__iter__", "parse_cookie", "on_connection_close", "__getitem__", "_unquote_cookie", "parse_line", "__str__", "_encode_header", "on_close", "write_headers", "url_concat", "data_received", "format_timestamp", "headers_received", "split_host_and_port", "get_list", "finish", "_parse_header", "full_url", "_parse_request_range", "start_request", "__setitem__", "_parse_body", "__repr__", "request_time", "copy", "__missing__"], "function_calls": ["super", "sorted", "_int_or_none", "parse_body_arguments", "_parseparam", "_NormalizedHeaderCache", "dict", "parse_multipart_form_data", "_nulljoin", "next", "int", "type", "urlparse", "parse_cookie", "TypeError", "_unquote_cookie", "utf8", "HTTPHeaders", "HTTPFile", "ResponseStartLine", "urlencode", "str", "HTTPInputError", "NotImplementedError", "cls", "split_host_and_port", "chr", "isinstance", "len", "RequestStartLine", "urlunparse", "_parse_header", "getattr", "hasattr", "ValueError", "parse_qs_bytes", "iter", "parse_qsl", "native_str"], "class_names": ["HTTPServerConnectionDelegate", "HTTPInputError", "_NormalizedHeaderCache", "HTTPMessageDelegate", "_SSLError", "HTTPServerRequest", "HTTPHeaders", "HTTPOutputError", "HTTPConnection", "HTTPFile"], "class_method_calls": ["self.uri", "data.rfind", "doctest.DocTestSuite", "lines.append", "self.size", "self.method", "self.arguments", "line.lstrip", "h.parse_line", "re.compile", "self.queue", "res.append", "disp_params.get", "self.body", "o_match.start", "Cookie.SimpleCookie", "ts.utctimetuple", "self._start_time", "self.add", "boundary.endswith", "self.host_name", "line.split", "_QuotePatt.search", "self.connection", "pdict.items", "value.partition", "re.match", "self._as_list", "match.group", "self.headers", "q_match.start", "parsed_query.extend", "uri_arguments.items", "self._finish_time", "arguments.setdefault", "_CRLF_RE.split", "self.__class__", "self.update", "p.find", "self.get_all", "key.split", "self.protocol", "HTTPHeaders.parse", "self.query_arguments", "self.host", "s.count", "self.files", "self.server_connection", "parsed_url.query", "time.struct_time", "s.find", "self._last_key", "self._dict", "range_header.partition", "content_type.startswith", "copy.deepcopy", "self._cookies", "self.version", "val.strip", "content_type.split", "w.capitalize", "collections.namedtuple", "gen_log.warning", "key.strip", "chunk.split", "self.query", "args.items", "uri.partition", "calendar.timegm", "self.body_arguments", "time.time", "part.endswith", "headers.get", "out.append", "field.strip", "boundary.startswith", "collections.deque", "f.strip", "email.utils", "value.strip", "cookie.split", "numbers.Real", "value.replace", "unit.strip", "self.path", "part.find", "self.remote_ip", "_OctalPatt.search", "parsed.items", "files.setdefault", "datetime.datetime"]}, "ioloop.py": {"libraries": ["salt.ext.tornado.platform.select.SelectIOLoop", "itertools", "os", "functools", "thread", "salt.ext.tornado.concurrent.is_future", "signal", "math", "errno", "time", "salt.ext.tornado.util.Configurable", "select", "__future__.absolute_import", "salt.ext.tornado.stack_context", "collections", "salt.ext.tornado.platform.kqueue.KQueueIOLoop", "salt.ext.tornado.log.app_log", "traceback", "salt.ext.tornado.util.PY3", "salt.ext.tornado.log.gen_log", "salt.ext.tornado.util.errno_from_exception", "__future__.division", "_thread", "heapq", "logging", "salt.ext.tornado.platform.epoll.EPollIOLoop", "threading", "salt.ext.tornado.util.timedelta_to_seconds", "salt.ext.tornado.gen", "salt.ext.tornado.gen.convert_yielded", "__future__.print_function", "numbers", "sys", "salt.ext.tornado.concurrent.TracebackFuture", "datetime", "salt.ext.tornado.platform.auto.set_close_exec", "salt.ext.tornado.platform.auto.Waker"], "function_names": ["close_fd", "initialized", "remove_timeout", "add_callback_from_signal", "spawn_callback", "__init__", "add_handler", "call_later", "_run_callback", "run", "call_at", "_setup_logging", "time", "make_current", "close", "set_blocking_log_threshold", "add_timeout", "run_sync", "current", "clear_instance", "update_handler", "log_stack", "configurable_base", "stop", "set_blocking_signal_threshold", "is_running", "_schedule_next", "_discard_future_result", "instance", "handle_callback_exception", "remove_handler", "__lt__", "configurable_default", "start", "__le__", "split_fd", "install", "add_future", "clear_current", "initialize", "add_callback", "_run"], "function_calls": ["TimeoutError", "any", "super", "RuntimeError", "set_close_exec", "max", "convert_yielded", "list", "next", "func", "_Timeout", "IOLoop", "TypeError", "errno_from_exception", "TracebackFuture", "range", "callback", "Waker", "NotImplementedError", "timedelta_to_seconds", "ValueError", "isinstance", "len", "hasattr", "getattr", "is_future", "handler_func", "min"], "class_names": ["TimeoutError", "_Timeout", "PollIOLoop", "IOLoop", "PeriodicCallback"], "class_method_calls": ["self._running", "self._timeout_counter", "self.make_current", "signal.SIG_DFL", "self._run", "self.READ", "self.callback_time", "self._events", "self._setup_logging", "IOLoop._instance_lock", "errno.EPIPE", "signal.ITIMER_REAL", "self.close_fd", "IOLoop.initialized", "self._stopped", "self._waker", "self.split_fd", "self.remove_handler", "signal.signal", "heapq.heappush", "future.add_done_callback", "IOLoop.instance", "os.close", "self._closing", "self.ERROR", "self.deadline", "datetime.timedelta", "stack_context.NullContext", "self.add_timeout", "self.set_blocking_signal_threshold", "os.name", "app_log.error", "self.io_loop", "self.add_future", "self._discard_future_result", "timeout.callback", "self._next_timeout", "salt.ext", "self.add_handler", "self.handle_callback_exception", "IOLoop.current", "self.call_at", "self.add_callback", "heapq.heapify", "IOLoop._instance", "itertools.count", "traceback.format_stack", "self._handlers", "heapq.heappop", "self._timeouts", "gen_log.debug", "self.remove_timeout", "due_timeouts.append", "self.tdeadline", "sys.exc_info", "self._impl", "signal.set_wakeup_fd", "self._callbacks", "self.log_stack", "logging.basicConfig", "fd.close", "x.callback", "self._schedule_next", "gen_log.warning", "self.start", "signal.setitimer", "threading.Lock", "stack_context.wrap", "functools.partial", "time.time", "io_loop._timeout_counter", "self.callback", "threading.local", "self._run_callback", "errno.EINTR", "math.floor", "self.time", "self.time_func", "collections.deque", "other.tdeadline", "self._thread_ident", "self.stop", "numbers.Real", "self._timeout", "thread.get_ident", "self._cancellations", "logging.getLogger", "future.result", "fd.fileno", "gen_log.error", "self._blocking_signal_threshold", "IOLoop._current", "signal.SIGALRM"]}, "iostream.py": {"libraries": ["salt.ext.tornado.platform.posix._set_nonblocking", "os", "salt.ext.tornado.netutil._server_ssl_defaults", "salt.ext.tornado.netutil.ssl_wrap_socket", "salt.ext.tornado.netutil.ssl_match_hostname", "ssl", "errno", "doctest", "__future__.absolute_import", "salt.ext.tornado.ioloop", "salt.ext.tornado.stack_context", "collections", "salt.ext.tornado.log.app_log", "socket", "salt.ext.tornado.log.gen_log", "re", "salt.ext.tornado.util.errno_from_exception", "__future__.division", "salt.ext.tornado.netutil.SSLCertificateError", "__future__.print_function", "numbers", "sys", "salt.ext.tornado.concurrent.TracebackFuture", "salt.ext.tornado.netutil._client_ssl_defaults"], "function_names": ["write", "close_fd", "_maybe_run_close_callback", "writing", "_read_to_buffer_loop", "_run_streaming_callback", "__init__", "get_fd_error", "_verify_cert", "doctests", "read_until_regex", "set_nodelay", "_run_callback", "wrapper", "_run_ssl_connect_callback", "_maybe_add_error_listener", "_is_connreset", "_handle_read", "close", "_consume", "connect", "_check_max_bytes", "set_close_callback", "_run_read_callback", "close_callback", "fileno", "_find_read_pos", "start_tls", "read_until", "_check_closed", "closed", "read_bytes", "read_until_close", "_do_ssl_handshake", "_got_empty_write", "write_to_fd", "reading", "_add_io_state", "_read_from_buffer", "wait_for_handshake", "_set_read_callback", "_handle_write", "_try_inline_read", "read_from_fd", "_handle_events", "_unfreeze_write_buffer", "_handle_connect", "_freeze_write_buffer", "_read_to_buffer"], "function_calls": ["UnsatisfiableReadError", "any", "super", "StreamBufferFullError", "bytearray", "RuntimeError", "_set_nonblocking", "StreamClosedError", "memoryview", "sum", "errno_from_exception", "TracebackFuture", "callback", "ssl_wrap_socket", "orig_close_callback", "NotImplementedError", "ValueError", "isinstance", "len", "hasattr", "ssl_match_hostname", "map", "min", "SSLIOStream"], "class_names": ["BaseIOStream", "UnsatisfiableReadError", "PipeIOStream", "StreamBufferFullError", "IOStream", "SSLIOStream", "StreamClosedError"], "class_method_calls": ["self._handshake_writing", "self._freeze_write_buffer", "self.reading", "os.read", "doctest.DocTestSuite", "self._write_callback", "self.get_fd_error", "self._connect_callback", "self._write_buffer_size", "self.read_from_fd", "self._total_write_done_index", "re.compile", "errno.EPIPE", "self._read_max_bytes", "self._write_futures", "errno.EINVAL", "self._read_partial", "errno.WSAECONNRESET", "self.close_fd", "socket.AF_INET", "self._read_buffer", "errno.WSAEWOULDBLOCK", "f.exception", "ssl_stream._ssl_connect_callback", "self._read_callback", "self._streaming_callback", "self.real_error", "e.errno", "errno.ECONNABORTED", "socket.AF_INET6", "self._read_bytes", "ssl.SSLError", "self._do_ssl_handshake", "future.add_done_callback", "os.write", "ssl_stream.set_close_callback", "os.close", "self.write_to_fd", "self._handle_read", "self.wait_for_handshake", "errno.ECONNRESET", "os.strerror", "stack_context.NullContext", "self.fd", "errno.EPROTOTYPE", "numbers.Integral", "self._run_streaming_callback", "self._is_connreset", "ssl_stream.error", "app_log.error", "self.io_loop", "ssl.SSL_ERROR_WANT_WRITE", "self._connect_future", "future.set_result", "ssl.SSL_ERROR_ZERO_RETURN", "self._try_inline_read", "self._pending_writes_while_frozen", "self.error", "self.socket", "ioloop.IOLoop", "self._write_buffer_pos", "self._handshake_reading", "self._handle_write", "self._got_empty_write", "self._pending_callbacks", "socket.SOL_SOCKET", "e.args", "self._read_until_close", "self.max_write_buffer_size", "errno.errorcode", "self._ssl_connect_future", "ssl_stream.read_chunk_size", "self._ssl_options", "ssl.SSL_ERROR_WANT_READ", "self._run_read_callback", "self._add_io_state", "errno.WSAECONNABORTED", "self._read_to_buffer_loop", "sys.exc_info", "kwargs.pop", "self._server_hostname", "future.set_exception", "errno.WSAETIMEDOUT", "self._read_buffer_size", "self._read_to_buffer", "ssl.SSL_ERROR_SSL", "errno.EWOULDBLOCK", "self.max_buffer_size", "errno.EAGAIN", "self._handle_connect", "self._maybe_add_error_listener", "self._find_read_pos", "self._write_buffer", "sys.platform", "self._read_future", "socket.IPPROTO_TCP", "socket.TCP_NODELAY", "socket.SO_ERROR", "self._check_max_bytes", "self.writing", "gen_log.info", "self._unfreeze_write_buffer", "errno.ETIMEDOUT", "ssl.CERT_OPTIONAL", "gen_log.warning", "self._consume", "ssl_stream.max_buffer_size", "errno.EINPROGRESS", "stack_context.wrap", "socket.error", "self._read_delimiter", "futures.append", "errno.WSAEINPROGRESS", "self.fileno", "self._run_ssl_connect_callback", "self.close", "self._closed", "self._read_regex", "self._ssl_connect_callback", "self._ssl_accepting", "ssl.CERT_REQUIRED", "self._handle_events", "m.end", "self._run_callback", "errno.EINTR", "future.done", "self._total_write_index", "errno.ENOTCONN", "self._connecting", "ssl.SSL_ERROR_EOF", "collections.deque", "self.closed", "self._write_buffer_frozen", "self._read_from_buffer", "self._verify_cert", "ssl.SSLContext", "ssl.CERT_NONE", "self._close_callback", "self._set_read_callback", "gen_log.error", "errno.EBADF", "self._check_closed", "self._read_buffer_pos", "self.read_chunk_size", "err.args", "self._maybe_run_close_callback", "self._state"]}, "locale.py": {"libraries": ["salt.exceptions.CommandExecutionError"], "function_names": ["__virtual__", "present", "system"], "function_calls": [], "class_names": [], "class_method_calls": ["__salt__.missing_fun_string"]}, "locks.py": {"libraries": ["salt.ext.tornado.concurrent.Future", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.ioloop", "collections", "salt.ext.tornado.gen"], "function_names": ["clear", "__enter__", "acquire", "notify", "is_set", "on_timeout", "release", "__init__", "__aenter__", "set", "__exit__", "_garbage_collect", "wait", "notify_all", "__repr__", "__aexit__"], "function_calls": ["len", "super", "BoundedSemaphore", "RuntimeError", "_ReleasingContextManager", "Future", "ValueError"], "class_names": ["BoundedSemaphore", "Semaphore", "Event", "_ReleasingContextManager", "_TimeoutGarbageCollector", "Lock", "Condition"], "class_method_calls": ["waiter.done", "self.notify", "self._waiters", "gen.coroutine", "self.is_set", "io_loop.add_timeout", "gen.TimeoutError", "collections.deque", "waiter.add_done_callback", "waiters.append", "waiter.set_result", "self.io_loop", "self._block", "io_loop.remove_timeout", "self.acquire", "self.__class__", "self._initial_value", "w.done", "gen.with_timeout", "self._value", "ioloop.IOLoop", "self._garbage_collect", "waiter.set_exception", "self._obj", "self._timeouts", "self._future", "self.release"]}, "log.py": {"libraries": ["salt.ext.tornado.util.unicode_type", "colorama", "salt.ext.tornado.util.basestring_type", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.escape._unicode", "salt.ext.tornado.options", "logging", "sys", "logging.handlers", "curses"], "function_names": ["_stderr_supports_color", "format", "_safe_unicode", "__init__", "define_logging_options", "enable_pretty_logging"], "function_calls": ["hasattr", "getattr", "_stderr_supports_color", "LogFormatter", "_safe_unicode", "_unicode", "unicode_type", "repr", "object", "ValueError", "enable_pretty_logging", "isinstance"], "class_names": ["LogFormatter"], "class_method_calls": ["logging.WARNING", "logger.handlers", "options.log_file_max_size", "colorama.initialise", "logging.ERROR", "sys.stderr", "record.exc_info", "curses.setupterm", "record.color", "self.formatTime", "options.log_rotate_mode", "self._fmt", "options.log_rotate_when", "colors.items", "record.__dict__", "logger.setLevel", "options.log_rotate_interval", "logging.Formatter", "record.exc_text", "options.define", "record.levelno", "curses.tparm", "salt.ext", "logging.StreamHandler", "record.asctime", "formatted.replace", "record.message", "options.log_file_num_backups", "logging.INFO", "options.add_parse_callback", "self.datefmt", "curses.tigetnum", "logging.getLogger", "self._colors", "self._normal", "record.end_color", "record.getMessage", "logger.addHandler", "options.log_to_stderr", "sys.version_info", "self.formatException", "formatted.rstrip", "logging.DEBUG", "options.log_file_prefix", "lines.extend", "curses.tigetstr", "options.logging", "logging.handlers", "channel.setFormatter"]}, "netutil.py": {"libraries": ["os", "ssl", "errno", "salt.ext.tornado.ioloop.IOLoop", "salt.ext.tornado.util.Configurable", "__future__.absolute_import", "salt.ext.tornado.concurrent.run_on_executor", "certifi", "backports.ssl_match_hostname", "salt.ext.tornado.util.PY3", "socket", "salt.ext.tornado.util.errno_from_exception", "__future__.division", "concurrent.futures.ThreadPoolExecutor", "__future__.print_function", "sys", "salt.ext.tornado.concurrent.dummy_executor", "salt.ext.tornado.platform.auto.set_close_exec", "stat"], "function_names": ["add_accept_handler", "configurable_default", "accept_handler", "resolve", "close", "ssl_options_to_context", "bind_unix_socket", "ssl_wrap_socket", "initialize", "configurable_base", "bind_sockets", "is_valid_ip", "_create_threadpool"], "function_calls": ["super", "ThreadPoolExecutor", "xrange", "dict", "set_close_exec", "list", "frozenset", "set", "ssl_options_to_context", "errno_from_exception", "all", "callback", "NotImplementedError", "tuple", "ValueError", "isinstance", "hasattr", "bool", "getattr"], "class_names": ["Resolver", "ExecutorResolver", "OverrideResolver", "BlockingResolver", "ThreadedResolver"], "class_method_calls": ["os.getpid", "IOLoop.READ", "ssl.PROTOCOL_SSLv23", "stat.S_ISSOCK", "ssl.match_hostname", "socket.IPPROTO_IPV6", "connection.fileno", "ssl.wrap_socket", "socket.IPV6_V6ONLY", "self.close_executor", "_client_ssl_defaults.verify_mode", "ThreadedResolver._create_threadpool", "context.load_cert_chain", "ssl.CERT_REQUIRED", "socket.getaddrinfo", "st.st_mode", "context.verify_mode", "socket.has_ipv6", "context.options", "self.mapping", "sock.bind", "socket.socket", "socket.SO_REUSEADDR", "cls._threadpool_pid", "socket.SO_REUSEPORT", "socket.AF_UNSPEC", "sock.accept", "os.chmod", "ssl.CertificateError", "sock.getsockname", "errno.EWOULDBLOCK", "errno.ENOENT", "socket.gaierror", "io_loop.add_handler", "socket.AI_PASSIVE", "ssl.OP_NO_COMPRESSION", "os.name", "errno.EAGAIN", "self.io_loop", "backports.ssl_match_hostname", "sock.fileno", "sock.listen", "context.load_verify_locations", "ssl.create_default_context", "sock.setblocking", "socket.EAI_NONAME", "sys.platform", "os.stat", "socket.AF_INET", "socket.AI_NUMERICHOST", "errno.WSAEWOULDBLOCK", "_client_ssl_defaults.options", "context.wrap_socket", "socket.AF_UNIX", "ssl.Purpose", "self.executor", "ssl.SSLContext", "_server_ssl_defaults.options", "IOLoop.current", "cls._threadpool", "sock.setsockopt", "context.set_ciphers", "sockets.append", "errno.ECONNABORTED", "ssl_options.get", "results.append", "_client_ssl_defaults.load_verify_locations", "socket.SOCK_STREAM", "socket.AF_INET6", "errno.EAFNOSUPPORT", "self.resolver", "e.args", "socket.SOL_SOCKET", "os.remove", "socket.error", "certifi.where"]}, "options.py": {"libraries": ["os", "salt.ext.tornado.util.basestring_type", "re", "__future__.absolute_import", "__future__.division", "__future__.print_function", "numbers", "textwrap", "salt.ext.tornado.escape._unicode", "sys", "salt.ext.tornado.escape.native_str", "salt.ext.tornado.log.define_logging_options", "datetime", "salt.ext.tornado.stack_context", "salt.ext.tornado.util.exec_in"], "function_names": ["groups", "__contains__", "items", "__setattr__", "__init__", "_parse_string", "parse_config_file", "_parse_timedelta", "_normalize_name", "_help_callback", "print_help", "__delattr__", "parse", "__iter__", "parse_command_line", "__getattr__", "value", "set", "__getitem__", "define", "_parse_datetime", "run_parse_callbacks", "as_dict", "mockable", "_parse_bool", "add_parse_callback", "__setitem__", "group_dict"], "function_calls": ["Exception", "_Option", "exec_in", "sorted", "define_logging_options", "dict", "open", "_parse", "type", "set", "setattr", "_Mockable", "range", "AttributeError", "callback", "OptionParser", "Error", "isinstance", "len", "getattr", "issubclass", "_unicode", "float", "print", "object", "native_str"], "class_names": ["OptionParser", "Error", "_Mockable", "_Option"], "class_method_calls": ["name.replace", "self._DATETIME_FORMATS", "m.group", "sys.argv", "self.help", "sys._getframe", "opt.name", "self.file_name", "o.sort", "value.lower", "self._TIMEDELTA_ABBREV_DICT", "sys.stderr", "default.__class__", "self.callback", "self.name", "self._TIMEDELTA_PATTERN", "option.metavar", "option.group_name", "self.default", "option.type", "by_group.items", "self.__getattr__", "m.end", "self.group_name", "self._help_callback", "option.default", "self.metavar", "self._parse_datetime", "_Option.UNSET", "datetime.timedelta", "self._originals", "numbers.Integral", "textwrap.wrap", "self._parse_string", "option.parse", "re.compile", "self._parse_callbacks", "options.parse_config_file", "option.name", "part.partition", "options.parse_command_line", "sys.exit", "by_group.setdefault", "self._options", "options.define", "options.print_help", "self.define", "self._value", "frame.f_back", "opt.value", "frame.f_code", "self.multiple", "option.help", "options.add_parse_callback", "opt.group_name", "arg.partition", "re.IGNORECASE", "self.run_parse_callbacks", "self._parse_bool", "self.value", "f.read", "self.print_help", "self.__setattr__", "os.path", "stack_context.wrap", "value.split", "lines.insert", "self.__dict__", "datetime.datetime", "self._normalize_name", "self._parse_timedelta", "self.type"]}, "asyncio.py": {"libraries": ["salt.ext.tornado.ioloop.IOLoop", "functools", "trollius", "__future__.absolute_import", "__future__.division", "__future__.print_function", "asyncio", "salt.ext.tornado.stack_context", "salt.ext.tornado.concurrent", "salt.ext.tornado.gen.convert_yielded"], "function_names": ["to_tornado_future", "stop", "start", "remove_timeout", "close", "add_callback", "add_handler", "update_handler", "to_asyncio_future", "_handle_events", "initialize", "call_at", "remove_handler"], "function_calls": ["hasattr", "super", "ValueError", "set", "RuntimeError", "max", "handler_func", "convert_yielded", "list"], "class_names": ["AsyncIOMainLoop", "BaseAsyncIOLoop", "AsyncIOLoop"], "class_method_calls": ["IOLoop.READ", "self.readers", "self.make_current", "old_current.make_current", "self.closing", "self._handle_events", "self._run_callback", "self.asyncio_loop", "self.time", "self._setup_logging", "asyncio.Future", "asyncio.new_event_loop", "loop.close", "self.writers", "self.close_fd", "self.split_fd", "salt.ext", "timeout.cancel", "asyncio.get_event_loop", "IOLoop.current", "self.remove_handler", "IOLoop.clear_current", "self.close_loop", "IOLoop.WRITE", "stack_context.wrap", "convert_yielded.register", "self.handlers", "functools.partial"]}, "caresresolver.py": {"libraries": ["pycares", "salt.ext.tornado.ioloop.IOLoop", "socket", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.netutil.is_valid_ip", "salt.ext.tornado.netutil.Resolver", "salt.ext.tornado.gen"], "function_names": ["_handle_events", "_sock_state_cb", "resolve", "initialize"], "function_calls": ["IOError", "is_valid_ip", "isinstance"], "class_names": ["CaresResolver"], "class_method_calls": ["IOLoop.READ", "gen.Return", "gen.coroutine", "callback_args.kwargs", "addrinfo.append", "self._handle_events", "socket.AF_UNSPEC", "pycares.Channel", "self._sock_state_cb", "callback_args.args", "self.io_loop", "gen.Arguments", "gen.Callback", "socket.AF_INET", "result.addresses", "pycares.ARES_SOCKET_BAD", "pycares.errno", "self.channel", "IOLoop.current", "self.fds", "gen.Wait", "IOLoop.WRITE", "socket.AF_INET6"]}, "epoll.py": {"libraries": ["salt.ext.tornado.ioloop.PollIOLoop", "select", "__future__.absolute_import", "__future__.division", "__future__.print_function"], "function_names": ["initialize"], "function_calls": ["super"], "class_names": ["EPollIOLoop"], "class_method_calls": ["select.epoll"]}, "interface.py": {"libraries": ["__future__.absolute_import", "__future__.division", "__future__.print_function"], "function_names": ["fileno", "monotonic_time", "close", "write_fileno", "set_close_exec", "consume", "wake"], "function_calls": ["NotImplementedError"], "class_names": ["Waker"], "class_method_calls": []}, "kqueue.py": {"libraries": ["salt.ext.tornado.ioloop.IOLoop", "salt.ext.tornado.ioloop.PollIOLoop", "select", "__future__.absolute_import", "__future__.division", "__future__.print_function"], "function_names": ["register", "poll", "close", "__init__", "modify", "_control", "initialize", "unregister", "fileno"], "function_calls": ["_KQueue", "IOError", "hasattr", "super"], "class_names": ["_KQueue", "KQueueIOLoop"], "class_method_calls": ["IOLoop.READ", "self._active", "self._kqueue", "self._control", "kevent.flags", "self.register", "kevents.append", "events.items", "kevent.ident", "select.KQ_EV_EOF", "select.KQ_FILTER_READ", "select.KQ_EV_DELETE", "select.kevent", "select.KQ_FILTER_WRITE", "IOLoop.WRITE", "select.KQ_EV_ADD", "IOLoop.ERROR", "select.kqueue", "self.unregister", "select.KQ_EV_ERROR", "kevent.filter", "events.get"]}, "posix.py": {"libraries": ["salt.ext.tornado.platform.common", "os", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.platform.interface", "fcntl"], "function_names": ["wake", "_set_nonblocking", "close", "write_fileno", "__init__", "set_close_exec", "consume", "fileno"], "function_calls": ["_set_nonblocking", "set_close_exec"], "class_names": ["Waker"], "class_method_calls": ["os.pipe", "common.try_close", "fcntl.F_GETFD", "os.O_NONBLOCK", "fcntl.F_GETFL", "fcntl.F_SETFL", "self.reader", "self.writer", "interface.Waker", "fcntl.F_SETFD", "fcntl.fcntl", "fcntl.FD_CLOEXEC", "os.fdopen"]}, "select.py": {"libraries": ["salt.ext.tornado.ioloop.IOLoop", "salt.ext.tornado.ioloop.PollIOLoop", "select", "__future__.absolute_import", "__future__.division", "__future__.print_function"], "function_names": ["register", "poll", "close", "__init__", "modify", "initialize", "unregister"], "function_calls": ["_Select", "IOError", "set", "super"], "class_names": ["_Select", "SelectIOLoop"], "class_method_calls": ["IOLoop.READ", "select.select", "self.error_fds", "self.read_fds", "IOLoop.WRITE", "self.register", "IOLoop.ERROR", "self.unregister", "self.fd_sets", "events.items", "self.write_fds", "events.get"]}, "twisted.py": {"libraries": ["twisted.internet.interfaces.IWriteDescriptor", "salt.ext.tornado.concurrent.Future", "functools", "twisted.internet.interfaces.IReactorFDSet", "twisted.internet.reactor", "salt.ext.tornado.stack_context.NullContext", "twisted.names.client", "twisted.internet.interfaces.IReadDescriptor", "zope.interface.implementer", "twisted.names.cache", "salt.ext.tornado.ioloop.IOLoop", "__future__.absolute_import", "salt.ext.tornado.ioloop", "twisted.names.resolve", "twisted.internet.defer.Deferred", "salt.ext.tornado.log.app_log", "twisted.internet.main.installReactor", "socket", "__future__.division", "twisted.python.log", "twisted.python.failure", "salt.ext.tornado.util.timedelta_to_seconds", "twisted.internet.posixbase.PosixReactorBase", "salt.ext.tornado.escape.utf8", "salt.ext.tornado.gen", "salt.ext.tornado.stack_context.wrap", "twisted.internet.interfaces.IDelayedCall", "twisted.internet.error", "__future__.print_function", "numbers", "sys", "twisted.names.hosts", "datetime", "salt.ext.tornado.netutil.Resolver", "twisted.internet.interfaces.IReactorTime", "twisted.internet.abstract"], "function_names": ["start_if_necessary", "delay", "removeWriter", "seconds", "remove_timeout", "add_callback_from_signal", "__init__", "add_handler", "cancel", "installWaker", "callFromThread", "getTime", "getReaders", "doRead", "close", "crash", "add_timeout", "errback", "removeReader", "connectionLost", "_removeDelayedCall", "update_handler", "_called", "logPrefix", "resolve", "fileno", "initialize", "addReader", "stop", "_", "doIteration", "addWriter", "reset", "listenTCP", "listenUDP", "_invoke_callback", "active", "remove_handler", "start", "getWriters", "wakeUp", "getDelayedCalls", "install", "callLater", "mainLoop", "add_callback", "doWrite", "removeAll"], "function_calls": ["Exception", "super", "_FD", "installReactor", "TornadoReactor", "max", "IOError", "TornadoDelayedCall", "implementer", "IOLoop", "TypeError", "utf8", "wrap", "Future", "callable", "NotImplementedError", "timedelta_to_seconds", "ValueError", "isinstance", "hasattr", "NullContext"], "class_names": ["TornadoDelayedCall", "_TestReactor", "_FD", "TwistedIOLoop", "TornadoReactor", "TwistedResolver"], "class_method_calls": ["timeout.active", "self.addSystemEventTrigger", "self.reading", "self.make_current", "writer.doWrite", "self._invoke_callback", "c.cancel", "self.removeWriter", "self._setup_logging", "self.handler", "f.set_result", "socket.AF_INET", "self.close_fd", "failure.Failure", "writer.fileno", "self.split_fd", "reader.fileno", "self.fds", "self.fireSystemEvent", "IOLoop.WRITE", "self._reactor", "socket.AF_INET6", "IOLoop.READ", "gen.Return", "f.set_exc_info", "gen.coroutine", "datetime.timedelta", "PosixReactorBase.crash", "self.fd", "self.reactor", "self.fileobj", "self._delayedCalls", "app_log.error", "self.io_loop", "self.lost", "twisted.names", "self._started", "salt.ext", "IOLoop.current", "self.add_callback", "PosixReactorBase.__init__", "self._func", "x._active", "IOLoop.ERROR", "d.addCallbacks", "sys.exc_info", "self._io_loop", "gen.Task", "fds.values", "fd.fileobj", "self._time", "socket.AF_UNSPEC", "reader.doRead", "self.removeReader", "failure.raiseException", "self._called", "self.writing", "twisted.internet", "self._writers", "self._readers", "functools.partial", "error.ConnectionLost", "old_current.make_current", "log.callWithLogger", "gen.convert_yielded", "reader.readConnectionLost", "deferred.addBoth", "self._run_callback", "self._fds", "self.time", "writer.writeConnectionLost", "numbers.Real", "self._timeout", "resolved.raiseException", "timeout.cancel", "self._removeAll", "self.crash", "IOLoop.clear_current", "PosixReactorBase.stop", "self.resolver", "self._active"]}, "windows.py": {"libraries": ["ctypes", "__future__.absolute_import", "__future__.division", "__future__.print_function", "ctypes.wintypes"], "function_names": ["set_close_exec"], "function_calls": ["SetHandleInformation"], "class_names": [], "class_method_calls": ["SetHandleInformation.argtypes", "ctypes.WinError", "ctypes.windll", "SetHandleInformation.restype", "ctypes.wintypes"]}, "process.py": {"libraries": ["psutil", "pwd", "os", "functools", "salt.utils.crypt", "signal", "salt.utils.files", "contextlib", "salt.defaults.exitcodes", "errno", "time", "salt.utils.versions", "multiprocessing.util", "io", "queue", "socket", "multiprocessing", "logging", "inspect", "threading", "salt.ext.tornado.gen", "systemd.daemon", "salt.utils.path", "salt.utils.platform", "salt._logging", "sys", "subprocess", "setproctitle", "json", "copy"], "function_names": ["__decorate_run", "__init__", "fire_async", "_setup_signals", "stop_restarting", "run", "restart_process", "claim_mantle_of_responsibility", "add", "_handle_signals", "check_children", "default_signals", "notify_systemd", "add_process", "systemd_notify_call", "send_signal_to_processes", "__new__", "clean_proc", "register_finalize_method", "daemonize", "set_pidfile", "wrapped_run_func", "dup2", "appendproctitle", "kill_children", "cleanup", "get_pidfile", "start", "os_is_running", "_thread_target", "daemonize_if", "check_mantle_of_responsibility", "terminate", "get_process_info", "__setstate__", "__getstate__", "register_after_fork_method", "check_pidfile"], "function_calls": ["run_func", "super", "func", "int", "default_signals", "systemd_notify_call", "tgt", "setattr", "daemonize", "range", "str", "callable", "dup2", "appendproctitle", "method", "Process", "isinstance", "hasattr", "get_process_info", "issubclass"], "class_names": ["SignalHandlingProcess", "ThreadPool", "ProcessManager", "SubprocessList", "Process"], "class_method_calls": ["process.poll", "signal.SIG_DFL", "sys.stderr", "socket.SOCK_DGRAM", "log.critical", "instance._after_fork_methods", "self.check_children", "self.restart_process", "self.__init__", "sys.stdout", "queue.Queue", "copy.copy", "os.getuid", "signal.SIGINT", "self._workers", "setproctitle.getproctitle", "self.processes", "self.register_after_fork_method", "contextlib.contextmanager", "err.errno", "sys.exit", "kwargs.get", "signal.default_int_handler", "self.register_finalize_method", "queue.Empty", "self.lock", "self.wait_for_kill", "self.send_signal_to_processes", "signal.signal", "psutil.NoSuchProcess", "os.setsid", "multiprocessing.cpu_count", "salt._logging", "os.umask", "sock.sendall", "salt.utils", "child.is_running", "os.getpid", "json.dump", "gen.coroutine", "psutil.pid_exists", "subprocess.Popen", "self._thread_target", "multiprocessing.Process", "log.warning", "self._after_fork_methods", "os.kill", "instance.__logging_config__", "SignalHandlingProcess._setup_signals", "socket.socket", "current.rstrip", "os.fork", "process.start", "self.num_threads", "instance._args_for_getstate", "os._exit", "proc.name", "process.children", "log.error", "self.__class__", "signal.SIGTERM", "log.exception", "errno.EACCES", "json.decoder", "notify_socket.startswith", "signal.SIGKILL", "instance._finalize_methods", "systemd.daemon", "self.add_process", "os.chdir", "sys.stdin", "sock.connect", "os.path", "threading.Thread", "signal.SIG_IGN", "self._restart_processes", "current.strip", "raw_process_info.create_time", "process.communicate", "self.stop_restarting", "thread.daemon", "instance.run", "self.pid", "child.terminate", "os.makedirs", "process.pid", "salt.defaults", "subprocess.PIPE", "json.load", "self._sigterm_handler", "pdf.read", "errno.ESRCH", "proc.join", "proc.terminate", "instance._kwargs_for_getstate", "proc.is_alive", "setproctitle.setproctitle", "sys.platform", "raw_process_info.pid", "thread.start", "self._job_queue", "self._finalize_methods", "log.info", "io.UnsupportedOperation", "self._pid", "functools.wraps", "socket.AF_UNIX", "os.devnull", "file_process_info.get", "os.getenv", "signal.getsignal", "exc.errno", "os.chown", "gen.sleep", "file2.fileno", "proc.pid", "time.sleep", "time.time", "sys.argv", "instance.__decorate_run", "os.dup2", "self.name", "self.count", "self.__logging_config__", "multiprocessing.current_process", "self._kwargs_for_getstate", "errno.EINTR", "raw_process_info.name", "tgt.__qualname__", "file1.fileno", "raw_process_info.status", "self.kill_children", "log.debug", "self._process_map", "psutil.Process", "subprocess.call", "log.trace", "pwd.getpwnam", "opts.get", "ofile.write", "sock.close", "instance.register_after_fork_method", "self._handle_signals", "process.name", "logging.getLogger", "self._args_for_getstate", "inspect.isclass", "multiprocessing.Lock", "current.rsplit", "queue.Full"]}, "queues.py": {"libraries": ["logging", "pyrax.exceptions", "pyrax", "salt.utils.openstack.pyrax.authenticate"], "function_names": ["delete", "create", "__init__", "show", "exists"], "function_calls": [], "class_names": ["RackspaceQueues"], "class_method_calls": ["queue.name", "logging.getLogger", "self.show", "log.error", "queue.delete", "authenticate.Authenticate", "self.auth", "pyrax.exceptions", "self.conn", "self.exists"]}, "routing.py": {"libraries": ["salt.ext.tornado.util.unicode_type", "typing", "salt.ext.tornado.escape.url_unescape", "salt.ext.tornado.util.import_object", "salt.ext.tornado.util.basestring_type", "re", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.escape.url_escape", "salt.ext.tornado.httputil", "salt.ext.tornado.util.re_unescape", "salt.ext.tornado.escape.utf8", "salt.ext.tornado.httpserver._CallableAdapter", "salt.ext.tornado.log.app_log", "functools.partial"], "function_names": ["process_rule", "match", "reverse_url", "__init__", "on_connection_close", "add_rules", "get_target_delegate", "start_request", "_find_groups", "_unquote_or_none", "data_received", "__repr__", "reverse", "headers_received", "finish", "find_handler"], "function_calls": ["url_escape", "super", "_RoutingDelegate", "_unquote_or_none", "dict", "_CallableAdapter", "utf8", "partial", "url_unescape", "str", "re_unescape", "callable", "PathMatches", "NotImplementedError", "tuple", "import_object", "ValueError", "isinstance", "len", "Rule"], "class_names": ["RuleRouter", "AnyMatches", "ReversibleRouter", "Rule", "Router", "ReversibleRuleRouter", "_RoutingDelegate", "DefaultHostMatches", "PathMatches", "HostMatches", "URLSpec", "Matcher"], "class_method_calls": ["self.application", "self.target", "self.host_pattern", "app_log.warning", "self.name", "path_pattern.endswith", "self.__class__", "fragment.index", "self._find_groups", "httputil.HTTPMessageDelegate", "self._group_count", "self.router", "self.rules", "converted_args.append", "self.matcher", "self.target_kwargs", "pattern.endswith", "target.find_handler", "re.compile", "match.groupdict", "self.request_conn", "self.regex", "self.add_rules", "rule.target", "pattern.count", "self.named_rules", "self.kwargs", "request.headers", "self.process_rule", "request.path", "request.connection", "httputil.HTTPServerRequest", "request.host_name", "pattern.split", "request.server_connection", "pieces.append", "match.groups", "self.handler_class", "rule.target_kwargs", "rule.name", "self.server_conn", "self.get_target_delegate", "self._path", "self.delegate", "target.start_request", "host_pattern.endswith", "rule.matcher", "httputil.HTTPServerConnectionDelegate", "pattern.startswith"]}, "simple_httpclient.py": {"libraries": ["functools", "salt.ext.tornado.httpclient.main", "salt.ext.tornado.escape._unicode", "io.BytesIO", "ssl", "salt.ext.tornado.http1connection.HTTP1ConnectionParameters", "salt.ext.tornado.http1connection.HTTP1Connection", "urlparse", "__future__.absolute_import", "salt.ext.tornado.stack_context", "collections", "certifi", "salt.ext.tornado.httpclient._RequestProxy", "salt.ext.tornado.util.PY3", "socket", "salt.ext.tornado.httpclient.AsyncHTTPClient", "salt.ext.tornado.log.gen_log", "re", "__future__.division", "salt.ext.tornado.httpclient.HTTPResponse", "salt.ext.tornado.httputil", "salt.ext.tornado.httpclient.HTTPError", "salt.ext.tornado.gen", "salt.ext.tornado.escape.utf8", "salt.ext.tornado.iostream.StreamClosedError", "urllib.parse", "salt.ext.tornado.tcpclient.TCPClient", "salt.ext.tornado.netutil.OverrideResolver", "__future__.print_function", "copy", "base64", "sys", "salt.ext.tornado.netutil.Resolver", "salt.ext.tornado.netutil._client_ssl_defaults"], "function_names": ["__init__", "_write_body", "_run_callback", "fetch_impl", "_release_fetch", "on_body_written", "close", "_handle_exception", "_should_follow_redirect", "on_connection_close", "_create_connection", "_on_end_request", "_get_ssl_options", "_default_ca_certs", "_process_queue", "data_received", "headers_received", "finish", "_handle_request", "_on_timeout", "_connection_class", "_read_response", "_on_connect", "_remove_timeout", "initialize", "_release"], "function_calls": ["Exception", "HTTPError", "super", "HTTP1ConnectionParameters", "set", "KeyError", "utf8", "_default_ca_certs", "Resolver", "str", "OverrideResolver", "TCPClient", "release_callback", "main", "NotImplementedError", "ValueError", "isinstance", "len", "getattr", "HTTP1Connection", "hasattr", "_unicode", "HTTPResponse", "BytesIO", "object", "min"], "class_names": ["SimpleAsyncHTTPClient", "_HTTPConnection"], "class_method_calls": ["self._read_response", "new_request.body", "f.result", "self.parsed", "self._on_timeout", "self._handle_exception", "copy.copy", "new_request.headers", "self.queue", "self._sockaddr", "socket.AF_INET", "ssl.PROTOCOL_TLSv1", "new_request.url", "first_line.code", "self.final_callback", "self.own_resolver", "self.request", "self.client", "self._handle_request", "self._on_end_request", "self.connection", "re.match", "httputil.split_host_and_port", "value.real_error", "self.headers", "stack_context.NullContext", "base64.b64encode", "new_request.max_redirects", "self.io_loop", "self.active", "self._SUPPORTED_METHODS", "request.connect_timeout", "self._connection_class", "fut.result", "self._release", "sys.version_info", "self._should_follow_redirect", "stream.set_nodelay", "gen_log.debug", "self.tcp_client", "self._process_queue", "request.start_time", "stack_context.ExceptionStackContext", "sys.exc_info", "request.allow_ipv6", "httputil.HTTPMessageDelegate", "self.code", "httputil.RequestStartLine", "socket.AF_UNSPEC", "self._decompressor", "self.max_buffer_size", "netloc.rpartition", "self._write_body", "self.max_header_size", "self.parsed_hostname", "new_request.original_request", "first_line.reason", "stack_context.wrap", "self.stream", "new_request.method", "urlparse.urljoin", "request.request_timeout", "functools.partial", "self._create_connection", "self.release_callback", "gen.convert_yielded", "ssl.CERT_REQUIRED", "self._run_callback", "self._on_connect", "self.max_body_size", "self.reason", "urlparse.urlsplit", "self.max_clients", "collections.deque", "AsyncHTTPClient.configure", "self.chunks", "io_loop.time", "self._timeout", "self._remove_timeout", "self._release_fetch", "stream.close", "self.start_time", "self.waiting", "self.resolver", "self._get_ssl_options", "self.on_connection_close", "certifi.where"]}, "stack_context.py": {"libraries": ["salt.ext.tornado.util.raise_exc_info", "__future__.absolute_import", "__future__.division", "__future__.print_function", "sys", "threading"], "function_names": ["_remove_deactivated", "__enter__", "_handle_exception", "__init__", "enter", "null_wrapper", "__exit__", "exit", "wrap", "wrapped", "run_with_stack_context", "_deactivate"], "function_calls": ["_remove_deactivated", "raise_exc_info", "hasattr", "func", "_handle_exception", "_State", "fn", "StackContextInconsistentError", "tuple"], "class_names": ["NullContext", "ExceptionStackContext", "_State", "StackContext", "StackContextInconsistentError"], "class_method_calls": ["context.__enter__", "n.old_contexts", "h.active", "sys.exc_info", "ctx.old_contexts", "self.exception_handler", "self.enter", "self.new_contexts", "threading.local", "parent.active", "self._deactivate", "context.__exit__", "parent.old_contexts", "tail.old_contexts", "self.context_factory", "n.enter", "self.contexts", "self.active", "self.old_contexts", "c.old_contexts", "self.exit", "tail.exit", "wrapped._wrapped", "c.exit", "null_wrapper._wrapped", "head.old_contexts", "_state.contexts", "head.active"]}, "tcpclient.py": {"libraries": ["salt.ext.tornado.ioloop.IOLoop", "salt.ext.tornado.iostream.IOStream", "socket", "salt.ext.tornado.concurrent.Future", "functools", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.netutil.Resolver", "salt.ext.tornado.platform.auto.set_close_exec", "salt.ext.tornado.gen"], "function_names": ["on_timeout", "start", "close", "__init__", "_create_stream", "clear_timeout", "connect", "try_connect", "on_connect_done", "split", "set_timout"], "function_calls": ["len", "next", "Resolver", "iter", "set_close_exec", "IOStream", "IOError", "_Connector", "Future", "isinstance"], "class_names": ["TCPClient", "_Connector"], "class_method_calls": ["connector.start", "gen.Return", "primary.append", "secondary.append", "gen.coroutine", "self.remaining", "future.add_done_callback", "self.on_timeout", "self.on_connect_done", "self.last_error", "self.split", "self.timeout", "socket_obj.close", "self._own_resolver", "stream.start_tls", "self.secondary_addrs", "socket.socket", "self.future", "socket.AF_UNSPEC", "socket_obj.fileno", "self.set_timout", "self.try_connect", "self.io_loop", "socket_obj.bind", "self.connect", "self._create_stream", "IOLoop.current", "stream.connect", "self.clear_timeout", "future.result", "stream.close", "socket.AF_INET6", "self.resolver", "self.primary_addrs", "fu.set_exception", "socket.error", "functools.partial"]}, "tcpserver.py": {"libraries": ["errno", "salt.ext.tornado.ioloop.IOLoop", "salt.ext.tornado.iostream.IOStream", "os", "socket", "salt.ext.tornado.iostream.SSLIOStream", "salt.ext.tornado.netutil.add_accept_handler", "salt.ext.tornado.process", "salt.ext.tornado.netutil.bind_sockets", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.util.errno_from_exception", "salt.ext.tornado.netutil.ssl_wrap_socket", "ssl", "salt.ext.tornado.gen", "salt.ext.tornado.log.app_log"], "function_names": ["stop", "bind", "start", "__init__", "add_sockets", "listen", "_handle_connection", "handle_stream", "add_socket"], "function_calls": ["add_accept_handler", "KeyError", "ssl_wrap_socket", "errno_from_exception", "SSLIOStream", "NotImplementedError", "IOStream", "bind_sockets", "ValueError", "isinstance"], "class_names": ["TCPServer"], "class_method_calls": ["f.result", "gen.convert_yielded", "process.fork_processes", "socket.AF_UNSPEC", "self.max_buffer_size", "ssl.SSL_ERROR_EOF", "self.add_sockets", "app_log.error", "self.io_loop", "errno.EINVAL", "self._handle_connection", "sock.close", "self._stopped", "self._sockets", "connection.close", "self._started", "self._pending_sockets", "IOLoop.current", "self.ssl_options", "errno.ECONNABORTED", "ssl.SSLError", "self.handle_stream", "os.path", "self.read_chunk_size", "err.args", "socket.error", "sock.fileno"]}, "template.py": {"libraries": ["time", "salt.utils.stringio", "os", "codecs", "salt.utils.data", "logging", "salt.utils.sanitizers", "salt.utils.versions", "salt.utils.files", "io"], "function_names": ["template_shebang", "compile_template_str", "compile_template", "check_render_pipe_str"], "function_calls": ["compile_template", "render", "template_shebang", "dict", "check_render_pipe_str", "SLS_ENCODER", "isinstance"], "class_names": [], "class_method_calls": ["os.unlink", "time.sleep", "time.time", "input_data.split", "input_data.strip", "comb.split", "input_data.seek", "pipestr.split", "ret.read", "render.__module__", "r.strip", "log.warning", "ret.seek", "contents.replace", "kwargs.pop", "line.strip", "log.debug", "codecs.open", "kwargs.get", "render_kwargs.update", "ifile.read", "log.error", "argline.strip", "ofile.write", "log.profile", "codecs.getencoder", "line.startswith", "logging.getLogger", "results.append", "os.path", "log.isEnabledFor", "logging.GARBAGE", "salt.utils", "ifile.readline", "io.StringIO"]}, "__main__.py": {"libraries": ["salt.ext.tornado.test.runtests.main", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.test.runtests.all"], "function_names": [], "function_calls": ["main"], "class_names": [], "class_method_calls": []}, "asyncio_test.py": {"libraries": ["salt.ext.tornado.test.util.exec_test", "salt.ext.tornado.platform.asyncio.asyncio", "__future__.absolute_import", "__future__.division", "salt.ext.tornado.testing.AsyncTestCase", "__future__.print_function", "salt.ext.tornado.test.util.skipBefore33", "salt.ext.tornado.test.util.unittest", "salt.ext.tornado.test.util.skipBefore35", "salt.ext.tornado.testing.gen_test", "salt.ext.tornado.platform.asyncio.to_asyncio_future", "salt.ext.tornado.gen", "salt.ext.tornado.platform.asyncio.AsyncIOLoop"], "function_names": ["tornado_coroutine", "test_asyncio_adapter", "test_asyncio_yield_from", "test_asyncio_future", "get_new_ioloop", "test_asyncio_callback"], "function_calls": ["native_coroutine_with_adapter2", "hasattr", "getattr", "native_coroutine_without_adapter", "locals", "AsyncIOLoop", "ensure_future", "native_coroutine_with_adapter", "exec_test", "globals"], "class_names": ["AsyncIOLoopTest"], "class_method_calls": ["gen.Return", "gen.coroutine", "asyncio.set_event_loop", "self.stop", "self.assertRaises", "unittest.skipIf", "self.assertEqual", "io_loop.asyncio_loop", "self.io_loop", "self.wait", "asyncio.get_event_loop", "gen.Task", "asyncio.ensure_future"]}, "auth_test.py": {"libraries": ["salt.ext.tornado.concurrent.Future", "salt.ext.tornado.auth.AuthError", "salt.ext.tornado.web.RequestHandler", "salt.ext.tornado.testing.ExpectLog", "salt.ext.tornado.web.asynchronous", "salt.ext.tornado.testing.AsyncHTTPTestCase", "salt.ext.tornado.auth.GoogleOAuth2Mixin", "salt.ext.tornado.auth.OAuthMixin", "__future__.absolute_import", "salt.ext.tornado.auth.TwitterMixin", "salt.ext.tornado.escape.json_decode", "salt.ext.tornado.auth.OpenIdMixin", "salt.ext.tornado.log.gen_log", "__future__.division", "salt.ext.tornado.gen", "salt.ext.tornado.web.Application", "salt.ext.tornado.web.HTTPError", "salt.ext.tornado.httputil.url_concat", "__future__.print_function", "salt.ext.tornado.auth.FacebookGraphMixin", "salt.ext.tornado.auth.OAuth2Mixin"], "function_names": ["_oauth_consumer_token", "test_oauth10_redirect", "test_oauth10a_request_parameters", "test_oauth10a_get_user_coroutine_exception", "_oauth_get_user", "test_twitter_redirect", "test_twitter_show_user_error", "test_oauth10a_get_user", "post", "test_oauth10_get_user", "test_twitter_show_user_future_error", "test_twitter_show_user_future", "test_twitter_redirect_gen_engine", "test_oauth10_request_parameters", "on_user", "test_twitter_redirect_gen_coroutine", "test_facebook_login", "test_oauth2_redirect", "base_twitter_redirect", "test_google_login", "test_twitter_show_user", "test_openid_get_user", "get_app", "test_openid_redirect", "get", "test_twitter_get_user", "get_auth_http_client", "initialize", "test_oauth10a_redirect"], "function_calls": ["Application", "Exception", "ExpectLog", "HTTPError", "str", "callback", "json_decode", "url_concat", "dict", "isinstance"], "class_names": ["OAuth2ClientLoginHandler", "OAuth1ClientRequestParametersHandler", "OpenIdClientLoginHandler", "TwitterServerAccessTokenHandler", "TwitterServerVerifyCredentialsHandler", "FacebookServerMeHandler", "TwitterServerShowUserHandler", "OAuth1ServerAccessTokenHandler", "GoogleOAuth2UserinfoHandler", "OAuth1ClientLoginHandler", "OAuth1ServerRequestTokenHandler", "TwitterClientLoginGenCoroutineHandler", "AuthTest", "TwitterClientShowUserHandler", "FacebookClientLoginHandler", "GoogleLoginHandler", "FacebookServerAccessTokenHandler", "GoogleOAuth2Test", "GoogleOAuth2TokenHandler", "TwitterClientLoginHandler", "TwitterClientHandler", "OAuth1ClientLoginCoroutineHandler", "OpenIdServerAuthenticateHandler", "GoogleOAuth2AuthorizeHandler", "TwitterClientLoginGenEngineHandler", "TwitterClientShowUserFutureHandler"], "class_method_calls": ["self._OAUTH_ACCESS_TOKEN_URL", "gen.coroutine", "response.body", "self.oauth2_request", "self.on_user", "self.assertEqual", "self.write", "gen.Task", "self._FACEBOOK_BASE_URL", "self._OAUTH_AUTHORIZE_URL", "self.redirect", "self._TWITTER_BASE_URL", "self._OAUTH_VERSION", "self.finish", "self.assertIn", "self._OAUTH_REQUEST_TOKEN_URL", "self.twitter_request", "gen.engine", "response.rethrow", "screen_name.capitalize", "self._oauth_request_parameters", "self.base_twitter_redirect", "self.settings", "self.fetch", "self.get_argument", "test.get_url", "response.code", "self.http_client", "self.request", "self._OPENID_ENDPOINT", "self.test", "self.set_status", "self.authorize_redirect", "self.assertDictEqual", "self.assertTrue", "self.get_authenticated_user", "self._OAUTH_REDIRECT_URI", "self.authenticate_redirect", "res.done", "response.headers"]}, "concurrent_test.py": {"libraries": ["salt.ext.tornado.concurrent.Future", "salt.ext.tornado.tcpserver.TCPServer", "salt.ext.tornado.test.util.unittest", "salt.ext.tornado.testing.bind_unused_port", "salt.ext.tornado.testing.ExpectLog", "concurrent.futures", "salt.ext.tornado.testing.LogTrapTestCase", "__future__.absolute_import", "salt.ext.tornado.concurrent.run_on_executor", "salt.ext.tornado.stack_context", "salt.ext.tornado.testing.gen_test", "salt.ext.tornado.concurrent.ReturnValueIgnoredError", "salt.ext.tornado.log.app_log", "gc", "traceback", "salt.ext.tornado.escape.to_unicode", "socket", "re", "__future__.division", "salt.ext.tornado.testing.AsyncTestCase", "logging", "salt.ext.tornado.escape.utf8", "salt.ext.tornado.gen", "salt.ext.tornado.iostream.IOStream", "__future__.print_function", "sys", "salt.ext.tornado.concurrent.return_future"], "function_names": ["test_call_with_both", "test_async_future_gen", "__init__", "tearDown", "test_no_result_future", "process_response", "test_uncaught_exception_log", "test_generator_error", "test_generator", "test_delayed_failure", "delayed_failure", "test_call_with_no_args", "test_no_result_future_callback", "handle_stream", "immediate_failure", "handle_connect", "test_call_with_io_loop", "test_none_callback_pos", "test_no_callback", "handle_read", "capitalize", "test_callback_error", "sync_future", "test_none_callback_kw", "test_future", "test_callback_kw", "async_future", "return_value", "test_error_in_callback", "test_future_traceback", "test_return_value", "f", "test_no_calling", "test_call_with_executor", "test_async_future", "setUp", "test_callback_positional", "test_callback", "test_immediate_failure", "no_result_future", "test_kw_only_callback", "test_future_error"], "function_calls": ["to_unicode", "Object", "CapError", "ExpectLog", "super", "callback", "f", "utf8", "CapServer", "IOStream", "bind_unused_port", "Future", "run_on_executor"], "class_names": ["Object", "CapError", "BaseCapClient", "ClientTestMixin", "DecoratorClientTest", "GeneratorClientTest", "RunOnExecutorTest", "DecoratorCapClient", "ManualClientTest", "ManualCapClient", "CapServer", "ReturnFutureTest", "GeneratorCapClient"], "class_method_calls": ["gc.collect", "self.process_response", "gen.coroutine", "self.fail", "self.async_future", "self.callback", "self.assertEqual", "logging.info", "traceback.extract_tb", "self.delayed_failure", "self._io_loop", "sys.exc_info", "gen.Task", "re.match", "socket.socket", "stream.write", "stream.read_until", "self.future", "self.server", "future.done", "self.expected_frame", "self.handle_read", "unittest.skipIf", "self.assertIn", "self.wait", "self.io_loop", "gen.engine", "self.assertIs", "self.immediate_failure", "self.assertFalse", "data.upper", "self.stop", "self.assertRaises", "self.sync_future", "gen.moment", "o.f", "self.request_data", "self.executor", "self.return_value", "self.__executor", "self.handle_connect", "self.no_result_future", "stream.connect", "future.result", "self.client", "self.assertRaisesRegexp", "self.port", "stream.close", "stack_context.wrap", "self.stream", "futures.thread", "self.client_class"]}, "curl_httpclient_test.py": {"libraries": ["salt.ext.tornado.httpclient.HTTPRequest", "salt.ext.tornado.curl_httpclient.CurlAsyncHTTPClient", "pycurl", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.web.RequestHandler", "salt.ext.tornado.test.util.unittest", "salt.ext.tornado.stack_context.ExceptionStackContext", "hashlib.md5", "salt.ext.tornado.test.httpclient_test", "salt.ext.tornado.escape.utf8", "salt.ext.tornado.web.Application", "salt.ext.tornado.testing.AsyncHTTPTestCase"], "function_names": ["get_app", "test_prepare_curl_callback_stack_context", "test_fail_custom_reason", "get", "create_client", "get_http_client", "test_custom_reason", "error_handler", "test_digest_auth", "test_failed_setup", "setUp"], "function_calls": ["len", "Application", "range", "super", "str", "ExceptionStackContext", "CurlAsyncHTTPClient", "md5", "HTTPRequest", "dict", "utf8", "isinstance"], "class_names": ["CustomReasonHandler", "CurlHTTPClientCommonTestCase", "CurlHTTPClientTestCase", "CustomFailReasonHandler", "DigestAuthHandler"], "class_method_calls": ["self.assertIsNot", "response.body", "self.get_url", "self.assertEqual", "self.write", "exc_info.append", "self.create_client", "unittest.skipIf", "params.split", "response.error", "self.wait", "auth_header.split", "self.io_loop", "httpclient_test.HTTPClientCommonTestCase", "self.assertIs", "self.stop", "self.set_header", "self.fetch", "self.http_client", "self.request", "self.set_status", "pair.strip", "self.assertTrue", "response.reason"]}, "escape_test.py": {"libraries": ["salt.ext.tornado.escape.to_unicode", "salt.ext.tornado.escape.recursive_unicode", "salt.ext.tornado.escape.url_unescape", "salt.ext.tornado.escape.json_decode", "salt.ext.tornado.util.unicode_type", "salt.ext.tornado.escape.json_encode", "salt.ext.tornado.escape", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.escape.xhtml_escape", "salt.ext.tornado.escape.url_escape", "salt.ext.tornado.escape.squeeze", "salt.ext.tornado.test.util.unittest", "salt.ext.tornado.escape.utf8", "salt.ext.tornado.escape.xhtml_unescape"], "function_names": ["test_json_encode", "test_url_escape_quote_plus", "test_json_decode", "test_linkify", "test_url_unescape_unicode", "test_url_escape_unicode", "test_xhtml_unescape_numeric", "test_escape_return_types", "test_recursive_unicode", "test_squeeze", "test_xhtml_escape"], "function_calls": ["to_unicode", "xhtml_escape", "url_escape", "recursive_unicode", "url_unescape", "type", "squeeze", "json_decode", "json_encode", "xhtml_unescape", "utf8"], "class_names": ["EscapeTestCase"], "class_method_calls": ["unittest.TestCase", "self.assertRaises", "self.assertEqual", "salt.ext", "href.startswith"]}, "gen_test.py": {"libraries": ["salt.ext.tornado.test.util.exec_test", "salt.ext.tornado.concurrent.Future", "functools", "salt.ext.tornado.web.RequestHandler", "salt.ext.tornado.test.util.skipBefore33", "salt.ext.tornado.test.util.unittest", "salt.ext.tornado.testing.ExpectLog", "concurrent.futures", "contextlib", "salt.ext.tornado.web.asynchronous", "salt.ext.tornado.testing.AsyncHTTPTestCase", "salt.ext.tornado.test.util.skipNotCPython", "time", "salt.ext.tornado.ioloop.IOLoop", "__future__.absolute_import", "salt.ext.tornado.stack_context", "salt.ext.tornado.testing.gen_test", "weakref", "salt.ext.tornado.log.app_log", "gc", "salt.ext.tornado.httpclient.AsyncHTTPClient", "__future__.division", "salt.ext.tornado.testing.AsyncTestCase", "textwrap", "salt.ext.tornado.escape.url_escape", "salt.ext.tornado.test.util.skipBefore35", "salt.ext.tornado.gen", "salt.ext.tornado.web.Application", "salt.ext.tornado.web.HTTPError", "salt.ext.tornado.test.util.skipOnTravis", "__future__.print_function", "sys", "datetime", "salt.ext.tornado.concurrent.return_future"], "function_names": ["named_context", "test_bogus_yield", "test_multi_future_exceptions", "test_sync_raise", "tearDown", "test_multi_dict_future", "test_coroutine_refcounting", "test_asyncio_sleep_zero", "test_multi_dict", "f2", "test_ioloop_cb", "test_async_prepare_error_handler", "f1", "test_raise_after_stop", "test_future", "callback", "test_async_await_mixed_multi_native_future", "test_async_raise", "test_stack_context_leak_exception", "test_iterator_async_await", "test_multi_future", "inner2", "test_no_yield", "setUp", "test_multi_empty", "get_app", "test_async_await", "test_coroutine_exception_handler", "get", "finish_coroutines", "test_leaked_callback", "test_sync_raise_return_value_tuple", "test_attributes", "test_async_await_mixed_multi_native_yieldpoint", "async_exception", "task_func", "test_wait_all", "test_exception_phase1", "function_with_stack_context", "test_yield_exception_handler", "test_async_with_timeout", "test_return_value_tuple", "test_iterator", "test_reuse", "test_multi_future_dict_delayed", "test_sleep", "outer", "test_multi_future_delayed", "test_timeout", "test_replace_context_exception", "test_replace_yieldpoint_exception", "test_multi_yieldpoint_dict_delayed", "prepare", "_stack_depth", "test_key_reuse_tuple", "test_sync_return", "test_task_refcounting", "test_async_early_return", "test_with_arg_tuple", "test_swallow_context_exception", "test_key_mismatch", "test_gc", "test_native_coroutine_handler", "fail_task", "test_resume_after_exception_in_yield", "test_sync_raise_return", "test_task_handler", "test_async_return", "test_completed_concurrent_future", "test_wait_transfer_stack_context", "test_async_raise_return_value_tuple", "test_key_reuse", "delay_callback", "test_exception_in_task_phase1", "test_no_ref", "test_fails_before_timeout", "test_parallel_callback", "test_bogus_yield_tuple", "test_multi_yieldpoint_delayed", "test_async_return_no_value", "f", "test_sync_raise_return_value", "test_pass_callback", "test_empty_iterator", "test_coroutine_sequence_handler", "test_key_mismatch_tuple", "run_gen", "test_task_transfer_stack_context", "test_sync_gen_return", "test_exception_in_yield", "context", "test_none", "test_exception_handler", "test_py3_leak_exception_context", "test_async_gen_return", "inner", "test_sync_return_no_value", "test_arguments", "test_sequence_handler", "test_undecorated_coroutines", "test_swallow_yieldpoint_exception", "test_is_coroutine_function", "test_orphaned_callback", "test_multi_performance", "test_multi_exceptions", "test_timeout_concurrent_future", "async_future", "test_multi_future_duplicate", "test_coroutine_unfinished_sequence_handler", "test_leaked_callback_tuple", "test_return_value", "test_with_arg", "step2", "test_task", "test_async_raise_return_value", "test_inline_cb", "test_stack_context_leak", "test_already_resolved", "test_completes_before_timeout", "test_already_done", "test_moment", "tester", "test_exception_phase2", "test_multi", "test_async_raise_return", "test_exception_in_task_phase2", "test_multi_mixed_types"], "function_calls": ["Exception", "HTTPError", "url_escape", "super", "exec", "Foo", "RuntimeError", "dict", "f2", "inner", "KeyError", "coro", "exec_test", "AsyncHTTPClient", "globals", "Future", "Application", "f1", "range", "str", "callback", "locals", "f", "ValueError", "isinstance", "len", "LeakedException", "ExpectLog", "ZeroDivisionError", "tester", "_stack_depth"], "class_names": ["LeakedException", "GenCoroutineTest", "NativeCoroutineHandler", "GenExceptionHandler", "GenTaskHandler", "UndecoratedCoroutinesHandler", "Foo", "GenSequenceHandler", "RunnerGCTest", "GenCoroutineExceptionHandler", "WithTimeoutTest", "GenCoroutineUnfinishedSequenceHandler", "AsyncPrepareErrorHandler", "GenEngineTest", "GenYieldExceptionHandler", "WaitIteratorTest", "GenCoroutineSequenceHandler", "GenWebTest"], "class_method_calls": ["response.body", "self.get_url", "self.fail", "futures.ThreadPoolExecutor", "io_loop.add_callback", "result.args", "dg.done", "self.finish", "unittest.skipIf", "f.__name__", "calls.append", "gen.Callback", "gen.engine", "contextlib.contextmanager", "self.assertRaises", "gen.with_timeout", "f2.set_result", "self.request", "gen.Wait", "f3.set_result", "gen.Return", "self.named_context", "gen.coroutine", "self.async_future", "dg.current_future", "self.orphaned_callback", "g.current_index", "client.fetch", "datetime.timedelta", "gen.WaitAll", "gen.TimeoutError", "gen.Multi", "self.io_loop", "gen.Arguments", "self.function_with_stack_context", "dg.next", "gen.BadYieldError", "dg.current_index", "future.set_result", "gen.moment", "self.fetch", "IOLoop.current", "response.code", "sys.version_info", "e.__context__", "gen.KeyReuseError", "weakref.ref", "self.run_gen", "stack_context.StackContext", "self.delay_callback", "self.arg_ref", "gen.Task", "f1.set_result", "future.set_exception", "gen.is_coroutine_function", "immediate.set_result", "self.finished", "self.wait", "self.assertIsNone", "self.assertFalse", "self.task_ref", "self.async_exception", "g.current_future", "coro.__module__", "self.get_argument", "gen.UnknownKeyError", "f.__module__", "head.old_contexts", "self.assertTrue", "self.named_contexts", "textwrap.dedent", "gen.sleep", "functools.partial", "time.sleep", "time.time", "g.done", "gc.collect", "self.local_ref", "stack_context._state", "self.assertEqual", "self.write", "self.finish_coroutines", "executor.submit", "coro.__wrapped__", "coro.__name__", "g.next", "unittest.main", "gen.LeakedCallbackError", "result.kwargs", "self.chunks", "response.rethrow", "cm.exception", "self.assertIs", "self.stop", "gen.WaitIterator", "gen.ReturnValueIgnoredError", "self.assertLess", "gen.multi_future"]}, "extract_me.py": {"libraries": ["__future__.absolute_import", "__future__.division", "__future__.print_function"], "function_names": [], "function_calls": ["_", "pgettext"], "class_names": [], "class_method_calls": []}, "http1connection_test.py": {"libraries": ["salt.ext.tornado.iostream.IOStream", "salt.ext.tornado.netutil.add_accept_handler", "socket", "salt.ext.tornado.locks.Event", "salt.ext.tornado.http1connection.HTTP1Connection", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.httputil.HTTPMessageDelegate", "salt.ext.tornado.testing.AsyncTestCase", "salt.ext.tornado.testing.bind_unused_port", "salt.ext.tornado.testing.gen_test"], "function_names": ["data_received", "test_http10_no_content_length", "headers_received", "finish", "accept_callback", "asyncSetUp", "setUp"], "function_calls": ["add_accept_handler", "HTTP1Connection", "super", "Event", "IOStream", "bind_unused_port", "Delegate"], "class_names": ["Delegate", "HTTP1ConnectionTest"], "class_method_calls": ["test.code", "listener.close", "self.client_stream", "self.code", "socket.socket", "conn.read_response", "self.addCleanup", "start_line.code", "event.wait", "self.asyncSetUp", "self.assertEqual", "event.set", "body.append", "self.server_stream", "self.io_loop"]}, "httpclient_test.py": {"libraries": ["salt.ext.tornado.httpclient.HTTPClient", "functools", "io.BytesIO", "salt.ext.tornado.web.RequestHandler", "salt.ext.tornado.test.util.unittest", "salt.ext.tornado.testing.bind_unused_port", "salt.ext.tornado.stack_context.NullContext", "salt.ext.tornado.testing.ExpectLog", "salt.ext.tornado.httputil.HTTPHeaders", "salt.ext.tornado.testing.AsyncHTTPTestCase", "salt.ext.tornado.ioloop.IOLoop", "__future__.absolute_import", "salt.ext.tornado.httpserver.HTTPServer", "salt.ext.tornado.escape.native_str", "salt.ext.tornado.testing.gen_test", "salt.ext.tornado.httputil.format_timestamp", "salt.ext.tornado.httpclient.HTTPRequest", "salt.ext.tornado.httpclient._RequestProxy", "salt.ext.tornado.log.gen_log", "__future__.division", "salt.ext.tornado.httpclient.HTTPResponse", "salt.ext.tornado.stack_context.ExceptionStackContext", "salt.ext.tornado.httpclient.HTTPError", "threading", "salt.ext.tornado.escape.utf8", "salt.ext.tornado.gen", "binascii", "contextlib.closing", "salt.ext.tornado.web.Application", "salt.ext.tornado.iostream.IOStream", "salt.ext.tornado.web.url", "salt.ext.tornado.test.util.skipOnTravis", "__future__.print_function", "sys", "base64", "datetime", "salt.ext.tornado.netutil", "copy"], "function_names": ["test_future_http_error_no_raise", "test_str", "test_error_with_response", "test_hello_world", "test_credentials_in_url", "test_patch_receives_payload", "tearDown", "streaming_cb", "test_plain_error", "test_copy", "test_basic_auth", "test_post", "test_final_callback_stack_context", "test_neither_set", "test_unsupported_auth_mode", "post", "test_body", "test_all_methods", "streaming_callback", "test_follow_redirect", "accept_callback", "test_default_set", "test_headers", "test_non_ascii_header", "test_body_sanity_checks", "put", "test_sync_client_error", "_clear_headers_for_304", "test_bad_attribute", "test_header_types", "test_header_callback", "test_chunked_close", "test_future_http_error", "test_body_encoding", "test_body_setter", "test_304_with_content_length", "test_multi_line_headers", "get_url", "test_header_callback_stack_context", "test_sync_client", "stop_server", "test_if_modified_since", "test_defaults_none", "write_response", "test_chunked", "test_configure_defaults", "test_basic_auth_explicit_mode", "method", "handle_callback_exception", "test_null_headers_setter", "test_headers_setter", "test_put_307", "setUp", "test_streaming_callback", "get_app", "test_request_set", "test_both_set", "get", "test_reuse_request_from_response", "header_callback", "prepare", "error_handler", "test_types", "test_streaming_stack_context", "test_future_interface", "patch"], "function_calls": ["HTTPError", "dict", "container", "int", "IOLoop", "HTTPClient", "type", "ExceptionStackContext", "utf8", "repr", "zip", "Application", "HTTPServer", "str", "closing", "_RequestProxy", "format_timestamp", "bind_unused_port", "isinstance", "len", "ExpectLog", "NullContext", "HTTPResponse", "BytesIO", "HTTPRequest", "IOStream", "url", "native_str"], "class_names": ["AllMethodsHandler", "SyncHTTPClientTest", "ChunkHandler", "UserAgentHandler", "PostHandler", "RedirectHandler", "HTTPRequestTestCase", "CountdownHandler", "HelloWorldHandler", "PatchHandler", "AuthHandler", "EchoPostHandler", "HTTPResponseTestCase", "ContentLength304Handler", "RequestProxyTest", "PutHandler", "SetHeaderHandler", "HTTPErrorTestCase", "HTTPClientCommonTestCase"], "class_method_calls": ["client.close", "response.body", "self.get_url", "resp.body", "self.server_ioloop", "stream.write", "self.server", "self.finish", "proxy.auth_username", "copy.copy", "resp.code", "self.set_header", "self.assertRaises", "self.request", "k.lower", "sock.fileno", "unittest.TestCase", "gen.coroutine", "self.assertIsNot", "self.reverse_url", "resp.rethrow", "v.strip", "e2.code", "proxy.user_agent", "self.redirect", "self.flush", "exc_info.append", "e.code", "context.exception", "self.assertRegexpMatches", "client.fetch", "stream.read_until", "unittest.SkipTest", "first_line.append", "base64.b64encode", "proxy.proxy_host", "self.io_loop", "RequestHandler.SUPPORTED_METHODS", "self.fetch", "resp.headers", "response.code", "proxy.foo", "assertion.exception", "threading.Thread", "sys.exc_info", "self.skipTest", "response.effective_url", "self.wait", "self.assertFalse", "request.headers", "header_line.lower", "self.get_argument", "response2.body", "self.http_client", "self.assertTrue", "gen.sleep", "functools.partial", "response.headers", "response.request_time", "s.startswith", "IOLoop.configured_class", "proxy.network_interface", "self.assertEqual", "request.body", "self.write", "binascii.a2b_hex", "header_line.split", "self.assertIn", "header_line.startswith", "netutil.add_accept_handler", "response.rethrow", "cm.exception", "self.assertIs", "self.server_thread", "self.stop", "chunks.append", "response.request", "self.set_status", "self.port", "stream.close", "datetime.datetime", "self.get_arguments"]}, "httpserver_test.py": {"libraries": ["salt.ext.tornado.httputil.ResponseStartLine", "salt.ext.tornado.escape.recursive_unicode", "os", "io.BytesIO", "salt.ext.tornado.escape._unicode", "salt.ext.tornado.web.RequestHandler", "salt.ext.tornado.test.util.unittest", "salt.ext.tornado.testing.ExpectLog", "ssl", "tempfile", "salt.ext.tornado.escape.json_encode", "salt.ext.tornado.httputil.HTTPHeaders", "salt.ext.tornado.testing.AsyncHTTPTestCase", "salt.ext.tornado.web.asynchronous", "salt.ext.tornado.http1connection.HTTP1Connection", "__future__.absolute_import", "salt.ext.tornado.httpserver.HTTPServer", "shutil", "salt.ext.tornado.httputil.HTTPServerConnectionDelegate", "salt.ext.tornado.escape.native_str", "salt.ext.tornado.testing.gen_test", "socket", "salt.ext.tornado.escape.json_decode", "salt.ext.tornado.log.gen_log", "salt.ext.tornado.simple_httpclient.SimpleAsyncHTTPClient", "__future__.division", "salt.ext.tornado.httputil.HTTPMessageDelegate", "salt.ext.tornado.testing.AsyncTestCase", "salt.ext.tornado.gen", "salt.ext.tornado.escape.utf8", "salt.ext.tornado.web.stream_request_body", "salt.ext.tornado.testing.AsyncHTTPSTestCase", "salt.ext.tornado.web.Application", "contextlib.closing", "salt.ext.tornado.iostream.IOStream", "salt.ext.tornado.test.util.skipOnTravis", "gzip", "__future__.print_function", "sys", "datetime", "salt.ext.tornado.netutil.ssl_options_to_context", "salt.ext.tornado.netutil"], "function_names": ["compress", "tearDown", "test_keepalive_chunked", "test_http10_keepalive", "test_newlines", "test_trusted_downstream", "test_request_close", "test_malformed_body", "connect", "test_unix_socket_bad_request", "test_idle_after_use", "test_scheme_headers", "test_body_size_override_reset", "test_chunked_body", "get_handlers", "test_gzip", "data_received", "headers_received", "setUp", "get_app", "get", "get_ssl_version", "test_large_body_streaming", "test_large_body_streaming_chunked", "test_ssl", "test_chunked_compressed", "test_empty_request", "raw_fetch", "__init__", "test_query_string_encoding", "test_finish_while_closed", "test_error_logging", "get_ssl_options", "fetch_chunk_sizes", "test_unused_connection", "test_large_body_streaming_override", "test_multipart_form", "test_gzip_unsupported", "test_missing_key", "test_empty_post_parameters", "test_pipelined_requests", "test_malformed_headers", "test_compressed_body", "get_httpserver_options", "test_timeout", "start_request", "test_non_ssl_request", "test_pipelined_cancel", "prepare", "test_types", "test_two_requests", "get_http_client", "test_ip_headers", "test_chunked_request_uppercase", "test_http10_keepalive_extra_crlf", "read_headers", "test_empty_query_string", "test_cancel_during_download", "read_response", "fetch_json", "close", "check_type", "post_gzip", "on_connection_close", "test_small_body", "test_large_body_streaming_chunked_override", "test_large_post", "test_chunked_request_body", "test_request_without_xprotocol", "test_legacy_interface", "test_invalid_content_length", "test_missing_arguments", "test_large_headers", "finish", "initialize", "handle_request", "test_http10", "test_manual_protocol", "body_producer", "post", "test_double_slash", "put", "test_uncompressed", "test_regular_body", "test_unix_socket", "read_stream_body", "test_malformed_first_line", "test_100_continue", "test_large_body_buffered", "test_small_headers", "test_large_body_buffered_chunked"], "function_calls": ["Exception", "write", "super", "dict", "App", "list", "int", "sum", "type", "ssl_options_to_context", "json_decode", "utf8", "HTTPHeaders", "Delegate", "ResponseStartLine", "Application", "recursive_unicode", "range", "HTTPServer", "SimpleAsyncHTTPClient", "closing", "str", "callback", "json_encode", "read_stream_body", "NotImplementedError", "chr", "isinstance", "len", "ExpectLog", "getattr", "HTTP1Connection", "hasattr", "_unicode", "float", "BytesIO", "IOStream", "native_str"], "class_names": ["MaxHeaderSizeTest", "FinishOnCloseHandler", "MessageDelegate", "LegacyInterfaceTest", "TypeCheckHandler", "BodyLimitsTest", "App", "StreamingChunkSizeTest", "BadSSLOptionsTest", "Handler", "HelloHandler", "BufferedHandler", "SSLTestMixin", "BaseSSLTest", "HelloWorldRequestHandler", "SSLContextTest", "SSLXHeaderTest", "UnixSocketTest", "HTTPConnectionTest", "TLSv1Test", "LargeHandler", "EchoHandler", "XHeaderTest", "GzipUnsupportedTest", "GzipTest", "HandlerBaseTestCase", "SSLv23Test", "MultipartTestHandler", "IdleTimeoutTest", "GzipBaseTest", "ManualProtocolTest", "SSLv3Test", "HTTPServerRawTest", "KeepAliveTest", "StreamingHandler", "Delegate", "HTTPServerTest"], "class_method_calls": ["first_line.startswith", "gzfile.close", "response.body", "self.compress", "self.get_url", "data.startswith", "stream.write", "self.server", "StreamingChunkSizeTest.MessageDelegate", "self.finish", "gzfile.write", "stream.read_bytes", "unittest.skipIf", "XHeaderTest.Handler", "self.http_version", "self.bytes_read", "self.get_ssl_version", "stream.set_close_callback", "self.assertRaises", "ssl.PROTOCOL_TLSv1", "self.request", "self.read_headers", "ssl.PROTOCOL_SSLv3", "unittest.TestCase", "netutil.bind_unix_socket", "self.connection", "header_data.decode", "self.flush", "socket.socket", "self.fetch_chunk_sizes", "self.headers", "stream.read_until", "datetime.timedelta", "self.io_loop", "self.check_type", "expect_log.logged_stack", "self.__class__", "self.errors", "self.fetch", "response.code", "stream.connect", "self.expected_protocol", "os.path", "request.write", "header_bytes.decode", "HTTPHeaders.parse", "ssl.PROTOCOL_SSLv23", "request.finish", "self.post_gzip", "gen.Task", "self.skipTest", "tempfile.mkdtemp", "self.raw_fetch", "stream.read_until_close", "self.wait", "self.assertLessEqual", "self.BODY", "self.assertFalse", "sys.platform", "request.version", "socket.AF_UNIX", "self.get_argument", "self.http_client", "self.fetch_json", "self.get_http_port", "AsyncHTTPSTestCase.get_ssl_options", "conn.read_response", "self.assertTrue", "self.stream", "gzip_file.write", "gzip_file.close", "self.close", "self.get_handlers", "self.assertEqual", "self.write", "gzip.GzipFile", "bytesio.getvalue", "self.chunk_lengths", "self.streams", "shutil.rmtree", "self.tmpdir", "self.assertIn", "self.http1", "response.rethrow", "self.stop", "self.connect", "request.connection", "chunks.append", "ssl.SSLContext", "self.read_response", "self.sockfile", "self.assertEquals", "stream.close", "self.assertGreater", "self.CHUNK_SIZE", "newline.join"]}, "httputil_test.py": {"libraries": ["salt.ext.tornado.httputil.parse_multipart_form_data", "salt.ext.tornado.test.util.unittest", "salt.ext.tornado.testing.ExpectLog", "salt.ext.tornado.httputil.HTTPHeaders", "salt.ext.tornado.httputil.parse_request_start_line", "time", "salt.ext.tornado.httputil.parse_cookie", "__future__.absolute_import", "salt.ext.tornado.escape.native_str", "salt.ext.tornado.httputil.format_timestamp", "salt.ext.tornado.httputil.HTTPServerRequest", "salt.ext.tornado.log.gen_log", "__future__.division", "logging", "salt.ext.tornado.escape.utf8", "salt.ext.tornado.httputil.url_concat", "__future__.print_function", "pickle", "datetime", "copy"], "function_names": ["test_unquoted_names", "test_url_concat_none_params", "test_python_cookies", "test_cookie_edgecases", "test_copy", "test_parse_request_start_line", "check", "test_setdefault", "test_url_concat_multi_same_params", "test_url_concat_trailing_q", "test_url_concat_encode_args", "test_url_concat_no_params", "test_url_concat_q_with_no_trailing_amp", "test_url_concat_trailing_amp", "test_data_after_final_boundary", "test_boundary_starts_and_ends_with_quotes", "test_url_concat_with_frag", "test_default_constructor", "test_body_is_a_byte_string", "test_string", "test_datetime", "test_multi_line", "test_time_tuple", "test_url_concat_mult_params", "test_struct_time", "test_url_concat_multi_same_query_params", "test_content_disposition_header_without_name_parameter", "test_url_concat_no_query_params", "test_url_concat_dict_params", "test_invalid_cookies", "test_invalid_content_disposition", "test_missing_headers", "test_optional_cr", "test_unicode_newlines", "test_pickle_roundtrip", "test_unix_time_int", "test_file_upload", "test_special_filenames", "test_line_does_not_end_with_correct_line_break", "test_unix_time_float"], "function_calls": ["len", "native_str", "ExpectLog", "int", "sorted", "str", "parse_cookie", "parse_request_start_line", "url_concat", "dict", "parse_multipart_form_data", "utf8", "HTTPServerRequest", "HTTPHeaders", "tuple", "list", "format_timestamp"], "class_names": ["HTTPServerRequestTest", "ParseRequestStartLineTest", "ParseCookieTest", "TestUrlConcat", "MultipartFormDataTest", "FormatTimestampTest", "HTTPHeadersTest"], "class_method_calls": ["unittest.TestCase", "encoded.decode", "self.PATH", "self.VERSION", "self.METHOD", "self.assertIsNot", "h1.copy", "pickle.loads", "parsed_start_line.path", "self.assertEqual", "headers.get_list", "self.assertIsInstance", "logging.debug", "unpickled.get_all", "parsed_start_line.version", "newline.encode", "filename.replace", "self.assertIn", "copy.copy", "h1.get_list", "time.gmtime", "headers.items", "headers.get_all", "self.check", "copy.deepcopy", "parsed_start_line.method", "requets.body", "self.EXPECTED", "unpickled.items", "data.decode", "self.TIMESTAMP", "h1.add", "data.replace", "gen_log.warning", "self.assertEquals", "pickle.dumps", "headers.setdefault", "headers.add", "datetime.datetime", "HTTPHeaders.parse"]}, "import_test.py": {"libraries": ["salt.ext.tornado.autoreload", "salt.ext.tornado.curl_httpclient", "salt.ext.tornado.httpclient", "salt.ext.tornado.tcpclient", "salt.ext.tornado.process", "pycurl", "salt.ext.tornado.options", "salt.ext.tornado.test.util.unittest", "salt.ext.tornado.log", "salt.ext.tornado.simple_httpclient", "salt.ext.tornado.httpserver", "salt.ext.tornado.template", "__future__.absolute_import", "salt.ext.tornado.ioloop", "salt.ext.tornado.stack_context", "salt.ext.tornado.web", "salt.ext.tornado.concurrent", "salt.ext.tornado.iostream", "salt.ext.tornado.http1connection", "__future__.division", "salt.ext.tornado.websocket", "salt.ext.tornado.httputil", "salt.ext.tornado.locale", "salt.ext.tornado.gen", "salt.ext.tornado.util", "salt.ext.tornado.tcpserver", "salt.ext.tornado.auth", "salt.ext.tornado.escape", "__future__.print_function", "salt.ext.tornado.testing", "salt.ext.tornado.netutil", "salt.ext.tornado.wsgi"], "function_names": ["test_import_pycurl", "test_import_everything"], "function_calls": [], "class_names": ["ImportTest"], "class_method_calls": ["unittest.TestCase"]}, "ioloop_test.py": {"libraries": ["salt.ext.tornado.test.util.exec_test", "functools", "salt.ext.tornado.stack_context.StackContext", "salt.ext.tornado.test.util.unittest", "salt.ext.tornado.testing.bind_unused_port", "salt.ext.tornado.stack_context.NullContext", "salt.ext.tornado.testing.ExpectLog", "concurrent.futures", "salt.ext.tornado.ioloop.PeriodicCallback", "contextlib", "salt.ext.tornado.ioloop.TimeoutError", "time", "salt.ext.tornado.ioloop.IOLoop", "__future__.absolute_import", "salt.ext.tornado.platform.select._Select", "types", "salt.ext.tornado.log.app_log", "socket", "__future__.division", "salt.ext.tornado.testing.AsyncTestCase", "salt.ext.tornado.test.util.skipBefore35", "salt.ext.tornado.stack_context.ExceptionStackContext", "threading", "salt.ext.tornado.gen", "salt.ext.tornado.stack_context.wrap", "salt.ext.tornado.ioloop.PollIOLoop", "salt.ext.tornado.test.util.skipOnTravis", "__future__.print_function", "salt.ext.tornado.test.util.skipIfNonUnix", "sys", "datetime"], "function_names": ["poll", "test_exception_logging_native_coro", "__init__", "tearDown", "test_remove_without_add", "schedule_callback", "test_async_exception", "handler", "context", "test_overrun", "test_handler_callback_file_object", "test_add_future_stack_context", "handle_connection", "time", "test_add_callback_return_sequence", "test_add_future_threads", "test_remove_timeout_after_fire", "test_sync_result", "handle_exception", "close", "test_multiple_add", "test_add_callback_from_signal", "test_remove_timeout_cleanup", "t1", "test_pre_wrap_with_args", "fileno", "test_timeout_with_arguments", "test_exception_logging_future", "handle_read", "test_add_timeout_return", "test_add_callback_from_signal_other_thread", "test_native_coroutine", "test_pre_wrap", "test_call_later_return", "f1", "test_default_current", "test_call_at_return", "test_add_callback_wakeup_other_thread", "callback", "cb", "test_current", "f", "task", "handle_callback_exception", "test_handle_callback_exception", "test_force_current", "setUp", "test_basic", "target", "test_mixed_fd_fileobj", "test_remove_handler_from_handler", "test_read_while_writeable", "test_sync_exception", "test_reentrant", "test_add_callback_while_closing", "test_timeout", "test_close_file_object", "test_spawn_callback", "test_add_timeout_timedelta", "test_add_callback_wakeup", "test_non_current", "t2", "sleep", "initialize", "test_remove_timeout_from_timeout", "add_callback", "test_exception_logging", "test_async_result"], "function_calls": ["Exception", "super", "IOLoop", "ExceptionStackContext", "StackContext", "wrap", "exec_test", "globals", "range", "str", "locals", "bind_unused_port", "old_add_callback", "SocketWrapper", "ExpectLog", "NullContext", "PeriodicCallback", "FakeTimeSelect", "FakeTimeIOLoop"], "class_names": ["TestIOLoopCurrent", "TestPeriodicCallback", "TestIOLoopAddCallback", "FakeTimeSelect", "SocketWrapper", "FakeTimeIOLoop", "TestIOLoop", "TestIOLoopAddCallbackFromSignal", "TestIOLoopRunSync", "TestIOLoopFutures"], "class_method_calls": ["client.close", "self.assertAlmostEqual", "conn.close", "futures.ThreadPoolExecutor", "self.current_io_loop", "fd.recv", "unittest.skipIf", "calls.append", "pool.submit", "contextlib.contextmanager", "self.calls", "sleep_durations.pop", "self.assertRaises", "self.active_contexts", "contextlib.closing", "self.fts", "results.append", "sock.fileno", "IOLoop.READ", "unittest.TestCase", "fds.append", "gen.Return", "ready.wait", "client.fileno", "gen.coroutine", "server.send", "pc.start", "loop.add_callback", "other_ioloop.add_callback", "socket.socket", "datetime.timedelta", "other_ioloop.add_callback_from_signal", "io_loop2.close", "unittest.SkipTest", "self.context", "ready.set", "self.sockobj", "self.io_loop", "gen.BadYieldError", "socket_wrapper.closed", "client.send", "IOLoop.current", "self.add_callback", "other_ioloop.stop", "other_ioloop.start", "threading.Thread", "server_sock.fileno", "types.MethodType", "self.stop_time", "server_sock.accept", "socket.socketpair", "server.close", "loop.start", "sys.exc_info", "other_ioloop.close", "io_loop.close", "ready.isSet", "gen.Task", "thread.join", "self._time", "self.future", "io_loop.add_handler", "self.wait", "loop.stop", "self.assertIsNone", "closing.wait", "self.assertFalse", "thread.start", "self.assertTrue", "test.calls", "functools.partial", "time.sleep", "time.time", "IOLoop.configured_class", "self.assertEqual", "threading.Event", "self.assertNotIn", "self.exception", "future.done", "client_sock.connect", "self.assertIn", "closing.set", "unittest.main", "self.called", "self.closed", "server_sock.close", "self.assertIs", "self.stop", "sock.close", "chunks.append", "loop.add_timeout", "IOLoop.clear_current", "future.result", "self.assertLess", "self.start_time"]}, "iostream_test.py": {"libraries": ["salt.ext.tornado.concurrent.Future", "os", "salt.ext.tornado.tcpserver.TCPServer", "salt.ext.tornado.web.RequestHandler", "salt.ext.tornado.netutil.ssl_wrap_socket", "salt.ext.tornado.test.util.unittest", "salt.ext.tornado.testing.bind_unused_port", "salt.ext.tornado.stack_context.NullContext", "salt.ext.tornado.testing.ExpectLog", "ssl", "salt.ext.tornado.httputil.HTTPHeaders", "salt.ext.tornado.testing.AsyncHTTPTestCase", "salt.ext.tornado.test.util.skipPypy3V58", "mock", "errno", "salt.ext.tornado.iostream.SSLIOStream", "__future__.absolute_import", "salt.ext.tornado.testing.gen_test", "salt.ext.tornado.log.app_log", "socket", "salt.ext.tornado.log.gen_log", "unittest.mock", "__future__.division", "salt.ext.tornado.testing.AsyncTestCase", "logging", "salt.ext.tornado.iostream.PipeIOStream", "salt.ext.tornado.gen", "salt.ext.tornado.testing.AsyncHTTPSTestCase", "salt.ext.tornado.iostream.StreamClosedError", "salt.ext.tornado.web.Application", "salt.ext.tornado.iostream.IOStream", "__future__.print_function", "salt.ext.tornado.test.util.skipIfNonUnix", "sys", "platform", "salt.ext.tornado.test.util.refusing_port", "salt.ext.tornado.netutil"], "function_names": ["test_async_read_error_logging", "test_read_until_regex_max_bytes", "tearDown", "connected_callback", "produce", "test_close_buffered_data", "client_task", "write_callback", "test_streaming_read_until_close_after_close", "test_streaming_callback_with_data_in_buffer", "make_iostream_pair", "test_start_tls_smtp", "consume", "test_wait_for_handshake_already_waiting_error", "test_write_while_connecting", "setUp", "test_inline_read_error", "get_app", "test_read_until_max_bytes_ignores_extra", "get", "test_read_until_regex_max_bytes_ignores_extra", "_server_ssl_options", "final_callback", "test_read_until_max_bytes", "test_streaming_until_close", "test_connection_closed", "test_pipe_iostream", "test_read_until_close_after_close", "test_delayed_close_callback", "test_read_until_close_with_error", "test_read_until_max_bytes_inline", "test_close_callback_with_pending_read", "server_task", "streaming_callback", "test_wait_for_handshake_already_connected", "handle_connection", "connect_to_server", "test_read_bytes_partial", "server_start_tls", "test_write_memoryview", "test_handshake_fail", "test_gaierror", "handshake2_done", "test_future_close_while_reading", "closed_callback", "test_streaming_callback", "test_small_read_untils_from_large_buffer", "server_send_line", "test_read_until_close", "accept", "test_write_zero_bytes", "test_future_interface", "test_connection_refused", "test_future_delayed_close_callback", "test_future_close_callback", "test_flow_control", "test_small_reads_from_large_buffer", "handle_stream", "connect_callback", "client_start_tls", "test_read_zero_bytes", "f", "test_pipe_iostream_big_write", "main", "callback2", "test_future_write", "test_wait_for_handshake_callback", "test_read_callback_error", "test_read_until_regex_max_bytes_inline", "test_check_hostname", "test_streaming_until_close_future", "handshake_done", "accept_callback", "test_wait_for_handshake_future", "callback1", "client_send_line", "fake_read_from_fd", "test_large_read_until", "close_callback", "test_future_read_until_close", "_make_server_iostream", "_make_client_iostream"], "function_calls": ["super", "dict", "server_task", "produce", "IOError", "memoryview", "int", "PipeIOStream", "client_task", "server_cls", "all", "Future", "Application", "refusing_port", "range", "ssl_wrap_socket", "f", "consume", "NotImplementedError", "bind_unused_port", "isinstance", "len", "ExpectLog", "hasattr", "NullContext", "_server_ssl_options", "print", "IOStream", "SSLIOStream"], "class_names": ["TestServer", "HelloHandler", "TestIOStreamWebHTTP", "WaitForHandshakeTest", "TestPipeIOStream", "TestIOStreamSSLContext", "TestIOStreamStartTLS", "TestIOStreamMixin", "TestIOStreamSSL", "TestIOStreamWebHTTPS", "TestIOStreamWebMixin", "TestIOStream"], "class_method_calls": ["self._make_server_iostream", "self.assertIsNotNone", "client.close", "ssl.wrap_socket", "self.fail", "server.read_until_close", "data.startswith", "client.read_until_regex", "self.assertIsInstance", "stream.error", "logging.debug", "stream.write", "stream.read_bytes", "unittest.skipIf", "server.read_bytes", "stream.set_close_callback", "socket.AF_INET", "client.read_bytes", "self.assertRaises", "errno.ECONNREFUSED", "test.assertRaises", "test.io_loop", "self.make_iostream_pair", "stream.wait_for_handshake", "test.assertIsNotNone", "server.socket", "client_stream.start_tls", "ssl.SSLError", "mock.patch", "gen.coroutine", "errno.EIO", "os.close", "context.load_cert_chain", "self.connect_called", "server.error", "server.read_until", "header_data.decode", "data.endswith", "socket.socket", "self.client_stream", "stream.read_until", "unittest.SkipTest", "socket.gaierror", "self.server_stream", "self.io_loop", "rs.read_bytes", "client.connect", "ws.close", "client.set_close_callback", "stream.socket", "test.assertIsNone", "self.fetch", "stream.connect", "socket.SOCK_STREAM", "self._make_client_iostream", "os.path", "HTTPHeaders.parse", "ssl.PROTOCOL_SSLv23", "handshake_future.set_result", "server.close", "platform.python_implementation", "server.__class__", "client.read_until", "stream.read_until_close", "streaming_data.append", "self.wait", "ssl.create_default_context", "self.assertFalse", "sys.platform", "ws.write", "self.handle_connection", "self.get_http_port", "listener.close", "self.listener", "self.client_send_line", "self.assertRaisesRegexp", "self.assertTrue", "self.stream", "rs.read_until_close", "gen.sleep", "socket.error", "self.connect_to_server", "self.addCleanup", "final_called.append", "self.assertEqual", "self.write", "rs.read_until", "self.client_start_tls", "self.accept", "client.read_until_close", "server_stream.start_tls", "errno.WSAECONNREFUSED", "netutil.add_accept_handler", "os.pipe", "response.rethrow", "server.write", "client_stream.connect", "client.socket", "self.assertIs", "server.add_socket", "self.server_send_line", "self.stop", "self.server_accepted", "server.set_close_callback", "self.handshake_done", "server.stop", "chunks.append", "ssl.SSLContext", "server.read_from_fd", "self.handshake2_done", "rs.close", "ssl.CERT_NONE", "client.write", "stream.close", "self.port", "self.server_start_tls", "listener.fileno"]}, "locale_test.py": {"libraries": ["salt.ext.tornado.escape.to_unicode", "salt.ext.tornado.util.unicode_type", "os", "salt.ext.tornado.escape.utf8", "salt.ext.tornado.test.util.skipOnAppEngine", "__future__.absolute_import", "__future__.division", "__future__.print_function", "shutil", "salt.ext.tornado.test.util.unittest", "datetime", "salt.ext.tornado.locale", "tempfile"], "function_names": ["test_friendly_number", "test_csv", "test_list", "tearDown", "clear_locale_cache", "test_format_date", "test_csv_bom", "test_format_day", "test_non_ascii_name", "test_gettext", "setUp"], "function_calls": ["to_unicode", "hasattr", "getattr", "utf8", "isinstance", "setattr", "open"], "class_names": ["EnglishTest", "TranslationLoaderTest", "LocaleDataTest"], "class_method_calls": ["date.month", "unittest.TestCase", "locale.format_day", "self.assertEqual", "self.assertIsInstance", "TranslationLoaderTest.SAVE_VARS", "self.saved", "f.write", "shutil.rmtree", "char_data.encode", "tempfile.mkdtemp", "datetime.timedelta", "locale.list", "date.day", "locale._weekdays", "locale._months", "locale.format_date", "salt.ext", "locale.friendly_number", "date.year", "self.clear_locale_cache", "f.read", "self.assertTrue", "locale.pgettext", "locale.translate", "os.path", "date.weekday", "datetime.datetime"]}, "locks_test.py": {"libraries": ["salt.ext.tornado.locks", "salt.ext.tornado.test.util.exec_test", "__future__.absolute_import", "__future__.division", "__future__.print_function", "datetime.timedelta", "salt.ext.tornado.gen.TimeoutError", "salt.ext.tornado.testing.AsyncTestCase", "salt.ext.tornado.test.util.unittest", "salt.ext.tornado.test.util.skipBefore35", "salt.ext.tornado.testing.gen_test", "salt.ext.tornado.gen"], "function_names": ["test_notify_1", "test_acquire_release", "test_acquire_fifo_async_with", "test_event_set_multiple", "test_repr", "test_acquire_timeout_preempted", "test_release_unacquired", "test_context_manager_timeout", "test_multi_release", "record_done", "test_acquire_timeout", "test_notify_n", "test_negative_value", "test_context_manager", "test_notify_n_with_timeout", "test_nested_notify", "test_acquire", "test_yield_sem", "test_event", "test_wait_timeout", "test_notify", "test_context_manager_contended", "test_event_timeout", "callback", "test_context_manager_async_await", "f", "test_context_manager_exception", "test_event_wait_clear", "setUp", "test_context_manager_timeout_error", "test_acquire_fifo", "test_yield_lock", "test_notify_all", "test_garbage_collection", "test_notify_all_with_timeout", "test_context_manager_misuse", "test_wait_timeout_preempted"], "function_calls": ["len", "range", "any", "super", "str", "locals", "f", "repr", "exec_test", "timedelta", "all", "globals", "list"], "class_names": ["SemaphoreContextManagerTest", "EventTest", "BoundedSemaphoreTest", "LockTests", "ConditionTest", "SemaphoreTest"], "class_method_calls": ["f0.done", "c.notify", "gen.coroutine", "future.add_done_callback", "c.notify_all", "e.is_set", "locks.BoundedSemaphore", "f2.done", "lock.release", "self.assertEqual", "self.assertNotIn", "f.done", "locks.Semaphore", "c.wait", "e.clear", "expected_history.extend", "future_2.done", "future_1.done", "future.done", "self.assertIn", "gen.TimeoutError", "unittest.main", "event.set", "self.record_done", "self.io_loop", "gen.BadYieldError", "self.assertFalse", "self.assertRaises", "sem.release", "history.append", "sem._waiters", "f1.done", "e.wait", "self.history", "locks.Condition", "c._waiters", "locks.Lock", "future.result", "self.assertTrue", "e.set", "gen.sleep", "future_0.done", "sem.acquire", "locks.Event", "lock.acquire"]}, "log_test.py": {"libraries": ["os", "salt.ext.tornado.test.util.unittest", "tempfile", "contextlib", "salt.ext.tornado.options.OptionParser", "salt.ext.tornado.util.basestring_type", "warnings", "__future__.absolute_import", "glob", "re", "__future__.division", "logging", "salt.ext.tornado.log.define_logging_options", "salt.ext.tornado.escape.utf8", "salt.ext.tornado.log.LogFormatter", "salt.ext.tornado.log.enable_pretty_logging", "__future__.print_function", "sys", "subprocess"], "function_names": ["test_unicode_logging", "tearDown", "test_bytes_logging", "test_tornado_default", "ignore_bytes_warning", "test_utf8_logging", "test_log_file_with_timed_rotating", "get_output", "test_log_file", "test_bytes_exception_logging", "test_disable_override", "test_basic_logging", "logs_present", "test_wrong_rotate_mode_value", "setUp", "make_handler", "test_disable_command_line_case_insensitive", "test_disable_code_none", "test_disable_code_string", "test_disable_command_line", "test_default"], "function_calls": ["len", "Exception", "LogFormatter", "super", "OptionParser", "define_logging_options", "utf8", "repr", "issubclass", "ignore_bytes_warning", "enable_pretty_logging", "open"], "class_names": ["EnablePrettyLoggingTest", "UnicodeLogFormatterTest", "LogFormatterTest", "LoggingOptionTest"], "class_method_calls": ["warnings.simplefilter", "unittest.TestCase", "os.unlink", "m.group", "self.options", "proc.communicate", "logging.ERROR", "sys.executable", "self.assertEqual", "subprocess.Popen", "self.assertNotIn", "subprocess.PIPE", "warnings.catch_warnings", "logging.Logger", "self.get_output", "self.assertRegexpMatches", "self.logs_present", "tempfile.mkdtemp", "handler.flush", "handler.close", "self.formatter", "self.tempdir", "self.handler", "re.compile", "proc.returncode", "contextlib.contextmanager", "glob.glob", "self.assertFalse", "self.assertRaises", "LogFormatterTest.LINE_RE", "logging.FileHandler", "subprocess.STDOUT", "os.rmdir", "f.read", "self.assertTrue", "self.logger", "os.path", "self.filename", "self.make_handler"]}, "netutil_test.py": {"libraries": ["os", "salt.ext.tornado.netutil.is_valid_ip", "signal", "salt.ext.tornado.test.util.unittest", "salt.ext.tornado.testing.bind_unused_port", "subprocess.Popen", "salt.ext.tornado.platform.twisted.TwistedResolver", "concurrent.futures", "pycares", "errno", "time", "__future__.absolute_import", "salt.ext.tornado.testing.gen_test", "socket", "__future__.division", "salt.ext.tornado.testing.AsyncTestCase", "twisted.names", "twisted", "salt.ext.tornado.stack_context.ExceptionStackContext", "salt.ext.tornado.platform.caresresolver.CaresResolver", "salt.ext.tornado.netutil.ThreadedResolver", "salt.ext.tornado.test.util.skipIfNoNetwork", "salt.ext.tornado.netutil.bind_sockets", "salt.ext.tornado.netutil.BlockingResolver", "__future__.print_function", "sys"], "function_names": ["test_bad_host", "test_localhost", "test_import", "test_future_interface_bad_host", "tearDown", "test_is_valid_ip", "test_same_port_allocation", "test_reuse_port", "handler", "_failing_getaddrinfo", "test_future_interface", "setUp"], "function_calls": ["Popen", "getattr", "hasattr", "super", "CaresResolver", "BlockingResolver", "ExceptionStackContext", "ThreadedResolver", "bind_unused_port", "bind_sockets", "is_valid_ip", "all", "TwistedResolver"], "class_names": ["BlockingResolverErrorTest", "ThreadedResolverImportTest", "IsValidIPTest", "_ResolverTestMixin", "ThreadedResolverTest", "ThreadedResolverErrorTest", "TwistedResolverTest", "BlockingResolverTest", "TestPortAllocation", "CaresResolverTest", "_ResolverErrorTestMixin"], "class_method_calls": ["unittest.TestCase", "time.sleep", "time.time", "self.fail", "errno.EIO", "sys.executable", "self.assertEqual", "self.assertIsInstance", "socket.getaddrinfo", "self.skipTest", "socket.AF_UNSPEC", "signal.alarm", "unittest.skipIf", "self.assertIn", "socket.gaierror", "popen.poll", "self.wait", "self.io_loop", "os.environ", "sys.platform", "self.stop", "socket.AF_INET", "sock.close", "self.assertRaises", "socket.close", "s.getsockname", "self.assertTrue", "self.resolver", "self.real_getaddrinfo"]}, "options_test.py": {"libraries": ["salt.ext.tornado.util.PY3", "os", "salt.ext.tornado.options.OptionParser", "salt.ext.tornado.util.basestring_type", "unittest.mock", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.test.util.subTest", "salt.ext.tornado.test.util.unittest", "sys", "cStringIO.StringIO", "datetime", "io.StringIO", "salt.ext.tornado.options.Error", "mock"], "function_names": ["test_dash_underscore_file", "test_setattr", "test_setattr_type_check", "test_parse_command_line", "test_iter", "test_error_redefine", "test_subcommand", "test_parse_config_file", "test_group_dict", "test_setattr_with_callback", "test_items", "test_parse_callbacks", "test_multiple_int", "callback", "test_help", "test_mock_patch", "test_setitem", "test_error_redefine_underscore", "test_as_dict", "test_getitem", "test_multiple_string", "test_dash_underscore_introspection", "_sample_options", "test_types", "test_dash_underscore_cli"], "function_calls": ["sorted", "str", "subTest", "set", "OptionParser", "iter", "StringIO"], "class_names": ["OptionsTest"], "class_method_calls": ["unittest.TestCase", "mock.patch", "sys._getframe", "options.groups", "sys.stderr", "self.assertEqual", "options.int", "values.append", "options.username", "self.assertRegexpMatches", "options.mockable", "datetime.timedelta", "unittest.skipIf", "self.assertIn", "options.basestring", "sub_options.parse_command_line", "self.called", "options.as_dict", "base_options.verbose", "options.datetime", "options.parse_config_file", "sub_options.define", "options.help", "options.parse_command_line", "cm.exception", "self.assertFalse", "options.foo_bar", "options.define", "options.group_dict", "options.print_help", "self.assertRaises", "base_options.define", "sub_options.foo", "options.timedelta", "frame.f_code", "base_options.parse_command_line", "options.add_parse_callback", "self._sample_options", "options.port", "options.str", "options.my_path", "options.items", "self.assertTrue", "os.path", "buf.getvalue", "datetime.datetime", "options.foo", "options.float"]}, "process_test.py": {"libraries": ["os", "salt.ext.tornado.httpclient.HTTPClient", "salt.ext.tornado.web.RequestHandler", "signal", "salt.ext.tornado.test.util.unittest", "salt.ext.tornado.testing.bind_unused_port", "salt.ext.tornado.testing.ExpectLog", "salt.ext.tornado.ioloop.IOLoop", "__future__.absolute_import", "salt.ext.tornado.httpserver.HTTPServer", "salt.ext.tornado.process.Subprocess", "salt.ext.tornado.testing.gen_test", "salt.ext.tornado.process.task_id", "salt.ext.tornado.log.gen_log", "salt.ext.tornado.simple_httpclient.SimpleAsyncHTTPClient", "__future__.division", "salt.ext.tornado.testing.AsyncTestCase", "logging", "salt.ext.tornado.httpclient.HTTPError", "salt.ext.tornado.web.Application", "salt.ext.tornado.process.fork_processes", "__future__.print_function", "salt.ext.tornado.test.util.skipIfNonUnix", "sys", "subprocess"], "function_names": ["get_app", "test_sigchild_future", "get", "skip_if_twisted", "tearDown", "test_sigchild_signal", "fetch", "test_wait_for_exit_raise_disabled", "test_stderr", "test_multi_process", "test_wait_for_exit_raise", "test_sigchild", "get_url", "test_close_stdin", "test_subprocess"], "function_calls": ["Application", "ExpectLog", "AssertionError", "super", "Subprocess", "skip_if_twisted", "str", "HTTPServer", "int", "HTTPClient", "fork_processes", "task_id", "bind_unused_port", "fetch", "get_url"], "class_names": ["ProcessTest", "ProcessHandler", "SubprocessTest"], "class_method_calls": ["os.getpid", "unittest.TestCase", "subproc.stdin", "IOLoop.configured_class", "self.addCleanup", "sys.executable", "self.assertEqual", "self.write", "os.kill", "server.add_sockets", "e.code", "client.fetch", "subproc.wait_for_exit", "signal.alarm", "subproc.stderr", "unittest.SkipTest", "Subprocess.initialize", "self.wait", "subproc.returncode", "self.io_loop", "os._exit", "logging.error", "subproc.stdout", "cm.exception", "subproc.proc", "Subprocess.uninitialize", "self.assertFalse", "self.stop", "subproc.set_exit_callback", "signal.SIGTERM", "self.assertRaises", "IOLoop.initialized", "sock.close", "subprocess.STDOUT", "subprocess.CalledProcessError", "Subprocess.STREAM", "self.get_argument", "IOLoop.current", "self.get_app", "self.assertTrue", "subproc.pid", "logging.shutdown", "self.assertNotEqual"]}, "queues_test.py": {"libraries": ["random.random", "salt.ext.tornado.test.util.exec_test", "salt.ext.tornado.queues", "__future__.absolute_import", "__future__.division", "__future__.print_function", "datetime.timedelta", "salt.ext.tornado.gen.TimeoutError", "salt.ext.tornado.testing.AsyncTestCase", "salt.ext.tornado.test.util.unittest", "salt.ext.tornado.test.util.skipBefore35", "salt.ext.tornado.testing.gen_test", "salt.ext.tornado.gen"], "function_names": ["test_put_clears_timed_out_getters", "test_nonblocking_get_exception", "test_producer_consumer", "test_put_timeout_preempted", "test_async_for", "test_get_clears_timed_out_putters", "test_join_empty_queue", "test_put_timeout", "test_put_with_getters", "test_order", "test_get_timeout", "test_repr_and_str", "test_maxsize", "test_blocking_get_wait", "test_nonblocking_put_exception", "test_task_done_underflow", "producer", "test_nonblocking_put_with_getters", "test_blocking_put", "test_task_done_delay", "worker", "test_get_timeout_preempted", "test_get_clears_timed_out_getters", "test_get_with_putters", "test_blocking_put_wait", "consumer", "test_blocking_get", "test_nonblocking_get", "test_task_done", "test_float_maxsize", "test_join_timeout", "test_put_clears_timed_out_putters"], "function_calls": ["hex", "len", "consumer", "range", "any", "producer", "str", "sum", "locals", "id", "random", "worker", "repr", "exec_test", "timedelta", "globals", "list"], "class_names": ["QueueGetTest", "QueueJoinTest", "LifoQueueJoinTest", "QueueBasicTest", "PriorityQueueJoinTest", "QueuePutTest", "ProducerConsumerTest"], "class_method_calls": ["queues.PriorityQueue", "queues.LifoQueue", "q.get", "queues.QueueFull", "put.done", "gen.coroutine", "q._getters", "self.queue_class", "self.assertEqual", "self.assertNotIn", "q.join", "f.done", "q.task_done", "q.put_nowait", "q.empty", "q.full", "q.get_nowait", "self.assertIn", "get.done", "unittest.main", "q_str.startswith", "self.assertIsNone", "self.io_loop", "self.accumulator", "putter.result", "self.assertFalse", "q.put", "self.assertRaises", "gen.moment", "history.append", "q._putters", "queues.Queue", "join.done", "q.maxsize", "self.assertTrue", "put2.done", "gen.sleep", "queues.QueueEmpty", "getter.result"]}, "resolve_test_helper.py": {"libraries": ["salt.ext.tornado.ioloop.IOLoop", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.netutil.ThreadedResolver"], "function_names": [], "function_calls": ["ThreadedResolver"], "class_names": [], "class_method_calls": ["resolver.resolve", "IOLoop.current"]}, "routing_test.py": {"libraries": ["salt.ext.tornado.routing.Router", "salt.ext.tornado.httputil.ResponseStartLine", "salt.ext.tornado.routing.RuleRouter", "salt.ext.tornado.web.HTTPError", "salt.ext.tornado.web.Application", "__future__.absolute_import", "salt.ext.tornado.httputil.HTTPMessageDelegate", "__future__.division", "__future__.print_function", "salt.ext.tornado.httputil.HTTPServerConnectionDelegate", "salt.ext.tornado.routing.HostMatches", "salt.ext.tornado.routing.PathMatches", "salt.ext.tornado.routing.Rule", "salt.ext.tornado.web.RequestHandler", "salt.ext.tornado.wsgi.WSGIContainer", "salt.ext.tornado.httputil.HTTPHeaders", "salt.ext.tornado.testing.AsyncHTTPTestCase", "salt.ext.tornado.routing.ReversibleRouter"], "function_names": ["test_http_method_router", "request_callable", "get_app", "get", "__init__", "reverse_url", "add_routes", "wsgi_app", "_get_named_handler", "test_wsgi_container", "test_custom_router", "start_request", "post", "finish", "find_handler", "test_rule_based_router", "test_basic_router"], "function_calls": ["HTTPError", "super", "CustomRouter", "MessageDelegate", "HostMatches", "RuleRouter", "ConnectionDelegate", "HTTPHeaders", "HTTPMethodRouter", "ResponseStartLine", "Application", "str", "_get_named_handler", "PathMatches", "WSGIContainer", "len", "start_response", "Rule", "CustomApplication", "BasicRouter"], "class_names": ["RuleRouterTest", "BasicRouter", "PostResource", "Handler", "CustomRouter", "ConnectionDelegate", "WSGIContainerTestCase", "MessageDelegate", "CustomRouterTestCase", "CustomApplication", "HTTPMethodRouterTestCase", "GetResource", "HTTPMethodRouter", "BasicRouterTestCase"], "class_method_calls": ["self.application", "request.finish", "response.body", "self.reverse_url", "self.connection", "self.assertEqual", "router.add_routes", "self.write", "request.method", "router.reverse_url", "app.get_handler_delegate", "self.wsgi_app", "self.routes", "self.finish", "app.add_handlers", "request.connection", "request.path", "self.fetch", "response.code", "self.request", "self.app", "request.write"]}, "runtests.py": {"libraries": ["functools.reduce", "salt.ext.tornado.test.util.unittest", "salt.ext.tornado.ioloop.IOLoop", "warnings", "__future__.absolute_import", "salt.ext.tornado.httpserver.HTTPServer", "salt.ext.tornado.platform.auto.monotonic_time", "gc", "salt.ext.tornado.httpclient.AsyncHTTPClient", "__future__.division", "textwrap", "logging", "locale", "salt.ext.tornado.options.define", "salt.ext.tornado.options.options", "salt.ext.tornado.options.add_parse_callback", "__future__.print_function", "operator", "salt.ext.tornado.testing", "sys", "salt.ext.tornado.netutil.Resolver"], "function_names": ["__init__", "configure_ioloop", "run", "filter", "main", "all"], "function_calls": ["getattr", "super", "sorted", "set", "define", "LogCounter", "add_parse_callback", "RuntimeError", "dict", "main", "reduce"], "class_names": ["LogCounter", "TornadoTextTestRunner"], "class_method_calls": ["logging.WARNING", "logging.CRITICAL", "textwrap.fill", "logging.ERROR", "options.ioloop", "operator.or_", "self.error_count", "unittest.TextTestRunner", "logging.Filter", "log_counter.warning_count", "gc.set_debug", "Resolver.configure", "locale.setlocale", "AsyncHTTPClient.configure", "logging.error", "sys.exit", "log_counter.error_count", "record.levelno", "locale.LC_ALL", "salt.ext", "result.skipped", "IOLoop.configure", "HTTPServer.configure", "self.warning_count", "logging.getLogger", "sys.version_info", "unittest.defaultTestLoader", "self.stream", "warnings.filterwarnings", "options.ioloop_time_monotonic"]}, "simple_httpclient_test.py": {"libraries": ["salt.ext.tornado.httputil.ResponseStartLine", "salt.ext.tornado.test.util.exec_test", "os", "salt.ext.tornado.concurrent.Future", "salt.ext.tornado.web.RequestHandler", "salt.ext.tornado.test.util.unittest", "ssl", "salt.ext.tornado.test.httpclient_test", "salt.ext.tornado.test.httpclient_test.ChunkHandler", "salt.ext.tornado.testing.ExpectLog", "salt.ext.tornado.httputil.HTTPHeaders", "salt.ext.tornado.testing.AsyncHTTPTestCase", "salt.ext.tornado.web.asynchronous", "errno", "salt.ext.tornado.ioloop.IOLoop", "salt.ext.tornado.test.util.skipIfNoIPv6", "__future__.absolute_import", "salt.ext.tornado.test.httpclient_test.RedirectHandler", "collections", "salt.ext.tornado.escape.to_unicode", "socket", "salt.ext.tornado.httpclient.AsyncHTTPClient", "salt.ext.tornado.log.gen_log", "re", "salt.ext.tornado.simple_httpclient.SimpleAsyncHTTPClient", "__future__.division", "salt.ext.tornado.testing.AsyncTestCase", "salt.ext.tornado.test.util.skipBefore35", "logging", "salt.ext.tornado.test.httpclient_test.CountdownHandler", "salt.ext.tornado.gen", "contextlib.closing", "salt.ext.tornado.web.stream_request_body", "salt.ext.tornado.testing.AsyncHTTPSTestCase", "salt.ext.tornado.web.Application", "salt.ext.tornado.test.httpclient_test.HelloWorldHandler", "salt.ext.tornado.web.url", "salt.ext.tornado.netutil.bind_sockets", "gzip", "salt.ext.tornado.test.util.skipOnTravis", "__future__.print_function", "sys", "salt.ext.tornado.netutil.Resolver", "salt.ext.tornado.test.util.refusing_port"], "function_names": ["test_header_reuse", "tearDown", "test_ssl_context_handshake_fail", "test_large_body", "body_producer", "xtest_multiple_content_length_accepted", "test_ssl_context", "test_head_request", "test_singleton", "post", "test_hostname_mapping", "test_resolve_timeout", "test_request_timeout", "respond_100", "test_ssl_options", "options", "test_host_header", "test_error_logging", "test_ssl_options_handshake_fail", "test_max_clients", "test_204_no_content", "resolve", "test_small_body", "test_sync_body_producer_content_length", "test_see_other_redirect", "test_max_redirects", "async_body_producer", "test_queue_timeout", "test_100_continue_early_response", "test_streaming_follow_redirects", "test_native_body_producer_chunked", "respond_200", "test_gzip", "test_204_invalid_content_length", "test_sync_body_producer_chunked", "head", "test_native_body_producer_content_length", "test_chunked_with_content_length", "sync_body_producer", "test_large_headers", "test_options_request", "setUp", "test_no_content", "get_app", "test_connect_timeout", "test_async_body_producer_chunked", "test_100_continue", "get", "test_async_body_producer_content_length", "test_ipv6", "test_redirect_connection_limit", "create_client", "test_small_headers", "prepare", "initialize", "test_port_mapping", "test_no_content_length", "test_connection_refused", "respond_204", "get_http_client", "test_connection_limit"], "function_calls": ["Exception", "write", "super", "bind_sockets", "dict", "list", "int", "url", "IOLoop", "set", "exec_test", "HTTPHeaders", "BadResolver", "globals", "Future", "AsyncHTTPClient", "ResponseStartLine", "Application", "refusing_port", "range", "SimpleAsyncHTTPClient", "closing", "str", "locals", "isinstance", "len", "ExpectLog", "hasattr", "TimeoutResolver", "map"], "class_names": ["SeeOtherGetHandler", "MaxHeaderSizeTest", "SeeOtherPostHandler", "RespondInPrepareHandler", "SimpleHTTPClientCommonTestCase", "HostnameMappingTestCase", "TriggerHandler", "HTTP100ContinueTestCase", "NoContentHandler", "SimpleHTTPClientTestMixin", "OptionsHandler", "HeadHandler", "CreateAsyncHTTPClientTestCase", "SimpleHTTPSClientTestCase", "BadResolver", "LargeHeaders", "EchoPostHandler", "HTTP204NoContentTestCase", "SimpleHTTPClientTestCase", "HostEchoHandler", "MaxBodySizeTest", "SmallBody", "MaxBufferSizeTest", "HangHandler", "ChunkedWithContentLength", "LargeBody", "TimeoutResolver", "NoContentLengthHandler", "ResolveTimeoutTestCase", "ContentLengthHandler", "ChunkedWithContentLengthTest", "SmallHeaders"], "class_method_calls": ["response.body", "resp.body", "self.get_url", "self.assertIsInstance", "self.saved", "logging.debug", "stream.write", "self.finish", "self.sync_body_producer", "unittest.skipIf", "self.queue", "re.compile", "h.startswith", "resp.code", "self.set_header", "self.assertRaises", "errno.ECONNREFUSED", "self.request", "client.queue", "f.read", "ctx.verify_mode", "socket.AF_INET6", "ssl.SSLError", "self.assertNotEqual", "res.body", "gen.coroutine", "self.get_protocol", "resp.rethrow", "self.wake_callback", "client.fetch", "os.strerror", "headers.append", "sock.getsockname", "os.name", "self.io_loop", "expect_log.logged_stack", "AsyncHTTPClient._restore_configuration", "self.fetch", "IOLoop.current", "response.code", "response.buffer", "ssl.PROTOCOL_SSLv23", "client.max_clients", "self.http_server", "gen.Task", "self.skipTest", "response.effective_url", "request.arguments", "self.wait", "httpclient_test.HTTPClientCommonTestCase", "self.assertFalse", "self.respond_100", "sys.platform", "request.version", "self.get_argument", "self.http_client", "self.get_http_port", "seen.append", "self.assertTrue", "response.headers", "self.async_body_producer", "host_re.match", "response.request_time", "self.addCleanup", "AsyncHTTPClient._save_configuration", "self.assertEqual", "self.write", "gzip.GzipFile", "self.assertNotIn", "ssl.CERT_REQUIRED", "self.respond_204", "self.triggers", "self.create_client", "collections.deque", "errno.WSAECONNREFUSED", "self.http1", "response.error", "headers.get_all", "AsyncHTTPClient.configure", "response.rethrow", "self.stop", "request.connection", "chunks.append", "ssl.SSLContext", "response.request", "self.set_status", "self.assertEquals", "stream.close", "self.respond_200"]}, "stack_context_test.py": {"libraries": ["functools", "salt.ext.tornado.stack_context.run_with_stack_context", "salt.ext.tornado.stack_context.StackContext", "salt.ext.tornado.web.RequestHandler", "salt.ext.tornado.test.util.unittest", "salt.ext.tornado.stack_context.NullContext", "salt.ext.tornado.testing.ExpectLog", "contextlib", "salt.ext.tornado.web.asynchronous", "salt.ext.tornado.testing.AsyncHTTPTestCase", "__future__.absolute_import", "salt.ext.tornado.stack_context.StackContextInconsistentError", "salt.ext.tornado.testing.gen_test", "salt.ext.tornado.log.app_log", "salt.ext.tornado.stack_context._state", "__future__.division", "salt.ext.tornado.testing.AsyncTestCase", "logging", "salt.ext.tornado.stack_context.ExceptionStackContext", "salt.ext.tornado.gen", "salt.ext.tornado.web.Application", "salt.ext.tornado.stack_context.wrap", "__future__.print_function"], "function_names": ["__init__", "test_isolation_empty", "test_stack_context", "context", "test_yield_in_with_exception_stack_context", "test_run_with_stack_context", "test_isolation_nonempty", "f2", "write_error", "handle_response", "part2", "test_deactivate_order", "f1", "library_function", "f5", "f", "make_wrapped_function", "setUp", "library_inner_callback", "get_app", "f3", "get", "test_yield_outside_with", "f4", "test_yield_outside_with_exception_stack_context", "final_callback", "check_contexts", "test_exit_library_context", "test_deactivate", "part3", "test_yield_in_with"], "function_calls": ["Exception", "super", "dict", "list", "func", "ExceptionStackContext", "StackContext", "wrap", "partial", "run_with_stack_context", "Application", "library_function", "str", "callback", "f", "make_wrapped_function", "ExpectLog", "NullContext", "reversed", "wrapped"], "class_names": ["TestRequestHandler", "StackContextTest", "HTTPStackContextTest"], "class_method_calls": ["chain.old_contexts", "gen.coroutine", "self.get_url", "self.callback", "self.assertEqual", "self.write", "self.assertNotIn", "gen.Task", "logging.debug", "self.assertIn", "self.context", "unittest.main", "self.handle_response", "self.wait", "self.io_loop", "gen.Callback", "gen.engine", "self.part3", "contextlib.contextmanager", "self.stop", "self.assertRaises", "self.active_contexts", "exception_contexts.append", "self.part2", "self.http_client", "deactivate_callbacks.append", "gen.Wait", "_state.contexts", "self.assertTrue", "self.response", "functools.partial"]}, "tcpclient_test.py": {"libraries": ["salt.ext.tornado.tcpclient._Connector", "os", "salt.ext.tornado.concurrent.Future", "salt.ext.tornado.tcpserver.TCPServer", "salt.ext.tornado.test.util.unittest", "salt.ext.tornado.test.util.skipIfNoIPv6", "__future__.absolute_import", "salt.ext.tornado.testing.gen_test", "socket", "__future__.division", "salt.ext.tornado.testing.AsyncTestCase", "salt.ext.tornado.queues.Queue", "contextlib.closing", "salt.ext.tornado.tcpclient.TCPClient", "salt.ext.tornado.netutil.bind_sockets", "__future__.print_function", "salt.ext.tornado.test.util.skipIfNonUnix", "salt.ext.tornado.netutil.Resolver", "salt.ext.tornado.test.util.refusing_port"], "function_names": ["test_connect_ipv6_dual", "test_source_ip_fail", "__init__", "tearDown", "assert_pending", "test_one_family_second_try", "test_two_families_timeout", "test_connect_ipv6_ipv6", "test_connect_unspec_ipv4", "close", "test_source_ip_success", "test_connect_unspec_dual", "start_server", "test_connect_ipv4_dual", "handle_stream", "test_one_family_second_try_timeout", "test_all_fail", "stop_server", "stop", "resolve_connect", "start_connect", "test_immediate_success", "test_refused_ipv4", "test_two_families_immediate_failure", "setUp", "skipIfLocalhostV4", "test_connect_unspec_ipv6", "test_one_family", "do_test_connect", "test_connect_ipv4_ipv4", "test_source_port_fail", "test_immediate_failure", "test_success_after_timeout", "create_stream", "test_one_family_second_try_failure", "test_mixed"], "function_calls": ["Queue", "refusing_port", "super", "Resolver", "closing", "TestTCPServer", "sorted", "set", "TCPClient", "IOError", "bind_sockets", "_Connector", "Future", "list"], "class_names": ["TCPClientTest", "FakeStream", "TestTCPServer", "TestConnectorSplit", "ConnectorTest"], "class_method_calls": ["unittest.TestCase", "conn.on_timeout", "server_stream.read_bytes", "self.addCleanup", "stream.closed", "ConnectorTest.FakeStream", "self.assertEqual", "future.set_exception", "self.streams", "conn.start", "self.assert_pending", "stream.write", "self.skipTest", "self.server", "socket.AF_UNSPEC", "future.done", "self.add_sockets", "self.closed", "self.do_test_connect", "self.wait", "self.queue", "self.addrinfo", "self.io_loop", "os.environ", "self.assertFalse", "self.connect_futures", "self.start_connect", "self.stop", "socket.AF_INET", "future.set_result", "self.assertRaises", "Resolver.configured_class", "self.start_server", "self.stop_server", "future.result", "self.client", "_Connector.split", "self.assertTrue", "self.port", "socket.AF_INET6", "stream.close", "self.resolve_connect", "self.create_stream", "self.skipIfLocalhostV4", "socket.error"]}, "tcpserver_test.py": {"libraries": ["salt.ext.tornado.iostream.IOStream", "salt.ext.tornado.test.util.exec_test", "socket", "salt.ext.tornado.tcpserver.TCPServer", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.testing.AsyncTestCase", "salt.ext.tornado.test.util.skipBefore35", "salt.ext.tornado.testing.bind_unused_port", "salt.ext.tornado.stack_context.NullContext", "salt.ext.tornado.testing.gen_test", "salt.ext.tornado.testing.ExpectLog", "salt.ext.tornado.gen", "salt.ext.tornado.log.app_log"], "function_names": ["test_handle_stream_native_coroutine", "test_handle_stream_coroutine_logging", "test_stop_twice", "handle_stream"], "function_calls": ["TestServer", "ExpectLog", "NullContext", "locals", "TCPServer", "IOStream", "exec_test", "bind_unused_port", "globals"], "class_names": ["TestServer", "TCPServerTest"], "class_method_calls": ["client.connect", "socket.socket", "client.close", "server.add_socket", "gen.coroutine", "server.stop", "gen.moment", "stream.close", "self.assertEqual", "client.read_until_close"]}, "template_test.py": {"libraries": ["traceback", "salt.ext.tornado.escape.to_unicode", "salt.ext.tornado.util.unicode_type", "os", "salt.ext.tornado.util.PY3", "salt.ext.tornado.template.ParseError", "salt.ext.tornado.template.Template", "salt.ext.tornado.template.DictLoader", "salt.ext.tornado.template.Loader", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.test.util.unittest", "sys", "salt.ext.tornado.escape.native_str", "salt.ext.tornado.escape.utf8", "salt.ext.tornado.test.util.is_coverage_running", "salt.ext.tornado.util.ObjectDict"], "function_names": ["test_break_in_apply", "test_manual_minimize_whitespace", "test_error_line_number_extends_base_error", "test_whitespace_directive", "test_custom_namespace", "test_apply", "test_unextended_block", "upper", "test_no_inherit_future", "test_unicode_template", "test_include", "test_whitespace_by_filename", "test_if", "test_error_line_number_module", "test_details", "test_break_outside_loop", "test_comment_directive", "test_relative_load", "test_custom_escape", "test_unicode_apply", "test_extends", "test_custom_parse_error", "test_utf8_in_file", "test_if_empty_body", "test_unicode_literal_expression", "test_default_off", "test_escaping", "test_extended_block", "test_simple", "test_default_on", "test_bytes_apply", "test_error_line_number_include", "test_whitespace_by_loader", "test_multi_includes", "render", "test_comment", "test_error_line_number_directive", "test_break_continue", "test_non_ascii_name", "test_try", "setUp", "test_bytes", "test_error_line_number_expression", "py_escape", "test_error_line_number_extends_sub_error", "test_raw_expression", "test_expressions"], "function_calls": ["to_unicode", "Exception", "ParseError", "ObjectDict", "range", "str", "type", "DictLoader", "render", "is_coverage_running", "utf8", "Loader", "Template", "repr", "native_str"], "class_names": ["AutoEscapeTest", "StackTraceTest", "ParseErrorDetailTest", "TemplateTest", "TemplateLoaderTest"], "class_method_calls": ["unittest.TestCase", "loader.load", "self.templates", "self.fail", "division.getMandatoryRelease", "self.assertEqual", "os.fsencode", "tmpl.generate", "result.split", "self.skipTest", "self.loader", "unittest.skipIf", "template.generate", "traceback.format_exc", "cm.exception", "self.assertRaises", "s.upper", "sys.version_info", "self.assertTrue", "os.path"]}, "testing_test.py": {"libraries": ["traceback", "salt.ext.tornado.test.util.exec_test", "os", "warnings", "__future__.absolute_import", "__future__.division", "salt.ext.tornado.ioloop", "__future__.print_function", "salt.ext.tornado.testing.AsyncTestCase", "salt.ext.tornado.test.util.unittest", "salt.ext.tornado.test.util.skipBefore35", "salt.ext.tornado.testing.gen_test", "salt.ext.tornado.testing.ExpectLog", "salt.ext.tornado.gen", "contextlib", "salt.ext.tornado.log.app_log"], "function_names": ["test_set_up_tear_down", "tearDown", "test_sync", "fail", "test_subsequent_wait_calls", "test_other_return", "test_short_timeout", "test_undecorated_generator_with_skip", "test_undecorated_coroutine", "test_with_args", "set_environ", "test_native_coroutine", "test_async", "test_with_method_kwargs", "test_wait_timeout", "test", "test_multiple_errors", "test_timeout_environment_variable", "test_no_timeout_environment_variable", "test_undecorated_generator", "test_long_timeout", "setUp", "test_with_kwargs", "test_gen", "test_timeout", "test_exception_in_callback", "test_no_timeout", "test_native_coroutine_timeout", "test_with_method_args"], "function_calls": ["gen_test", "Exception", "super", "Test", "fail", "test_short_timeout", "time", "InheritBoth", "test_with_args", "test_class", "set_environ", "exec_test", "globals", "str", "test", "locals", "test_long_timeout", "test_with_kwargs", "len", "ExpectLog"], "class_names": ["SetUpTearDownTest", "AsyncTestCaseWrapperTest", "Test", "GenTest", "InheritBoth", "AsyncTestCaseTest", "SetUpTearDown"], "class_method_calls": ["warnings.simplefilter", "unittest.TestCase", "self.fail", "self.failureException", "self.assertEqual", "gen.Task", "warnings.catch_warnings", "unittest.TestResult", "self.assertIn", "unittest.main", "self.finished", "self.wait", "self.io_loop", "os.environ", "traceback.format_exc", "contextlib.contextmanager", "cm.exception", "unittest.skip", "self.stop", "self.assertRaises", "ioloop.TimeoutError", "result.skipped", "result.errors", "test.run", "self.assertDictEqual", "self.assertTrue", "events.append"]}, "twisted_test.py": {"libraries": ["salt.ext.tornado.platform.select.SelectIOLoop", "twisted.internet.interfaces.IWriteDescriptor", "os", "thread", "salt.ext.tornado.web.RequestHandler", "signal", "salt.ext.tornado.test.util.unittest", "twisted.internet.defer.inlineCallbacks", "salt.ext.tornado.testing.bind_unused_port", "fcntl", "twisted.internet.interfaces.IReadDescriptor", "tempfile", "zope.interface.implementer", "twisted.web.resource.Resource", "salt.ext.tornado.ioloop.IOLoop", "twisted.web.client.Agent", "twisted.internet.defer.returnValue", "twisted.internet.protocol.Protocol", "warnings", "__future__.absolute_import", "salt.ext.tornado.httpserver.HTTPServer", "shutil", "salt.ext.tornado.platform.twisted.TwistedIOLoop", "twisted.web.server.Site", "twisted.internet.defer.Deferred", "salt.ext.tornado.platform.twisted.TornadoReactor", "twisted.logger.globalLogBeginner", "salt.ext.tornado.util.PY3", "salt.ext.tornado.util.import_object", "salt.ext.tornado.httpclient.AsyncHTTPClient", "__future__.division", "twisted.python.log", "_thread", "logging", "threading", "salt.ext.tornado.escape.utf8", "salt.ext.tornado.gen", "salt.ext.tornado.web.Application", "__future__.print_function", "twisted.web.client.readBody", "sys", "salt.ext.tornado.platform.auto.set_close_exec"], "function_names": ["twisted_fetch", "dataReceived", "shutdown", "tearDown", "testTornadoServerTwistedCoroutineClientIOLoop", "__init__", "render_GET", "testTornadoServerTwistedClientIOLoop", "testReadWrite", "fn", "callLaterCallback", "testCallFromThread", "test_success", "_testNoWriter", "_set_nonblocking", "start_tornado_server", "doRead", "test_failure", "close", "callLaterCallback1", "_fnCalledInThread", "connectionLost", "run_ioloop", "testTwistedServerTornadoClientReactor", "make_test_subclass", "start_twisted_server", "_newThreadRun", "logPrefix", "readConnectionLost", "fileno", "unbuildReactor", "initialize", "flushWarnings", "stop", "anotherWhenRunningCallback", "restore_signal_handlers", "twisted_coroutine_fetch", "testTwistedServerTornadoClientIOLoop", "run_reactor", "callback", "_testReadWrite", "f", "checkReadInput", "test_whenRunning", "setUp", "testNoWriter", "writeOnce", "testTornadoServerTwistedClientReactor", "testCallInThread", "buildReactor", "callLaterCallback2", "get", "_fnCalledFromThread", "whenRunningCallback", "_whenRunningCallback", "stopTest", "tornado_fetch", "save_signal_handlers", "doWrite", "test_callLater"], "function_calls": ["Exception", "Agent", "super", "fn", "TornadoReactor", "set_close_exec", "runner", "Writer", "implementer", "IOLoop", "SelectIOLoop", "make_test_subclass", "returnValue", "utf8", "repr", "setattr", "AsyncHTTPClient", "globals", "Application", "restore_signal_handlers", "HTTPServer", "Deferred", "bind_unused_port", "import_object", "HelloResource", "readBody", "len", "hasattr", "Accumulator", "Reader", "Site", "save_signal_handlers", "issubclass"], "class_names": ["ConvertDeferredTest", "LayeredTwistedIOLoop", "Accumulator", "HelloHandler", "Reader", "TornadoTest", "ReactorCallLaterTest", "ReactorTestCase", "ReactorReaderWriterTest", "CompatibilityTests", "ReactorWhenRunningTest", "ReactorCallFromThreadTest", "ReactorTwoCallLaterTest", "Writer", "HelloResource", "ReactorCallInThread"], "class_method_calls": ["warnings.simplefilter", "self._now", "self._fnCalledFromThread", "self.make_current", "response.body", "self._set_nonblocking", "f.result", "self.fail", "self.__curdir", "self.__saved_signals", "self.whenRunningCallback", "self.start_twisted_server", "os.fdopen", "self.shouldWrite", "fd.read", "self._later1Called", "self._fnCalledInThread", "self.callLaterCallback", "unittest.skipIf", "signal.SIGINT", "self._p2", "self._called2", "self.assertRaises", "self._called1", "self._reader", "signal.signal", "test_class.buildReactor", "client.request", "self._reactor", "twisted_tests.items", "self.tornado_port", "self.assertNotEqual", "unittest.TestCase", "self._laterCalled", "gen.coroutine", "self.callLaterCallback1", "self._newThreadRun", "self.real_io_loop", "warnings.catch_warnings", "self._whenRunningCalled", "client.fetch", "d.addCallback", "d.addBoth", "self.reactor", "fcntl.fcntl", "self.io_loop", "response.deliverBody", "logging.error", "self._testNoWriter", "signal.SIGTERM", "log.defaultObserver", "self.start_tornado_server", "self.twisted_coroutine_fetch", "unittest.skipUnless", "self.add_callback", "sys.version_info", "os.O_NONBLOCK", "os.chdir", "test_subclass.makeTestCaseClasses", "threading.Thread", "self.run_ioloop", "self.twisted_fetch", "self.__tempdir", "self._p1", "globalLogBeginner.beginLoggingTo", "self._writer", "self._io_loop", "self.stop_loop", "responses.append", "self.run_reactor", "tempfile.mkdtemp", "fcntl.F_SETFL", "self._saved_signals", "self.finished", "failure.raiseException", "reactor._io_loop", "self._called", "self._timeout1", "self._anotherWhenRunningCalled", "reader.connectionLost", "signal.getsignal", "self.assertTrue", "fcntl.F_GETFL", "test_class.__name__", "self._later2Called", "self._timeout2", "self._whenRunningCallback", "test_class.unbuildReactor", "IOLoop.configured_class", "self.twisted_port", "self.close", "self.anotherWhenRunningCallback", "gen.convert_yielded", "self.assertEqual", "self._callback", "self.write", "self._fd", "server.add_sockets", "self.callLaterCallback2", "port.getHost", "self.saved_signals", "shutil.rmtree", "fd.write", "unittest.main", "self._mainThread", "self._thread", "os.pipe", "saved.items", "self.stop", "self._timeout", "self._testReadWrite", "self.tornado_fetch", "chunks.append", "thread.get_ident", "TornadoTest.__name__", "os.getcwd", "self.assertEquals", "filtered.append", "signal.SIGCHLD"]}, "util.py": {"libraries": ["typing.Mapping", "os", "inspect.getargspec", "inspect.getfullargspec", "typing.cast", "typing.AnyStr", "array", "typing.Match", "typing", "typing.Callable", "doctest", "typing.Dict", "__future__.absolute_import", "typing.Any", "types", "atexit", "typing.Union", "re", "__future__.division", "typing.Optional", "salt.ext.tornado.speedups.websocket_mask", "zlib", "__future__.print_function", "sys", "datetime", "sys.is_finalizing", "typing.Tuple"], "function_names": ["_save_configuration", "exec_in", "_re_unescape_replacement", "__setattr__", "__init__", "is_finalizing", "configured_class", "doctests", "_get_emulated_is_finalizing", "configure", "raise_exc_info", "__getattr__", "flush", "_restore_configuration", "get_old_value", "cast", "__new__", "configurable_base", "errno_from_exception", "re_unescape", "_getargnames", "decompress", "replace", "timedelta_to_seconds", "import_object", "_websocket_mask_python", "configurable_default", "unconsumed_tail", "initialize"], "function_calls": ["super", "exec", "xrange", "__import__", "_get_emulated_is_finalizing", "list", "frozenset", "getargspec", "ImportError", "AttributeError", "NotImplementedError", "import_object", "ValueError", "isinstance", "len", "hasattr", "getattr", "float", "compile", "issubclass"], "class_names": ["ArgReplacer", "Configurable", "ObjectDict", "GzipDecompressor"], "class_method_calls": ["code.co_varnames", "base.__impl_class", "base.__impl_kwargs", "self.arg_pos", "instance.initialize", "doctest.DocTestSuite", "cls.configurable_base", "self._getargnames", "unmasked_arr.tostring", "self.name", "td.microseconds", "zlib.MAX_WBITS", "self.decompressobj", "name.encode", "re.DOTALL", "match.group", "typing.Dict", "L.append", "atexit.register", "typing.Any", "re.compile", "_re_unescape_pattern.sub", "unmasked_arr.tobytes", "func.func_code", "os.environ", "zlib.decompressobj", "cls.configurable_default", "kwargs.get", "cls.__impl_class", "array.array", "cls.configured_class", "code.co_argcount", "td.days", "e.errno", "sys.version_info", "name.split", "td.seconds", "init_kwargs.update", "e.args", "name.count"]}, "util_test.py": {"libraries": ["salt.ext.tornado.test.util.unittest", "salt.ext.tornado.util.exec_in", "salt.ext.tornado.util.Configurable", "__future__.absolute_import", "salt.ext.tornado.util.re_unescape", "salt.ext.tornado.util.PY3", "salt.ext.tornado.util.raise_exc_info", "salt.ext.tornado.util.import_object", "salt.ext.tornado.util.is_finalizing", "re", "__future__.division", "salt.ext.tornado.util.ArgReplacer", "cStringIO.StringIO", "salt.ext.tornado.util.timedelta_to_seconds", "salt.ext.tornado.escape.utf8", "salt.ext.tornado.escape", "__future__.print_function", "sys", "datetime", "io.StringIO"], "function_names": ["test_import_module", "test_config_args", "test_timedelta_to_seconds", "tearDown", "__init__", "test_no_inherit_future", "test_unicode_escapes", "test_config_class_args", "test_import_member", "test_config_class", "test_import_member_unicode", "configurable_base", "checkSubclasses", "test_two_arg_exception", "test_position", "test_re_unescape", "test_re_unescape_raises_error_on_invalid_input", "setUp", "configurable_default", "function", "test_basic", "test_keyword", "test_omitted", "test_import_module_unicode", "initialize", "test_default"], "function_calls": ["ArgReplacer", "raise_exc_info", "TwoArgException", "super", "exec_in", "is_finalizing", "TestConfigurable", "import_object", "re_unescape", "dict", "utf8", "TestConfig1", "print", "StringIO", "timedelta_to_seconds", "TestConfig2"], "class_names": ["TimedeltaToSecondsTest", "TwoArgException", "TestConfigurable", "ExecInTest", "ArgReplacerTest", "ReUnescapeTest", "UnicodeLiteralTest", "TestConfig1", "ImportObjectTest", "IsFinalizingTest", "ConfigurableTest", "TestConfig2", "RaiseExcInfoTest"], "class_method_calls": ["unittest.TestCase", "obj.a", "self.a", "obj.b", "self.fail", "TestConfigurable._restore_configuration", "self.assertEqual", "TestConfigurable.configure", "self.checkSubclasses", "sys.exc_info", "self.assertIsInstance", "self.saved", "self.replacer", "self.b", "print_function.getMandatoryRelease", "datetime.timedelta", "unittest.skipIf", "self.pos_arg", "self.assertIs", "obj.pos_arg", "self.assertFalse", "self.assertRaises", "salt.ext", "re.escape", "sys.version_info", "TestConfigurable._save_configuration", "f.getvalue"]}, "web_test.py": {"libraries": ["salt.ext.tornado.web.ErrorHandler", "salt.ext.tornado.escape.recursive_unicode", "salt.ext.tornado.test.util.exec_test", "salt.ext.tornado.concurrent.Future", "itertools", "os", "salt.ext.tornado.web.RedirectHandler", "io.BytesIO", "salt.ext.tornado.web.RequestHandler", "salt.ext.tornado.test.util.unittest", "salt.ext.tornado.web.create_signed_value", "salt.ext.tornado.testing.ExpectLog", "contextlib", "urllib", "salt.ext.tornado.web.asynchronous", "salt.ext.tornado.testing.AsyncHTTPTestCase", "salt.ext.tornado.ioloop.IOLoop", "salt.ext.tornado.web.StaticFileHandler", "salt.ext.tornado.web.removeslash", "__future__.absolute_import", "salt.ext.tornado.web.authenticated", "salt.ext.tornado.escape.native_str", "salt.ext.tornado.httputil.format_timestamp", "salt.ext.tornado.testing.gen_test", "salt.ext.tornado.web.MissingArgumentError", "salt.ext.tornado.web.Finish", "salt.ext.tornado.web.UIModule", "email.utils", "salt.ext.tornado.log.app_log", "salt.ext.tornado.web.GZipContentEncoding", "salt.ext.tornado.escape.to_unicode", "salt.ext.tornado.util.unicode_type", "salt.ext.tornado.util.PY3", "salt.ext.tornado.escape.json_decode", "socket", "salt.ext.tornado.web.addslash", "salt.ext.tornado.log.gen_log", "salt.ext.tornado.web._create_signature_v1", "re", "salt.ext.tornado.simple_httpclient.SimpleAsyncHTTPClient", "__future__.division", "salt.ext.tornado.testing.AsyncTestCase", "salt.ext.tornado.test.util.skipBefore35", "logging", "salt.ext.tornado.escape.to_basestring", "salt.ext.tornado.web.decode_signed_value", "salt.ext.tornado.util.timedelta_to_seconds", "salt.ext.tornado.locale", "salt.ext.tornado.escape.utf8", "salt.ext.tornado.gen", "salt.ext.tornado.web.stream_request_body", "salt.ext.tornado.web.Application", "binascii", "urllib.parse", "salt.ext.tornado.iostream.IOStream", "salt.ext.tornado.web.HTTPError", "salt.ext.tornado.web.url", "salt.ext.tornado.template.DictLoader", "gzip", "__future__.print_function", "copy", "salt.ext.tornado.web.get_signature_key_version", "datetime", "salt.ext.tornado.util.ObjectDict"], "function_names": ["test_static_if_modified_since_time_zone", "test_group_question_mark", "test_other", "tearDown", "test_xsrf_fail_cookie_no_body", "test_relative_auth_redirect", "test_cross_user", "test_known_error", "test_unimplemented_standard_methods", "test_finish_in_prepare", "test_get_cookie", "test_basic_redirect", "test_known_values", "test_uimodule_resources", "validate_absolute_path", "test_group_encoding", "test_get_current_user_is_lazy", "connect", "test_error", "test_httperror_str", "test_early_return_with_data", "test_reverse_arguments", "test_key_versioning_read_write_non_default_key", "test_missing_remote_ip", "test_redirect", "get_token", "test_static_head_range", "test_raise_with_reason", "test_vary_already_present", "get_current_user", "test_multiple_strong_etag_match", "test_set_cookie", "get_handlers", "test_strong_etag_not_match", "test_web_redirect_double_slash", "test_unimplemented_other", "test_gzip", "test_redirect_pattern", "test_flow_control_chunked_body", "test_xsrf_fail_body_no_cookie", "test_reverse_url", "test_get_body_arguments", "test_set_cookie_expires_days", "test_unimplemented_patch", "data_received", "setUp", "test_static_range_if_none_match", "get_app", "my_ui_method", "get", "test_absolute_version_exclusion", "test_path_traversal_protection", "test_weak_etag_not_match", "test_decode_argument_invalid_unicode", "test_arbitrary_bytes", "test_include_host_override", "test_signature_tampering", "test_clear_all_cookies", "test_xsrf_fail_cookie_invalid_format", "get_version", "test_multiple_weak_etag_match", "test_gzip_not_requested", "test_patch", "test_cookie_tampering_future_timestamp", "__init__", "test_get_argument", "test_flow_control_compressed_body", "test_copy", "test_root_static_path", "test_xsrf_success_header", "test_static_with_range_full_past_end", "get_user_locale", "validate", "parse_url_path", "test_close_during_upload", "test_key_versioning_read_write_default_key", "test_payload_tampering", "log_exception", "test_httperror_str_from_httputil", "test_static_with_range_partial_past_end", "test_set_cookie_max_age", "test_listen", "test_404", "test_slashes", "test_key_version_increment_version", "test_finish_exception", "test_static_unsatisfiable_range_invalid_start", "test_handler_by_name", "describe", "test_xsrf_fail_argument_invalid_format", "test_catch_error", "test_static_default_redirect", "test_set_cookie_domain", "get_cookie", "render", "test_key_version_roundtrip_differing_version", "test_buggy_log_exception", "test_clear_header", "test_web_redirect", "get_modified_time", "test_get_query_arguments", "test_multiple_strong_etag_not_match", "method", "test_absolute_auth_redirect", "test_204_headers", "test_static_with_range_neg_end", "get_httpserver_options", "test_unknown_error", "test_key_versioning_invalid_key", "relpath", "prepare", "test_types", "test_set_cookie_false_flags", "test_date_header", "test_xsrf_httponly", "test_standard_methods", "test_static_default_filename", "get_http_client", "test_gzip_static", "present", "test_multiple_weak_etag_not_match", "test_static_with_range", "test_xsrf_success_post_body", "test_multi_exception", "other", "test_absolute_static_url", "test_xsrf_fail_no_token", "test_static_files", "test_flow_control", "fetch_json", "test_distinct_tokens", "test_kw", "on_connection_close", "check_type", "test_static_304_if_modified_since", "test_vary_already_present_multiple", "value", "test_static_304_if_none_match", "test_static_head", "past", "test_empty_flush", "step3", "wsgi_safe", "test_static_url", "test_serve", "test_expired", "test_connection_close", "test_static_if_modified_since_pre_epoch", "test_write_error", "test_default_host_matching", "test_xsrf_success_non_hex_token", "test_ui_method", "on_handler_waiting", "test_static_404", "test_client_close", "test_weak_etag_match", "test_multi_header", "test_non_reversible", "test_cookie_special_char", "test_refresh_token", "test_pos", "initialize", "test_flow_control_fixed_body", "patch", "test_streaming_body", "test_reverse", "test_static_unsatisfiable_range_zero_suffix", "make_static_url", "body_producer", "test_static_invalid_range", "test_get_current_user_works", "test_http_error", "test_no_gzip", "get_template_namespace", "test_key_version_invalidate_version", "test_relative_version_exclusion", "test_404_xsrf", "test_strong_etag_match", "post", "test_optional_path", "test_header_injection", "test_status", "_trigger_include_host_check", "test_set_cookie_overwrite", "compute_etag", "test_decode_argument_plus", "cookie_headers", "write_error", "decode_argument", "in_method", "test_addslash", "test_key_version_roundtrip", "_test_etag", "test_403", "get_absolute_path", "assert_compressed", "test_uimodule_unescaped", "get_content", "test_named_urlspec_groups", "test_name_swap", "test_get_current_user_from_ui_module_is_lazy", "test_key_version_retrieval", "test_failed_write_error", "get_content_size", "test_set_properties", "test_wildcard_etag", "test_host_matching", "step2", "get_and_head", "test_static_etag", "test_removeslash", "test_static_compressed_files", "get_login_url", "test_error_xsrf", "test_get_current_user_from_ui_module_works", "test_versioning", "test_xsrf_success_query_string", "set_cookie", "test_content_length_too_low", "get_app_kwargs", "test_round_trip", "test_304_headers", "test_decode_argument", "test_early_return", "test_content_length_too_high", "test_xsrf_success_short_token", "test_static_with_range_full_file", "test_non_ascii", "test_default", "test_static_with_range_end_edge"], "function_calls": ["Exception", "write", "PermissionError", "HTTPError", "super", "sorted", "dict", "validate", "decode_signed_value", "list", "open", "CookieTestRequestHandler", "int", "type", "set", "json_decode", "_create_signature_v1", "Finish", "utf8", "create_signed_value", "exec_test", "DictLoader", "Future", "globals", "Application", "describe", "recursive_unicode", "range", "SimpleAsyncHTTPClient", "str", "locals", "get_signature_key_version", "method", "format_timestamp", "NotImplementedError", "timedelta_to_seconds", "isinstance", "to_unicode", "len", "ObjectDict", "ExpectLog", "bool", "to_basestring", "abs", "BytesIO", "relpath", "IOStream", "url", "native_str"], "class_names": ["PermissionError", "NonWSGIWebTests", "MultiHeaderHandler", "TypeCheckHandler", "FinishExceptionTest", "StaticUrlHandler", "MultipleExceptionTest", "HelloHandler", "GetCurrentUserTest", "ErrorResponseTest", "Handler", "DateHeaderTest", "RedirectHandler", "RaiseWithReasonTest", "WithoutUserHandler", "LinkifyHandler", "ExceptionHandlerTest", "TooLow", "GetArgumentsHandler", "DefaultHandlerArgumentsTest", "NativeStreamingRequestFlowControlTest", "SetCookieHandler", "SecureCookieV1Test", "NamedURLSpecGroupsTest", "StaticFileTest", "FailedWriteErrorHandler", "SignedValueTest", "ConnectionCloseTest", "UnimplementedHTTPMethodsTest", "PathArgsInPrepareTest", "DefaultHostMatchingTest", "CurrentUserModuleHandler", "FinishInPrepareTest", "Custom404Handler", "GzipTestCase", "WebTestCase", "XSRFTest", "SetCookieDomainHandler", "WithUserModuleHandler", "HeaderInjectionHandler", "BaseFlowControlHandler", "RedirectHandlerTest", "WithoutUserModuleHandler", "ClearAllCookiesTest", "UnimplementedNonStandardMethodsTest", "StreamingBodyHandler", "NativeFlowControlHandler", "ClearHeaderTest", "Header304Test", "StaticFileWithPathTest", "CloseDetectionHandler", "EchoHandler", "EtagHandler", "BaseStreamingRequestFlowControlTest", "RequestEncodingTest", "HostMatchingTest", "ClientCloseTest", "Default404Test", "WriteErrorHandler", "CustomStaticFileTest", "OptionalPathHandler", "WithoutUserModule", "AuthRedirectRequestHandler", "MyStaticFileHandler", "Header204Test", "AuthRedirectTest", "DecoratedStreamingRequestFlowControlTest", "AddSlashHandler", "FlowControlHandler", "URLSpecReverseTest", "SetCookieOverwriteHandler", "OverrideStaticUrlHandler", "ErrorHandlerXSRFTest", "CookieTestRequestHandler", "XSRFCookieKwargsTest", "WithUserHandler", "Custom404Test", "SimpleHandlerTestCase", "SetCookieMaxAgeHandler", "GetCookieHandler", "AbsoluteStaticUrlHandler", "MyModule", "DecoratedFlowControlHandler", "EmptyFlushCallbackHandler", "StatusReasonTest", "BuggyLoggingTest", "RemoveSlashHandler", "DefaultHandler", "AllHTTPMethodsTest", "UIMethodUIModuleTest", "SetCookieExpiresDaysHandler", "StreamingRequestBodyTest", "TooHigh", "GetArgumentErrorTest", "UIModuleResourceHandler", "HTTPErrorTest", "SecureCookieV2Test", "ApplicationTest", "HandlerByNameTest", "ConnectionCloseHandler", "IncorrectContentLengthTest", "DecoratorTest", "CookieTest", "WithUserModule", "DecodeArgHandler", "GetArgumentHandler", "CacheTest", "StaticDefaultFilenameTest", "SetCookieSpecialCharHandler", "CurrentUserHandler", "PatchMethodTest", "SetCookieFalsyFlags", "RequestSummaryTest", "EarlyReturnHandler", "SetLazyPropertiesTest", "WSGISafeWebTest"], "class_method_calls": ["e2.status_code", "tokens_seen.add", "self.assertIsNotNone", "response.body", "resp.body", "self._test_etag", "self.get_url", "self.render_string", "data.startswith", "self.fail", "self.get_query_argument", "self.method", "logging.debug", "url_path.rindex", "stream.write", "override_url.find", "handler.set_secure_cookie", "self.cookies", "self.get_and_head", "handler._cookies", "self.reply", "self.finish", "e.arg_name", "unittest.skipIf", "copy.copy", "self.xsrf_form_html", "self.include_host", "self.get_cookie", "locale.get", "path.rindex", "self.handler", "self.get_app_kwargs", "self.methods", "gen.engine", "response2.headers", "contextlib.contextmanager", "h.startswith", "self.server_error", "socket.AF_INET", "self.current_user", "self.set_header", "itertools.chain", "get_response.headers", "self.get_query_arguments", "value.args", "self.step3", "self.request", "handler.get_secure_cookie", "self.app", "self.KEY_VERSIONS", "f.read", "s.strip", "RequestHandler.log_exception", "self.assertNotEqual", "self.send_error", "self.assert_compressed", "new_key_versions.pop", "unittest.TestCase", "MultipleExceptionTest.Handler", "e2.reason", "self.set_cookie", "gen.coroutine", "self.assertIsNot", "self.reverse_url", "self.has_loaded_current_user", "self.flush", "self.redirect", "re.match", "data.endswith", "socket.socket", "match.group", "datetime.timedelta", "handler.value", "self.static_handler_class", "os.name", "self.static_url", "self.io_loop", "regular_url.find", "self.clear_all_cookies", "RequestHandler.SUPPORTED_METHODS", "self.check_type", "self.locale", "self.Handler", "self.robots_txt_hash", "self.errors", "self.settings", "self.close_future", "self.fetch", "IOLoop.current", "response.code", "self.get_status", "stat.st_mtime", "socket.SOCK_STREAM", "urllib_parse.urlencode", "os.path", "SignedValueTest.SECRET_DICT", "wsgi_safe_tests.append", "head_response.headers", "cls.get_version", "self.in_method", "self.login_url", "self.static_dir", "self.render", "urllib_parse.quote", "handler.application", "gen.Task", "self.clear_header", "self.present", "self.skipTest", "GZipContentEncoding.MIN_LENGTH", "response2.code", "self.get_body_arguments", "stream.read_until_close", "self.finished", "self.wait", "self.prepared", "self.past", "self._write_buffer", "unittest.skip", "self.data", "self.assertFalse", "self._cookies", "os.stat", "self.get_secure_cookie", "e.log_message", "self.path_args", "SignedValueTest.SECRET", "self.ui", "self.get_argument", "self.http_client", "self.fetch_json", "response1.headers", "self.test", "self.get_http_port", "app.listen", "tokens.add", "self.path_kwargs", "self.assertTrue", "self.stream", "self._request_summary", "self.step2", "content_headers.add", "self.cookie_headers", "new_handler.get_secure_cookie", "response.headers", "gzip_file.write", "self.application", "gzip_file.close", "self.get_handlers", "self.assertEqual", "self.write", "gzip.GzipFile", "self.assertNotIn", "value.decode", "self.get_body_argument", "bytesio.getvalue", "self.add_header", "binascii.a2b_hex", "e.reason", "self.get_token", "self.COOKIE_SECRET", "RequestHandler.write_error", "newkeys.pop", "self.assertIn", "self.xsrf_token", "s.connect", "email.utils", "binascii.b2a_hex", "match.groupdict", "response.rethrow", "RequestHandler._template_loaders", "self.assertIs", "HostMatchingTest.Handler", "self.stop", "self._trigger_include_host_check", "self.connect", "app_log.warning", "server.stop", "self.absolute_path", "test.server_error", "e.status_code", "self.set_status", "self.assertEquals", "stream.close", "self.assertGreater", "new_handler._cookies", "datetime.datetime", "self.get_arguments", "response.reason", "url_spec.reverse"]}, "websocket_test.py": {"libraries": ["salt.ext.tornado.test.util.exec_test", "salt.ext.tornado.concurrent.Future", "salt.ext.tornado.util._websocket_mask_python", "functools", "salt.ext.tornado.web.RequestHandler", "salt.ext.tornado.test.util.unittest", "salt.ext.tornado.testing.bind_unused_port", "salt.ext.tornado.testing.ExpectLog", "salt.ext.tornado.testing.AsyncHTTPTestCase", "__future__.absolute_import", "salt.ext.tornado.testing.gen_test", "salt.ext.tornado.log.app_log", "traceback", "salt.ext.tornado.httpclient.HTTPRequest", "salt.ext.tornado.speedups", "salt.ext.tornado.log.gen_log", "__future__.division", "salt.ext.tornado.test.util.skipBefore35", "salt.ext.tornado.websocket.WebSocketHandler", "salt.ext.tornado.websocket", "salt.ext.tornado.httpclient.HTTPError", "salt.ext.tornado.gen", "salt.ext.tornado.web.Application", "salt.ext.tornado.template.DictLoader", "__future__.print_function", "sys", "salt.ext.tornado.websocket.websocket_connect", "salt.ext.tornado.websocket.WebSocketError"], "function_names": ["test_websocket_close_buffered_data", "get_compression_options", "tearDown", "test_websocket_headers", "test_coroutine", "on_ping", "test_check_origin_valid_with_path", "set_default_headers", "test_large_message", "mask", "test_websocket_network_fail", "test_client_ping", "open", "test_render_message", "test_client_close_reason", "ws_connect", "close", "test_bad_websocket_version", "test_check_origin_invalid", "test_missing_websocket_key", "test_message_sizes", "test_binary_message", "test_unicode_message", "test_error_in_on_message", "test_websocket_header_echo", "test_native_coroutine", "get_client_compression_options", "test_http_request", "test_path_args", "test_server_close_reason", "on_close", "test_websocket_http_success", "test_check_origin_valid_no_path", "test_check_origin_invalid_partial_url", "test_websocket_http_fail", "get_server_compression_options", "get_app", "test_mask", "test_check_origin_invalid_subdomains", "test_websocket_callbacks", "test_server_ping", "get", "verify_wire_bytes", "test_async_prepare", "on_message", "prepare", "test_websocket_gen", "on_pong", "initialize"], "function_calls": ["len", "Application", "websocket_connect", "_websocket_mask_python", "ExpectLog", "range", "Exception", "super", "locals", "HTTPRequest", "dict", "method", "globals", "exec_test", "bind_unused_port", "DictLoader", "Future", "isinstance"], "class_names": ["MaxMessageSizeTest", "ErrorInOnMessageHandler", "CloseReasonHandler", "CythonMaskFunctionTest", "ClientPeriodicPingTest", "RenderMessageHandler", "TestWebSocketHandler", "NoCompressionTest", "HeaderEchoHandler", "WebSocketBaseTestCase", "PathArgsHandler", "CompressionTestMixin", "UncompressedTestMixin", "ServerOnlyCompressionTest", "HeaderHandler", "PingHandler", "WebSocketNativeCoroutineTest", "EchoHandler", "NonWebSocketHandler", "DefaultCompressionTest", "ClientOnlyCompressionTest", "PythonMaskFunctionTest", "CoroutineOnMessageHandler", "ServerPeriodicPingTest", "AsyncPrepareHandler", "MaskFunctionMixin", "WebSocketTest"], "class_method_calls": ["unittest.TestCase", "gen.Return", "ws.write_message", "self.set_cookie", "gen.coroutine", "traceback.print_exc", "self.render_string", "self.close", "self.assertEqual", "ws.read_message", "self.write", "self.verify_wire_bytes", "self.flush", "self.redirect", "self.MESSAGE", "self.write_message", "ws.protocol", "self.ws_connect", "self.finish", "unittest.skipIf", "ws.headers", "self.wait", "self.io_loop", "RequestHandler._template_loaders", "cm.exception", "self.assertIs", "self.stop", "ws.stream", "self.sleeping", "self.set_header", "ws.close", "sock.close", "gen.moment", "ws.close_code", "self.compression_options", "speedups.websocket_mask", "self.close_code", "self.close_future", "self.assertRaises", "self.get_client_compression_options", "self.fetch", "ws.close_reason", "self.mask", "response.code", "self.request", "self.get_http_port", "self.on_close_called", "self.set_status", "sys.version_info", "k.lower", "gen.sleep", "self.assertLess", "self.get_server_compression_options", "self.close_reason", "functools.partial"]}, "windows_test.py": {"libraries": ["os", "socket", "functools", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.platform.auto.set_close_exec", "unittest"], "function_names": ["test_set_close_exec"], "function_calls": ["set_close_exec"], "class_names": ["WindowsTest"], "class_method_calls": ["os.pipe", "unittest.TestCase", "socket.socket", "cm.exception", "self.addCleanup", "self.assertRaises", "os.close", "unittest.skipIf", "s.close", "self.assertEqual", "s.fileno", "os.name", "functools.partial"]}, "wsgi_test.py": {"libraries": ["salt.ext.tornado.test.httpserver_test", "salt.ext.tornado.escape.json_decode", "salt.ext.tornado.test.web_test", "__future__.absolute_import", "__future__.division", "__future__.print_function", "salt.ext.tornado.test.httpserver_test.TypeCheckHandler", "salt.ext.tornado.web.RequestHandler", "salt.ext.tornado.wsgi.WSGIAdapter", "salt.ext.tornado.wsgi.WSGIContainer", "salt.ext.tornado.wsgi.WSGIApplication", "wsgiref.validate.validator", "salt.ext.tornado.web.Application", "salt.ext.tornado.testing.AsyncHTTPTestCase"], "function_names": ["test_simple", "get_app", "get", "wrap_web_tests_application", "wsgi_app", "wrap_web_tests_adapter", "test_path_quoting", "test_types"], "function_calls": ["Application", "start_response", "WSGIApplication", "wrap_web_tests_application", "json_decode", "wrap_web_tests_adapter", "WSGIAdapter", "validator", "WSGIContainer", "globals"], "class_names": ["WSGIConnectionTest", "HelloHandler", "WSGIApplicationTest", "WSGIApplicationWrappedTest", "PathQuotingHandler", "WSGIContainerTest", "WSGIAdapterWrappedTest"], "class_method_calls": ["httpserver_test.HTTPConnectionTest", "web_test.wsgi_safe_tests", "self.app", "cls.__name__", "self.wsgi_app", "response.body", "self.get_handlers", "self.assertEqual", "self.write", "self.fetch", "self.get_app_kwargs"]}, "testing.py": {"libraries": ["os", "functools", "types.GeneratorType", "signal", "salt.ext.tornado.ioloop.TimeoutError", "unittest", "salt.ext.tornado.ioloop.IOLoop", "salt.ext.tornado.util.basestring_type", "__future__.absolute_import", "salt.ext.tornado.httpserver.HTTPServer", "salt.ext.tornado.process.Subprocess", "salt.ext.tornado.log.app_log", "salt.ext.tornado.util.PY3", "salt.ext.tornado.util.raise_exc_info", "socket", "salt.ext.tornado.httpclient.AsyncHTTPClient", "salt.ext.tornado.log.gen_log", "re", "salt.ext.tornado.simple_httpclient.SimpleAsyncHTTPClient", "__future__.division", "unittest2", "salt.ext.tornado.options.parse_command_line", "logging", "salt.ext.tornado.stack_context.ExceptionStackContext", "inspect", "cStringIO.StringIO", "salt.ext.tornado.gen", "salt.ext.tornado.options.define", "salt.ext.tornado.options.options", "collections.abc.Generator", "__future__.print_function", "sys", "io.StringIO", "salt.ext.tornado.netutil"], "function_names": ["gen_test", "__init__", "tearDown", "run", "post_coroutine", "fetch", "pre_coroutine", "get_protocol", "_handle_exception", "__getattr__", "get_ssl_options", "get_new_ioloop", "wrap", "get_async_test_timeout", "get_url", "stop", "get_unused_port", "__exit__", "get_http_port", "main", "bind_unused_port", "setUp", "__call__", "get_http_server", "__enter__", "get_app", "get_httpserver_options", "timeout_func", "__rethrow", "wait", "filter", "get_http_client"], "function_calls": ["Exception", "_TestMethodWrapper", "super", "dict", "raise_exc_info", "IOLoop", "iscoroutine", "parse_command_line", "TypeError", "define", "ExceptionStackContext", "wrap", "setattr", "AsyncHTTPClient", "get_async_test_timeout", "HTTPServer", "str", "f", "NotImplementedError", "main", "bind_unused_port", "StringIO", "ValueError", "isinstance", "len", "condition", "getattr", "float", "iscoroutinefunction", "print"], "class_names": ["AsyncTestCase", "ExpectLog", "_TestMethodWrapper", "LogTrapTestCase", "AsyncHTTPTestCase", "AsyncHTTPSTestCase"], "class_method_calls": ["logger.handlers", "signal.SIG_DFL", "self.get_url", "sys.stderr", "self.failureException", "options.buffer", "self._handle_exception", "signal.SIGINT", "options.verbose", "re.compile", "os.environ", "sys.exit", "self.__port", "netutil.bind_sockets", "socket.AF_INET", "IOLoop.initialized", "self.get_httpserver_options", "signal.signal", "self.get_app", "self.__rethrow", "self.matched", "gen_test.__test__", "unittest.TestCase", "self._test_generator", "gen.coroutine", "IOLoop.instance", "self.get_protocol", "old_stream.write", "options.exception_on_interrupt", "e.code", "sock.getsockname", "app_log.error", "self.io_loop", "self.orig_method", "self.__timeout", "options.failfast", "result.errors", "sys.version_info", "handler.stream", "os.path", "self.__running", "record.exc_info", "sys.exc_info", "self.http_server", "self.get_new_ioloop", "self._app", "self.wait", "logging.basicConfig", "self.__stopped", "options.catch", "Subprocess.uninitialize", "gen_log.info", "functools.wraps", "logging.StreamHandler", "result.failures", "self.http_client", "self.get_http_port", "record.getMessage", "self.get_http_client", "functools.partial", "self.required", "sys.argv", "logging.Filter", "inspect.iscoroutine", "self.logged_stack", "self.get_ssl_options", "unittest.main", "self.get_http_server", "self.regex", "self.stop", "options.quiet", "self.__failure", "inspect.iscoroutinefunction", "logging.getLogger", "self.__stop_args", "gen_log.error", "self.logger"]}, "web.py": {"libraries": ["salt.ext.tornado.autoreload", "salt.ext.tornado.concurrent.Future", "functools", "io.BytesIO", "salt.ext.tornado.escape._unicode", "salt.ext.tornado.routing.HostMatches", "salt.ext.tornado.routing.AnyMatches", "salt.ext.tornado.log.access_log", "time", "hashlib", "salt.ext.tornado", "typing", "salt.ext.tornado.ioloop.IOLoop", "salt.ext.tornado.template", "__future__.absolute_import", "salt.ext.tornado.routing.ReversibleRuleRouter", "salt.ext.tornado.util._websocket_mask", "urlparse", "urllib.urlencode", "salt.ext.tornado.stack_context", "salt.ext.tornado.httpserver.HTTPServer", "types", "email.utils", "salt.ext.tornado.log.app_log", "salt.ext.tornado.routing.ReversibleRouter", "traceback", "salt.ext.tornado.util.unicode_type", "salt.ext.tornado.util.PY3", "salt.ext.tornado.util.raise_exc_info", "salt.ext.tornado.iostream", "salt.ext.tornado.log.gen_log", "re", "__future__.division", "hmac", "mimetypes", "salt.ext.tornado.httputil", "threading", "salt.ext.tornado.locale", "binascii", "salt.ext.tornado.gen", "salt.ext.tornado.escape.utf8", "urllib.parse.urlencode", "urllib.parse", "Cookie", "salt.ext.tornado.routing.DefaultHostMatches", "http.cookies", "salt.ext.tornado.escape", "gzip", "__future__.print_function", "numbers", "salt.ext.tornado.routing.Rule", "os.path", "base64", "sys", "datetime", "inspect.isclass", "stat", "salt.ext.tornado.routing.URLSpec", "salt.ext.tornado.util.ObjectDict"], "function_names": ["render_string", "_decode_fields_v2", "find_handler", "asynchronous", "render_embed_js", "validate_absolute_path", "flush", "__getitem__", "create_signed_value", "render_embed_css", "html_body", "get_current_user", "get_query_argument", "clear_header", "set_headers", "add_transform", "data_received", "set_etag_header", "get_arguments", "headers_received", "_ui_module", "_request_summary", "get", "_time_independent_equals", "_get_raw_xsrf_token", "log_request", "get_version", "write", "__init__", "send_error", "get_user_locale", "get_argument", "parse_url_path", "cookies", "_stack_context_handle_exception", "log_exception", "on_finish", "get_secure_cookie_key_version", "xsrf_form_html", "get_target_delegate", "removeslash", "_create_signature_v1", "html_head", "stream_request_body", "set_header", "current_user", "check_etag_header", "create_template_loader", "addslash", "_has_stream_request_body", "get_cookie", "authenticated", "render", "_compressible_type", "get_modified_time", "clear_cookie", "__call__", "_get_version", "get_handler_delegate", "listen", "embedded_css", "prepare", "_load_ui_methods", "get_query_arguments", "_decode_xsrf_token", "delete", "process_rule", "set_default_headers", "_log", "_create_signature_v2", "set_status", "set_secure_cookie", "decode_signed_value", "_ui_method", "javascript_files", "_decode_signed_value_v1", "on_connection_close", "_clear_headers_for_304", "clear", "_handle_request_exception", "get_content_type", "_decode_signed_value_v2", "static_url", "get_body_arguments", "execute", "get_signature_key_version", "head", "reset", "embedded_javascript", "finish", "add_header", "_get_argument", "get_status", "_get_resources", "format_field", "reverse_url", "get_cache_time", "initialize", "patch", "require_setting", "render_linked_css", "transform_chunk", "make_static_url", "set_resources", "get_body_argument", "_stat", "set_extra_headers", "get_template_namespace", "render_linked_js", "_execute", "get_browser_locale", "wrapper", "transform_first_chunk", "post", "_consume_field", "_get_arguments", "compute_etag", "val", "options", "__getattr__", "put", "write_error", "decode_argument", "should_return_304", "get_secure_cookie", "is_absolute", "_break_cycles", "xsrf_token", "redirect", "check_xsrf_cookie", "get_absolute_path", "__str__", "get_content", "add_handlers", "settings", "get_content_size", "get_content_version", "locale", "get_login_url", "clear_all_cookies", "_load_ui_modules", "future_complete", "css_files", "set_cookie", "_get_cached_version", "get_template_path", "_convert_header_value"], "function_calls": ["Exception", "HTTPError", "dir", "any", "super", "_decode_fields_v2", "_websocket_mask", "_consume_field", "RuntimeError", "dict", "HostMatches", "_create_signature_v2", "isclass", "MissingArgumentError", "decode_signed_value", "list", "open", "raise_exc_info", "_decode_signed_value_v1", "int", "_HandlerDelegate", "sum", "val", "set", "TypeError", "KeyError", "_create_signature_v1", "utf8", "_UIModuleNamespace", "create_signed_value", "is_absolute", "zip", "log_method", "Future", "get_url", "_ApplicationRouter", "_decode_signed_value_v2", "_has_stream_request_body", "HTTPServer", "str", "module", "AttributeError", "urlencode", "get_signature_key_version", "method", "NotImplementedError", "ord", "ValueError", "isinstance", "len", "ObjectDict", "hasattr", "getattr", "AnyMatches", "format_field", "issubclass", "_get_version", "_time_independent_equals", "_unicode", "float", "Rule", "BytesIO", "DefaultHostMatches", "clock", "object", "t"], "class_names": ["FallbackHandler", "Application", "ErrorHandler", "_ApplicationRouter", "HTTPError", "TemplateModule", "_HandlerDelegate", "RequestHandler", "StaticFileHandler", "GZipContentEncoding", "RedirectHandler", "Finish", "UIModule", "_linkify", "_UIModuleNamespace", "_xsrf_form_html", "MissingArgumentError", "OutputTransform"], "class_method_calls": ["css_embed.append", "self.SUPPORTED_METHODS", "value.status_code", "self.render_string", "f.result", "self._stack_context_handle_exception", "self.clear", "values.append", "application.ui_modules", "self._transforms", "self.GZIP_LEVEL", "self.clear_cookie", "self.get_user_locale", "self.prepare", "self._get_argument", "self.ui_modules", "url_path.replace", "self.on_finish", "base64.b64decode", "application.ui_methods", "self.find_handler", "re.search", "self.finish", "js_embed.append", "module.html_body", "result.extend", "self._compressible_type", "self.xsrf_form_html", "self._get_arguments", "locale.get", "self.validate_absolute_path", "self.get_cookie", "re.compile", "self.handler", "template.Loader", "path.startswith", "cls._get_cached_version", "cls.get_content_version", "self._new_cookie", "self.get_content_size", "traceback.format_exception", "kwargs.get", "hash.update", "self.current_user", "settings.get", "self.set_header", "file.seek", "self.args", "cookie.OutputString", "value.args", "self.render_embed_js", "cls.get_content", "self.request", "Cookie.SimpleCookie", "self.handler_class", "self.arg_name", "self.wildcard_router", "self.should_return_304", "locale.setter", "access_log.info", "t.generate", "handler.locale", "paths.append", "self._ui_method", "self.send_error", "html_bodies.append", "self.set_default_headers", "loader.load", "ctype.startswith", "mimetypes.guess_type", "self.set_cookie", "RequestHandler._INVALID_HEADER_CHAR_RE", "gen.coroutine", "sys._getframe", "self.reverse_url", "name.startswith", "self.log_exception", "hasher.hexdigest", "self._get_cached_version", "transform.transform_first_chunk", "httputil.ResponseStartLine", "self.connection", "v.strip", "self._reason", "handler.get_status", "source.get", "self.flush", "self.redirect", "self._get_resources", "self.get", "module.embedded_javascript", "self.get_content_type", "self._finished", "_signed_value_version_re.match", "datetime.timedelta", "escape.xhtml_escape", "self.get_login_url", "numbers.Integral", "result.append", "handlers.insert", "base64.b64encode", "self.static_url", "app_log.error", "value.log_message", "module.javascript_files", "self.status_code", "hashlib.sha1", "httputil.format_timestamp", "self.get_content", "self.locale", "future.set_result", "self._xsrf_token", "httputil._parse_request_range", "self.__class__", "self._decode_xsrf_token", "self.render_linked_js", "html_heads.append", "stat.ST_MTIME", "types.ModuleType", "os.urandom", "self.settings", "escape.utf8", "exception.reason", "css_files.extend", "frame.f_back", "salt.ext", "frame.f_code", "self._clear_headers_for_304", "server.listen", "self.MIN_LENGTH", "IOLoop.current", "self.CACHE_MAX_AGE", "httputil.responses", "self.execute", "self.create_template_loader", "self._ARG_DEFAULT", "module.embedded_css", "self._load_ui_methods", "self.default_filename", "httputil.HTTPHeaders", "cls._static_hashes", "autoreload.start", "os.path", "binascii.Error", "self._handle_request_exception", "js_files.append", "self._prepared_future", "gen_log.debug", "e.args", "cls.get_version", "self.default_router", "self._gzipping", "self._permanent", "self._headers", "self._gzip_value", "access_log.error", "language.strip", "stack_context.ExceptionStackContext", "self.get_current_user", "escape.native_str", "self.check_xsrf_cookie", "css_files.append", "locales.sort", "self.get_modified_time", "sys.exc_info", "self._get_raw_xsrf_token", "self.transform_chunk", "self._break_cycles", "self._url", "self._status_code", "escape.json_encode", "self.clear_header", "httputil.HTTPMessageDelegate", "self.ui_methods", "RequestHandler._remove_control_chars_regex", "js_files.extend", "hash.hexdigest", "handler._request_summary", "self.set_headers", "stat.ST_SIZE", "self.render_embed_css", "self._current_user", "self.get_template_path", "html.rindex", "root.endswith", "self._write_buffer", "self.compute_etag", "cls._lock", "escape.linkify", "rule.target", "os.stat", "request.headers", "self.default_host", "self.path_args", "functools.wraps", "self.root", "module.html_head", "self.ui", "self._raw_xsrf_token", "handler.ui", "self.get_template_namespace", "current_user.setter", "self._resource_list", "self.get_argument", "self.CONTENT_TYPES", "re.escape", "gen_log.warning", "self.path_kwargs", "re.findall", "threading.Lock", "hashlib.sha256", "access_log.warning", "self._request_summary", "s.partition", "self.decode_argument", "self._stat", "self._auto_finish", "self.application", "unique_paths.add", "hasher.update", "time.time", "x.startswith", "kwargs.items", "transform.transform_chunk", "log_message.replace", "m.group", "self.check_etag_header", "self.log_message", "self.get_browser_locale", "self.render_linked_css", "locales.append", "gen.convert_yielded", "self.write", "cls._stream_request_body", "self.modified", "self._resource_dict", "self.parse_url_path", "gzip.GzipFile", "value.decode", "self.get_handler_delegate", "self.create_signed_value", "headers.get", "self.add_header", "binascii.a2b_hex", "self.set_extra_headers", "e.reason", "self.write_error", "modules.items", "self.reason", "self._convert_header_value", "hashlib.md5", "self.get_cache_time", "urlparse.urlsplit", "handler.request", "self.xsrf_token", "self.transforms", "iostream.StreamClosedError", "hmac.compare_digest", "typing.Union", "namespace.update", "self.chunks", "RequestHandler._template_loaders", "binascii.b2a_hex", "self.fallback", "email.utils", "html.index", "self.handler_kwargs", "self.initialize", "cls.get_absolute_path", "request.connection", "self._stat_result", "cookie.split", "self.absolute_path", "self._gzip_file", "self._load_ui_modules", "self._active_modules", "self.set_etag_header", "e.status_code", "RequestHandler._template_loader_lock", "hashes.get", "methods.items", "host_matcher.host_pattern", "self.require_setting", "self._log", "self.set_status", "dispatcher.execute", "self.path", "self._headers_written", "self._locale", "gen_log.error", "StaticFileHandler.reset", "httputil._get_content_range", "file.read", "self.stream_request_body", "self.get_absolute_path", "hmac.new", "module.css_files", "self.on_connection_close", "datetime.datetime", "loader.reset"]}, "websocket.py": {"libraries": ["os", "salt.ext.tornado.httpclient", "urlparse.urlparse", "struct", "salt.ext.tornado.ioloop.PeriodicCallback", "salt.ext.tornado.ioloop.IOLoop", "hashlib", "salt.ext.tornado.simple_httpclient", "__future__.absolute_import", "salt.ext.tornado.util._websocket_mask", "salt.ext.tornado.escape.native_str", "salt.ext.tornado.web", "collections", "salt.ext.tornado.log.app_log", "salt.ext.tornado.escape.to_unicode", "salt.ext.tornado.util.PY3", "salt.ext.tornado.log.gen_log", "__future__.division", "salt.ext.tornado.httputil", "salt.ext.tornado.gen", "salt.ext.tornado.escape.utf8", "salt.ext.tornado.iostream.StreamClosedError", "zlib", "salt.ext.tornado.tcpclient.TCPClient", "salt.ext.tornado.escape", "__future__.print_function", "base64", "salt.ext.tornado.concurrent.TracebackFuture", "urllib.parse.urlparse"], "function_names": ["compress", "websocket_connect", "_attach_stream", "__init__", "get_compression_options", "send_error", "read_message", "_on_frame_data", "get_websocket_protocol", "on_ping", "_run_callback", "set_nodelay", "write_ping", "_read_frame_data", "_parse_extensions_header", "_get_compressor_options", "select_subprotocol", "_write_frame", "check_origin", "ping_timeout", "open", "_handle_websocket_headers", "periodic_ping", "compute_accept_value", "close", "max_message_size", "_create_compressor", "_on_frame_length_16", "on_connection_close", "_on_frame_length_64", "_on_masking_key", "_accept_connection", "ping", "_break_cycles", "write_message", "_create_compressors", "_on_masked_frame_data", "_on_frame_start", "_receive_frame", "on_close", "_abort", "decompress", "_on_http_response", "headers_received", "_process_server_headers", "accept_connection", "_handle_message", "ping_interval", "get", "_create_decompressor", "on_message", "_raise_not_supported_for_websockets", "on_pong", "_challenge_response", "start_pinging"], "function_calls": ["super", "_websocket_mask", "RuntimeError", "dict", "_PerMessageDeflateDecompressor", "max", "StreamClosedError", "int", "urlparse", "set", "utf8", "WebSocketClosedError", "TracebackFuture", "setattr", "all", "callback", "TCPClient", "WebSocketClientConnection", "ValueError", "isinstance", "len", "to_unicode", "bool", "getattr", "PeriodicCallback", "WebSocketError", "_PerMessageDeflateCompressor", "map", "WebSocketProtocol13", "native_str"], "class_names": ["WebSocketHandler", "WebSocketError", "_PerMessageDeflateCompressor", "_PerMessageDeflateDecompressor", "WebSocketClientConnection", "WebSocketClosedError", "WebSocketProtocol13", "WebSocketProtocol"], "class_method_calls": ["self.write_ping", "self._create_compressors", "origin.lower", "f.result", "self.key", "self._on_close_called", "self._fragmented_message_buffer", "zlib.MAX_WBITS", "struct.unpack", "self.check_origin", "start_line.code", "self._wire_bytes_out", "self.finish", "parsed_origin.netloc", "self.read_future", "self.periodic_ping", "self.handler", "self.ws_connection", "self.ping_timeout", "self._read_frame_data", "self.RSV1", "sha1.digest", "self.set_header", "self._on_frame_length_16", "self.ping_callback", "data.decode", "self.open_kwargs", "self._parse_extensions_header", "self.final_callback", "self.request", "agreed_parameters.get", "subprotocols.split", "self._final_frame", "self._on_frame_data", "s.strip", "zlib.Z_SYNC_FLUSH", "self.RSV_MASK", "self.max_message_size", "self._write_frame", "self._masked_frame", "self.last_ping", "self._mem_level", "self.get_websocket_protocol", "tornado_escape.json_encode", "self._get_compressor_options", "self.open_args", "self.get_compression_options", "self.server_terminated", "self.connect_future", "self._handle_message", "self.connection", "self._compression_options", "self.read_queue", "WebSocketProtocol.__init__", "data.endswith", "struct.pack", "self._abort", "self.headers", "tornado_web.asynchronous", "base64.b64encode", "app_log.error", "self.io_loop", "hashlib.sha1", "self.ping_interval", "self._on_frame_start", "self.OPCODE_MASK", "future.set_result", "httputil._parse_header", "self.close_code", "os.urandom", "self.compression_options", "self.settings", "self._handle_websocket_headers", "self._frame_mask", "IOLoop.current", "self.get_status", "self._frame_compressed", "sha1.update", "handler.stream", "httputil.HTTPHeaders", "self._on_message_callback", "gen_log.debug", "self.close_reason", "self.protocol", "self._fragmented_message_opcode", "self.tcp_client", "request.url", "e.strip", "self._message_bytes_out", "self._break_cycles", "self._frame_opcode", "self.on_close", "self._decompressor", "simple_httpclient._HTTPConnection", "self._message_bytes_in", "self._challenge_response", "zlib.DEFLATED", "self._on_masked_frame_data", "self._on_masking_key", "self._on_http_response", "decompressor.decompress", "extensions.split", "self._compression_level", "request.headers", "compressor.compress", "self._compressor", "self.last_pong", "self.mask_outgoing", "self._receive_frame", "httpclient.HTTPRequest", "self._create_compressor", "self.stream", "httpclient._RequestProxy", "zlib.compressobj", "tornado_web.RequestHandler", "self._max_wbits", "self.FIN", "self._create_decompressor", "self.close", "httputil._encode_header", "self._on_frame_length_64", "gen.convert_yielded", "headers.get", "WebSocketProtocol13.compute_accept_value", "self._run_callback", "self.start_pinging", "self._frame_length", "handled_future.add_done_callback", "tornado_escape.utf8", "collections.deque", "self.compute_accept_value", "handler.request", "tornado_web.GZipContentEncoding", "response.error", "io_loop.add_future", "self.on_message", "zlib.decompressobj", "compressor.flush", "self._wire_bytes_in", "self._accept_connection", "self._timeout", "conn.connect_future", "self.set_status", "self._frame_opcode_is_control", "self.client_terminated", "self._waiting", "self.on_connection_close"]}, "wsgi.py": {"libraries": ["cherrypy", "salt.config", "salt.netapi.rest_cherrypy.app", "os"], "function_names": ["bootstrap_app", "get_application", "wsgi_app"], "function_calls": ["get_application", "bootstrap_app"], "class_names": [], "class_method_calls": ["os.environ", "cherrypy.tree", "salt.config", "cherrypy.config", "app.get_app"]}, "vsanapiutils.py": {"libraries": ["pyVmomi.SoapStubAdapter", "pyVmomi.vim", "vsanmgmtObjects", "pyVmomi.vmodl"], "function_names": ["GetVsanVcStub", "GetVsanEsxStub", "GetVsanEsxMos", "_GetVsanStub", "GetVsanVcMos", "WaitForTasks", "ConvertVsanTaskToVcTask"], "function_calls": ["len", "GetVsanVcStub", "SoapStubAdapter", "str", "GetVsanEsxStub", "_GetVsanStub"], "class_names": [], "class_method_calls": ["objSet.obj", "update.version", "stub.host", "pc.CreateFilter", "vim.Task", "filterSpec.objectSet", "filterSpec.propSet", "vmodl.query", "taskList.remove", "vim.TaskInfo", "pc.WaitForUpdates", "update.filterSet", "vsanTask._moId", "objSet.changeSet", "task.info", "stub.cookie", "si.content", "change.val", "vim.host", "vim.VsanUpgradeSystemEx", "vim.cluster", "vsanStub.cookie", "filterSet.objectSet", "change.name", "filter.Destroy"]}, "vsanmgmtObjects.py": {"libraries": ["pyVmomi.VmomiSupport.F_LINK", "pyVmomi.VmomiSupport.CreateManagedType", "pyVmomi.VmomiSupport.F_OPTIONAL", "pyVmomi.VmomiSupport.CreateDataType", "pyVmomi.VmomiSupport.AddVersion", "pyVmomi.VmomiSupport.CreateEnumType", "pyVmomi.VmomiSupport.F_LINKABLE", "pyVmomi.VmomiSupport.AddVersionParent"], "function_names": [], "function_calls": ["CreateManagedType", "CreateDataType", "tuple", "CreateEnumType"], "class_names": [], "class_method_calls": []}, "win_inet_pton.py": {"libraries": ["ctypes", "salt._compat.ipaddress", "socket", "os"], "function_names": ["inet_ntop", "inet_pton", "not_windows"], "function_calls": ["len", "hasattr", "str", "WSAAddressToStringA", "WSAStringToAddressA", "sockaddr", "SystemError", "OSError"], "class_names": ["sockaddr"], "class_method_calls": ["ip_string.encode", "ctypes.memmove", "ctypes.c_ushort", "ctypes.byref", "addr.sa_family", "ctypes.FormatError", "ip_string_size.value", "ctypes.c_ulong", "ctypes.c_short", "ctypes.windll", "os.name", "ctypes.create_string_buffer", "ctypes.sizeof", "ctypes.Structure", "socket.AF_INET", "ctypes.c_int", "ctypes.c_byte", "addr.ipv4_addr", "addr.ipv6_addr", "socket.inet_ntop", "socket.AF_INET6", "socket.inet_pton", "socket.inet_aton", "ctypes.string_at", "ipaddress.ip_address"]}, "zipp.py": {"libraries": ["posixpath", "itertools", "pathlib", "sys", "collections.OrderedDict", "zipfile", "contextlib", "io"], "function_names": ["_difference", "_parents", "__init__", "_pathlib_compat", "filename", "joinpath", "_name_set", "open", "parent", "_implied_dirs", "suffix", "is_dir", "__str__", "_next", "read_bytes", "resolve_dir", "_ancestry", "is_file", "namelist", "exists", "iterdir", "name", "make", "read_text", "_is_child", "stem", "__repr__", "suffixes"], "function_calls": ["_difference", "_dedupe", "cls", "super", "str", "ValueError", "set", "_ancestry", "_pathlib_compat", "filter", "FileNotFoundError", "map", "IsADirectoryError", "list", "isinstance"], "class_names": ["CompleteDirs", "FastLookup", "Path"], "class_method_calls": ["OrderedDict.fromkeys", "strm.read", "self.__names", "self.at", "self.open", "self._implied_dirs", "io.TextIOWrapper", "path.at", "self._name_set", "self.exists", "self.__lookup", "path.rstrip", "self._next", "self.is_dir", "posixpath.split", "FastLookup.make", "posixpath.sep", "posixpath.join", "itertools.filterfalse", "pathlib.Path", "self.__class__", "posixpath.dirname", "itertools.chain", "self.root", "source.__class__", "self.namelist", "source.mode", "self.__repr", "sys.version_info", "self._is_child", "zipfile.ZipFile", "itertools.islice", "self.filename", "path.__fspath__", "contextlib.suppress"]}, "features.py": {"libraries": ["logging", "salt.utils.versions"], "function_names": ["get", "__init__", "setup_features"], "function_calls": ["Features"], "class_names": ["Features"], "class_method_calls": ["logging.getLogger", "features.setup_features", "opts.get", "log.warning", "salt.utils", "self.features", "self.setup"]}, "fileclient.py": {"libraries": ["os", "salt.loader", "salt.utils.stringutils", "salt.utils.files", "string", "contextlib", "salt.exceptions.MinionError", "salt.utils.verify", "salt.ext.tornado.httputil.HTTPHeaders", "salt.utils.gzip_util", "errno", "time", "salt.utils.openstack.swift.SaltSwift", "salt.exceptions.CommandExecutionError", "salt.utils.data", "salt.utils.hashutils", "shutil", "salt.ext.tornado.httputil.parse_response_start_line", "salt.payload", "salt.utils.versions", "salt.utils.templates", "salt.utils.atomicfile", "http.server", "salt.client", "salt.config.DEFAULT_HASH_TYPE", "logging", "salt.utils.url", "salt.ext.tornado.httputil.HTTPInputError", "salt.crypt", "urllib.error", "urllib.parse", "ftplib", "salt.channel.client", "salt.exceptions.SaltClientError", "salt.utils.path", "salt.utils.platform", "salt.utils.http", "salt.fileserver"], "function_names": ["envs", "cache_master", "__init__", "on_chunk", "is_cached", "get_template", "cache_files", "__get_file_path", "master_opts", "cache_dest", "_channel_send", "on_header", "get_file", "__getattr__", "file_local_list", "_file_local_list", "_find_file", "file_list", "_refresh_channel", "cache_dir", "get_file_client", "get_cachedir", "hash_and_stat_file", "get_url", "get_state", "list_env", "file_list_emptydirs", "decode_dict_keys_to_str", "_cache_loc", "list_states", "get_dir", "__exit__", "destroy", "swift_opt", "hash_file", "master_tops", "__enter__", "dir_list", "cache_file", "__setstate__", "__getstate__", "_extrn_path", "__hash_and_stat_file", "_check_proto", "s3_opt", "gen_token", "cache_local_file", "symlink_list"], "function_calls": ["DumbAuth", "parse_response_start_line", "sorted", "SaltSwift", "list", "int", "type", "set", "HTTPHeaders", "decode_dict_keys_to_str", "str", "CommandExecutionError", "swift_opt", "MinionError", "SaltClientError", "isinstance", "len", "hasattr", "getattr", "s3_opt", "map"], "class_names": ["DumbAuth", "RemoteClient", "FSClient", "Client", "PillarClient", "ContextlessFileClient"], "class_method_calls": ["str.lower", "self.hash_and_stat_file", "self.get_url", "string.ascii_lowercase", "url_data.password", "etagfp.read", "paths.split", "fdest.union", "url.lstrip", "key.decode", "destfp.write", "field.split", "self.__init__", "ret.sort", "path.startswith", "contextlib.contextmanager", "path.lstrip", "url.split", "filelist.add", "urllib.error", "url_data.path", "Client.__init__", "key.lower", "salt.utils", "salt.loader", "fn_.close", "fn_.startswith", "self._closing", "log.warning", "url_data.hostname", "source_hash.split", "shutil.copyfile", "path.endswith", "result.append", "url_data.port", "self.__get_file_path", "url_data.netloc", "self.__hash_and_stat_file", "netloc.rfind", "self._file_local_list", "data.get", "log.error", "self.channel", "shutil.move", "self.utils", "self.file_list_emptydirs", "url_data.params", "exc.code", "os.path", "query.get", "chunk.decode", "time.monotonic", "fn_.tell", "url_scheme.lower", "os.makedirs", "self.get_cachedir", "self._cache_loc", "kwargs.pop", "errno.EEXIST", "self.cache_file", "prefix.strip", "os.sep", "fp_.write", "ftp.login", "self.file_list", "sls.replace", "netloc.split", "path.rsplit", "content_type.startswith", "ftplib.FTP", "data.encode", "os.stat", "salt.exceptions", "self.get_file", "etagfp.write", "log.info", "url_data.fragment", "content_type.split", "states.add", "urllib.parse", "self._extrn_path", "netloc.replace", "ret.append", "exc.errno", "fp_.read", "os.remove", "salt.fileserver", "self._refresh_channel", "fn_.strip", "self.hash_file", "channel.close", "hdr.code", "swift_conn.get_object", "ftp.quit", "url_data.username", "destfp.close", "self._channel_send", "url_data.query", "self.destroy", "src.items", "log.debug", "self._find_file", "exc.reason", "self.file_client", "dest.endswith", "self.opts", "http.server", "self._check_proto", "opts.get", "ofile.write", "ftp.connect", "self.auth", "url_data.scheme", "logging.getLogger", "path.replace", "ftp.retrbinary", "salt.channel", "fn_.write", "fnd.get", "hdr.strip"]}, "azurefs.py": {"libraries": ["salt.utils.gzip_util", "salt.utils.versions.Version", "os", "salt.utils.path", "salt.utils.hashutils", "shutil", "salt.utils.json", "logging", "base64", "salt.utils.stringutils", "salt.utils.files", "salt.fileserver", "azure.storage"], "function_names": ["envs", "dir_list", "serve_file", "update", "__virtual__", "file_list", "file_hash", "find_file", "_get_container_path", "_validate_config", "_get_container_service"], "function_calls": ["ImportError", "set", "file_list", "_get_container_path", "Version", "_validate_config", "_get_container_service", "all", "list", "isinstance"], "class_names": [], "class_method_calls": ["os.unlink", "container.get", "__opts__.get", "blob.properties", "os.makedirs", "ret.add", "blob_service.list_blobs", "account.create_block_blob_service", "azure.storage", "required_load_keys.difference", "shutil.rmtree", "fp_.write", "blob_service.get_blob_to_path", "base64.b64encode", "log.debug", "ret.update", "saltenvs.append", "blob.name", "fp_.seek", "os.stat", "log.error", "log.exception", "data.decode", "logging.getLogger", "load.get", "fp_.read", "os.path", "salt.utils", "salt.fileserver"]}, "gitfs.py": {"libraries": ["salt.utils.mac_utils.git_is_stub", "os", "git", "salt.exceptions.get_error_message", "salt.utils.event.tagify", "salt.utils.itertools", "salt.utils.stringutils", "salt.utils.files", "contextlib", "salt.exceptions.GitLockError", "shlex", "salt.utils.gzip_util", "errno", "time", "hashlib", "salt.utils.cache", "salt.utils.data", "warnings", "salt.utils.hashutils", "shutil", "salt.ext.tornado.ioloop", "fnmatch", "salt.utils.versions", "salt.utils.odict.OrderedDict", "weakref", "salt.config.DEFAULT_MASTER_OPTS", "salt.utils.process.os_is_running", "salt.utils.user", "io", "glob", "pygit2", "multiprocessing", "salt.config.DEFAULT_HASH_TYPE", "gitdb", "logging", "salt.utils.url", "pygit2.ffi", "pygit2.remote", "salt.exceptions.FileserverConfigError", "salt.utils.versions.Version", "salt.utils.path", "salt.utils.configparser", "salt.utils.platform", "base64", "subprocess", "stat", "datetime.datetime", "salt.fileserver", "copy"], "function_names": ["get_tree", "clear_old_remotes", "_fetch", "verify_auth", "_getconf", "get_cache_basename", "init_remote", "__maybe_string", "link_mountpoint", "init_remotes", "fetch_remotes", "_key_does_not_exist", "_recommend", "clear_cache", "enforce_git_config", "dir_list", "clear_lock", "get_cachedir", "_check_ref", "verify_pygit2", "_remove_cache_dir", "clean_stale_refs", "__init__", "_lock", "do_checkout", "env_is_exposed", "_file_lists", "fetch", "add_conf_overlay", "_add_file_stat", "enforce_types", "file_hash", "get_url", "__lock", "file_list_emptydirs", "peel", "get_salt_working_dir", "get_cache_hash", "verify_gitpython", "serve_file", "_clear_lock", "get_linkdir", "_get_lock_file", "_get_envs_from_ref_paths", "relpath", "linkdir_walk", "add_mountpoint", "check_root", "_add_error", "_certificate_check", "find_file", "_get_per_saltenv", "gen_lock", "_iter_remote_hashes", "get_cache_basehash", "_traverse", "update_intervals", "setup_callbacks", "get_tree_from_tag", "verify_provider", "_val_cb", "write_remote_map", "_find_global", "failhard", "envs", "_perform_checkout", "update", "file_list", "__new__", "get_checkout_target", "get_tree_from_branch", "get_tree_from_sha", "_incomplete_auth", "write_file", "get_cache_full_basename", "lock", "checkout", "strip_sep", "fetch_request_check", "symlink_list"], "function_calls": ["_find_global", "failhard", "TimeoutError", "FileserverConfigError", "any", "super", "sorted", "expected", "Version", "add_mountpoint", "list", "enumerate", "_perform_checkout", "OrderedDict", "next", "func", "int", "_add_file_stat", "type", "set", "pid_exists", "_add_error", "enforce_types", "get_error_message", "hash_type", "_get_per_saltenv", "setattr", "all", "GitLockError", "_incomplete_auth", "ImportError", "_key_does_not_exist", "_recommend", "str", "_traverse", "NotImplementedError", "git_is_stub", "isinstance", "len", "strip_sep", "hasattr", "getattr", "bool", "tagify", "iter", "relpath", "_check_ref", "delattr"], "class_names": ["Pygit2", "GitProvider", "GitPython", "GitBase", "GitFS", "GitPillar", "WinRepo"], "class_method_calls": ["warnings.simplefilter", "self.repo", "file_blob.path", "repo._mountpoint", "self.get_url", "self.all_saltenvs", "repo.url", "file_blob.stream_data", "self.fetch_remotes", "self.gitdir", "self.ref_types", "self._iter_remote_hashes", "exc.strerror", "git.Repo", "datetime.now", "ret.add", "weakref.WeakKeyDictionary", "errno.EISDIR", "errlist.append", "repo_obj.saltenv", "pygit2.GIT_CONFIG_LEVEL_GLOBAL", "log.critical", "os.fdopen", "pygit2.GIT_RESET_HARD", "self.find_file", "self.get_checkout_target", "git.RemoteReference", "self.disable_saltenv_mapping", "fetchinfo.flags", "self._linkdir", "path.startswith", "self.init_remotes", "self._mountpoint", "self._get_lock_file", "ret.update", "os.environ", "git.__version__", "contextlib.contextmanager", "errno.EINVAL", "self.write_remote_map", "self.saltenv", "gitdb.exc", "blobs.get", "repo.saltenv_revmap", "pygit2.RemoteCallbacks", "self.ssl_verify", "self.do_checkout", "blob.data", "env_set.add", "origin.fetch", "data.decode", "line.startswith", "pygit2.__version__", "repo.checkout", "pygit2.UserPass", "repo_obj.saltenv_revmap", "fetchinfo.NEW_HEAD", "self.winrepo_dirs", "self.refspecs", "load.pop", "self.file_list_cachedir", "local_head.target", "warnings.warn", "success.append", "repo.branch", "repo.get_checkout_target", "salt.utils", "self.env_is_exposed", "repo.update_interval", "repo_obj.new", "self.saltenv_blacklist", "self.role", "self.get_tree", "self.mountpoint", "r.get_cache_basehash", "os.getpid", "obj.peel", "repo.dir_list", "self.provider", "self.env_cache", "remotes.split", "conf.add_section", "errors.append", "os.write", "self.git_providers", "self.password", "subprocess.Popen", "log.warning", "stream.seek", "os.walk", "self._file_lists", "warnings.catch_warnings", "self.clear_lock", "repo.get_cachedir", "ref.split", "entry.name", "fetchinfo.old_commit", "self.saltenv_whitelist", "errno.ENOENT", "self.conf", "base64.b64encode", "repo._get_lock_file", "env_set.update", "fetchinfo.commit", "repo.envs", "entry.filemode", "self.enforce_git_config", "git.Tree", "repo.id", "x.path", "repo.clear_lock", "fd_.readline", "log.error", "self.pillar_dirs", "self.__class__", "blobs.setdefault", "log.exception", "repo.file_list", "self._fetch", "conf.set_multivar", "ret.get", "failed.append", "pygit2.ffi", "salt.ext", "self.fetch", "self.url", "global_values.update", "self.clear_old_remotes", "tree.traverse", "self.remotecallbacks", "self._lock", "git.Blob", "repo_envs.update", "self._remove_cache_dir", "os.path", "self.ref", "pygit2.GIT_FETCH_PRUNE", "fetch_results.received_objects", "shlex.split", "self.link_mountpoint", "repo.get_cache_basename", "self.init_remote", "transport.lower", "head_ref.partition", "self._cachedir", "repo.get_linkdir", "self.insecure_auth", "io.BytesIO", "self.check_root", "conf.write", "self._get_envs_from_ref_paths", "event.fire_event", "os.makedirs", "subprocess.PIPE", "self.gen_lock", "pygit2.LIBGIT2_VERSION", "cmd.communicate", "errno.EEXIST", "required_load_keys.difference", "symlinks.items", "files.add", "blob.hex", "os.sep", "blob.stream_data", "pygit2.Keypair", "fp_.write", "ref.startswith", "pygit2.Commit", "obj.get_object", "self.fetch_request_check", "repo.find_file", "self.clean_stale_refs", "blob.path", "os.symlink", "self._cache_basename", "repo.fallback", "fp_.seek", "glob.glob", "copy.deepcopy", "x.lower", "locked.extend", "pygit2.Blob", "output.decode", "log.info", "all_envs.extend", "ldest.startswith", "self.root", "self._cache_basehash", "pygit2.remote", "subprocess.STDOUT", "self._clear_lock", "pygit2.init_repository", "self.setup_callbacks", "self.hash_cachedir", "self.envs", "rname.partition", "os.O_WRONLY", "repo_obj.global_saltenv", "tag_obj.hex", "self.id", "blobs.append", "load.get", "fp_.read", "os.open", "key.endswith", "exc.errno", "x.new", "conf.get", "self.verify_pygit2", "tag_obj.target", "cachedir_map.setdefault", "self.verify_auth", "repo.fetch", "stat.S_ISLNK", "os.remove", "pygit2.errors", "cleared.extend", "salt.fileserver", "self.branch", "os.O_EXCL", "conf.set", "val.split", "self.remote_root", "time.time", "time.sleep", "repo.base", "os.listdir", "git.TagReference", "repo.role", "repo.get_cache_basehash", "blob.mode", "self.checkout", "self.name", "os.O_CREAT", "repo.lock", "self.verify_provider", "self.global_saltenv", "repo.write_file", "pygit2.Tree", "blob.hexsha", "self._salt_working_dir", "repo.mountpoint", "self.user", "shutil.rmtree", "repo.env_is_exposed", "repo.linkdir_walk", "self._linkdir_walk", "git.exc", "salt.payload", "repo_obj.base", "key.startswith", "log.debug", "file_blob.mode", "cls.instance_map", "log.trace", "self.opts", "x.rstrip", "self.fallback", "self.pillar_linked_dirs", "origin.credentials", "pygit2.settings", "errors.extend", "object.__new__", "fetchinfo.name", "repo_obj.id", "self.verify_gitpython", "pygit2.Repository", "self.__lock", "cleaned.append", "self.credentials", "repo.env", "log.profile", "repo.get_salt_working_dir", "self.peel", "desired_provider.lower", "self.saltenv_revmap", "fnmatch.fnmatch", "fetchinfo.NEW_TAG", "logging.getLogger", "self._cache_hash", "repo_obj.fetch", "self.remotes", "self.base", "cmd.returncode", "self.cache_root", "conf.read", "self.new", "repo.root", "stream.close", "entry.oid", "repo.gen_lock", "self.add_conf_overlay", "stream.read", "address.split", "pygit2.Tag", "multiprocessing.Lock", "self._cache_full_basename", "x.strip"]}, "hgfs.py": {"libraries": ["os", "salt.utils.event.tagify", "salt.utils.stringutils", "salt.utils.files", "salt.utils.gzip_util", "errno", "hashlib", "salt.utils.data", "salt.utils.hashutils", "shutil", "fnmatch", "salt.utils.versions", "glob", "hglib", "salt.config.DEFAULT_HASH_TYPE", "logging", "salt.utils.url", "salt.exceptions.FileserverConfigError", "datetime.datetime", "salt.fileserver", "copy"], "function_names": ["_get_bookmark", "_failhard", "envs", "_do_lock", "_get_branch", "_get_file_list", "_get_tag", "_file_lists", "_get_dir_list", "update", "_add_error", "__virtual__", "file_list", "file_hash", "_do_clear_lock", "find_file", "file_list_emptydirs", "_all_bookmarks", "_all_tags", "_all_branches", "clear_cache", "lock", "_get_ref", "dir_list", "serve_file", "init", "clear_lock", "_env_is_exposed", "_clear_old_remotes", "_get_manifest"], "function_calls": ["_get_bookmark", "_failhard", "envs", "FileserverConfigError", "_do_lock", "sorted", "_get_branch", "_get_file_list", "_get_tag", "_file_lists", "list", "_get_dir_list", "next", "set", "_add_error", "_do_clear_lock", "hash_type", "all", "_all_bookmarks", "_all_tags", "str", "_all_branches", "lock", "_get_ref", "isinstance", "len", "getattr", "bool", "tagify", "init", "clear_lock", "_env_is_exposed", "_clear_old_remotes", "iter", "_get_manifest"], "class_names": [], "class_method_calls": ["relpath.startswith", "client.close", "repo.branches", "os.listdir", "__opts__.get", "errors.append", "datetime.now", "event.fire_event", "os.makedirs", "ret.add", "log.warning", "errno.EISDIR", "errlist.append", "log.critical", "to_remove.remove", "repo.tags", "hglib.open", "shutil.rmtree", "fp_.write", "salt.payload", "repo.close", "path.startswith", "repo.config", "log.debug", "hgconfig.write", "ret.update", "log.trace", "repo.manifest", "fp_.seek", "glob.glob", "copy.deepcopy", "data.get", "cachedir_ls.remove", "errors.extend", "log.error", "locked.extend", "per_remote_conf.get", "repo_url.encode", "os.stat", "hglib.init", "log.info", "failed.append", "ret.get", "data.decode", "fnmatch.fnmatch", "logging.getLogger", "repos.append", "load.get", "fp_.read", "to_remove.append", "exc.errno", "load.pop", "os.path", "logging.DEBUG", "hglib.error", "success.append", "filepath.rsplit", "salt.utils", "cleared.extend", "os.remove", "salt.fileserver", "repo_conf.update", "repo.bookmarks"]}, "minionfs.py": {"libraries": ["salt.utils.gzip_util", "os", "salt.utils.path", "salt.utils.hashutils", "logging", "salt.utils.url", "salt.utils.versions", "salt.utils.stringutils", "salt.utils.files", "salt.fileserver"], "function_names": ["envs", "dir_list", "serve_file", "update", "__virtual__", "_is_exposed", "file_hash", "file_list", "find_file"], "function_calls": ["len", "envs", "_is_exposed", "file_hash", "list"], "class_names": [], "class_method_calls": ["relpath.startswith", "os.listdir", "prefix.startswith", "os.makedirs", "log.warning", "os.sep", "fp_.write", "log.debug", "fp_.seek", "os.stat", "data.decode", "path.split", "logging.getLogger", "ret.append", "load.get", "fp_.read", "load.pop", "os.path", "prefix.partition", "salt.utils", "salt.fileserver"]}, "roots.py": {"libraries": ["salt.utils.gzip_util", "errno", "salt.utils.event", "os", "salt.utils.path", "salt.utils.hashutils", "salt.utils.platform", "logging", "salt.utils.versions", "salt.utils.stringutils", "salt.utils.files", "salt.fileserver", "salt.utils.verify"], "function_names": ["_translate_sep", "file_list_emptydirs", "envs", "dir_list", "_add_to", "serve_file", "update", "_add_file_stat", "file_list", "file_hash", "find_file", "_file_lists", "symlink_list"], "function_calls": ["_translate_sep", "int", "_add_to", "sorted", "_add_file_stat", "str", "set", "float", "file_hash", "_file_lists", "list"], "class_names": [], "class_method_calls": ["os.unlink", "os.listdir", "__opts__.get", "rel_dest.startswith", "event.fire_event", "new_mtime_map.items", "os.makedirs", "log.warning", "new_mtime_map.get", "kwargs.pop", "errno.EEXIST", "log.critical", "symlinks.items", "line.strip", "fp_.write", "root.replace", "key.startswith", "log.debug", "log.trace", "fp_.seek", "err.errno", "link_dest.startswith", "os.stat", "log.error", "ret.get", "logging.getLogger", "path.replace", "load.get", "fp_.read", "load.pop", "os.path", "salt.utils", "tgt.add", "salt.fileserver"]}, "s3fs.py": {"libraries": ["salt.utils.gzip_util", "time", "os", "salt.utils.hashutils", "logging", "urllib.parse", "salt.utils.versions", "pprint", "datetime", "salt.utils.files", "salt.modules", "salt.fileserver", "pickle"], "function_names": ["_find_dirs", "envs", "__get_s3_meta", "_write_buckets_cache_file", "_prune_deleted_files", "_is_env_per_bucket", "_get_file_from_s3", "_find_files", "_get_cached_file_name", "update", "_get_buckets", "file_list", "file_hash", "find_file", "file_list_emptydirs", "_get_buckets_cache_filename", "_trim_env_off_path", "_get_cache_dir", "_find_file_meta", "dir_list", "serve_file", "_get_s3_key", "_refresh_buckets_cache_file", "_read_buckets_cache_file", "_init"], "function_calls": ["_find_dirs", "__get_s3_meta", "_is_env_per_bucket", "_prune_deleted_files", "_write_buckets_cache_file", "_get_file_from_s3", "list", "_find_files", "_get_cached_file_name", "int", "set", "_get_buckets", "all", "_get_buckets_cache_filename", "_trim_env_off_path", "_get_cache_dir", "str", "ValueError", "isinstance", "_find_file_meta", "len", "filter", "_get_s3_key", "_refresh_buckets_cache_file", "_read_buckets_cache_file", "_init"], "class_names": [], "class_method_calls": ["os.unlink", "pprint.pformat", "pickle.UnpicklingError", "cached_file_stat.st_size", "dirpaths.add", "time.time", "os.listdir", "__opts__.get", "bucket.items", "bucket_files.items", "header_name.strip", "bucket_meta.items", "cached_file_stat.st_mtime", "os.makedirs", "bucket.values", "log.warning", "k.endswith", "kwargs.pop", "os.walk", "ret.extend", "metadata.items", "headers.append", "file_etag.find", "log.debug", "fp_.seek", "datetime.datetime", "bucket_dict.items", "meta_response.update", "os.stat", "fs.is_file_ignored", "log.info", "pickle.dump", "data.decode", "path.split", "header.get", "urllib.parse", "os.rmdir", "logging.getLogger", "bucket_files_list.append", "ret.append", "load.get", "fp_.read", "roots.add", "logging.DEBUG", "metadata.keys", "load.pop", "log.isEnabledFor", "os.path", "cached_files.add", "pickle.load", "header_value.strip", "salt.utils", "os.remove"]}, "svnfs.py": {"libraries": ["os", "salt.utils.event.tagify", "salt.utils.stringutils", "salt.utils.files", "salt.utils.gzip_util", "errno", "hashlib", "pysvn", "salt.utils.data", "salt.utils.hashutils", "shutil", "fnmatch", "salt.utils.versions", "salt.config.DEFAULT_HASH_TYPE", "logging", "salt.utils.url", "salt.exceptions.FileserverConfigError", "salt.utils.path", "datetime.datetime", "salt.fileserver", "copy"], "function_names": ["_failhard", "envs", "_do_lock", "_file_lists", "update", "_add_error", "__virtual__", "file_list", "file_hash", "_do_clear_lock", "find_file", "file_list_emptydirs", "_rev", "_env_root", "clear_cache", "lock", "dir_list", "serve_file", "init", "clear_lock", "_env_is_exposed", "_clear_old_remotes"], "function_calls": ["_failhard", "envs", "FileserverConfigError", "_do_lock", "any", "sorted", "dict", "_file_lists", "list", "next", "set", "_add_error", "_do_clear_lock", "hash_type", "all", "_rev", "_env_root", "str", "lock", "isinstance", "len", "getattr", "bool", "tagify", "init", "clear_lock", "_env_is_exposed", "_clear_old_remotes", "iter"], "class_names": [], "class_method_calls": ["os.listdir", "__opts__.get", "errors.append", "datetime.now", "event.fire_event", "os.makedirs", "log.warning", "ret.add", "errno.EISDIR", "errlist.append", "CLIENT.status", "log.critical", "to_remove.remove", "shutil.rmtree", "fp_.write", "salt.payload", "pysvn._pysvn", "path.startswith", "log.debug", "pysvn.Client", "ret.update", "log.trace", "CLIENT.info", "fp_.seek", "copy.deepcopy", "data.get", "errors.extend", "cachedir_ls.remove", "log.error", "locked.extend", "os.stat", "log.info", "failed.append", "ret.get", "data.decode", "CLIENT.checkout", "fnmatch.fnmatch", "logging.getLogger", "repos.append", "load.get", "fp_.read", "to_remove.append", "CLIENT.update", "load.pop", "os.path", "exc.errno", "success.append", "salt.utils", "cleared.extend", "os.remove", "salt.fileserver", "repo_conf.update"]}, "chronos.py": {"libraries": ["salt.utils.http", "logging"], "function_names": ["__virtual__", "init", "shutdown", "ping"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "log.debug", "log.error", "logging.getLogger"]}, "cimc.py": {"libraries": ["logging"], "function_names": ["logging_levels", "hostname", "user", "power_configuration", "ntp", "syslog", "__virtual__", "_default_ret"], "function_calls": ["str", "_default_ret", "isinstance"], "class_names": [], "class_method_calls": ["log.error", "logging.getLogger"]}, "core.py": {"libraries": ["salt.version.__version_info__", "os", "salt.modules.cmdmod", "salt.modules.network", "lsb_release", "salt.modules.smbios", "salt.utils.network._clear_interfaces", "salt.utils.stringutils", "salt.utils.files", "salt.version.__version__", "wmi", "zmq", "time", "hashlib", "salt.utils.win_reg", "salt.utils.platform.linux_distribution", "salt.utils.args", "errno.EPERM", "salt.utils.dns", "socket", "salt.utils.win_osinfo", "re", "salt.exceptions", "salt.utils.network", "logging", "errno.EACCES", "locale", "win32api", "salt.utils.pkg.rpm", "salt.utils.network._get_interfaces", "salt.utils.path", "platform.freedesktop_os_release", "salt.utils.platform", "uuid", "sys", "subprocess", "datetime", "salt.utils.winapi", "platform", "dateutil.tz"], "function_names": ["_osrelease_data", "_windows_os_release_grain", "__init__", "_os_release_to_grains", "ip4_interfaces", "_family_id", "get_server_id", "_osx_memdata", "_hw_data", "_ps", "_linux_cpudata", "_linux_bin_exists", "_aix_memdata", "_memdata", "_parse_lsb_release", "pythonpath", "cwd", "get_machine_id", "saltversion", "_linux_init_system", "_sunos_cpudata", "_legacy_linux_distribution_data", "dns", "pythonversion", "_bsd_cpudata", "_parse_cpe_name", "_parse_junos_showver", "_linux_memdata", "_windows_platform_data", "_windows_memdata", "_derive_os_grain", "os_data", "_linux_gpu_data", "_parse_os_release", "_aix_cpudata", "_aix_get_machine_id", "hostname", "_linux_distribution_data", "saltpath", "_prettify_os_family", "zmqversion", "_linux_lsb_distrib_data", "ip_interfaces", "_windows_cpudata", "_windows_virtual", "_sunos_memdata", "_freedesktop_os_release", "path", "hwaddr_interfaces", "_osarch", "pythonexecutable", "saltversioninfo", "_virtual", "_linux_devicetree_platform_data", "fqdns", "_osx_platform_data", "ip6_interfaces", "_sunos_release", "id_", "_virtual_hv", "_clean_value", "_systemd", "_osx_gpudata", "_smartos_os_data", "_netbsd_gpu_data", "_bsd_memdata", "_os_release_quirks_for_osrelease", "ip_fqdn", "default_gateway", "locale_info", "kernelparams", "_read_dt_string", "get_master", "append_domain", "_os_release_quirks_for_oscodename", "_selinux"], "function_calls": ["_osrelease_data", "_windows_os_release_grain", "any", "_linux_distribution", "sorted", "_os_release_to_grains", "_family_id", "_osx_memdata", "dict", "_ps", "_linux_cpudata", "_linux_bin_exists", "_parse_lsb_release", "_memdata", "max", "_aix_memdata", "enumerate", "list", "int", "_linux_init_system", "_legacy_linux_distribution_data", "set", "_sunos_cpudata", "_parse_cpe_name", "_bsd_cpudata", "_derive_os_grain", "_parse_junos_showver", "_linux_memdata", "_windows_platform_data", "_windows_memdata", "_linux_gpu_data", "_parse_os_release", "OSError", "_aix_get_machine_id", "_aix_cpudata", "hostname", "_get_interfaces", "_selinux", "range", "_prettify_os_family", "_linux_distribution_data", "str", "_linux_lsb_distrib_data", "_windows_cpudata", "_windows_virtual", "_sunos_memdata", "_osarch", "tuple", "_virtual", "_linux_devicetree_platform_data", "isinstance", "len", "_osx_platform_data", "_clear_interfaces", "hasattr", "_sunos_release", "_virtual_hv", "_clean_value", "abs", "float", "_systemd", "_osx_gpudata", "isdir", "_os_release_quirks_for_osrelease", "_bsd_memdata", "_smartos_os_data", "_netbsd_gpu_data", "_read_dt_string", "_freedesktop_os_release", "_os_release_quirks_for_oscodename", "_hw_data"], "class_names": [], "class_method_calls": ["output.lower", "grains.get", "sysfs_firmware_info.items", "nbsd_hwdata.items", "line.partition", "cmds.update", "re.DOTALL", "vendor.lower", "family_id.capitalize", "re.search", "priority.strip", "osrelease.split", "obp_rev.strip", "id_like.split", "re.compile", "os.environ", "wmi_c.Win32_ComputerSystem", "model.split", "_OS_NAME_MAP.get", "err.errno", "sys.path", "osinfo.Caption", "socket.AF_INET", "socket.gethostname", "os_release.get", "platform.system", "motherboardinfo.Product", "line.startswith", "osinfo.ProductType", "motherboardinfo.SerialNumber", "enabled_features.append", "wmi_c.Win32_OperatingSystem", "txt.splitlines", "f.read", "pcictl_out.splitlines", "distroname.replace", "socket.AF_INET6", "subprocess.run", "key.lower", "xen_feature_table.items", "decoded_line.split", "salt.utils", "fieldval.partition", "hwdata.items", "machineid.read", "wmi_c.Win32_TimeZone", "line.split", "__opts__.get", "sys.executable", "_OS_FAMILY_MAP.get", "systeminfo.Manufacturer", "biosinfo.SerialNumber", "log.warning", "locale.getlocale", "socket.getaddrinfo", "devs.append", "timediff.seconds", "args.append", "line.rstrip", "re.match", "match.group", "os.uname", "_path.split", "value.rstrip", "uname_v.index", "_VERSION_RE.match", "line.lower", "os.name", "vz_re.match", "fw_date.strip", "ifile.read", "log.error", "cmds.items", "vz_match.groups", "lsb_release.get_distro_information", "log.exception", "val.replace", "init_bin.endswith", "osdata.get", "lspci_out.splitlines", "caption.split", "wmi_c.Win32_BIOS", "re.IGNORECASE", "product.startswith", "item.split", "sys.version_info", "hardware.splitlines", "relno.group", "os.path", "decoded_line.startswith", "zmq.zmq_version", "cur_dev.get", "roles.append", "cpe.get", "fhr.read", "gpus.append", "res.groups", "fieldname.strip", "release.group", "win32api.GlobalMemoryStatusEx", "wmi_c.Win32_ComputerSystemProduct", "obp_date.strip", "platform.version", "subprocess.PIPE", "salt.modules", "timeinfo.Description", "fw_rev.strip", "value.endswith", "line.strip", "uuid.UUID", "failed_commands.add", "uname_v.startswith", "fbsd_hwdata.items", "os.stat", "salt.exceptions", "part.get", "item.decode", "wmi.WMI", "uname_v.split", "val.strip", "log.info", "re.split", "output.splitlines", "vendor_match.group", "out.splitlines", "key.strip", "fp_.read", "hashlib.sha256", "find_codename.search", "arch.strip", "lspci_list.append", "grains.update", "field_name.strip", "failed_commands.discard", "l.decode", "val.split", "uuid.lower", "csproductinfo.UUID", "archinfo.get", "biosinfo.Name", "os.access", "_REPLACE_LINUX_RE.sub", "os.R_OK", "secondary.get", "platform.release", "time.tzname", "osinfo.Version", "find_release.search", "key.startswith", "line.find", "log.debug", "swap_total.endswith", "value.isdigit", "wmi_c.Win32_BaseBoard", "log.trace", "regex.search", "cpu_match.group", "_LSB_REGEX.match", "mem.startswith", "grains.items", "iface_ips.append", "systeminfo.Model", "biosinfo.Version", "re.sub", "osinfo.Manufacturer", "res.group", "error.errno", "os.getcwd", "grains.pop", "logging.getLogger", "os.linesep", "maker.startswith", "regex.match", "release.items", "osrelease.append", "id_.encode", "swap_data.split", "release_re.search", "codename.group", "platform.uname", "datetime.datetime", "dateutil.tz", "x.strip"]}, "disks.py": {"libraries": ["glob", "salt.modules.cmdmod", "salt.utils.path", "re", "salt.utils.platform", "logging", "salt.utils.files"], "function_names": ["_freebsd_geom", "_windows_disks", "parse_geom_attribs", "_linux_disks", "disks", "_datavalue"], "function_calls": ["len", "int", "_freebsd_geom", "_windows_disks", "parse_geom_attribs", "_linux_disks", "_datavalue"], "class_names": ["_geomconsts"], "class_method_calls": ["line.split", "_geomconsts._aliases", "name.startswith", "salt.modules", "_geomconsts._datatypes", "re.search", "key.startswith", "_geomconsts.__dict__", "log.trace", "entry.split", "glob.glob", "device.split", "devices.split", "_geomconsts.ROTATIONRATE", "tmp.pop", "entry_fp.read", "logging.getLogger", "tmp.get", "search.group", "_geomconsts.GEOMNAME", "salt.utils"]}, "extra.py": {"libraries": ["glob", "os", "salt.utils.yaml", "salt.utils.path", "salt.utils.data", "salt.utils.platform", "logging", "salt.utils.files", "salt.utils"], "function_names": ["config", "shell", "__secure_boot", "transactional", "uefi"], "function_calls": ["len", "next", "bool", "__secure_boot", "filter"], "class_names": [], "class_method_calls": ["os.environ", "logging.getLogger", "glob.glob", "fd.read", "os.path", "log.warning", "salt.utils", "log.debug"]}, "fibre_channel.py": {"libraries": ["glob", "salt.modules.cmdmod", "salt.utils.platform", "logging", "salt.utils.files"], "function_names": ["__virtual__", "_windows_wwns", "_linux_wwns", "fibre_channel_wwns"], "function_calls": ["_windows_wwns", "_linux_wwns"], "class_names": [], "class_method_calls": ["line.rstrip", "logging.getLogger", "glob.glob", "ret.append", "_wwn.read", "__opts__.get", "content.splitlines", "salt.utils", "salt.modules"]}, "fx2.py": {"libraries": ["salt.utils.http", "logging", "salt.utils.path"], "function_names": ["find_credentials", "shutdown", "admin_username", "init", "_grains", "chconfig", "host", "__virtual__", "grains", "grains_refresh", "ping", "admin_password"], "function_calls": ["grains", "find_credentials", "list", "_grains"], "class_names": [], "class_method_calls": ["logging.getLogger", "DETAILS.get", "r.get", "log.info", "usernames.append", "k.startswith", "__pillar__.get", "salt.utils", "log.debug", "kwargs.pop", "log.critical"]}, "iscsi.py": {"libraries": ["errno", "salt.modules.cmdmod", "salt.utils.path", "salt.utils.platform", "logging", "salt.utils.files"], "function_names": ["__virtual__", "_windows_iqn", "iscsi_iqn", "_aix_iqn", "_linux_iqn"], "function_calls": ["_linux_iqn", "_windows_iqn", "_aix_iqn"], "class_names": [], "class_method_calls": ["line.strip", "line.rstrip", "aix_ret.split", "logging.getLogger", "ret.append", "line.split", "__opts__.get", "ex.errno", "salt.utils", "errno.ENOENT", "line.startswith", "salt.modules", "log.debug"]}, "junos.py": {"libraries": ["logging", "functools.wraps"], "function_names": ["commit", "install_os", "rollback", "diff", "shutdown", "zeroize", "resultdecorator", "file_copy", "get_table", "rpc", "lock", "unlock", "load", "set_hostname", "install_config", "commit_check", "wrapper", "cli"], "function_calls": ["function", "wraps"], "class_names": [], "class_method_calls": ["logging.getLogger"]}, "lvm.py": {"libraries": ["salt.utils.path", "os"], "function_names": ["pv_present", "vg_absent", "pv_absent", "__virtual__", "vg_present", "lv_present", "_convert_to_mb", "lv_absent"], "function_calls": ["str", "_convert_to_mb", "int", "isinstance"], "class_names": [], "class_method_calls": ["vgname.split", "salt.exceptions", "unit.isdigit", "devices.split", "os.path", "lv_info.get", "salt.utils", "pvs.get"]}, "marathon.py": {"libraries": ["salt.utils.http", "logging"], "function_names": ["__virtual__", "init", "shutdown", "ping"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "log.debug", "log.error", "logging.getLogger"]}, "mdadm.py": {"libraries": ["logging", "salt.utils.files"], "function_names": ["mdadm"], "function_calls": ["sorted", "set"], "class_names": [], "class_method_calls": ["log.trace", "logging.getLogger", "line.split", "salt.utils", "line.startswith", "devices.add"]}, "mdata.py": {"libraries": ["salt.utils.path", "logging", "salt.utils.decorators", "salt.utils.platform"], "function_names": ["list_", "delete_", "get_", "__virtual__", "put_", "_check_mdata_get", "_check_mdata_delete", "_check_mdata_put", "_check_mdata_list"], "function_calls": ["list_", "_check_mdata_get", "_check_mdata_delete", "_check_mdata_put", "_check_mdata_list"], "class_names": [], "class_method_calls": ["decorators.memoize", "salt.utils", "logging.getLogger"]}, "metadata.py": {"libraries": ["os", "socket", "salt.utils.data", "salt.utils.json", "salt.utils.stringutils", "salt.utils.http"], "function_names": ["__virtual__", "_search", "metadata"], "function_calls": ["_search", "isinstance"], "class_names": [], "class_method_calls": ["socket.socket", "http.query", "line.split", "sock.settimeout", "line.endswith", "__opts__.get", "socket.AF_INET", "socket.SOCK_STREAM", "os.path", "sock.connect_ex", "body.split", "salt.utils"]}, "metadata_azure.py": {"libraries": ["salt.utils.http", "logging", "salt.utils.json"], "function_names": ["__virtual__", "metadata"], "function_calls": [], "class_names": [], "class_method_calls": ["azuretest.get", "logging.getLogger", "http.query", "__opts__.get", "result.get", "salt.utils", "log.debug"]}, "metadata_gce.py": {"libraries": ["salt.utils.http", "logging", "salt.utils.json"], "function_names": ["__virtual__", "metadata"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "http.query", "__opts__.get", "googletest.get", "result.get", "salt.utils", "log.debug"]}, "minion_process.py": {"libraries": ["salt.utils.user", "os", "salt.utils.platform"], "function_names": ["_username", "_groupname", "_gid", "_pid", "grains", "_uid"], "function_calls": ["_username", "_groupname", "_gid", "_pid", "_uid"], "class_names": [], "class_method_calls": ["os.getpid", "salt.utils"]}, "napalm.py": {"libraries": ["traceback", "napalm", "salt.utils.platform", "logging", "salt.utils.args", "functools.wraps", "salt.output", "napalm.base.exceptions.ConnectionClosedException", "copy", "importlib"], "function_names": ["func_wrapper", "call", "get_device", "is_proxy", "loaded_ret", "default_ret", "is_always_alive", "virtual", "is_minion", "not_always_alive", "get_device_opts", "proxy_napalm_wrap"], "function_calls": ["Exception", "get_device", "func", "getattr", "int", "is_proxy", "call", "str", "wraps", "is_always_alive", "is_minion", "get_device_opts", "_driver_", "not_always_alive", "isinstance"], "class_names": [], "class_method_calls": ["salt.utils", "napalm.__version__", "kwargs.pop", "importlib.import_module", "salt.output", "func.__globals__", "wrapped_global_namespace.get", "kwargs_copy.items", "log.debug", "ret.update", "traceback.format_exc", "kwargs.get", "copy.deepcopy", "kwargs_copy.update", "log.error", "opts.get", "napalm_device.get", "provider_lib.get_network_driver", "napalm_opts.update", "napalm_opts.get", "nce.msg", "logging.getLogger", "loaded.get", "changes.get", "network_device.get", "device_dict.get", "napalm.base"]}, "nvme.py": {"libraries": ["errno", "salt.utils.path", "salt.utils.platform", "logging", "salt.utils.files"], "function_names": ["__virtual__", "nvme_nqn", "_linux_nqn"], "function_calls": ["_linux_nqn"], "class_names": [], "class_method_calls": ["line.strip", "logging.getLogger", "ret.append", "__opts__.get", "ex.errno", "line.startswith", "errno.ENOENT", "salt.utils", "log.debug"]}, "nxos.py": {"libraries": ["os", "socket", "salt.exceptions.NxosError", "salt.exceptions.CommandExecutionError", "salt.exceptions.NxosClientError", "re", "salt.utils.args.clean_kwargs", "logging", "salt.exceptions.NxosRequestNotSupported", "collections", "http.client", "salt.utils.http", "json", "collections.abc.Iterable"], "function_names": ["_parse_hardware", "_parser", "_parse_plugins", "_use_remote_connection", "__init__", "connect", "version_info", "nxapi_request", "_prepare_conn_args", "_build_request", "ping", "system_info", "request", "parse_response", "_parse_software"], "function_calls": ["len", "_parse_hardware", "_parse_plugins", "NxosClientError", "_parser", "int", "NxapiClient", "UHTTPConnection", "NxosError", "clean_kwargs", "CommandExecutionError", "NxosRequestNotSupported", "zip", "_parse_software", "isinstance"], "class_names": ["NxapiClient", "UHTTPConnection"], "class_method_calls": ["self.nxargs", "salt.utils", "self.connection", "collections.OrderedDict", "self.NXAPI_REMOTE_URI_PATH", "re.MULTILINE", "self.NXAPI_VERSION", "socket.socket", "cmd_result.get", "self.parse_response", "self._use_remote_connection", "json.loads", "json.dumps", "self.NXAPI_UDS", "result.append", "cmd.strip", "re.compile", "body.get", "previous_commands.append", "self._build_request", "kwargs.get", "matcher.finditer", "self.sock", "log.info", "socket.AF_UNIX", "logging.getLogger", "self.path", "output.get", "sock.connect", "client.request", "socket.SOCK_STREAM", "self._prepare_conn_args", "line.groups", "os.path", "response.read", "self.NXAPI_UDS_URI_PATH", "http.client"]}, "opts.py": {"libraries": [], "function_names": ["opts"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["__opts__.get", "__pillar__.get"]}, "panos.py": {"libraries": ["logging", "salt.utils.xmlutil", "xml.etree.ElementTree"], "function_names": ["set_config", "_default_ret", "_set_config", "address_group_exists", "remove_config_lock", "__virtual__", "_build_members", "_edit_config", "_move_top", "rename_config", "service_group_exists", "move_config", "security_rule_exists", "_validate_response", "add_config_lock", "download_software", "address_exists", "_move_after", "commit_config", "delete_config", "_move_bottom", "clone_config", "edit_config", "_get_config", "service_exists", "_move_before"], "function_calls": ["len", "_set_config", "_validate_response", "_move_bottom", "_build_members", "_edit_config", "_move_top", "_move_after", "_default_ret", "_move_before", "isinstance"], "class_names": [], "class_method_calls": ["ret.update", "logging.getLogger", "xml.to_dict", "ET.fromstring", "head.split", "xpath.split"]}, "pending_reboot.py": {"libraries": ["logging", "salt.utils.win_system", "salt.utils.platform"], "function_names": ["__virtual__", "pending_reboot"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "philips_hue.py": {"libraries": ["time", "salt.exceptions.CommandExecutionError", "salt.utils.json", "logging", "http.client", "salt.exceptions.MinionError"], "function_names": ["call_color", "shutdown", "call_blink", "call_rename", "_query", "_get_devices", "call_temperature", "call_switch", "call_ping", "__virtual__", "ping", "_set", "call_lights", "call_effect", "init", "call_status", "call_brightness", "_get_lights", "call_alert"], "function_calls": ["len", "int", "sorted", "str", "_set", "float", "call_blink", "_query", "_get_lights", "dict", "CommandExecutionError", "_get_devices", "MinionError", "max", "min", "isinstance"], "class_names": ["Const"], "class_method_calls": ["Const.COLOR_GREEN", "time.sleep", "color.update", "Const.LAMP_OFF", "conn.close", "Const.COLOR_PURPLE", "resp.reason", "Const.COLOR_ORANGE", "Const.COLOR_YELLOW", "resp.read", "lights.keys", "Const.COLOR_WHITE", "Const.COLOR_RED", "Const.COLOR_BLUE", "kwargs.get", "res.get", "cnf.get", "color.split", "conn.request", "colormap.get", "conn.getresponse", "logging.getLogger", "Const.LAMP_ON", "Const.COLOR_PINK", "resp.status", "devices.keys", "salt.utils", "http.client", "Const.COLOR_DAYLIGHT", "lights.get"]}, "rest_sample.py": {"libraries": ["salt.utils.http", "logging"], "function_names": ["initialized", "package_status", "shutdown", "grains_refresh", "fix_outage", "service_restart", "package_install", "__virtual__", "grains", "ping", "service_start", "service_status", "fns", "service_stop", "alive", "package_remove", "uptodate", "test_from_state", "init", "service_list", "id", "package_list"], "function_calls": ["grains", "ping"], "class_names": [], "class_method_calls": ["salt.utils", "log.debug", "logging.getLogger", "kwargs.get"]}, "smartos.py": {"libraries": ["json", "os", "salt.utils.data", "logging", "salt.utils.files", "salt.utils.atomicfile"], "function_names": ["config_absent", "vm_absent", "_split_docker_uuid", "_load_config", "_get_instance_changes", "_copy_lx_vars", "_is_docker_uuid", "_write_config", "vm_present", "__virtual__", "image_present", "image_absent", "vm_running", "_parse_vmconfig", "vm_stopped", "source_present", "config_present", "image_vacuum", "_is_uuid", "source_absent"], "function_calls": ["len", "hex", "_split_docker_uuid", "_load_config", "list", "int", "str", "sorted", "set", "_get_instance_changes", "_parse_vmconfig", "_copy_lx_vars", "_is_docker_uuid", "_is_uuid", "_write_config", "isinstance"], "class_names": [], "class_method_calls": ["imgtags.get", "uuid.split", "log.warning", "config_env_var.split", "json.loads", "json.dumps", "images.append", "log.debug", "var.lower", "val.remove", "vmconfig.get", "val.append", "img_env_var.startswith", "config_file.write", "log.error", "new_disks.append", "config.items", "logging.getLogger", "os.path", "imgconfig.get", "current.keys", "config.update", "salt.utils", "optval.split", "state.keys", "name.lower"]}, "ssh_sample.py": {"libraries": ["logging", "salt.utils.vt_helper", "salt.utils.json", "salt.utils.vt.TerminalException"], "function_names": ["parse", "service_restart", "initialized", "shutdown", "init", "package_install", "service_list", "service_start", "__virtual__", "grains", "grains_refresh", "package_list", "fns", "ping", "service_stop", "package_remove"], "function_calls": ["parse", "grains"], "class_names": [], "class_method_calls": ["__context__.get", "out.split", "logging.getLogger", "kwargs.get", "log.error", "log.info", "salt.utils", "jsonret.append"]}, "zfs.py": {"libraries": ["salt.utils.stringutils.to_num", "os", "salt.modules.cmdmod", "salt.utils.decorators.memoize", "re", "numbers.Number", "logging", "math", "salt.utils.odict.OrderedDict"], "function_names": ["has_feature_flags", "_command", "to_auto", "to_numeric", "_exec", "to_bool_alt", "_property_normalize_name", "_merge_last", "from_size", "to_size", "is_supported", "_zfs_cmd", "zpool_command", "_zpool_cmd", "to_bool", "to_auto_dict", "from_bool_alt", "_property_detect_type", "from_numeric", "from_str", "is_dataset", "property_data_zpool", "from_auto_dict", "is_snapshot", "property_data_zfs", "from_auto", "_property_parse_cmd", "zfs_command", "_auto", "from_bool", "to_str", "parse_command_result", "_property_create_dict", "is_bookmark", "_check_retcode"], "function_calls": ["_command", "to_auto", "sorted", "_exec", "dict", "_property_normalize_name", "from_size", "_merge_last", "str_to_num", "_zfs_cmd", "OrderedDict", "_zpool_cmd", "int", "from_bool_alt", "_property_detect_type", "zip", "from_numeric", "globals", "from_str", "str", "property_data_zpool", "is_snapshot", "isinstance", "len", "property_data_zfs", "from_auto", "_property_parse_cmd", "float", "from_bool", "_auto", "to_str", "_property_create_dict", "is_bookmark", "_check_retcode"], "class_names": [], "class_method_calls": ["prop_data.lower", "error.replace", "math.pow", "match_size.group", "error.lower", "v_precision.format", "salt.modules", "value.endswith", "re_zfs_size.match", "values.startswith", "props.update", "math.floor", "name.index", "value.startswith", "merge_with.join", "re.compile", "values.items", "zfs_size.index", "cmd.append", "math.log", "logging.getLogger", "value.replace", "os.path", "salt.utils"]}, "context.py": {"libraries": ["threading", "contextlib.contextmanager", "copy", "collections.abc.MutableMapping"], "function_names": ["__enter__", "__delitem__", "__len__", "__str__", "__deepcopy__", "__iter__", "__init__", "__getitem__", "__exit__", "__setitem__", "__copy__", "clone", "func_globals_inject", "__repr__", "_dict", "active"], "function_calls": ["len", "hasattr", "super", "type", "iter", "repr", "ChildContextDict", "isinstance"], "class_names": ["ChildContextDict", "ContextDict", "NamespacedDictWrapper"], "class_method_calls": ["new_obj.global_data", "self._state", "injected_func_globals.append", "threading.local", "func_globals.update", "self.pre_keys", "copy.copy", "func.__globals__", "self.active", "self._old_data", "self._dict", "copy.deepcopy", "self.__dict", "func.__func__", "self.global_data", "self._threadsafe", "self.parent", "func.im_func", "self._data"]}, "dunder.py": {"libraries": ["salt.loader.context"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["loader_context.named_context", "salt.loader"]}, "lazy.py": {"libraries": ["logging", "salt.exceptions", "collections.abc.MutableMapping"], "function_names": ["clear", "missing_fun_string", "__bool__", "__len__", "__iter__", "__init__", "_load_all", "__getitem__", "_load", "_missing", "__setitem__", "verify_fun", "__delitem__", "__nonzero__"], "function_calls": ["len", "bool", "getattr", "KeyError", "iter", "NotImplementedError"], "class_names": ["LazyDict"], "class_method_calls": ["lazy_obj.missing_fun_string", "self.missing_fun_string", "logging.getLogger", "salt.exceptions", "self._load_all", "self._missing", "self.__nonzero__", "self.clear", "self.loaded", "self._load", "log.debug", "self._dict"]}, "fluent_mod.py": {"libraries": ["time", "socket", "salt.utils.msgpack", "salt._logging.LOG_LEVELS", "salt.utils.network", "logging", "datetime", "threading", "logging.handlers"], "function_names": ["format_graylog_v0", "setup_handlers", "_reconnect", "emit", "_make_packet", "get_global_sender", "close", "__init__", "_close", "setup", "format_gelf_v1_1", "_send", "__virtual__", "emit_with_time", "format_logstash_v0", "_send_internal", "format_logstash_v1", "formatTime"], "function_calls": ["len", "FluentHandler", "getattr", "MessageFormatter", "any", "int", "print", "super", "FluentSender", "repr", "isinstance"], "class_names": ["FluentHandler", "FluentSender", "MessageFormatter"], "class_method_calls": ["self.payload_type", "fluent_handler.setLevel", "record.process", "self.sender", "record.threadName", "time.time", "self._send_internal", "record.pathname", "__opts__.get", "self.host", "record.created", "self.emit_with_time", "salt.utils", "record.exc_info", "self.timeout", "record.levelname", "self.format", "socket.socket", "record.funcName", "syslog_levels.get", "self.formatTime", "record.name", "self._reconnect", "self._close", "log.debug", "record.__dict__", "log.trace", "self.verbose", "kwargs.get", "datetime.datetime", "logging.Formatter", "fluent_handler.setFormatter", "self.acquire", "self.version", "self._make_packet", "self._send", "socket.AF_INET", "self.pendings", "self.tag", "self.lock", "socket.AF_UNIX", "self.socket", "self.tags", "logging.Handler", "logging.getLogger", "self.formatException", "record.getMessage", "sock.settimeout", "record.processName", "self.msg_path", "self.msg_type", "message_dict.update", "self.port", "threading.Lock", "socket.SOCK_STREAM", "self.release", "sock.connect", "record.lineno", "self.bufmax"]}, "log4mongo_mod.py": {"libraries": ["log4mongo.handlers.MongoHandler", "socket", "salt._logging.LOG_LEVELS", "logging", "log4mongo.handlers.MongoFormatter"], "function_names": ["__virtual__", "setup_handlers", "format"], "function_calls": ["MongoHandler", "FormatterWithHost", "MongoFormatter"], "class_names": ["FormatterWithHost"], "class_method_calls": ["logging.Formatter", "__opts__.get", "config_fields.items", "socket.gethostname", "mongoformatter.format"]}, "logstash_mod.py": {"libraries": ["os", "salt._logging.LOG_LEVELS", "zmq.error", "salt.utils.json", "salt.utils.network", "logging", "salt.utils.stringutils", "datetime", "logging.handlers", "zmq"], "function_names": ["setup_handlers", "emit", "close", "format_v1", "__init__", "publisher", "format_v0", "__virtual__", "makePickle", "formatTime"], "function_calls": ["getattr", "ZMQLogstashHander", "any", "hasattr", "super", "DatagramLogstashHandler", "LogstashFormatter", "repr", "isinstance"], "class_names": ["DatagramLogstashHandler", "ZMQLogstashHander", "LogstashFormatter"], "class_method_calls": ["os.getpid", "record.process", "record.threadName", "udp_handler.setFormatter", "zmq.LINGER", "record.pathname", "__opts__.get", "record.created", "salt.utils", "record.exc_info", "record.levelname", "self.format", "udp_handler.setLevel", "zmq_handler.setFormatter", "record.funcName", "self.formatTime", "record.name", "zmq.SNDHWM", "log.debug", "zmq_handler.setLevel", "record.__dict__", "log.trace", "datetime.datetime", "logging.Formatter", "self.version", "self.publisher", "self._publisher", "self._pid", "self._zmq_hwm", "zmq.HWM", "zmq.Context", "self._context", "zmq.RCVHWM", "logging.Handler", "self._address", "logging.getLogger", "self.formatException", "record.getMessage", "record.processName", "self.msg_path", "self.msg_type", "zmq.error", "zmq.PUB", "record.lineno", "logging.NOTSET", "logging.handlers"]}, "sentry_mod.py": {"libraries": ["raven.utils.urlparse.urlparse", "raven.handlers.logging.SentryHandler", "salt.loader", "salt._logging.LOG_LEVELS", "re", "raven.transport.default_transports", "raven", "logging", "raven.transport.TransportRegistry"], "function_names": ["__virtual__", "setup_handlers", "get_config_value", "filter"], "function_calls": ["any", "urlparse", "get_config_value", "SentryHandler", "ValueError", "TransportRegistry", "FilterExcludedMessages"], "class_names": ["FilterExcludedMessages"], "class_method_calls": ["handler.addFilter", "regex.search", "logging.getLogger", "url.scheme", "salt.loader", "client.context", "raven.Client", "__opts__.get", "transport_registry.supported_scheme", "record.getMessage", "load_err_msg.append", "log.info", "handler.setLevel", "re.compile", "options.update", "log.debug"]}, "master.py": {"libraries": ["salt.utils.zeromq.zmq", "os", "signal", "salt.utils.cache.CacheCli", "salt.cache", "threading.Event", "salt.utils.files", "salt.utils.stringutils", "salt.utils.verify", "salt.payload", "salt.utils.minions", "salt.utils.atomicfile", "salt.client", "logging", "salt.utils.process.Process", "salt.pillar", "salt.config", "salt.utils.platform", "threading.Thread", "salt.exceptions.SaltException"], "function_names": ["_read_proc_file", "get_cached_mine_data", "__init__", "_get_minion_pillar", "get_running_jobs", "run", "get_values_of_matching_keys", "get_master_key", "get_minion_pillar", "signal_handler", "_get_live_minion_grains", "_get_cached_minion_data", "_get_cached_mine_data", "stop", "_get_live_minion_pillar", "_get_minion_grains", "ping_all_connected_minions", "_tgt_to_list", "_check_cmdline", "cleanup", "clear_cached_minion_data", "get_minion_grains", "secure"], "function_calls": ["len", "cache_cli", "_read_proc_file", "SaltException", "any", "super", "int", "ConnectedCache", "type", "Event", "CacheWorker", "dict", "CacheTimer", "_check_cmdline", "list", "isinstance"], "class_names": ["CacheWorker", "MasterPillarUtil", "ConnectedCache", "CacheTimer"], "class_method_calls": ["conc.start", "cupd_in.bind", "zmq.LINGER", "zmq.REP", "grains.get", "self.signal_handler", "self.timer_sock", "self.daemon", "context.term", "grains.copy", "self.timer", "cached_grains.items", "signal.SIGINT", "self._get_minion_pillar", "self._get_live_minion_grains", "self.saltenv", "kwargs.get", "cc.get_cached", "creq_in.setsockopt", "ckminions.check_minions", "signal.signal", "creq_in.recv", "timer_in.recv", "self.running", "self.timer_stop", "self.secure", "self.pillar_fallback", "lret.items", "cupd_in.setsockopt", "salt.utils", "self.tgt_type", "zmq.POLLIN", "self.cleanup", "self._get_cached_minion_data", "log.warning", "mine_data.pop", "socket.bind", "client.cmd", "ret.extend", "zmq.SUBSCRIBE", "self.use_cached_pillar", "clear_what.append", "fp_.close", "data.get", "salt.client", "log.error", "self.__class__", "log.exception", "creq_in.close", "salt.pillar", "self.grains_fallback", "self.cache_sock", "poller.register", "os.path", "timer_in.setsockopt", "poller.poll", "context.socket", "cw.start", "cupd_in.close", "self.tgt", "salt.cache", "socks.get", "creq_in.bind", "self.upd_t_sock", "Thread.__init__", "cached_pillar.items", "creq_in.send", "self.stopped", "socket.send", "cc.put_cache", "os.chmod", "self.minions", "zmq.ZMQError", "timer_in.connect", "log.info", "zmq.Context", "self.cache", "self._get_cached_mine_data", "ret.append", "salt.config", "key_user.replace", "pillar.compile_pillar", "fp_.read", "timer_in.close", "self._get_minion_grains", "os.remove", "zmq.SUB", "pillars.pop", "os.listdir", "self.update_sock", "client.cmd_async", "key.read", "salt.payload", "self._get_live_minion_pillar", "key_user.startswith", "log.debug", "zmq.Poller", "cupd_in.recv", "log.trace", "self.opts", "self._tgt_to_list", "self.stop", "opts.get", "grains.pop", "logging.getLogger", "socket.setsockopt", "zmq.PUB", "cret.items", "self.use_cached_grains"]}, "cache_match.py": {"libraries": ["logging", "salt.utils.data", "salt.utils.minions"], "function_names": ["mmatch"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "ckminions._check_cache_minions", "logging.getLogger"]}, "compound_match.py": {"libraries": ["logging", "seco.range", "salt.utils.minions", "salt.loader"], "function_names": ["match", "_load_matchers"], "function_calls": ["eval", "_load_matchers", "str", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.loader", "log.error", "ref.get", "opts.get", "results.append", "words.pop", "salt.utils", "tgt.split", "log.debug"]}, "compound_pillar_exact_match.py": {"libraries": ["logging", "salt.utils.minions"], "function_names": ["mmatch"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "ckminions._check_compound_minions", "logging.getLogger"]}, "confirm_top.py": {"libraries": ["logging", "salt.loader"], "function_names": ["confirm_top"], "function_calls": ["m", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.loader"]}, "data_match.py": {"libraries": ["salt.loader", "salt.utils.data", "salt.utils.network", "logging", "fnmatch", "salt.utils.minions"], "function_names": ["match"], "function_calls": ["len", "str", "bool", "isinstance"], "class_names": [], "class_method_calls": ["tgt.split", "fnmatch.fnmatch", "logging.getLogger", "salt.loader"]}, "glob_match.py": {"libraries": ["logging", "fnmatch"], "function_names": ["match"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["fnmatch.fnmatch", "logging.getLogger", "opts.get"]}, "grain_match.py": {"libraries": ["logging", "salt.utils.data", "salt.defaults.DEFAULT_TARGET_DELIM"], "function_names": ["match"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "log.debug", "log.error", "logging.getLogger"]}, "grain_pcre_match.py": {"libraries": ["logging", "salt.utils.data", "salt.defaults.DEFAULT_TARGET_DELIM"], "function_names": ["match"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "log.debug", "log.error", "logging.getLogger"]}, "ipcidr_match.py": {"libraries": ["logging", "salt._compat.ipaddress", "salt.utils.network"], "function_names": ["match"], "function_calls": ["str", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "ipaddress.IPv4Address", "log.error", "ipaddress.IPv6Address", "salt.utils", "tgt.version", "ipaddress.ip_network", "ipaddress.ip_address"]}, "list_match.py": {"libraries": ["logging"], "function_names": ["match"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "tgt.startswith", "tgt.endswith", "opts.get", "log.warning"]}, "nodegroup_match.py": {"libraries": ["logging", "salt.utils.minions", "salt.loader"], "function_names": ["match", "_load_matchers"], "function_calls": ["_load_matchers"], "class_names": [], "class_method_calls": ["salt.utils", "log.debug", "logging.getLogger", "salt.loader"]}, "pcre_match.py": {"libraries": ["re"], "function_names": ["match"], "function_calls": ["bool"], "class_names": [], "class_method_calls": ["re.match", "opts.get"]}, "pillar_exact_match.py": {"libraries": ["logging", "salt.utils.data"], "function_names": ["match"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "log.info", "salt.utils", "log.debug"]}, "pillar_match.py": {"libraries": ["logging", "salt.utils.data", "salt.defaults.DEFAULT_TARGET_DELIM"], "function_names": ["match"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "log.info", "salt.utils", "log.debug"]}, "pillar_pcre_match.py": {"libraries": ["logging", "salt.utils.data", "salt.defaults.DEFAULT_TARGET_DELIM"], "function_names": ["match"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "log.info", "salt.utils", "log.debug"]}, "range_match.py": {"libraries": ["logging", "seco.range"], "function_names": ["match"], "function_calls": [], "class_names": [], "class_method_calls": ["log.debug", "range_.expand", "seco.range", "logging.getLogger"]}, "deltaproxy.py": {"libraries": ["logging"], "function_names": ["initialized", "shutdown", "init", "__virtual__", "grains", "grains_refresh", "ping"], "function_calls": ["grains"], "class_names": [], "class_method_calls": ["log.debug", "logging.getLogger", "DETAILS.get"]}, "proxy.py": {"libraries": ["logging", "salt.utils.platform"], "function_names": ["is_proxytype"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger", "opts.get"]}, "acme.py": {"libraries": ["logging", "salt.utils.dictdiffer"], "function_names": ["__virtual__", "cert"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "aix_group.py": {"libraries": ["grp", "logging"], "function_names": ["chgid", "delete", "adduser", "info", "__virtual__", "members", "add", "deluser", "getent"], "function_calls": ["info"], "class_names": [], "class_method_calls": ["grinfo.gr_mem", "grinfo.gr_passwd", "logging.getLogger", "grp.getgrnam", "ret.append", "grinfo.gr_gid", "grinfo.gr_name", "grp.getgrall"]}, "aix_shadow.py": {"libraries": ["logging"], "function_names": ["__virtual__", "login_failures", "unlock", "locked"], "function_calls": [], "class_names": [], "class_method_calls": ["line.split", "logging.getLogger", "ret.append"]}, "aixpkg.py": {"libraries": ["os", "salt.utils.path", "salt.exceptions.CommandExecutionError", "salt.utils.data", "salt.utils.functools", "salt.utils.pkg", "logging", "copy", "pathlib"], "function_names": ["latest_version", "remove", "_is_installed", "version", "upgrade_available", "_is_installed_rpm", "__virtual__", "install", "list_pkgs", "_check_pkg", "_list_pkgs_from_context"], "function_calls": ["len", "any", "version", "list_pkgs", "CommandExecutionError", "_check_pkg", "_list_pkgs_from_context"], "class_names": [], "class_method_calls": ["filename.endswith", "pathlib.Path", "logging.getLogger", "copy.deepcopy", "kwargs.get", "__context__.pop", "line.split", "name_chk.startswith", "errors.append", "aix_line.split", "name_chk.split", "salt.utils", "os.path", "line.startswith", "available_output.split", "log.debug", "kwargs.pop", "exc.info"]}, "aliases.py": {"libraries": ["os", "salt.utils.path", "re", "salt.utils.stringutils", "salt.exceptions.SaltInvocationError", "salt.utils.files", "stat", "tempfile", "salt.utils.atomicfile"], "function_names": ["list_aliases", "__parse_aliases", "__write_aliases_file", "has_target", "__get_aliases_filename", "rm_alias", "set_target", "get_target"], "function_calls": ["list_aliases", "__parse_aliases", "__write_aliases_file", "get_target", "__get_aliases_filename", "SaltInvocationError", "isinstance"], "class_names": [], "class_method_calls": ["__opts__.get", "out.append", "line.strip", "os.chmod", "tempfile.NamedTemporaryFile", "out.write", "re.compile", "write_line.encode", "afn_st.st_uid", "afn_st.st_mode", "os.stat", "afn_st.st_gid", "match.groups", "ret.append", "os.path", "out.name", "os.chown", "stat.S_IMODE", "salt.utils", "__ALIAS_RE.match"]}, "alternatives.py": {"libraries": [], "function_names": ["auto", "remove", "__virtual__", "install", "set_"], "function_calls": [], "class_names": [], "class_method_calls": ["line.startswith", "line.endswith", "display.splitlines"]}, "ansiblegate.py": {"libraries": ["os", "salt.fileclient", "salt.loader.dunder.__file_client__", "logging", "sys", "salt.utils.decorators.path", "salt.utils.decorators.depends"], "function_names": ["_file_client", "get_args", "playbooks", "__virtual__", "_changes", "__call__"], "function_calls": ["depends", "AnsibleState", "any", "_file_client", "_changes", "setattr", "all", "isinstance"], "class_names": ["AnsibleState"], "class_method_calls": ["args.append", "log.trace", "logging.getLogger", "salt.fileclient", "kwargs.update", "kwargs.items", "sys.modules", "self.get_args", "data.get", "client._extrn_path", "err.__class__", "checks.get", "results.get", "os.path", "__file_client__.value", "salt.utils", "log.debug", "kwargs.pop"]}, "apache.py": {"libraries": ["os", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["__virtual__", "configfile"], "function_calls": ["print"], "class_names": [], "class_method_calls": ["os.path", "salt.utils", "config_file.read", "current_configs.strip", "configs.strip"]}, "apcups.py": {"libraries": ["salt.utils.path", "logging", "salt.utils.decorators"], "function_names": ["_check_apcaccess", "status_charge", "status", "__virtual__", "status_load", "status_battery"], "function_calls": ["_check_apcaccess", "status", "float"], "class_names": [], "class_method_calls": ["decorators.memoize", "line.split", "salt.utils", "logging.getLogger"]}, "apf.py": {"libraries": ["salt.utils.path", "salt.exceptions.CommandExecutionError", "iptc"], "function_names": ["running", "_status_apf", "disable", "refresh", "reload", "remove", "enable", "__virtual__", "allow", "__apf_cmd", "deny"], "function_calls": ["_status_apf", "__apf_cmd", "CommandExecutionError"], "class_names": [], "class_method_calls": ["table.chains", "chain.name", "salt.utils", "iptc.Table"]}, "apkpkg.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.utils.data", "logging", "salt.utils.itertools", "copy"], "function_names": ["upgrade", "latest_version", "remove", "version", "purge", "refresh_db", "__virtual__", "install", "list_upgrades", "file_list", "list_pkgs", "file_dict", "owner", "_list_pkgs_from_context"], "function_calls": ["len", "next", "any", "remove", "refresh_db", "iter", "list_pkgs", "file_dict", "CommandExecutionError", "isinstance", "_list_pkgs_from_context"], "class_names": [], "class_method_calls": ["pkgs.get", "pkg_to_install.extend", "__context__.pop", "line.split", "cmd.extend", "__grains__.get", "kwargs.pop", "pkg_to_remove.extend", "output.split", "copy.deepcopy", "kwargs.get", "old.get", "cmd.append", "out.splitlines", "logging.getLogger", "name.split", "line.endswith", "files.append", "pkg_to_upgrade.extend", "salt.utils"]}, "aptly.py": {"libraries": ["os", "salt.utils.path", "re", "salt.utils.json", "logging", "salt.utils.stringutils", "salt.exceptions.SaltInvocationError"], "function_names": ["list_repos", "_format_repo_args", "set_repo", "cleanup_db", "list_mirrors", "_cmd_run", "get_config", "get_repo", "list_published", "__virtual__", "new_repo", "list_snapshots", "_validate_config", "delete_repo"], "function_calls": ["len", "_format_repo_args", "bool", "_cmd_run", "str", "get_repo", "dict", "_validate_config", "SaltInvocationError", "list"], "class_names": [], "class_method_calls": ["settings.pop", "line.strip", "logging.getLogger", "ret.append", "cmd.append", "line.split", "match.group", "failed_settings.update", "log.error", "cmd.extend", "re.search", "os.path", "current_settings.pop", "salt.utils", "key.split", "log.debug", "cmd.insert", "cmd_ret.splitlines"]}, "aptpkg.py": {"libraries": ["logging", "salt.utils.data"], "function_names": ["__virtual__", "held"], "function_calls": [], "class_names": [], "class_method_calls": ["ret.update", "salt.utils", "logging.getLogger", "state.get"]}, "archive.py": {"libraries": ["errno", "os", "tarfile", "salt.utils.path", "salt.exceptions.CommandExecutionError", "re", "salt.utils.hashutils", "salt.utils.platform", "logging", "salt.utils.url", "urllib.parse.urlparse", "salt.utils.args", "salt.utils.files", "stat", "string", "contextlib.closing", "salt.exceptions.CommandNotFoundError", "shlex"], "function_names": ["_path_is_abs", "extracted", "_update_checksum", "_add_explanation", "_is_bsdtar", "_cleanup_destdir", "_read_cached_checksum", "_gen_checksum", "_checksum_file_path", "_compare_checksum"], "function_calls": ["_path_is_abs", "len", "_update_checksum", "_compare_checksum", "bool", "_add_explanation", "func", "int", "_is_bsdtar", "str", "closing", "urlparse", "_cleanup_destdir", "_read_cached_checksum", "_gen_checksum", "_checksum_file_path", "enumerate", "isinstance"], "class_names": [], "class_method_calls": ["tar.extractall", "append_opt.replace", "parsed.netloc", "errors.append", "stat.S_ISDIR", "string.ascii_lowercase", "incorrect_type.append", "cmd.format", "tarfile.ReadError", "exc.strerror", "lines.append", "os.makedirs", "log.warning", "kwargs.pop", "tar_cmd.append", "line.rstrip", "re.match", "urlparsed_source.netloc", "os.sep", "tarfile.open", "recurse.append", "drive.rstrip", "fp_.write", "re.search", "shlex.quote", "errno.ENOENT", "errno.ENOTDIR", "log.debug", "os.lchown", "file_stat.st_gid", "enforce_failed.append", "ret.setdefault", "path.lstrip", "urlparsed_source.scheme", "tar_longopts.append", "enforce_missing.append", "log.exception", "full_path.rstrip", "log.info", "dir_result.get", "os.lstat", "urlparsed_source.path", "os.rmdir", "name.rstrip", "parsed.path", "file_stat.st_uid", "tar.getnames", "logging.getLogger", "archive_format.lower", "urlparsed_scheme.lower", "tar_cmd.extend", "exc.errno", "source_sum.get", "os.path", "opt.startswith", "shlex.split", "salt.utils", "stat.S_ISLNK"]}, "arista_pyeapi.py": {"libraries": ["logging", "salt.utils.args.clean_kwargs", "pyeapi"], "function_names": ["conn", "call", "initialized", "shutdown", "init", "__virtual__", "ping"], "function_calls": ["clean_kwargs", "getattr"], "class_names": [], "class_method_calls": ["pyeapi.eapilib", "logging.getLogger", "conn_args.pop", "conn_args.get", "pyeapi_device.get", "log.error", "opts.get", "pyeapi.client", "log.debug", "proxy_dict.copy"]}, "artifactory.py": {"libraries": ["logging"], "function_names": ["downloaded", "__fetch_from_artifactory"], "function_calls": ["str", "__fetch_from_artifactory"], "class_names": [], "class_method_calls": ["log.debug", "logging.getLogger"]}, "at.py": {"libraries": ["logging"], "function_names": ["watch", "__virtual__", "absent", "mod_watch", "present"], "function_calls": ["len", "map", "present", "list"], "class_names": [], "class_method_calls": ["logging.getLogger"]}, "at_solaris.py": {"libraries": ["time", "salt.utils.path", "re", "salt.utils.platform", "logging", "salt.utils.stringutils", "datetime", "salt.utils.files"], "function_names": ["at", "atrm", "atc", "__virtual__", "atq", "jobcheck", "_atq"], "function_calls": ["len", "int", "str", "_atq", "atq", "map", "list"], "class_names": [], "class_method_calls": ["jobid.split", "rfh.readlines", "logging.getLogger", "time.strptime", "kwargs.get", "line.split", "datetime.datetime", "job_kw_regex.match", "salt.utils", "specs.append", "line.startswith", "tmp.groups", "re.compile", "jobs.append"]}, "augeas_cfg.py": {"libraries": ["os", "augeas.Augeas", "salt.utils.data", "re", "logging", "salt.utils.stringutils", "salt.utils.args", "salt.exceptions.SaltInvocationError"], "function_names": ["match", "ls", "make_path", "get", "_check_load_paths", "remove", "__virtual__", "execute", "setvalue", "tree", "_lstrip_word", "_match", "_recurmatch"], "function_calls": ["_Augeas", "len", "getattr", "func", "make_path", "_check_load_paths", "str", "SaltInvocationError", "locals", "iter", "dict", "_lstrip_word", "_match", "zip", "ValueError", "_recurmatch", "isinstance"], "class_names": [], "class_method_calls": ["load_path.split", "aug.set", "prefix.rstrip", "aug.match", "aug.close", "path.rstrip", "_Augeas.NONE", "_paths.append", "path.startswith", "aug.remove", "log.debug", "i.replace", "_Augeas.NO_MODL_AUTOLOAD", "value.strip", "path.lstrip", "aug.save", "log.error", "log.info", "lens.endswith", "aug.load", "re.sub", "aug.get", "command.split", "logging.getLogger", "os.path", "aug.add_transform", "salt.utils", "matches.items"]}, "aws_sqs.py": {"libraries": [], "function_names": ["__virtual__", "absent", "exists"], "function_calls": [], "class_names": [], "class_method_calls": []}, "azurearm_compute.py": {"libraries": ["logging", "salt.utils.azurearm", "functools.wraps"], "function_names": ["availability_set_absent", "_deprecation_message", "__virtual__", "wrapped", "availability_set_present"], "function_calls": ["function", "int", "sorted", "wraps", "isinstance"], "class_names": [], "class_method_calls": ["aset.get", "logging.getLogger", "aset_kwargs.update", "vm.lower", "kwargs.copy", "salt.utils", "sku.capitalize"]}, "azurearm_dns.py": {"libraries": ["logging", "salt.utils.azurearm", "functools.wraps"], "function_names": ["record_set_present", "record_set_absent", "_deprecation_message", "zone_absent", "__virtual__", "zone_present", "wrapped"], "function_calls": ["function", "eval", "sorted", "wraps", "isinstance"], "class_names": [], "class_method_calls": ["zone.get", "logging.getLogger", "zone_type.lower", "rec_set_kwargs.update", "remote.get", "local_val.lower", "kwargs.copy", "record.items", "remote_val.lower", "zone_kwargs.update", "salt.utils", "vnet.lower", "rec_set.get"]}, "azurearm_network.py": {"libraries": ["logging", "salt.utils.azurearm", "functools.wraps"], "function_names": ["subnet_present", "network_security_group_present", "security_rule_present", "route_table_present", "__virtual__", "virtual_network_absent", "load_balancer_absent", "security_rule_absent", "_deprecation_message", "network_interface_absent", "route_present", "subnet_absent", "load_balancer_present", "public_ip_address_present", "network_interface_present", "route_table_absent", "public_ip_address_absent", "route_absent", "virtual_network_present", "network_security_group_absent", "wrapped"], "function_calls": ["len", "function", "int", "eval", "sorted", "exec", "set", "wraps", "enumerate", "isinstance"], "class_names": [], "class_method_calls": ["vnet_kwargs.update", "iface.get", "next_hop_type.lower", "rule_kwargs.update", "val.lower", "route_kwargs.update", "lb_kwargs.update", "nsg.get", "comp_ret.get", "rule.get", "protocol.lower", "sku.capitalize", "iface_kwargs.update", "public_ip_address_version.lower", "nsg_kwargs.update", "direction.capitalize", "kwargs.get", "vnet.get", "kwargs.copy", "load_bal.get", "route.get", "public_ip_allocation_method.capitalize", "rt_tbl_kwargs.update", "rt_tbl.get", "snet.get", "logging.getLogger", "access.capitalize", "snet_kwargs.update", "pub_ip_kwargs.update", "salt.utils", "pub_ip.get"]}, "azurearm_resource.py": {"libraries": ["salt.utils.azurearm", "logging", "salt.utils.files", "functools.wraps", "json"], "function_names": ["resource_group_present", "resource_group_absent", "_deprecation_message", "policy_definition_present", "__virtual__", "policy_assignment_present", "policy_definition_absent", "wrapped", "policy_assignment_absent"], "function_calls": ["sum", "function", "wraps", "isinstance"], "class_names": [], "class_method_calls": ["group.get", "logging.getLogger", "policy.get", "definition_name.lower", "json.loads", "scope.lower", "kwargs.copy", "temp_rule.get", "json.dumps", "group_kwargs.update", "assignment_type.lower", "pa_name.lower", "policy_type.lower", "salt.utils", "json.load", "policy_kwargs.update"]}, "bamboohr.py": {"libraries": ["salt.utils.http", "logging", "xml.etree.ElementTree", "salt.utils.yaml"], "function_names": ["list_users", "update_employee", "list_employees", "show_employee", "__virtual__", "_query", "_apikey", "list_meta_fields"], "function_calls": ["next", "show_employee", "_query", "iter", "_apikey", "isinstance"], "class_names": [], "class_method_calls": ["item.tag", "logging.getLogger", "item.text", "field.items", "__opts__.get", "field.text", "cat.tag", "salt.utils", "item.values", "ET.fromstring", "user.items", "details.values", "items.keys", "log.debug", "details.text"]}, "baredoc.py": {"libraries": ["itertools", "os", "salt.exceptions.ArgumentValueError", "ast", "typing.Dict", "logging", "salt.utils.odict.OrderedDict", "salt.utils.doc", "typing.List", "salt.utils.files"], "function_names": ["state_docs", "list_states", "list_modules", "module_docs", "_get_args", "_parse_module_functions", "_get_files", "_get_func_aliases", "_get_module_name", "_parse_module_docs"], "function_calls": ["OrderedDict", "sorted", "reversed", "_get_args", "_get_files", "_parse_module_functions", "ArgumentValueError", "_get_func_aliases", "_get_module_name", "_parse_module_docs", "list", "isinstance"], "class_names": [], "class_method_calls": ["key.s", "ast.parse", "ast.Str", "found_files.append", "cur_file.read", "os.listdir", "ast.Num", "assign.value", "func_list.append", "fn.name", "module_py.endswith", "mod_name.split", "fun_aliases.items", "arg_default.n", "ast.NameConstant", "arg_default_strings.append", "ast.get_docstring", "ret.items", "backwards_args.items", "ret.update", "ast.Assign", "dirs.append", "value.s", "arg_strings.append", "ast.FunctionDef", "found_files.extend", "arg.arg", "function.args", "tree.body", "logging.getLogger", "arg_default.value", "name.split", "assign.targets", "arg_default.s", "itertools.zip_longest", "os.path", "salt.utils", "fun_aliases.update"]}, "bcache.py": {"libraries": ["time", "os", "salt.utils.path", "re", "logging"], "function_names": ["detach", "_bcpath", "_run_all", "_bcsys", "_sysfs_attr", "super_", "device", "__virtual__", "_size_map", "attach_", "_syspath", "stop", "_devpath", "_fssys", "_wipe", "_fspath", "start", "_sysfs_parse", "cache_make", "config_", "status", "uuid", "_sizes", "_bdev", "_alltrue", "_wait", "back_make", "_devbase"], "function_calls": ["detach", "_bcpath", "_run_all", "lfunc", "_bcsys", "_sysfs_attr", "list", "super_", "int", "device", "_size_map", "attach_", "_syspath", "stop", "_devpath", "_fssys", "_wipe", "isinstance", "len", "_fspath", "_sysfs_parse", "bool", "status", "float", "uuid", "_sizes", "_bdev", "_alltrue", "_wait", "_devbase"], "class_names": [], "class_method_calls": ["logging.WARNING", "res.splitlines", "time.sleep", "logging.CRITICAL", "result.pop", "intflist.remove", "intf.startswith", "kwargs.items", "line.split", "logging.ERROR", "bdevs.append", "configres.pop", "log.warning", "result.update", "line.strip", "log.log", "interres.update", "binkeys.append", "sysfs.get", "re.search", "updates.items", "udev.get", "state.append", "key.startswith", "bintf.items", "binkeys.extend", "log.debug", "bintf.values", "logging.TRACE", "mods.items", "log.error", "val.strip", "log.info", "re.sub", "re.split", "logging.INFO", "logging.getLogger", "key.strip", "statres.pop", "logging.DEBUG", "os.path", "interres.pop", "resdict.values", "salt.utils", "attr.split", "found.append"]}, "beacons.py": {"libraries": ["copy"], "function_names": ["remove_hidden_options", "list_to_dict"], "function_calls": ["map", "list"], "class_names": [], "class_method_calls": ["func.startswith", "config.remove", "_config.update", "copy.copy"]}, "bigip.py": {"libraries": ["salt.utils.json"], "function_names": ["_strip_key", "list_node", "create_pool", "delete_node", "list_pool", "add_pool_member", "_test_output", "list_profile", "delete_profile", "manage_pool_members", "create_monitor", "create_virtual", "create_profile", "manage_profile", "__virtual__", "_load_result", "delete_pool_member", "modify_node", "manage_pool", "manage_node", "modify_pool_member", "list_virtual", "modify_profile", "list_monitor", "manage_virtual", "delete_virtual", "create_node", "modify_monitor", "delete_monitor", "modify_pool", "modify_virtual", "_check_for_changes", "manage_monitor", "delete_pool"], "function_calls": ["_strip_key", "_check_for_changes", "_load_result", "_test_output", "isinstance"], "class_names": [], "class_method_calls": ["kwargs.items", "salt.utils", "dictionary.items"]}, "bluez_bluetooth.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.utils.validate.net", "bluetooth", "shlex"], "function_names": ["stop", "address_", "start", "noscan", "pair", "version", "discoverable", "__virtual__", "block", "unblock", "scan", "power", "unpair"], "function_calls": ["address_", "CommandExecutionError", "int"], "class_names": [], "class_method_calls": ["bluetooth.discover_devices", "ret.append", "line.split", "bluetooth.__version__", "shlex.quote", "salt.utils", "line.startswith"]}, "boto3_elasticache.py": {"libraries": [], "function_names": ["cache_subnet_group_present", "_diff_cache_subnet_group", "_diff_cache_cluster", "cache_cluster_present", "replication_group_present", "replication_group_absent", "cache_subnet_group_absent", "__virtual__", "_diff_replication_group", "cache_cluster_absent"], "function_calls": ["_diff_replication_group", "_diff_cache_subnet_group", "_diff_cache_cluster"], "class_names": [], "class_method_calls": ["k.startswith", "current.get", "args.items", "modifiable.items"]}, "boto3_elasticsearch.py": {"libraries": ["logging", "salt.utils.versions.Version", "salt.utils.json"], "function_names": ["tagged", "latest", "__virtual__", "absent", "upgraded", "_check_return_value", "present"], "function_calls": ["tagged", "latest", "upgraded", "Version", "_check_return_value", "isinstance"], "class_names": [], "class_method_calls": ["current_version.split", "logging.getLogger", "current_tags.keys", "current_domain.get", "current_tags.update", "salt.utils", "log.debug", "latest_version.split"]}, "boto3_route53.py": {"libraries": ["salt.utils.data", "salt.utils.dictupdate", "uuid", "logging", "salt.exceptions.SaltInvocationError"], "function_names": ["hosted_zone_absent", "hosted_zone_present", "rr_absent", "__virtual__", "rr_present"], "function_calls": ["len", "getattr", "str", "sorted", "locals", "SaltInvocationError", "isinstance"], "class_names": [], "class_method_calls": ["v.get", "zone.get", "logging.getLogger", "log.error", "rr.startswith", "rrset.get", "r.get", "log.info", "ResourceRecordSet.update", "log.warning", "uuid.uuid4", "salt.utils", "rr.split", "log.debug", "instance.id"]}, "boto3_sns.py": {"libraries": ["logging", "re", "salt.utils.json", "copy"], "function_names": ["__virtual__", "topic_present", "_json_objs_equal", "topic_absent"], "function_calls": ["len", "_json_objs_equal", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "copy.deepcopy", "want_attrs.get", "current.get", "log.error", "re.search", "salt.utils", "log.debug", "log.warning", "endpoint.replace", "current_attrs.get", "matches.groupdict"]}, "boto_apigateway.py": {"libraries": ["hashlib", "os", "salt.utils.yaml", "re", "salt.utils.json", "logging", "salt.utils.files"], "function_names": ["_aws_model_ref_from_swagger_ref", "rest_api_name", "_log_changes", "basePath", "_lambda_name", "__init__", "_get_response_template", "no_more_deployments_remain", "_cleanup_api", "deployment_label_json", "info_json", "overwrite_stage_variables", "usage_plan_present", "_set_current_deployment", "md5_filehash", "restApiId", "_deploy_method", "_get_pattern_for_schema", "_name_matches", "_validate_swagger_file", "deploy_api", "deploy_models", "__virtual__", "_object_reducer", "verify_api", "_build_all_dependencies", "_get_model_without_dependencies", "_one_or_more_stages_remain", "_gen_md5_filehash", "_resolve_api_id", "headers", "_validate_lambda_funcname_format", "_parse_method_data", "schema", "_get_desired_deployment_id", "_log_error_and_abort", "paths", "_parse_method_response", "absent", "delete_api", "deployment_label", "_get_stage_variables", "usage_plan_association_present", "usage_plan_association_absent", "name", "_is_http_error_rescode", "_validate_error_response_model", "models", "delete_stage", "_build_dependent_model_list", "info", "_lambda_uri", "deploy_resources", "location", "_dict_to_json_pretty", "_get_current_deployment_id", "_update_schema_to_aws_notation", "_find_patterns", "_get_current_deployment_label", "_models", "publish_api", "usage_plan_absent", "present", "rest_api_version"], "function_calls": ["_log_changes", "dict", "list", "_name_matches", "type", "_Swagger", "set", "_object_reducer", "_gen_md5_filehash", "OSError", "_log_error_and_abort", "str", "locals", "_get_stage_variables", "ValueError", "isinstance", "len", "bool", "_dict_to_json_pretty", "iter"], "class_names": ["SwaggerParameter", "SwaggerMethodResponse", "_Swagger"], "class_method_calls": ["delres.get", "cl.append", "models.get", "_Swagger.VENDOR_EXT_PATTERN", "self._find_patterns", "_Swagger.SWAGGER_OPERATION_NAMES", "method_response.get", "_Swagger.AWS_API_DESCRIPTION", "self.models", "mods.get", "self.location", "result.get", "overwrite.get", "self._common_aws_args", "_Swagger.REQUEST_OPTION_TEMPLATE", "method_name.lower", "result.extend", "mir.get", "__pillar__.get", "path.startswith", "re.compile", "p.name", "self.info", "stage.get", "_Swagger.REQUEST_TEMPLATE", "self._paramdict", "models_dict.pop", "_Swagger.JSON_SCHEMA_DRAFT_4", "exists_response.get", "self._set_current_deployment", "self._get_desired_deployment_id", "self.rest_api_name", "_hash.hexdigest", "self._update_schema_to_aws_notation", "self._deploymentId", "obj_schema.get", "model_exists_response.get", "self._stage_name", "f.read", "obj.get", "self.md5_filehash", "self._lambda_funcname_format", "salt.utils", "self._get_response_template", "schema.items", "model.get", "self._aws_model_ref_from_swagger_ref", "swagger.publish_api", "self._resolve_api_id", "self._get_current_deployment_label", "re.match", "ref.split", "newlist.append", "self._lambda_uri", "result.append", "response.get", "resources.get", "plan.get", "name.endswith", "dep_list.remove", "ops.items", "res.get", "self._lambda_name", "self._md5_filehash", "func_params.get", "swagger.deploy_api", "ret.get", "paths.items", "deployment.get", "swagger.overwrite_stage_variables", "_Swagger.SWAGGER_OBJ_V2_FIELDS_REQUIRED", "properties.items", "_Swagger.SwaggerParameter", "stages_to_remove.append", "self.deployment_label_json", "os.path", "self._is_http_error_rescode", "method.get", "e.args", "name.lower", "self._build_dependent_model_list", "self._api_name", "self._cfg", "o.items", "self._swagger_file", "mr.get", "self._error_response_template", "swagger.deploy_models", "method_name.upper", "resource.get", "self._get_pattern_for_schema", "actual_param.get", "swagger.delete_stage", "self.RESPONSE_OPTION_TEMPLATE", "integration.get", "p.schema", "dep_models_list.extend", "self._get_model_without_dependencies", "models_dict.items", "_Swagger.SWAGGER_OBJ_V2_FIELDS", "swagger.restApiId", "create_model_response.get", "self.paths", "header_data.get", "m.get", "log.info", "self.info_json", "_Swagger.SWAGGER_VERSIONS_SUPPORTED", "self.restApiId", "restApiId.setter", "self._cleanup_api", "self._restApiId", "self._one_or_more_stages_remain", "self._validate_error_response_model", "resobj.get", "update_model_schema_response.get", "lambda_name.strip", "self._get_current_deployment_id", "self._swagger_version", "swagger.verify_api", "self.name", "delete_api_response.get", "schemaobjref.split", "_Swagger.SwaggerMethodResponse", "method_response.headers", "m.lower", "_schema.get", "_schema.update", "self._build_all_dependencies", "_hash.update", "r.split", "swagger.delete_api", "hashlib.md5", "lambda_desc.get", "swagger.no_more_deployments_remain", "self._validate_lambda_funcname_format", "res.reverse", "self.deployment_label", "self._validate_swagger_file", "self.RESPONSE_TEMPLATE", "re.sub", "self._deploy_method", "self._parse_method_data", "schemaobj.get", "method_response.schema", "logging.getLogger", "pathData.items", "self._parse_method_response", "opobj.get", "self._models", "self._response_template", "stages_to_add.append", "swagger.deploy_resources", "self._r"]}, "boto_asg.py": {"libraries": ["hashlib", "salt.utils.dictupdate", "logging", "salt.utils.stringutils", "salt.exceptions.SaltInvocationError", "copy"], "function_names": ["_determine_notification_info", "_determine_scaling_policies", "_alarms_present", "__virtual__", "_determine_termination_policies", "absent", "_determine_scheduled_actions", "present"], "function_calls": ["len", "_determine_notification_info", "_determine_scaling_policies", "str", "_alarms_present", "_determine_termination_policies", "_determine_scheduled_actions", "SaltInvocationError", "enumerate"], "class_names": [], "class_method_calls": ["config.items", "action.replace", "scheduled_actions.items", "logging.getLogger", "tmp.items", "copy.deepcopy", "dictupdate.update", "log.warning", "new_actions.append", "vpc_id.get", "args.update", "results.get", "hashlib.md5", "vpc_zone_identifier.append", "proposed.setdefault", "salt.utils", "log.debug"]}, "boto_cfn.py": {"libraries": ["salt.utils.compat", "logging", "xml.etree.ElementTree", "salt.utils.json"], "function_names": ["_validate", "present", "_get_error", "__virtual__", "absent", "_get_template"], "function_calls": ["_validate", "_get_error", "_get_template", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "ET.fromstring", "error.split", "salt.utils", "log.debug"]}, "boto_cloudfront.py": {"libraries": ["difflib", "logging"], "function_names": ["__virtual__", "_yaml_safe_dump", "present"], "function_calls": ["_yaml_safe_dump", "bool"], "class_names": [], "class_method_calls": ["msg.format", "logging.getLogger", "difflib.unified_diff"]}, "boto_cloudtrail.py": {"libraries": ["salt.utils.data", "logging", "os.path", "os"], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["locals", "bool"], "class_names": [], "class_method_calls": ["os.linesep", "logging.getLogger", "_describe.get", "tagchange.items", "r.get", "diff.get", "salt.utils", "bucket_vars.items"]}, "boto_cloudwatch.py": {"libraries": ["boto.ec2.cloudwatch", "boto.ec2.cloudwatch.listelement", "salt.utils.json", "logging", "salt.utils.versions", "boto", "salt.utils.odict", "boto.ec2.cloudwatch.dimension", "yaml"], "function_names": ["delete_alarm", "boto_listelement_presenter", "_safe_dump", "get_alarm", "dimension_presenter", "get_all_alarms", "__virtual__", "convert_to_arn", "create_or_update_alarm", "_metric_alarm_to_dict"], "function_calls": ["_get_conn", "len", "hasattr", "getattr", "_safe_dump", "int", "float", "convert_to_arn", "dict", "_metric_alarm_to_dict", "list", "isinstance"], "class_names": [], "class_method_calls": ["arn.startswith", "logging.CRITICAL", "arn.split", "name.startswith", "yaml.add_representer", "dumper.represent_list", "insufficient_data_actions.split", "conn.create_alarm", "conn.delete_alarms", "ok_actions.split", "log.error", "log.info", "conn.describe_alarms", "boto.ec2", "logging.getLogger", "odict.OrderedDict", "alarm_actions.split", "results.append", "salt.utils", "dumper.represent_dict"]}, "boto_cloudwatch_event.py": {"libraries": ["logging", "os", "salt.utils.json"], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["locals", "bool", "isinstance"], "class_names": [], "class_method_calls": ["rule_vars.items", "os.linesep", "logging.getLogger", "removes.pop", "_describe.get", "log.error", "i.get", "r.get", "t.get", "target.get", "removes.index", "salt.utils"]}, "boto_cognitoidentity.py": {"libraries": ["logging"], "function_names": ["pool_absent", "pool_present", "__virtual__", "_get_object", "_role_present"], "function_calls": ["len", "_get_object", "dict", "_role_present", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "request_params.pop", "request_params.update", "existing_identity_pool.get", "r.get", "identity_pool.get", "__pillar__.get", "updated_identity_pool.get"]}, "boto_datapipeline.py": {"libraries": ["salt.utils.data", "salt.utils.json", "difflib", "datetime", "copy"], "function_names": ["_id_or_key", "_pipeline_present_with_definition", "_properties_from_dict", "_parameter_values", "_dict_to_list_ids", "_immutable_fields_error", "_standardize", "__virtual__", "mutating_helper", "_parameter_objects", "_pipeline_objects", "absent", "_recursive_compare", "_diff", "_cleaned", "present"], "function_calls": ["len", "_pipeline_present_with_definition", "sorted", "_diff", "_parameter_values", "_dict_to_list_ids", "_immutable_fields_error", "_standardize", "mutating_helper", "_parameter_objects", "_pipeline_objects", "dict", "_recursive_compare", "_properties_from_dict", "_cleaned", "zip", "isinstance"], "class_names": [], "class_method_calls": ["d.items", "start_date_time.strftime", "copy.deepcopy", "structure.sort", "v2.sort", "from_pillars.update", "objects.items", "element.update", "new_pipeline_definition.pop", "pipeline_definition.get", "old_pipeline_definition.pop", "fields.append", "salt.utils", "datetime.datetime", "list_with_ids.append", "v1.sort", "structure.items", "difflib.unified_diff"]}, "boto_dynamodb.py": {"libraries": ["salt.utils.dictupdate", "logging", "math", "sys", "datetime", "copy"], "function_names": ["_global_indexes_present", "_update_global_secondary_indexes", "_determine_gsi_updates", "_alarms_present", "_add_global_secondary_index", "_partition_index_names", "_get_deterministic_value_for_table_name", "__virtual__", "_ensure_backup_datapipeline_present", "_add_changes", "absent", "_next_datetime_with_utc_hour", "present"], "function_calls": ["len", "_global_indexes_present", "next", "hash", "_update_global_secondary_indexes", "_determine_gsi_updates", "_alarms_present", "_add_global_secondary_index", "set", "_partition_index_names", "str", "_get_deterministic_value_for_table_name", "_ensure_backup_datapipeline_present", "_next_datetime_with_utc_hour", "_add_changes", "iter", "GsiNotUpdatableError"], "class_names": ["GsiNotUpdatableError"], "class_method_calls": ["new_throughput.get", "results.get", "provisioned_gsi_config.keys", "entry.values", "new_index_names.add", "datapipeline_ret.get", "changes_new.setdefault", "gsi_config.keys", "existing_index_names.add", "math.ceil", "datetime.timedelta", "sys.stdout", "today.year", "comments.append", "index.values", "current_throughput.get", "datetime.date", "logging.basicConfig", "current_config.get", "tmp.items", "copy.deepcopy", "changes_old.setdefault", "new_config.get", "index_updates.keys", "current_value.get", "entry.keys", "logging.INFO", "logging.getLogger", "dictupdate.update", "description.get", "provisioned_throughput.get", "today.day", "datetime.datetime", "new_value.get", "today.month"]}, "boto_ec2.py": {"libraries": ["time.sleep", "time.time", "salt.exceptions.CommandExecutionError", "salt.utils.data", "salt.utils.dictupdate", "logging", "salt.exceptions.SaltInvocationError"], "function_names": ["volume_present", "private_ips_present", "instance_present", "instance_absent", "volumes_tagged", "_eni_groups", "key_absent", "eni_present", "snapshot_created", "key_present", "__virtual__", "private_ips_absent", "_eni_attribute", "volume_absent", "eni_absent"], "function_calls": ["len", "time", "getattr", "range", "_eni_groups", "set", "_eni_attribute", "dict", "sleep", "CommandExecutionError", "SaltInvocationError", "list", "isinstance"], "class_names": [], "class_method_calls": ["attach_data.device", "time.sleep", "_groups.sort", "salt.utils", "log.warning", "tags.get", "instance.placement", "attach_data.instance_id", "vol.attach_data", "eni.get", "filters.update", "tags.keys", "log.debug", "vol.zone", "ips_to_remove.append", "log.error", "add.update", "r.get", "log.info", "attach_data.devic", "no_can_do.get", "curr_tags.get", "logging.getLogger", "dictupdate.update", "attributes.items", "group_ids.sort", "ips_to_add.append", "ips_not_added.append", "instance.ip_address", "arecord.pop", "curr_tags.keys", "msg.format", "curr.get", "ips_not_removed.append"]}, "boto_efs.py": {"libraries": ["boto3", "logging", "salt.utils.versions"], "function_names": ["_get_conn", "create_file_system", "delete_tags", "delete_file_system", "get_mount_targets", "get_tags", "create_tags", "set_security_groups", "__virtual__", "delete_mount_target", "get_file_systems", "create_mount_target"], "function_calls": ["_get_conn", "isinstance"], "class_names": [], "class_method_calls": ["profile.pop", "logging.getLogger", "client.create_tags", "client.create_file_system", "client.describe_mount_targets", "client.describe_file_systems", "client.create_mount_target", "client.delete_file_system", "client.delete_tags", "tags.items", "client.modify_mount_target_security_groups", "result.extend", "boto3.client", "salt.utils", "new_tags.append", "client.describe_tags", "client.delete_mount_target"]}, "boto_elasticache.py": {"libraries": ["logging"], "function_names": ["subnet_group_absent", "subnet_group_present", "cache_cluster_present", "replication_group_present", "creategroup", "replication_group_absent", "__virtual__", "absent", "cache_cluster_absent", "present"], "function_calls": ["absent", "present", "creategroup"], "class_names": [], "class_method_calls": ["log.error", "log.info", "security_group_ids.extend", "logging.getLogger"]}, "boto_elasticsearch_domain.py": {"libraries": ["logging", "os", "salt.utils.json"], "function_names": ["__virtual__", "_compare_json", "absent", "present"], "function_calls": ["str", "_compare_json", "isinstance"], "class_names": [], "class_method_calls": ["es_opts.items", "opts.pop", "os.linesep", "logging.getLogger", "_describe.get", "r.get", "_status.get", "salt.utils", "e.message"]}, "boto_elb.py": {"libraries": ["hashlib", "salt.utils.data", "re", "salt.utils.dictupdate", "logging", "salt.utils.stringutils", "salt.exceptions.SaltInvocationError"], "function_names": ["_subnets_present", "_elb_present", "_zones_present", "_policies_present", "_attributes_present", "_alarms_present", "_tags_present", "__virtual__", "register_instances", "_security_groups_present", "_listeners_present", "absent", "_health_check_present", "present", "_policy_cname"], "function_calls": ["sorted", "_attributes_present", "list", "_elb_present", "_policies_present", "_alarms_present", "type", "set", "_security_groups_present", "_subnets_present", "str", "locals", "_health_check_present", "_policy_cname", "isinstance", "len", "_zones_present", "_tags_present", "_listeners_present", "SaltInvocationError"], "class_names": [], "class_method_calls": ["policy.items", "health_check.items", "actual_policies_by_listener.get", "tags_to_add.pop", "b.get", "expected_policies_by_backend.get", "vpc_id.get", "salt.utils", "expected_listeners_by_tuple.items", "results.get", "actual_policies_by_backend.get", "msg.append", "msg.format", "to_enable.append", "_cd.get", "listener.get", "to_create.append", "to_delete.append", "sbp.startswith", "re.match", "expected_policies_by_backend.items", "cname.update", "listeners_to_update.add", "actual_policies_by_backend.items", "cd.get", "hashlib.md5", "sbp.endswith", "listener.setdefault", "to_disable.append", "log.debug", "lb.get", "tags.keys", "tags_to_remove.append", "l.get", "ret.update", "expected_policies_by_listener.get", "expected_policies_by_listener.items", "policies_by_cname.keys", "actual_policies_by_listener.items", "log.error", "tags_to_update.keys", "current.items", "log.info", "policy_type.endswith", "subnets.append", "logging.getLogger", "attrs_to_set.append", "default_aws_policies.add", "cname.pop", "tags_to_add.keys", "policy_names.add", "backends_to_update.add", "security_groups.split", "actual_listeners_by_tuple.items"]}, "boto_elbv2.py": {"libraries": ["logging", "copy"], "function_names": ["create_target_group", "__virtual__", "targets_registered", "targets_deregistered", "delete_target_group"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["newhealth_mock.update", "health.get", "copy.copy", "logging.getLogger"]}, "boto_iam.py": {"libraries": ["os", "salt.utils.data", "salt.utils.dictupdate", "salt.utils.json", "logging", "salt.utils.stringutils", "salt.utils.files", "salt.utils.odict", "xml.etree.ElementTree"], "function_names": ["_user_policies_present", "account_policy", "server_cert_present", "_case_password", "_group_policies_present", "saml_provider_absent", "_user_policies_deleted", "_user_policies_detached", "policy_absent", "group_absent", "__virtual__", "policy_present", "_delete_key", "_get_error", "user_absent", "_group_policies_detached", "saml_provider_present", "server_cert_absent", "group_present", "_case_group", "keys_absent", "user_present", "_user_policies_attached", "keys_present", "_group_policies_attached", "_group_policies_deleted"], "function_calls": ["_user_policies_present", "_case_password", "_group_policies_present", "_user_policies_deleted", "list", "_user_policies_detached", "_delete_key", "range", "str", "_get_error", "_group_policies_detached", "locals", "isinstance", "len", "_case_group", "bool", "_user_policies_attached", "_group_policies_attached", "_group_policies_deleted"], "class_names": [], "class_method_calls": ["_policies.update", "entities.get", "policies_to_detach.append", "x.get", "salt.utils", "policies_to_create.items", "version.get", "_wrf.write", "policy.get", "groupdict.get", "policy_data.get", "_users.append", "policies_to_delete.append", "log.debug", "userdict.get", "r.get", "new_keys.items", "error.split", "config.items", "logging.getLogger", "policies_to_attach.append", "dictupdate.update", "odict.OrderedDict", "save_format.format", "os.path", "ET.fromstring", "_to_modify.extend", "policies.items"]}, "boto_iot.py": {"libraries": ["time", "os", "salt.utils.data", "salt.utils.json", "logging", "datetime"], "function_names": ["policy_absent", "topic_rule_absent", "topic_rule_present", "__virtual__", "policy_detached", "thing_type_absent", "policy_attached", "thing_type_present", "policy_present"], "function_calls": ["locals", "bool", "isinstance"], "class_names": [], "class_method_calls": ["_deprecation_date_str.find", "version.get", "time.sleep", "_thing_type_metadata.get", "logging.getLogger", "os.linesep", "policy.get", "r.get", "versions.get", "_elapsed_time_delta.seconds", "log.warning", "salt.utils", "_existing_thing_type.get", "datetime.datetime"]}, "boto_kinesis.py": {"libraries": ["logging"], "function_names": ["__virtual__", "_add_changes", "absent", "present"], "function_calls": ["len", "_add_changes", "set", "list"], "class_names": [], "class_method_calls": ["stream_details.get", "logging.getLogger", "new_monitoring_set.difference", "new_monitoring_set.intersection", "old_monitoring_set.difference", "log.info", "comments.append"]}, "boto_kms.py": {"libraries": ["salt.exceptions.SaltInvocationError", "salt.utils.dictupdate"], "function_names": ["_key_present", "_key_policy", "key_present", "__virtual__", "_key_description", "_key_rotation", "_key_enabled"], "function_calls": ["_key_present", "_key_policy", "_key_description", "SaltInvocationError", "_key_rotation", "_key_enabled", "isinstance"], "class_names": [], "class_method_calls": ["dictupdate.update"]}, "boto_lambda.py": {"libraries": ["hashlib", "os", "salt.utils.data", "salt.utils.dictupdate", "salt.utils.json", "logging", "salt.exceptions.SaltInvocationError", "salt.utils.files"], "function_names": ["function_present", "_resolve_vpcconfig", "alias_absent", "alias_present", "_get_function_arn", "_function_code_present", "event_source_mapping_absent", "_function_config_present", "__virtual__", "function_absent", "_get_role_arn", "event_source_mapping_present", "_function_permissions_present"], "function_calls": ["_resolve_vpcconfig", "bool", "_get_function_arn", "_function_code_present", "set", "_function_config_present", "_get_role_arn", "SaltInvocationError", "_function_permissions_present", "isinstance"], "class_names": [], "class_method_calls": ["desc.get", "conf.setdefault", "name.startswith", "diff.get", "permission.keys", "_ret.get", "_r.get", "func.get", "sha.update", "diffs.items", "oldval.pop", "keyset.issuperset", "sha.digest", "Permissions.items", "r.get", "conf.pop", "logging.getLogger", "os.linesep", "dictupdate.update", "f.read", "options.items", "os.path", "hashlib.sha256", "salt.utils"]}, "boto_rds.py": {"libraries": ["logging", "salt.utils.data", "salt.exceptions.SaltInvocationError", "os"], "function_names": ["subnet_group_absent", "parameter_present", "replica_present", "__virtual__", "absent", "subnet_group_present", "present"], "function_calls": ["len", "str", "SaltInvocationError", "type"], "class_names": [], "class_method_calls": ["logging.getLogger", "subnet_ids.append", "os.linesep", "res.get", "params.get", "__salt__.missing_fun_string", "r.get", "salt.utils", "replica_exists.get", "exists.get", "items.items", "log.debug", "options.get"]}, "boto_route53.py": {"libraries": ["salt.utils.data", "salt.utils.json", "uuid", "logging", "salt.exceptions.SaltInvocationError"], "function_names": ["hosted_zone_absent", "hosted_zone_present", "rr_absent", "__virtual__", "absent", "rr_present", "present"], "function_calls": ["len", "getattr", "str", "absent", "SaltInvocationError", "present", "isinstance"], "class_names": [], "class_method_calls": ["x.rstrip", "vpcs.values", "logging.getLogger", "log.error", "value.startswith", "salt.utils", "log.info", "uuid.uuid4", "value.split", "_values.sort", "_r_values.sort", "deets.get"]}, "boto_s3.py": {"libraries": ["difflib", "logging", "salt.utils.hashutils", "copy"], "function_names": ["__virtual__", "object_present", "_yaml_safe_dump"], "function_calls": ["_yaml_safe_dump", "frozenset"], "class_names": [], "class_method_calls": ["logging.getLogger", "copy.deepcopy", "combined_extra_args.items", "combined_extra_args.keys", "combined_extra_args.setdefault", "salt.utils", "difflib.unified_diff"]}, "boto_s3_bucket.py": {"libraries": ["logging", "salt.utils.json", "copy"], "function_names": ["_compare_json", "_normalize_user", "__virtual__", "_get_canonical_id", "_compare_policy", "_compare_replication", "_compare_acl", "absent", "_get_role_arn", "_prep_acl_for_compare", "_acl_to_grant", "present"], "function_calls": ["bool", "_normalize_user", "comparator", "_get_canonical_id", "_get_role_arn", "_acl_to_grant", "isinstance"], "class_names": [], "class_method_calls": ["config_items.append", "owner_canonical_grant.update", "logging.getLogger", "copy.deepcopy", "_describe.get", "log.warning", "item.split", "current.get", "name.startswith", "item.get", "r.get", "ACL.get", "ret.get", "salt.utils", "desired.get"]}, "boto_secgroup.py": {"libraries": ["logging", "pprint", "salt.exceptions.SaltInvocationError", "salt.utils.dictupdate"], "function_names": ["_rules_egress_present", "_tags_present", "_check_rule", "__virtual__", "_security_group_present", "absent", "_rules_present", "_split_rules", "_get_rule_changes", "present"], "function_calls": ["len", "_rules_egress_present", "int", "str", "SaltInvocationError", "_tags_present", "_check_rule", "_security_group_present", "_rules_present", "_split_rules", "_get_rule_changes", "isinstance"], "class_names": [], "class_method_calls": ["rule.copy", "pprint.pformat", "logging.getLogger", "_rule.get", "dictupdate.update", "tags_to_add.pop", "sg.get", "rule.pop", "tags_to_update.keys", "rule.get", "to_delete.append", "split.append", "tags_to_add.keys", "_rule.pop", "tags_to_remove.append", "log.debug", "to_create.append"]}, "boto_sns.py": {"libraries": ["re"], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["len"], "class_names": [], "class_method_calls": ["failed_unsubscribe_subscriptions.append", "__opts__.get", "re.search", "_endpoint.replace", "matches.groupdict"]}, "boto_sqs.py": {"libraries": ["difflib", "logging", "salt.utils.json"], "function_names": ["__virtual__", "_yaml_safe_dump", "absent", "present"], "function_calls": ["_yaml_safe_dump", "str", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "attributes.items", "current_attributes.get", "final_attributes.update", "log.debug", "salt.utils", "current_attributes.copy", "difflib.unified_diff"]}, "boto_ssm.py": {"libraries": ["logging", "salt.utils.versions", "salt.utils.json"], "function_names": ["__virtual__", "get_parameter", "put_parameter", "delete_parameter"], "function_calls": ["AssertionError"], "class_names": [], "class_method_calls": ["conn.get_parameter", "logging.getLogger", "conn.delete_parameter", "json.loads", "log.warning", "salt.utils", "conn.put_parameter", "conn.exceptions"]}, "boto_vpc.py": {"libraries": ["logging", "salt.utils.dictupdate"], "function_names": ["subnet_present", "_routes_present", "nat_gateway_present", "route_table_present", "delete_vpc_peering_connection", "request_vpc_peering_connection", "accept_vpc_peering_connection", "vpc_peering_connection_absent", "__virtual__", "_verify_subnet_association", "internet_gateway_absent", "_subnets_present", "internet_gateway_present", "dhcp_options_present", "absent", "_route_table_present", "subnet_absent", "dhcp_options_absent", "route_table_absent", "nat_gateway_absent", "vpc_peering_connection_present", "present"], "function_calls": ["_subnets_present", "request_vpc_peering_connection", "accept_vpc_peering_connection", "_routes_present", "dict", "_route_table_present", "_verify_subnet_association", "delete_vpc_peering_connection"], "class_names": [], "class_method_calls": ["_routes.append", "gw.get", "logging.getLogger", "subnet_ids.append", "inst.get", "dictupdate.update", "i.get", "r.get", "i.items", "to_delete.append", "log.info", "route.get", "log.debug", "to_create.append"]}, "bower.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.exceptions.CommandNotFoundError"], "function_names": ["installed", "bootstrap", "__virtual__", "pruned", "removed"], "function_calls": [], "class_names": [], "class_method_calls": ["pkgs_satisfied.append", "pkgs_to_install.append", "comment_msg.append", "installed_pkg.get", "pkg.partition", "installed_pkgs.items", "pkg_name.strip"]}, "bridge.py": {"libraries": ["salt.utils.path", "re", "sys"], "function_names": ["list_", "_bsd_stp", "find_interfaces", "delete", "_tool_path", "_linux_delif", "_os_dispatch", "add", "_netbsd_brshow", "_bsd_addif", "addif", "show", "_linux_bradd", "__virtual__", "_linux_brshow", "_bsd_brdel", "interfaces", "_bsd_bradd", "_linux_addif", "_bsd_delif", "delif", "_bsd_brshow", "_linux_brdel", "stp", "_linux_stp"], "function_calls": ["len", "getattr", "_tool_path", "callable", "_os_dispatch", "_os_func", "_netbsd_brshow"], "class_names": [], "class_method_calls": ["re.match", "line.split", "sys.modules", "m.group", "brlist.append", "line.lstrip", "salt.utils", "line.startswith"]}, "bsd_shadow.py": {"libraries": ["pwd", "salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError", "salt.utils.stringutils", "salt.utils.files", "salt.utils.pycrypto"], "function_names": ["set_password", "gen_password", "set_expire", "info", "default_hash", "__virtual__", "del_password", "set_change"], "function_calls": ["int", "str", "info", "CommandExecutionError", "SaltInvocationError", "isinstance"], "class_names": [], "class_method_calls": ["data.pw_name", "pwd.getpwnam", "line.split", "__grains__.get", "data.pw_passwd", "line.startswith", "salt.utils"]}, "btrfs.py": {"libraries": ["functools", "salt.exceptions.CommandExecutionError", "logging", "os.path", "tempfile"], "function_names": ["_diff_properties", "__mount_device", "subvolume_deleted", "_is_default", "_unset_cow", "_umount", "_mount", "properties", "subvolume_created", "_is_cow", "wrapper", "_set_default"], "function_calls": ["len", "_diff_properties", "str", "type", "_is_default", "_unset_cow", "_umount", "_mount", "_is_cow", "action", "_set_default"], "class_names": [], "class_method_calls": ["logging.getLogger", "properties.items", "kwargs.get", "log.error", "tempfile.mkdtemp", "properties_to_set.items", "expected.items", "os.path", "functools.wraps"]}, "cabal.py": {"libraries": ["salt.utils.path", "salt.exceptions.CommandExecutionError", "salt.exceptions.CommandNotFoundError"], "function_names": ["__virtual__", "_parse_pkg_string", "installed", "removed"], "function_calls": ["_parse_pkg_string", "isinstance"], "class_names": [], "class_method_calls": ["pkgs_satisfied.append", "pkgs_to_install.append", "comment_msg.append", "pkg_ver.strip", "salt.utils", "pkg.partition", "pkg_name.strip"]}, "capirca_acl.py": {"libraries": ["capirca", "re", "capirca.lib.aclgenerator", "logging", "inspect", "datetime", "salt.utils.files", "capirca.aclgen", "capirca.lib.policy"], "function_names": ["_get_pillar_cfg", "_import_platform_generator", "get_term_config", "__init__", "_merge_list_of_dict", "_add_object", "_get_policy_object", "_revision_tag", "get_term_pillar", "get_filter_config", "__virtual__", "_clean_term_opts", "_cleanup", "_get_services_mapping", "get_filter_pillar", "_translate_port", "_get_term_object", "get_policy_config", "_make_it_list", "_lookup_element"], "function_calls": ["_get_pillar_cfg", "dir", "_import_platform_generator", "_merge_list_of_dict", "_get_policy_object", "list", "next", "_revision_tag", "int", "get_term_pillar", "get_filter_config", "set", "_clean_term_opts", "setattr", "str", "_cleanup", "_Policy", "_get_services_mapping", "isinstance", "_Term", "get_filter_pillar", "len", "getattr", "hasattr", "_TempTerm", "platform_generator", "_translate_port", "iter", "_get_term_object", "get_policy_config", "issubclass", "_make_it_list", "_lookup_element"], "class_names": ["_Term", "_Policy"], "class_method_calls": ["merged.append", "filters.append", "services_txt.splitlines", "appended.append", "service_rgx.search", "inspect.ismodule", "filter_config.get", "term_opts.items", "policy_filters.append", "_TERM_FIELDS.items", "target_opts.extend", "header.AddObject", "re.compile", "log.debug", "overlaps.append", "policy.filters", "term.name", "filter_.items", "item.startswith", "translated_portval.append", "item.lower", "term_opts.update", "log.error", "capirca.lib", "self.filters", "merged.extend", "line.replace", "filter_config.pop", "filter_terms.append", "terms.append", "term_.items", "srv_f.read", "text.splitlines", "filter_pillar_cfg.get", "logging.getLogger", "ip_values.append", "clean_opts.get", "clean.append", "inspect.getmembers", "inspect.isclass", "filter_pillar_cfg.pop", "capirca.aclgen", "portval.append", "self.filename", "new_text.append", "salt.utils", "service_rgx_s.groups", "datetime.datetime"]}, "cassandra_cql.py": {"libraries": ["cassandra.policies.IdentityTranslator", "cassandra.cluster.NoHostAvailable", "cassandra.policies.NoSpeculativeExecutionPlan", "cassandra.policies.NoSpeculativeExecutionPolicy", "ssl", "cassandra.policies.TokenAwarePolicy", "cassandra.policies.LoadBalancingPolicy", "cassandra.auth.PlainTextAuthProvider", "salt.exceptions.CommandExecutionError", "cassandra.query.dict_factory", "cassandra.policies.HostFilterPolicy", "salt.utils.versions", "cassandra.connection.ConnectionShutdown", "cassandra.policies.RetryPolicy", "cassandra.cluster.Cluster", "re", "salt.utils.json", "logging", "cassandra.policies.DCAwareRoundRobinPolicy", "cassandra.policies.HostDistance", "cassandra.policies.SimpleConvictionPolicy", "cassandra.policies.WhiteListRoundRobinPolicy", "cassandra.connection.ConnectionException", "cassandra.policies.RoundRobinPolicy", "cassandra.connection.OperationTimedOut", "cassandra.policies.ExponentialReconnectionPolicy"], "function_names": ["list_keyspaces", "drop_keyspace", "_get_lbp_policy", "_connect", "list_permissions", "cql_query_with_prepare", "__virtual__", "_load_properties", "list_users", "version", "grant_permission", "create_user", "list_column_families", "create_keyspace", "_async_log_errors", "info", "_get_ssl_opts", "cql_query", "keyspace_exists"], "function_calls": ["_get_lbp_policy", "getattr", "range", "Cluster", "dir", "str", "_connect", "PlainTextAuthProvider", "version", "_get_ssl_opts", "_load_properties", "CommandExecutionError", "max", "cql_query", "keyspace_exists", "isinstance"], "class_names": [], "class_method_calls": ["replication_map.update", "session.row_factory", "x.startswith", "log.warning", "log.critical", "options.get", "re.match", "session.execute_async", "cluster.connect", "session.prepare", "contact_points.split", "log.debug", "session.execute", "kwargs.get", "bound_statement.bind", "log.error", "match.groups", "logging.getLogger", "ret.append", "LOAD_BALANCING_POLICY_MAP.get", "query.get", "salt.utils", "result.items"]}, "celery.py": {"libraries": ["celery.exceptions.TimeoutError", "logging", "celery.Celery", "salt.exceptions.SaltInvocationError"], "function_names": ["__virtual__", "run_task"], "function_calls": ["Celery", "SaltInvocationError"], "class_names": [], "class_method_calls": ["app.connection", "logging.getLogger", "async_result.get", "app.conf", "log.error", "app.send_task"]}, "ceph.py": {"libraries": ["salt.exceptions.CommandExecutionError", "logging", "salt.exceptions.CommandNotFoundError", "salt.utils.json"], "function_names": ["_unchanged", "_test", "_changed", "_ordereddict2dict", "quorum", "_error"], "function_calls": ["_test", "_unchanged", "_ordereddict2dict", "_error"], "class_names": [], "class_method_calls": ["salt.utils", "err.strerror", "logging.getLogger"]}, "chassis.py": {"libraries": ["logging", "salt.utils.platform"], "function_names": ["__virtual__", "chassis_credentials", "cmd"], "function_calls": ["chassis_credentials"], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "chef.py": {"libraries": ["re"], "function_names": ["_summary", "client", "solo", "__virtual__", "_has_changes", "_run"], "function_calls": ["_has_changes", "_summary", "_run", "int"], "class_names": [], "class_method_calls": ["regex.group", "stdout.splitlines", "re.IGNORECASE", "re.search"]}, "chocolatey.py": {"libraries": ["salt.utils.versions", "salt.utils.data", "salt.exceptions.SaltInvocationError"], "function_names": ["installed", "source_present", "__virtual__", "upgraded", "uninstalled"], "function_calls": ["SaltInvocationError"], "class_names": [], "class_method_calls": ["pkg.lower", "pre_uninstall.keys", "package.lower", "pre_install.keys", "salt.utils", "present.lower", "name.lower"]}, "chroot.py": {"libraries": ["salt.client.ssh.wrapper.state", "os", "salt.exceptions", "logging", "sys", "salt", "salt.utils.args", "salt.utils.files", "salt.client.ssh.state", "tempfile", "copy", "salt.defaults.exitcodes"], "function_names": ["create", "call", "__virtual__", "in_chroot", "apply_", "sls", "highstate", "exist", "_create_and_execute_salt_state"], "function_calls": ["call", "str", "sls", "highstate", "exist", "_create_and_execute_salt_state", "all", "list", "isinstance"], "class_names": [], "class_method_calls": ["mods.split", "os.makedirs", "kwargs.pop", "salt.fileclient", "exclude.split", "tempfile.mkdtemp", "st_.compile_low_chunks", "__pillar__.value", "st_.state", "local.get", "st_.render_highstate", "copy.deepcopy", "kwargs.get", "data.get", "pillar.update", "salt.client", "salt.exceptions", "log.error", "salt_state_path.replace", "opts.get", "self_fd.read", "logging.getLogger", "sys.version_info", "os.path", "root_fd.read", "safe_kwargs.items", "salt.utils"]}, "ciscoconfparse_mod.py": {"libraries": ["salt.exceptions.SaltException", "ciscoconfparse"], "function_names": ["find_objects_w_child", "filter_lines", "find_objects_wo_child", "find_lines", "__virtual__", "_get_ccp", "find_lines_w_child", "find_lines_wo_child", "find_objects"], "function_calls": ["SaltException", "find_objects_w_child", "find_objects_wo_child", "_get_ccp", "find_objects", "isinstance"], "class_names": [], "class_method_calls": ["ccp.find_objects_wo_child", "ret.append", "ciscoconfparse.CiscoConfParse", "parent_line.text", "parent_line.re_search_children", "ccp.find_objects", "ccp.find_objects_w_child", "config.splitlines", "line.text", "child_line.text"]}, "cisconso.py": {"libraries": ["salt.utils.compat"], "function_names": ["value_present", "unchanged", "__init__", "__virtual__", "added", "changed", "removed"], "function_calls": ["set", "_DictDiffer"], "class_names": ["_DictDiffer"], "class_method_calls": ["past_dict.keys", "diff.removed", "self.intersect", "diff.added", "self.past_dict", "self.current_dict", "self.set_past", "diff.changed", "salt.utils", "current_dict.keys", "self.set_current"]}, "cloud.py": {"libraries": ["winrm", "salt.utils.event", "pwd", "os", "keyring.errors", "salt.loader", "salt.utils.crypt", "salt.template", "salt.utils.validate.path.is_writeable", "jinja2.Template", "salt.utils.stringutils", "smbprotocol.tree.TreeConnect", "salt.utils.files", "salt.exceptions.SaltCloudSystemExit", "pypsexec.exceptions.SCMRException", "tempfile", "shlex", "errno", "time", "hashlib", "salt.utils.msgpack", "salt.utils.data", "salt.exceptions.SaltCloudExecutionFailure", "salt.utils.vt", "shutil", "pypsexec.client.Client", "salt.utils.versions", "salt.exceptions.SaltCloudPasswordError", "salt.cloud", "traceback", "socket", "salt.utils.yaml", "pypsexec.scmr.Service", "re", "salt.client", "multiprocessing", "logging", "getpass", "salt.crypt", "salt.utils.nb_popen.NonBlockingPopen", "salt.exceptions.SaltCloudConfigError", "salt.exceptions.SaltCloudExecutionTimeout", "salt.utils.smb", "keyring", "pkg_resources", "smbprotocol.exceptions.CannotDelete", "requests", "winrm.exceptions.WinRMTransportError", "codecs", "salt.utils.path", "salt.config", "salt.utils.platform", "uuid", "subprocess", "salt.exceptions.SaltCloudException", "stat", "salt.utils.compat", "smbprotocol.exceptions.SMBResponseException", "copy"], "function_names": ["wait_for_winrm", "delete_minion_cachedir", "scp_file", "run_psexec_command", "minion_config", "master_config", "init_cachedir", "filter_event", "activate_minion_cachedir", "__init__", "winrm_cmd", "bootstrap", "ip_to_int", "remove_key", "win_cmd", "_exec_ssh_cmd", "sftp_file", "retrieve_password_from_keyring", "missing_node_cache", "_unwrap_dict", "run_func_until_ret_arg", "ssh_file", "remove_service", "salt_config_to_yaml", "wait_for_psexecsvc", "validate_windows_cred_winexe", "validate_windows_cred", "_salt_cloud_force_ascii", "connect", "os_script", "wait_for_ip", "remove_sshkey", "run_inline_script", "is_public_ip", "__ssh_gateway_arguments", "root_cmd", "__ssh_gateway_config_dict", "list_cache_nodes_full", "gen_keys", "store_password_in_keyring", "get_salt_interface", "fire_event", "check_auth", "update_bootstrap", "cachedir_index_add", "wait_for_passwd", "run_executable", "change_minion_cachedir", "wait_for_port", "unlock_file", "__render_script", "check_name", "lock_file", "_strip_cache_events", "cache_node", "rename_key", "wait_for_fun", "cachedir_index_del", "_save_password_in_keyring", "disconnect", "wait_for_winexe", "cache_node_list", "accept_key", "__enter__", "ssh_usernames", "check_key_path_and_mode", "deploy_script", "request_minion_cachedir", "__exit__", "create_service", "run_winexe_command", "deploy_windows", "list_nodes_select", "_format_master_param", "userdata_template", "diff_node_cache"], "function_calls": ["wait_for_winrm", "Exception", "PsExecClient", "delete_minion_cachedir", "scp_file", "run_psexec_command", "minion_config", "init_cachedir", "master_config", "ScmrService", "winrm_cmd", "ip_to_int", "TreeConnect", "RuntimeError", "win_cmd", "dict", "_exec_ssh_cmd", "sftp_file", "SaltCloudExecutionTimeout", "missing_node_cache", "_unwrap_dict", "list", "NonBlockingPopen", "ssh_file", "SaltCloudSystemExit", "next", "update_callback", "fun", "salt_config_to_yaml", "wait_for_psexecsvc", "int", "SaltCloudPasswordError", "type", "set", "TypeError", "os_script", "Client", "run_inline_script", "repr", "root_cmd", "__ssh_gateway_arguments", "__ssh_gateway_config_dict", "gen_keys", "is_writeable", "fire_event", "range", "str", "wait_for_passwd", "_strip_cache_events", "wait_for_port", "unlock_file", "__render_script", "lock_file", "_save_password_in_keyring", "DeprecationWarning", "ValueError", "isinstance", "accept_key", "len", "SaltCloudExecutionFailure", "hasattr", "deploy_script", "run_winexe_command", "SaltCloudException", "iter", "deploy_windows", "_format_master_param", "SaltCloudConfigError", "Template", "diff_node_cache"], "class_names": ["Client"], "class_method_calls": ["logging.WARNING", "pkg_resources.get_distribution", "provider.split", "re.M", "proc.poll_and_read_until_finish", "index_string.split", "smb_tree.connect", "os.getuid", "re.compile", "SSH_PASSWORD_PROMP_SUDO_RE.search", "proc.returncode", "ret.update", "regexp.search", "d0.items", "os.environ", "templated.readlines", "environ_script_contents.append", "smb_tree.disconnect", "kwargs.get", "ssh_kwargs.update", "time.mktime", "file_map_success.append", "socket.AF_INET", "time.strftime", "deploy_scripts_search_paths.append", "remote_dirs.append", "socket.AF_INET6", "socket.inet_pton", "stat.S_IMODE", "req.status_code", "salt.utils", "r.status_code", "__opts__.update", "tmp_dir.lstrip", "salt.loader", "socket.SHUT_RDWR", "__opts__.get", "os.write", "fic.read", "os.close", "s.url", "log.warning", "multiprocessing.Process", "session.run_cmd", "self.remove_service", "socket.socket", "shlex.quote", "process.start", "event.get_event", "template.render", "minion.update", "errno.ENOENT", "render_opts.update", "cache_data.update", "process.join", "hashlib.sha1", "proc.has_unread_data", "log.error", "index.update", "self.create_service", "log.exception", "salt.crypt", "keyring.set_password", "os.rename", "deploy_kwargs.update", "master_conf.get", "ssh_args.append", "minion_conf.pop", "shutil.move", "proc.close", "self.service_name", "exc.object", "file_map_fail.append", "sock.connect", "socket.SOCK_STREAM", "deploy_kwargs.copy", "os.path", "self._client", "url.startswith", "requests.get", "finished_full.append", "master.update", "proc.communicate", "event.fire_event", "keyring.get_password", "entry.startswith", "os.makedirs", "subprocess.PIPE", "tmp_dir.rstrip", "minion.setdefault", "multiprocessing.Queue", "error_msg.format", "tempfile.mkdtemp", "fp_.write", "os.chmod", "proc.sendline", "exc.start", "exc.end", "ip.startswith", "cached_nodes.append", "traceback.format_exc", "copy.deepcopy", "codecs.register_error", "ssh_args.extend", "ssh_gateway.split", "proc.recv", "os.stat", "log.info", "smb_tree.share_name", "sock.shutdown", "winrm.Session", "salt.config", "sock.settimeout", "fp_.read", "exc.errno", "usernames.extend", "time.localtime", "uuid.uuid4", "os.remove", "proc.exitstatus", "proc.pid", "getpass.getpass", "time.sleep", "stat.S_ISSOCK", "kwargs.update", "time.time", "keyring.errors", "config.get", "preseed_minion_keys.items", "os.listdir", "salt.template", "self._exe_file", "win_installer.split", "queue.put", "contents.encode", "opts.copy", "s.protocol", "finished.append", "req.text", "winrm_pkg.version", "shutil.rmtree", "client.run_executable", "self.disconnect", "log.debug", "SSH_PASSWORD_PROMP_RE.search", "subprocess.call", "queue.get", "log.trace", "ip.split", "vm_.get", "opts.get", "self.connect", "sock.close", "gateway.get", "usernames.append", "s.run_cmd", "logging.getLogger", "pwd.getpwuid", "script_env.items", "errno.EBADF", "tempfile.mkstemp"]}, "cmdmod.py": {"libraries": ["nt", "pwd", "os", "functools", "salt.utils.stringutils", "salt.utils.files", "tempfile", "shlex", "time", "salt.grains.extra", "salt.exceptions.TimedProcTimeoutError", "salt.utils.win_reg", "salt.exceptions.CommandExecutionError", "salt.utils.data", "salt.utils.vt", "shutil", "fnmatch", "salt.utils.versions", "salt.exceptions.SaltInvocationError", "salt.utils.args", "salt.utils.templates", "salt.utils.user", "traceback", "glob", "salt._logging.LOG_LEVELS", "re", "salt.utils.json", "salt.utils.win_dacl", "logging", "salt.utils.url", "salt.utils.timed_subprocess", "salt.utils.win_chcp", "grp", "salt.utils.powershell", "salt.utils.path", "salt.utils.platform", "salt.utils.pkg", "uuid", "sys", "base64", "subprocess", "salt.utils.win_runas.runas", "salt.utils.win_functions.escape_argument"], "function_names": ["_run_quiet", "_check_cb", "_python_shell_default", "exec_code", "_gather_pillar", "_retcode_quiet", "run", "_cleanup_tempfile", "which_bin", "_render_cmd", "run_stdout", "_run_all_quiet", "__virtual__", "shell", "_check_avail", "run_all", "_check_loglevel", "exec_code_all", "run_chroot", "shell_info", "_chroot_pids", "script", "tty", "_parse_env", "retcode", "_render", "script_retcode", "_log_cmd", "has_exec", "run_stderr", "which", "_is_valid_shell", "run_bg", "shells", "powershell", "_prep_powershell_cmd", "powershell_all", "_run"], "function_calls": ["run_func", "win_runas", "_check_cb", "any", "_python_shell_default", "sorted", "_gather_pillar", "dict", "run", "_cleanup_tempfile", "which_bin", "_render_cmd", "list", "int", "type", "map", "_check_avail", "run_all", "_check_loglevel", "exec_code_all", "zip", "repr", "globals", "range", "shell_info", "_chroot_pids", "str", "script", "log_callback", "_render", "_parse_env", "retcode", "_log_cmd", "CommandExecutionError", "isinstance", "len", "hasattr", "_cmd_quote", "which", "_is_valid_shell", "iter", "SaltInvocationError", "_prep_powershell_cmd", "_run"], "class_names": [], "class_method_calls": ["available_shells.append", "env_cmd.extend", "pids.append", "device.replace", "new_kwargs.get", "shell_data.pop", "re.search", "run_env.pop", "cmd.strip", "ret.update", "proc.run", "os.environ", "err.rstrip", "kwargs.get", "env_runas.items", "install_data.get", "nt.environ", "line.startswith", "env.setdefault", "tty_device.write", "x.pw_name", "logging.DEBUG", "fp.write", "salt.utils", "__opts__.get", "sys.executable", "subprocess.Popen", "log.warning", "os.kill", "__context__.get", "re.match", "version_results.group", "level.lower", "env_runas.update", "response.pop", "shutil.copyfile", "shlex.quote", "tempfile.NamedTemporaryFile", "lang.lower", "env_bytes.count", "proc.has_unread_data", "pw_keys.sort", "log.error", "log.exception", "proc.stderr", "proc.close", "salt.pillar", "re.IGNORECASE", "sys.version_info", "env.items", "os.path", "base64.standard_b64encode", "link.startswith", "device.startswith", "salt.grains", "shutil.chown", "pattern_result.group", "os.X_OK", "cmd.replace", "subprocess.PIPE", "kwargs.pop", "line.strip", "os.sep", "tempfile.mkdtemp", "fp_.write", "os.chmod", "ver_list.append", "cmd.encode", "glob.glob", "proc.recv", "log.info", "subprocess.STDOUT", "cmd.append", "ret.append", "grp.getgrnam", "pillar.compile_pillar", "run_env.update", "os.chown", "traceback.extract_stack", "uuid.uuid4", "os.remove", "__grains__.value", "proc.exitstatus", "proc.pid", "functools.partial", "time.sleep", "time.time", "__context__.pop", "shell.lower", "os.access", "os.R_OK", "env_runas.get", "log.log", "marker.encode", "proc.stdout", "env_bytes.split", "log.debug", "pwd.getpwnam", "out.rstrip", "shell_fp.read", "proc.process", "fnmatch.fnmatch", "pwd.getpwall", "logging.getLogger", "fp.name", "proc.isalive"]}, "composer.py": {"libraries": ["salt.exceptions.SaltException"], "function_names": ["__virtual__", "update", "installed"], "function_calls": [], "class_names": [], "class_method_calls": []}, "container_resource.py": {"libraries": ["traceback", "time", "os", "functools", "salt.utils.path", "salt.exceptions.CommandExecutionError", "salt.utils.vt", "logging", "salt.exceptions.SaltInvocationError", "salt.utils.args", "copy", "shlex"], "function_names": ["_validate", "_nsenter", "cache_file", "_state", "copy_to", "run_all", "run", "wrapper", "_get_sha256"], "function_calls": ["run_func", "state", "_nsenter", "cache_file", "_state", "sorted", "CommandExecutionError", "run_all", "wrapped", "SaltInvocationError", "_get_sha256", "isinstance"], "class_names": [], "class_method_calls": ["time.sleep", "log.warning", "source.startswith", "shlex.quote", "proc.terminate", "log.debug", "os.environ", "traceback.format_exc", "kwargs.get", "copy.deepcopy", "proc.has_unread_data", "proc.recv", "log.error", "keep_env.split", "functools.wraps", "logging.getLogger", "os.path", "salt.utils", "proc.exitstatus"]}, "cpan.py": {"libraries": ["os", "salt.utils.path", "logging", "os.path", "salt.utils.files"], "function_names": ["list_", "remove", "show", "__virtual__", "install", "show_config"], "function_calls": ["len", "show", "show_config"], "class_names": [], "class_method_calls": ["file_.startswith", "log.trace", "logging.getLogger", "config.get", "line.split", "os.listdir", "files.append", "line.replace", "info.append", "info.insert", "line.startswith", "salt.utils", "os.path", "fh_.readlines", "old_info.get", "info.get", "module.replace"]}, "cron.py": {"libraries": ["os", "salt.modules.cron._cron_matched", "salt.utils.files", "salt.modules.cron._needs_change"], "function_names": ["file", "__virtual__", "env_present", "absent", "_check_cron", "_check_cron_env", "env_absent", "present", "_get_cron_info"], "function_calls": ["any", "str", "_needs_change", "_check_cron", "_check_cron_env", "_cron_matched"], "class_names": [], "class_method_calls": ["os.unlink", "os.stat", "fp_.write", "raw_cron.endswith", "salt.utils", "name.strip"]}, "cryptdev.py": {"libraries": ["logging"], "function_names": ["mapped", "unmapped"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "active.keys", "log.warning"]}, "csf.py": {"libraries": ["logging"], "function_names": ["ports_open", "nics_skip", "testing_off", "__virtual__", "rule_present", "testing_on", "option_present", "rule_absent", "nics_skipped"], "function_calls": ["nics_skipped", "func", "int", "map", "list"], "class_names": [], "class_method_calls": ["log.trace", "direction.upper", "logging.getLogger"]}, "cyg.py": {"libraries": ["logging"], "function_names": ["installed", "updated", "unchanged", "__init__", "__virtual__", "added", "same", "changed", "removed"], "function_calls": ["set", "list", "DictDiffer"], "class_names": ["DictDiffer"], "class_method_calls": ["differ.same", "logging.getLogger", "differ.removed", "self.past_keys", "differ.changed", "d.keys", "self.intersect", "self.past_dict", "self.current_dict", "self.current_keys", "log.warning", "differ.added", "log.debug"]}, "daemontools.py": {"libraries": ["os", "salt.utils.path", "salt.exceptions.CommandExecutionError", "re", "logging", "os.path"], "function_names": ["stop", "start", "reload_", "available", "disabled", "status", "__virtual__", "restart", "missing", "term", "enabled", "get_all", "_service_path", "full_restart"], "function_calls": ["frozenset", "stop", "start", "available", "sorted", "_service_path", "restart", "term", "enabled", "CommandExecutionError", "all", "get_all"], "class_names": [], "class_method_calls": ["logging.getLogger", "os.listdir", "log.error", "re.search", "os.access", "os.path", "os.X_OK", "salt.utils"]}, "data.py": {"libraries": ["functools", "collections.abc.MutableMapping", "salt.utils.dictupdate", "salt.utils.stringutils", "hashlib", "salt.defaults.DEFAULT_TARGET_DELIM", "jmespath", "fnmatch", "salt.utils.odict.OrderedDict", "salt.utils.args", "random", "salt.utils.yaml", "re", "logging", "salt.utils.decorators.jinja.jinja_filter", "datetime", "collections.abc.Mapping", "salt.exceptions.SaltException", "collections.abc.Sequence", "copy"], "function_names": ["traverse_dict_and_list", "__len__", "simple_types_filter", "__change_case", "__init__", "is_iter", "substr_in_list", "encode", "_remove_circular_refs", "__delitem__", "to_lowercase", "shuffle", "hash", "is_list", "traverse_dict", "compare_lists", "__iter__", "sample", "exactly_n", "__getitem__", "json_query", "get_value", "flatten", "_match", "exactly_one", "recursive_diff", "val_cb", "repack_dictlist", "filter_falsey", "subdict_match", "to_uppercase", "decode_dict", "__eq__", "decode_tuple", "compare_dicts", "decode", "sorted_ignorecase", "stringify", "_dict_match", "key_cb", "is_dictlist", "encode_tuple", "mysql_to_dict", "decode_list", "_is_not_considered_falsey", "filter_by", "items_lower", "__setitem__", "_append_placeholder", "is_true", "__repr__", "encode_dict", "encode_list", "copy"], "function_calls": ["traverse_dict_and_list", "any", "simple_types_filter", "__change_case", "sorted", "is_iter", "RecursionError", "RuntimeError", "dict", "_remove_circular_refs", "enumerate", "to_lowercase", "list", "OrderedDict", "next", "hash", "int", "sample", "exactly_n", "jinja_filter", "set", "type", "repr", "_match", "zip", "filter_element", "all", "recursive_diff", "val_cb", "data_type", "repack_dictlist", "_decode_func", "get_value", "SaltException", "range", "subdict_match", "decode_dict", "str", "flatten", "decode_tuple", "tuple", "isinstance", "len", "min", "decode", "_dict_match", "bool", "hasattr", "CaseInsensitiveDict", "getattr", "is_dictlist", "encode_tuple", "key_cb", "decode_list", "float", "_is_not_considered_falsey", "reversed", "id", "iter", "_append_placeholder", "encode_dict", "encode_list"], "class_names": ["CaseInsensitiveDict"], "class_method_calls": ["hasher.update", "lookup_dict.get", "obj.items", "line.split", "self.items_lower", "hasher.hexdigest", "new.keys", "delimiter.join", "ret_new.pop", "functools.partial", "jmespath.search", "_ids.add", "ob.items", "re.match", "remove_indices.append", "value.encode", "ret.extend", "comp.strip", "ret_old.pop", "data.__class__", "simplearray.append", "_seen.add", "data.items", "key.startswith", "list_old.pop", "_seen.remove", "log.debug", "random.Random", "fnmatch.fnmatchcase", "expr.split", "x.lower", "ret.setdefault", "copy.deepcopy", "log.error", "path.find", "list_new.pop", "log.exception", "random.sample", "line.startswith", "self.update", "self.items", "old.keys", "data.isoformat", "fnmatch.fnmatch", "logging.getLogger", "ret.append", "hashlib.new", "key.endswith", "obj.get", "list_old.remove", "obj.keys", "list_new.remove", "salt.utils", "key.split", "datetime.datetime", "self._data", "pattern.startswith"]}, "datadog_api.py": {"libraries": ["requests", "salt.exceptions.SaltInvocationError", "datadog"], "function_names": ["cancel_downtime", "post_event", "__virtual__", "schedule_downtime", "_initialize_connection"], "function_calls": ["_initialize_connection", "SaltInvocationError"], "class_names": [], "class_method_calls": ["response.status_code", "datadog.api", "requests.post", "response.json", "response.keys", "datadog.initialize", "response.text"]}, "ddns.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": []}, "deb_apache.py": {"libraries": ["salt.utils.path", "logging", "os", "salt.utils.decorators.path"], "function_names": ["_detect_os", "check_mod_enabled", "a2disconf", "a2enmod", "check_site_enabled", "a2dismod", "__virtual__", "a2ensite", "check_conf_enabled", "a2dissite", "a2enconf"], "function_calls": ["_detect_os"], "class_names": [], "class_method_calls": ["mod.endswith", "logging.getLogger", "conf.endswith", "os.path", "salt.utils", "site.endswith"]}, "deb_postgres.py": {"libraries": ["salt.utils.path", "logging", "shlex"], "function_names": ["cluster_exists", "_parse_pg_lscluster", "__virtual__", "cluster_list", "cluster_create", "cluster_remove"], "function_calls": ["str", "_parse_pg_lscluster", "int", "cluster_list"], "class_names": [], "class_method_calls": ["logging.getLogger", "line.split", "log.error", "shlex.quote", "cluster_dict.keys", "ret.get", "salt.utils", "output.splitlines"]}, "debconfmod.py": {"libraries": [], "function_names": ["__virtual__", "set", "set_file"], "function_calls": ["str", "isinstance"], "class_names": [], "class_method_calls": ["data.items"]}, "debian_ip.py": {"libraries": ["time", "salt.utils.dns", "os", "functools", "jinja2.exceptions", "re", "logging", "os.path", "salt.utils.stringutils", "salt.utils.validate.net", "salt.utils.files", "salt.utils.templates", "salt.utils.odict", "jinja2", "io"], "function_names": ["apply_network_settings", "_parse_resolve", "_parse_network_settings", "down", "get_interface", "_parse_settings_bond_2", "build_bond", "build_network_settings", "_parse_settings_eth", "__float", "_parse_hostname", "_parse_interfaces", "build_routes", "_raise_error_routes", "_error_msg_iface", "_attrmaps_contain_attr", "_filter_malformed_interfaces", "_write_file_network", "__mac", "_parse_settings_bond", "__virtual__", "_parse_settings_bond_3", "__int", "_parse_searchdomain", "_parse_settings_bond_4", "__within", "_error_msg_routes", "__ipv6_netmask", "_parse_settings_bond_6", "_read_file", "_parse_settings_source", "_write_file_ifaces", "_parse_bridge_opts", "_write_file_routes", "_raise_error_iface", "__ipv6", "__ipv4_netmask", "_raise_error_network", "__space_delimited_list", "_parse_settings_bond_0", "up", "_parse_current_network_settings", "_read_temp", "__within2", "get_network_settings", "__anything", "get_bond", "_parse_routes", "_parse_settings_bond_5", "_validate_interface_option", "__ipv4_quad", "build_interface", "_log_default_network", "_parse_ethtool_pppoe_opts", "_write_file", "_write_file_ppp_ifaces", "_parse_domainname", "get_routes", "_read_temp_ifaces", "_log_default_iface", "_error_msg_network", "_parse_settings_bond_1", "_parse_ethtool_opts"], "function_calls": ["dtype", "_parse_resolve", "_parse_network_settings", "sorted", "_parse_settings_bond_2", "_parse_settings_eth", "_parse_hostname", "_parse_interfaces", "list", "_raise_error_routes", "_error_msg_iface", "_filter_malformed_interfaces", "int", "_write_file_network", "_attrmaps_contain_attr", "_parse_settings_bond", "_parse_settings_bond_3", "__int", "_parse_searchdomain", "_parse_settings_bond_4", "__within", "_write_file_ifaces", "_error_msg_routes", "_parse_settings_bond_6", "_read_file", "_parse_settings_source", "_write_file_routes", "_parse_bridge_opts", "_raise_error_iface", "_parse_settings_bond_0", "_raise_error_network", "str", "AttributeError", "_read_temp", "_parse_current_network_settings", "_parse_routes", "_parse_settings_bond_5", "_validate_interface_option", "isinstance", "len", "validate_func", "hasattr", "getattr", "_write_file_ppp_ifaces", "_log_default_network", "_write_file", "_parse_ethtool_pppoe_opts", "_parse_domainname", "float", "_read_temp_ifaces", "_log_default_iface", "_error_msg_network", "_parse_settings_bond_1", "_parse_ethtool_opts"], "class_names": [], "class_method_calls": ["attr.startswith", "saved_ifcfg.split", "time.sleep", "eth_template.render", "changes.extend", "values.pop", "os.listdir", "line.split", "domain_prog.match", "jinja2.FileSystemLoader", "salt.utils", "search_prog.match", "ifcfg.split", "tout.write", "SALT_ATTR_TO_DEBIAN_ATTR_MAP.get", "fout.write", "log.warning", "interface_files.insert", "_opt.replace", "line.rstrip", "re.match", "opts.items", "jinja2.exceptions", "adapters.pop", "line.lstrip", "template.render", "iface_type.lower", "re.compile", "opts.update", "opts.pop", "iface.replace", "value.strip", "log.error", "opts.get", "JINJA.get_template", "current.items", "log.info", "source_template.render", "new_contents.insert", "re.sub", "bond.update", "line.startswith", "contents.readlines", "re.split", "line.isspace", "attr.replace", "new_contents.append", "logging.getLogger", "ATTRMAPS.get", "SALT_ATTR_TO_DEBIAN_ATTR_MAP.items", "jinja2.Environment", "pattern.format", "config.update", "waitport_time.isdigit", "tout.readlines", "iface_data.pop", "os.path", "k.lower", "tout.close", "opt.startswith", "tout.seek", "msg.format", "io.StringIO", "dtype.__class__", "functools.partial"]}, "debian_service.py": {"libraries": ["glob", "salt.utils.systemd", "os", "re", "logging", "fnmatch", "shlex"], "function_names": ["stop", "disable", "_get_runlevel", "start", "reload_", "available", "disabled", "status", "force_reload", "enable", "__virtual__", "missing", "restart", "enabled", "get_enabled", "_service_cmd", "get_disabled", "get_all"], "function_calls": ["bool", "_get_runlevel", "sorted", "set", "get_enabled", "_service_cmd", "get_disabled", "get_all"], "class_names": [], "class_method_calls": ["out.split", "logging.getLogger", "glob.glob", "x.rsplit", "os.sep", "line.split", "fnmatch.filter", "re.search", "shlex.quote", "ret.add", "salt.utils", "re.split"]}, "debuild_pkgbuild.py": {"libraries": ["traceback", "errno", "time", "salt.modules.gpg", "os", "salt.utils.path", "salt.exceptions.CommandExecutionError", "re", "salt.utils.vt", "shutil", "logging", "salt.utils.stringutils", "salt.exceptions.SaltInvocationError", "salt.utils.files", "gnupg", "tempfile", "urllib.parse"], "function_names": ["_check_repo_sign_utils_support", "_get_build_env", "_get_repo_dists_env", "_check_repo_gpg_phrase_utils", "_create_pbuilders", "_mk_tree", "__virtual__", "make_src_pkg", "build", "make_repo", "_get_spec", "_get_repo_options_env", "_get_src"], "function_calls": ["_check_repo_sign_utils_support", "_get_build_env", "_get_src", "next", "_get_repo_dists_env", "int", "_check_repo_gpg_phrase_utils", "_create_pbuilders", "_mk_tree", "make_src_pkg", "iter", "CommandExecutionError", "SaltInvocationError", "_get_spec", "_get_repo_options_env", "list", "isinstance"], "class_names": [], "class_method_calls": ["debfile.endswith", "afile.startswith", "time.sleep", "parsed.scheme", "os.listdir", "SIGN_PROMPT_RE.search", "fow.readlines", "__grains__.get", "os.makedirs", "dflts_dict.keys", "env_overrides.isspace", "afile.endswith", "spec_pathfile.endswith", "local_keys2_keygrip.splitlines", "errno.EEXIST", "re.M", "shutil.rmtree", "tempfile.mkdtemp", "proc.sendline", "re.compile", "gpg_tty_info_line.split", "traceback.format_exc", "dflts_dict.items", "ret.setdefault", "shutil.copy", "proc.has_unread_data", "proc.recv", "salttar_name.rfind", "log.error", "salttarball.split", "fow.write", "REPREPRO_SIGN_PROMPT_RE.search", "env_man_seen.append", "line.startswith", "gpg_info_line.split", "urllib.parse", "dfile.endswith", "proc.close", "logging.getLogger", "ret.append", "sources.split", "dsc.endswith", "exc.errno", "env.items", "os.path", "env.keys", "salt.utils", "os.remove", "proc.exitstatus"]}, "defaults.py": {"libraries": ["os", "salt.fileclient", "salt.utils.yaml", "salt.utils.data", "salt.utils.dictupdate", "salt.utils.json", "logging", "salt.utils.url", "salt.utils.files", "copy"], "function_names": ["deepcopy", "get", "update", "_load", "merge", "_mk_client"], "function_calls": ["loader", "deepcopy", "TypeError", "_load", "merge", "_mk_client"], "class_names": [], "class_method_calls": ["salt.fileclient", "logging.getLogger", "copy.deepcopy", "dictupdate.update", "salt.utils", "os.path", "paths.append", "client.cache_files", "log.debug", "nodes.items", "key.split", "file_.rsplit"]}, "devinfo.py": {"libraries": ["logging"], "function_names": ["_hwinfo_efi", "hwinfo", "_hwinfo_network", "filter_", "_hwinfo_parse_short", "_hwinfo_parse", "_hwinfo_memory", "_match", "_hwinfo_parse_full", "_udev"], "function_calls": ["len", "_hwinfo_efi", "_hwinfo_network", "sorted", "type", "set", "_hwinfo_parse_short", "_hwinfo_parse", "_hwinfo_memory", "dict", "_udev", "_match", "_hwinfo_parse_full", "isinstance"], "class_names": [], "class_method_calls": ["line.split", "match_info.items", "log.warning", "v.strip", "k.upper", "line.strip", "udev_info.get", "value.startswith", "line.count", "value.strip", "current_value.append", "log.error", "key.partition", "line.startswith", "cmd.append", "result_stack.append", "logging.getLogger", "value.replace", "item.split", "report.strip", "key.strip", "line.endswith", "value.split"]}, "devmap.py": {"libraries": ["os.path"], "function_names": ["multipath_flush", "multipath_list"], "function_calls": [], "class_names": [], "class_method_calls": ["os.path"]}, "dig.py": {"libraries": ["salt.utils.path", "logging", "re", "salt.utils.network"], "function_names": ["TXT", "check_ip", "AAAA", "SPF", "__virtual__", "CNAME", "MX", "PTR", "NS", "A"], "function_calls": ["int", "str", "check_ip", "SPF", "A"], "class_names": [], "class_method_calls": ["logging.getLogger", "ret.extend", "ret.append", "addr.rsplit", "x.split", "re.sub", "log.warning", "dig.append", "salt.utils", "re.compile", "cmd.append", "spf_re.match"]}, "disk.py": {"libraries": ["os.path"], "function_names": ["_status_mount", "_status_path", "status", "_check_min_max", "_validate_int"], "function_calls": ["len", "int", "_status_mount", "_status_path", "float", "_check_min_max", "round", "_validate_int", "isinstance"], "class_names": [], "class_method_calls": ["value.strip", "path.isdir"]}, "djangomod.py": {"libraries": ["salt.utils.path", "os", "salt.exceptions"], "function_names": ["collectstatic", "command", "migrate", "loaddata", "__virtual__", "_get_django_admin", "createsuperuser", "syncdb"], "function_calls": ["_get_django_admin", "command", "dict"], "class_names": [], "class_method_calls": ["args.append", "kwargs.items", "salt.exceptions", "fixtures.split", "os.path", "key.startswith", "salt.utils"]}, "dnsmasq.py": {"libraries": ["os", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "logging", "salt.utils.files"], "function_names": ["set_config", "get_config", "version", "__virtual__", "fullversion", "_parse_dnamasq"], "function_calls": ["_parse_dnamasq", "get_config", "CommandExecutionError", "isinstance"], "class_names": [], "class_method_calls": ["filename.endswith", "includes.append", "line.strip", "logging.getLogger", "line.split", "os.listdir", "dnsopts.update", "line.startswith", "os.path", "key.startswith", "salt.utils", "filename.startswith"]}, "dnsutil.py": {"libraries": ["time", "socket", "salt.utils.path", "logging", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["parse_hosts", "serial", "hosts_remove", "check_ip", "_to_seconds", "AAAA", "_has_dig", "__virtual__", "SPF", "MX", "NS", "parse_zone", "A", "hosts_append"], "function_calls": ["len", "parse_hosts", "int", "str", "_to_seconds", "_has_dig"], "class_names": [], "class_method_calls": ["line.split", "hosts.splitlines", "socket.SOCK_RAW", "comps.pop", "socket.getaddrinfo", "out_file.write", "comps.insert", "line.strip", "timestr.replace", "fp_.write", "host_list.remove", "socket.gaierror", "comps.remove", "line.replace", "socket.AF_INET", "time.strftime", "zonedict.setdefault", "line.startswith", "hostsdict.setdefault", "multi.replace", "logging.getLogger", "timestr.upper", "fp_.read", "socket.AF_INET6", "zone.splitlines", "salt.utils", "entries.split"]}, "dockercompose.py": {"libraries": ["salt.serializers.json", "compose.cli.command.get_project", "os", "compose.service.ConvergenceStrategy", "salt.utils.yaml", "re", "logging", "operator.attrgetter", "inspect", "salt.utils.stringutils", "salt.utils.files", "compose.project.OneOffFilter", "compose"], "function_names": ["create", "pull", "build", "unpause", "__get_docker_file_path", "service_upsert", "__write_docker_compose", "__handle_except", "__standardize_result", "rm", "__virtual__", "ps", "stop", "__dump_compose_file", "__load_docker_compose", "up", "service_set_tag", "service_remove", "kill", "start", "get", "__read_docker_compose_file", "_get_convergence_plans", "restart", "__load_compose_definitions", "__dump_docker_compose", "__load_project", "service_create", "pause", "__load_project_from_file_path"], "function_calls": ["get_project", "attrgetter", "sorted", "__get_docker_file_path", "__write_docker_compose", "__handle_except", "int", "__standardize_result", "__dump_compose_file", "__load_docker_compose", "str", "tuple", "isinstance", "len", "__read_docker_compose_file", "_get_convergence_plans", "__load_compose_definitions", "__dump_docker_compose", "__load_project", "__load_project_from_file_path"], "class_names": [], "class_method_calls": ["definition.strip", "project.start", "container.get", "container.inspect_if_not_inspected", "project.kill", "project.remove_stopped", "container.human_readable_state", "project.get_services", "ConvergenceStrategy.changed", "project._get_convergence_plans", "json.DeserializationError", "project.unpause", "container.human_readable_ports", "yaml.load", "re.match", "json.deserialize", "project.pause", "OneOffFilter.only", "project.build", "match.group", "project.containers", "project.pull", "yaml.YAMLError", "compose.__version__", "fl.write", "project.restart", "container.id", "os.mkdir", "container.name", "logging.getLogger", "project.stop", "path.lower", "yaml.safe_dump", "container.human_readable_command", "container.inspect", "project.up", "os.path", "inspect.stack", "salt.utils", "os.remove"]}, "dockermod.py": {"libraries": ["timelib", "os", "functools", "docker", "string", "shlex", "time", "salt.fileclient", "salt.exceptions.CommandExecutionError", "salt.utils.functools", "shutil", "fnmatch", "salt.exceptions.SaltInvocationError", "salt.state.HighState", "salt.client.ssh.state", "re", "bz2", "salt.exceptions", "salt.utils.json", "logging", "salt.utils.dockermod.translate.network", "lzma", "salt.utils.dockermod.translate.container", "salt.pillar", "salt.utils.path", "salt.loader.dunder.__file_client__", "gzip", "uuid", "subprocess", "json", "copy"], "function_names": ["_import_status", "save", "sls", "inspect_network", "search", "sls_build", "_build_status", "_generate_tmp_path", "top", "script", "_ulimit_sort", "inspect", "_prep_pull", "exists", "layers", "inspect_volume", "_refresh_mine_cache", "images", "_run", "state", "volumes", "pid", "create", "_prepare_trans_tar", "export", "_error_detail", "_get_state", "ps_", "unpause", "_change_state", "resolve_image_id", "connect_container_to_network", "list_containers", "__virtual__", "get_client_args", "rm_", "_client_wrapper", "resolve_tag", "compare_container_networks", "networks", "_script", "remove_network", "script_retcode", "_get_nets", "port", "history", "prune", "call", "pause", "commit", "signal_", "_create_networking_config", "_file_client", "pull", "_push_status", "run_stdout", "_scrub_links", "_get_create_kwargs", "_pull_status", "_compile_state", "_new_layer", "tag_", "remove_volume", "inspect_container", "create_volume", "_get_client", "run_container", "retcode", "apply_", "highstate", "connected", "run_stderr", "_clear_context", "create_network", "_get_exec_driver", "info", "_get_docker_py_versioninfo", "_check_update_mine", "restart", "copy_from", "push", "_get_sha256", "disconnect_all_containers_from_network", "inspect_image", "compare_containers", "login", "build", "load", "_already_exists", "run", "wrapper", "_cleanup_tempfile", "rename", "_docker_client", "disconnect_container_from_network", "copy_to", "list_tags", "run_all", "_size_fmt", "import_", "stop", "version", "rmi", "kill", "start_", "logs", "_get_top_level_images", "decode", "depends", "diff", "kvsort", "compare_networks", "_append_warning", "wait", "logout", "_check_ipconfig", "dangling"], "function_calls": ["_import_status", "any", "sls", "HighState", "inspect_network", "_build_status", "all", "_generate_tmp_path", "str", "_ulimit_sort", "_prep_pull", "bool", "inspect_volume", "hasattr", "iter", "wrapped", "images", "map", "_run", "state", "create", "_prepare_trans_tar", "_error_detail", "_get_state", "ps_", "_change_state", "resolve_image_id", "list", "list_containers", "get_client_args", "rm_", "_client_wrapper", "resolve_tag", "_script", "_get_nets", "NotImplementedError", "len", "getattr", "call", "object", "SaltInvocationError", "commit", "_create_networking_config", "_file_client", "sorted", "pull", "_push_status", "run_stdout", "enumerate", "_scrub_links", "_get_create_kwargs", "int", "_pull_status", "_compile_state", "_new_layer", "tag_", "inspect_container", "_get_client", "retcode", "highstate", "connected", "tuple", "_clear_context", "_get_exec_driver", "info", "reversed", "_check_update_mine", "_get_docker_py_versioninfo", "_get_sha256", "inspect_image", "_already_exists", "run", "_cleanup_tempfile", "next", "func", "set", "disconnect_container_from_network", "copy_to", "list_tags", "run_all", "_size_fmt", "stop", "version", "rmi", "CommandExecutionError", "start_", "_get_top_level_images", "isinstance", "depends", "_append_warning", "_check_ipconfig"], "class_names": ["DockerJSONDecoder"], "class_method_calls": ["timelib.strtodatetime", "stream_data.extend", "private_port.partition", "networks.items", "data.append", "bz2.BZ2Compressor", "key_map.get", "exc.strerror", "ret.add", "string.hexdigits", "out.flush", "item.strip", "results.setdefault", "ret.pop", "item.get", "re.search", "item.items", "containers.items", "context_data.setdefault", "st_.state", "re.compile", "val.remove", "ret.update", "x.keys", "os.environ", "uncompressed.read", "compare_keys.get", "kwargs.get", "container.pop", "pillar.update", "net1.get", "time.strftime", "cinfo.get", "old_val.remove", "pushed.append", "salt.utils", "driver.strip", "cinfo.pop", "already_pushed.append", "log_kwargs.pop", "container.get", "errors.append", "fnmatch.filter", "x.get", "warnings.append", "exc.response", "json.JSONDecoder", "log.warning", "s.splitlines", "results.items", "__context__.get", "salt.fileclient", "match.group", "docker.__version__", "all_nets.update", "shutil.copyfile", "path.endswith", "st_.compile_low_chunks", "shlex.quote", "full_host_config.update", "protocol.lower", "command_prefix.sub", "output.split", "ret.setdefault", "data.get", "salt.client", "item.sort", "log.error", "failed.append", "ret.get", "objs.append", "networks.split", "driver.startswith", "salt.pillar", "container_depends.extend", "docker.APIClient", "os.path", "subprocess.list2cmdline", "status.startswith", "val.get", "response.read", "networks.values", "exc_info.update", "out.close", "os.makedirs", "lzma.LZMACompressor", "kwargs.pop", "val2.get", "exc_info.setdefault", "registry_auth.update", "bucket.get", "cstate.get", "x.lstrip", "local.get", "st_.render_highstate", "copy.deepcopy", "os.stat", "compressor.compress", "l.replace", "functools.wraps", "gzip.open", "cmd.append", "exc.info", "pulled.append", "ret.append", "data.setdefault", "time.localtime", "uuid.uuid4", "version_re.match", "already_pulled.append", "os.remove", "docker.tls", "time.time", "kwargs.items", "__context__.pop", "output.append", "context_data.get", "kind_map.get", "exc.explanation", "__file_client__.value", "mods.split", "x.values", "docker.errors", "ignore.append", "new_val.remove", "port_num.isdigit", "out.write", "stream.rstrip", "key.startswith", "item.pop", "log.debug", "inspect_results.get", "limit.append", "registry.lower", "compressor.flush", "img.pop", "self.raw_decode", "bucket.setdefault", "docker.version_info", "logging.getLogger", "net2.get", "__context__.setdefault", "docker.Client"]}, "dpkg_lowpkg.py": {"libraries": ["os", "salt.utils.path", "salt.exceptions.CommandExecutionError", "re", "salt.utils.data", "logging", "salt.utils.stringutils", "datetime", "salt.utils.args", "salt.utils.files", "salt.exceptions.SaltInvocationError"], "function_names": ["info", "unpurge", "_get_pkg_info", "__virtual__", "_get_pkg_ds_avail", "bin_pkg_info", "file_list", "list_pkgs", "file_dict", "_get_pkg_install_time", "_get_pkg_license"], "function_calls": ["len", "int", "sorted", "set", "_get_pkg_ds_avail", "_get_pkg_info", "dict", "CommandExecutionError", "_get_pkg_license", "_get_pkg_install_time", "SaltInvocationError", "list"], "class_names": [], "class_method_calls": ["line.split", "__context__.pop", "pkg_data.get", "dselect_pkg_avail.get", "pkg_info.split", "__grains__.get", "elm.strip", "kwargs.pop", "line.strip", "ret.union", "re.match", "nfo.get", "cmd.strip", "datetime.datetime", "value.strip", "log.error", "line.startswith", "re.split", "output.splitlines", "logging.getLogger", "ret.append", "os.linesep", "licenses.add", "fp_.read", "os.path", "key.lower", "el.strip", "salt.utils", "pkg_info_line.split"]}, "drac.py": {"libraries": ["salt.utils.path", "salt.exceptions"], "function_names": ["__virtual__", "network", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils"]}, "dracr.py": {"libraries": ["os", "salt.modules.cmdmod", "salt.utils.path", "salt.exceptions.CommandExecutionError", "re", "logging"], "function_names": ["set_nicvlan", "update_firmware", "get_chassis_datacenter", "set_snmp", "idrac_general", "syslog", "set_dns_dracname", "server_poweroff", "list_slotnames", "deploy_snmp", "server_power", "deploy_password", "bare_rac_cmd", "server_powerstatus", "nameservers", "set_chassis_name", "set_slotname", "set_permissions", "get_slotname", "get_chassis_location", "server_poweron", "__virtual__", "inventory", "get_chassis_name", "server_reboot", "list_users", "__execute_ret", "__execute_cmd", "update_firmware_nfs_or_cifs", "set_network", "create_user", "get_general", "server_pxe", "delete_user", "get_dns_dracname", "set_general", "mapit", "__parse_drac", "_update_firmware", "set_chassis_datacenter", "network_info", "change_password", "set_niccfg", "set_chassis_location", "system_info", "server_hardreset", "email_alerts"], "function_calls": ["sorted", "list_slotnames", "dict", "bare_rac_cmd", "list", "int", "set_permissions", "set", "inventory", "list_users", "__execute_ret", "range", "__execute_cmd", "str", "CommandExecutionError", "get_general", "delete_user", "set_general", "__parse_drac", "len", "_update_firmware", "network_info", "change_password", "system_info", "map"], "class_names": [], "class_method_calls": ["user.split", "log.warning", "salt.modules", "module.index", "prop.strip", "user.startswith", "users.keys", "l.startswith", "i.rstrip", "key.startswith", "module.startswith", "permissions.split", "l.strip", "i.strip", "_uids.add", "val.strip", "re.split", "output.splitlines", "d.items", "logging.getLogger", "l.split", "fmtlines.append", "os.path", "inv.get", "salt.utils", "i.split"]}, "drbd.py": {"libraries": ["logging"], "function_names": ["_add_res", "overview", "_add_volume", "status", "_add_peernode", "_count_spaces_startswith", "_empty", "_line_parser", "_unknown_parser", "_analyse_status_type", "_analyse_overview_field"], "function_calls": ["len", "func", "_line_parser", "_count_spaces_startswith", "isinstance", "_analyse_status_type", "_analyse_overview_field"], "class_names": [], "class_method_calls": ["line.strip", "i.isspace", "ret.append", "logging.getLogger", "line.split", "field.split", "partnerdiskstate.startswith", "localdiskstate.startswith", "switch.get", "lastpnodevolumes.append", "content.split", "cmd.append"]}, "dummyproxy_pkg.py": {"libraries": ["logging", "salt.utils.data", "salt.utils.platform"], "function_names": ["installed", "remove", "version", "__virtual__", "install", "list_pkgs", "upgrade"], "function_calls": ["len", "str"], "class_names": [], "class_method_calls": ["results.update", "salt.utils", "logging.getLogger"]}, "dummyproxy_service.py": {"libraries": ["logging", "salt.utils.platform"], "function_names": ["running", "stop", "list_", "start", "status", "__virtual__", "restart", "enabled", "get_all"], "function_calls": ["status", "get_all"], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "ebuildpkg.py": {"libraries": ["salt.utils.systemd", "os", "salt.utils.path", "salt.exceptions.CommandExecutionError", "re", "salt.utils.data", "salt.utils.functools", "salt.utils.pkg", "logging", "salt.utils.versions", "sys", "datetime", "salt.utils.args", "salt.exceptions.MinionError", "salt.utils.compat", "copy", "portage"], "function_names": ["_cpv_to_cp", "latest_version", "porttree_matches", "_allnodes", "_porttree", "upgrade", "update", "version_cmp", "upgrade_available", "__virtual__", "_p_to_cp", "check_db", "list_upgrades", "depclean", "_get", "version_clean", "_vartree", "remove", "version", "_get_upgradable", "list_pkgs", "_flags_changed", "_list_pkgs_from_context", "check_extra_requirements", "_cpv_to_version", "purge", "refresh_db", "install", "ex_mod_init", "_process_emerge_err"], "function_calls": ["_cpv_to_cp", "latest_version", "any", "porttree_matches", "_allnodes", "list", "_porttree", "set", "_p_to_cp", "_get", "depclean", "_vartree", "remove", "version", "_get_upgradable", "list_pkgs", "CommandExecutionError", "_flags_changed", "_list_pkgs_from_context", "len", "_cpv_to_version", "refresh_db", "_process_emerge_err"], "class_names": [], "class_method_calls": ["matches.append", "portage.exception", "__context__.pop", "pkg_params.items", "cmd.extend", "ver1.group", "log.warning", "verstr.replace", "conf_flags.remove", "kwargs.pop", "re.M", "changes.update", "re.match", "portage.versions", "target.rfind", "rexp.findall", "datetime.timedelta", "portage.db", "log.debug", "re.compile", "ret.update", "ret.setdefault", "copy.deepcopy", "kwargs.get", "keys.index", "sys.path", "log.error", "portage.dep_getkey", "log.info", "portage.dep", "targets.append", "ver2.group", "des_uses.difference", "re.split", "cmd.append", "des_repo.group", "match.groups", "logging.getLogger", "cur_use.split", "os.path", "portage.root", "salt.utils", "portage.cpv_getkey", "datetime.datetime"]}, "eix.py": {"libraries": ["salt.utils.path"], "function_names": ["__virtual__", "update", "sync"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils"]}, "elasticsearch.py": {"libraries": ["logging", "salt.utils.json"], "function_names": ["alias_absent", "alias_present", "search_template_present", "pipeline_present", "index_present", "pipeline_absent", "search_template_absent", "index_absent", "index_template_absent", "index_template_present"], "function_calls": ["len", "str", "isinstance"], "class_names": [], "class_method_calls": ["salt.utils", "alias.get", "logging.getLogger"]}, "environ.py": {"libraries": ["os", "salt.utils.platform"], "function_names": ["__virtual__", "key_exists", "_norm_key", "setenv"], "function_calls": ["key_exists", "dict", "_norm_key", "isinstance"], "class_names": [], "class_method_calls": ["already_set.append", "environ.items", "os.environ", "current_environ.get", "key.upper", "salt.utils"]}, "eselect.py": {"libraries": [], "function_names": ["__virtual__", "set_"], "function_calls": [], "class_names": [], "class_method_calls": []}, "etcd_mod.py": {"libraries": ["salt.utils.etcd_util"], "function_names": ["wait_set", "_etcd_action", "rm", "__virtual__", "set_", "mod_watch", "wait_rm", "directory"], "function_calls": ["set_", "rm", "_etcd_action"], "class_names": [], "class_method_calls": ["salt.utils", "kwargs.get"]}, "ethtool.py": {"libraries": ["salt.exceptions.CommandExecutionError", "logging"], "function_names": ["ring", "__virtual__", "coalesce", "pause", "offload"], "function_calls": ["str", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "kwargs.items", "__opts__.get", "diff.append", "key.lower", "new.update"]}, "event.py": {"libraries": ["os", "collections.abc.MutableMapping", "salt.utils.asynchronous", "salt.utils.stringutils", "salt.utils.files", "contextlib", "salt.defaults.exitcodes", "errno", "time", "hashlib", "salt.utils.cache", "salt.ext.tornado.ioloop", "fnmatch", "salt.payload", "atexit", "salt.utils.dicttrim", "salt.transport.ipc", "salt.ext.tornado.iostream", "salt.utils.process", "salt.utils.zeromq", "logging", "salt.channel.client", "salt.config", "salt.utils.platform", "datetime", "salt.minion"], "function_names": ["set_event_handler", "__init__", "fire_event_async", "fire_ret_load", "subscribe", "_get_match_func", "_match_tag_endswith", "run", "iter_events", "_handle_signals", "connect_pull", "get_event_block", "close", "fire_running", "_check_pending", "handle_publish", "_filter", "_match_tag_regex", "unpack", "close_pub", "fire_master", "_fire_ret_load_specific_fun", "connect_pub", "_match_tag_find", "fire_event", "_match_tag_fnmatch", "__exit__", "fire_args", "get_master_event", "destroy", "_match_tag_startswith", "get_event_noblock", "__load_uri", "__enter__", "flush_events", "get_event", "_get_event", "tagify", "_subproxy_match", "__load_cache_regex", "unsubscribe", "close_pull", "_flush_event_single", "__del__"], "function_calls": ["any", "super", "sorted", "enumerate", "int", "hash_type", "range", "str", "cb", "get_master_event", "SaltEvent", "MasterEvent", "ValueError", "isinstance", "len", "match_func", "hasattr", "getattr", "get_event", "tagify", "float", "pmatch_func"], "class_names": ["NamespacedEvent", "AsyncEventPublisher", "EventPublisher", "SaltEvent", "LocalClientEvent", "MinionEvent", "MasterEvent", "StateFire", "EventReturn"], "class_method_calls": ["self.pending_events", "self.event_queue", "self.event_return_queue", "log.critical", "atexit.unregister", "self.unpack", "load.update", "parts.append", "self.get_event", "self.print_func", "self.cpush", "salt.transport", "self.close_pull", "logging.DEBUG", "self._get_match_func", "salt.utils", "os.unlink", "self.minion", "self._closing", "log.warning", "self.pulluri", "errno.ENOENT", "self.event_return_queue_max_seconds", "raw.partition", "self.io_loop", "_event.fire_event", "self._subproxy_match", "log.level", "data.get", "self.cache_regex", "self._run_io_loop_sync", "event_tag.find", "log.error", "self.__class__", "self.publisher", "tag.split", "salt.ext", "ret.get", "salt.crypt", "cls.cache_regex", "TAGPARTER.join", "os.path", "self.keep_loop", "self.subscriber", "self.flush_events", "self.connect_pub", "channel.send", "self.cpub", "TAGS.get", "os.makedirs", "self.handle_publish", "atexit.register", "os.chmod", "self.fire_event", "self._filter", "self.__load_cache_regex", "parts.extend", "self._get_event", "self._check_pending", "log.info", "self.connect_pull", "self.pending_tags", "self.close_pub", "salt.config", "load.get", "exc.errno", "os.nice", "self.event", "contextlib.suppress", "self.puller", "time.time", "self.close", "self.raise_errors", "event_tag.endswith", "self.puburi", "salt.payload", "self.destroy", "self.pusher", "ret.items", "log.debug", "log.trace", "self.opts", "self.stop", "event_tag.startswith", "opts.get", "self.__load_uri", "self._fire_ret_load_specific_fun", "self.auth", "fnmatch.fnmatch", "logging.getLogger", "self._flush_event_single", "self.base", "salt.channel", "salt.minion", "datetime.datetime"]}, "extfs.py": {"libraries": ["logging", "salt.utils.platform"], "function_names": ["blocks", "dump", "tune", "__virtual__", "attributes", "mkfs"], "function_calls": ["len", "dump"], "class_names": [], "class_method_calls": ["line.strip", "logging.getLogger", "ret.append", "line.split", "line.replace", "salt.utils", "line.startswith"]}, "firewalld.py": {"libraries": ["salt.utils.path", "logging", "salt.exceptions.CommandExecutionError", "salt.output.nested"], "function_names": ["__ne__", "service", "__hash__", "__init__", "todict", "_parse_forward", "__virtual__", "__eq__", "present", "_present"], "function_calls": ["len", "hash", "set", "_parse_forward", "ForwardingMapping", "list", "_present"], "class_names": ["ForwardingMapping"], "class_method_calls": ["comment.append", "fwd.protocol", "self.srcport", "block_icmp.remove", "other.srcport", "nested.__opts__", "nested.output", "fwd.srcport", "other.destport", "other.destaddr", "other.protocol", "self.destport", "fwd.destport", "log.error", "mapping.split", "self.destaddr", "self.__eq__", "fwd.todict", "logging.getLogger", "fwd.destaddr", "salt.utils", "self.protocol"]}, "freebsd_sysctl.py": {"libraries": ["salt.exceptions.CommandExecutionError", "logging", "os", "salt.utils.files"], "function_names": ["get", "assign", "show", "_formatfor", "__virtual__", "persist"], "function_calls": ["len", "any", "get", "str", "assign", "_formatfor", "CommandExecutionError"], "class_names": [], "class_method_calls": ["line.strip", "out.splitlines", "nlines.append", "logging.getLogger", "new_value.split", "line.split", "value.append", "log.error", "ofile.writelines", "l.startswith", "line.startswith", "os.path", "f.readlines", "salt.utils", "rest.split", "rest.startswith"]}, "freebsd_update.py": {"libraries": ["salt.utils.path", "logging", "salt.exceptions.CommandNotFoundError"], "function_names": ["rollback", "update", "_wrapper", "ids", "__virtual__", "install", "_cmd", "fetch", "upgrade"], "function_calls": ["CommandNotFoundError", "float", "_wrapper", "_cmd", "isinstance"], "class_names": [], "class_method_calls": ["res.items", "logging.getLogger", "params.append", "log.error", "stdout.items", "log.warning", "salt.utils"]}, "freebsdjail.py": {"libraries": ["os", "re", "subprocess", "salt.utils.args", "salt.utils.files", "salt.utils.stringutils"], "function_names": ["stop", "start", "is_enabled", "status", "__virtual__", "restart", "get_enabled", "fstab", "show_config", "sysctl"], "function_calls": ["next", "show_config"], "class_names": [], "class_method_calls": ["jailopt.strip", "line.split", "os.access", "line.partition", "os.R_OK", "line.strip", "sysctl_jail.splitlines", "re.search", "jailopt.split", "subprocess.check_output", "subprocess.call", "value.strip", "services.split", "line.startswith", "found_jails.split", "ret.append", "key.strip", "value.split", "salt.utils", "key.split"]}, "freebsdkmod.py": {"libraries": ["re", "os", "salt.utils.files"], "function_names": ["_new_mods", "_set_persistent_module", "available", "_rm_mods", "remove", "_remove_persistent_module", "_get_persistent_modules", "mod_list", "lsmod", "__virtual__", "load", "is_loaded", "_get_module_name", "check_available"], "function_calls": ["_new_mods", "len", "_get_module_name", "_set_persistent_module", "available", "_rm_mods", "sorted", "_remove_persistent_module", "set", "_get_persistent_modules", "lsmod", "mod_list", "list"], "class_names": [], "class_method_calls": ["line.strip", "_MODULE_RE.format", "ret.append", "pre.add", "_LOAD_MODULE.format", "match.group", "bpath.split", "line.split", "comps.index", "re.search", "os.path", "salt.utils", "post.add", "mods.add"]}, "freebsdpkg.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.utils.data", "re", "salt.utils.functools", "salt.utils.pkg", "logging", "salt.exceptions.MinionError", "copy"], "function_names": ["_rehash", "_get_repo_options", "latest_version", "remove", "version", "refresh_db", "__virtual__", "install", "file_list", "list_pkgs", "file_dict", "_match", "_list_pkgs_from_context"], "function_calls": ["_rehash", "len", "_get_repo_options", "any", "set", "float", "list_pkgs", "file_dict", "CommandExecutionError", "_match", "_list_pkgs_from_context"], "class_names": [], "class_method_calls": ["pkgs.get", "matches.append", "line.split", "__context__.pop", "errors.append", "ambiguous.append", "shell.split", "kwargs.pop", "args.append", "__context__.get", "full_pkg_strings.append", "files.extend", "pkgs_re.findall", "ret.items", "log.debug", "re.compile", "args.extend", "match_pattern.format", "copy.deepcopy", "kwargs.get", "log.error", "line.startswith", "origins.get", "out.splitlines", "logging.getLogger", "pkg.rsplit", "salt.utils"]}, "freebsdports.py": {"libraries": ["os", "salt.utils.path", "salt.exceptions.CommandExecutionError", "salt.utils.data", "re", "logging", "fnmatch", "salt.exceptions.SaltInvocationError", "salt.utils.files"], "function_names": ["showconfig", "list_all", "_normalize", "rmconfig", "config", "update", "search", "_options_dir", "__virtual__", "install", "deinstall", "_check_portname", "_write_options", "_options_file_exists", "_portsnap"], "function_calls": ["list_all", "_normalize", "_portsnap", "list", "next", "rmconfig", "all", "showconfig", "str", "_options_dir", "_check_portname", "CommandExecutionError", "isinstance", "len", "float", "deinstall", "iter", "_write_options", "SaltInvocationError", "_options_file_exists"], "class_names": [], "class_method_calls": ["name.replace", "x.startswith", "__context__.pop", "fnmatch.filter", "sorted_options.sort", "os.makedirs", "opt_tmpl.format", "new.get", "re.match", "opts.items", "conf_ptr.update", "fp_.write", "stripped.endswith", "re.search", "stripped.count", "name.rsplit", "log.error", "new_config.get", "old.get", "cmd.append", "fnmatch.fnmatch", "logging.getLogger", "ret.append", "name.split", "os.path", "port.rsplit", "salt.utils", "name.count"]}, "freebsdservice.py": {"libraries": ["salt.utils.decorators", "os", "salt.utils.path", "re", "logging", "fnmatch", "salt.utils.files", "salt.exceptions.CommandNotFoundError"], "function_names": ["_get_rcvar", "available", "disabled", "get_enabled", "enabled", "get_all", "reload_", "__virtual__", "get_disabled", "stop", "disable", "enable", "_switch", "missing", "start", "_get_jail_path", "status", "restart", "_get_rcscript", "_cmd"], "function_calls": ["_get_rcvar", "len", "bool", "CommandNotFoundError", "_get_jail_path", "available", "sorted", "set", "_switch", "get_enabled", "_cmd", "enabled", "get_all"], "class_names": [], "class_method_calls": ["decorators.memoize", "jails.splitlines", "line.split", "fnmatch.filter", "srv.isupper", "path.rstrip", "nlines.append", "re.search", "line.lstrip", "state.lower", "kwargs.get", "log.error", "rcvar.replace", "j.split", "line.startswith", "logging.getLogger", "ret.append", "line.endswith", "ofile.writelines", "x.split", "os.path", "salt.utils"]}, "freezer.py": {"libraries": ["os", "salt.exceptions.CommandExecutionError", "salt.utils.files.fopen", "salt.utils.json", "salt.utils.args.clean_kwargs", "logging", "salt.utils.dictdiffer"], "function_names": ["_add_missing_repositories", "_remove_extra_repositories", "list_", "restore", "status", "__virtual__", "_remove_extra_packages", "_paths", "freeze", "_states_path", "compare", "_add_missing_packages"], "function_calls": ["_add_missing_repositories", "_remove_extra_repositories", "sorted", "set", "status", "_remove_extra_packages", "fopen", "_paths", "clean_kwargs", "_states_path", "CommandExecutionError", "_add_missing_packages", "zip", "all"], "class_names": [], "class_method_calls": ["json.load", "json.dump", "content.update", "logging.getLogger", "ret.append", "os.listdir", "log.error", "os.path", "log.info", "_tmp_kwargs.update", "ofile.endswith", "os.makedirs", "state.endswith", "salt.utils", "os.remove"]}, "gcp_addon.py": {"libraries": ["oauth2client.service_account", "logging", "googleapiclient.discovery"], "function_names": ["__virtual__", "_get_network", "_get_instance", "route_create"], "function_calls": ["str", "_get_instance", "_get_network"], "class_names": [], "class_method_calls": ["service.networks", "route_create_request.execute", "logging.getLogger", "routes.insert", "service.instances", "oauth2client.service_account", "googleapiclient.discovery", "service.routes"]}, "gem.py": {"libraries": ["salt.utils.versions", "logging", "re"], "function_names": ["installed", "sources_remove", "__virtual__", "removed", "sources_add"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["re.match", "logging.getLogger", "match.group", "re.sub", "log.warning", "salt.utils"]}, "genesis.py": {"libraries": ["os", "salt.utils.path", "salt.utils.validate.path", "uuid", "salt.syspaths", "logging", "pprint", "salt.utils.stringutils", "salt.utils.preseed", "salt.utils.yast", "salt.exceptions.SaltInvocationError", "salt.utils.kickstart", "shlex"], "function_names": ["_populate_cache", "_make_nodes", "_compress", "avail_platforms", "_mkpart", "bootstrap", "__virtual__", "_bootstrap_yum", "pack", "_untar", "_bootstrap_pacman", "unpack", "ldd_deps", "_tar", "mksls", "_bootstrap_deb", "_mkfs"], "function_calls": ["_populate_cache", "_make_nodes", "_compress", "str", "_bootstrap_deb", "_mkpart", "_bootstrap_yum", "_untar", "ldd_deps", "_bootstrap_pacman", "SaltInvocationError", "_tar", "_mkfs", "isinstance"], "class_names": [], "class_method_calls": ["pprint.pformat", "line.split", "os.listdir", "salt.syspaths", "line.strip", "exclude_pkgs.split", "shlex.quote", "log.debug", "pkgs.append", "log.error", "rf.startswith", "start.rstrip", "out.splitlines", "pkgs.remove", "logging.getLogger", "rf.endswith", "ret.append", "os.path", "uuid.uuid4", "salt.utils", "pkgs.split"]}, "gentoo_service.py": {"libraries": ["salt.utils.systemd", "re", "logging", "fnmatch", "salt.utils.odict"], "function_names": ["_list_services", "available", "disabled", "_disable_delta", "get_enabled", "_service_cmd", "enabled", "get_all", "_enable_delta", "reload_", "_enable_disable_cmd", "__virtual__", "get_disabled", "stop", "disable", "enable", "missing", "_get_service_list", "_ret_code", "start", "status", "restart", "zap"], "function_calls": ["len", "_list_services", "bool", "_enable_delta", "available", "sorted", "set", "_disable_delta", "_enable_disable_cmd", "_get_service_list", "dict", "get_enabled", "_service_cmd", "_ret_code", "get_disabled", "get_all", "isinstance"], "class_names": [], "class_method_calls": ["enabled_services.update", "logging.getLogger", "odict.OrderedDict", "l.strip", "line.split", "fnmatch.filter", "disabled_services.update", "re.search", "salt.utils", "log.debug", "commands.append"]}, "gentoolkitmod.py": {"libraries": ["os", "gentoolkit.eclean.clean", "gentoolkit.eclean.exclude", "gentoolkit.eclean.cli", "gentoolkit.eclean.search"], "function_names": ["eclean_dist", "_eclean_progress_controller", "_pretty_size", "_glsa_list_process_output", "revdep_rebuild", "__virtual__", "_parse_exclude", "glsa_check_list", "eclean_pkg"], "function_calls": ["_pretty_size", "round", "dict", "_parse_exclude", "list", "_glsa_list_process_output", "isinstance"], "class_names": [], "class_method_calls": ["cves.split", "units.pop", "search.pkgdir", "cleaner.clean_dist", "line.split", "excludemod.parseExcludeFile", "search.findPackages", "desc.rsplit", "clean.CleanUp", "cli.parseTime", "os.path", "cli.parseSize", "cleaner.clean_pkgs", "search.DistfilesSearch", "engine.findDistfiles", "excludemod.ParseExcludeFileException"]}, "git.py": {"libraries": ["errno", "salt.utils.versions.Version", "os", "salt.exceptions.CommandExecutionError", "re", "logging", "salt.utils.url", "salt.utils.versions", "salt.utils.args", "salt.utils.files", "string"], "function_names": ["_branch_changes", "_short_sha", "_clone_changes", "_uptodate", "_neutral_test", "_revs_equal", "__virtual__", "_need_branch_change", "detached", "_already_cloned", "cloned", "_strip_exc", "latest", "_fail", "_get_branch_opts", "_format_comments", "_not_fast_forward", "_get_local_rev_and_branch", "config_unset", "_failed_fetch", "config_set", "present", "_failed_submodule_update"], "function_calls": ["_branch_changes", "_short_sha", "Version", "_uptodate", "_neutral_test", "_revs_equal", "set", "_need_branch_change", "all", "_already_cloned", "_strip_exc", "str", "_failed_submodule_update", "_fail", "_get_branch_opts", "isinstance", "_format_comments", "len", "_not_fast_forward", "bool", "_get_local_rev_and_branch", "_failed_fetch", "_clone_changes"], "class_names": [], "class_method_calls": ["os.unlink", "os.listdir", "rev.lower", "x.replace", "exc.strerror", "base_rev.startswith", "removal_errors.items", "log.warning", "refname.startswith", "rev1.startswith", "string.hexdigits", "kwargs.pop", "pre_matches.items", "msg.replace", "new_multivar.append", "ret.extend", "refname.partition", "errno.ENOENT", "clone_opts.extend", "comments.append", "actions.append", "log.debug", "ret.setdefault", "post_matches.items", "remote_loc.capitalize", "log.error", "log.exception", "log.info", "re.sub", "failed.append", "logging.getLogger", "ret.append", "exc.errno", "multivar.split", "os.path", "name.lstrip", "all_remote_refs.items", "salt.utils"]}, "github.py": {"libraries": ["salt.utils.http", "logging", "salt.utils.json"], "function_names": ["get_user_pubkeys"], "function_calls": ["str", "next", "iter", "isinstance"], "class_names": [], "class_method_calls": ["user.keys", "salt.utils", "logging.getLogger"]}, "glanceng.py": {"libraries": ["shade"], "function_names": ["image_search", "setup_clouds", "image_get", "image_delete", "get_openstack_cloud", "_clean_kwargs", "__virtual__", "image_list", "get_operator_cloud", "compare_changes", "update_image_properties", "image_create"], "function_calls": ["get_operator_cloud", "get_openstack_cloud", "_clean_kwargs"], "class_names": [], "class_method_calls": ["cloud.create_image", "cloud.delete_image", "obj.items", "cloud.update_image_properties", "shade.openstack_cloud", "cloud.get_image", "cloud.list_images", "cloud.search_images", "shade.operator_cloud", "kwargs.pop"]}, "glassfish.py": {"libraries": ["salt.exceptions.CommandExecutionError", "requests", "salt.utils.json"], "function_names": ["_is_updated", "connection_factory_absent", "destination_absent", "_do_element_absent", "_json_to_unicode", "jdbc_datasource_present", "__virtual__", "system_properties_present", "destination_present", "system_properties_absent", "_do_element_present", "jdbc_datasource_absent", "connection_factory_present"], "function_calls": ["any", "_is_updated", "str", "_do_element_absent", "_json_to_unicode", "_do_element_present", "isinstance"], "class_names": [], "class_method_calls": ["data.update", "data.items", "salt.utils", "requests.ConnectionError", "old_conf.items"]}, "glusterfs.py": {"libraries": ["logging", "salt.utils.cloud", "salt.exceptions.SaltCloudException", "salt.utils.network"], "function_names": ["volume_present", "max_op_version", "op_version", "add_volume_bricks", "__virtual__", "started", "peered"], "function_calls": ["set", "any", "int"], "class_names": [], "class_method_calls": ["suc.check_name", "this_ips.intersection", "logging.getLogger", "peers.values", "newpeers.values", "this_ips.update", "salt.utils"]}, "gnomedesktop.py": {"libraries": ["logging", "re"], "function_names": ["_do", "desktop_interface", "wm_preferences", "_check_current_value", "desktop_lockdown"], "function_calls": ["_do", "str", "locals", "_check_current_value", "isinstance"], "class_names": [], "class_method_calls": ["re.sub", "messages.append", "logging.getLogger", "gnome_kwargs.update"]}, "google_chat.py": {"libraries": ["json"], "function_names": ["__virtual__", "send_message"], "function_calls": [], "class_names": [], "class_method_calls": ["json.dumps", "result.get"]}, "gpg.py": {"libraries": ["logging"], "function_names": ["absent", "present"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["current_keys.append", "logging.getLogger"]}, "grafana4.py": {"libraries": ["requests"], "function_names": ["_get_headers", "create_org", "create_org_user", "get_datasource", "get_dashboard", "get_orgs", "delete_datasource", "switch_org", "get_user_orgs", "create_datasource", "__virtual__", "create_update_dashboard", "delete_org", "get_user_data", "update_org", "delete_user_org", "update_user_password", "update_user", "update_org_user", "update_org_prefs", "_get_auth", "create_user", "delete_user", "get_org_users", "get_user", "update_user_permissions", "get_org", "update_org_address", "get_datasources", "update_datasource", "delete_dashboard", "get_org_prefs", "delete_org_user", "get_org_address", "get_users"], "function_calls": ["get_org", "get_datasources", "_get_headers", "_get_auth", "get_users", "isinstance", "switch_org"], "class_names": [], "class_method_calls": ["requests.get", "requests.auth", "profile.get", "response.status_code", "data.get", "requests.post", "response.raise_for_status", "response.json", "requests.put", "requests.delete", "requests.patch"]}, "groupadd.py": {"libraries": ["grp", "os", "functools", "salt.utils.path", "salt.exceptions.CommandExecutionError", "logging", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["chgid", "delete", "deluser", "_chattrib", "adduser", "info", "__virtual__", "_getgrnam", "_getgrall", "members", "_format_info", "add", "_which", "getent"], "function_calls": ["len", "_which", "int", "_chattrib", "str", "info", "KeyError", "getgrnam", "CommandExecutionError", "_format_info", "getgrall"], "class_names": [], "class_method_calls": ["data.gr_mem", "data.gr_gid", "cmd.extend", "__grains__.get", "line.strip", "data.gr_name", "log.debug", "out.split", "log.error", "cmd.append", "logging.getLogger", "data.gr_passwd", "grp.getgrnam", "ret.append", "members_list.split", "grp.struct_group", "os.path", "salt.utils", "grp.getgrall", "functools.partial"]}, "grub_legacy.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.utils.decorators", "os", "salt.utils.files"], "function_names": ["_parse_line", "version", "__virtual__", "_detect_conf", "conf"], "function_calls": ["_detect_conf", "_parse_line", "CommandExecutionError"], "class_names": [], "class_method_calls": ["decorators.memoize", "stanzas.append", "line.strip", "line.split", "stanza.strip", "line.endswith", "msg.format", "salt.utils", "os.path", "line.startswith", "parts.pop"]}, "guestfs.py": {"libraries": ["time", "hashlib", "os", "salt.utils.path", "salt.config.DEFAULT_HASH_TYPE", "logging", "tempfile"], "function_names": ["__virtual__", "umount", "mount"], "function_calls": ["len", "getattr", "hash_type"], "class_names": [], "class_method_calls": ["time.sleep", "logging.getLogger", "os.sep", "os.listdir", "__opts__.get", "location.lstrip", "os.urandom", "os.path", "log.info", "os.makedirs", "salt.utils", "log.debug", "tempfile.gettempdir"]}, "hadoop.py": {"libraries": ["salt.utils.path"], "function_names": ["dfs_present", "dfs_absent", "namenode_format", "dfsadmin_report", "_hadoop_cmd", "version", "dfs", "__virtual__"], "function_calls": ["_hadoop_cmd"], "class_names": [], "class_method_calls": ["salt.utils"]}, "haproxyconn.py": {"libraries": ["time", "os", "logging", "haproxy.conn", "haproxy.cmds", "stat"], "function_names": ["_get_conn", "enable_server", "show_frontends", "get_weight", "list_frontends", "set_weight", "list_servers", "show_backends", "__virtual__", "get_sessions", "list_backends", "get_backend", "wait_state", "set_state", "disable_server", "num"], "function_calls": ["_get_conn", "show_frontends", "get_weight", "getStats", "int", "setServerState", "list_servers", "show_backends", "list_backends", "get_backend", "num"], "class_names": ["setServerState", "getStats"], "class_method_calls": ["result.split", "stat.S_ISSOCK", "logging.getLogger", "time.time", "data.replace", "line.split", "os.stat", "active_field.lower", "ha_conn.sendCmd", "os.path", "haproxy.conn", "haproxy.cmds", "line.startswith", "value.lower"]}, "hashutil.py": {"libraries": ["hashlib", "salt.exceptions", "hmac", "salt.utils.hashutils", "base64", "salt.utils.stringutils", "salt.utils.files", "io"], "function_names": ["sha512_digest", "sha256_digest", "base64_decodestring", "digest_file", "github_signature", "base64_b64decode", "hmac_compute", "md5_digest", "base64_b64encode", "hmac_signature", "base64_encodestring", "digest", "base64_decodefile", "base64_encodefile"], "function_calls": ["hash_func", "getattr", "isinstance"], "class_names": [], "class_method_calls": ["encoded_f.read", "base64.encode", "io.BytesIO", "encoded_f.seek", "salt.exceptions", "challenge_hmac.split", "f.read", "hmac_hash.hexdigest", "hashing_funcs.get", "hmac.new", "salt.utils", "base64.decode", "io.StringIO", "hmac.compare_digest"]}, "heat.py": {"libraries": ["salt.utils.yaml", "salt.exceptions", "salt.utils.json", "logging", "salt.utils.versions", "oslo_serialization.jsonutils", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["__virtual__", "_parse_template", "deployed", "absent"], "function_calls": ["str", "_parse_template", "ValueError"], "class_names": [], "class_method_calls": ["logging.getLogger", "tmpl_str.startswith", "jsonutils.dumps", "salt.exceptions", "logging.DEBUG", "tmpl_str.strip", "salt.utils", "log.debug", "tfp_.read", "logging.basicConfig"]}, "helm.py": {"libraries": ["salt.exceptions.CommandExecutionError", "logging"], "function_names": ["release_present", "repo_updated", "release_absent", "repo_managed"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["release_cur_status.pop", "result.update", "__opts__.get", "logging.getLogger"]}, "hg.py": {"libraries": ["os", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "shutil", "logging", "salt.states.git._neutral_test", "salt.states.git._fail"], "function_names": ["_update_repo", "latest", "_clone_repo", "_handle_existing", "__virtual__"], "function_calls": ["_update_repo", "_neutral_test", "_clone_repo", "_handle_existing", "_fail"], "class_names": [], "class_method_calls": ["logging.getLogger", "shutil.rmtree", "os.listdir", "os.path", "log.info", "salt.utils", "log.debug"]}, "highstate_doc.py": {"libraries": [], "function_names": ["note"], "function_calls": ["len"], "class_names": [], "class_method_calls": []}, "hosts.py": {"libraries": ["errno", "os", "logging", "salt.utils.stringutils", "salt.utils.files", "salt.utils.odict"], "function_names": ["get_alias", "get_ip", "_list_hosts", "list_hosts", "_get_or_create_hostfile", "rm_host", "has_pair", "set_comment", "add_host", "_write_hosts", "set_host", "__get_hosts_filename"], "function_calls": ["_list_hosts", "_get_or_create_hostfile", "str", "set", "has_pair", "dict", "isinstance", "_write_hosts", "enumerate", "list", "__get_hosts_filename"], "class_names": [], "class_method_calls": ["line.split", "__context__.pop", "lines.append", "comps.pop", "host_info.split", "line.strip", "h.insert", "fp_.readlines", "errno.ENOENT", "hosts.setdefault", "newline.strip", "ip.startswith", "alias.strip", "ret.setdefault", "hosts.items", "ofile.write", "line.startswith", "os.linesep", "logging.getLogger", "tmpline.split", "odict.OrderedDict", "line.index", "ofile.writelines", "os.path", "host.startswith", "tmpline.startswith", "salt.utils"]}, "http.py": {"libraries": ["os", "salt.ext.tornado.httpclient.HTTPClient", "salt.loader", "ssl.match_hostname", "http.cookiejar", "salt.syspaths", "salt.utils.stringutils", "salt.utils.files", "ssl", "salt.version", "salt.ext.tornado.simple_httpclient", "salt.utils.msgpack", "salt.utils.data", "salt.ext.ssl_match_hostname.match_hostname", "ssl.CertificateError", "salt.utils.args", "backports.ssl_match_hostname.match_hostname", "urllib.request", "certifi", "io", "socket", "salt.utils.yaml", "re", "salt.utils.xmlutil", "salt.utils.json", "salt.utils.network", "logging", "salt.utils.url", "pprint", "salt.ext.tornado.httputil", "salt.ext.ssl_match_hostname.CertificateError", "urllib.error", "urllib.parse", "requests", "salt.template.compile_template", "zlib", "salt.config", "gzip", "salt.utils.platform", "salt.utils.decorators.jinja.jinja_filter", "backports.ssl_match_hostname.CertificateError", "http.client", "email.message", "xml.etree.ElementTree"], "function_names": ["_decode_result_text", "query", "sanitize_url", "_sanitize_url_components", "_decode_result", "_render", "__decompressContent", "session", "get_ca_bundle", "update_ca_bundle", "parse_cookie_header"], "function_calls": ["dict", "streaming_callback", "list", "HTTPClient", "_sanitize_url_components", "int", "jinja_filter", "_decode_result", "__decompressContent", "_decode_result_text", "str", "_render", "get_ca_bundle", "parse_cookie_header", "ValueError", "len", "sanitize_url", "query", "isinstance", "hasattr", "compile_template", "header_callback", "match_hostname"], "class_names": [], "class_method_calls": ["logging.WARNING", "ssl.wrap_socket", "opener.open", "ret.read", "zlib.MAX_WBITS", "request.get_host", "result.raise_for_status", "item.strip", "result.read", "sess.cookies", "session.verify", "urllib.request", "header_tpl.splitlines", "result.url", "socket.AF_INET", "result.status_code", "log_url.rstrip", "xml.to_dict", "urllib.error", "header_dict.update", "socket.herror", "comp_list.remove", "f.read", "salt.utils", "tfp.write", "tof.write", "pprint.pformat", "salt.loader", "sess_cookies.save", "exc.response", "log.warning", "sess.verify", "re.match", "socket.socket", "result.headers", "sess.auth", "socket.gaierror", "file_roots.get", "result_headers.get", "log.error", "fh_.read", "salt.ext", "data.copy", "handlers.append", "url_tmp.split", "request.get_method", "item.split", "exc.code", "sock.connect", "socket.SOCK_STREAM", "os.path", "ET.fromstring", "sess.request", "url.startswith", "email.message", "result.content", "io.StringIO", "io.BytesIO", "result.body", "session.headers", "requests.__version__", "request.add_header", "requests.Session", "sockwrap.getpeercert", "hof.write", "logging.TRACE", "dof.write", "socket.timeout", "msg.add_header", "requests_log.setLevel", "req_kwargs.update", "msg.get_content_charset", "urllib.parse", "ret.append", "morsels.append", "session.auth", "requests.session", "msg.get_content_type", "salt.config", "result.cookies", "result.encoding", "log.isEnabledFor", "header.split", "result.info", "http.cookiejar", "salt.syspaths", "gzip.GzipFile", "ssl.CERT_REQUIRED", "salt.version", "get_ca_bundle.__return_value__", "sess_cookies.set_cookie", "download_client.fetch", "hostname.split", "pair.split", "log.debug", "sess.headers", "sess_cookies.load", "log.trace", "opts.get", "cookie.pop", "morsel.split", "client_argspec.args", "ssl.SSLContext", "cookies.append", "fcf.read", "logging.getLogger", "zlib.decompress", "result.code", "result_text.decode", "sess.proxies", "http.client", "certifi.where"]}, "icinga2.py": {"libraries": ["salt.utils.path", "logging", "re", "salt.modules.cmdmod"], "function_names": ["get_certs_path"], "function_calls": ["int"], "class_names": [], "class_method_calls": ["logging.getLogger", "version.split", "re.search", "salt.utils", "salt.modules"]}, "idem.py": {"libraries": ["logging", "sys", "pop.hub"], "function_names": ["__virtual__", "hub"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["logging.getLogger", "sys.version_info", "pop.hub", "log.debug", "hub.config", "hub.pop"]}, "ifttt.py": {"libraries": [], "function_names": ["__virtual__", "trigger_event"], "function_calls": [], "class_names": [], "class_method_calls": []}, "ilo.py": {"libraries": ["os", "salt.utils.path", "logging", "tempfile", "xml.etree.ElementTree"], "function_names": ["configure_snmp", "set_https_port", "network", "list_users_info", "disable_ssh", "__virtual__", "set_ssh_key", "list_users", "__execute_cmd", "disable_dhcp", "configure_network", "create_user", "delete_user", "change_username", "get_user", "global_settings", "set_http_port", "enable_dhcp", "change_password", "enable_ssh", "set_ssh_port", "delete_ssh_key"], "function_calls": ["str", "global_settings", "network", "__execute_cmd"], "class_names": [], "class_method_calls": ["os.getpid", "name.replace", "i.tag", "i.upper", "logging.getLogger", "i.startswith", "fh.write", "i.attrib", "os.path", "tempfile.NamedTemporaryFile", "ET.fromstring", "salt.utils", "i.split", "fh.name", "os.mkdir"]}, "incron.py": {"libraries": ["logging"], "function_names": ["present", "absent", "_check_cron", "_get_cron_info"], "function_calls": ["_check_cron", "any"], "class_names": [], "class_method_calls": ["logging.getLogger", "cmd.endswith", "__grains__.get", "mask.split", "cron_mask.sort", "arg_mask.sort"]}, "influxdb08mod.py": {"libraries": ["logging", "influxdb.influxdb08"], "function_names": ["query", "db_remove", "user_list", "_client", "user_remove", "user_create", "user_exists", "__virtual__", "retention_policy_add", "retention_policy_alter", "db_exists", "db_create", "retention_policy_exists", "retention_policy_get", "login_test", "db_list", "user_chpass"], "function_calls": ["user_list", "_client", "user_exists", "db_exists", "retention_policy_get", "db_list", "isinstance"], "class_names": [], "class_method_calls": ["client.create_retention_policy", "client.get_list_database", "client.get_list_users", "log.warning", "influxdb.influxdb08", "user.get", "client.create_database", "client.switch_database", "e.code", "client.add_cluster_admin", "client.delete_database", "client.update_cluster_admin_password", "client.add_database_user", "log.info", "client.delete_cluster_admin", "client.get_list_retention_policies", "client.alter_retention_policy", "logging.getLogger", "client.query", "client.delete_database_user", "client.get_list_cluster_admins", "client.update_database_user_password"]}, "influxdbmod.py": {"libraries": ["influxdb", "salt.state.STATE_INTERNAL_KEYWORDS", "salt.utils.json", "logging", "collections", "collections.abc.Sequence"], "function_names": ["get_continuous_query", "set_user_password", "retention_policy_exists", "revoke_privilege", "list_privileges", "create_db", "remove_user", "create_continuous_query", "_pull_query_results", "__virtual__", "db_exists", "drop_continuous_query", "get_retention_policy", "user_info", "list_users", "continuous_query_exists", "drop_retention_policy", "_client", "list_dbs", "grant_admin_privileges", "create_user", "alter_retention_policy", "grant_privilege", "query", "create_retention_policy", "user_exists", "revoke_admin_privileges", "drop_db"], "function_calls": ["list_users", "next", "_client", "get_continuous_query", "_pull_query_results", "sorted", "user_exists", "list_dbs", "db_exists", "dict", "get_retention_policy", "user_info", "isinstance"], "class_names": [], "class_method_calls": ["client.create_user", "client.grant_admin_privileges", "resultset.items", "client.create_retention_policy", "full_query.format", "client.get_list_database", "client.get_list_users", "collections.defaultdict", "client.revoke_admin_privileges", "p.get", "user.get", "client.create_database", "client.revoke_privilege", "client.set_user_password", "cq.get", "client.drop_database", "client.drop_user", "influxdb.InfluxDBClient", "client.get_list_privileges", "log.info", "_results.items", "client.get_list_retention_policies", "client.drop_retention_policy", "client.alter_retention_policy", "logging.getLogger", "client.query", "client.grant_privilege", "salt.utils"]}, "infoblox.py": {"libraries": ["time", "libinfoblox"], "function_names": ["create_cname", "get_host_advanced", "delete_a", "get_host", "delete_host", "__virtual__", "delete_cname", "get_a", "create_host", "update_host", "get_ipv4_range", "get_host_domainname", "get_host_mac", "get_host_ipv4", "delete_ipv4_range", "create_ipv4_range", "create_a", "get_object", "get_host_ipv6addr_info", "create_object", "get_host_hostname", "delete_object", "is_ipaddr_in_ipfunc_range", "get_cname", "_get_infoblox", "get_host_ipv4addr_info", "diff_objects", "get_network", "update_cname", "_get_config", "update_object"], "function_calls": ["len", "get_ipv4_range", "Exception", "create_object", "get_host", "get_host_domainname", "delete_object", "int", "get_cname", "_get_infoblox", "str", "set", "get_a", "_get_config", "get_object", "update_object", "globals"], "class_names": [], "class_method_calls": ["d.lower", "api_opts.keys", "time.time", "libinfoblox.Session", "infoblox.update_object", "infoblox.get_host", "infoblox.delete_host", "libinfoblox.diff_obj", "infoblox.delete_object", "infoblox.get_network", "infoblox.create_cname", "name.rsplit", "name.endswith", "infoblox.get_cname", "infoblox.get_host_advanced", "config.keys", "name.find", "infoblox.get_host_ipv4addr_object", "libinfoblox.is_ipaddr_in_ipfunc_range", "infoblox.get_host_ipv6addr_object", "ret.append", "infoblox.get_range", "name.split", "infoblox.get_object", "config.update", "infoblox.create_object", "l.append", "name.count", "name.lower"]}, "ini_manage.py": {"libraries": ["salt.utils.odict.OrderedDict"], "function_names": ["sections_present", "options_absent", "__virtual__", "sections_absent", "options_present"], "function_calls": ["str", "set", "isinstance"], "class_names": [], "class_method_calls": ["section_body.keys", "changes.update", "cur_ini.get", "original_sections.update", "original_sections.get", "cur_section.get", "changes.items", "section_to_update.update", "cur_ini.items", "original.keys", "options.update", "sections.items", "original_top_level_opts.update"]}, "collector.py": {"libraries": ["os", "salt.modules.inspectlib.kiwiproc", "salt.utils.crypt", "salt.utils.fsutils", "kiwi", "salt.utils.stringutils", "salt.utils.files", "salt.exceptions.CommandExecutionError", "salt.modules.inspectlib.entities.AllowedDir", "salt.modules.inspectlib.EnvLoader", "salt.modules.inspectlib.entities.PackageCfgFile", "salt.modules.inspectlib.exceptions.InspectorSnapshotException", "logging", "salt.modules.inspectlib.entities.PayloadFile", "salt.grains.core", "salt.utils.path", "salt.modules.inspectlib.entities.Package", "salt.modules.inspectlib.entities.IgnoredDir", "salt.config.minion_config", "sys", "subprocess"], "function_names": ["__init__", "export", "_get_all_files", "build", "create_snapshot", "_get_changed_cfg_pkgs", "_syscall", "snapshot", "__get_cfg_pkgs_rpm", "request_snapshot", "is_alive", "__get_managed_files_rpm", "__get_cfg_pkgs_dpkg", "_get_cfg_pkgs", "reuse_snapshot", "_get_unmanaged_files", "main", "__get_managed_files_dpkg", "_save_cfg_packages", "_init_env", "_scan_payload", "_prepare_full_scan", "_save_payload", "_get_managed_files"], "function_calls": ["minion_config", "sorted", "PayloadFile", "dict", "list", "Inspector", "int", "set", "AllowedDir", "is_alive", "str", "IgnoredDir", "CommandExecutionError", "main", "len", "Package", "InspectorSnapshotException", "print", "PackageCfgFile"], "class_names": ["Inspector"], "class_method_calls": ["stats.st_mode", "sys.stderr", "self._get_cfg_pkgs", "pkg_name.strip", "self.IGNORE_MOUNTS", "stats.st_ctime", "data.pop", "self._syscall", "allowed_dir.path", "self._prepare_full_scan", "self._save_cfg_packages", "os.environ", "sys.exit", "kwargs.get", "ignored_all.append", "stats.st_atime", "self.__get_managed_files_rpm", "self._get_managed_files", "self._init_env", "stats.st_size", "line.startswith", "allowed.append", "os.setsid", "cfg.pkgid", "self._get_unmanaged_files", "os.umask", "subprocess.run", "dir_obj.path", "salt.utils", "mounts.items", "os.unlink", "line.split", "pkg_configs.append", "subprocess.Popen", "os.kill", "ignored.append", "cfgs.append", "os.fork", "files.extend", "payload.id", "self._get_all_files", "log.error", "payload.uid", "self._get_changed_cfg_pkgs", "payload.mtime", "payload.mode", "payload.path", "stats.st_mtime", "kiwiproc.KiwiExporter", "self.__get_cfg_pkgs_dpkg", "ignored_fs.add", "files.append", "obj.startswith", "os.path", "subprocess.DEVNULL", "ignored_dir.path", "self.dbfile", "resource.strip", "self.db", "self.__get_managed_files_dpkg", "entry.startswith", "subprocess.PIPE", "payload.atime", "stats.st_uid", "line.strip", "files.add", "links.extend", "payload.p_type", "fp_.write", "pkg_cfg_item.strip", "self.MODE", "data.items", "os.stat", "cfg.path", "dirs.add", "line.replace", "self.IGNORE_PATHS", "self._scan_payload", "subprocess.STDOUT", "self.IGNORE_FS_TYPES", "self.pidfile", "fp_.read", "payload.gid", "sys.argv", "os.listdir", "all_files.extend", "os.access", "g_core.__opts__", "payload.ctime", "os.R_OK", "all_dirs.extend", "self.grains_core", "payload.p_size", "EnvLoader.PID_FILE", "self.DEFAULT_MINION_CONFIG_PATH", "os.W_OK", "line.find", "out.split", "self.__get_cfg_pkgs_rpm", "all_links.extend", "dirs.append", "EnvLoader.__init__", "pkg.name", "stats.st_gid", "links.append", "links.add", "logging.getLogger", "os.linesep", "pkg.id", "cfg.id", "dirs.extend", "kiwiproc.__salt__", "self._save_payload"]}, "dbhandle.py": {"libraries": ["salt.modules.inspectlib.fsdb.CsvDB", "salt.modules.inspectlib.entities.AllowedDir", "salt.modules.inspectlib.entities.Package", "salt.modules.inspectlib.entities.IgnoredDir", "salt.modules.inspectlib.entities.PayloadFile", "salt.modules.inspectlib.entities.PackageCfgFile"], "function_names": ["close", "__init__", "__getattr__", "flush", "purge", "_run_init_queries", "__new__", "open"], "function_calls": ["getattr", "super", "obj", "CsvDB", "list"], "class_names": ["DBHandle", "DBHandleBase"], "class_method_calls": ["cls.__instance", "self._run_init_queries", "self._db", "DBHandleBase.__init__", "self.init_queries", "self._path"]}, "entities.py": {"libraries": ["salt.modules.inspectlib.fsdb.CsvDBEntity"], "function_names": ["__init__"], "function_calls": [], "class_names": ["Package", "AllowedDir", "IgnoredDir", "PayloadFile", "PackageCfgFile"], "class_method_calls": ["self.ctime", "self.mtime", "self.id", "self.path", "self.p_size", "self.mode", "self.uid", "self.gid", "self.name", "self.p_type", "self.pkgid", "self.atime"]}, "fsdb.py": {"libraries": ["os", "re", "csv", "gzip", "shutil", "salt.utils.odict.OrderedDict", "datetime"], "function_names": ["delete", "__init__", "is_closed", "create_table_from_object", "list", "open", "close", "update", "flush", "_to_type", "_prepare", "_label", "get_type", "_load_table", "store", "__criteria", "list_tables", "_serialize", "get", "purge", "new", "_validate_object"], "function_calls": ["OrderedDict", "Exception", "next", "getattr", "int", "obj", "sorted", "str", "type", "float", "reversed", "tuple", "dict", "zip", "get_type", "setattr", "list"], "class_names": ["CsvDB", "CsvDBEntity"], "class_method_calls": ["os.unlink", "os.listdir", "self._tables", "obj.__class__", "t_attr.split", "elm.split", "obj.__dict__", "self.list", "os.makedirs", "self.flush", "self._validate_object", "self._opened", "self.get", "self._label", "shutil.rmtree", "self.db_path", "csv.writer", "re.search", "self.__criteria", "obj._TABLE", "self.list_tables", "objects.append", "gzip.open", "self.store", "csv.reader", "self._to_type", "self.is_closed", "self._prepare", "self.path", "obj._serialize", "self.new", "os.path", "self.create_table_from_object", "self._load_table", "datetime.datetime", "databases.append"]}, "kiwiproc.py": {"libraries": ["grp", "pwd", "os", "socket", "lxml.etree", "salt.modules.inspectlib.exceptions.InspectorKiwiProcessorException", "salt.utils.files", "xml.dom.minidom", "platform", "xml.etree.ElementTree"], "function_names": ["_set_users", "_set_description", "_get_package_manager", "__init__", "export", "_set_repositories", "_create_doc", "load", "_set_packages", "_get_user_groups", "_set_preferences"], "function_calls": ["InspectorKiwiProcessorException", "str", "sorted", "type", "setattr"], "class_names": ["KiwiExporter"], "class_method_calls": ["user_node.set", "self._set_description", "descr.items", "self.name", "source.set", "self.format", "disk_id.startswith", "self._set_preferences", "self._set_packages", "line.strip", "self._get_package_manager", "self._set_users", "pacman.text", "self._create_doc", "rfh.read", "specs.text", "self._get_user_groups", "repo_data.get", "ptn_data.get", "minidom.parseString", "contact.text", "author.text", "grp.getgrgid", "pwd.getpwnam", "etree.tostring", "p_version.text", "self.__grains__", "self._set_repositories", "sh_line.split", "users_node.set", "root.set", "etree.SubElement", "etree.Element", "users_groups.extend", "pkg.set", "socket.getfqdn", "sh_line.strip", "p_type.set", "repo.set", "platform.node", "os.linesep", "ps_line.strip", "g.gr_mem", "ptn.set", "shadow.items", "g.gr_name", "disk_data.get", "salt.utils", "grp.getgrall", "self._data"]}, "query.py": {"libraries": ["time", "salt.modules.inspectlib.exceptions.SIException", "os", "salt.utils.fsutils", "salt.modules.inspectlib.entities.Package", "salt.utils.network", "logging", "salt.modules.inspectlib.exceptions.InspectorQueryException", "salt.utils.files", "salt.modules.inspectlib.EnvLoader", "salt.modules.inspectlib.entities.PayloadFile", "salt.modules.inspectlib.entities.PackageCfgFile"], "function_names": ["__init__", "_changes", "_get_external_accounts", "_identity", "_get_disk_size", "_get_fs", "tfmt", "_get_cpu", "_payload", "_software", "_configuration", "_services", "_all", "__call__", "_get_mounts", "_get_local_users", "_size_format", "_system", "_get_mem", "_get_local_groups", "_get_os", "_id_resolv", "_get_network", "_grain"], "function_calls": ["len", "Exception", "InspectorQueryException", "SIException", "getattr", "oct", "int", "SysInfo", "float", "round", "dict", "repr", "tfmt", "list", "_size_format"], "class_names": ["Query", "SysInfo"], "class_method_calls": ["self._services", "self._system", "sysinfo._get_mem", "sysinfo._get_fs", "line.split", "pld_data.ctime", "self._id_resolv", "__grains__.get", "self.db", "salt.utils", "elm.split", "elm.strip", "meta.get", "size_fmt.lower", "pld_data.mtime", "self._grain", "self._get_external_accounts", "pld_files.append", "pld_data.gid", "self._payload", "line.strip", "password.startswith", "systype.lower", "self._get_local_users", "self._software", "dev_data.get", "self.SCOPES", "incl_type.append", "pkg_cfg.path", "time.gmtime", "pld_data.uid", "configs.append", "kwargs.get", "value.strip", "sysinfo._get_network", "descr.startswith", "log.error", "self._get_local_groups", "descr.strip", "pld_data.p_size", "EnvLoader.__init__", "sysinfo._get_mounts", "self._configuration", "pld_data.mode", "time.strftime", "self._get_disk_size", "pkg.name", "pld_data.atime", "pld_data.path", "sysinfo._get_os", "fmt.lower", "os.linesep", "logging.getLogger", "pkg.id", "status.get", "self.scope", "dev.pop", "sysinfo._get_cpu", "self.local_identity", "users.split"]}, "inspector.py": {"libraries": ["os", "importlib", "salt.utils.fsutils", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "salt.exceptions.get_error_message", "logging", "getpass", "salt.modules.inspectlib.exceptions.InspectorQueryException", "salt.modules.inspectlib.exceptions.InspectorKiwiProcessorException", "salt.modules.inspectlib.exceptions.InspectorSnapshotException"], "function_names": ["_", "query", "delete", "export", "__virtual__", "build", "inspect", "snapshots"], "function_calls": ["_", "Exception", "str", "dict", "CommandExecutionError", "_get_error_message"], "class_names": [], "class_method_calls": ["query.Query", "getpass.getuser", "mod.__salt__", "inspector.db", "logging.getLogger", "kwargs.get", "log.error", "salt.utils", "os.path", "importlib.import_module", "collector.Inspector", "mod.__grains__", "mod.__pillar__"]}, "introspect.py": {"libraries": ["os"], "function_names": ["service_highstate", "enabled_service_owners", "running_service_owners"], "function_calls": ["next", "running_service_owners", "enabled_service_owners", "iter", "isinstance"], "class_names": [], "class_method_calls": ["item.keys", "pkg.values", "os.access", "os.X_OK", "path.startswith"]}, "iosconfig.py": {"libraries": ["salt.utils.dictupdate", "difflib", "salt.utils.odict.OrderedDict", "salt.utils.dictdiffer", "salt.exceptions.SaltException"], "function_names": ["diff_tree", "merge_tree", "clean", "_parse_text_config", "merge_diff", "tree", "diff_text", "_print_config_text", "_get_diff_text", "_attach_data_to_path", "_attach_data_to_path_tags", "merge_text"], "function_calls": ["len", "OrderedDict", "merge_tree", "SaltException", "_attach_data_to_path", "_parse_text_config", "tree", "_print_config_text", "_get_diff_text", "clean", "_attach_data_to_path_tags", "merge_text"], "class_names": [], "class_method_calls": ["line.strip", "path.pop", "config_lines.pop", "config_lines.insert", "new.splitlines", "x.replace", "line.lstrip", "config.splitlines", "salt.utils", "tree.items", "old.splitlines", "difflib.unified_diff"]}, "ipmi.py": {"libraries": ["pyghmi.ipmi.command"], "function_names": ["boot_device", "user_present", "user_absent", "__virtual__", "power"], "function_calls": ["len", "str"], "class_names": [], "class_method_calls": []}, "ipset.py": {"libraries": ["logging"], "function_names": ["set_present", "flush", "__virtual__", "absent", "present", "set_absent"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["entry_opts.lstrip", "entry.split", "logging.getLogger", "command.strip", "flush_set.strip", "entries.append", "log.debug"]}, "iptables.py": {"libraries": ["copy", "salt.state.STATE_INTERNAL_KEYWORDS"], "function_names": ["chain_present", "delete", "mod_aggregate", "flush", "__virtual__", "chain_absent", "append", "insert", "set_policy"], "function_calls": ["delete", "append", "insert"], "class_names": [], "class_method_calls": ["chunk.get", "__rules.append", "command.strip", "copy.deepcopy", "flush_chain.strip", "rules.append", "low.get", "__saved_rules.append", "comments.append"]}, "iwtools.py": {"libraries": ["salt.utils.path", "logging", "salt.exceptions.SaltInvocationError"], "function_names": ["set_mode", "__virtual__", "list_interfaces", "scan", "_valid_iface"], "function_calls": ["list_interfaces", "SaltInvocationError", "_valid_iface"], "class_names": [], "class_method_calls": ["line.strip", "out.splitlines", "value.lstrip", "logging.getLogger", "item.split", "line.split", "line.startswith", "tmp.copy", "comps.pop", "ret.keys", "salt.utils"]}, "jboss7.py": {"libraries": ["traceback", "time", "salt.exceptions.CommandExecutionError", "re", "logging", "salt.utils.dictdiffer"], "function_names": ["__log_binding_change", "__validate_arguments", "__find_deployment", "__get_artifact", "bindings_exist", "__check_dict_contains", "__append_comment", "__get_ds_value", "deployed", "reloaded", "__undeploy", "__format_ds_changes", "_error", "datasource_exists"], "function_calls": ["__validate_arguments", "len", "__get_artifact", "__log_binding_change", "__check_dict_contains", "__append_comment", "str", "__get_ds_value", "CommandExecutionError", "__format_ds_changes", "__undeploy", "isinstance", "_error", "__find_deployment"], "class_names": [], "class_method_calls": ["time.sleep", "dictdiffer.diff", "logging.getLogger", "diff.removed", "traceback.format_exc", "diff.added", "deployment_re.match", "dct.keys", "diff.changed", "re.compile", "log.debug"]}, "jboss7_cli.py": {"libraries": ["time", "salt.exceptions.CommandExecutionError", "re", "logging", "pprint"], "function_names": ["__get_long", "_call_cli", "__is_expression", "__process_tokens_internal", "__is_int", "_is_cli_output", "__get_boolean", "__is_dict_end", "__is_dict_start", "__get_quoted_string", "run_operation", "_parse", "__is_boolean", "__escape_command", "__is_long", "__is_quoted_string", "__is_datatype", "__is_undefined", "__get_int", "__tokenize", "__process_tokens", "__get_datatype", "run_command", "__is_assignment"], "function_calls": ["__get_long", "_call_cli", "__is_expression", "__process_tokens_internal", "__is_int", "_is_cli_output", "__get_boolean", "__is_dict_end", "__is_dict_start", "__get_quoted_string", "_parse", "int", "__is_boolean", "__escape_command", "__is_quoted_string", "__is_long", "__is_datatype", "__is_undefined", "__get_int", "__tokenize", "CommandExecutionError", "len", "__process_tokens", "__get_datatype", "__is_assignment"], "class_names": [], "class_method_calls": ["pprint.pformat", "time.sleep", "logging.getLogger", "cli_re.search", "re.DOTALL", "command_segments.append", "match.group", "log.error", "re.search", "result.replace", "token.isdigit", "jboss_config.keys", "re.compile", "tokens_re.findall", "log.debug", "command.replace"]}, "jenkinsmod.py": {"libraries": ["salt.exceptions.CommandExecutionError", "jenkins", "logging", "salt.exceptions.SaltInvocationError", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["plugin_installed", "_retrieve_config_xml", "get_job_info", "_connect", "build_job", "get_job_config", "delete_job", "job_status", "__virtual__", "get_jobs", "job_exists", "update_job", "run", "create_job", "disable_job", "get_version", "enable_job"], "function_calls": ["hasattr", "_retrieve_config_xml", "_connect", "job_exists", "CommandExecutionError", "SaltInvocationError"], "class_names": [], "class_method_calls": ["plugins.keys", "jenkins.JenkinsException", "salt.utils", "server.job_exists", "server.build_job", "server.get_job_config", "server.reconfig_job", "_fp.read", "jenkins.Jenkins", "server.run_script", "server.disable_job", "server.get_version", "server.get_jobs", "server.delete_job", "server.enable_job", "logging.getLogger", "jenkins.EMPTY_CONFIG_XML", "server.create_job", "server.get_job_info", "server.get_plugins"]}, "jinja.py": {"libraries": ["itertools", "jinja2.ext.Extension", "jinja2.TemplateNotFound", "xml.etree.ElementTree.tostring", "salt.utils.stringutils", "salt.utils.files", "salt.utils.decorators.jinja.jinja_test", "shlex", "xml.etree.ElementTree.SubElement", "time", "salt.fileclient", "jinja2.nodes", "salt.utils.data", "warnings", "jinja2.environment.TemplateModule", "jinja2.BaseLoader", "salt.utils.odict.OrderedDict", "jinja2.Markup", "salt.exceptions.TemplateError", "markupsafe.Markup", "salt.utils.yaml", "re", "salt.utils.json", "logging", "salt.utils.url", "pprint", "functools.wraps", "xml.dom.minidom", "jinja2", "collections.abc.Hashable", "salt.utils.versions.Version", "xml.etree.ElementTree.Element", "jinja2.exceptions.TemplateRuntimeError", "salt.utils.decorators.jinja.jinja_global", "uuid", "os.path", "salt.utils.decorators.jinja.jinja_filter"], "function_names": ["_profile_start", "unique", "regex_match", "__init__", "_profile_end", "difference", "format_python", "dict_to_sls_yaml_params", "test_match", "method_call", "show_full_context", "get_source", "recurse_tree", "wrapper", "test_equalto", "parse", "to_bool", "load_text", "normalize_iter", "format_yaml", "regex_search", "lst_avg", "ensure_sequence_filter", "format_xml", "file_client", "lst_min", "__repr__", "check_cache", "union", "indent", "load_yaml", "explore", "__str__", "format_json", "parse_load", "_create_profile_id", "symmetric_difference", "__exit__", "jinja_raise", "parse_profile", "quote", "load_json", "destroy", "parse_import", "regex_escape", "skip_filter", "finalizer", "uptodate", "regex_replace", "uuid_", "tojson", "__enter__", "cache_file", "lst_max", "intersect", "_parse_profile_block"], "function_calls": ["unique", "super", "Version", "max", "recurse_tree", "list", "Markup", "next", "normalize_iter", "PrintableDict", "sum", "jinja_filter", "TemplateNotFound", "set", "Element", "TemplateError", "union", "explore", "str", "jinja_test", "finalizer", "isinstance", "len", "tostring", "getattr", "hasattr", "jinja_global", "float", "wraps", "TemplateRuntimeError", "SubElement", "intersect", "min"], "class_names": ["PrintableDict", "SerializerExtension", "SaltCacheLoader"], "class_method_calls": ["import_node.target", "jinja2.__version__", "environment.globals", "ctx.items", "re.M", "exc.problem", "nodes.Call", "uuid.uuid5", "re.search", "self.pillar_rend", "self._load_parsers", "parser.parse_assign_target", "self.dict_to_sls_yaml_params", "re.compile", "lines.pop", "self.load_text", "self.saltenv", "parser.fail", "self.parse_load", "self.cached", "self.load_yaml", "self.call_method", "warnings.warn", "salt.utils", "sub.text", "self._create_profile_id", "itertools.compress", "pprint.pformat", "parser.parse_statements", "_template.split", "log.warning", "s.splitlines", "compiled_rgx.sub", "re.match", "salt.fileclient", "nodes.Filter", "import_node.lineno", "self.parse_import", "shlex.quote", "nodes.Const", "re.I", "compiled_rgx.match", "itertools.product", "ifile.read", "self._file_client", "self.items", "itertools.combinations_with_replacement", "jinja2.pass_context", "self.format_json", "sub.attrib", "import_node.template", "os.path", "self._import_parsers", "jinja2.contextfunction", "parser.stream", "attrs.items", "self.finalizer", "nodes.Name", "val.lower", "self.cache_file", "file_client.destroy", "yaml_txt.endswith", "data.__class__", "data.items", "uuid.UUID", "nodes.Assign", "self.searchpath", "itertools.permutations", "self.encoding", "self.load_json", "nodes.List", "re.escape", "obj.groups", "ret.append", "self.check_cache", "parser.parse_import", "template.split", "options.setdefault", "self.parse_profile", "nodes.Macro", "fcl.get_file", "self._parse_profile_block", "time.time", "output.append", "self.environment", "value.items", "self.format_yaml", "nodes.ExprStmt", "self._close_file_client", "self.destroy", "tpldir.replace", "log.debug", "minidom.parseString", "self.file_client", "self.format_xml", "self.opts", "self.format_python", "parser.free_identifier", "itertools.combinations", "log.profile", "logging.getLogger", "parser.parse_expression", "exc.problem_mark", "itertools.zip_longest", "newline.join"]}, "jira_mod.py": {"libraries": ["jira", "logging", "salt.utils.args"], "function_names": ["assign_issue", "_get_credentials", "add_comment", "__virtual__", "issue_closed", "create_issue", "_get_jira"], "function_calls": ["str", "_get_jira", "assign_issue", "_get_credentials"], "class_names": [], "class_method_calls": ["data.update", "jira.exceptions", "logging.getLogger", "jira.JIRA", "jira_cfg.get", "jira_.issue", "ticket.fields", "jira_.create_issue", "salt.utils", "jira_.assign_issue", "jira_.add_comment"]}, "k8s.py": {"libraries": ["os", "re", "salt.utils.json", "logging", "base64", "salt.utils.files", "salt.utils.http", "urllib.parse"], "function_names": ["_kpatch", "_kput", "delete_secret", "create_secret", "get_labels", "_get_namespaces", "_create_secret", "_source_encode", "create_namespace", "get_secrets", "__virtual__", "label_present", "_update_secret", "_get_secrets", "_decode_secrets", "_kname", "get_namespaces", "_get_labels", "_is_port_name", "_file_encode", "_is_dns_label", "_is_valid_secret_file", "_guess_node_id", "_is_dns_subdomain", "label_absent", "_kpost", "label_folder_absent", "_set_labels", "update_secret", "_create_namespace", "_guess_apiserver"], "function_calls": ["_kpatch", "create_secret", "enumerate", "_get_namespaces", "_create_secret", "_source_encode", "_update_secret", "_get_secrets", "_decode_secrets", "str", "_get_labels", "_file_encode", "_is_valid_secret_file", "_guess_node_id", "_is_dns_subdomain", "isinstance", "_kpost", "_set_labels", "_create_namespace", "_guess_apiserver"], "class_names": [], "class_method_calls": ["http.query", "source_url.scheme", "fh_k8s.readlines", "old_labels.items", "source_url.path", "source.items", "log.warning", "re.MULTILINE", "dns_subdomain.match", "labels.get", "base64.b64decode", "port_name.match", "kubeapi_regex.match", "i.get", "key.startswith", "base64.b64encode", "re.compile", "log.debug", "log.trace", "os.environ", "res.get", "log.error", "names.append", "log.info", "ret.get", "dns_label.match", "urllib.parse", "logging.getLogger", "match_line.group", "f.read", "obj.get", "secrets.get", "os.path", "secret.get", "salt.utils", "name.strip"]}, "kapacitor.py": {"libraries": ["difflib", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["__virtual__", "task_absent", "task_present"], "function_calls": [], "class_names": [], "class_method_calls": ["new_script.splitlines", "tick_script.startswith", "dbrps.append", "file.read", "old_script.splitlines", "dbrp.split", "result.get", "salt.utils", "comments.append", "difflib.unified_diff"]}, "kerberos.py": {"libraries": ["salt.utils.path", "logging"], "function_names": ["create_principal", "__execute_kadmin", "get_principal", "get_privs", "create_keytab", "delete_principal", "get_policy", "__virtual__", "list_policies", "list_principals"], "function_calls": ["__execute_kadmin"], "class_names": [], "class_method_calls": ["val.split", "logging.getLogger", "log.error", "__opts__.get", "salt.utils", "i.split"]}, "kernelpkg_linux_apt.py": {"libraries": ["functools", "salt.exceptions.CommandExecutionError", "re", "logging", "salt.utils.versions.LooseVersion"], "function_names": ["_package_prefix", "list_installed", "remove", "latest_available", "needs_reboot", "latest_installed", "upgrade_available", "__virtual__", "_cmp_version", "_kernel_type", "cleanup", "active", "upgrade"], "function_calls": ["len", "_package_prefix", "list_installed", "sorted", "remove", "latest_available", "needs_reboot", "latest_installed", "_kernel_type", "LooseVersion", "CommandExecutionError", "filter", "active", "list"], "class_names": [], "class_method_calls": ["functools.cmp_to_key", "re.match", "version.group", "logging.getLogger", "pkg_re.match", "__grains__.get", "removed.extend", "log.info", "log.warning", "re.compile"]}, "kernelpkg_linux_yum.py": {"libraries": ["salt.utils.systemd", "functools", "salt.exceptions.CommandExecutionError", "salt.utils.data", "salt.utils.functools", "logging", "salt.utils.versions.LooseVersion", "salt.modules.yumpkg"], "function_names": ["list_installed", "_package_name", "remove", "latest_available", "needs_reboot", "latest_installed", "upgrade_available", "__virtual__", "_cmp_version", "cleanup", "active", "upgrade"], "function_calls": ["list_installed", "_package_name", "sorted", "remove", "latest_available", "needs_reboot", "latest_installed", "_yum", "LooseVersion", "CommandExecutionError", "active", "globals"], "class_names": [], "class_method_calls": ["functools.cmp_to_key", "logging.getLogger", "__context__.pop", "cmd.extend", "__grains__.get", "removed.extend", "log.info", "log.warning", "salt.utils", "salt.modules"]}, "keyboard.py": {"libraries": [], "function_names": ["__virtual__", "xorg", "system"], "function_calls": [], "class_names": [], "class_method_calls": []}, "keystoneng.py": {"libraries": ["shade", "shade.exc.OpenStackCloudException"], "function_names": ["role_assignment_list", "project_list", "project_create", "group_update", "user_create", "endpoint_delete", "role_create", "_clean_kwargs", "group_delete", "domain_search", "role_delete", "domain_get", "user_delete", "setup_clouds", "project_update", "endpoint_create", "service_search", "role_grant", "__virtual__", "project_get", "project_search", "user_update", "domain_delete", "domain_list", "project_delete", "endpoint_list", "service_update", "role_search", "role_get", "service_get", "group_search", "user_search", "endpoint_update", "user_get", "user_list", "service_create", "domain_update", "get_openstack_cloud", "role_list", "group_list", "group_get", "endpoint_get", "get_entity", "domain_create", "service_list", "role_update", "role_revoke", "service_delete", "get_operator_cloud", "endpoint_search", "group_create", "compare_changes"], "function_calls": ["get_operator_cloud", "get_openstack_cloud", "_clean_kwargs"], "class_names": [], "class_method_calls": ["cloud.create_service", "obj.items", "cloud.list_projects", "cloud.delete_role", "cloud.list_users", "cloud.delete_endpoint", "cloud.list_services", "cloud.revoke_role", "cloud.create_endpoint", "cloud.update_project", "e.inner_exception", "cloud.create_group", "cloud.get_domain", "kwargs.pop", "cloud.delete_service", "cloud.create_role", "cloud.update_user", "cloud.create_user", "cloud.delete_project", "cloud.grant_role", "cloud.search_groups", "cloud.list_endpoints", "cloud.delete_group", "cloud.update_group", "cloud.list_domains", "cloud.search_users", "cloud.get_service", "cloud.get_project", "cloud.search_domains", "cloud.delete_user", "cloud.get_user", "cloud.list_groups", "cloud.update_domain", "cloud.search_projects", "cloud.update_role", "cloud.update_service", "cloud.search_roles", "cloud.update_endpoint", "cloud.get_group", "shade.operator_cloud", "cloud.list_role_assignments", "cloud.get_role", "cloud.search_endpoints", "cloud.get_endpoint", "cloud.list_roles", "shade.openstack_cloud", "cloud.search_services", "cloud.delete_domain", "cloud.create_project", "cloud.create_domain"]}, "keystore.py": {"libraries": ["logging", "os"], "function_names": ["__virtual__", "managed"], "function_calls": ["set", "list"], "class_names": [], "class_method_calls": ["old_aliases.append", "logging.getLogger", "keep_list.append", "os.path", "new_sha1.decode", "entry.get", "log.debug", "existing_sha1.decode"]}, "kmod.py": {"libraries": [], "function_names": ["__virtual__", "present", "absent", "_append_comment"], "function_calls": ["len", "set", "_append_comment", "list", "isinstance"], "class_names": [], "class_method_calls": ["loaded_by_dependency.append"]}, "kubeadm.py": {"libraries": ["salt.exceptions.CommandExecutionError", "re", "logging", "salt.utils.files", "json"], "function_names": ["token_generate", "alpha_kubelet_config_download", "config_upload_from_flags", "token_delete", "_token", "alpha_certs_renew", "alpha_selfhosting_pivot", "config_print_init_defaults", "config_view", "token_list", "config_print_join_defaults", "join_params", "alpha_kubeconfig_user", "version", "reset", "config_images_list", "_discovery_token_ca_cert_hash", "config_upload_from_file", "token_create", "init", "config_images_pull", "_api_server_endpoint", "config_migrate", "join", "_cmd", "alpha_kubelet_config_enable_dynamic"], "function_calls": ["len", "token_create", "bool", "str", "token_list", "CommandExecutionError", "_api_server_endpoint", "_token", "zip", "_cmd", "_discovery_token_ca_cert_hash"], "class_names": [], "class_method_calls": ["i.lower", "logging.getLogger", "log.error", "line.replace", "json.loads", "cmd.extend", "re.findall", "re.search", "re.MULTILINE", "fp_.read", "json.dumps", "tokens.append", "salt.utils", "lines.pop", "cmd.append"]}, "kubernetesmod.py": {"libraries": ["urllib3.exceptions.HTTPError", "signal", "kubernetes.client.V1beta1DeploymentSpec", "salt.utils.files", "kubernetes", "tempfile", "errno", "time", "salt.exceptions.CommandExecutionError", "kubernetes.client.AppsV1beta1Deployment", "salt.exceptions.TimeoutError", "salt.utils.templates", "kubernetes.client.rest.ApiException", "kubernetes.client.AppsV1beta1DeploymentSpec", "contextlib.contextmanager", "salt.utils.yaml", "logging", "kubernetes.client.V1beta1Deployment", "salt.utils.platform", "os.path", "base64", "sys", "kubernetes.client"], "function_names": ["show_service", "create_deployment", "__create_object_body", "delete_secret", "__dict_to_deployment_spec", "create_configmap", "replace_configmap", "node_add_label", "delete_pod", "replace_service", "secrets", "create_secret", "__read_and_render_yaml_file", "create_namespace", "show_pod", "show_namespace", "__virtual__", "__dict_to_pod_spec", "create_pod", "services", "ping", "signal_handler", "__enforce_only_strings_dict", "_time_limit", "namespaces", "__dict_to_object_meta", "node_remove_label", "_cleanup", "_setup_conn", "_cleanup_old", "node", "configmaps", "node_labels", "replace_secret", "delete_deployment", "show_secret", "delete_service", "pods", "_setup_conn_old", "create_service", "replace_deployment", "show_deployment", "deployments", "show_configmap", "delete_configmap", "nodes", "delete_namespace", "__dict_to_service_spec"], "function_calls": ["AppsV1beta1DeploymentSpec", "obj_class", "__read_and_render_yaml_file", "spec_creator", "setattr", "__enforce_only_strings_dict", "_time_limit", "__dict_to_object_meta", "range", "str", "_cleanup", "_setup_conn", "_cleanup_old", "node", "CommandExecutionError", "isinstance", "hasattr", "_setup_conn_old", "show_deployment", "nodes", "__create_object_body"], "class_names": [], "class_method_calls": ["os.unlink", "c.write", "time.sleep", "api_instance.list_namespaced_secret", "api_instance.create_namespace", "api_response.items", "dictionary.items", "api_response.to_dict", "sys.argv", "api_instance.replace_namespaced_config_map", "api_instance.delete_namespaced_pod", "k8s_node.metadata", "api_instance.read_namespaced_deployment", "api_instance.read_namespaced_pod", "k.write", "port.items", "kubernetes.config", "log.warning", "api_instance.list_namespace", "meta_obj.namespace", "ca.name", "api_instance.delete_namespaced_secret", "api_instance.create_namespaced_service", "spec.get", "kube_port.port", "c.name", "metadata.items", "api_instance.list_namespaced_pod", "api_instance.replace_namespaced_service", "base64.b64decode", "api_instance.delete_namespaced_config_map", "api_instance.create_namespaced_deployment", "api_instance.list_node", "signal.alarm", "api_instance.patch_node", "api_instance.delete_namespace", "tempfile.NamedTemporaryFile", "errno.ENOENT", "spec.items", "exc.status", "base64.b64encode", "kcfg.name", "api_instance.list_namespaced_service", "api_instance.replace_namespaced_deployment", "api_instance.replace_namespaced_secret", "kcfg.write", "err.errno", "kwargs.get", "api_instance.create_namespaced_config_map", "src.read", "k8s_node.to_dict", "k.name", "log.exception", "api_instance.read_namespaced_config_map", "api_instance.read_namespaced_secret", "api_instance.delete_namespaced_deployment", "api_instance.read_namespace", "api_instance.create_namespaced_pod", "signal.signal", "api_instance.read_namespaced_service", "ca.write", "logging.getLogger", "api_instance.list_namespaced_config_map", "body.metadata", "api_instance.list_namespaced_deployment", "api_instance.delete_namespaced_service", "os.path", "body.spec", "meta_obj.name", "api_instance.create_namespaced_secret", "salt.utils", "spec_obj.ports", "api_response.data", "kubernetes.client", "signal.SIGALRM"]}, "launchctl_service.py": {"libraries": ["salt.utils.decorators", "os", "salt.utils.versions.Version", "salt.utils.path", "re", "salt.utils.data", "salt.utils.platform", "logging", "fnmatch", "salt.utils.stringutils", "plistlib", "salt.utils.files"], "function_names": ["_service_by_name", "stop", "start", "_available_services", "available", "disabled", "status", "__virtual__", "_launchd_paths", "_get_launchctl_data", "missing", "restart", "enabled", "get_all"], "function_calls": ["_service_by_name", "stop", "bool", "start", "_available_services", "sorted", "set", "_launchd_paths", "dict", "Version", "get_all", "_get_launchctl_data", "list"], "class_names": [], "class_method_calls": ["decorators.memoize", "logging.getLogger", "line.split", "fnmatch.filter", "services.values", "re.search", "plistlib.readPlist", "line.startswith", "os.path", "basename.lower", "plistlib.readPlistFromBytes", "plist.Label", "plistlib.loads", "salt.utils", "overrides_data.get", "name.lower"]}, "layman.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["len"], "class_names": [], "class_method_calls": []}, "ldap3.py": {"libraries": ["ldap", "ldap.ldapobject", "ldap.modlist", "ldap.sasl", "salt.utils.data", "logging"], "function_names": ["__enter__", "delete", "__init__", "search", "connect", "change", "modify", "__virtual__", "__exit__", "_bind", "_format_unicode_password", "_convert_exception", "add"], "function_calls": ["getattr", "super", "LDAPError", "set", "connect", "sasl_class", "dict", "_connect_ctx", "_bind", "repr", "_convert_exception", "_format_unicode_password", "list", "enumerate", "ValueError", "isinstance"], "class_names": ["LDAPError", "_connect_ctx"], "class_method_calls": ["ldap.modlist", "op.upper", "scope.upper", "self.c", "k.upper", "l.sasl_interactive_bind_s", "tls.items", "ldap.OPT_REFERRALS", "l.start_tls_s", "opts.items", "ldap.sasl", "ldap.VERSION3", "after.items", "self.cause", "l.set_option", "l.simple_bind_s", "v.upper", "l.protocol_version", "available_backends.add", "ldap.initialize", "connect_spec.get", "ldap.LDAPError", "before.items", "log.info", "bind.get", "creds.get", "vars.get", "logging.getLogger", "ldap.OPT_X_TLS_NEWCTX", "attributes.items", "ldap.NO_SUCH_OBJECT", "salt.utils", "l.c"]}, "ldapmod.py": {"libraries": ["time", "ldap", "ldap.modlist", "salt.exceptions.CommandExecutionError", "salt.utils.data", "logging"], "function_names": ["__init__", "_connect", "search", "__virtual__", "_config"], "function_calls": ["len", "int", "str", "_connect", "round", "CommandExecutionError", "_config", "_LDAPConnection"], "class_names": ["_LDAPConnection"], "class_method_calls": ["self.bindpw", "ldap.initialize", "_ldap.search_s", "logging.getLogger", "time.time", "self.ldap", "ldap.OPT_REFERRALS", "self.uri", "self.server", "ldap.OPT_X_TLS_NEVER", "self.binddn", "self.port", "salt.utils", "ldap.set_option", "self.tls", "log.debug", "ldap.OPT_X_TLS_REQUIRE_CERT"]}, "libcloud_compute.py": {"libraries": ["salt.utils.versions.Version", "libcloud.compute.base.Node", "logging", "os.path", "libcloud.compute.providers.get_driver", "salt.utils.args", "salt.utils.compat", "libcloud"], "function_names": ["list_key_pairs", "_get_driver", "_simple_key_pair", "list_sizes", "create_volume_snapshot", "_simple_volume_snapshot", "_get_by_id", "get_image", "get_key_pair", "destroy_volume", "__virtual__", "create_image", "_simple_size", "list_locations", "extra", "_simple_node", "destroy_volume_snapshot", "create_volume", "delete_image", "list_nodes", "list_images", "_simple_volume", "list_volumes", "copy_image", "_simple_image", "create_key_pair", "list_volume_snapshots", "delete_key_pair", "destroy_node", "reboot_node", "import_key_pair", "_simple_location", "attach_volume", "detach_volume"], "function_calls": ["_get_driver", "_simple_key_pair", "_simple_volume_snapshot", "Version", "_get_by_id", "_simple_size", "_simple_node", "connection_method", "_simple_volume", "ImportError", "str", "_simple_image", "cls", "ValueError", "len", "getattr", "hasattr", "get_driver", "_simple_location"], "class_names": [], "class_method_calls": ["conn.import_key_pair_from_string", "snapshot.size", "logging.CRITICAL", "image.id", "config.get", "conn.destroy_volume_snapshot", "volume.extra", "location.country", "libcloud.__version__", "salt.utils", "size.disk", "conn.list_volumes", "conn.destroy_node", "key.private_key", "conn.list_nodes", "key.public_key", "volume.state", "conn.attach_volume", "node.extra", "node.name", "loc.id", "key.name", "node.id", "conn.list_volume_snapshots", "size.bandwidth", "key.extra", "volume.size", "size.price", "snapshot.created", "conn.create_volume", "volume.name", "snapshot.id", "node.state", "snapshot.name", "conn.import_key_pair_from_file", "node.size", "location.name", "conn.create_volume_snapshot", "size.name", "conn.delete_key_pair", "image.extra", "conn.list_locations", "volume.id", "conn.copy_image", "node.private_ips", "image.name", "conn.get_key_pair", "conn.reboot_node", "conn.get_image", "size.extra", "location.id", "key.fingerprint", "logging.getLogger", "conn.detach_volume", "conn.delete_image", "size.ram", "size.id", "config.copy", "ret.append", "conn.list_sizes", "conn.create_key_pair", "item.id", "snapshot.extra", "os.path", "conn.destroy_volume", "conn.list_images", "conn.list_key_pairs", "node.public_ips", "snapshot.state", "conn.create_image"]}, "libcloud_dns.py": {"libraries": [], "function_names": ["record_present", "zone_absent", "state_result", "__virtual__", "zone_present", "record_absent"], "function_calls": ["len", "state_result", "all"], "class_names": [], "class_method_calls": ["result.append"]}, "libcloud_loadbalancer.py": {"libraries": ["logging"], "function_names": ["state_result", "member_absent", "__virtual__", "member_present", "balancer_absent", "balancer_present"], "function_calls": ["len", "state_result"], "class_names": [], "class_method_calls": ["starting_members.append", "logging.getLogger"]}, "libcloud_storage.py": {"libraries": ["logging"], "function_names": ["object_present", "state_result", "file_present", "__virtual__", "container_absent", "container_present", "object_absent"], "function_calls": ["len", "state_result"], "class_names": [], "class_method_calls": ["logging.getLogger"]}, "linux_acl.py": {"libraries": ["salt.utils.path", "logging", "salt.exceptions.CommandExecutionError", "os"], "function_names": ["list_absent", "list_present", "__virtual__", "absent", "present"], "function_calls": ["next", "sum", "str", "set", "iter", "enumerate"], "class_names": [], "class_method_calls": ["_current_perms.get", "ret.update", "changes.update", "logging.getLogger", "i.keys", "key.keys", "_current_acl_types.append", "users.update", "acl_type.split", "current_acl_name.encode", "os.path", "acl_type.startswith", "_current_acl_types.remove", "_current_perms_path.get", "exc.strerror", "_octal.get", "salt.utils"]}, "linux_ip.py": {"libraries": ["salt.utils.path", "salt.utils.stringutils", "salt.utils.platform", "salt.utils.files"], "function_names": ["_ip_ifaces", "down", "up", "get_interface", "get_routes", "__virtual__", "_route_flags", "_parse_routes", "_hex_to_octets"], "function_calls": ["len", "_ip_ifaces", "int", "_route_flags", "iter", "dict", "_parse_routes", "_hex_to_octets", "zip", "list"], "class_names": [], "class_method_calls": ["line.strip", "routes.get", "out.splitlines", "ifaces.get", "opts_comps.pop", "line.split", "fp_.read", "salt.utils", "comps.pop", "line.startswith"]}, "linux_lvm.py": {"libraries": ["salt.utils.path", "logging", "os.path"], "function_names": ["lvextend", "pvremove", "vgextend", "vgremove", "vgdisplay", "lvdisplay", "version", "pvresize", "__virtual__", "lvremove", "lvresize", "fullversion", "lvcreate", "vgcreate", "pvdisplay", "pvcreate"], "function_calls": ["vgdisplay", "lvdisplay", "pvdisplay", "isinstance"], "class_names": [], "class_method_calls": ["line.strip", "cmd_ret.get", "logging.getLogger", "line.split", "kwargs.items", "log.error", "extra_arguments.extend", "cmd.extend", "devices.split", "os.path", "extra_arguments.append", "out.get", "salt.utils", "cmd.append"]}, "linux_service.py": {"libraries": ["re", "fnmatch", "os"], "function_names": ["stop", "start", "reload_", "available", "status", "__virtual__", "restart", "missing", "run", "get_all"], "function_calls": ["sorted", "bool", "get_all", "run"], "class_names": [], "class_method_calls": ["_GRAINMAP.get", "os.listdir", "fnmatch.filter", "re.search", "__grains__.get", "os.path"]}, "linux_shadow.py": {"libraries": ["os", "functools", "salt.exceptions.CommandExecutionError", "salt.utils.data", "logging", "datetime", "salt.utils.files", "salt.utils.pycrypto", "spwd"], "function_names": ["list_users", "set_password", "gen_password", "set_expire", "info", "set_mindays", "default_hash", "__virtual__", "set_maxdays", "_set_attrib", "lock_password", "set_warndays", "del_password", "unlock_password", "set_date", "_getspnam", "set_inactdays", "_getspall"], "function_calls": ["len", "getspall", "hasattr", "range", "int", "sorted", "getspnam", "info", "str", "_set_attrib", "CommandExecutionError"], "class_names": [], "class_method_calls": ["spwd.struct_spwd", "data.sp_lstchg", "cmd.extend", "__grains__.get", "lines.append", "log.warning", "data.sp_warn", "data.sp_namp", "line.strip", "user.sp_namp", "fp_.write", "data.sp_max", "data.sp_inact", "fp_.writelines", "comps.extend", "data.sp_pwdp", "spwd.getspnam", "spwd.getspall", "user.sp_nam", "logging.getLogger", "data.sp_nam", "data.sp_pwd", "os.path", "data.sp_min", "data.sp_expire", "salt.utils", "datetime.datetime", "functools.partial"]}, "linux_sysctl.py": {"libraries": ["salt.utils.systemd", "os", "salt.utils.path", "salt.exceptions.CommandExecutionError", "salt.utils.data", "re", "logging", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["_sanitize_sysctl_value", "get", "assign", "show", "__virtual__", "default_config", "_which", "persist"], "function_calls": ["_sanitize_sysctl_value", "get", "str", "assign", "CommandExecutionError", "default_config", "_which"], "class_names": [], "class_method_calls": ["line.split", "name.translate", "os.makedirs", "msg.format", "_fh.write", "nlines.append", "re.compile", "key.rstrip", "out.split", "value.lstrip", "log.error", "i.strip", "re.sub", "_fh.writelines", "line.startswith", "re.escape", "out.splitlines", "logging.getLogger", "regex.match", "os.path", "salt.utils", "_fh.readlines"]}, "localemod.py": {"libraries": ["salt.utils.locales", "salt.utils.systemd", "dbus", "os", "salt.utils.path", "salt.exceptions.CommandExecutionError", "re", "salt.utils.platform", "logging"], "function_names": ["set_locale", "_localectl_set", "__virtual__", "_localectl_status", "list_avail", "avail", "get_locale", "_parse_dbus_locale", "gen_locale"], "function_calls": ["len", "next", "_localectl_set", "str", "_localectl_status", "CommandExecutionError", "_parse_dbus_locale"], "class_names": [], "class_method_calls": ["line.split", "os.listdir", "locale_ctl_out.splitlines", "__grains__.get", "bus.get_object", "re.MULTILINE", "ctl_key.strip", "line.strip", "re.match", "match.group", "ctl_data.split", "properties.Get", "log.debug", "dbus.Interface", "kwargs.get", "log.error", "dbus.SystemBus", "cmd.append", "logging.getLogger", "locale_params.items", "os.path", "salt.utils", "x.strip"]}, "locate.py": {"libraries": ["logging", "salt.utils.platform"], "function_names": ["stats", "updatedb", "locate", "version", "__virtual__"], "function_calls": ["bool"], "class_names": [], "class_method_calls": ["line.startswith", "salt.utils", "logging.getLogger", "line.strip"]}, "logadm.py": {"libraries": ["logging", "salt.utils.data", "salt.utils.args"], "function_names": ["__virtual__", "remove", "rotate"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "log.debug", "logging.getLogger", "name.startswith"]}, "logmod.py": {"libraries": ["logging"], "function_names": ["critical", "warning", "info", "exception", "__virtual__", "debug", "error"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "log.exception", "log.info", "log.warning", "log.debug", "log.critical"]}, "logrotate.py": {"libraries": [], "function_names": ["__virtual__", "_convert_if_int", "set_"], "function_calls": ["str", "_convert_if_int", "dict", "int"], "class_names": [], "class_method_calls": []}, "lvs.py": {"libraries": ["salt.utils.path", "salt.utils.decorators", "salt.exceptions.SaltException"], "function_names": ["clear", "delete_service", "list_", "add_server", "get_rules", "zero", "delete_server", "check_service", "check_server", "__virtual__", "_build_cmd", "edit_service", "edit_server", "add_service", "__detect_os"], "function_calls": ["_build_cmd", "get_rules", "SaltException", "__detect_os"], "class_names": [], "class_method_calls": ["decorators.memoize", "salt.utils", "all_rules.find"]}, "lxd.py": {"libraries": ["salt.exceptions.CommandExecutionError", "os.path", "salt.exceptions.SaltInvocationError"], "function_names": ["_unchanged", "config_managed", "init", "_success", "__virtual__", "authenticate", "_error"], "function_calls": ["str", "_error", "_success", "_unchanged"], "class_names": [], "class_method_calls": ["client.trusted", "os.path", "done_file.replace"]}, "mac_assistive.py": {"libraries": ["logging", "salt.utils.versions.Version", "salt.utils.platform"], "function_names": ["__virtual__", "installed"], "function_calls": ["Version"], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "mac_brew_pkg.py": {"libraries": ["salt.utils.path", "salt.exceptions.CommandExecutionError", "salt.utils.data", "salt.utils.functools", "salt.utils.json", "salt.utils.pkg", "logging", "salt.utils.versions", "salt.exceptions.SaltInvocationError", "salt.exceptions.MinionError", "copy"], "function_names": ["latest_version", "_unpin", "_pin", "_call_brew", "upgrade_available", "__virtual__", "list_upgrades", "hold", "unhold", "_tap", "remove", "_homebrew_bin", "version", "info_installed", "list_pkgs", "_list_taps", "_list_pkgs_from_context", "_list_pinned", "refresh_db", "install", "_info", "get_version", "upgrade"], "function_calls": ["any", "_unpin", "_pin", "dict", "list", "next", "_call_brew", "list_upgrades", "_tap", "_homebrew_bin", "list_pkgs", "CommandExecutionError", "_list_taps", "isinstance", "len", "_list_pkgs_from_context", "_list_pinned", "refresh_db", "iter", "_info", "SaltInvocationError", "get_version"], "class_names": [], "class_method_calls": ["pkg_names.add", "logging.getLogger", "copy.deepcopy", "kwargs.get", "__context__.pop", "log.error", "cmd.extend", "targets.extend", "versions_dict.values", "meta_info.items", "targets.append", "package.get", "salt.utils", "kwargs.pop"]}, "mac_desktop.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.utils.platform"], "function_names": ["set_output_volume", "lock", "__virtual__", "_check_cmd", "get_output_volume", "screensaver", "say"], "function_calls": ["get_output_volume", "CommandExecutionError", "_check_cmd"], "class_names": [], "class_method_calls": ["call.get", "salt.utils"]}, "mac_group.py": {"libraries": ["grp", "salt.exceptions.CommandExecutionError", "salt.modules.mac_user._flush_dscl_cache", "salt.utils.functools", "logging", "salt.utils.stringutils", "salt.exceptions.SaltInvocationError", "salt.modules.mac_user._dscl", "salt.utils.itertools"], "function_names": ["chgid", "delete", "_list_gids", "adduser", "info", "__virtual__", "members", "_format_info", "add", "deluser", "getent"], "function_calls": ["next", "_list_gids", "sorted", "str", "info", "set", "iter", "CommandExecutionError", "_format_info", "SaltInvocationError", "globals", "isinstance"], "class_names": [], "class_method_calls": ["data.gr_mem", "line.split", "data.gr_gid", "name.startswith", "cmd.extend", "__grains__.get", "log.warning", "data.gr_name", "ret.update", "line.startswith", "x.gr_name", "cmd.append", "logging.getLogger", "data.gr_passwd", "members_list.split", "ret.append", "grinfo.gr_name", "salt.utils", "grp.getgrall"]}, "mac_keychain.py": {"libraries": ["logging", "os", "salt.utils.platform"], "function_names": ["__virtual__", "uninstalled", "installed", "default_keychain"], "function_calls": ["len"], "class_names": [], "class_method_calls": ["salt.utils", "os.path", "logging.getLogger", "kwargs.get"]}, "mac_pkgutil.py": {"libraries": ["salt.utils.mac_utils", "salt.utils.path", "salt.utils.platform", "os.path", "salt.exceptions.SaltInvocationError", "urllib", "salt.utils.itertools"], "function_names": ["list_", "_install_from_path", "is_installed", "forget", "__virtual__", "install"], "function_calls": ["list_", "SaltInvocationError", "_install_from_path", "is_installed"], "class_names": [], "class_method_calls": ["uri.scheme", "ret.splitlines", "os.path", "salt.utils", "urllib.parse"]}, "mac_portspkg.py": {"libraries": ["salt.utils.mac_utils", "salt.utils.path", "salt.exceptions.CommandExecutionError", "salt.utils.data", "re", "salt.utils.functools", "salt.utils.platform", "salt.utils.pkg", "logging", "salt.utils.versions", "copy"], "function_names": ["upgrade", "latest_version", "remove", "version", "upgrade_available", "refresh_db", "__virtual__", "install", "list_upgrades", "list_pkgs", "_list", "_list_pkgs_from_context"], "function_calls": ["any", "version", "refresh_db", "list_upgrades", "list_pkgs", "CommandExecutionError", "_list", "_list_pkgs_from_context"], "class_names": [], "class_method_calls": ["out.splitlines", "logging.getLogger", "copy.deepcopy", "kwargs.get", "__context__.pop", "pkg_params.items", "cmd.extend", "line.lstrip", "formulas_array.append", "exc.strerror", "available.items", "salt.utils", "re.split"]}, "mac_power.py": {"libraries": ["salt.exceptions.SaltInvocationError", "salt.utils.mac_utils", "salt.utils.platform"], "function_names": ["get_sleep", "get_display_sleep", "set_sleep", "_validate_sleep", "set_harddisk_sleep", "get_computer_sleep", "set_restart_freeze", "__virtual__", "get_restart_power_failure", "get_sleep_on_power_button", "get_wake_on_network", "set_computer_sleep", "set_restart_power_failure", "get_harddisk_sleep", "set_wake_on_network", "set_sleep_on_power_button", "set_wake_on_modem", "get_restart_freeze", "get_wake_on_modem", "set_display_sleep"], "function_calls": ["get_display_sleep", "get_computer_sleep", "range", "str", "SaltInvocationError", "_validate_sleep", "all", "get_harddisk_sleep", "isinstance"], "class_names": [], "class_method_calls": ["salt.utils", "minutes.lower", "state.append"]}, "mac_service.py": {"libraries": ["salt.utils.versions.Version", "os", "salt.utils.path", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "logging", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["list_", "available", "disabled", "loaded", "get_enabled", "_get_service", "enabled", "get_all", "show", "__virtual__", "_name_in_services", "_get_domain_target", "_launch_agent", "disable", "stop", "enable", "missing", "start", "status", "_always_running_service", "restart", "launchctl"], "function_calls": ["_launch_agent", "list_", "any", "available", "sorted", "set", "show", "_get_domain_target", "_name_in_services", "_always_running_service", "dict", "CommandExecutionError", "get_enabled", "Version", "launchctl", "_get_service", "list", "isinstance"], "class_names": [], "class_method_calls": ["keep_alive.get", "__context__.get", "disabled.split", "logging.getLogger", "line.split", "status.lower", "enabled.append", "log.error", "services.values", "stdout.splitlines", "os.path", "basename.lower", "salt.utils", "service.split", "SALT_MAC_SERVICES.get", "line.startswith"]}, "mac_shadow.py": {"libraries": ["pwd", "salt.utils.mac_utils", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "logging", "datetime.datetime"], "function_names": ["set_password", "set_expire", "get_last_change", "get_expire", "del_password", "set_inactdays", "get_maxdays", "__virtual__", "set_warndays", "_convert_to_datetime", "get_account_created", "_set_account_policy", "get_change", "set_change", "get_login_failed_last", "get_login_failed_count", "info", "set_mindays", "set_maxdays", "_get_account_policy", "_get_account_policy_data_value"], "function_calls": ["get_maxdays", "get_login_failed_last", "get_login_failed_count", "int", "get_last_change", "float", "info", "get_change", "get_expire", "_get_account_policy", "_get_account_policy_data_value", "_convert_to_datetime", "CommandExecutionError", "get_account_created", "_set_account_policy"], "class_names": [], "class_method_calls": ["datetime.fromtimestamp", "data.pw_name", "pwd.getpwnam", "logging.getLogger", "exc.message", "ret.split", "data.pw_passwd", "exc.strerror", "policy.split", "salt.utils", "log.debug"]}, "mac_softwareupdate.py": {"libraries": ["os", "salt.utils.mac_utils", "salt.utils.path", "salt.exceptions.CommandExecutionError", "salt.utils.data", "re", "salt.utils.platform", "salt.exceptions.SaltInvocationError", "salt.utils.files"], "function_names": ["schedule_enable", "get_catalog", "download", "list_ignored", "update_available", "update", "download_all", "_get_available", "reset_ignored", "set_catalog", "__virtual__", "ignore", "list_downloads", "reset_catalog", "list_available", "schedule_enabled", "update_all"], "function_calls": ["get_catalog", "download", "update_available", "_get_available", "f", "list_ignored", "SaltInvocationError", "all", "schedule_enabled", "list_downloads"], "class_names": [], "class_method_calls": ["name.rsplit", "f.endswith", "fhr.read", "ret.append", "m.group", "rexp.finditer", "outfiles.append", "ret.split", "rexp.findall", "update.rsplit", "conditions.append", "dist_files.append", "os.path", "salt.utils", "re.compile", "cmd.append"]}, "mac_sysctl.py": {"libraries": ["salt.exceptions.CommandExecutionError", "os", "salt.utils.files"], "function_names": ["get", "assign", "show", "__virtual__", "persist"], "function_calls": ["len", "any", "str", "assign", "CommandExecutionError"], "class_names": [], "class_method_calls": ["out.splitlines", "_fh.write", "nlines.append", "new_value.split", "line.split", "ofile.writelines", "salt.utils", "os.path", "line.startswith", "rest.split", "rest.startswith", "msg.format"]}, "mac_system.py": {"libraries": ["salt.utils.mac_utils", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "getpass", "salt.exceptions.SaltInvocationError", "shlex"], "function_names": ["set_startup_disk", "shutdown", "get_subnet_name", "set_remote_events", "get_startup_disk", "_execute_command", "get_boot_arch", "set_computer_name", "_atrun_enabled", "__virtual__", "get_disable_keyboard_on_lock", "set_disable_keyboard_on_lock", "halt", "set_remote_login", "get_restart_delay", "list_startup_disks", "get_computer_name", "_enable_atrun", "set_restart_delay", "get_remote_login", "set_boot_arch", "restart", "sleep", "get_remote_events", "set_subnet_name"], "function_calls": ["bool", "_atrun_enabled", "_enable_atrun", "halt", "SaltInvocationError", "_execute_command", "list_startup_disks"], "class_names": [], "class_method_calls": ["shlex.quote", "salt.utils", "getpass.getuser", "ret.splitlines"]}, "mac_timezone.py": {"libraries": ["salt.exceptions.SaltInvocationError", "datetime.datetime", "salt.utils.mac_utils", "salt.utils.platform"], "function_names": ["set_zone", "set_hwclock", "get_date", "list_zones", "get_offset", "set_time_server", "get_zonecode", "_get_date_time_format", "get_time", "set_using_network_time", "get_time_server", "get_hwclock", "__virtual__", "set_date", "set_time", "get_using_network_time", "get_zone", "zone_compare"], "function_calls": ["list_zones", "_get_date_time_format", "get_time_server", "get_using_network_time", "SaltInvocationError", "get_zone"], "class_names": [], "class_method_calls": ["datetime.strptime", "zones.splitlines", "dt_obj.strftime", "salt.utils", "x.strip"]}, "mac_user.py": {"libraries": ["time", "pwd", "salt.exceptions.CommandExecutionError", "salt.utils.data", "logging", "salt.utils.decorators.path", "salt.utils.stringutils", "salt.utils.args", "salt.utils.files", "salt.exceptions.SaltInvocationError", "salt.utils.user"], "function_names": ["delete", "_kcpassword", "chhome", "enable_auto_login", "add", "chgroups", "_flush_dscl_cache", "rename", "__virtual__", "_dscl", "getent", "chgid", "list_users", "list_groups", "chuid", "chfullname", "info", "_first_avail_uid", "disable_auto_login", "chshell", "_format_info", "primary_group", "get_auto_login"], "function_calls": ["_kcpassword", "chgroups", "list", "next", "set", "_dscl", "list_groups", "range", "str", "CommandExecutionError", "isinstance", "len", "bool", "info", "bytes", "iter", "_first_avail_uid", "get_auto_login", "_format_info", "SaltInvocationError", "map", "min"], "class_names": [], "class_method_calls": ["time.sleep", "__grains__.get", "log.warning", "kwargs.pop", "x.pw_uid", "fd.write", "data.pw_uid", "data.pw_gecos", "data.pw_dir", "log.info", "data.pw_name", "pwd.getpwall", "logging.getLogger", "ret.append", "desired.add", "x.pw_name", "data.pw_shell", "groups.split", "data.pw_gid", "salt.utils", "current.lower", "users.split", "name.lower"]}, "mac_xattr.py": {"libraries": ["logging", "os"], "function_names": ["__virtual__", "delete", "exists"], "function_calls": ["len"], "class_names": [], "class_method_calls": ["logging.getLogger", "current_attrs.keys", "os.path", "attr_val.startswith", "attr.split"]}, "macdefaults.py": {"libraries": ["logging", "salt.utils.platform"], "function_names": ["__virtual__", "write", "absent", "safe_cast"], "function_calls": ["to_type", "safe_cast"], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "macpackage.py": {"libraries": ["os", "salt.exceptions.CommandExecutionError", "re", "salt.utils.platform", "logging"], "function_names": ["__virtual__", "installed", "failed_pkg"], "function_calls": ["len", "failed_pkg"], "class_names": [], "class_method_calls": ["re.match", "out.split", "logging.getLogger", "version_out.strip", "os.path", "log.info", "installing.append", "version_check.split", "salt.utils", "found.append"]}, "makeconf.py": {"libraries": [], "function_names": ["__virtual__", "_make_set", "absent", "present"], "function_calls": ["len", "set", "_make_set", "list", "isinstance"], "class_names": [], "class_method_calls": ["var.split", "contains_set.intersection", "name.upper", "contains_set.difference", "msg.format", "excludes_set.intersection"]}, "mandrill.py": {"libraries": ["logging", "salt.utils.versions", "requests", "salt.utils.json"], "function_names": ["send", "_get_api_params", "_get_headers", "_http_request", "_get_url", "__virtual__", "_default_ret"], "function_calls": ["_get_api_params", "_get_headers", "_http_request", "float", "_get_url", "_default_ret"], "class_names": [], "class_method_calls": ["ret.update", "req.json", "session.post", "logging.getLogger", "requests.session", "mandrill_cfg.get", "salt.utils", "req.status_code", "req_body.pop", "log.debug", "req_body.get"]}, "match.py": {"libraries": ["salt.defaults.DEFAULT_TARGET_DELIM", "salt.loader", "salt.utils.decorators.jinja.jinja_global", "logging", "sys", "inspect", "collections.abc.Mapping", "salt.exceptions.SaltException", "copy"], "function_names": ["glob", "list_", "ipcidr", "grain", "ifelse", "filter_by", "_load_matchers", "grain_pcre", "search_by", "compound", "pcre", "pillar_pcre", "pillar", "data"], "function_calls": ["len", "SaltException", "jinja_global", "str", "filter_by", "_load_matchers", "dict", "zip", "enumerate", "list", "isinstance"], "class_names": [], "class_method_calls": ["inspect.isfunction", "lookup.get", "matches.append", "logging.getLogger", "lookup.items", "salt.loader", "sys.modules", "copy.deepcopy", "inspect.getmembers", "log.exception", "salt.utils", "lookup.update"]}, "mattermost.py": {"libraries": ["logging", "salt.version.__version__", "salt.utils.http", "http.client", "urllib.parse"], "function_names": ["query"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["logging.getLogger", "result.get", "salt.utils", "http.client", "log.debug", "urllib.parse"]}, "mdadm_raid.py": {"libraries": ["salt.utils.path", "logging"], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["len", "sorted", "next", "iter"], "class_names": [], "class_method_calls": ["new_devices.append", "logging.getLogger", "raids.get", "missing.append", "salt.utils"]}, "memcached.py": {"libraries": ["salt.exceptions.CommandExecutionError", "logging", "memcache", "salt.exceptions.SaltInvocationError"], "function_names": ["get", "_check_stats", "__virtual__", "get_conn", "set_"], "function_calls": ["str", "_check_stats", "CommandExecutionError", "SaltInvocationError", "isinstance"], "class_names": [], "class_method_calls": ["opts_pillar.get", "logging.getLogger", "conn.get_stats", "opts_merged.update", "memcache.Client", "opts_merged.get", "conn.set", "opts.get", "conf.get", "conn.get"]}, "mod_random.py": {"libraries": ["salt.utils.data", "base64", "salt.exceptions.SaltInvocationError", "salt.utils.pycrypto", "random"], "function_names": ["shuffle", "hash", "get_str", "shadow_hash", "seed", "sample", "rand_int", "__virtual__", "str_encode"], "function_calls": ["SaltInvocationError", "isinstance"], "class_names": [], "class_method_calls": ["random.randrange", "value.encode", "random.seed", "out.decode", "random.randint", "salt.utils", "base64.b64encode"]}, "modjk.py": {"libraries": ["logging"], "function_names": ["worker_activated", "worker_recover", "worker_stopped", "__virtual__", "_bulk_state", "worker_disabled"], "function_calls": ["type", "_bulk_state", "isinstance"], "class_names": [], "class_method_calls": ["cmdret.items", "log.info", "errors.append", "logging.getLogger"]}, "mongodb.py": {"libraries": ["salt.utils.versions.Version", "re", "salt.exceptions.get_error_message", "salt.utils.json", "logging", "pymongo"], "function_names": ["user_create", "collections_list", "collection_drop", "user_grant_roles", "_version", "user_remove", "_connect", "__virtual__", "db_exists", "collection_create", "db_remove", "db_list", "user_list", "find", "remove", "version", "user_revoke_roles", "insert", "user_roles_exists", "user_find", "user_exists", "update_one", "_to_dict"], "function_calls": ["len", "_version", "user_list", "getattr", "find", "range", "str", "_connect", "_to_dict", "dict", "Version", "_get_error_message", "db_list", "isinstance"], "class_names": [], "class_method_calls": ["output.append", "col.delete_one", "mdb.system", "mdb.authenticate", "user.get", "mdb.drop_collection", "ret.extend", "pymongo.database", "mdb.list_collection_names", "ids.acknowledged", "col.update_one", "log.error", "conn.list_database_names", "pymongo.MongoClient", "log.info", "col.insert_many", "col.find", "re.split", "ids.modified_count", "mdb.create_collection", "logging.getLogger", "conn.drop_database", "mdb.command", "res.deleted_count", "document.append", "salt.utils", "pymongo.errors"]}, "monit.py": {"libraries": [], "function_names": ["__virtual__", "unmonitor", "monitor"], "function_calls": [], "class_names": [], "class_method_calls": ["result.items"]}, "moosefs.py": {"libraries": ["salt.utils.path"], "function_names": ["mounts", "dirinfo", "fileinfo", "__virtual__", "getgoal"], "function_calls": [], "class_names": [], "class_method_calls": ["line.split", "salt.utils", "line.strip"]}, "mount.py": {"libraries": ["os", "salt.utils.yaml", "logging", "salt.utils.versions", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["_read_file", "read_cache", "write_cache", "get_cache"], "function_calls": ["_read_file", "get_cache"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "fp_.write", "logging.DEBUG", "os.path", "salt.utils"]}, "mssql.py": {"libraries": ["pymssql", "salt.utils.json"], "function_names": ["_get_connection", "user_create", "role_create", "tsql_query", "login_create", "user_remove", "__virtual__", "role_remove", "db_exists", "default", "db_remove", "login_exists", "db_list", "user_list", "login_remove", "version", "role_list", "user_exists", "db_create", "role_exists"], "function_calls": ["len", "_get_connection", "bool", "str", "user_exists", "_MssqlEncoder", "db_exists", "tsql_query", "login_exists", "isinstance"], "class_names": ["_MssqlEncoder"], "class_method_calls": ["cur.fetchall", "cur.execute", "conn.autocommit", "pymssql.connect", "new_login_options.insert", "conn.cursor", "conn.close", "salt.utils", "_DEFAULTS.get"]}, "msteams.py": {"libraries": ["salt.exceptions.SaltInvocationError"], "function_names": ["__virtual__", "post_card"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": []}, "munin.py": {"libraries": ["stat", "os", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["run", "_get_conf", "__virtual__", "list_plugins", "run_all"], "function_calls": ["int", "float", "list_plugins", "run", "isinstance"], "class_names": [], "class_method_calls": ["ret.update", "ret.append", "stat.ST_MODE", "line.split", "stat.S_IXUSR", "os.listdir", "os.stat", "fp_.read", "muninout.split", "os.path", "plugins.split", "salt.utils", "key.split"]}, "nacl.py": {"libraries": ["os", "salt.utils.win_functions", "salt.utils.platform", "nacl.secret", "salt.syspaths", "salt.utils.win_dacl", "salt.utils.versions", "base64", "salt.utils.stringutils", "salt.utils.files", "nacl.public"], "function_names": ["secretbox_encrypt", "enc_file", "dec_file", "keygen", "enc", "sealedbox_decrypt", "secretbox_decrypt", "__virtual__", "sealedbox_encrypt", "_get_config", "check_requirements", "_get_pk", "dec", "_get_sk"], "function_calls": ["secretbox_encrypt", "Exception", "str", "enc", "sealedbox_decrypt", "set", "secretbox_decrypt", "sealedbox_encrypt", "_get_config", "check_requirements", "_get_pk", "dec", "_get_sk"], "class_names": [], "class_method_calls": ["kwargs.keys", "kp.encode", "f.write", "base64.b64decode", "b.decrypt", "nacl.secret", "os.chmod", "base64.b64encode", "kwargs.get", "config.keys", "nacl.public", "keyf.read", "keyf.write", "f.read", "kp.public_key", "os.path", "b.encrypt", "config.update", "salt.utils"]}, "nagios.py": {"libraries": ["logging", "os", "stat"], "function_names": ["run_all_pillar", "retcode_pillar", "run_pillar", "_execute_pillar", "_format_dict_key", "retcode", "__virtual__", "run_all", "list_plugins", "run", "_execute_cmd"], "function_calls": ["next", "run_type", "_execute_pillar", "int", "_format_dict_key", "retcode", "list_plugins", "iter", "_execute_cmd", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "stat.ST_MODE", "ret.append", "stat.S_IXUSR", "os.listdir", "os.stat", "check.update", "os.path", "command.keys", "args.replace"]}, "nagios_rpc.py": {"libraries": ["salt.utils.http", "logging", "http.client", "salt.exceptions.CommandExecutionError"], "function_names": ["service_status", "__virtual__", "host_status", "_status_query", "_config"], "function_calls": ["_config", "CommandExecutionError", "_status_query"], "class_names": [], "class_method_calls": ["logging.getLogger", "kwargs.get", "result.text", "data.get", "result.get", "salt.utils", "http.client"]}, "namecheap_domains.py": {"libraries": ["logging", "salt.utils.namecheap"], "function_names": ["reactivate", "renew", "create", "get_info", "add_to_opts", "__virtual__", "check", "get_tld_list", "get_list"], "function_calls": ["len", "str", "Exception", "add_to_opts"], "class_names": [], "class_method_calls": ["response_xml.getElementsByTagName", "domainresult.getElementsByTagName", "logging.getLogger", "kwargs.items", "log.warning", "result.getAttribute", "tldresult.getElementsByTagName", "log.error", "categories.append", "e.firstChild", "salt.utils", "key.startswith", "domains.append", "tlds.append", "e.getElementsByTagName", "subcategories.getElementsByTagName"]}, "namecheap_domains_dns.py": {"libraries": ["salt.utils.namecheap"], "function_names": ["set_default", "set_hosts", "set_custom", "__virtual__", "get_list", "get_hosts"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["response_xml.getElementsByTagName", "salt.utils", "dnsresult.getAttribute"]}, "namecheap_domains_ns.py": {"libraries": ["salt.utils.namecheap"], "function_names": ["delete", "create", "get_info", "update", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["response_xml.getElementsByTagName", "domainnsdeleteresult.getAttribute", "domainnsupdateresult.getAttribute", "salt.utils", "domainnscreateresult.getAttribute"]}, "namecheap_ssl.py": {"libraries": ["logging", "salt.utils.stringutils", "salt.utils.namecheap", "salt.utils.files"], "function_names": ["renew", "create", "reissue", "get_info", "activate", "parse_csr", "__virtual__", "__get_certificates", "get_list"], "function_calls": ["__get_certificates", "str", "Exception"], "class_names": [], "class_method_calls": ["response_xml.getElementsByTagName", "validation_tag.getAttribute", "logging.getLogger", "csr_handle.read", "kwargs.items", "sslresult.getElementsByTagName", "log.error", "sslcreateresult.getElementsByTagName", "ssllistresult.getElementsByTagName", "result.append", "salt.utils", "result.update", "validation_tag.getElementsByTagName"]}, "namecheap_users.py": {"libraries": ["salt.utils.namecheap"], "function_names": ["__virtual__", "get_balances", "check_balances"], "function_calls": ["get_balances", "float"], "class_names": [], "class_method_calls": ["response_xml.getElementsByTagName", "salt.utils"]}, "napalm_bgp.py": {"libraries": ["logging", "salt.utils.napalm", "salt.utils.napalm.proxy_napalm_wrap"], "function_names": ["__virtual__", "config", "neighbors"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "napalm_formula.py": {"libraries": ["salt.defaults.DEFAULT_TARGET_DELIM", "salt.utils.data.traverse_dict_and_list", "salt.utils.dictupdate", "logging", "fnmatch", "salt.utils.napalm", "copy"], "function_names": ["dictupdate", "traverse", "container_path", "setval", "defaults", "__virtual__", "render_field", "render_fields", "_container_path"], "function_calls": ["len", "traverse", "setval", "render_field", "_container_path", "_traverse_dict_and_list", "list"], "class_names": [], "class_method_calls": ["fnmatch.fnmatch", "default_path.split", "logging.getLogger", "copy.deepcopy", "field.replace", "model_path.split", "results.append", "salt.utils", "key.split", "log.debug", "model.items"]}, "napalm_mod.py": {"libraries": ["salt.exceptions.CommandExecutionError", "netmiko.BaseConnection", "logging", "salt.utils.decorators.depends", "salt.utils.napalm", "ciscoconfparse", "scp", "jxmlease", "salt.utils.napalm.proxy_napalm_wrap", "napalm.base.netmiko_helpers"], "function_names": ["_inject_junos_proxy", "junos_commit", "netmiko_conn", "scp_get", "junos_cli", "pyeapi_nxos_api_args", "config_merge_tree", "config_diff_text", "config_merge_text", "config_find_lines", "compliance_report", "scp_put", "netmiko_commands", "pyeapi_conn", "junos_install_os", "config_tree", "netmiko_fun", "__virtual__", "reconnect", "pyeapi_run_commands", "config_lines_wo_child", "nxos_api_config", "_pyeapi_conn", "junos_call", "junos_rpc", "nxos_api_show", "pyeapi_config", "config_merge_diff", "netmiko_args", "netmiko_multi_call", "config_diff_tree", "netmiko_call", "netmiko_config", "alive", "junos_facts", "pyeapi_call", "call", "junos_copy_file", "_get_netmiko_args", "rpc", "_junos_prep_fun", "_netmiko_conn", "nxos_api_rpc", "config_lines_w_child", "config_filter_lines", "_ret_device"], "function_calls": ["_inject_junos_proxy", "depends", "pyeapi_nxos_api_args", "_get_netmiko_args", "netmiko_args", "_junos_prep_fun", "_netmiko_conn", "dict", "CommandExecutionError", "alive", "_pyeapi_conn", "zip", "ValueError"], "class_names": [], "class_method_calls": ["kwargs.update", "kwargs.items", "__opts__.get", "prev_kwargs.update", "napalm_map.get", "netmiko_device_type_map.update", "default_ret.update", "BaseConnection.__init__", "log.debug", "netmiko_args.pop", "optional_args.get", "napalm_map.update", "log.info", "netmiko_argument_map.pop", "logging.getLogger", "ret.append", "netmiko_argument_map.items", "karg.startswith", "rpc_ret.pop", "is_alive.get", "conn.send_command", "salt.utils", "napalm.base"]}, "napalm_netacl.py": {"libraries": ["capirca", "capirca.lib.aclgenerator", "logging", "capirca.aclgen", "salt.utils.napalm", "capirca.lib.policy", "salt.utils.napalm.proxy_napalm_wrap"], "function_names": ["get_filter_pillar", "load_policy_config", "load_filter_config", "get_term_pillar", "__virtual__", "load_term_config", "_get_capirca_platform"], "function_calls": ["_get_capirca_platform"], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "napalm_network.py": {"libraries": ["time", "logging", "salt.utils.versions", "salt.utils.napalm", "datetime", "salt.utils.files", "salt.utils.templates", "jxmlease"], "function_names": ["commit", "config", "environment", "_safe_commit_config", "cancel_commit", "mac", "arp", "replace_pattern", "blockreplace", "__virtual__", "_filter_list", "_safe_dicard_config", "ping", "confirm_commit", "interfaces", "rollback", "_explicit_close", "optics", "ipaddrs", "load_config", "_config_logic", "save_config", "connected", "lldp", "discard_config", "config_changed", "config_control", "_filter_dict", "facts", "compare_config", "load_template", "traceroute", "patch", "cli"], "function_calls": ["commit", "_safe_commit_config", "dict", "cancel_commit", "enumerate", "list", "int", "_filter_list", "_safe_dicard_config", "rollback", "str", "_explicit_close", "save_config", "discard_config", "isinstance", "len", "config_changed", "compare_config", "_config_logic"], "class_names": [], "class_method_calls": ["time.time", "template_hash.startswith", "__opts__.get", "try_commit.get", "_loaded.update", "loaded_result.get", "output_list.append", "proxy_output.get", "lldp_neighbors.get", "confirmed.pop", "fp_.write", "raw_cli_outputs.get", "context.update", "__pillar__.get", "command_output.strip", "log.debug", "loaded_result.pop", "kwargs.get", "try_compare.get", "_compare.get", "_commit.get", "log.error", "fh_.read", "log.info", "napalm_device.get", "_discarded.get", "logging.getLogger", "dictionary.get", "input_dict.items", "proxy_output.update", "fh_.write", "template_name.startswith", "salt.utils", "datetime.datetime", "try_rollback.get"]}, "napalm_ntp.py": {"libraries": ["logging", "salt.utils.napalm", "salt.utils.napalm.proxy_napalm_wrap"], "function_names": ["stats", "set_peers", "delete_servers", "set_servers", "servers", "peers", "__virtual__", "delete_peers"], "function_calls": ["list"], "class_names": [], "class_method_calls": ["options.pop", "logging.getLogger", "proxy_output.get", "ntp_servers.get", "proxy_output.update", "ntp_peer.get", "ntp_peers.get", "salt.utils"]}, "napalm_probes.py": {"libraries": ["logging", "salt.utils.napalm", "salt.utils.napalm.proxy_napalm_wrap"], "function_names": ["config", "schedule_probes", "__virtual__", "delete_probes", "results", "set_probes"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "napalm_route.py": {"libraries": ["logging", "salt.utils.napalm", "salt.utils.napalm.proxy_napalm_wrap"], "function_names": ["__virtual__", "show"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "napalm_snmp.py": {"libraries": ["logging", "salt.utils.napalm", "salt.utils.napalm.proxy_napalm_wrap"], "function_names": ["__virtual__", "config", "update_config", "remove_config"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "napalm_users.py": {"libraries": ["logging", "salt.utils.napalm", "salt.utils.napalm.proxy_napalm_wrap"], "function_names": ["__virtual__", "config", "set_users", "delete_users"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "napalm_yang_mod.py": {"libraries": ["logging", "napalm_yang", "salt.utils.napalm", "salt.utils.napalm.proxy_napalm_wrap"], "function_names": ["parse", "diff", "_get_root_object", "get_config", "__virtual__", "load_config", "compliance_report"], "function_calls": ["hasattr", "getattr", "_get_root_object", "get_config", "isinstance"], "class_names": [], "class_method_calls": ["first.load_dict", "__grains__.get", "root.compliance_report", "kwargs.pop", "napalm_yang.base", "log.debug", "model.split", "root.translate_config", "root.parse_config", "root.parse_state", "napalm_device.get", "root.add_model", "napalm_device.profile", "logging.getLogger", "second.load_dict", "salt.utils", "root.load_dict", "root.to_dict", "napalm_yang.utils"]}, "netaddress.py": {"libraries": ["netaddr"], "function_names": ["list_cidr_ips", "list_cidr_ips_ipv6", "cidr_netmask", "__virtual__", "cidr_broadcast"], "function_calls": ["str", "list"], "class_names": [], "class_method_calls": ["netaddr.IPNetwork", "ip.ipv6", "ips.netmask", "ips.broadcast"]}, "netbox.py": {"libraries": ["salt.utils.http", "logging", "salt.utils.url", "salt._compat.ipaddress"], "function_names": ["_get_interfaces", "_get_virtual_machines", "_get_connected_devices", "_get_interface_ips", "_get_site_details", "_get_site_prefixes", "ext_pillar", "_associate_ips_to_interfaces", "_get_proxy_details", "_get_devices"], "function_calls": ["len", "_get_interfaces", "_get_connected_devices", "_get_virtual_machines", "_get_interface_ips", "_get_site_details", "_get_site_prefixes", "int", "str", "_associate_ips_to_interfaces", "_get_proxy_details", "dict", "_get_devices"], "class_names": [], "class_method_calls": ["device_results.extend", "vm_results.extend", "device_short.keys", "logging.getLogger", "kwargs.get", "ipaddress.ip_interface", "log.error", "interface_ips_results.extend", "connected_devices_ids.append", "int_short.keys", "log.info", "nodes.extend", "interfaces_results.extend", "salt.utils", "log.debug", "site_prefixes_results.extend"]}, "netbsd_sysctl.py": {"libraries": ["os", "salt.exceptions.CommandExecutionError", "salt.utils.data", "re", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["get", "assign", "show", "__virtual__", "persist"], "function_calls": ["len", "any", "str", "assign", "CommandExecutionError"], "class_names": [], "class_method_calls": ["out.splitlines", "re.match", "nlines.append", "new_value.split", "line.split", "m.group", "ofile.writelines", "salt.utils", "os.path", "line.startswith", "re.split", "rest.split", "rest.startswith", "msg.format"]}, "netbsdservice.py": {"libraries": ["glob", "fnmatch", "os", "re"], "function_names": ["available", "disabled", "_get_svc_list", "get_enabled", "enabled", "get_all", "reload_", "__virtual__", "get_disabled", "stop", "disable", "_get_svc", "enable", "missing", "_rcconf_status", "start", "status", "force_reload", "restart"], "function_calls": ["bool", "sorted", "_get_svc", "set", "_get_svc_list", "_rcconf_status", "get_all"], "class_names": [], "class_method_calls": ["glob.glob", "rcvar.startswith", "fnmatch.filter", "re.search", "os.path", "rcvar.split", "ret.add"]}, "netmiko_mod.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.utils.platform", "netmiko.BaseConnection", "salt.utils.args.clean_kwargs", "netmiko.ConnectHandler", "logging"], "function_names": ["commit", "call", "multi_call", "send_config", "_prepare_connection", "send_command", "enter_config_mode", "__virtual__", "get_connection", "send_command_timing", "exit_config_mode"], "function_calls": ["call", "getattr", "_prepare_connection", "clean_kwargs", "CommandExecutionError", "ConnectHandler", "isinstance"], "class_names": [], "class_method_calls": ["line.strip", "conn.commit", "file_str.splitlines", "logging.getLogger", "ret.append", "netmiko_kwargs.update", "conn.send_config_set", "method.get", "conn.is_alive", "conn.disconnect", "BaseConnection.__init__", "salt.utils", "netmiko_kwargs.items", "netmiko_init_args.pop"]}, "netscaler.py": {"libraries": ["nsnitro.nsresources.nsservice.NSService", "salt.utils.platform", "nsnitro.nsexceptions.NSNitroError", "logging", "nsnitro.nsresources.nslbvserver.NSLBVServer", "nsnitro.nsresources.nssslvserversslcertkeybinding.NSSSLVServerSSLCertKeyBinding", "nsnitro.nsresources.nslbvserverservicegroupbinding.NSLBVServerServiceGroupBinding", "nsnitro.nsresources.nsservicegroup.NSServiceGroup", "nsnitro.nsresources.nsserver.NSServer", "nsnitro.nsresources.nsservicegroupserverbinding.NSServiceGroupServerBinding", "nsnitro.nsnitro.NSNitro"], "function_names": ["servicegroup_server_up", "server_enable", "service_enable", "server_add", "vserver_sslcert_exists", "servicegroup_server_add", "servicegroup_add", "_vserver_get", "servicegroup_server_disable", "service_up", "_connect", "_disconnect", "__virtual__", "vserver_delete", "server_delete", "servicegroup_server_enable", "vserver_add", "server_update", "_servicegroup_get", "_vserver_sslcert_get", "_vserver_servicegroup_get", "server_disable", "_service_get", "vserver_servicegroup_add", "_servicegroup_get_servers", "servicegroup_server_exists", "_servicegroup_get_server", "vserver_sslcert_delete", "vserver_servicegroup_delete", "service_disable", "servicegroup_delete", "servicegroup_exists", "_server_get", "server_exists", "vserver_sslcert_add", "__connarg", "vserver_exists", "server_enabled", "servicegroup_server_delete", "vserver_servicegroup_exists", "service_exists"], "function_calls": ["NSLBVServer", "vserver_sslcert_exists", "dict", "NSSSLVServerSSLCertKeyBinding", "NSServiceGroup", "NSLBVServerServiceGroupBinding", "NSServer", "_vserver_get", "_connect", "_disconnect", "_servicegroup_get", "_vserver_sslcert_get", "_vserver_servicegroup_get", "_service_get", "_servicegroup_get_servers", "_servicegroup_get_server", "len", "NSService", "servicegroup_exists", "_server_get", "server_exists", "__connarg", "vserver_exists", "vserver_servicegroup_exists", "NSServiceGroupServerBinding", "NSNitro"], "class_names": [], "class_method_calls": ["NSServiceGroupServerBinding.delete", "NSLBVServerServiceGroupBinding.add", "NSServiceGroup.delete", "NSServer.delete", "name.startswith", "sg.set_servicegroupname", "sslcert.get_certkeyname", "salt.utils", "alt_server.set_ipaddress", "sg_type.upper", "service.set_name", "NSServiceGroup.get_servers", "NSService.enable", "sgsb.set_servername", "NSLBVServerServiceGroupBinding.delete", "server.set_state", "server.get_svrstate", "vsg.get_servicegroupname", "sslcert.set_certkeyname", "sgsb.set_servicegroupname", "NSServer.update", "NSLBVServer.add", "NSServer.enable", "sg.get_servicetype", "vserver.get_port", "NSServer.disable", "NSSSLVServerSSLCertKeyBinding.get", "s_state.upper", "server.set_ipaddress", "NSServiceGroup.get", "server.set_name", "server.get_servername", "NSServer.get", "server.get_state", "sslcert.set_vservername", "NSServer.add", "log.debug", "service.get_svrstate", "v_type.upper", "server.get_port", "NSServiceGroup.disable_server", "nitro.login", "vsg.set_servicegroupname", "NSServiceGroup.add", "NSService.disable", "sg.set_servicetype", "alt_server.set_name", "sgsb.set_port", "NSSSLVServerSSLCertKeyBinding.add", "service.set_delay", "NSSSLVServerSSLCertKeyBinding.delete", "nitro.logout", "NSLBVServer.get", "vserver.set_port", "logging.getLogger", "NSService.get", "NSServiceGroupServerBinding.add", "vserver.set_ipv46", "vserver.get_servicetype", "cur_server.get_ipaddress", "NSLBVServer.delete", "vserver.get_ipv46", "vserver.set_name", "NSServiceGroup.enable_server", "server.get_ipaddress", "vserver.set_servicetype", "vsg.set_name", "NSLBVServerServiceGroupBinding.get"]}, "network.py": {"libraries": ["ctypes", "itertools", "os", "salt.utils.stringutils", "salt.utils.win_network", "salt.utils.files", "ctypes.util", "shutil", "salt.exceptions.SaltSystemExit", "string.ascii_letters", "fnmatch", "salt.utils.args", "types", "random", "socket", "re", "string.digits", "salt._compat.ipaddress", "logging", "salt.utils.versions.Version", "salt.exceptions.SaltClientError", "salt.utils.path", "salt.utils.platform", "salt.utils.decorators.jinja.jinja_filter", "subprocess", "collections.abc.Mapping", "platform", "collections.abc.Sequence"], "function_names": ["_generate_minion_id", "_ip_options_private", "active_tcp", "_network_hosts", "cidr_to_ipv4_netmask", "get_net_start", "extend", "network_size", "_interfaces_ifconfig", "_ip_networks", "_netbsd_remotes_on", "_junos_interfaces_ifconfig", "_get_ips", "is_ipv4_filter", "is_ipv6", "ipaddr", "isportopen", "win_interfaces", "first", "parse_host_port", "ipwrap", "host_to_ips", "__init__", "generate_minion_id", "_hw_addr_aix", "netbsd_interfaces", "_ip_options_multicast", "rpad_ipv4_network", "_linux_remotes_on", "parse_network", "ipv4", "_aix_remotes_on", "_filter", "gen_mac", "get_socket", "mac_str_to_bytes", "_parse_tcp_line", "_is_ipv", "_ip_options_unspecified", "_filter_ipaddr", "interface", "local_port_tcp", "_sunos_remotes_on", "is_loopback", "filter_by_networks", "is_ipv6_subnet", "junos_interfaces", "__call__", "_netbsd_interfaces_ifconfig", "network_hosts", "_ip_options_global", "_number_of_set_bits", "_number_of_set_bits_to_ipv4_netmask", "_ipv4_to_bits", "is_reachable_host", "_ip_options_site_local", "_get_iface_info", "_subnets", "get_fqhostname", "linux_interfaces", "ip_to_host", "_ip_addrs", "_ip_options", "in_subnet", "ip_addrs", "is_ipv6_filter", "is_subnet", "_windows_remotes_on", "clear", "interfaces", "mac2eui64", "is_ipv4", "subnets", "ip_addrs6", "_freebsd_remotes_on", "ip_networks6", "refresh_dns", "sanitize_host", "_test_addrs", "ip_host", "ip_networks", "is_ip", "filter", "_openbsd_remotes_on", "subnets6", "hw_addr", "_interfaces_ip", "hex2ip", "_interfaces_ipconfig", "_network_size", "get_net_size", "_ip_options_reserved", "_ip_options_link_local", "_ipv_filter", "interface_ip", "remote_port_tcp", "ip_bracket", "natural_ipv4_netmask", "is_ip_filter", "_filter_interfaces", "_netlink_tool_remote_on", "_remotes_on", "dns_check", "calc_net", "_ip_options_loopback", "ipv6", "append", "is_ipv4_subnet"], "function_calls": ["_generate_minion_id", "any", "_network_hosts", "cidr_to_ipv4_netmask", "_interfaces_ifconfig", "_ip_networks", "_netbsd_remotes_on", "str", "Interfaces", "_junos_interfaces_ifconfig", "_get_ips", "bool", "is_ipv4_filter", "is_ipv6", "iter", "ipaddr", "win_interfaces", "_hw_addr_aix", "netbsd_interfaces", "list", "_linux_remotes_on", "parse_network", "bin", "ipv4", "_aix_remotes_on", "jinja_filter", "_filter", "DistinctList", "_parse_tcp_line", "_is_ipv", "_filter_ipaddr", "_sunos_remotes_on", "is_ipv6_subnet", "junos_interfaces", "ValueError", "len", "_netbsd_interfaces_ifconfig", "hex", "RES_INIT", "_ipv4_to_bits", "_number_of_set_bits_to_ipv4_netmask", "_get_iface_info", "_subnets", "sorted", "linux_interfaces", "Version", "fun", "_ip_addrs", "int", "type", "_ip_options", "ip_addrs", "is_ipv6_filter", "_windows_remotes_on", "interfaces", "range", "is_ipv4", "ip_addrs6", "_freebsd_remotes_on", "refresh_dns", "tuple", "sanitize_host", "_test_addrs", "SaltClientError", "SaltSystemExit", "_openbsd_remotes_on", "super", "dict", "hex2ip", "_interfaces_ip", "next", "_network_size", "set", "_ipv_filter", "ip_bracket", "_filter_interfaces", "_netlink_tool_remote_on", "_remotes_on", "isinstance", "bytes", "ipv6", "is_ipv4_subnet"], "class_names": ["Interfaces", "DistinctList"], "class_method_calls": ["addrs.extend", "mmask.group", "intf.network", "ip_obj.is_reserved", "mmask6.group", "ret.add", "s.settimeout", "hosts.extend", "mbcast.group", "ip_obj.is_private", "sock.connect_ex", "address.ipv4_mapped", "ip_obj.is_multicast", "options.split", "re.compile", "LIBC.__res_init", "remote.pop", "iface_info.get", "ifaces.values", "addr.is_loopback", "socket.AF_INET", "itertools.chain", "socket.gethostname", "socket.gethostbyaddr", "socket.getfqdn", "line.startswith", "ipv6scope.lower", "self.filter", "hosts.first", "addr.lstrip", "remote.rsplit", "net.prefixlen", "_get_interfaces.clear", "socket.AF_INET6", "_s_.count", "hosts.append", "value.split", "salt.utils", "self.append", "ip_addr.split", "ctypes.cdll", "types.GeneratorType", "line.split", "ifaces.items", "subprocess.Popen", "ipaddr.split", "log.warning", "ip_obj.is_loopback", "group.splitlines", "socket.getaddrinfo", "re.match", "pmask.match", "socket.socket", "ret.extend", "ctypes.util", "shutil.which", "self.interfaces", "socket.SOL_TCP", "ip_obj.is_site_local", "ip_obj.version", "os.uname", "cmd.split", "socket.gaierror", "attrs.split", "ipaddress._BaseAddress", "subprocess.check_output", "exc.returncode", "log.error", "ex.returncode", "remotes.add", "platform.node", "remote_host.strip", "socket.SOCK_STREAM", "addr.get", "os.path", "type_.startswith", "pmac.match", "intf.is_loopback", "pip.match", "ip_net.is_loopback", "ipaddress.ip_address", "mmac.group", "mask.split", "s.close", "subprocess.PIPE", "line.strip", "miface.group", "socket.AF_UNSPEC", "binary_str.rstrip", "ipaddress.IPv6Network", "data.items", "cols.index", "expand_mac.append", "local.split", "options_fun_map.items", "ips.append", "self.localhost_matchers", "iface_info.keys", "val.strip", "subprocess.STDOUT", "bits.startswith", "subprocess.CalledProcessError", "mip6.group", "out.splitlines", "ret.append", "ipaddress.ip_interface", "_s_.partition", "key.strip", "os.getenv", "addr.rstrip", "re.findall", "address.compressed", "addr.extend", "ip_obj.is_unspecified", "ipaddress.AddressValueError", "adapter_iface_regex.search", "x.netmask", "socket.SOCK_RAW", "x.prefixlen", "ipaddress.IPv4Network", "socket.IPPROTO_IP", "option.strip", "addr.version", "val.rstrip", "net.network_address", "ipaddress.ip_network", "pmask6.match", "ip_addrs.append", "x.network_address", "remote.split", "log.debug", "s.connect", "x.num_addresses", "local.pop", "local.rsplit", "_s_.lstrip", "mip.group", "piface.match", "random.randint", "ipaddress.IPv6Address", "socket.AI_CANONNAME", "re.sub", "ip_addr.append", "ip_info.get", "fnmatch.fnmatch", "pip6.match", "logging.getLogger", "rhost.strip", "match.groups", "ip_obj.is_link_local", "pbcast.match", "mac_str.replace", "pupdown.search", "itertools.islice"]}, "neutron.py": {"libraries": ["neutronclient.v2_0.client", "neutronclient.shell.NeutronShell", "salt.exceptions", "logging", "salt.utils.versions", "keystoneauth1.loading", "keystoneauth1.session"], "function_names": ["remove_interface_router", "_old_init", "_fetch", "list_l3_agent_hosting_routers", "_fetch_vpnservice", "delete_firewall_rule", "check_neutron", "show_security_group", "show_ipsec_site_connection", "_find_vpnservice_id", "list_ikepolicies", "_fetch_firewall_rule", "delete_quota", "show_floatingip", "show_ikepolicy", "delete_port", "_fetch_ikepolicy", "delete_subnet", "show_router", "list_security_groups", "create_firewall_rule", "delete_router", "get_quotas_tenant", "_fetch_network", "_fetch_ipsec_site_connection", "update_firewall_rule", "list_firewall_rules", "list_networks", "_find_security_group_id", "list_firewalls", "__init__", "update_floatingip", "_fetch_ipsecpolicy", "create_security_group", "delete_security_group_rule", "delete_ipsecpolicy", "_find_ikepolicy_id", "add_interface_router", "list_security_group_rules", "delete_vpnservice", "show_vpnservice", "show_subnet", "_fetch_router", "update_quota", "create_router", "show_firewall", "_find_ipsecpolicy_id", "show_ipsecpolicy", "list_ipsecpolicies", "create_ipsecpolicy", "delete_floatingip", "check_keystone", "update_router", "update_subnet", "delete_ipsec_site_connection", "list_vpnservices", "list_subnets", "show_firewall_rule", "create_subnet", "update_vpnservice", "update_port", "_find_ipsec_site_connection_id", "list_ipsec_site_connections", "create_port", "list_routers", "create_security_group_rule", "_new_init", "create_ipsec_site_connection", "create_network", "list_ports", "create_ikepolicy", "_fetch_firewall", "list_extensions", "create_vpnservice", "_find_port_id", "_find_firewall_rule_id", "add_gateway_router", "delete_security_group", "list_floatingips", "_find_network_id", "_find_subnet_id", "list_quotas", "show_port", "show_security_group_rule", "_fetch_port", "_fetch_subnet", "update_network", "remove_gateway_router", "create_floatingip", "list_agents", "_fetch_security_group", "_find_router_id", "delete_network", "show_quota", "show_network", "sanitize_neutronclient", "update_security_group", "delete_ikepolicy"], "function_calls": ["len", "all", "sanitize_neutronclient"], "class_names": ["SaltNeutron"], "class_method_calls": ["self.list_ipsec_site_connections", "self.list_firewall_rules", "self._new_init", "client.Client", "self.list_security_groups", "kwargs.keys", "self._fetch_ipsecpolicy", "self.list_networks", "self._find_ikepolicy_id", "auth_url.endswith", "self._fetch_ipsec_site_connection", "self.list_vpnservices", "resource.get", "self._find_subnet_id", "self._find_ipsecpolicy_id", "self._find_security_group_id", "self.get_quotas_tenant", "auth.copy", "self._fetch_firewall_rule", "self.list_subnets", "self._old_init", "self.client_kwargs", "self._fetch_network", "self.list_ikepolicies", "self._find_router_id", "self._fetch_port", "self._find_firewall_rule_id", "self.list_routers", "loader.load_from_options", "self.list_ipsecpolicies", "kwargs.get", "self.list_firewalls", "self._fetch_vpnservice", "self.kwargs", "kwargs.copy", "self._find_ipsec_site_connection_id", "self._fetch_firewall", "self._fetch", "self.network_conn", "self._fetch_security_group", "self.list_ports", "self._fetch_ikepolicy", "logging.getLogger", "ret.append", "self._find_network_id", "self._fetch_subnet", "keystoneauth1.session", "self._find_port_id", "keystoneauth1.loading", "exceptions.MinionError", "self.session", "salt.utils", "self._find_vpnservice_id", "self._fetch_router"]}, "neutronng.py": {"libraries": ["shade"], "function_names": ["security_group_create", "_clean_kwargs", "network_get", "list_subnets", "setup_clouds", "network_create", "subnet_update", "__virtual__", "network_delete", "subnet_get", "subnet_create", "security_group_delete", "security_group_rule_create", "get_openstack_cloud", "security_group_update", "security_group_get", "subnet_delete", "security_group_rule_delete", "get_operator_cloud", "compare_changes", "list_networks"], "function_calls": ["get_operator_cloud", "get_openstack_cloud", "_clean_kwargs"], "class_names": [], "class_method_calls": ["cloud.update_security_group", "cloud.delete_network", "obj.items", "cloud.create_security_group_rule", "kwargs.pop", "cloud.create_security_group", "cloud.create_subnet", "cloud.list_subnets", "cloud.delete_security_group_rule", "cloud.update_subnet", "cloud.get_network", "cloud.get_subnet", "shade.operator_cloud", "cloud.create_network", "cloud.get_security_group", "shade.openstack_cloud", "cloud.list_networks", "cloud.delete_security_group", "cloud.delete_subnet"]}, "nexus.py": {"libraries": ["logging"], "function_names": ["__virtual__", "__fetch_from_nexus", "downloaded"], "function_calls": ["str", "__fetch_from_nexus"], "class_names": [], "class_method_calls": ["log.debug", "version.endswith", "logging.getLogger"]}, "nfs3.py": {"libraries": ["salt.utils.path", "logging", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["list_exports", "del_export", "__virtual__", "add_export", "_write_exports", "reload_exports"], "function_calls": ["list_exports", "_write_exports", "TypeError", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "line.split", "perm.startswith", "salt.utils", "newshares.append", "efh.write", "line.startswith", "perm.split", "efl.read"]}, "nftables.py": {"libraries": ["logging", "salt.state.STATE_INTERNAL_KEYWORDS"], "function_names": ["chain_present", "delete", "flush", "table_present", "__virtual__", "chain_absent", "append", "insert", "set_policy", "table_absent"], "function_calls": [], "class_names": [], "class_method_calls": ["kwargs.get", "logging.getLogger", "flush_chain.strip", "command.strip"]}, "nginx.py": {"libraries": ["urllib.request", "re", "salt.utils.decorators", "salt.utils.path"], "function_names": ["status", "version", "configtest", "__virtual__", "signal", "__detect_os", "build_info"], "function_calls": ["len", "__detect_os", "int"], "class_names": [], "class_method_calls": ["decorators.memoize", "status_data.splitlines", "out.splitlines", "i.startswith", "resp.close", "resp.read", "re.findall", "urllib.request", "salt.utils"]}, "nilrt_ip.py": {"libraries": ["time", "dbus", "os", "pyiface.ifreqioctls.IFF_RUNNING", "re", "configparser", "salt.exceptions", "logging", "pyiface", "salt.utils.validate.net", "salt.utils.files", "requests.structures.CaseInsensitiveDict", "pyconnman", "pyiface.ifreqioctls.IFF_LOOPBACK"], "function_names": ["_get_services", "_load_config", "_interface_to_service", "_get_interface_info", "down", "_get_adapter_mode_info", "apply_network_settings", "set_static_all", "get_interface", "_get_state", "build_network_settings", "_assume_condition", "_change_state", "_restart", "_get_dns_info", "set_dhcp_only_all", "_change_state_legacy", "_get_technologies", "_get_base_interface_info", "_get_possible_adapter_modes", "_connected", "__virtual__", "set_dhcp_linklocal_all", "disable", "set_ethercat", "get_interfaces_details", "up", "_save_config", "enable", "_get_tcpip_interface_info", "_remove_quotes", "get_network_settings", "_get_info", "_dict_to_string", "set_linklocal_only_all", "_validate_ipv4", "build_interface", "_space_delimited_list", "_get_static_info", "_configure_static_interface", "_change_dhcp_config", "_get_ethercat_interface_info", "_get_request_mode_info", "_get_service_info"], "function_calls": ["_get_services", "_load_config", "_interface_to_service", "down", "any", "_get_adapter_mode_info", "sorted", "set_static_all", "get_interface", "_get_state", "_assume_condition", "_change_state", "RuntimeError", "_restart", "_get_dns_info", "list", "_change_state_legacy", "int", "_get_base_interface_info", "_get_possible_adapter_modes", "set_dhcp_linklocal_all", "all", "disable", "range", "up", "get_interfaces_details", "_save_config", "enable", "str", "_get_tcpip_interface_info", "isinstance", "len", "_dict_to_string", "_validate_ipv4", "hasattr", "_space_delimited_list", "_get_static_info", "_configure_static_interface", "_change_dhcp_config", "_get_ethercat_interface_info", "_get_request_mode_info", "_get_service_info", "map"], "class_names": [], "class_method_calls": ["nameservers.append", "pyiface.Interface", "time.sleep", "service_info.get_property", "value.split", "dictionary.items", "line.split", "interface.sockaddrToStr", "parser.set", "interface.name", "hwaddr.split", "log.warning", "value.get", "re.MULTILINE", "route_file.read", "changes.append", "pyconnman.ConnManager", "pyconnman.ConnService", "config_parser.getunquoted", "parser.add_section", "x.name", "match.group", "pyiface.getIfaces", "configparser.ConfigParser", "blacklist.get", "parser.readfp", "ipv4_info.get", "os.readlink", "parser.optionxform", "dns_info.readlines", "re.compile", "interface.netmask", "dns_list.append", "interface.addr", "dbus.String", "pattern.search", "interface.hwaddr", "settings.get", "service.get_property", "parser.write", "salt.exceptions", "dbus.DBusException", "config_parser.readfp", "configparser.MissingSectionHeaderError", "service.set_property", "line.startswith", "settings.items", "parser.remove_section", "nameservers.split", "logging.getLogger", "ret.splitlines", "settings.append", "configparser.RawConfigParser", "uevent_file.readlines", "ipv6_info.get", "os.path", "parser.has_section", "salt.utils", "info.lower", "serv.append", "interface.flags"]}, "nix.py": {"libraries": ["itertools", "os", "salt.utils.path", "logging", "salt.utils.itertools"], "function_names": ["_output_format", "_zip_flatten", "collect_garbage", "upgrade", "_strip_quotes", "_format_upgrade", "uninstall", "_nix_collect_garbage", "__virtual__", "install", "list_pkgs", "_nix_env", "_run", "_quietnix"], "function_calls": ["_zip_flatten", "_strip_quotes", "_format_upgrade", "_nix_collect_garbage", "_nix_env", "zip", "list", "_run", "_quietnix"], "class_names": [], "class_method_calls": ["itertools.repeat", "logging.getLogger", "kwargs.get", "s.startswith", "p.append", "cmd.extend", "os.path", "s.strip", "itertools.chain", "s.split", "salt.utils", "cmd.append"]}, "nova.py": {"libraries": ["novaclient.shell.OpenStackComputeShell", "time", "salt.utils.cloud", "salt.utils.versions.Version", "novaclient.base", "novaclient", "novaclient.client", "logging", "keystoneauth1.loading", "keystoneauth1.session", "inspect", "novaclient.exceptions", "salt.utils.files", "salt.exceptions.SaltCloudSystemExit", "novaclient.extension", "novaclient.utils", "novaclient.auth_plugin"], "function_names": ["delete", "network_show", "_old_init", "suspend", "floating_ip_show", "keypair_list", "__init__", "flavor_create", "volume_list", "volume_attach", "root_password", "_volume_get", "keypair_add", "_v3_setup", "get_endpoint_url_v3", "boot", "keypair_delete", "network_list", "network_create", "secgroup_delete", "image_list", "_parse_block_device_mapping_v2", "image_meta_set", "expand_extensions", "floating_ip_associate", "floating_ip_list", "_item_list", "volume_create", "_v2_setup", "get_catalog", "__str__", "resume", "floating_ip_disassociate", "lock", "server_list_detailed", "get_entry", "server_by_name", "floating_ip_create", "floating_ip_delete", "server_list_min", "virtual_interface_list", "_new_init", "flavor_delete", "server_show", "volume_delete", "_sanatize_network_params", "sanatize_novaclient", "secgroup_create", "check_nova", "volume_show", "volume_detach", "show_instance", "virtual_interface_create", "secgroup_list", "server_list", "get_entry_multi", "server_show_libcloud", "flavor_list", "image_meta_delete", "floating_ip_pool_list", "_server_uuid_from_name", "image_show", "_network_show"], "function_calls": ["NovaServer", "Version", "get_endpoint_url_v3", "list", "SaltCloudSystemExit", "next", "OpenStackComputeShell", "_parse_block_device_mapping_v2", "setattr", "all", "str", "get_entry", "isinstance", "sanatize_novaclient", "hasattr", "getattr", "check_nova", "iter", "KwargsStruct"], "class_names": ["NovaServer", "SaltNova", "KwargsStruct"], "class_method_calls": ["image.id", "item.rules", "self.image", "nt_ks.volumes", "image.created", "volume.display_description", "self.size", "keys.split", "self.compute_conn", "nt_ks.networks", "image.metadata", "item.metadata", "image.links", "server.remove_floating_ip", "keypair.name", "item.created", "loader.load_from_options", "image.minDisk", "connection.__dict__", "kwargs.get", "servers.items", "value.__class__", "self.volume_conn", "self.volume_list", "item.accessIPv4", "volume.display_name", "self.extra", "novaclient.base", "self.server_show", "nt_ks.floating_ips", "flavor.links", "flavor.swap", "keystoneauth1.session", "novaclient.exceptions", "salt.utils", "self._uuid", "flavor.rxtx_factor", "conn.client", "self.floating_ips", "self.private_ips", "nt_ks.floating_ip_pools", "pool.name", "extension.run_hooks", "auth_url.endswith", "self.password", "server.add_floating_ip", "bdm.append", "flavor.name", "floating_ip.instance_id", "server_.__dict__", "nt_ks.items", "self.client_kwargs", "item.status", "network.__dict__", "self._volume_get", "item.__dict__", "flavor.id", "self.floating_ip_list", "log.error", "self.kwargs", "kwargs.copy", "self.kwargstruct", "item.key_name", "server_info.keys", "self.volume_show", "floating_ip.pool", "self.uuid", "item.image", "net.__dict__", "nt_ks.keypairs", "floating_ip.fixed_ip", "item.id", "addr.get", "keypair.public_key", "item.accessIPv6", "item.addresses", "extension.manager_class", "self._new_init", "nt_ks.flavors", "server_info.values", "nt_ks.virtual_interfaces", "server.id", "response.id", "nt_ks.security_groups", "item.updated", "self.floating_ip_show", "item.description", "kwargs.pop", "flavor.vcpus", "self._old_init", "item.name", "self.network_show", "self._v2_setup", "novaclient.auth_plugin", "image.progress", "self.version", "image.updated", "net.label", "self.fixed_ips", "item.flavor", "keypair.fingerprint", "self._network_show", "ret.append", "self.server_list", "self.public_ips", "self.id", "client.discover_extensions", "fp_.read", "bdm_dict.get", "keystoneauth1.loading", "floating_ip.id", "self.__dict__", "self.extensions", "extension.module", "time.sleep", "time.time", "self.addresses", "self.catalog", "self.name", "device_spec.items", "self.server_by_name", "auth.copy", "item.tenant_id", "item.hostId", "novaclient.__version__", "self.state", "self._sanatize_network_params", "self.server_list_detailed", "volume.size", "log.debug", "floating_ip.ip", "self._v3_setup", "self.server_show_libcloud", "volume.status", "volume.attachments", "flavor.ram", "item.links", "image.minRam", "volume.id", "nt_ks.images", "image.name", "flavor.disk", "logging.getLogger", "nt_ks.servers", "self._server_uuid_from_name", "image.status", "self.expand_extensions", "item.user_id", "server.get", "inspect.isclass", "self.session", "client.Client"]}, "npm.py": {"libraries": ["salt.exceptions.CommandExecutionError", "re", "salt.exceptions.CommandNotFoundError"], "function_names": ["installed", "_pkg_is_installed", "bootstrap", "__virtual__", "cache_cleaned", "removed"], "function_calls": ["_pkg_is_installed", "isinstance"], "class_names": [], "class_method_calls": ["pkgs_satisfied.append", "pkgs_to_install.append", "pkg_details.get", "re.search", "pkg_from.endswith", "comment_msg.append", "pkg_name.split", "matches.group", "installed_pkgs.values", "installed_pkgs.items", "pkg_name.startswith"]}, "nspawn.py": {"libraries": ["errno", "time", "salt.utils.systemd", "os", "functools", "salt.utils.path", "salt.exceptions.CommandExecutionError", "re", "salt.utils.functools", "shutil", "logging", "salt.exceptions.SaltInvocationError", "salt.utils.args", "tempfile", "salt.defaults.exitcodes"], "function_names": ["pull_dkr", "state", "list_all", "pid", "_bad_verify", "_make_container_root", "_machinectl", "run", "run_stdout", "_ensure_running", "_pull_image", "_bootstrap_arch", "_sd_version", "_bootstrap_ubuntu", "bootstrap_salt", "pull_tar", "__virtual__", "poweroff", "copy_to", "_needs_install", "_bootstrap_debian", "run_all", "pull_raw", "stop", "disable", "remove", "_failed_remove", "enable", "_ensure_exists", "retcode", "list_stopped", "check_exists", "_bootstrap_fedora", "run_stderr", "exists", "_clear_context", "_root", "start", "_ensure_systemd", "info", "terminate", "reboot", "restart", "_build_failed", "list_running", "bootstrap_container", "_run"], "function_calls": ["state", "list_all", "sorted", "_bad_verify", "_make_container_root", "_machinectl", "run", "run_stdout", "enumerate", "_ensure_running", "_pull_image", "int", "_sd_version", "set", "copy_to", "_needs_install", "globals", "stop", "_failed_remove", "retcode", "CommandExecutionError", "exists", "_root", "start", "_ensure_systemd", "info", "reboot", "_build_failed", "list_running", "wrapped", "SaltInvocationError", "_run"], "class_names": [], "class_method_calls": ["time.sleep", "val.split", "bootstrap_args.format", "x.startswith", "pull_opts.append", "line.split", "__context__.pop", "os.listdir", "bootstrap_args.replace", "salt.defaults", "os.makedirs", "tree.search", "kwargs.pop", "shutil.rmtree", "tempfile.mkdtemp", "source.startswith", "errno.ENOENT", "log.debug", "re.compile", "log.trace", "kwargs.get", "log.error", "log.info", "functools.wraps", "match.groups", "logging.getLogger", "ret.append", "salt.config", "verify.lower", "exc.errno", "os.path", "kv_pair.match", "salt.utils", "key_name_map.get"]}, "nxos_api.py": {"libraries": ["salt.utils.args.clean_kwargs", "logging", "salt.utils.http", "salt.exceptions.SaltException", "json"], "function_names": ["_prepare_connection", "rpc"], "function_calls": ["SaltException", "_prepare_connection", "clean_kwargs", "enumerate", "isinstance"], "class_names": [], "class_method_calls": ["payload.append", "logging.getLogger", "init_kwargs.get", "log.error", "json.dumps", "nxos_api_kwargs.items", "salt.utils"]}, "nxos_upgrade.py": {"libraries": ["logging"], "function_names": ["__virtual__", "_version_info", "image_running"], "function_calls": ["_version_info"], "class_names": [], "class_method_calls": ["logging.getLogger"]}, "omapi.py": {"libraries": ["struct", "logging", "salt.utils.stringutils", "pypureomapi"], "function_names": ["__virtual__", "delete_host", "add_host", "_conn"], "function_calls": ["TypeError", "_conn"], "class_names": [], "class_method_calls": ["omapi.OMAPI_OP_STATUS", "omapi.Omapi", "response.handle", "logging.getLogger", "msg.obj", "struct.pack", "omapi.pack_mac", "o.query_server", "__opts__.get", "omapi.OmapiMessage", "msg.message", "omapi.OMAPI_OP_UPDATE", "__pillar__.get", "response.opcode", "salt.utils", "omapi.pack_ip"]}, "openbsd_sysctl.py": {"libraries": ["os", "salt.exceptions.CommandExecutionError", "salt.utils.data", "re", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["get", "assign", "show", "__virtual__", "persist"], "function_calls": ["len", "str", "assign", "CommandExecutionError"], "class_names": [], "class_method_calls": ["out.splitlines", "re.match", "nlines.append", "new_value.split", "line.split", "ofile.writelines", "line.startswith", "os.path", "salt.utils", "rest.split", "rest.startswith", "msg.format"]}, "openbsdpkg.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.utils.data", "re", "logging", "salt.utils.versions", "salt.exceptions.MinionError", "copy"], "function_names": ["upgrade", "latest_version", "remove", "version", "purge", "upgrade_available", "__virtual__", "install", "list_pkgs", "_list_pkgs_from_context"], "function_calls": ["len", "latest_version", "any", "remove", "list_pkgs", "CommandExecutionError", "_list_pkgs_from_context"], "class_names": [], "class_method_calls": ["pkgs.get", "out.splitlines", "re.match", "logging.getLogger", "stem.split", "copy.deepcopy", "kwargs.get", "__context__.pop", "cmd.append", "__PKG_RE.match", "errors.append", "pkg.split", "cmd.extend", "x.split", "salt.utils", "re.compile", "kwargs.pop"]}, "openbsdrcctl_service.py": {"libraries": ["salt.utils.path", "salt.utils.decorators", "os", "salt.exceptions.CommandNotFoundError"], "function_names": ["stop", "disable", "start", "_get_flags", "reload_", "available", "disabled", "status", "enable", "__virtual__", "missing", "restart", "enabled", "get_enabled", "_cmd", "get_disabled", "get_all"], "function_calls": ["bool", "_get_flags", "any", "available", "format", "sorted", "_cmd"], "class_names": [], "class_method_calls": ["decorators.memoize", "ret.append", "kwargs.get", "os.path", "salt.utils"]}, "openbsdservice.py": {"libraries": ["os", "salt.utils.data", "re", "logging", "fnmatch", "salt.utils.files"], "function_names": ["stop", "get_disabled", "start", "reload_", "_get_rc", "available", "disabled", "status", "__virtual__", "restart", "missing", "get_enabled", "enabled", "get_all"], "function_calls": ["len", "bool", "_get_rc", "available", "sorted", "set", "get_enabled", "map", "get_disabled", "get_all", "list"], "class_names": [], "class_method_calls": ["logging.getLogger", "pkg_scripts_regex.match", "start_daemon_parameter_regex.findall", "os.listdir", "match.group", "log.error", "fnmatch.filter", "start_daemon_call_regex.match", "re.search", "os.access", "handle.readlines", "os.path", "salt.utils", "os.X_OK", "service_flags_regex.match", "services.append", "re.compile"]}, "openscap.py": {"libraries": ["argparse", "shutil", "subprocess.Popen", "subprocess.PIPE", "tempfile", "shlex"], "function_names": ["__init__", "error", "xccdf"], "function_calls": ["Exception", "Popen", "_ArgumentParser", "super", "str", "dict"], "class_names": ["_ArgumentParser"], "class_method_calls": ["shutil.rmtree", "tempfile.mkdtemp", "argparse.ArgumentParser", "proc.communicate", "_OSCAP_EXIT_CODES_MAP.get", "self.add_argument", "args.profile", "shlex.split", "parser.parse_known_args", "proc.returncode"]}, "openstack_config.py": {"libraries": ["salt.exceptions.CommandExecutionError"], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["str"], "class_names": [], "class_method_calls": []}, "openstack_mng.py": {"libraries": ["logging", "os.path", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["__virtual__", "restart_service", "stop_service", "start_service"], "function_calls": ["float", "int"], "class_names": [], "class_method_calls": ["logging.getLogger", "rfh.read", "os.path", "service_info.get", "salt.utils"]}, "openvswitch.py": {"libraries": ["salt.exceptions.ArgumentValueError", "salt.utils.path", "salt.exceptions.CommandExecutionError", "salt.utils.json", "logging"], "function_names": ["bridge_list", "bridge_exists", "bridge_to_parent", "port_list", "port_remove", "port_add", "_stdout_list_split", "port_get_tag", "_retcode_to_bool", "_param_may_exist", "bridge_to_vlan", "port_create_vlan", "_param_if_exists", "bridge_create", "port_create_vxlan", "interface_get_type", "__virtual__", "db_set", "bridge_delete", "_stdout_parse_json", "_convert_json", "interface_get_options", "db_get", "port_create_gre"], "function_calls": ["len", "_param_if_exists", "bridge_exists", "int", "port_list", "str", "_convert_json", "ArgumentValueError", "_stdout_parse_json", "CommandExecutionError", "_stdout_list_split", "_retcode_to_bool", "_param_may_exist", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "obj.items", "stdout.split", "json.loads", "json.dumps", "salt.utils"]}, "opkg.py": {"libraries": ["os", "salt.utils.stringutils", "salt.utils.files", "salt.exceptions.MinionError", "pathlib", "shlex", "errno", "salt.exceptions.CommandExecutionError", "salt.utils.data", "salt.utils.versions", "salt.exceptions.SaltInvocationError", "salt.utils.args", "re", "logging", "salt.utils.versions.Version", "salt.utils.path", "salt.utils.pkg", "salt.utils.itertools", "copy"], "function_names": ["latest_version", "_set_trusted_option_if_needed", "_get_state", "_create_repo", "_append_noaction_if_testmode", "_build_install_command_list", "_execute_install_command", "version_cmp", "upgrade_available", "_read_repos", "__virtual__", "hold", "list_upgrades", "mod_repo", "file_list", "file_dict", "_process_info_installed_output", "_is_testmode", "_set_state", "_add_new_repo", "version_clean", "_convert_to_standard_attr", "unhold", "_mod_repo_in_file", "_update_nilrt_restart_state", "remove", "version", "_fingerprint_file", "info_installed", "list_pkgs", "_get_restartcheck_result", "_set_repo_option", "_set_repo_options", "normalize", "_get_nisysapi_conf_d_path", "_list_pkgs_from_context", "list_repos", "check_extra_requirements", "_process_restartcheck_result", "_del_repo_from_file", "del_repo", "get_repo", "purge", "refresh_db", "install", "owner", "_parse_reported_packages_from_remove_output", "_parse_reported_packages_from_install_output", "upgrade"], "function_calls": ["latest_version", "any", "_set_trusted_option_if_needed", "_get_state", "_create_repo", "dict", "_append_noaction_if_testmode", "Version", "_build_install_command_list", "list", "_execute_install_command", "next", "set", "_read_repos", "file_dict", "_process_info_installed_output", "_is_testmode", "_set_state", "_add_new_repo", "_convert_to_standard_attr", "_mod_repo_in_file", "_update_nilrt_restart_state", "remove", "str", "_fingerprint_file", "list_pkgs", "CommandExecutionError", "_get_restartcheck_result", "_set_repo_option", "_set_repo_options", "normalize", "isinstance", "list_repos", "len", "_get_nisysapi_conf_d_path", "_list_pkgs_from_context", "bool", "_process_restartcheck_result", "_del_repo_from_file", "refresh_db", "iter", "_parse_reported_packages_from_remove_output", "_parse_reported_packages_from_install_output", "SaltInvocationError", "map"], "class_names": [], "class_method_calls": ["filename.endswith", "ATTR_MAP.get", "line.split", "__context__.pop", "os.listdir", "fcount.write", "errors.append", "repos.values", "cmd.extend", "__grains__.get", "__opts__.get", "pkg_params.items", "output.append", "exc.strerror", "attr.lower", "os.makedirs", "log.warning", "filename.name", "new.update", "msg.format", "ret.values", "kwargs.pop", "cmds.append", "errno.EEXIST", "source.get", "new.get", "line.strip", "to_downgrade.append", "option.split", "match.group", "deleted_from.items", "shlex.quote", "fhandle.write", "to_reinstall.append", "to_install.append", "files.extend", "re.compile", "output.split", "properties.get", "ret.update", "regex.search", "pathlib.Path", "value.lstrip", "kwargs.get", "copy.deepcopy", "parsed_packages.update", "cmd_prefix.append", "error_repos.append", "new.items", "targets.append", "fhandle.writelines", "line.startswith", "re.split", "cmd.append", "upgrade_pattern.match", "old.get", "re.escape", "out.splitlines", "logging.getLogger", "prev_line.strip", "files.append", "exc.errno", "targets.extend", "remove_pattern.match", "install_pattern.match", "os.path", "salt.utils", "os.remove", "attr.split", "to_install.extend"]}, "opsgenie.py": {"libraries": ["logging", "inspect", "salt.exceptions"], "function_names": ["create_alert", "close_alert"], "function_calls": ["create_alert"], "class_names": [], "class_method_calls": ["logging.getLogger", "inspect.currentframe", "inspect.getargvalues", "log.error", "salt.exceptions", "log.info"]}, "oracle.py": {"libraries": ["logging", "cx_Oracle", "os", "salt.utils.decorators.depends"], "function_names": ["_unicode_output", "client_version", "run_query", "_connect", "_cx_oracle_req", "version", "show_env", "show_pillar", "__virtual__", "show_dbs", "get_version"], "function_calls": ["len", "depends", "str", "_connect", "run_query", "show_dbs", "get_version"], "class_names": [], "class_method_calls": ["hostportsid.split", "cx_Oracle.CLOB", "uri.rsplit", "cx_Oracle.LONG_STRING", "conn.cursor", "cx_Oracle.makedsn", "cursor.var", "cx_Oracle.STRING", "cursor.arraysize", "cx_Oracle.SYSDBA", "log.debug", "os.environ", "hostport.split", "sid.split", "cx_Oracle.clientversion", "cx_Oracle.FIXED_CHAR", "credentials.split", "cx_Oracle.connect", "logging.getLogger", "userpass.split", "cx_Oracle.SYSOPER", "conn.outputtypehandler"]}, "osquery.py": {"libraries": ["salt.utils.path", "logging", "salt.utils.platform", "salt.utils.json"], "function_names": ["shell_history", "_table_attrs", "groups", "firefox_addons", "shared_memory", "interface_addresses", "processes", "rpm_packages", "os_version", "iokit_devicetree", "kernel_extensions", "pci_devices", "process_open_files", "nvram", "apt_sources", "certificates", "kernel_integrity", "etc_services", "hardware_events", "block_devices", "alf_exceptions", "keychain_items", "file_changes", "passwd_changes", "time_", "chrome_extensions", "launchd", "__virtual__", "arp_cache", "last", "quarantine", "iokit_registry", "memory_map", "process_memory_map", "system_controls", "xprotect_entries", "osquery_info", "etc_hosts", "smbios_tables", "alf", "alf_services", "xattr_where_from", "apps", "alf_explicit_auths", "safari_extensions", "osquery_registry", "version", "logged_in_users", "listening_ports", "preferences", "_osquery_cmd", "deb_packages", "process_envs", "suid_bin", "users", "routes", "xprotect_reports", "file_", "mounts", "process_open_sockets", "interface_details", "usb_devices", "osquery_flags", "query", "hash_", "kernel_info", "acpi_tables", "kernel_modules", "osquery_extensions", "_osquery", "crontab", "nfs_shares", "startup_items", "cpuid", "homebrew_packages"], "function_calls": ["_osquery_cmd", "_table_attrs", "_osquery", "isinstance"], "class_names": [], "class_method_calls": ["salt.utils", "attrs.append", "log.debug", "logging.getLogger"]}, "out.py": {"libraries": ["salt.output", "logging"], "function_names": ["__virtual__", "html_format", "string_format", "out_format"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.output", "logging.getLogger"]}, "pacmanpkg.py": {"libraries": ["salt.utils.systemd", "salt.exceptions.CommandExecutionError", "salt.utils.data", "salt.utils.functools", "salt.utils.pkg", "logging", "fnmatch", "os.path", "salt.utils.versions.LooseVersion", "salt.utils.args", "salt.exceptions.MinionError", "salt.utils.itertools", "copy"], "function_names": ["latest_version", "group_info", "upgrade_available", "__virtual__", "list_upgrades", "file_list", "file_dict", "_uninstall", "remove", "version", "list_pkgs", "list_repo_pkgs", "group_list", "_list_pkgs_from_context", "_list_removed", "group_diff", "purge", "refresh_db", "install", "owner", "upgrade"], "function_calls": ["len", "next", "latest_version", "any", "sorted", "str", "set", "refresh_db", "iter", "list_pkgs", "list_repo_pkgs", "CommandExecutionError", "LooseVersion", "list", "_uninstall", "_list_pkgs_from_context"], "class_names": [], "class_method_calls": ["available.keys", "line.split", "__context__.pop", "_available.get", "pkg_params.items", "errors.append", "cmd.extend", "x.vstring", "ret.values", "kwargs.pop", "byrepo_ret.setdefault", "line.strip", "cmd.remove", "pkgname.lower", "ret.setdefault", "wildcards.append", "copy.deepcopy", "kwargs.get", "pkgver.lower", "log.error", "targets.append", "line.startswith", "available.setdefault", "packages.pop", "cmd.append", "available.pop", "fnmatch.fnmatch", "group_pkgs.get", "logging.getLogger", "ret.append", "installed.setdefault", "os.path", "salt.utils", "fromrepo.split", "x.strip"]}, "pagerduty.py": {"libraries": ["salt.utils.http", "logging", "salt.utils.json", "salt.version.__version__"], "function_names": ["query", "list_items"], "function_calls": ["query", "isinstance"], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "pagerduty_util.py": {"libraries": ["requests", "salt.utils.json"], "function_names": ["_list_items", "get_resource", "resource_present", "resource_absent", "__virtual__", "_query", "_get_resource_id", "create_or_update_resource", "get_schedules", "get_escalation_policies", "get_users", "delete_resource", "get_services"], "function_calls": ["_list_items", "diff", "get_resource", "_get_resource_id", "_query", "create_or_update_resource", "delete_resource", "isinstance"], "class_names": [], "class_method_calls": ["requests.request", "kwargs.items", "result_json.items", "resource.get", "k.startswith", "data.items", "salt.utils", "result.text", "result.json"]}, "parted_partition.py": {"libraries": ["os", "salt.utils.path", "salt.exceptions.CommandExecutionError", "re", "salt.utils.platform", "logging", "stat", "string"], "function_names": ["list_", "_validate_partition_boundary", "toggle", "check", "_validate_device", "disk_toggle", "rescue", "rm", "__virtual__", "system_types", "align_check", "mklabel", "disk_set", "probe", "_is_fstype", "mkpart", "set_id", "mkpartfs", "resize", "get_block_device", "get_id", "exists", "mkfs", "name", "set_", "cp"], "function_calls": ["len", "int", "str", "zip", "_validate_partition_boundary", "system_types", "dict", "CommandExecutionError", "_is_fstype", "mkpart", "_validate_device"], "class_names": [], "class_method_calls": ["line.strip", "line.rstrip", "out.splitlines", "logging.getLogger", "match.group", "stat.S_ISBLK", "string.digits", "os.stat", "re.search", "string.ascii_letters", "salt.utils", "os.path", "cols.pop", "fields.extend", "fields.append", "line.startswith"]}, "pcs.py": {"libraries": ["os", "salt.utils.path", "logging", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["resource_op_defaults_to", "resource_present", "_get_cibpath", "prop_has_value", "_file_write", "cluster_setup", "cib_present", "__virtual__", "_get_cibfile", "_item_present", "_file_read", "auth", "_get_node_list_for_version", "constraint_present", "resource_defaults_to", "_get_cibfile_tmp", "cluster_node_present", "cib_pushed", "_get_cibfile_cksum", "stonith_present"], "function_calls": ["_item_present", "_file_read", "len", "_get_cibfile_tmp", "auth", "str", "_get_cibpath", "_get_node_list_for_version", "_get_cibfile_cksum", "_get_cibfile", "_file_write", "isinstance"], "class_names": [], "class_method_calls": ["node_add_dict.update", "line.split", "__grains__.get", "item_id.replace", "os.makedirs", "item_id.split", "fp_.write", "authorize_dict.update", "log.debug", "setup_dict.update", "fp_.close", "log.trace", "authorized_dict.update", "x.lower", "log.info", "logging.getLogger", "fp_.read", "os.path", "value.split", "salt.utils"]}, "pdbedit.py": {"libraries": ["logging", "salt.utils.data"], "function_names": ["__virtual__", "absent", "managed", "present"], "function_calls": ["managed"], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "pecl.py": {"libraries": [], "function_names": ["__virtual__", "installed", "removed"], "function_calls": ["str", "isinstance"], "class_names": [], "class_method_calls": ["name.split"]}, "peeringdb.py": {"libraries": ["salt.utils.http", "logging", "salt.utils.args.clean_kwargs"], "function_names": ["get_org", "_build_url", "get_poc", "get_fac", "_get_endpoint", "get_ixlan", "get_netixlan", "__virtual__", "get_ixpfx", "get_ix", "_get_auth", "get_netfac", "get_net", "get_ixfac"], "function_calls": ["_get_endpoint", "clean_kwargs", "_get_auth", "_build_url"], "class_names": [], "class_method_calls": ["ret.update", "logging.getLogger", "salt.utils", "peeringdb_cfg.get", "kwargs.pop"]}, "pf.py": {"libraries": ["salt.utils.path", "salt.exceptions.CommandExecutionError", "re", "logging", "salt.exceptions.SaltInvocationError"], "function_names": ["disable", "table", "flush", "enable", "show", "__virtual__", "load", "loglevel"], "function_calls": ["SaltInvocationError", "CommandExecutionError"], "class_names": [], "class_method_calls": ["re.match", "modifier.title", "logging.getLogger", "kwargs.get", "salt.utils", "cmd.append"]}, "pip.py": {"libraries": ["salt.utils.locales", "os", "salt.exceptions.CommandExecutionError", "re", "salt.utils.data", "salt.utils.platform", "shutil", "salt.utils.json", "logging", "sys", "salt.utils.url", "salt.utils.stringutils", "salt.utils.versions", "salt.utils.files", "tempfile", "pkg_resources", "salt.exceptions.CommandNotFoundError"], "function_names": ["list_", "_format_env_vars", "_get_cached_requirements", "freeze", "_get_env_activate", "is_installed", "upgrade_available", "__virtual__", "list_upgrades", "_search_paths", "_process_requirements", "_resolve_requirements_chain", "version", "_clear_context", "_pip_bin_env", "list_all_versions", "_get_pip_bin", "list_freeze_parse", "install", "_check_bundled", "_find_req", "uninstall", "upgrade"], "function_calls": ["list_", "any", "_format_env_vars", "_get_cached_requirements", "freeze", "dict", "CommandNotFoundError", "int", "TypeError", "list_upgrades", "_search_paths", "_process_requirements", "OSError", "_resolve_requirements_chain", "str", "version", "CommandExecutionError", "_clear_context", "isinstance", "_pip_bin_env", "ValueError", "len", "hasattr", "_get_pip_bin", "list_freeze_parse", "_check_bundled", "_find_req"], "class_names": [], "class_method_calls": ["logger.error", "allow_unverified.split", "install_options.split", "pkg.lower", "config.get", "__context__.pop", "line.split", "cleanup_requirements.append", "excludes.match", "cmd.extend", "os.access", "salt.utils", "sys.executable", "r.strip", "env_vars.items", "pat.search", "os.X_OK", "e.strip", "entry.startswith", "os.makedirs", "logger.warning", "logger.debug", "re.MULTILINE", "arg.popitem", "chain.extend", "mirrors.split", "re.match", "ret.extend", "shutil.rmtree", "match.group", "mirror.startswith", "tempfile.mkdtemp", "io.strip", "cmd_kwargs.update", "versions.sort", "requirements.split", "os.W_OK", "rex_pip_chain_read.findall", "re.compile", "req.split", "m.strip", "regex.search", "os.environ", "pkgname.lower", "fh_link.read", "p.strip", "exists_action.lower", "l.strip", "global_options.split", "line.startswith", "sys.RELENV", "os.curdir", "cmd.append", "egg_match.search", "pkgs.remove", "logger.info", "match.groups", "logging.getLogger", "rex_pip_reqs_comment.sub", "requirement.startswith", "find_links.split", "pkg_resources.parse_version", "os.chdir", "p.replace", "prefix.lower", "allow_external.split", "filtered.append", "go.strip", "os.path", "name.lower", "editable.split", "chain.append", "pkgs.split", "os.remove", "cmd_kwargs.setdefault"]}, "pkg_resource.py": {"libraries": ["os", "salt.utils.yaml", "salt.utils.data", "logging", "fnmatch", "pprint", "salt.utils.versions", "salt.exceptions.SaltInvocationError", "copy"], "function_names": ["check_extra_requirements", "stringify", "add_pkg", "pack_sources", "version", "format_pkg_list", "parse_targets", "sort_pkglist", "version_compare", "version_clean", "_normalize_name", "format_version", "_repack_pkgs"], "function_calls": ["len", "next", "stringify", "pack_sources", "str", "sorted", "SaltInvocationError", "set", "_repack_pkgs", "iter", "_normalize_name", "format_version", "isinstance"], "class_names": [], "class_method_calls": ["pkgs.get", "pprint.pformat", "pkgs.setdefault", "fnmatch.filter", "filtered_attr.get", "log.warning", "ret.values", "kwargs.pop", "ret_attr.setdefault", "sources.items", "copy.deepcopy", "kwargs.get", "versions.append", "log.error", "log.exception", "logging.getLogger", "srcinfo.append", "name.split", "os.path", "__salt__.get", "salt.utils"]}, "pkgin.py": {"libraries": ["salt.utils.decorators", "os", "salt.utils.path", "salt.exceptions.CommandExecutionError", "salt.utils.data", "re", "salt.utils.functools", "salt.utils.pkg", "logging", "salt.exceptions.MinionError", "copy"], "function_names": ["latest_version", "_splitpkg", "search", "_supports_regex", "__virtual__", "list_upgrades", "file_list", "file_dict", "remove", "_supports_parsing", "version", "list_pkgs", "_check_pkgin", "_list_pkgs_from_context", "_rehash", "_get_version", "purge", "refresh_db", "install", "normalize_name", "upgrade"], "function_calls": ["latest_version", "any", "sorted", "_splitpkg", "list", "int", "_supports_regex", "file_dict", "remove", "_supports_parsing", "list_pkgs", "CommandExecutionError", "_check_pkgin", "tuple", "isinstance", "_rehash", "len", "_list_pkgs_from_context", "_get_version", "refresh_db"], "class_names": [], "class_method_calls": ["decorators.memoize", "args.insert", "__context__.pop", "line.split", "errors.append", "cmd.extend", "shell.split", "cmd_prefix.insert", "kwargs.pop", "cmds.append", "args.append", "env.append", "files.extend", "VERSION_MATCH.search", "re.compile", "cmd.insert", "args.extend", "copy.deepcopy", "kwargs.get", "version_match.group", "log.error", "log.info", "line.startswith", "old.get", "cmd.append", "re.split", "out.splitlines", "logging.getLogger", "name.split", "os.path", "salt.utils"]}, "pkgng.py": {"libraries": [], "function_names": ["update_packaging_site"], "function_calls": [], "class_names": [], "class_method_calls": []}, "pkgutil.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.utils.data", "salt.utils.functools", "salt.utils.pkg", "salt.utils.versions", "salt.exceptions.MinionError", "copy"], "function_names": ["latest_version", "remove", "upgrade_available", "version", "refresh_db", "__virtual__", "list_upgrades", "_list_pkgs_from_context", "install", "list_pkgs", "purge", "upgrade"], "function_calls": ["len", "remove", "refresh_db", "list_pkgs", "CommandExecutionError", "enumerate", "_list_pkgs_from_context"], "class_names": [], "class_method_calls": ["pkgs.get", "out.split", "kwargs.get", "line.split", "__context__.pop", "copy.deepcopy", "pkg_params.items", "version_rev.split", "targets.append", "salt.utils", "kwargs.pop"]}, "portage_config.py": {"libraries": ["traceback"], "function_names": ["mod_init", "_flags_helper", "__virtual__", "flags", "_mask_helper"], "function_calls": ["_mask_helper", "_flags_helper"], "class_names": [], "class_method_calls": ["traceback.format_exc"]}, "postfix.py": {"libraries": ["salt.utils.path", "re", "logging", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["_parse_main", "delete", "set_main", "show_main", "_parse_master", "show_master", "__virtual__", "hold", "requeue", "_format_master", "_write_conf", "set_master", "show_queue", "unhold"], "function_calls": ["str", "_parse_master", "_format_master", "_write_conf", "_parse_main", "show_queue", "all", "isinstance"], "class_names": [], "class_method_calls": ["new_conf.append", "line.strip", "re.escape", "re.match", "queue.append", "logging.getLogger", "conf_list.append", "line.split", "m.group", "log.error", "fh_.read", "salt.utils", "fh_.write", "full_conf.splitlines", "line.startswith", "re.compile"]}, "postgres.py": {"libraries": ["psycopg2", "contextlib.contextmanager", "salt.utils.data", "salt.returners", "salt.exceptions", "salt.utils.json", "logging", "sys"], "function_names": ["event_return", "returner", "save_load", "get_jids", "prep_jid", "_get_serv", "get_fun", "get_minions", "get_jid", "get_load", "__virtual__", "_get_options", "save_minions"], "function_calls": ["_get_options", "str", "_get_serv", "int"], "class_names": [], "class_method_calls": ["cur.fetchone", "_options.get", "sys.stderr", "conn.cursor", "conn.close", "cursor.execute", "log.critical", "event.get", "psycopg2.DatabaseError", "cur.execute", "psycopg2.connect", "cur.fetchall", "salt.returners", "salt.exceptions", "psycopg2.IntegrityError", "ret.get", "logging.getLogger", "ret.append", "psycopg2.OperationalError", "err.args", "salt.utils"]}, "poudriere.py": {"libraries": ["os", "salt.utils.path", "logging", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["info_jail", "bulk_build", "list_ports", "delete_jail", "create_ports_tree", "version", "update_jail", "update_ports_tree", "__virtual__", "make_pkgng_aware", "is_jail", "parse_config", "_check_config_exists", "list_jails", "create_jail", "_config_dir", "_config_file"], "function_calls": ["make_pkgng_aware", "is_jail", "_check_config_exists", "list_jails", "_config_dir", "_config_file"], "class_names": [], "class_method_calls": ["res.splitlines", "jail.split", "logging.getLogger", "os.path", "os.makedirs", "salt.utils", "os.remove"]}, "powerpath.py": {"libraries": [], "function_names": ["license_absent", "license_present"], "function_calls": [], "class_names": [], "class_method_calls": []}, "puppet.py": {"libraries": ["logging", "salt.utils.yaml"], "function_names": ["ext_pillar"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger", "log.critical"]}, "purefa.py": {"libraries": ["purestorage", "os", "datetime.datetime", "salt.exceptions.CommandExecutionError", "platform"], "function_names": ["pg_create", "_get_hgroup", "_get_volume", "volume_attach", "host_delete", "volume_extend", "volume_clone", "snap_create", "pg_update", "__virtual__", "host_create", "_get_pgroup", "hg_remove", "pg_delete", "_get_snapshot", "_get_system", "snap_eradicate", "_get_deleted_volume", "volume_create", "_get_deleted_pgroup", "volume_eradicate", "pg_remove", "hg_create", "_get_host", "pg_eradicate", "snap_volume_create", "hg_update", "volume_delete", "snap_delete", "volume_detach", "host_update", "hg_delete"], "function_calls": ["len", "_get_deleted_pgroup", "_get_hgroup", "str", "_get_volume", "_get_host", "hg_delete", "_get_pgroup", "pg_delete", "datetime", "_get_snapshot", "CommandExecutionError", "_get_system", "_get_deleted_volume"], "class_names": [], "class_method_calls": ["suffix.replace", "array.list_pgroups", "array.remove_hgroup", "array.add_volume", "array.list_hgroup_connections", "array.remove_host", "purestorage.PureError", "array.create_snapshot", "array.list_hgroups", "array.connect_host", "array.delete_host", "system.get", "array.extend_volume", "purestorage.FlashArray", "array.eradicate_pgroup", "array.create_host", "array.disconnect_host", "array.create_pgroup", "os.environ", "array.set_pgroup", "platform.platform", "array.get_pgroup", "array.list_hosts", "array.add_hgroup", "array.get_volume", "array.create_volume", "array.connect_hgroup", "array.list_host_connections", "datetime.utcnow", "array.disconnect_hgroup", "name.split", "array.set_hgroup", "array.add_host", "array.copy_volume", "array.destroy_pgroup", "array.get_hgroup", "array.destroy_volume", "array.remove_volume", "array.delete_hgroup", "array.set_host", "array.create_hgroup", "array.eradicate_volume"]}, "purefb.py": {"libraries": ["os", "purity_fb.ProtocolRule", "salt.exceptions.CommandExecutionError", "purity_fb.PurityFb", "purity_fb.SnapshotSuffix", "purity_fb.rest", "purity_fb.NfsRule", "purity_fb.FileSystemSnapshot", "purity_fb.FileSystem", "datetime.datetime"], "function_names": ["fs_eradicate", "snap_create", "fs_create", "_get_deleted_fs", "__virtual__", "fs_extend", "fs_update", "_get_snapshot", "_get_fs", "fs_delete", "snap_eradicate", "snap_delete", "_get_blade"], "function_calls": ["len", "print", "str", "FileSystem", "FileSystemSnapshot", "PurityFb", "SnapshotSuffix", "_get_deleted_fs", "datetime", "_get_snapshot", "_get_fs", "CommandExecutionError", "NfsRule", "_get_blade", "ProtocolRule"], "class_names": [], "class_method_calls": ["blade.disable_verify_ssl", "res.items", "_fs.provisioned", "os.environ", "datetime.utcnow", "proto.lower", "_fs.destroyed", "suffix.replace", "rest.ApiException", "source.append", "_fs.append", "blade.file_system_snapshots", "_fs.nfs", "blade.file_systems", "blade.login"]}, "pushbullet.py": {"libraries": ["pushbullet", "logging"], "function_names": ["__virtual__", "push_note", "__init__", "_find_device_by_name"], "function_calls": ["_SaltPushbullet"], "class_names": ["_SaltPushbullet"], "class_method_calls": ["logging.getLogger", "self.target", "dev.nickname", "pushbullet.Pushbullet", "self._find_device_by_name", "spb.push_note", "self.pb"]}, "pushover_notify.py": {"libraries": ["logging", "salt.exceptions.SaltInvocationError", "salt.utils.pushover", "urllib.parse"], "function_names": ["__virtual__", "post_message"], "function_calls": ["SaltInvocationError", "dict"], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger", "urllib.parse"]}, "pw_group.py": {"libraries": ["grp", "logging", "salt.utils.data", "salt.utils.args"], "function_names": ["chgid", "delete", "adduser", "info", "__virtual__", "members", "add", "deluser", "getent"], "function_calls": ["info"], "class_names": [], "class_method_calls": ["grinfo.gr_mem", "logging.getLogger", "grinfo.gr_passwd", "grp.getgrnam", "ret.append", "grinfo.gr_gid", "grinfo.gr_name", "log.warning", "salt.utils", "grp.getgrall", "kwargs.pop"]}, "pw_user.py": {"libraries": ["pwd", "salt.exceptions.CommandExecutionError", "salt.utils.data", "logging", "salt.utils.args", "salt.utils.user", "copy"], "function_names": ["delete", "chhome", "chworkphone", "chhomephone", "add", "chgroups", "_get_gecos", "rename", "__virtual__", "getent", "chgid", "list_users", "chloginclass", "list_groups", "_update_gecos", "_build_gecos", "get_loginclass", "chroomnumber", "chuid", "chfullname", "info", "chshell"], "function_calls": ["len", "_get_gecos", "list_groups", "_update_gecos", "sorted", "str", "info", "set", "_build_gecos", "get_loginclass", "CommandExecutionError", "isinstance"], "class_names": [], "class_method_calls": ["cmd.extend", "log.warning", "kwargs.pop", "userinfo.split", "user.pw_name", "data.pw_uid", "data.pw_gecos", "data.pw_dir", "pwd.getpwnam", "copy.deepcopy", "gecos_dict.get", "log.error", "cmd.append", "data.pw_name", "pwd.getpwall", "logging.getLogger", "ret.append", "data.pw_passwd", "data.pw_shell", "groups.split", "data.pw_gid", "salt.utils", "gecos_field.append"]}, "pyenv.py": {"libraries": ["re"], "function_names": ["installed", "_python_installed", "install_pyenv", "_check_and_uninstall_python", "absent", "_check_and_install_python", "_check_pyenv"], "function_calls": ["_check_and_install_python", "_check_pyenv", "_check_and_uninstall_python", "_python_installed"], "class_names": [], "class_method_calls": ["name.startswith", "re.sub"]}, "qemu_img.py": {"libraries": ["salt.utils.path", "os"], "function_names": ["__virtual__", "convert", "make_image"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "os.path"]}, "qemu_nbd.py": {"libraries": ["glob", "time", "os", "salt.utils.path", "logging", "salt.crypt", "tempfile"], "function_names": ["clear", "init", "connect", "__virtual__", "mount"], "function_calls": ["set", "connect", "mount"], "class_names": [], "class_method_calls": ["time.sleep", "logging.getLogger", "glob.glob", "nbds.add", "mnt.items", "os.path", "dev.rindex", "log.warning", "salt.utils", "tempfile.gettempdir"]}, "quota.py": {"libraries": [], "function_names": ["__virtual__", "mode"], "function_calls": [], "class_names": [], "class_method_calls": []}, "rabbitmq.py": {"libraries": ["salt.utils.user", "salt.utils.versions.Version", "os", "winreg", "salt.utils.path", "salt.exceptions.CommandExecutionError", "re", "salt.utils.platform", "salt.utils.json", "logging", "salt.exceptions.SaltInvocationError", "random", "string", "salt.utils.itertools"], "function_names": ["policy_exists", "start_app", "_output_lines_to_list", "set_upstream", "upstream_exists", "set_policy", "list_queues_vhost", "_output_to_dict", "list_vhosts", "_format_response", "delete_vhost", "list_queues", "delete_policy", "func", "set_permissions", "_check_response", "check_password", "list_permissions", "_output_to_list", "__virtual__", "join_cluster", "list_upstreams", "list_users", "list_user_permissions", "clear_password", "vhost_exists", "values_mapper", "add_vhost", "list_policies", "reset", "delete_user", "_get_rabbitmq_plugin", "plugin_is_enabled", "disable_plugin", "delete_upstream", "_safe_output", "user_exists", "status", "list_enabled_plugins", "change_password", "enable_plugin", "stop_app", "set_user_tags", "cluster_status", "list_available_plugins", "add_user", "_strip_listing_to_done", "force_reset"], "function_calls": ["any", "start_app", "_output_lines_to_list", "_output_to_dict", "Version", "list_vhosts", "_format_response", "list", "next", "int", "_check_response", "TypeError", "_output_to_list", "list_upstreams", "OSError", "list_users", "clear_password", "range", "values_mapper", "list_policies", "CommandExecutionError", "tuple", "delete_user", "_get_rabbitmq_plugin", "isinstance", "len", "bool", "_safe_output", "list_enabled_plugins", "stop_app", "iter", "SaltInvocationError", "_strip_listing_to_done"], "class_names": [], "class_method_calls": ["string.ascii_uppercase", "name.replace", "cmdoutput.splitlines", "line.split", "winreg.QueryValueEx", "os.listdir", "name.startswith", "cmd.extend", "winreg.KEY_READ", "random.SystemRandom", "winreg.HKEY_LOCAL_MACHINE", "password.replace", "line.strip", "server_version.split", "raw_line.split", "re.search", "row.split", "winreg.CloseKey", "log.debug", "string.split", "string.digits", "line.startswith", "cmd.append", "winreg.OpenKeyEx", "logging.getLogger", "line.endswith", "winreg.KEY_WOW64_32KEY", "os.path", "server_version.group", "salt.utils", "x.strip", "winreg.REG_SZ"]}, "rallydev.py": {"libraries": ["salt.utils.http", "logging", "salt.exceptions.SaltInvocationError", "salt.utils.json"], "function_names": ["list_users", "show_user", "show_item", "update_user", "query_item", "__virtual__", "_query", "query_user", "update_item", "_get_token", "list_items", "show_artifact"], "function_calls": ["show_item", "query_item", "_query", "update_item", "_get_token", "SaltInvocationError", "list_items", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "log.error", "name.title", "result.get", "salt.utils", "log.debug"]}, "random_org.py": {"libraries": ["salt.utils.json", "logging", "urllib.request", "http.client", "salt.utils.http"], "function_names": ["generateIntegers", "generateUUIDs", "generateDecimalFractions", "__virtual__", "_query", "generateGaussians", "generateStrings", "getUsage", "generateBlobs", "_numeric"], "function_calls": ["len", "hasattr", "str", "_query", "isinstance", "_numeric"], "class_names": [], "class_method_calls": ["_result.get", "logging.getLogger", "result.text", "RANDOM_ORG_FUNCTIONS.get", "log.error", "result.get", "salt.utils", "http.client", "log.debug", "urllib.parse", "options.get"]}, "rbac_solaris.py": {"libraries": ["logging"], "function_names": ["__virtual__", "managed"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["log.debug", "logging.getLogger"]}, "rbenv.py": {"libraries": ["re", "copy"], "function_names": ["installed", "install_rbenv", "_check_and_install_ruby", "absent", "_check_rbenv", "_check_and_install_rbenv", "_check_and_uninstall_ruby", "_ruby_installed"], "function_calls": ["_ruby_installed", "_check_and_install_ruby", "_check_rbenv", "_check_and_uninstall_ruby", "_check_and_install_rbenv"], "class_names": [], "class_method_calls": ["name.startswith", "re.sub", "copy.deepcopy"]}, "rdp.py": {"libraries": [], "function_names": ["__virtual__", "disabled", "enabled"], "function_calls": [], "class_names": [], "class_method_calls": []}, "rebootmgr.py": {"libraries": ["logging", "re", "salt.exceptions"], "function_names": ["get_group", "set_window", "is_active", "set_group", "reboot", "status", "version", "get_strategy", "set_max", "__virtual__", "lock", "cancel", "unlock", "_cmd", "get_window", "set_strategy"], "function_calls": ["zip", "_cmd", "dict"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.exceptions", "cmd.extend", "re.search", "cmd.append"]}, "redismod.py": {"libraries": ["copy"], "function_names": ["__virtual__", "string", "absent", "slaveof"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["copy.copy", "kwargs.update"]}, "reg.py": {"libraries": ["salt.utils.stringutils"], "function_names": ["clear", "list_", "delete", "mean", "set_"], "function_calls": ["set", "int", "isinstance"], "class_names": [], "class_method_calls": ["salt.utils", "add.split"]}, "rest_pkg.py": {"libraries": ["logging", "salt.utils.data", "salt.utils.platform"], "function_names": ["installed", "remove", "version", "__virtual__", "install", "list_pkgs", "upgrade"], "function_calls": ["len", "str"], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "rest_sample_utils.py": {"libraries": [], "function_names": ["fix_outage", "get_test_string"], "function_calls": [], "class_names": [], "class_method_calls": []}, "rest_service.py": {"libraries": ["logging", "fnmatch", "salt.utils.platform", "re"], "function_names": ["running", "stop", "list_", "start", "status", "__virtual__", "restart", "enabled", "get_all"], "function_calls": ["status", "bool", "get_all"], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger", "fnmatch.filter", "re.search"]}, "restartcheck.py": {"libraries": ["psutil", "time", "os", "salt.utils.path", "re", "salt.exceptions", "sys", "subprocess", "salt.utils.args", "salt.utils.files"], "function_names": ["_file_changed_nilrt", "_valid_deleted_file", "_format_output", "_get_kver_from_bin", "_check_timeout", "_kernel_versions_debian", "__virtual__", "_deleted_files", "_sysapi_changed_nilrt", "_kernel_versions_nilrt", "_kernel_versions_redhat", "_kernel_modules_changed_nilrt", "restartcheck"], "function_calls": ["len", "_file_changed_nilrt", "bool", "_valid_deleted_file", "_format_output", "int", "_get_kver_from_bin", "str", "_check_timeout", "_kernel_versions_debian", "_deleted_files", "round", "_sysapi_changed_nilrt", "_kernel_versions_nilrt", "_kernel_versions_redhat", "_kernel_modules_changed_nilrt", "isinstance"], "class_names": [], "class_method_calls": ["maps.readlines", "deleted_files.append", "time.time", "restart_services.remove", "os.listdir", "paths.stdout", "pth.startswith", "__grains__.get", "restartservicecommands.extend", "kernel_get_selections.splitlines", "subprocess.Popen", "subprocess.PIPE", "kwargs.pop", "kernel.strip", "pth.endswith", "line.strip", "servicefile.close", "matched.group", "re_result.group", "kernel_get_version.splitlines", "pth.find", "path.endswith", "re.search", "kernel.rstrip", "sys.stdout", "os.readlink", "line.find", "re.compile", "kernel_versions.append", "nonrestartable.append", "kernel_get_last.splitlines", "restartinitcommands.extend", "psutil.process_iter", "restartable.append", "proc.as_dict", "servicefile.readlines", "salt.exceptions", "restart_services.append", "kernel_versions.extend", "line.startswith", "cmd.append", "filenames.append", "psutil.NoSuchProcess", "regex.match", "fcount.read", "os.path", "packages.append", "salt.utils", "excludepid.append", "mapline.match", "kernels.append"]}, "restconf.py": {"libraries": ["difflib", "logging", "salt.utils.odict", "json", "yaml"], "function_names": ["__virtual__", "config_manage", "_compare_changes"], "function_calls": ["str", "type", "_compare_changes", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "yaml.safe_dump", "json.loads", "x.replace", "json.dumps", "difflib.unified_diff", "salt.utils", "log.debug", "log.critical"]}, "ret.py": {"libraries": ["salt.loader"], "function_names": ["get_jids", "get_minions", "get_jid", "get_fun"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.loader"]}, "rh_ip.py": {"libraries": ["os", "jinja2.exceptions", "salt.exceptions.CommandExecutionError", "salt.utils.json", "logging", "salt.utils.stringutils", "salt.utils.validate.net", "salt.utils.files", "salt.utils.templates", "jinja2"], "function_names": ["_parse_rh_config", "apply_network_settings", "down", "_parse_network_settings", "get_interface", "_parse_settings_bond_2", "build_network_settings", "_parse_settings_eth", "_parse_settings_vlan", "_parse_settings_arp", "build_routes", "_raise_error_routes", "_error_msg_iface", "_write_file_network", "_parse_settings_bond", "__virtual__", "_parse_settings_bond_3", "_parse_settings_bond_4", "_error_msg_routes", "_parse_settings_bond_6", "_read_file", "_raise_error_iface", "_parse_settings_bond_0", "_raise_error_network", "up", "_read_temp", "get_network_settings", "_parse_routes", "_parse_settings_bond_5", "_write_file_iface", "build_interface", "_log_default_network", "get_routes", "_log_default_iface", "_error_msg_network", "_parse_settings_miimon", "_parse_settings_bond_1", "_parse_ethtool_opts"], "function_calls": ["_parse_rh_config", "_parse_network_settings", "_parse_settings_bond_2", "_parse_settings_eth", "_parse_settings_vlan", "_parse_settings_arp", "_raise_error_routes", "_error_msg_iface", "_write_file_network", "int", "_parse_settings_bond", "_parse_settings_bond_3", "_parse_settings_bond_4", "_error_msg_routes", "_parse_settings_bond_6", "_read_file", "range", "_raise_error_iface", "_parse_settings_bond_0", "_raise_error_network", "str", "AttributeError", "_read_temp", "_parse_routes", "_parse_settings_bond_5", "_write_file_iface", "isinstance", "len", "_log_default_network", "_log_default_iface", "_error_msg_network", "_parse_settings_miimon", "_parse_settings_bond_1", "_parse_ethtool_opts"], "class_names": [], "class_method_calls": ["settings.pop", "data.splitlines", "line.split", "iface.strip", "salt.utils", "log.warning", "line.strip", "jinja2.exceptions", "opts.items", "p.rstrip", "fp_.write", "rfh.read", "channels_params.append", "vlan.update", "iface_type.lower", "template.render", "log.debug", "opts.update", "ret.update", "opt.split", "log.error", "settings.get", "opts.get", "i.strip", "JINJA.get_template", "current.items", "log.info", "name.upper", "ethtool.items", "bond.update", "line.startswith", "bonding.items", "lines.remove", "logging.getLogger", "pattern.format", "jinja2.Environment", "routes.extend", "k.lower", "os.path", "opts6.append", "config.update", "msg.format", "jinja2.FileSystemLoader", "opts4.append"]}, "rh_service.py": {"libraries": ["glob", "os", "salt.modules.upstart_service._upstart_enable", "salt.utils.path", "re", "salt.modules.upstart_service._upstart_is_enabled", "salt.modules.upstart_service._upstart_disable", "logging", "fnmatch", "stat"], "function_names": ["_sysv_is_enabled", "delete", "_sysv_disable", "_runlevel", "available", "disabled", "_chkconfig_is_enabled", "get_enabled", "_service_is_chkconfig", "enabled", "get_all", "_service_is_sysv", "reload_", "__virtual__", "_sysv_delete", "get_disabled", "_sysv_services", "stop", "disable", "_chkconfig_add", "enable", "_sysv_enable", "_upstart_services", "missing", "start", "status", "_upstart_delete", "restart", "_service_is_upstart"], "function_calls": ["_sysv_is_enabled", "_sysv_disable", "_runlevel", "sorted", "_chkconfig_is_enabled", "_upstart_enable", "_service_is_chkconfig", "get_all", "_service_is_sysv", "_upstart_is_enabled", "_sysv_delete", "_sysv_services", "str", "_chkconfig_add", "_sysv_enable", "_upstart_services", "len", "bool", "_upstart_disable", "_upstart_delete", "_service_is_upstart"], "class_names": [], "class_method_calls": ["out.split", "logging.getLogger", "glob.glob", "line.split", "stat.S_IXUSR", "_services.append", "log.error", "fnmatch.filter", "os.rename", "re.search", "__grains__.get", "os.stat", "os.path", "log.info", "row.split", "salt.utils", "limit.lower", "output.splitlines"]}, "riak.py": {"libraries": ["salt.utils.path"], "function_names": ["stop", "start", "__execute_cmd", "services", "cluster_leave", "cluster_plan", "test", "status", "__virtual__", "cluster_join", "member_status", "cluster_commit"], "function_calls": ["len", "__execute_cmd"], "class_names": [], "class_method_calls": ["item.split", "line.split", "key.strip", "salt.utils", "val.strip", "line.startswith", "i.split", "name.strip"]}, "rpm_lowpkg.py": {"libraries": ["rpmUtils.miscutils", "os", "salt.utils.pkg.rpm", "salt.utils.path", "salt.exceptions.CommandExecutionError", "re", "logging", "salt.utils.decorators.path", "salt.utils.versions", "salt.exceptions.SaltInvocationError", "datetime", "salt.utils.versions.LooseVersion", "rpm_vercmp", "rpm", "salt.utils.itertools"], "function_names": ["diff", "_ensure_epoch", "checksum", "version_cmp", "info", "modified", "_prepend", "__virtual__", "bin_pkg_info", "file_list", "list_pkgs", "file_dict", "owner", "verify", "normalize"], "function_calls": ["sorted", "dict", "list", "next", "_ensure_epoch", "int", "LooseVersion", "zip", "str", "CommandExecutionError", "normalize", "isinstance", "len", "cmp_func", "getattr", "bool", "reversed", "iter", "SaltInvocationError", "_prepend"], "class_names": [], "class_method_calls": ["x.strip", "line.split", "rpm.labelCompare", "cmd.format", "errors.append", "cmd.extend", "pkg_info.split", "_ret.append", "ignore_types.split", "rpm_vercmp.vercmp", "log.warning", "pkg_info.strip", "ret.values", "rpmUtils.miscutils", "descr.append", "param.startswith", "item.strip", "verify_options.split", "attr_map.items", "data.items", "pkg_data.pop", "re.compile", "attr.append", "log.debug", "kwargs.get", "ptrn.split", "stats.append", "pkg_data.copy", "re.split", "cmd.append", "pkg_name.startswith", "out.splitlines", "logging.getLogger", "res.startswith", "flags.get", "os.linesep", "pkginfo._fields", "flags.pop", "flags.items", "os.path", "changes.append", "salt.utils", "datetime.datetime", "query.append"]}, "rpmbuild_pkgbuild.py": {"libraries": ["traceback", "errno", "time", "salt.modules.gpg", "os", "functools", "salt.utils.path", "salt.exceptions.CommandExecutionError", "re", "salt.utils.vt", "shutil", "logging", "salt.exceptions.SaltInvocationError", "gnupg", "salt.utils.files", "tempfile", "salt.utils.user", "urllib.parse"], "function_names": ["_sign_file", "_sign_files_with_gpg_agent", "_check_repo_gpg_phrase_utils", "_get_distset", "_get_deps", "_mk_tree", "__virtual__", "_get_gpg_key_resources", "make_src_pkg", "build", "make_repo", "_get_spec", "_create_rpmmacros", "_get_src"], "function_calls": ["_sign_file", "_get_src", "next", "_sign_files_with_gpg_agent", "int", "_check_repo_gpg_phrase_utils", "_get_distset", "_get_deps", "_mk_tree", "_get_gpg_key_resources", "make_src_pkg", "iter", "CommandExecutionError", "SaltInvocationError", "_get_spec", "_create_rpmmacros", "isinstance"], "class_names": [], "class_method_calls": ["filename.endswith", "time.sleep", "parsed.scheme", "os.listdir", "fileused.endswith", "SIGN_PROMPT_RE.search", "__grains__.get", "local_keys2_keygrip.splitlines", "errno.EEXIST", "re.M", "shutil.rmtree", "tempfile.mkdtemp", "proc.sendline", "afile.write", "tgt.split", "re.compile", "traceback.format_exc", "ret.setdefault", "proc.has_unread_data", "shutil.copy", "proc.recv", "log.error", "line.startswith", "urllib.parse", "proc.close", "logging.getLogger", "ret.append", "sources.split", "exc.errno", "deps_list.isspace", "os.path", "salt.utils", "proc.exitstatus", "functools.partial"]}, "rsync.py": {"libraries": ["salt.utils.path", "logging", "os"], "function_names": ["__virtual__", "_get_summary", "_get_changes", "synchronized"], "function_calls": ["_get_summary", "sorted", "_get_changes", "list"], "class_names": [], "class_method_calls": ["logging.getLogger", "os.linesep", "line.split", "deleted.append", "salt.utils", "os.path", "os.makedirs", "result.get", "rsync_out.split", "line.startswith", "copied.append"]}, "runit.py": {"libraries": ["glob", "time", "os", "salt.utils.path", "salt.exceptions.CommandExecutionError", "logging", "salt.utils.files"], "function_names": ["available", "disabled", "_get_svc_list", "get_enabled", "enabled", "get_all", "status_autostart", "reload_", "add_svc_avail_path", "show", "__virtual__", "get_disabled", "stop", "disable", "_is_svc", "remove", "enable", "missing", "get_svc_alias", "full_restart", "start", "status", "restart", "get_svc_broken_path", "_get_svc_path", "_service_path", "get_svc_avail_path"], "function_calls": ["stop", "status_autostart", "bool", "_is_svc", "available", "sorted", "add_svc_avail_path", "set", "status", "restart", "_get_svc_list", "enabled", "get_svc_alias", "CommandExecutionError", "_get_svc_path", "_service_path"], "class_names": [], "class_method_calls": ["os.unlink", "time.sleep", "__grains__.get", "os.access", "ava.difference", "os.X_OK", "ret.add", "out.startswith", "ava.union", "os.readlink", "os.symlink", "log.trace", "glob.glob", "log.error", "logging.getLogger", "ava.add", "os.path", "AVAIL_SVR_DIRS.append", "salt.utils", "os.remove", "ena.add"]}, "rvm.py": {"libraries": ["re"], "function_names": ["gemset_present", "installed", "_check_rvm", "_check_ruby", "_check_and_install_ruby"], "function_calls": ["_check_and_install_ruby", "_check_ruby", "_check_rvm"], "class_names": [], "class_method_calls": ["name.split", "re.search", "micro_version_regex.search", "re.sub", "re.compile", "micro_version_regex.sub"]}, "s3.py": {"libraries": ["requests", "salt.exceptions.CommandExecutionError", "salt.utils.xmlutil", "salt.utils.hashutils", "logging", "salt.utils.files", "xml.etree.ElementTree", "salt.utils.aws", "urllib.parse"], "function_names": ["query"], "function_calls": ["str", "type", "dict", "CommandExecutionError"], "class_names": [], "class_method_calls": ["fh.read", "requests.codes", "fh.close", "result.headers", "result.iter_content", "out.write", "ET.ParseError", "log.debug", "log.error", "header.strip", "result.status_code", "xml.to_dict", "urllib.parse", "requests.request", "logging.getLogger", "ret.append", "ET.fromstring", "salt.utils", "result.content"]}, "s6.py": {"libraries": ["salt.exceptions.CommandExecutionError", "re", "os"], "function_names": ["stop", "start", "reload_", "available", "status", "restart", "missing", "term", "get_all", "_service_path", "full_restart"], "function_calls": ["sorted", "restart", "CommandExecutionError", "_service_path", "get_all"], "class_names": [], "class_method_calls": ["os.path", "re.search", "dirname.startswith", "os.listdir"]}, "salt_version.py": {"libraries": ["salt.exceptions.CommandExecutionError", "logging", "salt.utils.versions", "salt.version"], "function_names": ["less_than", "__virtual__", "get_release_number", "equal", "_check_release_cmp", "greater_than"], "function_calls": ["str", "get_release_number", "CommandExecutionError", "_check_release_cmp", "isinstance"], "class_names": [], "class_method_calls": ["current_version.rsplit", "logging.getLogger", "log.info", "salt.utils", "version_map.get", "salt.version", "name.lower"]}, "saltcloudmod.py": {"libraries": ["salt.utils.data", "salt.utils.json", "saltcloud"], "function_names": ["__virtual__", "create"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils"]}, "saltutil.py": {"libraries": ["logging"], "function_names": ["sync_states", "_sync_single", "sync_utils", "sync_proxymodules", "sync_renderers", "sync_engines", "sync_grains", "__virtual__", "sync_modules", "sync_log_handlers", "sync_thorium", "sync_clouds", "sync_executors", "sync_beacons", "sync_outputters", "sync_sdb", "sync_pillar", "sync_serializers", "sync_matchers", "sync_returners", "sync_all", "sync_output"], "function_calls": ["_sync_single"], "class_names": [], "class_method_calls": ["log.error", "logging.getLogger", "sync_status.items"]}, "schedule.py": {"libraries": ["salt.utils.event", "itertools", "os", "salt.loader", "salt.utils.minion", "signal", "salt.syspaths", "salt.utils.stringutils", "salt.utils.files", "salt.defaults.exitcodes", "errno", "time", "croniter", "salt.utils.error", "dateutil.parser", "salt.utils.master", "salt.payload", "salt.utils.odict.OrderedDict", "salt.exceptions.SaltInvocationError", "salt.utils.args", "weakref", "random", "salt.utils.user", "salt.utils.yaml", "salt.exceptions", "salt.utils.process", "logging", "threading", "salt.config", "salt.utils.platform", "sys", "datetime", "salt.minion", "salt.utils.jid", "copy"], "function_names": ["_handle_once", "persist", "__init__", "_handle_until", "handle_func", "option", "__getnewargs__", "modify_job", "_handle_after", "_handle_skip_explicit", "disable_job", "list", "_chop_ms", "_handle_when", "eval", "skip_job", "_handle_time_elements", "_handle_skip_during_range", "_splay", "__new__", "add_job", "_check_max_running", "_handle_range", "_run_job", "cleanup_subprocesses", "disable_schedule", "delete_job", "job_status", "reset", "_get_schedule", "run_job", "postpone_job", "_handle_run_explicit", "_handle_cron", "reload", "clean_proc_dir", "delete_job_prefix", "save_schedule", "enable_schedule", "get_next_fire_time", "__singleton_init__", "enable_job"], "function_calls": ["any", "_handle_until", "_handle_after", "_handle_skip_explicit", "thread_cls", "list", "next", "_chop_ms", "_handle_when", "int", "type", "set", "_handle_time_elements", "_handle_skip_during_range", "_splay", "_handle_range", "tuple", "ValueError", "isinstance", "len", "_handle_run_explicit", "hasattr", "bool", "_handle_cron", "clean_proc_dir", "abs", "iter", "SaltInvocationError", "_handle_once"], "class_names": ["Schedule"], "class_method_calls": ["completed_funcs.append", "self.delete_job_prefix", "self._get_schedule", "_run_explicit.remove", "copy.copy", "time.gmtime", "signal.SIGINT", "self.delete_job", "sys.exit", "_when.append", "cls.instance", "returners.loader", "dateutil_parser.parse", "itertools.chain", "time.strftime", "_when.remove", "self.enabled", "self.schedule_returner", "mret.items", "logging.DEBUG", "salt.utils", "os.getpid", "OrderedDict.fromkeys", "schedule.get", "os.unlink", "salt.loader", "evt.fire_event", "self.intervals", "self.functions", "log.warning", "argspec.keywords", "sys.maxsize", "datetime.timedelta", "errno.ENOENT", "_skip_explicit.remove", "self.handle_func", "time.ctime", "fp_.close", "func_globals.items", "data.keys", "data.get", "self.returners", "dt.microsecond", "log.error", "self_functions.keys", "signal.SIGTERM", "log.exception", "job.startswith", "event.destroy", "self.utils", "_next_fire_time.strftime", "os.path", "threading.Thread", "event.fire_event", "instance.__singleton_init__", "os.makedirs", "salt.defaults", "errno.EEXIST", "_when.sort", "self.splay", "self.standalone", "fp_.write", "copy.deepcopy", "namespaced_event.destroy", "log.info", "self.time_offset", "salt.config", "exc.errno", "self.proxy", "self._subprocess_list", "self.skip_during_range", "os.listdir", "self.skip_function", "salt.syspaths", "_run_explicit.append", "_skip_explicit.append", "mod_name.split", "rets.extend", "schedule.items", "self.loop_interval", "invalid_time_combos.append", "rets.append", "self._run_job", "self.persist", "salt.payload", "proc.start", "ret.items", "log.debug", "ret.copy", "log.trace", "self.opts", "item.startswith", "self.option", "object.__new__", "random.randint", "itertools.combinations", "schedule.update", "logging.getLogger", "croniter.croniter", "weakref.proxy", "jids.append", "salt.minion", "datetime.datetime", "self._check_max_running"]}, "scp_mod.py": {"libraries": ["paramiko", "logging", "scp"], "function_names": ["get", "_prepare_connection", "put", "__virtual__", "_select_kwargs"], "function_calls": ["_select_kwargs", "isinstance", "_prepare_connection"], "class_names": [], "class_method_calls": ["scp_args.pop", "ssh.get_transport", "cached_files.append", "paramiko.AutoAddPolicy", "logging.getLogger", "kwargs.items", "scp.SCPClient", "paramiko.SSHClient", "paramiko_args.append", "scp_client.get", "ssh.set_missing_host_key_policy", "ssh.connect", "paramiko_kwargs.pop", "scp_client.put"]}, "scsi.py": {"libraries": ["salt.utils.path", "logging", "os.path"], "function_names": ["ls_", "rescan_all"], "function_calls": [], "class_names": [], "class_method_calls": ["line.strip", "data.splitlines", "logging.getLogger", "key.replace", "res.get", "majmin.startswith", "salt.utils", "os.path", "comps.pop", "line.startswith", "majmin.replace"]}, "sdb.py": {"libraries": ["random", "salt.exceptions.SaltInvocationError", "salt.loader"], "function_names": ["sdb_get", "sdb_get_or_set_hash", "sdb_set", "sdb_delete"], "function_calls": ["len", "sdb_set", "range", "sdb_get", "SaltInvocationError", "isinstance"], "class_names": [], "class_method_calls": ["salt.loader", "uri.startswith", "opts.get", "uri.find", "random.SystemRandom"]}, "seed.py": {"libraries": ["salt.utils.cloud", "os", "salt.config", "shutil", "uuid", "salt.syspaths", "logging", "salt.crypt", "salt.utils.files", "tempfile"], "function_names": ["prep_bootstrap", "_check_resolv", "_install", "_umount", "_mount", "apply_", "_file_or_content", "mkconfig", "_check_install"], "function_calls": ["prep_bootstrap", "_check_resolv", "_install", "_umount", "_mount", "_file_or_content", "mkconfig", "_check_install"], "class_names": [], "class_method_calls": ["fic.read", "salt.syspaths", "os.makedirs", "log.warning", "pki_dir.lstrip", "fpd_.replace", "tempfile.mkdtemp", "fp_.write", "os.chmod", "log.debug", "shutil.copy", "log.error", "log.info", "salt.crypt", "os.rename", "os.rmdir", "logging.getLogger", "fic.write", "salt.config", "fp_.read", "os.path", "uuid.uuid4", "salt.utils"]}, "selinux.py": {"libraries": [], "function_names": ["_refine_value", "fcontext_policy_absent", "port_policy_absent", "mode", "fcontext_policy_present", "fcontext_policy_applied", "module", "module_remove", "boolean", "_refine_module_state", "module_install", "__virtual__", "_refine_mode", "port_policy_present"], "function_calls": ["_refine_value", "any", "str", "module_remove", "module_install", "_refine_module_state", "_refine_mode"], "class_names": [], "class_method_calls": ["ret.update", "opts.get", "apply_ret.get", "new_state.update", "mode.startswith", "old_state.update"]}, "sensors.py": {"libraries": ["salt.utils.path", "logging"], "function_names": ["__virtual__", "sense"], "function_calls": ["len"], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger", "sensor.split"]}, "serverdensity_device.py": {"libraries": ["logging", "salt.utils.json"], "function_names": ["monitored", "_get_salt_params"], "function_calls": ["str", "_get_salt_params", "int"], "class_names": [], "class_method_calls": ["params.items", "salt.utils", "logging.getLogger", "params_from_salt.pop"]}, "servicenow.py": {"libraries": ["logging", "servicenow_rest.api.Client"], "function_names": ["set_change_request_state", "delete_record", "update_record_field", "__virtual__", "_get_client", "non_structured_query"], "function_calls": ["str", "Client", "_get_client"], "class_names": [], "class_method_calls": ["logging.getLogger", "kwargs.items", "client.get", "log.error", "client.table", "query_parts.append", "client.delete", "client.update"]}, "slack_notify.py": {"libraries": ["salt.utils.json", "logging", "salt.exceptions.SaltInvocationError", "salt.utils.slack", "urllib.parse"], "function_names": ["list_users", "post_message", "find_user", "list_rooms", "__virtual__", "_get_api_key", "find_room", "call_hook", "_get_hook_id"], "function_calls": ["list_users", "list_rooms", "_get_api_key", "_get_hook_id", "SaltInvocationError"], "class_names": [], "class_method_calls": ["result.get", "logging.getLogger", "channel.startswith", "log.error", "name.startswith", "log.warning", "salt.utils", "urllib.parse"]}, "slackware_service.py": {"libraries": ["glob", "fnmatch", "os", "re"], "function_names": ["available", "disabled", "_get_svc_list", "get_enabled", "enabled", "get_all", "reload_", "__virtual__", "_rcd_mode", "get_disabled", "stop", "disable", "_get_svc", "enable", "missing", "start", "status", "force_reload", "restart"], "function_calls": ["bool", "sorted", "_get_svc", "set", "_rcd_mode", "_get_svc_list", "get_all"], "class_names": [], "class_method_calls": ["glob.glob", "notservice.match", "rcd.split", "os.stat", "fnmatch.filter", "re.search", "os.access", "os.chmod", "os.path", "os.X_OK", "ret.add", "re.compile"]}, "slsutil.py": {"libraries": ["posixpath", "os", "salt.loader", "salt.utils.path", "salt.template", "salt.exceptions", "salt.utils.dictupdate", "textwrap", "salt.utils.args"], "function_names": ["banner", "merge_all", "deserialize", "boolstr", "update", "path_exists", "findup", "_get_serialize_fn", "_set_context", "serialize", "merge", "dir_exists", "file_exists", "renderer"], "function_calls": ["len", "function", "getattr", "path_exists", "_get_serialize_fn", "_set_context", "dir_exists", "file_exists", "list", "isinstance"], "class_names": [], "class_method_calls": ["commentchar.strip", "os.linesep", "salt.loader", "kwargs.get", "salt.template", "block.append", "salt.exceptions", "textwrap.TextWrapper", "ret.read", "line.center", "commentchar.rstrip", "os.path", "salt.utils", "wrapper.wrap", "posixpath.normpath"]}, "smartos_nictagadm.py": {"libraries": ["salt.utils.path", "logging", "salt.utils.platform"], "function_names": ["delete", "list_nictags", "update", "__virtual__", "vms", "add", "exists"], "function_calls": ["list_nictags"], "class_names": [], "class_method_calls": ["logging.getLogger", "kwargs.get", "mac.replace", "nictag.split", "header.index", "salt.utils"]}, "smartos_virt.py": {"libraries": ["salt.utils.path", "logging", "salt.exceptions.CommandExecutionError", "salt.utils.platform"], "function_names": ["get_macs", "stop", "start", "shutdown", "vm_info", "init", "reboot", "setmem", "__virtual__", "list_domains", "vm_virt_type", "list_inactive_vms", "list_active_vms"], "function_calls": ["list_inactive_vms", "CommandExecutionError", "vm_virt_type", "list_active_vms"], "class_names": [], "class_method_calls": ["vm.ljust", "logging.getLogger", "macs.append", "log.warning", "salt.utils", "vms.append"]}, "smbios.py": {"libraries": ["salt.modules.cmdmod", "salt.utils.path", "re", "uuid", "logging"], "function_names": ["records", "get", "__virtual__", "_dmi_cast", "_dmidecoder", "_dmi_parse", "_dmi_isclean", "_dmi_data"], "function_calls": ["bool", "range", "int", "_dmi_cast", "iter", "_dmidecoder", "_dmi_parse", "_dmi_isclean", "zip", "_dmi_data"], "class_names": [], "class_method_calls": ["v.startswith", "val.split", "line.split", "val.startswith", "salt.modules", "re.MULTILINE", "line.strip", "re.match", "re.search", "handle.split", "el.strip", "uuid.UUID", "log.debug", "re.compile", "dmi_raw.pop", "log.trace", "hline.split", "val.strip", "val.replace", "re.split", "vlist.insert", "logging.getLogger", "re.IGNORECASE", "key.strip", "dmi.append", "dmi_raw.split", "salt.utils"]}, "smf_service.py": {"libraries": ["re", "fnmatch"], "function_names": ["stop", "disable", "get_disabled", "start", "reload_", "available", "get_stopped", "get_running", "disabled", "status", "enable", "__virtual__", "missing", "restart", "enabled", "get_enabled", "_get_enabled_disabled", "get_all"], "function_calls": ["bool", "start", "sorted", "set", "enabled", "_get_enabled_disabled", "get_all"], "class_names": [], "class_method_calls": ["line.split", "re.search", "fnmatch.filter", "ret.add"]}, "smtp.py": {"libraries": ["email.utils.formatdate", "os", "smtplib", "logging", "gnupg"], "function_names": ["send"], "function_calls": ["str", "formatdate", "int"], "class_names": [], "class_method_calls": ["server.quit", "server.starttls", "logging.getLogger", "gpg.encrypt", "server.login", "encrypted_data.ok", "smtplib.SMTP", "log.error", "opts.get", "os.path", "gnupg.GPG", "encrypted_data.status", "config.update", "server.sendmail", "log.debug", "encrypted_data.stderr"]}, "snapper.py": {"libraries": ["os"], "function_names": ["__virtual__", "baseline_snapshot", "_get_baseline_from_tag"], "function_calls": ["_get_baseline_from_tag", "len"], "class_names": [], "class_method_calls": ["ret.update", "status.keys", "target_file.startswith", "os.path", "status.pop"]}, "solaris_fmadm.py": {"libraries": ["salt.utils.decorators", "salt.utils.path", "salt.utils.platform", "logging", "salt.utils.odict.OrderedDict"], "function_names": ["faulty", "config", "load", "flush", "show", "__virtual__", "_parse_fmdump_verbose", "replaced", "list_records", "_parse_fmadm_faulty", "_check_fmadm", "_parse_fmadm_config", "unload", "acquit", "reset", "_check_fmdump", "repaired", "_parse_fmdump", "_fmadm_action_fmri", "_merge_data", "healthy"], "function_calls": ["len", "OrderedDict", "_parse_fmadm_faulty", "_check_fmadm", "_parse_fmadm_config", "_parse_fmdump", "faulty", "_fmadm_action_fmri", "_parse_fmdump_verbose", "_merge_data", "_check_fmdump"], "class_names": [], "class_method_calls": ["decorators.memoize", "line.strip", "entry.split", "logging.getLogger", "line.split", "summary.append", "salt.utils", "result.append", "fault.append", "header.index", "line.startswith", "result.update", "output.split"]}, "solaris_group.py": {"libraries": ["grp", "logging", "salt.utils.data"], "function_names": ["chgid", "delete", "info", "__virtual__", "add", "getent"], "function_calls": ["info"], "class_names": [], "class_method_calls": ["grinfo.gr_mem", "logging.getLogger", "grinfo.gr_passwd", "grp.getgrnam", "ret.append", "grinfo.gr_gid", "grinfo.gr_name", "log.warning", "salt.utils", "grp.getgrall", "kwargs.pop"]}, "solaris_shadow.py": {"libraries": ["pwd", "os", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.utils.pycrypto", "spwd"], "function_names": ["set_password", "gen_password", "info", "set_mindays", "default_hash", "__virtual__", "set_maxdays", "set_warndays", "del_password"], "function_calls": ["len", "info", "CommandExecutionError", "int"], "class_names": [], "class_method_calls": ["ret.update", "line.strip", "data.pw_name", "pwd.getpwnam", "data.sp_pwd", "data.sp_nam", "data.sp_lstchg", "ofile.writelines", "__grains__.get", "data.sp_max", "os.path", "lines.append", "spwd.getspnam", "data.sp_min", "data.sp_expire", "data.sp_inact", "salt.utils", "data.sp_warn"]}, "solaris_system.py": {"libraries": ["salt.utils.path", "salt.utils.platform"], "function_names": ["shutdown", "init", "halt", "reboot", "__virtual__", "poweroff"], "function_calls": ["shutdown"], "class_names": [], "class_method_calls": ["salt.utils", "cmd.append"]}, "solaris_user.py": {"libraries": ["pwd", "salt.exceptions.CommandExecutionError", "salt.utils.data", "logging", "salt.utils.user", "copy"], "function_names": ["delete", "chhome", "chworkphone", "chhomephone", "add", "chgroups", "_get_gecos", "rename", "__virtual__", "getent", "chgid", "list_users", "list_groups", "_update_gecos", "_build_gecos", "chroomnumber", "chuid", "chfullname", "info", "chshell"], "function_calls": ["len", "_get_gecos", "list_groups", "_update_gecos", "sorted", "str", "info", "set", "chfullname", "chroomnumber", "chworkphone", "_build_gecos", "CommandExecutionError", "chhomephone", "isinstance"], "class_names": [], "class_method_calls": ["groups.update", "cmd.extend", "log.warning", "kwargs.pop", "user.pw_name", "data.pw_uid", "data.pw_gecos", "data.pw_dir", "pwd.getpwnam", "copy.deepcopy", "gecos_dict.get", "cmd.append", "data.pw_name", "pwd.getpwall", "logging.getLogger", "ret.append", "data.pw_passwd", "data.pw_shell", "groups.split", "data.pw_gid", "salt.utils", "gecos_field.append"]}, "solarisipspkg.py": {"libraries": ["salt.utils.path", "salt.exceptions.CommandExecutionError", "salt.utils.data", "salt.utils.functools", "salt.utils.pkg", "logging", "copy"], "function_names": ["get_fmri", "purge", "_ips_get_pkgversion", "latest_version", "remove", "search", "upgrade_available", "version", "refresh_db", "__virtual__", "list_upgrades", "_list_pkgs_from_context", "is_installed", "list_pkgs", "_ips_get_pkgname", "normalize_name", "install", "upgrade"], "function_calls": ["len", "next", "_ips_get_pkgversion", "getattr", "any", "remove", "float", "version", "is_installed", "refresh_db", "_list_pkgs_from_context", "iter", "list_pkgs", "_ips_get_pkgname", "CommandExecutionError", "list", "isinstance"], "class_names": [], "class_method_calls": ["pkg.items", "logging.getLogger", "ret.append", "copy.deepcopy", "kwargs.get", "__context__.pop", "line.split", "name.startswith", "cmd.extend", "ret.values", "pkg2inst.append", "salt.utils", "log.debug", "cmd.append"]}, "solarispkg.py": {"libraries": ["os", "salt.exceptions.CommandExecutionError", "salt.utils.data", "salt.utils.functools", "logging", "salt.utils.stringutils", "salt.utils.files", "salt.exceptions.MinionError", "copy"], "function_names": ["latest_version", "_write_line", "remove", "upgrade_available", "version", "purge", "__virtual__", "install", "list_pkgs", "_write_adminfile", "_list_pkgs_from_context"], "function_calls": ["len", "latest_version", "any", "_write_line", "remove", "float", "list_pkgs", "CommandExecutionError", "_write_adminfile", "enumerate", "_list_pkgs_from_context"], "class_names": [], "class_method_calls": ["logging.getLogger", "copy.deepcopy", "kwargs.get", "__context__.pop", "line.split", "log.error", "fp_.write", "cmd_prefix.append", "errors.append", "log.warning", "salt.utils", "os.remove", "kwargs.pop"]}, "solr.py": {"libraries": ["urllib.request", "os", "salt.utils.json", "salt.utils.path"], "function_names": ["delta_import", "_checks", "backup", "_merge_options", "match_index_versions", "signal", "set_replication_enabled", "_get_none_or_value", "set_is_polling", "_http_request", "reload_import_config", "_replication_request", "optimize", "__virtual__", "_get_return_dict", "replication_details", "ping", "_find_value", "full_import", "_match", "_is_master", "import_status", "is_replication_enabled", "_format_url", "version", "_update_return_dict", "_pre_index_check", "core_status", "_auth", "_get_admin_info", "reload_core", "abort_import", "lucene_version", "_check_for_cores"], "function_calls": ["_checks", "_merge_options", "set_replication_enabled", "_get_none_or_value", "set_is_polling", "_http_request", "_replication_request", "_get_return_dict", "_match", "_find_value", "_is_master", "import_status", "str", "_format_url", "_update_return_dict", "_pre_index_check", "_auth", "len", "_get_admin_info", "isinstance", "reload_core", "_check_for_cores"], "class_names": [], "class_method_calls": ["ret.update", "extra.append", "defaults.items", "ret.append", "params.append", "defaults.update", "options.items", "versions.update", "basic.add_password", "path.endswith", "os.path", "digest.add_password", "ret_dict.items", "urllib.request", "salt.utils", "value.lower"]}, "solrcloud.py": {"libraries": ["salt.utils.json"], "function_names": ["alias", "collection"], "function_calls": ["len", "set"], "class_names": [], "class_method_calls": ["salt.utils", "options.items"]}, "splunk.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["set", "list", "isinstance"], "class_names": [], "class_method_calls": ["target.get", "result.get", "kwargs.get"]}, "splunk_search.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["dict"], "class_names": [], "class_method_calls": ["old_content.get", "target.content"]}, "sqlite3.py": {"libraries": ["sqlite3"], "function_names": ["row_absent", "_dict_factory", "table_present", "_get_sql_from_schema", "row_present", "__virtual__", "_query", "table_absent"], "function_calls": ["len", "str", "_get_sql_from_schema", "_query", "enumerate", "isinstance"], "class_names": [], "class_method_calls": ["conn.commit", "sqlite3.PARSE_DECLTYPES", "params.append", "columns.append", "schema.strip", "conn.execute", "conn.row_factory", "cursor.fetchall", "value_stmt.append", "data.items", "values.append", "cursor.description", "conn.close", "cursor.rowcount", "sqlite3.connect"]}, "ssh_pkg.py": {"libraries": ["logging", "salt.utils.platform"], "function_names": ["__virtual__", "install", "list_pkgs", "remove"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "ssh_service.py": {"libraries": ["logging", "fnmatch", "salt.utils.platform", "re"], "function_names": ["running", "stop", "list_", "start", "status", "__virtual__", "restart", "enabled", "get_all"], "function_calls": ["status", "bool", "get_all"], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger", "fnmatch.filter", "re.search"]}, "statuspage.py": {"libraries": ["logging", "time"], "function_names": ["_update_on_fields", "delete", "_clear_dict", "create", "_unique", "_find_match", "update", "__virtual__", "_clear_ignore", "managed", "_clear_ignore_list", "_compute_diff", "_default_ret", "_ignore_keys", "_compute_diff_ret"], "function_calls": ["len", "_update_on_fields", "_unique", "_find_match", "set", "_clear_ignore", "_clear_ignore_list", "_compute_diff", "_default_ret", "_compute_diff_ret"], "class_names": [], "class_method_calls": ["time.sleep", "endpoint_existing_config_ret.get", "kwargs.items", "sp_update.get", "__opts__.get", "sp_delete.get", "remove_endpoint.pop", "update_endpoints.append", "new_ele.get", "unique_list.append", "new_ele.items", "sp_create.get", "prev_ele.get", "adding.get", "log.debug", "endpoint_diff.get", "update_endpoint.pop", "ret.update", "ele.get", "complete_diff.items", "log.error", "remove_endpoints.append", "config.items", "logging.getLogger", "removing.get", "karg.startswith", "fields_update.keys", "endpoint_props.items", "new_endpoints.append", "_ele.get", "updating.get"]}, "supervisord.py": {"libraries": ["logging"], "function_names": ["running", "dead", "mod_watch", "_is_stopped_state", "_check_error"], "function_calls": ["running", "len", "bool", "any", "sorted", "str", "set", "_is_stopped_state", "_check_error", "list"], "class_names": [], "class_method_calls": ["ret.update", "process_groups.append", "name.endswith", "logging.getLogger", "x.startswith", "proc.index", "process_groups.add", "changes.append", "log.debug", "matches.items", "proc.startswith"]}, "suse_apache.py": {"libraries": ["salt.utils.path", "logging"], "function_names": ["__virtual__", "a2enmod", "check_mod_enabled", "a2dismod"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "mod.endswith", "logging.getLogger"]}, "suse_ip.py": {"libraries": ["os", "jinja2.exceptions", "salt.exceptions.CommandExecutionError", "logging", "salt.utils.stringutils", "salt.utils.validate.net", "salt.utils.files", "salt.utils.templates", "jinja2"], "function_names": ["apply_network_settings", "down", "_parse_network_settings", "get_interface", "_parse_settings_bond_2", "build_network_settings", "_parse_settings_eth", "_get_non_blank_lines", "_parse_settings_vlan", "_parse_settings_arp", "build_routes", "_raise_error_routes", "_error_msg_iface", "_write_file_network", "_parse_settings_bond", "__virtual__", "_parse_settings_bond_3", "_parse_settings_bond_4", "_error_msg_routes", "_parse_settings_bond_6", "_read_file", "_raise_error_iface", "_parse_settings_bond_0", "_raise_error_network", "up", "_parse_suse_config", "get_network_settings", "_parse_routes", "_parse_settings_bond_5", "_write_file_iface", "build_interface", "_log_default_network", "get_routes", "_log_default_iface", "_error_msg_network", "_parse_settings_miimon", "_parse_settings_bond_1", "_parse_ethtool_opts"], "function_calls": ["_parse_network_settings", "_parse_settings_bond_2", "_parse_settings_eth", "_get_non_blank_lines", "_parse_settings_vlan", "_parse_settings_arp", "_raise_error_routes", "_error_msg_iface", "_write_file_network", "int", "_parse_settings_bond", "_parse_settings_bond_3", "_parse_settings_bond_4", "_error_msg_routes", "_parse_settings_bond_6", "_read_file", "range", "_raise_error_iface", "_parse_settings_bond_0", "str", "_parse_suse_config", "AttributeError", "_parse_routes", "_parse_settings_bond_5", "_write_file_iface", "isinstance", "len", "_log_default_network", "_log_default_iface", "_error_msg_network", "_parse_settings_miimon", "_parse_settings_bond_1", "_parse_ethtool_opts"], "class_names": [], "class_method_calls": ["data.splitlines", "line.split", "iface.strip", "salt.utils", "log.warning", "line.strip", "jinja2.exceptions", "opts.items", "p.rstrip", "fp_.write", "rfh.read", "channels_params.append", "vlan.update", "iface_type.lower", "template.render", "log.debug", "opts.update", "ret.update", "log.error", "settings.get", "opts.get", "JINJA.get_template", "current.items", "log.info", "name.upper", "ethtool.items", "bond.update", "line.startswith", "bonding.items", "lines.remove", "logging.getLogger", "pattern.format", "jinja2.Environment", "k.lower", "os.path", "opt.startswith", "config.update", "msg.format", "jinja2.FileSystemLoader"]}, "svn.py": {"libraries": ["os", "salt.utils.path", "salt.exceptions", "logging", "salt.states.git._neutral_test", "salt.states.git._fail"], "function_names": ["__virtual__", "export", "latest", "dirty"], "function_calls": ["str", "_fail", "tuple", "_neutral_test"], "class_names": [], "class_method_calls": ["salt.utils", "os.path", "logging.getLogger", "exceptions.CommandExecutionError"]}, "swarm.py": {"libraries": ["docker", "salt.utils.json"], "function_names": ["remove_service", "service_create", "swarm_service_info", "_is_docker_module", "__init__", "node_ls", "__virtual__", "remove_node", "swarm_init", "leave_swarm", "swarm_tokens", "update_node", "joinswarm"], "function_calls": ["hasattr", "_is_docker_module", "str", "swarm_tokens", "all"], "class_names": [], "class_method_calls": ["docker.errors", "client.remove_service", "err.explanation", "docker.from_env", "client.remove_node", "client.nodes", "docker.APIClient", "salt_return.update", "docker.types", "client.inspect_swarm", "salt.utils", "client.update_node", "client.inspect_service"]}, "swift.py": {"libraries": ["os.path.dirname", "os.path.isdir", "logging", "sys", "swiftclient.client", "os.makedirs", "salt.utils.files", "errno.EEXIST"], "function_names": ["get_account", "head_object", "delete_object", "__init__", "put_object", "check_swift", "_sanitize", "post_container", "mkdirs", "post_object", "delete_container", "head_container", "get_object", "put_container", "get_container"], "function_calls": ["len", "hasattr", "getattr", "str", "_sanitize", "dirname", "mkdirs", "isdir", "makedirs"], "class_names": ["SaltSwift"], "class_method_calls": ["logging.getLogger", "err.errno", "client.Connection", "exc.msg", "log.error", "exc.code", "self.kwargs", "kwargs.copy", "sys.stdout", "fp.close", "fp.write", "salt.utils", "self.conn"]}, "sysbench.py": {"libraries": ["salt.utils.path", "re"], "function_names": ["threads", "_parser", "mutex", "__virtual__", "ping", "cpu", "fileio", "memory"], "function_calls": ["zip", "_parser"], "class_names": [], "class_method_calls": ["mutex_locks.extend", "per_response_time.group", "re.search", "salt.utils", "test_command.format", "re.compile"]}, "sysfs.py": {"libraries": ["re"], "function_names": ["__virtual__", "present"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["re.sub"]}, "syslog_ng.py": {"libraries": ["logging"], "function_names": ["config", "started", "reloaded", "stopped"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger"]}, "sysmod.py": {"libraries": ["salt.loader", "salt.state", "logging", "fnmatch", "salt.utils.args", "salt.utils.doc", "salt.runner", "salt.utils.schema"], "function_names": ["state_schema", "reload_modules", "_argspec_to_schema", "doc", "state_argspec", "argspec", "list_modules", "list_returners", "runner_argspec", "__virtual__", "state_doc", "runner_doc", "returner_doc", "list_functions", "returner_argspec", "list_runner_functions", "list_renderers", "list_returner_functions", "list_state_functions", "renderer_doc", "list_runners", "list_state_modules"], "function_calls": ["len", "hasattr", "sorted", "type", "_argspec_to_schema", "set", "state_argspec", "zip", "list"], "class_names": [], "class_method_calls": ["func.split", "fun.startswith", "salt.loader", "run_.functions", "salt.state", "fnmatch.filter", "schemas.append", "specs.items", "runners.add", "returners_.keys", "returners.add", "renderers_.keys", "names.add", "salt.runner", "fun.split", "module.endswith", "log.debug", "func.startswith", "modules.add", "module.split", "renderers.add", "logging.getLogger", "st_.states", "salt.utils"]}, "sysrc.py": {"libraries": [], "function_names": ["__virtual__", "absent", "managed"], "function_calls": [], "class_names": [], "class_method_calls": ["current_state.items"]}, "system.py": {"libraries": ["salt.utils.path", "salt.exceptions.CommandExecutionError", "re", "salt.utils.platform", "datetime.tzinfo", "datetime.timedelta", "os.path", "salt.exceptions.SaltInvocationError", "salt.utils.decorators.depends", "salt.utils.files", "datetime.datetime"], "function_names": ["get_system_time", "_strip_quotes", "shutdown", "__init__", "_swclock_to_hwclock", "_is_nilrt_family", "set_computer_name", "_try_parse_datetime", "dst", "tzname", "get_computer_desc", "_date_bin_set_datetime", "get_system_date_time", "__virtual__", "poweroff", "has_settable_hwclock", "get_system_date", "utcoffset", "_offset_to_min", "halt", "get_computer_name", "set_system_date_time", "set_system_date", "get_reboot_required_witnessed", "init", "reboot", "_get_offset_time", "set_reboot_required_witnessed", "set_computer_desc", "set_system_time"], "function_calls": ["depends", "_date_bin_set_datetime", "_FixedOffset", "set_system_date_time", "int", "super", "_offset_to_min", "_strip_quotes", "_swclock_to_hwclock", "_get_offset_time", "timedelta", "CommandExecutionError", "datetime", "SaltInvocationError", "has_settable_hwclock", "_try_parse_datetime", "enumerate"], "class_names": ["_FixedOffset"], "class_method_calls": ["offset_time.replace", "dt_obj.year", "dt_obj.minute", "datetime.now", "date_time.tzinfo", "__grains__.get", "dt_obj.hour", "pattern.match", "dt_obj.month", "lines.append", "mach_info.writelines", "os.makedirs", "date_time.year", "dt_obj.day", "re.match", "date_time.month", "datetime.strftime", "match.group", "dt_obj.second", "str_q.startswith", "ex.errno", "new_date.replace", "mach_info.truncate", "desc.replace", "date_time.day", "re.compile", "new_date.timetuple", "datetime.strptime", "new_date.utcoffset", "date_time.second", "ex.strerror", "cmd.append", "date_time.minute", "mach_info.readlines", "mach_info.seek", "date_time.hour", "datetime.utcnow", "err.message", "os.path", "salt.utils", "self.__offset"]}, "system_profiler.py": {"libraries": ["salt.utils.path", "subprocess", "plistlib"], "function_names": ["__virtual__", "applications", "_call_system_profiler", "receipts"], "function_calls": ["_call_system_profiler", "dict"], "class_names": [], "class_method_calls": ["details.pop", "plistlib.readPlistFromBytes", "salt.utils", "p.communicate", "subprocess.Popen", "subprocess.PIPE"]}, "systemd_service.py": {"libraries": ["errno", "glob", "salt.utils.systemd", "os", "salt.utils.path", "salt.exceptions.CommandExecutionError", "re", "logging", "fnmatch", "salt.utils.stringutils", "salt.utils.files", "salt.utils.itertools", "shlex"], "function_names": ["_runlevel", "get_static", "available", "disabled", "_get_systemd_services", "_untracked_custom_unit_found", "_strip_scope", "get_enabled", "_check_available", "mask", "_check_for_unit_changes", "enabled", "get_all", "offline", "reload_", "_canonical_unit_name", "get_running", "_get_service_exec", "show", "__virtual__", "get_disabled", "stop", "disable", "_get_sysv_services", "execs", "unmask_", "_systemctl_status", "_check_unmask", "enable", "missing", "firstboot", "_unit_file_changed", "_clear_context", "_root", "systemctl_reload", "start", "status", "force_reload", "restart", "masked", "_sysv_enabled", "_default_runlevel", "_systemctl_cmd"], "function_calls": ["any", "available", "_runlevel", "sorted", "_get_systemd_services", "_untracked_custom_unit_found", "_strip_scope", "_check_available", "offline", "_check_for_unit_changes", "get_all", "list", "enabled", "_canonical_unit_name", "set", "_get_service_exec", "show", "_get_sysv_services", "unmask_", "_systemctl_status", "_check_unmask", "str", "CommandExecutionError", "_unit_file_changed", "_clear_context", "isinstance", "_root", "len", "bool", "systemctl_reload", "masked", "_sysv_enabled", "_default_runlevel", "_systemctl_cmd"], "class_names": [], "class_method_calls": ["line.split", "__context__.pop", "os.listdir", "fnmatch.filter", "msg.splitlines", "__grains__.get", "os.access", "cmd.extend", "exc.strerror", "os.X_OK", "ret.add", "os.R_OK", "line.strip", "re.match", "ret.extend", "match.group", "re.search", "value.startswith", "errno.ENOENT", "key.startswith", "os.readlink", "log.debug", "ret.update", "log.trace", "name.endswith", "out.split", "glob.glob", "errno.EINVAL", "log.error", "service_exec.endswith", "errno.EACCES", "line.startswith", "logging.getLogger", "ret.append", "item.split", "value.replace", "line.endswith", "exc.errno", "os.path", "value.split", "shlex.split", "salt.utils", "fullname.rsplit", "unit_state.split"]}, "telegram.py": {"libraries": ["logging", "requests", "salt.exceptions.SaltInvocationError"], "function_names": ["post_message", "_get_chat_id", "_post_message", "__virtual__", "_get_token"], "function_calls": ["_get_chat_id", "_post_message", "dict", "_get_token", "SaltInvocationError"], "class_names": [], "class_method_calls": ["logging.getLogger", "requests.post", "log.error", "response.json", "log.exception", "result.get", "log.debug"]}, "telemetry.py": {"libraries": ["logging", "requests", "salt.utils.stringutils", "salt.utils.json"], "function_names": ["create_alarm", "get_alert_config", "get_alarms", "get_notification_channel_id", "_get_telemetry_base", "_retrieve_channel_id", "delete_alarms", "_update_cache", "__virtual__", "update_alarm", "_auth"], "function_calls": ["Exception", "get_alert_config", "_auth", "get_notification_channel_id", "_get_telemetry_base", "_retrieve_channel_id", "str", "_update_cache", "enumerate", "isinstance"], "class_names": [], "class_method_calls": ["requests.get", "config.get", "failed_to_delete.append", "response.text", "__context__.get", "response.status_code", "requests.exceptions", "requests.delete", "log.debug", "alert.get", "data.get", "requests.post", "log.error", "log.info", "logging.getLogger", "_profile.get", "notify_channel.find", "response.json", "requests.put", "salt.utils"]}, "temp.py": {"libraries": ["logging", "tempfile", "os"], "function_names": ["file", "dir"], "function_calls": [], "class_names": [], "class_method_calls": ["os.close", "tempfile.mkstemp", "tempfile.mkdtemp", "logging.getLogger"]}, "test_virtual.py": {"libraries": [], "function_names": ["__virtual__", "ping"], "function_calls": [], "class_names": [], "class_method_calls": []}, "testinframod.py": {"libraries": ["logging", "testinfra.modules", "salt.utils.stringutils.camel_to_snake_case"], "function_names": ["__virtual__", "_generate_functions", "_wrap_module_function", "_module_function_wrapper"], "function_calls": ["func", "_generate_functions", "_wrap_module_function", "camel_to_snake_case", "globals"], "class_names": [], "class_method_calls": ["logging.getLogger", "__all__.append", "modules.__all__", "modules.modules", "log.debug"]}, "textfsm_mod.py": {"libraries": ["textfsm.clitable", "os", "logging", "salt.utils.files", "textfsm"], "function_names": ["__virtual__", "_clitable_to_dict", "index", "extract"], "function_calls": ["_clitable_to_dict", "enumerate"], "class_names": [], "class_method_calls": ["__opts__.get", "__grains__.get", "clitable.CliTable", "tpl_file_handle.seek", "fsm_handler.header", "__pillar__.get", "textfsm_obj.ParseCmd", "fsm_handler.ParseText", "textfsm.TextFSM", "log.debug", "tpl_file_handle.read", "log.error", "clitable.CliTableError", "textfsm.TextFSMTemplateError", "log.info", "objs.append", "logging.getLogger", "os.path", "salt.utils"]}, "timezone.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError"], "function_names": ["__virtual__", "system"], "function_calls": [], "class_names": [], "class_method_calls": ["messages.append"]}, "tls.py": {"libraries": ["logging", "time", "datetime"], "function_names": ["__virtual__", "valid_certificate"], "function_calls": [], "class_names": [], "class_method_calls": ["log.error", "datetime.timedelta", "logging.getLogger", "time.time"]}, "tomcat.py": {"libraries": [], "function_names": ["undeployed", "war_deployed", "__virtual__", "wait", "mod_watch"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["msg.startswith", "deploy_res.startswith", "undeploy.startswith", "un.startswith"]}, "trafficserver.py": {"libraries": [], "function_names": ["restart_local", "startup", "shutdown", "refresh", "clear_cluster", "config", "zero_cluster", "__virtual__", "bounce_local", "clear_node", "zero_node", "restart_cluster", "offline", "bounce_cluster"], "function_calls": [], "class_names": [], "class_method_calls": []}, "travisci.py": {"libraries": ["salt.utils.versions.Version", "salt.utils.json", "OpenSSL.crypto", "base64", "OpenSSL", "urllib.parse"], "function_names": ["__virtual__", "verify_webhook"], "function_calls": ["Version"], "class_names": [], "class_method_calls": ["certificate.set_pubkey", "base64.b64decode", "OpenSSL.crypto", "urllib.parse", "salt.utils", "OpenSSL.__version__"]}, "tuned.py": {"libraries": ["salt.exceptions"], "function_names": ["profile", "off"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.exceptions"]}, "twilio_notify.py": {"libraries": ["twilio.rest.Client", "twilio.TwilioRestException", "twilio.rest.TwilioException", "logging", "twilio", "twilio.rest.TwilioRestClient"], "function_names": ["__virtual__", "_get_twilio", "send_sms"], "function_calls": ["TwilioRestClient", "_get_twilio", "int", "str", "tuple"], "class_names": [], "class_method_calls": ["client.sms", "logging.getLogger", "message.status", "exc.msg", "message.price", "message.price_unit", "exc.code", "message.num_segments", "message.date_sent", "client.messages", "message.date_created", "log.info", "twilio.__version_info__", "exc.status", "log.debug", "message.body", "creds.get", "message.sid"]}, "udev.py": {"libraries": ["salt.utils.path", "logging", "salt.exceptions.CommandExecutionError", "salt.modules.cmdmod"], "function_names": ["_parse_udevadm_info", "env", "info", "_normalize_info", "__virtual__", "path", "exportdb", "links", "name"], "function_calls": ["len", "_parse_udevadm_info", "int", "info", "float", "_normalize_info", "CommandExecutionError"], "class_names": [], "class_method_calls": ["dev.items", "line.strip", "logging.getLogger", "data.strip", "line.split", "devices.append", "udev_info.splitlines", "salt.utils", "salt.modules"]}, "upstart_service.py": {"libraries": ["glob", "salt.utils.systemd", "os", "salt.modules.cmdmod", "salt.utils.path", "re", "fnmatch", "salt.utils.files"], "function_names": ["_iter_service_names", "_sysv_is_enabled", "_upstart_is_disabled", "_runlevel", "available", "disabled", "_upstart_enable", "get_enabled", "enabled", "get_all", "_service_is_sysv", "reload_", "_get_service_exec", "__virtual__", "_find_utmp", "_upstart_is_enabled", "get_disabled", "stop", "disable", "enable", "missing", "full_restart", "start", "_upstart_disable", "_sysv_is_disabled", "status", "force_reload", "restart", "_is_symlink", "_service_is_upstart", "_default_runlevel"], "function_calls": ["_iter_service_names", "_sysv_is_enabled", "_upstart_is_disabled", "_runlevel", "sorted", "_upstart_enable", "get_enabled", "get_all", "_service_is_sysv", "set", "_get_service_exec", "_find_utmp", "_upstart_is_enabled", "get_disabled", "bool", "_upstart_disable", "_sysv_is_disabled", "filter", "_service_is_upstart", "_default_runlevel"], "class_names": [], "class_method_calls": ["os.unlink", "line.split", "fnmatch.filter", "os.access", "os.X_OK", "ret.add", "os.R_OK", "salt.modules", "re.MULTILINE", "line.strip", "fp_.write", "re.search", "fp_.truncate", "out.split", "fp_.seek", "glob.glob", "os.stat", "ofile.write", "re.sub", "line.startswith", "fp_.read", "os.path", "found.add", "salt.utils"]}, "uptime.py": {"libraries": [], "function_names": ["__virtual__", "monitored"], "function_calls": [], "class_names": [], "class_method_calls": ["ret.update", "msg.format"]}, "useradd.py": {"libraries": ["pwd", "os", "functools", "salt.utils.path", "salt.exceptions.CommandExecutionError", "salt.utils.data", "logging", "salt.utils.decorators.path", "salt.utils.stringutils", "salt.utils.files", "salt.utils.user", "copy"], "function_names": ["delete", "_getpwall", "_chattrib", "chhome", "chworkphone", "chhomephone", "add", "chgroups", "_get_gecos", "rename", "__virtual__", "_quote_username", "getent", "chgid", "list_users", "chloginclass", "list_groups", "_update_gecos", "_build_gecos", "get_loginclass", "_which", "chroomnumber", "chuid", "chfullname", "info", "_getpwnam", "chshell", "_format_info", "primary_group", "chother"], "function_calls": ["_chattrib", "sorted", "chworkphone", "chhomephone", "chgroups", "_get_gecos", "int", "set", "_quote_username", "getpwnam", "list_groups", "_update_gecos", "str", "_build_gecos", "get_loginclass", "CommandExecutionError", "_which", "isinstance", "len", "chroomnumber", "getpwall", "info", "chfullname", "_format_info", "chother"], "class_names": [], "class_method_calls": ["line.split", "cmd.extend", "log.warning", "pwd.struct_passwd", "line.strip", "user.pw_name", "data.pw_uid", "log.debug", "data.pw_gecos", "data.pw_dir", "pwd.getpwnam", "copy.deepcopy", "gecos_dict.get", "line.startswith", "cmd.append", "data.pw_name", "pwd.getpwall", "logging.getLogger", "ret.append", "userinfo.splitlines", "data.pw_passwd", "logging.DEBUG", "data.pw_shell", "groups.split", "os.path", "data.pw_gid", "salt.utils", "gecos_field.append", "functools.partial"]}, "uwsgi.py": {"libraries": ["salt.utils.path", "salt.utils.json"], "function_names": ["__virtual__", "stats"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils"]}, "varnish.py": {"libraries": ["salt.utils.path", "logging", "re"], "function_names": ["ban", "param_set", "version", "purge", "ban_list", "__virtual__", "param_show", "_run_varnishadm"], "function_calls": ["ban", "str", "_run_varnishadm"], "class_names": [], "class_method_calls": ["logging.getLogger", "m.group", "cmd.extend", "re.search", "salt.utils", "log.debug"]}, "vault.py": {"libraries": ["time", "requests", "os", "tempfile", "salt.exceptions", "salt.utils.json", "logging", "salt.utils.versions", "base64", "salt.crypt", "string"], "function_names": ["_get_secret_path_metadata", "is_v2", "write_cache", "get_cache", "_v2_the_path", "del_cache", "__virtual__", "_get_token_and_url_from_master", "_selftoken_expired", "expand_pattern_lists", "_use_local_config", "make_request", "_gen_new_connection", "get_vault_connection", "_read_cache_file", "_wrapped_token_valid"], "function_calls": ["_get_secret_path_metadata", "any", "_read_cache_file", "next", "write_cache", "get_cache", "int", "type", "_v2_the_path", "round", "expand_pattern_lists", "get_vault_connection", "str", "_get_token_and_url_from_master", "_selftoken_expired", "_use_local_config", "make_request", "_gen_new_connection", "tuple", "isinstance", "del_cache", "_wrapped_token_valid"], "class_names": [], "class_method_calls": ["logging.WARNING", "requests.get", "time.time", "salt.loader", "__opts__.get", "response.raise_for_status", "os.close", "result.get", "response.text", "path.rstrip", "response.status_code", "fp_.write", "path.startswith", "base64.b64encode", "log.debug", "pattern.replace", "pfilter.rstrip", "tempfile.mkstemp", "requests.post", "log.error", "salt.exceptions", "f.parse", "log.info", "salt.crypt", "connection.get", "f.get_field", "os.rename", "response.ok", "requests.request", "logging.getLogger", "path.replace", "resource.startswith", "response.json", "logging.DEBUG", "os.path", "string.Formatter", "salt.utils", "path_metadata.get", "os.remove"]}, "vbox_guest.py": {"libraries": ["logging"], "function_names": ["grant_access_to_shared_folders_to", "additions_installed", "additions_removed"], "function_calls": ["bool"], "class_names": [], "class_method_calls": ["logging.getLogger"]}, "vboxmanage.py": {"libraries": ["salt.utils.path", "salt.exceptions.CommandExecutionError", "re", "logging", "os.path", "salt.utils.files"], "function_names": ["stop", "register", "clonevm", "start", "create", "clonemedium", "list_nodes_full", "list_nodes", "__virtual__", "list_ostypes", "vboxcmd", "destroy", "unregister", "list_items", "list_nodes_min"], "function_calls": ["list_nodes_full", "vboxcmd", "list_ostypes", "isinstance", "CommandExecutionError", "unregister", "list_items", "list_nodes_min"], "class_names": [], "class_method_calls": ["line.strip", "os.unlink", "logging.getLogger", "salt.modules", "line.split", "UUID_RE.search", "__opts__.get", "os.path", "salt.utils", "NAME_RE.search", "re.compile"]}, "victorops.py": {"libraries": [], "function_names": ["__virtual__", "create_event"], "function_calls": [], "class_names": [], "class_method_calls": []}, "virt.py": {"libraries": ["time", "hashlib", "os", "re", "logging", "salt.utils.files", "urllib", "urllib.parse"], "function_names": ["check_remote", "__init__", "authorize", "accept", "void", "download_remote"], "function_calls": ["str", "int"], "class_names": ["VirtKey"], "class_method_calls": ["os.unlink", "response.rease", "time.time", "os.makedirs", "log.warning", "fp_.write", "hashlib.md5", "urllib.request", "re.compile", "self.opts", "self.void", "log.error", "os.urandom", "urllib.parse", "file.write", "logging.getLogger", "regex.match", "self.id", "self.path", "self.hyper", "fp_.read", "os.path", "salt.utils"]}, "virtualenv_mod.py": {"libraries": ["os", "salt.exceptions.CommandExecutionError", "salt.utils.functools", "salt.utils.platform", "logging", "salt.utils.versions", "salt.version", "salt.exceptions.CommandNotFoundError"], "function_names": ["__virtual__", "managed"], "function_calls": ["TypeError", "set", "list", "isinstance"], "class_names": [], "class_method_calls": ["ret.update", "logging.getLogger", "os.path", "exc.strerror", "requirements.split", "requirements.startswith", "salt.utils"]}, "vmctl.py": {"libraries": ["salt.utils.path", "salt.exceptions.CommandExecutionError", "re", "logging", "salt.exceptions.SaltInvocationError"], "function_names": ["_id_to_name", "stop", "start", "reload", "status", "create_disk", "__virtual__", "load", "reset"], "function_calls": ["len", "_id_to_name", "int", "status", "dict", "CommandExecutionError", "SaltInvocationError", "zip", "list"], "class_names": [], "class_method_calls": ["m.groups", "re.match", "x.lower", "logging.getLogger", "line.split", "cmd.extend", "vm.pop", "salt.utils", "cmd.append"]}, "vsphere.py": {"libraries": ["pyVmomi.VmomiSupport", "pyVmomi.vmodl", "salt.utils.dictupdate", "com.vmware.vapi.std.errors_client.Unauthorized", "salt.exceptions.VMwareObjectRetrievalError", "salt.utils.decorators.depends", "com.vmware.vapi.std_client.DynamicID", "salt.exceptions.VMwareApiError", "salt.exceptions.InvalidConfigError", "salt.utils.vmware", "salt.exceptions.ArgumentValueError", "salt.exceptions.CommandExecutionError", "com.vmware.vapi.std.errors_client.AlreadyExists", "com.vmware.vapi.std.errors_client.NotFound", "salt.config.schemas.esxcluster.ESXClusterEntitySchema", "salt.utils.vsan", "salt.utils.pbm", "com.vmware.cis.tagging_client.Category", "salt.utils.args", "com.vmware.cis.tagging_client.TagAssociation", "jsonschema", "salt.exceptions.VMwareSaltError", "salt.utils.decorators.ignores_kwargs", "pyVmomi.pbm", "com.vmware.cis.tagging_client.CategoryModel", "com.vmware.cis.tagging_client.Tag", "salt.config.schemas.esxi.DiskGroupsDiskIdSchema", "pyVmomi.vim", "salt.utils.listdiffer.list_diff", "logging", "salt.config.schemas.esxvm.ESXVirtualMachineDeleteSchema", "functools.wraps", "salt.config.schemas.vcenter.VCenterEntitySchema", "salt.utils.http", "com.vmware.vapi.std.errors_client.Unauthenticated", "com.vmware.vapi.std.errors_client.InvalidArgument", "com.vmware.vcenter_client.Cluster", "salt.utils.path", "salt.config.schemas.esxi.VmfsDatastoreSchema", "salt.config.schemas.esxcluster.ESXClusterConfigSchema", "com.vmware.cis.tagging_client.TagModel", "sys", "salt.config.schemas.esxvm.ESXVirtualMachineUnregisterSchema", "salt.exceptions.VMwareObjectExistsError", "datetime", "salt.utils.dictdiffer.recursive_diff", "salt.config.schemas.esxi.SimpleHostCacheSchema", "salt.exceptions.InvalidEntityError"], "function_names": ["update_cluster", "upload_ssh_key", "erase_disk_partitions", "set_advanced_configs", "create_dvs", "configure_host_cache", "_update_network_adapters", "_get_host_ssds", "_get_esxdatacenter_proxy_details", "_get_host_disks", "update_dvportgroup", "service_restart", "_apply_dvs_capability", "create_tag", "_get_proxy_connection_details", "list_datastores_via_proxy", "assign_license", "delete_advanced_configs", "_gets_service_instance_via_proxy_", "get_ntp_config", "_apply_cluster_dict", "_get_service_manager", "_get_proxy_target", "_get_entity", "_apply_network_adapter_config", "syslog_service_reload", "update_dvs", "_get_scsi_controller_key", "_apply_cpu_config", "_apply_advanced_config", "get_vmotion_enabled", "list_clusters", "_get_device_by_label", "power_off_vm", "vsan_enable", "disconnect", "list_dvs", "_update_cd_drives", "_gets_service_instance_via_proxy", "get_service_policy", "get_vm_config_file", "list_hosts_via_proxy", "set_coredump_network_config", "get_vm_config", "_get_dvportgroup_teaming", "_get_cluster_dict", "_format_syslog_config", "list_datacenters", "update_host_password", "system_info", "list_resourcepools", "create_storage_policy", "wrapped", "list_networks", "list_storage_policies", "reset_syslog_config", "update_host_datetime", "remove_diskgroup", "vmotion_disable", "_get_dvs_link_discovery_protocol", "remove_capacity_from_diskgroup", "_get_host_non_ssds", "power_on_vm", "get_vsan_eligible_disks", "_create_disks", "list_disks", "create_diskgroup", "create_cluster", "set_service_policy", "_apply_sata_controller_config", "_get_dvs_product_info", "__virtual__", "_create_scsi_devices", "unregister_vm", "list_licenses", "get_host_cache", "list_non_ssds", "_apply_hard_disk", "_get_esxi_proxy_details", "coredump_network_enable", "update_vm", "_apply_cd_drive", "_deprecation_message", "list_datastore_clusters", "list_assigned_licenses", "_apply_policy_config", "vmotion_enable", "_apply_dvportgroup_security_policy", "delete_vm", "list_vapps", "_supports_proxies_", "_apply_hardware_version", "_get_date_time_mgr", "get_coredump_network_config", "list_uplink_dvportgroup", "_get_dvportgroup_security_policy", "_get_dvs_config_dict", "list_tag_categories", "create_vm", "_create_sata_controllers", "_apply_dvs_config", "_apply_dvs_infrastructure_traffic_resources", "_apply_scsi_controller", "list_default_vsan_policy", "list_disk_partitions", "get_firewall_status", "create_datacenter", "_create_network_adapters", "list_hosts", "_get_dvs_infrastructure_traffic_resources", "attach_tag", "_set_syslog_config_helper", "_apply_dvportgroup_config", "_apply_memory_config", "compare_vm_configs", "enable_firewall_ruleset", "_get_dvportgroup_out_shaping", "_get_device_by_key", "list_default_storage_policy_of_datastore", "_delete_advanced_config", "_get_client", "_convert_units", "_apply_ide_controller_config", "list_attached_tags", "__supports_proxies_", "create_dvportgroup", "_create_cd_drives", "register_vm", "list_ssds", "get_proxy_type", "service_start", "_remove_vm", "test_vcenter_connection", "esxcli_cmd", "_get_esxcluster_proxy_details", "get_service_running", "_apply_dvs_product_info", "_create_serial_ports", "_create_network_backing", "get_service_instance_via_proxy", "_apply_dvs_link_discovery_protocol", "_set_network_adapter_mapping", "_create_adapter_type", "_apply_serial_port", "_get_dvs_capability", "_apply_dvportgroup_teaming", "list_cluster", "create_vmfs_datastore", "set_ntp_config", "_format_firewall_stdout", "get_vm", "list_datacenters_via_proxy", "get_advanced_configs", "vsan_disable", "_get_host_ref", "list_dvss", "list_capability_definitions", "_reset_syslog_config_params", "_update_serial_ports", "list_datastores", "_create_ide_controllers", "get_vsan_enabled", "_get_dvportgroup_dict", "list_diskgroups", "_check_hosts", "update_storage_policy", "set_syslog_config", "delete_tag_category", "add_capacity_to_diskgroup", "_update_disks", "assign_default_storage_policy_to_datastore", "vsan_add_disks", "list_tags", "_format_coredump_stdout", "get_ssh_key", "add_license", "_get_policy_dict", "_delete_device", "get_syslog_config", "_supports_proxies", "remove_dvportgroup", "add_host_to_dvs", "_apply_dvportgroup_out_shaping", "delete_tag", "_get_capability_definition_dict", "service_stop", "_get_vsan_eligible_disks", "list_dvportgroups", "_validate_entity", "remove_datastore", "_update_scsi_devices", "get_host_datetime", "rename_datastore", "create_tag_category", "list_folders", "list_vms", "_apply_dvs_network_resource_pools"], "function_calls": ["_update_network_adapters", "_get_host_ssds", "_get_esxdatacenter_proxy_details", "_get_host_disks", "_apply_dvs_capability", "_get_proxy_connection_details", "_apply_cluster_dict", "_get_proxy_target", "_get_service_manager", "_get_entity", "_apply_network_adapter_config", "syslog_service_reload", "ImportError", "VMwareObjectRetrievalError", "str", "_get_scsi_controller_key", "_apply_cpu_config", "_apply_advanced_config", "ignores_kwargs", "power_off_vm", "_get_device_by_label", "_update_cd_drives", "function", "hasattr", "bool", "float", "get_vm_config", "_get_dvportgroup_teaming", "_get_cluster_dict", "_format_syslog_config", "_get_dvs_link_discovery_protocol", "_get_host_non_ssds", "list", "_create_disks", "_apply_sata_controller_config", "_get_dvs_product_info", "_create_scsi_devices", "setattr", "_apply_hard_disk", "_apply_cd_drive", "_apply_policy_config", "_apply_dvportgroup_security_policy", "ValueError", "len", "getattr", "_apply_hardware_version", "wraps", "_get_date_time_mgr", "_get_dvportgroup_security_policy", "_get_dvs_config_dict", "_create_sata_controllers", "list_diff", "_apply_dvs_config", "_apply_dvs_infrastructure_traffic_resources", "_apply_scsi_controller", "_create_network_adapters", "int", "VMwareApiError", "type", "_get_dvs_infrastructure_traffic_resources", "_set_syslog_config_helper", "_apply_dvportgroup_config", "compare_vm_configs", "_apply_memory_config", "enable_firewall_ruleset", "_get_dvportgroup_out_shaping", "zip", "_get_device_by_key", "recursive_diff", "_delete_advanced_config", "_get_client", "VMwareObjectExistsError", "_convert_units", "range", "_apply_ide_controller_config", "_create_cd_drives", "get_proxy_type", "_remove_vm", "_get_esxcluster_proxy_details", "tuple", "_apply_dvs_product_info", "_create_serial_ports", "_create_network_backing", "_apply_dvs_link_discovery_protocol", "_set_network_adapter_mapping", "_create_adapter_type", "_apply_serial_port", "_get_dvs_capability", "_apply_dvportgroup_teaming", "_format_firewall_stdout", "_get_host_ref", "_reset_syslog_config_params", "_update_serial_ports", "_create_ide_controllers", "fn", "ArgumentValueError", "_get_dvportgroup_dict", "_check_hosts", "InvalidEntityError", "_update_disks", "set", "_format_coredump_stdout", "_get_policy_dict", "_delete_device", "DynamicID", "_supports_proxies", "_apply_dvportgroup_out_shaping", "InvalidConfigError", "_get_capability_definition_dict", "CommandExecutionError", "_get_vsan_eligible_disks", "isinstance", "depends", "_validate_entity", "abs", "_update_scsi_devices"], "class_names": [], "class_method_calls": ["teaming_policy.failureCriteria", "failure_criteria.checkSpeed", "l.name", "dvs_config.networkResourceControlVersion", "spec.device", "part_spec.startSector", "device.deviceInfo", "i.volume", "vim.ClusterFailoverResourcesAdmissionControlPolicy", "partition_info.layout", "option.key", "cluster_spec.vsanConfig", "device.yieldOnPoll", "create_spec.cardinality", "dvs_dict.get", "__pillar__.get", "keys.remove", "device.connectable", "subprofile.name", "kwargs.get", "pg_spec.type", "network_spec.operation", "create_spec.description", "vim.DvsHostInfrastructureTrafficResourceAllocation", "das_config.failoverLevel", "teaming.reversePolicy", "drs_config.vmotionRate", "cap_metadata.summary", "dpg.vlan", "config_spec.memoryHotAddEnabled", "matching.append", "network_specs.append", "dvs_config.lacpApiVersion", "subprofile.capability", "vim.DVSCreateSpec", "vim.VsanClusterConfigInfo", "vim.ClusterConfigSpecEx", "config_spec.memoryReservationLockedToMax", "vim.DVPortgroupConfigSpec", "vim.VMwareDVSConfigSpec", "cap_metadata.propertyMetadata", "dvs_config.linkDiscoveryProtocolConfig", "vsan_config.defaultConfig", "config_spec.cpuHotRemoveEnabled", "suitable_disks.append", "cap_dicts.append", "vim.HostVirtualNicSpec", "out_shaping_conf.get", "infra_traffic_resources.append", "config_spec.numCoresPerSocket", "pg.spec", "data_eff.compressionEnabled", "type_backing.proxyURI", "das_config.hBDatastoreCandidatePolicy", "network_adapter.deviceInfo", "lun.canonicalName", "vim.DrsBehavior", "type_backing.serviceURI", "vim.HostVmfsVolume", "dvs_config.contact", "disk_spec.device", "vim.HostVirtualSwitchSpec", "policy.constraints", "vim.HostPortGroupConfig", "cluster_spec.vmSwapPlacement", "controller.busNumber", "disk_specs.append", "disk_diffs.remove_diff", "device.sharedBus", "suitable_disk.disk", "failure_criteria.percentage", "policy.name", "teaming.failureCriteria", "out_shaping.peakBandwidth", "sec_policy.allowPromiscuous", "scsi_changes.extend", "device.device", "das_config.option", "client.tagging", "create_spec.associable_types", "disk_names.append", "das_config.enabled", "cd_controllers.extend", "prop_inst_spec.value", "service.key", "capability_spec.dvPortGroupOperationSupported", "properties.remove_diff", "drs_conf.vmotionRate", "CategoryModel.Cardinality", "ind_reset.strip", "vim.IntPolicy", "p.partition", "user_account.id", "cluster_spec.drsConfig", "date_time_manager.UpdateDateTimeConfig", "vim.OptionValue", "memory_diff.diffs", "vim.Description", "scheduled_hardware_upgrade.upgradePolicy", "service_manager.UpdateServicePolicy", "config_spec.contact", "ctrl.key", "policy.resourceType", "ha_conf.option", "def_vm_set.restartPriority", "conf_dict.update", "device_config_specs.append", "subprofile.forceProvision", "config_spec.uplinkPortPolicy", "props.get", "ds.name", "vsan_system.QueryDisksForVsan", "cd_changes.extend", "vim.VsanClusterConfigInfoHostDefaultInfo", "dvs.config", "ha_conf.hostMonitoring", "SimpleHostCacheSchema.serialize", "x.device", "vol.extent", "config_spec.numCPUs", "details.get", "diffs.keys", "device.capacityInKB", "vim.HostProxySwitchConfig", "single_value_diff.diffs", "storage_system.storageDeviceInfo", "new_controllers.extend", "result.get", "pg_default_port_config.securityPolicy", "pg_spec.numPorts", "ide_spec.device", "out_shaping_policy.burstSize", "res_dict.update", "vim.option", "config_spec.guestId", "partition_info.spec", "dvs_dict.update", "difference.changed", "dvs_create_spec.capability", "ret_dict.append", "config_spec.nestedHVEnabled", "vim.LinkDiscoveryProtocolConfig", "difference.ignore_unset_values", "dvs_link_disc_protocol.operation", "vsan_system.UpdateVsan_Task", "line.startswith", "teaming.policy", "non_ssds.append", "l.labels", "properties.diffs", "nics_settings.append", "vim.DVSConfigSpec", "adapter_type.strip", "failure_criteria.fullDuplex", "connect_info.allowGuestControl", "vim.SharesLevel", "out_shaping_policy.peakBandwidth", "pol.memoryFailoverResourcesPercent", "subprofile_dicts.append", "response.get", "out_shaping.burstSize", "config_spec.extraConfig", "ESXClusterConfigSchema.serialize", "config_spec.lacpApiVersion", "subprofiles.append", "service.policy", "service_manager.RestartService", "pg_default_port_config.outShapingPolicy", "o.key", "sata_spec.device", "device.backing", "vmotion_system.DeselectVnic", "config_spec.maxMtu", "e.msg", "VmfsDatastoreSchema.serialize", "create_spec.category_id", "dvs_create_spec.productInfo", "vim.StringPolicy", "arg_names.index", "res.allocationInfo", "line.strip", "vsan_spec.vsanClusterConfig", "val.values", "val.max", "ha_conf.admissionControlEnabled", "teaming_policy.reversePolicy", "teaming.rollingOrder", "ESXClusterEntitySchema.serialize", "vm_ref.config", "teaming.uplinkPortOrder", "dvs_link_disc_protocol.protocol", "vim.HostProxySwitchSpec", "dvs_capability.dvsOperationSupported", "target_portgroup.key", "host_ref.config", "vim.fault", "def_vm_set.isolationResponse", "res_dicts.append", "scheduled_hardware_upgrade.versionKey", "e.diskName", "network_ref.config", "disk_changes.append", "vim.vsan", "product_info_spec.name", "scsi_spec.device", "ha_conf.defaultVmSettings", "dvs_config.networkResourceManagementEnabled", "network_resource_pools.append", "sata_ctrls.append", "cap_specs.append", "vsan_conf.enabled", "proxy_details.append", "dvs_config.maxMtu", "default_config.autoClaimStorage", "device.update", "adapter_mapping.adapter", "vim.DVSCapability", "vim.DvsHostInfrastructureTrafficResource", "vcenter_info.build", "log.trace", "dvs_config.infrastructureTrafficResourceConfig", "dvs.ReconfigureDvs_Task", "part_spec.type", "policy_spec.constraints", "config_spec.networkResourceControlVersion", "traffic_res.key", "e.message", "vim.host", "extra_conf.value", "subprofile_spec.forceProvision", "drive_spec.operation", "scsi_controllers.extend", "vim.vm", "backing.port", "teaming_policy.rollingOrder", "o.value", "datetime.datetime", "config_spec.name", "cap.id", "drs_config.enabled", "uplink_order.activeUplinkPort", "vim.VirtualMachine", "pg_dict.update", "part_layout.end", "ha_conf.vmMonitoring", "ret_list.append", "vmotion_system.SelectVnic", "user_account.password", "vcenter_info.apiVersion", "traffic_res.allocationInfo", "cluster_spec.dasConfig", "backing.deviceName", "controllers.extend", "network_changes.append", "vim.VmwareUplinkPortTeamingPolicy", "network_changes.extend", "diffs.items", "disk_diffs.diffs", "hci.swapSize", "connect_info.startConnected", "config_spec.files", "l.licenseKey", "adapter_mapping.macAddress", "dvs_config.description", "disk.ssd", "product_info_spec.vendor", "browser_spec.query", "vim.HostDateTimeConfig", "capability_spec.dvsOperationSupported", "account_manager.UpdateUser", "controller.deviceInfo", "line.split", "vsan_info.dataEfficiencyConfig", "search_index.FindByIp", "scsi_changes.append", "value.get", "drs_conf.defaultVmBehavior", "p.systemCreatedProfileType", "vim.HostVirtualSwitchConfig", "vsan_conf.defaultConfig", "part_spec.partition", "config_spec.description", "vim.HostVirtualNicConfig", "det.get", "removed_configs.append", "vim.HostSystem", "out_shaping_policy.enabled", "host_reference.configManager", "log.error", "d.deviceInfo", "disks_to_update.append", "ret.get", "d.key", "ds.summary", "cd_drive_specs.append", "sys.version_info", "serial_changes.extend", "jsonschema.validate", "advanced_config.items", "ret_dict.update", "policy_create_spec.resourceType", "vim.ClusterDasConfigInfo", "jsonschema.exceptions", "teaming_policy.uplinkPortOrder", "service_manager.StartService", "vim.VmwareDistributedVirtualSwitchVlanIdSpec", "interface_diffs.remove_diff", "vim.HostNtpConfig", "vim.SharesInfo", "ctrl.busNumber", "cd_changes.append", "dvs_product_info.vendor", "response.items", "advanced_diff.diffs", "res.key", "DiskGroupsDiskIdSchema.serialize", "vim.DVSSecurityPolicy", "target_portgroup.config", "scsi_address_to_lun.items", "host_ref.configManager", "vsan_conf.dataEfficiencyConfig", "hci.key", "teaming_policy.notifySwitches", "sata_spec.operation", "salt.exceptions", "vim.DistributedVirtualSwitchPortConnection", "device.key", "vim.DVSNetworkResourcePoolAllocationInfo", "dvs_capability.dvPortOperationSupported", "network_ref.key", "disc_prot_config.protocol", "service_manager.StopService", "interface_diffs.diffs", "uplink_order.standbyUplinkPort", "vim.DVSNetworkResourcePoolConfigSpec", "vim.BoolPolicy", "vim.VMwareDVSPortSetting", "config_dict.get", "device_spec.operation", "network_spec.device", "ports.append", "vim.dvs", "backing.network", "date_time_manager.QueryDateTime", "vim.DVSNameArrayUplinkPortPolicy", "date_time_manager.UpdateDateTime", "l.total", "err.msg", "log.debug", "ha_conf.hBDatastoreCandidatePolicy", "device_diffs.diffs", "pg_spec.defaultPortConfig", "pol.cpuFailoverResourcesPercent", "scsi_specs.append", "extra_conf.key", "disk.canonicalName", "vim.VMwareUplinkPortOrderPolicy", "pbm.profile", "res_dict.get", "dg.ssd", "failure_criteria.checkErrorPercent", "dvs_config.uplinkPortPolicy", "disk_ids.insert", "cpu_diff.diffs", "r.key", "out_shaping_policy.averageBandwidth", "vim.DistributedVirtualSwitchProductSpec", "das_config.admissionControlEnabled", "dvs_product_info.name", "ssds.append", "ret.update", "disk_changes.extend", "dvs_capability.dvPortGroupOperationSupported", "data_eff.dedupEnabled", "policy_dict.get", "disk_spec.fileOperation", "ESXVirtualMachineDeleteSchema.serialize", "ESXVirtualMachineUnregisterSchema.serialize", "names.append", "drs_config.defaultVmBehavior", "ha_conf.admissionControlPolicy", "pbm.capability", "dvs_product_info.version", "dictupdate.update", "dvs_create_spec.configSpec", "val.min", "backing_disk_ids.extend", "dvs_config.__dict__", "salt.utils", "vim.DVSTrafficShapingPolicy", "new_config.keys", "device_spec.device", "__opts__.get", "serial_changes.append", "das_config.defaultVmSettings", "policy_spec.name", "device_config_spec.device", "log.warning", "service.running", "sys.maxsize", "type_backing.direction", "failure_criteria.speed", "subprofile_dict.get", "config_spec.memoryMB", "switch_type.strip", "controller.key", "item.state", "capability_spec.dvPortOperationSupported", "part_layout.start", "vim.DistributedVirtualPortgroup", "disc_prot_config.operation", "das_config.vmMonitoring", "pg_default_port_config.uplinkTeamingPolicy", "cap_metadata.id", "out_shaping.averageBandwidth", "scsi_spec.operation", "ide_spec.operation", "vim.ClusterDasVmSettings", "option.value", "uplink_portgroup.key", "vmodl.fault", "pg_spec.description", "device.macAddress", "VmomiSupport.versionMap", "out_shaping.enabled", "device.controllerKey", "vim.DVSFailureCriteria", "failure_criteria.checkDuplex", "das_config.hostMonitoring", "sec_policy.macChanges", "search_index.FindByDnsName", "ide_ctrls.append", "log.info", "config_spec.deviceChange", "teaming.notifySwitches", "vim.HostNetworkConfig", "sata_specs.append", "create_spec.name", "device.busNumber", "vsan_system.AddDisks", "drive_spec.device", "policy.description", "failure_criteria.checkBeacon", "cap_metadata.mandatory", "pg_spec.name", "cluster_dict.get", "keys.discard", "vim.ClusterDrsConfigInfo", "vim.LongPolicy", "config_spec.version", "dg.nonSsd", "syslog_config.split", "sec_policy.forgedTransmits", "teaming_policy.policy", "product_info_dict.get", "vsan_spec.dataEfficiencyConfig", "config_spec.cpuHotAddEnabled", "config_spec.scheduledHardwareUpgradeInfo", "d.canonicalName", "fn.__name__", "disk_spec.operation", "cap.constraint", "das_config.admissionControlPolicy", "part_spec.endSector", "source_portgroup.spec", "subprofile_spec.capability", "vsan_config.enabled", "product_info_spec.version", "logging.getLogger", "VCenterEntitySchema.serialize", "device.unitNumber", "vim.DVSContactInfo", "network_system.UpdateNetworkConfig", "policy_spec.description", "l.used"]}, "webutil.py": {"libraries": ["salt.utils.path"], "function_names": ["__virtual__", "user_exists", "user_absent"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils"]}, "win_auditpol.py": {"libraries": ["salt.utils.platform"], "function_names": ["__virtual__", "set_setting", "get_settings", "get_setting"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils"]}, "win_autoruns.py": {"libraries": ["os", "salt.utils.platform"], "function_names": ["__virtual__", "list_", "_get_dirs"], "function_calls": ["_get_dirs"], "class_names": [], "class_method_calls": ["salt.utils", "os.listdir", "os.path", "full_dirs.append"]}, "win_certutil.py": {"libraries": ["logging", "salt.utils.platform"], "function_names": ["__virtual__", "add_store", "del_store"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "win_dacl.py": {"libraries": ["win32api", "salt.utils.win_functions", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "pywintypes", "win32security", "logging", "salt.exceptions.SaltInvocationError", "win32con"], "function_names": ["has_permissions", "save", "__init__", "get_permissions", "rm_permissions", "get_reg_name", "set_perms", "has_permission", "get_sid_string", "get_sid", "list_aces", "set_permissions", "set_inheritance", "__virtual__", "dacl", "_ace_to_dict", "get_ace", "copy_security", "_check_perms", "flags", "set_owner", "rm_ace", "_set_perms", "order_acl", "add_ace", "check_perms", "get_primary_group", "get_inheritance", "get_owner", "get_name", "rm_all_aces", "set_primary_group"], "function_calls": ["has_permissions", "get_permissions", "rm_permissions", "has_permission", "get_sid", "set_inheritance", "type", "set_permissions", "set", "dacl", "get_name", "_check_perms", "range", "set_owner", "_set_perms", "CommandExecutionError", "get_owner", "Dacl", "Flags", "isinstance", "get_inheritance", "flags", "SaltInvocationError", "get_sid_string"], "class_names": ["Flags", "Dacl"], "class_method_calls": ["win32security.ACCESS_DENIED_OBJECT_ACE_TYPE", "exc.strerror", "self.element", "self.ace_type", "pywintypes.error", "win32security.ConvertStringSidToSid", "exc.winerror", "obj_dacl.order_acl", "new_privs.add", "new_dacl.dacl", "obj_dacl.ace_type", "sec.GetSecurityDescriptorSacl", "obj_type.lower", "win32security.LookupAccountName", "win32security.SE_LMSHARE", "changes.setdefault", "win32security.NO_PROPAGATE_INHERIT_ACE", "win32security.UNPROTECTED_DACL_SECURITY_INFORMATION", "win32security.ACL", "win32con.SE_PRIVILEGE_ENABLED", "win32security.ACCESS_ALLOWED_OBJECT_ACE_TYPE", "salt.utils", "win32security.SE_SERVICE", "obj_dacl.rm_ace", "sec.GetSecurityDescriptorOwner", "obj_flags.element", "win32security.OpenProcessToken", "pywintypes.SIDType", "win32security.SE_REGISTRY_KEY", "win32security.PROTECTED_DACL_SECURITY_INFORMATION", "orig_comment.extend", "obj_dacl.get_reg_name", "security_descriptor.GetSecurityDescriptorOwner", "allow_obj_dacl.dacl", "access_mode.capitalize", "reg.insert", "win32security.GROUP_SECURITY_INFORMATION", "win32security.SetNamedSecurityInfo", "deny_dacl.dacl", "win32api.FormatMessage", "log.exception", "self.ace_perms", "win32security.ConvertSidToStringSid", "self.obj_type", "ace_perms.sort", "win32api.GetCurrentProcess", "win32security.GetNamedSecurityInfo", "sd.GetSecurityDescriptorDacl", "obj_dacl.list_aces", "permission.lower", "win32security.ACCESS_ALLOWED_ACE_TYPE", "obj_dacl.save", "obj_dacl.dacl", "self.inheritance", "self.dacl", "security_descriptor.GetSecurityDescriptorGroup", "log.info", "win32security.LookupAccountSid", "obj_flags.obj_type", "obj_name.split", "ret.append", "win32security.SE_REGISTRY_WOW64_32KEY", "deny_obj_dacl.dacl", "self._ace_to_dict", "win32security.SE_FILE_OBJECT", "obj_dacl.add_ace", "self.get_reg_name", "sec.GetSecurityDescriptorGroup", "win32security.ACL_REVISION_DS", "win32security.SACL_SECURITY_INFORMATION", "win32security.ACCESS_DENIED_ACE_TYPE", "win32security.OWNER_SECURITY_INFORMATION", "self.ace_prop", "sec.GetSecurityDescriptorDacl", "access_mode.lower", "self.dacl_type", "self.list_aces", "log.debug", "win32security.INHERITED_ACE", "win32security.DACL_SECURITY_INFORMATION", "win32security.TOKEN_ALL_ACCESS", "allow_dacl.dacl", "ace_type.lower", "obj_dacl.get_ace", "reg.pop", "obj_dacl.ace_perms", "ace_perms.append", "passed_hive.upper", "win32con.TOKEN_ADJUST_PRIVILEGES", "logging.getLogger", "win32security.AdjustTokenPrivileges", "win32security.SE_PRINTER", "win32security.LookupPrivilegeValue", "str_sid.startswith"]}, "win_disk.py": {"libraries": ["ctypes", "string", "win32api", "salt.utils.platform"], "function_names": ["__virtual__", "usage"], "function_calls": ["float"], "class_names": [], "class_method_calls": ["string.ascii_uppercase", "win32api.GetDiskFreeSpaceEx", "drives.append", "ctypes.windll", "salt.utils"]}, "win_dism.py": {"libraries": ["logging", "salt.utils.data", "os", "salt.utils.platform"], "function_names": ["package_removed", "feature_removed", "__virtual__", "kb_removed", "package_installed", "capability_removed", "capability_installed", "feature_installed"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "os.path", "logging.getLogger"]}, "win_dns_client.py": {"libraries": [], "function_names": ["__virtual__", "dns_dhcp", "primary_suffix", "dns_exists"], "function_calls": ["str", "bool", "enumerate", "isinstance"], "class_names": [], "class_method_calls": ["configured_list.index"]}, "win_dsc.py": {"libraries": ["os", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "salt.utils.json", "logging", "salt.utils.versions", "salt.exceptions.SaltInvocationError"], "function_names": ["test_config", "get_config_status", "set_lcm_config", "run_config", "get_config", "compile_config", "__virtual__", "remove_config", "_pshell", "_remove_fs_obj", "get_lcm_config", "apply_config", "restore_config"], "function_calls": ["SaltInvocationError", "compile_config", "dict", "_remove_fs_obj", "CommandExecutionError", "_pshell", "apply_config", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "exc.info", "os.getenv", "path_name.lower", "config.setdefault", "log.error", "cmd.lower", "cmd.extend", "os.path", "log.info", "ret.get", "source_name.lower", "salt.utils", "item.pop", "log.debug", "cmd.append", "raw_config.pop"]}, "win_event.py": {"libraries": ["win32evtlog", "salt.exceptions.CommandExecutionError", "xmltodict", "salt.utils.platform", "pywintypes", "logging", "salt.utils.stringutils", "collections", "winerror", "win32evtlogutil"], "function_names": ["_make_event_dict", "_to_bytes", "query", "clear", "count", "_close_handle", "_event_generator", "get", "_get_handle", "_raw_time", "_event_generator_filter", "__virtual__", "get_filtered", "get_log_names", "_event_generator_with_time", "add"], "function_calls": ["_to_bytes", "_make_event_dict", "getattr", "_close_handle", "repr", "_event_generator", "int", "_get_handle", "_raw_time", "tuple", "_event_generator_filter", "CommandExecutionError", "FileNotFoundError", "_event_generator_with_time", "isinstance", "enumerate", "TimeTuple"], "class_names": [], "class_method_calls": ["win32evtlog.OpenEventLog", "win32evtlog.EvtQueryReverseDirection", "new_list.append", "exc.strerror", "pywintypes.error", "win32evtlog.EvtNext", "xmltodict.parse", "win32evtlog.EvtRender", "win32evtlogutil.ReportEvent", "key.startswith", "winerror.HRESULT_CODE", "win32evtlog.EVENTLOG_SEQUENTIAL_READ", "log.trace", "data.encode", "win32evtlog.CloseEventLog", "win32evtlog.EvtNextChannelPath", "log_names.append", "win32evtlog.ClearEventLog", "win32evtlog.EvtQuery", "time.month", "time.day", "time.second", "logging.getLogger", "collections.namedtuple", "event_list.append", "win32evtlog.GetNumberOfEventLogRecords", "win32evtlog.EvtOpenChannelEnum", "win32evtlog.ReadEventLog", "time.minute", "win32evtlog.EVENTLOG_BACKWARDS_READ", "time.hour", "salt.utils", "win32evtlog.EvtQueryForwardDirection", "time.year"]}, "win_file.py": {"libraries": ["salt.modules.file.append", "salt.modules.file._get_eol", "salt.modules.file.basename", "salt.modules.file.access", "salt.modules.file.truncate", "salt.modules.file.list_backups_dir", "salt.modules.file._binary_replace", "salt.modules.file.rmdir", "salt.modules.file.comment_line", "salt.modules.file.seek_read", "salt.modules.file.rename", "salt.modules.file.dirname", "salt.modules.file.check_hash", "salt.modules.file.restore_backup", "salt.modules.file.comment", "salt.utils.win_dacl", "salt.modules.file.file_exists", "salt.modules.file.list_backups", "salt.modules.file.apply_template_on_contents", "salt.platform.win", "salt.modules.file.check_managed_changes", "pywintypes", "salt.modules.file._add_flags", "salt.modules.file._get_bkroot", "salt.modules.file.search", "salt.utils.functools.namespaced_function", "salt.modules.file._assert_occurrence", "salt.utils.files", "tempfile", "salt.modules.file.uncomment", "salt.modules.file.directory_exists", "errno", "salt.modules.file.blockreplace", "salt.exceptions.SaltInvocationError", "salt.modules.file._regex_to_static", "salt.utils.user", "salt.modules.file.touch", "salt.modules.file._set_line_indent", "salt.modules.file.line", "salt.modules.file.extract_hash", "salt.modules.file.get_managed", "salt.modules.file.delete_backup", "salt.modules.file.path_exists_glob", "salt.modules.file.contains_regex", "os.path", "os", "salt.modules.file.check_file_meta", "salt.modules.file.get_source_sum", "salt.modules.file.replace", "salt.modules.file.get_diff", "salt.modules.file.source_list", "salt.modules.file.patch", "salt.modules.file.readlink", "salt.modules.file.contains_glob", "salt.exceptions.CommandExecutionError", "win32security", "salt.modules.file._get_flags", "salt.modules.file._set_line_eol", "salt.modules.file._splitlines_preserving_trailing_newline", "salt.modules.file.copy", "salt.modules.file.check_managed", "salt.utils.platform", "salt.modules.file.prepend", "salt.modules.file.__clean_tmp", "salt.modules.file.contains", "salt.modules.file.psed", "salt.modules.file.write", "salt.modules.file.normpath", "salt.modules.file.find", "salt.modules.file.get_hash", "salt.modules.file.get_sum", "salt.modules.file._set_line", "win32con", "salt.modules.file.manage_file", "salt.modules.file.join", "salt.modules.file._mkstemp_copy", "logging", "salt.modules.file.lstat", "salt.modules.file.readdir", "salt.modules.file.read", "win32api", "salt.utils.path", "salt.modules.file.seek_write", "sys", "salt.modules.file._error", "stat", "win32file", "salt.modules.file.pardir"], "function_names": ["lchown", "makedirs_", "chpgrp", "set_perms", "get_gid", "symlink", "stats", "chgrp", "mkdir", "__virtual__", "version_details", "gid_to_group", "set_attributes", "chown", "_get_version_type", "uid_to_user", "user_to_uid", "_resolve_symlink", "remove", "_get_version_os", "set_mode", "get_pgroup", "version", "makedirs_perms", "get_user", "get_group", "get_pgid", "_get_version", "check_perms", "get_uid", "get_mode", "group_to_gid", "get_attributes", "is_link"], "function_calls": ["oct", "next", "get_sum", "int", "mkdir", "readlink", "gid_to_group", "_get_version_type", "chown", "globals", "uid_to_user", "_resolve_symlink", "namespaced_function", "remove", "_get_version_os", "CommandExecutionError", "makedirs_perms", "get_user", "get_pgid", "_get_version", "get_uid", "get_mode", "SaltInvocationError", "is_link"], "class_names": [], "class_method_calls": ["stat.S_ISCHR", "os.unlink", "os.remove", "stat.S_ISFIFO", "stat.S_ISSOCK", "win32con.FILE_ATTRIBUTE_NORMAL", "directories_to_create.append", "os.listdir", "__opts__.get", "stat.S_ISDIR", "win32file.error", "exc.strerror", "win32file.FindFilesIterator", "win32file.GetFileAttributes", "win32file.MOVEFILE_REPLACE_EXISTING", "win32security.OpenProcessToken", "pywintypes.error", "errno.EEXIST", "exc.winerror", "win32api.LOWORD", "win32file.MOVEFILE_WRITE_THROUGH", "stat.S_ISBLK", "paths_seen.add", "win32api.HIWORD", "pstat.st_mode", "log.debug", "directories_to_create.reverse", "win32api.SetFileAttributes", "file_os.append", "win32api.GetFileVersionInfo", "os.stat", "win32file.SetFileAttributes", "pstat.st_size", "log.info", "salt.platform", "win32file.CreateSymbolicLink", "stat.S_ISREG", "os.mkdir", "pstat.st_atime", "pstat.st_ctime", "win32api.GetFileAttributes", "pstat.st_ino", "os.rmdir", "logging.getLogger", "tempfile.mktemp", "exc.errno", "win32security.TOKEN_QUERY", "win32file.MoveFileEx", "os.path", "win32api.GetCurrentProcess", "stat.S_IMODE", "sys.getwindowsversion", "salt.utils", "stat.S_ISLNK", "pstat.st_mtime", "win32security.TOKEN_ADJUST_PRIVILEGES", "os.curdir"]}, "win_firewall.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError"], "function_names": ["__virtual__", "disabled", "add_rule", "enabled"], "function_calls": ["SaltInvocationError"], "class_names": [], "class_method_calls": []}, "win_groupadd.py": {"libraries": ["win32com.client", "win32api", "salt.utils.win_functions", "salt.utils.platform", "pywintypes", "logging", "salt.utils.winapi"], "function_names": ["_get_group_object", "delete", "list_groups", "_get_all_groups", "adduser", "_get_computer_object", "info", "__virtual__", "members", "_get_username", "add", "deluser", "getent"], "function_calls": ["_get_group_object", "_get_all_groups", "_get_computer_object", "info", "_get_username", "isinstance"], "class_names": [], "class_method_calls": ["members_list.sort", "exc.excepinfo", "existing_members.sort", "results.Filter", "new_group.SetInfo", "obj_group.Add", "member.replace", "log.warning", "groupObj.Name", "groupObj.members", "comp_obj.Create", "obj_group.Remove", "log.debug", "win32com.client", "username.replace", "comp_obj.Delete", "group_obj.members", "group_obj.Add", "win32api.FormatMessage", "log.error", "obj_group.members", "nt.GetObject", "log.info", "result.Name", "result.members", "group_obj.Remove", "logging.getLogger", "ret.append", "members_list.split", "pywintypes.com_error", "member.ADSPath", "salt.utils"]}, "win_iis.py": {"libraries": [], "function_names": ["create_binding", "remove_apppool", "remove_vdir", "remove_site", "create_apppool", "deployed", "container_setting", "create_cert_binding", "create_app", "remove_cert_binding", "remove_app", "__virtual__", "_get_binding_info", "create_vdir", "set_app", "webconfiguration_settings", "remove_binding"], "function_calls": ["len", "str", "_get_binding_info", "map", "enumerate", "list"], "class_names": [], "class_method_calls": ["settings.items", "settings.keys", "settings_list.append", "hostheader.replace", "filter_settings.items"]}, "win_ip.py": {"libraries": ["time", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "salt.utils.network", "logging", "salt.exceptions.SaltInvocationError", "salt.utils.validate.net"], "function_names": ["set_dhcp_all", "disable", "get_all_interfaces", "set_static_dns", "_find_addr", "set_dhcp_ip", "get_default_gateway", "is_enabled", "get_interface", "_interface_configs", "is_disabled", "enable", "__virtual__", "get_subnet_length", "set_static_ip", "set_dhcp_dns", "raw_interface_configs"], "function_calls": ["next", "_find_addr", "range", "set_dhcp_ip", "str", "is_enabled", "_interface_configs", "is_disabled", "get_interface", "iter", "set_dhcp_dns", "CommandExecutionError", "SaltInvocationError"], "class_names": [], "class_method_calls": ["time.sleep", "val.split", "line.split", "cmd.extend", "netmask.lstrip", "log.warning", "line.strip", "line.rstrip", "subnet.strip", "log.debug", "current_ip_list.append", "current_iface.setdefault", "val.strip", "cmd.append", "logging.getLogger", "key.strip", "addr.rsplit", "x.split", "key.lower", "salt.utils"]}, "win_lgpo.py": {"libraries": ["salt.utils.win_functions", "salt.utils.data", "salt.utils.json", "logging", "salt.utils.versions", "salt.utils.stringutils", "salt.utils.dictdiffer"], "function_names": ["__virtual__", "set_", "_compare_policies", "_convert_to_unicode"], "function_calls": ["_compare_policies", "_convert_to_unicode", "list", "isinstance"], "class_names": [], "class_method_calls": ["policy_class.lower", "data.replace", "logging.getLogger", "p_data.get", "deprecation_comments.insert", "current_policy.setdefault", "requested_policy.items", "resolved_names.append", "pol_data.items", "data.items", "e_name.split", "salt.utils", "policy_changes.append", "log.debug", "new_policy.setdefault", "deprecation_comments.append", "valid_names.extend"]}, "win_lgpo_reg.py": {"libraries": ["os", "salt.modules.win_file", "salt.utils.win_reg", "salt.exceptions.CommandExecutionError", "re", "logging", "salt.utils.files", "struct"], "function_names": ["search_reg_pol", "strip_field_end", "read_reg_pol_file", "__virtual__", "reg_pol_to_dict", "write_reg_pol_data", "dict_to_reg_pol"], "function_calls": ["len", "search_reg_pol", "strip_field_end", "int", "str", "CommandExecutionError"], "class_names": [], "class_method_calls": ["general_location.end", "policy_data.startswith", "gpt_ext_loc.end", "value.items", "policy_data.lstrip", "gpt_ext_str.split", "data_to_write.startswith", "salt.modules", "pol_file.read", "re.MULTILINE", "reg.vtype", "version_loc.end", "struct.pack", "struct.unpack", "reg_pol.setdefault", "re.search", "policy.replace", "v_data.decode", "data.items", "gpt_extension.lower", "log.debug", "gpt_file.read", "version_str.split", "pol_section_delim.join", "gpt_ext_loc.start", "version_loc.start", "policies.append", "log.exception", "policy.split", "gpt_ini_data.replace", "REG_POL_HEADER.encode", "general_location.start", "re.escape", "logging.getLogger", "re.IGNORECASE", "os.getenv", "policy.append", "os.path", "pol_file_data.split", "gpt_file.write", "pol_file.write", "salt.utils", "reg.vtype_reverse"]}, "win_license.py": {"libraries": ["logging", "salt.utils.platform"], "function_names": ["__virtual__", "activate"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "win_network.py": {"libraries": ["clr", "salt.utils.win_reg", "salt._compat.ipaddress", "logging", "salt.utils.winapi", "wmi", "platform", "System.Net.NetworkInformation"], "function_names": ["_get_ip_multicast_info", "_get_ip_gateway_info", "get_interface_info", "get_interface_info_dot_net_formatted", "__virtual__", "get_interface_info_wmi", "_get_ip_anycast_info", "_get_ip_wins_info", "_get_ip_dns_info", "_get_network_interfaces", "_get_ip_base_properties", "_get_ip_unicast_info", "_get_base_properties", "get_interface_info_dot_net"], "function_calls": ["_get_ip_multicast_info", "_get_ip_gateway_info", "_get_base_properties", "next", "range", "int", "get_interface_info_wmi", "_get_ip_anycast_info", "_get_ip_wins_info", "_get_network_interfaces", "_get_ip_dns_info", "_get_ip_base_properties", "_get_ip_unicast_info", "get_interface_info_dot_net_formatted", "get_interface_info_dot_net"], "class_names": [], "class_method_calls": ["int_dict.setdefault", "addrs.PrefixOrigin", "i_face.OperationalStatus", "addrs.PrefixLength", "i_faces.setdefault", "ipaddress.IPv4Network", "addrs.ToString", "addrs.IPv4Mask", "ip_properties.AnycastAddresses", "ip_properties.DnsAddresses", "ip_properties.MulticastAddresses", "i_face.NetworkInterfaceType", "i_face.GetIPProperties", "ip_properties.GatewayAddresses", "ip_properties.WinsServersAddresses", "i_face.DefaultIPGateway", "i_face.IPEnabled", "log.debug", "i_face.MACAddress", "i_face.Name", "addrs.AddressFamily", "addrs.Address", "i_face.IPSubnet", "ip_properties.IsDnsEnabled", "i_face.IPAddress", "ip_properties.IsDynamicDnsEnabled", "i_face.IsReceiveOnly", "i_face.Description", "temp_dict.update", "i_face.Id", "wmi.WMI", "c.Win32_NetworkAdapterConfiguration", "i_face.GetPhysicalAddress", "platform.system", "ip_properties.DnsSuffix", "net.broadcast_address", "NetworkInformation.NetworkInterface", "ip_info.update", "logging.getLogger", "addrs.SuffixOrigin", "salt.utils", "ip_properties.UnicastAddresses"]}, "win_ntp.py": {"libraries": ["logging", "salt.utils.platform"], "function_names": ["__virtual__", "get_servers", "set_servers"], "function_calls": ["sorted", "get_servers", "list"], "class_names": [], "class_method_calls": ["logging.getLogger", "ntpsvrs.split", "line.rsplit", "salt.utils", "line.startswith"]}, "win_path.py": {"libraries": ["os", "salt.utils.stringutils"], "function_names": ["_format_comments", "_get_path_lowercase", "_index", "__virtual__", "absent", "_changes", "exists"], "function_calls": ["len", "_format_comments", "_get_path_lowercase", "_index", "str", "_changes", "isinstance"], "class_names": [], "class_method_calls": ["x.lower", "ret.setdefault", "path.index", "os.path", "salt.utils", "comments.append", "name.lower"]}, "win_pkg.py": {"libraries": ["os", "salt.syspaths", "salt.utils.files", "salt.exceptions.MinionError", "errno", "time", "salt.utils.win_functions", "salt.exceptions.CommandExecutionError", "salt.utils.data", "salt.utils.hashutils", "salt.payload", "salt.utils.versions", "salt.exceptions.SaltInvocationError", "salt.utils.args", "salt.utils.versions.LooseVersion", "collections", "functools.cmp_to_key", "re", "logging", "urllib.parse", "salt.utils.path", "salt.utils.platform", "salt.utils.pkg", "sys", "datetime", "salt.exceptions.SaltRenderError", "salt.fileserver"], "function_names": ["latest_version", "get_package_info", "_get_latest_pkg_version", "_reverse_cmp_pkg_versions", "_get_source_sum", "_refresh_db_conditional", "skip_uninstall_string", "_get_name_map", "upgrade_available", "__virtual__", "list_upgrades", "skip_component", "compare_versions", "_get_repo_details", "_failed_compile", "remove", "get_repo_data", "version", "_get_msiexec", "list_pkgs", "list_available", "_get_reg_software", "_repo_process_pkg_sls", "skip_parent_key", "_get_package_info", "add_software", "purge", "skip_win_installer", "refresh_db", "install", "normalize_name", "skip_release_type", "genrepo", "upgrade"], "function_calls": ["latest_version", "any", "sorted", "dict", "repo_details", "_get_latest_pkg_version", "_get_source_sum", "list", "_refresh_db_conditional", "next", "skip_uninstall_string", "_get_name_map", "skip_component", "LooseVersion", "cmp_to_key", "all", "compare_versions", "_get_repo_details", "_failed_compile", "str", "remove", "get_repo_data", "_get_msiexec", "list_pkgs", "CommandExecutionError", "isinstance", "len", "_get_reg_software", "bool", "_repo_process_pkg_sls", "skip_parent_key", "_get_package_info", "add_software", "skip_win_installer", "refresh_db", "iter", "skip_release_type", "SaltInvocationError", "genrepo"], "class_names": [], "class_method_calls": ["time.sleep", "time.time", "salt.loader", "__context__.pop", "salt.template", "pkg_params.items", "__opts__.get", "errors.append", "user_data_key.format", "salt.utils", "results.get", "os.makedirs", "log.warning", "kwargs.pop", "sys.maxsize", "errno.EEXIST", "options.get", "changed.append", "repo_details.winrepo_age", "url_parts.netloc", "re.match", "cached_pkg.replace", "cache_file.startswith", "item.strip", "os.sep", "version_list.items", "source_hash.split", "datetime.timedelta", "re.search", "salt.payload", "errno.ENOENT", "reg_software.setdefault", "removal_targets.append", "fileserver.clear_file_list_cache", "log.debug", "repofile.read", "ret.update", "log.trace", "name.endswith", "uninstall_key.format", "os.environ", "ret.setdefault", "kwargs.get", "dirs.append", "repo_details.local_dest", "os.stat", "log.error", "config.keys", "repo_cache.write", "log.exception", "repo_details.winrepo_file", "log.info", "uninstaller.startswith", "re.UNICODE", "stat_result.st_mtime", "url_parts.path", "failed.append", "old.get", "installed_pkgs.get", "urllib.parse", "config.items", "pkg_info.keys", "repo_details.winrepo_source_dir", "logging.getLogger", "collections.namedtuple", "re.IGNORECASE", "os.getenv", "installer.startswith", "product_key.format", "exc.errno", "pkginfo.keys", "os.path", "products_key.format", "dirs.extend", "os.remove", "salt.fileserver"]}, "win_pki.py": {"libraries": [], "function_names": ["__virtual__", "import_cert", "remove_cert"], "function_calls": ["dict"], "class_names": [], "class_method_calls": []}, "win_powercfg.py": {"libraries": ["logging", "salt.utils.data", "salt.utils.platform"], "function_names": ["__virtual__", "set_timeout"], "function_calls": [], "class_names": [], "class_method_calls": ["power.upper", "logging.getLogger", "name.capitalize", "power.lower", "salt.utils", "log.debug", "name.lower"]}, "win_psget.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.utils.platform", "logging", "salt.utils.versions", "xml.etree.ElementTree"], "function_names": ["get_repository", "list_modules", "update", "remove", "bootstrap", "__virtual__", "install", "_ps_xml_to_dict", "_pshell", "avail_modules", "register_repository"], "function_calls": ["list_modules", "_ps_xml_to_dict", "CommandExecutionError", "_pshell", "list"], "class_names": [], "class_method_calls": ["child.text", "logging.getLogger", "child.items", "names.append", "flags.append", "salt.utils", "log.debug", "xml.etree"]}, "win_servermanager.py": {"libraries": ["salt.utils.data"], "function_names": ["__virtual__", "installed", "removed"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["fail_feat.append", "rem_feat.append", "features.split", "new_feat.append", "name.split", "cur_feat.append", "new_feat.insert", "rem_feat.insert", "salt.utils", "kwargs.pop", "fail_feat.insert", "cur_feat.insert"]}, "win_service.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.utils.platform", "pywintypes", "win32security", "win32service"], "function_names": ["__virtual__", "info"], "function_calls": ["dict", "CommandExecutionError", "list", "isinstance"], "class_names": [], "class_method_calls": ["win32service.SERVICE_QUERY_STATUS", "win32service.SERVICE_CONFIG_DELAYED_AUTO_START_INFO", "win32service.SERVICE_CONFIG_DESCRIPTION", "exc.strerror", "win32service.CloseServiceHandle", "win32service.SERVICE_INTERROGATE", "win32service.SERVICE_QUERY_CONFIG", "win32service.SC_MANAGER_CONNECT", "pywintypes.error", "flags.append", "win32service.QueryServiceStatusEx", "win32security.LookupAccountName", "win32service.OpenSCManager", "win32service.QueryServiceConfig2", "win32service.QueryServiceConfig", "win32service.SERVICE_ENUMERATE_DEPENDENTS", "win32security.ConvertSidToStringSid", "win32service.OpenService", "salt.utils"]}, "win_shadow.py": {"libraries": ["salt.utils.platform"], "function_names": ["set_password", "set_expire", "unlock_account", "info", "__virtual__", "require_password_change"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils"]}, "win_shortcut.py": {"libraries": ["salt.utils.path", "salt.utils.data", "salt.utils.platform", "salt.exceptions.CommandExecutionError"], "function_names": ["__virtual__", "present"], "function_calls": [], "class_names": [], "class_method_calls": ["__salt__.get", "salt.utils", "exc.message"]}, "win_smtp_server.py": {"libraries": ["salt.utils.args"], "function_names": ["_merge_dicts", "_normalize_server_settings", "server_setting", "__virtual__", "relay_ip_list", "connection_ip_list", "active_log_format"], "function_calls": ["next", "str", "_normalize_server_settings", "iter", "dict", "isinstance"], "class_names": [], "class_method_calls": ["ret.update", "salt.utils", "settings.keys"]}, "win_snmp.py": {"libraries": [], "function_names": ["__virtual__", "community_names", "auth_traps_enabled", "agent_settings"], "function_calls": ["str", "sorted", "set", "dict"], "class_names": [], "class_method_calls": []}, "win_status.py": {"libraries": ["psutil", "ctypes", "salt.utils.event", "salt.utils.win_pdh", "salt.utils.functools.namespaced_function", "wmi", "salt.utils.platform", "logging", "salt.modules.status.ping_master", "subprocess", "datetime", "salt.utils.stringutils", "salt.modules.status.time_", "salt.utils.winapi", "salt.utils.network.host_to_ips"], "function_names": ["_get_process_owner", "get_unit_value", "_win_remotes_on", "vmstats", "cpustats", "loadavg", "uptime", "master", "__virtual__", "meminfo", "diskusage", "saltmem", "_get_process_info", "_byte_calc", "procs", "cpuload"], "function_calls": ["get_unit_value", "dict", "enumerate", "int", "set", "_host_to_ips", "_byte_calc", "_get_process_info", "all", "globals", "_get_process_owner", "_win_remotes_on", "namespaced_function", "str", "len", "getattr", "float", "reversed", "SYSTEM_PERFORMANCE_INFORMATION"], "class_names": ["SYSTEM_PERFORMANCE_INFORMATION"], "class_method_calls": ["disk_stats.total", "psutil.swap_memory", "line.split", "disk_stats.percent", "ctypes.byref", "spi._fields_", "proc.Name", "p.memory_info", "process.ProcessId", "log.warning", "salt.minion", "ctypes.c_ulong", "ctypes.c_longlong", "wmi_obj.win32_process", "ctypes.c_int64", "psutil.cpu_stats", "proc.ProcessId", "proc.CommandLine", "psutil.boot_time", "ctypes.windll", "process.GetOwner", "disk_stats.used", "psutil.Process", "subprocess.check_output", "ret.update", "p.oneshot", "ctypes.sizeof", "event_bus.fire_event", "psutil.virtual_memory", "ctypes.Structure", "log.error", "wmi.WMI", "disk_stats.free", "psutil.cpu_percent", "psutil.pids", "remotes.add", "subprocess.CalledProcessError", "uptime.total_seconds", "logging.getLogger", "psutil.cpu_times", "psutil.disk_usage", "ctypes.c_ulonglong", "salt.utils", "datetime.datetime"]}, "win_system.py": {"libraries": ["salt.utils.win_update", "win32api", "salt.utils.win_reg", "logging", "win32con"], "function_names": ["get_computer_name", "get_pending_file_rename", "get_pending_update", "get_pending_reboot", "get_pending_component_servicing", "get_pending_servermanager", "get_reboot_required_witnessed", "get_pending_reboot_details", "get_pending_windows_update", "get_pending_dvd_reboot", "get_pending_update_exe_volatile", "__virtual__", "get_pending_domain_join", "get_pending_computer_name", "set_reboot_required_witnessed"], "function_calls": ["get_computer_name", "get_pending_file_rename", "get_pending_update", "get_pending_component_servicing", "get_pending_servermanager", "get_reboot_required_witnessed", "int", "get_pending_windows_update", "get_pending_dvd_reboot", "get_pending_update_exe_volatile", "check", "get_pending_domain_join", "get_pending_computer_name"], "class_names": [], "class_method_calls": ["current.lower", "logging.getLogger", "win32con.ComputerNamePhysicalDnsHostname", "win32api.GetComputerNameEx", "salt.utils", "pending.lower"]}, "win_task.py": {"libraries": ["win32com.client", "time", "salt.exceptions.ArgumentValueError", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "pywintypes", "logging", "salt.utils.winapi", "pythoncom", "datetime.datetime"], "function_names": ["run_wait", "_lookup_first", "create_folder", "list_actions", "run", "delete_task", "clear_triggers", "__virtual__", "_save_task_definition", "stop", "list_tasks", "_get_date_value", "edit_task", "_clear_actions", "list_triggers", "add_action", "create_task_from_xml", "_get_date_time_format", "status", "delete_folder", "_reverse_lookup", "create_task", "info", "add_trigger", "list_folders"], "function_calls": ["hex", "list_tasks", "hasattr", "list_folders", "_get_date_value", "range", "_lookup_first", "_get_date_time_format", "edit_task", "_reverse_lookup", "ArgumentValueError", "add_trigger", "CommandExecutionError", "_save_task_definition", "add_action", "enumerate", "list", "isinstance"], "class_names": [], "class_method_calls": ["task_action.Title", "def_set.RestartCount", "task_action.Id", "task_action.Path", "idle_set.StopOnIdleEnd", "datetime.now", "task_definition.RegistrationInfo", "trigger.StartBoundary", "datetime.strptime", "trigger.RandomDelay", "kwargs.get", "task_folder.GetTask", "trigger.RunOnLastDayOfMonth", "def_set.DeleteExpiredTaskAfter", "task_service.GetFolder", "dt_obj.strftime", "trigger.Repetition", "trigger.RunOnLastWeekOfMonth", "def_set.NetworkSettings", "def_set.StartWhenAvailable", "salt.utils", "triggerObj.Enabled", "task_action.WorkingDirectory", "trigger.DaysOfMonth", "task_folder.GetFolders", "actionObj.WorkingDirectory", "trigger.Delay", "triggerObj.Type", "task_folder.CreateFolder", "log.warning", "triggerObj.ExecutionTimeLimit", "task_action.ReplyTo", "idle_set.WaitTimeout", "task_definition.Principal", "def_set.RunOnlyIfNetworkAvailable", "trigger.Enabled", "triggers.Clear", "task_action.MessageBody", "task.NextRunTime", "win32com.client", "trigger.Subscription", "triggerObj.Repetition", "task_action.Cc", "log.error", "triggerObj.StartBoundary", "trigger.MonthsOfYear", "pywintypes.com_error", "trigger.EndBoundary", "task_action.From", "action.Id", "actionObj.Arguments", "def_set.RestartInterval", "task.Stop", "task_folder.GetTasks", "task.Enabled", "task_action.Subject", "idle_set.RestartOnIdle", "trigger.DaysInterval", "triggerObj.RandomDelay", "def_set.WakeToRun", "task_folder.DeleteFolder", "pythoncom.com_error", "task_service.NewTask", "idle_set.IdleDuration", "triggers.append", "actionObj.Path", "tm_obj.strftime", "def_set.MultipleInstances", "trigger.ExecutionTimeLimit", "task_folder.RegisterTask", "ret.append", "task.LastRunTime", "trigger.WeeksInterval", "task_service.Connect", "def_set.AllowHardTerminate", "triggerObj.EndBoundary", "def_set.StopIfGoingOnBatteries", "time.sleep", "def_set.AllowDemandStart", "task.NumberOfMissedRuns", "task.Name", "triggerObj.Delay", "task.State", "task_folder.RegisterTaskDefinition", "trigger.WeeksOfMonth", "actions.Clear", "task_action.Attachments", "task_action.Bcc", "trigger.UserId", "net_set.Id", "task_definition.Settings", "task_action.Body", "dictionary.values", "def_set.ExecutionTimeLimit", "def_set.IdleSettings", "task.LastTaskResult", "actionObj.Type", "item.Name", "log.debug", "actions.append", "def_set.RunOnlyIfIdle", "task_action.To", "running_tasks.Count", "trigger.Id", "trigger.DaysOfWeek", "task_definition.Triggers", "trigger.StateChange", "task.Run", "net_set.Name", "def_set.DisallowStartIfOnBatteries", "task_service.GetRunningTasks", "logging.getLogger", "task_folder.DeleteTask", "task_action.Server", "folder.Name", "task.Definition", "user_name.lower", "task_definition.Actions", "task_action.Arguments", "error.args"]}, "win_timezone.py": {"libraries": ["salt.exceptions.CommandExecutionError", "logging", "datetime.datetime", "pytz"], "function_names": ["set_zone", "set_hwclock", "get_offset", "__init__", "get_zonecode", "remove", "get_win", "get_hwclock", "list_win", "__virtual__", "list_unix", "get_unix", "add", "list", "get_zone", "zone_compare"], "function_calls": ["sorted", "CommandExecutionError", "TzMapper", "get_zone", "zone_compare"], "class_names": ["TzMapper"], "class_method_calls": ["mapper.unix_to_win", "utc_time.astimezone", "mapper.win_to_unix", "mapper.list_win", "loc_time.tzname", "tz.endswith", "self.unix_to_win", "unix_to_win.items", "mapper.get_win", "tz_object.normalize", "pytz.timezone", "tz_object.localize", "pytz.utc", "timezone.lower", "mapper.get_unix", "v.lower", "mapper.list_unix", "datetime.utcnow", "logging.getLogger", "self.win_to_unix", "norm_time.strftime", "k.lower", "key.lower"]}, "win_useradd.py": {"libraries": ["ctypes", "win32netcon", "wmi", "win32con", "shlex", "time", "salt.utils.win_reg", "salt.exceptions.CommandExecutionError", "win32security", "salt.utils.versions", "salt.utils.args", "logging", "win32net", "win32profile", "salt.utils.dateutils", "win32ts", "win32api", "salt.utils.platform", "pywintypes", "salt.utils.winapi", "datetime.datetime"], "function_names": ["delete", "getUserSid", "setpassword", "chhome", "chprofile", "add", "chgroups", "removegroup", "update", "get_user_sid", "rename", "__virtual__", "current", "_get_userprofile_from_registry", "getent", "list_users", "list_groups", "addgroup", "chfullname", "info"], "function_calls": ["list_users", "len", "list_groups", "bool", "int", "update", "get_user_sid", "info", "set", "sorted", "str", "CommandExecutionError", "_get_userprofile_from_registry", "chgroups", "list", "isinstance"], "class_names": [], "class_method_calls": ["exc.args", "x.strip", "datetime.now", "user.Rename", "exc.strerror", "win32net.NetUserEnum", "win32net.NetUserGetInfo", "current_groups.union", "domain.upper", "win32net.error", "win32netcon.USER_PRIV_USER", "kwargs.pop", "pywintypes.error", "win32api.GetComputerName", "win32api.GetUserNameEx", "username.find", "ctypes.c_ulong", "exc.winerror", "win32netcon.MAX_PREFERRED_LENGTH", "ugrp.add", "win32profile.DeleteProfile", "win32ts.WTSLogoffSession", "win32netcon.TIMEQ_FOREVER", "shlex.quote", "win32netcon.UF_PASSWD_CANT_CHANGE", "log.debug", "win32ts.WTSQuerySessionInformation", "datetime.fromtimestamp", "dt_obj.timestamp", "win32security.LookupAccountName", "win32ts.error", "win32netcon.UF_ACCOUNTDISABLE", "log.error", "time.mktime", "wmi.WMI", "win32con.NameSamCompatible", "log.info", "win32api.GetUserName", "win32netcon.FILTER_NORMAL_ACCOUNT", "group.strip", "c.Win32_UserAccount", "expected_groups.add", "win32ts.WTSUserName", "logging.getLogger", "win32ts.WTSEnumerateSessions", "win32security.ConvertSidToStringSid", "win32netcon.UF_SCRIPT", "win32net.NetUserSetInfo", "ret.append", "win32net.NetUserAdd", "win32netcon.UF_DONT_EXPIRE_PASSWD", "win32net.NetUserGetLocalGroups", "groups.split", "user_list.append", "username.split", "salt.utils", "exc.funcname", "win32netcon.UF_LOCKOUT", "win32ts.WTS_CURRENT_SERVER_HANDLE", "win32net.NetUserDel"]}, "win_wua.py": {"libraries": ["salt.utils.win_update", "logging", "salt.utils.data", "salt.utils.platform"], "function_names": ["__virtual__", "installed", "uptodate", "removed"], "function_calls": ["list", "isinstance"], "class_names": [], "class_method_calls": ["download.updates", "install_list.count", "update.Title", "installed_updates.extend", "install.count", "wua.uninstall", "install_list.updates", "uninstall.count", "uninstall.list", "uninstall.updates", "updates.count", "available_updates.count", "comments.append", "wua.refresh", "removed_updates.extend", "updates.updates", "item.IsDownloaded", "wua.updates", "item.KBArticleIDs", "wua.search", "item.IsInstalled", "wua.available", "wua.download", "install.list", "logging.getLogger", "available_updates.list", "wua.install", "update.Identity", "install.updates", "salt.utils"]}, "win_wusa.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.utils.platform", "logging", "salt.utils.url", "salt.exceptions.SaltInvocationError"], "function_names": ["__virtual__", "uninstalled", "installed"], "function_calls": ["SaltInvocationError"], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger", "exc.message"]}, "winrepo.py": {"libraries": ["itertools", "os", "salt.utils.path", "salt.config", "salt.syspaths", "salt.runner", "stat"], "function_names": ["__virtual__", "genrepo"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["runner.cmd", "salt.config", "os.stat", "salt.syspaths", "os.path", "stat.ST_MTIME", "itertools.chain", "salt.runner", "salt.utils", "os.remove"]}, "wordpress.py": {"libraries": [], "function_names": ["__virtual__", "activated", "installed", "deactivated"], "function_calls": [], "class_names": [], "class_method_calls": []}, "x509.py": {"libraries": ["cryptography.x509", "cryptography.hazmat.primitives.asymmetric.ed448", "cryptography.exceptions.InvalidSignature", "urllib.parse.urlunparse", "salt.utils.stringutils", "salt.utils.files", "salt.exceptions.CommandExecutionError", "salt.utils.versions", "salt.utils.odict.OrderedDict", "salt.exceptions.SaltInvocationError", "cryptography.hazmat.primitives.serialization", "enum.Enum", "cryptography.hazmat.primitives.hashes", "cryptography.hazmat.primitives.serialization.pkcs12", "ipaddress", "re", "cryptography.hazmat.primitives.asymmetric.rsa", "cryptography.x509.oid.SubjectInformationAccessOID", "cryptography.hazmat.primitives.asymmetric.padding", "cryptography.hazmat.primitives.asymmetric.ed25519", "logging", "cryptography.hazmat.primitives.asymmetric.ec", "cryptography.hazmat.primitives.serialization.pkcs7", "cryptography", "salt.utils.immutabletypes", "idna", "os.path", "base64", "urllib.parse.urlparse", "datetime", "copy"], "function_names": ["merge_signing_policy", "_render_authority_info_access", "load_csr", "_render_certificate_policies", "_create_certificate_issuer", "_create_ns_cert_type", "_render_extended_key_usage", "match_pubkey", "_render_key_usage", "_get_dn", "_render_policy_constraints", "generate_ed448_privkey", "_render_general_names", "is_pair", "_parse_distribution_points", "_create_policy_constraints", "_create_certificate_policies", "_render_tlsfeature", "render_extension", "_create_crl_reason", "_create_delta_crl_indicator", "_render_issuing_distribution_point", "_create_issuing_distribution_point", "_create_name_constraints", "_create_crl_distribution_points", "_get_oid", "_render_crl_reason", "_create_no_check", "_create_subject_alt_name", "_deserialize_openssl_confstring", "build_crt", "_get_serial_number", "_parse_issuer_general_name", "_create_ns_comment", "isfile", "_get_gn", "_render_basic_constraints", "pretty_hex", "load_cert", "_create_invalidity_date", "_parse_general_names", "load_crl", "_create_authority_key_identifier", "_create_key_usage", "_create_authority_info_access", "_render_invalidity_date", "dec2hex", "get_key_type", "load_file_or_bytes", "build_csr", "_render_inhibit_any_policy", "_render_crl_number", "load_pubkey", "_create_extension", "generate_ec_privkey", "_create_tlsfeature", "verify_signature", "_create_basic_constraints", "idna_encode", "_create_extended_key_usage", "load_privkey", "_create_subject_key_identifier", "build_crl", "ensure_cert_kwargs_compat", "_render_distribution_points", "_create_inhibit_any_policy", "_render_name_constraints", "_get_rdn", "get_hashing_algorithm", "to_pem", "to_der", "render_gn", "split_pems", "generate_ed25519_privkey", "_create_issuer_alt_name", "_render_subject_key_identifier", "generate_rsa_privkey", "_create_crl_number", "_render_authority_key_identifier", "_create_freshest_crl", "_render_no_check"], "function_calls": ["any", "_get_oid", "sorted", "load_csr", "_get_rdn", "RuntimeError", "dec2hex", "to_pem", "_deserialize_openssl_confstring", "list", "OrderedDict", "_get_serial_number", "get_key_type", "frozenset", "load_file_or_bytes", "next", "int", "render_gn", "type", "urlparse", "_parse_issuer_general_name", "match_pubkey", "split_pems", "isfile", "_get_gn", "_get_dn", "range", "load_pubkey", "str", "is_pair", "_create_extension", "_parse_distribution_points", "CommandExecutionError", "tuple", "ord", "isinstance", "len", "pretty_hex", "idna_encode", "urlunparse", "getattr", "hasattr", "hex", "load_cert", "load_privkey", "_parse_general_names", "iter", "SaltInvocationError"], "class_names": ["KEY_TYPE"], "class_method_calls": ["ed25519.Ed25519PrivateKey", "cx509.PolicyInformation", "pkcs7.load_der_pkcs7_certificates", "cx509.KeyUsage", "val.items", "cx509.general_name", "bytes.fromhex", "cx509.IPAddress", "x.name", "list_.append", "ca_crt.extensions", "url.path", "ed448.Ed448PrivateKey", "base64.b64decode", "ext.critical", "re.search", "cert.tbs_certificate_bytes", "k.strip", "signing_cert.subject", "EXTENDED_KEY_USAGE_OID.get", "features.append", "PEM_BEGIN.decode", "cx509.Certificate", "fob.startswith", "rev_cert.not_valid_after", "x.dotted_string", "ret.update", "rsa.RSAPublicKey", "serialization.load_pem_public_key", "parsed_qualifiers.append", "signing_private_key.public_key", "v.rsplit", "cx509.DNSName", "policies.append", "policy.policy_qualifiers", "cx509.CertificateSigningRequestBuilder", "cx509.DistributionPoint", "pubkey.verify", "dpoint.full_name", "line.startswith", "invalid.end", "pems.pop", "cx509.CertificateRevocationList", "pk.__class__", "description.access_location", "builder.last_update", "KEY_TYPE.RSA", "x.certificate", "SubjectInformationAccessOID.CA_REPOSITORY", "f.read", "cx509.load_pem_x509_crl", "dpoints.append", "splits.append", "salt.utils", "serialization.PublicFormat", "cx509.AuthorityInformationAccess", "loaded.pop", "gn.split", "cx509.RFC822Name", "cx509.IssuingDistributionPoint", "key_type.upper", "builder.add_extension", "cx509.NameAttribute", "builder.add_revoked_certificate", "NAME_ATTRS_ALT_NAMES.items", "EXTENSIONS_OID.items", "cx509.CertificateSigningRequest", "digest.upper", "url.netloc", "privkey.public_key", "serialization.load_der_private_key", "log.warning", "v.strip", "notice.notice_reference", "url.params", "ec.EllipticCurvePublicKey", "cx509.CRLDistributionPoints", "chain.append", "datetime.timedelta", "cx509.CertificatePolicies", "ed25519.Ed25519PublicKey", "ca_crt.public_key", "cx509.DirectoryName", "KEY_TYPE.EC", "cx509.CRLNumber", "pkcs7.load_pem_pkcs7_certificates", "cx509.ObjectIdentifier", "csr.extensions", "private_key.public_key", "cx509.BasicConstraints", "extensions.items", "csr.public_key", "policy.pop", "val.replace", "cx509.UserNotice", "notice.explicit_text", "dpoint.crl_issuer", "pubkey_a.public_numbers", "conf.startswith", "cx509.load_der_x509_csr", "invalid.group", "loaded.cert", "ed448.Ed448PublicKey", "cert.signature", "cx509.NameOID", "serialization.load_der_public_key", "passphrase.encode", "cx509.RevokedCertificateBuilder", "cx509.ExtensionNotFound", "rev_cert.serial_number", "val.get", "os.path", "serialization.load_pem_private_key", "x.split", "rendered.append", "loaded.additional_certs", "description.access_method", "cx509.CRLReason", "ipaddress.ip_address", "cx509.PolicyConstraints", "cx509.load_der_x509_crl", "x.value", "revoked_cert.add_extension", "dpoint.reasons", "cx509.InhibitAnyPolicy", "ec.EllipticCurvePrivateKey", "padding.PSS", "private_key_loaded.public_key", "url.fragment", "cx509.DeltaCRLIndicator", "kwargs.pop", "qual.get", "conf.split", "val.lower", "int.from_bytes", "line.strip", "cx509.Name", "serialization.Encoding", "KEY_TYPE.ED25519", "cx509.AccessDescription", "cx509.ReasonFlags", "cx509.random_serial_number", "revoked_cert.build", "pems.splitlines", "cx509.InvalidityDate", "idna.IDNAError", "rsa.RSAPrivateKey", "rev.get", "cx509.AuthorityKeyIdentifier", "builder.subject_name", "pkcs12.load_pkcs12", "url.query", "cx509.NameConstraints", "val.encode", "cx509.UniformResourceIdentifier", "copy.deepcopy", "parsed.append", "list_.extend", "ACCESS_OID.get", "hex_str.hex", "fob.encode", "args.values", "ext.value", "cx509.load_pem_x509_csr", "immutabletypes.freeze", "builder.not_valid_before", "usages.append", "re.findall", "cx509.CRLEntryExtensionOID", "cx509.load_der_x509_certificate", "EXTENSIONS_ALT_NAMES.items", "gn.value", "ca_crt.issuer", "x.items", "val.split", "kwargs.update", "ec.generate_private_key", "x._name", "val.startswith", "cx509.ExtendedKeyUsage", "pubkey_b.public_numbers", "cx509.OCSPNoCheck", "sn.replace", "builder.next_update", "rsa.generate_private_key", "cx509.SubjectAlternativeName", "policy.policy_identifier", "ipaddress.ip_network", "val.lstrip", "cx509.load_pem_x509_certificate", "cx509.TLSFeatureType", "parsed.extend", "KEY_TYPE.ED448", "NAME_ATTRS_OID.items", "cx509.CertificateBuilder", "cx509.IssuerAlternativeName", "cx509.CertificateIssuer", "loaded.key", "typ.lower", "cert.signature_hash_algorithm", "cx509.FreshestCRL", "pub_or_cert.public_bytes", "cx509.SubjectKeyIdentifier", "cx509.ExtensionOID", "cx509.RegisteredID", "cur.append", "qualifiers.append", "dpoint.relative_name", "cx509.CertificateRevocationListBuilder", "padding.MGF1", "padding.PKCS1v15", "cx509.TLSFeature", "idna.encode", "builder.issuer_name", "logging.getLogger", "url.scheme", "ec.ECDSA", "ext_present.append", "dpoint.get", "cryptography.__version__", "ca_crt.serial_number", "signing_cert.public_key", "cx509.NoticeReference", "parsed.rdns", "cert.signature_algorithm_oid", "datetime.datetime", "cx509.AuthorityInformationAccessOID", "x.strip"]}, "x509_v2.py": {"libraries": ["cryptography.x509", "cryptography.exceptions.UnsupportedAlgorithm", "salt.state.STATE_INTERNAL_KEYWORDS", "salt.exceptions.CommandExecutionError", "cryptography.hazmat.primitives.hashes", "logging", "os.path", "base64", "salt.exceptions.SaltInvocationError", "datetime", "salt.utils.files", "salt.utils.x509", "copy"], "function_names": ["_check_file_ret", "_compare_cert", "_compare_ca_chain", "_get_revoked_certificate_by_serial_number", "csr_managed", "_split_file_kwargs", "pem_managed", "__virtual__", "crl_managed", "_build_cert", "_compare_csr", "_compare_exts", "_add_sub_state_run", "_safe_atomic_write", "_file_managed", "certificate_managed", "_getattr_safe", "getextname", "_filter_state_internal_kwargs", "private_key_managed", "_compareattr_safe", "_get_extension_for_oid", "_compare_crl"], "function_calls": ["_check_file_ret", "_compare_cert", "any", "_compare_ca_chain", "_get_revoked_certificate_by_serial_number", "enumerate", "list", "_split_file_kwargs", "next", "type", "set", "_build_cert", "_compare_exts", "str", "_compare_csr", "_add_sub_state_run", "CommandExecutionError", "_file_managed", "_safe_atomic_write", "_getattr_safe", "isinstance", "len", "getextname", "_filter_state_internal_kwargs", "getattr", "bool", "_compareattr_safe", "_get_extension_for_oid", "iter", "_compare_crl", "SaltInvocationError"], "class_names": [], "class_method_calls": ["removed.append", "ext_changes.values", "rev.serial_number", "kwargs.items", "current.not_valid_after", "obj.__class__", "cur.extensions", "x509util.ensure_cert_kwargs_compat", "changes.pop", "log.warning", "x509util.verify_signature", "x509util.load_csr", "tmp_.write", "kwargs.pop", "x509util.is_pair", "changed.append", "cur_ext.critical", "cx509.Extensions", "new_cert.fingerprint", "current.is_signature_valid", "changes.update", "parsed.update", "x509util.dec2hex", "current.public_key", "base64.b64decode", "datetime.timedelta", "ext.oid", "ext.critical", "x509util.load_privkey", "added.append", "x509util.KEY_TYPE", "x509util.merge_signing_policy", "cur_ext.value", "current.get_revoked_certificate_by_serial_number", "hashes.SHA256", "x509util.load_cert", "x509util.get_key_type", "cx509.CRLNumber", "rev_changes.values", "current.next_update", "cur_ext.oid", "copy.deepcopy", "sig_privkey.public_key", "x.serial_number", "x.oid", "current_extra.cert", "datetime.datetime", "current.key_size", "x509util.load_crl", "file_args.get", "extensions.pop", "x509util.get_hashing_algorithm", "builder_extensions.get_extension_for_oid", "ext.value", "rev.extensions", "current.issuer", "current.serial_number", "logging.getLogger", "current.extensions", "current.subject", "x509util.build_crl", "x509util.build_csr", "x509util.build_crt", "extensions.get", "cx509.ExtensionNotFound", "os.path", "current.signature_hash_algorithm", "signing_cert.public_key", "salt.utils", "x509util.match_pubkey", "revoked_parsed.append", "cx509.InvalidVersion"]}, "xapi_virt.py": {"libraries": ["os", "salt.modules.cmdmod", "salt.utils.path", "salt.exceptions.CommandExecutionError", "sys", "salt.utils.stringutils", "salt.utils.files", "contextlib", "importlib"], "function_names": ["node_info", "vcpu_pin", "shutdown", "vm_info", "migrate", "vm_diskstats", "is_hyper", "get_macs", "_get_record_by_label", "_get_val", "freemem", "__virtual__", "freecpu", "full_info", "getCpuFeatures", "stop", "resume", "_get_all", "vm_cputime", "vm_state", "get_disks", "vm_netstats", "list_domains", "getFreeCpuCount", "get_nics", "setvcpus", "reset", "_get_xtool", "_check_xenapi", "_get_xapi_session", "start", "setmem", "reboot", "cpu_make_map", "_get_label_uuid", "_info", "getCpuMhz", "_get_record", "_get_metrics_record", "pause"], "function_calls": ["node_info", "vm_info", "_get_record_by_label", "int", "_get_val", "sum", "map", "getCpuFeatures", "_get_all", "range", "get_disks", "list_domains", "getFreeCpuCount", "get_nics", "CommandExecutionError", "_get_xtool", "_check_xenapi", "len", "_get_xapi_session", "getattr", "bool", "cpu_make_map", "_get_label_uuid", "_info", "getCpuMhz", "_get_record", "_get_metrics_record"], "class_names": [], "class_method_calls": ["cpulist.split", "xapi.VBD", "contextlib.contextmanager", "ret.append", "sys.path", "macs.append", "cpus.sort", "c.split", "fp_.read", "cpus.append", "session.xenapi", "os.path", "importlib.import_module", "salt.utils", "salt.modules", "xapi.VM", "_xenapi.Session"]}, "xbpspkg.py": {"libraries": ["glob", "salt.utils.decorators", "os", "salt.utils.path", "salt.exceptions.CommandExecutionError", "salt.utils.data", "re", "salt.utils.pkg", "logging", "salt.utils.stringutils", "salt.utils.files", "salt.exceptions.MinionError"], "function_names": ["_rehash", "list_repos", "add_repo", "_check_xbps", "latest_version", "del_repo", "_get_version", "remove", "get_repo", "upgrade_available", "version", "refresh_db", "__virtual__", "list_upgrades", "install", "list_pkgs", "_locate_repo_files", "upgrade"], "function_calls": ["_rehash", "list_repos", "len", "_check_xbps", "latest_version", "any", "int", "refresh_db", "list_pkgs", "CommandExecutionError", "_locate_repo_files"], "class_names": [], "class_method_calls": ["decorators.memoize", "line.split", "__context__.pop", "ret_val.append", "cmd.extend", "shell.split", "write_buff.append", "kwargs.pop", "line.strip", "files.extend", "line.find", "VERSION_MATCH.search", "re.compile", "conf_file.write", "log.trace", "glob.glob", "kwargs.get", "version_match.group", "log.error", "cmd.append", "out.splitlines", "nb.isdigit", "logging.getLogger", "regex.match", "rewrite_file.writelines", "salt.utils", "os.remove"]}, "xfs.py": {"libraries": ["time", "os", "salt.utils.path", "salt.exceptions.CommandExecutionError", "re", "salt.utils.data", "salt.utils.platform", "logging", "salt.utils.files"], "function_names": ["_xfs_info_get_kv", "modify", "flt", "dump", "__virtual__", "_blkid_output", "defragment", "inventory", "estimate", "_xr_to_keyset", "devices", "mkfs", "_get_mounts", "_parse_xfs_info", "_xfs_prune_output", "prune_dump", "_xfsdump_output", "info", "_xfs_inventory_output", "_xfs_estimate_output", "_verify_run", "getopts"], "function_calls": ["_get_mounts", "len", "_parse_xfs_info", "range", "_xfs_prune_output", "eval", "_xfsdump_output", "flt", "_xr_to_keyset", "_xfs_info_get_kv", "_xfs_inventory_output", "_blkid_output", "_xfs_estimate_output", "dict", "_verify_run", "CommandExecutionError", "tuple", "getopts"], "class_names": [], "class_method_calls": ["t.strip", "serialized.split", "line.split", "kw.split", "__grains__.get", "data.append", "summary.append", "salt.utils", "args.split", "out.get", "line.strip", "dev_meta.strip", "log.debug", "re.compile", "options.split", "nfo.pop", "out.split", "data.get", "l.strip", "dev.get", "spr.sub", "cnt.append", "items.split", "val.strip", "re.sub", "time.strftime", "line.startswith", "cmd.append", "logging.getLogger", "serialized.startswith", "opt.append", "data.split", "dev.pop", "key.strip", "spc.sub", "kset.split", "os.path", "time.localtime", "key.lower", "el.strip", "serialized.replace", "fhr.readlines"]}, "xml.py": {"libraries": ["logging"], "function_names": ["__virtual__", "value_present"], "function_calls": [], "class_names": [], "class_method_calls": ["__opts__.get", "logging.getLogger"]}, "xmpp.py": {"libraries": [], "function_names": ["__virtual__", "send_msg", "send_msg_multi"], "function_calls": [], "class_names": [], "class_method_calls": []}, "yaml.py": {"libraries": ["yaml.YAMLError", "salt.utils.yamlloader.*", "yaml.parser", "yaml.scanner", "salt.utils.yamldumper.*"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "yumpkg.py": {"libraries": ["salt.utils.systemd", "itertools", "os", "salt.utils.files", "string", "contextlib", "salt.utils.environment", "salt.exceptions.MinionError", "salt.exceptions.CommandExecutionError", "salt.utils.data", "salt.utils.functools", "fnmatch", "salt.utils.versions", "salt.exceptions.SaltInvocationError", "salt.utils.args", "salt.utils.versions.LooseVersion", "salt.utils.lazy", "re", "logging", "salt.utils.pkg.rpm", "salt.utils.path", "configparser", "salt.utils.pkg", "datetime", "salt.utils.itertools"], "function_names": ["_get_hold", "_versionlock_pkg", "_get_patches", "latest_version", "__init__", "_load", "_get_options", "group_info", "_check_args", "_yum", "_strip_headers", "_check_versionlock", "_temporarily_unhold", "clean_metadata", "_get_yum_config", "_get_yum_config_value", "version_cmp", "update", "_load_all", "upgrade_available", "modified", "__virtual__", "list_upgrades", "hold", "mod_repo", "file_list", "file_dict", "_check", "_call_yum", "list_holds", "unhold", "_parse_output", "_add_common_args", "download", "remove", "_bool_to_str", "version", "list_downloaded", "group_install", "info_installed", "_get_copr_repo", "list_pkgs", "list_repo_pkgs", "group_list", "_check_cur", "verify", "_yum_pkginfo", "_normalize_basedir", "_list_pkgs_from_context", "list_repos", "diff", "services_need_restart", "del_repo", "_parse_repo_file", "group_diff", "get_repo", "purge", "list_installed_patches", "refresh_db", "install", "list_patches", "parse_arch", "normalize_name", "owner", "upgrade"], "function_calls": ["_get_hold", "_versionlock_pkg", "_get_patches", "latest_version", "any", "super", "sorted", "_get_options", "group_info", "_check_args", "_yum", "dict", "_check_versionlock", "_strip_headers", "AvailablePackages", "_temporarily_unhold", "list", "_get_yum_config", "next", "_get_yum_config_value", "int", "set", "hold", "LooseVersion", "_check", "_call_yum", "zip", "list_holds", "all", "globals", "unhold", "_parse_output", "_add_common_args", "remove", "str", "_bool_to_str", "list_downloaded", "list_pkgs", "list_repo_pkgs", "CommandExecutionError", "_get_copr_repo", "_check_cur", "_yum_pkginfo", "_normalize_basedir", "list_repos", "isinstance", "len", "_list_pkgs_from_context", "_parse_repo_file", "refresh_db", "install", "list_patches", "iter", "SaltInvocationError", "upgrade"], "class_names": ["AvailablePackages"], "class_method_calls": ["parsed._sections", "grains.get", "version_num.lstrip", "line.partition", "pkgver.startswith", "byrepo_ret.setdefault", "old_as_list.get", "x.name", "parsed.read", "configparser.ConfigParser", "retcodes.get", "re.search", "repo_dict.setdefault", "pkginfo.arch", "name.rsplit", "ret.update", "os.environ", "value.lstrip", "contextlib.contextmanager", "kwargs.get", "dnf_output.split", "cp.has_section", "has_wildcards.append", "line.startswith", "pkginfo.name", "fileout.write", "x.version", "err.message", "pkg_params_items.append", "unhold_prevented.append", "key.lower", "value.split", "pkginfo.version", "salt.utils", "fromrepo.split", "todelete.append", "source.keys", "os.unlink", "pkg.arch", "section_map.get", "_available.get", "line.split", "repofile.endswith", "__opts__.get", "fnmatch.filter", "errors.append", "woarch.rsplit", "log.warning", "pkg_params.pop", "services.add", "update_cmd.extend", "repo.split", "re.match", "ret.extend", "match.group", "patches.items", "_setopt.append", "os.F_OK", "line.lower", "value.rstrip", "pkginfo.install_date", "comments.append", "ret.setdefault", "has_comparison.append", "datetime.datetime", "itertools.cycle", "os.pathsep", "log.error", "pkgver.split", "configparser.MissingSectionHeaderError", "old.get", "self._args", "name.split", "pkg_to_paths.get", "line.endswith", "targets.extend", "pkginfo.install_date_time_t", "enablerepo.split", "os.path", "clean_cmd.extend", "cp.get", "basedir.split", "version_list.add", "copr.split", "to_unhold.keys", "skip.split", "cmd.extend", "params.update", "version_to_remove.split", "x.vstring", "os.makedirs", "os.X_OK", "include.split", "kwargs.pop", "new.get", "line.strip", "dld_result.startswith", "completed_groups.append", "to_reinstall.append", "cp.read", "context.get", "self._kwargs", "pkg_to_paths.items", "pid.strip", "self._dict", "section_dict.pop", "pkg.repoid", "x.lower", "cmd_prefix.append", "log.info", "targets.append", "version_num.split", "repo_info.get", "cmd.append", "output.splitlines", "dld_result.endswith", "ret.append", "to_purge.extend", "target.keys", "conf.get", "filerepos.keys", "pkgname.rsplit", "repo.startswith", "os.remove", "x.startswith", "group_detail.get", "__context__.pop", "os.listdir", "pkg_params.items", "kwargs.items", "__grains__.get", "self._load_all", "os.access", "ret.values", "pkg_params.update", "os.defpath", "to_downgrade.append", "pkg_to_paths.keys", "worel.rsplit", "string.punctuation", "disablerepo.split", "key.startswith", "log.debug", "pkg.version", "log.trace", "g_info.get", "update_cmd.append", "self.loaded", "pkg.name", "value.rsplit", "fnmatch.fnmatch", "group_pkgs.get", "match.groups", "logging.getLogger", "os.linesep", "cp.options", "opt.startswith", "_nfo.items", "to_install.append", "x.strip"]}, "zabbix.py": {"libraries": ["salt.utils.versions.Version", "os", "socket", "salt.utils.data", "salt.utils.json", "logging", "salt.utils.files", "salt.utils.http", "salt.exceptions.SaltException", "urllib.error"], "function_names": ["template_get", "mediatype_update", "usermacro_get", "usergroup_exists", "substitute_params", "user_create", "user_deletemedia", "mediatype_create", "hostinterface_update", "usermacro_createglobal", "_query", "usermacro_create", "usermacro_deleteglobal", "host_delete", "hostgroup_delete", "user_delete", "hostgroup_list", "hostinterface_delete", "mediatype_delete", "_login", "__virtual__", "compare_params", "usergroup_delete", "user_update", "host_create", "usermacro_delete", "user_getmedia", "hostgroup_update", "mediatype_get", "hostinterface_get", "_connarg", "usergroup_update", "host_inventory_get", "hostgroup_create", "user_get", "user_list", "hostgroup_exists", "host_list", "get_object_id_by_params", "hostgroup_get", "_frontend_url", "usergroup_get", "hostinterface_create", "get_zabbix_id_mapper", "_params_extend", "apiinfo_version", "usergroup_create", "usermacro_updateglobal", "host_inventory_set", "run_query", "user_exists", "host_update", "configuration_import", "usergroup_list", "_map_to_list_of_dicts", "host_exists", "user_addmedia", "host_get", "usermacro_update"], "function_calls": ["any", "substitute_params", "_query", "dict", "Version", "next", "_login", "type", "set", "compare_params", "_connarg", "all", "SaltException", "user_get", "str", "get_object_id_by_params", "hostgroup_get", "_frontend_url", "usergroup_get", "_params_extend", "isinstance", "len", "apiinfo_version", "bool", "run_query", "iter", "_map_to_list_of_dicts", "host_get"], "class_names": [], "class_method_calls": ["d_in_e.append", "connection_args.get", "output.append", "name.startswith", "params.setdefault", "result.get", "user.get", "difflist.append", "input_object.items", "key.startswith", "connection_args.pop", "medias.extend", "params.pop", "log.info", "socket.gethostname", "query_params.update", "urllib.error", "macro.startswith", "logging.getLogger", "connargs.pop", "fp_.read", "os.path", "error.find", "macro.endswith", "diffdict.update", "salt.utils"]}, "zcbuildout.py": {"libraries": ["logging", "sys"], "function_names": ["_valid", "installed", "__virtual__", "__salt", "_invalid", "_ret_status"], "function_calls": ["func", "int", "dict", "__salt", "object", "_ret_status", "isinstance"], "class_names": [], "class_method_calls": ["ret.update", "logging.getLogger", "kwargs.get", "sys.executable", "exec_status.get", "log.warning"]}, "zenoss.py": {"libraries": ["logging"], "function_names": ["__virtual__", "monitored"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger"]}, "zk_concurrency.py": {"libraries": [], "function_names": ["__virtual__", "min_party", "unlock", "lock"], "function_calls": ["len", "Exception", "all", "isinstance"], "class_names": [], "class_method_calls": []}, "znc.py": {"libraries": ["hashlib", "salt.utils.path", "signal", "logging", "os.path", "random"], "function_names": ["version", "buildmod", "__virtual__", "_makepass", "dumpconf", "rehashconf"], "function_calls": ["range"], "class_names": [], "class_method_calls": ["signal.SIGUSR1", "logging.getLogger", "h.hexdigest", "signal.SIGHUP", "h.name", "cmd.extend", "random.SystemRandom", "os.path", "hashlib.sha256", "hashlib.md5", "salt.utils", "h.update"]}, "zoneadm.py": {"libraries": ["salt.utils.path", "logging", "salt.utils.decorators"], "function_names": ["_is_globalzone", "list_zones", "boot", "shutdown", "ready", "detach", "reboot", "halt", "attach", "move", "__virtual__", "install", "clone", "verify", "_is_uuid", "uninstall"], "function_calls": ["len", "_is_globalzone", "int", "sorted", "_is_uuid", "enumerate"], "class_names": [], "class_method_calls": ["zone.index", "logging.getLogger", "boot_options.strip", "zone.split", "zones.keys", "salt.utils"]}, "zonecfg.py": {"libraries": ["salt.utils.decorators", "salt.utils.path", "salt.utils.data", "re", "logging", "salt.utils.odict.OrderedDict", "salt.utils.args", "salt.utils.files"], "function_names": ["delete", "create", "export", "add_resource", "remove_resource", "_parse_value", "set_property", "_is_globalzone", "__virtual__", "update_resource", "_sanitize_value", "import_", "_property", "create_from_template", "_resource", "info", "clear_property", "_dump_cfg", "_clean_message"], "function_calls": ["_is_globalzone", "_property", "_resource", "_clean_message", "int", "str", "_sanitize_value", "_parse_value", "dict", "_dump_cfg", "isinstance"], "class_names": [], "class_method_calls": ["message.splitlines", "kwargs.items", "value.items", "log.warning", "value.endswith", "line.strip", "line.rstrip", "fp_.write", "value.startswith", "item.items", "fp_.readlines", "pair.split", "log.debug", "re.compile", "value.isdigit", "value.strip", "message.replace", "line.startswith", "message.remove", "logging.getLogger", "value.replace", "new_value.append", "listparser.split", "salt.utils"]}, "zookeeper.py": {"libraries": [], "function_names": ["acls", "__virtual__", "absent", "_check_acls", "present"], "function_calls": ["_check_acls", "set", "bool", "isinstance"], "class_names": [], "class_method_calls": ["changes.setdefault"]}, "zpool.py": {"libraries": ["logging", "salt.utils.odict.OrderedDict", "os"], "function_names": ["__virtual__", "absent", "present", "_layout_to_vdev"], "function_calls": ["_layout_to_vdev", "isinstance"], "class_names": [], "class_method_calls": ["vdev_disk.split", "vdevs.append", "vdevs.insert", "logging.getLogger", "properties_update.append", "vdev.split", "__grains__.get", "os.path", "prop.startswith", "vdevs.extend", "log.warning", "log.debug", "default_config.update"]}, "zypperpkg.py": {"libraries": ["salt.utils.systemd", "salt.utils.event", "os", "salt.utils.stringutils", "fcntl", "salt.utils.files", "salt.exceptions.MinionError", "salt.utils.environment", "errno", "time", "salt.exceptions.CommandExecutionError", "salt.utils.data", "salt.utils.functools", "fnmatch", "salt.utils.versions", "salt.exceptions.SaltInvocationError", "salt.utils.versions.LooseVersion", "re", "logging", "xml.dom.minidom", "urllib.parse", "xml.parsers.expat.ExpatError", "salt.utils.pkg.rpm", "salt.utils.path", "configparser", "salt.utils.pkg", "datetime"], "function_names": ["_get_patches", "pid", "_systemd_scope", "latest_version", "_is_xml_mode", "list_patterns", "__init__", "_is_rpm_lock", "_get_available_versions", "_get_visible_patterns", "_is_match", "clean_locks", "resolve_capabilities", "error_msg", "version_cmp", "search", "__getattr__", "_handle_zypper_lock_file", "upgrade_available", "modified", "__virtual__", "list_upgrades", "mod_repo", "hold", "file_list", "file_dict", "_get_installed_patterns", "stderr", "_get_scope_versions", "info_available", "list_holds", "_reset", "_uninstall", "unhold", "_pattern_name", "__call", "list_installed_patterns", "_is_zypper_lock", "_clean_cache", "download", "_set_version", "remove", "list_locks", "version", "list_downloaded", "list_products", "_is_error", "info_installed", "list_pkgs", "list_repo_pkgs", "verify", "exit_code", "_check_result", "_get_configured_repos", "_list_pkgs_from_context", "list_repos", "list_provides", "__call__", "diff", "_get_repo_info", "del_repo", "services_need_restart", "_handle_rpm_lock_file", "get_repo", "purge", "list_installed_patches", "refresh_db", "_get_first_aggregate_text", "install", "_find_types", "parse_arch", "list_patches", "normalize_name", "owner", "stdout", "upgrade"], "function_calls": ["_get_patches", "_systemd_scope", "any", "latest_version", "sorted", "dict", "_get_visible_patterns", "list", "_is_match", "next", "int", "search", "set", "_get_installed_patterns", "mod_repo", "LooseVersion", "info_available", "_pattern_name", "_uninstall", "globals", "list_installed_patterns", "_clean_cache", "str", "list_locks", "__zypper__", "list_downloaded", "list_products", "info_installed", "_Zypper", "list_pkgs", "CommandExecutionError", "Wildcard", "tuple", "_get_configured_repos", "isinstance", "_list_pkgs_from_context", "len", "_get_repo_info", "del_repo", "bool", "get_repo", "list_installed_patches", "refresh_db", "_get_first_aggregate_text", "list_patches", "_find_types", "iter", "SaltInvocationError"], "class_names": ["Wildcard", "_Zypper"], "class_method_calls": ["__zypper__.stderr", "cmd_install.insert", "contextkey.startswith", "self._handle_zypper_lock_file", "doc.getElementsByTagName", "repos_cfg.sections", "fcntl.lockf", "repo_info.update", "byrepo_ret.setdefault", "self.__env", "zypper_output.split", "__zypper__.exit_code", "configparser.ConfigParser", "element.getAttribute", "self.__ignore_repo_failure", "pkg_info.extend", "__pillar__.get", "repo_dict.setdefault", "re.compile", "pkginfo.arch", "self.TAG_BLOCKED", "name.rsplit", "dld_result.getElementsByTagName", "lock.pop", "err.errno", "kwargs.get", "dom.parseString", "fcntl.LOCK_UN", "i.strip", "self.__root", "node.nodeType", "self.__cmd", "new_url.fragment", "line.startswith", "pkgname.startswith", "self._is_error", "pkginfo.name", "ALLOWED_SEARCH_OPTIONS.get", "node.childNodes", "node.getAttribute", "self.XML_DIRECTIVES", "pkginfo.version", "salt.utils", "self._get_scope_versions", "self.ZYPPER_LOCK", "line.split", "cmd_update.insert", "cmd_install.append", "get_in_versions.append", "fnmatch.filter", "self.Z_OP", "log.warning", "pkg_params.keys", "__context__.get", "re.match", "pkg_data.split", "match.group", "fcntl.LOCK_EX", "cmd_install.extend", "self.__no_raise", "self.RPM_LOCK", "self.__xml", "ret.setdefault", "self._is_xml_mode", "inst_pkgs.items", "lock_ver.lstrip", "self.__call", "log.error", "new_url.scheme", "pkgver.split", "new_url.params", "repo_info.setdefault", "search_patterns.getElementsByTagName", "self.LOCK_EXIT_CODE", "slv.getAttribute", "item.split", "element.split", "pkg_to_paths.get", "solvable.getAttribute", "targets.extend", "cmd_opt.append", "pkginfo.install_date_time_t", "os.path", "solvable.attributes", "self.SUCCESS_EXIT_CODES", "lock.update", "fhr.read", "version_list.add", "pkg.split", "cmd.extend", "self.__call_result", "_error_msg.append", "x.vstring", "exit_code.setter", "kwargs.pop", "rfh.readline", "line.strip", "nfo.get", "node.attributes", "self._is_zypper_lock", "added.append", "pkg_info.get", "self._set_version", "pkg_to_paths.items", "errno.EAGAIN", "self.zypper", "nfo.pop", "status.find", "rfile.readline", "self.__called", "self.version", "meta.items", "self._is_rpm_lock", "self.error_msg", "cmd_update.extend", "log.info", "targets.append", "re.split", "cmd.append", "output.splitlines", "cmd_update.append", "urllib.parse", "fcntl.LOCK_NB", "self.__no_lock", "out.splitlines", "text.split", "ret.append", "locks.get", "downgrades.append", "self.__refresh", "__zypper__.SUCCESS_EXIT_CODES", "__zypper__.stdout", "text.startswith", "__zypper__.pid", "self.__dict__", "global_cmd_opt.append", "self.__error_msg", "new_url.path", "self.__exit_code", "time.sleep", "removed.append", "__context__.pop", "os.listdir", "pkg_params.items", "error_msg.setter", "prd.getElementsByTagName", "__grains__.get", "self.name", "update_node.getAttribute", "lock.get", "self.exit_code", "configparser.NoSectionError", "repo.getAttribute", "capability.split", "new_url.query", "out.append", "self.WARNING_EXIT_CODES", "prd.attributes", "pkg_to_paths.keys", "keys.append", "locks.items", "new_url.netloc", "target.items", "self._handle_rpm_lock_file", "self._get_available_versions", "package_info.get", "self._attr_solvable_version", "log.debug", "node.nodeValue", "result.keys", "version.replace", "self.__systemd_scope", "self._reset", "re.sub", "ptrn_re.match", "dom.Document", "self.TAG_RELEASED", "self._op", "refresh_opts.append", "fnmatch.fnmatch", "logging.getLogger", "data.strip", "os.linesep", "fname.endswith", "self._check_result", "repos_cfg.read", "inst_pkgs.update", "_nfo.items", "datetime.datetime", "pkginfo.install_date"]}, "app.py": {"libraries": ["salt.utils.event", "itertools", "os", "functools", "multiprocessing.Pipe", "signal", "urllib.parse.parse_qsl", "cherrypy", "salt.utils.stringutils", "multiprocessing.Process", "time", "salt.auth", "salt.utils.versions", "salt.utils.args", "salt", "io", "traceback", "tarfile", "salt.netapi", "salt.utils.yaml", "salt.exceptions", "salt.utils.json", "logging", "collections.abc.Iterator", "cherrypy.lib.cpstats", "tools.websockets", "collections.abc.Mapping"], "function_names": ["hypermedia_handler", "_setattr_url_map", "salt_ip_verify_tool", "__init__", "GET", "get_conf", "urlencoded_processor", "hypermedia_in", "process_request_body", "text_processor", "exec_lowstate", "json_processor", "signal_handler", "salt_auth_tool", "_update_url_map", "event_stream", "salt_api_acl_tool", "lowdata_fmt", "html_override_tool", "hypermedia_out", "cors_tool", "salt_token_tool", "_is_valid_token", "yaml_processor", "get_app", "POST", "listen", "wrapped"], "function_calls": ["super", "fn", "dict", "enumerate", "list", "next", "int", "type", "out", "setattr", "salt_api_acl_tool", "cls", "API", "Process", "len", "isinstance", "getattr", "hasattr", "listen", "parse_qsl", "Pipe"], "class_names": ["Login", "Run", "WebsocketEndpoint", "Logout", "Events", "Stats", "Token", "Minions", "Jobs", "Webhook", "LowDataAdapter", "App", "API", "Keys"], "class_method_calls": ["logger.error", "pipe.recv", "priv_key_file.size", "exc.strerror", "cpstats.extrapolate_statistics", "handler.opts", "logger.warning", "self.apiopts", "tarfile.TarInfo", "event.iter_events", "cherrypy.config", "salt_config.get", "urlencoded.decode", "tarball.addfile", "cherrypy.TimeoutError", "resolved_tkn.get", "itertools.chain", "logging.statistics", "pub_key.encode", "signal.signal", "cherrypy.dispatch", "salt.utils", "self._is_valid_token", "self._setattr_url_map", "cherrypy_conf.get", "self.api", "cherrypy.response", "acl.get", "contents.seek", "cherrypy.Tool", "orig_session.get", "self.url_map", "request.handler", "os._exit", "unserialized_data.setdefault", "data.get", "tarball.close", "signal.SIGTERM", "ret.get", "root.get_conf", "cherrypy.lib", "creds.get", "creds.update", "logger.info", "self._update_url_map", "request.path_info", "os.path", "cherrypy.__version__", "cherrypy.session", "token.get", "cherrypy.HTTPError", "websockets.SynchronizingWebsocket", "io.BytesIO", "SaltInfo.process", "self.exec_lowstate", "tools_config.items", "pub_key_file.size", "unserialized_data.items", "request._hypermedia_inner_handler", "fileobj.getvalue", "entity.fp", "self.tag_base", "traceback.format_exc", "salt.netapi", "salt.exceptions", "request.headers", "LowDataAdapter._cp_config", "fileobj.seek", "functools.wraps", "handler.send", "apiopts.get", "lowstate.update", "handler.pipe", "self.event", "functools.partial", "time.time", "cherrypy.request", "logger.debug", "salt.auth", "event_processor.SaltInfo", "proc.start", "cherrypy.CherryPyException", "contents.read", "self.opts", "priv_key.encode", "cherrypy.tools", "opts.get", "request.remote", "self._cp_config", "self.auth", "e.message", "__name__.rsplit", "entity.read", "logging.getLogger", "cherrypy.serving", "cherrypy.InternalRedirect", "req_head.get", "self.resolver", "tarfile.open"]}, "event_processor.py": {"libraries": ["threading", "logging", "salt.utils.json", "salt.netapi"], "function_names": ["process_minion_update", "process_new_job_event", "__init__", "process_ret_job_event", "process", "process_key_event", "publish", "publish_minions", "process_presence_events"], "function_calls": ["len", "set", "all"], "class_names": ["SaltInfo"], "class_method_calls": ["curr_minion.update", "self.publish", "self.process_minion_update", "self.process_new_job_event", "self.process_ret_job_event", "minion.update", "self.handler", "log.debug", "self.jobs", "self.minions", "threading.current_thread", "self.process_presence_events", "salt.netapi", "self.publish_minions", "tag.split", "logging.getLogger", "client.run", "self.process_key_event", "salt.utils", "job.setdefault"]}, "websockets.py": {"libraries": ["cherrypy", "ws4py.websocket.WebSocket", "ws4py.server.cherrypyserver.WebSocketTool", "ws4py.server.cherrypyserver.WebSocketPlugin"], "function_names": ["__init__", "received_message"], "function_calls": ["WebSocketPlugin", "WebSocketTool", "super"], "class_names": ["SynchronizingWebsocket"], "class_method_calls": ["message.data", "self.opts", "self.send", "self.token", "cherrypy.tools", "cherrypy.engine", "self.pipe"]}, "saltnado.py": {"libraries": ["salt.utils.event", "salt.ext.tornado.concurrent.Future", "salt.utils.event.tagify", "collections.defaultdict", "cgi", "time", "salt.auth", "salt.ext.tornado.httpserver", "salt.ext.tornado.ioloop", "fnmatch", "copy.copy", "salt.utils.args", "salt.ext.tornado.web", "salt.runner", "salt.utils.minions", "salt.exceptions.AuthenticationError", "salt.netapi", "salt.utils.yaml", "salt.client", "salt.utils.json", "logging", "salt.exceptions.EauthAuthenticationError", "salt.ext.tornado.gen", "salt.exceptions.AuthorizationError", "salt.ext.tornado.escape"], "function_names": ["find_acceptable_content_type", "job_not_running", "__init__", "prefix_matcher", "token", "get_minion_returns", "_disbatch_runner_async", "set_default_headers", "post", "_form_loader", "_handle_event_socket_recv", "subscribe_minion", "on_finish", "options", "on_connection_close", "_check_cors_origin", "_format_call_run_job_async", "_verify_auth", "_json_dumps", "more_todo", "cancel_inflight_futures", "_disbatch_runner", "destroy", "serialize", "done_callback", "_timeout_future", "clean_by_request", "timeout_futures", "exact_matcher", "get_event", "deserialize", "get", "disbatch", "_disbatch_local", "_get_lowstate", "handle_future", "prepare", "initialize", "_verify_client", "_disbatch_local_async"], "function_calls": ["find_acceptable_content_type", "any", "super", "dict", "list", "matcher", "subscribe_minion", "Any", "set", "TypeError", "defaultdict", "_check_cors_origin", "Future", "cancel_inflight_futures", "more_todo", "_json_dumps", "isinstance", "len", "TimeoutException", "hasattr", "getattr", "tagify", "EventListener", "copy"], "class_names": ["TimeoutException", "BaseSaltAPIHandler", "Any", "JobsSaltAPIHandler", "EventListener", "SaltAuthHandler", "EventsSaltAPIHandler", "RunSaltAPIHandler", "WebhookSaltAPIHandler", "MinionSaltAPIHandler", "SaltAPIHandler"], "class_method_calls": ["chunk.get", "f.result", "self.mod_opts", "cgi.parse_header", "self.finish", "minions.values", "self.get_cookie", "self.tag_map", "self.timeout_futures", "self.set_header", "accept_header.split", "self.request", "self.disbatch", "salt.utils", "self.send_error", "token_dict.get", "self.set_cookie", "future.add_done_callback", "event.set_result", "self.job_not_running", "self.flush", "self.redirect", "self.dumper", "f_call.get", "salt.runner", "self.token", "self.content_type", "future.set_result", "salt.client", "log.error", "self.request_map", "min_wait_time.done", "self.serialize", "salt.ext", "request_headers.split", "self.connected", "event.done", "self.set_result", "self.timeout_map", "self.lowstate", "token.get", "chunk.pop", "self.saltclients", "self.done", "future.set_exception", "event.get", "events.remove", "self._timeout_future", "self._format_call_run_job_async", "salt.netapi", "_loop.add_callback", "self.request_payload", "self._form_loader", "ret.append", "self.start", "self._verify_client", "prefix_matcher.__func__", "is_finished.done", "events.append", "self.event", "self.application", "self._handle_event_socket_recv", "time.time", "min_wait_time.set_result", "self.done_callback", "self._verify_auth", "self._get_lowstate", "self.write", "self.deserialize", "EventListener.exact_matcher", "_loop.call_later", "future.done", "self.ct_out_map", "log.debug", "self.opts", "self.get_minion_returns", "mod_opts.get", "low.get", "mtag.startswith", "fnmatch.fnmatch", "self.ckminions", "logging.getLogger", "self.set_status", "local_client.run_job_async", "self.get_arguments"]}, "saltnado_websockets.py": {"libraries": ["salt.netapi", "salt.utils.json", "salt.ext.tornado.websocket", "logging", "salt.ext.tornado.gen", "saltnado._check_cors_origin"], "function_names": ["get", "on_close", "open", "on_message", "check_origin"], "function_calls": ["_check_cors_origin", "bool", "super"], "class_names": ["AllEventsHandler", "FormattedEventsHandler"], "class_method_calls": ["self.application", "logging.getLogger", "self.token", "salt.netapi", "self.connected", "event_processor.SaltInfo", "self.write_message", "client.run", "self.close", "mod_opts.get", "log.info", "salt.ext", "salt.utils", "log.debug", "evt_processor.process", "self.send_error"]}, "rest_wsgi.py": {"libraries": ["errno", "os", "salt.netapi", "salt.config", "salt.utils.json", "wsgiref.simple_server.make_server", "logging", "salt"], "function_names": ["dispatch", "start", "__init__", "run_chunk", "application", "__virtual__", "saltenviron", "read_body", "get_json", "get_headers", "mkdir_p", "get_opts"], "function_calls": ["HTTPError", "get_headers", "list", "int", "run_chunk", "__virtual__", "get_json", "SystemExit", "dispatch", "globals", "get_opts", "str", "locals", "saltenviron", "read_body", "len", "start", "make_server", "start_response"], "class_names": ["HTTPError"], "class_method_calls": ["environ.get", "__opts__.get", "os.makedirs", "errno.EEXIST", "self.code", "response_headers.items", "os.environ", "salt.netapi", "httpd.serve_forever", "salt.exceptions", "response_headers.update", "Exception.__init__", "logging.getLogger", "salt.config", "exc.code", "client.run", "exc.errno", "os.path", "salt.utils"]}, "dson.py": {"libraries": ["logging", "dson"], "function_names": ["__virtual__", "render"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["dson_input.startswith", "logging.getLogger", "dson_input.read", "dson_input.find", "dson_input.strip", "dson.loads", "log.debug"]}, "highstate.py": {"libraries": ["re", "salt.utils.data", "textwrap", "logging", "pprint", "salt.utils.stringutils", "collections", "salt.utils.color", "salt.output"], "function_names": ["_format_changes", "_format_terse", "_counts", "_nested_changes", "output", "_compress_ids", "_format_host"], "function_calls": ["any", "sorted", "_nested_changes", "max", "next", "int", "sum", "round", "str", "_format_terse", "_counts", "output", "_format_host", "len", "isinstance", "_format_changes", "float", "iter", "map", "min", "_compress_ids"], "class_names": [], "class_method_calls": ["sline.format", "pprint.pformat", "rdurations.append", "count_match.group", "fmt_string.format", "data.splitlines", "__opts__.get", "state_output.startswith", "rlabel.values", "clikwargs.get", "item.copy", "log.warning", "s.splitlines", "colorfmt.format", "re.MULTILINE", "pduration.partition", "rcounts.setdefault", "rcounts.get", "state_output.endswith", "wrapper.fill", "state_lines.insert", "textwrap.TextWrapper", "re.search", "data.items", "ret.items", "salt.output", "info.get", "changestats.append", "rcounts.values", "data.keys", "ret.setdefault", "kwargs.get", "hstrs.extend", "log.error", "data.values", "collections.Counter", "re.sub", "ret.get", "pdurations.append", "comment.strip", "_data.get", "hostdata.items", "state_lines.extend", "logging.getLogger", "key.endswith", "rduration.partition", "changes.get", "hstrs.append", "hstrs.insert", "salt.utils", "tname.split"]}, "json_out.py": {"libraries": ["logging", "salt.utils.json"], "function_names": ["__virtual__", "output"], "function_calls": ["str", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "__opts__.get", "salt.utils", "log.debug"]}, "nested.py": {"libraries": ["numbers.Number", "salt.utils.odict", "salt.utils.stringutils", "collections.abc.Mapping", "salt.output", "salt.utils.color"], "function_names": ["display", "__init__", "ustring", "output"], "function_calls": ["len", "str", "sorted", "NestDisplay", "repr", "isinstance"], "class_names": ["NestDisplay"], "class_method_calls": ["nest.display", "__opts__.get", "fmt.format", "self.ustring", "self.ENDC", "out.append", "self.retcode", "self.display", "salt.output", "ret.items", "kwargs.get", "self.GREEN", "ret.keys", "self.YELLOW", "self.RED", "ret.splitlines", "self.LIGHT_YELLOW", "self.strip_colors", "salt.utils", "self.__dict__", "self.CYAN"]}, "newline_values_only.py": {"libraries": [], "function_names": ["_get_values", "_one_level_values", "_string_list", "output"], "function_calls": ["_get_values", "_one_level_values", "str", "_string_list", "isinstance"], "class_names": [], "class_method_calls": ["values.append", "data.items", "values.extend"]}, "no_out_quiet.py": {"libraries": [], "function_names": ["__virtual__", "output"], "function_calls": [], "class_names": [], "class_method_calls": []}, "no_return.py": {"libraries": ["salt.utils.color"], "function_names": ["display", "__init__", "output"], "function_calls": ["sorted", "NestDisplay", "isinstance"], "class_names": ["NestDisplay"], "class_method_calls": ["nest.display", "__opts__.get", "ret.split", "self.display", "self.colors", "salt.utils"]}, "overstatestage.py": {"libraries": ["salt.utils.color"], "function_names": ["output"], "function_calls": ["sorted"], "class_names": [], "class_method_calls": ["comp.items", "salt.utils", "__opts__.get"]}, "pony.py": {"libraries": ["salt.utils.path", "salt.utils.data", "subprocess"], "function_names": ["__virtual__", "output"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "subprocess.check_output"]}, "pprint_out.py": {"libraries": ["pprint"], "function_names": ["__virtual__", "output"], "function_calls": ["str", "isinstance"], "class_names": [], "class_method_calls": ["pprint.pformat"]}, "profile.py": {"libraries": ["cProfile", "os", "salt.utils.path", "salt.utils.hashutils", "logging", "subprocess", "datetime", "salt.utils.files", "salt.utils.stringutils", "pstats"], "function_names": ["profile_func", "proffunc", "profiled_func", "activate_profile", "output_profile"], "function_calls": [], "class_names": [], "class_method_calls": ["pro.returncode", "pr.disable", "subprocess.Popen", "logging.info", "profiler.runcall", "os.makedirs", "logging.exception", "subprocess.PIPE", "pstats.Stats", "pro.stdout", "pr.dump_stats", "log.trace", "fun.__name__", "log.error", "pro.stderr", "log.info", "profiler.dump_stats", "cProfile.Profile", "pr.enable", "logging.getLogger", "os.path", "salt.utils", "datetime.datetime"]}, "progress.py": {"libraries": ["progressbar"], "function_names": ["__virtual__", "progress_iter", "output"], "function_calls": [], "class_names": [], "class_method_calls": ["bar.maxval", "progressbar.Percentage", "progressbar.Timer", "progressbar.ProgressBar", "bar.update", "bar.start", "progressbar.Bar", "progressbar.Counter"]}, "raw.py": {"libraries": ["salt.utils.stringutils"], "function_names": ["output"], "function_calls": ["str", "isinstance"], "class_names": [], "class_method_calls": ["salt.utils"]}, "table_out.py": {"libraries": ["salt.utils.data", "functools.reduce", "operator", "salt.output", "salt.utils.color"], "function_names": ["display", "wrap_onspace", "__init__", "_truncate", "row_wrapper", "prepare_rows", "__virtual__", "output", "ustring", "display_rows"], "function_calls": ["len", "TableDisplay", "justify", "sorted", "type", "row_wrapper", "sum", "str", "callable", "max", "isinstance", "map", "zip", "list", "reduce"], "class_names": ["TableDisplay"], "class_method_calls": ["self.prepare_rows", "__opts__.get", "fmt.format", "self.ustring", "out.extend", "self.prefix", "line.rfind", "table.display", "kwargs.pop", "self.ENDC", "table.ustring", "out.append", "temp_rows.append", "self.separate_rows", "self.wrapfunc", "self.width", "word.split", "self.display", "table.WHITE", "temp_row.append", "self._JUSTIFY_MAP", "self.justify", "kwargs.get", "operator.add", "labels_temp.append", "self.display_rows", "ret.keys", "ret.get", "self.LIGHT_GRAY", "self.__dict__", "rows.append", "text.split", "self.strip_colors", "str.center", "self.has_header", "self.DARK_GRAY", "str.rjust", "self.delim", "self.row_delimiter", "self.WHITE", "salt.utils", "str.ljust", "self.suffix", "self.wrap_onspace"]}, "txt.py": {"libraries": ["pprint"], "function_names": ["output"], "function_calls": ["hasattr"], "class_names": [], "class_method_calls": ["pprint.pformat", "value.splitlines"]}, "virt_query.py": {"libraries": [], "function_names": ["output"], "function_calls": ["next", "iter"], "class_names": [], "class_method_calls": []}, "yaml_out.py": {"libraries": ["logging", "pprint", "salt.utils.yaml"], "function_names": ["__virtual__", "output"], "function_calls": [], "class_names": [], "class_method_calls": ["pprint.pformat", "logging.getLogger", "params.update", "log.exception", "salt.utils"]}, "payload.py": {"libraries": ["salt.transport.frame", "salt.utils.msgpack", "salt.exceptions.SaltReqTimeoutError", "salt.exceptions.SaltDeserializationError", "zmq", "salt.utils.immutabletypes", "collections.abc", "salt.utils.data.CaseInsensitiveDict", "salt.defaults._Constant", "logging", "salt.utils.stringutils", "datetime", "gc"], "function_names": ["package", "loads", "clear_socket", "socket", "send", "_set_tcp_keepalive", "__init__", "unpackage", "dump", "verylong_encoder", "format_payload", "load", "dumps", "send_auto", "destroy", "__del__", "ext_type_decoder", "ext_type_encoder"], "function_calls": ["dict", "pow", "enumerate", "list", "package", "SaltDeserializationError", "type", "set", "verylong_encoder", "SaltReqTimeoutError", "loads", "staticmethod", "str", "dumps", "tuple", "isinstance", "hasattr", "_Constant", "id"], "class_names": ["SREQ", "Serial"], "class_method_calls": ["zmq.POLLIN", "fn_.close", "zmq.LINGER", "collections.abc", "fn_.read", "immutabletypes.ImmutableSet", "self.linger", "self.poller", "self.id_", "log.critical", "self.send", "gc.disable", "self.destroy", "self.context", "zmq.RECONNECT_IVL_MAX", "self._set_tcp_keepalive", "log.debug", "zmq.Poller", "zmq.TCP_KEEPALIVE", "payload.get", "datetime.date", "obj.name", "log.trace", "self.opts", "context.add", "socket.closed", "zmq.REQ", "zmq.TCP_KEEPALIVE_INTVL", "obj.strftime", "self._socket", "log.info", "immutabletypes.ImmutableDict", "zmq.IPV6", "loads_kwargs.pop", "self.clear_socket", "salt.transport", "zmq.Context", "socket.close", "immutabletypes.ImmutableList", "self.socket", "logging.getLogger", "zmq.IPV4ONLY", "obj.copy", "zmq.TCP_KEEPALIVE_CNT", "gc.enable", "zmq.IDENTITY", "socket.setsockopt", "obj.value", "fn_.write", "salt.utils", "datetime.datetime", "self.master", "zmq.TCP_KEEPALIVE_IDLE"]}, "azureblob.py": {"libraries": ["time", "os", "copy.deepcopy", "salt.utils.hashutils", "logging", "salt.utils.files", "azure.storage.blob.BlobServiceClient", "salt.pillar.Pillar", "pickle"], "function_names": ["_find_file_meta", "_find_files", "_get_cached_file_name", "_get_file_from_blob", "_get_cache_dir", "_get_containers_cache_filename", "ext_pillar", "_refresh_containers_cache_file", "__virtual__", "_read_containers_cache_file", "_walk_blobs", "_init"], "function_calls": ["_find_file_meta", "_find_files", "next", "_get_cached_file_name", "_get_file_from_blob", "deepcopy", "_get_cache_dir", "_get_containers_cache_filename", "_refresh_containers_cache_file", "Pillar", "_read_containers_cache_file", "dict", "_walk_blobs", "filter", "list", "_init"], "class_names": [], "class_method_calls": ["time.time", "os.makedirs", "container_client.walk_blobs", "k.endswith", "blob_service_client.get_container_client", "metadata.items", "str.isalnum", "outfile.write", "log.debug", "blob.name", "log.error", "container_client.get_blob_client", "log.info", "pickle.dump", "blob_client.download_blob", "logging.getLogger", "BlobServiceClient.from_connection_string", "os.path", "pickle.load", "salt.utils", "os.remove", "pil.compile_pillar"]}, "cmd_json.py": {"libraries": ["logging", "salt.utils.json"], "function_names": ["ext_pillar"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger", "command.replace", "log.critical"]}, "cmd_yaml.py": {"libraries": ["logging", "salt.utils.yaml"], "function_names": ["ext_pillar"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger", "command.replace", "log.critical"]}, "cmd_yamlex.py": {"libraries": ["logging", "salt.serializers.yamlex.deserialize"], "function_names": ["ext_pillar"], "function_calls": ["deserialize"], "class_names": [], "class_method_calls": ["logging.getLogger", "command.replace", "log.critical"]}, "cobbler.py": {"libraries": ["logging", "xmlrpc.client"], "function_names": ["top"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "xmlrpc.client", "server.login", "server.get_blended_data", "log.exception", "log.info"]}, "confidant.py": {"libraries": ["logging", "confidant.client", "copy", "confidant.formatter"], "function_names": ["__virtual__", "get"], "function_calls": [], "class_names": [], "class_method_calls": ["client.get_service", "logging.getLogger", "copy.deepcopy", "confidant.formatter", "log.debug", "ret.get", "profile_data.get", "confidant.client"]}, "consul_pillar.py": {"libraries": ["salt.utils.dictupdate.update", "consul", "salt.utils.yaml", "salt.exceptions.CommandExecutionError", "re", "logging", "salt.utils.minions"], "function_names": ["pillar_format", "ext_pillar", "consul_fetch", "__virtual__", "fetch_tree", "get_conn", "_resolve_datacenter"], "function_calls": ["len", "pillar_format", "hasattr", "repr", "sorted", "dict_merge", "reversed", "consul_fetch", "fetch_tree", "get_conn", "_resolve_datacenter", "CommandExecutionError", "enumerate"], "class_names": [], "class_method_calls": ["opts_merged.update", "profile_re.search", "has_children.search", "expand_keys_re.search", "opts_pillar.get", "dc.items", "re.match", "path.rstrip", "match.group", "pillar_root_re.search", "temp.replace", "key.startswith", "log.debug", "re.compile", "match.groupdict", "opts_merged.get", "params.pop", "params.get", "consul.__version__", "log.error", "opts.get", "checker.check_minions", "keys.pop", "re.sub", "target.format", "keys.reverse", "re.escape", "logging.getLogger", "target_re.search", "re.IGNORECASE", "consul.Consul", "client.kv", "salt.utils", "key.split", "root_re.search"]}, "csvpillar.py": {"libraries": ["csv", "salt.utils.files"], "function_names": ["__virtual__", "ext_pillar"], "function_calls": [], "class_names": [], "class_method_calls": ["csv.DictReader", "salt.utils"]}, "digicert.py": {"libraries": ["salt.syspaths", "logging", "salt.cache"], "function_names": ["__virtual__", "ext_pillar"], "function_calls": [], "class_names": [], "class_method_calls": ["syspaths.CACHE_DIR", "salt.cache", "logging.getLogger", "cache.fetch"]}, "django_orm.py": {"libraries": ["os", "salt.exceptions", "logging", "sys", "virtualenv", "salt.utils.stringutils", "subprocess", "django.db.models.loading.get_model"], "function_names": ["__virtual__", "ext_pillar"], "function_calls": ["get_model"], "class_names": [], "class_method_calls": ["os.environ", "model_orm.__name__", "logging.getLogger", "sys.path", "log.error", "salt.exceptions", "model_orm.objects", "proc.stdout", "os.path", "value.rstrip", "subprocess.Popen", "django_app.items", "salt.utils", "virtualenv.path_locations", "subprocess.PIPE", "log.debug", "models.items", "proj_app.rpartition"]}, "ec2_pillar.py": {"libraries": ["boto.utils", "salt.utils.versions.Version", "re", "logging", "boto.ec2", "boto.exception"], "function_names": ["__virtual__", "ext_pillar", "_get_instance_info"], "function_calls": ["len", "Version", "enumerate", "_get_instance_info", "isinstance"], "class_names": [], "class_method_calls": ["logging.WARNING", "boto.utils", "__grains__.get", "conn.get_only_instances", "re.match", "re.search", "minion_id.split", "log.debug", "boto.exception", "myself.keys", "log.error", "inst_data.state", "instance.tags", "log.info", "find_filter.update", "boto.ec2", "logging.getLogger", "active_inst.append", "boto.__version__"]}, "etcd_pillar.py": {"libraries": ["logging", "salt.utils.etcd_util"], "function_names": ["__virtual__", "ext_pillar"], "function_calls": ["len"], "class_names": [], "class_method_calls": ["salt.utils", "log.error", "logging.getLogger", "conf.split"]}, "extra_minion_data_in_pillar.py": {"libraries": ["logging"], "function_names": ["__virtual__", "ext_pillar", "get_subtree"], "function_calls": ["get_subtree"], "class_names": [], "class_method_calls": ["data.update", "log.trace", "key.split", "logging.getLogger"]}, "file_tree.py": {"libraries": ["salt.utils.stringio", "os", "salt.loader", "salt.utils.path", "salt.template", "salt.utils.dictupdate", "logging", "fnmatch", "salt.utils.stringutils", "salt.utils.files", "salt.utils.minions"], "function_names": ["_construct_pillar", "_on_walk_error", "ext_pillar", "_ext_pillar", "_check_newline"], "function_calls": ["len", "_construct_pillar", "str", "_ext_pillar", "_check_newline", "isinstance"], "class_names": [], "class_method_calls": ["fhr.read", "salt.loader", "path_parts.insert", "os.listdir", "salt.template", "__opts__.get", "salt.utils", "exc.strerror", "contents.endswith", "err.strerror", "data.getvalue", "log.debug", "log.error", "ckminions.check_minions", "env_dirs.append", "fnmatch.fnmatch", "logging.getLogger", "err.filename", "os.path", "path_parts.pop"]}, "foreman.py": {"libraries": ["logging", "requests"], "function_names": ["__virtual__", "ext_pillar"], "function_calls": ["str", "dict"], "class_names": [], "class_method_calls": ["requests.get", "logging.getLogger", "log.error", "parameters.update", "log.exception", "log.info", "resp.json", "log.debug"]}, "git_pillar.py": {"libraries": ["logging", "salt.exceptions.SaltRunnerError", "salt.pillar.git_pillar", "salt.utils.gitfs"], "function_names": ["update"], "function_calls": ["next", "SaltRunnerError", "iter", "getattr"], "class_names": [], "class_method_calls": ["remote.url", "pillar.remotes", "logging.getLogger", "remote.id", "salt.pillar", "remote.fetch", "__opts__.get", "log.error", "remote.branch", "logging.DEBUG", "salt.utils", "remote.clear_lock"]}, "hg_pillar.py": {"libraries": ["hglib", "hashlib", "os", "salt.pillar", "salt.config.DEFAULT_HASH_TYPE", "logging", "salt.utils.stringutils", "copy"], "function_names": ["__enter__", "close", "ext_pillar", "__init__", "update", "pull", "__exit__", "__virtual__"], "function_calls": ["getattr", "Repo", "any", "hash_type"], "class_names": ["Repo"], "class_method_calls": ["hglib.open", "self.repo", "logging.getLogger", "salt.pillar", "copy.deepcopy", "self.working_dir", "log.error", "__opts__.get", "pil.compile_pillar", "self.close", "salt.utils", "os.path", "repo.pull", "repo.working_dir", "hglib.clone", "log.debug", "self.repo_uri", "repo.update"]}, "hiera.py": {"libraries": ["salt.utils.path", "logging", "salt.utils.yaml"], "function_names": ["__virtual__", "ext_pillar"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["salt.utils", "log.critical", "logging.getLogger", "__grains__.items"]}, "http_json.py": {"libraries": ["logging", "re", "urllib.parse"], "function_names": ["__virtual__", "ext_pillar"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["logging.getLogger", "match.group", "log.error", "urllib.parse", "re.sub", "re.finditer", "log.debug", "url.replace"]}, "http_yaml.py": {"libraries": ["logging", "re", "urllib.parse"], "function_names": ["__virtual__", "ext_pillar"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["logging.getLogger", "match.group", "log.error", "urllib.parse", "re.sub", "re.finditer", "log.debug", "url.replace"]}, "makostack.py": {"libraries": ["os", "mako.exceptions", "functools", "salt.utils.yaml", "salt.utils.data", "logging", "mako.lookup.TemplateLookup"], "function_names": ["_process_stack_cfg", "ext_pillar", "_merge_dict", "_cleanup", "_merge_list", "_parse_top_cfg", "__virtual__"], "function_calls": ["Exception", "TemplateLookup", "_process_stack_cfg", "type", "_merge_dict", "_cleanup", "_parse_top_cfg", "_merge_list", "list", "isinstance"], "class_names": [], "class_method_calls": ["obj.items", "stack.pop", "kwargs.items", "namespace.split", "log.warning", "lookup.get_template", "content.splitlines", "exceptions.text_error_template", "cfg.split", "matchs.get", "path.startswith", "traverse.keys", "log.debug", "exceptions.TopLevelLookupException", "log.info", "logging.getLogger", "obj.pop", "os.path", "salt.utils", "matcher.split", "functools.partial"]}, "mongo.py": {"libraries": ["pymongo", "logging", "re"], "function_names": ["__virtual__", "top"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "log.info", "pymongo.MongoClient", "re.sub", "mdb.authenticate", "log.debug"]}, "nodegroups.py": {"libraries": ["salt.utils.minions.CkMinions"], "function_names": ["ext_pillar"], "function_calls": ["CkMinions"], "class_names": [], "class_method_calls": ["ckminions.check_minions", "nodegroups_minion_is_in.append", "all_nodegroups.keys"]}, "pepa.py": {"libraries": ["glob", "pygments", "requests", "os", "argparse", "salt.utils.yaml", "pygments.lexers", "re", "colorlog", "logging", "sys", "getpass", "salt.utils.files", "pygments.formatters", "cerberus", "jinja2"], "function_names": ["ext_pillar", "_print_result", "__virtual__", "validate", "key_value_to_tree"], "function_calls": ["len", "next", "ext_pillar", "_print_result", "type", "key_value_to_tree", "iter", "RuntimeError", "validate", "print", "list", "enumerate", "input", "isinstance"], "class_names": [], "class_method_calls": ["logging.WARNING", "flatkey.split", "requests.get", "getpass.getpass", "fhr.read", "entry.lower", "jinja2.UndefinedError", "output.copy", "cerberus.Validator", "t.setdefault", "jinja2.Template", "__pillar__.copy", "salt.utils", "pygments.highlight", "args.username", "log.warning", "log.critical", "args.grains", "args.pillar", "args.query_api", "stream.setFormatter", "pillar.copy", "args.no_color", "argparse.ArgumentParser", "tree.copy", "template.render", "data.items", "args.url", "log.setLevel", "e.keys", "log.debug", "pygments.formatters", "stream.setLevel", "args.debug", "val.errors", "pygments.lexers", "glob.glob", "sys.exit", "logging.Formatter", "requests.post", "request.ok", "key.rsplit", "parser.add_argument", "log.error", "__grains__.update", "log.info", "args.password", "__pillar__.update", "logging.StreamHandler", "re.sub", "colorlog.ColoredFormatter", "val.validate", "log.addHandler", "request.text", "key.rfind", "request.json", "logging.getLogger", "s.items", "args.config", "logging.DEBUG", "os.path", "all_schemas.update", "__grains__.copy", "args.hostname", "pepa_schemas.append", "parser.parse_args", "args.validate", "__opts__.update"]}, "pillar_ldap.py": {"libraries": ["ldap", "os", "salt.utils.yaml", "salt.utils.data", "logging", "salt.exceptions.SaltInvocationError", "jinja2"], "function_names": ["ext_pillar", "_do_search", "__virtual__", "_render_template", "_result_to_dict", "_config"], "function_calls": ["sorted", "SaltInvocationError", "_do_search", "_render_template", "_result_to_dict", "_config", "isinstance"], "class_names": [], "class_method_calls": ["record.get", "result.get", "logging.getLogger", "jinja2.exceptions", "item.split", "jinja2.Environment", "env.get_template", "os.path", "template.render", "log.warning", "salt.utils", "log.debug", "jinja2.FileSystemLoader", "log.critical"]}, "reclass_adapter.py": {"libraries": ["reclass.adapters.salt.top", "salt.utils.reclass.filter_out_source_path_option", "sys", "salt.exceptions.SaltInvocationError", "reclass.errors.ReclassException", "salt.utils.reclass.set_inventory_base_uri_default", "reclass", "salt.utils.reclass.prepend_reclass_source_path"], "function_names": ["__virtual__", "top"], "function_calls": ["filter_out_source_path_option", "prepend_reclass_source_path", "str", "__virtual__", "reclass_top", "SaltInvocationError", "set_inventory_base_uri_default"], "class_names": [], "class_method_calls": ["sys.path", "__opts__.get"]}, "rethinkdb_pillar.py": {"libraries": ["logging", "rethinkdb"], "function_names": ["__virtual__", "ext_pillar"], "function_calls": ["len"], "class_names": [], "class_method_calls": ["logging.getLogger", "rethinkdb.connect", "rethinkdb.table", "log.error", "data.items", "conn.close", "log.debug", "conn.is_open"]}, "saltclass.py": {"libraries": ["glob", "os", "salt.utils.yaml", "salt.utils.path", "re", "jinja2.Environment", "logging", "jinja2.FileSystemLoader"], "function_names": ["find_and_process_re", "expand_classes_in_order", "dict_search_and_replace", "match_class_glob", "dict_merge", "render_yaml", "find_value_to_expand", "get_class_paths", "get_env_from_dict", "expand_variables", "get_class", "get_pillars", "expand_classes_glob", "get_tops", "expanded_dict_from_minion", "render_jinja", "get_class_from_file"], "function_calls": ["expand_classes_in_order", "expand_variables", "dict_merge", "find_value_to_expand", "get_class", "find_and_process_re", "dict_search_and_replace", "match_class_glob", "str", "get_class_paths", "expand_classes_glob", "expanded_dict_from_minion", "FileSystemLoader", "isinstance", "len", "get_env_from_dict", "render_yaml", "Environment", "render_jinja", "get_class_from_file"], "class_names": [], "class_method_calls": ["tmp.append", "re_v.group", "all_classes.extend", "j_env.get_template", "expanded.append", "salt.utils", "a.items", "log.warning", "_str.replace", "a.get", "a.copy", "os.sep", "v.replace", "l_files.append", "ord_expanded_states.extend", "re_str.startswith", "_class.replace", "seen_classes.append", "j_env.globals", "ord_expanded_classes.append", "glob.glob", "classes.append", "re_str.lstrip", "_file.endswith", "_file.replace", "d.items", "logging.getLogger", "matches.extend", "expanded_classes.append", "classes_to_expand.index", "os.path", "pillars_dict.update", "re.finditer"]}, "sql_base.py": {"libraries": ["logging", "salt.utils.dictupdate.update", "salt.utils.odict.OrderedDict", "abc"], "function_names": ["process_results", "_db_name", "__init__", "_get_cursor", "__virtual__", "process_fields", "enter_root", "extract_queries", "fetch"], "function_calls": ["len", "OrderedDict", "range", "int", "update", "type", "id", "list", "isinstance"], "class_names": ["SqlBaseExtPillar"], "class_method_calls": ["kwargs.keys", "self.field_names", "qbuffer.extend", "cursor.fetchall", "self.ignore_null", "cursor.execute", "self.as_list", "self.as_json", "self.with_lists", "self.extract_queries", "self.enter_root", "log.debug", "self.result", "ks.reverse", "self.process_fields", "self.process_results", "log.info", "self.focus", "self._get_cursor", "abc.ABCMeta", "logging.getLogger", "self.num_fields", "defaults.update", "self.depth", "self._db_name", "cursor.description", "klist.sort", "listify_dicts.keys", "abc.abstractmethod"]}, "sqlcipher.py": {"libraries": ["logging", "salt.pillar.sql_base.SqlBaseExtPillar", "contextlib.contextmanager", "pysqlcipher.dbapi2"], "function_names": ["_db_name", "ext_pillar", "_get_cursor", "__virtual__", "_get_options"], "function_calls": ["SQLCipherExtPillar", "float"], "class_names": ["SQLCipherExtPillar"], "class_method_calls": ["sqlcipher.connect", "sqlcipher.Error", "logging.getLogger", "self._get_options", "conn.execute", "__opts__.get", "_options.get", "log.exception", "err.args", "conn.cursor", "conn.close", "log.debug"]}, "stack.py": {"libraries": ["glob", "posixpath", "os", "functools", "salt.utils.yaml", "jinja2.Environment", "salt.utils.data", "logging", "salt.utils.jinja", "jinja2.FileSystemLoader"], "function_names": ["_to_unix_slashes", "_process_stack_cfg", "ext_pillar", "_merge_dict", "_cleanup", "_merge_list", "_parse_stack_cfg"], "function_calls": ["Exception", "_to_unix_slashes", "_process_stack_cfg", "sorted", "type", "_merge_dict", "_cleanup", "_merge_list", "FileSystemLoader", "Environment", "_parse_stack_cfg", "list", "isinstance"], "class_names": [], "class_method_calls": ["obj.items", "stack.pop", "kwargs.items", "cfg.replace", "jenv.globals", "content.splitlines", "item.strip", "os.sep", "matchs.get", "log.debug", "traverse.keys", "posixpath.join", "glob.glob", "matchs.items", "jenv.get_template", "log.info", "path.split", "logging.getLogger", "obj.pop", "os.path", "salt.utils", "matcher.split", "functools.partial"]}, "svn_pillar.py": {"libraries": ["hashlib", "os", "copy.deepcopy", "pysvn", "logging", "salt.pillar.Pillar"], "function_names": ["_extract_key_val", "ext_pillar", "update", "__init__", "pillar_dir", "__virtual__"], "function_calls": ["_extract_key_val", "deepcopy", "any", "Pillar", "SvnPillar"], "class_names": ["SvnPillar"], "class_method_calls": ["self.branch", "__opts__.get", "kv.split", "delimiter.join", "os.makedirs", "log.warning", "pysvn.ClientError", "hashlib.md5", "self.repo_dir", "log.debug", "pysvn.Client", "svnpil.update", "log.error", "self.root", "repo_string.strip", "CLIENT.checkout", "svnpil.pillar_dir", "logging.getLogger", "CLIENT.update", "os.path", "self.repo_location", "pil.compile_pillar"]}, "varstack_pillar.py": {"libraries": ["varstack"], "function_names": ["__virtual__", "ext_pillar"], "function_calls": [], "class_names": [], "class_method_calls": ["varstack.Varstack", "vs.evaluate"]}, "venafi.py": {"libraries": ["salt.syspaths", "logging", "salt.cache"], "function_names": ["__virtual__", "ext_pillar"], "function_calls": [], "class_names": [], "class_method_calls": ["cache.list", "logging.getLogger", "syspaths.CACHE_DIR", "salt.cache", "cache.fetch"]}, "virtkey.py": {"libraries": ["salt.utils.virt", "logging"], "function_names": ["ext_pillar"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "vk.accept", "logging.getLogger"]}, "vmware_pillar.py": {"libraries": ["salt.utils.vmware", "pyVmomi.vim", "salt.utils.dictupdate", "logging", "datetime", "pyVim.connect.Disconnect"], "function_names": ["ext_pillar", "_recurse_config_to_dict", "_serializer", "__virtual__", "_crawl_attribute"], "function_calls": ["next", "hasattr", "getattr", "str", "type", "_recurse_config_to_dict", "_serializer", "iter", "_crawl_attribute", "Disconnect", "isinstance"], "class_names": [], "class_method_calls": ["t_data.__dict__", "customValue.key", "vim.VirtualMachine", "log.warning", "data.customValue", "property_types.append", "log.debug", "t_list.append", "data.availableField", "kwargs.get", "log.error", "obj.utcoffset", "customValue.value", "availableField.name", "logging.getLogger", "dictupdate.update", "availableField.key", "t_data.items", "salt.utils", "datetime.datetime"]}, "win.py": {"libraries": ["collections.OrderedDict", "win32con", "time", "win32security", "salt.utils.odict.OrderedDict", "collections", "functools.cmp_to_key", "re", "salt.utils.json", "logging", "locale", "salt.utils.versions.Version", "win32api", "pywintypes", "os.path", "sys", "datetime", "winerror", "platform", "timeit", "win32process"], "function_names": ["__one_equals_true", "__len__", "__init__", "__squid_to_guid", "run", "pkg_version_list", "squid", "package_code", "next", "__software_to_pkg_id", "get_product_value", "__iter__", "__getitem__", "upgrade_code", "get_install_value", "__version_capture_slp", "__get_software_details", "version_binary", "pkg_version_latest", "is_install_true", "pkg_version_oldest", "__sid_to_username", "version_only", "install_time", "registry_path_text", "__oldest_to_latest_version", "__latest_to_oldest_version", "__reg_query_value", "registry_path", "get", "guid", "list_patches", "__main", "__collect_software_info", "__next__", "data"], "function_calls": ["RegSoftwareInfo", "sorted", "RuntimeError", "Version", "list", "OrderedDict", "next", "int", "WinSoftware", "KeyError", "cmp_to_key", "zip", "ImportError", "range", "str", "ValueError", "isinstance", "len", "hasattr", "getattr", "__main", "print"], "class_names": ["RegSoftwareInfo", "WinSoftware"], "class_method_calls": ["self.__reg_products_handle", "self.__pkg_obj", "self.__sid_to_username", "pkg_data.get", "self.__reg_32bit_access", "reg_soft_info.list_patches", "win32security.TranslateName", "self.__reg_32bit", "sys.stderr", "exc.strerror", "self.__reg_software", "self.get_install_value", "pywintypes.error", "win32api.NameUserPrincipal", "timeit.timeit", "exc.winerror", "win32api.RegCloseKey", "win32security.GetBinarySid", "re.search", "self.__reg_uninstall_path", "win32con.REG_MULTI_SZ", "domain.lower", "win32con.REG_DWORD_BIG_ENDIAN", "self.__uninstall_search_list", "win32process.IsWow64Process", "re.compile", "reg_soft_info.get_product_value", "sys.exit", "logging.Formatter", "time.mktime", "publisher.lower", "reg_soft_info.get_install_value", "reg_soft_info.is_install_true", "LOG_CONSOLE.setFormatter", "self.__version_pattern", "self.__reg_patches_path", "logging.DEBUG", "self.__products_search_list", "salt.utils", "self.__collect_software_info", "self.__upgrade_code_have_scan", "win32con.KEY_WOW64_64KEY", "winerror.ERROR_NONE_MAPPED", "win32con.HKEY_USERS", "log.warning", "win32api.RegQueryValueEx", "self.__version_only", "re.match", "self.__squid_pattern", "winerror.ERROR_NO_SUCH_DOMAIN", "self.__reg_hive", "self.__reg_types", "self.__sid_pattern", "version_data.update", "log.error", "win32api.RegEnumKey", "squid_match.group", "re.UNICODE", "self.__use_32bit_lookup", "mod_win_time.utctimetuple", "self.__reg_query_value", "re.IGNORECASE", "self.__reg_key_guid", "win32api.RegOpenKeyEx", "default_value.startswith", "os.path", "self.__reg_uninstall_handle", "name.lower", "name.replace", "self.__patch_list", "self.__reg_products_path", "self.__software_to_pkg_id", "winerror.ERROR_INVALID_DOMAINNAME", "self.__one_equals_true", "guid_match.group", "self.pkg_version_list", "self.get_product_value", "self.__iter_list", "locale.windows_locale", "log.setLevel", "key_software.endswith", "win32con.REG_BINARY", "reg_soft_info.upgrade_code", "win32api.NameSamCompatible", "self.__guid_pattern", "logging.StreamHandler", "reg_soft_info.install_time", "win32security.LookupAccountSid", "data.update", "win32con.REG_DWORD", "ret.append", "win32api.RegQueryInfoKeyW", "data.setdefault", "date_object.timetuple", "reg_soft_info.package_code", "win32con.REG_EXPAND_SZ", "reg_soft_info.version_binary", "win32con.KEY_WOW64_32KEY", "self.__reg_upgradecode_path", "sys.argv", "self.__version_capture_slp", "winerror.ERROR_FILE_NOT_FOUND", "publisher.replace", "self.__pkg_cnt", "self.__whitespace_pattern", "win32api.RegEnumValue", "sid_all.append", "item_value.strip", "platform.architecture", "self.__squid", "collections.deque", "win32api.ExpandEnvironmentStrings", "log.debug", "win32con.KEY_READ", "self.__upgrade_codes", "win32con.HKEY_LOCAL_MACHINE", "win32con.REG_QWORD", "self.__get_software_details", "self.__oldest_to_latest_version", "pkg_list.data", "win32api.RegEnumKeyEx", "log.addHandler", "self.__squid_to_guid", "self.__mod_time1970", "logging.getLogger", "win32con.REG_SZ", "datetime.datetime", "win32api.RegQueryInfoKey"]}, "dummy.py": {"libraries": ["os", "contextlib.contextmanager", "salt.utils.msgpack", "salt.exceptions.CommandExecutionError", "logging", "pprint", "salt.utils.files", "salt.exceptions.MinionError", "copy"], "function_names": ["initialized", "package_status", "shutdown", "grains_refresh", "_save_state", "_initial_state", "service_restart", "_load_state", "package_install", "__virtual__", "grains", "ping", "service_start", "service_status", "_loaded_state", "fns", "service_stop", "package_remove", "uptodate", "test_from_state", "init", "service_list", "package_list", "upgrade"], "function_calls": ["_load_state", "_save_state", "str", "float", "grains", "_loaded_state", "CommandExecutionError", "MinionError", "_initial_state", "list"], "class_names": [], "class_method_calls": ["os.unlink", "pprint.pformat", "logging.getLogger", "kwargs.get", "copy.deepcopy", "state.get", "pck.read", "pck.write", "log.exception", "os.path", "state.pop", "log.warning", "salt.utils", "log.debug"]}, "netmiko_px.py": {"libraries": ["netmiko.NetMikoAuthenticationException", "time", "netmiko.NetMikoTimeoutException", "netmiko.ConnectHandler", "logging", "salt.utils.args", "netmiko.ssh_exception.NetMikoTimeoutException", "contextlib", "netmiko.ssh_exception.NetMikoAuthenticationException"], "function_names": ["conn", "call", "initialized", "shutdown", "make_con", "init", "__virtual__", "args", "ping", "connection", "alive"], "function_calls": ["Exception", "call", "initialized", "getattr", "make_con", "ping", "connection", "ConnectHandler"], "class_names": [], "class_method_calls": ["proxy_dict.get", "logging.getLogger", "contextlib.contextmanager", "time.time", "args.copy", "log.error", "opts.get", "con.remote_conn", "con.disconnect", "netmiko_connection_args.pop", "log.warning", "salt.utils", "log.debug", "proxy_dict.copy"]}, "pgjsonb_queue.py": {"libraries": ["psycopg2", "contextlib.contextmanager", "salt.utils.json", "logging", "sys", "salt.exceptions.SaltInvocationError", "salt.exceptions.SaltMasterError"], "function_names": ["_list_tables", "_list_items", "delete", "pop", "list_length", "_queue_exists", "_conn", "__virtual__", "insert", "_create_table", "list_items", "handle_queue_creation", "list_queues"], "function_calls": ["len", "_list_tables", "_list_items", "int", "str", "_queue_exists", "SaltMasterError", "_conn", "_create_table", "SaltInvocationError", "handle_queue_creation", "list_queues", "isinstance"], "class_names": [], "class_method_calls": ["cur.fetchall", "defaults.items", "psycopg2.DatabaseError", "logging.getLogger", "cur.execute", "psycopg2.IntegrityError", "__opts__.get", "psycopg2.OperationalError", "salt.utils", "sys.stderr", "cur.executemany", "err.args", "conn.cursor", "conn.close", "psycopg2.connect", "log.debug", "cursor.execute"]}, "sqlite_queue.py": {"libraries": ["glob", "os", "re", "salt.utils.json", "sqlite3", "logging", "salt.exceptions.SaltInvocationError"], "function_names": ["_list_tables", "_list_items", "delete", "pop", "list_length", "_list_queues", "_conn", "__virtual__", "insert", "_quote_escape", "_create_table", "list_items", "list_queues"], "function_calls": ["_list_tables", "len", "_list_items", "int", "_list_queues", "_conn", "_quote_escape", "_create_table", "SaltInvocationError", "isinstance"], "class_names": [], "class_method_calls": ["con.cursor", "cur.fetchall", "logging.getLogger", "glob.glob", "cur.execute", "sqlite3.IntegrityError", "salt.utils", "os.path", "log.info", "cur.executemany", "con.commit", "re.compile", "newitems.append", "log.debug", "sqlite3.connect", "rex_sqlquote.sub", "re.M"]}, "aws_kms.py": {"libraries": ["salt.utils.stringio", "salt.exceptions.SaltConfigurationError", "cryptography.fernet", "logging", "base64", "boto3", "botocore.exceptions"], "function_names": ["_decrypt_object", "_cfg", "_kms", "_api_decrypt", "_cfg_data_key", "render", "__virtual__", "_base64_plaintext_data_key", "_decrypt_ciphertext", "_session", "_plaintext_data_key"], "function_calls": ["_decrypt_object", "_kms", "_cfg", "getattr", "hasattr", "_api_decrypt", "str", "SaltConfigurationError", "_cfg_data_key", "root_cfg", "_base64_plaintext_data_key", "_decrypt_ciphertext", "_session", "_plaintext_data_key", "setattr", "enumerate", "isinstance"], "class_names": [], "class_method_calls": ["kms.decrypt", "logging.CRITICAL", "kms_cfg.get", "obj.items", "__opts__.get", "fernet.InvalidToken", "session.client", "cipher.encode", "fernet.Fernet", "plain_text.decode", "cipher.replace", "obj.getvalue", "log.debug", "botocore.exceptions", "__salt__.get", "kwargs.get", "log.info", "plaintext.encode", "orig_exc.response", "logging.getLogger", "boto3.Session", "base64.urlsafe_b64encode", "salt.utils"]}, "cheetah.py": {"libraries": ["Cheetah.Template.Template"], "function_names": ["render"], "function_calls": ["str", "Template", "isinstance"], "class_names": [], "class_method_calls": ["cheetah_data.find", "cheetah_data.read", "cheetah_data.startswith", "cheetah_data.strip"]}, "genshi.py": {"libraries": ["genshi.template.OldTextTemplate", "genshi.template.NewTextTemplate", "genshi.template.MarkupTemplate"], "function_names": ["render"], "function_calls": ["MarkupTemplate", "NewTextTemplate", "OldTextTemplate", "isinstance"], "class_names": [], "class_method_calls": ["tmpl.generate", "genshi_data.startswith", "genshi_data.strip", "genshi_data.read", "genshi_data.find"]}, "hjson.py": {"libraries": ["hjson"], "function_names": ["render"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["hjson_data.find", "hjson.loads", "hjson_data.read", "hjson_data.strip", "hjson_data.startswith"]}, "json.py": {"libraries": ["logging", "salt.utils.data", "salt.utils.stringutils", "json"], "function_names": ["loads", "find_json", "dump", "load", "dumps", "__split", "import_json"], "function_calls": ["__split", "__import__", "enumerate", "isinstance"], "class_names": [], "class_method_calls": ["log.trace", "json_module.loads", "json_module.dumps", "logging.getLogger", "json.JSONEncoder", "json_module.dump", "json.loads", "raw.splitlines", "salt.utils", "kwargs.pop"]}, "json5.py": {"libraries": ["json5", "logging"], "function_names": ["__virtual__", "render"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["json_data.read", "logging.getLogger", "json.loads", "json_data.startswith", "json_data.find", "json_data.strip"]}, "mako.py": {"libraries": ["os", "salt.fileclient", "salt.utils.url", "mako.lookup.TemplateCollection", "mako.lookup.TemplateLookup", "urllib.parse"], "function_names": ["cache_file", "__init__", "adjust_uri", "destroy", "file_client", "get_template"], "function_calls": ["len", "TemplateLookup", "ValueError"], "class_names": ["SaltMakoTemplateLookup"], "class_method_calls": ["self.opts", "self.lookup", "file_client.destroy", "salt.fileclient", "self.saltenv", "uri.startswith", "urllib.parse", "os.path", "self.pillar_rend", "self._file_client", "salt.utils", "self.cache", "self.cache_file", "self.file_client"]}, "msgpack.py": {"libraries": ["logging", "msgpack", "msgpack_pure"], "function_names": ["_sanitize_msgpack_unpack_kwargs", "__init__", "packb", "pack", "unpackb", "unpack", "_sanitize_msgpack_kwargs"], "function_calls": ["PackValueError", "hasattr", "_sanitize_msgpack_unpack_kwargs", "_exceptions", "_sanitize_msgpack_kwargs", "isinstance"], "class_names": ["PackValueError", "_exceptions", "Unpacker"], "class_method_calls": ["msgpack.unpackb", "msgpack.ExtType", "logging.getLogger", "msgpack.exceptions", "msgpack.version", "msgpack.packb", "msgpack.unpack", "msgpack.dumps", "msgpack.loads", "msgpack.Unpacker", "log.debug", "kwargs.pop", "msgpack.pack", "kwargs.setdefault", "msgpack.Packer"]}, "pass.py": {"libraries": ["salt.exceptions.SaltConfigurationError", "os", "salt.utils.path", "logging", "subprocess.Popen", "salt.exceptions.SaltRenderError", "subprocess.PIPE", "os.path.expanduser"], "function_names": ["_decrypt_object", "_get_pass_exec", "_fetch_secret", "render"], "function_calls": ["len", "_decrypt_object", "Popen", "str", "enumerate", "SaltConfigurationError", "_get_pass_exec", "SaltRenderError", "expanduser", "_fetch_secret", "isinstance"], "class_names": [], "class_method_calls": ["pass_error.decode", "os.environ", "logging.getLogger", "pass_path.strip", "obj.items", "pass_data.rstrip", "proc.communicate", "pass_path.startswith", "log.warning", "salt.utils", "log.debug", "proc.returncode"]}, "py.py": {"libraries": ["salt.exceptions.SaltRenderError", "salt.utils.templates", "os"], "function_names": ["render"], "function_calls": ["SaltRenderError"], "class_names": [], "class_method_calls": ["salt.utils", "os.path", "tmp_data.get"]}, "pydsl.py": {"libraries": ["uuid.uuid4", "pprint", "salt.utils.odict.OrderedDict", "salt.state.HighState"], "function_names": ["get_all_decls", "get_render_stack", "state", "__init__", "configure", "last_func", "_repr", "_generate_requsite_method", "__iter__", "__getattr__", "set", "reference", "load_highstate", "extend", "_remove_auto_require", "include", "__str__", "__call__", "to_highstate", "track_func", "req"], "function_calls": ["mod", "sorted", "dict", "StateDeclaration", "PyDslError", "list", "OrderedDict", "next", "_generate_requsite_method", "set", "StateModule", "str", "locals", "Options", "callable", "StateFunction", "isinstance", "len", "getattr", "reversed", "_uuid", "iter"], "class_names": ["Sls", "Options", "StateFunction", "StateModule", "StateDeclaration", "PyDslError"], "class_method_calls": ["self.rendered_sls", "pprint.pformat", "HIGHSTATE.merge_included_states", "x.items", "mod._state_id", "kws.pop", "self.options", "first.__name__", "ext._id", "self.require", "Sls.get_render_stack", "self.mod", "decl._repr", "self.name", "self._name", "self.configure", "slsmods.append", "args.append", "sls.decls", "last_func.mod", "self.get", "self._state_id", "decl.items", "m._func", "f.mod", "HIGHSTATE.top_matches", "last_f.mod", "self.state", "self.reference", "self.get_all_decls", "self.includes", "self.included_highstate", "sls.track_func", "m._name", "HIGHSTATE.get_top", "self.saltenv", "sls.last_func", "sls.get_all_decls", "self._repr", "self._id", "ext._repr", "self.decls", "modname.rsplit", "self.funcs", "self.args", "HighState.get_active", "decl._id", "sls.funcs", "kws.items", "m._repr", "HIGHSTATE.clean_duplicate_extends", "HIGHSTATE.render_state", "highstate.items", "args.remove", "self._mods", "self._func", "self.require_index", "self.extends", "sls.options", "kws.get", "result.items", "self.last_func"]}, "pyobjects.py": {"libraries": ["logging", "salt.utils.odict.OrderedDict", "inspect"], "function_names": ["make_extend", "__prepare__", "__init__", "attrs", "add", "make_state", "full_func", "__getattr__", "__set_attributes__", "__new__", "extend", "include", "__str__", "empty", "__exit__", "need_salt", "__call__", "__enter__", "push_requisite", "salt_data", "pop_requisite"], "function_calls": ["state", "DuplicateState", "super", "sorted", "StateExtend", "State", "enumerate", "list", "OrderedDict", "__wrapper__", "set", "setattr", "StateRequisite", "InvalidFunction", "isinstance", "hasattr", "getattr", "iter", "req"], "class_names": ["StateException", "DuplicateState", "MapMeta", "StateFactory", "InvalidFunction", "__wrapper__", "Registry", "StateExtend", "State", "Map", "SaltObject", "StateRequisite"], "class_method_calls": ["Registry.push_requisite", "Map.__salt__", "self.full_func", "kwargs.keys", "self.requisite", "Registry.extend", "cls.enabled", "self.name", "state.full_func", "cls.__set_attributes__", "self.id_", "cls.includes", "Registry.pop_requisite", "filt.__dict__", "self.module", "attrs.keys", "cls.priority", "self._salt", "self.valid_funcs", "match_info.append", "req.requisite", "cls.__ordered_attrs__", "grain_targets.add", "log.error", "self.kwargs", "cls.empty", "cls.__dict__", "state.kwargs", "Registry.add", "cls.states", "new_match_info.append", "attrs.update", "cls.merge", "cls.requisites", "logging.getLogger", "new_match_info.extend", "cls.extends", "c.__ordered_attrs__", "self.attrs", "inspect.isclass", "cls.add", "self.func", "type.__new__"]}, "stateconf.py": {"libraries": [], "function_names": ["_no_op"], "function_calls": ["dict"], "class_names": [], "class_method_calls": []}, "tomlmod.py": {"libraries": ["salt.serializers.SerializationError", "logging", "salt.serializers.DeserializationError", "toml"], "function_names": ["__virtual__", "serialize", "deserialize"], "function_calls": ["SerializationError", "DeserializationError", "isinstance"], "class_names": [], "class_method_calls": ["toml.dump", "logging.getLogger", "toml.loads", "stream_or_string.decode", "toml.dumps", "toml.load"]}, "wempy.py": {"libraries": ["salt.exceptions.SaltRenderError", "salt.utils.templates", "io"], "function_names": ["render"], "function_calls": ["SaltRenderError"], "class_names": [], "class_method_calls": ["salt.utils", "io.StringIO", "tmp_data.get"]}, "yamlex.py": {"libraries": ["salt.serializers.DeserializationError", "yaml.scanner.ScannerError", "salt.utils.aggregation.Sequence", "salt.serializers.SerializationError", "salt.utils.aggregation.aggregate", "salt.utils.aggregation.Map", "logging", "salt.utils.odict.OrderedDict", "datetime", "yaml.constructor.ConstructorError", "yaml.nodes.MappingNode", "copy", "yaml"], "function_names": ["construct_sls_str", "__str__", "deserialize", "merge_recursive", "construct_sls_int", "resolve_sls_tag", "compose_document", "construct_yaml_omap", "serialize", "construct_sls_reset", "__repr__", "represent_odict", "construct_sls_aggregate"], "function_calls": ["SLSMap", "hash", "getattr", "DeserializationError", "merge_recursive", "int", "type", "ConstructorError", "SerializationError", "serialize", "SLSString", "AggregatedMap", "AggregatedSequence", "aggregate", "list", "isinstance"], "class_names": ["SLSMap", "Dumper", "AggregatedMap", "SLSString", "AggregatedSequence", "Loader"], "class_method_calls": ["BaseLoader.compose_document", "node.value", "yaml.nodes", "Loader.construct_yaml_omap", "self.resolve", "Dumper.add_multi_representer", "Loader.construct_yaml_bool", "Loader.construct_yaml_float", "log.warning", "yaml.dumper", "Loader.construct_yaml_pairs", "self.represent_mapping", "yaml.load", "key_node.tag", "Loader.add_constructor", "Dumper.represent_int", "node.id", "Loader.construct_yaml_timestamp", "copy.copy", "data.items", "self.construct_scalar", "Loader.construct_yaml_binary", "datetime.date", "Loader.construct_sls_str", "Dumper.represent_str", "node.tag", "Dumper.represent_bool", "key_node.start_mark", "Dumper.represent_binary", "response.endswith", "self.resolve_sls_tag", "Loader.construct_yaml_set", "self.flatten_mapping", "self.construct_object", "log.exception", "node.start_mark", "Dumper.represent_date", "Loader.construct_yaml_seq", "Dumper.represent_float", "yaml.SafeLoader", "Loader.add_multi_constructor", "Loader.construct_sls_aggregate", "yaml.SafeDumper", "error.problem", "Loader.construct_sls_int", "Dumper.represent_none", "logging.getLogger", "Dumper.represent_undefined", "value_node.tag", "self.DEFAULT_MAPPING_TAG", "Loader.construct_yaml_map", "ERROR_MAP.get", "Dumper.represent_set", "Dumper.represent_list", "Loader.construct_sls_reset", "options.setdefault", "Dumper.represent_datetime", "yaml.dump", "self.DEFAULT_SEQUENCE_TAG", "error.problem_mark", "Loader.construct_yaml_null", "datetime.datetime", "Dumper.represent_odict"]}, "appoptics_return.py": {"libraries": ["logging", "appoptics_metrics", "salt.returners", "salt.utils.jid"], "function_names": ["returner", "_state_metrics", "_get_appoptics", "__virtual__", "_get_options", "_calculate_runtimes"], "function_calls": ["_state_metrics", "_get_appoptics", "str", "sorted", "set", "_get_options", "_calculate_runtimes", "isinstance"], "class_names": [], "class_method_calls": ["appoptics_metrics.sanitize_metric_name", "q.add", "states_to_report.append", "logging.getLogger", "salt.returners", "states.items", "q.submit", "appoptics_conn.new_queue", "_options.get", "log.info", "appoptics_metrics.connect", "log.debug", "options.get"]}, "carbon_return.py": {"libraries": ["time", "socket", "contextlib.contextmanager", "salt.returners", "logging", "collections.abc.Mapping", "struct", "salt.utils.jid", "pickle"], "function_names": ["event_return", "returner", "prep_jid", "_send_textmetrics", "_send_picklemetrics", "__virtual__", "_get_options", "_walk", "_send", "_carbon"], "function_calls": ["len", "int", "map", "float", "_get_options", "handler", "_walk", "_send", "_carbon", "isinstance"], "class_names": [], "class_method_calls": ["time.time", "socket.SHUT_RDWR", "value.items", "sock.send", "metrics.append", "struct.pack", "socket.socket", "log.debug", "carbon_sock.close", "log.trace", "carbon_sock.shutdown", "metric_base.startswith", "salt.returners", "log.error", "socket.AF_INET", "opts.get", "socket.IPPROTO_TCP", "log.info", "carbon_sock.connect", "logging.getLogger", "pickle.dumps", "socket.SOCK_STREAM", "salt.utils"]}, "cassandra_cql_return.py": {"libraries": ["time", "cassandra.connection.ConnectionException", "cassandra.auth.PlainTextAuthProvider", "salt.exceptions.CommandExecutionError", "cassandra.cluster.Cluster", "cassandra.query.dict_factory", "salt.returners", "salt.exceptions", "cassandra.cluster.NoHostAvailable", "salt.utils.json", "uuid", "logging", "cassandra.connection.ConnectionShutdown", "salt.utils.jid"], "function_names": ["returner", "save_load", "event_return", "get_jids", "prep_jid", "get_fun", "get_minions", "get_jid", "get_load", "__virtual__", "save_minions"], "function_calls": ["str", "tuple", "int"], "class_names": [], "class_method_calls": ["event.get", "row.get", "logging.getLogger", "time.time", "ret.append", "ret.get", "salt.utils", "uuid.uuid1", "log.critical"]}, "couchbase_return.py": {"libraries": ["couchbase", "salt.utils.json", "logging", "salt.utils.jid", "salt.utils.minions"], "function_names": ["_get_connection", "prep_jid", "returner", "save_load", "get_jids", "_json_dumps", "get_jid", "get_load", "__virtual__", "_get_options", "_verify_views", "save_minions", "_get_ttl", "_format_job_instance", "_format_jid_instance"], "function_calls": ["_get_connection", "prep_jid", "str", "sorted", "set", "_get_options", "_verify_views", "save_minions", "_get_ttl", "_format_job_instance", "_format_jid_instance", "list"], "class_names": [], "class_method_calls": ["cb_.add", "__opts__.get", "couchbase.set_json_converters", "result.doc", "log.warning", "cb_.replace", "cb_.query", "couchbase.exceptions", "couchbase.Couchbase", "cb_.design_get", "job.get", "result.key", "ret.update", "cb_.get", "jid_doc.value", "log.error", "result.value", "ckminions.check_minions", "logging.getLogger", "clear_load.get", "salt.utils", "jid_doc.cas", "cb_.design_create"]}, "couchdb_return.py": {"libraries": ["time", "urllib.request.build_opener", "salt.returners", "salt.utils.json", "logging", "urllib.error.HTTPError", "urllib.request.Request", "salt.utils.jid", "urllib.request.HTTPHandler"], "function_names": ["returner", "_request", "get_jids", "set_salt_view", "prep_jid", "get_fun", "_generate_doc", "get_jid", "get_minions", "__virtual__", "_get_options", "save_minions", "ensure_views", "get_valid_salt_views"], "function_calls": ["len", "_request", "set_salt_view", "_build_opener", "_generate_doc", "get_minions", "_get_options", "ensure_views", "get_valid_salt_views", "_Request"], "class_names": [], "class_method_calls": ["logging.getLogger", "time.time", "request.get_method", "handler.read", "salt.returners", "request.add_header", "log.error", "opener.open", "log.info", "log.debug", "log.warning", "salt.utils", "ret.copy", "_ret.append"]}, "elasticsearch_return.py": {"libraries": ["salt.returners", "datetime.tzinfo", "datetime.timedelta", "uuid", "logging", "salt.utils.json", "datetime", "salt.utils.jid"], "function_names": ["returner", "event_return", "prep_jid", "save_load", "tzname", "dst", "_convert_keys", "utcoffset", "get_load", "__virtual__", "_get_options", "_ensure_index"], "function_calls": ["len", "_convert_keys", "str", "tuple", "UTC", "_get_options", "isinstance", "timedelta", "_ensure_index"], "class_names": ["UTC"], "class_method_calls": ["event.get", "logging.getLogger", "uid.split", "datetime.datetime", "salt.returners", "new_data.append", "salt.utils", "log.info", "data.items", "ret.get", "uuid.uuid4", "uid.startswith", "log.debug", "k.replace", "job_fun.replace", "datetime.date"]}, "etcd_return.py": {"libraries": ["logging", "salt.utils.etcd_util", "salt.utils.jid", "salt.utils.json"], "function_names": ["returner", "_get_conn", "save_load", "get_jids", "prep_jid", "get_fun", "get_minions", "get_jid", "clean_old_jobs", "__virtual__", "get_load", "save_minions"], "function_calls": ["_get_conn", "str", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "ret.append", "client.get", "__opts__.get", "opts.get", "salt.utils", "items.items", "log.debug", "id.split", "client.set"]}, "highstate_return.py": {"libraries": ["io", "html", "salt.utils.yaml", "smtplib", "salt.returners", "salt.utils.json", "logging", "salt.utils.stringutils", "salt.utils.files", "email.mime.text.MIMEText"], "function_names": ["returner", "_produce_output", "_generate_html", "_generate_html_table", "_dict_to_name_value", "__test_html", "__virtual__", "_get_options", "_generate_report", "_sprinkle", "_generate_states_report", "_lookup_style"], "function_calls": ["_generate_html", "sorted", "_get_options", "MIMEText", "_lookup_style", "next", "_generate_report", "range", "str", "__test_html", "_generate_states_report", "isinstance", "len", "print", "_generate_html_table", "float", "_dict_to_name_value", "iter", "_sprinkle", "_produce_output"], "class_names": [], "class_method_calls": ["__grains__.get", "_STYLES.get", "config_str.split", "setup.get", "result.append", "out.write", "data.items", "subdata.items", "log.debug", "single.append", "string_file.read", "retdata.items", "data.get", "state.split", "report.insert", "salt.returners", "smtplib.SMTP", "output.write", "smtp.quit", "ret.get", "states.append", "string_file.seek", "msg.as_string", "logging.getLogger", "smtp.sendmail", "sub.split", "recipients.split", "input_file.read", "salt.utils", "io.StringIO", "html.escape", "x.strip"]}, "influxdb_return.py": {"libraries": ["influxdb", "requests", "salt.utils.decorators.memoize", "salt.returners", "logging", "influxdb.influxdb08", "salt.utils.jid"], "function_names": ["returner", "save_load", "get_jids", "prep_jid", "_get_serv", "get_fun", "_get_version", "get_minions", "get_jid", "get_load", "__virtual__", "_get_options", "save_minions"], "function_calls": ["_get_options", "_get_version", "_get_serv"], "class_names": [], "class_method_calls": ["requests.get", "logging.getLogger", "ret.append", "result.headers", "salt.returners", "log.critical", "_options.get", "salt.utils", "influxdb.InfluxDBClient", "serv.write_points", "influxdb.influxdb08", "serv.__module__", "log.debug", "serv.query"]}, "kafka_return.py": {"libraries": ["logging", "confluent_kafka.Producer", "salt.utils.json"], "function_names": ["__virtual__", "_delivery_report", "returner", "_get_conn"], "function_calls": ["_get_conn", "str", "Producer"], "class_names": [], "class_method_calls": ["producer.produce", "msg.partition", "producer.poll", "logging.getLogger", "log.error", "producer.flush", "salt.utils", "log.debug", "msg.topic"]}, "librato_return.py": {"libraries": ["logging", "librato", "salt.returners", "salt.utils.jid"], "function_names": ["returner", "__virtual__", "_get_options", "_get_librato", "_calculate_runtimes"], "function_calls": ["_get_options", "_get_librato", "_calculate_runtimes", "isinstance"], "class_names": [], "class_method_calls": ["q.add", "logging.getLogger", "salt.returners", "states.items", "librato.connect", "q.submit", "_options.get", "log.info", "librato.sanitize_metric_name", "log.debug", "librato_conn.new_queue"]}, "local.py": {"libraries": ["logging", "salt.channel.client.ReqChannel", "salt.utils.files"], "function_names": ["__init__", "send", "crypted_transfer_decode_dictentry", "close"], "function_calls": ["super", "print"], "class_names": ["LocalChannel"], "class_method_calls": ["self.opts", "logging.getLogger", "self.kwargs", "self.tries", "f.readlines", "salt.utils", "log.debug"]}, "local_cache.py": {"libraries": ["errno", "glob", "time", "os", "salt.utils.job", "salt.utils.msgpack", "salt.exceptions", "shutil", "logging", "salt.payload", "salt.utils.jid", "salt.utils.stringutils", "salt.utils.files", "bisect", "salt.utils.minions", "salt.utils.atomicfile"], "function_names": ["returner", "prep_jid", "save_load", "get_jids", "update_endtime", "_remove_job_dir", "_walk_through", "get_jid", "get_load", "clean_old_jobs", "save_minions", "save_reg", "_reg_dir", "get_endtime", "get_jids_filter", "_job_dir", "load_reg"], "function_calls": ["save_load", "prep_jid", "len", "range", "_remove_job_dir", "sorted", "str", "_walk_through", "set", "save_minions", "_reg_dir", "get_endtime", "_job_dir", "list", "isinstance"], "class_names": [], "class_method_calls": ["time.sleep", "dirs_to_remove.add", "time.time", "os.listdir", "__opts__.get", "fn_.startswith", "os.makedirs", "log.warning", "SYNDIC_MINIONS_P.format", "errno.EEXIST", "keys.insert", "log.critical", "all_minions.update", "shutil.rmtree", "salt.payload", "errno.ENOENT", "etfile.read", "log.debug", "ret.insert", "err.errno", "glob.glob", "os.stat", "log.error", "salt.exceptions", "log.exception", "ckminions.check_minions", "bisect.bisect", "etfile.write", "logging.getLogger", "minions_cache.extend", "exc.errno", "load.get", "clear_load.get", "os.path", "fn_.write", "salt.utils"]}, "mattermost_returner.py": {"libraries": ["logging", "salt.returners", "salt.utils.json", "salt.utils.mattermost"], "function_names": ["returner", "event_return", "post_message", "__virtual__", "_get_options"], "function_calls": ["_get_options", "post_message", "dict", "bool"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.returners", "log.error", "_options.get", "ret.get", "salt.utils", "log.debug"]}, "memcache_return.py": {"libraries": ["salt.returners", "salt.utils.json", "logging", "memcache", "salt.utils.jid"], "function_names": ["returner", "prep_jid", "save_load", "get_jids", "_get_serv", "get_fun", "get_minions", "get_jid", "get_load", "__virtual__", "_get_options", "save_minions", "_append_list", "_get_list"], "function_calls": ["_get_options", "_append_list", "_get_list", "_get_serv"], "class_names": [], "class_method_calls": ["returns.items", "serv.set", "memcache.Client", "logging.getLogger", "loads.items", "serv.add", "value.strip", "salt.returners", "log.error", "serv.get_multi", "serv.get", "_options.get", "salt.utils", "log.debug", "serv.append"]}, "mongo_future_return.py": {"libraries": ["salt.utils.versions.Version", "salt.returners", "logging", "pymongo", "salt.utils.jid"], "function_names": ["returner", "_get_conn", "save_load", "get_jids", "prep_jid", "event_return", "get_fun", "_safe_copy", "get_jid", "get_minions", "get_load", "__virtual__", "_remove_dots", "_get_options", "save_minions"], "function_calls": ["_get_conn", "_safe_copy", "_get_options", "_remove_dots", "Version", "isinstance"], "class_names": [], "class_method_calls": ["pymongo.version", "key.replace", "pymongo.uri_parser", "_options.get", "conn.get_database", "pymongo.Connection", "src.items", "log.debug", "salt.returners", "salt.exceptions", "pymongo.MongoClient", "mdb.events", "events.copy", "sdata.copy", "mdb.saltReturns", "logging.getLogger", "ret.append", "salt.utils", "k.replace", "mdb.jobs"]}, "mongo_return.py": {"libraries": ["salt.utils.versions.Version", "salt.returners", "logging", "pymongo", "salt.utils.jid"], "function_names": ["returner", "_get_conn", "prep_jid", "get_fun", "get_jid", "__virtual__", "_remove_dots", "_get_options", "save_minions"], "function_calls": ["_get_conn", "_remove_dots", "_get_options", "Version", "isinstance"], "class_names": [], "class_method_calls": ["pymongo.version", "logging.getLogger", "key.replace", "salt.returners", "pymongo.Connection", "_options.get", "sdata.copy", "pymongo.MongoClient", "salt.utils", "mdb.authenticate", "src.items", "mdb.saltReturns", "log.debug", "mdb.jobs"]}, "multi_returner.py": {"libraries": ["salt.minion", "logging"], "function_names": ["returner", "prep_jid", "save_load", "get_jids", "get_jid", "get_load", "clean_old_jobs", "save_minions", "_mminion"], "function_calls": ["_mminion"], "class_names": [], "class_method_calls": ["ret.update", "salt.minion", "log.debug", "logging.getLogger"]}, "nagios_nrdp_return.py": {"libraries": ["logging", "http.client", "salt.returners", "html"], "function_names": ["returner", "_prepare_xml", "_post_data", "_getText", "__virtual__", "_get_options"], "function_calls": ["_prepare_xml", "str", "_post_data", "_get_options", "isinstance"], "class_names": [], "class_method_calls": ["node.TEXT_NODE", "node.data", "logging.getLogger", "res.get", "salt.returners", "log.error", "node.nodeType", "_content.get", "res.status_code", "rc.append", "ret.get", "salt.utils", "http.client", "log.debug", "html.escape", "options.get"]}, "odbc.py": {"libraries": ["salt.utils.jid", "salt.returners", "pyodbc", "salt.utils.json"], "function_names": ["_get_conn", "returner", "save_load", "get_jids", "prep_jid", "get_fun", "_close_conn", "get_minions", "get_jid", "get_load", "__virtual__", "_get_options", "save_minions"], "function_calls": ["_get_options", "_close_conn", "_get_conn"], "class_names": [], "class_method_calls": ["cur.fetchall", "cur.fetchone", "conn.commit", "ret.append", "cur.execute", "salt.returners", "_options.get", "conn.cursor", "conn.close", "salt.utils", "pyodbc.connect"]}, "pgjsonb.py": {"libraries": ["psycopg2", "time", "salt.utils.job", "contextlib.contextmanager", "salt.utils.data", "salt.returners", "salt.exceptions", "logging", "sys", "psycopg2.extras"], "function_names": ["event_return", "returner", "save_load", "get_jids", "prep_jid", "_get_serv", "get_fun", "get_minions", "get_jid", "get_load", "__virtual__", "_get_options", "clean_old_jobs", "save_minions", "_archive_jobs", "_purge_jobs"], "function_calls": ["_get_serv", "int", "str", "_get_options", "_archive_jobs", "_purge_jobs"], "class_names": [], "class_method_calls": ["cur.fetchone", "time.time", "__opts__.get", "_options.get", "sys.stderr", "conn.cursor", "conn.close", "conn.server_version", "psycopg2.extras", "cursor.execute", "log.critical", "event.get", "_options.items", "psycopg2.DatabaseError", "cur.execute", "psycopg2.connect", "cur.fetchall", "salt.returners", "salt.exceptions", "psycopg2.IntegrityError", "log.error", "ret.get", "logging.getLogger", "ret.append", "psycopg2.OperationalError", "err.args", "salt.utils"]}, "postgres_local_cache.py": {"libraries": ["psycopg2", "salt.utils.job", "re", "salt.utils.json", "logging", "sys", "salt.utils.jid"], "function_names": ["_get_conn", "prep_jid", "returner", "event_return", "save_load", "_build_dict", "get_jids", "_gen_jid", "_close_conn", "get_jid", "get_load", "__virtual__", "clean_old_jobs", "save_minions", "_escape_jid", "_format_job_instance", "_format_jid_instance"], "function_calls": ["_get_conn", "_build_dict", "int", "str", "_gen_jid", "_close_conn", "_escape_jid", "_format_job_instance", "_format_jid_instance", "isinstance"], "class_names": [], "class_method_calls": ["cur.fetchone", "conn.cursor", "conn.close", "sys.exc_info", "event.get", "conn.commit", "cur.execute", "job.get", "psycopg2.connect", "ret.update", "cur.fetchall", "log.error", "log.info", "re.sub", "logging.getLogger", "load.get", "psycopg2.OperationalError", "clear_load.get", "salt.utils", "cur.close"]}, "pushover_returner.py": {"libraries": ["salt.returners", "salt.utils.pushover", "logging", "pprint", "salt.exceptions.SaltInvocationError", "urllib.parse"], "function_names": ["_get_options", "returner", "_post_message", "__virtual__"], "function_calls": ["_get_options", "SaltInvocationError", "dict", "_post_message"], "class_names": [], "class_method_calls": ["pprint.pformat", "logging.getLogger", "salt.returners", "_options.get", "log.info", "ret.get", "salt.utils", "log.debug", "urllib.parse"]}, "rawfile_json.py": {"libraries": ["logging", "salt.returners", "salt.utils.json", "salt.utils.files"], "function_names": ["__virtual__", "returner", "_get_options", "event_return"], "function_calls": ["_get_options", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.returners", "log.error", "logfile.write", "salt.utils"]}, "redis_return.py": {"libraries": ["salt.utils.job", "salt.returners", "rediscluster.StrictRedisCluster", "salt.utils.platform", "salt.utils.json", "redis", "logging", "salt.utils.jid"], "function_names": ["returner", "save_load", "get_jids", "prep_jid", "_get_serv", "get_fun", "get_minions", "get_jid", "get_load", "__virtual__", "_get_options", "clean_old_jobs", "save_minions", "_get_ttl"], "function_calls": ["len", "_get_serv", "set", "StrictRedisCluster", "_get_options", "_get_ttl", "list"], "class_names": [], "class_method_calls": ["ret_key.replace", "__opts__.get", "_options.get", "pipeline.execute", "serv.hgetall", "serv.smembers", "serv.mget", "serv.keys", "log.debug", "serv.pipeline", "pipeline.set", "redis.StrictRedis", "serv.delete", "salt.returners", "pipeline.sadd", "pipeline.expire", "logging.getLogger", "to_remove.append", "serv.setex", "serv.get", "salt.utils", "pipeline.hset"]}, "sentry_return.py": {"libraries": ["logging", "raven.Client", "salt.utils.jid", "raven.transport.http.HTTPTransport"], "function_names": ["returner", "prep_jid", "_ret_is_not_error", "_connect_sentry", "__virtual__", "_get_message"], "function_calls": ["len", "_ret_is_not_error", "sorted", "_connect_sentry", "Client", "_get_message", "all", "isinstance"], "class_names": [], "class_method_calls": ["result.get", "logging.getLogger", "kwargs.items", "log.error", "client.capture", "raven_config.get", "result_dict.items", "log.info", "k.startswith", "ret.get", "servers.append", "salt.utils", "result_dict.keys"]}, "slack_returner.py": {"libraries": ["salt.utils.yaml", "salt.returners", "logging", "pprint", "salt.utils.slack", "urllib.parse"], "function_names": ["_get_options", "returner", "_post_message", "__virtual__"], "function_calls": ["_get_options", "dict", "_post_message"], "class_names": [], "class_method_calls": ["pprint.pformat", "returns.items", "logging.getLogger", "salt.returners", "log.error", "_options.get", "ret.get", "salt.utils", "log.debug", "urllib.parse"]}, "slack_webhook_return.py": {"libraries": ["salt.utils.yaml", "salt.returners", "logging", "salt.utils.http", "json", "urllib.parse"], "function_names": ["returner", "event_return", "_state_return", "_generate_payload", "_post_message", "_get_options", "__virtual__", "_generate_report", "_sprinkle", "_process_state", "_format_task"], "function_calls": ["len", "returner", "next", "range", "_state_return", "sorted", "_generate_payload", "str", "_post_message", "float", "_get_options", "_generate_report", "iter", "_sprinkle", "_process_state", "map", "list", "isinstance"], "class_names": [], "class_method_calls": ["failed_tasks.append", "__grains__.get", "_options.get", "event.get", "changed_tasks.append", "config_str.split", "json.dumps", "report.update", "returns.items", "report.get", "kwargs.get", "data.get", "state.split", "salt.returners", "log.error", "query_result.get", "ret.get", "urllib.parse", "logging.getLogger", "attachments.append", "sub.split", "ret_data.values", "salt.utils"]}, "sms_return.py": {"libraries": ["salt.returners", "twilio.rest.Client", "twilio.TwilioRestException", "twilio.rest.TwilioException", "logging", "twilio", "twilio.rest.TwilioRestClient"], "function_names": ["__virtual__", "returner", "_get_options"], "function_calls": ["_get_options", "TwilioRestClient", "tuple", "int"], "class_names": [], "class_method_calls": ["e.code", "logging.getLogger", "salt.returners", "log.error", "_options.get", "twilio.__version_info__", "client.messages"]}, "smtp_return.py": {"libraries": ["email.utils.formatdate", "os", "salt.template.compile_template", "smtplib", "salt.loader", "salt.returners", "logging", "gnupg", "salt.utils.jid", "io"], "function_names": ["returner", "prep_jid", "event_return", "__virtual__", "_get_options"], "function_calls": ["returner", "compile_template", "int", "str", "_get_options", "formatdate", "isinstance"], "class_names": [], "class_method_calls": ["salt.loader", "subject.read", "__opts__.get", "_options.get", "gnupg.GPG", "encrypted_data.stderr", "event.get", "server.starttls", "gpg.encrypt", "log.debug", "server.login", "encrypted_data.ok", "smtplib.SMTP", "salt.returners", "log.error", "server.sendmail", "server.quit", "logging.getLogger", "content.read", "server.set_debuglevel", "os.path", "encrypted_data.status", "salt.utils", "io.StringIO"]}, "sqlite3_return.py": {"libraries": ["salt.returners", "salt.utils.json", "sqlite3", "logging", "datetime", "salt.utils.jid"], "function_names": ["_get_conn", "returner", "save_load", "get_jids", "prep_jid", "get_fun", "_close_conn", "get_minions", "get_jid", "get_load", "__virtual__", "_get_options", "save_minions"], "function_calls": ["_get_conn", "Exception", "len", "str", "_close_conn", "float", "_get_options"], "class_names": [], "class_method_calls": ["cur.fetchall", "cur.fetchone", "conn.commit", "logging.getLogger", "ret.append", "datetime.datetime", "cur.execute", "salt.returners", "_options.get", "data.pop", "conn.cursor", "conn.close", "salt.utils", "ret.get", "log.debug", "sqlite3.connect"]}, "syslog_return.py": {"libraries": ["syslog", "salt.returners", "salt.utils.json", "logging", "salt.utils.jid"], "function_names": ["returner", "prep_jid", "_verify_options", "_get_options", "__virtual__"], "function_calls": ["len", "_verify_options", "getattr", "hasattr", "_get_options", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.returners", "syslog.closelog", "log.error", "bitwise_args.extend", "salt.utils", "syslog.openlog", "syslog.syslog"]}, "telegram_return.py": {"libraries": ["logging", "salt.returners"], "function_names": ["__virtual__", "returner", "_get_options"], "function_calls": ["_get_options"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.returners", "log.error", "_options.get", "ret.get", "log.debug"]}, "xmpp_return.py": {"libraries": ["salt.utils.versions.Version", "salt.returners", "sleekxmpp", "logging", "pprint", "sleekxmpp.ClientXMPP"], "function_names": ["returner", "start", "__init__", "_get_options", "__virtual__"], "function_calls": ["_get_options", "Version", "SendMsgBot", "super"], "class_names": ["_ClientXMPP", "SendMsgBot"], "class_method_calls": ["xmpp.connect", "pprint.pformat", "logging.getLogger", "self.add_event_handler", "self.start", "salt.returners", "xmpp.register_plugin", "self.msg", "sleekxmpp.__version__", "log.error", "self.send_message", "_options.get", "self.recipient", "self.disconnect", "xmpp.process", "ret.get", "self.send_presence"]}, "zabbix_return.py": {"libraries": ["os"], "function_names": ["save_load", "returner", "__virtual__", "zbx", "zabbix_send"], "function_calls": ["zbx", "type", "zabbix_send"], "class_names": [], "class_method_calls": ["os.path"]}, "ansible.py": {"libraries": ["os", "salt.modules.cmdmod", "salt.utils.path", "salt.exceptions.CommandExecutionError", "salt.utils.json", "logging", "salt.utils.stringutils"], "function_names": ["__virtual__", "targets"], "function_calls": ["CommandExecutionError"], "class_names": [], "class_method_calls": ["logging.getLogger", "os.path", "extra_cmd.append", "salt.utils", "salt.modules"]}, "cache.py": {"libraries": ["salt.utils.zeromq.zmq", "time", "os", "functools", "salt.utils.msgpack", "salt.utils.path", "salt.config", "re", "salt.utils.data", "shutil", "salt.utils.dictupdate", "salt.version", "logging", "salt.payload", "salt.utils.files", "salt.utils.atomicfile"], "function_names": ["factory", "__contains__", "__init__", "_read", "__delitem__", "get_cache_context", "__getitem__", "verify_cache_version", "put_cache", "sweep", "clear", "_enforce_ttl_key", "context_cache_wrap", "cache_context", "context_cache", "get_cached", "get", "_write", "__setitem__"], "function_calls": ["len", "func", "ContextCache", "int", "range", "super", "CacheDisk", "repr", "CacheDict", "list"], "class_names": ["ContextCache", "CacheCli", "CacheDisk", "CacheRegex", "CacheFactory", "CacheDict"], "class_method_calls": ["os.remove", "time.time", "context.socket", "zmq.LINGER", "file.truncate", "os.listdir", "dict.__delitem__", "salt.utils", "self._write", "self.clear", "os.makedirs", "log.warning", "self.timestamp", "salt.version", "self.size", "dict.__contains__", "self._enforce_ttl_key", "shutil.rmtree", "file.readlines", "salt.payload", "self.creq_out", "self.sweep", "func.__globals__", "self.clear_size", "log.debug", "re.compile", "self._dict", "self.max_age", "context_cache.get_cache_context", "self.opts", "dict.__setitem__", "zmq.REQ", "log.error", "self.prepend", "paterns.sort", "functools.wraps", "file.seek", "dict.__getitem__", "zmq.Context", "self.cache", "self.cache_upd_sock", "os.mkdir", "file.write", "logging.getLogger", "context_cache.cache_context", "self.cache_path", "context_cache.cache_path", "self.cache_sock", "dict.__init__", "self._ttl", "self._key_cache_time", "self._path", "logging.DEBUG", "log.isEnabledFor", "zmq.PUB", "os.path", "self.append", "self._read", "self.cupd_out"]}, "clustershell.py": {"libraries": ["ClusterShell.NodeSet.NodeSet", "socket", "copy"], "function_names": ["__virtual__", "targets"], "function_calls": ["NodeSet", "str", "float", "map", "list", "isinstance"], "class_names": [], "class_method_calls": ["sock.shutdown", "host_addrs.items", "socket.socket", "copy.deepcopy", "socket.gethostbyname", "sock.settimeout", "socket.SHUT_RDWR", "__opts__.get", "socket.AF_INET", "sock.close", "sock.connect", "socket.SOCK_STREAM"]}, "dir.py": {"libraries": ["os", "salt.loader", "salt.exceptions.CommandExecutionError", "salt.template", "logging", "salt.utils.verify"], "function_names": ["_render", "targets"], "function_calls": ["len", "CommandExecutionError", "_render"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.loader", "os.listdir", "salt.template", "__opts__.get", "os.path", "result.setdefault", "log.warning", "salt.utils", "log.debug", "dict.fromkeys", "rendered.items"]}, "flat.py": {"libraries": ["salt.template.compile_template", "salt.loader", "salt.config", "logging", "salt.roster.get_roster_file"], "function_names": ["targets"], "function_calls": ["get_roster_file", "str", "compile_template"], "class_names": [], "class_method_calls": ["salt.config", "logging.getLogger", "salt.loader"]}, "range.py": {"libraries": ["logging", "fnmatch", "seco.range", "copy"], "function_names": ["__virtual__", "target_glob", "target_range", "targets"], "function_calls": [], "class_names": [], "class_method_calls": ["r.expand", "fnmatch.fnmatch", "logging.getLogger", "copy.deepcopy", "log.error", "__opts__.get", "seco.range", "log.debug"]}, "scan.py": {"libraries": ["socket", "salt._compat.ipaddress", "salt.utils.network", "logging", "copy"], "function_names": ["__init__", "targets"], "function_calls": ["str", "RosterMatcher", "float", "map", "list", "isinstance"], "class_names": ["RosterMatcher"], "class_method_calls": ["sock.shutdown", "self.tgt_type", "log.trace", "addrs.extend", "rmatcher.targets", "logging.getLogger", "copy.deepcopy", "sock.settimeout", "socket.SHUT_RDWR", "__opts__.get", "sock.close", "sock.connect", "socket.SOCK_STREAM", "self.tgt", "salt.utils", "addrs.append", "ipaddress.ip_network", "ipaddress.ip_address"]}, "sshconfig.py": {"libraries": ["os", "re", "logging", "fnmatch", "salt.utils.stringutils", "salt.utils.files", "collections"], "function_names": ["targets", "__init__", "ret_glob_minions", "parse_ssh_config", "get_data", "_get_ssh_config_file"], "function_calls": ["getattr", "RosterMatcher", "_SSHConfRegex", "parse_ssh_config", "isinstance", "_get_ssh_config_file", "OSError"], "class_names": ["RosterMatcher"], "class_method_calls": ["self.tgt_type", "field.pattern", "os.access", "collections.OrderedDict", "self.tgt", "os.R_OK", "line.rstrip", "re.match", "match.group", "non_wildcard_targets.append", "field.target_field", "opts.get", "targets.keys", "line.startswith", "wildcard_targets.append", "fnmatch.fnmatch", "logging.getLogger", "collections.namedtuple", "rmatcher.targets", "self.get_data", "os.path", "hosts.append", "self.raw", "salt.utils"]}, "sshknownhosts.py": {"libraries": ["logging", "os", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["_parse_ssh_known_hosts", "_parse_ssh_known_hosts_line", "targets"], "function_calls": ["len", "_parse_ssh_known_hosts", "_parse_ssh_known_hosts_line", "OSError"], "class_names": [], "class_method_calls": ["names.split", "line.rstrip", "logging.getLogger", "__opts__.get", "log.error", "os.access", "os.path", "line_unicode.split", "os.R_OK", "salt.utils", "targets_.update", "log.warn"]}, "terraform.py": {"libraries": ["logging", "os.path", "salt.utils.json", "salt.utils.files"], "function_names": ["_parse_state_file", "_do__parse_old_state_file", "_add_ssh_key", "targets", "_handle_old_salt_host_resource", "_cast_output_to_type", "_handle_new_salt_host_resource", "_do_parse_new_state_file"], "function_calls": ["len", "_parse_state_file", "bool", "_do__parse_old_state_file", "int", "_add_ssh_key", "set", "_handle_old_salt_host_resource", "_cast_output_to_type", "_handle_new_salt_host_resource", "_do_parse_new_state_file"], "class_names": [], "class_method_calls": ["resources.items", "__opts__.get", "resource.get", "roster_entry.get", "rets.append", "attrs.keys", "roster_file.endswith", "log.debug", "tfstate.get", "module.get", "log.error", "attrs.get", "log.info", "TF_ROSTER_ATTRS.keys", "logging.getLogger", "TF_ROSTER_ATTRS.get", "os.path", "instance.get", "salt.utils"]}, "runner.py": {"libraries": ["salt.runner"], "function_names": ["cmd"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.runner", "runner.run", "local_opts.update"]}, "asam.py": {"libraries": ["logging", "requests", "html.parser"], "function_names": ["_get_platformset_name", "_make_post_request", "_parse_html_content", "handle_starttag", "add_platform", "_get_platforms", "list_platforms", "list_platform_sets", "__init__", "_get_asam_configuration", "__virtual__", "_get_platform_sets", "remove_platform"], "function_calls": ["_get_platformset_name", "_make_post_request", "_parse_html_content", "_get_platforms", "list_platforms", "list_platform_sets", "str", "_get_asam_configuration", "ASAMHTMLParser", "_get_platform_sets"], "class_names": ["ASAMHTMLParser"], "class_method_calls": ["requests.codes", "html.parser", "platform_set_list.append", "r.raise_for_status", "r.text", "service_config.get", "parser.data", "log.debug", "parser.feed", "item.startswith", "self.data", "requests.post", "log.error", "parameter.split", "line.startswith", "platform_list.append", "parameter.startswith", "logging.getLogger", "item.split", "asam_config.items", "html_content.remove", "r.status_code"]}, "bgp.py": {"libraries": ["salt.output", "netaddr.IPNetwork", "netaddr.IPAddress", "napalm.base.helpers"], "function_names": ["_display_runner", "_compare_match", "neighbors", "__virtual__", "_get_bgp_runner_opts", "_get_mine"], "function_calls": ["_display_runner", "IPNetwork", "_compare_match", "str", "map", "set", "IPAddress", "print", "_get_bgp_runner_opts", "list", "_get_mine"], "class_names": [], "class_method_calls": ["rows.append", "word.title", "get_bgp_neighbors_all.items", "runner_opts.get", "get_bgp_neighbors_minion.get", "get_bgp_neighbors_minion_out.items", "title_parts.append", "kwargs_copy.update", "field.split", "__opts__.get", "karg.startswith", "vrf_bgp_neighbors.items", "neighbor.get", "kwargs.pop", "salt.output", "kwargs_copy.items", "dict1.items"]}, "digicertapi.py": {"libraries": ["os", "salt.exceptions.SaltRunnerError", "Crypto.PublicKey.RSA", "salt.exceptions.CommandExecutionError", "re", "M2Crypto.RSA", "salt.utils.json", "salt.syspaths", "logging", "Cryptodome.PublicKey.RSA", "subprocess", "salt.cache", "salt.utils.files", "salt.utils.http", "tempfile", "collections.abc.Sequence"], "function_names": ["_paginate", "_base_url", "order_certificate", "list_requests", "list_orders", "gen_key", "list_domain_cache", "show_csrs", "show_rsa", "__virtual__", "gen_csr", "get_org_details", "_id_map", "get_certificate", "list_domains", "del_cached_domain", "_api_key", "list_organizations", "show_organization"], "function_calls": ["_paginate", "range", "int", "_id_map", "str", "_base_url", "SaltRunnerError", "bytes", "_api_key", "gen_csr", "CommandExecutionError", "get_org_details", "gen_key", "isinstance"], "class_names": [], "class_method_calls": ["os.unlink", "gen.as_pem", "__opts__.get", "os.write", "os.close", "salt.cache", "cache.fetch", "if_.write", "domains.split", "of_.read", "tempfile.mkdtemp", "os.chmod", "re.search", "dns_names.append", "subprocess.check_output", "cache.list", "data.get", "RSA.generate", "common_name_match.group", "failed.append", "RSA.gen_key", "data.update", "out.splitlines", "logging.getLogger", "gen.exportKey", "cache.store", "syspaths.CACHE_DIR", "success.append", "cache.flush", "salt.utils", "tempfile.mkstemp"]}, "doc.py": {"libraries": ["logging", "re"], "function_names": ["parse_docstring", "strip_rst"], "function_calls": ["list"], "class_names": [], "class_method_calls": ["logging.getLogger", "x.strip", "docs.items", "match.group", "deps.append", "re.search", "re.sub", "log.debug", "docstring.splitlines", "re.M"]}, "error.py": {"libraries": ["salt.utils.error"], "function_names": ["error"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils"]}, "f5.py": {"libraries": ["salt.exceptions.CommandExecutionError", "pycontrol.pycontrol"], "function_names": ["create_pool", "check_member_pool", "check_pool", "__init__", "_connect", "__virtual__", "add_pool_member", "check_virtualserver", "create_vs", "lbmethods"], "function_calls": ["F5Mgmt", "Exception", "CommandExecutionError", "list"], "class_names": ["F5Mgmt"], "class_method_calls": ["mem.address", "vs_type.RESOURCE_TYPE_POOL", "vs_profile.profile_name", "vs_resource.type", "vs_profile_conn.profile_name", "self.password", "members_seq.items", "vs.typefactory", "pool.split", "protocol.upper", "vs_def.name", "vs_profile_http.profile_name", "vs_resource.default_pool_name", "v.split", "vs_def_seq.item", "F5.add_pool_member", "self._connect", "member.address", "vs_profile.profile_context", "method.upper", "vs_def.protocol", "F5.create_pool", "self.username", "self.bigIP", "F5.check_pool", "self.check_pool", "vs_context.PROFILE_CONTEXT_TYPE_ALL", "vs_profile_seq.item", "F5.create_vs", "pools.get_list", "vs_def.port", "self.lb", "vs_def.address", "vs.get_list", "vs.create", "F5.check_virtualserver", "F5.check_member_pool", "resource_seq.item", "f5.BIGIP", "member.port"]}, "fileserver.py": {"libraries": ["salt.fileserver"], "function_names": ["clear_file_list_cache", "envs", "dir_list", "update", "clear_lock", "clear_cache", "lock", "file_list", "empty_dir_list", "symlink_list"], "function_calls": ["sorted"], "class_names": [], "class_method_calls": ["fileserver.dir_list", "fileserver.update", "fileserver.file_list_emptydirs", "fileserver.clear_cache", "fileserver.clear_lock", "fileserver.envs", "fileserver.symlink_list", "fileserver.lock", "fileserver.file_list", "fileserver.clear_file_list_cache", "salt.fileserver"]}, "jobs.py": {"libraries": ["os", "salt.exceptions.SaltClientError", "dateutil.parser", "salt.client", "salt.returners", "salt.utils.master", "logging", "fnmatch", "salt.payload", "salt.utils.args", "salt.utils.files", "salt.minion", "salt.utils.jid"], "function_names": ["_get_returner", "print_job", "list_jobs_filter", "exit_success", "last_run", "master", "_walk_through", "list_jobs", "list_job", "lookup_jid", "_format_job_instance", "_format_jid_instance", "active"], "function_calls": ["_get_returner", "print_job", "next", "sorted", "list_jobs", "list_job", "iter", "dict", "print", "NotImplementedError", "_format_job_instance", "_format_jid_instance", "list", "isinstance"], "class_names": [], "class_method_calls": ["os.listdir", "__jid_event__.fire_event", "__opts__.get", "client.cmd", "salt.payload", "job.get", "ret.update", "active_.items", "data.get", "salt.client", "log.error", "dateutil_parser.parse", "log.info", "fnmatch.fnmatch", "logging.getLogger", "mminion.returners", "active_.keys", "os.path", "salt.minion", "salt.utils"]}, "launchd.py": {"libraries": ["sys", "os"], "function_names": ["write_launchd_plist"], "function_calls": [], "class_names": [], "class_method_calls": ["sys.exit", "sys.executable", "sys.stderr", "os.path", "plist_sample_text.format"]}, "manage.py": {"libraries": ["os", "salt.utils.files", "tempfile", "salt.version", "time", "salt.key", "salt.exceptions.SaltSystemExit", "salt.utils.versions", "urllib.request", "salt.utils.minions", "re", "salt.client", "logging", "salt.wheel", "salt.exceptions.SaltClientError", "salt.utils.path", "operator", "uuid", "subprocess", "salt.client.ssh", "salt.utils.compat"], "function_names": ["bootstrap_psexec", "down", "bootstrap", "safe_accept", "versions", "not_joined", "list_not_state", "key_regen", "list_state", "alived", "up", "not_alived", "not_reaped", "_ping", "allowed", "reaped", "not_allowed", "status", "joined", "present", "not_present"], "function_calls": ["len", "sorted", "str", "set", "status", "dict", "list_not_state", "print", "_ping", "list_state"], "class_names": [], "class_method_calls": ["vb_script.format", "os.remove", "__jid_event__.fire_event", "tmp_dir.rstrip", "salt.version", "master_version.string", "FINGERPRINT_REGEX.match", "client.cmd", "time.strptime", "salt.key", "not_connected.append", "__opts__.copy", "ret.items", "salt_key.finger", "urllib.request", "log.debug", "re.compile", "hosts.split", "subprocess.call", "failures.items", "ret.setdefault", "minion_version.string", "operator.itemgetter", "client.get_cli_event_returns", "salt.client", "y.split", "log.error", "returned.add", "fingerprints.get", "ssh_client.cmd", "salt.wheel", "fn_ret.items", "logging.getLogger", "key.list_keys", "client.run_job", "key.ACC", "client._get_timeout", "ckminions.connected_ids", "batch_file.write", "os.path", "uuid.uuid4", "salt.utils", "tempfile.mkstemp", "wheel.call_func", "salty_rx.findall"]}, "net.py": {"libraries": ["salt.ext.win_inet_pton", "re", "socket", "salt.utils.platform"], "function_names": ["ip_addr", "__ip_addr", "mac", "ipv6_addr", "netmask", "ipv4_addr"], "function_calls": ["len", "int", "sorted", "__ip_addr", "ipv6_addr", "ipv4_addr", "isinstance"], "class_names": [], "class_method_calls": ["re.IGNORECASE", "socket.AF_INET", "addr.rsplit", "socket.AF_INET6", "socket.inet_pton", "mask.split", "salt.utils", "re.VERBOSE", "re.compile", "valid.match"]}, "queue.py": {"libraries": ["salt.utils.event.tagify", "salt.exceptions.SaltInvocationError", "salt.utils.event.get_event", "salt.loader"], "function_names": ["delete", "pop", "process_runner", "list_length", "insert_runner", "insert", "__get_queue_opts", "list_items", "list_queues", "process_queue"], "function_calls": ["get_event", "pop", "tagify", "isinstance", "insert", "__get_queue_opts", "SaltInvocationError", "process_queue"], "class_names": [], "class_method_calls": ["event_bus.fire_event", "salt.loader", "__opts__.get", "__jid_event__.fire_event", "args.split"]}, "spacewalk.py": {"libraries": ["logging", "atexit", "xmlrpc.client"], "function_names": ["_get_client_and_key", "api", "addGroupsToKey", "__virtual__", "deleteAllGroups", "deleteAllSystems", "_get_session", "deleteAllActivationKeys", "unregister", "_get_spacewalk_configuration", "_disconnect_session"], "function_calls": ["Exception", "_get_client_and_key", "getattr", "endpoint", "_get_session", "_get_spacewalk_configuration"], "class_names": [], "class_method_calls": ["client.activationkey", "logging.getLogger", "xmlrpc.client", "groupIds.append", "deleted_keys.append", "client.systemgroup", "deleted_groups.append", "log.error", "atexit.register", "names.append", "service_config.get", "ids.append", "command.rpartition", "failed_groups.append", "failed_keys.append", "spacewalk_config.items", "client.system"]}, "survey.py": {"libraries": ["difflib", "salt.client", "hashlib", "salt.exceptions.SaltClientError"], "function_names": ["hash", "_get_pool_results", "diff"], "function_calls": ["len", "str", "sorted", "_get_pool_results", "print", "enumerate"], "class_names": [], "class_method_calls": ["sorted_ret.append", "client.cmd", "kwargs.items", "salt.client", "hashlib.sha256", "key.startswith", "kwargs.pop", "difflib.unified_diff"]}, "thin.py": {"libraries": ["packaging", "os", "contextvars", "salt.utils.stringutils", "salt.utils.files", "tempfile", "salt.version", "salt.ext.tornado", "salt.utils.hashutils", "shutil", "immutables", "salt.ext.backports_abc", "salt.ext.ssl_match_hostname", "zipfile", "importlib.util", "salt", "certifi", "site", "backports.ssl_match_hostname", "singledispatch", "tarfile", "salt.exceptions", "salt.utils.json", "logging", "singledispatch_helpers", "distro", "msgpack", "jinja2", "yaml", "markupsafe", "salt.utils.path", "zlib", "sys", "subprocess", "looseversion", "backports_abc", "copy"], "function_names": ["_is_shareable", "_pack_alternative", "gte", "gen_min", "min_sum", "find_site_modules", "get_tops_python", "gen_thin", "get_ext_tops", "_get_supported_py_config", "get_tops", "getsitepackages", "thin_sum", "_get_thintar_prefix", "_get_ext_namespaces", "import_module", "thin_path", "_add_dependency", "_get_salt_call"], "function_calls": ["_is_shareable", "_pack_alternative", "gen_min", "find_site_modules", "RuntimeError", "__import__", "get_tops_python", "gen_thin", "int", "get_ext_tops", "_get_supported_py_config", "get_tops", "globals", "getsitepackages", "str", "locals", "_get_thintar_prefix", "_get_ext_namespaces", "NotImplementedError", "tuple", "isinstance", "hasattr", "import_module", "_add_dependency", "_get_salt_call"], "class_names": [], "class_method_calls": ["mod.__name__", "os.remove", "mod.endswith", "digest_collector.add", "tops.append", "sys.argv", "template.replace", "site.getsitepackages", "required.append", "zipfile.ZIP_DEFLATED", "os.close", "os.access", "subprocess.Popen", "deps.keys", "os.makedirs", "log.warning", "os.R_OK", "os.X_OK", "subprocess.PIPE", "cmd.communicate", "spec.loader", "salt.version", "root.startswith", "egg.extractall", "shutil.rmtree", "tops_py_version_mapping.items", "fp_.write", "tempfile.mkdtemp", "libs.append", "importlib.util", "digest_collector.digest", "log.debug", "tfp.getinfo", "so_mods.split", "name.endswith", "tfp.add", "copy.deepcopy", "mod_file.replace", "sys.path", "pymap.append", "log.error", "salt.exceptions", "fh_.read", "fh.read", "obj.__file__", "cfg_copy.items", "tfp.close", "required.pop", "container.append", "config.items", "exclude.append", "shutil.move", "os.getcwd", "logging.getLogger", "cfg.get", "mods.append", "os.linesep", "sys.version_info", "os.chdir", "zipfile.ZIP_STORED", "lib.getsitepackages", "os.path", "zipfile.ZipFile", "required.index", "tarfile.open", "salt.utils", "tempfile.mkstemp", "extra_mods.split", "tfp.write"]}, "venafiapi.py": {"libraries": ["time", "salt.exceptions.CommandExecutionError", "salt.utils.json", "salt.syspaths", "logging", "sys", "salt.cache", "salt.utils.stringutils", "salt.utils.files", "vcert.common.CertificateRequest", "vcert"], "function_names": ["list_domain_cache", "_id_map", "__virtual__", "show_cert", "request", "_init_connection", "del_cached_domain"], "function_calls": ["Exception", "CommandExecutionError", "CertificateRequest", "_init_connection", "isinstance"], "class_names": [], "class_method_calls": ["time.sleep", "time.time", "__opts__.get", "salt.cache", "cache.fetch", "cert.chain", "domains.split", "csr_file.read", "request.update_from_zone_config", "vcert.Connection", "cert.cert", "dns_names.append", "pkey_file.read", "cache.list", "sys.exit", "log.error", "log.info", "failed.append", "domain_data.get", "logging.getLogger", "request.private_key_pem", "cache.store", "conn.read_zone_conf", "syspaths.CACHE_DIR", "key_password.startswith", "success.append", "cache.flush", "conn.retrieve_cert", "salt.utils", "conn.request_cert"]}, "vistara.py": {"libraries": ["salt.output", "logging", "salt.utils.http"], "function_names": ["_delete_resource", "_get_vistara_configuration", "_search_devices", "__virtual__", "_get_oath2_access_token", "delete_device"], "function_calls": ["len", "_delete_resource", "_get_vistara_configuration", "_search_devices", "_get_oath2_access_token"], "class_names": [], "class_method_calls": ["logging.getLogger", "resp.get", "log.error", "salt.utils", "delete_responses.append", "log.debug", "vistara_config.get"]}, "scripts.py": {"libraries": ["os", "functools", "salt.cli.cp", "signal", "salt.cli.daemons", "contextlib", "salt.defaults.exitcodes", "time", "salt.exceptions.SaltSystemExit", "salt.cloud", "salt.cli.key", "traceback", "salt.exceptions.SaltReqTimeoutError", "multiprocessing", "salt.cli.api", "salt.utils.process", "salt.cli.call", "random.randint", "logging", "salt.cli.ssh", "threading", "salt.cloud.cli", "salt.cli.salt", "salt.exceptions.SaltClientError", "salt.cli.run", "salt.cli.spm", "salt.utils.extend", "salt.utils.platform", "salt._logging", "sys", "subprocess"], "function_names": ["salt_cloud", "proxy_minion_process", "salt_call", "escalate_signal_to_process", "_handle_signals", "_pip_args", "_get_onedir_env_path", "salt_run", "minion_process", "salt_proxy", "salt_pip", "salt_extend", "salt_cp", "salt_spm", "salt_api", "handle_hup", "salt_minion", "salt_syndic", "salt_main", "_pip_environment", "_install_signal_handlers", "salt_master", "salt_unity", "suicide_when_without_parent", "salt_key", "salt_ssh"], "function_calls": ["len", "_pip_args", "_pip_environment", "dir", "getattr", "_install_signal_handlers", "_get_onedir_env_path", "str", "hasattr", "randint", "s_fun", "print"], "class_names": [], "class_method_calls": ["os.getpid", "time.sleep", "fun.startswith", "master.start", "signal.SIG_DFL", "sys.argv", "signal.SIGHUP", "os.getppid", "queue.put", "lock.release", "sys.executable", "contextlib.suppress", "sys.stderr", "salt.defaults", "log.warning", "multiprocessing.Process", "avail.append", "os.kill", "process.pid", "syndic.start", "proxyminion.config", "multiprocessing.Queue", "env.copy", "sys.modules", "new_args.append", "minion.config", "process.start", "os.getuid", "signal.SIGINT", "minion.start", "sapi.start", "process.join", "salt.cloud", "logging.basicConfig", "salt.cli", "manager.minion", "queue.get", "os.environ", "traceback.format_exc", "os._exit", "sys.exit", "sys.path", "os.pathsep", "log.error", "thread.start", "signal.SIGTERM", "signal.default_int_handler", "rlogger.handlers", "log.info", "sys.RELENV", "rlogger.removeHandler", "ret.returncode", "signal.signal", "logging.getLogger", "threading.RLock", "signal.getsignal", "sys.version_info", "process.exitcode", "exc.code", "client.run", "spm.run", "subprocess.run", "salt._logging", "proxyminion.start", "client.options", "threading.Thread", "client.local_client", "salt.utils", "lock.acquire", "functools.partial"]}, "couchdb.py": {"libraries": ["uuid.uuid4", "logging", "salt.utils.decorators.memoize", "couchdb"], "function_names": ["_get_conn", "get", "_get_db", "__virtual__", "set_", "_construct_uri"], "function_calls": ["_get_conn", "_construct_uri", "uuid4", "_get_db"], "class_names": [], "class_method_calls": ["logging.getLogger", "db.get", "couchdb.Server", "db.save", "server.create"]}, "env.py": {"libraries": ["os"], "function_names": ["__virtual__", "set_", "get"], "function_calls": [], "class_names": [], "class_method_calls": ["os.environ"]}, "etcd_db.py": {"libraries": ["logging", "salt.utils.etcd_util"], "function_names": ["_get_conn", "delete", "get", "__virtual__", "set_"], "function_calls": ["_get_conn", "get"], "class_names": [], "class_method_calls": ["logging.getLogger", "client.get", "salt.utils", "client.delete", "client.set"]}, "keyring_db.py": {"libraries": ["logging", "keyring"], "function_names": ["__virtual__", "_get_service", "set_", "get"], "function_calls": ["_get_service", "isinstance"], "class_names": [], "class_method_calls": ["keyring.set_password", "keyring.get_password", "logging.getLogger"]}, "redis_sdb.py": {"libraries": ["redis"], "function_names": ["__virtual__", "delete", "set_", "get"], "function_calls": [], "class_names": [], "class_method_calls": ["redis_conn.delete", "redis.StrictRedis", "redis_conn.set", "redis_conn.get", "profile.copy", "redis_kwargs.pop"]}, "tism.py": {"libraries": ["salt.utils.http", "logging", "salt.exceptions.SaltConfigurationError", "salt.utils.json"], "function_names": ["__virtual__", "get"], "function_calls": ["str", "SaltConfigurationError"], "class_names": [], "class_method_calls": ["result.get", "logging.getLogger", "profile.get", "http.query", "log.warning", "salt.utils"]}, "configparser.py": {"libraries": ["re", "collections.OrderedDict", "salt.utils.stringutils", "configparser.*"], "function_names": ["set_multivar", "write", "remove_option_regexp", "get", "__init__", "set", "_read", "_string_check", "_add_option"], "function_calls": ["len", "bool", "super", "type", "convert", "TypeError", "ParsingError", "repr", "all", "MissingSectionHeaderError", "NoSectionError", "isinstance"], "class_names": ["GitConfigParser"], "class_method_calls": ["fp_.mode", "line.split", "self._add_option", "fp.readline", "optval.find", "optname.rstrip", "optval.strip", "line.strip", "fp_.write", "line.lstrip", "re.compile", "self._string_check", "self._dict", "regexp.search", "self.DEFAULTSECT", "mo.group", "self.optionxform", "e.append", "self._defaults", "self._optcre", "line.startswith", "self.SECTCRE", "self._sections", "self.OPTCRE", "self.SPACEINDENT", "salt.utils"]}, "keyvalue.py": {"libraries": ["salt.serializers.DeserializationError", "salt.serializers.SerializationError", "salt.utils.platform", "salt.utils.stringutils.dequote", "salt.utils.jinja.quote"], "function_names": ["serialize", "deserialize"], "function_calls": ["dequote", "quote", "isinstance", "SerializationError", "DeserializationError"], "class_names": [], "class_method_calls": ["stream_or_string.splitlines", "obj.items", "line.split", "lines.append", "stream_or_string.decode", "linend.join", "salt.utils", "stream_or_string.read", "options.get"]}, "plist.py": {"libraries": ["salt.serializers.SerializationError", "logging", "salt.serializers.DeserializationError", "plistlib"], "function_names": ["serialize", "deserialize"], "function_calls": ["SerializationError", "DeserializationError", "isinstance"], "class_names": [], "class_method_calls": ["plistlib.FMT_BINARY", "options.pop", "log.trace", "plistlib.load", "logging.getLogger", "plistlib.dump", "stream_or_string.encode", "plistlib.dumps", "plistlib.loads"]}, "python.py": {"libraries": ["pprint", "simplejson", "json", "salt.utils.json"], "function_names": ["serialize"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "pprint.pformat"]}, "alias.py": {"libraries": [], "function_names": ["absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": []}, "apache_conf.py": {"libraries": ["salt.utils.path"], "function_names": ["__virtual__", "disabled", "enabled"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["salt.utils"]}, "apache_module.py": {"libraries": [], "function_names": ["__virtual__", "disabled", "enabled"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": []}, "apache_site.py": {"libraries": [], "function_names": ["__virtual__", "disabled", "enabled"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": []}, "augeas.py": {"libraries": ["re", "difflib", "os.path", "logging", "salt.utils.stringutils", "salt.utils.args", "salt.utils.files", "salt.modules.augeas_cfg.METHOD_MAP"], "function_names": ["__virtual__", "change", "_workout_filename", "_check_filepath"], "function_calls": ["_check_filepath", "str", "locals", "_workout_filename", "ValueError", "isinstance"], "class_names": [], "class_method_calls": ["change_.split", "logging.getLogger", "filename_.startswith", "log.error", "file_.readlines", "os.path", "re.sub", "salt.utils", "difflib.unified_diff"]}, "beacon.py": {"libraries": ["logging"], "function_names": ["disabled", "absent", "enabled", "present"], "function_calls": [], "class_names": [], "class_method_calls": ["kwargs.items", "__opts__.get", "logging.getLogger"]}, "blockdev.py": {"libraries": ["time", "os", "salt.utils.path", "logging", "os.path"], "function_names": ["__virtual__", "tuned", "_checkblk", "formatted"], "function_calls": ["range", "_checkblk", "isinstance"], "class_names": [], "class_method_calls": ["time.sleep", "logging.getLogger", "os.path", "log.info", "salt.utils"]}, "boto_cloudwatch_alarm.py": {"libraries": ["salt.utils.data"], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["len", "int", "sorted", "float", "isinstance"], "class_names": [], "class_method_calls": ["difference.append", "attributes.items", "create_or_update_alarm_args.update", "salt.utils"]}, "boto_iam_role.py": {"libraries": ["logging", "salt.utils.dictdiffer", "salt.utils.odict.OrderedDict", "salt.utils.dictupdate"], "function_names": ["_policies_absent", "_instance_profile_associated", "_role_absent", "_sort_policy", "_policies_present", "_instance_profile_disassociated", "_policies_detached", "__virtual__", "_instance_profile_present", "_instance_profile_absent", "_policies_attached", "absent", "_role_present", "present"], "function_calls": ["_policies_absent", "_instance_profile_associated", "_instance_profile_disassociated", "_role_absent", "_policies_present", "sorted", "_policies_detached", "_sort_policy", "_instance_profile_absent", "_instance_profile_present", "_policies_attached", "_role_present", "list", "isinstance"], "class_names": [], "class_method_calls": ["_policies.update", "roledict.get", "logging.getLogger", "entities.get", "dictupdate.update", "policies_to_attach.append", "doc.items", "policies_to_detach.append", "x.get", "policy_data.get", "salt.utils", "_policy_document.setdefault", "_to_modify.extend", "policies_to_delete.append", "log.debug", "policies.items", "policies_to_create.items"]}, "boto_lc.py": {"libraries": ["salt.exceptions.SaltInvocationError"], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["SaltInvocationError"], "class_names": [], "class_method_calls": []}, "chronos_job.py": {"libraries": ["logging", "copy", "salt.utils.configcomparer"], "function_names": ["config", "absent"], "function_calls": ["len", "str"], "class_names": [], "class_method_calls": ["logging.getLogger", "copy.deepcopy", "new.split", "old.split", "salt.utils", "log.debug"]}, "cmd.py": {"libraries": ["os", "salt.exceptions.CommandExecutionError", "salt.utils.functools", "salt.utils.platform", "salt.utils.json", "logging", "salt.utils.args", "salt.exceptions.SaltRenderError", "copy"], "function_names": ["wait_call", "call", "wait_script", "_is_true", "script", "_reinterpreted_state", "_failout", "wait", "mod_watch", "run"], "function_calls": ["len", "bool", "func", "call", "str", "_is_true", "script", "_reinterpreted_state", "_failout", "run", "ValueError", "isinstance"], "class_names": [], "class_method_calls": ["ret.update", "cmd_kwargs.get", "logging.getLogger", "kwargs.get", "copy.deepcopy", "data.get", "name.split", "out.rstrip", "item.split", "tmpctx.update", "data.setdefault", "os.path", "cmd_kwargs.update", "ret.get", "salt.utils", "kwargs.pop"]}, "dellchassis.py": {"libraries": ["salt.exceptions.CommandExecutionError", "logging", "os"], "function_names": ["firmware_update", "switch", "blade_idrac", "__virtual__", "chassis", "_firmware_update"], "function_calls": ["next", "any", "str", "iter", "all", "_firmware_update"], "class_names": [], "class_method_calls": ["current_slot_names.get", "logging.getLogger", "target_power_states.items", "status.get", "os.path", "ret.changes", "slot_rets.append", "key.startswith", "current_nic.get"]}, "docker_container.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.utils.data", "salt.utils.dockermod", "logging", "salt.utils.args", "copy"], "function_names": ["_format_comments", "_parse_networks", "running", "stopped", "_replace", "_check_diff", "_delete_temp_container", "__virtual__", "absent", "_get_nets", "mod_watch", "run", "_resolve_image"], "function_calls": ["running", "sorted", "_replace", "run", "list", "stopped", "set", "_delete_temp_container", "_resolve_image", "all", "str", "_check_diff", "_get_nets", "CommandExecutionError", "isinstance", "_format_comments", "_parse_networks", "len", "bool"], "class_names": [], "class_method_calls": ["networks.items", "stop_errors.append", "post_net_connect.get", "__context__.pop", "errors.append", "__salt__.missing_fun_string", "log.warning", "new_container_info.get", "kwargs.pop", "comments.extend", "log.debug", "containers.get", "comments.append", "net_conf.items", "ret.setdefault", "copy.deepcopy", "net_changes.pop", "log.exception", "targets.append", "containers.setdefault", "ret.get", "exc.info", "watch_kwargs.get", "changes_ptr.update", "logging.getLogger", "salt.utils"]}, "docker_image.py": {"libraries": ["salt.exceptions.CommandExecutionError", "logging", "salt.utils.dockermod", "salt.utils.args"], "function_names": ["__virtual__", "mod_watch", "absent", "present"], "function_calls": ["len", "str", "locals", "dict", "zip", "present", "list", "isinstance"], "class_names": [], "class_method_calls": ["argspec.args", "argspec.defaults", "logging.getLogger", "kwargs.get", "image_update.get", "__salt__.missing_fun_string", "salt.utils", "to_delete.append"]}, "docker_network.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt._compat.ipaddress", "logging", "salt.utils.dockermod.translate.network", "random", "string", "copy"], "function_names": ["_normalize_pools", "is_default_pool", "__virtual__", "absent", "_remove_network", "present"], "function_calls": ["len", "bool", "range", "str", "sorted", "is_default_pool", "_remove_network", "list", "ValueError"], "class_names": [], "class_method_calls": ["subnet.version", "errors.append", "string.ascii_lowercase", "__salt__.missing_fun_string", "ipam_kwarg_names.extend", "disconnected_containers.items", "kwargs.pop", "ipaddress.ip_network", "ipam_kwargs.pop", "driver_opts.get", "netinfo.get", "log.debug", "log.trace", "ret.setdefault", "random.choice", "kwargs.get", "copy.deepcopy", "key_name.endswith", "missing_containers.append", "stopped_containers.append", "logging.getLogger", "cinfo.get", "pool.get", "salt.utils", "to_connect.items"]}, "docker_volume.py": {"libraries": ["logging", "salt.utils.data"], "function_names": ["__virtual__", "absent", "_find_volume", "present"], "function_calls": ["_find_volume"], "class_names": [], "class_method_calls": ["__salt__.missing_fun_string", "salt.utils", "logging.getLogger"]}, "dvs.py": {"libraries": ["logging", "sys", "salt.exceptions", "pyVmomi.VmomiSupport"], "function_names": ["portgroups_configured", "_get_val2_dict_from_diff_dict", "mod_init", "_get_val1_dict_from_diff_dict", "__virtual__", "dvs_configured", "uplink_portgroup_configured", "_get_changes_from_diff_dict", "_get_diff_dict", "_get_datacenter_name"], "function_calls": ["len", "_get_val2_dict_from_diff_dict", "range", "_get_val1_dict_from_diff_dict", "sorted", "str", "dict", "_get_changes_from_diff_dict", "_get_diff_dict", "_get_datacenter_name", "ValueError", "isinstance"], "class_names": [], "class_method_calls": ["dvs.get", "dict2.keys", "exc.strerror", "original_infra_res_pools.append", "p.get", "changes.update", "VmomiSupport.versionMap", "comments.append", "ret.update", "log.trace", "updated_infra_res_pools.append", "changes_strings.append", "salt.exceptions", "log.error", "log.info", "expected_pg_names.append", "current_dvs.get", "changes_strings.extend", "logging.getLogger", "sys.version_info", "ret_dict.update", "diff_dict.keys"]}, "elasticsearch_index.py": {"libraries": ["logging"], "function_names": ["absent", "present"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["logging.getLogger"]}, "elasticsearch_index_template.py": {"libraries": ["logging"], "function_names": ["absent", "present"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["logging.getLogger"]}, "firewall.py": {"libraries": [], "function_names": ["__virtual__", "check"], "function_calls": [], "class_names": [], "class_method_calls": ["__opts__.get"]}, "glance_image.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": ["image.id"]}, "grafana.py": {"libraries": ["salt.utils.json", "salt.utils.dictdiffer.DictDiffer", "salt.exceptions.SaltInvocationError", "copy"], "function_names": ["dashboard_present", "_rows_differ", "__virtual__", "_parse_profile", "dashboard_absent"], "function_calls": ["_rows_differ", "DictDiffer", "_parse_profile", "SaltInvocationError", "enumerate", "isinstance"], "class_names": [], "class_method_calls": ["rows.append", "diff.removed", "copy.deepcopy", "_profile.get", "_ids.append", "diff.added", "update_rows.append", "_dashboard.get", "_ids.sort", "diff.changed", "salt.utils"]}, "grafana4_dashboard.py": {"libraries": ["salt.utils.json", "salt.utils.dictdiffer.DictDiffer", "copy"], "function_names": ["_inherited_row", "_stripped", "_inherited_panel", "_auto_adjust_panel_spans", "__virtual__", "_ensure_panel_ids", "absent", "_dashboard_diff", "_ensure_annotations", "_ensure_pinned_rows", "_cleaned", "_inherited_dashboard", "present"], "function_calls": ["len", "_inherited_row", "_stripped", "sum", "_inherited_panel", "set", "float", "_auto_adjust_panel_spans", "DictDiffer", "_ensure_panel_ids", "_dashboard_diff", "_ensure_annotations", "_ensure_pinned_rows", "_cleaned", "_inherited_dashboard", "enumerate", "list", "isinstance"], "class_names": [], "class_method_calls": ["base_panels.append", "dashboard_diff.removed", "row.pop", "pinned_rows.append", "pinned_row_titles_lower.append", "row_diff.changed", "new_dashboard.get", "panels_diff.changed", "old_row.get", "result_dashboard.update", "panel.pop", "rows_diff.removed", "new_rows.append", "response.get", "rows_diff.changed", "result_row.update", "panels_diff.removed", "rows_diff.added", "row.get", "dashboard_diff.added", "ret.setdefault", "copy.deepcopy", "panel.get", "target.pop", "result_panel.update", "dashboard.pop", "title.lower", "old_dashboard.get", "base_rows.append", "d.items", "levels.append", "row_diff.added", "row_diff.removed", "tags.update", "panels_diff.added", "base_dashboards.append", "salt.utils", "current_level.append", "dashboard_diff.changed", "dashboard.get"]}, "grafana4_datasource.py": {"libraries": ["salt.utils.dictdiffer.deep_diff"], "function_names": ["__virtual__", "_get_json_data", "absent", "present"], "function_calls": ["_get_json_data", "deep_diff", "isinstance"], "class_names": [], "class_method_calls": ["kwargs.items", "defaults.get"]}, "grafana4_org.py": {"libraries": ["requests.exceptions.HTTPError", "salt.utils.dictdiffer.deep_diff", "salt.utils.dictupdate"], "function_names": ["__virtual__", "_get_json_data", "absent", "present"], "function_calls": ["_get_json_data", "deep_diff", "isinstance"], "class_names": [], "class_method_calls": ["users.items", "dictupdate.update", "kwargs.items", "defaults.get", "e.response"]}, "grafana4_user.py": {"libraries": ["salt.utils.dictdiffer.deep_diff", "salt.utils.dictupdate"], "function_names": ["__virtual__", "_get_json_data", "absent", "present"], "function_calls": ["_get_json_data", "deep_diff", "isinstance"], "class_names": [], "class_method_calls": ["kwargs.items", "defaults.get", "dictupdate.update"]}, "grafana_dashboard.py": {"libraries": ["salt.utils.json", "salt.utils.dictdiffer.DictDiffer", "requests", "copy"], "function_names": ["_inherited_row", "_stripped", "_inherited_panel", "_update", "_auto_adjust_panel_spans", "__virtual__", "_ensure_panel_ids", "_get", "absent", "_dashboard_diff", "_ensure_annotations", "_delete", "_ensure_pinned_rows", "_cleaned", "_inherited_dashboard", "present"], "function_calls": ["_ensure_panel_ids", "enumerate", "list", "sum", "set", "DictDiffer", "_get", "_ensure_pinned_rows", "_inherited_dashboard", "_update", "_auto_adjust_panel_spans", "_ensure_annotations", "_delete", "isinstance", "len", "_inherited_row", "_stripped", "float", "_dashboard_diff", "_cleaned", "_inherited_panel"], "class_names": [], "class_method_calls": ["requests.get", "base_panels.append", "dashboard_diff.removed", "profile.get", "row.pop", "pinned_rows.append", "pinned_row_titles_lower.append", "row_diff.changed", "new_dashboard.get", "panels_diff.changed", "old_row.get", "result_dashboard.update", "panel.pop", "rows_diff.removed", "new_rows.append", "requests.delete", "response.get", "rows_diff.changed", "result_row.update", "panels_diff.removed", "rows_diff.added", "row.get", "dashboard_diff.added", "ret.setdefault", "copy.deepcopy", "data.get", "panel.get", "target.pop", "requests.post", "dashboard.pop", "result_panel.update", "title.lower", "old_dashboard.get", "base_rows.append", "d.items", "levels.append", "row_diff.added", "row_diff.removed", "response.json", "tags.update", "panels_diff.added", "base_dashboards.append", "salt.utils", "current_level.append", "dashboard_diff.changed", "dashboard.get"]}, "grafana_datasource.py": {"libraries": ["requests"], "function_names": ["_get_headers", "_get_url", "__virtual__", "_get_json_data", "absent", "_get_datasource", "_diff", "present"], "function_calls": ["_get_headers", "_get_url", "_get_json_data", "_get_datasource", "_diff", "isinstance"], "class_names": [], "class_method_calls": ["old.keys", "requests.get", "profile.get", "requests.post", "response.json", "requests.put", "new.keys", "requests.delete", "old.copy", "new.copy"]}, "group.py": {"libraries": ["sys", "salt.utils.platform", "salt.utils.win_functions"], "function_names": ["absent", "_changes", "present"], "function_calls": ["set", "_changes", "int"], "class_names": [], "class_method_calls": ["sys.modules", "salt.utils", "user.lower", "changes.items"]}, "host.py": {"libraries": ["logging", "salt.utils.validate.net"], "function_names": ["only", "absent", "present"], "function_calls": ["set", "isinstance"], "class_names": [], "class_method_calls": ["to_add.update", "update_comment.update", "logging.getLogger", "ret.setdefault", "to_add.add", "update_comment.add", "all_hosts.items", "to_remove.add", "salt.utils", "comments.append", "x.strip"]}, "influxdb08_database.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": []}, "influxdb08_user.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": []}, "influxdb_continuous_query.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": []}, "influxdb_database.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": []}, "influxdb_retention_policy.py": {"libraries": [], "function_names": ["__virtual__", "present", "absent", "convert_duration"], "function_calls": ["str", "convert_duration", "int"], "class_names": [], "class_method_calls": ["duration.split", "duration.endswith"]}, "influxdb_user.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": ["grants.items", "db_privileges.get", "privilege.lower"]}, "infoblox_a.py": {"libraries": [], "function_names": ["absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": ["data.update"]}, "infoblox_cname.py": {"libraries": [], "function_names": ["absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": ["data.update"]}, "infoblox_host_record.py": {"libraries": [], "function_names": ["absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": ["data.update", "addrobj.startswith", "obj_addrs.append"]}, "infoblox_range.py": {"libraries": [], "function_names": ["absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": ["data.update"]}, "jenkins.py": {"libraries": ["salt.exceptions.CommandExecutionError", "difflib", "logging", "salt.utils.stringutils", "salt.utils.files", "xml.etree.ElementTree", "io"], "function_names": ["_fail", "_elements_equal", "absent", "present"], "function_calls": ["len", "zip", "_fail", "_elements_equal", "all"], "class_names": [], "class_method_calls": ["io.StringIO", "e1.text", "logging.getLogger", "ET.tostringlist", "e1.attrib", "salt.utils", "e1.tag", "e1.tail", "ET.fromstring", "buf.readlines", "difflib.unified_diff", "e2.attrib", "_fp.read", "e2.text", "exc.strerror", "e2.tail", "buf.read", "e2.tag"]}, "kernelpkg.py": {"libraries": ["logging"], "function_names": ["latest_wait", "latest_installed", "__virtual__", "mod_watch", "latest_active"], "function_calls": ["latest_active"], "class_names": [], "class_method_calls": ["logging.getLogger"]}, "keystone_domain.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": ["domain.id"]}, "keystone_endpoint.py": {"libraries": [], "function_names": ["__virtual__", "_common", "absent", "present"], "function_calls": ["_common", "len", "enumerate"], "class_names": [], "class_method_calls": ["kwargs.copy", "endpoint.id", "service.id", "filters.pop"]}, "keystone_group.py": {"libraries": [], "function_names": ["__virtual__", "_common", "absent", "present"], "function_calls": ["_common", "hasattr"], "class_names": [], "class_method_calls": ["domain.id", "kwargs.pop", "group.id"]}, "keystone_project.py": {"libraries": [], "function_names": ["__virtual__", "_common", "absent", "present"], "function_calls": ["_common", "hasattr"], "class_names": [], "class_method_calls": ["domain.id", "project.id", "kwargs.pop"]}, "keystone_role.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": ["role.name", "role.id"]}, "keystone_role_grant.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present", "_get_filters"], "function_calls": ["hasattr", "_get_filters"], "class_names": [], "class_method_calls": ["filters.items", "user.id", "project.id", "role.id", "group.id", "domain.id", "kwargs.pop"]}, "keystone_service.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": ["service.id"]}, "keystone_user.py": {"libraries": [], "function_names": ["__virtual__", "_common", "absent", "present"], "function_calls": ["_common", "hasattr"], "class_names": [], "class_method_calls": ["domain.id", "user.id", "kwargs.pop"]}, "kubernetes.py": {"libraries": ["logging", "copy"], "function_names": ["deployment_absent", "node_label_absent", "node_label_present", "namespace_absent", "pod_present", "deployment_present", "configmap_absent", "__virtual__", "node_label_folder_absent", "service_present", "configmap_present", "secret_absent", "pod_absent", "secret_present", "service_absent", "_error", "namespace_present"], "function_calls": ["_error", "list", "isinstance"], "class_names": [], "class_method_calls": ["new_labels.append", "logging.getLogger", "log.info", "labels_to_drop.append", "copy.copy", "label.startswith", "name.strip"]}, "loop.py": {"libraries": ["time", "logging", "sys", "operator"], "function_names": ["__virtual__", "until_no_eval", "until"], "function_calls": ["hasattr", "getattr", "eval", "comparator", "isinstance"], "class_names": [], "class_method_calls": ["time.sleep", "logging.getLogger", "time.time", "res_archive.append", "sys.exc_info", "log.debug"]}, "lvs_server.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": []}, "lvs_service.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": []}, "lxd_container.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError"], "function_names": ["running", "stopped", "_unchanged", "frozen", "_success", "__virtual__", "absent", "migrated", "_error", "present"], "function_calls": ["len", "_unchanged", "str", "set", "_success", "map", "_error", "list"], "class_names": [], "class_method_calls": ["container.stop", "container.restart", "container.start", "old_profiles.add", "old_profiles.discard", "container.delete", "container.profiles", "container.freeze", "container.status_code", "new_profiles.difference", "profile_changes.append", "old_profiles.difference"]}, "lxd_image.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError"], "function_names": ["_unchanged", "_success", "__virtual__", "absent", "_error", "present"], "function_calls": ["len", "_unchanged", "str", "set", "_success", "map", "_error"], "class_names": [], "class_method_calls": ["aliases.append", "alias_changes.append", "image.public", "image.aliases", "old_aliases.difference", "new_aliases.difference", "source.get"]}, "lxd_profile.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError"], "function_names": ["_unchanged", "_success", "__virtual__", "absent", "_error", "present"], "function_calls": ["len", "_unchanged", "str", "_success", "_error"], "class_names": [], "class_method_calls": ["profile.description"]}, "marathon_app.py": {"libraries": ["logging", "copy", "salt.utils.configcomparer"], "function_names": ["running", "config", "absent"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger", "copy.deepcopy"]}, "modjk_worker.py": {"libraries": [], "function_names": ["_send_command", "stop", "disable", "_worker_status", "activate", "__virtual__", "_talk2modjk"], "function_calls": ["len", "_worker_status", "_send_command", "_talk2modjk"], "class_names": [], "class_method_calls": ["errors.append", "minions.append"]}, "module.py": {"libraries": ["salt.loader", "salt.utils.functools", "logging", "salt.exceptions.SaltInvocationError", "salt.utils.args", "salt.utils.jid"], "function_names": ["_get_dict_result", "_legacy_run", "_call_function", "_get_result", "wait", "run", "_run"], "function_calls": ["len", "bool", "range", "_get_dict_result", "set", "_legacy_run", "_call_function", "_get_result", "_run", "list", "isinstance"], "class_names": [], "class_method_calls": ["func.split", "changes_ret.get", "salt.loader", "failures.append", "aspec.varargs", "salt.utils", "aspec.args", "kwargs.pop", "aspec.keywords", "node.items", "args.append", "func_ret.get", "tests.append", "aspec.defaults", "log.debug", "args.extend", "keys.remove", "kwargs.get", "missing.add", "missing.append", "name.find", "logging.getLogger", "changes.get", "success.append", "msg.format"]}, "mongodb_database.py": {"libraries": [], "function_names": ["__virtual__", "absent"], "function_calls": [], "class_names": [], "class_method_calls": []}, "mongodb_user.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["len", "isinstance", "set", "int"], "class_names": [], "class_method_calls": ["current_roles.append"]}, "mssql_database.py": {"libraries": ["collections"], "function_names": ["__virtual__", "_normalize_options", "absent", "present"], "function_calls": ["_normalize_options", "type"], "class_names": [], "class_method_calls": ["collections.OrderedDict", "options.items"]}, "mssql_login.py": {"libraries": ["collections"], "function_names": ["__virtual__", "_normalize_options", "absent", "present"], "function_calls": ["_normalize_options", "type", "bool"], "class_names": [], "class_method_calls": ["collections.OrderedDict", "options.items"]}, "mssql_role.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": []}, "mssql_user.py": {"libraries": ["collections"], "function_names": ["__virtual__", "_normalize_options", "absent", "present"], "function_calls": ["_normalize_options", "type"], "class_names": [], "class_method_calls": ["collections.OrderedDict", "options.items"]}, "mysql_database.py": {"libraries": ["logging", "sys"], "function_names": ["__virtual__", "absent", "_get_mysql_error", "present"], "function_calls": ["str", "_get_mysql_error", "bytes"], "class_names": [], "class_method_calls": ["logging.getLogger", "existing.get", "sys.modules", "current.get", "__opts__.get", "log.debug"]}, "mysql_grants.py": {"libraries": ["sys"], "function_names": ["__virtual__", "absent", "_get_mysql_error", "present"], "function_calls": ["_get_mysql_error"], "class_names": [], "class_method_calls": ["sys.modules", "comment.format", "database.rpartition"]}, "mysql_query.py": {"libraries": ["os.path", "sys", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["__virtual__", "_get_mysql_error", "run_file", "run"], "function_calls": ["any", "str", "_get_mysql_error", "enumerate", "isinstance"], "class_names": [], "class_method_calls": ["res.items", "query_file.startswith", "sys.modules", "mapped_results.append", "output_file.write", "os.path", "salt.utils", "query_result.items"]}, "mysql_user.py": {"libraries": ["salt.utils.data", "sys"], "function_names": ["__virtual__", "absent", "_get_mysql_error", "present"], "function_calls": ["_get_mysql_error", "any"], "class_names": [], "class_method_calls": ["sys.modules", "salt.utils"]}, "net_napalm_yang.py": {"libraries": ["salt.utils.yaml", "salt.utils.json", "logging", "salt.utils.stringutils", "salt.utils.napalm", "salt.utils.files", "napalm_yang"], "function_names": ["__virtual__", "managed", "configured"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["ret.update", "compliance_report.get", "logging.getLogger", "kwargs.get", "__opts__.get", "data.pop", "salt.utils", "log.debug"]}, "netacl.py": {"libraries": ["capirca", "capirca.lib.aclgenerator", "logging", "capirca.aclgen", "salt.utils.napalm", "capirca.lib.policy"], "function_names": ["__virtual__", "managed", "term", "filter"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "netconfig.py": {"libraries": ["logging", "salt.utils.napalm"], "function_names": ["commit_confirmed", "replace_pattern", "_update_config", "saved", "__virtual__", "commit_cancelled", "managed"], "function_calls": ["_update_config"], "class_names": [], "class_method_calls": ["cancelled.update", "confirmed.update", "salt.utils", "logging.getLogger"]}, "netntp.py": {"libraries": ["netaddr.core.AddrFormatError", "logging", "netaddr.IPAddress", "salt.utils.napalm", "dns.resolver"], "function_names": ["_delete_ntp_servers", "_retrieve_ntp_servers", "_check_diff_and_configure", "_set_ntp_servers", "_exec_fun", "_delete_ntp_peers", "__virtual__", "_clean", "managed", "_check", "_set_ntp_peers", "_retrieve_ntp_peers", "_default_ret"], "function_calls": ["_check_diff_and_configure", "_exec_fun", "str", "set", "_clean", "IPAddress", "_check", "_default_ret", "globals", "list", "isinstance"], "class_names": [], "class_method_calls": ["ret.update", "_removed.get", "logging.getLogger", "_servers_ret.get", "_set.get", "_ret.update", "_peers_ret.get", "ip_only_peers.append", "dns.resolver", "ret.get", "salt.utils", "ntp_list_output.get"]}, "netsnmp.py": {"libraries": ["logging", "salt.utils.napalm", "salt.utils.json"], "function_names": ["_str_elem", "_valid_str", "_create_diff_action", "_clear_community_details", "_valid_dict", "_expand_config", "__virtual__", "_community_defaults", "_retrieve_device_config", "_configure", "managed", "_ordered_dict_to_dict", "_compute_diff", "_create_diff", "_check_config"], "function_calls": ["len", "_str_elem", "_valid_str", "fun", "_create_diff_action", "_clear_community_details", "_valid_dict", "_expand_config", "_community_defaults", "_retrieve_device_config", "_configure", "_ordered_dict_to_dict", "_compute_diff", "_create_diff", "_check_config", "isinstance"], "class_names": [], "class_method_calls": ["config.get", "_comm.items", "_device_config.get", "expected.get", "changes.update", "reasons.append", "_ret.get", "_community.items", "community_details.get", "ret.update", "_configured.get", "config.pop", "existing.get", "_COMMUNITY_MODE_MAP.get", "logging.getLogger", "defaults.update", "changes.get", "salt.utils", "_updated_changes.get"]}, "netusers.py": {"libraries": ["logging", "salt.utils.json", "salt.utils.napalm", "copy"], "function_names": ["_expand_users", "_set_users", "_update_users", "__virtual__", "_check_users", "managed", "_ordered_dict_to_dict", "_compute_diff", "_retrieve_users", "_delete_users"], "function_calls": ["_expand_users", "_set_users", "_update_users", "set", "_check_users", "_ordered_dict_to_dict", "_compute_diff", "_retrieve_users", "_delete_users", "isinstance"], "class_names": [], "class_method_calls": ["users_output.get", "diff.get", "_delete.get", "user_details.get", "expected.get", "user_configuration.get", "expected.keys", "expected_users.update", "ret.update", "user_expected.items", "copy.deepcopy", "configured.get", "configured.keys", "users.items", "logging.getLogger", "_update.get", "_set.get", "salt.utils", "diff.update"]}, "neutron_network.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": ["project.id", "network.id"]}, "neutron_secgroup.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": ["secgroup.id", "project.id"]}, "neutron_secgroup_rule.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present", "_rule_compare"], "function_calls": ["set", "_rule_compare"], "class_names": [], "class_method_calls": ["rule1.keys", "project.id", "rule2.keys"]}, "neutron_subnet.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": ["subnet.id"]}, "nfs_export.py": {"libraries": ["salt.utils.path"], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["bool", "add_export"], "class_names": [], "class_method_calls": ["salt.utils"]}, "ntp.py": {"libraries": ["logging", "salt.utils.platform"], "function_names": ["__virtual__", "_check_servers", "managed", "_get_servers"], "function_calls": ["_get_servers", "_check_servers", "sorted", "set", "isinstance"], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "openvswitch_bridge.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": []}, "openvswitch_db.py": {"libraries": [], "function_names": ["__virtual__", "managed"], "function_calls": [], "class_names": [], "class_method_calls": ["comment_error.format"]}, "openvswitch_port.py": {"libraries": [], "function_names": ["_check_vlan", "__virtual__", "_check_vxlan", "absent", "_check_gre", "present"], "function_calls": ["_check_vlan", "int", "str", "TypeError", "_check_vxlan", "_check_gre"], "class_names": [], "class_method_calls": []}, "pagerduty_escalation_policy.py": {"libraries": [], "function_names": ["_escalation_rules_to_string", "__virtual__", "absent", "_diff", "present"], "function_calls": ["Exception", "_escalation_rules_to_string"], "class_names": [], "class_method_calls": ["resource_object.keys", "state_data.items"]}, "pagerduty_schedule.py": {"libraries": [], "function_names": ["__virtual__", "_diff", "absent", "present"], "function_calls": ["len", "Exception"], "class_names": [], "class_method_calls": ["layer.items"]}, "pagerduty_service.py": {"libraries": [], "function_names": ["__virtual__", "_diff", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": ["resource_value.find"]}, "pagerduty_user.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": []}, "pbm.py": {"libraries": ["pyVmomi.pbm", "salt.utils.vmware", "pyVmomi.vmodl", "pyVmomi.vim", "logging", "salt.exceptions.VMwareRuntimeError", "salt.exceptions.VMwareObjectRetrievalError", "salt.exceptions.VMwareApiError"], "function_names": ["get_placement_solver", "get_profile_manager", "update_storage_policy", "get_policies_by_id", "get_default_storage_policy_of_datastore", "assign_default_storage_policy_to_datastore", "__virtual__", "create_storage_policy", "get_capability_definitions", "get_storage_policies"], "function_calls": ["VMwareApiError", "VMwareObjectRetrievalError", "VMwareRuntimeError", "get_policies_by_id"], "class_names": [], "class_method_calls": ["profile_manager.RetrieveContent", "pbm.placement", "pbm.ServiceInstance", "p.resourceType", "profile_manager.FetchCapabilityMetadata", "cat.capabilityMetadata", "exc.privilegeId", "profile_manager.AssignDefaultRequirementProfile", "profile_manager.Create", "datastore._moId", "p.name", "log.trace", "vmodl.RuntimeFault", "profile_manager.QueryDefaultRequirementProfile", "policy.profileId", "log.exception", "profile_manager.QueryProfile", "cap_definitions.extend", "logging.getLogger", "exc.msg", "vim.fault", "pbm_si.RetrieveContent", "profile_manager.Update", "pbm.profile", "salt.utils"]}, "pip_state.py": {"libraries": ["pkg_resources", "pip", "salt.exceptions.CommandExecutionError", "re", "salt.utils.data", "logging", "sys", "salt.utils.versions", "pip._internal.req.constructors", "pip.exceptions.InstallationError", "pip._internal.req", "types", "pip.req", "pip._internal.exceptions.InstallationError", "salt.exceptions.CommandNotFoundError"], "function_names": ["installed", "prepro", "uptodate", "pip_has_exceptions_mod", "_check_if_installed", "_from_line", "pip_has_internal_exceptions_mod", "purge_pip", "__virtual__", "normalize", "_check_pkg_version_format", "removed", "_pep440_version_cmp", "_fulfills_version_spec"], "function_calls": ["any", "_fulfills_version_spec", "prepro", "set", "_check_pkg_version_format", "globals", "str", "locals", "_from_line", "normalize", "isinstance", "len", "hasattr", "getattr", "_check_if_installed", "reversed", "pip_has_internal_exceptions_mod", "purge_pip", "iter", "_pep440_version_cmp"], "class_names": [], "class_method_calls": ["pkg.startswith", "already_installed_comments.append", "pkg.split", "pip.__version__", "line.split", "logger.exception", "spec.operator", "install_req.req", "target_pkgs.append", "install_req.specifier", "msg.format", "logger.debug", "logger.warning", "line.strip", "sys.modules", "already_installed_packages.add", "pip_install_call.get", "spec.version", "pkg_404_comms.append", "state_pkg_name.replace", "comments.append", "pip._internal", "ret.update", "install_req.name", "pkg.items", "pkgs_details.append", "types.ModuleType", "re.sub", "line.startswith", "v.__name__", "logging.getLogger", "updated.get", "pkg_resources.parse_version", "prefix.lower", "purge_pip.__pip_ver__", "package.lower", "salt.utils", "pip.req"]}, "pkgbuild.py": {"libraries": ["errno", "logging", "os"], "function_names": ["repo", "_get_missing_results", "built"], "function_calls": ["sorted", "set", "_get_missing_results", "isinstance"], "class_names": [], "class_method_calls": ["res.endswith", "results.split", "logging.getLogger", "os.listdir", "file.endswith", "exc.errno", "log.error", "__grains__.get", "errno.EACCES", "errno.ENOENT", "log.debug"]}, "pkgrepo.py": {"libraries": ["salt.utils.pkg.rpm", "salt.state.STATE_INTERNAL_KEYWORDS", "salt.exceptions.CommandExecutionError", "salt.utils.data", "salt.utils.pkg.deb", "salt.modules.aptpkg._split_repo_str", "salt.modules.aptpkg._expand_repo_def", "sys", "salt.utils.versions", "salt.exceptions.SaltInvocationError", "salt.utils.files"], "function_names": ["__virtual__", "absent", "managed"], "function_calls": ["any", "sorted", "str", "set", "_expand_repo_def", "_split_repo_str", "isinstance"], "class_names": [], "class_method_calls": ["pre.pop", "kwargs.get", "sys.modules", "post.get", "__opts__.get", "name.startswith", "reposplit.split", "__grains__.get", "exc.strerror", "pre.get", "sanitizedkwargs.pop", "sanitizedkwargs.get", "salt.utils", "kwargs.pop", "x.strip"]}, "ports.py": {"libraries": ["os", "salt.modules.freebsdports._normalize", "salt.exceptions.CommandExecutionError", "salt.utils.data", "logging", "sys", "salt.exceptions.SaltInvocationError", "salt.modules.freebsdports._options_file_exists", "copy"], "function_names": ["installed", "_repack_options", "_build_option_string", "_get_option_list", "__virtual__"], "function_calls": ["next", "_repack_options", "str", "_normalize", "_build_option_string", "_get_option_list", "iter", "_options_file_exists"], "class_names": [], "class_method_calls": ["desired_options.update", "logging.getLogger", "copy.deepcopy", "sys.modules", "options.items", "__grains__.get", "salt.utils"]}, "postgres_cluster.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["any"], "class_names": [], "class_method_calls": ["msg.format", "__opts__.get"]}, "postgres_database.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["all", "any"], "class_names": [], "class_method_calls": ["dbs.get", "db_params.get", "encoding.lower"]}, "postgres_extension.py": {"libraries": ["logging", "salt.modules.postgres"], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "mode.capitalize", "postgres._EXTENSION_NOT_INSTALLED", "postgres._EXTENSION_INSTALLED", "postgres._EXTENSION_TO_MOVE", "mode.endswith", "postgres._EXTENSION_TO_UPGRADE"]}, "postgres_group.py": {"libraries": ["logging", "salt.modules.postgres"], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["lgroups.split", "logging.getLogger", "group_attr.get", "postgres._verify_password", "postgres._DEFAULT_PASSWORDS_ENCRYPTION", "postgres._maybe_encrypt_password"]}, "postgres_initdb.py": {"libraries": [], "function_names": ["__virtual__", "present"], "function_calls": ["dict"], "class_names": [], "class_method_calls": []}, "postgres_language.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": []}, "postgres_privileges.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": []}, "postgres_schema.py": {"libraries": ["logging"], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": ["msg.format", "logging.getLogger"]}, "postgres_tablespace.py": {"libraries": ["salt.utils.dictupdate"], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": ["options.items", "dictupdate.update"]}, "postgres_user.py": {"libraries": ["logging", "salt.modules.postgres", "datetime"], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["postgres._maybe_encrypt_password", "lgroups.split", "logging.getLogger", "postgres._DEFAULT_PASSWORDS_ENCRYPTION", "valid_until.replace", "user_attr.get", "postgres._verify_password", "datetime.datetime"]}, "probes.py": {"libraries": ["logging", "salt.utils.json", "salt.utils.napalm", "copy"], "function_names": ["_clean_probes", "_set_rpm_probes", "_delete_rpm_probes", "_compare_probes", "_expand_probes", "__virtual__", "managed", "_ordered_dict_to_dict", "_schedule_probes", "_default_ret", "_retrieve_rpm_probes"], "function_calls": ["_clean_probes", "_set_rpm_probes", "_delete_rpm_probes", "_compare_probes", "set", "_expand_probes", "_ordered_dict_to_dict", "_schedule_probes", "_default_ret", "_retrieve_rpm_probes", "isinstance"], "class_names": [], "class_method_calls": ["probe_test.pop", "removed.get", "added.get", "diff.get", "add_scheduled.get", "configured_probe_tests.get", "probes_copy.items", "test_details.pop", "probe_tests.keys", "rpm_probes_config.get", "expected_probes.items", "probe_tests.pop", "configured_probes.get", "probes.items", "ret.update", "configured_probe_tests.pop", "probes.pop", "copy.deepcopy", "configured_probe_tests.keys", "configured_probes.keys", "configured_probes.pop", "probes.get", "logging.getLogger", "updated.get", "expected_probes.pop", "probe_tests.items", "probe_test.items", "salt.utils", "expected_test_details.update", "expected_probes.keys"]}, "pushover.py": {"libraries": ["urllib.parse.urljoin", "logging", "salt.version.__version__", "salt.utils.http", "http.client", "urllib.parse.urlencode"], "function_names": ["query", "validate_sound", "validate_user"], "function_calls": ["query", "urljoin", "dict", "urlencode"], "class_names": [], "class_method_calls": ["logging.getLogger", "pushover_functions.get", "response.get", "result.get", "salt.utils", "http.client", "_message.get"]}, "pyrax_queues.py": {"libraries": ["salt.utils.openstack.pyrax"], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["next", "iter"], "class_names": [], "class_method_calls": ["suop.HAS_PYRAX"]}, "rabbitmq_cluster.py": {"libraries": ["salt.utils.path", "logging", "salt.utils.functools"], "function_names": ["__virtual__", "joined"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "rabbitmq_plugin.py": {"libraries": ["salt.exceptions.CommandExecutionError", "logging"], "function_names": ["__virtual__", "disabled", "enabled"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger"]}, "rabbitmq_policy.py": {"libraries": ["salt.utils.path", "logging", "json"], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["int"], "class_names": [], "class_method_calls": ["updates.append", "logging.getLogger", "policies.get", "policy.get", "json.loads", "salt.utils", "log.debug"]}, "rabbitmq_upstream.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.utils.data", "logging", "salt.utils.dictdiffer", "json"], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["all"], "class_names": [], "class_method_calls": ["current_upstreams.get", "salt.utils", "logging.getLogger", "json.loads"]}, "rabbitmq_user.py": {"libraries": ["salt.utils.path", "logging", "salt.exceptions.CommandExecutionError"], "function_names": ["__virtual__", "_get_current_tags", "absent", "_check_perms_changes", "present"], "function_calls": ["any", "set", "_get_current_tags", "_check_perms_changes", "list", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "vhost_perms.items", "log.error", "vhost_perm.items", "salt.utils", "tags.split", "log.debug"]}, "rabbitmq_vhost.py": {"libraries": ["salt.utils.path", "logging"], "function_names": ["__virtual__", "absent", "present"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger"]}, "saltmod.py": {"libraries": ["time", "salt.utils.event", "salt.utils.data", "salt.exceptions", "salt.syspaths", "logging", "fnmatch", "sys", "salt.utils.versions", "threading", "salt.output"], "function_names": ["state", "function", "run_thread", "wait_for_event", "create_thread", "_parallel_map", "call_runner", "wheel", "__virtual__", "_fire_args", "runner", "extract_changes", "parallel_runners"], "function_calls": ["len", "next", "range", "func", "int", "str", "_parallel_map", "extract_changes", "set", "type", "iter", "_fire_args", "zip", "map", "all", "list", "isinstance"], "class_names": [], "class_method_calls": ["m_ret.values", "time.time", "obj.items", "tmp_ret.get", "runners.values", "__opts__.get", "mdata.pop", "runner_config.get", "cmd_kw.pop", "log.warning", "out.get", "fail.add", "sys.exc_info", "exc_value.with_traceback", "mdata.get", "minions_seen.append", "func_ret.setdefault", "thread.join", "id_list.index", "outputs.items", "salt.output", "log.debug", "log.trace", "no_change.add", "runners.keys", "cmd_ret.items", "salt.exceptions", "thread.start", "log.error", "sevent.get_event", "runners.items", "fail_minions.split", "fnmatch.fnmatch", "logging.getLogger", "arg.split", "id_list.remove", "state_ret.setdefault", "threading.Thread", "salt.utils", "minion.strip", "outputs.values", "cmd_kw.update"]}, "ssh_auth.py": {"libraries": ["re", "sys"], "function_names": ["_present_test", "manage", "_absent_test", "absent", "present"], "function_calls": ["len", "set", "_present_test", "_absent_test", "absent", "present", "list"], "class_names": [], "class_method_calls": ["ssh_key.split", "key.rstrip", "keys.items", "sys.modules", "name.split", "sshre.match", "keyline.split", "sshre.search", "all_potential_keys.extend", "fullkey.group", "re.compile"]}, "ssh_known_hosts.py": {"libraries": ["os", "salt.utils.platform", "salt.exceptions.CommandNotFoundError"], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["dict"], "class_names": [], "class_method_calls": ["salt.utils", "os.path"]}, "sysctl.py": {"libraries": ["salt.exceptions.CommandExecutionError", "re"], "function_names": ["__virtual__", "present"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["re.sub", "current.split"]}, "telemetry_alert.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["len", "int", "str", "float", "isinstance"], "class_names": [], "class_method_calls": ["difference.append", "post_body.items", "is_present.get", "alert_config.get"]}, "user.py": {"libraries": ["logging", "re"], "function_names": ["valid_username"], "function_calls": ["len", "isinstance"], "class_names": [], "class_method_calls": ["VALID_USERNAME.match", "re.compile", "logging.getLogger", "re.IGNORECASE"]}, "zabbix_action.py": {"libraries": ["logging", "salt.exceptions.SaltException", "json"], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["len", "str"], "class_names": [], "class_method_calls": ["json.dumps", "log.info", "logging.getLogger"]}, "zabbix_host.py": {"libraries": ["salt.utils.json", "salt.utils.dictdiffer", "collections.abc.Mapping", "copy.deepcopy"], "function_names": ["_interface_format", "_update_interfaces", "assign_templates", "__virtual__", "absent", "present"], "function_calls": ["_interface_format", "_update_interfaces", "deepcopy", "int", "sorted", "str", "set", "dict", "list", "isinstance"], "class_names": [], "class_method_calls": ["host_extra_properties.get", "curr_template_ids.append", "interfaces_list.append", "hostintf.pop", "val_details.get", "value.get", "groupids.append", "kwargs.pop", "interfaces_dict.items", "inventory_diff.changed", "cur_hostgroups.append", "intf_val.items", "val_details.update", "sum_kwargs.update", "other_interfaces.append", "inv_item.items", "requested_template_ids.append", "salt.utils", "error.append"]}, "zabbix_hostgroup.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["str"], "class_names": [], "class_method_calls": []}, "zabbix_mediatype.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["str", "int", "isinstance"], "class_names": [], "class_method_calls": ["error.append"]}, "zabbix_template.py": {"libraries": ["logging", "salt.exceptions.SaltException", "json"], "function_names": ["_adjust_object_lists", "__virtual__", "_diff_and_merge_host_list", "is_present", "absent", "_get_existing_template_c_list", "_manage_component", "present"], "function_calls": ["len", "next", "SaltException", "str", "_adjust_object_lists", "_diff_and_merge_host_list", "dict", "_get_existing_template_c_list", "_manage_component"], "class_names": [], "class_method_calls": ["CHANGE_STACK.append", "logging.getLogger", "json.dumps", "object_params.update", "q_params.update", "log.info", "d_rules.append", "discovery_components.append"]}, "zabbix_user.py": {"libraries": ["salt.utils.versions.Version", "copy.deepcopy", "salt.utils.json", "logging", "salt.exceptions.SaltException"], "function_names": ["__virtual__", "admin_password_present", "absent", "_media_format", "present"], "function_calls": ["deepcopy", "int", "str", "set", "Version", "dict", "_media_format", "all", "list"], "class_names": [], "class_method_calls": ["user_med.pop", "value.get", "seen.add", "logging.getLogger", "medattr.items", "medias_list.append", "error.append", "salt.utils", "log.debug", "media_type.get", "cur_usrgrps.append", "unique_passwords.append", "medias_dict.items", "user.get", "passwords.append", "unique_passwords.reverse"]}, "zabbix_usergroup.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["str", "sorted", "int"], "class_names": [], "class_method_calls": ["error.append"]}, "zabbix_usermacro.py": {"libraries": [], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["str", "int", "isinstance"], "class_names": [], "class_method_calls": ["error.append"]}, "zabbix_valuemap.py": {"libraries": ["logging", "salt.exceptions.SaltException", "json"], "function_names": ["__virtual__", "absent", "present"], "function_calls": ["len", "str"], "class_names": [], "class_method_calls": ["json.dumps", "log.info", "logging.getLogger"]}, "zone.py": {"libraries": ["salt.modules.zonecfg._zonecfg_resource_default_selectors", "salt.modules.zonecfg._parse_value", "salt.exceptions.CommandExecutionError", "salt.utils.dictupdate.merge", "logging", "salt.utils.odict.OrderedDict", "salt.utils.args", "salt.utils.files", "salt.utils.atomicfile"], "function_names": ["import_", "property_present", "installed", "booted", "uninstalled", "resource_present", "export", "resource_absent", "detached", "__virtual__", "halted", "absent", "attached", "property_absent", "present"], "function_calls": ["len", "OrderedDict", "property_present", "merge_dict", "resource_present", "resource_absent", "float", "_parse_value", "dict", "property_absent", "isinstance"], "class_names": [], "class_method_calls": ["properties.append", "resource.items", "logging.getLogger", "kwargs.items", "prop.items", "zonecfg_kwargs.update", "mode.lower", "log.warning", "salt.utils", "log.debug", "resource_cfg.update"]}, "syspaths.py": {"libraries": ["os", "salt.utils.win_reg", "salt.utils.platform", "logging", "sys", "os.path", "types", "salt._syspaths"], "function_names": ["_get_windows_root_dir"], "function_calls": ["_get_windows_root_dir", "hasattr", "globals", "setattr"], "class_names": [], "class_method_calls": ["__PLATFORM.startswith", "log.warning", "__generated_syspaths.BASE_THORIUM_ROOTS_DIR", "__generated_syspaths.LOGS_DIR", "__generated_syspaths.HOME_DIR", "__generated_syspaths.PIDFILE_DIR", "__generated_syspaths.SOCK_DIR", "log.debug", "__generated_syspaths.BASE_PILLAR_ROOTS_DIR", "os.environ", "__generated_syspaths.BASE_FILE_ROOTS_DIR", "sys.platform", "__generated_syspaths.BASE_MASTER_ROOTS_DIR", "__generated_syspaths.SRV_ROOT_DIR", "types.ModuleType", "__generated_syspaths.SPM_REACTOR_PATH", "__generated_syspaths.ROOT_DIR", "__generated_syspaths.LIB_STATE_DIR", "__generated_syspaths.SHARE_DIR", "__generated_syspaths.CACHE_DIR", "logging.getLogger", "__generated_syspaths.SPM_FORMULA_PATH", "__generated_syspaths.CONFIG_DIR", "os.path", "__generated_syspaths.SPM_PILLAR_PATH", "salt.utils", "__generated_syspaths.SPM_PARENT_PATH"]}, "calc.py": {"libraries": ["statistics"], "function_names": ["calc", "median_low", "opmul", "mode", "opadd", "mul", "__virtual__", "median", "median_grouped", "mean", "median_high", "add"], "function_calls": ["calc", "len"], "class_names": [], "class_method_calls": ["vals.append", "statistics.median", "statistics.mean", "statistics.mode", "statistics.median_high", "statistics.median_low", "statistics.median_grouped"]}, "check.py": {"libraries": ["logging", "salt.utils.stringutils"], "function_names": ["gt", "len_ne", "lt", "gte", "lte", "len_gt", "len_gte", "len_lte", "ne", "eq", "len_eq", "event", "contains", "len_lt"], "function_calls": ["len"], "class_names": [], "class_method_calls": ["salt.utils", "log.debug", "logging.getLogger"]}, "timer.py": {"libraries": ["time"], "function_names": ["hold"], "function_calls": [], "class_names": [], "class_method_calls": ["time.time"]}, "wheel.py": {"libraries": ["salt.wheel"], "function_names": ["cmd"], "function_calls": [], "class_names": [], "class_method_calls": ["client.cmd_async", "salt.wheel"]}, "rediscluster.py": {"libraries": ["hashlib", "os", "rediscluster", "salt.config.DEFAULT_HASH_TYPE", "logging", "salt.payload"], "function_names": ["mk_token", "__virtual__", "list_tokens", "get_token", "_redis_client", "rm_token"], "function_calls": ["str", "getattr", "_redis_client", "hash_type"], "class_names": [], "class_method_calls": ["redis_client.get", "rediscluster.exceptions", "k.decode", "logging.getLogger", "rediscluster.StrictRedisCluster", "redis_client.delete", "opts.get", "redis_client.set", "os.urandom", "salt.payload", "log.warning", "redis_client.keys"]}, "ext_nodes.py": {"libraries": ["salt.utils.yaml", "salt.utils.platform", "logging", "subprocess", "salt.utils.win_functions.escape_argument", "shlex"], "function_names": ["__virtual__", "top"], "function_calls": ["_cmd_quote", "list", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "subprocess.PIPE", "shlex.quote", "subprocess.run", "log.info", "proc.stdout", "shlex.split", "salt.utils"]}, "varstack_top.py": {"libraries": ["varstack"], "function_names": ["__virtual__", "top"], "function_calls": [], "class_names": [], "class_method_calls": ["varstack.Varstack", "vs_.evaluate"]}, "base.py": {"libraries": ["traceback", "salt.transport.zeromq", "warnings", "salt.transport.tcp", "salt.transport.local", "salt.ext.tornado.gen"], "function_names": ["__enter__", "on_recv", "send", "request_client", "close", "publish_client", "__init__", "pre_fork", "connect", "__exit__", "publish_daemon", "publish_server", "__del__", "post_fork", "request_server", "publish"], "function_calls": ["Exception", "hasattr", "getattr", "super"], "class_names": ["PublishClient", "RequestClient", "DaemonizedRequestServer", "RequestServer", "Transport", "TransportWarning", "DaemonizedPublishServer", "PublishServer"], "class_method_calls": ["self._connect_called", "traceback.format_stack", "opts.get", "self._closing", "warnings.warn", "salt.ext", "salt.transport", "self._trace"]}, "frame.py": {"libraries": ["salt.utils.msgpack"], "function_names": ["decode_embedded_strs", "frame_msg", "_decode_embedded_list", "frame_msg_ipc", "_decode_embedded_dict"], "function_calls": ["_decode_embedded_list", "_decode_embedded_dict", "isinstance"], "class_names": [], "class_method_calls": ["elem.decode", "src.decode", "output.append", "key.decode", "salt.utils", "val.decode", "src.items"]}, "ipc.py": {"libraries": ["salt.ext.tornado.locks.Lock", "errno", "time", "salt.transport.frame", "salt.ext.tornado", "socket", "salt.utils.msgpack", "salt.ext.tornado.ioloop.IOLoop", "salt.ext.tornado.iostream.IOStream", "salt.ext.tornado.iostream.StreamClosedError", "salt.ext.tornado.ioloop", "logging", "salt.ext.tornado.gen", "salt.ext.tornado.concurrent", "salt.ext.tornado.netutil", "salt.ext.tornado.ioloop.TimeoutError"], "function_names": ["future_with_timeout_callback", "return_message", "__init__", "_read", "read_sync", "handle_connection", "discard_after_closed", "_null", "_timeout_callback", "close", "_connect", "write_callback", "connect", "handle_stream", "read", "read_async", "__exit__", "_done_callback", "connected", "__enter__", "start", "send", "_write", "handle_future", "__del__", "publish"], "function_calls": ["future_with_timeout_callback", "TornadoTimeoutError", "hasattr", "super", "set", "write_callback", "FutureWithTimeout", "IOStream", "Lock", "isinstance"], "class_names": ["IPCClient", "IPCMessagePublisher", "FutureWithTimeout", "IPCMessageSubscriber", "IPCMessageServer", "IPCMessageClient", "IPCServer"], "class_method_calls": ["self._read_stream_future", "time.time", "future.add_done_callback", "stream.closed", "self._connecting_future", "self.close", "self._closing", "self.set_exception", "self._write", "self.unpacker", "self.streams", "unpacker.feed", "self.socket_path", "socket.socket", "stream.write", "socket.SO_REUSEADDR", "self._connect", "self._read_in_progress", "stream.read_bytes", "self._timeout_handle", "self._saved_data", "log.debug", "self.io_loop", "log.trace", "self.payload_handler", "self.opts", "future._future_with_timeout", "stream.set_close_callback", "socket.AF_INET", "self.__class__", "log.error", "self.sock", "self._timeout_callback", "self.connect", "self._started", "salt.ext", "socket.AF_UNIX", "self.handle_connection", "salt.transport", "header.get", "IOLoop.current", "logging.getLogger", "self.connected", "future.result", "exc.errno", "socket.SOCK_STREAM", "self.handle_stream", "stream.close", "self._future", "self.stream", "errno.EBADF", "salt.utils", "socket.SOL_SOCKET", "self._read", "self.set_result"]}, "tcp.py": {"libraries": ["os", "salt.ext.tornado.tcpclient", "salt.utils.asynchronous", "salt.master", "salt.utils.files", "urllib", "errno", "salt.ext.tornado", "salt.utils.process.SignalHandlingProcess", "salt.utils.msgpack", "salt.utils.network.ip_bracket", "salt.payload", "salt.utils.versions", "salt.ext.tornado.concurrent", "salt.transport.frame", "salt.transport.ipc", "queue", "socket", "salt.exceptions.SaltReqTimeoutError", "salt.ext.tornado.iostream", "multiprocessing", "logging", "threading", "salt.ext.tornado.gen", "salt.ext.tornado.util", "salt.ext.tornado.tcpserver", "salt.exceptions.SaltClientError", "salt.utils.platform", "uuid", "salt.ext.tornado.netutil"], "function_names": ["on_recv", "topic_support", "__init__", "_do_send", "_message_id", "_get_bind_addr", "run", "close", "_decode_messages", "connect", "getstream", "_config_resolver", "post_fork", "handle_stream", "_stream_return", "timeout_message", "socket", "_set_tcp_keepalive", "__exit__", "handle_message", "publish_daemon", "wrap_recv", "publish_payload", "__enter__", "_get_socket", "send", "check_close", "socket_queue_thread", "pre_fork", "_create_stream", "decode_payload", "remove_client", "remove_message_timeout", "_stream_read", "__setstate__", "__getstate__", "handle_future", "__del__", "publish"], "function_calls": ["super", "Subscriber", "LoadBalancerWorker", "_get_bind_addr", "int", "set", "SaltReqTimeoutError", "ClosingError", "TCPClientKeepAlive", "ip_bracket", "_set_tcp_keepalive", "Resolver", "str", "callback", "MessageClient", "isinstance", "PubServer", "hasattr", "_get_socket", "SaltMessageServer"], "class_names": ["TCPReqServer", "TCPClientKeepAlive", "PubServer", "TCPReqClient", "LoadBalancerServer", "Resolver", "SaltMessageServer", "LoadBalancerWorker", "Subscriber", "TCPPubClient", "MessageClient", "ClosingError", "TCPPublishServer"], "class_method_calls": ["io_loop.start", "client.close", "self._message_id", "self.clients", "pull_sock.close", "stream.write", "self.__init__", "stream.read_bytes", "cls._resolver_configured", "socket.TCP_KEEPINTVL", "client.address", "self._stream_return_running", "kwargs.get", "self.message_client", "socket.AF_INET", "self._socket", "queue.Empty", "salt.transport", "self.check_close", "header.get", "self.thread", "self.send_future_map", "self.connect_callback", "self.remove_presence_callback", "self.getstream", "self._config_resolver", "errno.ECONNABORTED", "socket.AF_INET6", "self.handle_message", "salt.utils", "self._stream_read", "self.decode_payload", "socket.SHUT_RDWR", "future.add_done_callback", "self.backoff", "self._closing", "self.timeout_message", "log.warning", "socket.socket", "socket.SO_REUSEADDR", "self._read_until_future", "pull_sock.start", "socket.SOL_TCP", "client.id_", "self.io_loop", "self._on_recv", "self.pub_sock", "log.error", "self.__class__", "log.exception", "self.message_handler", "salt.ext", "self.presence_callback", "self._stop", "self._stream", "stream.connect", "self.connected", "to_remove.append", "socket.SOCK_STREAM", "os.path", "threading.Thread", "self.socket_queue", "socket.SOL_SOCKET", "self.disconnect_callback", "client._read_until_future", "self.host", "process_manager.add_process", "self.remove_client", "kwargs.pop", "multiprocessing.Queue", "future.set_exception", "sock.bind", "self.publish_port", "socket.SIO_KEEPALIVE_VALS", "self.presence_events", "sock.setblocking", "parse.netloc", "self._handle_connection", "log.info", "self.publish_daemon", "pub_server.add_socket", "urllib.parse", "self.source_ip", "self.address", "exc.errno", "self._stream_return", "self.stream", "uuid.uuid4", "self._connect_called", "client.stream", "self._connecting_future", "self.close", "self.pub_server", "threading.Event", "self._closed", "self.id_", "socket.SO_KEEPALIVE", "self.send_timeout_map", "unpacker.feed", "sock.ioctl", "self.backlog", "errno.ENOTCONN", "self._tcp_client", "socket.TCP_KEEPCNT", "log.debug", "self.source_port", "socket.TCP_KEEPIDLE", "log.trace", "self.opts", "sock.listen", "self.socket_queue_thread", "self.stop", "opts.get", "self.connect", "self._resolver_configured", "sock.setsockopt", "io_loop.make_current", "logging.getLogger", "future.result", "self.port", "stream.close", "self.resolver", "self.req_server"]}, "zeromq.py": {"libraries": ["salt.exceptions.SaltSystemExit", "logging", "salt.utils.versions", "salt.utils.network.ip_bracket", "zmq"], "function_names": ["check_ipc_path_max_len", "ip_bracket"], "function_calls": ["len", "getattr", "int", "_new_ip_bracket", "SaltSystemExit", "tuple"], "class_names": [], "class_method_calls": ["logging.getLogger", "zmq.__version__", "log.exception", "zmq.zmq_version", "salt.utils", "log.debug"]}, "aggregation.py": {"libraries": ["logging", "salt.utils.odict.OrderedDict", "copy"], "function_names": ["levelise", "mark", "aggregate", "Scalar"], "function_calls": ["sequence_class", "bool", "aggregate", "int", "Sequence", "levelise", "mark", "map_class", "isinstance"], "class_names": ["Map", "Sequence", "Aggregate"], "class_method_calls": ["logging.getLogger", "response.append", "obj_a.__class__", "log.info", "copy.copy", "log.warning", "obj_b.items", "log.debug"]}, "args.py": {"libraries": ["collections.namedtuple", "salt.utils.yaml", "re", "salt.utils.data", "logging", "fnmatch", "salt.utils.versions", "inspect", "salt.exceptions.SaltInvocationError", "salt.utils", "salt.utils.jid", "copy", "shlex"], "function_names": ["shlex_split", "test_mode", "split_input", "get_function_argspec", "format_call", "prepare_kwargs", "invalid_kwargs", "arg_lookup", "mapper", "condition_input", "yamlify_arg", "clean_kwargs", "parse_input", "parse_kwarg", "parse_function", "argspec_report"], "function_calls": ["any", "arg_lookup", "dict", "list", "get_function_argspec", "TypeError", "condition_input", "zip", "all", "str", "callable", "_ArgSpec", "parse_kwarg", "tuple", "isinstance", "len", "hasattr", "namedtuple", "yamlify_arg", "SaltInvocationError", "map"], "class_names": [], "class_method_calls": ["sig.parameters", "sh.escapedquotes", "val.split", "fun.startswith", "x.strip", "kwargs.items", "_kwargs.update", "func.__wrapped__", "fnmatch.filter", "param.VAR_KEYWORD", "brackets.pop", "aspec.args", "KWARG_REGEX.match", "original_arg.strip", "invalid_kwargs.items", "aspec.keywords", "args.append", "shlex.shlex", "original_arg.startswith", "fun.__module__", "word.append", "defaults.append", "data.pop", "param.VAR_POSITIONAL", "data.items", "key.startswith", "aspec.defaults", "re.compile", "inspect.signature", "extra.keys", "brackets.append", "copy.deepcopy", "fun.__name__", "_args.append", "missing_args.append", "re.UNICODE", "ret.get", "param.name", "param.default", "all_kwargs.items", "param.POSITIONAL_OR_KEYWORD", "data.copy", "inspect._empty", "arg.strip", "arg.pop", "logging.getLogger", "ret.append", "args.pop", "arg.lower", "shlex.split", "salt.utils", "param.kind"]}, "asynchronous.py": {"libraries": ["salt.ext.tornado.ioloop", "logging", "sys", "threading", "salt.ext.tornado.concurrent", "contextlib"], "function_names": ["__enter__", "_wrap", "close", "__init__", "__getattr__", "_populate_async_methods", "__exit__", "current_ioloop", "wrap", "__repr__", "_target"], "function_calls": ["getattr", "hasattr", "set", "method", "cls", "list"], "class_names": ["SyncWrapper"], "class_method_calls": ["io_loop.stop", "self.close", "self._async_methods", "orig_loop.make_current", "sys.exc_info", "io_loop.close", "thread.join", "self._wrap", "self.loop_kwarg", "self.cls", "self._close_methods", "self.io_loop", "io_loop.run_sync", "contextlib.contextmanager", "log.error", "thread.start", "log.exception", "salt.ext", "io_loop.make_current", "logging.getLogger", "results.append", "self._target", "threading.Thread", "self.obj"]}, "atomicfile.py": {"libraries": ["errno", "time", "ctypes", "os", "shutil", "salt.utils.win_dacl", "sys", "random", "tempfile"], "function_names": ["__enter__", "close", "atomic_open", "__init__", "_rename_atomic", "__getattr__", "_rename", "__exit__", "atomic_rename", "__repr__"], "function_calls": ["_CreateTransaction", "getattr", "str", "_rename_atomic", "_MoveFileTransacted", "_rename", "TypeError", "atomic_rename", "_AtomicWFile", "_CommitTransaction", "_CloseHandle", "_MoveFileEx", "isinstance"], "class_names": ["_AtomicWFile"], "class_method_calls": ["os.unlink", "time.sleep", "shutil.copymode", "self.close", "sys.getfilesystemencoding", "ntf.name", "errno.EEXIST", "self._filename", "sys.maxint", "tempfile.NamedTemporaryFile", "ctypes.windll", "os.name", "st.st_gid", "err.errno", "os.stat", "self.__class__", "random.randint", "self._fh", "os.rename", "st.st_uid", "self._tmp_filename", "os.path", "os.chown", "salt.utils", "os.remove"]}, "aws.py": {"libraries": ["time", "hashlib", "requests", "salt.config", "re", "salt.utils.xmlutil", "hmac", "salt.utils.hashutils", "logging", "urllib.parse", "random", "binascii", "datetime.datetime", "xml.etree.ElementTree", "copy"], "function_names": ["get_metadata", "sig4", "query", "sleep_exponential_backoff", "get_location", "assumed_creds", "sig2", "_sig_key", "get_region_from_metadata", "_sign", "creds"], "function_calls": ["get_metadata", "sig4", "get_location", "sleep_exponential_backoff", "sorted", "creds", "assumed_creds", "sig2", "_sig_key", "get_region_from_metadata", "_sign", "zip", "map", "enumerate", "list", "isinstance"], "class_names": [], "class_method_calls": ["requests.get", "new_headers.keys", "time.sleep", "params_with_headers.keys", "str.lower", "sig.strip", "token_result.text", "salt.utils", "a_canonical_headers.append", "exc.response", "log.warning", "querystring.encode", "params_with_headers.get", "prov_dict.get", "token_result.ok", "result.json", "result.raise_for_status", "timenow.strftime", "requests.exceptions", "header.lower", "hashed.digest", "a_signed_headers.append", "headers.copy", "endpoint.encode", "result.text", "re.compile", "log.debug", "random.uniform", "provider.copy", "log.trace", "providers.get", "binascii.b2a_base64", "item.tag", "copy.deepcopy", "data.get", "time.mktime", "provider.get", "method.encode", "log.error", "opts.get", "result.status_code", "log.info", "xml.to_dict", "params.copy", "urllib.parse", "valid_session_name_re.sub", "datetime.utcnow", "logging.getLogger", "requests.request", "ret.append", "salt.config", "msg.encode", "requests.put", "hashlib.sha256", "ET.fromstring", "hmac.new", "prov_dict.keys", "provider_shadow.pop", "result.content", "string_to_sign.encode"]}, "boto3mod.py": {"libraries": ["hashlib", "boto3.session", "botocore", "salt.loader.context", "logging", "sys", "salt.utils.versions", "salt.utils.stringutils", "salt.exceptions.SaltInvocationError", "boto3", "botocore.exceptions", "functools.partial"], "function_names": ["paged_call", "_get_profile", "cache_id_func", "assign_funcs", "exactly_n", "exactly_one", "json_objs_equal", "_option", "__virtual__", "get_connection", "ordered", "cache_id", "get_region", "get_connection_func", "get_error"], "function_calls": ["function", "_get_profile", "cache_id_func", "range", "any", "sorted", "exactly_n", "str", "_option", "iter", "partial", "ordered", "SaltInvocationError", "setattr", "get_connection_func", "all", "isinstance"], "class_names": [], "class_method_calls": ["logging.CRITICAL", "obj.items", "salt.loader", "__salt_loader__.named_context", "session.client", "__context__.values", "kwargs.pop", "__context__.get", "sys.modules", "hashlib.md5", "__pillar__.get", "botocore.exceptions", "__context__.update", "log.info", "ret.get", "__context__.clear", "logging.getLogger", "_profile.get", "boto3.session", "__context__.items", "salt.utils", "e.args"]}, "boto_elb_tag.py": {"libraries": [], "function_names": ["get_tag_descriptions", "__init__", "endElement", "__virtual__", "startElement"], "function_calls": ["TagSet"], "class_names": ["TagSet", "TagDescriptions"], "class_method_calls": ["self._current_value", "self._tags", "self._current_key", "dict.__init__", "self.load_balancer_name", "self.connection", "self._load_balancer_name", "self.tags"]}, "botomod.py": {"libraries": ["salt.loader.minion_mods", "hashlib", "salt.loader.context", "logging", "sys", "salt.utils.versions", "salt.utils.stringutils", "salt.exceptions.SaltInvocationError", "boto", "boto.exception", "functools.partial"], "function_names": ["paged_call", "_get_profile", "cache_id_func", "assign_funcs", "exactly_n", "__virtual__", "get_connection", "cache_id", "exactly_one", "get_connection_func", "get_error"], "function_calls": ["function", "_get_profile", "hasattr", "getattr", "cache_id_func", "minion_mods", "any", "str", "exactly_n", "range", "iter", "__import__", "partial", "SaltInvocationError", "setattr", "get_connection_func", "all", "isinstance"], "class_names": [], "class_method_calls": ["logging.CRITICAL", "salt.loader", "__salt_loader__.named_context", "e.error_code", "__context__.values", "kwargs.pop", "__context__.get", "e.reason", "sys.modules", "svc_mod.connect_to_region", "hashlib.md5", "boto.exception", "__context__.update", "ret.get", "e.message", "e.status", "__context__.clear", "logging.getLogger", "_profile.get", "__context__.items", "salt.utils"]}, "channel.py": {"libraries": ["copy"], "function_names": ["iter_transport_opts"], "function_calls": ["set"], "class_names": [], "class_method_calls": ["opts.get", "t_opts.update", "transports.add", "copy.deepcopy"]}, "color.py": {"libraries": ["os", "salt.utils.yaml", "salt.utils.data", "logging", "salt.utils.textformat.TextFormat", "salt.utils.files"], "function_names": ["get_colors", "get_color_theme"], "function_calls": ["TextFormat", "get_color_theme", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils", "os.path", "log.warning", "colors.update"]}, "compat.py": {"libraries": ["salt.loader", "sys", "types", "copy", "importlib"], "function_names": ["cmp", "reload", "_deepcopy_method", "pack_dunder", "deepcopy_bound"], "function_calls": ["hasattr", "reload", "type", "setattr", "isinstance"], "class_names": [], "class_method_calls": ["mod.__opts__", "x.im_class", "sys.modules", "copy.deepcopy", "types.MethodType", "salt.loader", "copy._deepcopy_dispatch", "x.im_func", "importlib.reload", "x.im_self"]}, "configcomparer.py": {"libraries": [], "function_names": ["compare_and_update_config"], "function_calls": ["len", "compare_and_update_config", "enumerate", "isinstance"], "class_names": [], "class_method_calls": ["config.items", "update_config.get", "update_config.append"]}, "ctx.py": {"libraries": ["threading"], "function_names": ["__enter__", "__init__", "__exit__", "current", "__get__", "__call__"], "function_calls": ["hasattr"], "class_names": ["ClassProperty", "RequestContext"], "class_method_calls": ["_state.current_request", "threading.local", "self._current_request", "cls._state", "self._prev_request", "self.__class__", "self.fget"]}, "dateutils.py": {"libraries": ["timelib", "salt.utils.decorators.jinja.jinja_filter", "salt.utils.stringutils", "datetime"], "function_names": ["date_cast", "strftime", "total_seconds"], "function_calls": ["int", "date_cast", "jinja_filter", "float", "RuntimeError", "ValueError", "isinstance"], "class_names": [], "class_method_calls": ["timelib.strtodatetime", "date.isdigit", "td.days", "td.seconds", "salt.utils", "datetime.datetime", "td.microseconds"]}, "debug.py": {"libraries": ["traceback", "time", "os", "signal", "sys", "inspect", "salt.utils.stringutils", "salt.utils.files", "tempfile", "yappi"], "function_names": ["enable_sig_handler", "_makepretty", "enable_sigusr2_handler", "caller_name", "enable_sigusr1_handler", "_handle_sigusr1", "_handle_sigusr2", "inspect_stack"], "function_calls": ["len", "enable_sig_handler", "_makepretty", "hasattr", "getattr", "int"], "class_names": [], "class_method_calls": ["os.getpid", "time.time", "sys.stderr", "yappi.is_running", "module.__name__", "yappi.clear_stats", "parentframe.f_locals", "inspect.getmodule", "yappi.get_func_stats", "traceback.print_stack", "tempfile.gettempdir", "name.append", "parentframe.f_code", "signal.signal", "printout.write", "yappi.start", "os.path", "inspect.getframeinfo", "inspect.stack", "salt.utils", "yappi.stop"]}, "path.py": {"libraries": ["os"], "function_names": ["is_writeable", "is_executable", "is_readable"], "function_calls": [], "class_names": [], "class_method_calls": ["os.access", "os.F_OK", "os.path", "os.R_OK", "os.X_OK", "os.W_OK"]}, "dictdiffer.py": {"libraries": ["collections.abc.Mapping", "copy"], "function_names": ["_get_values", "_unchanged", "diff", "unchanged", "__init__", "new_values", "changes_str", "_changed", "_get_diffs", "deep_diff", "added", "_it_addrm", "diffs", "_get_changes", "changed", "recursive_diff", "removed", "old_values"], "function_calls": ["_unchanged", "super", "sorted", "set", "_changed", "DictDiffer", "RecursiveDictDiffer", "list", "isinstance"], "class_names": ["RecursiveDictDiffer", "DictDiffer"], "class_method_calls": ["stack.pop", "cls.NONE_VALUE", "self.current_dict", "self.set_past", "self.ignore_unset_values", "self._get_values", "keys.append", "self.intersect", "self.past_dict", "tmp_new.get", "self._get_diffs", "self._it_addrm", "stack.extend", "self.set_current", "copy.deepcopy", "tmp_old.get", "changes_strings.append", "self.diffs", "cls._get_values", "cls._get_changes", "tmps.append", "self._diffs", "changes_strings.extend", "self.NONE_VALUE", "ret_dict.update", "cls._get_diffs", "self._get_changes", "keys.extend"]}, "dicttrim.py": {"libraries": ["salt.payload", "sys"], "function_names": ["trim_dict", "_trim_dict_in_dict"], "function_calls": ["_trim_dict_in_dict", "float", "isinstance"], "class_names": [], "class_method_calls": ["salt.payload", "sys.getsizeof"]}, "dictupdate.py": {"libraries": ["salt.defaults.DEFAULT_TARGET_DELIM", "salt.utils.data", "logging", "salt.utils.decorators.jinja.jinja_filter", "salt.exceptions.SaltInvocationError", "salt.utils.odict.OrderedDict", "collections.abc.Mapping", "salt.serializers.yamlex.merge_recursive", "copy"], "function_names": ["append_dict_key_value", "merge_overwrite", "ensure_dict_key", "extend_dict_key_value", "merge_list", "update", "merge_recurse", "_dict_rpartition", "merge", "set_dict_key_value", "update_dict_key_value", "merge_aggregate"], "function_calls": ["OrderedDict", "merge_overwrite", "ensure_dict_key", "merge_list", "update", "type", "jinja_filter", "set", "SaltInvocationError", "TypeError", "merge_recurse", "_dict_rpartition", "isinstance", "merge_aggregate", "list", "_yamlex_merge_recursive"], "class_names": [], "class_method_calls": ["upd.keys", "dest.get", "renderer.split", "dest.keys", "keys.rpartition", "logging.getLogger", "copy.deepcopy", "obj_a.items", "merged.extend", "renderer.startswith", "a_keys.pop", "log.warning", "salt.utils", "keys.split"]}, "dns.py": {"libraries": ["itertools", "functools", "salt.modules.cmdmod", "tldextract", "salt.utils.stringutils", "salt.utils.files", "ssl", "string", "shlex", "hashlib", "salt.utils.odict.OrderedDict", "random", "socket", "re", "salt._compat.ipaddress", "salt.utils.network", "logging", "dns.resolver", "binascii", "salt.utils.path", "base64"], "function_names": ["_weighted_order", "sshfp_data", "srv_name", "_lookup_host", "host", "spf_rec", "validate", "tlsa_rec", "_rec2data", "srv_rec", "_multi_srvr", "_wrapper", "_to_port", "sshfp_rec", "_lookup_dig", "_data_clean", "services", "_lookup_dnspython", "parse_resolv", "tlsa_data", "_tree", "_cast", "service", "_lookup_gai", "lookup", "a_rec", "_data2rec_group", "_data2rec", "query", "caa_rec", "aaaa_rec", "mx_rec", "_lookup_nslookup", "soa_rec", "_lookup_drill", "mx_data", "ptr_name", "srv_data"], "function_calls": ["_weighted_order", "any", "resolver", "resolv_func", "srv_name", "dict", "enumerate", "list", "_rec2data", "OrderedDict", "next", "_multi_srvr", "int", "sum", "type", "set", "rec_cast", "KeyError", "_to_port", "_data_clean", "zip", "_tree", "_cast", "str", "lookup", "ValueError", "_data2rec_group", "_data2rec", "query", "isinstance", "len", "float", "iter", "ptr_name"], "class_names": ["RFC"], "class_method_calls": ["nameservers.append", "resolver.query", "schema.keys", "data.startswith", "ip.with_netmask", "RFC.SSHFP_ALGO", "rr.to_text", "recs.pop", "mech_spec.find", "RFC.SSHFP_HASH", "dns.exception", "resolver.nameservers", "svc_res.get", "base64.b64decode", "svc.isdigit", "re.search", "pp_res.get", "res.append", "mech_spec.startswith", "socket.AF_INET", "RFC.SRV_PROTO", "dns.resolver", "line.startswith", "ssl.PEM_cert_to_DER_cert", "itertools.takewhile", "socket.AF_INET6", "svc_def.startswith", "salt.utils", "ip_net.network_address", "string.whitespace", "schema.items", "curr_proto.append", "rdata.pop", "line.split", "rdtype.upper", "hasher.hexdigest", "svc_def.split", "log.warning", "socket.getaddrinfo", "data.endswith", "svc_def.pop", "socket.gaierror", "RFC.TLSA_SELECT", "rdata.values", "name.endswith", "ref.items", "res.get", "log.error", "data.values", "ip_net.version", "hashlib.new", "_stdout.splitlines", "shlex.split", "ipaddress.ip_address", "res.items", "qres.items", "svc_def.strip", "salt.modules", "mods.add", "val.lower", "rec_cast.keys", "line.strip", "schema.values", "val.version", "RFC.TLSA_USAGE", "rec_data.split", "ip_addr.version", "dns.flags", "spf_fields.pop", "param.split", "options.append", "ip6_nameservers.append", "val.strip", "log.info", "functools.wraps", "comment.strip", "random.random", "ipaddress.ip_interface", "weights.pop", "svc_defs.readlines", "rdata.split", "RFC.TLSA_MATCHING", "answer.startswith", "pub.strip", "resolver.lifetime", "hasher.update", "val.split", "sortlist.append", "socket.SOCK_RAW", "ipaddress.ip_network", "domain.find", "log.debug", "binascii.b2a_hex", "domain.rstrip", "opts.get", "ipaddress.IPv6Address", "name.find", "resolver.ednsflags", "mech_spec.split", "logging.getLogger", "data.strip", "ipaddress.IPv4Address", "RFC.CAA_TAGS", "dns.rdatatype", "ip4_nameservers.append", "tldextract.extract", "RFC.validate"]}, "container.py": {"libraries": ["salt.exceptions.SaltInvocationError", "os"], "function_names": ["device_write_iops", "user", "volumes", "network_mode", "dns_opt", "pid_mode", "_post_processing", "detach", "mac_address", "group_add", "device_write_bps", "environment", "host_config", "log_opt", "stop_timeout", "stdin_open", "cpu_group", "links", "security_opt", "device_read_iops", "extra_hosts", "read_only", "command", "_merge_keys", "cap_drop", "pids_limit", "shm_size", "dns", "memswap_limit", "ports", "restart_policy", "_format_port", "publish_all_ports", "sysctls", "entrypoint", "cpu_period", "oom_kill_disable", "isolation", "mem_limit", "privileged", "volumes_from", "log_driver", "port_bindings", "hostname", "volume_driver", "working_dir", "tmpfs", "cpuset_cpus", "tty", "labels", "stop_signal", "lxc_conf", "ipc_mode", "mem_swappiness", "devices", "binds", "device_read_bps", "ulimits", "domainname", "blkio_weight", "name", "oom_score_adj", "cap_add", "storage_opt", "userns_mode", "network_disabled", "blkio_weight_device", "auto_remove", "cpuset_mems", "cpu_shares", "dns_search"], "function_calls": ["len", "range", "int", "str", "set", "_format_port", "SaltInvocationError", "all", "enumerate", "list", "isinstance"], "class_names": [], "class_method_calls": ["ALIASES.items", "helpers.translate_str", "helpers.translate_int", "helpers.translate_key_val", "helpers.split", "auto_volumes.append", "helpers.translate_bool", "helpers.translate_stringlist", "item.partition", "kwargs.pop", "helpers.get_port_range", "helpers.translate_dict", "proto.lower", "container_port.partition", "helpers.translate_device_rates", "helpers.validate_ip", "helpers.NOTSET", "actual_volumes.sort", "new_ports.update", "helpers.get_port_def", "helpers.translate_command", "kwargs.get", "ports_to_open.update", "actual_volumes.extend", "new_ports.add", "helpers.translate_labels", "kwargs.setdefault", "cport.split", "helpers.map_vals", "os.path", "helpers.translate_bytes"]}, "helpers.py": {"libraries": ["salt.utils.data", "salt.exceptions.SaltInvocationError", "os", "salt.utils.network"], "function_names": ["validate_subnet", "translate_dict", "get_port_range", "translate_int", "translate_bool", "translate_labels", "get_port_def", "validate_ip", "translate_str", "translate_key_val", "split", "translate_device_rates", "translate_command", "map_vals", "translate_bytes", "translate_stringlist"], "function_calls": ["len", "next", "bool", "translate_stringlist", "int", "str", "zip", "iter", "dict", "split", "object", "SaltInvocationError", "map_vals", "enumerate", "ValueError", "isinstance"], "class_names": [], "class_method_calls": ["proto.lower", "item.split", "port_num.partition", "extra_opts.pop", "os.path", "salt.utils", "elements.extend", "x.strip"]}, "entrypoints.py": {"libraries": ["time", "functools", "logging", "salt._compat.importlib_metadata", "types"], "function_names": ["timed_lru_cache", "name_and_version_from_entry_point", "_wrapped", "_wrapper", "iter_entry_points"], "function_calls": ["timed_lru_cache", "f"], "class_names": [], "class_method_calls": ["entry_point.dist", "types.SimpleNamespace", "entry_points_listing.append", "logging.getLogger", "importlib_metadata.entry_points", "time.monotonic", "f.cache_clear", "entry_points.items", "f.delta", "functools.wraps", "entry_point.name", "entry_points.select", "f.expiration", "functools.lru_cache"]}, "environment.py": {"libraries": ["os"], "function_names": ["get_module_environment"], "function_calls": [], "class_names": [], "class_method_calls": ["env.get", "os.path", "m_names.append", "result.update", "env_src.get"]}, "etcd_util.py": {"libraries": ["etcd", "salt.utils.msgpack", "urllib3.exceptions.ReadTimeoutError", "logging", "salt.utils.versions", "urllib3.exceptions.MaxRetryError", "etcd3", "salt.exceptions.SaltException"], "function_names": ["write", "delete", "_flatten", "__init__", "watch", "get_conn", "_maybe_encode_key", "_get_etcd_opts", "_decode_kv", "update", "set", "rm", "_maybe_decode_key", "read", "write_file", "_maybe_decode_value", "_maybe_encode_value", "_expand", "tree", "ls", "get", "_expand_recurse", "write_directory"], "function_calls": ["len", "hasattr", "getattr", "EtcdClientV3", "super", "EtcdLibraryNotInstalled", "str", "EtcdUtilWatchTimeout", "EtcdClient", "_get_etcd_opts", "IncompatibleEtcdRequirements", "NotImplementedError", "Etcd3DirectoryException", "isinstance"], "class_names": ["EtcdClientV3", "EtcdUtilWatchTimeout", "EtcdLibraryNotInstalled", "EtcdClient", "IncompatibleEtcdRequirements", "Etcd3DirectoryException", "EtcdBase"], "class_method_calls": ["self._expand_recurse", "opts_merged.update", "result.pop", "self._expand", "self._decode_kv", "self.host", "etcd.EtcdNotDir", "self._maybe_encode_key", "self.write", "etcd.EtcdException", "log.warning", "value.decode", "kv.value", "lease.ID", "kwargs.pop", "tree.items", "self.xargs", "opts_pillar.get", "etcd.EtcdConnectionFailed", "etcd.EtcdDirNotEmpty", "self.get", "auth.copy", "self.encode_keys", "opts_merged.pop", "self.delete", "flat.update", "self._maybe_decode_value", "key.decode", "self._maybe_encode_value", "path.endswith", "k.strip", "fields.items", "self.raw_values", "data.items", "item.value", "path.strip", "items.children", "self.conf", "log.debug", "result.key", "result.deleted", "self.read", "etcd.EtcdRootReadOnly", "self._maybe_decode_key", "self.tree", "client.tree", "kwargs.get", "watcher.watch_once", "log.error", "lease.grant", "opts.get", "self.raw_keys", "result.value", "log.info", "items.pop", "path.encode", "key.lstrip", "kv.key", "self.unicode_errors", "extra_kwargs.setdefault", "item.dir", "item.key", "logging.getLogger", "self.encode_values", "self.write_file", "etcd3.Client", "kvs.items", "etcd.EtcdKeyNotFound", "self.client", "self.write_directory", "self.port", "conf.get", "salt.utils", "etcd.EtcdNotFile", "etcd.Client", "self._flatten"]}, "extend.py": {"libraries": ["os", "salt.serializers.yaml.deserialize", "shutil", "jinja2.Template", "logging", "sys", "salt.utils.odict.OrderedDict", "click", "salt.utils.files", "tempfile", "salt.version", "datetime.date"], "function_names": ["run", "_fetch_templates", "_get_template", "apply_template", "_prompt_user_variable", "_mergetree", "_prompt_choice", "_mergetreejinja"], "function_calls": ["OrderedDict", "deserialize", "_mergetree", "_fetch_templates", "print", "enumerate", "_get_template", "apply_template", "_prompt_user_variable", "run", "_prompt_choice", "zip", "Template", "_mergetreejinja", "list"], "class_names": [], "class_method_calls": ["shutil.copy2", "templates.append", "os.listdir", "date.today", "param_dict.copy", "choice_map.keys", "template.get", "extension_context.get", "salt.version", "tempfile.mkdtemp", "context.update", "shutil.copytree", "log.debug", "sys.exit", "log.info", "choice_map.items", "click.Choice", "os.mkdir", "logging.getLogger", "click.prompt", "dest_file.write", "source_file.read", "os.path", "val.get", "salt.utils"]}, "extmods.py": {"libraries": ["os", "salt.fileclient", "salt.utils.path", "salt.config.DEFAULT_HASH_TYPE", "salt.utils.hashutils", "shutil", "logging", "salt.utils.url", "salt.utils.files"], "function_names": ["_listdir_recursively", "_list_emptydirs", "sync"], "function_calls": ["_list_emptydirs", "bool", "set", "_listdir_recursively", "isinstance"], "class_names": [], "class_method_calls": ["extmod_blacklist.split", "remote.add", "os.makedirs", "saltenv.split", "salt.fileclient", "emptydirs.append", "os.sep", "shutil.rmtree", "shutil.copyfile", "log.debug", "log.error", "opts.get", "fileclient.cache_dir", "log.info", "cache.extend", "logging.getLogger", "ret.append", "file_list.append", "os.path", "salt.utils", "os.remove", "extmod_whitelist.split"]}, "filebuffer.py": {"libraries": ["salt.exceptions.SaltException", "salt.utils.stringutils", "salt.utils.files"], "function_names": ["__enter__", "next", "__iter__", "__init__", "__exit__", "buffered"], "function_calls": ["InvalidFileMode"], "class_names": ["BufferedReader", "InvalidFileMode"], "class_method_calls": ["self.__chunk_size", "self.__path", "self.__max_in_mem", "self.__file", "self.__buffered", "salt.utils"]}, "files.py": {"libraries": ["os", "salt.utils.stringutils", "fcntl", "salt.exceptions.FileLockError", "tempfile", "contextlib", "salt.exceptions.MinionError", "errno", "time", "salt.exceptions.CommandExecutionError", "shutil", "io", "re", "logging", "urllib.parse", "codecs", "salt.utils.path", "salt.utils.platform", "salt.modules.selinux", "salt.utils.decorators.jinja.jinja_filter", "subprocess", "stat"], "function_names": ["case_insensitive_filesystem", "check_system_encoding", "is_binary", "_replace", "safe_walk", "check_utf8_markers", "guess_archive_type", "fpopen", "st_mode_to_octal", "check_ascii", "rename", "wait_lock", "mkstemp", "get_encoding", "safe_filename_leaf", "_onerror", "is_text", "remove", "rm_rf", "list_files", "safe_rm", "check_bom", "_raise_error", "recursive_copy", "__clean_tmp", "normalize_mode", "backup_minion", "set_umask", "copyfile", "is_empty", "safe_filepath", "int2byte", "human_size_to_bytes", "is_fcntl_available", "get_umask", "flopen", "process_read_exception", "fopen"], "function_calls": ["oct", "onerror", "any", "check_system_encoding", "safe_walk", "list", "check_utf8_markers", "open", "func", "int", "check_ascii", "jinja_filter", "set", "TypeError", "mkstemp", "OSError", "safe_filename_leaf", "range", "str", "rm_rf", "CommandExecutionError", "check_bom", "MinionError", "_raise_error", "ValueError", "isinstance", "__clean_tmp", "backup_minion", "len", "hasattr", "int2byte", "bytes", "float", "is_fcntl_available", "FileLockError", "fopen"], "class_names": [], "class_method_calls": ["f_handle.fileno", "exc.strerror", "ret.add", "fcntl.FD_CLOEXEC", "tmp_file.name", "size_exp_map.get", "os.fdopen", "_seen.add", "dir_sep.join", "contextlib.contextmanager", "kwargs.get", "fcntl.LOCK_UN", "_data.decode", "time.strftime", "data.decode", "d_stat.st_mode", "fcntl.flock", "logging.DEBUG", "os.umask", "fstat.st_mode", "fcntl.F_SETFD", "stat.S_IMODE", "salt.utils", "io.DEFAULT_BUFFER_SIZE", "fcntl.LOCK_SH", "codecs.BOM_UTF32_BE", "d_stat.st_gid", "os.close", "re.match", "match.group", "fcntl.LOCK_EX", "shutil.copyfile", "codecs.BOM_UTF32_LE", "errno.ENOENT", "tempfile.NamedTemporaryFile", "fcntl.fcntl", "codecs.BOM_UTF16_BE", "name.endswith", "log.error", "errno.EACCES", "re.UNICODE", "re_obj.group", "os.rename", "fstat.st_gid", "shutil.move", "os.path", "name.lower", "dname.replace", "codecs.BOM_UTF16_LE", "os.makedirs", "salt.modules", "kwargs.pop", "errno.EEXIST", "os.sep", "root.replace", "os.chmod", "status.st_dev", "status.st_ino", "path.rsplit", "fcntl.F_GETFD", "fstat.st_uid", "os.stat", "mode.strip", "os.devnull", "_data.startswith", "os.O_WRONLY", "urllib.parse", "codecs.BOM_UTF8", "exc.errno", "block.translate", "os.open", "fp_.read", "stat.S_IWUSR", "os.chown", "fp2_.read", "os.remove", "block.decode", "os.O_EXCL", "time.sleep", "time.time", "os.listdir", "os.access", "os.O_CREAT", "shutil.rmtree", "nondirs.append", "os.W_OK", "log.debug", "subprocess.call", "log.trace", "dirs.append", "d_stat.st_uid", "re.sub", "mode.replace", "HASHES.items", "logging.getLogger", "dir_sep.encode", "tempfile.mkstemp"]}, "find.py": {"libraries": ["grp", "time", "pwd", "os", "subprocess.PIPE", "salt.utils.path", "re", "salt.utils.hashutils", "shutil", "logging", "sys", "subprocess.Popen", "salt.utils.args", "salt.utils.stringutils", "stat", "salt.utils.filebuffer.BufferedReader", "salt.defaults.exitcodes"], "function_names": ["_parse_interval", "match", "requires", "find", "__init__", "execute", "_parse_size", "_main", "path_depth", "_check_criteria", "_perform_actions"], "function_calls": ["Popen", "Finder", "oct", "super", "list", "int", "set", "_parse_size", "path_depth", "globals", "str", "BufferedReader", "_main", "ValueError", "_parse_interval", "len", "hasattr", "float", "print", "PrintOption"], "class_names": ["GroupOption", "ExecOption", "Finder", "TypeOption", "SizeOption", "OwnerOption", "IregexOption", "NameOption", "GrepOption", "DeleteOption", "RegexOption", "PrintOption", "Option", "InameOption", "MtimeOption"], "class_method_calls": ["stat.S_IFIFO", "os.remove", "self.maxdepth", "self.max_size", "re.error", "sys.argv", "time.time", "stat.ST_MODE", "scalar.startswith", "self.modifier", "p.communicate", "sys.stderr", "self.ftypes", "name.isdigit", "salt.defaults", "re.VERBOSE", "action.execute", "sys.maxsize", "stat.ST_GID", "stat.S_IFMT", "criterion.match", "self.command", "match.group", "shutil.rmtree", "stat.S_IFDIR", "self.actions", "self.fmt", "result.append", "key.startswith", "obj.requires", "self.print_title", "stat.ST_SIZE", "re.compile", "_INTERVAL_REGEX.match", "key.title", "grp.getgrgid", "finder.find", "pwd.getpwnam", "self.regex", "sys.exit", "value.strip", "self.mtime", "os.stat", "log.error", "stat.S_IFBLK", "self.mindepth", "self.min_size", "self._check_criteria", "stat.ST_MTIME", "self._perform_actions", "stat.S_ISREG", "stat.ST_UID", "os.lstat", "action.requires", "criterion.requires", "self.test", "logging.getLogger", "self.need_stat", "stat.S_IFCHR", "re.IGNORECASE", "arg.split", "value.replace", "self.criteria", "grp.getgrnam", "options.items", "stat.S_IFREG", "pwd.getpwuid", "self.uids", "os.path", "_FILE_TYPES.get", "self.gids", "salt.utils", "stat.S_IFLNK", "stat.S_IFSOCK"]}, "fsutils.py": {"libraries": ["os", "salt.exceptions.CommandExecutionError", "re", "logging", "salt.utils.files"], "function_names": ["_get_mounts", "flt", "_blkid_output", "_verify_run", "_blkid", "_is_device"], "function_calls": ["_get_mounts", "flt", "dict", "_verify_run", "CommandExecutionError"], "class_names": [], "class_method_calls": ["mounts.get", "dev_meta.split", "k_set.split", "out.get", "os.popen", "line.strip", "dev_meta.strip", "options.split", "log.debug", "out.split", "data.get", "dev.get", "items.split", "re.split", "ks_key.lower", "device.pop", "elm.replace", "logging.getLogger", "os.linesep", "dev.pop", "key.lower", "el.strip", "salt.utils", "fhr.readlines"]}, "functools.py": {"libraries": ["logging", "salt.utils.versions", "salt.exceptions.SaltInvocationError", "salt.utils.args", "types"], "function_names": ["namespaced_function", "parse_function", "call_function", "alias_function"], "function_calls": ["len", "str", "SaltInvocationError", "reversed", "salt_function", "dict", "zip", "isinstance"], "class_names": [], "class_method_calls": ["function.__globals__", "function_args.append", "function.__dict__", "function.__code__", "alias_fun.__dict__", "argspec.defaults", "fun.__closure__", "fun.__dict__", "function.__closure__", "function_kwargs.update", "fun.__doc__", "funcset.keys", "fun.__name__", "fun.__defaults__", "missing.append", "function_args.reverse", "new_namespaced_function.__dict__", "types.FunctionType", "function.__name__", "alias_fun.__doc__", "argspec.args", "logging.getLogger", "fun.__code__", "fun.__globals__", "function.__defaults__", "salt.utils"]}, "gzip_util.py": {"libraries": ["salt.utils.files", "gzip", "io"], "function_names": ["compress", "__enter__", "__init__", "__exit__", "compress_file", "uncompress", "open_fileobj", "open"], "function_calls": ["hasattr", "int", "ValueError", "open_fileobj", "GzipFile", "isinstance"], "class_names": ["GzipFile"], "class_method_calls": ["ogz.write", "data.encode", "io.BytesIO", "fh_.read", "igz.read", "self.close", "buf.getvalue", "gzip.GzipFile", "fh_.close", "salt.utils", "gzip.open"]}, "hashutils.py": {"libraries": ["hashlib", "os", "hmac", "salt.utils.platform", "base64", "salt.utils.stringutils", "salt.utils.decorators.jinja.jinja_filter", "salt.utils.files", "random"], "function_names": ["sha512_digest", "sha256_digest", "base64_decodestring", "add", "__init__", "base64_b64decode", "hmac_compute", "base64_b64encode", "hmac_signature", "base64_encodestring", "digest", "random_hash", "sha1_digest", "md5_digest", "get_hash"], "function_calls": ["getattr", "hasattr", "str", "jinja_filter", "hasher", "iter", "hash_type", "ValueError"], "class_names": ["DigestCollector"], "class_method_calls": ["base64.decodebytes", "hash_obj.hexdigest", "hashlib.sha1", "self.__digest", "hash_obj.update", "os.linesep", "self.__buff", "base64.encodebytes", "base64.b64decode", "hashlib.sha512", "ifile.read", "random.SystemRandom", "salt.utils", "hashlib.sha256", "hashlib.md5", "hmac.new", "hmac_hash.digest", "base64.b64encode"]}, "iam.py": {"libraries": ["logging", "time", "pprint", "requests"], "function_names": ["_convert_key_to_str", "_retry_get_url"], "function_calls": ["hasattr", "range"], "class_names": [], "class_method_calls": ["requests.get", "pprint.pformat", "time.sleep", "logging.getLogger", "log.error", "requests.exceptions", "log.warning", "result.text", "result.content"]}, "immutabletypes.py": {"libraries": ["collections.abc.Mapping", "collections.abc.Sequence", "copy", "collections.abc.Set"], "function_names": ["__add__", "__len__", "__contains__", "__deepcopy__", "__iter__", "__init__", "__getitem__", "freeze", "__radd__", "__repr__", "copy"], "function_calls": ["len", "ImmutableSet", "ImmutableDict", "ImmutableList", "iter", "freeze", "repr", "isinstance"], "class_names": ["ImmutableList", "ImmutableSet", "ImmutableDict"], "class_method_calls": ["self.__class__", "copy.deepcopy", "self.__obj"]}, "itertools.py": {"libraries": ["re", "fnmatch", "salt.utils.files"], "function_names": ["read_file", "fnmatch_multiple", "split"], "function_calls": ["len", "iter", "ValueError", "int"], "class_names": [], "class_method_calls": ["re.escape", "fnmatch.fnmatch", "match.start", "exp.search", "fh_.read", "match.end", "fh_.close", "salt.utils", "re.compile"]}, "jid.py": {"libraries": ["hashlib", "os", "salt.utils.stringutils", "datetime", "calendar.month_abbr"], "function_names": ["is_jid", "format_jid_instance_ext", "gen_jid", "jid_dir", "_utc_now", "format_job_instance", "format_jid_instance", "jid_to_time"], "function_calls": ["len", "getattr", "int", "str", "_utc_now", "format_job_instance", "jid_to_time", "list", "isinstance"], "class_names": [], "class_method_calls": ["ret.update", "os.getpid", "parts.extend", "opts.get", "parts.append", "datetime.timedelta", "os.path", "job.get", "salt.utils", "datetime.datetime"]}, "job.py": {"libraries": ["salt.utils.event", "logging", "salt.utils.versions", "salt.minion", "salt.utils.jid", "salt.utils.verify"], "function_names": ["store_minions", "get_keep_jobs_seconds", "get_retcode", "store_job"], "function_calls": ["KeyError", "any", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "event.fire_ret_load", "load.update", "load.get", "opts.get", "mminion.returners", "log.error", "event.fire_event", "log.info", "ret.get", "salt.minion", "salt.utils", "log.debug", "log.critical"]}, "kickstart.py": {"libraries": ["salt.utils.yaml", "argparse", "salt.utils.files", "shlex"], "function_names": ["parse_auth", "parse_rescue", "parse_nfs", "parse_autopart", "parse_repo", "parse_raid", "parse_updates", "parse_zfcp", "parse_driverdisk", "mksls", "parse_iscsiname", "parse_lang", "parse_network", "parse_volgroup", "parse_monitor", "parse_reboot", "parse_logvol", "parse_clearpart", "parse_firewall", "parse_multipath", "parse_timezone", "parse_xconfig", "parse_rootpw", "parse_upgrade", "parse_partition", "parse_group", "parse_url", "parse_firstboot", "parse_vnc", "parse_autostep", "parse_selinux", "parse_harddrive", "parse_device", "parse_services", "parse_bootloader", "parse_iscsi", "parse_btrfs", "clean_args", "parse_sshpw", "parse_user", "parse_ignoredisk", "parse_dmraid", "parse_logging", "parse_keyboard"], "function_calls": ["parse_auth", "parse_rescue", "vars", "parse_autopart", "parse_repo", "parse_raid", "parse_updates", "enumerate", "parse_driverdisk", "list", "parse_iscsiname", "parse_zfcp", "parse_lang", "parse_network", "parse_volgroup", "parse_monitor", "parse_reboot", "type", "parse_clearpart", "parse_firewall", "parse_logvol", "parse_multipath", "parse_timezone", "parse_xconfig", "parse_rootpw", "parse_upgrade", "parse_partition", "parse_group", "parse_firstboot", "parse_vnc", "parse_autostep", "parse_selinux", "parse_device", "parse_services", "parse_bootloader", "parse_iscsi", "parse_btrfs", "clean_args", "parse_sshpw", "parse_user", "parse_ignoredisk", "parse_dmraid", "parse_logging", "parse_keyboard"], "class_names": [], "class_method_calls": ["newrules.append", "opts.pop", "line.strip", "package.startswith", "argparse.ArgumentParser", "parser.add_argument", "rule.startswith", "line.replace", "salt.utils", "interface.get", "partitions.append", "package.replace", "parser.parse_args", "shlex.split", "line.startswith", "rules.pop"]}, "kinds.py": {"libraries": ["salt.utils.odict.OrderedDict", "collections.namedtuple"], "function_names": [], "function_calls": ["OrderedDict", "ApplKind", "namedtuple", "list"], "class_names": [], "class_method_calls": ["APPL_KINDS.items", "APPL_KINDS.keys"]}, "listdiffer.py": {"libraries": ["salt.utils.dictdiffer.recursive_diff"], "function_names": ["_get_recursive_difference", "changes_str2", "new_values", "__init__", "get_old_values_and_key", "changes_str", "remove_diff", "added", "new_list", "diffs", "get_new_values_and_key", "current_list", "list_diff", "changed", "intersect", "removed", "old_values"], "function_calls": ["str", "get_old_values_and_key", "ListDictDiffer", "dict", "get_new_values_and_key", "recursive_diff", "ValueError"], "class_names": ["ListDictDiffer"], "class_method_calls": ["values.update", "recursive_item.changed", "changed.append", "recursive_list.extend", "recursive_item.current_dict", "item.old_values", "recursive_item.ignore_unset_values", "self._new", "self._current", "item.pop", "current_item.keys", "self._removed", "item.past_dict", "next_item.keys", "self._added", "item.new_values", "recursive_item.past_dict", "item.changes_str", "differences.append", "self._get_recursive_difference", "self._intersect", "el.current_dict", "el.diffs", "item.current_dict", "changes.append", "el.past_dict", "self._key", "item.diffs"]}, "locales.py": {"libraries": ["salt.utils.decorators.memoize", "sys"], "function_names": ["get_encodings", "split_locale", "split", "normalize_locale", "join_locale"], "function_calls": ["join_locale", "len", "split_locale", "split"], "class_names": [], "class_method_calls": ["sys.getdefaultencoding", "st.split", "comps.get", "split_st.append", "encodings.append"]}, "mac_utils.py": {"libraries": ["time", "pwd", "os", "salt.grains.extra", "salt.exceptions.TimedProcTimeoutError", "salt.modules.cmdmod", "salt.utils.path", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "logging", "salt.utils.timed_subprocess", "subprocess", "xml.parsers.expat", "plistlib", "salt.utils.args", "salt.utils.files", "salt.utils.stringutils", "salt.exceptions.SaltInvocationError"], "function_names": ["available_services", "console_user", "_available_services", "validate_enabled", "git_is_stub", "_check_launchctl_stderr", "__virtual__", "_run_all", "execute_return_success", "_read_plist_file", "launchctl", "confirm_updated", "parse_return", "execute_return_result"], "function_calls": ["bool", "range", "_available_services", "str", "validate_enabled", "_check_launchctl_stderr", "_run_all", "CommandExecutionError", "check_fun", "SaltInvocationError", "_read_plist_file", "enumerate", "isinstance"], "class_names": [], "class_method_calls": ["time.sleep", "os.listdir", "cmd.extend", "plistlib.InvalidFileException", "log.warning", "subprocess.PIPE", "salt.modules", "kwargs.pop", "enabled.lower", "plistlib.load", "xml.parsers", "file_path.lower", "proc.stdout", "log.debug", "proc.run", "os.environ", "agent_path.format", "os.stat", "proc.process", "launchd_paths.update", "proc.stderr", "subprocess.CalledProcessError", "logging.getLogger", "data.split", "pwd.getpwuid", "os.path", "subprocess.check_call", "salt.utils", "salt.grains"]}, "migrations.py": {"libraries": ["salt.syspaths", "os.path", "shutil"], "function_names": ["migrate_paths"], "function_calls": [], "class_names": [], "class_method_calls": ["os.path", "syspaths.CONFIG_DIR", "os.makedirs", "shutil.move"]}, "minions.py": {"libraries": ["salt.utils.cache.CacheCli", "salt.config", "salt.utils.minions"], "function_names": ["connected"], "function_calls": ["CacheCli", "list"], "class_names": [], "class_method_calls": ["salt.config", "cache_cli.get_cached", "salt.utils", "opts.get"]}, "namecheap.py": {"libraries": ["logging", "requests", "xml.dom.minidom", "salt.loader"], "function_names": ["atts_to_dict", "_handle_request", "get_request", "string_to_value", "__virtual__", "post_request", "get_opts", "xml_to_dict"], "function_calls": ["len", "atts_to_dict", "Exception", "_handle_request", "int", "str", "string_to_value", "float", "xml_to_dict", "isinstance"], "class_names": [], "class_method_calls": ["requests.get", "xml.attributes", "xml.firstChild", "salt.loader", "apiresponse.getElementsByTagName", "e.firstChild", "data.append", "xml.data", "n.nodeType", "xml.nodeType", "errors.getElementsByTagName", "xml.childNodes", "r.text", "xml.tagName", "response_xml.getElementsByTagName", "val.append", "n.data", "xml.TEXT_NODE", "requests.post", "log.error", "log.info", "r.close", "apiresponse.getAttribute", "xml.dom", "logging.getLogger", "key.lower", "value.lower", "xml.CDATA_SECTION_NODE", "n.tagName", "r.status_code"]}, "nb_popen.py": {"libraries": ["errno", "time", "os", "win32file.WriteFile", "select", "pywintypes", "logging", "sys", "subprocess", "win32file.ReadFile", "fcntl", "msvcrt", "tempfile", "win32pipe.PeekNamedPipe"], "function_names": ["_recv", "send", "get_conn_maxsize", "recv_err", "__init__", "_close", "recv", "send_recv", "communicate", "poll_and_read_until_finish"], "function_calls": ["getattr", "PeekNamedPipe", "super", "WriteFile", "setattr", "ReadFile"], "class_names": ["NonBlockingPopen"], "class_method_calls": ["conn.fileno", "buff.rstrip", "time.sleep", "self.pid", "why.args", "self.recv_err", "self.stream_stds", "tempfile.SpooledTemporaryFile", "os.write", "subprocess.Popen", "kwargs.pop", "pywintypes.error", "self._translate_newlines", "self.send", "self._stdout_logger_name_", "self._recv", "self.recv", "errno.ESHUTDOWN", "fcntl.F_SETFL", "conn.closed", "self.get_conn_maxsize", "read.rstrip", "fcntl.fcntl", "self._close", "log.debug", "self._stderr_logger_name_", "errno.EPIPE", "kwargs.get", "select.select", "sys.platform", "log.error", "log.info", "self.stdout_buff", "self.stderr_buff", "conn.read", "subprocess.STDOUT", "self.poll", "logging.getLogger", "self._stdout_logger", "self.stdin", "self.max_size_in_mem", "self.stderr", "os.O_NONBLOCK", "fcntl.F_GETFL", "msvcrt.get_osfhandle", "self._stderr_logger", "self.stdout", "self.universal_newlines", "self.communicate"]}, "odict.py": {"libraries": ["collections.abc.Callable", "collections.OrderedDict", "copy"], "function_names": ["__deepcopy__", "__init__", "__getitem__", "__copy__", "__repr__", "__reduce__", "copy", "__missing__"], "function_calls": ["super", "type", "KeyError", "TypeError", "tuple", "isinstance"], "class_names": ["DefaultOrderedDict"], "class_method_calls": ["OrderedDict.__getitem__", "copy.deepcopy", "self.__missing__", "copy.copy", "self.default_factory", "self.items"]}, "authenticate.py": {"libraries": ["pyrax"], "function_names": ["__init__"], "function_calls": [], "class_names": ["Authenticate"], "class_method_calls": ["kwargs.get", "self.conn", "pyrax.settings", "pyrax.set_credentials"]}, "oset.py": {"libraries": ["collections.abc.MutableSet"], "function_names": ["clear", "__reversed__", "__len__", "__contains__", "pop", "__iter__", "__init__", "is_iterable", "update", "__getitem__", "__setstate__", "index", "__getstate__", "__eq__", "discard", "add", "__repr__", "copy"], "function_calls": ["len", "hasattr", "OrderedSet", "slice", "is_iterable", "type", "set", "reversed", "KeyError", "TypeError", "iter", "repr", "ValueError", "list", "isinstance"], "class_names": ["OrderedSet"], "class_method_calls": ["other.items", "self.__class__", "self.__init__", "self.add", "self.items", "self.index", "self.map"]}, "parsers.py": {"libraries": ["os", "salt.utils.validate.path.is_writeable", "signal", "salt.syspaths", "salt.utils.stringutils", "salt.utils.files", "salt.cloud.libcloudfuncs", "salt.version", "salt.defaults.exitcodes", "salt.utils.verify.insecure_log", "salt.defaults.DEFAULT_TARGET_DELIM", "salt.utils.win_functions", "salt.utils.data", "salt.utils.process.get_pidfile", "salt.utils.args", "types", "salt.utils.process.check_pidfile", "salt.utils.process.os_is_running", "salt.utils.user", "traceback", "optparse", "salt.utils.yaml", "salt.utils.xdg", "salt.exceptions", "salt.utils.process", "logging", "getpass", "pprint", "salt.utils.verify.verify_log", "salt.config", "salt.utils.process.set_pidfile", "salt.utils.platform", "salt._logging", "sys", "salt.utils.verify.verify_log_files", "salt.utils.jid", "copy", "functools.partial"], "function_names": ["process_config_dir", "__setup_logfile_logger_config", "_populate_option_list", "shutdown", "process_gen_keys_dir", "__init__", "get_config_file_path", "process_pillar_target", "_mixin_setup", "add_option_group", "process_rotate_aes_key", "__shutdown_logging", "error", "process_module_dirs", "_sorted", "process_log_level_logfile", "_handle_signals", "process_list", "__create_keys_dir", "claim_process_responsibility", "is_daemonized", "process_output_file", "process_saltfile", "process_log_level", "process_set_password", "process", "print_versions_report", "_create_process_functions", "__new__", "daemonize_if_required", "_mixin_after_parsed", "__setup_console_logger_config", "process_state_verbose", "process_preserve_minions", "set_pidfile", "_add_version_option", "check_running", "__setup_logging", "process_function", "__merge_config_with_cli", "process_jid", "setup_config", "get_pidfile", "_logfile_callback", "start", "__verify_logging", "process_no_parse", "_install_signal_handlers", "take_action", "process_keysize", "exit", "__setup_logging_routines", "prepare", "__setup_logging_config", "append", "check_pidfile", "process_output", "parse_args", "process_log_file", "_mixin_before_exit"], "function_calls": ["dir", "vars", "super", "sorted", "process_option_func", "RuntimeError", "_sorted", "enumerate", "list", "partial", "setattr", "mixin_setup_func", "MixinFuncsContainer", "is_writeable", "range", "str", "set_pidfile", "verify_log", "verify_log_files", "get_pidfile", "len", "isinstance", "mixin_before_exit_func", "getattr", "hasattr", "os_is_running", "mixin_after_parsed_func", "insecure_log", "check_pidfile", "print"], "class_names": ["CloudQueriesMixIn", "SaltCPOptionParser", "SaltfileMixIn", "EAuthMixIn", "SaltCloudParser", "RunUserMixin", "SaltRunOptionParser", "TargetOptionsMixIn", "MinionOptionParser", "SaltAPIParser", "MasterOptionParser", "SPMParser", "ProfilingPMixIn", "CacheDirMixIn", "SaltCMDOptionParser", "ProxyMinionOptionParser", "JIDMixin", "HardCrashMixin", "MixInMeta", "ProxyIdMixIn", "ArgsStdinMixIn", "ExecutorsMixIn", "MixinFuncsContainer", "SyndicOptionParser", "ExecutionOptionsMixIn", "ExtendedTargetOptionsMixIn", "SaltSSHOptionParser", "OptionParserMeta", "MergeConfigMixIn", "DaemonMixIn", "TimeoutMixIn", "SaltCallOptionParser", "CloudProvidersListsMixIn", "OptionParser", "ConfigDirMixIn", "CloudCredentialsMixIn", "OutputOptionsMixIn", "LogLevelMixIn", "NoParseMixin", "SaltKeyOptionParser", "CustomOption"], "class_method_calls": ["key_options_group.add_option", "self.get_prog_name", "config.DEFAULT_SPM_OPTS", "os.getppid", "sys.stderr", "option.explicit", "config.client_config", "self._mixin_after_parsed_funcs", "option.dest", "config._read_conf_file", "self._mixin_setup_funcs", "instance._mixin_after_parsed_funcs", "self.prepare", "self.option_list", "temp_log_handler.flush", "self.logging_options_group", "self.check_pidfile", "sys.stdout", "os.getuid", "ConfigDirMixIn._mixin_prio_", "self.__shutdown_logging", "signal.SIGINT", "self._create_process_functions", "cli_config.pop", "module_dir.split", "os.environ", "mcs.__name__", "self.__setup_logging_config", "sys.exit", "self.function_name", "config.DEFAULT_CLOUD_OPTS", "self.selected_output_option", "self.print_versions_report", "self.__setup_logfile_logger_config", "self.args", "self.__setup_console_logger_config", "signal.signal", "self._install_signal_handlers", "self.providers_listings_group", "self.selected_query_option", "self._logfile_loglevel_config_setting_name_", "salt._logging", "logging.DEBUG", "salt.utils", "self.default_timeout", "process_config_dir._mixin_prio_", "option_group.option_class", "os.getpid", "os.unlink", "self.target_options_group", "self.options", "parser.values", "self.get_config_file_path", "TargetOptionsMixIn._mixin_setup", "self.parse_args", "self.function_provider", "self.__create_keys_dir", "log.warning", "self.setup_config", "options.versions_report", "sys.maxsize", "pprint.pprint", "syspaths.CONFIG_DIR", "self._default_config_dir_env_var_", "group.add_option", "self.shutdown", "config.DEFAULT_API_OPTS", "actions_group.set_conflict_handler", "instance._mixin_process_funcs", "arg.rstrip", "self.exit", "options.__dict__", "self.description", "options.args_stdin", "self._loglevel_config_setting_name_", "self.__class__", "signal.SIGTERM", "log.error", "log.exception", "self.error", "optparse.OptionParser", "self.__merge_config_with_cli", "self.get_pidfile", "kwargs.setdefault", "self.add_option", "self.profiling_group", "actions_group.add_option", "self.print_usage", "sys.stdin", "process_option_funcs.append", "os.path", "config.minion_config", "self.__verify_logging", "self.selected_target_option", "self.VERSION", "types.MethodType", "optparse.OptionGroup", "self._mixin_before_exit_funcs", "config.DEFAULT_PROXY_MINION_OPTS", "libcloudfuncs.check_libcloud_version", "self.epilog", "os.makedirs", "salt.defaults", "self.is_daemonized", "self.defaults", "file_opts_group.add_option", "self._config_filename_", "args.extend", "func.startswith", "traceback.format_exc", "self.__setup_logging_routines", "config.DEFAULT_MASTER_OPTS", "self.__setup_logging", "copy.deepcopy", "salt.exceptions", "error.message", "log.info", "func._mixin_prio_", "self._default_logging_level_", "self.eauth_group", "self._default_config_dir_", "version.versions_report", "ssh_group.add_option", "salt.config", "instance._mixin_before_exit_funcs", "self._default_logging_logfile_", "version.__saltstack_version__", "syspaths.PIDFILE_DIR", "getpass.getpass", "config.syndic_config", "os.access", "group.option_list", "option_dict.get", "os.R_OK", "self.cloud_credentials_group", "option.get_opt_string", "instance._mixin_setup_funcs", "self.explicit", "config.DEFAULT_MINION_OPTS", "self.additional_target_options_group", "self.values", "opt.dest", "self._logfile_config_setting_name_", "log.debug", "self.usage", "log.trace", "self.output_options_group", "self.add_option_group", "acl.keys", "self.execution_group", "self._console_log_level_cli_flags", "optparse.Option", "scan_group.add_option", "self._handle_signals", "config.proxy_config", "self.cloud_queries_group", "self.option_groups", "func.__func__", "os.getcwd", "self.config", "logging.getLogger", "arg.split", "auth_group.add_option", "self.print_help", "config.master_config", "config.cloud_config", "new_options.__dict__", "list.append", "x.strip"]}, "deb.py": {"libraries": [], "function_names": ["combine_comments", "strip_uri"], "function_calls": ["str", "enumerate", "any", "isinstance"], "class_names": [], "class_method_calls": ["repo.split", "val.rstrip", "val.startswith"]}, "rpm.py": {"libraries": ["salt.utils.path", "logging", "subprocess", "datetime", "salt.utils.stringutils", "collections", "platform"], "function_names": ["check_32", "resolve_name", "parse_pkginfo", "pkginfo", "version_to_evr", "combine_comments", "get_osarch"], "function_calls": ["check_32", "int", "resolve_name", "str", "pkginfo", "pkginfo_tuple", "get_osarch", "all", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "collections.namedtuple", "ret.append", "line.split", "subprocess.PIPE", "verstring.find", "subprocess.Popen", "comment.lstrip", "salt.utils", "platform.uname", "datetime.datetime"]}, "platform.py": {"libraries": ["os", "salt.utils.decorators.memoize", "multiprocessing", "sys", "subprocess", "__main__", "contextlib", "distro", "platform"], "function_names": ["spawning_platform", "is_freebsd", "is_windows", "linux_distribution", "is_proxy", "is_netbsd", "is_aarch64", "is_smartos_zone", "is_smartos", "is_linux", "is_photonos", "is_darwin", "is_junos", "is_sunos", "is_aix", "is_openbsd", "is_smartos_globalzone", "is_fedora"], "function_calls": ["is_sunos", "is_smartos", "any", "linux_distribution"], "class_names": [], "class_method_calls": ["sys.argv", "arg.startswith", "contextlib.suppress", "subprocess.Popen", "subprocess.PIPE", "distro.name", "os.uname", "distro.version", "distro.id", "sys.platform", "zonename_proc.poll", "subprocess.STDOUT", "main.__file__", "subprocess.CalledProcessError", "multiprocessing.get_start_method", "zonename_proc.communicate", "platform.machine", "distro.codename", "x.strip"]}, "powershell.py": {"libraries": ["salt.utils.path", "logging", "os"], "function_names": ["get_modules", "module_exists"], "function_calls": ["get_modules", "list"], "class_names": [], "class_method_calls": ["os.environ", "logging.getLogger", "file_extension.lower", "ret.append", "log.error", "ps_module_path.split", "base_name.lower", "salt.utils", "os.path", "dir_name.lower", "root_paths.append"]}, "preseed.py": {"libraries": ["salt.utils.yaml", "salt.utils.stringutils", "salt.utils.files", "shlex"], "function_names": ["mksls"], "function_calls": ["len"], "class_names": [], "class_method_calls": ["line.strip", "pointer.setdefault", "salt.utils", "shlex.split", "line.startswith"]}, "psutil_compat.py": {"libraries": ["salt.utils.versions", "psutil.*"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils"]}, "pycrypto.py": {"libraries": ["Cryptodome.Random.get_random_bytes", "Crypto.Random.get_random_bytes", "salt.exceptions.CommandExecutionError", "re", "crypt", "salt.utils.platform", "logging", "salt.utils.stringutils", "salt.exceptions.SaltInvocationError", "random", "string", "passlib.context", "M2Crypto.Rand.rand_bytes"], "function_names": ["gen_hash", "_gen_hash_passlib", "secure_password", "_gen_hash_crypt"], "function_calls": ["len", "get_random_bytes", "secure_password", "int", "str", "_gen_hash_passlib", "_gen_hash_crypt", "CommandExecutionError", "SaltInvocationError", "list"], "class_names": [], "class_method_calls": ["string.ascii_uppercase", "string.whitespace", "kwargs.update", "string.printable", "string.ascii_lowercase", "random.SystemRandom", "log.warning", "crypt_salt.split", "crypt.methods", "string.punctuation", "known_methods.index", "ctx.hash", "m.name", "string.digits", "log.exception", "re.sub", "roundsstr.split", "passlib.context", "re.escape", "logging.getLogger", "crypt.crypt", "salt.utils"]}, "reclass.py": {"libraries": ["sys", "os"], "function_names": ["prepend_reclass_source_path", "set_inventory_base_uri_default", "filter_out_source_path_option"], "function_calls": [], "class_names": [], "class_method_calls": ["config.get", "sys.path", "os.path", "opts.get"]}, "roster_matcher.py": {"libraries": ["functools", "re", "logging", "fnmatch", "seco.range", "copy"], "function_names": ["ret_list_minions", "targets", "ret_pcre_minions", "__init__", "ret_nodegroup_minions", "_tgt_set", "_convert_range_to_list", "ret_glob_minions", "_ret_minions", "ret_range_minions", "get_data"], "function_calls": ["getattr", "filter_", "RosterMatcher", "set", "_tgt_set", "_convert_range_to_list", "RuntimeError", "isinstance"], "class_names": ["RosterMatcher"], "class_method_calls": ["self._ret_minions", "self.tgt_type", "__opts__.get", "fnmatch.filter", "self.ipv", "self.tgt", "tgt.match", "r.expand", "tgt.intersection", "seco.range", "range_hosts.__contains__", "tgt.split", "re.compile", "ret.update", "copy.deepcopy", "log.error", "nodegroup.intersection", "data.copy", "rmatcher.targets", "logging.getLogger", "self.get_data", "self.raw", "functools.partial"]}, "rsax931.py": {"libraries": ["ctypes.create_string_buffer", "glob", "ctypes.pointer", "os", "ctypes.util", "ctypes.c_int", "ctypes.c_void_p", "ctypes.c_char_p", "salt.utils.platform", "sys", "salt.utils.stringutils", "platform", "ctypes.cdll"], "function_names": ["__init__", "verify", "_load_libcrypto", "__del__", "_init_libcrypto", "sign", "_find_libcrypto"], "function_calls": ["len", "create_string_buffer", "getattr", "pointer", "int", "c_void_p", "openssl_version_num", "sorted", "reversed", "callable", "_load_libcrypto", "_init_libcrypto", "list", "_find_libcrypto", "ValueError", "OSError"], "class_names": ["RSAX931Signer", "RSAX931Verifier"], "class_method_calls": ["pubdata.replace", "libcrypto.BIO_new_mem_buf", "sys.executable", "salt.utils", "libcrypto.OPENSSL_init_crypto", "libcrypto.OPENSSL_add_all_algorithms_noconf", "libcrypto.OpenSSL_version_num", "platform.mac_ver", "ctypes.util", "self._rsa", "libcrypto.RSA_size", "libcrypto.PEM_read_bio_RSAPrivateKey", "libcrypto.RSA_private_encrypt", "libcrypto.RSA_free", "self._bio", "libcrypto.BIO_free", "cdll.LoadLibrary", "glob.glob", "sys.path", "libcrypto.OPENSSL_no_config", "sys.platform", "libcrypto.PEM_read_bio_RSA_PUBKEY", "os.getenv", "os.path", "libcrypto.RSA_public_decrypt", "libcrypto.RSA_new"]}, "sanitizers.py": {"libraries": ["salt.exceptions.CommandExecutionError", "re", "os.path", "fnmatch", "salt.utils.stringutils"], "function_names": ["hostname", "mask_args_value", "trim", "filename"], "function_calls": ["str", "CommandExecutionError", "InputSanitizer"], "class_names": ["InputSanitizer"], "class_method_calls": ["out.append", "line.strip", "fnmatch.fnmatch", "os.linesep", "InputSanitizer.trim", "line.split", "data.split", "key.strip", "os.path", "re.sub", "salt.utils"]}, "schema.py": {"libraries": ["salt.utils.odict.OrderedDict", "inspect", "salt.utils.args", "textwrap"], "function_names": ["__bool__", "__prepare__", "__init__", "_get_argname_value", "__validate_attributes__", "get_definition", "_add_missing_schema_attributes", "__new__", "__get_additional_properties__", "get_complex_attrs", "__get_properties__", "definition_name", "serialize", "_failing_new", "__call__", "as_requirements_item", "defaults", "__get_pattern_properties__", "__get_description__", "__get_items__"], "function_calls": ["len", "staticmethod", "OrderedDict", "getattr", "hasattr", "dir", "super", "NullSentinel", "type", "reversed", "TypeError", "RequirementsItem", "callable", "argvalue", "RuntimeError", "enumerate", "list", "isinstance"], "class_names": ["HostnameItem", "BaseSchemaItemMeta", "SchemaItem", "AllOfItem", "IPv6Item", "NotItem", "DefinitionsSchema", "SecretItem", "BaseSchemaItem", "DictItem", "NullSentinel", "ArrayItem", "RequirementsItem", "ComplexSchemaItem", "DateTimeItem", "UriItem", "IntegerItem", "EMailItem", "BooleanItem", "NumberItem", "IPv4Item", "NullItem", "SchemaMeta", "Schema", "OneOfItem", "StringItem", "PortItem", "AnyOfItem"], "class_method_calls": ["section.serialize", "self.item", "base._sections", "entry.items", "item.items", "serialized.get", "config.__item_name__", "self.enumNames", "prop.serialize", "properties.update", "self._attributes", "i.serialize", "config.get_definition", "attributes.extend", "attributes.append", "self.exclusive_minimum", "instance._attributes", "cls._sections", "self.extra", "self._get_argname_value", "salt.utils", "type.__new__", "cls.__doc__", "self.pattern_properties", "attr.startswith", "order.extend", "ordering.append", "serialized_schema.get", "self.properties", "instance.__allow_additional_items__", "self.definition_name", "self.__serialize_attr_aliases__", "attr.serialize", "self.title", "requirements.append", "instance.__flatten__", "self.format", "cls._items", "cls.description", "sections.update", "aux_items.extend", "self.exclusive_maximum", "self.enum", "cls.serialize", "after_items_update.update", "items.update", "item.properties", "complex_items.append", "section.__flatten__", "self.description", "base.__validate_attributes__", "value.title", "self.__class__", "kwargs.copy", "self.__format__", "config.definition_name", "self.min_items", "self.items", "self.additional_items", "validate_attributes.__code__", "self.maximum", "self.max_properties", "requirement.serialize", "config.required", "NullSentinel.__new__", "required_attr_names.append", "self.pattern", "self.minimum", "self.__flatten__", "attrs.items", "aux_items.pop", "self.default", "kwargs.pop", "item.serialize", "instance.__item_name__", "self.multiple_of", "inspect.getmro", "item.additional_properties", "self.max_length", "defaults.setdefault", "self.__doc__", "attr.required", "instance.__validate_attributes__", "self._definition_name", "textwrap.dedent", "instance.__config_name__", "self.required", "self.additional_properties", "self.min_length", "self.max_items", "required.append", "item.get_complex_attrs", "self.__type__", "cls.title", "base.__init__", "cls.after_items_update", "self.requirements", "attr.__type__", "aux_items.append", "config.__flatten__", "cls._order", "value.__item_name__", "cls.__allow_additional_items__", "section.after_items_update", "order.append", "self.min_properties", "object.__new__", "self._add_missing_schema_attributes", "instance.__init__", "self.unique_items", "required.extend", "prop.required", "base._items", "config.serialize", "value.__config_name__", "ordering.extend", "items.append", "base._order"]}, "smb.py": {"libraries": ["smbprotocol.open.ImpersonationLevel", "smbprotocol.security_descriptor.AclPacket", "salt.utils.stringutils", "smbprotocol.security_descriptor.SIDPacket", "salt.utils.files", "smbprotocol.tree.TreeConnect", "smbprotocol.security_descriptor.AccessMask", "smbprotocol.open.DirectoryAccessMask", "smbprotocol.connection.Connection", "smbprotocol.security_descriptor.SDControl", "smbprotocol.open.ShareAccess", "salt.exceptions.MissingSmb", "salt.utils.versions", "smbprotocol.open.CreateOptions", "smbprotocol.open.CreateDisposition", "smbprotocol.create_contexts.CreateContextName", "socket", "smbprotocol.open.FileInformationClass", "smbprotocol.open.FilePipePrinterAccessMask", "logging", "smbprotocol.security_descriptor.SMB2CreateSDBuffer", "smbprotocol.open.Open", "smbprotocol.create_contexts.SMB2CreateQueryMaximalAccessRequest", "uuid", "smbprotocol.security_descriptor.AccessAllowedAce", "smbprotocol.open.FileAttributes", "smbprotocol.create_contexts.SMB2CreateContextRequest", "smbprotocol.session.Session"], "function_names": ["put_str", "_delete_directory_smbprotocol", "__init__", "put_file", "get_conn", "connection", "tree_connect", "close", "_mkdirs_smbprotocol", "connect", "normalize_filename", "_put_file_smbprotocol", "delete_directory", "_get_conn_smbprotocol", "mkdirs", "_delete_file_smbprotocol", "open_file", "_put_str_smbprotocol", "open_directory", "delete_file"], "function_calls": ["SMBProto", "MissingSmb", "SMB2CreateContextRequest", "_delete_directory_smbprotocol", "TreeConnect", "SMB2CreateSDBuffer", "get_conn", "enumerate", "SMB2CreateQueryMaximalAccessRequest", "_mkdirs_smbprotocol", "Open", "_put_file_smbprotocol", "AclPacket", "SIDPacket", "_get_conn_smbprotocol", "_delete_file_smbprotocol", "len", "Session", "AccessAllowedAce", "Connection", "_put_str_smbprotocol"], "class_names": ["SMBProto"], "class_method_calls": ["logging.WARNING", "SDControl.SELF_RELATIVE", "CreateContextName.SMB2_CREATE_SD_BUFFER", "cls.normalize_filename", "ShareAccess.FILE_SHARE_READ", "self.session", "sec_desc.set_dacl", "dir_open.close", "FilePipePrinterAccessMask.GENERIC_READ", "CreateDisposition.FILE_OPEN", "CreateOptions.FILE_DELETE_ON_CLOSE", "self.connection", "conn.session", "DirectoryAccessMask.GENERIC_WRITE", "CreateOptions.FILE_DIRECTORY_FILE", "CreateOptions.FILE_NON_DIRECTORY_FILE", "socket.getaddrinfo", "conn.open_directory", "FileInformationClass.FILE_NAMES_INFORMATION", "responses.append", "file_open.create", "conn.connection", "self.server", "DirectoryAccessMask.GENERIC_READ", "CreateDisposition.FILE_OPEN_IF", "FileAttributes.FILE_ATTRIBUTE_NORMAL", "log.debug", "conn.tree_connect", "DirectoryAccessMask.DELETE", "file_open.write", "dir_open.create", "AccessMask.GENERIC_ALL", "CreateContextName.SMB2_CREATE_QUERY_MAXIMAL_ACCESS_REQUEST", "fh_.read", "socket.IPPROTO_TCP", "dir_open.query_directory", "log.info", "path.split", "file_open.close", "file.lstrip", "conn.connect", "FilePipePrinterAccessMask.DELETE", "FileAttributes.FILE_ATTRIBUTE_DIRECTORY", "share.endswith", "tree.tree_connect_id", "logging.getLogger", "everyone_sid.from_string", "ImpersonationLevel.Impersonation", "ShareAccess.FILE_SHARE_WRITE", "tree.connect", "CreateDisposition.FILE_OVERWRITE_IF", "FilePipePrinterAccessMask.GENERIC_WRITE", "uuid.uuid4", "salt.utils", "conn.open_file"]}, "ssdp.py": {"libraries": ["time", "socket", "asyncio", "salt.utils.json", "logging", "salt.utils.odict.OrderedDict", "salt.utils.stringutils", "datetime", "collections.OrderedDict", "random", "trollius", "copy"], "function_names": ["create_datagram_endpoint", "_collect_masters_map", "is_available", "slp_time", "datagram_received", "__init__", "connection_made", "_sendto", "_query", "get_self_ip", "run", "discover", "_is_available", "__call__"], "function_calls": ["len", "OrderedDict", "protocol_factory", "bool", "hasattr", "OSError", "float", "slp_time", "setattr", "ValueError", "SSDPFactory", "isinstance"], "class_names": ["SSDPDiscoveryServer", "TimeStampException", "TimeOutException", "SSDPBase", "SSDPDiscoveryClient", "SSDPFactory"], "class_method_calls": ["SSDPDiscoveryServer.create_datagram_endpoint", "time.sleep", "sck.connect", "exceptions.append", "loop._make_datagram_transport", "config.get", "time.time", "socket.SOL_SOCKET", "loop.create_datagram_endpoint", "self._query", "loop.getaddrinfo", "socket.SO_BROADCAST", "response.items", "socket.SOCK_DGRAM", "msg.split", "self._collect_masters_map", "socket.socket", "loop.run_until_complete", "socket.SO_REUSEADDR", "self.ANSWER", "socket.gethostbyname", "sock.bind", "asyncio.futures", "sck.close", "self._sendto", "datetime.timedelta", "self.SIGNATURE", "msg.startswith", "self.signature", "self.get_self_ip", "self.transport", "sck.getsockname", "self.my_ip", "addr_infos.items", "self.log", "loop.close", "self.PORT", "copy.deepcopy", "sock.setblocking", "self._socket", "socket.AF_INET", "self.disable_hidden", "random.randint", "sock.close", "socket.gethostname", "transport.close", "self.TIMEOUT", "asyncio.get_event_loop", "sock.setsockopt", "logging.getLogger", "message.startswith", "self.DEFAULTS", "asyncio.coroutines", "loop.run_forever", "loop.sock_connect", "self.answer", "self.port", "asyncio.ported", "salt.utils", "self._config", "datetime.datetime", "self.LISTEN_IP", "SSDPBase._is_available"]}, "stringio.py": {"libraries": ["io"], "function_names": ["is_writable", "is_stringio", "is_readable"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["obj.writable", "io.StringIO", "obj.readable"]}, "stringutils.py": {"libraries": ["errno", "time", "os", "re", "salt.utils.data", "difflib", "fnmatch", "base64", "logging", "salt.utils.decorators.jinja.jinja_filter", "unicodedata", "shlex"], "function_names": ["to_none", "is_binary", "_normalize", "to_bytes", "check_whitelist_blacklist", "is_quoted", "to_num", "get_context", "contains_whitespace", "build_whitespace_split_regex", "__build_parts", "expr_match", "random", "print_cli", "_pat_check", "dequote", "is_hex", "snake_to_camel_case", "camel_to_snake_case", "to_unicode", "human_to_bytes", "get_diff", "to_str", "check_include_exclude"], "function_calls": ["any", "_normalize", "is_quoted", "max", "enumerate", "list", "int", "type", "jinja_filter", "TypeError", "__build_parts", "expr_match", "_pat_check", "range", "str", "ValueError", "isinstance", "to_unicode", "len", "chr", "hasattr", "print", "bytes", "float", "to_str", "min"], "class_names": [], "class_method_calls": ["time.sleep", "m.group", "re.error", "template.splitlines", "word.capitalize", "buf.append", "salt.utils", "buf.extend", "x.isspace", "re.match", "shlex.shlex", "letter.isupper", "re.search", "value.startswith", "lexer.commenters", "base64.b64encode", "errno.EAGAIN", "errno.EPIPE", "s.decode", "letter.lower", "os.urandom", "log.exception", "snake_input.split", "lexer.whitespace_split", "lexer.quotes", "default_unit.lower", "text.splitlines", "difflib.unified_diff", "data.translate", "fnmatch.fnmatch", "re.escape", "logging.getLogger", "s.encode", "msg.encode", "exc.errno", "unicodedata.normalize"]}, "systemd.py": {"libraries": ["dbus", "os", "salt.utils.path", "re", "salt.loader.context", "logging", "subprocess", "salt.utils.stringutils", "salt.exceptions.SaltInvocationError"], "function_names": ["pid_to_service", "booted", "version", "_pid_to_service_dbus", "_pid_to_service_systemctl", "has_scope", "offline", "_strip_suffix"], "function_calls": ["booted", "bool", "int", "str", "version", "_pid_to_service_dbus", "_pid_to_service_systemctl", "SaltInvocationError", "_strip_suffix", "isinstance"], "class_names": [], "class_method_calls": ["salt.loader", "outstr.splitlines", "service_props.Get", "subprocess.Popen", "subprocess.PIPE", "bus.get_object", "re.search", "status_json.get", "name.endswith", "dbus.Interface", "os.stat", "log.error", "dbus.SystemBus", "dbus.DBusException", "systemd.GetUnitByPID", "subprocess.STDOUT", "subprocess.CalledProcessError", "logging.getLogger", "systemd_output.stdout", "subprocess.run", "salt.utils"]}, "templates.py": {"libraries": ["salt.loader.context.NamedLoaderContext", "os", "Cheetah.Template.Template", "salt.utils.stringutils", "salt.utils.mako.SaltMakoTemplateLookup", "salt.utils.files", "salt.utils.jinja", "tempfile", "salt.utils.decorators.jinja.JinjaTest", "genshi.template.MarkupTemplate", "salt.utils.yamlencoding", "salt.exceptions.CommandExecutionError", "salt.utils.data", "salt.modules.match", "salt.utils.hashutils", "salt.utils.odict.OrderedDict", "salt.exceptions.SaltInvocationError", "mako.template.Template", "importlib.util", "mako.lookup.TemplateLookup", "traceback", "pathlib.Path", "genshi.template.NewTextTemplate", "mako.exceptions", "importlib.machinery", "salt.utils.decorators.jinja.JinjaFilter", "salt.utils.network", "logging", "salt.utils.dateutils", "jinja2.ext", "jinja2", "salt.exceptions.SaltRenderError", "salt.__path__", "genshi.template.OldTextTemplate", "salt.utils.versions.Version", "codecs", "salt.loader.dunder.__file_client__", "salt.utils.decorators.jinja.JinjaGlobal", "salt.utils.platform", "wemplate.wemplate.TemplateParser", "jinja2.sandbox", "sys", "salt.utils.http"], "function_names": ["wrap_tmpl_func", "_get_jinja_error_message", "render_jinja_tmpl", "__contains__", "render_genshi_tmpl", "_get_jinja_error", "__init__", "__getattr__", "opt_jinja_env_helper", "py", "_get_jinja_error_line", "__getitem__", "render_cheetah_tmpl", "render_mako_tmpl", "_get_jinja_error_slug", "render_wempy_tmpl", "render_tmpl", "generate_sls_context"], "function_calls": ["SaltMakoTemplateLookup", "_get_jinja_error_message", "TemplateLookup", "OldTextTemplate", "opt_jinja_env_helper", "_get_jinja_error_line", "dict", "tclass", "Version", "AliasedLoader", "wrap_tmpl_func", "NewTextTemplate", "type", "Path", "setattr", "generate_sls_context", "MarkupTemplate", "ImportError", "render_str", "str", "SaltRenderError", "_get_jinja_error_slug", "isinstance", "len", "getattr", "hasattr", "_get_jinja_error", "Template"], "class_names": ["AliasedLoader", "AliasedModule"], "class_method_calls": ["template.rsplit", "base_fname.split", "jinja_env.filters", "target.write", "kws.update", "context.items", "msg.splitlines", "jinja_env.globals", "Template.compile", "salt.utils", "traceback.extract_tb", "__file_client__.value", "spec.loader", "log.warning", "sys.exc_info", "tmplstr.endswith", "_tmplsrc.read", "k.upper", "tmpl.generate", "loader.destroy", "sls_context.update", "tmplsrc.close", "mod.run", "opts.items", "self.wrapped", "sys.modules", "jinja_env.from_string", "jinja2.exceptions", "JinjaTest.salt_jinja_tests", "self.aliases", "template.render", "tmplstr.decode", "context.update", "context.get", "template.endswith", "sls.replace", "importlib.util", "log.debug", "tempfile.NamedTemporaryFile", "jinja2.StrictUndefined", "traceback.format_exc", "slspath.replace", "codecs.open", "mako.exceptions", "jinja2.defaults", "value.value", "importlib.machinery", "log.error", "opts.get", "JinjaFilter.salt_jinja_filters", "log.exception", "codecs.getencoder", "tmplsrc.read", "jinja2.ext", "output.splitlines", "JinjaGlobal.salt_jinja_globals", "logging.getLogger", "os.linesep", "render_tmpl.render_str", "lookup.destroy", "fp_.read", "outf.name", "jinja2.sandbox", "os.path", "k.lower", "logging.DEBUG", "jinja_env.tests", "jinja2.FileSystemLoader", "outf.write"]}, "textformat.py": {"libraries": [], "function_names": ["qualify_triple_int", "__str__", "__init__", "qualify_int", "__repr__", "__call__"], "function_calls": ["len", "qualify_triple_int", "TextFormat", "qualify_int", "isinstance"], "class_names": ["TextFormat"], "class_method_calls": ["self.sequence", "self.codes", "attr.lower", "kwargs.get"]}, "timed_subprocess.py": {"libraries": ["salt.utils.data", "salt.exceptions", "subprocess", "salt.utils.stringutils", "threading", "shlex"], "function_names": ["__init__", "terminate", "receive", "run"], "function_calls": ["str", "receive", "isinstance"], "class_names": ["TimedProc"], "class_method_calls": ["rt.is_alive", "subprocess.Popen", "self.timeout", "subprocess.PIPE", "self.stdin_raw_newlines", "kwargs.pop", "threading.Timer", "rt.join", "self.command", "self.wait", "self.process", "kwargs.get", "str_args.append", "salt.exceptions", "self.with_communicate", "rt.start", "self.stdin", "self.stderr", "threading.Thread", "self.stdout", "shlex.split", "salt.utils"]}, "timeout.py": {"libraries": ["logging", "time"], "function_names": ["wait_for"], "function_calls": ["min", "dict", "func"], "class_names": [], "class_method_calls": ["time.sleep", "logging.getLogger", "time.time", "log.warning"]}, "timeutil.py": {"libraries": ["logging", "time", "datetime.datetime", "datetime.timedelta"], "function_names": ["get_time_at", "get_timestamp_at"], "function_calls": ["int", "get_timestamp_at", "timedelta", "ValueError", "isinstance"], "class_names": [], "class_method_calls": ["datetime.strptime", "datetime.utcnow", "logging.getLogger", "time_in.split", "dt.timetuple", "time.mktime", "log.error", "time_at.timetuple", "time.localtime", "time_in.replace", "time.strftime", "log.debug"]}, "url.py": {"libraries": ["salt.utils.path", "salt.utils.data", "re", "salt.utils.platform", "sys", "urllib.parse.urlparse", "urllib.parse.urlunparse", "salt.utils.versions"], "function_names": ["parse", "escape", "strip_proto", "create", "split_env", "add_http_basic_auth", "redact_http_basic_auth", "validate", "is_escaped", "add_env", "unescape"], "function_calls": ["parse", "len", "create", "urlparse", "ValueError", "urlunparse"], "class_names": [], "class_method_calls": ["url.lstrip", "urltuple.scheme", "path.replace", "re.IGNORECASE", "sys.version_info", "url.split", "output.lower", "path.lstrip", "re.search", "urltuple.netloc", "re.sub", "urltuple._replace", "salt.utils", "url.startswith", "resource.split", "path.startswith"]}, "value.py": {"libraries": [], "function_names": ["xor"], "function_calls": ["bool"], "class_names": [], "class_method_calls": []}, "verify.py": {"libraries": ["pwd", "itertools", "os", "resource", "salt.utils.files", "zmq", "salt.defaults.exitcodes", "errno", "salt.utils.win_reg", "salt.exceptions.CommandExecutionError", "salt.utils.win_functions", "salt.exceptions.SaltSystemExit", "salt.utils.user", "socket", "salt._logging.LOG_LEVELS", "re", "salt.utils.win_dacl", "logging", "salt.exceptions.SaltClientError", "salt.utils.path", "salt.utils.platform", "sys", "stat", "win32file"], "function_names": ["verify_socket", "verify_env", "check_path_traversal", "check_max_open_files", "lookup_family", "verify_files", "valid_id", "_realpath", "safe_py_code", "verify_logs_filter", "zmq_version", "verify_log", "verify_log_files", "list_path_traversal", "check_user", "clean_path", "win_verify_env", "_get_pwnam", "_realpath_windows", "insecure_log", "_realpath_darwin"], "function_calls": ["any", "lookup_family", "verify_files", "int", "_realpath", "verify_logs_filter", "zmq_version", "str", "CommandExecutionError", "list_path_traversal", "SaltClientError", "clean_path", "len", "win_verify_env", "hasattr", "bool", "_get_pwnam", "_realpath_windows", "_realpath_darwin", "SaltSystemExit", "print"], "class_names": [], "class_method_calls": ["logging.WARNING", "LOG_LEVELS.get", "real_path.startswith", "sys.stderr", "log.critical", "resource.RLIMIT_NOFILE", "os.setgroups", "os.setgid", "os.getuid", "fmode.st_uid", "os.environ", "err.errno", "base.startswith", "sys.exit", "socket.AF_INET", "itertools.chain", "point.isdigit", "LOG_LEVELS.items", "stat.S_IMODE", "salt.utils", "pwuser.pw_dir", "name.startswith", "minor.isdigit", "log.warning", "os.setuid", "socket.getaddrinfo", "pwuser.pw_gid", "re.match", "socket.socket", "socket.SO_REUSEADDR", "socket.gaierror", "errno.EACCES", "zmq.__version__", "socket.SOCK_STREAM", "os.path", "socket.SOL_SOCKET", "exc.args", "pwuser.pw_name", "fmode.st_gid", "os.makedirs", "mode.st_mode", "salt.defaults", "errno.EEXIST", "stats.st_uid", "sock.bind", "socket.AF_UNSPEC", "win32file._getmaxstdio", "dacl.add_ace", "os.chmod", "insecure.append", "logging.NOTSET", "code.count", "os.stat", "sys.platform", "dacl.save", "filename.startswith", "logging.INFO", "os.chown", "to_verify.append", "msg.format", "logging.CRITICAL", "sys.argv", "os.listdir", "os.initgroups", "os.access", "os.R_OK", "log.log", "major.isdigit", "os.readlink", "os.W_OK", "pwuser.pw_uid", "log.debug", "pwd.getpwnam", "resource.getrlimit", "opts.get", "sock.close", "out.insert", "path.split", "sock.setsockopt", "match.groups", "logging.getLogger", "pwuser.pw_shell"]}, "versions.py": {"libraries": ["os", "warnings", "packaging.version", "boto3", "botocore", "numbers", "logging", "sys", "inspect", "datetime", "looseversion", "boto", "salt.version"], "function_names": ["parse", "__gt__", "__le__", "__ne__", "_cmp", "warn_until", "version_cmp", "__init__", "_format_warning", "__eq__", "normalize", "warn_until_date", "compare", "kwargs_warn_until", "check_boto_reqs", "__ge__", "__lt__"], "function_calls": ["cmp_func", "super", "warn_until", "str", "version_cmp", "RuntimeError", "LooseVersion", "Version", "normalize", "isinstance"], "class_names": ["Version", "LooseVersion", "StrictVersion"], "class_method_calls": ["category.__name__", "sys._getframe", "packaging.version", "vs.name", "other.version", "sys.stderr", "version.lower", "salt.version", "date.date", "looseversion.LooseVersion", "_version_.formatted_version", "botocore.__version__", "numbers.Integral", "boto3.__version__", "version.formatted_version", "caller.lineno", "datetime.date", "os.environ", "date.isoformat", "self._str_version", "log.error", "self.version", "version.info", "other._str_version", "log.exception", "_version_.info", "logging.getLogger", "caller.filename", "message.format", "version.string", "inspect.getframeinfo", "warnings.warn", "today.isoformat", "boto.__version__", "datetime.datetime"]}, "vsan.py": {"libraries": ["salt.utils.vmware", "pyVmomi.vmodl", "pyVmomi.vim", "logging", "sys", "salt.exceptions.VMwareRuntimeError", "salt.exceptions.VMwareObjectRetrievalError", "salt.ext.vsan.vsanapiutils", "ssl", "salt.exceptions.VMwareApiError"], "function_names": ["create_diskgroup", "_wait_for_tasks", "vsan_supported", "remove_diskgroup", "add_capacity_to_diskgroup", "get_vsan_disk_management_system", "remove_capacity_from_diskgroup", "__virtual__", "get_cluster_vsan_info", "get_vsan_cluster_config_system", "reconfigure_cluster_vsan", "get_host_vsan_system"], "function_calls": ["_wait_for_tasks", "VMwareObjectRetrievalError", "getattr", "int", "VMwareApiError", "str", "get_vsan_cluster_config_system", "get_host_vsan_system", "VMwareRuntimeError"], "class_names": [], "class_method_calls": ["spec.cacheDisks", "vsan_cl_conf_sys.VsanClusterGetConfig", "vim.VsanHostDecommissionMode", "diskgroup.ssd", "vsan_disk_mgmt_system.InitializeDiskMappings", "object_action.ensureObjectAccessibility", "context.verify_mode", "vsanapiutils.WaitForTasks", "context.check_hostname", "spec.creationType", "exc.privilegeId", "vmodl.fault", "vmodl.query", "exc.method", "host_vsan_system.RemoveDisk_Task", "api_version.split", "c.canonicalName", "vim.HostMaintenanceSpec", "log.debug", "host_vsan_system.RemoveDiskMapping_Task", "maint_spec.vsanMode", "vim.VsanHostDecommissionModeObjectAction", "log.trace", "vmodl.RuntimeFault", "vim.HostSystem", "ssl.create_default_context", "object_action.noAction", "vsan_cl_conf_sys.VsanClusterReconfig", "service_instance.content", "log.exception", "cache_disk.canonicalName", "vsanapiutils.GetVsanVcMos", "vim.VimVsanHostDiskMappingCreationSpec", "spec.host", "logging.getLogger", "exc.msg", "vim.HostVsanSystem", "vim.fault", "ssl.CERT_NONE", "sys.version_info", "spec.capacityDisks", "service_instance._stub", "salt.utils"]}, "vt.py": {"libraries": ["os", "functools", "salt.utils.crypt", "pty", "signal", "salt.utils.stringutils", "fcntl", "struct", "win32con", "errno", "time", "win32file.WriteFile", "select", "salt.utils.data", "msvcrt", "salt._logging.LOG_LEVELS", "logging", "termios", "win32pipe.PeekNamedPipe", "win32api", "sys", "subprocess", "win32file.ReadFile", "win32process"], "function_names": ["_recv", "__init__", "read_and_decode_fd", "_spawn", "_execute", "isalive", "send_signal", "setwinsize", "close", "_translate_newlines", "getwinsize", "_send", "_preexec", "__exit__", "recv", "__detect_parent_terminal_size", "kill", "has_unread_data", "sendline", "__enter__", "send", "terminate", "wait"], "function_calls": ["read_and_decode_fd", "_terminal_exception", "RuntimeError", "TerminalException", "setwinsize", "getwinsize", "_wifexited", "setattr", "_wexitstatus", "_wtermsig", "_waitpid", "preexec_fn", "ValueError", "isinstance", "len", "getattr", "hasattr", "_wifstopped", "_wifsignaled"], "class_names": ["TerminalException", "Terminal"], "class_method_calls": ["LOG_LEVELS.get", "os.read", "self.partial_data_stderr", "sys.stderr", "fcntl.ioctl", "struct.unpack", "signal.SIGCONT", "self.recv", "sys.stdout", "os.WIFSIGNALED", "self.has_unread_data", "signal.SIGINT", "self.shell", "errno.EPIPE", "self.env", "err.errno", "self.flag_eof_stderr", "self.args", "self.terminated", "self.preexec_fn", "win32process.GetExitCodeProcess", "self.stdin", "os.setsid", "self.terminate", "logging.DEBUG", "os.error", "salt.utils", "self.stream_stderr", "self.receive_encoding", "signal.SIGHUP", "os.write", "os.close", "subprocess.Popen", "log.warning", "os.kill", "logging.Logger", "struct.pack", "self.child_fd", "self.stdout_logger", "self.exitstatus", "os.WTERMSIG", "fcntl.fcntl", "os.name", "pty.openpty", "os.O_NOCTTY", "select.select", "self.executable", "self.status", "self.__class__", "signal.SIGTERM", "self._preexec", "signal.SIGKILL", "self._handle", "os.O_NONBLOCK", "self.stderr", "self.stdin_logger_level", "sys.stdin", "self.stderr_logger", "self._spawn", "os.waitpid", "self.pid", "os.WIFEXITED", "sys.exc_info", "signal.CTRL_C_EVENT", "ex.end", "self._translate_newlines", "self.send", "fcntl.F_SETFL", "os.WIFSTOPPED", "self.log_sanitize", "rfds.append", "self.wait", "self.stdin_logger", "self.__detect_parent_terminal_size", "self.partial_data_stdout", "data.encode", "sys.platform", "self.send_signal", "os.O_WRONLY", "self.stderr_logger_level", "os.O_RDWR", "self.child_fde", "self.flag_eof_stdout", "exc.errno", "os.open", "fcntl.F_GETFL", "errno.ECHILD", "stripped.replace", "self.stdout_logger_level", "self.stdout", "os.WNOHANG", "proc.pid", "signal.CTRL_BREAK_EVENT", "functools.partial", "time.sleep", "self.cwd", "self.close", "self.stream_stdout", "terminal_command.replace", "self._recv", "os.ttyname", "self.proc", "os.WEXITSTATUS", "self.closed", "log.debug", "win32api.TerminateProcess", "stderr.rstrip", "win32con.STILL_ACTIVE", "os.pipe", "log.trace", "why.errno", "self.signalstatus", "self._send", "stdout.rstrip", "self.rows", "ex.start", "logging.getLogger", "os.linesep", "data.replace", "stripped.startswith", "self.cols", "self.isalive"]}, "vt_helper.py": {"libraries": ["os", "re", "logging", "salt.utils.vt.TerminalException", "salt.utils.vt.Terminal"], "function_names": ["__init__", "close_connection", "sendline"], "function_calls": ["TerminalException", "Terminal"], "class_names": ["SSHConnection"], "class_method_calls": ["KEY_VALID_RE.search", "ret_stdout.append", "os.linesep", "logging.getLogger", "self.conn", "log.error", "log.info", "self.linesep", "log.debug", "ret_stderr.append", "self.prompt_re", "SSH_PASSWORD_PROMPT_RE.search", "re.compile", "re.M"]}, "win_chcp.py": {"libraries": ["contextlib.contextmanager", "pywintypes", "logging", "salt.exceptions.CodePageError", "win32console"], "function_names": ["__virtual__", "get_codepage_id", "chcp", "set_codepage_id"], "function_calls": ["int", "type", "get_codepage_id", "isinstance", "CodePageError", "set_codepage_id"], "class_names": [], "class_method_calls": ["exc.args", "win32console.SetConsoleCP", "logging.getLogger", "log.error", "pywintypes.error", "win32console.GetConsoleCP"]}, "win_dotnet.py": {"libraries": ["salt.utils.versions.Version", "salt.utils.platform", "salt.utils.win_reg"], "function_names": ["versions_list", "__virtual__", "dotnet_45_plus_versions", "version_at_least", "versions_details", "versions"], "function_calls": ["sorted", "str", "versions_list", "dotnet_45_plus_versions", "Version", "versions"], "class_names": [], "class_method_calls": ["win_reg.list_keys", "win_reg.read_value", "ver_key.startswith", "salt.utils", "win_reg.value_exists"]}, "win_functions.py": {"libraries": ["psutil", "ctypes", "win32con.HWND_BROADCAST", "win32api", "salt.exceptions.CommandExecutionError", "re", "pywintypes", "win32security", "win32net", "win32con.SMTO_ABORTIFHUNG", "platform", "win32con.WM_SETTINGCHANGE"], "function_names": ["get_current_user", "get_user_groups", "enable_ctrl_logoff_handler", "broadcast_setting_change", "get_sam_name", "escape_meta_chars", "is_admin", "get_parent_pid", "get_sid_from_name", "escape_argument", "guid_to_squid", "__virtual__", "escape_for_cmd_exe", "squid_to_guid"], "function_calls": ["get_user_groups", "range", "get_sid_from_name", "escape_for_cmd_exe", "CommandExecutionError", "list"], "class_names": [], "class_method_calls": ["m.group", "ctypes.create_unicode_buffer", "arg.replace", "win32net.error", "pywintypes.error", "win32api.GetUserNameEx", "exc.winerror", "guid_match.group", "re.search", "user32.SendMessageTimeoutW", "meta_re.sub", "ctypes.WinDLL", "re.compile", "psutil.Process", "win32api.SetConsoleCtrlHandler", "guid_pattern.match", "win32net.NetUserGetGroups", "win32security.LookupAccountName", "squid_match.group", "win32api.NameSamCompatible", "name.upper", "win32api.GetUserName", "win32security.LookupAccountSid", "ret_groups.append", "re.escape", "platform.node", "win32security.ConvertSidToStringSid", "win32net.NetUserGetLocalGroups", "squid_pattern.match"]}, "win_lgpo_auditpol.py": {"libraries": ["salt.modules.cmdmod", "salt.exceptions.CommandExecutionError", "re", "salt.utils.platform", "logging", "salt.utils.files", "tempfile"], "function_names": ["get_auditpol_dump", "_auditpol_cmd", "set_setting", "get_settings", "get_setting", "__virtual__", "_get_valid_names"], "function_calls": ["_auditpol_cmd", "get_settings", "KeyError", "_get_valid_names", "iter", "dict", "CommandExecutionError", "zip", "list"], "class_names": [], "class_method_calls": ["ret.update", "line.strip", "re.split", "setting.lower", "logging.getLogger", "x.lower", "category.lower", "value.lower", "k.lower", "tempfile.NamedTemporaryFile", "salt.utils", "salt.modules", "tmp_file.name", "fp.readlines", "name.lower"]}, "win_lgpo_netsh.py": {"libraries": ["os", "socket", "salt.modules.cmdmod", "salt.exceptions.CommandExecutionError", "re", "logging", "textwrap.dedent", "tempfile"], "function_names": ["set_logging_settings", "set_settings", "get_settings", "get_all_profiles", "__virtual__", "_netsh_command", "_netsh_file", "get_all_settings", "set_state", "set_firewall_settings"], "function_calls": ["len", "dedent", "int", "get_settings", "iter", "dict", "_netsh_command", "CommandExecutionError", "_netsh_file", "get_all_settings", "list", "zip", "ValueError"], "class_names": [], "class_method_calls": ["store.lower", "outbound.lower", "salt.modules", "tempfile.NamedTemporaryFile", "section.lower", "state.lower", "log.debug", "ret.update", "socket.gethostname", "re.split", "setting.lower", "logging.getLogger", "fp.name", "inbound.lower", "profile.lower", "fp.write", "salt.utils", "value.lower", "os.remove"]}, "win_osinfo.py": {"libraries": ["ctypes", "ctypes.wintypes.BYTE", "win32netcon", "ctypes.wintypes.DWORD", "win32net", "ctypes.wintypes.WORD", "ctypes.wintypes.WCHAR"], "function_names": ["os_version_info_ex", "__init__", "__virtual__", "get_join_info", "get_os_version_info"], "function_calls": ["os_version_info_ex", "OSVersionInfoEx", "super"], "class_names": ["OSVersionInfoEx", "OSVersionInfo"], "class_method_calls": ["info.dwPlatformId", "win32netcon.NetSetupUnjoined", "ctypes.byref", "info.dwMajorVersion", "info.wProductType", "info.dwMinorVersion", "win32netcon.NetSetupUnknown", "self.dwOSVersionInfoSize", "info.wServicePackMinor", "ctypes.WinDLL", "ctypes.sizeof", "ctypes.Structure", "kernel32.GetVersionExW", "win32netcon.NetSetupDomainName", "info.wSuiteMask", "info.wServicePackMajor", "info.dwBuildNumber", "win32net.NetGetJoinInformation", "win32netcon.NetSetupWorkgroupName"]}, "win_pdh.py": {"libraries": ["time", "win32pdh", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "pywintypes", "logging"], "function_names": ["list_instances", "get_counter", "build_counter", "__str__", "list_counters", "get_info", "__init__", "value", "__virtual__", "get_all_counters", "add_to_query", "build_counter_list", "get_counters", "list_objects", "type_string"], "function_calls": ["staticmethod", "getattr", "dir", "sorted", "Counter", "build_counter_list", "CommandExecutionError", "get_counters", "isinstance"], "class_names": ["Counter"], "class_method_calls": ["time.sleep", "win32pdh.ValidatePath", "type_list.append", "counter.value", "exc.strerror", "win32pdh.AddCounter", "win32pdh.EnumObjectItems", "win32pdh.MakeCounterPath", "self.index", "pywintypes.error", "self.instance", "win32pdh.CollectQueryData", "Counter.build_counter", "instance.lower", "counter.add_to_query", "log.debug", "win32pdh.CloseQuery", "self.info", "win32pdh.GetCounterInfo", "ret.update", "counters.append", "win32pdh.EnumObjects", "self.handle", "counter_list.append", "win32pdh.OpenQuery", "logging.getLogger", "self.get_info", "self.path", "self.counter", "win32pdh.GetFormattedCounterValue", "member.startswith", "win32pdh.PDH_FMT_DOUBLE", "self.obj", "counter.path", "salt.utils", "self.type"]}, "win_reg.py": {"libraries": ["win32api", "salt.exceptions.CommandExecutionError", "win32gui", "salt.utils.platform", "logging", "salt.utils.stringutils", "win32con"], "function_names": ["value_exists", "_subkeys", "read_value", "__init__", "__getattr__", "_to_unicode", "__virtual__", "_traverse_registry_tree", "_to_mbcs", "list_keys", "list_values", "broadcast_change", "delete_key_recursive", "set_value", "key_exists", "delete_value", "cast_vdata"], "function_calls": ["len", "_subkeys", "bool", "range", "int", "str", "Registry", "_to_unicode", "_traverse_registry_tree", "_to_mbcs", "broadcast_change", "CommandExecutionError", "isinstance", "key_exists", "list", "cast_vdata"], "class_names": ["Registry"], "class_method_calls": ["win32con.HKEY_CLASSES_ROOT", "win32con.KEY_WOW64_32KEY", "win32con.KEY_ALL_ACCESS", "win32api.RegDeleteKey", "win32con.HKEY_USERS", "registry.subkey_slash_check", "exc.strerror", "key_list.append", "values.append", "vdata.encode", "win32api.RegQueryValueEx", "msg.format", "win32api.RegEnumValue", "self.hkeys", "self.vtype_reverse", "exc.winerror", "win32api.RegSetValueEx", "registry.hkeys", "win32api.RegCloseKey", "self.opttype", "win32con.REG_MULTI_SZ", "registry.vtype_reverse", "self.subkey_slash_check", "win32gui.SendMessageTimeout", "win32api.RegCreateKeyEx", "registry.vtype", "win32api.RegFlushKey", "win32con.SMTO_ABORTIFHUNG", "log.debug", "win32con.REG_BINARY", "win32con.HWND_BROADCAST", "win32con.KEY_READ", "log.trace", "log.error", "win32con.HKEY_LOCAL_MACHINE", "win32api.RegEnumKey", "subkeys.append", "log.exception", "win32api.error", "self.vtype", "win32con.REG_QWORD", "self.opttype_reverse", "registry.opttype", "win32api.RegDeleteValue", "self.registry_32", "win32con.REG_DWORD", "logging.getLogger", "win32con.HKEY_CURRENT_USER", "registry.registry_32", "key.count", "win32api.RegOpenKeyEx", "win32con.REG_SZ", "win32con.REG_EXPAND_SZ", "win32con.HKEY_CURRENT_CONFIG", "salt.utils", "win32api.RegQueryInfoKey", "_ret.append", "win32con.WM_SETTINGCHANGE"]}, "win_runas.py": {"libraries": ["psutil", "ctypes", "time", "win32api", "os", "salt.platform.win", "salt.exceptions.CommandExecutionError", "win32event", "win32pipe", "pywintypes", "win32profile", "win32security", "logging", "msvcrt", "win32process", "win32con"], "function_names": ["runas", "runas_unpriv", "__virtual__", "split_username", "create_env"], "function_calls": ["int", "runas_unpriv", "split_username", "CommandExecutionError", "create_env"], "class_names": [], "class_method_calls": ["win32con.LOGON32_PROVIDER_DEFAULT", "time.time", "stdin_read.handle", "ctypes.byref", "stderr_write.handle", "win32security.OpenProcessToken", "pywintypes.error", "os.fdopen", "f_err.read", "win32security.SECURITY_ATTRIBUTES", "exc.winerror", "win32api.CloseHandle", "win32security.GetTokenInformation", "stderr_read.handle", "os.O_TEXT", "win32process.CREATE_NO_WINDOW", "log.debug", "f_out.read", "psutil.Process", "win32profile.CreateEnvironmentBlock", "win32con.STARTF_USESTDHANDLES", "process_info.hThread", "win32process.CREATE_NEW_CONSOLE", "process_info.dwThreadId", "stdin_write.handle", "win32event.WaitForSingleObject", "win32security.LookupAccountName", "win32api.FormatMessage", "msvcrt.open_osfhandle", "salt.platform", "win32security.TokenLinkedToken", "security_attributes.bInheritHandle", "win32con.WAIT_OBJECT_0", "win32process.CREATE_SUSPENDED", "os.O_RDONLY", "win32process.GetExitCodeProcess", "logging.getLogger", "win32con.LOGON32_LOGON_INTERACTIVE", "exitcode.value", "win32event.INFINITE", "stdout_read.handle", "stdout_write.handle", "win32security.TOKEN_QUERY", "process_info.hProcess", "win32api.GetCurrentProcess", "win32security.RevertToSelf", "username.split", "win32con.LOGON32_LOGON_SERVICE", "win32security.TokenElevationType", "process_info.dwProcessId", "win32security.TOKEN_ADJUST_PRIVILEGES", "win32security.LogonUser", "win32pipe.CreatePipe"]}, "win_update.py": {"libraries": ["win32com.client", "salt.exceptions.CommandExecutionError", "salt.utils.data", "pywintypes", "logging", "salt.utils.winapi", "subprocess", "salt.utils.args"], "function_names": ["count", "installed", "refresh", "download", "available", "__init__", "search", "uninstall", "needs_reboot", "summary", "updates", "__virtual__", "install", "_run", "list"], "function_calls": ["bool", "range", "str", "needs_reboot", "CommandExecutionError", "Updates", "isinstance"], "class_names": ["WindowsUpdateAgent", "Updates"], "class_method_calls": ["exc.args", "update.MsrcSeverity", "category.Name", "installer.Updates", "self._run", "searcher.Search", "downloader.Download", "update.IsInstalled", "self.refresh", "update.Title", "p.communicate", "downloader.Updates", "subprocess.Popen", "update.Type", "update.AcceptEula", "uninstall_list.Add", "self.count", "subprocess.PIPE", "updates.count", "self._session", "download_list.Add", "result.RebootRequired", "install_list.Count", "update.IsHidden", "installer.Install", "update.IsMandatory", "update.EulaAccepted", "log.debug", "item.Name", "win32com.client", "update.Description", "uninstall_list.Count", "result.GetUpdateResult", "self.update_types", "results.Updates", "update.InstallationBehavior", "updates.updates", "self._updates", "log.error", "install_list.Add", "uninstall_list.Item", "update.IsDownloaded", "item.lower", "item.KBArticleIDs", "update.Categories", "update.SupportUrl", "searcher.Online", "download_list.Count", "found.Add", "self.updates", "logging.getLogger", "item.split", "self.fail_codes", "install_list.Item", "item.Identity", "obj_sys.RebootRequired", "pywintypes.com_error", "update.Identity", "installer.Uninstall", "download_list.Item", "update.KBArticleIDs", "salt.utils", "result.ResultCode", "update.RebootRequired", "error.args"]}, "winapi.py": {"libraries": ["threading", "logging", "pythoncom"], "function_names": ["__enter__", "__init__", "__exit__", "__virtual__", "_is_main_thread"], "function_calls": [], "class_names": ["Com"], "class_method_calls": ["logging.getLogger", "pythoncom.CoUninitialize", "self.need_com_init", "pythoncom.CoInitialize", "self._is_main_thread", "log.debug", "threading.current_thread"]}, "xdg.py": {"libraries": ["os"], "function_names": ["xdg_config_dir"], "function_calls": [], "class_names": [], "class_method_calls": ["os.getenv", "os.path"]}, "xmlutil.py": {"libraries": ["salt.utils.data", "re", "string", "xml.etree.ElementTree"], "function_names": ["attribute", "clean_node", "int_attribute", "del_attribute", "element_to_str", "strip_spaces", "_to_dict", "get_xml_node", "change_xml", "_to_full_dict", "_do_delete", "to_dict", "set_node_text", "del_text", "_conv_name"], "function_calls": ["len", "Exception", "int", "del_fn", "str", "set", "clean_node", "compare_fn", "strip_spaces", "_to_dict", "get_xml_node", "set_fn", "get_fn", "_to_full_dict", "convert_fn", "isinstance", "list", "_conv_name"], "class_names": [], "class_method_calls": ["node.tail", "node.attrib", "xmltree.attrib", "s.startswith", "xpath.startswith", "string.Template", "kept_nodes.add", "xmltree.tag", "node.text", "n.get", "v.get", "re.match", "param.get", "ElementTree.tostring", "xmltree.text", "xpath.rfind", "doc.findall", "n.text", "item.tag", "node.keys", "doc.iter", "n.set", "value_item.get", "matcher.group", "re.sub", "node.find", "s.endswith", "item.text", "parent.remove", "x.split", "parent_map.get", "ElementTree.SubElement", "salt.utils"]}, "yamldumper.py": {"libraries": ["yaml.SafeDumper", "yaml.CSafeDumper", "yaml.Dumper", "salt.utils.odict.OrderedDict", "yaml.CDumper", "salt.utils.context", "collections", "yaml"], "function_names": ["represent_ordereddict", "get_dumper", "dump", "safe_dump", "represent_undefined", "increase_indent"], "function_calls": ["list", "super"], "class_names": ["OrderedDumper", "IndentMixin", "SafeOrderedDumper", "IndentedSafeOrderedDumper"], "class_method_calls": ["OrderedDumper.add_representer", "yaml.representer", "SafeOrderedDumper.represent_scalar", "dumper.represent_scalar", "SafeOrderedDumper.add_representer", "yaml.dump", "collections.defaultdict", "salt.utils", "data.items", "OrderedDumper.represent_scalar", "kwargs.setdefault", "dumper.represent_dict"]}, "yamlencoding.py": {"libraries": ["sys", "salt.utils.decorators.jinja.jinja_filter", "io", "yaml"], "function_names": ["yaml_dquote", "yaml_squote", "yaml_encode"], "function_calls": ["yaml_dquote", "str", "type", "jinja_filter", "TypeError", "isinstance"], "class_names": [], "class_method_calls": ["yemitter.write_double_quoted", "yaml.emitter", "yaml.representer", "yaml.ScalarNode", "yemitter.write_single_quoted", "ynode.value", "yrepr.represent_data", "ostream.getvalue", "io.StringIO", "sys.maxsize", "ynode.tag"]}, "yamllint.py": {"libraries": ["yamllint", "logging", "yamllint.linter", "salt.utils.stringutils", "yamllint.config.YamlLintConfig"], "function_names": ["has_yamllint", "lint", "version"], "function_calls": ["YamlLintConfig"], "class_names": [], "class_method_calls": ["linter.run", "yamllint.__version__", "logging.getLogger", "problem.column", "problem.line", "problems.append", "problem.level", "problem.message", "salt.utils"]}, "yamlloader.py": {"libraries": ["yaml.nodes.SequenceNode", "salt.utils.stringutils", "yaml.constructor.ConstructorError", "yaml.nodes.MappingNode", "yaml"], "function_names": ["construct_mapping", "flatten_mapping", "__init__", "construct_yaml_str", "safe_load", "load", "construct_unicode", "construct_scalar", "construct_yaml_map"], "function_calls": ["len", "hash", "getattr", "super", "type", "isinstance", "ConstructorError"], "class_names": ["SaltYamlSafeLoader"], "class_method_calls": ["merge.extend", "self.dictclass", "node.value", "name_node.value", "subnode.id", "submerge.reverse", "value_node.id", "yaml.load", "key_node.tag", "node.id", "value_node.value", "subnode.start_mark", "self.construct_mapping", "self.construct_scalar", "key_node.start_mark", "self.flatten_mapping", "self.construct_object", "node.start_mark", "subnode.value", "yaml.SafeLoader", "data.update", "self.add_constructor", "submerge.append", "value_node.start_mark", "salt.utils", "node.tag", "key_node.value"]}, "yamlloader_old.py": {"libraries": ["re", "yaml.nodes.SequenceNode", "salt.utils.stringutils", "yaml.constructor.ConstructorError", "yaml.nodes.MappingNode", "yaml"], "function_names": ["construct_mapping", "fetch_plain", "flatten_mapping", "__init__", "construct_yaml_str", "safe_load", "load", "construct_unicode", "construct_scalar", "construct_yaml_map"], "function_calls": ["len", "hash", "super", "eval", "type", "isinstance", "ConstructorError"], "class_names": ["SaltYamlSafeLoader"], "class_method_calls": ["merge.extend", "self.dictclass", "node.value", "name_node.value", "self.peek", "self.fetch_single", "subnode.id", "submerge.reverse", "value_node.id", "exc.problem", "yaml.load", "key_node.tag", "re.match", "self.line", "yaml.Loader", "node.id", "yaml.CDumper", "value_node.value", "subnode.start_mark", "self.construct_mapping", "self.construct_scalar", "self.fetch_double", "yaml.CLoader", "key_node.start_mark", "self.flatten_mapping", "self.construct_object", "node.start_mark", "self.pointer", "subnode.value", "yaml.SafeLoader", "data.update", "self.column", "yaml.scanner", "re.IGNORECASE", "self.add_constructor", "submerge.append", "value_node.start_mark", "yaml.Dumper", "salt.utils", "node.tag", "key_node.value"]}, "yast.py": {"libraries": ["salt.utils.yaml", "salt.utils.xmlutil", "xml.etree.ElementTree", "salt.utils.files"], "function_names": ["mksls"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "fh_.read", "xml.to_dict", "ET.fromstring"]}, "version.py": {"libraries": ["salt.utils.entrypoints", "win32api", "argparse", "os", "collections.namedtuple", "salt.utils.platform.linux_distribution", "functools.total_ordering", "re", "operator", "sys", "salt.utils.versions", "subprocess", "salt._compat.importlib_metadata", "platform", "win32con"], "function_names": ["system_version", "__init__", "from_name", "current_release", "__get_version", "string", "versions", "parse", "_parser", "__gt__", "extensions_information", "noc_info", "full_info", "salt_information", "__new__", "formatted_version", "__str__", "__compare__", "next_release", "__eq__", "__discover_version", "min_info", "full_info_all_versions", "__ne__", "__lt__", "new_version", "__le__", "versions_information", "previous_release", "can_have_dot_zero", "info", "dependency_information", "pre_index", "from_last_named_version", "system_information", "versions_report", "sse", "_sort_by_lowercased_name", "__repr__", "pre_info", "__ge__"], "function_calls": ["system_version", "dir", "super", "sorted", "dict", "__import__", "max", "__get_version", "list", "open", "_parser", "linux_distribution", "extensions_information", "int", "type", "SaltStackVersion", "salt_information", "globals", "SaltVersion", "version", "callable", "__discover_version", "method", "tuple", "cls", "ValueError", "isinstance", "len", "getattr", "bool", "versions_information", "namedtuple", "dependency_information", "iter", "system_information", "print", "map"], "class_names": ["SaltStackVersion", "SaltVersion", "SaltVersionsInfo"], "class_method_calls": ["saltstack_version.sha", "cls.LNAMES", "win32api.RegOpenKey", "cls._sorted_versions", "parts.remove", "platform.mac_ver", "cls.versions", "argparse.ArgumentParser", "parts.append", "re.search", "re.compile", "cls.current_release", "self.info", "sys.exit", "parser.add_argument", "platform.win32_ver", "self.minor", "platform.system", "SaltVersionsInfo._current_release", "SaltVersionsInfo.versions", "sys.version", "k.lower", "platform.machine", "args.parse", "parser.parse_args", "other.info", "salt.utils", "fmt.format", "subprocess.Popen", "win32api.RegQueryValueEx", "sys.maxsize", "os_err.errno", "args.next_release", "re.match", "product_name.split", "__saltstack_version__.next_release", "cls.from_name", "self.VNAMES", "importlib_metadata.version", "self.can_have_dot_zero", "self.noc", "self.noc_info", "self.__class__", "self.RMATCH", "SaltStackVersion.git_sha_regex", "__saltstack_version__.info", "cls._previous_release", "os.path", "other.minor", "saltstack_version.noc", "version.released", "operator.attrgetter", "other.pre_type", "cls.git_describe_regex", "self.pre_type", "self.min_info", "name.lower", "process.communicate", "cls._current_release", "version_string.lower", "self.__compare__", "other.noc_info", "subprocess.PIPE", "info.extend", "out.decode", "libs.append", "rfh.read", "self.mbugfix", "self.bugfix", "__saltstack_version__.name", "v.info", "x.lower", "self.pre_num", "parts.extend", "sys.platform", "err.decode", "dist_nv.version", "self.string", "cls._next_release", "dist_nv.name", "SaltVersionsInfo.current_release", "self.sha", "NAMES.items", "v.name", "self.sse", "name.isupper", "self.name", "out.strip", "platform.release", "SaltVersionsInfo.SULFUR", "version_string.decode", "self.new_version", "other.pre_index", "argparse.REMAINDER", "SaltStackVersion.current_release", "self.pre_index", "win32con.HKEY_LOCAL_MACHINE", "__saltstack_version__.string", "SaltStackVersion.parse", "info.append", "SaltVersionsInfo.next_release", "match.groups", "self.major"]}, "file_roots.py": {"libraries": ["salt.utils.path", "os", "salt.utils.files"], "function_names": ["list_env", "list_roots", "write", "find", "read"], "function_calls": ["len", "list_env", "next", "find", "iter"], "class_names": [], "class_method_calls": ["fn_.keys", "ret.append", "fp_.write", "fp_.read", "os.path", "above.insert", "os.makedirs", "salt.utils"]}, "pillar_roots.py": {"libraries": ["salt.utils.path", "os", "salt.utils.verify", "salt.utils.files"], "function_names": ["list_env", "list_roots", "write", "find", "read"], "function_calls": ["len", "list_env", "next", "find", "iter"], "class_names": [], "class_method_calls": ["fn_.keys", "ret.append", "fp_.write", "fp_.read", "os.path", "above.insert", "os.makedirs", "salt.utils"]}, "yumnotify.py": {"libraries": ["yum.plugins.TYPE_CORE", "hashlib", "os"], "function_names": ["_get_mtime", "posttrans_hook", "_get_checksum"], "function_calls": ["_get_mtime", "_get_checksum", "int", "open"], "class_names": [], "class_method_calls": ["os.environ", "ck_fh.write", "rpm_db_fh.read", "digest.update", "digest.hexdigest", "os.path", "hashlib.sha256"]}, "setup.py": {"libraries": ["yum", "os", "distutils.errors.DistutilsArgError", "bbfreeze", "urllib2.urlopen", "distutils.command.clean.clean", "setuptools.setup", "zmq", "setuptools.command.install.install", "distutils.command.build.build", "warnings", "salt.version.SaltStackVersion", "setuptools.command.develop.develop", "setuptools.command.bdist_egg.bdist_egg", "glob", "bbfreeze.modulegraph.modulegraph.ModuleGraph", "distutils.dist", "distutils.command.install_lib.install_lib", "urllib.request.urlopen", "setuptools.command.sdist.sdist", "distutils.version.LooseVersion", "wheel.bdist_wheel.bdist_wheel", "distutils.log", "requests", "setuptools", "esky.bdist_esky", "sys", "subprocess", "distutils.cmd.Command", "datetime.datetime"], "function_names": ["setup_esky", "__init__", "discover_packages", "make_release_tree", "_parse_requirements_file", "run", "_property_freezer_options", "_property_install_requires", "update_metadata", "parse_command_line", "_property_scripts", "make_distribution", "write_manifest", "_property_data_files", "_property_entry_points", "initialize_options", "finalize_options", "_called_from_setup", "_property_package_data", "get_esky_freezer_includes"], "function_calls": ["DistutilsArgError", "getattr", "dir", "hasattr", "int", "str", "type", "setup", "exit", "log", "urlopen", "LooseVersion", "_parse_requirements_file", "ModuleGraph", "print", "setattr", "enumerate", "open"], "class_names": ["TestCommand", "InstallLib", "WriteSaltVersion", "Sdist", "BDistWheel", "Develop", "GenerateSaltSyspaths", "CloudSdist", "Build", "BDistEgg", "Clean", "Install", "WriteSaltSshPackagingFile", "SaltDistribution"], "class_method_calls": ["develop.user_options", "develop.run", "sys.stderr", "sdist.make_distribution", "log.warn", "self.get_finalized_command", "self.setup_esky", "sys.stdout", "self.get_esky_freezer_includes", "os.environ", "sys.exit", "sys.path", "develop.initialize_options", "self.salt_logs_dir", "self.license", "line.startswith", "self.long_description_content_type", "Sdist.user_options", "f.read", "subprocess.run", "self.salt_spm_pillar_dir", "warnings.warn", "self.generate_salt_syspaths", "req.status_code", "self.salt_share_dir", "modules.append", "os.unlink", "self.salt_spm_parent_dir", "test_cmd.extend", "self.skip_build", "freezer_includes.remove", "sys.executable", "chmod.append", "sdist.make_release_tree", "mgraph.run_script", "os.walk", "self.filelist", "install_lib.run", "os.uname", "self.write_salt_version", "self.salt_base_pillar_roots_dir", "self.metadata", "parsed_requirements.append", "script.startswith", "subprocess.check_output", "funcname.split", "self.description", "self.author", "log.error", "distutils.dist", "self.ssh_packaging", "self.url", "ret.returncode", "datetime.utcnow", "self.distribution", "Sdist.run", "sys.version_info", "os.chdir", "self.salt_transport", "self.salt_base_file_roots_dir", "os.path", "inputfile.endswith", "self.run_command", "self.salt_srv_root_dir", "self.get_inputs", "requests.get", "Sdist.initialize_options", "run_frame.f_back", "self.author_email", "build.run", "self.cmdclass", "self.salt_pidfile_dir", "self.get_outputs", "self.salt_spm_reactor_dir", "self.salt_spm_formula_dir", "line.strip", "self.salt_config_dir", "req.encoding", "self.salt_home_dir", "os.sep", "funcname.startswith", "self.get_option_dict", "develop.finalize_options", "bdist_egg.finalize_options", "self.download_bootstrap_script", "fp_.write", "os.chmod", "self.python_requires", "self.mimic_salt_install", "rfh.read", "Sdist.write_manifest", "self.salt_base_thorium_roots_dir", "Sdist.finalize_options", "self.salt_base_master_roots_dir", "bdist_wheel.finalize_options", "glob.glob", "self.classifiers", "sys.platform", "install.finalize_options", "scripts.append", "mod.filename", "log.info", "build_cmd.build_lib", "install.run", "self.salt_root_dir", "Sdist.boolean_options", "wfh.write", "req.getcode", "self.packages", "os.remove", "INSTALL_SYSPATHS_TEMPLATE.format", "attrname.startswith", "self.salt_cache_dir", "self.with_salt_version", "sys.argv", "freezer_includes.append", "setuptools.__version__", "req.read", "self.name", "self.long_description", "self.update_metadata", "self.zip_safe", "req.text", "self.skip_bootstrap_download", "self.build_lib", "mod.identifier", "scripts.extend", "develop.boolean_options", "install._called_from_setup", "zmq.pyzmq_version_info", "self.runtests_opts", "install.initialize_options", "SaltStackVersion.parse", "self.salt_sock_dir", "datetime.utcfromtimestamp", "rfh.readlines", "self.salt_version", "clean.run", "self.discover_packages", "mgraph.flatten", "freezer_includes.extend", "self.salt_lib_state_dir"]}}