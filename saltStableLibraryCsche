{"label-and-assign.py": {"libraries": ["sys", "os", "github", "random", "github.GithubException.GithubException", "json", "datetime", "operator", "pathlib", "argparse"], "function_names": ["get_triage_next_account", "main", "label_and_assign_issue", "get_team_members", "get_last_account_assigned"], "function_calls": ["get_triage_next_account", "list", "main", "str", "label_and_assign_issue", "get_team_members", "sorted", "print", "get_last_account_assigned"], "class_names": [], "class_method_calls": ["CACHE_FILENAME.exists", "random.choice", "options.team", "parser.parse_args", "team.get_members", "org.login", "next_triage_account.login", "options.org", "json.dumps", "argparse.ArgumentParser", "json.loads", "issue.add_to_assignees", "g.get_organization", "github.Github", "CACHE_FILENAME.read_text", "parser.add_argument", "pathlib.Path", "repo.full_name", "CACHE_FILENAME.parent", "repo.get_issue", "parser.exit", "options.label", "previous_account.login", "org.get_repo", "os.environ", "datetime.datetime", "options.issue", "issue.add_to_labels", "CACHE_FILENAME.write_text", "options.repo", "operator.attrgetter", "sys.stderr", "org.get_team_by_slug"]}, "update_winrepo.py": {"libraries": ["os", "argparse"], "function_names": [], "function_calls": ["open", "print"], "class_names": [], "class_method_calls": ["os.getcwd", "version.startswith", "arg_parser.add_argument", "new_contents.append", "args.file", "args.version", "f.readlines", "f.writelines", "argparse.ArgumentParser", "arg_parser.parse_args"]}, "saltautodoc.py": {"libraries": ["sphinx.ext.autodoc.FunctionDocumenter"], "function_names": ["format_name", "add_documenter", "setup"], "function_calls": ["super", "hasattr", "len"], "class_names": ["SaltFunctionDocumenter"], "class_method_calls": ["app.add_autodocumenter", "self.module", "app.connect", "self.objpath"]}, "saltdomain.py": {"libraries": ["docutils.statemachine.ViewList", "os", "sphinx.locale._", "sphinx.util.nodes.nested_parse_with_titles", "docutils.nodes", "docutils.parsers.rst.Directive", "sphinx.addnodes", "sphinx.domains.python", "sphinx.domains.python.PyObject", "sphinx.domains.ObjType", "sphinx.roles.XRefRole", "sphinx.util.nodes.make_refnode", "sphinx.util.nodes.set_source_info", "re", "itertools", "salt"], "function_names": ["run", "resolve_xref", "setup", "parse_lit", "parse_file"], "function_calls": ["super", "_", "set_source_info", "SLSXRefRole", "dict", "OSError", "make_refnode", "bool", "str", "open", "len", "ObjType", "ViewList", "nested_parse_with_titles"], "class_names": ["LiterateCoding", "Formula", "CurrentFormula", "SLSXRefRole", "Event", "State", "SaltModuleIndex", "LiterateFormula", "SaltDomain"], "class_method_calls": ["enum.append", "self.lineno", "nodes.container", "config.formulas_dirs", "section.append", "roles.update", "app.add_config_value", "self.state", "python_domain.PythonModuleIndex", "nodes.section", "self.parse_file", "env.domaindata", "os.path", "addnodes.index", "app.add_crossref_type", "python_domain.PythonDomain", "object_types.update", "env.docname", "self.parse_lit", "sls_path.replace", "app.add_domain", "salt.__file__", "nodes.literal_block", "env.temp_data", "self.options", "list_item.append", "node.document", "comment.sub", "nodes.list_item", "itertools.groupby", "self.arguments", "nodes.enumerated_list", "os.pardir", "node.append", "list_item.children", "nodes.target", "self.data", "re.compile", "sections.append", "comment.match", "i.rstrip", "directives.update", "document.reporter", "f.readlines", "initial_data.update"]}, "saltrepo.py": {"libraries": [], "function_names": ["source_read_handler", "setup"], "function_calls": [], "class_names": [], "class_method_calls": ["app.config", "app.connect"]}, "vaultpolicylexer.py": {"libraries": ["pygments.lexers.configs.TerraformLexer", "pygments.lexer.inherit", "pygments.token.Keyword", "pygments.token.Punctuation", "pygments.token.Name", "pygments.token.Whitespace", "pygments.lexer.bygroups"], "function_names": ["setup"], "function_calls": ["bygroups"], "class_names": ["VaultPolicyLexer"], "class_method_calls": ["Keyword.Reserved", "Name.Variable", "app.add_lexer"]}, "conf.py": {"libraries": ["sys", "os", "salt.version", "time", "sphinx.util.logging", "sphinx.directives.other.TocTree", "textwrap", "types", "re", "pathlib", "shutil"], "function_names": ["_normalize_version", "run", "skip_mod_init_member", "extract_module_deprecations", "setup", "copy_release_templates_pre", "copy_release_templates_post"], "function_calls": ["str", "dict", "isinstance", "super"], "class_names": ["ReleasesTree"], "class_method_calls": ["app.add_directive", "dest.exists", "name.startswith", "time.strftime", "shutil.copyfile", "fpath.name", "types.FunctionType", "log.info", "os.path", "salt_version.info", "logging.getLogger", "salt.version", "app.connect", "msg.splitlines", "TocTree.option_spec", "app._copied_release_files", "salt_version.major", "sys.path", "fpath.unlink", "obj.__deprecated__", "textwrap.dedent", "x.zfill", "pathlib.Path", "dest.relative_to", "os.pardir", "release.startswith", "os.environ", "release_template_files_dir.iterdir", "entries.sort", "path.split", "obj.__name__", "fpath.relative_to", "re.sub", "sys.version_info"]}, "noxfile.py": {"libraries": ["sys", "glob", "os", "tarfile", "sqlite3", "nox", "nox.command.CommandFailed", "contextlib", "nox.virtualenv.VirtualEnv", "json", "datetime", "pathlib", "gzip", "nox.command", "tempfile", "shutil"], "function_names": ["test_m2crypto", "_pytest", "ci_test", "build", "docs_man", "test_pycryptodome", "_get_pip_requirements_file", "compress_dependencies", "lint_salt_pre_commit", "tar_reset", "session_run_always", "pre_archive_cleanup", "lint_tests", "lint_tests_pre_commit", "_get_session_python_version_info", "ci_test_onedir_pkgs", "fileno", "test_tcp", "ci_test_onedir_tcp", "create_xml_coverage_reports_onedir", "create_xml_coverage_reports", "find_session_runner", "_install_requirements", "pytest_zeromq_pycryptodome", "test_cloud", "ci_test_tcp", "create_html_coverage_report", "pytest_pycryptodome", "write", "pytest_m2crypto", "test_zeromq_m2crypto", "_upgrade_pip_setuptools_and_wheel", "pytest_tcp_pycryptodome", "create_json_coverage_reports_onedir", "lint_salt", "report_coverage", "_report_coverage", "combine_coverage_onedir", "_get_pydir", "_lint_pre_commit", "coverage_report", "lint", "docs", "docs_html", "pytest_tcp", "changelog", "test_zeromq", "combine_coverage", "pytest_zeromq", "pytest_zeromq_m2crypto", "test_tcp_pycryptodome", "pytest_tornado", "test_zeromq_pycryptodome", "_ci_test", "_run_with_coverage", "_install_coverage_requirement", "test_tcp_m2crypto", "_create_xml_coverage_reports", "recompress", "test_parametrized", "test", "test_tornado", "session_warn", "ci_test_onedir", "decompress_dependencies", "__init__", "pytest_tcp_m2crypto", "pytest_cloud", "pytest", "create_json_coverage_reports", "_lint", "_create_ci_directories"], "function_calls": ["_pytest", "any", "_get_pip_requirements_file", "list", "int", "session_run_always", "_get_session_python_version_info", "exit", "find_session_runner", "_install_requirements", "str", "sorted", "_upgrade_pip_setuptools_and_wheel", "Recompress", "_report_coverage", "_get_pydir", "_lint_pre_commit", "print", "ValueError", "next", "_ci_test", "_run_with_coverage", "_install_coverage_requirement", "_create_xml_coverage_reports", "session_warn", "tuple", "open", "_lint", "VirtualEnv", "_create_ci_directories"], "class_names": ["Tee", "Recompress"], "class_method_calls": ["session.warn", "session._runner", "rfile.extractall", "sys.platform", "recompress.recompress", "sqlite3.connect", "COVERAGE_OUTPUT_DIR.mkdir", "ENV_FILE.read_text", "shutil.which", "tarinfo.gid", "ARTIFACTS_DIR.joinpath", "fixed_link.relative_to", "ARTIFACTS_DIR.chmod", "session_py_version.strip", "REPO_ROOT.joinpath", "session.python", "cmd_args.append", "gzip.GzipFile", "session.log", "broken_link.unlink", "session.install", "self._second", "chunk_cmd.extend", "datetime.datetime", "self.tar_reset", "rfh.read", "s.signatures", "tarinfo.type", "ARTIFACTS_DIR.mkdir", "tarinfo.uid", "shutil.move", "sitecustomize_dir.strip", "json.loads", "targz.unlink", "tarfile.DIRTYPE", "install_command.extend", "db.execute", "cmd.append", "fpath.read_text", "tempfile.mkdtemp", "targz.name", "args.extend", "shutil.rmtree", "pathlib.Path", "os.readlink", "targz.stem", "targz.relative_to", "gz.write", "session.debug", "ONEDIR_ARTIFACT_PATH.relative_to", "path.is_symlink", "ci_test_onedir_path.relative_to", "contextlib.suppress", "nox_dependencies_tarball_path.unlink", "sys.stderr", "nox.options", "res.fetchone", "tarinfo.pax_headers", "COVERAGE_OUTPUT_DIR.relative_to", "cmd_args.pop", "sys.exit", "python_path_entries.insert", "python_path_entries.remove", "fpath.write_text", "os.sep", "dirname.name", "session_name.replace", "args.append", "tarinfo.name", "chunks.values", "EXTRA_REQUIREMENTS_INSTALL.split", "cmdline.append", "os.chdir", "COVERAGE_OUTPUT_DIR.chmod", "self.mtime", "tarinfo.mtime", "glob.glob", "kwargs.items", "session.posargs", "ONEDIR_ARTIFACT_PATH.exists", "tempd.joinpath", "session.notify", "env.update", "install_command.append", "sitecustomize_dir.relative_to", "part.isdigit", "extracted_dir.rglob", "ENV_FILE.exists", "pytest_args.append", "os.path", "wfile.add", "session.run_always", "nox_dependencies_tarball_path.exists", "path.is_file", "os.pathsep", "tarfile.open", "tarinfo.mode", "tarinfo.gname", "session.error", "self._first", "chunk_cmd.append", "nox.session", "session.run", "d_src.mkdir", "arg.startswith", "resolved_link.split", "sitecustomize_dir.exists", "_coverage_cmd_args.append", "name.relative_to", "ENV_FILE.unlink", "os.environ", "pkg.relative_to", "os.scandir", "nox.parametrize", "tarinfo.uname", "broken_link.symlink_to", "fpath.relative_to", "python_path_env_var.split", "session.name"]}, "_salt_onedir_extras.py": {"libraries": ["sys", "pathlib"], "function_names": ["setup"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["sys.platform", "sys.path", "pathlib.Path", "sys.version_info", "extras_parent_path.parent"]}, "freeze.py": {"libraries": ["bbfreeze.Freezer"], "function_names": [], "function_calls": ["Freezer", "fre"], "class_names": [], "class_method_calls": ["fre.include_py", "fre.addScript", "fre.use_compression"]}, "sodium_grabber_installer.py": {"libraries": ["distutils.core.setup", "distutils.core.Extension", "os.path"], "function_names": [], "function_calls": ["Extension", "setup"], "class_names": [], "class_method_calls": ["path.dirname", "path.join"]}, "build.py": {"libraries": ["os", "tarfile", "typing.TYPE_CHECKING", "relenv.create", "__future__.annotations", "json", "pathlib", "zipfile", "logging", "ptscripts.command_group", "ptscripts.Context", "tools.utils", "shutil"], "function_names": ["macos", "_check_pkg_build_files_exist", "salt_onedir", "rpm", "windows", "onedir_dependencies", "debian", "errfn"], "function_calls": ["str", "open", "command_group", "_check_pkg_build_files_exist"], "class_names": [], "class_method_calls": ["fp.write", "ctx.info", "onedir_artifact.parent", "build_cmd.append", "shutil.copyfile", "tools.utils", "ret.stdout", "shutil.move", "logging.getLogger", "env_args.extend", "ctx.exit", "json.loads", "extras_dir.mkdir", "path_parts.extend", "version_info.stdout", "tarfile.open", "env.get", "envpath.split", "os.pathsep", "ctx.run", "new_env.items", "install_args.extend", "src.relative_to", "path.exists", "ret.returncode", "ctx.error", "relenv.create", "pathlib.Path", "archive.extractall", "shutil.rmtree", "build_root.mkdir", "os.environ", "kwargs.items", "zipfile.ZipFile", "ctx.chdir", "tarball.extractall", "build.command"]}, "test_custom_full_path.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.REPO_DIR", "pytest.fixture", "pytest.INST_BIN", "os.path", "f.readlines", "pytest.DATA_DIR"]}, "test_custom_master.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_custom_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_custom_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_custom_rel_path.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.REPO_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_default.py": {"libraries": ["pytest"], "function_names": ["sys_mod", "pillar", "test_get_non_existing", "test_pillar_get_issue_61084", "test_get_default_none"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["modules.sys", "modules.pillar", "sys_mod.argspec", "pytest.fixture", "pytest.mark", "result.get", "pillar.get"]}, "test_default_master.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_default_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_default_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_existing.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.EXISTING_CONTENT", "pytest.INST_BIN", "os.path", "f.readlines", "pytest.DATA_DIR"]}, "test_existing_custom.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.REPO_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_existing_custom_master.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_existing_custom_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_existing_custom_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_existing_default.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.REPO_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_existing_default_master.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_existing_default_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_existing_default_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_install_dir_custom.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_present", "test_config_correct", "test_binaries_present", "inst_dir", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.REPO_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_install_dir_custom_master.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_present", "test_config_correct", "test_binaries_present", "inst_dir", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_install_dir_custom_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_present", "test_config_correct", "test_binaries_present", "inst_dir", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_install_dir_custom_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_present", "test_config_correct", "test_binaries_present", "inst_dir", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_install_dir_default.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_present", "test_config_correct", "test_binaries_present", "inst_dir", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.REPO_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_install_dir_default_master.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_present", "test_config_correct", "test_binaries_present", "inst_dir", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_install_dir_default_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_present", "test_config_correct", "test_binaries_present", "inst_dir", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_install_dir_default_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_present", "test_config_correct", "test_binaries_present", "inst_dir", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_install_dir_existing.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_present", "test_config_correct", "test_binaries_present", "inst_dir", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.fixture", "pytest.EXISTING_CONTENT", "pytest.INST_BIN", "os.path", "f.readlines", "pytest.DATA_DIR"]}, "test_install_dir_move_old_install.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_present", "test_config_correct", "test_binaries_present_old_location", "inst_dir", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.OLD_DIR", "pytest.fixture", "pytest.INST_BIN", "os.path", "f.readlines", "pytest.OLD_CONTENT", "pytest.DATA_DIR"]}, "test_old_install.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_correct", "test_binaries_present_old_location", "test_ssm_present_old_location", "test_config_present_old_location", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.OLD_DIR", "pytest.fixture", "pytest.INST_BIN", "os.path", "f.readlines", "pytest.OLD_CONTENT"]}, "test_old_install_custom.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_correct", "test_binaries_present_old_location", "test_ssm_present_old_location", "test_config_present_old_location", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.REPO_DIR", "pytest.OLD_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path"]}, "test_old_install_custom_master.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_correct", "test_binaries_present_old_location", "test_ssm_present_old_location", "test_config_present_old_location", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.OLD_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path"]}, "test_old_install_custom_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_correct", "test_binaries_present_old_location", "test_ssm_present_old_location", "test_config_present_old_location", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.OLD_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path"]}, "test_old_install_custom_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_correct", "test_binaries_present_old_location", "test_ssm_present_old_location", "test_config_present_old_location", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.OLD_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path"]}, "test_old_install_default.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_correct", "test_binaries_present_old_location", "test_ssm_present_old_location", "test_config_present_old_location", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.REPO_DIR", "pytest.OLD_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path"]}, "test_old_install_default_master.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_correct", "test_binaries_present_old_location", "test_ssm_present_old_location", "test_config_present_old_location", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.OLD_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path"]}, "test_old_install_default_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_correct", "test_binaries_present_old_location", "test_ssm_present_old_location", "test_config_present_old_location", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.OLD_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path"]}, "test_old_install_default_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_correct", "test_binaries_present_old_location", "test_ssm_present_old_location", "test_config_present_old_location", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.OLD_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path"]}, "test_old_install_move.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_correct", "test_binaries_present_old_location", "test_ssm_present_old_location", "test_config_present_old_location", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.OLD_DIR", "pytest.fixture", "pytest.INST_BIN", "os.path", "f.readlines", "pytest.OLD_CONTENT", "pytest.DATA_DIR"]}, "test_old_install_move_custom.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_correct", "test_binaries_present_old_location", "test_ssm_present_old_location", "test_config_present_old_location", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.REPO_DIR", "pytest.OLD_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_old_install_move_custom_master.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_correct", "test_binaries_present_old_location", "test_ssm_present_old_location", "test_config_present_old_location", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.OLD_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_old_install_move_custom_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_correct", "test_binaries_present_old_location", "test_ssm_present_old_location", "test_config_present_old_location", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.OLD_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_old_install_move_custom_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_correct", "test_binaries_present_old_location", "test_ssm_present_old_location", "test_config_present_old_location", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.OLD_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_old_install_move_default.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_correct", "test_binaries_present_old_location", "test_ssm_present_old_location", "test_config_present_old_location", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.REPO_DIR", "pytest.OLD_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_old_install_move_default_master.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_correct", "test_binaries_present_old_location", "test_ssm_present_old_location", "test_config_present_old_location", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.OLD_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_old_install_move_default_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_correct", "test_binaries_present_old_location", "test_ssm_present_old_location", "test_config_present_old_location", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.OLD_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_old_install_move_default_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_config_correct", "test_binaries_present_old_location", "test_ssm_present_old_location", "test_config_present_old_location", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.OLD_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "conftest.py": {"libraries": ["tests.support.runtests.RUNTIME_VARS", "pathlib", "pytest"], "function_names": ["_create_old_tempdir"], "function_calls": [], "class_names": [], "class_method_calls": ["pathlib.Path", "pytest.fixture", "RUNTIME_VARS.TMP"]}, "test_manual_custom_full_path.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.REPO_DIR", "pytest.fixture", "pytest.INST_BIN", "os.path", "f.readlines", "pytest.DATA_DIR"]}, "test_manual_custom_master.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_manual_custom_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_manual_custom_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_manual_custom_rel_path.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.REPO_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_manual_default.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.REPO_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_manual_default_master.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_manual_default_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_manual_default_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_manual_existing.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.EXISTING_CONTENT", "pytest.INST_BIN", "os.path", "f.readlines", "pytest.DATA_DIR"]}, "test_manual_existing_custom.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.REPO_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_manual_existing_custom_master.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_manual_existing_custom_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_manual_existing_custom_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_manual_existing_default.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.REPO_DIR", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_manual_existing_default_master.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_manual_existing_default_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "test_manulal_existing_default_master_minion.py": {"libraries": ["os", "pytest"], "function_names": ["test_binaries_present", "test_config_present", "test_config_correct", "install"], "function_calls": ["open"], "class_names": [], "class_method_calls": ["pytest.INST_DIR", "pytest.helpers", "pytest.fixture", "pytest.INST_BIN", "f.readlines", "os.path", "pytest.DATA_DIR"]}, "__init__.py": {"libraries": ["hashlib", "rich.progress.TransferSpeedColumn", "rich.progress.TextColumn", "tools.utils.gh", "yaml", "json", "pathlib", "ptscripts.Context", "packaging.version", "sys", "os", "enum.IntEnum", "rich.progress.Progress", "attr", "rich.progress.DownloadColumn", "rich.progress.Column", "rich.progress.TimeRemainingColumn", "rich.progress.BarColumn", "__future__.annotations", "functools.cache", "shutil"], "function_names": ["get_salt_releases", "export_gpg_key", "__lt__", "__str__", "download_file", "_default_runner", "get_cicd_shared_context", "__hash__", "create_progress_bar", "get_file_checksum", "__ge__", "__gt__", "get_platform_and_arch_from_slug", "parse_versions", "__le__", "__eq__", "__ne__", "get_golden_images", "gpg_sign"], "function_calls": ["Version", "DownloadColumn", "super", "TimeRemainingColumn", "TransferSpeedColumn", "hash", "Progress", "BarColumn", "str", "sorted", "Column", "getattr", "memoryview", "set", "isinstance", "TextColumn", "bytearray"], "class_names": ["Version", "Linux", "MacOS", "ExitCode", "OS", "Windows"], "class_method_calls": ["export_path.joinpath", "signature_fpath.unlink", "name.startswith", "keyfile_gpg.exists", "f.write", "ctx.info", "ret.json", "path.name", "ctx.web", "keyfile_pub.exists", "attr.ib", "hashlib.file_digest", "headers.items", "tools.utils", "sys.platform", "command.extend", "ctx.exit", "dest.parent", "command.append", "versions.add", "ret.reason", "fpath.open", "digest.update", "r.iter_content", "r.raise_for_status", "ret.status_code", "signature_fpath.exists", "self.slug", "packaging.version", "shutil.which", "keyfile_gpg.unlink", "dest.name", "runner.default", "dest.open", "ctx.run", "rfh.readinto", "shared_context_file.read_text", "_versions.append", "REPO_ROOT.joinpath", "yaml.safe_load", "ret.returncode", "ctx.error", "pathlib.Path", "web.get", "_versions.sort", "web.headers", "json.load", "os.environ", "path.parent", "keyfile_pub.unlink", "ctx.chdir", "digest.hexdigest", "attr.s", "self.__class__"]}, "_compat.py": {"libraries": ["sys"], "function_names": ["find_spec", "__compat_repr__", "matches", "disable_stdlib_finder", "make_param", "install"], "function_calls": ["disable_stdlib_finder", "filter", "map", "getattr", "locals", "cls", "hasattr"], "class_names": ["NullFinder", "PyPy_repr"], "class_method_calls": ["sys.meta_path", "self._fields", "finder.find_distributions"]}, "handlers.py": {"libraries": ["sys", "logging.handlers", "collections.deque", "logging", "salt._logging.mixins.ExcInfoOnLogLevelFormatMixin"], "function_names": ["flush", "handle", "handleError", "__init__", "sync_with_handlers"], "function_calls": ["deque", "super"], "class_names": ["RotatingFileHandler", "StreamHandler", "WatchedFileHandler", "SysLogHandler", "FileHandler", "DeferredStreamHandler"], "class_method_calls": ["logging.getLogger", "logging.handlers", "logging.StreamHandler", "self.__messages", "self.__emitting", "sys.exc_info", "logging.raiseExceptions", "exc.winerror", "self.acquire", "self.level", "self.release", "exc_type.__name__", "logging.FileHandler", "logging.WARNING", "self.baseFilename", "sys.stderr", "handler.handle", "sys.platform"]}, "impl.py": {"libraries": ["salt._logging.handlers.DeferredStreamHandler", "salt._logging.handlers.WatchedFileHandler", "multiprocessing", "salt.utils.user", "salt.utils.files", "salt._logging.handlers.RotatingFileHandler", "pip._internal.utils._log", "salt.utils.ctx", "salt._logging.handlers.StreamHandler", "logging", "salt._logging.handlers.SysLogHandler", "urllib.parse", "traceback", "pathlib", "sys", "os", "salt.utils.verify", "salt.loader", "types", "re", "salt.exceptions.LoggingRuntimeError", "salt.utils.immutabletypes.ImmutableDict", "salt.utils.immutabletypes.freeze", "salt.utils.textformat.TextFormat", "salt.defaults.exitcodes", "atexit", "salt._logging.mixins.LoggingMixinMeta", "socket"], "function_names": ["shutdown_logfile_handler", "get_temp_handler", "is_console_handler_configured", "__global_logging_exception_handler", "is_extended_logging_configured", "get_log_record_factory", "set_log_record_factory", "__new__", "set_lowest_log_level", "shutdown_console_handler", "get_logfile_handler", "set_lowest_log_level_by_opts", "setup_logging", "get_logging_options_dict", "setup_console_handler", "setup_temp_handler", "shutdown_extended_logging", "tryflush", "get_lowest_log_level", "in_mainprocess", "is_temp_handler_configured", "set_logging_options_dict", "get_console_handler", "is_logfile_handler_configured", "get_logging_level_from_string", "freeze_logging_options_dict", "setup_extended_logging", "makeRecord", "_log", "get_extended_logging_handlers", "setup_logfile_handler", "shutdown_temp_handler", "shutdown_logging", "__init__", "setup_log_granular_levels"], "function_calls": ["shutdown_logfile_handler", "get_temp_handler", "is_console_handler_configured", "SysLogHandler", "list", "int", "is_extended_logging_configured", "hasattr", "max", "set_log_record_factory", "min", "super", "set_lowest_log_level", "get_logfile_handler", "shutdown_console_handler", "str", "len", "set_lowest_log_level_by_opts", "sorted", "get_logging_options_dict", "LoggingRuntimeError", "setup_console_handler", "isinstance", "freeze", "setup_temp_handler", "shutdown_extended_logging", "dict", "is_temp_handler_configured", "get_handlers_func", "print", "_format_exception", "get_console_handler", "is_logfile_handler_configured", "get_logging_level_from_string", "setup_extended_logging", "RotatingFileHandler", "StreamHandler", "RuntimeError", "WatchedFileHandler", "get_extended_logging_handlers", "tuple", "setup_logfile_handler", "shutdown_temp_handler", "TextFormat", "getattr", "DeferredStreamHandler", "setup_log_granular_levels"], "class_names": ["SaltLogRecord", "SaltLoggingClass", "SaltColorLogRecord"], "class_method_calls": ["parsed_log_path.port", "handler.level", "exc_type.__name__", "self.bracketname", "logging.getLogger", "self.colorprocess", "logging.handlers", "handler.close", "handler.setLevel", "in_mainprocess.__pid__", "logging.GARBAGE", "handler.acquire", "logging.ERROR", "parsed_log_path.path", "logging.addLevelName", "self.bracketprocess", "self.levelname", "handler.createLock", "LOG_LEVELS.get", "logging.INFO", "logging.PROFILE", "atexit.unregister", "SaltLoggingClass.verbose", "path.stem", "self.getMessage", "logrecord.exc_info_on_loglevel_instance", "log_levels.append", "providers.items", "facility_name.startswith", "extra.pop", "path.resolve", "self.colormsg", "additional_handlers.append", "handler.formatter", "self.colorlevel", "log.info", "logging.Formatter", "log.warning", "urllib.parse", "parsed_log_path.hostname", "sys.__stderr__", "multiprocessing.current_process", "handler.stream", "parsed_log_path.scheme", "_logger.error", "match.groupdict", "self.process", "logrecord.jid", "self.colorname", "handler.release", "traceback.format_exception", "socket.SOCK_DGRAM", "setup_logfile_handler.__handler__", "pathlib.Path", "log_granular_levels.items", "logging.NullHandler", "_logger.setLevel", "SaltLogRecord.__init__", "sys.__excepthook__", "match.group", "logging.getLoggerClass", "logging.root", "logfile_handler.close", "logging.TRACE", "sys.stderr", "logging.DEBUG", "self.name", "logging.LogRecord", "sys.excepthook", "msg.decode", "logging.Logger", "set_logging_options_dict.__options_dict__", "handler.flush", "os.getpid", "fmt.replace", "MODNAME_PATTERN.search", "atexit.register", "SaltLoggingClass.debug", "opts.get", "sys.exc_info", "SysLogHandler.LOG_USER", "get_log_record_factory.__factory__", "set_lowest_log_level.__log_level__", "LOGGING_LOGGER_CLASS._log", "logging.NOTSET", "log.trace", "logrecord.exc_info_on_loglevel", "console_handler.close", "formatter.datefmt", "syslog_opts.pop", "socket.SOCK_STREAM", "handler.sync_with_handlers", "logging.CRITICAL", "LOG_LEVELS.items", "logging.setLogRecordFactory", "handler.setFormatter", "digits.isdigit", "log.debug", "LOGGING_LOGGER_CLASS.makeRecord", "setup_extended_logging.__handlers__", "logging.setLoggerClass", "item.decode", "setup_temp_handler.__handler__", "_args.append", "handler.lock", "logging.WARNING", "setup_console_handler.__handler__", "salt.loader", "formatter._fmt", "_stderr.write", "salt.utils", "level.lower", "re.compile", "logrecord.exc_info_on_loglevel_formatted", "logging.QUIET", "types.GeneratorType", "self.bracketlevel"]}, "mixins.py": {"libraries": ["tornado.gen"], "function_names": ["run_loop_in_thread", "stopper"], "function_calls": [], "class_names": [], "class_method_calls": ["loop.stop", "evt.is_set", "loop.start", "loop.close", "tornado.gen", "loop.make_current", "loop.add_callback"]}, "auto.py": {"libraries": [], "function_names": ["auth"], "function_calls": [], "class_names": [], "class_method_calls": []}, "django.py": {"libraries": ["sys", "os", "django", "django.contrib.auth", "logging", "django.db.connection"], "function_names": ["acl", "auth", "is_connection_usable", "__django_auth_setup", "__virtual__"], "function_calls": ["eval", "__import__", "is_connection_usable", "globals", "locals", "isinstance", "__django_auth_setup"], "class_names": [], "class_method_calls": ["logging.getLogger", "django.VERSION", "os.environ", "connection.connection", "sys.path", "user.is_active", "log.debug", "django.contrib", "a.minion_or_fn_matcher", "a.user_fk", "connection.close", "django_model_fullname.split", "DJANGO_AUTH_CLASS.objects", "a.minion_fn", "django.setup"]}, "file.py": {"libraries": ["salt.utils.files", "os", "salt.utils.data", "salt.utils.json"], "function_names": ["save"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils", "os.makedirs", "name.startswith", "os.path"]}, "keystone.py": {"libraries": [], "function_names": ["endpoint_present", "endpoint_absent", "user_present", "_changes", "_create_endpoint", "project_present", "tenant_absent", "service_present", "service_absent", "role_absent", "role_present", "project_absent", "user_absent", "_api_version", "tenant_present", "__virtual__"], "function_calls": ["set", "_api_version", "_changes", "_create_endpoint", "dict", "tenant_absent", "list", "float", "tenant_present"], "class_names": [], "class_method_calls": ["endpoint.get", "__opts__.get", "ret.get"]}, "ldap.py": {"libraries": ["salt.utils.odict.OrderedDict", "inspect", "logging", "salt.utils.stringutils.to_bytes", "salt.utils.oset.OrderedSet", "copy"], "function_names": ["managed", "_toset", "_process_entries", "_update_entry"], "function_calls": ["_toset", "_update_entry", "connect", "to_bytes", "str", "_process_entries", "ValueError", "OrderedDict", "sorted", "len", "set", "isinstance", "OrderedSet"], "class_names": [], "class_method_calls": ["entry.get", "to_delete.add", "log.exception", "inspect.getmodule", "dn_set.update", "old.get", "x.items", "n.get", "logging.getLogger", "dn_to_delete.add", "o.get", "entry.pop", "ldap3.LDAPError", "copy.deepcopy", "changed_old.get", "new.get", "state.items", "vals.update", "entries_dict.items", "directives.items", "changed_new.get", "errs.append", "connect_spec.setdefault", "x.pop"]}, "mysql.py": {"libraries": ["pytestskipmarkers.utils.platform", "time", "pytest", "logging", "docker.errors", "attr", "saltfactories.utils.random_string"], "function_names": ["get_test_version_id", "set_container_name_before_start", "get_credentials", "check_container_started", "_default_container_id", "mysql_image", "create_mysql_combo", "mysql_combo", "_default_mysql_root_user_passwd", "mysql_container", "get_test_versions", "__str__"], "function_calls": ["get_test_versions", "MySQLImage", "random_string", "MySQLCombo"], "class_names": ["MySQLImage", "MySQLCombo"], "class_method_calls": ["container_id.default", "request.param", "mysql_combo.mysql_user", "log.exception", "mysql_combo.mysql_database", "self.mysql_root_passwd", "pytest.fixture", "salt_factories.get_container", "attr.ib", "container.is_running", "mysql_image.tag", "combo.mysql_passwd", "self.mysql_version", "container.started", "log.warning", "logging.getLogger", "self.mysql_passwd", "self.tag", "mysql_combo.container_id", "container.get_host_port_binding", "combo.mysql_user", "time.sleep", "mysql_image.name", "mysql_combo.mysql_passwd", "docker.errors", "container.run", "kwargs.get", "self.mysql_root_user", "mysql_root_passwd.default", "mysql_combo.mysql_version", "mysql_combo.container", "pytest.skip", "container.before_start", "ret.returncode", "container.container_start_check", "time.time", "self.mysql_name", "test_versions.append", "pytest.importorskip", "mysql_combo.mysql_port", "mysql_combo.mysql_host", "mysql_image.container_id", "self.mysql_port", "platform.is_fips_enabled", "attr.s", "container.display_name", "container.name", "self.name", "mysql_combo.mysql_name"]}, "pam.py": {"libraries": ["salt.utils.files", "os", "logging"], "function_names": ["read_file", "_parse", "__virtual__"], "function_calls": ["_parse", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "rules.append", "line.split", "contents.splitlines", "line.startswith", "ifile.read", "part.endswith", "part.replace", "os.path", "salt.utils"]}, "pki.py": {"libraries": ["M2Crypto.X509", "OpenSSL", "salt.utils.files", "Crypto.Util.asn1", "logging", "Cryptodome.Util.asn1"], "function_names": ["auth", "__virtual__"], "function_calls": ["dict", "Exception"], "class_names": [], "class_method_calls": ["OpenSSL.crypto", "c.load_certificate", "c.FILETYPE_PEM", "cert.get_signature_algorithm", "log.debug", "cert.verify", "X509.load_cert_string", "X509.load_cert", "log.info", "f.read", "der_sig_in.decode", "cacert.get_pubkey", "logging.getLogger", "c.FILETYPE_ASN1", "asn1.DerSequence", "c.dump_certificate", "X509.FORMAT_PEM", "c.verify", "cert.get_subject", "salt.utils", "der.decode", "der_sig_in.payload", "asn1.DerObject"]}, "rest.py": {"libraries": ["salt.template.compile_template", "salt.utils.http", "salt.loader", "logging"], "function_names": ["set_", "query", "get"], "function_calls": ["query", "compile_template"], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "salt.loader", "key.split", "http.query", "pair.split"]}, "sharedsecret.py": {"libraries": ["logging"], "function_names": ["auth"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get"]}, "yubico.py": {"libraries": ["yubico_client.Yubico", "yubico_client.yubico_exceptions", "logging"], "function_names": ["groups", "__get_yubico_users", "auth"], "function_calls": ["__get_yubico_users", "Yubico", "list", "auth", "print"], "class_names": [], "class_method_calls": ["logging.getLogger", "yubico_exceptions.StatusCodeError", "client.verify", "log.info"]}, "adb.py": {"libraries": ["salt.utils.beacons", "salt.utils.path", "logging"], "function_names": ["beacon", "validate", "__virtual__"], "function_calls": ["any", "int", "isinstance", "list"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "line.split", "ret.append", "log.info", "salt.utils", "config.get", "out.split", "found_devices.append", "last_state.get", "last_state.keys", "log.trace"]}, "aix_account.py": {"libraries": ["logging"], "function_names": ["beacon", "validate", "__virtual__"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "ret.append"]}, "avahi_announce.py": {"libraries": ["salt.utils.beacons", "time", "salt.utils.stringutils", "dbus", "logging", "avahi", "dbus.DBusException"], "function_names": ["beacon", "_enforce_txt_record_maxlen", "validate", "__virtual__"], "function_calls": ["int", "isinstance", "all", "len", "_enforce_txt_record_maxlen"], "class_names": [], "class_method_calls": ["log.error", "__grains__.get", "GROUP.Reset", "avahi.PROTO_UNSPEC", "GROUP.Commit", "avahi.IF_UNSPEC", "LAST_GRAINS.get", "logging.getLogger", "GROUP.AddService", "time.sleep", "__grains__.copy", "config.get", "avahi.DBUS_INTERFACE_SERVER", "dbus.Interface", "avahi.DBUS_INTERFACE_ENTRY_GROUP", "dbus.SystemBus", "avahi.DBUS_NAME", "ret.append", "dbus.UInt16", "dbus.UInt32", "salt.utils", "BUS.get_object", "grain.find", "SERVER.EntryGroupNew", "avahi.dict_to_txt_array", "avahi.DBUS_PATH_SERVER", "GROUP.UpdateServiceTxt"]}, "bonjour_announce.py": {"libraries": ["salt.utils.beacons", "time", "atexit", "salt.utils.stringutils", "logging", "pybonjour", "select"], "function_names": ["_register_callback", "validate", "_close_sd_ref", "beacon", "_enforce_txt_record_maxlen", "__virtual__"], "function_calls": ["str", "int", "isinstance", "all", "len", "_enforce_txt_record_maxlen"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "grain.find", "atexit.register", "pybonjour.kDNSServiceErr_NoError", "ret.append", "__grains__.get", "select.select", "time.sleep", "__grains__.copy", "SD_REF.close", "config.get", "salt.utils", "pybonjour.DNSServiceRegister", "pybonjour.DNSServiceProcessResult", "LAST_GRAINS.get", "pybonjour.DNSServiceUpdateRecord", "pybonjour.TXTRecord"]}, "btmp.py": {"libraries": ["salt.utils.beacons", "os", "dateutil.parser", "salt.utils.stringutils", "salt.utils.files", "datetime", "struct", "logging"], "function_names": ["_check_time_range", "_validate_time_range", "_get_loc", "_gather_group_members", "validate", "beacon", "__virtual__"], "function_calls": ["_check_time_range", "_validate_time_range", "_gather_group_members", "bool", "enumerate", "all", "len", "isinstance"], "class_names": [], "class_method_calls": ["log.error", "logging.getLogger", "dateutil_parser.parse", "datetime.datetime", "fp_.seek", "ret.append", "struct.calcsize", "__context__.get", "os.path", "struct.unpack", "fp_.tell", "salt.utils", "log.warning", "fp_.read"]}, "cert_info.py": {"libraries": ["OpenSSL.crypto", "salt.utils.beacons", "datetime.datetime", "salt.utils.files", "logging"], "function_names": ["beacon", "validate", "__virtual__"], "function_calls": ["iter", "next", "range", "str", "isinstance"], "class_names": [], "class_method_calls": ["log.error", "cert.get_signature_algorithm", "log.debug", "cert.get_notBefore", "logging.getLogger", "crypto.load_certificate", "cert.get_version", "crypto.Error", "config.get", "cert.get_serial_number", "cert.has_expired", "fp_.read", "cert.get_extension", "certificates.append", "cert_date.strftime", "k.decode", "cert.get_extension_count", "cert.get_subject", "ret.append", "salt.utils", "cert.get_notAfter", "cert.get_issuer", "extensions.append", "v.decode", "crypto.FILETYPE_PEM", "datetime.strptime", "datetime.today"]}, "diskusage.py": {"libraries": ["salt.utils.beacons", "psutil", "salt.utils.platform", "re", "logging"], "function_names": ["beacon", "validate", "__virtual__"], "function_calls": ["float", "isinstance", "next", "iter"], "class_names": [], "class_method_calls": ["logging.getLogger", "mount.endswith", "log.error", "mount_re.upper", "psutil.disk_usage", "ret.append", "_current_usage.percent", "log.warning", "re.sub", "salt.utils", "re.match", "psutil.disk_partitions", "part.mountpoint"]}, "glxinfo.py": {"libraries": ["salt.utils.beacons", "salt.utils.path", "logging"], "function_names": ["beacon", "validate", "__virtual__"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "ret.append", "last_state.get", "salt.utils", "log.trace"]}, "haproxy.py": {"libraries": ["salt.utils.beacons", "logging"], "function_names": ["beacon", "validate", "__virtual__"], "function_calls": ["int", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "log.debug", "ret.append", "config.get", "salt.utils"]}, "inotify.py": {"libraries": ["fnmatch", "os", "salt.utils.beacons", "collections", "re", "logging", "pyinotify"], "function_names": ["close", "__virtual__", "validate", "_enqueue", "_get_mask", "beacon", "_get_notifier"], "function_calls": ["any", "iter", "next", "list", "dir", "_get_mask", "getattr", "set", "isinstance", "_get_notifier"], "class_names": [], "class_method_calls": ["log.error", "queue.popleft", "pyinotify.IN_CREATE", "notifier.read_events", "log.info", "pyinotify.Notifier", "os.path", "re.search", "log.warning", "pyinotify.IN_MODIFY", "logging.getLogger", "wm.add_watch", "collections.deque", "event.maskname", "config.get", "excl.append", "notifier._watch_manager", "notifier.process_events", "ret.append", "MASKS.get", "pyinotify.WatchManager", "salt.utils", "event.path", "current.add", "wm.update_watch", "wm.watches", "pyinotify.IN_DELETE", "var.startswith", "pyinotify.ExcludeFilter", "fnmatch.fnmatch", "event.pathname", "notifier.check_events"]}, "journald.py": {"libraries": ["salt.utils.beacons", "salt.utils.data", "systemd.journal", "logging"], "function_names": ["beacon", "validate", "_get_journal", "__virtual__"], "function_calls": ["isinstance", "_get_journal", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "systemd.journal", "ret.append", "config.get", "salt.utils", "sub.update", "journal.get_next"]}, "junos_rre_keys.py": {"libraries": [], "function_names": ["beacon"], "function_calls": [], "class_names": [], "class_method_calls": ["ret.append"]}, "load.py": {"libraries": ["salt.utils.platform", "salt.utils.beacons", "os", "logging"], "function_names": ["beacon", "validate", "__virtual__"], "function_calls": ["any", "dict", "zip", "len", "float", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "log.debug", "ret.append", "config.get", "salt.utils", "os.getloadavg", "log.trace"]}, "log_beacon.py": {"libraries": ["salt.utils.beacons", "salt.utils.files", "salt.utils.platform", "re", "logging"], "function_names": ["beacon", "validate", "_get_loc", "__virtual__"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "re.compile", "d.items", "fp_.seek", "ret.append", "SKEL.copy", "__context__.get", "log.info", "config.get", "txt.splitlines", "fp_.tell", "salt.utils", "reg.match", "fp_.read"]}, "memusage.py": {"libraries": ["salt.utils.beacons", "re", "psutil", "logging"], "function_names": ["beacon", "validate", "__virtual__"], "function_calls": ["float", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "ret.append", "_current_usage.percent", "psutil.virtual_memory", "re.sub", "salt.utils"]}, "napalm_beacon.py": {"libraries": ["salt.utils.napalm", "salt.utils.beacons", "re", "logging"], "function_names": ["beacon", "_compare", "validate", "__virtual__"], "function_calls": ["iter", "next", "getattr", "float", "_compare", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "re.compile", "log.error", "mod.items", "numeric_compare.group", "log.debug", "cur_struct.items", "fun_cfg.pop", "fun_ret.get", "ret.append", "_numeric_regex.match", "log.info", "salt.utils", "re.match", "re.I", "cur_cmp.items"]}, "network_info.py": {"libraries": ["salt.utils.beacons", "psutil", "logging"], "function_names": ["beacon", "_to_list", "validate", "__virtual__"], "function_calls": ["any", "int", "_to_list", "getattr", "isinstance", "hasattr"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "ret.append", "psutil.net_io_counters", "config.get", "salt.utils"]}, "network_settings.py": {"libraries": ["salt.utils.beacons", "pyroute2.NDB", "pyroute2.ndb.compat.ipdb_interfaces_view", "pyroute2.IPDB", "salt.loader", "re", "ast", "logging"], "function_names": ["validate", "__hash__", "beacon", "_copy_interfaces_info", "__virtual__"], "function_calls": ["repr", "ipdb_interfaces_view", "NDB", "hash", "tuple", "Hashabledict", "sorted", "all", "set", "isinstance", "IPDB", "_copy_interfaces_info"], "class_names": ["Hashabledict"], "class_method_calls": ["self.items", "logging.getLogger", "log.error", "ast.literal_eval", "_interface_attrs_cpy.add", "_diff_stats_dict.update", "log.debug", "interfaces.append", "salt.loader", "__grains__.update", "ret.append", "config.get", "salt.utils", "re.search", "_config.get", "IP.by_name"]}, "pkg.py": {"libraries": ["typing.Dict", "typing.TYPE_CHECKING", "pytestshellutils.shell.Subprocess", "psutil", "salt.utils.files", "pytestshellutils.utils.processes._get_cmdline", "pytestshellutils.shell.DaemonImpl", "logging", "tests.support.pytest.helpers.download_file", "saltfactories.daemons.master", "pytestskipmarkers.utils.platform", "saltfactories.utils.cli_scripts", "requests", "pytestshellutils.utils.processes.ProcessResult", "pathlib", "saltfactories.cli", "saltfactories.daemons.api", "pprint", "saltfactories.daemons.minion", "distro", "os", "tests.support.pytest.helpers.TestAccount", "time", "typing.List", "saltfactories.cli.key", "textwrap", "saltfactories.cli.call", "pytestshellutils.utils.processes.terminate_process", "re", "contextlib", "packaging", "saltfactories.bases.SystemdSaltDaemonImpl", "attr", "atexit", "tests.conftest.CODE_DIR", "pytest", "shutil"], "function_names": ["_default_api_uri", "_default_install_dir", "__enter__", "_default_distro_id", "_install_ssm_service", "cmdline", "__attrs_post_init__", "uninstall", "salt_key_cli", "salt_minion_daemon", "salt_cli", "_default_distro_codename", "package_python_version", "__exit__", "salt_call_cli", "_get_impl_class", "_check_retcode", "_default_auth_data", "_default_dbg_pkg", "_default_config_path", "stop_services", "_default_session", "update_process_path", "salt_factories_root_dir", "post", "_default_distro_name", "get_service_name", "get_script_path", "write_systemd_conf", "_install_pkgs", "_default_rm_pkg", "_default_pkg_mngr", "_default_artifact_version", "_default_distro_version", "write_launchd_conf", "salt_api_daemon", "_terminate", "is_running", "_default_salt_pkgs", "_default_proc", "install", "install_previous", "_default_plist_file", "_default_version"], "function_calls": ["download_file", "ProcessResult", "next", "iter", "super", "dict", "_get_cmdline", "list", "str", "int", "len", "Subprocess", "terminate_process", "isinstance"], "class_names": ["SaltPkgInstall", "SaltMasterWindows", "SaltKey", "SaltMinion", "SaltApi", "DaemonPkgMixin", "PkgSsmSaltDaemonImpl", "SaltMaster", "PkgMixin", "SaltCli", "PkgLaunchdSaltDaemonImpl", "ApiRequest", "SaltCall", "PkgSystemdSaltDaemonImpl"], "class_method_calls": ["salt_pkgs.default", "minion.SaltMinion", "self.relenv", "platform.is_windows", "plist_file.default", "psutil.TimeoutExpired", "version.groups", "cmdline_.insert", "re.search", "logging.getLogger", "self.update_process_path", "self.auth_data", "pkgs_to_install.remove", "self.binary_paths", "saltfactories.cli", "os.getenv", "shutil.which", "artifact_version.default", "self.api_uri", "master.SaltMaster", "cli_scripts.generate_script", "pref_file.write_text", "ret.returncode", "self._terminal_timeout", "salt_pkgs.append", "self.bin_dir", "check_run.returncode", "parsed.minor", "re.IGNORECASE", "self._children", "self.use_prev_version", "self.install_dir", "self._check_retcode", "self.artifact_version", "atexit.unregister", "self.distro_id", "distro_id.default", "distro_name.default", "self.rm_pkg", "self.__class__", "self.proc", "self._terminal_stderr", "self.ssm_bin", "self._terminal_result", "fp.write", "ARTIFACTS_DIR.glob", "self.install_previous", "plist_file.read_text", "api_uri.default", "unit_path.unlink", "self.script_name", "log.info", "requests.Session", "log.warning", "self.install", "pprint.pformat", "self.distro_codename", "self.plist_file", "self.version", "auth_data.default", "line.strip", "time.sleep", "pytest.fail", "cmd.extend", "self.pkg_system_service", "packaging.version", "cmd.append", "name.lower", "self.pkgs", "self._process", "unit_path.write_text", "shutil.rmtree", "pathlib.Path", "pkg_mngr.default", "self._service_name", "self.factory", "plist_file.exists", "self.run_root", "platform.is_darwin", "dbg_pkg.default", "contextlib.suppress", "artifact.name", "list_ret.index", "_.strip", "self._terminal", "self.salt_pkg_install", "rm_pkg.default", "install_dir.default", "_cmdline.pop", "log.error", "self.uninstall", "self.conf_dir", "proc.default", "attr.ib", "distro.id", "line.rstrip", "pref_file.parent", "self._install_pkgs", "call.SaltCall", "ret.stdout", "self.get_service_name", "psutil.NoSuchProcess", "version.default", "self.pid", "self.classic", "self.no_install", "self._internal_run", "atexit.register", "session.default", "distro.codename", "self._install_ssm_service", "self.upgrade", "platform.is_aarch64", "textwrap.dedent", "psutil.Process", "self.distro_version", "self.account", "self.factories_manager", "pkg_path.parent", "self.dbg_pkg", "plist_file.write_text", "self.stop_services", "attr.s", "self.port", "self.write_launchd_conf", "DaemonPkgMixin.__attrs_post_init__", "distro_codename.default", "self.system_service", "self.python_executable", "log.debug", "pkg.endswith", "pref_file.unlink", "name.split", "fp.unlink", "os.path", "self.write_systemd_conf", "self.pkg_mngr", "version.split", "distro.version", "parsed.major", "self.prev_version", "api.SaltApi", "self.distro_name", "key.SaltKey", "self.session", "service_name.split", "distro_version.default", "contents.format", "distro.name", "salt.utils", "plist_file.unlink", "self.salt_pkgs", "os.unlink", "os.environ", "self.root", "self.no_uninstall", "self._terminal_stdout", "os.remove", "config_path.default", "self.file_ext", "self.terminate"]}, "proxy_example.py": {"libraries": ["salt.utils.beacons", "salt.utils.http", "logging"], "function_names": ["beacon", "validate", "__virtual__"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "ps.py": {"libraries": ["time", "psutil", "salt.exceptions.CommandExecutionError", "salt.utils.decorators.path", "salt.exceptions.SaltInvocationError", "datetime", "re", "salt.utils.data"], "function_names": ["boot_time", "_get_proc_cmdline", "disk_partitions", "kill_pid", "virtual_memory", "get_pid_list", "status", "proc_info", "disk_usage", "network_io_counters", "__virtual__", "_get_proc_name", "total_physical_memory", "lsof", "disk_io_counters", "swap_memory", "ss", "pgrep", "top", "num_cpus", "psaux", "_get_proc_username", "_get_proc_create_time", "netstat", "_get_proc_pid", "_get_proc_status", "disk_partition_usage", "get_users", "pkill", "cpu_percent", "cpu_times"], "function_calls": ["_get_proc_name", "_get_proc_create_time", "_get_proc_pid", "_get_proc_status", "disk_usage", "dict", "SaltInvocationError", "_get_proc_cmdline", "list", "str", "int", "disk_partitions", "sorted", "len", "CommandExecutionError", "set", "_get_proc_username"], "class_names": [], "class_method_calls": ["psutil.AccessDenied", "proc.name", "process.cpu_times", "info.find", "psutil.boot_time", "psutil.process_iter", "psutil.ZombieProcess", "psutil.NUM_CPUS", "partition._asdict", "times._asdict", "ret.extend", "start_usage.items", "found_infos.append", "re.search", "psutil.NoSuchProcess", "psutil.swap_memory", "psutil.pids", "partition.update", "time.sleep", "proc.as_dict", "psutil.net_io_counters", "proc.status", "psutil.users", "x._asdict", "proc.create_time", "result.append", "proc.cmdline", "psutil.cpu_count", "proc.username", "psutil.Process", "salt_exception_pattern.search", "psutil.cpu_times", "proc.pid", "psutil.virtual_memory", "psutil.TOTAL_PHYMEM", "salt.utils", "ps_aux.splitlines", "procs.append", "psutil.disk_io_counters", "proc.info", "process.memory_info", "re.compile", "datetime.datetime", "psutil.disk_usage", "netstat_infos.splitlines", "pattern.search", "b_time.strftime", "proc.send_signal", "usage.add", "killed.append", "ss_infos.splitlines", "psutil.cpu_percent", "psutil.disk_partitions"]}, "salt_monitor.py": {"libraries": ["salt.utils.beacons"], "function_names": ["beacon", "_parse_args", "validate"], "function_calls": ["iter", "next", "list", "_parse_args", "isinstance", "map"], "class_names": [], "class_method_calls": ["args_kwargs_dict.get", "entry.items", "_kwargs.update", "salt.utils", "events.append"]}, "salt_proxy.py": {"libraries": ["logging"], "function_names": ["configure_proxy"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "ret.update"]}, "sensehat.py": {"libraries": ["sense_hat.SenseHat", "logging"], "function_names": ["set_pixel", "set_pixels", "get_pressure", "__virtual__", "get_humidity", "show_letter", "get_temperature", "low_light", "get_temperature_from_pressure", "get_pixels", "get_temperature_from_humidity", "show_message", "show_image", "clear", "get_pixel"], "function_calls": ["SenseHat"], "class_names": [], "class_method_calls": ["_sensehat.get_pixels", "logging.getLogger", "_sensehat.set_pixel", "log.error", "_sensehat.low_light", "_sensehat.get_temperature_from_pressure", "_sensehat.set_rotation", "_sensehat.show_letter", "_sensehat.get_temperature", "_sensehat.get_pixel", "_sensehat.clear", "_sensehat.get_pressure", "_sensehat.set_pixels", "_sensehat.load_image", "_sensehat.get_humidity", "_sensehat.get_temperature_from_humidity", "_sensehat.show_message"]}, "service.py": {"libraries": ["time", "salt.utils.systemd.booted", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "logging", "salt.utils.args.get_function_argspec", "salt.utils.data"], "function_names": ["_get_systemd_only", "mod_beacon", "_disable", "_enable", "running", "masked", "_add_warnings", "disabled", "enabled", "mod_watch", "_enabled_used_error", "dead", "_available", "_offline", "unmasked", "__virtual__"], "function_calls": ["_offline", "_get_systemd_only", "setattr", "_disable", "_enable", "_available", "_add_warnings", "booted", "_enabled_used_error", "func", "_argspec", "isinstance", "hasattr", "unmasked"], "class_names": [], "class_method_calls": ["warnings.append", "logging.getLogger", "__opts__.get", "kwargs.pop", "ret.get", "ret.setdefault", "current_warnings.extend", "exc.strerror", "start_kwargs.update", "ret.update", "stop_kwargs.update", "__grains__.get", "time.sleep", "_get_systemd_only.HAS_SYSTEMD", "salt.utils", "_beacon_data.get", "kwargs.get"]}, "sh.py": {"libraries": ["salt.utils.vt", "time", "salt.utils.stringutils", "logging", "salt.utils.path"], "function_names": ["beacon", "validate", "_get_shells", "__virtual__"], "function_calls": ["any", "_get_shells", "list", "enumerate", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "err.split", "ret.append", "line.split", "time.time", "salt.utils", "track_pids.append"]}, "smartos_imgadm.py": {"libraries": ["salt.utils.json", "salt.utils.platform", "salt.utils.path", "logging"], "function_names": ["source_delete", "get", "_exit_status", "delete", "show", "list_installed", "avail", "vacuum", "_is_docker_uuid", "__virtual__", "docker_to_uuid", "_split_docker_uuid", "update_installed", "source_add", "version", "import_image", "_parse_image_meta", "_is_uuid", "sources"], "function_calls": ["_exit_status", "_parse_image_meta", "docker_to_uuid", "_split_docker_uuid", "list", "_is_uuid", "len", "list_installed", "sources", "_is_docker_uuid", "get"], "class_names": [], "class_method_calls": ["uuid.split", "logging.getLogger", "image.split", "tag.startswith", "result.append", "log.debug", "tag.split", "salt.utils", "result.keys", "log.warning"]}, "smartos_vmadm.py": {"libraries": ["salt.client", "salt.utils.odict.OrderedDict", "salt.exceptions.SaltClientError"], "function_names": ["list_vms", "reboot", "start", "is_running", "nodes", "_action", "stop", "get", "__virtual__"], "function_calls": ["iter", "next", "int", "sorted", "OrderedDict", "len", "_action", "isinstance"], "class_names": [], "class_method_calls": ["ret.sort", "salt.client", "cn.keys", "ret.append", "matched_vms.append", "client.cmd_iter"]}, "status.py": {"libraries": ["fnmatch", "time"], "function_names": ["reg"], "function_calls": [], "class_names": [], "class_method_calls": ["time.time", "fnmatch.fnmatch"]}, "swapusage.py": {"libraries": ["salt.utils.beacons", "re", "psutil", "logging"], "function_names": ["beacon", "validate", "__virtual__"], "function_calls": ["float", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "psutil.swap_memory", "ret.append", "_current_usage.percent", "re.sub", "salt.utils"]}, "telegram_bot_msg.py": {"libraries": ["salt.utils.beacons", "telegram", "logging"], "function_names": ["beacon", "validate", "__virtual__"], "function_calls": ["isinstance", "all", "len"], "class_names": [], "class_method_calls": ["bot.get_updates", "logging.getLogger", "log.error", "message.chat", "message.to_dict", "log.debug", "ret.append", "update.update_id", "logging.CRITICAL", "config.get", "update.message", "salt.utils", "telegram.Bot"]}, "twilio_txt_msg.py": {"libraries": ["salt.utils.beacons", "twilio", "twilio.rest.Client", "twilio.rest.TwilioRestClient", "logging"], "function_names": ["beacon", "validate", "__virtual__"], "function_calls": ["TwilioRestClient", "tuple", "str", "int", "all", "len", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "client.messages", "message.sid", "twilio.__version_info__", "message.num_media", "ret.append", "message.date_sent", "message.delete", "client.media", "salt.utils", "message.from_", "pic.uri", "message.body", "log.trace"]}, "watchdog.py": {"libraries": ["salt.utils.beacons", "watchdog.observers.Observer", "watchdog.events.FileSystemEventHandler", "collections", "logging"], "function_names": ["to_salt_event", "beacon", "close", "_append_path_if_mask", "_append_if_mask", "validate", "on_moved", "_validate_mask", "__init__", "on_modified", "_validate", "_get_queue", "_validate_path", "on_deleted", "on_created", "__virtual__"], "function_calls": ["any", "Handler", "to_salt_event", "super", "ValidationError", "Observer", "str", "_validate_mask", "_validate", "_get_queue", "_validate_path", "isinstance"], "class_names": ["Handler", "ValidationError", "FileSystemEventHandler"], "class_method_calls": ["log.error", "__context__.pop", "queue.popleft", "observer.stop", "self.queue", "logging.getLogger", "self.masks", "collections.deque", "self._append_if_mask", "observer.schedule", "event.src_path", "config.get", "self._append_path_if_mask", "ret.append", "salt.utils", "event.event_type", "logging.debug", "_config.update", "path_params.get", "observer.start"]}, "wtmp.py": {"libraries": ["salt.utils.beacons", "os", "dateutil.parser", "salt.utils.stringutils", "salt.utils.files", "datetime", "struct", "logging"], "function_names": ["_check_time_range", "_validate_time_range", "_get_loc", "_gather_group_members", "validate", "beacon", "__virtual__"], "function_calls": ["_check_time_range", "_validate_time_range", "_gather_group_members", "bool", "enumerate", "all", "len", "isinstance"], "class_names": [], "class_method_calls": ["log.error", "logging.getLogger", "dateutil_parser.parse", "datetime.datetime", "__context__.pop", "fp_.seek", "ret.append", "struct.calcsize", "__context__.get", "os.path", "struct.unpack", "fp_.tell", "salt.utils", "log.warning", "fp_.read"]}, "consul.py": {"libraries": ["logging"], "function_names": ["_acl_changes", "_acl_exists", "acl_absent", "acl_present"], "function_calls": ["_acl_changes", "_acl_exists"], "class_names": [], "class_method_calls": ["info.get", "logging.getLogger"]}, "etcd_cache.py": {"libraries": ["base64", "time", "etcd", "salt.exceptions.SaltCacheError", "salt.payload", "logging"], "function_names": ["flush", "store", "fetch", "updated", "contains", "ls", "_init_client", "_walk", "__virtual__"], "function_calls": ["_init_client", "int", "_walk", "SaltCacheError"], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "logging.INFO", "r.dir", "etcd.EtcdKeyNotFound", "client.read", "base64.b64encode", "client.write", "client.delete", "keys.extend", "base64.b64decode", "etcd.Client", "r.key", "path_prefix.strip", "time.time", "log.info", "salt.payload", "etcd._log"]}, "localfs.py": {"libraries": ["os", "salt.config.DEFAULT_HASH_TYPE", "salt.utils.verify", "hashlib", "salt.utils.files", "salt.payload", "logging", "salt.utils.path"], "function_names": ["mk_token", "get_token", "rm_token", "list_tokens"], "function_calls": ["str", "hash_type", "getattr"], "class_names": [], "class_method_calls": ["logging.getLogger", "fp_.read", "opts.get", "fp_.write", "salt.payload", "ret.append", "os.urandom", "os.remove", "os.path", "salt.utils", "log.warning", "os.rename"]}, "mysql_cache.py": {"libraries": ["MySQLdb.converters", "MySQLdb.cursors", "time", "pymysql", "pymysql.err.InterfaceError", "salt.utils.stringutils", "MySQLdb.connections.OperationalError", "salt.exceptions.SaltCacheError", "salt.payload", "logging", "MySQLdb", "copy", "MySQLdb.err.OperationalError"], "function_names": ["flush", "store", "_create_table", "fetch", "updated", "contains", "ls", "run_query", "force_reconnect", "_init_client", "__virtual__"], "function_calls": ["repr", "_create_table", "bool", "run_query", "int", "SaltCacheError", "len", "_init_client"], "class_names": ["InterfaceError"], "class_method_calls": ["k.startswith", "__context__.pop", "cur.fetchall", "cur.close", "MySQLdb.connect", "log.debug", "log.info", "salt.payload", "logging.getLogger", "k.split", "opts.get", "copy.deepcopy", "cur.execute", "time.sleep", "pymysql.install_as_MySQLdb", "mysql_kwargs.copy", "opts.pop", "__context__.get", "mysql_kwargs.pop", "cur.fetchone", "conn.cursor"]}, "redis_cache.py": {"libraries": ["redis", "itertools", "time", "salt.payload", "salt.utils.stringutils", "redis.exceptions.ResponseError", "salt.exceptions.SaltCacheError", "redis.exceptions.ConnectionError", "rediscluster.RedisCluster", "logging"], "function_names": ["flush", "list_", "_get_redis_cache_opts", "_get_bank_redis_key", "store", "_get_key_redis_key", "_get_redis_server", "joinbanks", "_get_bank_keys_redis_key", "fetch", "updated", "contains", "_get_redis_keys_opts", "_get_timestamp_key", "init_kwargs", "_build_bank_hier", "_get_banks_to_remove", "__virtual__"], "function_calls": ["_get_bank_redis_key", "_get_redis_cache_opts", "RedisCluster", "_get_key_redis_key", "_get_redis_server", "range", "_get_bank_keys_redis_key", "_get_redis_keys_opts", "_get_timestamp_key", "len", "int", "SaltCacheError", "_build_bank_hier", "_get_banks_to_remove"], "class_names": [], "class_method_calls": ["log.error", "key.decode", "redis_pipe.srem", "log.debug", "salt.payload", "logging.getLogger", "redis_pipe.sadd", "bank.split", "redis_server.get", "redis_server.sismember", "bank.decode", "redis_server.pipeline", "redis.StrictRedis", "itertools.accumulate", "time.time", "salt.utils", "redis_pipe.smembers", "redis_pipe.set", "bank_paths_to_remove.extend", "redis_server.smembers", "redis_pipe.delete", "__opts__.get", "redis_pipe.execute", "redis_server.type"]}, "client.py": {"libraries": ["salt.exceptions", "salt.utils.vault.leases", "salt.utils.vault.exceptions.VaultPermissionDeniedError", "salt.utils.vault.exceptions.VaultPreconditionFailedError", "salt.utils.vault.exceptions.VaultUnavailableError", "salt.utils.vault.exceptions.VaultUnwrapException", "requests", "salt.utils.vault.exceptions.VaultNotFoundError", "salt.utils.vault.exceptions.VaultServerError", "salt.utils.vault.exceptions.VaultAuthExpired", "salt.utils.vault.exceptions.VaultInvocationError", "requests.packages.urllib3.util.ssl_.create_urllib3_context", "re", "logging", "salt.utils.vault.exceptions.VaultUnsupportedOperationError"], "function_names": ["init_poolmanager", "_get_headers", "list", "get", "token_valid", "_raise_status", "patch", "wrap_info", "delete", "get_config", "token_revoke", "post", "request_raw", "_get_expected_creation_path", "token_renew", "request", "unwrap", "__init__", "token_lookup", "_get_url"], "function_calls": ["VaultPreconditionFailedError", "VaultServerError", "VaultUnsupportedOperationError", "any", "super", "VaultInvocationError", "VaultUnwrapException", "CACertHTTPSAdapter", "str", "VaultPermissionDeniedError", "isinstance", "VaultUnavailableError", "VaultNotFoundError", "create_urllib3_context"], "class_names": ["CACertHTTPSAdapter", "AuthenticatedVaultClient", "VaultClient"], "class_method_calls": ["headers.update", "self.post", "res.ok", "verify.startswith", "self._get_url", "leases.VaultWrappedResponse", "requests.Session", "self._raise_status", "logging.getLogger", "self.url", "session.mount", "endpoint.strip", "logging.WARNING", "res.json", "self.ca_cert_data", "res.status_code", "endpoint.startswith", "res.raise_for_status", "self._requests_verify", "self.session", "self._get_headers", "self.auth", "self.token_renew", "self.verify", "self.wrap_info", "self.request_raw", "requests.adapters", "self.token_lookup", "salt.exceptions", "self.namespace", "requests.sessions", "ssl_context.load_verify_locations", "re.fullmatch", "re.escape", "self.request"]}, "server.py": {"libraries": ["salt.utils.versions.warn_until", "salt.channel.server", "logging"], "function_names": ["factory"], "function_calls": ["warn_until"], "class_names": ["PubServerChannel", "ReqServerChannel"], "class_method_calls": ["logging.getLogger", "salt.channel"]}, "api.py": {"libraries": ["salt.utils.json", "salt.utils.vault.leases", "salt.utils.vault.exceptions.VaultNotFoundError", "salt.utils.vault.exceptions.VaultInvocationError"], "function_names": ["list_approles", "write_approle", "read_secret_id", "delete_approle", "read_role_id", "generate_secret_id", "read_entity", "_filter_none", "delete_entity", "write_entity_alias", "read_entity_by_alias", "_lookup_mount_accessor", "__init__", "destroy_secret_id", "read_approle", "write_entity", "list_entities"], "function_calls": ["VaultInvocationError", "_filter_none", "str", "isinstance", "VaultNotFoundError"], "class_names": ["AppRoleApi", "IdentityApi"], "class_method_calls": ["self.read_entity", "vleases.VaultSecretId", "self._lookup_mount_accessor", "salt.utils", "self.client", "data.items"]}, "batch.py": {"libraries": ["salt.exceptions", "datetime.datetime", "math", "time", "salt.client", "salt.output", "salt.utils.stringutils", "datetime.timedelta", "logging", "copy"], "function_names": ["partition", "__update_wait", "gather_minions", "run", "__init__", "get_bnum"], "function_calls": ["partition", "iter", "next", "range", "list", "timedelta", "int", "max", "sorted", "len", "set", "isinstance", "float"], "class_names": ["Batch"], "class_method_calls": ["nret.difference", "log.error", "wait.append", "log.debug", "self.minions", "iters.append", "nret.add", "self.local", "self.get_bnum", "self.quiet", "active.remove", "logging.getLogger", "salt.output", "copy.deepcopy", "self.down_minions", "self.ping_gen", "self.gather_minions", "datetime.now", "time.sleep", "math.ceil", "data.pop", "self.eauth", "args.append", "fret.add", "self.options", "parts.items", "iters.remove", "self.opts", "to_run.pop", "ping_ret.keys", "next_.append", "salt.utils", "self.pub_kwargs", "data.get", "salt.client", "ret.keys", "self.__update_wait", "to_run.append", "parts.update"]}, "call.py": {"libraries": ["salt.cli.caller", "os", "salt.utils.parsers", "salt.defaults.exitcodes", "salt.config._expand_glob_path"], "function_names": ["run"], "function_calls": ["_expand_glob_path"], "class_names": ["SaltCall"], "class_method_calls": ["self.config", "self.options", "self.exit", "salt.defaults", "self.parse_args", "caller.run", "caller.print_grains", "caller.print_docs", "salt.utils", "os.path", "salt.cli"]}, "caller.py": {"libraries": ["salt.exceptions.SaltClientError", "salt.utils.files", "salt.payload", "logging", "traceback", "salt.utils.minion", "salt.output", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError", "salt", "sys", "os", "salt.channel.client", "salt.utils.jid", "salt.loader", "salt.minion", "salt.defaults.exitcodes", "salt.utils.profile", "salt.utils.args", "salt._logging.LOG_LEVELS", "salt.exceptions.CommandNotFoundError"], "function_names": ["factory", "run", "return_pub", "call", "__init__", "print_grains", "print_docs"], "function_calls": ["super", "ZeroMQCaller", "SaltInvocationError", "SystemExit", "str", "sorted", "all", "getattr", "isinstance", "hasattr"], "class_names": ["BaseCaller", "ZeroMQCaller", "Caller"], "class_method_calls": ["name.startswith", "sys.exit", "traceback.format_exc", "os.path", "salt.payload", "os.getpid", "ret.items", "logging.getLogger", "ret.get", "salt.output", "logging.DEBUG", "func.__doc__", "channel.send", "self.minion", "self.call", "fp_.write", "self.opts", "salt.loader", "salt.minion", "logging.ERROR", "salt.utils", "msg.format", "LOG_LEVELS.get", "salt.defaults", "fun.split", "ret.copy", "self.return_pub", "data.update", "os.remove", "sys.stderr", "salt.channel"]}, "cp.py": {"libraries": ["fnmatch", "salt.utils.files", "salt.utils.functools", "salt.loader.dunder.__file_client__", "salt.utils.templates", "logging", "salt.utils.path", "urllib.parse", "base64", "salt.exceptions.CommandExecutionError", "salt.utils.gzip_util", "os", "salt.channel.client", "salt.minion", "salt.fileclient", "salt.utils.data", "errno", "salt.utils.url", "salt.crypt"], "function_names": ["cache_file", "list_master_symlinks", "recv", "get_file_str", "hash_file", "_render", "get_dir", "get_file", "push_dir", "list_master_dirs", "_auth", "_error", "_render_filenames", "stat_file", "list_minion", "cache_dir", "_client", "push", "get_template", "cache_dest", "list_master", "_gather_pillar", "cache_local_file", "recv_chunked", "is_cached", "envs", "cache_files", "list_states", "cache_master", "get_url"], "function_calls": ["push", "is_cached", "cache_file", "_auth", "hash_file", "_gather_pillar", "_error", "str", "_render_filenames", "CommandExecutionError", "_client", "isinstance", "_render"], "class_names": [], "class_method_calls": ["log.error", "__context__.pop", "upload_path.strip", "log.debug", "client.get_url", "client.symlink_list", "client.is_cached", "ret.update", "__grains__.value", "os.path", "auth.gen_token", "__file_client__.value", "exc.errno", "urllib.parse", "client.cache_file", "logging.getLogger", "os.sep", "kw.get", "pillar.compile_pillar", "client.cache_dir", "client.file_list", "base64.b64decode", "client.cache_master", "channel.send", "fp_.tell", "errno.EEXIST", "salt.pillar", "fh_.close", "fp_.read", "client.list_states", "upload_path.lstrip", "os.makedirs", "fp_.write", "tmpfile.replace", "files.items", "client.cache_files", "fh_.write", "client.file_local_list", "client.cache_local_file", "salt.fileclient", "salt.utils", "errno.ENOENT", "load_path_split_drive.split", "client.get_template", "__opts__.get", "client.get_file", "salt.crypt", "client.dir_list", "client.envs", "tmpfile.startswith", "fnmatch.fnmatch", "client.hash_file", "path.lstrip", "client.hash_and_stat_file", "salt.channel", "os.chmod", "client.cache_dest", "client.get_dir"]}, "daemons.py": {"libraries": ["os", "warnings", "salt.exceptions.get_error_message", "salt.utils.network.ip_bracket", "salt.utils.verify.verify_env", "salt.utils.verify.verify_socket", "salt.master", "salt.exceptions.SaltClientError", "salt.utils.migrations", "salt.utils.verify.check_user", "salt.utils.platform.is_junos", "salt.minion", "salt.utils.kinds", "logging", "salt.exceptions.SaltSystemExit", "salt.utils.process.HAS_PSUTIL", "salt.utils.parsers"], "function_names": ["start_log_info", "shutdown", "_handle_signals", "prepare", "environment_failure", "action_log_info", "start", "call", "verify_hash_type", "shutdown_log_info", "_real_start", "verify_environment"], "function_calls": ["hasattr", "get_error_message", "is_junos", "super", "check_user", "SaltClientError", "verify_socket", "ip_bracket", "isinstance", "verify_env"], "class_names": ["Master", "Syndic", "Minion", "DaemonsMixin", "ProxyMinion"], "class_method_calls": ["self.config", "self.verify_hash_type", "self.verify_environment", "log.error", "log.exception", "self.set_pidfile", "self.shutdown_log_info", "log.info", "os.path", "self.daemonize_if_required", "self.environment_failure", "salt.master", "kinds.applKinds", "log.warning", "logging.getLogger", "self._real_start", "exc.code", "exc.args", "self.shutdown", "self.action_log_info", "self.minion", "kinds.APPL_KIND_NAMES", "self.options", "self.prepare", "v_dirs.extend", "salt.minion", "error.code", "msg.strip", "self.master", "self.claim_process_responsibility", "salt.utils", "warnings.filterwarnings", "migrations.migrate_paths", "self.check_running", "self.error", "self.syndic", "self.values", "self.__class__"]}, "key.py": {"libraries": ["salt.utils.crypt", "os", "salt.crypt", "salt.utils.sanitizers.clean", "hashlib", "salt.key", "salt.utils.files", "salt.utils.platform", "logging"], "function_names": ["list_", "name_match", "delete_dict", "gen_accept", "finger", "finger_master", "accept", "reject", "reject_dict", "master_key_str", "gen", "delete", "accept_dict", "gen_signature", "gen_keys", "list_all", "key_str"], "function_calls": ["gen"], "class_names": [], "class_method_calls": ["skey.reject", "skey.delete_key", "clean.id", "salt.key", "hashlib.sha512", "os.path", "skey.list_status", "logging.getLogger", "skey.accept", "fp_.read", "skey.gen_keys_signature", "clean.filename", "fp_.write", "skey.key_str", "skey.gen_keys", "salt.utils", "skey.name_match", "salt.crypt", "skey.all_keys", "skey.finger", "priv.rindex", "os.urandom", "os.remove", "os.chmod"]}, "run.py": {"libraries": ["salt.runner", "salt.exceptions.SaltClientError", "salt.utils.verify.check_user", "salt.utils.profile", "salt.utils.parsers", "salt.defaults.exitcodes"], "function_names": ["run"], "function_calls": ["SystemExit", "isinstance", "check_user", "str"], "class_names": ["SaltRun"], "class_method_calls": ["self.config", "self.options", "self.exit", "salt.runner", "ret.get", "runner.print_docs", "self.parse_args", "salt.utils", "runner.run", "salt.defaults"]}, "salt.py": {"libraries": ["salt.client", "salt.loader", "salt.exceptions.SaltClientError", "salt.utils.args", "logging", "salt.pillar", "copy"], "function_names": ["execute", "cmd"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "kwargs.pop", "opts.get", "salt.client", "log.debug", "client.cmd", "salt.loader", "copy.deepcopy", "salt.utils", "salt.pillar"]}, "spm.py": {"libraries": ["salt.utils.verify.verify_env", "salt.utils.parsers", "salt.spm"], "function_names": ["run"], "function_calls": ["verify_env"], "class_names": ["SPM"], "class_method_calls": ["self.config", "self.args", "self.parse_args", "parsers.SPMParser", "salt.spm", "client.run"]}, "ssh.py": {"libraries": ["salt.utils.files", "salt.utils.stringutils", "re", "salt.exceptions.CommandExecutionError"], "function_names": ["key_is_encrypted"], "function_calls": ["CommandExecutionError"], "class_names": [], "class_method_calls": ["salt.utils", "re.search", "fp_.read"]}, "netapi.py": {"libraries": ["tornado.ioloop.TimeoutError", "tornado.escape", "tornado.web", "tornado.httpclient.AsyncHTTPClient", "socket", "tornado.httpclient.HTTPError", "salt.auth", "tornado.netutil", "tornado.httpserver.HTTPServer", "logging", "attr", "salt.netapi.rest_tornado.saltnado"], "function_names": ["__enter__", "content_type_map", "__exit__", "_address_default", "auth_token", "_client_default", "load_auth", "_sock_default", "build_tornado_app", "_port_default", "_server_default", "_decode_body"], "function_calls": ["HTTPServer", "TestsHttpClient", "AsyncHTTPClient"], "class_names": ["TestsHttpClient", "TestsTornadoHttpServer"], "class_method_calls": ["self.protocol", "attr.ib", "application.event_listener", "self.app", "self._decode_body", "self.server", "netutil.bind_sockets", "response.headers", "logging.getLogger", "tornado.escape", "load_auth.mk_token", "self.http_server_options", "socket.AF_INET", "self.io_loop", "attr.Factory", "self.client_headers", "response._body", "sock.default", "address.default", "self.sock", "port.default", "self.client", "response.body", "self.address", "application.auth", "server.add_sockets", "tornado.web", "client.default", "salt.auth", "exc.response", "self.headers", "application.opts", "application.mod_opts", "attr.s", "server.default", "saltnado.EventListener", "self.port"]}, "shell.py": {"libraries": ["sys", "os", "shlex", "salt.utils.nb_popen", "salt.utils.path", "salt.utils.vt", "time", "salt.utils.json", "subprocess", "saltwinshell", "re", "logging", "salt.defaults.exitcodes"], "function_names": ["_ssh_opts", "send", "_cmd_str", "exec_cmd", "_run_nb_cmd", "_run_cmd", "gen_shell", "_split_cmd", "_passwd_opts", "__init__", "copy_id", "_key_opts", "_copy_id_str_old", "_copy_id_str_new", "get_error", "exec_nb_cmd", "gen_key"], "function_calls": ["str", "Shell"], "class_names": ["Shell"], "class_method_calls": ["log.error", "saltwinshell.Shell", "self._copy_id_str_new", "cmd.split", "proc.recv_err", "self._run_cmd", "log.debug", "self.priv_passwd", "self.timeout", "term.signalstatus", "self.ssh_options", "host.strip", "sys.exit", "subprocess.call", "os.path", "r_err.append", "stdout.replace", "self.passwd", "options.append", "re.M", "log.warning", "logging.getLogger", "SUDO_PROMPT_RE.search", "command.append", "self._ssh_opts", "term.recv", "self._cmd_str", "logmsg.replace", "proc.recv", "time.sleep", "self.host", "self.user", "cmd_lst.append", "options.extend", "r_out.append", "log.trace", "os.makedirs", "self.mods", "shlex.quote", "self.opts", "self._copy_id_str_old", "self._split_cmd", "self._run_nb_cmd", "self._passwd_opts", "ret.append", "buff.endswith", "term.sendline", "self.identities_only", "SSH_PRIVATE_KEY_PASSWORD_PROMPT_RE.search", "salt.utils", "salt.defaults", "self.priv", "re.compile", "self.tty", "self.remote_port_forwards", "SSH_PASSWORD_PROMPT_RE.search", "term.close", "shlex.split", "proc.returncode", "self.get_error", "errstr.split", "stderr.replace", "self.sudo", "term.has_unread_data", "line.startswith", "self.exec_cmd", "RSTR_RE.search", "term.exitstatus", "KEY_VALID_RE.search", "self._key_opts", "subprocess.PIPE", "self.port"]}, "ssh_py_shim.py": {"libraries": ["sys", "os", "tarfile", "time", "subprocess", "__future__.print_function", "__future__.absolute_import", "hashlib", "stat", "locale", "shutil"], "function_names": ["unpack_ext", "get_hash", "reset_time", "main", "need_ext", "get_executable", "need_deployment", "get_system_encoding", "unpack_thin", "is_windows"], "function_calls": ["getattr", "int", "get_hash", "main", "len", "reset_time", "get_executable", "unpack_thin", "is_windows", "ValueError", "unpack_ext", "iter", "hash_type", "tuple", "need_ext", "open", "get_system_encoding", "need_deployment", "OptionsContainer"], "class_names": ["OptionsContainer"], "class_method_calls": ["sys.getdefaultencoding", "OPTIONS.code_checksum", "stdout.split", "OPTIONS.wipe", "sys.version_info", "os.listdir", "OPTIONS.checksum", "tarfile.TarFile", "sys.exit", "os.path", "subprocess.call", "dstat.st_uid", "dstat.st_mode", "sys.stdout", "sys.platform", "tfile.extractall", "shutil.move", "os.stat", "stdout.decode", "locale.getpreferredencoding", "vpo.readline", "hash_obj.hexdigest", "line.strip", "ifile.read", "stat.S_IRGRP", "os.utime", "hash_obj.update", "OPTIONS.delimiter", "OPTIONS.cmd_umask", "os.chown", "salt_argv.append", "os.geteuid", "os.makedirs", "sys.argv", "os.umask", "OPTIONS.saltdir", "tfile.close", "shutil.rmtree", "locale.getencoding", "time.time", "stat.S_IXGRP", "sys.stdin", "argv_prepared.pop", "stat.S_IWGRP", "_fp.readlines", "OPTIONS.tty", "os.unlink", "sys.executable", "os.environ", "OPTIONS.config", "stt.st_mode", "proc.returncode", "config.write", "OPTIONS.hashfunc", "salt_argv.extend", "proc.communicate", "subprocess.Popen", "sys.stderr", "os.chmod", "subprocess.PIPE", "OPTIONS.ext_mods"]}, "state.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.state", "copy"], "function_names": ["get_sls_opts", "check_result", "check_onfail_requisites", "search_onfail_requisites", "gen_tag", "merge_subreturn"], "function_calls": ["check_result", "bool", "check_onfail_requisites", "str", "object", "CommandExecutionError", "search_onfail_requisites", "isinstance", "ValueError"], "class_names": [], "class_method_calls": ["fdata.get", "rstate.get", "state_result.get", "fdata.items", "running.items", "opts.get", "fchunks.items", "onfails.append", "salt.state", "copy.deepcopy", "mod_.startswith", "salt.config", "st.get", "original_return.setdefault", "freqs.items", "kwargs.get", "highstate.items"]}, "cmdmod.py": {"libraries": ["fnmatch", "glob", "salt.utils.json", "salt.utils.user", "salt.utils.powershell", "salt.utils.files", "logging", "salt.utils.templates", "salt.utils.win_runas.runas", "tempfile", "salt.grains.extra", "salt.utils.path", "salt.utils.win_reg", "shlex", "base64", "traceback", "salt.utils.pkg", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "nt", "salt.exceptions.SaltInvocationError", "functools", "uuid", "salt.utils.win_functions.escape_argument", "grp", "pwd", "sys", "salt.exceptions.TimedProcTimeoutError", "os", "salt.utils.timed_subprocess", "time", "subprocess", "re", "salt.utils.data", "salt.utils.vt", "salt.utils.url", "salt.utils.win_chcp", "salt.utils.win_dacl", "salt.utils.platform", "salt._logging.LOG_LEVELS", "salt.utils.args", "salt.utils.versions", "shutil"], "function_names": ["_run_all_quiet", "_cleanup_tempfile", "shell", "which_bin", "run_chroot", "_retcode_quiet", "powershell_all", "run_stderr", "_chroot_pids", "script", "_render", "tty", "run", "_run", "_python_shell_default", "_is_valid_shell", "__virtual__", "which", "_prep_powershell_cmd", "shells", "shell_info", "_render_cmd", "_gather_pillar", "run_all", "has_exec", "powershell", "exec_code_all", "retcode", "_run_quiet", "_check_avail", "script_retcode", "exec_code", "run_bg", "_check_cb", "_parse_env", "_log_cmd", "run_stdout", "_check_loglevel"], "function_calls": ["any", "_cleanup_tempfile", "win_runas", "type", "range", "which_bin", "list", "int", "CommandExecutionError", "script", "_chroot_pids", "hasattr", "_render", "_cmd_quote", "run", "_run", "str", "sorted", "_python_shell_default", "isinstance", "_is_valid_shell", "map", "which", "_prep_powershell_cmd", "repr", "shell_info", "SaltInvocationError", "dict", "_render_cmd", "_gather_pillar", "run_all", "globals", "log_callback", "iter", "exec_code_all", "retcode", "run_func", "_check_avail", "zip", "len", "_check_cb", "_parse_env", "_log_cmd", "_check_loglevel"], "class_names": [], "class_method_calls": ["proc.process", "pattern_result.group", "x.pw_name", "shutil.copyfile", "shell.lower", "log.log", "re.search", "out.rstrip", "logging.getLogger", "pids.append", "version_results.group", "pillar.compile_pillar", "proc.has_unread_data", "kwargs.get", "proc.run", "subprocess.STDOUT", "re.IGNORECASE", "proc.isalive", "fnmatch.fnmatch", "new_kwargs.get", "sys.version_info", "subprocess.PIPE", "env_bytes.count", "__context__.pop", "traceback.extract_stack", "kwargs.pop", "available_shells.append", "log.exception", "fp.write", "functools.partial", "log.info", "nt.environ", "lang.lower", "log.warning", "env_bytes.split", "err.rstrip", "line.strip", "shell_fp.read", "time.sleep", "cmd.append", "proc.exitstatus", "install_data.get", "pw_keys.sort", "tempfile.mkdtemp", "shlex.quote", "fp_.write", "time.time", "proc.pid", "re.match", "device.replace", "env_cmd.extend", "sys.executable", "os.kill", "subprocess.Popen", "logging.DEBUG", "os.chmod", "uuid.uuid4", "log.error", "__grains__.value", "env_runas.update", "cmd.replace", "grp.getgrnam", "os.sep", "proc.close", "tempfile.NamedTemporaryFile", "proc.stderr", "marker.encode", "env_runas.get", "pwd.getpwnam", "cmd.encode", "fp.name", "os.chown", "ver_list.append", "device.startswith", "link.startswith", "base64.standard_b64encode", "env.items", "glob.glob", "line.startswith", "os.R_OK", "run_env.update", "pwd.getpwall", "log.debug", "ret.update", "proc.stdout", "os.path", "os.access", "proc.recv", "salt.grains", "salt.pillar", "os.X_OK", "cmd.strip", "tty_device.write", "env.setdefault", "ret.append", "__context__.get", "salt.utils", "run_env.pop", "level.lower", "__opts__.get", "os.environ", "shutil.chown", "os.remove", "shell_data.pop", "env_runas.items", "response.pop"]}, "config.py": {"libraries": ["os", "salt.utils.verify", "salt.utils.files", "salt.config", "logging", "salt.utils.yaml"], "function_names": ["apply", "values", "update_config"], "function_calls": ["str", "values"], "class_names": [], "class_method_calls": ["logging.getLogger", "os.makedirs", "fp_.write", "log.debug", "salt.config", "os.path", "salt.utils"]}, "defaults.py": {"libraries": ["os", "salt.utils.url", "salt.utils.json", "salt.utils.files", "salt.utils.yaml", "salt.fileclient", "logging", "salt.utils.dictupdate", "salt.utils.data", "copy"], "function_names": ["update", "_load", "merge", "deepcopy", "get", "_mk_client"], "function_calls": ["_load", "merge", "TypeError", "deepcopy", "loader", "_mk_client"], "class_names": [], "class_method_calls": ["logging.getLogger", "dictupdate.update", "log.debug", "client.cache_files", "copy.deepcopy", "paths.append", "nodes.items", "key.split", "salt.fileclient", "os.path", "salt.utils", "file_.rsplit"]}, "grains.py": {"libraries": ["re", "salt.defaults.DEFAULT_TARGET_DELIM"], "function_names": ["exists", "present", "append", "list_absent", "make_hashable", "list_present", "absent"], "function_calls": ["type", "list", "object", "set", "isinstance", "make_hashable", "frozenset"], "class_names": [], "class_method_calls": ["result.add", "comments.append", "grain.append", "__context__.get", "re.sub"]}, "logmod.py": {"libraries": ["logging"], "function_names": ["info", "debug", "error", "warning", "critical", "exception", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "log.exception", "log.critical", "log.debug", "log.info", "log.warning"]}, "mine.py": {"libraries": ["salt.utils.data", "logging"], "function_names": ["wrap_acl_structure", "parse_function_definition", "minion_side_acl_denied"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "minion_acl_cache.get", "function_kwargs.pop", "res.update", "log.debug", "function_kwargs.update", "function_args.append", "salt.utils", "function_definition.pop"]}, "pillar.py": {"libraries": ["salt.utils.minions", "salt.pillar", "logging"], "function_names": ["clear_pillar_cache", "show_pillar", "show_pillar_cache", "show_top"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "pillar.get_top", "kwargs.pop", "ckminions.check_minions", "ret.get", "__jid_event__.fire_event", "pillar.compile_pillar", "__opts__.get", "pillar.cache", "pillar.clear_pillar", "log.info", "salt.utils", "salt.pillar", "_pillar_cache.get"]}, "publish.py": {"libraries": ["fnmatch", "typing.TYPE_CHECKING", "tools.utils.Version", "logging", "botocore.exceptions.ClientError", "tempfile", "tools.utils", "boto3", "json", "pathlib", "ptscripts.Context", "packaging.version", "tools.utils.parse_versions", "os", "tools.utils.repo.get_repo_json_file_contents", "textwrap", "re", "ptscripts.command_group", "typing.Any", "tools.utils.repo", "tools.utils.get_salt_releases", "tools.utils.repo.create_full_repo_path", "__future__.annotations", "tools.pkg"], "function_names": ["_get_repo_detailed_file_list", "_get_repo_file_list", "release", "_publish_repo", "staging", "github", "nightly"], "function_calls": ["Version", "_get_repo_detailed_file_list", "get_salt_releases", "_get_repo_file_list", "command_group", "parse_versions", "_publish_repo", "list", "str", "open", "create_full_repo_path", "len", "get_repo_json_file_contents"], "class_names": [], "class_method_calls": ["progress.update", "release_message_path.resolve", "logging.getLogger", "ctx.print", "s3.delete_objects", "artifacts_path.mkdir", "repo_release_symlinks_path.name", "boto3.client", "v.major", "repo_file_path.parent", "repo_file_path.relative_to", "ctx.error", "publish.command", "local_release_symlinks_path.read_text", "fnmatch.fnmatch", "artifacts_path.iterdir", "to_upload_paths.append", "progress.add_task", "s3.copy_object", "minor_repo_json_path.relative_to", "log.exception", "ctx.info", "s3.list_objects", "ctx.warn", "wfh.write", "s3.upload_file", "local_path.open", "repo_path.joinpath", "ctx.exit", "json.loads", "release_artifacts_listing.items", "repo_json_path.write_text", "packaging.version", "release_message_path.name", "release_message_path.write_text", "artifact.suffix", "objects.append", "pathlib.Path", "fpath.endswith", "s3.download_fileobj", "path.is_symlink", "artifact.name", "re.sub", "path.relative_to", "symlink_paths.append", "base.relative_to", "s3.list_objects_v2", "repo_release_files_path.name", "uploaded_files.append", "json.dumps", "tools.utils", "re.MULTILINE", "upload_path.stat", "local_release_files_path.read_text", "repo_file_path.write_text", "minor_repo_json_path.write_text", "listing.append", "textwrap.dedent", "dot_repo_files.append", "entry_path.name", "artifact.resolve", "s3.put_object", "repo_file_path.read_text", "exc.response", "create_repo_path.parent", "os.walk", "s3.head_object", "ret.pop", "local_release_symlinks_path.open", "local_release_files_path.open", "upload_path.relative_to", "objects_to_delete.append", "tempfile.TemporaryDirectory", "os.environ", "to_delete_paths.items", "already_copied_files.append", "repo_file_path.open", "artifacts_to_upload.append"]}, "saltcheck.py": {"libraries": ["multiprocessing", "junit_xml.TestSuite", "salt.utils.files", "salt.utils.functools", "logging", "salt.utils.path", "salt.utils.decorators.memoize", "junit_xml.TestCase", "copy", "os", "time", "salt.utils.data", "salt.utils.json.loads", "salt.exceptions", "salt.utils.json.dumps", "salt.client", "salt.utils.odict.OrderedDict", "salt.defaults.DEFAULT_TARGET_DELIM", "salt.utils.platform", "salt.utils.yaml"], "function_names": ["_get_states", "_run_assertions", "_is_valid_function", "parallel_scheck", "__assert_greater_equal", "__assert_less", "_cast_expected_to_returned_type", "__assert_equal", "load_test_suite", "report_highstate_tests", "_get_top_states", "_eval_failure_only_print", "__assert_false", "__virtual__", "__assert_true", "__assert_empty", "__is_valid_test", "__assert_not_empty", "__assert_not_in", "__assert_not_equal", "_generate_sls_path", "_is_valid_module", "run_test", "__assert_less_equal", "_call_salt_command", "_load_file_salt_rendered", "run_state_tests", "_check_assertions", "__assert_in", "__assert_greater", "_render_file", "run_highstate_tests", "state_apply", "_generate_junit_out_list", "__init__", "_copy_state_files", "_generate_out_list", "add_test_files_for_sls"], "function_calls": ["any", "TestCase", "type", "StateTestLoader", "_is_valid_function", "list", "int", "OrderedDict", "float", "dumps", "min", "ret_type", "TestSuite", "_get_top_states", "SaltCheck", "_eval_failure_only_print", "str", "sorted", "round", "isinstance", "bool", "_is_valid_module", "loads", "run_state_tests", "_render_file", "enumerate", "tuple", "_generate_junit_out_list", "len", "_generate_out_list", "set"], "class_names": ["StateTestLoader", "SaltCheck"], "class_method_calls": ["result.get", "item.items", "logging.getLogger", "TestSuite.to_xml_string", "sls_split.pop", "kwargs.get", "stl.test_dict", "self.__assert_equal", "self.assertions_list", "failed_tests.get", "state_name.replace", "self.__assert_in", "caller.cmd", "self._load_file_salt_rendered", "x.keys", "self.__assert_false", "self.__assert_true", "self.__assert_greater", "states_missing_tests.append", "assert_k.startswith", "kwargs.pop", "this_cached_test_file.endswith", "result.update", "log.info", "scheck.run_test", "self.test_files", "log.warning", "cached_copied_files.extend", "results.get", "self._run_assertions", "self.__assert_greater_equal", "sls_name.split", "time.time", "self.found_states", "self.__is_valid_test", "cached_copied_files.remove", "items.get", "self._copy_state_files", "file_string.endswith", "fp.read", "k.startswith", "self.saltcheck_test_location", "log.error", "all_sls_paths.append", "self._cast_expected_to_returned_type", "multiprocessing.Pool", "state_name.split", "self._get_states", "m_and_f.split", "self.__assert_not_in", "os.sep", "self.__assert_empty", "out_list.append", "mydict.items", "self.test_dict", "self._call_salt_command", "dict.get", "self.saltenv", "data.get", "salt.exceptions", "fun.split", "stl.load_test_suite", "self.__assert_less", "self.sls_list_state", "salt.config", "log.debug", "self.path_type", "self.__assert_less_equal", "os.path", "copy.deepcopy", "stl.add_test_files_for_sls", "test_dict.get", "test_cases.append", "multiprocessing.cpu_count", "stl.found_states", "self.__assert_not_empty", "self.results_dict_summary", "self.modules", "self._check_assertions", "self.__assert_not_equal", "salt.utils", "__opts__.get", "self._generate_sls_path", "salt.client", "status.startswith", "dict.keys", "self.results_dict"]}, "slsutil.py": {"libraries": ["salt.exceptions", "os", "posixpath", "textwrap", "salt.loader", "salt.utils.args", "salt.utils.dictupdate", "salt.utils.path", "salt.template"], "function_names": ["update", "findup", "serialize", "renderer", "merge", "dir_exists", "merge_all", "file_exists", "boolstr", "_set_context", "deserialize", "path_exists", "banner", "_get_serialize_fn"], "function_calls": ["path_exists", "list", "dir_exists", "file_exists", "len", "_set_context", "getattr", "isinstance", "function", "_get_serialize_fn"], "class_names": [], "class_method_calls": ["salt.exceptions", "wrapper.wrap", "os.linesep", "ret.read", "textwrap.TextWrapper", "commentchar.strip", "block.append", "salt.loader", "line.center", "commentchar.rstrip", "posixpath.normpath", "salt.utils", "os.path", "kwargs.get", "salt.template"]}, "cli.py": {"libraries": ["sys", "os", "salt.exceptions.SaltCloudSystemExit", "salt.output", "salt.utils.verify.verify_env", "salt.utils.user", "salt.utils.cloud", "salt.utils.verify.check_user", "salt.syspaths", "salt.config", "salt.cloud", "logging", "salt.utils.parsers", "salt.exceptions.SaltCloudException", "salt.defaults.exitcodes"], "function_names": ["handle_exception", "print_confirm", "run"], "function_calls": ["check_user", "input", "print", "set", "isinstance", "verify_env"], "class_names": ["SaltCloud"], "class_method_calls": ["log.error", "self.config", "mapper.provider_list", "mapper.size_list", "name.split", "self.selected_query_option", "mapper.destroy", "names.add", "drivers.items", "sys.exit", "mapper.image_list", "log.info", "os.path", "mapper.delete_map", "mapper.get_running_by_names", "machines.append", "mapper.interpolated_map", "mapper.map_data", "logging.getLogger", "matching.items", "self.print_confirm", "salt.output", "self.function_name", "self.credential_username", "self.parse_args", "syspaths.CONFIG_DIR", "exc.args", "mapper.run_map", "self.handle_exception", "arg.split", "mapper.run_profile", "dmap.get", "self.options", "sys.stderr", "mapper.location_list", "mapper.map_providers_parallel", "mapper.do_function", "err.errno", "mapper.profile_list", "salt.cloud", "salt.utils", "res.lower", "msg.format", "mapper.do_action", "salt.defaults", "self.exit", "self.credential_provider", "self.args", "self.error", "exc.exit_code", "mapper.get_vmnames_by_action", "mapper.rendered_map", "args.remove", "logging.DEBUG", "self.function_provider"]}, "aliyun.py": {"libraries": ["salt.utils.json", "hmac", "logging", "urllib.parse", "salt.exceptions.SaltCloudSystemExit", "base64", "requests", "salt.exceptions.SaltCloudExecutionTimeout", "uuid", "salt.exceptions.SaltCloudNotFound", "pprint", "salt.exceptions.SaltCloudExecutionFailure", "sys", "hashlib.sha1", "time", "salt.utils.stringutils.to_bytes", "salt.utils.data", "salt.utils.cloud", "salt.config"], "function_names": ["destroy", "show_disk", "get_configured_provider", "list_securitygroup", "get_image", "_get_active_provider_name", "list_nodes", "show_instance", "script", "create", "_get_node", "avail_sizes", "get_dependencies", "get_size", "_compute_signature", "list_nodes_select", "__query_node_data", "percent_encode", "list_nodes_min", "list_monitor_data", "__virtual__", "get_location", "reboot", "list_availability_zones", "__get_location", "show_image", "stop", "list_nodes_full", "create_node", "start", "avail_locations", "query", "avail_images", "get_securitygroup"], "function_calls": ["destroy", "get_configured_provider", "list_securitygroup", "get_image", "list", "_get_active_provider_name", "show_instance", "_get_node", "avail_sizes", "SaltCloudSystemExit", "get_dependencies", "get_size", "_compute_signature", "str", "sorted", "percent_encode", "isinstance", "to_bytes", "get_location", "__get_location", "SaltCloudNotFound", "list_nodes_full", "create_node", "avail_locations", "query", "avail_images", "get_securitygroup"], "class_names": [], "class_method_calls": ["log.error", "res.replace", "h.digest", "log.debug", "ret.update", "time.strftime", "result.get", "log.info", "uuid.uuid1", "config.is_provider_configured", "line.decode", "log.warning", "urllib.parse", "pprint.pformat", "logging.getLogger", "time.gmtime", "logging.DEBUG", "time.sleep", "kwargs.get", "node.get", "hmac.new", "config.check_driver_dependencies", "provider.get", "salt.utils", "sys.stdin", "parameters.update", "data.get", "params.update", "config.is_profile_configured", "request.url", "__opts__.get", "request.text", "request.status_code", "provider.split", "requests.get", "result_instancestatus.update", "config.get_cloud_config_value", "base64.encodestring", "__active_provider_name__.value", "parameters.items"]}, "clc.py": {"libraries": ["importlib", "salt.exceptions.SaltCloudSystemExit", "requests.packages.urllib3.disable_warnings", "time", "salt.utils.json", "salt.config", "logging", "clc"], "function_names": ["avail_sizes", "get_month_to_date", "get_queue_data", "get_dependencies", "get_build_status", "list_nodes_full", "get_server_alerts", "destroy", "get_configured_provider", "get_monthly_estimate", "_get_active_provider_name", "get_creds", "get_group_estimate", "avail_locations", "avail_images", "create", "__virtual__"], "function_calls": ["SaltCloudSystemExit", "disable_warnings", "get_dependencies", "get_build_status", "list_nodes_full", "get_configured_provider", "str", "get_creds", "_get_active_provider_name", "round", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "clc.v1", "kwargs.items", "templates.update", "ret.update", "importlib.import_module", "config.get_cloud_config_value", "time.sleep", "config.check_driver_dependencies", "clc.v2", "salt.utils", "log.info", "__active_provider_name__.value", "config.is_provider_configured"]}, "cloudstack.py": {"libraries": ["salt.exceptions.SaltCloudSystemExit", "salt.utils.versions.Version", "salt.utils.functools.namespaced_function", "libcloud.compute.drivers.cloudstack.CloudStackNetwork", "libcloud.security", "salt.utils.event", "salt.config", "logging", "pprint", "salt.cloud.libcloudfuncs.*", "salt.utils.cloud"], "function_names": ["get_conn", "get_dependencies", "get_key", "get_keypair", "get_project", "get_security_groups", "destroy", "get_location", "get_configured_provider", "cloudstack_displayname", "_get_active_provider_name", "get_networkid", "get_password", "create", "block_device_mappings", "get_ip", "__virtual__"], "function_calls": ["Version", "get_keypair", "CloudStackNetwork", "get_configured_provider", "cloudstack_displayname", "get_image", "_get_active_provider_name", "block_device_mappings", "driver", "get_driver", "SaltCloudSystemExit", "get_key", "get_dependencies", "get_size", "str", "get_networkid", "namespaced_function", "get_node", "get_security_groups", "get_project", "get_location", "globals", "get_ip", "get_conn", "len"], "class_names": [], "class_method_calls": ["log.error", "conn.attach_volume", "project.name", "volume.extra", "log.debug", "conn.list_locations", "ret.update", "log.info", "config.is_provider_configured", "Provider.CLOUDSTACK", "log.warning", "conn.ex_list_projects", "logging.getLogger", "data.extra", "pprint.pformat", "conn.destroy_volume", "location.name", "data.__dict__", "logging.DEBUG", "conn.list_volumes", "volume.name", "libcloud.__version__", "node.public_ips", "conn.create_volume", "conn.destroy_node", "location.id", "conn.detach_volume", "config.check_driver_dependencies", "salt.utils", "config.is_profile_configured", "data.public_ips", "data.private_ips", "project.id", "libcloud.security", "log.isEnabledFor", "config.get_cloud_config_value", "conn.create_node", "ex_blockdevicemapping.get", "__active_provider_name__.value", "kwargs.copy"]}, "digitalocean.py": {"libraries": ["os", "salt.exceptions.SaltCloudSystemExit", "time", "salt.utils.json", "salt.utils.stringutils", "requests", "salt.exceptions.SaltCloudConfigError", "salt.utils.files", "salt.exceptions.SaltCloudExecutionTimeout", "salt.exceptions.SaltInvocationError", "salt.config", "salt.exceptions.SaltCloudNotFound", "logging", "decimal", "pprint", "salt.exceptions.SaltCloudExecutionFailure", "salt.utils.cloud"], "function_names": ["destroy_dns_records", "destroy", "_get_vpc_by_name", "get_configured_provider", "get_image", "_get_active_provider_name", "list_nodes", "delete_floating_ip", "show_instance", "list_floating_ips", "script", "create", "_get_node", "avail_sizes", "get_dependencies", "get_size", "unassign_floating_ip", "assign_floating_ip", "__add_dns_addr__", "list_nodes_select", "create_key", "__query_node_data", "__virtual__", "list_keypairs", "show_pricing", "show_floating_ip", "get_location", "reboot", "create_floating_ip", "post_dns_record", "get_keyid", "stop", "_get_ips", "_list_nodes", "list_nodes_full", "remove_key", "create_node", "start", "avail_locations", "_get_full_output", "query", "avail_images", "show_keypair", "import_keypair"], "function_calls": ["destroy_dns_records", "destroy", "_get_vpc_by_name", "get_configured_provider", "get_image", "list", "_get_active_provider_name", "int", "requester", "show_instance", "_get_node", "avail_sizes", "SaltCloudSystemExit", "get_dependencies", "get_size", "str", "len", "__add_dns_addr__", "create_key", "isinstance", "list_keypairs", "repr", "dict", "get_location", "SaltInvocationError", "post_dns_record", "get_keyid", "_get_ips", "_list_nodes", "SaltCloudNotFound", "SaltCloudConfigError", "list_nodes_full", "create_node", "avail_locations", "_get_full_output", "query", "zip", "avail_images", "getattr"], "class_names": [], "class_method_calls": ["log.error", "public_key_filename.read", "log.exception", "log.debug", "ret.update", "vm_size.lower", "result.get", "log.info", "os.path", "config.is_provider_configured", "pprint.pformat", "logging.getLogger", "vm_.get", "networks.get", "logging.DEBUG", "floating_ip.keys", "time.sleep", "private_ips.append", "key_pair.keys", "kwargs.get", "size.keys", "fp_.read", "decimal.Decimal", "region.keys", "ssh_key_names.split", "config.check_driver_dependencies", "image.keys", "salt.utils", "data.get", "fqdn.split", "item.get", "kwargs.update", "request.url", "__opts__.get", "request.text", "request.status_code", "node.keys", "config.is_profile_configured", "provider.split", "config.get_cloud_config_value", "profile.get", "public_ips.append", "__active_provider_name__.value"]}, "dimensiondata.py": {"libraries": ["libcloud.loadbalancer.types.Provider", "logging", "libcloud.compute.providers.get_driver", "salt.exceptions.SaltCloudSystemExit", "libcloud.compute.types.Provider", "netaddr.all_matching_cidrs", "libcloud.compute.base.NodeState", "libcloud.loadbalancer.base.Member", "salt.exceptions.SaltCloudExecutionTimeout", "libcloud.compute.base.NodeDriver", "pprint", "salt.exceptions.SaltCloudExecutionFailure", "libcloud.compute.base.NodeAuthPassword", "libcloud", "libcloud.loadbalancer.providers.get_driver", "salt.cloud.libcloudfuncs.*", "salt.utils.cloud", "salt.utils.versions.Version", "socket", "libcloud.security", "salt.config", "salt.utils.functools.namespaced_function"], "function_names": ["create_lb", "get_conn", "preferred_ip", "get_dependencies", "get_lb_conn", "get_configured_provider", "_expand_balancer", "start", "_to_event_data", "_get_active_provider_name", "_query_node_data", "ssh_interface", "create", "stop", "__virtual__"], "function_calls": ["Version", "destroy", "get_configured_provider", "_to_event_data", "list", "_get_active_provider_name", "callable", "show_instance", "driver", "get_driver", "SaltCloudSystemExit", "get_lb_conn", "get_dependencies", "str", "dir", "ssh_interface", "isinstance", "namespaced_function", "get_node", "globals", "get_driver_lb", "Member", "get_conn", "preferred_ip", "NodeAuthPassword", "_expand_balancer", "getattr"], "class_names": [], "class_method_calls": ["log.error", "NodeState.RUNNING", "y.name", "Provider.DIMENSIONDATA", "log.debug", "conn.ex_list_vlans", "ret.update", "log.info", "config.is_provider_configured", "log.warning", "conn.ex_shutdown_graceful", "logging.getLogger", "data.extra", "conn.ex_start_node", "lb_conn.ex_set_current_network_domain", "pprint.pformat", "conn.ex_get_location_by_id", "data.__dict__", "logging.DEBUG", "lb.__dict__", "conn.list_images", "socket.AF_INET6", "libcloud.__version__", "socket.AF_INET", "x.id", "socket.inet_pton", "kwargs.get", "obj.name", "network_domain.id", "members.append", "Provider_lb.DIMENSIONDATA", "config.check_driver_dependencies", "salt.utils", "conn.ex_list_network_domains", "config.is_profile_configured", "attribute_name.startswith", "data.public_ips", "data.private_ips", "node.private_ips", "conn.ex_create_network_domain", "lb_conn.create_balancer", "libcloud.security", "config.get_cloud_config_value", "conn.create_node", "__active_provider_name__.value"]}, "ec2.py": {"libraries": ["salt.utils.json", "hashlib", "salt.utils.files", "salt.utils.yaml", "datetime", "hmac", "logging", "salt.utils.hashutils", "urllib.parse", "salt.exceptions.SaltCloudSystemExit", "base64", "salt.utils.stringutils", "requests", "salt.exceptions.SaltCloudExecutionTimeout", "uuid", "decimal", "pprint", "functools.cmp_to_key", "salt.exceptions.SaltCloudException", "salt.exceptions.SaltCloudExecutionFailure", "salt.utils.msgpack", "os", "xml.etree.ElementTree", "time", "salt.exceptions.SaltCloudConfigError", "re", "salt.utils.cloud", "salt.crypt", "binascii", "salt.utils.compat", "salt.utils.aws", "salt.config", "stat", "salt.utils.http"], "function_names": ["_get_subnet_from_subnet_query", "get_configured_provider", "copy_snapshot", "rename", "request_instance", "_get_node", "show_term_protect", "get_tags", "get_spot_config", "describe_snapshots", "delvol_on_destroy", "_t", "del_tags", "show_pricing", "reboot", "create_attach_volumes", "_xml_to_dict", "securitygroupid", "_list_nodes_full", "delete_snapshot", "__query_ip_address", "_load_params", "_toggle_term_protect", "keyname", "import_keypair", "register_image", "query_instance", "__query_spot_instance_request", "show_detailed_monitoring", "_create_eni_if_necessary", "create", "block_device_mappings", "iam_profile", "ssm_describe_association", "keepvol_on_destroy", "show_delvol_on_destroy", "_get_subnet_id_for_interface", "volume_list", "disable_detailed_monitoring", "get_location", "wait_for_instance", "disable_term_protect", "optimize_providers", "show_image", "__attach_vol_to_instance", "get_console_output", "attach_volume", "avail_images", "enable_term_protect", "get_placementgroup", "show_keypair", "create_keypair", "sign", "_validate_key_path_and_mode", "set_tags", "_get_active_provider_name", "securitygroup", "create_volume", "queue_instances", "_list_interface_private_addrs", "show_volume", "enable_detailed_monitoring", "list_nodes_select", "_update_enis", "_get_securitygroupname_id", "list_nodes_min", "_extract_instance_info", "create_snapshot", "_extract_name_tag", "update_pricing", "stop", "_associate_eip_with_interface", "_parse_pricing", "start", "destroy", "get_subnetid", "list_nodes", "get_imageid", "show_instance", "script", "avail_sizes", "get_dependencies", "get_provider", "get_tenancy", "_toggle_delvol", "ssh_interface", "__virtual__", "detach_volume", "ssm_create_association", "_wait_for_spot_instance", "_request_eip", "_get_subnetname_id", "get_availability_zone", "list_availability_zones", "get_password_data", "delete_keypair", "list_nodes_full", "delete_volume", "volume_create", "_param_from_config", "get_ssh_gateway_config", "avail_locations", "describe_volumes", "query", "_modify_eni_properties"], "function_calls": ["_get_subnet_from_subnet_query", "get_configured_provider", "rename", "request_instance", "_get_node", "show_term_protect", "get_tags", "get_spot_config", "_t", "create_attach_volumes", "_xml_to_dict", "securitygroupid", "_list_nodes_full", "set", "_load_params", "_toggle_term_protect", "keyname", "query_instance", "list", "show_detailed_monitoring", "_create_eni_if_necessary", "block_device_mappings", "iam_profile", "hasattr", "show_delvol_on_destroy", "_get_subnet_id_for_interface", "update_callback", "dict", "get_location", "wait_for_instance", "show_image", "get_console_output", "enumerate", "attach_volume", "zip", "get_placementgroup", "sign", "_validate_key_path_and_mode", "set_tags", "_get_active_provider_name", "securitygroup", "create_volume", "queue_instances", "_list_interface_private_addrs", "_update_enis", "_get_securitygroupname_id", "map", "_extract_instance_info", "SaltCloudExecutionTimeout", "_extract_name_tag", "update_pricing", "_associate_eip_with_interface", "iter", "next", "SaltCloudConfigError", "_parse_pricing", "destroy", "get_subnetid", "cmp_to_key", "int", "SaltCloudException", "SaltCloudExecutionFailure", "get_imageid", "SaltCloudSystemExit", "get_dependencies", "get_provider", "get_tenancy", "_toggle_delvol", "str", "sorted", "ssh_interface", "isinstance", "ssm_create_association", "_request_eip", "_wait_for_spot_instance", "_get_subnetname_id", "get_availability_zone", "list_availability_zones", "get_password_data", "list_nodes_full", "_param_from_config", "get_ssh_gateway_config", "describe_volumes", "len", "_modify_eni_properties"], "class_names": [], "class_method_calls": ["eip_list.append", "image_info.get", "eni_desc.get", "result.status_code", "raw.get", "msg.encode", "tmp_providers.items", "result.get", "log.log", "data.items", "logging.getLogger", "xmltree.tag", "aws.AWS_MAX_RETRIES", "ret.get", "properties.items", "base64.b64decode", "re.S", "kwargs.get", "binascii.a2b_base64", "ex_iam_profile.startswith", "config.check_driver_dependencies", "price_js.strip", "config.is_profile_configured", "logging.INFO", "datetime.datetime", "salt.crypt", "image_description.lower", "profile.get", "providers.items", "log.exception", "get_imageid.images", "aws.creds", "log.info", "instance_enis.append", "bd_items.append", "log.warning", "urllib.parse", "pprint.pformat", "vm_.get", "time.sleep", "tmp_data.items", "interface.get", "fp_.write", "t.strftime", "block_device_volume_id_map.items", "provider.get", "kf_.read", "re.sub", "logging.DEBUG", "item.keys", "uuid.uuid4", "entry.get", "log.error", "tags.get", "params.copy", "tags.items", "config.is_provider_configured", "os.stat", "string_to_sign.encode", "item.tag", "d.items", "item.values", "item.text", "endpoint.strip", "subnet.get", "aws.query", "fp_.close", "log.trace", "securitygroupid_set.add", "tags.values", "ret.setdefault", "aws.sleep_exponential_backoff", "stat.S_IMODE", "data.get", "params.update", "provider.split", "hashlib.sha256", "requests.get", "exc.response", "config.get_cloud_config_value", "result.text", "instance.copy", "salt.config", "result.raise_for_status", "ET.fromstring", "http.query", "addresses.append", "interface.setdefault", "log.debug", "name.split", "ret.update", "node_metadata.get", "eni_devices.append", "os.path", "dev_list.index", "securitygroupid_set.union", "params_with_headers.get", "requests.exceptions", "items.append", "querystring.replace", "decimal.Decimal", "image.startswith", "xmltree.text", "_bd.pop", "password_data.get", "hmac.new", "pprint.pprint", "ret.append", "tag.get", "salt.utils", "item.get", "re.compile", "__opts__.get", "fh_.read", "base64.b64encode", "param.update", "assoc.get", "output.split", "price_js.replace", "__active_provider_name__.value"]}, "gce.py": {"libraries": ["libcloud.loadbalancer.types.Provider", "salt.utils.files", "logging", "libcloud.compute.providers.get_driver", "ast.literal_eval", "salt.exceptions.SaltCloudSystemExit", "libcloud.compute.types.Provider", "pprint", "salt.utils.msgpack", "sys", "os", "libcloud.common.google.ResourceInUseError", "libcloud", "libcloud.loadbalancer.providers.get_driver", "re", "libcloud.common.google.ResourceNotFoundError", "salt.cloud.libcloudfuncs.*", "salt.utils.cloud", "salt.utils.versions.Version", "salt.config", "salt.utils.http", "salt.utils.functools.namespaced_function"], "function_names": ["show_address", "_expand_address", "detach_lb", "destroy", "show_disk", "get_configured_provider", "_get_active_provider_name", "show_fwrule", "show_instance", "__create_orget_address", "show_network", "show_hc", "create", "request_instance", "delete_lb", "_expand_node", "avail_sizes", "_expand_item", "create_subnetwork", "create_lb", "get_lb_conn", "get_dependencies", "show_lb", "create_address", "__get_labels", "show_subnetwork", "__get_size", "__get_metadata", "show_snapshot", "__virtual__", "attach_lb", "show_pricing", "create_fwrule", "__get_network", "create_snapshot", "reboot", "__get_image", "delete_disk", "create_attach_volumes", "detach_disk", "create_disk", "__get_location", "update_pricing", "delete_network", "__get_region", "__get_ssh_interface", "stop", "delete_snapshot", "__get_subnetwork", "get_conn", "__get_tags", "__get_ssh_credentials", "delete_fwrule", "delete_subnetwork", "delete_address", "_expand_balancer", "_parse_allow", "start", "create_hc", "delete_hc", "avail_images", "__get_host", "attach_disk", "_expand_disk", "create_network"], "function_calls": ["Version", "_expand_address", "get_configured_provider", "getattr", "_get_active_provider_name", "show_instance", "__create_orget_address", "float", "ord", "request_instance", "driver", "_expand_node", "get_driver", "_expand_item", "SaltCloudSystemExit", "get_lb_conn", "get_dependencies", "create_address", "__get_labels", "literal_eval", "len", "dir", "__get_size", "__get_metadata", "isinstance", "namespaced_function", "chr", "__get_network", "create_attach_volumes", "__get_image", "create_disk", "__get_location", "update_pricing", "globals", "__get_region", "__get_ssh_interface", "get_driver_lb", "__get_subnetwork", "get_conn", "__get_tags", "__get_ssh_credentials", "_expand_balancer", "_parse_allow", "enumerate", "__get_host", "attach_disk", "_expand_disk"], "class_names": [], "class_method_calls": ["attr.startswith", "lb_conn.balancer_detach_member", "item.__dict__", "ex_region.name", "metadata.items", "external_ip.lower", "addy.__dict__", "logging.getLogger", "conn.ex_start_node", "external_ip.name", "conn.ex_get_zone", "src_range.split", "conn.ex_get_image", "os.getenv", "node.public_ips", "kwargs.get", "dst_tags.split", "external_ip.address", "conn.detach_volume", "img.name", "config.check_driver_dependencies", "conn.ex_get_snapshot", "config.is_profile_configured", "node.private_ips", "z.name", "addy.region", "conn.ex_get_firewall", "profile.get", "allow_dict.append", "conn.ex_get_healthcheck", "conn.ex_get_volume", "GCE_VM_NAME_REGEX.match", "node.name", "sizes.append", "conn.destroy_volume_snapshot", "conn.ex_create_firewall", "disk.extra", "log.info", "log.warning", "pprint.pformat", "location.name", "conn.ex_create_network", "conn.ex_get_node", "libcloud.__version__", "allow.split", "volume.get", "size.__dict__", "disk.__dict__", "conn.create_volume_snapshot", "kwargs.update", "conn.ex_destroy_subnetwork", "Provider.GCE", "disk.name", "external_ip.region", "conn.create_node", "size.extra", "conn.ex_destroy_address", "logging.DEBUG", "conn.ex_create_healthcheck", "conn.ex_get_network", "log.error", "conn.ex_get_region", "conn.attach_volume", "p.split", "lb_conn.get_balancer", "config.is_provider_configured", "node.__dict__", "conn.ex_get_address", "sys.exc_info", "lb.__dict__", "conn.list_images", "conn.reboot_node", "all_images.extend", "hci.name", "disk.size", "conn.create_volume", "log.trace", "conn.destroy_node", "node.extra", "conn.ex_create_address", "conn.ex_get_subnetwork", "node_data.name", "fwr.__dict__", "lb_conn.create_balancer", "provider.split", "log.errror", "member.id", "config.get_cloud_config_value", "conn.ex_create_subnetwork", "ex_healthchecks.split", "reg.name", "Provider_lb.GCE", "log.debug", "ret.update", "conn.ex_destroy_healthcheck", "os.path", "lb_conn.balancer_list_members", "conn.destroy_volume", "conn.ex_destroy_firewall", "lb_conn.destroy_balancer", "tp.__dict__", "conn.list_sizes", "items.append", "conn.ex_stop_node", "tp.name", "gce.connection", "lb_conn.balancer_attach_compute_node", "mtype.update", "src_tags.split", "salt.utils", "conn.ex_get_size", "re.compile", "__opts__.get", "boot.lower", "zone.__dict__", "__active_provider_name__.value", "conn.ex_destroy_network"]}, "gogrid.py": {"libraries": ["salt.exceptions.SaltCloudSystemExit", "time", "salt.config", "logging", "salt.utils.hashutils", "pprint", "salt.exceptions.SaltCloudException", "salt.utils.cloud"], "function_names": ["destroy", "get_configured_provider", "_get_active_provider_name", "list_nodes", "show_instance", "create", "avail_sizes", "list_common_lookups", "list_nodes_select", "__virtual__", "list_passwords", "reboot", "list_public_ips", "stop", "list_nodes_full", "start", "avail_locations", "wait_for_apipass", "avail_images", "_query"], "function_calls": ["SaltCloudSystemExit", "iter", "next", "list_common_lookups", "list_passwords", "list_nodes_full", "get_configured_provider", "list", "str", "list_public_ips", "int", "_get_active_provider_name", "SaltCloudException", "avail_images", "len", "_query", "isinstance"], "class_names": [], "class_method_calls": ["pprint.pformat", "logging.getLogger", "__opts__.get", "log.error", "log.debug", "logging.DEBUG", "ret.update", "config.get_cloud_config_value", "time.sleep", "time.time", "log.info", "salt.utils", "__active_provider_name__.value", "config.is_provider_configured", "config.is_profile_configured"]}, "hetzner.py": {"libraries": ["salt.exceptions.SaltCloudSystemExit", "time", "hcloud", "salt.config", "logging", "salt.exceptions.SaltCloudException"], "function_names": ["_object_to_dict", "destroy", "get_configured_provider", "_get_active_provider_name", "list_nodes", "show_instance", "create", "avail_sizes", "get_dependencies", "_public_network_to_dict", "list_ssh_keys", "_datacenter_to_dict", "__virtual__", "_connect_client", "resize", "reboot", "wait_until", "stop", "_private_network_to_dict", "list_nodes_full", "start", "avail_locations", "avail_images"], "function_calls": ["_connect_client", "SaltCloudSystemExit", "get_dependencies", "_object_to_dict", "list_nodes_full", "get_configured_provider", "getattr", "list", "_get_active_provider_name", "_public_network_to_dict", "str", "SaltCloudException", "wait_until", "show_instance", "_datacenter_to_dict", "stop", "map"], "class_names": [], "class_method_calls": ["log.error", "size.model", "node.labels", "log.debug", "node.public_net", "node.created", "image.name", "log.info", "server.power_on", "net.ipv6", "node.status", "ssh_keys.append", "config.is_provider_configured", "server.power_off", "loc.name", "logging.getLogger", "response.root_password", "vm_.get", "node.volumes", "client.volumes", "client.locations", "loc.model", "client.images", "client.servers", "time.sleep", "client.datacenters", "kwargs.get", "node.id", "server.delete", "node.private_net", "vol.name", "server.public_net", "node.image", "node.datacenter", "response.server", "key.model", "net.ipv4", "time.time", "config.check_driver_dependencies", "size.name", "image.model", "datacenter.location", "vm_.update", "server.change_type", "client.ssh_keys", "config.is_profile_configured", "datacenter.name", "__opts__.get", "node.server_type", "client.server_types", "key.name", "config.get_cloud_config_value", "server.reboot", "hcloud.Client", "__active_provider_name__.value", "client.networks", "node.name"]}, "joyent.py": {"libraries": ["Cryptodome.Hash.SHA256", "salt.utils.json", "salt.utils.files", "datetime", "logging", "Crypto.Signature.PKCS1_v1_5", "M2Crypto.EVP", "salt.exceptions.SaltCloudSystemExit", "base64", "salt.exceptions.SaltCloudExecutionTimeout", "inspect", "salt.exceptions.SaltCloudNotFound", "pprint", "salt.exceptions.SaltCloudExecutionFailure", "os", "http.client", "Crypto.Hash.SHA256", "salt.utils.cloud", "salt.config", "Cryptodome.Signature.PKCS1_v1_5", "salt.utils.yaml", "salt.utils.http"], "function_names": ["show_key", "get_location_path", "destroy", "delete_key", "_old_libcloud_node_state", "query_instance", "get_configured_provider", "get_image", "_get_active_provider_name", "list_nodes", "show_instance", "create", "reformat_node", "avail_sizes", "get_size", "has_method", "key_list", "list_nodes_select", "joyent_node_state", "ssh_interface", "import_key", "__virtual__", "get_node", "get_location", "reboot", "_get_proto", "stop", "_query_ip_address", "take_action", "list_nodes_full", "create_node", "start", "avail_locations", "list_keys", "query", "avail_images"], "function_calls": ["get_location_path", "_old_libcloud_node_state", "query_instance", "get_configured_provider", "get_image", "list", "list_nodes", "_get_active_provider_name", "show_instance", "reformat_node", "avail_sizes", "SaltCloudSystemExit", "get_size", "key_list", "str", "dir", "joyent_node_state", "isinstance", "get_node", "get_location", "_get_proto", "SaltCloudNotFound", "take_action", "list_nodes_full", "create_node", "query", "avail_images", "len"], "class_names": [], "class_method_calls": ["log.error", "md.update", "timestamp.encode", "log.debug", "inspect.stack", "metadata.items", "tag.items", "rsa_key.sign", "log.info", "os.path", "signed.decode", "config.is_provider_configured", "timenow.strftime", "log.warning", "pprint.pformat", "logging.getLogger", "vm_.get", "logging.DEBUG", "SHA256.new", "img_url.startswith", "user.split", "EVP.MessageDigest", "kwargs.get", "PKCS1_v1_5.new", "fp_.read", "md.final", "http.client", "salt.utils", "hash_.update", "data.get", "config.is_profile_configured", "__opts__.get", "datetime.datetime", "salt.crypt", "base64.b64encode", "rsa_.sign", "config.get_cloud_config_value", "to_del.append", "__active_provider_name__.value", "item.keys"]}, "libvirt.py": {"libraries": ["os", "salt.utils.stringutils", "subprocess", "salt.utils.files", "salt.utils.path"], "function_names": ["ext_pillar", "gen_hyper_keys", "__virtual__"], "function_calls": ["gen_hyper_keys"], "class_names": [], "class_method_calls": ["os.makedirs", "fp_.write", "os.listdir", "proc.stdout", "key.endswith", "wfh.write", "os.path", "subprocess.call", "pillar.get", "subprocess.run", "salt.utils", "subprocess.PIPE", "fp_.read"]}, "linode.py": {"libraries": ["salt._compat.ipaddress", "salt.exceptions.SaltCloudSystemExit", "time", "requests", "pathlib.Path", "abc.abstractmethod", "json", "datetime", "re", "logging", "abc.ABC", "salt.config", "pprint", "salt.exceptions.SaltCloudNotFound", "salt.exceptions.SaltCloudException"], "function_names": ["_list_linodes", "_get_swap_size", "destroy", "_get_response_json", "create_config", "get_configured_provider", "_get_active_provider_name", "_get_backup_enabled", "_get_ssh_keys", "list_nodes", "_get_linode_type", "show_instance", "_get_ssh_key_files", "_get_api_key", "create", "avail_sizes", "_poll", "clone", "_get_linode_by_id", "_wait_for_entity_status", "set_backup_schedule", "list_nodes_select", "_validate_name", "_get_private_ip", "list_nodes_min", "_get_poll_interval", "_get_linode_by_name", "__virtual__", "show_pricing", "_get_ratelimit_sleep", "reboot", "_get_dependencies", "_wait_for_event", "get_linode", "_get_password", "stop", "_get_ips", "get_api_instance", "_get_ssh_key", "list_nodes_full", "boot", "start", "_wait_for_linode_status", "avail_locations", "avail_images", "condition", "_check_event_status", "_query", "_get_ssh_interface", "get_config_id"], "function_calls": ["_get_swap_size", "get_configured_provider", "list", "int", "_get_backup_enabled", "_get_ssh_keys", "SaltCloudException", "_get_active_provider_name", "getter", "_get_api_key", "_get_ssh_key_files", "hasattr", "Path", "SaltCloudSystemExit", "clone", "str", "_validate_name", "_get_private_ip", "map", "cls", "_get_poll_interval", "_get_ratelimit_sleep", "_get_dependencies", "_get_password", "SaltCloudNotFound", "_get_ssh_key", "condition", "len", "set", "_get_ssh_interface"], "class_names": ["LinodeAPI", "LinodeAPIv4"], "class_method_calls": ["self.boot", "self._check_event_status", "response.json", "result.status_code", "error.get", "log.debug", "ret.update", "self._get_linode_by_id", "result.get", "file.is_file", "log.info", "json.dumps", "time.mktime", "config.is_provider_configured", "self._get_linode_by_name", "log.warning", "pprint.pformat", "logging.getLogger", "vm_.get", "self._get_ips", "err_response.status_code", "event.get", "instance_type.get", "time.sleep", "requests.exceptions", "cls.api_instance", "kwargs.get", "self._wait_for_event", "log.trace", "response.get", "self._list_linodes", "config.check_driver_dependencies", "re.match", "self._get_response_json", "requests.request", "err_response.reason", "errors.append", "self._get_linode_type", "file.read_text", "self.get_linode", "self._query", "instance.get", "self.list_nodes_full", "config.is_profile_configured", "item.get", "re.compile", "self._wait_for_linode_status", "ssh_keys.add", "__opts__.get", "datetime.datetime", "self._wait_for_entity_status", "provider.split", "file.exists", "self._poll", "exc.response", "ipaddress.ip_address", "config.get_cloud_config_value", "result.text", "private.append", "public.append", "profile.get", "result.raise_for_status", "__active_provider_name__.value", "backups.get", "LinodeAPIv4.get_api_instance"]}, "lxc.py": {"libraries": ["salt.exceptions.SaltInvocationError", "salt.exceptions.CommandExecutionError"], "function_names": ["stopped", "frozen", "present", "running", "edited_conf", "set_pass", "absent"], "function_calls": ["any"], "class_names": [], "class_method_calls": ["exc.strerror"]}, "oneandone.py": {"libraries": ["oneandone.client.BlockStorage", "os", "oneandone.client.SshKey", "salt.exceptions.SaltCloudSystemExit", "time", "salt.utils.stringutils", "salt.exceptions.SaltCloudConfigError", "salt.utils.files", "salt.exceptions.SaltCloudExecutionTimeout", "oneandone.client.Server", "salt.config", "oneandone.client.Hdd", "salt.exceptions.SaltCloudNotFound", "logging", "oneandone.client.OneAndOneService", "pprint", "salt.exceptions.SaltCloudExecutionFailure", "salt.utils.cloud"], "function_names": ["create_ssh_key", "_wait_for_completion", "destroy", "get_configured_provider", "get_image", "_get_active_provider_name", "list_nodes", "show_instance", "script", "create", "load_public_key", "_get_block_storage", "avail_sizes", "get_dependencies", "get_size", "_get_hdds", "get_wait_timeout", "list_nodes_select", "__query_node_data", "__virtual__", "get_node", "reboot", "get_key_filename", "stop", "create_block_storage", "_get_server", "get_conn", "_get_ssh_key", "list_nodes_full", "start", "avail_locations", "avail_images"], "function_calls": ["_wait_for_completion", "destroy", "get_configured_provider", "_get_active_provider_name", "show_instance", "load_public_key", "_get_block_storage", "avail_sizes", "SaltCloudSystemExit", "get_dependencies", "get_size", "Exception", "_get_hdds", "str", "get_wait_timeout", "get_node", "OneAndOneService", "bool", "SshKey", "get_key_filename", "BlockStorage", "_get_server", "SaltCloudNotFound", "get_conn", "next", "_get_ssh_key", "SaltCloudConfigError", "list_nodes_full", "Server", "avail_images", "Hdd"], "class_names": [], "class_method_calls": ["log.error", "conn.modify_server_status", "conn.start_server", "block_storage.datacenter_id", "log.debug", "conn.create_block_storage", "ret.update", "conn.get_server", "log.info", "conn.delete_server", "os.path", "conn.stop_server", "conn.list_datacenters", "config.is_provider_configured", "conn.list_servers", "pprint.pformat", "logging.getLogger", "public_key.read", "server.specs", "logging.DEBUG", "time.sleep", "private_ips.append", "kwargs.get", "hdds.append", "block_storage.server_id", "conn.list_appliances", "node.get", "time.time", "config.check_driver_dependencies", "exc.message", "salt.utils", "conn.create_server", "config.is_profile_configured", "__opts__.get", "block_storage.description", "conn.fixed_server_flavors", "datacenters.append", "images.items", "config.get_cloud_config_value", "conn.create_ssh_key", "public_ips.append", "__active_provider_name__.value"]}, "opennebula.py": {"libraries": ["xmlrpc.client", "lxml.etree", "os", "salt.exceptions.SaltCloudSystemExit", "time", "salt.exceptions.SaltCloudConfigError", "salt.utils.files", "salt.exceptions.SaltCloudExecutionTimeout", "salt.config", "salt.exceptions.SaltCloudNotFound", "logging", "pprint", "salt.utils.data", "salt.exceptions.SaltCloudExecutionFailure"], "function_names": ["vm_attach", "vn_release", "vm_migrate", "vm_snapshot_create", "get_configured_provider", "get_host_id", "secgroup_info", "vm_snapshot_revert", "vn_delete", "_get_node", "vm_update", "image_snapshot_delete", "image_snapshot_flatten", "vn_free_ar", "__query_node_data", "template_clone", "image_info", "get_secgroup_id", "reboot", "_xml_to_dict", "vm_detach", "list_hosts", "vm_monitoring", "vm_disk_snapshot_create", "image_update", "vm_action", "list_security_groups", "image_allocate", "image_snapshot_revert", "vm_snapshot_delete", "template_instantiate", "get_template_id", "vm_disk_snapshot_delete", "create", "vm_info", "vn_allocate", "_require_disk_opts", "image_clone", "list_clusters", "vm_attach_nic", "get_template", "image_persistent", "get_location", "list_templates", "template_delete", "vn_info", "vm_resize", "secgroup_clone", "avail_images", "get_datastore_id", "vn_hold", "_get_active_provider_name", "secgroup_update", "image_delete", "list_nodes_select", "get_template_image", "_get_device_template", "secgroup_allocate", "secgroup_delete", "_get_xml", "vm_disk_save", "get_image_id", "stop", "get_cluster_id", "vn_add_ar", "template_allocate", "start", "_get_xml_rpc", "get_vn_id", "destroy", "vn_reserve", "get_image", "list_nodes", "show_instance", "avail_sizes", "get_dependencies", "template_update", "list_datastores", "get_vm_id", "__virtual__", "vm_disk_snapshot_revert", "get_one_version", "vm_detach_nic", "vm_allocate", "_list_nodes", "vm_deploy", "list_nodes_full", "avail_locations", "list_vns"], "function_calls": ["vm_action", "list_security_groups", "destroy", "get_configured_provider", "list", "int", "_get_active_provider_name", "list_nodes", "get_template_id", "show_instance", "get_host_id", "_get_node", "_require_disk_opts", "SaltCloudSystemExit", "get_dependencies", "list_clusters", "str", "get_vm_id", "list_datastores", "get_template_image", "_get_device_template", "get_template", "get_location", "get_secgroup_id", "_get_xml", "_xml_to_dict", "get_image_id", "list_templates", "get_cluster_id", "_list_nodes", "SaltCloudNotFound", "SaltCloudConfigError", "list_nodes_full", "avail_locations", "_get_xml_rpc", "avail_images", "get_datastore_id", "get_vn_id", "list_vns"], "class_names": [], "class_method_calls": ["log.error", "image.find", "log.debug", "datastore.find", "log.info", "os.path", "config.is_provider_configured", "log.warning", "cluster.find", "pprint.pformat", "logging.getLogger", "template.append", "vm_.get", "host.find", "item.tag", "server.one", "logging.DEBUG", "time.sleep", "item.text", "private_ips.append", "kwargs.get", "xmlrpc.client", "vm.find", "v_network.find", "nic.find", "config.check_driver_dependencies", "salt.utils", "config.is_profile_configured", "__opts__.get", "etree.XMLSyntaxError", "rfh.read", "group.find", "template.find", "etree.XML", "config.get_cloud_config_value", "vm_.find", "tree.find", "__active_provider_name__.value"]}, "openstack.py": {"libraries": ["os", "salt.exceptions.SaltCloudSystemExit", "ipaddress.ip_network", "salt.utils.versions.Version", "shade", "ipaddress.ip_address", "socket", "os_client_config", "salt.exceptions.SaltCloudConfigError", "shade.exc", "salt.exceptions.SaltCloudExecutionTimeout", "shade.openstackcloud", "salt.config", "logging", "pprint", "salt.exceptions.SaltCloudExecutionFailure", "copy"], "function_names": ["destroy", "get_configured_provider", "_get_active_provider_name", "list_nodes", "call", "show_instance", "create", "request_instance", "avail_sizes", "get_dependencies", "_clean_create_kwargs", "list_subnets", "list_nodes_select", "ssh_interface", "list_nodes_min", "__virtual__", "ignore_cidr", "__query_node", "_get_ips", "get_conn", "preferred_ip", "list_networks", "list_nodes_full", "avail_images"], "function_calls": ["Version", "destroy", "get_configured_provider", "list", "_get_active_provider_name", "list_nodes", "show_instance", "ip_address", "hasattr", "request_instance", "SaltCloudSystemExit", "get_dependencies", "ip_network", "_clean_create_kwargs", "str", "ssh_interface", "isinstance", "dict", "ignore_cidr", "_get_ips", "get_conn", "preferred_ip", "SaltCloudConfigError", "list_nodes_full", "getattr"], "class_names": [], "class_method_calls": ["log.error", "kwargs.pop", "log.exception", "addr.get", "node.flavor", "log.debug", "ret.update", "conn.get_server", "shade.openstackcloud", "log.info", "conn.delete_server", "node.addresses", "node.status", "os.path", "conn.get_image", "config.is_provider_configured", "log.warning", "conn.list_servers", "pprint.pformat", "logging.getLogger", "vm_.get", "os_client_config.vendors", "copy.deepcopy", "conn.list_images", "socket.AF_INET6", "vm_.pop", "socket.AF_INET", "socket.inet_pton", "fp_.read", "node.id", "conn.get_flavor", "ret.setdefault", "node.image", "ret.append", "info.get", "conn.list_flavors", "config.check_driver_dependencies", "conn.create_server", "conn.list_subnets", "__opts__.get", "kwargs.items", "conn.list_networks", "shade.__version__", "config.get_cloud_config_value", "__active_provider_name__.value", "shade.exc", "kwargs.copy", "node.name"]}, "packet.py": {"libraries": ["salt.exceptions.SaltCloudSystemExit", "time", "salt.utils.functools.namespaced_function", "salt.cloud.libcloudfuncs.show_instance", "salt.cloud.libcloudfuncs.script", "salt.cloud.libcloudfuncs.get_image", "salt.config", "packet", "logging", "pprint", "salt.exceptions.SaltCloudException", "salt.utils.cloud", "salt.cloud.libcloudfuncs.get_size"], "function_names": ["avail_sizes", "is_profile_configured", "_wait_for_status", "destroy", "list_nodes_full", "get_configured_provider", "avail_projects", "get_devices_by_token", "_get_active_provider_name", "avail_locations", "list_nodes", "list_nodes_select", "avail_images", "create", "list_nodes_min", "_get_ssh_interface", "__virtual__"], "function_calls": ["is_profile_configured", "SaltCloudSystemExit", "_wait_for_status", "range", "get_object", "list_nodes_full", "get_configured_provider", "get_devices_by_token", "int", "list_nodes_min", "_get_active_provider_name", "SaltCloudException", "avail_locations", "getattr", "globals", "namespaced_function", "_get_ssh_interface"], "class_names": [], "class_method_calls": ["manager.list_facilities", "log.error", "project.name", "devices.extend", "log.debug", "volume.state", "ret.update", "obj.state", "log.info", "config.is_provider_configured", "log.log", "os_system.__dict__", "pprint.pformat", "logging.getLogger", "manager.list_operating_systems", "os_system.name", "vm_.get", "logging.DEBUG", "time.sleep", "plan.name", "profile_data.get", "manager.create_device", "project.__dict__", "volume.id", "manager.create_volume", "volume.attach", "facility.__dict__", "device.id", "manager.call_api", "manager.list_devices", "device.state", "manager.list_volumes", "device.hostname", "salt.utils", "device.__dict__", "manager.list_plans", "config.is_profile_configured", "logging.INFO", "locations.values", "project.id", "volume.delete", "packet.Manager", "plan.__dict__", "manager.list_projects", "volume.__dict__", "config.get_cloud_config_value", "facility.name", "volume.detach", "device.ip_addresses", "__active_provider_name__.value", "volume.attached_to"]}, "parallels.py": {"libraries": ["shlex", "salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError", "salt.utils.yaml", "re", "logging", "salt.utils.data", "salt.utils.path"], "function_names": ["reset", "prlctl", "_find_guids", "revert_snapshot", "clone", "status", "delete", "prlsrvctl", "snapshot", "list_vms", "_normalize_args", "exec_", "snapshot_name_to_id", "restart", "snapshot_id_to_name", "list_snapshots", "_validate_snap_name", "stop", "delete_snapshot", "exists", "start"], "function_calls": ["list_vms", "set", "_normalize_args", "SaltInvocationError", "snapshot_name_to_id", "list", "str", "snapshot_id_to_name", "sorted", "len", "CommandExecutionError", "prlctl", "_validate_snap_name", "isinstance", "_find_guids"], "class_names": [], "class_method_calls": ["snap_name.strip", "found_guid.groups", "guids.append", "log.warning", "logging.getLogger", "named_ids.append", "cmd.extend", "args.append", "found_guid.group", "args.extend", "re.match", "salt.utils", "re.I", "data.get", "re.compile", "shlex.split", "ret.keys", "re.finditer", "snap_id.strip"]}, "profitbricks.py": {"libraries": ["profitbricks.client.LAN", "salt.utils.files", "logging", "salt.exceptions.SaltCloudSystemExit", "profitbricks", "profitbricks.client.LoadBalancer", "profitbricks.client.Datacenter", "salt.utils.stringutils", "salt.exceptions.SaltCloudExecutionTimeout", "profitbricks.client.PBNotFoundError", "profitbricks.client.Volume", "salt.exceptions.SaltCloudNotFound", "pprint", "profitbricks.client.PBError", "profitbricks.client.ProfitBricksService", "salt.exceptions.SaltCloudExecutionFailure", "os", "profitbricks.client.NIC", "time", "salt.exceptions.SaltCloudConfigError", "salt.utils.cloud", "profitbricks.client.IPBlock", "salt.utils.versions.Version", "salt.config", "profitbricks.client.FirewallRule", "profitbricks.client.Server"], "function_names": ["_wait_for_completion", "list_loadbalancers", "get_disk_type", "_get_ip_addresses", "destroy", "get_configured_provider", "get_image", "_get_active_provider_name", "list_nodes", "show_instance", "create", "list_images", "_get_firewall_rules", "avail_sizes", "get_dependencies", "get_size", "list_datacenters", "reserve_ipblock", "get_wait_timeout", "ssh_interface", "__query_node_data", "__virtual__", "get_node", "_get_nics", "reboot", "_override_size", "get_datacenter_id", "create_loadbalancer", "get_datacenter", "get_key_filename", "stop", "signal_event", "_get_server", "get_conn", "list_nodes_full", "_get_system_volume", "start", "avail_locations", "get_public_keys", "version_compatible", "_get_data_volumes", "avail_images", "create_datacenter", "set_public_lan"], "function_calls": ["Version", "_wait_for_completion", "_get_ip_addresses", "get_disk_type", "destroy", "get_configured_provider", "IPBlock", "get_image", "_get_active_provider_name", "int", "FirewallRule", "SaltCloudExecutionFailure", "show_instance", "_get_firewall_rules", "avail_sizes", "SaltCloudSystemExit", "get_dependencies", "get_size", "LAN", "NIC", "ProfitBricksService", "Exception", "str", "get_wait_timeout", "Datacenter", "ssh_interface", "LoadBalancer", "get_node", "_get_nics", "_override_size", "get_datacenter_id", "get_datacenter", "get_key_filename", "signal_event", "_get_server", "get_conn", "SaltCloudNotFound", "Volume", "SaltCloudConfigError", "list_nodes_full", "_get_system_volume", "Server", "get_public_keys", "version_compatible", "_get_data_volumes", "avail_images", "set_public_lan"], "class_names": [], "class_method_calls": ["log.error", "conn.start_server", "log.debug", "conn.get_datacenter", "conn.list_loadbalancers", "conn.create_datacenter", "conn.list_locations", "lb.update", "node.update", "ret.update", "rfh.readlines", "log.info", "conn.delete_server", "os.path", "ssh_keys.append", "conn.stop_server", "conn.list_datacenters", "config.is_provider_configured", "volume.image", "conn.list_servers", "volume.ssh_keys", "logging.getLogger", "volumes.items", "pprint.pformat", "conn.reserve_ipblock", "logging.DEBUG", "conn.list_images", "time.sleep", "volume.image_alias", "conn.get_location", "conn.get_attached_volumes", "vm_.keys", "kwargs.get", "volumes.extend", "profitbricks.API_VERSION", "conn.get_request", "volume.image_password", "ret.append", "conn.create_loadbalancer", "time.time", "config.check_driver_dependencies", "volume.availability_zone", "conn.update_lan", "conn.create_server", "salt.utils", "exc.message", "config.is_profile_configured", "datacenter.update", "__opts__.get", "conn.get_lan", "nic.nat", "datacenters.append", "conn.delete_volume", "node.pop", "config.get_cloud_config_value", "firewall_rules.items", "conn.create_lan", "conn.reboot_server", "nics.append", "__active_provider_name__.value", "nic.ips", "image.update"]}, "proxmox.py": {"libraries": ["salt.exceptions.SaltCloudSystemExit", "socket.gethostbyname", "time", "salt.utils.json", "ipaddress.ip_network", "socket.gaierror", "requests", "socket", "IPy.IP", "ipaddress.ip_address", "salt.exceptions.SaltCloudExecutionTimeout", "salt.config", "re", "logging", "pprint", "salt.exceptions.SaltCloudExecutionFailure", "salt.utils.cloud", "urllib"], "function_names": ["_import_api", "get_resources_vms", "wait_for_state", "_check_ip_available", "destroy", "get_configured_provider", "_get_active_provider_name", "_get_vm_by_name", "list_nodes", "_parse_proxmox_upid", "show_instance", "script", "create", "get_vmconfig", "wait_for_created", "get_vm_status", "get_dependencies", "_authenticate", "_dictionary_to_stringlist", "list_nodes_select", "_stringlist_to_dictionary", "_get_next_vmid", "_lookup_proxmox_task", "__virtual__", "shutdown", "_reconfigure_clone", "ignore_cidr", "stop", "_get_vm_by_id", "preferred_ip", "list_nodes_full", "create_node", "start", "avail_locations", "set_vm_status", "query", "get_resources_nodes", "avail_images", "_find_agent_ip", "_get_properties"], "function_calls": ["_import_api", "get_resources_vms", "wait_for_state", "range", "destroy", "get_configured_provider", "list", "int", "_get_vm_by_name", "_get_active_provider_name", "SaltCloudExecutionFailure", "_parse_proxmox_upid", "ip_address", "get_vmconfig", "SaltCloudSystemExit", "get_vm_status", "wait_for_created", "get_dependencies", "_authenticate", "ip_network", "str", "_dictionary_to_stringlist", "sorted", "_stringlist_to_dictionary", "_get_next_vmid", "isinstance", "_lookup_proxmox_task", "SaltCloudExecutionTimeout", "repr", "dict", "_reconfigure_clone", "gethostbyname", "ignore_cidr", "stop", "IP", "_get_vm_by_id", "next", "preferred_ip", "list_nodes_full", "create_node", "start", "avail_locations", "set_vm_status", "query", "len", "set", "_get_properties"], "class_names": [], "class_method_calls": ["log.error", "response.json", "log.debug", "re.DOTALL", "log.info", "ips.append", "config.is_provider_configured", "item.strip", "requests.post", "log.warning", "pprint.pformat", "logging.getLogger", "re.MULTILINE", "response.text", "query_path.format", "vm_.get", "re_filter.findall", "urllib.parse", "response.raise_for_status", "logging.DEBUG", "input_string.split", "requests.put", "socket.AF_INET6", "node.split", "time.sleep", "requests.exceptions", "private_ips.append", "socket.AF_INET", "socket.inet_pton", "requests.delete", "interface.get", "if_addr.get", "input_dict.keys", "parameters.add", "time.time", "config.check_driver_dependencies", "re.match", "salt.utils", "config.is_profile_configured", "re.compile", "__opts__.get", "new_setting.update", "path.split", "returned_data.text", "requests.get", "exc.response", "config.get_cloud_config_value", "numerical.group", "public_ips.append", "__active_provider_name__.value"]}, "pyrax.py": {"libraries": ["salt.utils.openstack.pyrax", "salt.utils.data", "salt.config"], "function_names": ["get_conn", "get_dependencies", "queues_delete", "queues_show", "get_configured_provider", "_get_active_provider_name", "queues_exists", "queues_create", "__virtual__"], "function_calls": ["get_conn", "get_dependencies", "conn", "get_configured_provider", "_get_active_provider_name", "getattr"], "class_names": [], "class_method_calls": ["vm_.get", "vm_.copy", "conn.create", "conn.show", "conn.exists", "suop.HAS_PYRAX", "config.check_driver_dependencies", "salt.utils", "conn.delete", "__active_provider_name__.value", "config.is_provider_configured"]}, "qingcloud.py": {"libraries": ["salt.exceptions.SaltCloudSystemExit", "base64", "time", "salt.utils.json", "requests", "hashlib.sha256", "salt.exceptions.SaltCloudExecutionTimeout", "hmac", "salt.config", "salt.exceptions.SaltCloudNotFound", "logging", "pprint", "salt.utils.data", "salt.exceptions.SaltCloudExecutionFailure", "salt.utils.cloud", "urllib.parse"], "function_names": ["_get_image", "destroy", "get_configured_provider", "_get_active_provider_name", "list_nodes", "show_instance", "script", "create", "_show_normalized_node", "avail_sizes", "_get_size", "get_dependencies", "_compute_signature", "_get_location", "_query_node_data", "list_nodes_select", "list_nodes_min", "__virtual__", "_get_specified_zone", "reboot", "show_image", "stop", "list_nodes_full", "start", "avail_locations", "query", "avail_images"], "function_calls": ["range", "_get_image", "destroy", "get_configured_provider", "list", "_get_active_provider_name", "int", "show_instance", "_show_normalized_node", "avail_sizes", "SaltCloudSystemExit", "_get_size", "get_dependencies", "_compute_signature", "_get_location", "str", "sorted", "isinstance", "_get_specified_zone", "SaltCloudNotFound", "list_nodes_full", "avail_locations", "query", "avail_images", "len"], "class_names": [], "class_method_calls": ["h.update", "h.digest", "log.debug", "node.update", "time.strftime", "result.get", "log.info", "config.is_provider_configured", "urllib.parse", "pprint.pformat", "logging.getLogger", "time.gmtime", "images.split", "private_ips.append", "full_node.get", "pairs.append", "method.upper", "kwargs.get", "hmac.new", "nodes.items", "config.check_driver_dependencies", "params.items", "salt.utils", "data.get", "config.is_profile_configured", "request.url", "request.text", "request.status_code", "base64.b64encode", "provider.split", "requests.get", "config.get_cloud_config_value", "full_node.update", "vxnet.get", "__active_provider_name__.value", "parameters.keys"]}, "saltify.py": {"libraries": ["smbprotocol.exceptions.InternalError", "salt._compat.ipaddress", "salt.exceptions.SaltCloudSystemExit", "requests.exceptions.ConnectionError", "time", "requests.exceptions.ConnectTimeout", "salt.client", "requests.exceptions.ReadTimeout", "requests.exceptions.RetryError", "requests.exceptions.SSLError", "winrm.exceptions.WinRMTransportError", "requests.exceptions.ProxyError", "salt.config", "logging", "requests.exceptions.InvalidSchema", "salt.exceptions.SaltCloudException", "salt.utils.cloud"], "function_names": ["avail_sizes", "destroy", "list_nodes_full", "_build_required_items", "get_configured_provider", "reboot", "_get_active_provider_name", "avail_locations", "list_nodes", "_verify", "list_nodes_select", "avail_images", "show_instance", "_list_nodes_full", "create", "__virtual__"], "function_calls": ["SaltCloudSystemExit", "list_nodes_full", "_build_required_items", "get_configured_provider", "_get_active_provider_name", "_verify", "SaltCloudException", "_list_nodes_full", "isinstance"], "class_names": [], "class_method_calls": ["local.cmd", "log.error", "log.debug", "ret.update", "log.info", "config.is_provider_configured", "ret.items", "logging.getLogger", "vm_.get", "time.sleep", "private_ips.append", "ip_.is_private", "ip_.is_loopback", "nodes.items", "salt.utils", "vm_.update", "salt.client", "ipaddress.ip_address", "config.get_cloud_config_value", "public_ips.append", "__active_provider_name__.value"]}, "scaleway.py": {"libraries": ["os", "salt.exceptions.SaltCloudSystemExit", "time", "salt.utils.json", "salt.exceptions.SaltCloudConfigError", "salt.exceptions.SaltCloudExecutionTimeout", "salt.config", "salt.exceptions.SaltCloudNotFound", "logging", "pprint", "salt.exceptions.SaltCloudExecutionFailure", "salt.utils.cloud"], "function_names": ["destroy", "list_nodes_full", "create_node", "get_configured_provider", "get_image", "_get_active_provider_name", "list_nodes", "query", "__query_node_data", "list_nodes_select", "avail_images", "show_instance", "script", "create", "_get_node", "__virtual__"], "function_calls": ["show_instance", "SaltCloudNotFound", "SaltCloudSystemExit", "SaltCloudConfigError", "range", "destroy", "list_nodes_full", "create_node", "get_configured_provider", "get_image", "str", "_get_active_provider_name", "list", "query", "avail_images", "reversed", "isinstance", "_get_node"], "class_names": [], "class_method_calls": ["log.error", "log.debug", "ret.update", "log.info", "os.path", "config.is_provider_configured", "pprint.pformat", "logging.getLogger", "time.sleep", "node.get", "salt.utils", "data.get", "config.is_profile_configured", "__opts__.get", "request.text", "request.status_code", "__active_provider_name__.value", "config.get_cloud_config_value", "logging.DEBUG"]}, "softlayer.py": {"libraries": ["salt.exceptions.SaltCloudSystemExit", "time", "salt.config", "SoftLayer", "logging", "salt.utils.cloud"], "function_names": ["destroy", "get_configured_provider", "_get_active_provider_name", "list_nodes", "show_instance", "script", "list_vlans", "create", "avail_sizes", "get_dependencies", "get_credentials", "list_nodes_select", "list_custom_images", "__virtual__", "get_location", "wait_for_ip", "get_conn", "list_nodes_full", "avail_locations", "avail_images"], "function_calls": ["get_conn", "SaltCloudSystemExit", "get_dependencies", "list_nodes_full", "get_location", "get_configured_provider", "bool", "list", "str", "_get_active_provider_name", "int", "show_instance", "isinstance"], "class_names": [], "class_method_calls": ["log.error", "conn.createObject", "ret.update", "log.info", "config.is_provider_configured", "log.warning", "logging.getLogger", "vm_.get", "pass_conn.getVirtualGuests", "logging.DEBUG", "size.strip", "time.sleep", "kwargs.get", "conn.deleteObject", "config.check_driver_dependencies", "salt.utils", "config.is_profile_configured", "kwargs.update", "__opts__.get", "disks.split", "config.get_cloud_config_value", "conn.getNetworkVlans", "conn.getCreateObjectOptions", "__active_provider_name__.value", "SoftLayer.Client", "conn.getVirtualGuests", "conn.getBlockDeviceTemplateGroups"]}, "softlayer_hw.py": {"libraries": ["salt.exceptions.SaltCloudSystemExit", "time", "salt.config", "SoftLayer", "logging", "decimal", "salt.utils.cloud"], "function_names": ["destroy", "get_configured_provider", "_get_active_provider_name", "list_nodes", "show_instance", "script", "list_vlans", "create", "avail_sizes", "get_dependencies", "list_nodes_select", "show_all_categories", "show_all_prices", "__virtual__", "show_pricing", "get_location", "wait_for_ip", "get_conn", "list_nodes_full", "avail_locations", "avail_images", "get_passwd"], "function_calls": ["get_conn", "SaltCloudSystemExit", "get_dependencies", "list_nodes_full", "get_location", "get_configured_provider", "list", "_get_active_provider_name", "len", "show_instance"], "class_names": [], "class_method_calls": ["log.error", "ret.update", "conn.getHardware", "log.info", "config.is_provider_configured", "logging.getLogger", "conn.getCategories", "conn.getObject", "vm_.get", "pass_conn.getVirtualGuests", "conn.getLocations", "logging.DEBUG", "price.get", "time.sleep", "location.get", "kwargs.get", "decimal.Decimal", "conn.placeOrder", "config.check_driver_dependencies", "conn.getAvailableLocations", "salt.utils", "config.is_profile_configured", "__opts__.get", "categories.append", "provider.split", "conn.createCancelServerTicket", "config.get_cloud_config_value", "conn.getNetworkVlans", "profile.get", "__active_provider_name__.value", "SoftLayer.Client"]}, "tencentcloud.py": {"libraries": ["tencentcloud.cvm.v20170312.models", "salt.exceptions.SaltCloudSystemExit", "tencentcloud.common.profile.client_profile.ClientProfile", "time", "salt.utils.json", "tencentcloud.vpc.v20170312.vpc_client", "salt.exceptions.SaltCloudExecutionTimeout", "tencentcloud.vpc.v20170312.models", "salt.config", "tencentcloud.common.credential", "salt.exceptions.SaltCloudNotFound", "logging", "pprint", "salt.utils.data", "salt.exceptions.SaltCloudExecutionFailure", "salt.utils.cloud", "tencentcloud.cvm.v20170312.cvm_client"], "function_names": ["destroy", "show_disk", "__get_securitygroups", "get_configured_provider", "_get_active_provider_name", "list_nodes", "_get_images", "show_instance", "script", "create", "_get_node", "avail_sizes", "_get_nodes", "get_dependencies", "list_nodes_select", "__get_size", "list_custom_images", "__query_node_data", "list_nodes_min", "__virtual__", "reboot", "list_availability_zones", "__get_image", "__get_location", "show_image", "stop", "get_provider_client", "__get_availability_zone", "list_nodes_full", "list_securitygroups", "start", "avail_locations", "avail_images"], "function_calls": ["destroy", "__get_securitygroups", "get_configured_provider", "list", "_get_active_provider_name", "_get_images", "show_instance", "_get_node", "avail_sizes", "_get_nodes", "vars", "SaltCloudSystemExit", "get_dependencies", "str", "__get_size", "isinstance", "ClientProfile", "list_availability_zones", "__get_image", "__get_location", "get_provider_client", "__get_availability_zone", "SaltCloudNotFound", "list_nodes_full", "list_securitygroups", "enumerate", "avail_images", "len"], "class_names": [], "class_method_calls": ["resp.ZoneSet", "resp.RegionSet", "req.HostName", "node.InstanceId", "image.Architecture", "cvm_models.RebootInstancesRequest", "node.SystemDisk", "logging.getLogger", "sg.CreatedTime", "disk.DiskSize", "client.RunInstances", "req.Limit", "cvm_models.TerminateInstancesRequest", "typeConfig.Zone", "region.RegionName", "sg.IsDefault", "client.DescribeRegions", "cvm_models.DescribeInstanceTypeConfigsRequest", "sg.SecurityGroupId", "image.ImageSize", "typeConfig.CPU", "cvm_models.DescribeInstancesRequest", "cpf.language", "config.check_driver_dependencies", "config.is_profile_configured", "credential.Credential", "client.StopInstances", "typeConfig.InstanceFamily", "sg.SecurityGroupDesc", "client.DescribeInstances", "req.InstanceChargePrepaid", "client.RebootInstances", "image.ImageType", "typeConfig.Memory", "pprint.pformat", "client.DescribeZones", "vm_.get", "cvm_models.StopInstancesRequest", "resp.InstanceSet", "region.RegionState", "resp.TotalCount", "vpc_models.DescribeSecurityGroupsRequest", "req.InstanceChargeType", "time.sleep", "node.DataDisks", "cvm_models.StartInstancesRequest", "image.ImageId", "disk.DiskType", "provider.get", "req.Offset", "client.TerminateInstances", "req.InstanceType", "req.ImageIds", "client.DescribeImages", "region.Region", "client.StartInstances", "zone.Zone", "logging.DEBUG", "req.ForceStop", "disk.DeleteWithInstance", "log.error", "config.is_provider_configured", "disk.DiskId", "sg.ProjectId", "instance.PrivateIpAddresses", "req.ImageId", "req.InstanceIds", "req.SystemDisk", "vpc_client.VpcClient", "resp.ImageSet", "typeConfig.InstanceType", "cvm_models.RunInstancesRequest", "provider.split", "config.get_cloud_config_value", "typeConfig.GPU", "req.InternetAccessible", "cvm_client.CvmClient", "instance.InstanceType", "req.VirtualPrivateCloud", "client.DescribeSecurityGroups", "resp.SecurityGroupSet", "log.debug", "ret.update", "cvm_models.DescribeRegionsRequest", "image.ImageName", "sg.SecurityGroupName", "instance.PublicIpAddresses", "image.ImageSource", "instance.InstanceId", "cvm_models.DescribeImagesRequest", "req.Filters", "zone.ZoneState", "req.InstanceName", "image.ImageState", "client.DescribeInstanceTypeConfigs", "cvm_models.DescribeZonesRequest", "disk.SnapshotId", "image.Platform", "ret.append", "salt.utils", "zone.ZoneName", "req.SecurityGroupIds", "req.Placement", "resp.InstanceTypeConfigSet", "__opts__.get", "instance.InstanceState", "instance.InstanceName", "req.LoginSettings", "instance.ImageId", "__active_provider_name__.value", "resp.InstanceIdSet"]}, "vagrant.py": {"libraries": ["fnmatch", "salt.exceptions.SaltInvocationError", "salt.utils.args", "salt.exceptions.CommandExecutionError"], "function_names": ["initialized", "stopped", "paused", "running", "powered_off", "destroyed", "_find_init_change", "_vagrant_call", "rebooted", "__virtual__"], "function_calls": ["str", "isinstance", "_vagrant_call", "_find_init_change"], "class_names": [], "class_method_calls": ["kwargs.update", "kwargs.pop", "kwargs.items", "changed_nodes.append", "fnmatch.filter", "ignored_nodes.append", "salt.utils", "kwargs.get"]}, "virtualbox.py": {"libraries": ["salt.utils.virtualbox", "salt.utils.json", "tests.support.unit.TestCase", "pytest", "logging", "tests.support.case.ShellCase", "tests.integration.cloud.helpers"], "function_names": ["run_cloud_action", "assertMachineExists", "run_cloud", "assertMachineDoesNotExist", "setUp", "run_cloud_function"], "function_calls": ["dict", "isinstance", "len"], "class_names": ["VirtualboxCloudTestCase", "VirtualboxTestCase"], "class_method_calls": ["logging.getLogger", "log.debug", "self.assertRaisesRegex", "pytest.mark", "self.vbox", "e.message", "kw_function_args.items", "tests.integration", "self.run_script", "self.run_cloud", "salt.utils", "output.get", "self.fail", "output.pop"]}, "vmware.py": {"libraries": ["pyVmomi.VmomiSupport", "gssapi", "ssl", "vmware.vapi.vsphere.client.create_vsphere_client", "logging", "pyVim.connect.GetSi", "salt.utils.path", "base64", "salt.utils.stringutils", "pyVmomi.vmodl", "pyVim.connect.SmartConnect", "http.client.BadStatusLine", "salt.modules.cmdmod", "pyVim.connect.SoapStubAdapter", "pyVim.connect.GetStub", "time", "pyVmomi.vim", "com.vmware.vapi.std.errors_client.Unauthenticated", "errno", "salt.exceptions", "atexit", "pyVim.connect.Disconnect", "salt.utils.platform"], "function_names": ["wait_for_task", "_get_service_instance", "create_vm", "get_new_service_instance_stub", "list_datacenters", "get_managed_object_name", "get_placement", "get_mors_with_properties", "get_datacenter", "esxcli", "_check_disks_in_diskgroup", "list_hosts", "get_mor_using_container_view", "get_scsi_address_to_lun_map", "assign_license", "get_dvss", "list_portgroups", "list_folders", "get_license_assignment_manager", "get_cluster", "get_datastore_files", "get_hosts", "list_resourcepools", "rename_datastore", "_get_scsi_address_to_lun_key_map", "convert_to_kb", "update_dvportgroup", "get_properties_of_managed_object", "create_cluster", "list_clusters", "configure_host_cache", "get_hardware_grains", "delete_vm", "get_storage_system", "get_network_adapter_object_type", "get_license_manager", "list_networks", "unregister_vm", "get_resource_pools", "get_content", "_get_dvs_uplink_portgroup", "get_root_folder", "update_dvs", "erase_disk_partitions", "get_dvportgroups", "_get_vnics", "remove_datastore", "disconnect", "get_service_info", "_get_vnic_manager", "remove_dvportgroup", "get_uplink_dvportgroup", "get_customizationspec_ref", "list_objects", "get_mor_by_property", "get_gssapi_token", "get_service_instance_from_managed_object", "get_disk_partition_info", "set_dvs_network_resource_management_enabled", "_get_dvs", "_get_dvs_portgroup", "create_datacenter", "list_datastore_clusters", "get_datacenters", "is_connection_to_a_vcenter", "get_network_folder", "create_dvportgroup", "get_licenses", "get_all_luns", "list_dvs", "get_vsphere_client", "list_datastores", "power_cycle_vm", "get_vm_by_property", "_get_pnics", "__virtual__", "update_cluster", "list_vms", "get_host_cache", "register_vm", "add_license", "_get_partition_info", "create_dvs", "create_vmfs_datastore", "get_service_instance", "get_assigned_licenses", "get_datastores", "get_disks", "update_vm", "get_network_adapter_type", "get_folder", "get_inventory", "get_diskgroups", "get_host_datastore_system", "get_networks", "list_vapps", "_get_new_computed_partition_spec"], "function_calls": ["get_content", "type", "get_license_assignment_manager", "get_cluster", "get_datacenters", "wait_for_task", "_get_service_instance", "get_hosts", "GetSi", "_get_scsi_address_to_lun_key_map", "int", "get_root_folder", "get_network_folder", "list_dvs", "get_all_luns", "hasattr", "get_properties_of_managed_object", "GetStub", "str", "get_managed_object_name", "get_vm_by_property", "sorted", "SmartConnect", "isinstance", "SoapStubAdapter", "get_mors_with_properties", "_get_partition_info", "get_storage_system", "list_objects", "get_gssapi_token", "get_datacenter", "get_datastores", "ValueError", "Disconnect", "get_service_instance_from_managed_object", "create_vsphere_client", "get_license_manager", "ImportError", "get_inventory", "len", "get_host_datastore_system", "get_resource_pools", "_get_new_computed_partition_spec"], "class_names": [], "class_method_calls": ["storage_system.ComputeDiskPartitionInfo", "task.info", "host_reference.configManager", "license_manager.licenses", "ds_props.get", "object_list.append", "computed_partition_info.layout", "logging.getLogger", "task_info.result", "vsan_storage_info.diskMapping", "dm.ssd", "vm_ref.Destroy_Task", "t.key", "a.assignedLicense", "stub.host", "vmodl.query", "filtered_hosts.append", "context.check_hostname", "vim.HostCacheConfigurationSpec", "vim.HostScsiDiskPartition", "l.lun", "l.path", "disk.key", "_pnic.mac", "portgroup_ref.ReconfigureDVPortgroup_Task", "vim.dvs", "vim.vm", "entity_ref._moId", "license_manager.AddLicense", "_data.identifierValue", "task_info.state", "exc.message", "datacenter.vmFolder", "vim.DistributedVirtualSwitch", "root_folder.CreateDatacenter", "vim.VirtualApp", "reference.__class__", "disk_group.ssd", "obj.get", "exc.msg", "files.append", "storage_system.UpdateDiskPartitions", "d.ssd", "folder_object.CreateVM_Task", "host_reference.config", "vim.HostVmfsVolume", "prop.name", "log.exception", "mo_ref._stub", "context.verify_mode", "license_assignment_manager.QueryAssignedLicenses", "netw_folder_ref.CreateDVS_Task", "partition_info.layout", "target_disk.uuid", "disk_group.nonSsd", "log.info", "device_info.multipathInfo", "vmodl.RuntimeFault", "inventory.rootFolder", "ssl.CERT_NONE", "ctx.established", "datastore_ref.RenameDatastore", "partition_info.deviceName", "d.key", "mo_ref.name", "service_instance.CurrentTime", "time.sleep", "vim.DVSCreateSpec", "host_ds_system.RemoveDatastore", "e.diskName", "dvs.portgroup", "vim.VirtualMachine", "view.view", "host_ref.config", "vim.HostDiskPartitionSpec", "ssl.PROTOCOL_TLSv1", "partition_info.spec", "si.content", "vim.HostScsiDisk", "free_partition.end", "time.time", "dvs_ref.EnableNetworkResourceManagement", "dvs_create_spec.configSpec", "vim.ClusterComputeResource", "label.key", "_vnic.spec", "datobj.browser", "salt.modules", "free_partition.start", "VmomiSupport.GetRequestContext", "obj.obj", "_data.identifierType", "p.name", "p.partition", "obj.propSet", "log.error", "vim.DistributedVirtualPortgroup", "vsan_host_config.storageInfo", "host_cache_manager.ConfigureHostCache_Task", "item.name", "exc.errno", "vim.ResourcePool", "vim.KeyValue", "dvs_ref.CreateDVPortgroup_Task", "atexit.register", "vmodl.fault", "lun_key_by_scsi_addr.items", "task.__class__", "errno.EPIPE", "gssapi.C_NT_USER_NAME", "service_instance.content", "vim.Datastore", "log.trace", "portgroup.name", "vim.VMwareDVSConfigSpec", "vm_ref.ReconfigVM_Task", "dvs_ref.ReconfigureDvs_Task", "storage_system.storageDeviceInfo", "vm_ref.UnregisterVM", "stub.cookie", "vim.view", "vol.extent", "_vnic.device", "label.value", "disk.canonicalName", "device_info.scsiLun", "multipath_info.lun", "vim.HostStorageSystem", "obj_ref.Destroy", "salt.exceptions", "p.start", "selected_pools.append", "vim.HostCacheConfigurationManager", "portgroup_ref.Destroy_Task", "task_info.error", "datastore_names.extend", "free_partition.type", "vim.HostVmfsSpec", "l.canonicalName", "i.volume", "dc_ref.hostFolder", "vim.Network", "datobj.name", "vim.HostDiskPartitionInfoPartitionFormat", "ssl.SSLContext", "vim.HostDatastoreSystem", "vim.Folder", "p.end", "si._stub", "disk_ref.canonicalName", "log.debug", "virtual_machine.PowerOff", "container.view", "lun_ids_to_scsi_addr_map.items", "target_disk.devicePath", "service_instance.RetrieveContent", "service_instance._stub", "d.canonicalName", "inventory.viewManager", "exc.privilegeId", "new_stub.cookie", "vim.HostSystem", "datastore_ref.name", "vim.HostDiskPartitionLayout", "items.append", "ssl._create_unverified_context", "ssl.create_default_context", "lun_key_by_scsi_addr.update", "cluster_ref.ReconfigureComputeResource_Task", "props.get", "vim.VmfsDatastoreCreateSpec", "vol.name", "computed_partition_info.spec", "host_ref.configManager", "storage_system.RetrieveDiskPartitionInfo", "disk_datastores.append", "salt.utils", "_pnic.device", "license_assignment_manager.UpdateAssignedLicense", "gssapi.Name", "properties.append", "virtual_machine.PowerOn", "ctx.step", "prop.val", "spec.name", "base64.b64encode", "vim.fault", "vim.ServiceInstance", "exc.faultMessage", "vim.Datacenter", "vim.StoragePod", "unit.lower", "gssapi.InitContext", "p.type"]}, "vultrpy.py": {"libraries": ["salt.exceptions.SaltCloudSystemExit", "time", "salt.exceptions.SaltCloudConfigError", "salt.config", "logging", "pprint", "urllib.parse"], "function_names": ["list_scripts", "destroy", "get_configured_provider", "_get_active_provider_name", "list_nodes", "_lookup_vultrid", "wait_for_default_password", "show_instance", "create", "avail_sizes", "wait_for_status", "list_nodes_select", "avail_keys", "avail_scripts", "__virtual__", "list_keypairs", "list_firewall_groups", "_cache_provider_details", "stop", "wait_for_hostname", "list_nodes_full", "avail_firewall_groups", "start", "wait_for_server_state", "avail_locations", "avail_images", "show_keypair", "_query"], "function_calls": ["get_configured_provider", "list", "_get_active_provider_name", "int", "_lookup_vultrid", "show_instance", "avail_sizes", "SaltCloudSystemExit", "str", "avail_keys", "isinstance", "avail_scripts", "list_keypairs", "_cache_provider_details", "SaltCloudConfigError", "list_nodes_full", "avail_firewall_groups", "avail_locations", "avail_images", "_query"], "class_names": [], "class_method_calls": ["log.error", "log.debug", "ret.update", "result.get", "log.info", "config.is_provider_configured", "urllib.parse", "pprint.pformat", "logging.getLogger", "time.sleep", "ssh_key_ids.split", "locations.items", "main_ip.startswith", "sizes.items", "data.get", "__active_provider_name__.value", "images.items", "config.get_cloud_config_value", "logging.DEBUG"]}, "xen.py": {"libraries": ["XenAPI", "datetime.datetime", "salt.exceptions.SaltCloudSystemExit", "time", "salt.config", "logging", "salt.exceptions.SaltCloudException", "salt.utils.cloud"], "function_names": ["get_vm_ip", "destroy", "vdi_list", "_determine_storage_repo", "get_configured_provider", "unpause", "_get_active_provider_name", "list_nodes", "_run_async_task", "show_instance", "create", "avail_sizes", "host_list", "_get_vm", "get_pv_args", "list_nodes_select", "_get_pool", "template_list", "destroy_vm_vdis", "__virtual__", "pool_list", "_set_static_ip", "shutdown", "pif_list", "sr_list", "_get_sr", "reboot", "_get_dependencies", "_get_session", "_provision_vm", "set_vm_ip", "stop", "vbd_list", "destroy_template", "_copy_vm", "_deploy_salt_minion", "suspend", "pause", "list_nodes_full", "_determine_resource_pool", "start", "vif_list", "avail_locations", "_wait_for_ip", "_clone_vm", "resume", "avail_images", "set_pv_args"], "function_calls": ["get_vm_ip", "type", "_determine_storage_repo", "get_configured_provider", "_get_active_provider_name", "SaltCloudException", "_run_async_task", "show_instance", "SaltCloudSystemExit", "_get_vm", "str", "round", "_get_pool", "template_list", "destroy_vm_vdis", "pool_list", "_set_static_ip", "shutdown", "_get_sr", "_get_dependencies", "_get_session", "_provision_vm", "set_vm_ip", "_copy_vm", "_deploy_salt_minion", "list_nodes_full", "_determine_resource_pool", "start", "_wait_for_ip", "_clone_vm", "len"], "class_names": [], "class_method_calls": ["log.error", "XenAPI.Failure", "log.debug", "url.split", "ret.update", "log.info", "config.is_provider_configured", "session.xenapi", "log.warning", "logging.getLogger", "vm_.get", "cidr.split", "time.sleep", "pool_record.get", "datetime.now", "vm_.keys", "salt.cache", "kwargs.get", "vm_cfg.keys", "config.check_driver_dependencies", "salt.utils", "ex.__dict__", "data.get", "net.keys", "__opts__.get", "XenAPI.Session", "delta.seconds", "provider.split", "status.startswith", "config.get_cloud_config_value", "data.update", "__active_provider_name__.value"]}, "exceptions.py": {"libraries": ["salt.exceptions"], "function_names": ["__init__"], "function_calls": ["super"], "class_names": ["VaultLeaseExpired", "VaultPreconditionFailedError", "VaultUnsupportedOperationError", "VaultServerError", "VaultInvocationError", "VaultUnwrapException", "VaultAuthExpired", "VaultPermissionDeniedError", "VaultConfigExpired", "VaultUnavailableError", "VaultNotFoundError", "VaultException"], "class_method_calls": ["salt.exceptions", "self.event_data"]}, "libcloudfuncs.py": {"libraries": ["libcloud.compute.providers.get_driver", "os", "libcloud.compute.deployment.ScriptDeployment", "salt.exceptions.SaltCloudSystemExit", "libcloud.compute.types.Provider", "salt.client", "libcloud", "salt.utils.event", "libcloud.compute.deployment.MultiStepDeployment", "salt.config", "salt.exceptions.SaltCloudNotFound", "logging", "libcloud.compute.types.NodeState", "salt.utils.data", "salt.utils.cloud"], "function_names": ["avail_sizes", "conn_has_method", "get_size", "get_node", "destroy", "check_libcloud_version", "get_location", "list_nodes_full", "reboot", "get_image", "avail_locations", "list_nodes", "list_nodes_select", "avail_images", "show_instance", "script"], "function_calls": ["SaltCloudNotFound", "SaltCloudSystemExit", "get_conn", "RuntimeError", "get_node", "list_nodes_full", "ImportError", "get_configured_provider", "tuple", "str", "int", "dir", "zip", "getattr", "isinstance", "ScriptDeployment"], "class_names": [], "class_method_calls": ["log.error", "attr.startswith", "conn.list_locations", "log.info", "os.path", "node.__dict__", "size.id", "node.state", "logging.getLogger", "conn.list_nodes", "client.cmd", "conn.list_images", "conn.reboot_node", "conn.list_sizes", "libcloud.__version__", "node.public_ips", "__active_provider_name__.split", "node.id", "img.id", "conn.destroy_node", "node.size", "node.image", "img.name", "size.name", "node.extra", "salt.utils", "__opts__.get", "node.private_ips", "salt.client", "mopts_.update", "salt.config", "node.name"]}, "common.py": {"libraries": ["salt.utils.schema.OneOfItem", "salt.utils.schema.ArrayItem", "salt.utils.schema.Schema", "salt.utils.schema.StringItem"], "function_names": ["__get_description__", "__init__", "__validate_attributes__"], "function_calls": ["StringItem", "super", "ArrayItem", "OneOfItem"], "class_names": ["MasterDefaultInclude", "DefaultIncludeConfig", "MinionDefaultInclude", "IncludeConfig"], "class_method_calls": ["self.__doc__", "DefaultIncludeConfig.__doc__", "self.__confd_directory__", "self.__target__"]}, "esxcluster.py": {"libraries": ["sys", "salt.exceptions", "pyVmomi.VmomiSupport", "salt.utils.dictdiffer.recursive_diff", "salt.utils.listdiffer.list_diff", "salt.config.schemas.esxcluster.LicenseSchema", "logging", "salt.utils.dictupdate", "salt.config.schemas.esxcluster.ESXClusterConfigSchema", "jsonschema", "functools.wraps"], "function_names": ["vsan_datastore_configured", "mod_init", "_get_vsan_datastore", "licenses_configured", "cluster_configured", "_deprecation_message", "wrapped", "__virtual__"], "function_calls": ["wraps", "_get_vsan_datastore", "list_diff", "str", "recursive_diff", "function"], "class_names": [], "class_method_calls": ["log.error", "changes.update", "jsonschema.validate", "diff.changes_str", "ret.update", "ldiff.old_values", "log.info", "current.get", "diff.diffs", "logging.getLogger", "ldiff.changes_str2", "licenses.items", "log.trace", "ESXClusterConfigSchema.serialize", "diff.new_values", "diff.old_values", "comments.append", "VmomiSupport.versionMap", "salt.utils", "LicenseSchema.serialize", "ex.err_msg", "sys.maxsize", "salt.exceptions", "dictupdate.update", "exc.strerror", "cluster_dict.get", "jsonschema.exceptions", "ldiff.new_values", "sys.version_info", "ldiff.diffs"]}, "esxdatacenter.py": {"libraries": ["salt.exceptions", "functools.wraps", "logging"], "function_names": ["mod_init", "datacenter_configured", "_deprecation_message", "wrapped", "__virtual__"], "function_calls": ["wraps", "function", "str"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "salt.exceptions", "log.debug", "comments.append", "ret.update", "log.info", "salt.utils"]}, "esxi.py": {"libraries": ["sys", "pyVmomi.VmomiSupport", "salt.utils.decorators.depends", "salt.exceptions.VMwareSaltError", "salt.config.schemas.esxi.HostCacheSchema", "salt.exceptions.VMwareApiError", "salt.exceptions.InvalidConfigError", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.exceptions.VMwareObjectRetrievalError", "re", "salt.config.schemas.esxi.DiskGroupsDiskScsiAddressSchema", "logging", "jsonschema", "functools.wraps", "salt.exceptions.ArgumentValueError"], "function_names": ["_strip_key", "vmotion_configured", "syslog_configured", "ntp_configured", "ssh_configured", "coredump_configured", "diskgroups_configured", "_deprecation_message", "vsan_configured", "_lookup_syslog_config", "wrapped", "password_present", "host_cache_configured", "__virtual__"], "function_calls": ["wraps", "_strip_key", "VMwareApiError", "ArgumentValueError", "VMwareObjectRetrievalError", "InvalidConfigError", "ImportError", "enumerate", "str", "depends", "int", "_lookup_syslog_config", "len", "set", "isinstance", "function", "VMwareSaltError"], "class_names": [], "class_method_calls": ["log.error", "changes.update", "jsonschema.validate", "removed_capacity_disk_displays.append", "log.debug", "key_string.replace", "cache_disk_to_existing_diskgroup_map.get", "ret.update", "removed_capacity_disk_ids.append", "log.info", "current_config.get", "val.get", "syslog_configs.items", "lookup.get", "logging.getLogger", "current_firewall.get", "proxy_details.get", "key_string.strip", "ssh_running.get", "current_vsan_enabled.get", "host_cache.get", "bad_scsi_addrs.append", "DiskGroupsDiskScsiAddressSchema.serialize", "reset.items", "log.trace", "ntp_running.get", "m.group", "current_ssh_key.get", "capacity_disk_displays.append", "response.get", "comments.append", "VmomiSupport.versionMap", "HostCacheSchema.serialize", "re.match", "current_service_policy.get", "salt.utils", "added_capacity_disk_displays.append", "capacity_disk_ids.append", "added_capacity_disk_ids.append", "disable.get", "enable.get", "line.startswith", "current_vmotion_enabled.get", "current_eligible_disks.get", "jsonschema.exceptions", "sys.version_info", "enabled.get"]}, "esxvm.py": {"libraries": ["sys", "salt.exceptions", "pyVmomi.VmomiSupport", "salt.config.schemas.esxvm.ESXVirtualMachineConfigSchema", "logging", "jsonschema", "functools.wraps"], "function_names": ["vm_created", "vm_updated", "vm_cloned", "vm_registered", "vm_configured", "_deprecation_message", "wrapped", "__virtual__"], "function_calls": ["wraps", "vm_created", "vm_updated", "vm_cloned", "str", "vm_registered", "function"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.exceptions", "jsonschema.validate", "changes.update", "log.error", "ESXVirtualMachineConfigSchema.serialize", "vm_file.file", "difference.changes_str", "VmomiSupport.versionMap", "result.update", "vm_file.folderPath", "jsonschema.exceptions", "salt.utils", "diffs.items", "sys.version_info", "log.trace"]}, "minion.py": {"libraries": ["os", "threading", "salt.utils.process", "salt.utils.files", "salt.utils.platform", "salt.payload", "logging"], "function_names": ["_read_proc_file", "running", "_check_cmdline", "cache_jobs"], "function_calls": ["_read_proc_file", "isinstance", "_check_cmdline"], "class_names": [], "class_method_calls": ["log.debug", "os.listdir", "threading.enumerate", "os.path", "salt.payload", "os.getpid", "log.warning", "logging.getLogger", "opts.get", "fp_.close", "fp_.read", "os.makedirs", "fp_.write", "ret.append", "salt.utils", "data.get", "os.remove", "threading.current_thread", "x.name"]}, "vcenter.py": {"libraries": ["salt.exceptions", "os", "logging", "salt.config.schemas.vcenter.VCenterProxySchema", "jsonschema", "salt.utils.dictupdate.merge"], "function_names": ["shutdown", "find_credentials", "get_details", "init", "ping", "__virtual__"], "function_calls": ["find_credentials", "merge"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.exceptions", "jsonschema.validate", "proxy_conf.get", "opts.get", "log.critical", "log.debug", "VCenterProxySchema.serialize", "log.info", "jsonschema.exceptions", "__pillar__.get", "os.getpid", "log.trace"]}, "crypt.py": {"libraries": ["os", "salt.loader", "hashlib", "salt.utils.files", "salt.exceptions.SaltInvocationError", "Cryptodome.Random", "logging", "Crypto.Random", "M2Crypto"], "function_names": ["pem_finger", "reinit_crypto", "decrypt"], "function_calls": ["SaltInvocationError", "enumerate", "TypeError", "rend_func", "getattr", "isinstance"], "class_names": [], "class_method_calls": ["finger.rstrip", "logging.getLogger", "log.error", "salt.loader", "fp_.readlines", "key.encode", "os.path", "Random.atfork", "salt.utils", "key.replace", "renderers.get", "x.strip"]}, "masterapi.py": {"libraries": ["fnmatch", "salt.wheel", "salt.runner", "salt.utils.user", "salt.state", "salt.pillar.git_pillar", "salt.key", "salt.utils.files", "salt.payload", "logging", "salt.utils.job", "salt.utils.path", "salt.utils.atomicfile", "salt.utils.stringutils", "salt.utils.event", "salt.acl", "salt.utils.mine", "salt.utils.dictupdate", "salt.pillar", "salt.utils.gzip_util", "salt.cache", "pwd", "os", "time", "salt.utils.verify", "salt.utils.jid", "salt.minion", "re", "salt.utils.gitfs", "salt.exceptions", "salt.utils.minions", "salt.crypt", "salt.client", "salt.fileserver", "salt.auth", "salt.defaults.DEFAULT_TARGET_DELIM", "salt.utils.platform", "salt.utils.args", "stat"], "function_names": ["pub_ret", "check_autosign_grains", "_minion_event", "destroy", "check_permissions", "__setup_fileserver", "_syndic_return", "fileserver_update", "_return", "get_token", "check_autoreject", "access_keys", "publish", "check_autosign", "_mine_get", "_pillar", "check_autosign_dir", "minion_runner", "_master_opts", "__verify_minion_publish", "_mine", "mk_token", "_master_tops", "minion_publish", "clean_old_jobs", "mk_key", "check_signing_file", "clean_fsbackend", "_mine_flush", "init_git_pillar", "minion_pub", "_file_recv", "revoke_auth", "wheel", "clean_pub_auth", "_prep_auth_info", "__init__", "runner", "clean_expired_tokens", "_mine_delete"], "function_calls": ["any", "list", "str", "int", "mk_key", "len", "set", "isinstance"], "class_names": ["LocalFuncs", "AutoKey", "RemoteFuncs"], "class_method_calls": ["load.pop", "perms.update", "salt.key", "self.mminion", "entry.strip", "loadauth.rm_token", "logging.getLogger", "self.event", "token_data.get", "pillar.compile_pillar", "exc.args", "match_type.lower", "arg.split", "acl_users.add", "publisher_acl.cmd_is_blacklisted", "perms.extend", "os.makedirs", "log.profile", "auth_check.get", "os.getuid", "self.check_signing_file", "self.signing_files", "fmode.st_gid", "load.get", "self.check_permissions", "salt.crypt", "self._file_hash", "user.pw_name", "mine_entry.get", "self.key", "runner_client.asynchronous", "log.exception", "log.critical", "loadauth.list_tokens", "self._file_list", "git_pillar.PER_REMOTE_OVERRIDES", "log.info", "self.ckminions", "self._dir_list", "stat.S_IWOTH", "log.warning", "self._file_envs", "fs_.envs", "line.strip", "salt.acl", "fs_.serve_file", "data.pop", "keyapi.delete_key", "checker.check_minions", "fp_.read", "mminion.returners", "fp_.write", "self.opts", "salt.minion", "time.time", "re.match", "stat.S_IWGRP", "runner.run", "self.tops", "publisher_acl.keys", "self.cache", "loadauth.get_tok", "os.W_OK", "salt.auth", "fmode.st_mode", "self._file_find", "os.chmod", "logging.DEBUG", "fp.read", "log.error", "self.__verify_minion_publish", "self.local", "minion_side_acl.get", "publisher_acl.user_is_blacklisted", "os.stat", "git_pillar.PER_REMOTE_ONLY", "fs_.file_list_emptydirs", "opts.get", "fileserver.update", "extra.get", "pwd.getpwnam", "salt.cache", "os.chown", "ret.setdefault", "fs_.file_hash", "exc.__class__", "salt.exceptions", "self.check_autosign_grains", "user.replace", "self.check_autosign_dir", "fs_.dir_list", "salt.fileserver", "line.startswith", "data.update", "self.wheel_", "opts.update", "fileserver.servers", "self._file_list_emptydirs", "salt.wheel", "os.walk", "salt.runner", "stat.S_IWUSR", "pwd.getpwall", "fs_.file_list", "self._prep_auth_info", "log.debug", "self.__setup_fileserver", "os.listdir", "stat.S_IRUSR", "fs_.symlink_list", "os.path", "self._serve_file", "os.access", "self._symlink_list", "ret.pop", "salt.pillar", "self._return", "fs_._find_file", "salt.loader", "fnmatch.filter", "ret.append", "arg_.append", "salt.utils", "normpath.replace", "os.unlink", "git_pillar.GLOBAL_ONLY", "salt.client", "fp_.seek", "os.remove", "functions_allowed.append", "self.loadauth"]}, "events.py": {"libraries": ["contextlib.contextmanager", "os", "time", "salt.utils.process.Process", "multiprocessing", "salt.utils.event", "salt.utils.process.clean_proc"], "function_names": ["__init__", "eventpublisher_process", "run", "eventsender_process"], "function_calls": ["super", "clean_proc", "EventSender", "Process"], "class_names": ["EventSender"], "class_method_calls": ["os.environ", "proc.start", "salt.transport", "me.fire_event", "self.tag", "ipc_publisher.publish_daemon", "ipc_publisher.publish_payload", "self.sock_dir", "time.sleep", "self.wait", "multiprocessing.Process", "os.path", "salt.utils", "self.data"]}, "exitcodes.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "docker_events.py": {"libraries": ["traceback", "salt.utils.json", "salt.utils.event", "docker.utils", "logging", "docker"], "function_names": ["fire", "start", "__virtual__"], "function_calls": ["fire_master", "fire"], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "docker.APIClient", "docker.Client", "client.events", "traceback.print_exc", "salt.utils", "event.decode"]}, "fluent.py": {"libraries": ["salt.utils.event", "fluent.sender", "fluent.event", "logging"], "function_names": ["start", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "event.Event", "event_bus.get_event_block", "sender.setup", "log.info", "salt.utils"]}, "http_logstash.py": {"libraries": ["fnmatch", "salt.utils.http", "salt.utils.json", "salt.utils.event"], "function_names": ["start", "_logstash"], "function_calls": ["isinstance", "_logstash"], "class_names": [], "class_method_calls": ["__opts__.get", "event_bus.get_event", "fnmatch.fnmatch", "salt.utils"]}, "ircbot.py": {"libraries": ["tornado.iostream", "base64", "ssl", "tornado.ioloop", "socket", "salt.utils.event", "re", "logging", "collections.namedtuple"], "function_names": ["_command_event", "_privmsg", "_command_ping", "on_closed", "_command_echo", "_allow_nick", "read_messages", "fire", "_event", "start", "_connect", "__init__", "join_channel", "_message", "on_connect", "_allow_host", "send_message"], "function_calls": ["any", "hasattr", "IRCClient", "PrivEvent", "Event", "getattr", "fire_master", "namedtuple", "len", "isinstance", "fire"], "class_names": ["IRCClient"], "class_method_calls": ["tornado.ioloop", "self.allow_nicks", "channel.startswith", "self.sasl", "log.debug", "event.channel", "event.nick", "self.password", "self._stream", "event.code", "self._allow_nick", "event.line", "search.group", "raw.rstrip", "self._message", "self._event", "logging.getLogger", "self.channels", "tornado.iostream", "ssl.CERT_NONE", "self._privmsg", "self.host", "logging.info", "self.ssl", "socket.AF_INET", "client.io_loop", "self.io_loop", "self.read_messages", "self._connect", "self.on_closed", "self.allow_hosts", "event.source", "self.send_message", "self.username", "re.match", "salt.utils", "line.encode", "socket.SOCK_STREAM", "self.join_channel", "self.disable_query", "socket.socket", "__opts__.get", "base64.b64encode", "self.on_connect", "self.char", "self.nick", "self._allow_host", "self.port"]}, "junos_syslog.py": {"libraries": ["pyparsing.nums", "pyparsing.StringEnd", "twisted.internet.threads", "pyparsing.Combine", "pyparsing.string", "twisted.internet.protocol.DatagramProtocol", "time", "pyparsing.Word", "pyparsing.delimitedList", "salt.utils.event", "pyparsing.alphas", "pyparsing.Regex", "pyparsing.Suppress", "twisted.internet.reactor", "re", "pyparsing.LineEnd", "logging", "pyparsing.Optional"], "function_names": ["send_event_to_salt", "parse", "start", "__init__", "parseData", "datagramReceived", "handle_error", "__virtual__"], "function_calls": ["Word", "Regex", "_Parser", "LineEnd", "Suppress", "range", "_SyslogServerFactory", "StringEnd", "delimitedList", "Exception", "Optional", "int", "str", "len", "Combine", "isinstance"], "class_names": ["DatagramProtocol", "_SyslogServerFactory", "_Parser"], "class_method_calls": ["log.error", "reactor.listenUDP", "self.obj", "log.debug", "self.__pattern_without_daemon", "err_msg.getErrorMessage", "time.strftime", "event.get_master_event", "log.info", "logging.getLogger", "reactor.run", "self.handle_error", "self.parseData", "d.addCallbacks", "self.__pattern", "self.options", "string.ascii_lowercase", "self.send_event_to_salt", "self.title", "re.match", "data.decode", "string.ascii_uppercase", "obj.group", "threads.deferToThread"]}, "libvirt_events.py": {"libraries": ["urllib.parse", "libvirt", "salt.utils.event", "logging"], "function_names": ["_salt_send_event", "_cleanup", "_domain_event_rtc_change_cb", "_callbacks_cleanup", "_domain_event_watchdog_cb", "_domain_event_balloon_change_cb", "_domain_event_lifecycle_cb", "_domain_event_graphics_cb", "_domain_event_agent_lifecycle_cb", "_domain_event_disk_change_cb", "_domain_event_io_error_cb", "_compute_subprefix", "_domain_event_pmwakeup_cb", "_get_libvirt_enum_string", "_domain_event_metadata_change_cb", "_domain_event_block_job_cb", "get_address", "_domain_event_tunable_cb", "_domain_event_job_completed_cb", "_domain_event_device_added_cb", "_domain_event_device_removed_cb", "_domain_event_device_removal_failed_cb", "__virtual__", "_domain_event_block_threshold_cb", "_pool_event_lifecycle_cb", "_nodedev_event_lifecycle_cb", "_salt_send_domain_event", "_secret_event_lifecycle_cb", "_network_event_lifecycle_cb", "_domain_event_pmsuspend_disk_cb", "_domain_event_tray_change_cb", "_append_callback_id", "_secret_event_value_changed_cb", "_domain_event_migration_iteration_cb", "_nodedev_event_update_cb", "_register_callback", "_domain_event_control_error_cb", "_domain_event_reboot_cb", "_pool_event_refresh_cb", "start", "_get_domain_event_detail", "_domain_event_pmsuspend_cb"], "function_calls": ["_salt_send_event", "_get_libvirt_enum_string", "_cleanup", "_register_callback", "_callbacks_cleanup", "get_address", "_append_callback_id", "register", "_salt_send_domain_event", "_get_domain_event_detail", "bool", "deregister", "len", "getattr", "globals", "_compute_subprefix", "hasattr"], "class_names": [], "class_method_calls": ["log.error", "callback_ids.items", "attr.startswith", "log.exception", "libvirt.virEventRunDefaultImpl", "conn.getURI", "log.debug", "domain.ID", "dev.name", "net.UUIDString", "register_name.replace", "cnx.close", "uri.scheme", "log.warning", "urllib.parse", "event_name.upper", "logging.getLogger", "attr.split", "libvirt.openReadOnly", "prefixes.count", "pool.name", "all_data.update", "domain.name", "net.name", "libvirt.virEventRegisterDefaultImpl", "pool.UUIDString", "domain.UUIDString", "cnx.getURI", "uri.netloc", "counts.items", "libvirt.__dict__", "uri_tag.append", "uri.path", "p.endswith", "salt.utils", "secret.UUIDString", "libvirt.getVersion", "__opts__.get", "candidate.lower", "data.update", "CALLBACK_DEFS.items"]}, "logentries.py": {"libraries": ["ssl", "time", "random", "salt.utils.json", "socket", "salt.utils.event", "uuid", "logging", "certifi"], "function_names": ["start", "event_bus_context", "__init__", "open_connection", "close_connection", "reopen_connection", "put", "__virtual__"], "function_calls": ["event_bus_context", "SocketAppender", "getattr"], "class_names": ["PlainTextSocketAppender", "TLSSocketAppender"], "class_method_calls": ["self.close_connection", "log.debug", "self.reopen_connection", "log.warning", "logging.getLogger", "ssl.wrap_socket", "event_bus.get_event", "self.LE_PORT", "opts.get", "self.MIN_DELAY", "appender.close_connection", "random.uniform", "time.sleep", "appender.reopen_connection", "socket.AF_INET", "self.open_connection", "self.verbose", "ssl.PROTOCOL_TLSv1", "sock.connect", "self.LINE_SEP", "self._conn", "salt.utils", "self.LE_API", "self.LE_TLS_PORT", "appender.put", "data.replace", "socket.SOCK_STREAM", "socket.socket", "ssl.CERT_REQUIRED", "certifi.where", "uuid.UUID", "self.INVALID_TOKEN", "self.MAX_DELAY"]}, "logstash_engine.py": {"libraries": ["salt.utils.event", "logstash", "logging"], "function_names": ["event_bus_context", "start", "__virtual__"], "function_calls": ["event_bus_context", "logstashHandler"], "class_names": [], "class_method_calls": ["logstash.UDPLogstashHandler", "logging.getLogger", "logging.INFO", "event_bus.get_event", "logstash_logger.setLevel", "opts.get", "logstash.TCPLogstashHandler", "log.debug", "logstash_logger.info", "salt.utils", "logstash_logger.addHandler"]}, "napalm_syslog.py": {"libraries": ["salt.utils.stringutils", "napalm_logs", "salt.utils.zeromq.zmq", "salt.utils.event", "logging", "salt.utils.network", "napalm_logs.utils"], "function_names": ["_zmq", "_get_transport_recv", "start", "__virtual__"], "function_calls": ["transport_recv_fun", "_get_transport_recv"], "class_names": [], "class_method_calls": ["log.error", "log.critical", "auth.decrypt", "log.debug", "event.get_master_event", "log.info", "context.socket", "log.warning", "logging.getLogger", "zmq.Context", "napalm_logs.utils", "socket.ipv6", "zmq.SUBSCRIBE", "salt.utils", "socket.recv", "socket.setsockopt", "zmq.SUB", "dict_object.get", "socket.connect"]}, "reactor.py": {"libraries": ["fnmatch", "glob", "os", "salt.wheel", "salt.runner", "salt.client", "salt.utils.process", "salt.state", "salt.utils.event", "salt.utils.files", "salt.utils.yaml", "salt.utils.args", "salt.utils.cache", "logging", "salt.utils.master", "salt.utils.data", "salt.defaults.exitcodes"], "function_names": ["reactions", "render_reaction", "caller", "resolve_aliases", "run", "add_reactor", "delete_reactor", "list_reactors", "__init__", "runner", "populate_client_cache", "call_reactions", "list_all", "wheel", "local"], "function_calls": ["iter", "next", "super", "ReactWrap", "enumerate", "len", "l_fun", "getattr", "isinstance", "frozenset"], "class_names": ["Reactor", "ReactWrap"], "class_method_calls": ["salt.wheel", "log.error", "kwargs.pop", "salt.runner", "log.exception", "self.render_reaction", "self.is_leader", "log.debug", "self.client_cache", "salt.state", "self.reactions", "log.info", "reactor.keys", "self.list_reactors", "self.call_reactions", "log.warning", "ropt.keys", "logging.getLogger", "self.list_all", "self.add_reactor", "self.verify_high", "self.compile_high_data", "self.resolve_aliases", "event.fire_event", "self.minion", "react.update", "event.iter_events", "self.pool", "self.render_template", "self.opts", "salt.minion", "wrap_call.get", "salt.utils", "high.update", "os.nice", "opts.copy", "glob.glob", "self.delete_reactor", "salt.client", "reactors.append", "fnmatch.fnmatch", "reactors.extend", "self.reaction_class", "self.aliases", "self.order_chunks", "self.populate_client_cache", "ReactWrap.client_cache", "glob_ref.startswith", "self.event_user", "react_call.get", "self.wrap"]}, "redis_sentinel.py": {"libraries": ["redis", "salt.client", "logging"], "function_names": ["run", "start", "__init__", "work", "__virtual__"], "function_calls": ["super", "dict", "list", "zip", "Listener", "isinstance"], "class_names": ["Listener"], "class_method_calls": ["logging.getLogger", "local.cmd", "self.redis", "ips.pop", "redis.StrictRedis", "salt.client", "log.debug", "self.tag", "ret.update", "client.run", "salt.utils", "self.work", "self.pubsub", "self.fire_master"]}, "script.py": {"libraries": ["sys"], "function_names": [], "function_calls": ["print"], "class_names": [], "class_method_calls": ["sys.argv"]}, "slack.py": {"libraries": ["logging", "urllib.parse", "salt.utils.http", "http.client"], "function_names": ["query"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "log.debug", "http.client", "slack_functions.get", "result.get", "_result.get", "salt.utils", "args.copy", "urllib.parse"]}, "slack_bolt_engine.py": {"libraries": ["salt.runner", "salt.utils.json", "slack_bolt.adapter.socket_mode", "datetime", "logging", "traceback", "salt.output", "salt.utils.slack", "collections", "salt.utils.event", "itertools", "pprint", "time", "slack_bolt", "salt.loader", "salt.minion", "re", "ast", "salt.client", "salt.utils.args", "salt.utils.yaml", "salt.utils.http"], "function_names": ["get_slack_channels", "format_return_text", "_groups_from_pillar", "can_user_run", "run_command_async", "get_config_groups", "control_message_target", "commandline_to_list", "_run_until", "get_jobs_from_runner", "check_cmd_against_group", "__virtual__", "parse_args_and_kwargs", "just_data", "message_text", "fire", "get_slack_users", "run_commands_from_slack_async", "get_target", "start", "message_trigger", "__init__", "generate_triggered_messages"], "function_calls": ["SlackClient", "set", "type", "next", "iter", "just_data", "Exception", "fire_master", "str", "TypeError", "sorted", "all", "len", "UserWarning", "check_cmd_against_group", "ValueError"], "class_names": ["SlackClient"], "class_method_calls": ["channel.send_message", "all_slack_channels.get", "data.items", "logging.getLogger", "collections.deque", "all_slack_channels.clear", "runner.asynchronous", "outstanding.keys", "msg.keys", "itertools.chain", "self.get_slack_users", "channel_id.startswith", "datetime.datetime", "slack_bolt.adapter", "mtch.group", "checked.get", "self.app_token", "log.exception", "ret_groups.setdefault", "runner.cmd", "traceback.format_exc", "log.info", "self._run_until", "log.warning", "pprint.pformat", "self.get_target", "self.message_trigger", "use_groups.items", "group_config.get", "self.message_text", "self.can_user_run", "time.sleep", "all_slack_channels.update", "config.get", "slack_bolt.App", "salt.minion", "time.time", "re.match", "local.cmd_async", "self.commandline_to_list", "all_slack_users.update", "self.get_config_groups", "kwargs.update", "msg_text.startswith", "all_slack_users.get", "log.error", "self.msg_queue", "client.run_commands_from_slack_async", "self.parse_args_and_kwargs", "groups.items", "item.startswith", "cmdlist.append", "msg.get", "self.get_jobs_from_runner", "self._groups_from_pillar", "self.handler", "args.append", "log.trace", "self.master_minion", "self.bot_token", "client.generate_triggered_messages", "bot_token.startswith", "data.get", "target.get", "item.split", "self.get_slack_channels", "salt.runner", "log.debug", "self.app", "all_slack_users.clear", "val.get", "ast.literal_eval", "m_data.get", "salt.output", "self.run_command_async", "self.control_message_target", "use_cmdline.extend", "salt.utils", "__opts__.get", "re.compile", "job_result.get", "salt.client", "self.fire", "self.format_return_text"]}, "sqs_events.py": {"libraries": ["time", "salt.utils.json", "salt.utils.event", "logging", "boto.sqs"], "function_names": ["_process_queue", "_get_sqs_conn", "start", "__virtual__"], "function_calls": ["_process_queue", "_get_sqs_conn", "fire_master", "str", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "log.error", "q.set_message_class", "msg.get_body", "q.get_messages", "time.sleep", "_profile.get", "salt.utils", "sqs.get_queue", "msg.delete", "boto.exception", "log.warning", "boto.sqs"]}, "stalekey.py": {"libraries": ["salt.wheel", "salt.utils.minions", "os", "time", "salt.key", "salt.utils.files", "salt.config", "logging", "salt.utils.msgpack"], "function_names": ["_write_presence", "_get_keys", "_read_presence", "start", "_delete_keys", "__virtual__"], "function_calls": ["_read_presence", "_get_keys", "_write_presence", "_delete_keys"], "class_names": [], "class_method_calls": ["salt.wheel", "logging.getLogger", "__opts__.get", "ck.connected_ids", "log.error", "wheel.cmd", "stale_keys.append", "log.debug", "salt.key", "time.sleep", "time.time", "keys.all_keys", "log.info", "os.path", "salt.utils", "minions.items"]}, "test.py": {"libraries": ["random", "salt.exceptions.SaltInvocationError", "salt.utils.data", "salt.state._gen_tag"], "function_names": ["check_pillar", "fail_with_changes", "succeed_without_changes", "nop", "_check_key_type", "mod_watch", "fail_without_changes", "show_notification", "configurable_test_state", "_if_str_then_list", "succeed_with_changes"], "function_calls": ["succeed_without_changes", "SaltInvocationError", "str", "_check_key_type", "_gen_tag", "isinstance", "_if_str_then_list"], "class_names": [], "class_method_calls": ["fine.items", "failed.items", "random.choice", "has_changes.append", "checks.items", "salt.utils", "kwargs.get"]}, "thorium.py": {"libraries": ["salt.thorium"], "function_names": ["start"], "function_calls": [], "class_names": [], "class_method_calls": ["state.start_runtime", "salt.thorium"]}, "webhook.py": {"libraries": ["salt.utils.event", "tornado.ioloop", "tornado.web", "tornado.httpserver"], "function_names": ["fire", "post", "start"], "function_calls": ["dict", "fire_master", "all", "isinstance", "fire"], "class_names": ["WebHook"], "class_method_calls": ["__opts__.get", "io_loop.start", "http_server.listen", "tornado.ioloop", "tornado.web", "salt.utils", "tornado.httpserver", "self.request"]}, "direct_call.py": {"libraries": [], "function_names": ["execute"], "function_calls": ["func"], "class_names": [], "class_method_calls": []}, "docker.py": {"libraries": [], "function_names": ["initialized", "shutdown", "module_executors", "init", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["__opts__.get", "__context__.get"]}, "splay.py": {"libraries": ["salt.utils.stringutils", "time", "logging"], "function_names": ["_get_hash", "__init__", "execute", "_calc_splay"], "function_calls": ["_get_hash", "_calc_splay", "int", "float", "ValueError", "bytearray"], "class_names": [], "class_method_calls": ["logging.getLogger", "opts.get", "log.debug", "time.sleep", "salt.utils", "data.get"]}, "sudo.py": {"libraries": ["salt.utils.json", "shlex", "salt.syspaths", "salt.utils.path"], "function_names": ["execute", "__virtual__"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["cmd_meta.get", "__opts__.get", "opts.get", "shlex.quote", "salt.utils", "data.get", "cmd.append"]}, "transactional_update.py": {"libraries": ["salt.exceptions", "salt.client.ssh.state", "salt.modules.state._prior_running_states", "salt.modules.state._wait", "salt.modules.state.running", "salt.utils.args", "logging", "salt.client.ssh.wrapper.state", "salt.modules.state._check_queue"], "function_names": ["cleanup", "kdump", "call", "single", "apply_", "pkg_update", "dup", "run", "patch", "highstate", "_cmd", "pkg_remove", "sls", "transactional", "in_transaction", "__virtual__", "pending_transaction", "migration", "reboot", "cleanup_overlays", "rollback", "bootloader", "cleanup_snapshots", "_global_params", "initrd", "up", "pkg_install", "_pkg_params", "grub_cfg"], "function_calls": ["any", "pending_transaction", "run", "highstate", "_cmd", "reboot", "bool", "list", "str", "_check_queue", "call", "_global_params", "sls", "transactional", "globals", "isinstance", "_pkg_params", "in_transaction"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.exceptions", "kwargs.pop", "pkgs.split", "snapshot.endswith", "params.append", "params.extend", "e.message", "safe_kwargs.items", "cmd.extend", "args.split", "command.split", "snapshot.isnumeric", "salt.utils", "data.get", "local.get", "cmd.append"]}, "backports_abc.py": {"libraries": ["inspect.isawaitable", "collections", "abc.abstractmethod", "inspect", "abc.ABCMeta", "collections.abc"], "function_names": ["send", "close", "next", "get_mro", "mk_gen", "patch", "mk_awaitable", "__subclasshook__", "throw", "isawaitable", "__next__", "old_style_mro", "__await__", "mk_coroutine"], "function_calls": ["hasattr", "type", "iter", "get_mro", "mk_gen", "RuntimeError", "mk_awaitable", "mk_coroutine", "typ", "isinstance", "ABCMeta", "old_style_mro"], "class_names": ["Coroutine", "Generator"], "class_method_calls": ["cls.__mro__", "inspect.isawaitable", "_collections_abc.Coroutine", "Generator.register", "base.__dict__", "val.with_traceback", "self.throw", "cls.__bases__", "_collections_abc.Awaitable", "B.__dict__", "_collections_abc.Generator", "_collections_abc.Iterator", "self.send"]}, "ipaddress.py": {"libraries": ["sys", "functools", "re"], "function_names": ["summarize_address_range", "_parse_octet", "_make_netmask", "_address_class", "collapse_addresses", "exploded", "packed", "_check_int_address", "__iter__", "is_private", "_ip_int_from_prefix", "__contains__", "_is_subnet_of", "_get_address_key", "subnet_of", "_split_optional_netmask", "__add__", "_compress_hextets", "_split_addr_prefix", "__eq__", "broadcast_address", "is_unspecified", "__int__", "is_site_local", "_find_address_range", "teredo", "__lt__", "__repr__", "max_prefixlen", "ip_network", "sixtofour", "_prefix_from_ip_string", "scope_id", "supernet", "ip_interface", "_count_righthand_zero_bits", "_collapse_addresses_internal", "__init__", "__getitem__", "__reduce__", "compare_networks", "hosts", "__format__", "with_prefixlen", "ip", "_prefix_from_prefix_string", "with_netmask", "__hash__", "overlaps", "with_hostmask", "is_global", "v4_int_to_packed", "_parse_hextet", "version", "_explode_shorthand_ip_string", "is_loopback", "reverse_pointer", "num_addresses", "_get_networks_key", "prefixlen", "v6_int_to_packed", "_reverse_pointer", "address_exclude", "subnets", "hostmask", "ip_address", "__str__", "_split_scope_id", "ipv4_mapped", "_report_invalid_netmask", "is_multicast", "compressed", "_is_ascii", "_string_from_ip_int", "is_link_local", "get_mixed_type_key", "_check_packed_address", "__sub__", "supernet_of", "_prefix_from_ip_int", "_ip_int_from_string", "is_reserved"], "function_calls": ["AddressValueError", "any", "summarize_address_range", "IPv6Interface", "type", "range", "list", "getattr", "_find_address_range", "int", "TypeError", "min", "ip", "AssertionError", "super", "v6_int_to_packed", "NetmaskValueError", "str", "sorted", "NotImplementedError", "isinstance", "map", "_is_ascii", "IPv4Address", "v4_int_to_packed", "format", "IPv6Address", "_split_optional_netmask", "frozenset", "ValueError", "iter", "next", "hex", "IndexError", "hash", "_count_righthand_zero_bits", "_collapse_addresses_internal", "enumerate", "IPv4Network", "len", "set", "IPv4Interface", "IPv6Network"], "class_names": ["AddressValueError", "IPv6Interface", "_BaseNetwork", "_BaseV6", "_IPv4Constants", "_BaseAddress", "NetmaskValueError", "IPv4Address", "_BaseV4", "_IPAddressBase", "IPv4Network", "IPv6Address", "IPv4Interface", "_IPv6Constants", "IPv6Network"], "class_method_calls": ["other.prefixlen", "net.supernet", "IPv6Address.__eq__", "other.network", "self.__iter__", "ip.ip", "to_merge.append", "to_merge.pop", "ip_str.split", "ip._prefixlen", "ip_str.partition", "obj._get_networks_key", "self._max_prefixlen", "_IPAddressBase.__reduce__", "self._split_scope_id", "self.hostmask", "cls._HEXTET_COUNT", "last.version", "IPv4Address.__init__", "self._split_addr_prefix", "self.broadcast_address", "ip._ALL_ONES", "self._reverse_pointer", "cls._ip", "nets.append", "self.__class__", "sys.version_info", "cls._ip_int_from_string", "self._version", "self.network", "self.network_address", "cls._compress_hextets", "cls._parse_octet", "cls._netmask_cache", "self._make_netmask", "ip_int.to_bytes", "self.is_private", "cls._HEX_DIGITS", "self._string_from_ip_int", "other.netmask", "ip._version", "self.hosts", "self._ALL_ONES", "self.subnets", "a.network_address", "parts.append", "first._max_prefixlen", "first.version", "self._prefixlen", "other.__class__", "ip._max_prefixlen", "int.from_bytes", "first._ip", "other._version", "m.groups", "last.broadcast_address", "self._constants", "b.network_address", "self._cache", "b.broadcast_address", "self._scope_id", "subnets.get", "self._ip_int_from_string", "a._version", "cls._prefix_from_ip_int", "cls._ALL_ONES", "net.broadcast_address", "obj.isascii", "self.netmask", "other.subnet_of", "functools.lru_cache", "cls._max_prefixlen", "address.to_bytes", "obj.encode", "cls._report_invalid_netmask", "s1.subnets", "self.ip", "self._check_int_address", "subnets.values", "addrs.extend", "cls._prefix_from_ip_string", "self._check_packed_address", "self.prefixlen", "self.exploded", "self._is_subnet_of", "obj._get_address_key", "other._ip", "cls._ip_int_from_prefix", "self._address_class", "_BaseNetwork.__init__", "IPv6Address.__lt__", "ip.network_address", "IPv6Address.__init__", "prefixlen_str.isdigit", "octet_str.isdigit", "IPv6Address._constants", "functools.total_ordering", "s2.subnets", "self._explode_shorthand_ip_string", "a.broadcast_address", "ips.append", "IPv4Address.__lt__", "cls._parse_hextet", "other.network_address", "ip._ip", "cls._prefix_from_prefix_string", "self._ip", "last._ip", "IPv4Address._constants", "b._version", "obj.decode", "re.compile", "_address_fmt_re.fullmatch", "parts.pop", "IPv4Address.__eq__", "other.broadcast_address"]}, "saslprep.py": {"libraries": ["stringprep", "unicodedata"], "function_names": ["saslprep"], "function_calls": ["any", "in_table", "in_table_c12", "in_table_b1", "TypeError", "in_table_d1", "isinstance", "ValueError"], "class_names": [], "class_method_calls": ["stringprep.in_table_c21_c22", "stringprep.in_table_c9", "stringprep.in_table_c8", "stringprep.in_table_c7", "stringprep.in_table_c12", "stringprep.in_table_a1", "stringprep.in_table_c4", "stringprep.in_table_c3", "stringprep.in_table_c6", "stringprep.in_table_b1", "unicodedata.ucd_3_2_0", "stringprep.in_table_d1", "stringprep.in_table_d2", "stringprep.in_table_c5"]}, "ssl_match_hostname.py": {"libraries": ["re"], "function_names": ["match_hostname", "_dnsname_match"], "function_calls": ["CertificateError", "repr", "len", "_dnsname_match", "map", "ValueError"], "class_names": ["CertificateError"], "class_method_calls": ["re.compile", "hostname.lower", "pats.append", "dn.split", "dnsnames.append", "leftmost.startswith", "leftmost.count", "cert.get", "hostname.startswith", "pat.match", "re.escape", "re.IGNORECASE", "dn.lower"]}, "vsanapiutils.py": {"libraries": ["pyVmomi.SoapStubAdapter", "pyVmomi.vmodl", "pyVmomi.vim", "vsanmgmtObjects"], "function_names": ["ConvertVsanTaskToVcTask", "_GetVsanStub", "GetVsanEsxMos", "GetVsanEsxStub", "WaitForTasks", "GetVsanVcStub", "GetVsanVcMos"], "function_calls": ["_GetVsanStub", "str", "GetVsanEsxStub", "len", "GetVsanVcStub", "SoapStubAdapter"], "class_names": [], "class_method_calls": ["vsanStub.cookie", "vim.Task", "filterSpec.objectSet", "vim.TaskInfo", "update.version", "task.info", "vim.cluster", "update.filterSet", "stub.host", "vmodl.query", "objSet.changeSet", "pc.CreateFilter", "change.val", "filterSpec.propSet", "objSet.obj", "change.name", "vim.VsanUpgradeSystemEx", "si.content", "stub.cookie", "vsanTask._moId", "pc.WaitForUpdates", "taskList.remove", "vim.host", "filter.Destroy", "filterSet.objectSet"]}, "vsanmgmtObjects.py": {"libraries": ["pyVmomi.VmomiSupport.CreateManagedType", "pyVmomi.VmomiSupport.CreateDataType", "pyVmomi.VmomiSupport.AddVersion", "pyVmomi.VmomiSupport.F_LINK", "pyVmomi.VmomiSupport.AddVersionParent", "pyVmomi.VmomiSupport.CreateEnumType", "pyVmomi.VmomiSupport.F_OPTIONAL", "pyVmomi.VmomiSupport.F_LINKABLE"], "function_names": [], "function_calls": ["tuple", "CreateEnumType", "CreateManagedType", "CreateDataType"], "class_names": [], "class_method_calls": []}, "win_inet_pton.py": {"libraries": ["salt._compat.ipaddress", "os", "socket", "ctypes"], "function_names": ["inet_ntop", "inet_pton", "not_windows"], "function_calls": ["sockaddr", "WSAAddressToStringA", "OSError", "SystemError", "WSAStringToAddressA", "str", "len", "hasattr"], "class_names": ["sockaddr"], "class_method_calls": ["ctypes.string_at", "ctypes.windll", "os.name", "ctypes.byref", "socket.inet_ntop", "ctypes.c_ulong", "addr.sa_family", "socket.AF_INET6", "ctypes.Structure", "ip_string_size.value", "socket.AF_INET", "socket.inet_pton", "ctypes.sizeof", "ip_string.encode", "addr.ipv4_addr", "ctypes.create_string_buffer", "ctypes.c_short", "ctypes.c_ushort", "ctypes.FormatError", "socket.inet_aton", "ctypes.c_int", "ctypes.memmove", "ipaddress.ip_address", "addr.ipv6_addr", "ctypes.c_byte"]}, "zipp.py": {"libraries": ["sys", "collections.OrderedDict", "posixpath", "contextlib", "pathlib", "io", "itertools", "zipfile"], "function_names": ["is_file", "_name_set", "suffixes", "read_text", "filename", "read_bytes", "make", "_difference", "__str__", "_next", "__repr__", "namelist", "_parents", "joinpath", "suffix", "name", "resolve_dir", "stem", "iterdir", "_ancestry", "is_dir", "parent", "exists", "open", "__init__", "_implied_dirs", "_is_child", "_pathlib_compat"], "function_calls": ["_ancestry", "filter", "super", "FileNotFoundError", "list", "str", "_difference", "_pathlib_compat", "IsADirectoryError", "set", "cls", "isinstance", "map", "ValueError", "_dedupe"], "class_names": ["Path", "FastLookup", "CompleteDirs"], "class_method_calls": ["self.__names", "self.__lookup", "sys.version_info", "self.namelist", "self.filename", "posixpath.sep", "self.exists", "self.at", "io.TextIOWrapper", "self._is_child", "posixpath.join", "self.open", "self._next", "FastLookup.make", "self._implied_dirs", "posixpath.dirname", "itertools.islice", "strm.read", "source.__class__", "itertools.chain", "pathlib.Path", "self.__repr", "self._name_set", "posixpath.split", "path.at", "itertools.filterfalse", "self.root", "path.rstrip", "contextlib.suppress", "zipfile.ZipFile", "self.is_dir", "OrderedDict.fromkeys", "path.__fspath__", "self.__class__", "source.mode"]}, "features.py": {"libraries": ["salt.utils.versions", "logging"], "function_names": ["setup_features", "__init__", "get"], "function_calls": ["Features"], "class_names": ["Features"], "class_method_calls": ["self.features", "logging.getLogger", "opts.get", "features.setup_features", "salt.utils", "self.setup", "log.warning"]}, "fileclient.py": {"libraries": ["string", "salt.utils.openstack.swift.SaltSwift", "salt.exceptions.SaltClientError", "salt.utils.files", "logging", "salt.payload", "salt.utils.hashutils", "salt.utils.templates", "salt.utils.path", "urllib.parse", "salt.config.DEFAULT_HASH_TYPE", "salt.utils.atomicfile", "tornado.httputil.HTTPHeaders", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "salt.utils.gzip_util", "os", "time", "salt.utils.verify", "salt.channel.client", "salt.loader", "http.server", "contextlib", "salt.utils.data", "errno", "salt.utils.url", "salt.crypt", "salt.exceptions.MinionError", "tornado.httputil.parse_response_start_line", "salt.client", "salt.fileserver", "urllib.error", "salt.utils.platform", "tornado.httputil.HTTPInputError", "salt.utils.versions", "salt.utils.http", "ftplib", "shutil"], "function_names": ["__enter__", "get_state", "master_opts", "cache_file", "master_tops", "destroy", "on_chunk", "s3_opt", "hash_file", "dir_list", "hash_and_stat_file", "get_dir", "get_file", "swift_opt", "__getstate__", "__exit__", "on_header", "decode_dict_keys_to_str", "_channel_send", "get_file_client", "_refresh_channel", "cache_dir", "_check_proto", "symlink_list", "get_template", "_file_local_list", "list_env", "cache_dest", "_find_file", "file_list", "__setstate__", "file_local_list", "cache_local_file", "_cache_loc", "__get_file_path", "is_cached", "envs", "cache_files", "list_states", "__hash_and_stat_file", "cache_master", "get_cachedir", "__init__", "get_url", "__getattr__", "gen_token", "file_list_emptydirs", "_extrn_path"], "function_calls": ["SaltSwift", "type", "s3_opt", "list", "getattr", "int", "SaltClientError", "DumbAuth", "CommandExecutionError", "hasattr", "swift_opt", "str", "decode_dict_keys_to_str", "sorted", "isinstance", "map", "parse_response_start_line", "MinionError", "HTTPHeaders", "len", "set"], "class_names": ["FSClient", "PillarClient", "RemoteClient", "DumbAuth", "ContextlessFileClient", "Client"], "class_method_calls": ["key.decode", "self._extrn_path", "url_data.username", "channel.close", "shutil.copyfile", "logging.getLogger", "self.file_list_emptydirs", "self.__init__", "ret.sort", "exc.reason", "self.get_url", "time.monotonic", "url_data.port", "fn_.startswith", "content_type.split", "os.makedirs", "string.ascii_lowercase", "query.get", "self.get_cachedir", "urllib.error", "netloc.rfind", "self._cache_loc", "key.lower", "ftplib.FTP", "ftp.login", "kwargs.pop", "url_data.scheme", "fn_.tell", "log.info", "filelist.add", "fn_.strip", "log.warning", "shutil.move", "urllib.parse", "paths.split", "data.encode", "self.file_client", "fdest.union", "url_data.fragment", "errno.EEXIST", "fp_.read", "url_data.params", "contextlib.contextmanager", "self._check_proto", "fp_.write", "self.opts", "self._refresh_channel", "prefix.strip", "url.lstrip", "url_data.netloc", "path.rsplit", "ftp.retrbinary", "etagfp.read", "self.__hash_and_stat_file", "fn_.close", "ofile.write", "log.error", "content_type.startswith", "fn_.write", "str.lower", "url_scheme.lower", "path.endswith", "self.hash_and_stat_file", "url_data.query", "source_hash.split", "self.channel", "self._channel_send", "exc.errno", "fnd.get", "os.sep", "os.stat", "destfp.close", "opts.get", "self.destroy", "exc.code", "chunk.decode", "path.startswith", "ftp.quit", "destfp.write", "self._closing", "self.utils", "http.server", "self._find_file", "data.get", "salt.exceptions", "url_data.password", "salt.fileserver", "url_data.path", "dest.endswith", "hdr.strip", "path.lstrip", "salt.channel", "self.cache_file", "sls.replace", "log.debug", "url.split", "os.path", "src.items", "ftp.connect", "swift_conn.get_object", "Client.__init__", "self._file_local_list", "netloc.replace", "self.hash_file", "self.file_list", "etagfp.write", "result.append", "netloc.split", "salt.loader", "self.get_file", "ret.append", "url_data.hostname", "self.auth", "salt.utils", "field.split", "states.add", "os.remove", "hdr.code", "path.replace", "self.__get_file_path"]}, "gitfs.py": {"libraries": ["saltfactories.daemons.sshd.Sshd", "salt.pillar.git_pillar", "salt.utils.files", "logging", "pytestshellutils.utils.ports", "tests.support.helpers.patched_environ", "tempfile", "salt.utils.path", "tests.support.helpers.requires_system_grains", "tests.support.runtests.RUNTIME_VARS", "saltfactories.utils.random_string", "tests.support.mock.patch", "tests.support.case.ModuleCase", "os", "textwrap", "salt.utils.immutabletypes.freeze", "attr", "errno", "salt.fileserver.gitfs", "salt.utils.platform", "pytest", "tests.support.mixins.LoaderModuleMockMixin", "salt.utils.yaml", "shutil"], "function_names": ["_push", "get_display_name", "make_repo", "webserver_pillar_tests_prep", "get_pillar", "setUp", "make_extra_repo", "webserver_pillar_tests_prep_authenticated", "tearDownClass", "ssh_pillar_tests_prep", "set_known_host", "setup_loader_modules", "apply_pre_start_states"], "function_calls": ["freeze", "_push", "iter", "AssertionError", "patched_environ", "next", "super", "str", "Sshd", "random_string", "NotImplementedError"], "class_names": ["GitFSTestBase", "GitPillarHTTPTestBase", "GitPillarSSHTestBase", "GitTestBase", "Sshd", "GitPillarTestBase"], "class_method_calls": ["ports.get_unused_localhost_port", "tmp_path_factory.mktemp", "self.make_repo", "logging.getLogger", "self.display_name", "self.ext_opts", "self.bare_extra_repo", "testclass.ext_opts", "git_pillar.ext_pillar", "ret.returncode", "self.addCleanup", "sshd_proc.apply_pre_start_states", "testclass.username", "salt_minion.salt_call_cli", "cls.admin_extra_repo", "self.__class__", "self.get_script_path", "self.bare_extra_repo_backup", "testclass.id_rsa_withpass", "log.info", "shutil.copytree", "container.started", "self.admin_extra_repo_backup", "self.git_ssh", "self.repo_dir", "self.bare_repo_backup", "testclass.passphrase", "pytest.fail", "tempfile.mkdtemp", "RUNTIME_VARS.TMP", "self.make_extra_repo", "fp_.write", "shutil.rmtree", "git_pillar.__opts__", "sshd_proc.before_start", "self.listen_ports", "self.run_function", "attr.ib", "cls.bare_repo", "exc.errno", "container.get_host_port_binding", "cls.bare_extra_repo", "self.admin_extra_repo", "testclass.git_ssh", "textwrap.dedent", "os.mkdir", "root_dir.startswith", "self.username", "errno.ENOENT", "self.git_opts", "cls.bare_repo_backup", "self.bare_repo", "attr.s", "cls.admin_extra_repo_backup", "cls.bare_extra_repo_backup", "log.debug", "pytest.fixture", "salt_factories.get_container", "self.check_ports", "salt_master.config", "sshd_proc.after_start", "os.path", "salt_call_cli.run", "ret.data", "_OPTS.copy", "self.listen_port", "self.admin_repo_backup", "sshd_proc.start", "sshd_proc.terminate", "request.cls", "ext_pillar_opts.update", "self.admin_repo", "salt.utils", "patch.dict", "testclass.id_rsa_nopass", "sshd_proc.set_known_host", "ext_pillar_conf.format", "cls.admin_repo", "cls.admin_repo_backup", "os.remove", "self.config_dir"]}, "hgfs.py": {"libraries": ["fnmatch", "glob", "hashlib", "salt.utils.files", "salt.exceptions.FileserverConfigError", "logging", "salt.utils.hashutils", "salt.config.DEFAULT_HASH_TYPE", "salt.utils.stringutils", "salt.utils.gzip_util", "copy", "os", "salt.utils.data", "hglib", "errno", "datetime.datetime", "salt.utils.url", "salt.fileserver", "salt.utils.versions", "salt.utils.event.tagify", "shutil"], "function_names": ["_failhard", "clear_cache", "_get_bookmark", "file_list_emptydirs", "dir_list", "_get_manifest", "_get_ref", "_do_clear_lock", "serve_file", "lock", "__virtual__", "update", "find_file", "_file_lists", "file_list", "_get_file_list", "clear_lock", "_all_tags", "file_hash", "_add_error", "_get_branch", "_get_dir_list", "_all_bookmarks", "_get_tag", "envs", "_all_branches", "_env_is_exposed", "_do_lock", "_clear_old_remotes", "init"], "function_calls": ["_failhard", "list", "_get_bookmark", "init", "_get_manifest", "_get_ref", "_do_clear_lock", "str", "len", "sorted", "all", "isinstance", "lock", "FileserverConfigError", "_file_lists", "bool", "_get_file_list", "clear_lock", "_all_tags", "_add_error", "_get_dir_list", "_get_branch", "_all_bookmarks", "_get_tag", "iter", "next", "envs", "_all_branches", "_env_is_exposed", "_do_lock", "_clear_old_remotes", "hash_type", "getattr", "set", "tagify"], "class_names": [], "class_method_calls": ["load.pop", "log.error", "repo_url.encode", "log.critical", "to_remove.remove", "log.debug", "os.listdir", "ret.update", "log.info", "os.path", "salt.payload", "hglib.open", "exc.errno", "ret.add", "log.warning", "logging.getLogger", "ret.get", "os.stat", "relpath.startswith", "repo.branches", "repos.append", "errno.EISDIR", "copy.deepcopy", "filepath.rsplit", "datetime.now", "event.fire_event", "path.startswith", "repo.close", "cleared.extend", "log.trace", "fp_.read", "cachedir_ls.remove", "errors.extend", "hglib.error", "os.makedirs", "success.append", "fp_.write", "repo.bookmarks", "shutil.rmtree", "errors.append", "per_remote_conf.get", "salt.utils", "data.decode", "errlist.append", "locked.extend", "load.get", "data.get", "__opts__.get", "to_remove.append", "glob.glob", "repo.tags", "salt.fileserver", "repo_conf.update", "fp_.seek", "repo.config", "failed.append", "hgconfig.write", "hglib.init", "os.remove", "fnmatch.fnmatch", "repo.manifest", "client.close", "logging.DEBUG"]}, "minionfs.py": {"libraries": ["os", "salt.utils.url", "salt.utils.stringutils", "salt.fileserver", "salt.utils.files", "salt.utils.versions", "logging", "salt.utils.hashutils", "salt.utils.gzip_util", "salt.utils.path"], "function_names": ["update", "find_file", "envs", "file_list", "serve_file", "_is_exposed", "file_hash", "dir_list", "__virtual__"], "function_calls": ["envs", "list", "file_hash", "len", "_is_exposed"], "class_names": [], "class_method_calls": ["load.pop", "log.debug", "os.listdir", "os.path", "log.warning", "logging.getLogger", "os.sep", "os.stat", "relpath.startswith", "fp_.read", "os.makedirs", "fp_.write", "ret.append", "prefix.partition", "salt.utils", "data.decode", "load.get", "prefix.startswith", "path.split", "salt.fileserver", "fp_.seek"]}, "roots.py": {"libraries": ["errno", "os", "salt.utils.verify", "salt.utils.stringutils", "salt.fileserver", "salt.utils.event", "salt.utils.files", "salt.utils.platform", "salt.utils.versions", "logging", "salt.utils.hashutils", "salt.utils.gzip_util", "salt.utils.path"], "function_names": ["update", "find_file", "envs", "_add_file_stat", "_file_lists", "file_list", "serve_file", "_translate_sep", "file_hash", "file_list_emptydirs", "dir_list", "symlink_list", "_add_to"], "function_calls": ["_add_file_stat", "_file_lists", "list", "str", "int", "sorted", "file_hash", "_translate_sep", "float", "set", "_add_to"], "class_names": [], "class_method_calls": ["load.pop", "root.replace", "log.error", "kwargs.pop", "log.critical", "log.debug", "os.listdir", "os.path", "symlinks.items", "rel_dest.startswith", "link_dest.startswith", "log.warning", "logging.getLogger", "ret.get", "os.stat", "new_mtime_map.get", "tgt.add", "line.strip", "event.fire_event", "errno.EEXIST", "log.trace", "fp_.read", "os.makedirs", "fp_.write", "err.errno", "salt.utils", "load.get", "__opts__.get", "os.unlink", "new_mtime_map.items", "salt.fileserver", "fp_.seek", "key.startswith", "path.replace"]}, "s3fs.py": {"libraries": ["os", "pickle", "time", "salt.fileserver", "salt.utils.files", "salt.modules", "salt.utils.versions", "datetime", "logging", "salt.utils.hashutils", "pprint", "salt.utils.gzip_util", "urllib.parse"], "function_names": ["_get_cached_file_name", "_find_files", "_write_buckets_cache_file", "_get_cache_dir", "dir_list", "_find_file_meta", "_init", "serve_file", "_get_file_from_s3", "_read_buckets_cache_file", "_prune_deleted_files", "__get_s3_meta", "update", "find_file", "_is_env_per_bucket", "_get_buckets", "file_list", "file_hash", "_refresh_buckets_cache_file", "envs", "_trim_env_off_path", "_get_buckets_cache_filename", "file_list_emptydirs", "_find_dirs", "_get_s3_key"], "function_calls": ["_get_cached_file_name", "_find_files", "_write_buckets_cache_file", "_get_cache_dir", "list", "int", "_find_file_meta", "_init", "str", "_get_file_from_s3", "_read_buckets_cache_file", "all", "isinstance", "_prune_deleted_files", "__get_s3_meta", "_is_env_per_bucket", "_get_buckets", "_refresh_buckets_cache_file", "ValueError", "filter", "_trim_env_off_path", "_get_buckets_cache_filename", "len", "set", "_find_dirs", "_get_s3_key"], "class_names": [], "class_method_calls": ["load.pop", "os.rmdir", "kwargs.pop", "os.walk", "header_value.strip", "log.debug", "roots.add", "bucket_meta.items", "os.listdir", "metadata.keys", "metadata.items", "log.info", "os.path", "bucket_dict.items", "ret.extend", "bucket_files.items", "cached_files.add", "fs.is_file_ignored", "log.warning", "urllib.parse", "pprint.pformat", "logging.getLogger", "os.stat", "dirpaths.add", "header.get", "bucket.items", "k.endswith", "header_name.strip", "meta_response.update", "pickle.dump", "fp_.read", "os.makedirs", "bucket.values", "headers.append", "cached_file_stat.st_mtime", "pickle.UnpicklingError", "ret.append", "file_etag.find", "time.time", "data.decode", "salt.utils", "load.get", "__opts__.get", "os.unlink", "datetime.datetime", "path.split", "bucket_files_list.append", "cached_file_stat.st_size", "fp_.seek", "log.isEnabledFor", "os.remove", "pickle.load", "logging.DEBUG"]}, "svnfs.py": {"libraries": ["fnmatch", "hashlib", "salt.utils.files", "salt.exceptions.FileserverConfigError", "logging", "salt.utils.hashutils", "salt.utils.path", "salt.config.DEFAULT_HASH_TYPE", "salt.utils.stringutils", "salt.utils.gzip_util", "copy", "os", "salt.utils.data", "errno", "datetime.datetime", "salt.utils.url", "pysvn", "salt.fileserver", "salt.utils.versions", "salt.utils.event.tagify", "shutil"], "function_names": ["_failhard", "clear_cache", "dir_list", "init", "_do_clear_lock", "serve_file", "lock", "__virtual__", "update", "find_file", "_env_root", "_file_lists", "file_list", "clear_lock", "_add_error", "file_hash", "envs", "_env_is_exposed", "_rev", "_do_lock", "_clear_old_remotes", "file_list_emptydirs"], "function_calls": ["any", "_failhard", "list", "init", "_do_clear_lock", "str", "len", "sorted", "all", "lock", "isinstance", "FileserverConfigError", "_env_root", "dict", "_file_lists", "bool", "clear_lock", "_add_error", "iter", "next", "envs", "_env_is_exposed", "_rev", "_do_lock", "_clear_old_remotes", "hash_type", "getattr", "set", "tagify"], "class_names": [], "class_method_calls": ["load.pop", "log.error", "log.critical", "to_remove.remove", "log.debug", "os.listdir", "ret.update", "pysvn._pysvn", "log.info", "os.path", "pysvn.Client", "salt.payload", "exc.errno", "ret.add", "log.warning", "logging.getLogger", "ret.get", "os.stat", "repos.append", "errno.EISDIR", "CLIENT.info", "copy.deepcopy", "datetime.now", "event.fire_event", "path.startswith", "cleared.extend", "log.trace", "fp_.read", "errors.extend", "cachedir_ls.remove", "success.append", "os.makedirs", "CLIENT.status", "fp_.write", "CLIENT.update", "shutil.rmtree", "errors.append", "salt.utils", "data.decode", "errlist.append", "locked.extend", "load.get", "data.get", "__opts__.get", "to_remove.append", "salt.fileserver", "repo_conf.update", "fp_.seek", "fnmatch.fnmatch", "failed.append", "os.remove", "CLIENT.checkout"]}, "chronos.py": {"libraries": ["salt.utils.http", "logging"], "function_names": ["init", "shutdown", "ping", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "salt.utils", "log.error"]}, "cimc.py": {"libraries": ["logging"], "function_names": ["user", "logging_levels", "ntp", "syslog", "_default_ret", "hostname", "power_configuration", "__virtual__"], "function_calls": ["str", "isinstance", "_default_ret"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error"]}, "core.py": {"libraries": ["errno.EPERM", "win32api", "platform", "hashlib", "salt.utils.files", "datetime", "salt.utils.network._get_interfaces", "salt.utils.locales", "logging", "salt.utils.path", "salt.utils.win_reg", "salt.version.__version_info__", "salt.utils.network._clear_interfaces", "salt.utils.platform.linux_distribution", "salt.utils.stringutils", "salt.utils.win_osinfo", "salt.utils.pkg.rpm", "uuid", "zmq", "salt.utils.network", "sys", "salt.modules.cmdmod", "os", "salt.utils.dns", "time", "salt.utils.winapi", "salt.modules.smbios", "subprocess", "wmi", "re", "errno.EACCES", "salt.exceptions", "salt.modules.network", "platform.freedesktop_os_release", "salt.version.__version__", "socket", "salt.utils.platform", "dateutil.tz", "salt.utils.args", "lsb_release", "locale"], "function_names": ["_sunos_cpudata", "pythonversion", "get_server_id", "_osarch", "_aix_cpudata", "_osx_memdata", "_freedesktop_os_release", "_windows_cpudata", "_osx_gpudata", "_windows_os_release_grain", "id_", "_os_release_to_grains", "pythonexecutable", "_linux_lsb_distrib_data", "dns", "cwd", "saltversion", "_windows_memdata", "_ps", "ip_fqdn", "get_machine_id", "_derive_os_grain", "_selinux", "hostname", "zmqversion", "ip4_interfaces", "_virtual_hv", "kernelparams", "get_master", "_parse_junos_showver", "_bsd_memdata", "saltversioninfo", "_memdata", "path", "_os_release_quirks_for_osrelease", "locale_info", "_systemd", "_osx_platform_data", "_hw_data", "_linux_devicetree_platform_data", "_netbsd_gpu_data", "_os_release_quirks_for_oscodename", "_windows_virtual", "pythonpath", "saltpath", "_linux_init_system", "_linux_gpu_data", "_sunos_memdata", "_aix_get_machine_id", "ip6_interfaces", "ip_interfaces", "_linux_bin_exists", "_sunos_release", "_linux_cpudata", "_linux_memdata", "_bsd_cpudata", "_parse_lsb_release", "_linux_distribution_data", "_osrelease_data", "hwaddr_interfaces", "_clean_value", "_family_id", "_legacy_linux_distribution_data", "os_data", "default_gateway", "_parse_os_release", "fqdns", "_parse_cpe_name", "__init__", "append_domain", "_read_dt_string", "_prettify_os_family", "_virtual", "_windows_platform_data", "_smartos_os_data", "_aix_memdata"], "function_calls": ["any", "_sunos_cpudata", "_osarch", "range", "_aix_cpudata", "_osx_memdata", "_freedesktop_os_release", "_windows_cpudata", "_windows_os_release_grain", "_os_release_to_grains", "_osx_gpudata", "list", "int", "_linux_lsb_distrib_data", "_ps", "_windows_memdata", "float", "_derive_os_grain", "hasattr", "hostname", "max", "_selinux", "_virtual_hv", "OSError", "_parse_junos_showver", "_bsd_memdata", "_memdata", "str", "len", "_os_release_quirks_for_osrelease", "sorted", "_systemd", "isinstance", "_virtual", "_osx_platform_data", "_hw_data", "_linux_devicetree_platform_data", "_get_interfaces", "_os_release_quirks_for_oscodename", "_netbsd_gpu_data", "_windows_virtual", "_linux_init_system", "dict", "_sunos_memdata", "_linux_gpu_data", "_aix_get_machine_id", "_linux_bin_exists", "_sunos_release", "_osrelease_data", "_linux_memdata", "_parse_lsb_release", "_linux_distribution_data", "_linux_cpudata", "_bsd_cpudata", "abs", "_family_id", "_legacy_linux_distribution_data", "_clean_value", "_clear_interfaces", "_parse_os_release", "_linux_distribution", "enumerate", "tuple", "_parse_cpe_name", "_read_dt_string", "isdir", "_prettify_os_family", "set", "_windows_platform_data", "_smartos_os_data", "_aix_memdata"], "class_names": [], "class_method_calls": ["obp_rev.strip", "gpus.append", "field_name.strip", "re.DOTALL", "roles.append", "machineid.read", "val.replace", "re.search", "logging.getLogger", "res.groups", "_LSB_REGEX.match", "wmi_c.Win32_BIOS", "vz_match.groups", "uname_v.split", "socket.AF_INET6", "fw_rev.strip", "osinfo.Version", "distroname.replace", "win32api.GlobalMemoryStatusEx", "socket.AF_INET", "line.partition", "platform.version", "osinfo.Caption", "decoded_line.split", "sys.path", "value.isdigit", "systeminfo.Model", "motherboardinfo.SerialNumber", "err.errno", "txt.splitlines", "re.IGNORECASE", "vz_re.match", "datetime.datetime", "devs.append", "release.items", "_VERSION_RE.match", "part.get", "osinfo.Manufacturer", "key.lower", "sys.version_info", "lspci_out.splitlines", "subprocess.PIPE", "platform.uname", "log.exception", "enabled_features.append", "val.split", "arch.strip", "secondary.get", "value.endswith", "f.read", "log.info", "wmi_c.Win32_OperatingSystem", "_REPLACE_LINUX_RE.sub", "log.warning", "fieldname.strip", "re.split", "family_id.capitalize", "key.strip", "obp_date.strip", "line.strip", "cmds.items", "find_codename.search", "subprocess.run", "out.splitlines", "os.uname", "biosinfo.Name", "fp_.read", "priority.strip", "grains.update", "maker.startswith", "error.errno", "output.splitlines", "re.match", "value.rstrip", "nbsd_hwdata.items", "val.strip", "sys.executable", "locale.getlocale", "match.group", "uuid.UUID", "salt.modules", "timeinfo.Description", "re.sub", "lspci_list.append", "archinfo.get", "iface_ips.append", "cmds.update", "log.error", "motherboardinfo.Product", "cpe.get", "socket.gethostname", "fbsd_hwdata.items", "lsb_release.get_distro_information", "failed_commands.discard", "_OS_NAME_MAP.get", "systeminfo.Manufacturer", "cpu_match.group", "fw_date.strip", "biosinfo.Version", "product.startswith", "socket.getaddrinfo", "line.rstrip", "uname_v.startswith", "os.name", "os.stat", "caption.split", "init_bin.endswith", "id_.encode", "xen_feature_table.items", "relno.group", "timediff.seconds", "pcictl_out.splitlines", "osinfo.ProductType", "args.append", "log.trace", "platform.release", "fieldval.partition", "model.split", "wmi.WMI", "hwdata.items", "vendor_match.group", "fhr.read", "biosinfo.SerialNumber", "res.group", "salt.exceptions", "item.split", "wmi_c.Win32_ComputerSystemProduct", "hashlib.sha256", "uname_v.index", "line.startswith", "line.find", "dateutil.tz", "cur_dev.get", "release_re.search", "os.R_OK", "release.group", "platform.system", "_path.split", "wmi_c.Win32_TimeZone", "log.debug", "grains.items", "swap_data.split", "osrelease.append", "os.path", "id_like.split", "grains.get", "_OS_FAMILY_MAP.get", "hardware.splitlines", "wmi_c.Win32_BaseBoard", "os.access", "item.decode", "codename.group", "csproductinfo.UUID", "ifile.read", "decoded_line.startswith", "os.getcwd", "output.lower", "time.tzname", "regex.search", "find_release.search", "sysfs_firmware_info.items", "regex.match", "osdata.get", "l.decode", "mem.startswith", "uuid.lower", "grains.pop", "line.split", "swap_total.endswith", "salt.utils", "wmi_c.Win32_ComputerSystem", "x.strip", "zmq.zmq_version", "re.compile", "os.environ", "__opts__.get", "os.linesep", "os_release.get", "failed_commands.add", "osrelease.split", "key.startswith", "line.lower", "vendor.lower"]}, "disks.py": {"libraries": ["salt.modules.cmdmod", "glob", "salt.utils.files", "salt.utils.platform", "re", "logging", "salt.utils.path"], "function_names": ["parse_geom_attribs", "_freebsd_geom", "_datavalue", "_linux_disks", "disks", "_windows_disks"], "function_calls": ["parse_geom_attribs", "_freebsd_geom", "int", "_datavalue", "len", "_linux_disks", "_windows_disks"], "class_names": ["_geomconsts"], "class_method_calls": ["name.startswith", "search.group", "re.search", "logging.getLogger", "tmp.pop", "_geomconsts.GEOMNAME", "_geomconsts._datatypes", "log.trace", "_geomconsts.ROTATIONRATE", "_geomconsts._aliases", "tmp.get", "line.split", "salt.utils", "device.split", "devices.split", "glob.glob", "_geomconsts.__dict__", "salt.modules", "key.startswith", "entry_fp.read", "entry.split"]}, "extra.py": {"libraries": ["glob", "os", "salt.utils.files", "salt.utils.platform", "salt.utils.yaml", "salt.utils", "logging", "salt.utils.data", "salt.utils.path"], "function_names": ["uefi", "shell", "config", "transactional", "__secure_boot"], "function_calls": ["filter", "next", "bool", "len", "__secure_boot"], "class_names": [], "class_method_calls": ["logging.getLogger", "os.environ", "glob.glob", "fd.read", "log.debug", "os.path", "salt.utils", "log.warning"]}, "fibre_channel.py": {"libraries": ["salt.modules.cmdmod", "glob", "salt.utils.platform", "salt.utils.files", "logging"], "function_names": ["_windows_wwns", "_linux_wwns", "fibre_channel_wwns", "__virtual__"], "function_calls": ["_windows_wwns", "_linux_wwns"], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "content.splitlines", "glob.glob", "_wwn.read", "ret.append", "salt.modules", "line.rstrip", "salt.utils"]}, "fx2.py": {"libraries": ["salt.utils.http", "salt.utils.path", "logging"], "function_names": ["grains", "grains_refresh", "shutdown", "host", "_grains", "find_credentials", "admin_username", "init", "admin_password", "chconfig", "ping", "__virtual__"], "function_calls": ["_grains", "grains", "find_credentials", "list"], "class_names": [], "class_method_calls": ["k.startswith", "logging.getLogger", "kwargs.pop", "usernames.append", "log.critical", "log.debug", "__pillar__.get", "DETAILS.get", "log.info", "salt.utils", "r.get"]}, "iscsi.py": {"libraries": ["errno", "salt.modules.cmdmod", "salt.utils.files", "salt.utils.platform", "logging", "salt.utils.path"], "function_names": ["_windows_iqn", "iscsi_iqn", "_linux_iqn", "_aix_iqn", "__virtual__"], "function_calls": ["_linux_iqn", "_windows_iqn", "_aix_iqn"], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "aix_ret.split", "log.debug", "ret.append", "line.strip", "line.startswith", "salt.modules", "line.rstrip", "line.split", "salt.utils", "errno.ENOENT", "ex.errno"]}, "junos.py": {"libraries": ["functools.wraps", "logging"], "function_names": ["wrapper", "resultdecorator", "shutdown", "unlock", "load", "zeroize", "rollback", "diff", "lock", "commit_check", "get_table", "set_hostname", "commit", "file_copy", "install_os", "cli", "install_config", "rpc"], "function_calls": ["wraps", "function"], "class_names": [], "class_method_calls": ["logging.getLogger"]}, "lvm.py": {"libraries": ["os", "salt.utils.path"], "function_names": ["pv_absent", "lv_absent", "_convert_to_mb", "lv_present", "vg_present", "pv_present", "vg_absent", "__virtual__"], "function_calls": ["str", "int", "isinstance", "_convert_to_mb"], "class_names": [], "class_method_calls": ["salt.exceptions", "devices.split", "vgname.split", "pvs.get", "unit.isdigit", "lv_info.get", "salt.utils", "os.path"]}, "marathon.py": {"libraries": ["salt.utils.http", "logging"], "function_names": ["init", "shutdown", "ping", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "salt.utils", "log.error"]}, "mdadm.py": {"libraries": ["salt.utils.files", "logging"], "function_names": ["mdadm"], "function_calls": ["set", "sorted"], "class_names": [], "class_method_calls": ["logging.getLogger", "devices.add", "line.split", "line.startswith", "salt.utils", "log.trace"]}, "mdata.py": {"libraries": ["salt.utils.platform", "salt.utils.decorators", "salt.utils.path", "logging"], "function_names": ["list_", "put_", "_check_mdata_get", "_check_mdata_list", "_check_mdata_delete", "_check_mdata_put", "get_", "delete_", "__virtual__"], "function_calls": ["list_", "_check_mdata_get", "_check_mdata_list", "_check_mdata_delete", "_check_mdata_put"], "class_names": [], "class_method_calls": ["decorators.memoize", "logging.getLogger", "salt.utils"]}, "metadata.py": {"libraries": ["os", "salt.utils.json", "salt.utils.stringutils", "socket", "salt.utils.data", "salt.utils.http"], "function_names": ["_refresh_token", "metadata", "_search", "__virtual__"], "function_calls": ["_refresh_token", "isinstance", "_search"], "class_names": [], "class_method_calls": ["socket.socket", "__opts__.get", "sock.settimeout", "body.split", "line.endswith", "line.split", "sock.connect_ex", "salt.utils", "os.path", "socket.AF_INET", "http.query", "socket.SOCK_STREAM"]}, "metadata_gce.py": {"libraries": ["salt.utils.json", "salt.utils.http", "logging"], "function_names": ["metadata", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "googletest.get", "log.debug", "result.get", "salt.utils", "http.query"]}, "minion_process.py": {"libraries": ["salt.utils.platform", "os", "salt.utils.user"], "function_names": ["grains", "_gid", "_uid", "_groupname", "_pid", "_username"], "function_calls": ["_gid", "_uid", "_groupname", "_pid", "_username"], "class_names": [], "class_method_calls": ["os.getpid", "salt.utils"]}, "napalm.py": {"libraries": ["salt.utils.immutabletypes.freeze", "functools.wraps"], "function_names": ["traceroute", "load_replace_candidate", "mock_proxy_napalm_wrap", "get_probes_config", "join", "get_environment", "get_optics", "get_ntp_servers", "get_arp_table", "get_snmp_information", "true", "get", "load_merge_candidate", "get_interfaces", "commit_config", "get_lldp_neighbors_detail", "get_ntp_peers", "get_ntp_stats", "random_hash", "get_config", "get_facts", "get_interfaces_ip", "__setitem__", "get_route_to", "discard_config", "func_wrapper", "get_bgp_neighbors_detail", "get_bgp_config", "get_mac_address_table", "rollback", "get_probes_results", "get_users", "__init__", "__getitem__", "cli", "compare_config", "get_managed_file", "ping"], "function_calls": ["freeze", "MockNapalmDevice", "func", "wraps"], "class_names": ["MockNapalmDevice"], "class_method_calls": ["TEST_SNMP_INFO.copy", "func.__globals__", "TEST_RUNNING_CONFIG.copy", "TEST_IPADDRS.copy", "TEST_BGP_NEIGHBORS.copy", "TEST_ARP_TABLE.copy", "TEST_MAC_TABLE.copy", "TEST_FACTS.copy", "TEST_OPTICS.copy", "TEST_USERS.copy", "TEST_PROBES_RESULTS.copy", "TEST_COMMAND_RESPONSE.copy", "TEST_NTP_STATS.copy", "self._d", "TEST_PING_RESPONSE.copy", "TEST_ENVIRONMENT.copy", "TEST_TRACEROUTE_RESPONSE.copy", "TEST_PROBES_CONFIG.copy", "TEST_LLDP_NEIGHBORS.copy", "TEST_BGP_CONFIG.copy", "TEST_INTERFACES.copy", "TEST_NTP_SERVERS.copy", "TEST_NTP_PEERS.copy", "TEST_ROUTE.copy"]}, "nvme.py": {"libraries": ["errno", "salt.utils.platform", "salt.utils.files", "logging", "salt.utils.path"], "function_names": ["nvme_nqn", "_linux_nqn", "__virtual__"], "function_calls": ["_linux_nqn"], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "log.debug", "line.strip", "ret.append", "line.startswith", "salt.utils", "errno.ENOENT", "ex.errno"]}, "nxos.py": {"libraries": ["os", "collections.abc.Iterable", "salt.exceptions.NxosClientError", "collections", "socket", "salt.exceptions.CommandExecutionError", "http.client", "salt.exceptions.NxosError", "salt.utils.args.clean_kwargs", "json", "re", "salt.exceptions.NxosRequestNotSupported", "logging", "salt.utils.http"], "function_names": ["version_info", "system_info", "_parse_plugins", "_parser", "request", "__init__", "_use_remote_connection", "parse_response", "_build_request", "_parse_software", "connect", "nxapi_request", "_prepare_conn_args", "ping", "_parse_hardware"], "function_calls": ["UHTTPConnection", "NxosClientError", "CommandExecutionError", "NxapiClient", "_parse_plugins", "_parser", "int", "NxosRequestNotSupported", "zip", "len", "NxosError", "_parse_software", "isinstance", "clean_kwargs", "_parse_hardware"], "class_names": ["UHTTPConnection", "NxapiClient"], "class_method_calls": ["self.connection", "socket.AF_UNIX", "self._prepare_conn_args", "log.info", "os.path", "json.dumps", "previous_commands.append", "output.get", "re.MULTILINE", "logging.getLogger", "self.nxargs", "json.loads", "matcher.finditer", "self._build_request", "self.path", "self._use_remote_connection", "kwargs.get", "self.NXAPI_UDS", "self.NXAPI_VERSION", "cmd_result.get", "client.request", "cmd.strip", "self.parse_response", "result.append", "sock.connect", "http.client", "self.sock", "self.NXAPI_UDS_URI_PATH", "salt.utils", "body.get", "socket.SOCK_STREAM", "socket.socket", "re.compile", "collections.OrderedDict", "line.groups", "self.NXAPI_REMOTE_URI_PATH", "response.read"]}, "opts.py": {"libraries": [], "function_names": ["opts"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["__pillar__.get", "__opts__.get"]}, "package.py": {"libraries": ["sys", "salt.utils.files", "pathlib"], "function_names": ["bundled", "pkg_type"], "function_calls": ["hasattr"], "class_names": [], "class_method_calls": ["pathlib.Path", "content.strip", "pkg_file.is_file", "salt.utils", "_fp.read"]}, "panos.py": {"libraries": ["xml.etree.ElementTree", "salt.utils.xmlutil", "logging"], "function_names": ["_get_config", "_move_before", "service_group_exists", "_set_config", "_default_ret", "_validate_response", "remove_config_lock", "commit_config", "service_exists", "add_config_lock", "_move_bottom", "move_config", "security_rule_exists", "__virtual__", "_build_members", "address_exists", "_move_after", "set_config", "delete_config", "address_group_exists", "clone_config", "edit_config", "_move_top", "_edit_config", "download_software", "rename_config"], "function_calls": ["_move_before", "_build_members", "_move_bottom", "_move_top", "_set_config", "_edit_config", "_default_ret", "_validate_response", "len", "_move_after", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "xml.to_dict", "head.split", "xpath.split", "ret.update", "ET.fromstring"]}, "pending_reboot.py": {"libraries": ["salt.utils.platform", "salt.utils.win_system", "logging"], "function_names": ["pending_reboot", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "philips_hue.py": {"libraries": ["time", "salt.utils.json", "salt.exceptions.MinionError", "salt.exceptions.CommandExecutionError", "http.client", "logging"], "function_names": ["_get_devices", "_set", "call_color", "call_effect", "call_alert", "call_status", "init", "call_blink", "call_brightness", "call_temperature", "__virtual__", "shutdown", "call_switch", "call_ping", "call_rename", "_get_lights", "call_lights", "_query", "ping"], "function_calls": ["_get_devices", "min", "float", "_set", "dict", "MinionError", "str", "_get_lights", "int", "call_blink", "sorted", "len", "CommandExecutionError", "_query", "isinstance", "max"], "class_names": ["Const"], "class_method_calls": ["Const.LAMP_OFF", "Const.COLOR_ORANGE", "Const.COLOR_WHITE", "Const.COLOR_YELLOW", "Const.COLOR_GREEN", "cnf.get", "Const.COLOR_RED", "colormap.get", "logging.getLogger", "color.split", "resp.reason", "devices.keys", "conn.getresponse", "time.sleep", "res.get", "kwargs.get", "conn.close", "Const.COLOR_PINK", "http.client", "Const.COLOR_DAYLIGHT", "Const.COLOR_BLUE", "salt.utils", "lights.get", "lights.keys", "Const.COLOR_PURPLE", "conn.request", "Const.LAMP_ON", "resp.read", "color.update", "resp.status"]}, "rest_sample.py": {"libraries": ["salt.utils.http", "logging"], "function_names": ["package_remove", "id", "service_start", "service_restart", "service_list", "fix_outage", "package_install", "alive", "service_status", "fns", "package_list", "initialized", "grains", "grains_refresh", "__virtual__", "shutdown", "package_status", "uptodate", "service_stop", "test_from_state", "init", "ping"], "function_calls": ["grains", "ping"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "kwargs.get", "salt.utils"]}, "smartos.py": {"libraries": ["os", "salt.utils.atomicfile", "salt.utils.files", "json", "logging", "salt.utils.data"], "function_names": ["image_vacuum", "image_absent", "vm_stopped", "source_absent", "_parse_vmconfig", "vm_running", "_is_docker_uuid", "__virtual__", "_load_config", "image_present", "_copy_lx_vars", "_split_docker_uuid", "_get_instance_changes", "config_absent", "_write_config", "source_present", "config_present", "vm_present", "_is_uuid", "vm_absent"], "function_calls": ["_load_config", "_write_config", "hex", "_parse_vmconfig", "_get_instance_changes", "_copy_lx_vars", "_split_docker_uuid", "list", "str", "int", "_is_uuid", "sorted", "len", "set", "isinstance", "_is_docker_uuid"], "class_names": [], "class_method_calls": ["uuid.split", "log.error", "imgconfig.get", "val.remove", "log.debug", "os.path", "json.dumps", "state.keys", "log.warning", "config.items", "logging.getLogger", "json.loads", "config_file.write", "var.lower", "img_env_var.startswith", "current.keys", "images.append", "name.lower", "val.append", "imgtags.get", "salt.utils", "config.update", "config_env_var.split", "optval.split", "new_disks.append", "vmconfig.get"]}, "ssh_sample.py": {"libraries": ["salt.utils.json", "salt.utils.vt.TerminalException", "salt.utils.vt_helper", "logging"], "function_names": ["initialized", "grains", "grains_refresh", "package_remove", "shutdown", "package_install", "parse", "service_stop", "service_start", "package_list", "service_list", "service_restart", "init", "fns", "ping", "__virtual__"], "function_calls": ["grains", "parse"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "jsonret.append", "__context__.get", "log.info", "salt.utils", "out.split", "kwargs.get"]}, "zfs.py": {"libraries": ["salt.utils.zfs", "tests.support.mock.patch", "tests.support.mock.MagicMock"], "function_names": ["_from_auto_dict", "__init__", "_to_auto", "_from_auto", "get_patched_utils", "_to_auto_dict"], "function_calls": ["MagicMock"], "class_names": ["ZFSMockData"], "class_method_calls": ["self._from_auto", "self.pmap_zpool", "self._to_auto", "self._from_auto_dict", "patch.object", "salt.utils", "self.pmap_zfs", "self.pmap_exec_zfs", "self._to_auto_dict", "self.pmap_exec_zpool"]}, "context.py": {"libraries": ["contextlib.contextmanager", "threading", "collections.abc.MutableMapping", "copy"], "function_names": ["__enter__", "__setitem__", "__len__", "clone", "func_globals_inject", "__iter__", "active", "__copy__", "__exit__", "__init__", "__getitem__", "__delitem__", "__str__", "_dict", "__deepcopy__", "__repr__"], "function_calls": ["iter", "type", "super", "ChildContextDict", "repr", "len", "isinstance", "hasattr"], "class_names": ["ContextDict", "NamespacedDictWrapper", "ChildContextDict"], "class_method_calls": ["func.__globals__", "self._data", "self._old_data", "func_globals.update", "self._threadsafe", "self.parent", "new_obj.global_data", "func.im_func", "copy.deepcopy", "self.__dict", "self.active", "injected_func_globals.append", "func.__func__", "self.global_data", "self._state", "threading.local", "self.pre_keys", "self._dict", "copy.copy"]}, "dunder.py": {"libraries": ["salt.loader.context"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["loader_context.named_context", "salt.loader"]}, "lazy.py": {"libraries": ["salt.exceptions", "collections.abc.MutableMapping", "logging"], "function_names": ["__setitem__", "__len__", "missing_fun_string", "__iter__", "verify_fun", "_load", "_missing", "__init__", "__getitem__", "_load_all", "__nonzero__", "__delitem__", "clear", "__bool__"], "function_calls": ["iter", "KeyError", "bool", "len", "getattr", "NotImplementedError"], "class_names": ["LazyDict"], "class_method_calls": ["logging.getLogger", "salt.exceptions", "self.loaded", "self.__nonzero__", "log.debug", "self.missing_fun_string", "lazy_obj.missing_fun_string", "self.clear", "self._dict", "self._missing", "self._load_all", "self._load"]}, "fluent_mod.py": {"libraries": ["threading", "logging.handlers", "time", "socket", "datetime", "salt._logging.LOG_LEVELS", "logging", "salt.utils.network", "salt.utils.msgpack"], "function_names": ["close", "format_graylog_v0", "_reconnect", "format_logstash_v1", "_make_packet", "format_gelf_v1_1", "setup_handlers", "setup", "emit_with_time", "__init__", "_send", "emit", "_send_internal", "_close", "get_global_sender", "format_logstash_v0", "formatTime", "__virtual__"], "function_calls": ["any", "super", "repr", "int", "FluentHandler", "FluentSender", "len", "MessageFormatter", "getattr", "isinstance", "print"], "class_names": ["FluentSender", "MessageFormatter", "FluentHandler"], "class_method_calls": ["record.pathname", "self.msg_path", "sock.settimeout", "self._make_packet", "log.debug", "self._send", "socket.AF_UNIX", "self.timeout", "self.lock", "logging.Formatter", "record.lineno", "record.__dict__", "self._send_internal", "self._close", "logging.getLogger", "self.payload_type", "fluent_handler.setFormatter", "fluent_handler.setLevel", "self.tag", "self.version", "record.created", "record.name", "self.acquire", "record.exc_info", "self.host", "record.processName", "self._reconnect", "syslog_levels.get", "socket.AF_INET", "kwargs.get", "log.trace", "threading.Lock", "self.socket", "self.verbose", "logging.Handler", "self.msg_type", "sock.connect", "record.process", "time.time", "self.format", "self.formatTime", "salt.utils", "socket.SOCK_STREAM", "self.sender", "self.pendings", "socket.socket", "record.getMessage", "self.tags", "__opts__.get", "message_dict.update", "datetime.datetime", "self.bufmax", "record.threadName", "self.emit_with_time", "record.levelname", "self.formatException", "self.release", "record.funcName", "self.port"]}, "log4mongo_mod.py": {"libraries": ["socket", "salt._logging.LOG_LEVELS", "log4mongo.handlers.MongoHandler", "logging", "log4mongo.handlers.MongoFormatter"], "function_names": ["setup_handlers", "format", "__virtual__"], "function_calls": ["FormatterWithHost", "MongoFormatter", "MongoHandler"], "class_names": ["FormatterWithHost"], "class_method_calls": ["__opts__.get", "socket.gethostname", "mongoformatter.format", "config_fields.items", "logging.Formatter"]}, "logstash_mod.py": {"libraries": ["zmq.error", "os", "logging.handlers", "salt.utils.json", "salt.utils.stringutils", "datetime", "salt._logging.LOG_LEVELS", "logging", "zmq", "salt.utils.network"], "function_names": ["publisher", "close", "format_v0", "makePickle", "setup_handlers", "__init__", "format_v1", "emit", "formatTime", "__virtual__"], "function_calls": ["any", "super", "repr", "LogstashFormatter", "getattr", "ZMQLogstashHander", "isinstance", "hasattr", "DatagramLogstashHandler"], "class_names": ["ZMQLogstashHander", "LogstashFormatter", "DatagramLogstashHandler"], "class_method_calls": ["record.pathname", "self.msg_path", "log.debug", "zmq.PUB", "self._address", "record.lineno", "logging.Formatter", "record.__dict__", "os.getpid", "zmq.error", "logging.getLogger", "logging.handlers", "zmq.LINGER", "record.name", "self.version", "self._publisher", "self._zmq_hwm", "zmq_handler.setLevel", "record.created", "record.exc_info", "record.processName", "zmq.Context", "self.publisher", "zmq_handler.setFormatter", "logging.NOTSET", "log.trace", "zmq.HWM", "logging.Handler", "udp_handler.setFormatter", "self.msg_type", "record.process", "self._pid", "self.format", "udp_handler.setLevel", "self.formatTime", "salt.utils", "__opts__.get", "record.getMessage", "datetime.datetime", "record.threadName", "record.levelname", "self.formatException", "zmq.RCVHWM", "record.funcName", "zmq.SNDHWM", "self._context"]}, "sentry_mod.py": {"libraries": ["raven.handlers.logging.SentryHandler", "raven.utils.urlparse.urlparse", "salt.loader", "raven.transport.TransportRegistry", "raven", "salt._logging.LOG_LEVELS", "re", "raven.transport.default_transports", "logging"], "function_names": ["get_config_value", "setup_handlers", "filter", "__virtual__"], "function_calls": ["any", "FilterExcludedMessages", "TransportRegistry", "SentryHandler", "urlparse", "get_config_value", "ValueError"], "class_names": ["FilterExcludedMessages"], "class_method_calls": ["logging.getLogger", "__opts__.get", "options.update", "handler.setLevel", "re.compile", "client.context", "record.getMessage", "regex.search", "log.debug", "salt.loader", "raven.Client", "handler.addFilter", "load_err_msg.append", "transport_registry.supported_scheme", "url.scheme", "log.info"]}, "master.py": {"libraries": ["threading.Event", "salt.exceptions.SaltException", "salt.utils.files", "salt.payload", "logging", "salt.utils.atomicfile", "salt.utils.process.Process", "salt.utils.stringutils", "salt.utils.zeromq.zmq", "signal", "salt.pillar", "salt.cache", "os", "salt.utils.verify", "threading.Thread", "salt.utils.minions", "salt.client", "salt.utils.platform", "salt.config", "salt.utils.cache.CacheCli"], "function_names": ["cleanup", "_get_cached_minion_data", "_get_live_minion_grains", "_get_live_minion_pillar", "secure", "_check_cmdline", "get_master_key", "_get_cached_mine_data", "clear_cached_minion_data", "run", "get_minion_grains", "ping_all_connected_minions", "get_running_jobs", "_get_minion_pillar", "get_cached_mine_data", "_read_proc_file", "_get_minion_grains", "stop", "_tgt_to_list", "get_values_of_matching_keys", "signal_handler", "__init__", "get_minion_pillar"], "function_calls": ["any", "SaltException", "type", "ConnectedCache", "super", "CacheTimer", "CacheWorker", "_read_proc_file", "dict", "Event", "list", "int", "_check_cmdline", "len", "cache_cli", "isinstance"], "class_names": ["MasterPillarUtil", "CacheWorker", "CacheTimer", "ConnectedCache"], "class_method_calls": ["ckminions.check_minions", "creq_in.close", "context.socket", "timer_in.recv", "logging.getLogger", "pillar.compile_pillar", "self.cleanup", "self.stop", "self._tgt_to_list", "kwargs.get", "self._get_live_minion_grains", "self.secure", "lret.items", "socket.setsockopt", "grains.copy", "self.__class__", "log.exception", "self.timer", "self.minions", "zmq.REP", "log.info", "pillars.pop", "salt.payload", "ret.extend", "clear_what.append", "log.warning", "self.tgt", "zmq.LINGER", "client.cmd", "fp_.read", "self.opts", "poller.poll", "client.cmd_async", "self.update_sock", "zmq.SUBSCRIBE", "cret.items", "creq_in.setsockopt", "self._get_live_minion_pillar", "self._get_cached_mine_data", "self.cache", "self._get_cached_minion_data", "self.grains_fallback", "self._get_minion_grains", "self._get_minion_pillar", "cached_grains.items", "cached_pillar.items", "os.chmod", "cupd_in.bind", "log.error", "self.daemon", "creq_in.bind", "self.signal_handler", "timer_in.close", "self.tgt_type", "context.term", "opts.get", "mine_data.pop", "cupd_in.close", "self.use_cached_grains", "zmq.Context", "fp_.close", "salt.cache", "log.trace", "cupd_in.setsockopt", "socks.get", "self.use_cached_pillar", "self.stopped", "socket.send", "self.saltenv", "socket.bind", "data.get", "self.cache_sock", "zmq.Poller", "self.pillar_fallback", "timer_in.setsockopt", "cw.start", "zmq.SUB", "salt.config", "key.read", "log.debug", "os.listdir", "zmq.PUB", "Thread.__init__", "os.path", "grains.get", "cc.get_cached", "self.timer_sock", "key_user.startswith", "self.upd_t_sock", "key_user.replace", "timer_in.connect", "salt.pillar", "creq_in.send", "creq_in.recv", "cc.put_cache", "zmq.ZMQError", "grains.pop", "ret.append", "cupd_in.recv", "salt.utils", "self.running", "poller.register", "salt.client", "conc.start", "signal.signal", "self.timer_stop", "os.remove", "zmq.POLLIN", "signal.SIGINT"]}, "cache_match.py": {"libraries": ["salt.utils.minions", "salt.utils.data", "logging"], "function_names": ["mmatch"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "ckminions._check_cache_minions", "salt.utils"]}, "compound_match.py": {"libraries": ["salt.utils.minions", "salt.loader", "seco.range", "logging"], "function_names": ["_load_matchers", "match"], "function_calls": ["str", "_load_matchers", "eval", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "opts.get", "log.debug", "words.pop", "salt.loader", "results.append", "tgt.split", "salt.utils", "ref.get"]}, "compound_pillar_exact_match.py": {"libraries": ["salt.utils.minions", "logging"], "function_names": ["mmatch"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils", "ckminions._check_compound_minions"]}, "confirm_top.py": {"libraries": ["salt.loader", "logging"], "function_names": ["confirm_top"], "function_calls": ["isinstance", "m"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.loader"]}, "data_match.py": {"libraries": ["fnmatch", "salt.utils.minions", "salt.loader", "logging", "salt.utils.network", "salt.utils.data"], "function_names": ["match"], "function_calls": ["str", "isinstance", "bool", "len"], "class_names": [], "class_method_calls": ["salt.loader", "logging.getLogger", "tgt.split", "fnmatch.fnmatch"]}, "glob_match.py": {"libraries": ["fnmatch", "logging"], "function_names": ["match"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "fnmatch.fnmatch", "opts.get"]}, "grain_match.py": {"libraries": ["salt.utils.data", "salt.defaults.DEFAULT_TARGET_DELIM", "logging"], "function_names": ["match"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "salt.utils", "log.error"]}, "grain_pcre_match.py": {"libraries": ["salt.utils.data", "salt.defaults.DEFAULT_TARGET_DELIM", "logging"], "function_names": ["match"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "salt.utils", "log.error"]}, "ipcidr_match.py": {"libraries": ["salt.utils.network", "salt._compat.ipaddress", "logging"], "function_names": ["match"], "function_calls": ["str", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "ipaddress.IPv6Address", "ipaddress.ip_network", "ipaddress.ip_address", "ipaddress.IPv4Address", "salt.utils", "tgt.version"]}, "list_match.py": {"libraries": ["logging"], "function_names": ["match"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "tgt.startswith", "opts.get", "tgt.endswith", "log.warning"]}, "nodegroup_match.py": {"libraries": ["salt.utils.minions", "salt.loader", "logging"], "function_names": ["_load_matchers", "match"], "function_calls": ["_load_matchers"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "salt.loader", "salt.utils"]}, "pcre_match.py": {"libraries": ["re"], "function_names": ["match"], "function_calls": ["bool"], "class_names": [], "class_method_calls": ["re.match", "opts.get"]}, "pillar_exact_match.py": {"libraries": ["salt.utils.data", "logging"], "function_names": ["match"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "log.debug", "log.info", "salt.utils"]}, "pillar_match.py": {"libraries": ["salt.utils.data", "salt.defaults.DEFAULT_TARGET_DELIM", "logging"], "function_names": ["match"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "log.debug", "log.info", "salt.utils"]}, "pillar_pcre_match.py": {"libraries": ["salt.utils.data", "salt.defaults.DEFAULT_TARGET_DELIM", "logging"], "function_names": ["match"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "log.debug", "log.info", "salt.utils"]}, "range_match.py": {"libraries": ["seco.range", "logging"], "function_names": ["match"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "range_.expand", "seco.range"]}, "deltaproxy.py": {"libraries": ["logging"], "function_names": ["initialized", "grains", "grains_refresh", "shutdown", "init", "ping", "__virtual__"], "function_calls": ["grains"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "DETAILS.get"]}, "proxy.py": {"libraries": ["salt.utils.platform", "logging"], "function_names": ["is_proxytype"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils", "opts.get"]}, "acme.py": {"libraries": ["salt.utils.dictdiffer", "logging"], "function_names": ["cert", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "aix_group.py": {"libraries": ["grp", "logging"], "function_names": ["getent", "info", "deluser", "members", "delete", "chgid", "add", "adduser", "__virtual__"], "function_calls": ["info"], "class_names": [], "class_method_calls": ["logging.getLogger", "grp.getgrnam", "grp.getgrall", "grinfo.gr_passwd", "grinfo.gr_name", "ret.append", "grinfo.gr_gid", "grinfo.gr_mem"]}, "aix_shadow.py": {"libraries": ["logging"], "function_names": ["login_failures", "unlock", "locked", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "line.split", "ret.append"]}, "aixpkg.py": {"libraries": ["os", "salt.utils.path", "salt.utils.pkg", "salt.exceptions.CommandExecutionError", "salt.utils.functools", "pathlib", "logging", "salt.utils.data", "copy"], "function_names": ["remove", "_is_installed", "upgrade_available", "_is_installed_rpm", "_list_pkgs_from_context", "latest_version", "install", "version", "_check_pkg", "list_pkgs", "__virtual__"], "function_calls": ["any", "_list_pkgs_from_context", "len", "CommandExecutionError", "_check_pkg", "version", "list_pkgs"], "class_names": [], "class_method_calls": ["name_chk.startswith", "logging.getLogger", "__context__.pop", "kwargs.pop", "log.debug", "filename.endswith", "copy.deepcopy", "line.split", "line.startswith", "pathlib.Path", "name_chk.split", "errors.append", "exc.info", "salt.utils", "os.path", "aix_line.split", "available_output.split", "kwargs.get"]}, "aliases.py": {"libraries": ["os", "salt.utils.atomicfile", "salt.utils.stringutils", "salt.utils.files", "salt.exceptions.SaltInvocationError", "re", "stat", "tempfile", "salt.utils.path"], "function_names": ["__parse_aliases", "rm_alias", "__get_aliases_filename", "list_aliases", "has_target", "get_target", "set_target", "__write_aliases_file"], "function_calls": ["__parse_aliases", "__get_aliases_filename", "list_aliases", "SaltInvocationError", "get_target", "__write_aliases_file", "isinstance"], "class_names": [], "class_method_calls": ["os.path", "afn_st.st_uid", "os.stat", "afn_st.st_gid", "out.name", "tempfile.NamedTemporaryFile", "line.strip", "__ALIAS_RE.match", "match.groups", "os.chown", "out.write", "ret.append", "salt.utils", "stat.S_IMODE", "out.append", "write_line.encode", "re.compile", "__opts__.get", "afn_st.st_mode", "os.chmod"]}, "alternatives.py": {"libraries": [], "function_names": ["remove", "set_", "install", "auto", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["line.startswith", "display.splitlines", "line.endswith"]}, "ansiblegate.py": {"libraries": ["sys", "os", "salt.utils.decorators.depends", "salt.utils.decorators.path", "salt.loader.dunder.__file_client__", "salt.fileclient", "logging"], "function_names": ["_changes", "__call__", "get_args", "playbooks", "_file_client", "__virtual__"], "function_calls": ["any", "setattr", "_changes", "AnsibleState", "depends", "all", "isinstance", "_file_client"], "class_names": ["AnsibleState"], "class_method_calls": ["kwargs.update", "logging.getLogger", "checks.get", "kwargs.pop", "kwargs.items", "err.__class__", "log.debug", "results.get", "sys.modules", "salt.fileclient", "salt.utils", "self.get_args", "__file_client__.value", "client._extrn_path", "args.append", "os.path", "data.get", "log.trace"]}, "apache.py": {"libraries": ["salt.utils.files", "os", "salt.utils.stringutils"], "function_names": ["configfile", "__virtual__"], "function_calls": ["print"], "class_names": [], "class_method_calls": ["configs.strip", "salt.utils", "os.path", "config_file.read", "current_configs.strip"]}, "apcups.py": {"libraries": ["salt.utils.decorators", "salt.utils.path", "logging"], "function_names": ["status_battery", "status", "_check_apcaccess", "status_charge", "status_load", "__virtual__"], "function_calls": ["status", "float", "_check_apcaccess"], "class_names": [], "class_method_calls": ["decorators.memoize", "logging.getLogger", "salt.utils", "line.split"]}, "apf.py": {"libraries": ["salt.exceptions.CommandExecutionError", "iptc", "salt.utils.path"], "function_names": ["_status_apf", "disable", "remove", "enable", "allow", "running", "deny", "refresh", "__apf_cmd", "reload", "__virtual__"], "function_calls": ["_status_apf", "__apf_cmd", "CommandExecutionError"], "class_names": [], "class_method_calls": ["table.chains", "chain.name", "salt.utils", "iptc.Table"]}, "apkpkg.py": {"libraries": ["salt.utils.itertools", "salt.exceptions.CommandExecutionError", "logging", "salt.utils.data", "copy"], "function_names": ["remove", "refresh_db", "_list_pkgs_from_context", "upgrade", "latest_version", "file_list", "file_dict", "install", "version", "list_upgrades", "owner", "purge", "list_pkgs", "__virtual__"], "function_calls": ["any", "remove", "refresh_db", "next", "iter", "_list_pkgs_from_context", "file_dict", "len", "CommandExecutionError", "isinstance", "list_pkgs"], "class_names": [], "class_method_calls": ["__context__.pop", "kwargs.pop", "name.split", "old.get", "__grains__.get", "line.endswith", "pkg_to_install.extend", "logging.getLogger", "copy.deepcopy", "cmd.extend", "out.splitlines", "pkgs.get", "kwargs.get", "cmd.append", "pkg_to_upgrade.extend", "line.split", "salt.utils", "output.split", "pkg_to_remove.extend", "files.append"]}, "aptly.py": {"libraries": ["os", "salt.utils.json", "salt.utils.stringutils", "salt.exceptions.SaltInvocationError", "re", "logging", "salt.utils.path"], "function_names": ["_validate_config", "_cmd_run", "delete_repo", "set_repo", "new_repo", "_format_repo_args", "list_snapshots", "get_repo", "get_config", "list_published", "list_mirrors", "list_repos", "cleanup_db", "__virtual__"], "function_calls": ["_validate_config", "_cmd_run", "dict", "SaltInvocationError", "_format_repo_args", "list", "str", "bool", "get_repo", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "settings.pop", "log.debug", "match.group", "cmd.insert", "ret.append", "line.strip", "line.split", "current_settings.pop", "cmd.extend", "salt.utils", "os.path", "failed_settings.update", "key.split", "cmd_ret.splitlines", "re.search", "cmd.append"]}, "aptpkg.py": {"libraries": ["salt.utils.data", "logging"], "function_names": ["held", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "state.get", "salt.utils", "ret.update"]}, "archive.py": {"libraries": ["errno", "os", "shlex", "string", "contextlib.closing", "salt.utils.url", "tarfile", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.utils.platform", "urllib.parse.urlparse", "re", "salt.utils.args", "logging", "salt.utils.hashutils", "stat", "salt.exceptions.CommandNotFoundError", "salt.utils.path"], "function_names": ["_read_cached_checksum", "_gen_checksum", "_update_checksum", "_is_bsdtar", "_cleanup_destdir", "_add_explanation", "_checksum_file_path", "_path_is_abs", "_compare_checksum", "_check_sig", "extracted"], "function_calls": ["_read_cached_checksum", "_gen_checksum", "urlparse", "_update_checksum", "int", "_compare_checksum", "CommandExecutionError", "str", "_checksum_file_path", "_path_is_abs", "_check_sig", "isinstance", "verify", "bool", "_cleanup_destdir", "_add_explanation", "closing", "_is_bsdtar", "enumerate", "len", "func"], "class_names": [], "class_method_calls": ["os.rmdir", "archive_format.lower", "kwargs.pop", "log.exception", "source_sum.get", "os.lstat", "log.debug", "stat.S_ISLNK", "cmd.format", "urlparsed_source.path", "urlparsed_scheme.lower", "stat.S_ISDIR", "log.info", "os.path", "line.rstrip", "enforce_failed.append", "urlparsed_source.netloc", "exc.errno", "log.warning", "re.search", "dir_result.get", "logging.getLogger", "os.sep", "lines.append", "parsed.netloc", "tar_cmd.extend", "opt.startswith", "urlparsed_source.scheme", "name.rstrip", "tarfile.open", "file_stat.st_gid", "tar_cmd.append", "recurse.append", "os.makedirs", "append_opt.replace", "string.ascii_lowercase", "drive.rstrip", "ret.setdefault", "fp_.write", "shlex.quote", "enforce_missing.append", "errors.append", "re.match", "salt.utils", "incorrect_type.append", "errno.ENOENT", "tar.getnames", "os.lchown", "shlex.split", "exc.strerror", "tarfile.ReadError", "full_path.rstrip", "tar_longopts.append", "errno.ENOTDIR", "path.lstrip", "tar.extractall", "file_stat.st_uid", "parsed.path"]}, "arista_pyeapi.py": {"libraries": ["pyeapi", "salt.utils.args.clean_kwargs", "logging"], "function_names": ["initialized", "shutdown", "conn", "call", "init", "ping", "__virtual__"], "function_calls": ["getattr", "clean_kwargs"], "class_names": [], "class_method_calls": ["logging.getLogger", "conn_args.get", "log.error", "opts.get", "conn_args.pop", "log.debug", "pyeapi.eapilib", "pyeapi.client", "proxy_dict.copy", "pyeapi_device.get"]}, "artifactory.py": {"libraries": ["logging"], "function_names": ["__fetch_from_artifactory", "downloaded"], "function_calls": ["str", "__fetch_from_artifactory"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug"]}, "at.py": {"libraries": ["logging"], "function_names": ["__virtual__", "present", "mod_watch", "watch", "absent"], "function_calls": ["len", "present", "map", "list"], "class_names": [], "class_method_calls": ["logging.getLogger"]}, "at_solaris.py": {"libraries": ["time", "salt.utils.stringutils", "salt.utils.files", "salt.utils.platform", "datetime", "re", "logging", "salt.utils.path"], "function_names": ["_atq", "at", "atrm", "jobcheck", "atc", "atq", "__virtual__"], "function_calls": ["_atq", "list", "str", "int", "len", "map", "atq"], "class_names": [], "class_method_calls": ["logging.getLogger", "re.compile", "jobs.append", "datetime.datetime", "rfh.readlines", "specs.append", "line.split", "line.startswith", "time.strptime", "jobid.split", "salt.utils", "job_kw_regex.match", "kwargs.get", "tmp.groups"]}, "augeas_cfg.py": {"libraries": ["os", "salt.utils.stringutils", "salt.exceptions.SaltInvocationError", "salt.utils.args", "re", "logging", "salt.utils.data", "augeas.Augeas"], "function_names": ["_match", "remove", "make_path", "__virtual__", "tree", "_recurmatch", "ls", "setvalue", "execute", "match", "get", "_check_load_paths", "_lstrip_word"], "function_calls": ["_match", "iter", "make_path", "dict", "SaltInvocationError", "_recurmatch", "getattr", "str", "len", "zip", "_Augeas", "func", "locals", "isinstance", "ValueError", "_check_load_paths", "_lstrip_word"], "class_names": [], "class_method_calls": ["log.error", "log.debug", "aug.load", "aug.save", "load_path.split", "log.info", "command.split", "os.path", "aug.set", "_paths.append", "aug.close", "logging.getLogger", "_Augeas.NONE", "matches.items", "value.strip", "path.startswith", "aug.remove", "aug.match", "salt.utils", "i.replace", "lens.endswith", "_Augeas.NO_MODL_AUTOLOAD", "path.rstrip", "prefix.rstrip", "path.lstrip", "aug.get", "re.sub", "aug.add_transform"]}, "aws_sqs.py": {"libraries": [], "function_names": ["absent", "exists", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "bamboohr.py": {"libraries": ["xml.etree.ElementTree", "salt.utils.http", "salt.utils.yaml", "logging"], "function_names": ["show_employee", "list_meta_fields", "list_users", "update_employee", "_apikey", "_query", "list_employees", "__virtual__"], "function_calls": ["show_employee", "iter", "next", "_apikey", "_query", "isinstance"], "class_names": [], "class_method_calls": ["cat.tag", "logging.getLogger", "__opts__.get", "item.tag", "log.debug", "items.keys", "user.items", "item.values", "field.text", "item.text", "salt.utils", "details.text", "ET.fromstring", "field.items", "details.values"]}, "baredoc.py": {"libraries": ["itertools", "os", "typing.Dict", "typing.List", "salt.utils.odict.OrderedDict", "salt.utils.doc", "salt.utils.files", "ast", "logging", "salt.exceptions.ArgumentValueError"], "function_names": ["_get_args", "list_modules", "state_docs", "_get_module_name", "list_states", "module_docs", "_parse_module_functions", "_get_func_aliases", "_get_files", "_parse_module_docs"], "function_calls": ["_get_args", "_get_module_name", "ArgumentValueError", "list", "_parse_module_functions", "OrderedDict", "sorted", "reversed", "_get_func_aliases", "isinstance", "_get_files", "_parse_module_docs"], "class_names": [], "class_method_calls": ["ast.NameConstant", "found_files.append", "ast.Num", "name.split", "itertools.zip_longest", "ret.update", "arg_strings.append", "backwards_args.items", "os.listdir", "function.args", "mod_name.split", "os.path", "fun_aliases.items", "found_files.extend", "ast.parse", "arg_default.value", "arg.arg", "func_list.append", "ret.items", "logging.getLogger", "ast.get_docstring", "ast.Str", "arg_default.n", "ast.Assign", "arg_default.s", "ast.FunctionDef", "assign.value", "salt.utils", "tree.body", "value.s", "module_py.endswith", "dirs.append", "assign.targets", "arg_default_strings.append", "fn.name", "cur_file.read", "fun_aliases.update", "key.s"]}, "bcache.py": {"libraries": ["os", "time", "re", "logging", "salt.utils.path"], "function_names": ["_run_all", "_fspath", "_bcpath", "detach", "_sizes", "_sysfs_attr", "_devbase", "config_", "status", "_bdev", "_fssys", "_bcsys", "back_make", "uuid", "_sysfs_parse", "__virtual__", "_syspath", "_alltrue", "_wipe", "super_", "stop", "_size_map", "attach_", "cache_make", "_devpath", "start", "_wait", "device"], "function_calls": ["_run_all", "_fspath", "_bcpath", "detach", "list", "int", "_sizes", "_sysfs_attr", "float", "lfunc", "_devbase", "_bdev", "_fssys", "status", "_bcsys", "uuid", "_sysfs_parse", "isinstance", "_syspath", "_alltrue", "bool", "_wipe", "super_", "_size_map", "stop", "attach_", "_devpath", "_wait", "len", "device"], "class_names": [], "class_method_calls": ["log.error", "log.debug", "intf.startswith", "result.update", "log.info", "os.path", "resdict.values", "log.log", "log.warning", "res.splitlines", "re.search", "logging.getLogger", "re.split", "attr.split", "key.strip", "line.strip", "bintf.items", "time.sleep", "bintf.values", "statres.pop", "configres.pop", "binkeys.append", "logging.WARNING", "binkeys.extend", "interres.pop", "logging.ERROR", "line.split", "found.append", "salt.utils", "updates.items", "val.strip", "bdevs.append", "logging.INFO", "interres.update", "udev.get", "intflist.remove", "kwargs.items", "sysfs.get", "logging.CRITICAL", "key.startswith", "state.append", "re.sub", "logging.TRACE", "mods.items", "logging.DEBUG", "result.pop"]}, "beacons.py": {"libraries": ["copy"], "function_names": ["list_to_dict", "remove_hidden_options"], "function_calls": ["map", "list"], "class_names": [], "class_method_calls": ["_config.update", "func.startswith", "config.remove", "copy.copy"]}, "bigip.py": {"libraries": ["salt.utils.json"], "function_names": ["manage_profile", "modify_monitor", "modify_pool_member", "list_virtual", "delete_virtual", "delete_node", "create_profile", "_strip_key", "_check_for_changes", "_test_output", "create_pool", "delete_pool_member", "modify_node", "add_pool_member", "manage_pool_members", "create_monitor", "manage_monitor", "delete_pool", "list_profile", "modify_profile", "list_node", "__virtual__", "modify_virtual", "delete_profile", "list_monitor", "modify_pool", "create_virtual", "manage_node", "delete_monitor", "list_pool", "create_node", "_load_result", "manage_pool", "manage_virtual"], "function_calls": ["_strip_key", "_check_for_changes", "_test_output", "_load_result", "isinstance"], "class_names": [], "class_method_calls": ["dictionary.items", "salt.utils", "kwargs.items"]}, "bluez_bluetooth.py": {"libraries": ["shlex", "bluetooth", "salt.utils.validate.net", "salt.exceptions.CommandExecutionError"], "function_names": ["power", "block", "scan", "unblock", "stop", "unpair", "start", "pair", "version", "noscan", "discoverable", "address_", "__virtual__"], "function_calls": ["CommandExecutionError", "int", "address_"], "class_names": [], "class_method_calls": ["bluetooth.discover_devices", "shlex.quote", "ret.append", "line.split", "line.startswith", "salt.utils", "bluetooth.__version__"]}, "boto3_elasticache.py": {"libraries": [], "function_names": ["cache_cluster_present", "cache_cluster_absent", "cache_subnet_group_present", "cache_subnet_group_absent", "_diff_replication_group", "_diff_cache_cluster", "_diff_cache_subnet_group", "replication_group_present", "replication_group_absent", "__virtual__"], "function_calls": ["_diff_replication_group", "_diff_cache_cluster", "_diff_cache_subnet_group"], "class_names": [], "class_method_calls": ["k.startswith", "modifiable.items", "args.items", "current.get"]}, "boto3_elasticsearch.py": {"libraries": ["salt.utils.json", "salt.utils.versions.Version", "logging"], "function_names": ["upgraded", "__virtual__", "present", "latest", "tagged", "_check_return_value", "absent"], "function_calls": ["Version", "upgraded", "latest", "tagged", "_check_return_value", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "current_version.split", "log.debug", "current_domain.get", "salt.utils", "current_tags.keys", "latest_version.split", "current_tags.update"]}, "boto3_route53.py": {"libraries": ["salt.exceptions.SaltInvocationError", "uuid", "logging", "salt.utils.dictupdate", "salt.utils.data"], "function_names": ["rr_absent", "hosted_zone_present", "rr_present", "hosted_zone_absent", "__virtual__"], "function_calls": ["SaltInvocationError", "getattr", "str", "sorted", "len", "locals", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "ResourceRecordSet.update", "log.debug", "v.get", "rr.split", "rrset.get", "instance.id", "rr.startswith", "log.info", "salt.utils", "r.get", "log.warning", "zone.get", "uuid.uuid4"]}, "boto3_sns.py": {"libraries": ["salt.utils.json", "re", "copy", "logging"], "function_names": ["topic_present", "_json_objs_equal", "topic_absent", "__virtual__"], "function_calls": ["len", "isinstance", "_json_objs_equal"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "log.debug", "current_attrs.get", "endpoint.replace", "copy.deepcopy", "want_attrs.get", "matches.groupdict", "current.get", "salt.utils", "log.warning", "re.search"]}, "boto_apigateway.py": {"libraries": ["os", "salt.utils.json", "hashlib", "salt.utils.files", "re", "logging", "salt.utils.yaml"], "function_names": ["_aws_model_ref_from_swagger_ref", "_validate_lambda_funcname_format", "_parse_method_data", "usage_plan_association_absent", "_validate_swagger_file", "_validate_error_response_model", "_update_schema_to_aws_notation", "_is_http_error_rescode", "_models", "_get_desired_deployment_id", "_parse_method_response", "restApiId", "location", "_find_patterns", "absent", "usage_plan_absent", "_dict_to_json_pretty", "info_json", "_name_matches", "overwrite_stage_variables", "delete_api", "_get_response_template", "_lambda_uri", "paths", "verify_api", "no_more_deployments_remain", "publish_api", "_lambda_name", "_log_changes", "deploy_resources", "basePath", "usage_plan_association_present", "rest_api_name", "_cleanup_api", "_build_dependent_model_list", "__virtual__", "_get_stage_variables", "info", "_object_reducer", "usage_plan_present", "_get_current_deployment_id", "_resolve_api_id", "name", "schema", "md5_filehash", "deploy_api", "_set_current_deployment", "deploy_models", "headers", "deployment_label_json", "_deploy_method", "_get_current_deployment_label", "_one_or_more_stages_remain", "_get_pattern_for_schema", "_get_model_without_dependencies", "_log_error_and_abort", "_gen_md5_filehash", "present", "delete_stage", "_build_all_dependencies", "__init__", "deployment_label", "rest_api_version", "models"], "function_calls": ["type", "list", "_Swagger", "_dict_to_json_pretty", "_name_matches", "OSError", "_log_changes", "str", "isinstance", "_get_stage_variables", "locals", "_object_reducer", "dict", "bool", "ValueError", "iter", "_log_error_and_abort", "_gen_md5_filehash", "len", "set"], "class_names": ["SwaggerMethodResponse", "SwaggerParameter", "_Swagger"], "class_method_calls": ["swagger.deploy_models", "schema.items", "self.RESPONSE_OPTION_TEMPLATE", "method_name.lower", "self._get_current_deployment_id", "_Swagger.REQUEST_OPTION_TEMPLATE", "r.split", "result.get", "p.schema", "create_model_response.get", "logging.getLogger", "ret.get", "self._build_dependent_model_list", "properties.items", "mr.get", "exists_response.get", "swagger.no_more_deployments_remain", "_hash.hexdigest", "self._validate_error_response_model", "actual_param.get", "dep_models_list.extend", "self._deploy_method", "models_dict.items", "e.args", "_schema.get", "models.get", "self._common_aws_args", "self.deployment_label_json", "resobj.get", "obj.get", "self._validate_swagger_file", "self._get_current_deployment_label", "method_name.upper", "m.lower", "_Swagger.SWAGGER_OBJ_V2_FIELDS_REQUIRED", "mods.get", "self._restApiId", "self.md5_filehash", "opobj.get", "f.read", "log.info", "self.paths", "paths.items", "update_model_schema_response.get", "self._find_patterns", "self._is_http_error_rescode", "self._validate_lambda_funcname_format", "o.items", "resource.get", "integration.get", "deployment.get", "__pillar__.get", "models_dict.pop", "res.get", "ref.split", "_Swagger.SwaggerMethodResponse", "lambda_name.strip", "_Swagger.SwaggerParameter", "name.lower", "_Swagger.REQUEST_TEMPLATE", "self._cleanup_api", "result.extend", "response.get", "swagger.verify_api", "resources.get", "func_params.get", "re.match", "self.rest_api_name", "obj_schema.get", "schemaobj.get", "self._get_desired_deployment_id", "re.sub", "p.name", "self._get_model_without_dependencies", "model_exists_response.get", "newlist.append", "self.name", "self._api_name", "_schema.update", "m.get", "_Swagger.SWAGGER_OBJ_V2_FIELDS", "plan.get", "hashlib.md5", "_Swagger.SWAGGER_OPERATION_NAMES", "self._update_schema_to_aws_notation", "method.get", "self._get_pattern_for_schema", "self._swagger_version", "mir.get", "self.models", "schemaobjref.split", "_Swagger.AWS_API_DESCRIPTION", "self._swagger_file", "overwrite.get", "swagger.delete_stage", "stages_to_remove.append", "swagger.restApiId", "self._resolve_api_id", "path.startswith", "swagger.deploy_resources", "self._paramdict", "self._stage_name", "self._aws_model_ref_from_swagger_ref", "delete_api_response.get", "self._cfg", "model.get", "self.restApiId", "_Swagger.SWAGGER_VERSIONS_SUPPORTED", "self._build_all_dependencies", "self._md5_filehash", "res.reverse", "self._parse_method_response", "lambda_desc.get", "self._get_response_template", "self.info", "swagger.delete_api", "stage.get", "swagger.publish_api", "self._one_or_more_stages_remain", "self._response_template", "self._parse_method_data", "self._lambda_funcname_format", "os.path", "self._error_response_template", "pathData.items", "self.location", "stages_to_add.append", "restApiId.setter", "method_response.get", "self._r", "_hash.update", "ops.items", "method_response.schema", "name.endswith", "header_data.get", "self._set_current_deployment", "result.append", "self.deployment_label", "self._lambda_uri", "self.RESPONSE_TEMPLATE", "cl.append", "salt.utils", "swagger.deploy_api", "self.info_json", "re.compile", "delres.get", "_Swagger.JSON_SCHEMA_DRAFT_4", "self._deploymentId", "dep_list.remove", "self._models", "_Swagger.VENDOR_EXT_PATTERN", "swagger.overwrite_stage_variables", "method_response.headers", "self._lambda_name"]}, "boto_asg.py": {"libraries": ["salt.utils.stringutils", "hashlib", "salt.exceptions.SaltInvocationError", "logging", "salt.utils.dictupdate", "copy"], "function_names": ["absent", "present", "_determine_scaling_policies", "_determine_scheduled_actions", "_determine_notification_info", "_determine_termination_policies", "_alarms_present", "__virtual__"], "function_calls": ["SaltInvocationError", "_determine_scaling_policies", "_determine_scheduled_actions", "_determine_notification_info", "enumerate", "str", "len", "_determine_termination_policies", "_alarms_present"], "class_names": [], "class_method_calls": ["logging.getLogger", "vpc_zone_identifier.append", "dictupdate.update", "log.debug", "results.get", "proposed.setdefault", "copy.deepcopy", "action.replace", "new_actions.append", "hashlib.md5", "tmp.items", "scheduled_actions.items", "salt.utils", "vpc_id.get", "args.update", "log.warning", "config.items"]}, "boto_cfn.py": {"libraries": ["salt.utils.compat", "xml.etree.ElementTree", "salt.utils.json", "logging"], "function_names": ["_get_error", "__virtual__", "present", "_get_template", "_validate", "absent"], "function_calls": ["isinstance", "_get_error", "_get_template", "_validate"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "error.split", "salt.utils", "ET.fromstring"]}, "boto_cloudfront.py": {"libraries": ["difflib", "logging"], "function_names": ["present", "_yaml_safe_dump", "__virtual__"], "function_calls": ["_yaml_safe_dump", "bool"], "class_names": [], "class_method_calls": ["logging.getLogger", "msg.format", "difflib.unified_diff"]}, "boto_cloudtrail.py": {"libraries": ["os", "salt.utils.data", "os.path", "logging"], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["locals", "bool"], "class_names": [], "class_method_calls": ["logging.getLogger", "bucket_vars.items", "os.linesep", "salt.utils", "tagchange.items", "r.get", "diff.get", "_describe.get"]}, "boto_cloudwatch.py": {"libraries": ["boto.ec2.cloudwatch", "salt.utils.json", "boto.ec2.cloudwatch.dimension", "salt.utils.odict", "boto.ec2.cloudwatch.listelement", "yaml", "logging", "salt.utils.versions", "boto"], "function_names": ["dimension_presenter", "get_all_alarms", "delete_alarm", "_safe_dump", "get_alarm", "create_or_update_alarm", "_metric_alarm_to_dict", "boto_listelement_presenter", "convert_to_arn", "__virtual__"], "function_calls": ["_safe_dump", "dict", "list", "convert_to_arn", "int", "getattr", "_metric_alarm_to_dict", "_get_conn", "len", "float", "isinstance", "hasattr"], "class_names": [], "class_method_calls": ["log.error", "name.startswith", "arn.split", "dumper.represent_list", "conn.describe_alarms", "ok_actions.split", "log.info", "logging.getLogger", "results.append", "alarm_actions.split", "odict.OrderedDict", "conn.create_alarm", "boto.ec2", "arn.startswith", "insufficient_data_actions.split", "conn.delete_alarms", "salt.utils", "logging.CRITICAL", "dumper.represent_dict", "yaml.add_representer"]}, "boto_cloudwatch_event.py": {"libraries": ["salt.utils.json", "os", "logging"], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["locals", "isinstance", "bool"], "class_names": [], "class_method_calls": ["target.get", "logging.getLogger", "rule_vars.items", "log.error", "os.linesep", "removes.index", "t.get", "removes.pop", "i.get", "salt.utils", "r.get", "_describe.get"]}, "boto_cognitoidentity.py": {"libraries": ["logging"], "function_names": ["pool_present", "pool_absent", "_role_present", "_get_object", "__virtual__"], "function_calls": ["dict", "_role_present", "len", "isinstance", "_get_object"], "class_names": [], "class_method_calls": ["logging.getLogger", "request_params.pop", "request_params.update", "__pillar__.get", "identity_pool.get", "r.get", "updated_identity_pool.get", "existing_identity_pool.get"]}, "boto_datapipeline.py": {"libraries": ["salt.utils.json", "datetime", "difflib", "salt.utils.data", "copy"], "function_names": ["_pipeline_objects", "absent", "mutating_helper", "_id_or_key", "_recursive_compare", "_standardize", "_parameter_values", "_dict_to_list_ids", "_parameter_objects", "present", "_immutable_fields_error", "_cleaned", "_properties_from_dict", "_pipeline_present_with_definition", "_diff", "__virtual__"], "function_calls": ["mutating_helper", "_pipeline_objects", "_standardize", "_recursive_compare", "_parameter_values", "_dict_to_list_ids", "_parameter_objects", "dict", "_immutable_fields_error", "_cleaned", "_properties_from_dict", "zip", "len", "sorted", "isinstance", "_pipeline_present_with_definition", "_diff"], "class_names": [], "class_method_calls": ["datetime.datetime", "objects.items", "structure.items", "d.items", "old_pipeline_definition.pop", "structure.sort", "copy.deepcopy", "v1.sort", "v2.sort", "from_pillars.update", "difflib.unified_diff", "element.update", "pipeline_definition.get", "salt.utils", "new_pipeline_definition.pop", "fields.append", "start_date_time.strftime", "list_with_ids.append"]}, "boto_dynamodb.py": {"libraries": ["sys", "math", "datetime", "logging", "salt.utils.dictupdate", "copy"], "function_names": ["_global_indexes_present", "absent", "_update_global_secondary_indexes", "present", "_partition_index_names", "_determine_gsi_updates", "_add_global_secondary_index", "_ensure_backup_datapipeline_present", "_get_deterministic_value_for_table_name", "_add_changes", "_next_datetime_with_utc_hour", "_alarms_present", "__virtual__"], "function_calls": ["_global_indexes_present", "iter", "next", "_update_global_secondary_indexes", "_partition_index_names", "_ensure_backup_datapipeline_present", "_determine_gsi_updates", "_add_global_secondary_index", "hash", "str", "_get_deterministic_value_for_table_name", "_add_changes", "GsiNotUpdatableError", "_next_datetime_with_utc_hour", "len", "set", "_alarms_present"], "class_names": ["GsiNotUpdatableError"], "class_method_calls": ["current_value.get", "changes_new.setdefault", "provisioned_throughput.get", "datetime.timedelta", "current_throughput.get", "entry.values", "tmp.items", "current_config.get", "entry.keys", "sys.stdout", "logging.getLogger", "changes_old.setdefault", "today.day", "results.get", "copy.deepcopy", "today.month", "gsi_config.keys", "math.ceil", "new_value.get", "description.get", "datapipeline_ret.get", "index_updates.keys", "comments.append", "datetime.date", "provisioned_gsi_config.keys", "new_config.get", "today.year", "new_throughput.get", "logging.basicConfig", "logging.INFO", "new_index_names.add", "datetime.datetime", "index.values", "dictupdate.update", "existing_index_names.add"]}, "boto_ec2.py": {"libraries": ["salt.exceptions.CommandExecutionError", "time.sleep", "time.time", "salt.exceptions.SaltInvocationError", "logging", "salt.utils.dictupdate", "salt.utils.data"], "function_names": ["instance_absent", "_eni_groups", "volumes_tagged", "volume_present", "eni_absent", "instance_present", "eni_present", "private_ips_absent", "_eni_attribute", "snapshot_created", "key_absent", "key_present", "volume_absent", "private_ips_present", "__virtual__"], "function_calls": ["sleep", "_eni_groups", "range", "time", "SaltInvocationError", "dict", "list", "_eni_attribute", "len", "getattr", "CommandExecutionError", "set", "isinstance"], "class_names": [], "class_method_calls": ["attach_data.devic", "log.error", "tags.get", "log.debug", "arecord.pop", "instance.ip_address", "log.info", "curr.get", "add.update", "log.warning", "logging.getLogger", "instance.placement", "vol.attach_data", "no_can_do.get", "curr_tags.get", "time.sleep", "eni.get", "attach_data.instance_id", "attributes.items", "attach_data.device", "group_ids.sort", "filters.update", "_groups.sort", "tags.keys", "ips_not_removed.append", "salt.utils", "msg.format", "ips_to_remove.append", "ips_to_add.append", "ips_not_added.append", "dictupdate.update", "vol.zone", "curr_tags.keys", "r.get"]}, "boto_efs.py": {"libraries": ["salt.utils.versions", "boto3", "logging"], "function_names": ["set_security_groups", "get_tags", "create_mount_target", "get_file_systems", "delete_file_system", "create_tags", "delete_mount_target", "create_file_system", "_get_conn", "get_mount_targets", "delete_tags", "__virtual__"], "function_calls": ["isinstance", "_get_conn"], "class_names": [], "class_method_calls": ["client.describe_mount_targets", "logging.getLogger", "boto3.client", "client.create_file_system", "client.delete_mount_target", "result.extend", "client.describe_tags", "new_tags.append", "profile.pop", "client.create_tags", "client.delete_tags", "client.delete_file_system", "client.create_mount_target", "client.modify_mount_target_security_groups", "salt.utils", "tags.items", "client.describe_file_systems"]}, "boto_elasticache.py": {"libraries": ["logging"], "function_names": ["cache_cluster_present", "absent", "cache_cluster_absent", "creategroup", "subnet_group_absent", "subnet_group_present", "present", "replication_group_present", "replication_group_absent", "__virtual__"], "function_calls": ["creategroup", "present", "absent"], "class_names": [], "class_method_calls": ["logging.getLogger", "security_group_ids.extend", "log.info", "log.error"]}, "boto_elasticsearch_domain.py": {"libraries": ["salt.utils.json", "os", "logging"], "function_names": ["absent", "present", "_compare_json", "__virtual__"], "function_calls": ["str", "isinstance", "_compare_json"], "class_names": [], "class_method_calls": ["logging.getLogger", "os.linesep", "opts.pop", "e.message", "salt.utils", "r.get", "es_opts.items", "_status.get", "_describe.get"]}, "boto_elb.py": {"libraries": ["salt.utils.stringutils", "hashlib", "salt.exceptions.SaltInvocationError", "re", "logging", "salt.utils.dictupdate", "salt.utils.data"], "function_names": ["absent", "_listeners_present", "_policy_cname", "_zones_present", "register_instances", "present", "_attributes_present", "_health_check_present", "_elb_present", "_alarms_present", "_tags_present", "_policies_present", "_security_groups_present", "_subnets_present", "__virtual__"], "function_calls": ["type", "_zones_present", "_attributes_present", "_health_check_present", "_elb_present", "list", "str", "sorted", "_tags_present", "isinstance", "_subnets_present", "locals", "_listeners_present", "SaltInvocationError", "_security_groups_present", "_policies_present", "_policy_cname", "len", "set", "_alarms_present"], "class_names": [], "class_method_calls": ["log.error", "l.get", "attrs_to_set.append", "b.get", "log.debug", "ret.update", "policy.items", "backends_to_update.add", "expected_policies_by_backend.get", "hashlib.md5", "log.info", "cname.pop", "policies_by_cname.keys", "health_check.items", "vpc_id.get", "expected_listeners_by_tuple.items", "actual_policies_by_backend.get", "default_aws_policies.add", "logging.getLogger", "tags_to_remove.append", "to_create.append", "current.items", "policy_names.add", "results.get", "tags_to_add.pop", "to_delete.append", "policy_type.endswith", "actual_policies_by_listener.get", "msg.append", "cd.get", "expected_policies_by_backend.items", "subnets.append", "actual_policies_by_listener.items", "actual_listeners_by_tuple.items", "listener.setdefault", "listener.get", "to_disable.append", "tags.keys", "re.match", "salt.utils", "tags_to_add.keys", "listeners_to_update.add", "_cd.get", "msg.format", "to_enable.append", "lb.get", "expected_policies_by_listener.get", "tags_to_update.keys", "cname.update", "expected_policies_by_listener.items", "actual_policies_by_backend.items", "sbp.startswith", "security_groups.split", "sbp.endswith"]}, "boto_elbv2.py": {"libraries": ["copy", "logging"], "function_names": ["targets_registered", "delete_target_group", "create_target_group", "targets_deregistered", "__virtual__"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["health.get", "logging.getLogger", "newhealth_mock.update", "copy.copy"]}, "boto_iam.py": {"libraries": ["os", "xml.etree.ElementTree", "salt.utils.json", "salt.utils.stringutils", "salt.utils.odict", "salt.utils.files", "logging", "salt.utils.dictupdate", "salt.utils.data"], "function_names": ["_delete_key", "_user_policies_deleted", "policy_present", "group_present", "_get_error", "server_cert_absent", "_group_policies_present", "group_absent", "_case_group", "server_cert_present", "user_absent", "keys_present", "_group_policies_attached", "__virtual__", "_user_policies_detached", "saml_provider_present", "account_policy", "keys_absent", "_group_policies_detached", "_case_password", "_group_policies_deleted", "user_present", "saml_provider_absent", "_user_policies_present", "_user_policies_attached", "policy_absent"], "function_calls": ["range", "_delete_key", "list", "_user_policies_deleted", "_get_error", "_group_policies_present", "str", "_case_group", "isinstance", "_group_policies_attached", "_user_policies_detached", "_group_policies_detached", "bool", "_case_password", "_group_policies_deleted", "_user_policies_present", "_user_policies_attached", "len", "locals"], "class_names": [], "class_method_calls": ["log.debug", "groupdict.get", "error.split", "_users.append", "policies_to_create.items", "os.path", "_to_modify.extend", "config.items", "logging.getLogger", "policy_data.get", "policies_to_delete.append", "policies.items", "userdict.get", "policies_to_detach.append", "odict.OrderedDict", "save_format.format", "salt.utils", "policy.get", "_wrf.write", "_policies.update", "dictupdate.update", "x.get", "policies_to_attach.append", "new_keys.items", "r.get", "ET.fromstring", "version.get", "entities.get"]}, "boto_iot.py": {"libraries": ["os", "time", "salt.utils.json", "datetime", "logging", "salt.utils.data"], "function_names": ["policy_present", "topic_rule_absent", "policy_detached", "thing_type_present", "thing_type_absent", "policy_absent", "policy_attached", "topic_rule_present", "__virtual__"], "function_calls": ["locals", "isinstance", "bool"], "class_names": [], "class_method_calls": ["logging.getLogger", "versions.get", "os.linesep", "datetime.datetime", "_deprecation_date_str.find", "_existing_thing_type.get", "time.sleep", "salt.utils", "policy.get", "r.get", "_elapsed_time_delta.seconds", "version.get", "_thing_type_metadata.get", "log.warning"]}, "boto_kinesis.py": {"libraries": ["logging"], "function_names": ["absent", "_add_changes", "present", "__virtual__"], "function_calls": ["list", "set", "_add_changes", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "comments.append", "stream_details.get", "new_monitoring_set.difference", "log.info", "old_monitoring_set.difference", "new_monitoring_set.intersection"]}, "boto_kms.py": {"libraries": ["salt.utils.dictupdate", "salt.exceptions.SaltInvocationError"], "function_names": ["_key_rotation", "__virtual__", "key_present", "_key_policy", "_key_enabled", "_key_description", "_key_present"], "function_calls": ["SaltInvocationError", "_key_policy", "_key_present", "isinstance", "_key_enabled", "_key_description", "_key_rotation"], "class_names": [], "class_method_calls": ["dictupdate.update"]}, "boto_lambda.py": {"libraries": ["os", "salt.utils.json", "hashlib", "salt.utils.files", "salt.exceptions.SaltInvocationError", "logging", "salt.utils.dictupdate", "salt.utils.data"], "function_names": ["event_source_mapping_present", "function_absent", "_function_config_present", "_resolve_vpcconfig", "_get_role_arn", "_function_code_present", "function_present", "alias_present", "alias_absent", "event_source_mapping_absent", "_get_function_arn", "_function_permissions_present", "__virtual__"], "function_calls": ["SaltInvocationError", "_function_config_present", "_resolve_vpcconfig", "_function_code_present", "bool", "_get_role_arn", "set", "_get_function_arn", "isinstance", "_function_permissions_present"], "class_names": [], "class_method_calls": ["name.startswith", "sha.update", "f.read", "os.path", "func.get", "logging.getLogger", "_ret.get", "oldval.pop", "_r.get", "diffs.items", "permission.keys", "salt.utils", "diff.get", "options.items", "os.linesep", "sha.digest", "dictupdate.update", "conf.setdefault", "hashlib.sha256", "Permissions.items", "keyset.issuperset", "r.get", "desc.get", "conf.pop"]}, "boto_rds.py": {"libraries": ["os", "salt.utils.data", "salt.exceptions.SaltInvocationError", "logging"], "function_names": ["subnet_group_absent", "__virtual__", "subnet_group_present", "present", "replica_present", "parameter_present", "absent"], "function_calls": ["str", "SaltInvocationError", "type", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "options.get", "__salt__.missing_fun_string", "os.linesep", "params.get", "res.get", "log.debug", "items.items", "subnet_ids.append", "salt.utils", "replica_exists.get", "r.get", "exists.get"]}, "boto_route53.py": {"libraries": ["salt.utils.json", "salt.exceptions.SaltInvocationError", "uuid", "logging", "salt.utils.data"], "function_names": ["__virtual__", "present", "rr_absent", "hosted_zone_present", "rr_present", "hosted_zone_absent", "absent"], "function_calls": ["SaltInvocationError", "present", "str", "len", "getattr", "isinstance", "absent"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "vpcs.values", "value.split", "deets.get", "value.startswith", "_values.sort", "log.info", "x.rstrip", "salt.utils", "_r_values.sort", "uuid.uuid4"]}, "boto_s3.py": {"libraries": ["salt.utils.hashutils", "difflib", "copy", "logging"], "function_names": ["_yaml_safe_dump", "object_present", "__virtual__"], "function_calls": ["_yaml_safe_dump", "frozenset"], "class_names": [], "class_method_calls": ["logging.getLogger", "combined_extra_args.keys", "copy.deepcopy", "difflib.unified_diff", "salt.utils", "combined_extra_args.items", "combined_extra_args.setdefault"]}, "boto_s3_bucket.py": {"libraries": ["salt.utils.json", "copy", "logging"], "function_names": ["absent", "_compare_policy", "_get_canonical_id", "present", "_acl_to_grant", "_compare_json", "_get_role_arn", "_compare_acl", "_normalize_user", "_prep_acl_for_compare", "_compare_replication", "__virtual__"], "function_calls": ["_get_canonical_id", "_acl_to_grant", "bool", "_get_role_arn", "_normalize_user", "comparator", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "ret.get", "ACL.get", "item.split", "name.startswith", "desired.get", "config_items.append", "item.get", "owner_canonical_grant.update", "copy.deepcopy", "current.get", "salt.utils", "r.get", "log.warning", "_describe.get"]}, "boto_secgroup.py": {"libraries": ["salt.utils.dictupdate", "pprint", "salt.exceptions.SaltInvocationError", "logging"], "function_names": ["absent", "_rules_present", "_check_rule", "__virtual__", "_get_rule_changes", "present", "_rules_egress_present", "_split_rules", "_tags_present", "_security_group_present"], "function_calls": ["_rules_present", "_check_rule", "_get_rule_changes", "_rules_egress_present", "SaltInvocationError", "str", "int", "_split_rules", "_tags_present", "len", "isinstance", "_security_group_present"], "class_names": [], "class_method_calls": ["pprint.pformat", "logging.getLogger", "rule.get", "tags_to_update.keys", "to_create.append", "rule.copy", "dictupdate.update", "log.debug", "rule.pop", "_rule.get", "_rule.pop", "to_delete.append", "split.append", "tags_to_add.pop", "tags_to_add.keys", "sg.get", "tags_to_remove.append"]}, "boto_sns.py": {"libraries": ["re"], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["len"], "class_names": [], "class_method_calls": ["_endpoint.replace", "__opts__.get", "failed_unsubscribe_subscriptions.append", "matches.groupdict", "re.search"]}, "boto_sqs.py": {"libraries": ["salt.utils.json", "difflib", "logging"], "function_names": ["absent", "present", "_yaml_safe_dump", "__virtual__"], "function_calls": ["str", "isinstance", "_yaml_safe_dump"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "current_attributes.get", "current_attributes.copy", "final_attributes.update", "difflib.unified_diff", "salt.utils", "attributes.items"]}, "boto_ssm.py": {"libraries": ["salt.utils.json", "salt.utils.versions", "logging"], "function_names": ["get_parameter", "put_parameter", "delete_parameter", "__virtual__"], "function_calls": ["AssertionError"], "class_names": [], "class_method_calls": ["logging.getLogger", "json.loads", "conn.get_parameter", "conn.put_parameter", "conn.delete_parameter", "salt.utils", "log.warning", "conn.exceptions"]}, "boto_vpc.py": {"libraries": ["salt.utils.dictupdate", "logging"], "function_names": ["subnet_absent", "nat_gateway_present", "nat_gateway_absent", "accept_vpc_peering_connection", "_route_table_present", "absent", "internet_gateway_present", "_routes_present", "dhcp_options_present", "internet_gateway_absent", "_subnets_present", "__virtual__", "_verify_subnet_association", "route_table_absent", "request_vpc_peering_connection", "vpc_peering_connection_present", "route_table_present", "delete_vpc_peering_connection", "subnet_present", "present", "dhcp_options_absent", "vpc_peering_connection_absent"], "function_calls": ["_verify_subnet_association", "delete_vpc_peering_connection", "request_vpc_peering_connection", "dict", "_route_table_present", "_routes_present", "accept_vpc_peering_connection", "_subnets_present"], "class_names": [], "class_method_calls": ["logging.getLogger", "to_create.append", "dictupdate.update", "log.debug", "i.items", "route.get", "to_delete.append", "i.get", "inst.get", "subnet_ids.append", "log.info", "_routes.append", "r.get", "gw.get"]}, "bower.py": {"libraries": ["salt.exceptions.CommandNotFoundError", "salt.exceptions.CommandExecutionError"], "function_names": ["removed", "pruned", "bootstrap", "installed", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["pkgs_to_install.append", "pkg.partition", "installed_pkgs.items", "comment_msg.append", "pkgs_satisfied.append", "installed_pkg.get", "pkg_name.strip"]}, "bridge.py": {"libraries": ["sys", "re", "salt.utils.path"], "function_names": ["stp", "_linux_delif", "addif", "_linux_brshow", "_linux_brdel", "interfaces", "_tool_path", "_linux_stp", "_os_dispatch", "_bsd_bradd", "_linux_addif", "delete", "show", "add", "__virtual__", "list_", "delif", "_bsd_brshow", "_bsd_delif", "_bsd_stp", "find_interfaces", "_linux_bradd", "_bsd_brdel", "_bsd_addif", "_netbsd_brshow"], "function_calls": ["callable", "len", "_tool_path", "_os_dispatch", "getattr", "_netbsd_brshow", "_os_func"], "class_names": [], "class_method_calls": ["brlist.append", "m.group", "line.split", "line.startswith", "sys.modules", "re.match", "salt.utils", "line.lstrip"]}, "bsd_shadow.py": {"libraries": ["salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.exceptions.SaltInvocationError", "pwd", "salt.utils.pycrypto"], "function_names": ["info", "del_password", "default_hash", "set_password", "set_change", "gen_password", "set_expire", "__virtual__"], "function_calls": ["info", "SaltInvocationError", "str", "int", "CommandExecutionError", "isinstance"], "class_names": [], "class_method_calls": ["data.pw_passwd", "__grains__.get", "line.split", "line.startswith", "salt.utils", "pwd.getpwnam", "data.pw_name"]}, "btrfs.py": {"libraries": ["salt.exceptions.CommandExecutionError", "functools", "os.path", "logging", "tempfile"], "function_names": ["_umount", "properties", "wrapper", "_is_cow", "subvolume_created", "_unset_cow", "__mount_device", "_set_default", "_is_default", "_mount", "subvolume_deleted", "_diff_properties"], "function_calls": ["_umount", "_is_cow", "type", "_unset_cow", "_set_default", "action", "_is_default", "str", "_mount", "len", "_diff_properties"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "tempfile.mkdtemp", "properties.items", "expected.items", "os.path", "kwargs.get", "functools.wraps", "properties_to_set.items"]}, "cabal.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.exceptions.CommandNotFoundError", "salt.utils.path"], "function_names": ["installed", "_parse_pkg_string", "removed", "__virtual__"], "function_calls": ["_parse_pkg_string", "isinstance"], "class_names": [], "class_method_calls": ["pkg_ver.strip", "pkgs_to_install.append", "pkg.partition", "comment_msg.append", "pkgs_satisfied.append", "pkg_name.strip", "salt.utils"]}, "capirca_acl.py": {"libraries": ["capirca.lib.policy", "capirca.aclgen", "salt.utils.files", "datetime", "re", "inspect", "logging", "capirca.lib.aclgenerator", "capirca"], "function_names": ["_cleanup", "_import_platform_generator", "get_filter_config", "get_filter_pillar", "_get_term_object", "_get_policy_object", "_get_services_mapping", "get_term_config", "__virtual__", "_merge_list_of_dict", "_lookup_element", "_revision_tag", "get_term_pillar", "get_policy_config", "_clean_term_opts", "_make_it_list", "_translate_port", "_add_object", "__init__", "_get_pillar_cfg"], "function_calls": ["_cleanup", "_Policy", "list", "_import_platform_generator", "get_filter_config", "getattr", "int", "get_filter_pillar", "hasattr", "issubclass", "_get_term_object", "str", "_get_policy_object", "len", "dir", "_get_services_mapping", "isinstance", "_merge_list_of_dict", "_lookup_element", "_revision_tag", "_TempTerm", "get_term_pillar", "get_policy_config", "platform_generator", "iter", "next", "setattr", "_clean_term_opts", "_make_it_list", "_translate_port", "_Term", "set", "_get_pillar_cfg"], "class_names": ["_Policy", "_Term"], "class_method_calls": ["log.error", "filter_pillar_cfg.get", "log.debug", "merged.append", "self.filename", "_TERM_FIELDS.items", "item.startswith", "service_rgx_s.groups", "merged.extend", "filter_terms.append", "policy_filters.append", "logging.getLogger", "terms.append", "capirca.lib", "clean.append", "filter_pillar_cfg.pop", "ip_values.append", "filter_config.pop", "overlaps.append", "term_.items", "inspect.ismodule", "header.AddObject", "term_opts.update", "target_opts.extend", "inspect.isclass", "filters.append", "capirca.aclgen", "services_txt.splitlines", "srv_f.read", "inspect.getmembers", "translated_portval.append", "self.filters", "salt.utils", "item.lower", "portval.append", "service_rgx.search", "re.compile", "datetime.datetime", "appended.append", "text.splitlines", "new_text.append", "filter_config.get", "filter_.items", "term_opts.items", "clean_opts.get", "line.replace", "term.name", "policy.filters"]}, "cassandra_cql.py": {"libraries": ["cassandra.policies.ExponentialReconnectionPolicy", "ssl", "cassandra.policies.RoundRobinPolicy", "salt.utils.json", "cassandra.policies.LoadBalancingPolicy", "cassandra.policies.NoSpeculativeExecutionPlan", "cassandra.connection.ConnectionException", "cassandra.policies.DCAwareRoundRobinPolicy", "cassandra.policies.HostDistance", "logging", "cassandra.connection.ConnectionShutdown", "cassandra.policies.SimpleConvictionPolicy", "cassandra.policies.WhiteListRoundRobinPolicy", "salt.exceptions.CommandExecutionError", "cassandra.policies.IdentityTranslator", "cassandra.auth.PlainTextAuthProvider", "cassandra.policies.RetryPolicy", "cassandra.query.dict_factory", "cassandra.policies.NoSpeculativeExecutionPolicy", "re", "cassandra.policies.HostFilterPolicy", "cassandra.cluster.Cluster", "cassandra.connection.OperationTimedOut", "cassandra.cluster.NoHostAvailable", "cassandra.policies.TokenAwarePolicy", "salt.utils.versions"], "function_names": ["cql_query", "list_users", "create_user", "_get_lbp_policy", "drop_keyspace", "_get_ssl_opts", "list_column_families", "__virtual__", "info", "create_keyspace", "grant_permission", "version", "_load_properties", "cql_query_with_prepare", "list_keyspaces", "list_permissions", "_async_log_errors", "keyspace_exists", "_connect"], "function_calls": ["cql_query", "range", "PlainTextAuthProvider", "keyspace_exists", "getattr", "Cluster", "_connect", "str", "dir", "_get_ssl_opts", "version", "CommandExecutionError", "_load_properties", "_get_lbp_policy", "isinstance", "max"], "class_names": [], "class_method_calls": ["log.error", "bound_statement.bind", "log.critical", "log.debug", "contact_points.split", "session.prepare", "log.warning", "logging.getLogger", "session.execute", "session.execute_async", "x.startswith", "replication_map.update", "LOAD_BALANCING_POLICY_MAP.get", "match.groups", "kwargs.get", "ret.append", "query.get", "re.match", "salt.utils", "result.items", "options.get", "cluster.connect", "session.row_factory"]}, "celery.py": {"libraries": ["celery.exceptions.TimeoutError", "salt.exceptions.SaltInvocationError", "celery.Celery", "logging"], "function_names": ["run_task", "__virtual__"], "function_calls": ["SaltInvocationError", "Celery"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "app.conf", "app.connection", "async_result.get", "app.send_task"]}, "ceph.py": {"libraries": ["salt.utils.json", "salt.exceptions.CommandNotFoundError", "salt.exceptions.CommandExecutionError", "logging"], "function_names": ["_changed", "_test", "_unchanged", "quorum", "_error", "_ordereddict2dict"], "function_calls": ["_error", "_unchanged", "_ordereddict2dict", "_test"], "class_names": [], "class_method_calls": ["logging.getLogger", "err.strerror", "salt.utils"]}, "chassis.py": {"libraries": ["salt.utils.platform", "logging"], "function_names": ["chassis_credentials", "cmd", "__virtual__"], "function_calls": ["chassis_credentials"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "chef.py": {"libraries": ["re"], "function_names": ["solo", "client", "_run", "_summary", "_has_changes", "__virtual__"], "function_calls": ["int", "_run", "_has_changes", "_summary"], "class_names": [], "class_method_calls": ["re.IGNORECASE", "regex.group", "stdout.splitlines", "re.search"]}, "chocolatey.py": {"libraries": ["salt.utils.versions", "salt.exceptions.SaltInvocationError", "salt.utils.data", "salt.exceptions.CommandExecutionError"], "function_names": ["bootstrapped", "upgraded", "source_present", "uninstalled", "unbootstrapped", "installed", "__virtual__"], "function_calls": ["SaltInvocationError"], "class_names": [], "class_method_calls": ["name.lower", "pre_install.keys", "present.lower", "package.lower", "salt.utils", "pkg.lower", "pre_uninstall.keys"]}, "chroot.py": {"libraries": ["sys", "salt.exceptions", "os", "salt.client.ssh.state", "salt.utils.files", "salt.utils.args", "logging", "salt.defaults.exitcodes", "salt", "tempfile", "salt.client.ssh.wrapper.state", "copy"], "function_names": ["apply_", "highstate", "exist", "_create_and_execute_salt_state", "call", "sls", "in_chroot", "create", "__virtual__"], "function_calls": ["highstate", "_create_and_execute_salt_state", "exist", "list", "str", "call", "sls", "all", "isinstance"], "class_names": [], "class_method_calls": ["log.error", "kwargs.pop", "st_.state", "sys.version_info", "pillar.update", "os.path", "salt_state_path.replace", "exclude.split", "logging.getLogger", "opts.get", "copy.deepcopy", "kwargs.get", "st_.compile_low_chunks", "tempfile.mkdtemp", "os.makedirs", "self_fd.read", "salt.fileclient", "salt.utils", "data.get", "salt.exceptions", "mods.split", "st_.render_highstate", "salt.client", "__pillar__.value", "safe_kwargs.items", "root_fd.read", "local.get"]}, "ciscoconfparse_mod.py": {"libraries": ["salt.exceptions.SaltException", "ciscoconfparse"], "function_names": ["find_lines_wo_child", "find_objects_w_child", "_get_ccp", "find_objects_wo_child", "find_lines", "find_lines_w_child", "find_objects", "filter_lines", "__virtual__"], "function_calls": ["SaltException", "find_objects_w_child", "_get_ccp", "find_objects_wo_child", "isinstance", "find_objects"], "class_names": [], "class_method_calls": ["parent_line.re_search_children", "ccp.find_objects", "ccp.find_objects_wo_child", "parent_line.text", "ret.append", "config.splitlines", "child_line.text", "line.text", "ccp.find_objects_w_child", "ciscoconfparse.CiscoConfParse"]}, "cisconso.py": {"libraries": ["salt.utils.compat"], "function_names": ["unchanged", "removed", "changed", "__init__", "value_present", "added", "__virtual__"], "function_calls": ["set", "_DictDiffer"], "class_names": ["_DictDiffer"], "class_method_calls": ["self.set_current", "past_dict.keys", "diff.added", "diff.removed", "self.past_dict", "self.current_dict", "salt.utils", "diff.changed", "current_dict.keys", "self.set_past", "self.intersect"]}, "cloud.py": {"libraries": ["getpass", "multiprocessing", "winrm.exceptions.WinRMTransportError", "pkg_resources", "pypsexec.scmr.Service", "hashlib", "salt.utils.files", "salt.utils.yaml", "smbprotocol.tree.TreeConnect", "logging", "tempfile", "smbprotocol.exceptions.SMBResponseException", "salt.utils.path", "smbprotocol.exceptions.CannotDelete", "shlex", "salt.exceptions.SaltCloudSystemExit", "traceback", "salt.utils.smb", "salt.utils.stringutils", "requests", "salt.utils.event", "salt.exceptions.SaltCloudExecutionTimeout", "codecs", "uuid", "keyring", "pwd", "salt.exceptions.SaltCloudException", "copy", "salt.utils.msgpack", "salt.exceptions.SaltCloudExecutionFailure", "os", "time", "subprocess", "salt.loader", "pypsexec.exceptions.SCMRException", "salt.exceptions.SaltCloudConfigError", "salt.utils.validate.path.is_writeable", "re", "salt.cloud", "salt.utils.data", "pypsexec.client.Client", "salt.template", "errno", "salt.utils.crypt", "salt.utils.vt", "salt.utils.nb_popen.NonBlockingPopen", "jinja2.Template", "salt.crypt", "salt.utils.compat", "salt.client", "socket", "salt.utils.platform", "salt.exceptions.SaltCloudPasswordError", "salt.config", "keyring.errors", "winrm", "salt.utils.versions", "stat", "shutil"], "function_names": ["__enter__", "win_cmd", "winrm_cmd", "wait_for_passwd", "remove_service", "gen_keys", "_exec_ssh_cmd", "bootstrap", "deploy_windows", "run_executable", "get_salt_interface", "__ssh_gateway_config_dict", "wait_for_winexe", "ip_to_int", "os_script", "ssh_file", "delete_minion_cachedir", "store_password_in_keyring", "__exit__", "sftp_file", "minion_config", "wait_for_psexecsvc", "userdata_template", "wait_for_fun", "request_minion_cachedir", "disconnect", "remove_sshkey", "missing_node_cache", "root_cmd", "list_nodes_select", "_unwrap_dict", "scp_file", "_format_master_param", "init_cachedir", "wait_for_port", "update_bootstrap", "cache_node", "cachedir_index_del", "lock_file", "filter_event", "rename_key", "fire_event", "wait_for_winrm", "activate_minion_cachedir", "cache_node_list", "run_psexec_command", "diff_node_cache", "salt_config_to_yaml", "_strip_cache_events", "_salt_cloud_force_ascii", "is_public_ip", "check_auth", "change_minion_cachedir", "retrieve_password_from_keyring", "wait_for_ip", "list_cache_nodes_full", "_save_password_in_keyring", "run_func_until_ret_arg", "connect", "check_key_path_and_mode", "remove_key", "__ssh_gateway_arguments", "run_winexe_command", "deploy_script", "cachedir_index_add", "accept_key", "__render_script", "ssh_usernames", "validate_windows_cred", "unlock_file", "__init__", "run_inline_script", "create_service", "master_config", "validate_windows_cred_winexe", "check_name"], "function_calls": ["Template", "type", "range", "win_cmd", "list", "winrm_cmd", "wait_for_passwd", "int", "TypeError", "SaltCloudException", "gen_keys", "_exec_ssh_cmd", "SaltCloudExecutionFailure", "deploy_windows", "Client", "hasattr", "__ssh_gateway_config_dict", "ip_to_int", "TreeConnect", "os_script", "SaltCloudSystemExit", "delete_minion_cachedir", "ssh_file", "SaltCloudPasswordError", "PsExecClient", "minion_config", "wait_for_psexecsvc", "sftp_file", "Exception", "str", "missing_node_cache", "ScmrService", "root_cmd", "len", "_unwrap_dict", "update_callback", "DeprecationWarning", "isinstance", "scp_file", "init_cachedir", "_format_master_param", "wait_for_port", "SaltCloudExecutionTimeout", "repr", "dict", "lock_file", "fun", "diff_node_cache", "fire_event", "wait_for_winrm", "run_psexec_command", "salt_config_to_yaml", "_strip_cache_events", "_save_password_in_keyring", "ValueError", "is_writeable", "iter", "next", "SaltCloudConfigError", "RuntimeError", "__ssh_gateway_arguments", "deploy_script", "run_winexe_command", "accept_key", "unlock_file", "__render_script", "run_inline_script", "set", "NonBlockingPopen", "master_config"], "class_names": ["Client"], "class_method_calls": ["error_msg.format", "script_env.items", "s.run_cmd", "logging.getLogger", "self._exe_file", "req.text", "socket.AF_INET6", "minion.setdefault", "sock.shutdown", "proc.has_unread_data", "socket.AF_INET", "kwargs.get", "r.status_code", "process.start", "hashlib.sha1", "os.makedirs", "os.write", "smb_tree.share_name", "url.startswith", "os.getuid", "entry.startswith", "regexp.search", "socket.SHUT_RDWR", "tempfile.mkstemp", "template.render", "salt.crypt", "minion_conf.pop", "keyring.errors", "client.run_executable", "subprocess.PIPE", "ssh_gateway.split", "master.update", "log.exception", "minion.update", "usernames.append", "traceback.format_exc", "log.info", "time.mktime", "proc.sendline", "log.warning", "re.M", "shutil.move", "vm_.get", "finished_full.append", "time.sleep", "config.get", "self._client", "finished.append", "exc.start", "fp_.read", "deploy_kwargs.copy", "proc.exitstatus", "preseed_minion_keys.items", "tempfile.mkdtemp", "keyring.set_password", "fp_.write", "shlex.quote", "__opts__.update", "event.get_event", "templated.readlines", "shutil.rmtree", "time.time", "proc.pid", "multiprocessing.Process", "stat.S_ISSOCK", "os.rename", "win_installer.split", "kwargs.update", "salt.template", "socket.socket", "fic.read", "queue.put", "ssh_args.append", "index.update", "proc.returncode", "winrm_pkg.version", "smb_tree.connect", "winrm.Session", "exc.end", "deploy_kwargs.update", "file_map_success.append", "self.connect", "req.status_code", "os.chmod", "uuid.uuid4", "file_map_fail.append", "log.error", "process.join", "self.service_name", "self.remove_service", "time.strftime", "self.create_service", "multiprocessing.Queue", "exc.errno", "os.stat", "proc.poll_and_read_until_finish", "proc.close", "ssh_args.extend", "opts.get", "cached_nodes.append", "ssh_kwargs.update", "tmp_dir.lstrip", "master_conf.get", "index_string.split", "contents.encode", "socket.inet_pton", "log.trace", "exc.object", "sock.connect", "errno.EBADF", "deploy_scripts_search_paths.append", "render_opts.update", "usernames.extend", "stat.S_IMODE", "errno.ENOENT", "socket.SOCK_STREAM", "getpass.getpass", "environ_script_contents.append", "keyring.get_password", "opts.copy", "provider.split", "requests.get", "s.protocol", "tmp_dir.rstrip", "ip.startswith", "salt.config", "codecs.register_error", "SSH_PASSWORD_PROMP_SUDO_RE.search", "sock.settimeout", "self.disconnect", "log.debug", "sock.close", "os.listdir", "ret.update", "pkg_resources.get_distribution", "subprocess.call", "os.path", "gateway.get", "smb_tree.disconnect", "ip.split", "copy.deepcopy", "time.localtime", "proc.recv", "logging.WARNING", "event.fire_event", "remote_dirs.append", "pwd.getpwuid", "salt.loader", "cache_data.update", "salt.utils", "re.compile", "__opts__.get", "os.environ", "s.url", "queue.get", "os.remove", "os.close", "d0.items", "proc.communicate", "session.run_cmd", "SSH_PASSWORD_PROMP_RE.search"]}, "composer.py": {"libraries": ["salt.exceptions.SaltException"], "function_names": ["update", "installed", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "container_resource.py": {"libraries": ["os", "shlex", "salt.utils.path", "traceback", "salt.utils.vt", "time", "salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError", "functools", "salt.utils.args", "logging", "copy"], "function_names": ["wrapper", "_state", "cache_file", "run", "copy_to", "_get_sha256", "run_all", "_validate", "_nsenter"], "function_calls": ["_state", "cache_file", "run_func", "SaltInvocationError", "_get_sha256", "run_all", "sorted", "state", "CommandExecutionError", "wrapped", "isinstance", "_nsenter"], "class_names": [], "class_method_calls": ["log.error", "log.debug", "traceback.format_exc", "os.path", "log.warning", "logging.getLogger", "keep_env.split", "copy.deepcopy", "proc.recv", "time.sleep", "proc.has_unread_data", "kwargs.get", "proc.exitstatus", "shlex.quote", "proc.terminate", "salt.utils", "functools.wraps", "os.environ", "source.startswith"]}, "cpan.py": {"libraries": ["os", "salt.utils.files", "os.path", "logging", "salt.utils.path"], "function_names": ["remove", "list_", "show_config", "show", "install", "__virtual__"], "function_calls": ["show_config", "show", "len"], "class_names": [], "class_method_calls": ["module.replace", "logging.getLogger", "line.replace", "file_.startswith", "os.listdir", "line.split", "info.get", "line.startswith", "info.insert", "config.get", "salt.utils", "os.path", "old_info.get", "fh_.readlines", "files.append", "log.trace", "info.append"]}, "cron.py": {"libraries": ["salt.utils.files", "os", "salt.modules.cron._cron_matched", "salt.modules.cron._needs_change"], "function_names": ["absent", "file", "_check_cron", "present", "env_present", "_check_cron_env", "env_absent", "_get_cron_info", "__virtual__"], "function_calls": ["any", "_needs_change", "_check_cron", "str", "_cron_matched", "_check_cron_env"], "class_names": [], "class_method_calls": ["os.stat", "os.unlink", "fp_.write", "raw_cron.endswith", "salt.utils", "name.strip"]}, "cryptdev.py": {"libraries": ["logging"], "function_names": ["mapped", "unmapped"], "function_calls": [], "class_names": [], "class_method_calls": ["active.keys", "logging.getLogger", "log.warning"]}, "csf.py": {"libraries": ["logging"], "function_names": ["nics_skip", "nics_skipped", "testing_off", "rule_absent", "testing_on", "rule_present", "option_present", "ports_open", "__virtual__"], "function_calls": ["nics_skipped", "list", "int", "func", "map"], "class_names": [], "class_method_calls": ["log.trace", "logging.getLogger", "direction.upper"]}, "cyg.py": {"libraries": ["logging"], "function_names": ["unchanged", "removed", "changed", "same", "updated", "__init__", "installed", "added", "__virtual__"], "function_calls": ["set", "DictDiffer", "list"], "class_names": ["DictDiffer"], "class_method_calls": ["logging.getLogger", "self.current_keys", "differ.removed", "differ.changed", "self.past_keys", "log.debug", "differ.same", "differ.added", "self.past_dict", "self.current_dict", "d.keys", "self.intersect", "log.warning"]}, "daemontools.py": {"libraries": ["os", "salt.exceptions.CommandExecutionError", "re", "os.path", "logging", "salt.utils.path"], "function_names": ["full_restart", "status", "_service_path", "reload_", "start", "disabled", "available", "enabled", "restart", "get_all", "term", "missing", "stop", "__virtual__"], "function_calls": ["_service_path", "start", "available", "enabled", "restart", "sorted", "all", "term", "CommandExecutionError", "get_all", "stop", "frozenset"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "os.X_OK", "os.listdir", "os.path", "salt.utils", "os.access", "re.search"]}, "data.py": {"libraries": ["fnmatch", "hashlib", "datetime", "logging", "collections.abc.Mapping", "salt.utils.stringutils", "functools", "salt.utils.dictupdate", "jmespath", "copy", "collections.abc.Sequence", "collections.abc.MutableMapping", "re", "random", "salt.utils.odict.OrderedDict", "salt.defaults.DEFAULT_TARGET_DELIM", "salt.utils.args", "salt.utils.decorators.jinja.jinja_filter", "salt.exceptions.SaltException", "salt.utils.yaml"], "function_names": ["__len__", "is_list", "sample", "repack_dictlist", "exactly_one", "sorted_ignorecase", "encode_dict", "flatten", "stringify", "_dict_match", "_append_placeholder", "get_value", "filter_falsey", "simple_types_filter", "__change_case", "__repr__", "compare_dicts", "to_lowercase", "key_cb", "__iter__", "subdict_match", "encode_list", "traverse_dict_and_list", "substr_in_list", "shuffle", "_remove_circular_refs", "from_entries", "copy", "_match", "to_entries", "is_dictlist", "compare_lists", "__setitem__", "decode_list", "to_uppercase", "recursive_diff", "is_iter", "decode_dict", "json_query", "is_true", "encode_tuple", "traverse_dict", "hash", "val_cb", "_is_not_considered_falsey", "mysql_to_dict", "decode_tuple", "__init__", "__getitem__", "__eq__", "items_lower", "filter_by", "decode", "encode", "__delitem__", "exactly_n"], "function_calls": ["any", "type", "range", "sample", "repack_dictlist", "encode_dict", "getattr", "list", "int", "_dict_match", "id", "_append_placeholder", "OrderedDict", "reversed", "flatten", "float", "get_value", "_decode_func", "hasattr", "simple_types_filter", "__change_case", "to_lowercase", "min", "key_cb", "subdict_match", "traverse_dict_and_list", "encode_list", "str", "jinja_filter", "sorted", "all", "_remove_circular_refs", "isinstance", "_match", "data_type", "SaltException", "CaseInsensitiveDict", "is_dictlist", "repr", "dict", "decode_list", "bool", "recursive_diff", "filter_element", "is_iter", "decode_dict", "iter", "encode_tuple", "next", "RuntimeError", "val_cb", "hash", "_is_not_considered_falsey", "tuple", "enumerate", "decode_tuple", "RecursionError", "zip", "len", "decode", "set", "exactly_n"], "class_names": ["CaseInsensitiveDict"], "class_method_calls": ["entry.get", "log.error", "fnmatch.fnmatchcase", "x.lower", "ob.items", "log.exception", "self._data", "log.debug", "list_new.remove", "functools.partial", "jmespath.search", "list_old.pop", "ret.extend", "list_new.pop", "data.items", "logging.getLogger", "self.update", "data.__class__", "random.sample", "ret_old.pop", "expr.split", "copy.deepcopy", "_ids.add", "delimiter.join", "_seen.remove", "lookup_dict.get", "list_old.remove", "hashlib.new", "_seen.add", "hasher.update", "hasher.hexdigest", "ret.setdefault", "comp.strip", "ret.append", "line.split", "key.endswith", "simplearray.append", "re.match", "salt.utils", "self.items", "ret_new.pop", "random.Random", "datetime.datetime", "value.encode", "new.keys", "fnmatch.fnmatch", "obj.get", "path.find", "line.startswith", "key.startswith", "self.items_lower", "obj.keys", "key.split", "remove_indices.append", "pattern.startswith", "data.isoformat", "obj.items", "old.keys"]}, "datadog_api.py": {"libraries": ["datadog", "salt.exceptions.SaltInvocationError", "requests"], "function_names": ["_initialize_connection", "schedule_downtime", "cancel_downtime", "post_event", "__virtual__"], "function_calls": ["_initialize_connection", "SaltInvocationError"], "class_names": [], "class_method_calls": ["response.status_code", "response.keys", "response.text", "response.json", "datadog.api", "datadog.initialize", "requests.post"]}, "ddns.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "deb_apache.py": {"libraries": ["salt.utils.decorators.path", "os", "salt.utils.path", "logging"], "function_names": ["a2disconf", "a2ensite", "_detect_os", "check_conf_enabled", "a2enmod", "a2enconf", "a2dissite", "check_mod_enabled", "check_site_enabled", "a2dismod", "__virtual__"], "function_calls": ["_detect_os"], "class_names": [], "class_method_calls": ["logging.getLogger", "mod.endswith", "conf.endswith", "os.path", "site.endswith", "salt.utils"]}, "deb_postgres.py": {"libraries": ["shlex", "salt.utils.path", "logging"], "function_names": ["cluster_create", "cluster_list", "_parse_pg_lscluster", "cluster_remove", "cluster_exists", "__virtual__"], "function_calls": ["str", "int", "cluster_list", "_parse_pg_lscluster"], "class_names": [], "class_method_calls": ["logging.getLogger", "ret.get", "log.error", "cluster_dict.keys", "line.split", "output.splitlines", "salt.utils", "shlex.join"]}, "debconfmod.py": {"libraries": [], "function_names": ["set", "set_file", "__virtual__"], "function_calls": ["str", "isinstance"], "class_names": [], "class_method_calls": ["data.items"]}, "debian_ip.py": {"libraries": ["os", "salt.utils.dns", "time", "salt.utils.stringutils", "jinja2", "salt.utils.odict", "salt.utils.validate.net", "salt.utils.files", "jinja2.exceptions", "functools", "salt.utils.templates", "re", "os.path", "io", "logging"], "function_names": ["_validate_interface_option", "_parse_settings_bond_0", "_parse_searchdomain", "_parse_resolve", "_raise_error_iface", "__space_delimited_list", "_write_file_network", "__float", "__ipv4_netmask", "_attrmaps_contain_attr", "_parse_routes", "_parse_settings_bond_2", "_parse_settings_bond_1", "_filter_malformed_interfaces", "_error_msg_routes", "_parse_settings_bond_4", "_read_temp", "_parse_current_network_settings", "_read_temp_ifaces", "__int", "down", "build_routes", "get_interface", "_error_msg_iface", "_parse_network_settings", "get_bond", "build_network_settings", "_parse_settings_source", "__virtual__", "_parse_interfaces", "build_interface", "_log_default_network", "__ipv4_quad", "__ipv6", "_parse_ethtool_pppoe_opts", "_parse_settings_bond_6", "_read_file", "_write_file_ppp_ifaces", "__anything", "_write_file", "__ipv6_netmask", "_raise_error_routes", "_parse_settings_bond", "_parse_ethtool_opts", "get_routes", "_parse_bridge_opts", "_parse_settings_eth", "__mac", "__within", "_write_file_ifaces", "_parse_settings_bond_5", "build_bond", "_parse_domainname", "_parse_hostname", "get_network_settings", "_parse_settings_bond_3", "apply_network_settings", "_raise_error_network", "_write_file_routes", "_error_msg_network", "__within2", "up", "_log_default_iface"], "function_calls": ["_parse_settings_bond_0", "_validate_interface_option", "_parse_searchdomain", "_parse_resolve", "_raise_error_iface", "_write_file_network", "_attrmaps_contain_attr", "list", "getattr", "_parse_routes", "int", "_parse_settings_bond_2", "validate_func", "_parse_settings_bond_1", "float", "_filter_malformed_interfaces", "hasattr", "_error_msg_routes", "_parse_settings_bond_4", "_read_temp", "_parse_current_network_settings", "_read_temp_ifaces", "__int", "str", "AttributeError", "_error_msg_iface", "_parse_network_settings", "sorted", "isinstance", "_parse_settings_source", "_parse_interfaces", "_log_default_network", "_parse_ethtool_pppoe_opts", "_parse_settings_bond_6", "_read_file", "_write_file_ppp_ifaces", "_write_file", "_raise_error_routes", "_parse_settings_bond", "_parse_ethtool_opts", "dtype", "_parse_bridge_opts", "_parse_settings_eth", "__within", "_write_file_ifaces", "_parse_settings_bond_5", "_parse_domainname", "_parse_hostname", "_parse_settings_bond_3", "_write_file_routes", "_raise_error_network", "_error_msg_network", "len", "_log_default_iface"], "class_names": [], "class_method_calls": ["log.error", "jinja2.FileSystemLoader", "tout.readlines", "interface_files.insert", "attr.startswith", "tout.seek", "values.pop", "new_contents.append", "os.listdir", "iface.replace", "functools.partial", "jinja2.exceptions", "line.rstrip", "log.info", "os.path", "pattern.format", "ifcfg.split", "source_template.render", "contents.readlines", "log.warning", "line.lstrip", "logging.getLogger", "re.split", "line.isspace", "bond.update", "opts.get", "opt.startswith", "current.items", "jinja2.Environment", "ATTRMAPS.get", "io.StringIO", "opts.update", "value.strip", "tout.write", "new_contents.insert", "time.sleep", "dtype.__class__", "attr.replace", "_opt.replace", "changes.extend", "search_prog.match", "JINJA.get_template", "iface_data.pop", "line.split", "opts.pop", "eth_template.render", "re.match", "salt.utils", "opts.items", "msg.format", "template.render", "re.compile", "SALT_ATTR_TO_DEBIAN_ATTR_MAP.items", "domain_prog.match", "k.lower", "fout.write", "SALT_ATTR_TO_DEBIAN_ATTR_MAP.get", "line.startswith", "re.sub", "waitport_time.isdigit", "saved_ifcfg.split", "config.update", "adapters.pop", "iface_type.lower", "tout.close"]}, "debian_service.py": {"libraries": ["fnmatch", "glob", "os", "shlex", "salt.utils.systemd", "re", "logging"], "function_names": ["disable", "get_disabled", "_get_runlevel", "status", "_service_cmd", "enable", "reload_", "start", "force_reload", "disabled", "available", "enabled", "get_all", "restart", "missing", "get_enabled", "stop", "__virtual__"], "function_calls": ["get_disabled", "_get_runlevel", "_service_cmd", "bool", "get_all", "sorted", "set", "get_enabled"], "class_names": [], "class_method_calls": ["logging.getLogger", "os.sep", "re.split", "glob.glob", "shlex.quote", "fnmatch.filter", "line.split", "x.rsplit", "salt.utils", "out.split", "ret.add", "re.search"]}, "debuild_pkgbuild.py": {"libraries": ["errno", "urllib.parse", "os", "salt.utils.vt", "traceback", "time", "salt.utils.stringutils", "salt.modules.gpg", "salt.exceptions.CommandExecutionError", "salt.utils.files", "gnupg", "salt.exceptions.SaltInvocationError", "re", "logging", "tempfile", "salt.utils.path", "shutil"], "function_names": ["_get_repo_options_env", "build", "_get_src", "_mk_tree", "_check_repo_gpg_phrase_utils", "_get_spec", "_create_pbuilders", "make_src_pkg", "_get_build_env", "_get_repo_dists_env", "_check_repo_sign_utils_support", "make_repo", "__virtual__"], "function_calls": ["_get_repo_options_env", "iter", "next", "_get_src", "_mk_tree", "SaltInvocationError", "_get_spec", "_check_repo_gpg_phrase_utils", "CommandExecutionError", "_create_pbuilders", "list", "_get_build_env", "make_src_pkg", "int", "_get_repo_dists_env", "_check_repo_sign_utils_support", "isinstance"], "class_names": [], "class_method_calls": ["log.error", "SIGN_PROMPT_RE.search", "afile.startswith", "REPREPRO_SIGN_PROMPT_RE.search", "os.listdir", "__grains__.get", "env_overrides.isspace", "fow.readlines", "traceback.format_exc", "os.path", "proc.sendline", "exc.errno", "urllib.parse", "re.M", "logging.getLogger", "salttar_name.rfind", "proc.close", "local_keys2_keygrip.splitlines", "dfile.endswith", "proc.recv", "time.sleep", "env.keys", "proc.has_unread_data", "dsc.endswith", "errno.EEXIST", "env_man_seen.append", "dflts_dict.items", "shutil.copy", "sources.split", "proc.exitstatus", "parsed.scheme", "tempfile.mkdtemp", "os.makedirs", "ret.setdefault", "salttarball.split", "ret.append", "shutil.rmtree", "salt.utils", "gpg_info_line.split", "afile.endswith", "spec_pathfile.endswith", "re.compile", "env.items", "gpg_tty_info_line.split", "fow.write", "line.startswith", "os.remove", "debfile.endswith", "dflts_dict.keys"]}, "devinfo.py": {"libraries": ["logging"], "function_names": ["_match", "_hwinfo_parse", "_hwinfo_efi", "_hwinfo_parse_full", "hwinfo", "_hwinfo_memory", "_udev", "filter_", "_hwinfo_parse_short", "_hwinfo_network"], "function_calls": ["_hwinfo_parse", "_match", "_hwinfo_efi", "type", "dict", "_hwinfo_parse_full", "_hwinfo_memory", "_udev", "sorted", "len", "set", "isinstance", "_hwinfo_parse_short", "_hwinfo_network"], "class_names": [], "class_method_calls": ["k.upper", "log.error", "line.count", "line.endswith", "result_stack.append", "value.startswith", "value.replace", "log.warning", "logging.getLogger", "key.partition", "key.strip", "match_info.items", "line.strip", "report.strip", "value.strip", "cmd.append", "current_value.append", "line.split", "udev_info.get", "item.split", "v.strip", "value.split", "line.startswith"]}, "devmap.py": {"libraries": ["os.path"], "function_names": ["multipath_flush", "multipath_list"], "function_calls": [], "class_names": [], "class_method_calls": ["os.path"]}, "dig.py": {"libraries": ["salt.utils.network", "re", "salt.utils.path", "logging"], "function_names": ["TXT", "A", "__virtual__", "NS", "PTR", "SPF", "MX", "AAAA", "CNAME", "check_ip"], "function_calls": ["A", "SPF", "str", "int", "check_ip"], "class_names": [], "class_method_calls": ["logging.getLogger", "re.compile", "addr.rsplit", "spf_re.match", "ret.append", "x.split", "re.sub", "salt.utils", "ret.extend", "dig.append", "log.warning", "cmd.append"]}, "disk.py": {"libraries": ["os.path"], "function_names": ["status", "_validate_int", "_check_min_max", "_status_mount", "_status_path"], "function_calls": ["_validate_int", "_check_min_max", "int", "_status_path", "_status_mount", "round", "len", "float", "isinstance"], "class_names": [], "class_method_calls": ["path.isdir", "value.strip"]}, "djangomod.py": {"libraries": ["salt.exceptions", "os", "salt.utils.path"], "function_names": ["syncdb", "collectstatic", "command", "loaddata", "_get_django_admin", "migrate", "createsuperuser", "__virtual__"], "function_calls": ["_get_django_admin", "dict", "command"], "class_names": [], "class_method_calls": ["salt.exceptions", "kwargs.items", "fixtures.split", "key.startswith", "os.path", "salt.utils", "args.append"]}, "dnsmasq.py": {"libraries": ["os", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.utils.platform", "logging"], "function_names": ["_parse_dnamasq", "get_config", "version", "set_config", "fullversion", "__virtual__"], "function_calls": ["CommandExecutionError", "isinstance", "_parse_dnamasq", "get_config"], "class_names": [], "class_method_calls": ["logging.getLogger", "dnsopts.update", "filename.endswith", "filename.startswith", "os.listdir", "line.strip", "line.split", "line.startswith", "key.startswith", "salt.utils", "os.path", "includes.append"]}, "dnsutil.py": {"libraries": ["time", "salt.utils.stringutils", "socket", "salt.utils.files", "logging", "salt.utils.path"], "function_names": ["hosts_remove", "serial", "A", "parse_hosts", "NS", "SPF", "hosts_append", "MX", "check_ip", "_to_seconds", "_has_dig", "AAAA", "parse_zone", "__virtual__"], "function_calls": ["str", "int", "_has_dig", "_to_seconds", "len", "parse_hosts"], "class_names": [], "class_method_calls": ["out_file.write", "socket.gaierror", "time.strftime", "socket.getaddrinfo", "logging.getLogger", "comps.insert", "line.strip", "socket.AF_INET6", "socket.AF_INET", "entries.split", "fp_.read", "timestr.replace", "fp_.write", "zonedict.setdefault", "line.split", "salt.utils", "zone.splitlines", "socket.SOCK_RAW", "multi.replace", "hosts.splitlines", "line.startswith", "hostsdict.setdefault", "line.replace", "timestr.upper", "host_list.remove", "comps.remove", "comps.pop"]}, "dockercompose.py": {"libraries": ["compose.project.OneOffFilter", "os", "salt.serializers.json", "compose", "compose.cli.command.get_project", "salt.utils.stringutils", "compose.service.ConvergenceStrategy", "salt.utils.files", "operator.attrgetter", "re", "inspect", "logging", "salt.utils.yaml"], "function_names": ["build", "__load_compose_definitions", "rm", "unpause", "kill", "service_set_tag", "create", "service_remove", "get", "__dump_docker_compose", "__dump_compose_file", "__load_project", "__load_docker_compose", "__handle_except", "__virtual__", "__write_docker_compose", "restart", "stop", "ps", "__load_project_from_file_path", "service_create", "__read_docker_compose_file", "pause", "__standardize_result", "pull", "service_upsert", "start", "_get_convergence_plans", "__get_docker_file_path", "up"], "function_calls": ["__load_compose_definitions", "int", "__dump_docker_compose", "__dump_compose_file", "__load_project", "__load_docker_compose", "str", "sorted", "__handle_except", "isinstance", "__write_docker_compose", "get_project", "__load_project_from_file_path", "__read_docker_compose_file", "__standardize_result", "tuple", "_get_convergence_plans", "__get_docker_file_path", "len", "attrgetter"], "class_names": [], "class_method_calls": ["project.unpause", "ConvergenceStrategy.changed", "compose.__version__", "yaml.load", "project.restart", "inspect.stack", "os.path", "project.build", "json.deserialize", "project.up", "container.inspect_if_not_inspected", "logging.getLogger", "project.remove_stopped", "project.stop", "project.get_services", "json.DeserializationError", "project.start", "project.containers", "project._get_convergence_plans", "container.inspect", "definition.strip", "os.mkdir", "re.match", "salt.utils", "fl.write", "path.lower", "project.pause", "OneOffFilter.only", "container.human_readable_state", "container.human_readable_command", "match.group", "yaml.safe_dump", "project.pull", "os.remove", "container.id", "container.human_readable_ports", "container.get", "container.name", "yaml.YAMLError", "project.kill"]}, "dockermod.py": {"libraries": ["fnmatch", "string", "salt.utils.json", "salt.state.HighState", "salt.utils.functools", "salt.loader.dunder.__file_client__", "logging", "salt.utils.path", "shlex", "bz2", "salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError", "functools", "json", "uuid", "salt.pillar", "timelib", "copy", "os", "salt.client.ssh.state", "salt.utils.dockermod.translate.network", "time", "subprocess", "re", "salt.fileclient", "lzma", "salt.exceptions", "salt.utils.dockermod.translate.container", "gzip", "docker", "shutil"], "function_names": ["save", "port", "_clear_context", "_size_fmt", "dangling", "resolve_image_id", "rename", "run_stderr", "compare_container_networks", "_run", "ps_", "_get_top_level_images", "_ulimit_sort", "layers", "compare_containers", "networks", "retcode", "copy_to", "signal_", "get_client_args", "script_retcode", "decode", "logout", "inspect_container", "create_network", "build", "_cleanup_tempfile", "_get_create_kwargs", "_get_exec_driver", "_error_detail", "remove_volume", "create", "load", "disconnect_all_containers_from_network", "_pull_status", "history", "logs", "_create_networking_config", "info", "connect_container_to_network", "_get_docker_py_versioninfo", "diff", "_get_sha256", "restart", "_refresh_mine_cache", "pause", "pull", "_append_warning", "compare_networks", "_build_status", "tag_", "inspect_volume", "_client_wrapper", "unpause", "call", "kill", "create_volume", "state", "_check_update_mine", "_scrub_links", "pid", "kvsort", "list_containers", "run", "highstate", "inspect_network", "_import_status", "export", "inspect_image", "wrapper", "prune", "list_tags", "copy_from", "sls_build", "_check_ipconfig", "images", "version", "stop", "disconnect_container_from_network", "wait", "import_", "_push_status", "_get_state", "run_stdout", "_get_nets", "volumes", "rmi", "script", "login", "_new_layer", "_prep_pull", "_compile_state", "apply_", "_script", "rm_", "_change_state", "sls", "inspect", "_generate_tmp_path", "_get_client", "__virtual__", "push", "resolve_tag", "_docker_client", "_prepare_trans_tar", "depends", "run_all", "top", "search", "run_container", "start_", "connected", "exists", "remove_network", "commit", "_already_exists", "_file_client"], "function_calls": ["_clear_context", "_size_fmt", "resolve_image_id", "_run", "ps_", "_get_top_level_images", "_ulimit_sort", "bool", "retcode", "copy_to", "get_client_args", "set", "HighState", "inspect_container", "_cleanup_tempfile", "_get_create_kwargs", "list", "_get_exec_driver", "_error_detail", "CommandExecutionError", "create", "hasattr", "_pull_status", "NotImplementedError", "_create_networking_config", "info", "_get_docker_py_versioninfo", "_get_sha256", "wrapped", "pull", "_append_warning", "enumerate", "tuple", "func", "_build_status", "tag_", "inspect_volume", "_client_wrapper", "call", "state", "_check_update_mine", "_scrub_links", "list_containers", "run", "highstate", "inspect_network", "_import_status", "len", "all", "map", "inspect_image", "list_tags", "SaltInvocationError", "_check_ipconfig", "object", "images", "version", "stop", "iter", "next", "disconnect_container_from_network", "getattr", "_push_status", "_get_state", "run_stdout", "any", "_get_nets", "int", "rmi", "_new_layer", "_prep_pull", "_compile_state", "_script", "rm_", "str", "_change_state", "sls", "sorted", "_generate_tmp_path", "_get_client", "isinstance", "resolve_tag", "_prepare_trans_tar", "depends", "run_all", "start_", "connected", "reversed", "commit", "_already_exists", "_file_client"], "class_names": ["DockerJSONDecoder"], "class_method_calls": ["exc.explanation", "port_num.isdigit", "x.values", "shutil.copyfile", "pillar.update", "item.items", "json.JSONDecoder", "re.search", "item.pop", "logging.getLogger", "ret.get", "out.close", "data.setdefault", "objs.append", "bucket.setdefault", "x.lstrip", "kwargs.get", "out.write", "old_val.remove", "exc_info.update", "os.makedirs", "self.raw_decode", "uncompressed.read", "val2.get", "docker.tls", "bucket.get", "results.items", "exc.strerror", "net2.get", "x.keys", "registry_auth.update", "__context__.pop", "kwargs.pop", "val.remove", "stream_data.extend", "pushed.append", "stream.rstrip", "s.splitlines", "log.warning", "gzip.open", "cstate.get", "version_re.match", "docker.errors", "docker.__version__", "cmd.append", "timelib.strtodatetime", "st_.compile_low_chunks", "string.hexdigits", "shlex.quote", "driver.strip", "time.time", "item.sort", "compare_keys.get", "mods.split", "all_nets.update", "log_kwargs.pop", "cinfo.pop", "x.get", "match.group", "networks.items", "registry.lower", "uuid.uuid4", "log.error", "new_val.remove", "st_.state", "kind_map.get", "time.strftime", "path.endswith", "lzma.LZMACompressor", "item.strip", "compressor.compress", "os.stat", "results.setdefault", "output.append", "bz2.BZ2Compressor", "context_data.get", "data.append", "docker.version_info", "ret.setdefault", "l.replace", "networks.split", "out.flush", "already_pushed.append", "data.get", "container.pop", "kwargs.items", "exc.response", "failed.append", "exc.info", "inspect_results.get", "exc_info.setdefault", "containers.items", "docker.APIClient", "log.debug", "container_depends.extend", "ret.update", "networks.values", "pulled.append", "os.path", "val.get", "__file_client__.value", "private_port.partition", "ret.add", "warnings.append", "ret.pop", "already_pulled.append", "copy.deepcopy", "time.localtime", "img.pop", "protocol.lower", "ignore.append", "salt.pillar", "full_host_config.update", "__context__.setdefault", "command_prefix.sub", "fnmatch.filter", "ret.append", "subprocess.list2cmdline", "cinfo.get", "__context__.get", "errors.append", "salt.fileclient", "salt.utils", "compressor.flush", "functools.wraps", "item.get", "re.compile", "os.environ", "st_.render_highstate", "context_data.setdefault", "response.read", "key_map.get", "output.split", "driver.startswith", "salt.client", "docker.Client", "net1.get", "status.startswith", "limit.append", "os.remove", "key.startswith", "container.get", "local.get"]}, "dpkg_lowpkg.py": {"libraries": ["os", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.exceptions.SaltInvocationError", "datetime", "salt.utils.args", "re", "logging", "salt.utils.data", "salt.utils.path"], "function_names": ["info", "_get_pkg_install_time", "_get_pkg_info", "unpurge", "file_dict", "file_list", "_get_pkg_ds_avail", "_get_pkg_license", "bin_pkg_info", "list_pkgs", "__virtual__"], "function_calls": ["_get_pkg_install_time", "dict", "_get_pkg_info", "SaltInvocationError", "_get_pkg_ds_avail", "list", "_get_pkg_license", "int", "sorted", "len", "CommandExecutionError", "set"], "class_names": [], "class_method_calls": ["__context__.pop", "log.error", "kwargs.pop", "__grains__.get", "os.path", "elm.strip", "nfo.get", "logging.getLogger", "re.split", "line.strip", "value.strip", "licenses.add", "fp_.read", "cmd.strip", "el.strip", "line.split", "pkg_info.split", "ret.append", "ret.union", "output.splitlines", "re.match", "salt.utils", "os.linesep", "pkg_info_line.split", "datetime.datetime", "pkg_data.get", "dselect_pkg_avail.get", "line.startswith", "key.lower"]}, "drac.py": {"libraries": ["salt.exceptions", "salt.utils.path"], "function_names": ["absent", "present", "network", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils"]}, "dracr.py": {"libraries": ["salt.modules.cmdmod", "os", "salt.exceptions.CommandExecutionError", "re", "logging", "salt.utils.path"], "function_names": ["bare_rac_cmd", "set_permissions", "get_chassis_datacenter", "list_users", "__execute_ret", "create_user", "email_alerts", "change_password", "get_slotname", "inventory", "list_slotnames", "__execute_cmd", "set_slotname", "system_info", "server_poweroff", "server_powerstatus", "set_chassis_datacenter", "set_network", "nameservers", "get_general", "delete_user", "set_general", "mapit", "set_snmp", "__virtual__", "server_hardreset", "update_firmware", "set_niccfg", "server_pxe", "_update_firmware", "set_nicvlan", "network_info", "set_dns_dracname", "idrac_general", "update_firmware_nfs_or_cifs", "deploy_password", "get_chassis_location", "server_reboot", "server_power", "get_chassis_name", "__parse_drac", "syslog", "set_chassis_name", "get_dns_dracname", "server_poweron", "deploy_snmp", "set_chassis_location"], "function_calls": ["bare_rac_cmd", "set_permissions", "range", "list_users", "__execute_ret", "change_password", "list", "int", "inventory", "CommandExecutionError", "list_slotnames", "__execute_cmd", "system_info", "str", "get_general", "delete_user", "sorted", "set_general", "map", "_update_firmware", "dict", "network_info", "__parse_drac", "len", "set"], "class_names": [], "class_method_calls": ["os.path", "log.warning", "logging.getLogger", "module.startswith", "re.split", "d.items", "inv.get", "user.split", "module.index", "l.strip", "i.split", "i.strip", "users.keys", "user.startswith", "fmtlines.append", "output.splitlines", "salt.utils", "l.startswith", "val.strip", "prop.strip", "l.split", "permissions.split", "i.rstrip", "salt.modules", "key.startswith", "_uids.add"]}, "drbd.py": {"libraries": ["logging"], "function_names": ["_empty", "_analyse_overview_field", "status", "_add_volume", "_count_spaces_startswith", "_unknown_parser", "_add_res", "_line_parser", "overview", "_add_peernode", "_analyse_status_type"], "function_calls": ["_analyse_overview_field", "_count_spaces_startswith", "_line_parser", "len", "func", "isinstance", "_analyse_status_type"], "class_names": [], "class_method_calls": ["logging.getLogger", "switch.get", "content.split", "ret.append", "line.strip", "line.split", "partnerdiskstate.startswith", "localdiskstate.startswith", "field.split", "lastpnodevolumes.append", "i.isspace", "cmd.append"]}, "dummyproxy_pkg.py": {"libraries": ["salt.utils.platform", "salt.utils.data", "logging"], "function_names": ["remove", "upgrade", "install", "list_pkgs", "installed", "version", "__virtual__"], "function_calls": ["str", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils", "results.update"]}, "dummyproxy_service.py": {"libraries": ["salt.utils.platform", "logging"], "function_names": ["list_", "status", "running", "start", "enabled", "get_all", "restart", "stop", "__virtual__"], "function_calls": ["get_all", "status"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "ebuildpkg.py": {"libraries": ["sys", "os", "salt.utils.path", "salt.utils.systemd", "salt.utils.compat", "salt.utils.pkg", "salt.exceptions.MinionError", "portage", "salt.exceptions.CommandExecutionError", "salt.utils.versions", "datetime", "re", "salt.utils.args", "logging", "salt.utils.functools", "salt.utils.data", "copy"], "function_names": ["list_upgrades", "porttree_matches", "purge", "_p_to_cp", "version_cmp", "_cpv_to_version", "__virtual__", "_porttree", "update", "upgrade_available", "_cpv_to_cp", "remove", "upgrade", "_vartree", "depclean", "version_clean", "version", "_flags_changed", "_get_upgradable", "list_pkgs", "refresh_db", "_get", "_list_pkgs_from_context", "_process_emerge_err", "check_db", "check_extra_requirements", "install", "ex_mod_init", "_allnodes", "latest_version"], "function_calls": ["any", "list", "CommandExecutionError", "porttree_matches", "_p_to_cp", "_cpv_to_version", "_porttree", "remove", "_cpv_to_cp", "depclean", "_vartree", "version", "_flags_changed", "_get_upgradable", "list_pkgs", "refresh_db", "_get", "_list_pkgs_from_context", "_process_emerge_err", "len", "set", "_allnodes", "latest_version"], "class_names": [], "class_method_calls": ["__context__.pop", "changes.update", "kwargs.pop", "log.error", "log.debug", "verstr.replace", "datetime.timedelta", "ret.update", "portage.dep", "log.info", "os.path", "log.warning", "re.M", "logging.getLogger", "portage.dep_getkey", "re.split", "matches.append", "portage.db", "copy.deepcopy", "rexp.findall", "cmd.extend", "portage.root", "match.groups", "kwargs.get", "cmd.append", "portage.cpv_getkey", "ret.setdefault", "sys.path", "des_uses.difference", "pkg_params.items", "re.match", "salt.utils", "ver2.group", "portage.exception", "re.compile", "datetime.datetime", "des_repo.group", "portage.versions", "keys.index", "ver1.group", "targets.append", "target.rfind", "cur_use.split", "conf_flags.remove"]}, "eix.py": {"libraries": ["salt.utils.path"], "function_names": ["update", "sync", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils"]}, "elasticsearch.py": {"libraries": ["salt.utils.json", "logging"], "function_names": ["index_present", "search_template_present", "search_template_absent", "index_absent", "pipeline_present", "pipeline_absent", "alias_present", "index_template_absent", "index_template_present", "alias_absent"], "function_calls": ["str", "isinstance", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "alias.get", "salt.utils"]}, "environ.py": {"libraries": ["salt.utils.platform", "os"], "function_names": ["setenv", "key_exists", "_norm_key", "__virtual__"], "function_calls": ["dict", "isinstance", "_norm_key", "key_exists"], "class_names": [], "class_method_calls": ["os.environ", "already_set.append", "environ.items", "current_environ.get", "salt.utils", "key.upper"]}, "eselect.py": {"libraries": [], "function_names": ["set_", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "etcd_mod.py": {"libraries": ["salt.utils.etcd_util"], "function_names": ["set_", "wait_set", "directory", "wait_rm", "rm", "_etcd_action", "mod_watch", "__virtual__"], "function_calls": ["_etcd_action", "set_", "rm"], "class_names": [], "class_method_calls": ["kwargs.get", "salt.utils"]}, "ethtool.py": {"libraries": ["salt.exceptions.CommandExecutionError", "logging"], "function_names": ["ring", "pause", "offload", "coalesce", "__virtual__"], "function_calls": ["str", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "diff.append", "kwargs.items", "key.lower", "new.update"]}, "event.py": {"libraries": ["fnmatch", "tornado.ioloop", "salt.utils.versions.warn_until", "hashlib", "salt.utils.files", "datetime", "salt.payload", "logging", "tornado.iostream", "salt.utils.stringutils", "salt.utils.dicttrim", "os", "time", "salt.utils.process", "salt.channel.client", "salt.utils.zeromq", "collections.abc.MutableMapping", "salt.transport.ipc", "salt.minion", "salt.utils.asynchronous", "salt.utils.cache", "contextlib", "salt.defaults.exitcodes", "errno", "atexit", "salt.utils.platform", "salt.config", "asyncio"], "function_names": ["close", "_get_event", "__enter__", "_match_tag_endswith", "fire_args", "destroy", "_flush_event_single", "iter_events", "handle_publish", "__load_cache_regex", "__del__", "set_event_handler", "_match_tag_regex", "_handle_signals", "run", "__exit__", "fire_running", "unpack", "fire_master", "subscribe", "close_pub", "_subproxy_match", "pack", "get_event_noblock", "fire_ret_load", "get_event", "connect_pub", "fire_event", "_match_tag_find", "_fire_ret_load_specific_fun", "get_event_block", "_filter", "_get_match_func", "flush_events", "close_pull", "_match_tag_fnmatch", "connect_pull", "__init__", "unsubscribe", "tagify", "_match_tag_startswith", "get_master_event", "_check_pending"], "function_calls": ["any", "range", "int", "float", "cb", "hasattr", "super", "str", "MasterEvent", "len", "sorted", "isinstance", "match_func", "get_event", "SaltEvent", "pmatch_func", "ValueError", "warn_until", "hash_type", "enumerate", "getattr", "get_master_event", "tagify"], "class_names": ["StateFire", "AsyncEventPublisher", "MinionEvent", "EventReturn", "NamespacedEvent", "SaltEvent", "MasterEvent", "LocalClientEvent", "EventPublisher"], "class_method_calls": ["raw.partition", "tornado.ioloop", "load.update", "self.pending_events", "logging.getLogger", "self.event", "ret.get", "self.pack", "self.stop", "self.flush_events", "self.puller", "self.__load_cache_regex", "os.makedirs", "self.close_pull", "load.get", "self.connect_pull", "event_tag.startswith", "datetime.datetime", "atexit.unregister", "salt.crypt", "self.cpush", "fnmatch.fnmatch", "self.__class__", "log.critical", "log.info", "salt.payload", "self.pending_tags", "log.warning", "tornado.iostream", "salt.transport", "self.raise_errors", "self.print_func", "parts.append", "self.opts", "TAGS.get", "salt.minion", "time.time", "self.connect_pub", "event_tag.find", "contextlib.suppress", "self.node", "logging.DEBUG", "os.chmod", "self.unpack", "log.error", "TAGPARTER.join", "exc.errno", "self.base", "self.event_queue", "atexit.register", "self.destroy", "opts.get", "self._run_io_loop_sync", "self.event_return_queue_max_seconds", "self._get_match_func", "self._flush_event_single", "self.publisher", "log.trace", "self.io_loop", "self._closing", "cls.cache_regex", "errno.ENOENT", "self.event_return_queue", "data.get", "_event.fire_event", "self.subscriber", "tag.split", "salt.config", "self._fire_ret_load_specific_fun", "parts.extend", "salt.channel", "log.level", "log.debug", "self._get_event", "os.path", "ret.items", "self.get_event", "self.keep_loop", "channel.send", "self.minion", "self.close_pub", "self.handle_publish", "self.auth", "asyncio.create_task", "salt.utils", "self._subproxy_match", "self._check_pending", "self.cache_regex", "self.pusher", "os.unlink", "self.fire_event", "os.nice", "self._filter", "event_tag.endswith", "self.close", "self.cpub"]}, "extfs.py": {"libraries": ["salt.utils.platform", "logging"], "function_names": ["dump", "tune", "attributes", "mkfs", "blocks", "__virtual__"], "function_calls": ["str", "len", "dump"], "class_names": [], "class_method_calls": ["logging.getLogger", "ret.append", "line.split", "line.startswith", "line.strip", "salt.utils", "line.replace"]}, "firewalld.py": {"libraries": ["salt.output.nested", "salt.exceptions.CommandExecutionError", "salt.utils.path", "logging"], "function_names": ["todict", "present", "service", "__init__", "_present", "__eq__", "__ne__", "__hash__", "_parse_forward", "__virtual__"], "function_calls": ["hash", "list", "_present", "len", "_parse_forward", "set", "ForwardingMapping"], "class_names": ["ForwardingMapping"], "class_method_calls": ["log.error", "self.protocol", "block_icmp.remove", "nested.output", "self.destaddr", "other.destaddr", "other.protocol", "self.srcport", "logging.getLogger", "other.srcport", "comment.append", "fwd.destport", "mapping.split", "nested.__opts__", "fwd.destaddr", "other.destport", "self.__eq__", "fwd.srcport", "self.destport", "salt.utils", "fwd.todict", "fwd.protocol"]}, "freebsd_sysctl.py": {"libraries": ["salt.utils.files", "os", "salt.exceptions.CommandExecutionError", "logging"], "function_names": ["_formatfor", "__virtual__", "persist", "show", "get", "assign"], "function_calls": ["any", "_formatfor", "str", "len", "CommandExecutionError", "get", "assign"], "class_names": [], "class_method_calls": ["value.append", "logging.getLogger", "log.error", "rest.split", "nlines.append", "l.startswith", "new_value.split", "line.split", "line.strip", "line.startswith", "os.path", "f.readlines", "salt.utils", "out.splitlines", "ofile.writelines", "rest.startswith"]}, "freebsd_update.py": {"libraries": ["salt.exceptions.CommandNotFoundError", "salt.utils.path", "logging"], "function_names": ["update", "_wrapper", "upgrade", "fetch", "rollback", "_cmd", "install", "ids", "__virtual__"], "function_calls": ["_wrapper", "_cmd", "CommandNotFoundError", "float", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "params.append", "salt.utils", "stdout.items", "res.items", "log.warning"]}, "freebsdjail.py": {"libraries": ["os", "salt.utils.stringutils", "subprocess", "salt.utils.files", "salt.utils.args", "re"], "function_names": ["status", "show_config", "is_enabled", "sysctl", "start", "fstab", "get_enabled", "restart", "stop", "__virtual__"], "function_calls": ["show_config", "next"], "class_names": [], "class_method_calls": ["jailopt.split", "subprocess.call", "subprocess.check_output", "jailopt.strip", "re.search", "os.access", "key.strip", "found_jails.split", "value.strip", "line.strip", "line.partition", "line.split", "ret.append", "salt.utils", "value.split", "line.startswith", "key.split", "services.split", "os.R_OK", "sysctl_jail.splitlines"]}, "freebsdkmod.py": {"libraries": ["salt.utils.files", "os", "re"], "function_names": ["remove", "lsmod", "check_available", "_get_module_name", "load", "is_loaded", "_new_mods", "_rm_mods", "available", "_get_persistent_modules", "_remove_persistent_module", "_set_persistent_module", "mod_list", "__virtual__"], "function_calls": ["lsmod", "_get_module_name", "_new_mods", "list", "available", "_rm_mods", "len", "_get_persistent_modules", "sorted", "_remove_persistent_module", "set", "_set_persistent_module", "mod_list"], "class_names": [], "class_method_calls": ["match.group", "post.add", "line.split", "ret.append", "line.strip", "comps.index", "_LOAD_MODULE.format", "pre.add", "bpath.split", "_MODULE_RE.format", "os.path", "salt.utils", "mods.add", "re.search"]}, "freebsdpkg.py": {"libraries": ["salt.utils.pkg", "salt.exceptions.MinionError", "salt.exceptions.CommandExecutionError", "salt.utils.functools", "re", "logging", "salt.utils.data", "copy"], "function_names": ["_match", "remove", "refresh_db", "_rehash", "_list_pkgs_from_context", "__virtual__", "file_dict", "file_list", "install", "version", "list_pkgs", "latest_version", "_get_repo_options"], "function_calls": ["any", "_match", "float", "_rehash", "_list_pkgs_from_context", "file_dict", "len", "CommandExecutionError", "set", "list_pkgs", "_get_repo_options"], "class_names": [], "class_method_calls": ["__context__.pop", "log.error", "kwargs.pop", "pkgs_re.findall", "log.debug", "origins.get", "match_pattern.format", "shell.split", "ret.items", "logging.getLogger", "pkg.rsplit", "matches.append", "copy.deepcopy", "out.splitlines", "pkgs.get", "args.append", "kwargs.get", "args.extend", "line.split", "__context__.get", "errors.append", "salt.utils", "ambiguous.append", "re.compile", "line.startswith", "full_pkg_strings.append", "files.extend"]}, "freebsdports.py": {"libraries": ["fnmatch", "os", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.exceptions.SaltInvocationError", "re", "logging", "salt.utils.data", "salt.utils.path"], "function_names": ["update", "_portsnap", "_check_portname", "rmconfig", "showconfig", "install", "_normalize", "search", "deinstall", "config", "_options_file_exists", "list_all", "_write_options", "_options_dir", "__virtual__"], "function_calls": ["showconfig", "list", "rmconfig", "_options_file_exists", "CommandExecutionError", "float", "_options_dir", "_portsnap", "str", "_normalize", "all", "isinstance", "_check_portname", "SaltInvocationError", "list_all", "iter", "next", "deinstall", "len", "_write_options"], "class_names": [], "class_method_calls": ["__context__.pop", "log.error", "name.split", "old.get", "sorted_options.sort", "stripped.count", "conf_ptr.update", "os.path", "re.search", "logging.getLogger", "new.get", "x.startswith", "opt_tmpl.format", "cmd.append", "port.rsplit", "os.makedirs", "fp_.write", "name.replace", "fnmatch.filter", "ret.append", "new_config.get", "re.match", "salt.utils", "opts.items", "name.rsplit", "stripped.endswith", "fnmatch.fnmatch", "name.count"]}, "freebsdservice.py": {"libraries": ["fnmatch", "salt.utils.decorators", "os", "salt.utils.files", "re", "logging", "salt.exceptions.CommandNotFoundError", "salt.utils.path"], "function_names": ["enabled", "_get_jail_path", "get_disabled", "status", "enable", "_cmd", "reload_", "available", "_switch", "__virtual__", "_get_rcscript", "_get_rcvar", "disabled", "restart", "stop", "disable", "start", "get_all", "missing", "get_enabled"], "function_calls": ["_get_jail_path", "_cmd", "_get_rcvar", "bool", "CommandNotFoundError", "available", "_switch", "get_all", "sorted", "enabled", "len", "set", "get_enabled"], "class_names": [], "class_method_calls": ["log.error", "nlines.append", "line.endswith", "os.path", "re.search", "line.lstrip", "logging.getLogger", "state.lower", "x.split", "ofile.writelines", "kwargs.get", "rcvar.replace", "fnmatch.filter", "line.split", "ret.append", "salt.utils", "j.split", "jails.splitlines", "path.rstrip", "decorators.memoize", "line.startswith", "srv.isupper"]}, "freezer.py": {"libraries": ["os", "salt.utils.json", "salt.utils.files.fopen", "salt.exceptions.CommandExecutionError", "salt.utils.dictdiffer", "salt.utils.args.clean_kwargs", "logging"], "function_names": ["freeze", "list_", "compare", "_add_missing_repositories", "status", "_paths", "_remove_extra_repositories", "_remove_extra_packages", "_add_missing_packages", "_states_path", "restore", "__virtual__"], "function_calls": ["_add_missing_repositories", "status", "_paths", "CommandExecutionError", "_remove_extra_repositories", "_remove_extra_packages", "zip", "sorted", "all", "_add_missing_packages", "set", "fopen", "_states_path", "clean_kwargs"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "os.makedirs", "state.endswith", "_tmp_kwargs.update", "os.listdir", "ret.append", "content.update", "os.remove", "json.dump", "os.path", "log.info", "salt.utils", "json.load", "ofile.endswith"]}, "gcp_addon.py": {"libraries": ["googleapiclient.discovery", "oauth2client.service_account", "logging"], "function_names": ["_get_network", "route_create", "_get_instance", "__virtual__"], "function_calls": ["str", "_get_network", "_get_instance"], "class_names": [], "class_method_calls": ["logging.getLogger", "route_create_request.execute", "oauth2client.service_account", "service.routes", "googleapiclient.discovery", "routes.insert", "service.instances", "service.networks"]}, "gem.py": {"libraries": ["salt.utils.versions", "re", "logging"], "function_names": ["removed", "sources_add", "sources_remove", "installed", "__virtual__"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["logging.getLogger", "match.group", "re.sub", "re.match", "salt.utils", "log.warning"]}, "genesis.py": {"libraries": ["os", "shlex", "salt.utils.stringutils", "salt.utils.yast", "salt.utils.preseed", "salt.utils.validate.path", "salt.exceptions.SaltInvocationError", "salt.syspaths", "uuid", "logging", "pprint", "salt.utils.kickstart", "salt.utils.path"], "function_names": ["pack", "_mkpart", "_mkfs", "_bootstrap_yum", "_tar", "_make_nodes", "avail_platforms", "_compress", "_bootstrap_deb", "unpack", "_bootstrap_pacman", "_populate_cache", "ldd_deps", "bootstrap", "_untar", "mksls", "__virtual__"], "function_calls": ["_mkpart", "_mkfs", "_bootstrap_yum", "_tar", "_make_nodes", "_compress", "SaltInvocationError", "_bootstrap_deb", "str", "_bootstrap_pacman", "_populate_cache", "ldd_deps", "_untar", "isinstance"], "class_names": [], "class_method_calls": ["log.error", "log.debug", "os.listdir", "os.path", "rf.endswith", "pprint.pformat", "logging.getLogger", "start.rstrip", "line.strip", "pkgs.append", "out.splitlines", "pkgs.split", "shlex.quote", "line.split", "ret.append", "salt.syspaths", "salt.utils", "rf.startswith", "exclude_pkgs.split", "pkgs.remove", "uuid.uuid4"]}, "gentoo_service.py": {"libraries": ["fnmatch", "salt.utils.systemd", "salt.utils.odict", "re", "logging"], "function_names": ["_enable_delta", "enabled", "zap", "_disable_delta", "_ret_code", "get_disabled", "status", "_service_cmd", "enable", "reload_", "available", "_enable_disable_cmd", "__virtual__", "disabled", "_list_services", "restart", "stop", "disable", "start", "_get_service_list", "get_all", "missing", "get_enabled"], "function_calls": ["get_disabled", "_enable_delta", "dict", "_service_cmd", "bool", "_get_service_list", "_list_services", "available", "sorted", "_enable_disable_cmd", "len", "get_all", "set", "get_enabled", "_disable_delta", "isinstance", "_ret_code"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "enabled_services.update", "fnmatch.filter", "commands.append", "line.split", "l.strip", "disabled_services.update", "salt.utils", "re.search", "odict.OrderedDict"]}, "gentoolkitmod.py": {"libraries": ["os", "gentoolkit.eclean.cli", "gentoolkit.eclean.clean", "gentoolkit.eclean.search", "gentoolkit.eclean.exclude"], "function_names": ["eclean_dist", "_eclean_progress_controller", "_pretty_size", "_parse_exclude", "revdep_rebuild", "eclean_pkg", "glsa_check_list", "_glsa_list_process_output", "__virtual__"], "function_calls": ["_pretty_size", "_parse_exclude", "dict", "list", "round", "_glsa_list_process_output", "isinstance"], "class_names": [], "class_method_calls": ["cves.split", "search.findPackages", "engine.findDistfiles", "cleaner.clean_dist", "desc.rsplit", "excludemod.parseExcludeFile", "units.pop", "search.DistfilesSearch", "line.split", "cleaner.clean_pkgs", "search.pkgdir", "cli.parseSize", "excludemod.ParseExcludeFileException", "clean.CleanUp", "os.path", "cli.parseTime"]}, "git.py": {"libraries": ["errno", "os", "string", "salt.utils.url", "salt.utils.versions.Version", "salt.exceptions.CommandExecutionError", "salt.utils.files", "re", "salt.utils.args", "logging", "salt.utils.versions"], "function_names": ["_fail", "_clone_changes", "_uptodate", "_short_sha", "config_set", "_branch_changes", "_get_branch_opts", "_already_cloned", "_get_local_rev_and_branch", "detached", "_not_fast_forward", "_neutral_test", "__virtual__", "config_unset", "_revs_equal", "_failed_submodule_update", "_strip_exc", "_need_branch_change", "present", "_format_comments", "latest", "cloned", "_failed_fetch"], "function_calls": ["Version", "_fail", "_clone_changes", "_uptodate", "_short_sha", "_branch_changes", "_get_branch_opts", "_already_cloned", "_get_local_rev_and_branch", "str", "_not_fast_forward", "all", "_neutral_test", "isinstance", "bool", "_revs_equal", "_failed_submodule_update", "_strip_exc", "_need_branch_change", "_format_comments", "len", "set", "_failed_fetch"], "class_names": [], "class_method_calls": ["log.error", "kwargs.pop", "log.exception", "log.debug", "refname.startswith", "os.listdir", "rev1.startswith", "log.info", "os.path", "name.lstrip", "ret.extend", "remote_loc.capitalize", "exc.errno", "log.warning", "removal_errors.items", "logging.getLogger", "all_remote_refs.items", "post_matches.items", "clone_opts.extend", "x.replace", "string.hexdigits", "ret.setdefault", "actions.append", "comments.append", "ret.append", "salt.utils", "rev.lower", "errno.ENOENT", "pre_matches.items", "base_rev.startswith", "multivar.split", "os.unlink", "exc.strerror", "refname.partition", "failed.append", "re.sub", "new_multivar.append", "msg.replace"]}, "github.py": {"libraries": ["salt.utils.json", "salt.utils.http", "logging"], "function_names": ["get_user_pubkeys"], "function_calls": ["str", "isinstance", "next", "iter"], "class_names": [], "class_method_calls": ["logging.getLogger", "user.keys", "salt.utils"]}, "glanceng.py": {"libraries": ["shade"], "function_names": ["setup_clouds", "image_delete", "image_get", "compare_changes", "get_openstack_cloud", "image_search", "_clean_kwargs", "get_operator_cloud", "image_create", "update_image_properties", "image_list", "__virtual__"], "function_calls": ["get_openstack_cloud", "get_operator_cloud", "_clean_kwargs"], "class_names": [], "class_method_calls": ["kwargs.pop", "shade.openstack_cloud", "cloud.delete_image", "cloud.get_image", "cloud.update_image_properties", "shade.operator_cloud", "cloud.create_image", "cloud.list_images", "cloud.search_images", "obj.items"]}, "glassfish.py": {"libraries": ["salt.utils.json", "requests", "salt.exceptions.CommandExecutionError"], "function_names": ["destination_present", "_json_to_unicode", "__virtual__", "system_properties_absent", "destination_absent", "jdbc_datasource_absent", "connection_factory_absent", "_do_element_present", "jdbc_datasource_present", "_do_element_absent", "connection_factory_present", "system_properties_present", "_is_updated"], "function_calls": ["any", "_json_to_unicode", "str", "_do_element_present", "_do_element_absent", "isinstance", "_is_updated"], "class_names": [], "class_method_calls": ["old_conf.items", "requests.ConnectionError", "data.update", "salt.utils", "data.items"]}, "glusterfs.py": {"libraries": ["salt.utils.network", "salt.exceptions.SaltCloudException", "salt.utils.cloud", "logging"], "function_names": ["peered", "volume_present", "max_op_version", "op_version", "add_volume_bricks", "started", "__virtual__"], "function_calls": ["any", "set", "int"], "class_names": [], "class_method_calls": ["logging.getLogger", "peers.values", "this_ips.update", "newpeers.values", "this_ips.intersection", "salt.utils", "suc.check_name"]}, "gnomedesktop.py": {"libraries": ["re", "logging"], "function_names": ["wm_preferences", "desktop_interface", "_check_current_value", "_do", "desktop_lockdown"], "function_calls": ["_check_current_value", "str", "_do", "locals", "isinstance"], "class_names": [], "class_method_calls": ["messages.append", "logging.getLogger", "re.sub", "gnome_kwargs.update"]}, "google_chat.py": {"libraries": ["json"], "function_names": ["send_message", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["result.get", "json.dumps"]}, "gpg.py": {"libraries": ["salt.utils.dictupdate", "salt.exceptions.SaltInvocationError", "salt.utils.immutabletypes", "logging"], "function_names": ["present", "absent"], "function_calls": ["str", "set", "isinstance", "list"], "class_names": [], "class_method_calls": ["logging.getLogger", "immutabletypes.freeze", "salt.utils", "current_keys.append"]}, "grafana4.py": {"libraries": ["requests"], "function_names": ["_get_headers", "switch_org", "delete_org_user", "update_org_address", "create_user", "update_org_prefs", "delete_dashboard", "create_datasource", "get_user_orgs", "delete_datasource", "_get_auth", "get_datasource", "get_org_address", "delete_user_org", "update_user_password", "delete_user", "create_org", "get_dashboard", "__virtual__", "update_org_user", "create_update_dashboard", "update_datasource", "get_org_prefs", "delete_org", "get_org_users", "get_user_data", "update_user", "get_org", "update_user_permissions", "get_orgs", "get_user", "update_org", "get_datasources", "get_users", "create_org_user"], "function_calls": ["get_org", "_get_auth", "_get_headers", "switch_org", "get_datasources", "get_users", "isinstance"], "class_names": [], "class_method_calls": ["response.status_code", "response.json", "response.raise_for_status", "requests.put", "requests.get", "profile.get", "requests.auth", "requests.patch", "data.get", "requests.post", "requests.delete"]}, "groupadd.py": {"libraries": ["os", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "salt.utils.files", "functools", "logging", "grp", "salt.utils.path"], "function_names": ["getent", "info", "_getgrnam", "deluser", "_chattrib", "members", "delete", "_which", "chgid", "_format_info", "_getgrall", "add", "adduser", "__virtual__"], "function_calls": ["info", "getgrall", "_chattrib", "KeyError", "getgrnam", "str", "_which", "int", "_format_info", "len", "CommandExecutionError"], "class_names": [], "class_method_calls": ["data.gr_name", "log.error", "log.debug", "data.gr_gid", "data.gr_passwd", "__grains__.get", "functools.partial", "os.path", "logging.getLogger", "grp.getgrnam", "line.strip", "cmd.extend", "cmd.append", "data.gr_mem", "members_list.split", "grp.getgrall", "ret.append", "salt.utils", "grp.struct_group", "out.split"]}, "grub_legacy.py": {"libraries": ["salt.utils.files", "salt.utils.decorators", "os", "salt.exceptions.CommandExecutionError"], "function_names": ["_detect_conf", "_parse_line", "__virtual__", "version", "conf"], "function_calls": ["CommandExecutionError", "_parse_line", "_detect_conf"], "class_names": [], "class_method_calls": ["decorators.memoize", "parts.pop", "stanzas.append", "line.split", "stanza.strip", "line.startswith", "line.endswith", "line.strip", "os.path", "salt.utils", "msg.format"]}, "guestfs.py": {"libraries": ["os", "time", "salt.config.DEFAULT_HASH_TYPE", "hashlib", "logging", "tempfile", "salt.utils.path"], "function_names": ["mount", "umount", "__virtual__"], "function_calls": ["hash_type", "len", "getattr"], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "os.makedirs", "os.sep", "log.debug", "os.listdir", "os.urandom", "time.sleep", "location.lstrip", "salt.utils", "os.path", "log.info", "tempfile.gettempdir"]}, "hadoop.py": {"libraries": ["salt.utils.path"], "function_names": ["dfs", "dfsadmin_report", "dfs_absent", "namenode_format", "version", "dfs_present", "_hadoop_cmd", "__virtual__"], "function_calls": ["_hadoop_cmd"], "class_names": [], "class_method_calls": ["salt.utils"]}, "haproxyconn.py": {"libraries": ["os", "time", "haproxy.conn", "haproxy.cmds", "logging", "stat"], "function_names": ["show_frontends", "set_state", "list_backends", "wait_state", "list_frontends", "disable_server", "get_weight", "get_sessions", "num", "show_backends", "get_backend", "enable_server", "_get_conn", "set_weight", "list_servers", "__virtual__"], "function_calls": ["show_frontends", "list_backends", "num", "get_weight", "show_backends", "get_backend", "int", "_get_conn", "getStats", "list_servers", "setServerState"], "class_names": ["getStats", "setServerState"], "class_method_calls": ["logging.getLogger", "os.stat", "haproxy.conn", "active_field.lower", "haproxy.cmds", "ha_conn.sendCmd", "line.split", "line.startswith", "result.split", "time.time", "stat.S_ISSOCK", "os.path", "data.replace", "value.lower"]}, "hashutil.py": {"libraries": ["salt.exceptions", "base64", "salt.utils.stringutils", "hashlib", "salt.utils.files", "hmac", "io", "salt.utils.hashutils"], "function_names": ["base64_encodestring", "digest_file", "sha512_digest", "base64_b64decode", "base64_decodefile", "base64_b64encode", "hmac_signature", "sha256_digest", "digest", "hmac_compute", "github_signature", "md5_digest", "base64_decodestring", "base64_encodefile"], "function_calls": ["isinstance", "hash_func", "getattr"], "class_names": [], "class_method_calls": ["salt.exceptions", "io.StringIO", "hmac.new", "hmac.compare_digest", "base64.encode", "encoded_f.read", "hmac_hash.hexdigest", "f.read", "io.BytesIO", "salt.utils", "hashing_funcs.get", "base64.decode", "challenge_hmac.split", "encoded_f.seek"]}, "heat.py": {"libraries": ["salt.exceptions", "oslo_serialization.jsonutils", "salt.utils.json", "salt.utils.stringutils", "salt.utils.files", "logging", "salt.utils.versions", "salt.utils.yaml"], "function_names": ["absent", "_parse_template", "deployed", "__virtual__"], "function_calls": ["str", "_parse_template", "ValueError"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.exceptions", "tmpl_str.startswith", "log.debug", "tfp_.read", "jsonutils.dumps", "salt.utils", "logging.DEBUG", "tmpl_str.strip", "logging.basicConfig"]}, "helm.py": {"libraries": ["salt.exceptions.CommandExecutionError", "logging"], "function_names": ["repo_updated", "release_absent", "repo_managed", "release_present"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["result.update", "logging.getLogger", "__opts__.get", "release_cur_status.pop"]}, "hg.py": {"libraries": ["os", "salt.states.git._neutral_test", "salt.states.git._fail", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "logging", "shutil"], "function_names": ["_handle_existing", "_update_repo", "latest", "_clone_repo", "__virtual__"], "function_calls": ["_fail", "_handle_existing", "_update_repo", "_clone_repo", "_neutral_test"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "os.listdir", "shutil.rmtree", "log.info", "salt.utils", "os.path"]}, "highstate_doc.py": {"libraries": [], "function_names": ["note"], "function_calls": ["len"], "class_names": [], "class_method_calls": []}, "hosts.py": {"libraries": ["errno", "os", "salt.utils.stringutils", "salt.utils.odict", "salt.utils.files", "logging"], "function_names": ["list_hosts", "_get_or_create_hostfile", "has_pair", "get_alias", "_write_hosts", "set_comment", "set_host", "add_host", "rm_host", "get_ip", "_list_hosts", "__get_hosts_filename"], "function_calls": ["_get_or_create_hostfile", "has_pair", "dict", "_write_hosts", "list", "enumerate", "str", "set", "isinstance", "_list_hosts", "__get_hosts_filename"], "class_names": [], "class_method_calls": ["ofile.write", "__context__.pop", "hosts.setdefault", "hosts.items", "os.path", "line.index", "logging.getLogger", "lines.append", "line.strip", "fp_.readlines", "ofile.writelines", "odict.OrderedDict", "host.startswith", "ret.setdefault", "line.split", "newline.strip", "alias.strip", "salt.utils", "errno.ENOENT", "os.linesep", "h.insert", "host_info.split", "line.startswith", "ip.startswith", "tmpline.split", "tmpline.startswith", "comps.pop"]}, "http.py": {"libraries": ["backports.ssl_match_hostname.match_hostname", "tornado.httputil", "ssl", "salt.utils.json", "salt.utils.files", "tornado.httpclient.HTTPClient", "logging", "ssl.CertificateError", "urllib.parse", "salt.version", "salt.ext.ssl_match_hostname.match_hostname", "salt.utils.stringutils", "requests", "tornado.simple_httpclient", "tornado.httpclient", "email.message", "io", "salt.utils.network", "pprint", "salt.utils.xmlutil", "salt.utils.msgpack", "salt.ext.ssl_match_hostname.CertificateError", "os", "xml.etree.ElementTree", "salt.loader", "http.client", "ssl.match_hostname", "salt.syspaths", "re", "salt.template.compile_template", "salt.utils.data", "zlib", "urllib.request", "http.cookiejar", "salt.utils.url", "socket", "urllib.error", "salt.utils.platform", "salt.config", "salt.utils.args", "salt.utils.decorators.jinja.jinja_filter", "gzip", "backports.ssl_match_hostname.CertificateError", "salt.utils.yaml", "certifi"], "function_names": ["update_ca_bundle", "_decode_result", "_decode_result_text", "parse_cookie_header", "get_ca_bundle", "_sanitize_url_components", "query", "sanitize_url", "session", "__decompressContent", "_render"], "function_calls": ["list", "HTTPClient", "int", "sanitize_url", "hasattr", "__decompressContent", "_render", "get_ca_bundle", "str", "jinja_filter", "isinstance", "match_hostname", "_decode_result_text", "dict", "compile_template", "_sanitize_url_components", "streaming_callback", "ValueError", "header_callback", "_decode_result", "query", "len", "parse_cookie_header"], "class_names": [], "class_method_calls": ["result.content", "sockwrap.getpeercert", "result.status_code", "sess.proxies", "sess.auth", "requests_log.setLevel", "sess.cookies", "result.url", "logging.getLogger", "msg.add_header", "handlers.append", "zlib.decompress", "tornado.simple_httpclient", "io.BytesIO", "file_roots.get", "socket.AF_INET", "url.startswith", "ret.read", "msg.get_content_charset", "http.client", "gzip.GzipFile", "session.verify", "data.copy", "sess_cookies.save", "header_dict.update", "urllib.error", "session.auth", "log_url.rstrip", "socket.gaierror", "result.code", "f.read", "result.headers", "requests.Session", "log.warning", "urllib.parse", "pprint.pformat", "cookie.pop", "tornado.httpclient", "xml.to_dict", "sess.request", "url_tmp.split", "re.match", "request.add_header", "socket.socket", "msg.get_content_type", "header_tpl.splitlines", "morsels.append", "result.encoding", "logging.TRACE", "morsel.split", "requests.__version__", "get_ca_bundle.__return_value__", "pair.split", "log.error", "request.get_method", "opener.open", "item.strip", "opts.get", "exc.code", "hof.write", "hostname.split", "result.read", "email.message", "comp_list.remove", "log.trace", "sess_cookies.set_cookie", "sess_cookies.load", "sock.connect", "salt.syspaths", "client_argspec.args", "socket.SOCK_STREAM", "item.split", "http.cookiejar", "request.get_host", "result.body", "ssl.CERT_REQUIRED", "certifi.where", "log.isEnabledFor", "exc.response", "zlib.MAX_WBITS", "salt.config", "result_headers.get", "ssl.SSLContext", "result.raise_for_status", "ET.fromstring", "tornado.httputil", "result.cookies", "socket.herror", "log.debug", "fcf.read", "os.path", "ssl.wrap_socket", "salt.version", "sess.verify", "download_client.fetch", "io.StringIO", "result.info", "dof.write", "header.split", "logging.WARNING", "tfp.write", "salt.loader", "socket.timeout", "cookies.append", "ret.append", "salt.utils", "tof.write", "session.headers", "urllib.request", "fh_.read", "req_kwargs.update", "requests.session", "sess.headers", "result_text.decode"]}, "icinga2.py": {"libraries": ["salt.modules.cmdmod", "re", "salt.utils.path", "logging"], "function_names": ["get_certs_path"], "function_calls": ["int"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.modules", "salt.utils", "re.search", "version.split"]}, "idem.py": {"libraries": ["pop.hub", "logging"], "function_names": ["hub", "__virtual__"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "pop.hub", "hub.pop", "hub.config"]}, "ifttt.py": {"libraries": [], "function_names": ["trigger_event", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "ilo.py": {"libraries": ["os", "xml.etree.ElementTree", "logging", "tempfile", "salt.utils.path"], "function_names": ["list_users", "create_user", "change_password", "set_https_port", "set_ssh_port", "disable_ssh", "__execute_cmd", "set_http_port", "enable_dhcp", "global_settings", "configure_snmp", "delete_user", "change_username", "configure_network", "network", "enable_ssh", "__virtual__", "disable_dhcp", "set_ssh_key", "list_users_info", "delete_ssh_key", "get_user"], "function_calls": ["str", "__execute_cmd", "network", "global_settings"], "class_names": [], "class_method_calls": ["logging.getLogger", "i.attrib", "fh.name", "name.replace", "tempfile.NamedTemporaryFile", "i.tag", "os.mkdir", "i.split", "os.path", "salt.utils", "i.upper", "ET.fromstring", "os.getpid", "fh.write", "i.startswith"]}, "incron.py": {"libraries": ["logging"], "function_names": ["_get_cron_info", "present", "_check_cron", "absent"], "function_calls": ["any", "_check_cron"], "class_names": [], "class_method_calls": ["logging.getLogger", "arg_mask.sort", "__grains__.get", "cron_mask.sort", "mask.split", "cmd.endswith"]}, "influxdb08mod.py": {"libraries": ["influxdb.influxdb08", "logging"], "function_names": ["retention_policy_alter", "db_create", "__virtual__", "user_exists", "login_test", "retention_policy_add", "db_list", "retention_policy_get", "user_remove", "user_list", "db_remove", "query", "user_create", "retention_policy_exists", "user_chpass", "db_exists", "_client"], "function_calls": ["user_exists", "db_list", "retention_policy_get", "user_list", "isinstance", "db_exists", "_client"], "class_names": [], "class_method_calls": ["client.update_cluster_admin_password", "log.info", "client.get_list_database", "client.alter_retention_policy", "log.warning", "logging.getLogger", "client.add_database_user", "influxdb.influxdb08", "client.get_list_users", "client.switch_database", "client.add_cluster_admin", "client.create_retention_policy", "client.delete_database_user", "e.code", "client.delete_database", "client.get_list_retention_policies", "client.delete_cluster_admin", "client.create_database", "client.update_database_user_password", "user.get", "client.query", "client.get_list_cluster_admins"]}, "influxdbmod.py": {"libraries": ["salt.utils.json", "influxdb", "collections", "salt.state.STATE_INTERNAL_KEYWORDS", "collections.abc.Sequence", "logging"], "function_names": ["list_users", "get_continuous_query", "grant_admin_privileges", "create_user", "remove_user", "continuous_query_exists", "list_dbs", "revoke_privilege", "create_continuous_query", "create_db", "user_exists", "set_user_password", "get_retention_policy", "user_info", "__virtual__", "_client", "drop_retention_policy", "drop_db", "list_privileges", "retention_policy_exists", "create_retention_policy", "drop_continuous_query", "revoke_admin_privileges", "_pull_query_results", "query", "alter_retention_policy", "grant_privilege", "db_exists"], "function_calls": ["next", "get_continuous_query", "list_users", "user_exists", "db_exists", "dict", "get_retention_policy", "_pull_query_results", "sorted", "list_dbs", "isinstance", "user_info", "_client"], "class_names": [], "class_method_calls": ["client.revoke_admin_privileges", "client.grant_admin_privileges", "p.get", "log.info", "_results.items", "client.get_list_database", "client.alter_retention_policy", "logging.getLogger", "client.drop_retention_policy", "client.get_list_privileges", "influxdb.InfluxDBClient", "client.grant_privilege", "resultset.items", "client.get_list_users", "client.create_retention_policy", "client.revoke_privilege", "client.set_user_password", "full_query.format", "client.create_user", "collections.defaultdict", "client.get_list_retention_policies", "salt.utils", "cq.get", "client.create_database", "client.drop_user", "user.get", "client.query", "client.drop_database"]}, "infoblox.py": {"libraries": ["libinfoblox", "time"], "function_names": ["_get_config", "update_cname", "create_a", "create_cname", "get_host_advanced", "create_ipv4_range", "create_host", "get_host_ipv4", "delete_ipv4_range", "get_host_domainname", "update_host", "diff_objects", "get_host_hostname", "get_network", "__virtual__", "create_object", "update_object", "_get_infoblox", "delete_a", "delete_object", "get_a", "get_host", "is_ipaddr_in_ipfunc_range", "delete_host", "get_host_mac", "get_object", "get_host_ipv6addr_info", "delete_cname", "get_cname", "get_ipv4_range", "get_host_ipv4addr_info"], "function_calls": ["_get_config", "get_object", "globals", "create_object", "Exception", "get_cname", "update_object", "get_host_domainname", "int", "get_ipv4_range", "_get_infoblox", "str", "len", "delete_object", "get_a", "get_host", "set"], "class_names": [], "class_method_calls": ["infoblox.get_range", "infoblox.get_host_advanced", "libinfoblox.Session", "name.split", "infoblox.get_host_ipv4addr_object", "infoblox.get_host_ipv6addr_object", "name.find", "infoblox.delete_host", "api_opts.keys", "d.lower", "infoblox.update_object", "name.endswith", "infoblox.create_object", "infoblox.create_cname", "name.lower", "infoblox.get_cname", "ret.append", "infoblox.delete_object", "infoblox.get_network", "time.time", "libinfoblox.is_ipaddr_in_ipfunc_range", "name.rsplit", "l.append", "libinfoblox.diff_obj", "infoblox.get_object", "config.keys", "config.update", "infoblox.get_host", "name.count"]}, "ini_manage.py": {"libraries": ["salt.utils.odict.OrderedDict"], "function_names": ["sections_present", "options_present", "options_absent", "sections_absent", "__virtual__"], "function_calls": ["str", "set", "isinstance"], "class_names": [], "class_method_calls": ["options.update", "changes.update", "original_sections.update", "original_top_level_opts.update", "changes.items", "section_to_update.update", "original_sections.get", "sections.items", "cur_ini.get", "original.keys", "section_body.keys", "cur_section.get", "cur_ini.items"]}, "collector.py": {"libraries": ["salt.modules.inspectlib.entities.PackageCfgFile", "salt.utils.files", "salt.modules.inspectlib.entities.Package", "logging", "salt.utils.path", "salt.modules.inspectlib.EnvLoader", "salt.config.minion_config", "salt.utils.stringutils", "salt.grains.core", "salt.exceptions.CommandExecutionError", "salt.modules.inspectlib.entities.PayloadFile", "salt.modules.inspectlib.kiwiproc", "salt.modules.inspectlib.entities.AllowedDir", "kiwi", "sys", "os", "subprocess", "salt.utils.crypt", "salt.utils.fsutils", "salt.modules.inspectlib.exceptions.InspectorSnapshotException", "salt.modules.inspectlib.entities.IgnoredDir"], "function_names": ["build", "_get_unmanaged_files", "_get_cfg_pkgs", "request_snapshot", "_init_env", "__get_cfg_pkgs_rpm", "reuse_snapshot", "main", "_get_all_files", "export", "_prepare_full_scan", "_get_managed_files", "snapshot", "__get_managed_files_rpm", "create_snapshot", "_get_changed_cfg_pkgs", "_save_payload", "_scan_payload", "is_alive", "_save_cfg_packages", "__init__", "_syscall", "__get_cfg_pkgs_dpkg", "__get_managed_files_dpkg"], "function_calls": ["list", "int", "PayloadFile", "Inspector", "PackageCfgFile", "CommandExecutionError", "IgnoredDir", "InspectorSnapshotException", "minion_config", "main", "str", "sorted", "Package", "dict", "print", "is_alive", "len", "set", "AllowedDir"], "class_names": ["Inspector"], "class_method_calls": ["self.IGNORE_MOUNTS", "dirs.add", "self.db", "EnvLoader.PID_FILE", "kiwiproc.KiwiExporter", "allowed_dir.path", "data.items", "logging.getLogger", "self.IGNORE_FS_TYPES", "stats.st_mode", "kiwiproc.__salt__", "links.extend", "self.pidfile", "kwargs.get", "allowed.append", "payload.ctime", "cfg.id", "subprocess.STDOUT", "self._init_env", "entry.startswith", "self._syscall", "stats.st_uid", "subprocess.DEVNULL", "line.replace", "payload.mtime", "files.append", "subprocess.PIPE", "pkg_cfg_item.strip", "self._scan_payload", "links.add", "ignored_dir.path", "self.MODE", "dir_obj.path", "all_dirs.extend", "files.add", "self._get_cfg_pkgs", "line.strip", "payload.p_size", "subprocess.run", "stats.st_gid", "data.pop", "self.__get_cfg_pkgs_rpm", "fp_.read", "sys.argv", "os.umask", "fp_.write", "self.__get_cfg_pkgs_dpkg", "ignored_fs.add", "cfgs.append", "os.fork", "os.kill", "os.W_OK", "subprocess.Popen", "sys.stderr", "log.error", "payload.p_type", "sys.exit", "os.setsid", "stats.st_size", "os.stat", "self.dbfile", "pkg.name", "ignored.append", "files.extend", "stats.st_atime", "self.__get_managed_files_rpm", "cfg.path", "all_links.extend", "self._get_managed_files", "ignored_all.append", "all_files.extend", "dirs.append", "mounts.items", "payload.mode", "payload.atime", "self._get_changed_cfg_pkgs", "links.append", "line.find", "line.startswith", "self.grains_core", "pkg_name.strip", "self._prepare_full_scan", "out.split", "os.R_OK", "self._get_unmanaged_files", "resource.strip", "os.listdir", "self.DEFAULT_MINION_CONFIG_PATH", "payload.path", "os.path", "os.access", "payload.gid", "payload.id", "cfg.pkgid", "g_core.__opts__", "stats.st_mtime", "pkg_configs.append", "EnvLoader.__init__", "payload.uid", "self._save_payload", "self._get_all_files", "self.__get_managed_files_dpkg", "line.split", "pkg.id", "salt.utils", "os.unlink", "os.environ", "os.linesep", "dirs.extend", "stats.st_ctime", "self.IGNORE_PATHS", "obj.startswith", "self._save_cfg_packages"]}, "dbhandle.py": {"libraries": ["salt.modules.inspectlib.fsdb.CsvDB", "salt.modules.inspectlib.entities.PayloadFile", "salt.modules.inspectlib.entities.IgnoredDir", "salt.modules.inspectlib.entities.PackageCfgFile", "salt.modules.inspectlib.entities.Package", "salt.modules.inspectlib.entities.AllowedDir"], "function_names": ["flush", "close", "_run_init_queries", "__new__", "open", "__init__", "__getattr__", "purge"], "function_calls": ["super", "list", "obj", "CsvDB", "getattr"], "class_names": ["DBHandle", "DBHandleBase"], "class_method_calls": ["self.init_queries", "DBHandleBase.__init__", "self._db", "self._path", "cls.__instance", "self._run_init_queries"]}, "entities.py": {"libraries": ["salt.modules.inspectlib.fsdb.CsvDBEntity"], "function_names": ["__init__"], "function_calls": [], "class_names": ["Package", "PayloadFile", "PackageCfgFile", "AllowedDir", "IgnoredDir"], "class_method_calls": ["self.gid", "self.pkgid", "self.mode", "self.uid", "self.ctime", "self.p_size", "self.id", "self.mtime", "self.p_type", "self.path", "self.atime", "self.name"]}, "fsdb.py": {"libraries": ["os", "salt.utils.odict.OrderedDict", "datetime", "re", "gzip", "csv", "shutil"], "function_names": ["close", "_load_table", "new", "list", "purge", "get", "list_tables", "delete", "_serialize", "get_type", "is_closed", "update", "store", "__criteria", "_validate_object", "_to_type", "_prepare", "create_table_from_object", "flush", "_label", "open", "__init__"], "function_calls": ["type", "next", "get_type", "setattr", "dict", "Exception", "list", "str", "int", "tuple", "reversed", "obj", "OrderedDict", "sorted", "getattr", "zip", "float"], "class_names": ["CsvDB", "CsvDBEntity"], "class_method_calls": ["csv.reader", "os.listdir", "self.list", "obj._serialize", "os.path", "self.store", "self._prepare", "self.__criteria", "self._validate_object", "re.search", "gzip.open", "self.create_table_from_object", "self._label", "obj._TABLE", "self._to_type", "self._opened", "self.path", "t_attr.split", "self.flush", "databases.append", "os.makedirs", "self.new", "obj.__class__", "self._tables", "shutil.rmtree", "objects.append", "self.is_closed", "self._load_table", "self.list_tables", "self.db_path", "elm.split", "os.unlink", "datetime.datetime", "csv.writer", "self.get", "obj.__dict__"]}, "kiwiproc.py": {"libraries": ["lxml.etree", "os", "xml.etree.ElementTree", "socket", "pwd", "platform", "salt.utils.files", "salt.modules.inspectlib.exceptions.InspectorKiwiProcessorException", "xml.dom.minidom", "grp"], "function_names": ["load", "_set_users", "_get_user_groups", "_create_doc", "_set_description", "_get_package_manager", "_set_packages", "__init__", "export", "_set_preferences", "_set_repositories"], "function_calls": ["type", "setattr", "InspectorKiwiProcessorException", "str", "sorted"], "class_names": ["KiwiExporter"], "class_method_calls": ["users_groups.extend", "self._data", "self._set_repositories", "self._set_preferences", "users_node.set", "ptn.set", "source.set", "self.__grains__", "socket.getfqdn", "etree.tostring", "user_node.set", "sh_line.strip", "platform.node", "descr.items", "self._set_description", "p_version.text", "self._get_package_manager", "root.set", "pacman.text", "disk_id.startswith", "line.strip", "contact.text", "disk_data.get", "repo.set", "shadow.items", "pkg.set", "ps_line.strip", "sh_line.split", "pwd.getpwnam", "self._create_doc", "minidom.parseString", "self._set_packages", "grp.getgrall", "self._get_user_groups", "author.text", "self.format", "salt.utils", "self._set_users", "g.gr_mem", "repo_data.get", "os.linesep", "ptn_data.get", "g.gr_name", "rfh.read", "p_type.set", "etree.Element", "grp.getgrgid", "etree.SubElement", "self.name", "specs.text"]}, "query.py": {"libraries": ["salt.utils.fsutils", "os", "salt.modules.inspectlib.EnvLoader", "time", "salt.modules.inspectlib.exceptions.InspectorQueryException", "salt.modules.inspectlib.entities.PackageCfgFile", "salt.utils.files", "salt.modules.inspectlib.entities.PayloadFile", "salt.modules.inspectlib.exceptions.SIException", "salt.modules.inspectlib.entities.Package", "logging", "salt.utils.network"], "function_names": ["_payload", "_changes", "_get_network", "_identity", "_all", "_system", "_get_local_users", "_id_resolv", "_grain", "_get_fs", "_get_local_groups", "_size_format", "_get_external_accounts", "_software", "_get_os", "tfmt", "_get_mounts", "_configuration", "_get_mem", "_get_cpu", "__call__", "_services", "__init__", "_get_disk_size"], "function_calls": ["InspectorQueryException", "SIException", "repr", "dict", "Exception", "_size_format", "list", "tfmt", "int", "len", "round", "getattr", "oct", "float", "SysInfo"], "class_names": ["Query", "SysInfo"], "class_method_calls": ["self._software", "log.error", "password.startswith", "self.db", "sysinfo._get_fs", "pld_data.path", "time.strftime", "__grains__.get", "self.local_identity", "incl_type.append", "elm.strip", "pld_data.ctime", "pld_files.append", "logging.getLogger", "self._get_local_groups", "status.get", "self.scope", "sysinfo._get_mounts", "size_fmt.lower", "pkg_cfg.path", "time.gmtime", "pld_data.mode", "self._get_local_users", "self._payload", "self.SCOPES", "value.strip", "line.strip", "pkg.name", "sysinfo._get_os", "self._services", "EnvLoader.__init__", "kwargs.get", "sysinfo._get_cpu", "configs.append", "dev_data.get", "self._grain", "pld_data.mtime", "line.split", "systype.lower", "self._configuration", "pkg.id", "salt.utils", "self._get_disk_size", "pld_data.p_size", "pld_data.atime", "meta.get", "elm.split", "pld_data.gid", "descr.strip", "os.linesep", "self._get_external_accounts", "fmt.lower", "descr.startswith", "sysinfo._get_mem", "users.split", "self._id_resolv", "pld_data.uid", "self._system", "dev.pop", "sysinfo._get_network"]}, "inspector.py": {"libraries": ["salt.utils.fsutils", "os", "salt.modules.inspectlib.exceptions.InspectorSnapshotException", "importlib", "salt.exceptions.get_error_message", "getpass", "salt.modules.inspectlib.exceptions.InspectorQueryException", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "salt.modules.inspectlib.exceptions.InspectorKiwiProcessorException", "logging"], "function_names": ["build", "_", "snapshots", "delete", "query", "export", "inspect", "__virtual__"], "function_calls": ["_", "dict", "Exception", "str", "CommandExecutionError", "_get_error_message"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "inspector.db", "mod.__pillar__", "query.Query", "mod.__grains__", "importlib.import_module", "collector.Inspector", "getpass.getuser", "salt.utils", "os.path", "mod.__salt__", "kwargs.get"]}, "introspect.py": {"libraries": ["os"], "function_names": ["service_highstate", "enabled_service_owners", "running_service_owners"], "function_calls": ["iter", "next", "enabled_service_owners", "running_service_owners", "isinstance"], "class_names": [], "class_method_calls": ["pkg.values", "os.X_OK", "path.startswith", "item.keys", "os.access"]}, "iosconfig.py": {"libraries": ["salt.utils.odict.OrderedDict", "salt.utils.dictdiffer", "difflib", "salt.utils.dictupdate", "salt.exceptions.SaltException"], "function_names": ["merge_diff", "clean", "_print_config_text", "merge_text", "diff_tree", "_get_diff_text", "tree", "_parse_text_config", "_attach_data_to_path", "diff_text", "_attach_data_to_path_tags", "merge_tree"], "function_calls": ["SaltException", "clean", "_print_config_text", "merge_text", "_get_diff_text", "tree", "_parse_text_config", "OrderedDict", "_attach_data_to_path", "len", "_attach_data_to_path_tags", "merge_tree"], "class_names": [], "class_method_calls": ["x.replace", "new.splitlines", "path.pop", "config_lines.pop", "tree.items", "line.strip", "config.splitlines", "difflib.unified_diff", "config_lines.insert", "old.splitlines", "salt.utils", "line.lstrip"]}, "ipmi.py": {"libraries": ["pyghmi.ipmi.command"], "function_names": ["power", "user_present", "boot_device", "user_absent", "__virtual__"], "function_calls": ["str", "len"], "class_names": [], "class_method_calls": []}, "ipset.py": {"libraries": ["logging"], "function_names": ["flush", "__virtual__", "present", "set_present", "set_absent", "absent"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "flush_set.strip", "entry_opts.lstrip", "entries.append", "entry.split", "command.strip"]}, "iptables.py": {"libraries": ["salt.state.STATE_INTERNAL_KEYWORDS", "copy"], "function_names": ["flush", "set_policy", "__virtual__", "append", "chain_absent", "delete", "mod_aggregate", "insert", "chain_present"], "function_calls": ["delete", "append", "insert"], "class_names": [], "class_method_calls": ["flush_chain.strip", "__rules.append", "comments.append", "rules.append", "chunk.get", "copy.deepcopy", "__saved_rules.append", "low.get", "command.strip"]}, "iwtools.py": {"libraries": ["salt.exceptions.SaltInvocationError", "salt.utils.path", "logging"], "function_names": ["__virtual__", "list_interfaces", "_valid_iface", "set_mode", "scan"], "function_calls": ["_valid_iface", "SaltInvocationError", "list_interfaces"], "class_names": [], "class_method_calls": ["logging.getLogger", "item.split", "tmp.copy", "ret.keys", "line.split", "line.strip", "line.startswith", "salt.utils", "out.splitlines", "value.lstrip", "comps.pop"]}, "jboss7.py": {"libraries": ["traceback", "time", "salt.utils.dictdiffer", "salt.exceptions.CommandExecutionError", "re", "logging"], "function_names": ["__get_artifact", "reloaded", "datasource_exists", "__undeploy", "__validate_arguments", "__append_comment", "_error", "__check_dict_contains", "__get_ds_value", "bindings_exist", "deployed", "__log_binding_change", "__find_deployment", "__format_ds_changes"], "function_calls": ["__find_deployment", "__get_artifact", "__append_comment", "__undeploy", "__log_binding_change", "str", "_error", "isinstance", "__get_ds_value", "len", "CommandExecutionError", "__validate_arguments", "__check_dict_contains", "__format_ds_changes"], "class_names": [], "class_method_calls": ["logging.getLogger", "re.compile", "dictdiffer.diff", "log.debug", "dct.keys", "diff.added", "time.sleep", "diff.removed", "diff.changed", "traceback.format_exc", "deployment_re.match"]}, "jboss7_cli.py": {"libraries": ["time", "salt.exceptions.CommandExecutionError", "re", "logging", "pprint"], "function_names": ["_parse", "__tokenize", "__get_datatype", "__is_assignment", "__is_dict_start", "__get_int", "__is_datatype", "__get_quoted_string", "__escape_command", "__is_int", "__is_dict_end", "__get_long", "_is_cli_output", "__is_expression", "__is_quoted_string", "__process_tokens", "__is_undefined", "__get_boolean", "run_command", "__is_boolean", "__is_long", "_call_cli", "run_operation", "__process_tokens_internal"], "function_calls": ["_parse", "__tokenize", "int", "__get_datatype", "CommandExecutionError", "__is_assignment", "__is_dict_start", "__get_int", "__is_datatype", "__get_quoted_string", "__escape_command", "__is_int", "__is_dict_end", "__get_long", "_is_cli_output", "__is_expression", "__is_quoted_string", "__process_tokens", "__is_undefined", "__get_boolean", "__is_boolean", "__is_long", "_call_cli", "len", "__process_tokens_internal"], "class_names": [], "class_method_calls": ["command_segments.append", "logging.getLogger", "re.compile", "cli_re.search", "jboss_config.keys", "tokens_re.findall", "pprint.pformat", "log.error", "log.debug", "match.group", "result.replace", "time.sleep", "re.DOTALL", "command.replace", "token.isdigit", "re.search"]}, "jenkinsmod.py": {"libraries": ["jenkins", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.exceptions.SaltInvocationError", "logging"], "function_names": ["job_status", "get_version", "create_job", "run", "get_job_info", "enable_job", "disable_job", "get_jobs", "_connect", "_retrieve_config_xml", "plugin_installed", "delete_job", "update_job", "build_job", "get_job_config", "job_exists", "__virtual__"], "function_calls": ["SaltInvocationError", "_connect", "_retrieve_config_xml", "job_exists", "CommandExecutionError", "hasattr"], "class_names": [], "class_method_calls": ["server.reconfig_job", "server.create_job", "server.job_exists", "logging.getLogger", "jenkins.Jenkins", "server.disable_job", "server.get_version", "jenkins.JenkinsException", "server.enable_job", "server.get_job_config", "server.get_jobs", "salt.utils", "server.get_job_info", "server.delete_job", "server.run_script", "server.get_plugins", "jenkins.EMPTY_CONFIG_XML", "server.build_job", "_fp.read", "plugins.keys"]}, "jinja.py": {"libraries": ["warnings", "salt.utils.json", "salt.utils.decorators.jinja.jinja_global", "salt.utils.files", "os.path", "logging", "collections.abc.Hashable", "xml.etree.ElementTree.Element", "shlex", "jinja2.BaseLoader", "salt.utils.decorators.jinja.jinja_test", "salt.utils.stringutils", "uuid", "itertools", "jinja2.TemplateNotFound", "pprint", "xml.etree.ElementTree.tostring", "xml.etree.ElementTree.SubElement", "jinja2.environment.TemplateModule", "time", "re", "jinja2.exceptions.TemplateRuntimeError", "jinja2.nodes", "salt.fileclient", "xml.dom.minidom", "salt.exceptions.TemplateError", "salt.utils.data", "functools.wraps", "markupsafe.Markup", "salt.utils.url", "jinja2.ext.Extension", "salt.utils.versions.Version", "salt.utils.odict.OrderedDict", "jinja2.Markup", "jinja2", "salt.utils.decorators.jinja.jinja_filter", "salt.utils.yaml"], "function_names": ["__enter__", "tojson", "cache_file", "destroy", "_profile_end", "lst_avg", "indent", "load_yaml", "format_python", "load_json", "__str__", "__repr__", "uuid_", "to_bool", "__exit__", "intersect", "get_source", "quote", "skip_filter", "difference", "symmetric_difference", "load_text", "file_client", "dict_to_sls_yaml_params", "_profile_start", "method_call", "explore", "wrapper", "format_json", "parse_import", "format_xml", "test_equalto", "parse", "_parse_profile_block", "lst_max", "finalizer", "parse_load", "recurse_tree", "normalize_iter", "test_match", "jinja_raise", "show_full_context", "check_cache", "lst_min", "uptodate", "regex_search", "ensure_sequence_filter", "format_yaml", "regex_escape", "regex_replace", "__init__", "union", "parse_profile", "regex_match", "unique", "_create_profile_id"], "function_calls": ["Version", "SubElement", "list", "float", "hasattr", "unique", "max", "min", "super", "Markup", "jinja_global", "TemplateRuntimeError", "intersect", "TemplateNotFound", "str", "jinja_filter", "len", "isinstance", "jinja_test", "explore", "PrintableDict", "wraps", "Element", "TemplateError", "finalizer", "recurse_tree", "normalize_iter", "next", "sum", "union", "getattr", "set", "tostring"], "class_names": ["SerializerExtension", "SaltCacheLoader", "PrintableDict"], "class_method_calls": ["self._create_profile_id", "self.format_python", "itertools.zip_longest", "data.items", "re.search", "logging.getLogger", "jinja2.contextfunction", "self.load_yaml", "self.load_text", "log.profile", "options.setdefault", "self.parse_import", "nodes.Const", "parser.parse_assign_target", "re.I", "self._close_file_client", "self.finalizer", "self._load_parsers", "jinja2.__version__", "sub.text", "import_node.lineno", "re.escape", "parser.fail", "nodes.Assign", "environment.globals", "parser.stream", "nodes.ExprStmt", "self._import_parsers", "s.splitlines", "self.parse_profile", "itertools.permutations", "log.warning", "re.M", "pprint.pformat", "self.call_method", "parser.parse_expression", "self.encoding", "self.file_client", "file_client.destroy", "self.parse_load", "shlex.quote", "self.opts", "parser.parse_import", "time.time", "warnings.warn", "re.match", "attrs.items", "self.format_yaml", "nodes.Filter", "self.format_xml", "uuid.UUID", "exc.problem", "template.split", "compiled_rgx.match", "lines.pop", "self.environment", "nodes.Call", "import_node.template", "newline.join", "sub.attrib", "output.append", "data.__class__", "self.destroy", "tpldir.replace", "uuid.uuid5", "import_node.target", "itertools.compress", "obj.groups", "minidom.parseString", "nodes.Name", "parser.parse_statements", "val.lower", "ctx.items", "self.saltenv", "self.items", "exc.problem_mark", "itertools.product", "itertools.combinations_with_replacement", "itertools.combinations", "self.pillar_rend", "self.cache_file", "log.debug", "self._parse_profile_block", "yaml_txt.endswith", "self.searchpath", "os.path", "compiled_rgx.sub", "_template.split", "parser.free_identifier", "jinja2.pass_context", "ifile.read", "nodes.Macro", "self._file_client", "nodes.List", "self.cached", "ret.append", "salt.utils", "salt.fileclient", "self.format_json", "re.compile", "value.items", "self.load_json", "self.check_cache", "fcl.get_file", "self.dict_to_sls_yaml_params"]}, "jira_mod.py": {"libraries": ["jira", "salt.utils.args", "logging"], "function_names": ["add_comment", "__virtual__", "issue_closed", "_get_jira", "create_issue", "_get_credentials", "assign_issue"], "function_calls": ["str", "_get_jira", "_get_credentials", "assign_issue"], "class_names": [], "class_method_calls": ["logging.getLogger", "ticket.fields", "jira.exceptions", "jira_.assign_issue", "jira_.add_comment", "jira_cfg.get", "data.update", "jira_.create_issue", "jira.JIRA", "salt.utils", "jira_.issue"]}, "k8s.py": {"libraries": ["os", "base64", "salt.utils.json", "salt.utils.files", "re", "logging", "salt.utils.http", "urllib.parse"], "function_names": ["_kpatch", "_decode_secrets", "_is_dns_subdomain", "_kput", "label_absent", "update_secret", "_get_secrets", "_is_port_name", "_kname", "_guess_apiserver", "__virtual__", "create_namespace", "label_present", "_create_namespace", "_get_labels", "delete_secret", "_create_secret", "_set_labels", "label_folder_absent", "_source_encode", "get_secrets", "_get_namespaces", "get_labels", "create_secret", "get_namespaces", "_update_secret", "_guess_node_id", "_is_dns_label", "_file_encode", "_is_valid_secret_file", "_kpost"], "function_calls": ["_kpatch", "_decode_secrets", "_is_dns_subdomain", "_get_secrets", "str", "_guess_apiserver", "isinstance", "_create_namespace", "_get_labels", "_create_secret", "_set_labels", "_source_encode", "create_secret", "_get_namespaces", "_update_secret", "_guess_node_id", "enumerate", "_file_encode", "_is_valid_secret_file", "_kpost"], "class_names": [], "class_method_calls": ["dns_subdomain.match", "log.error", "source_url.scheme", "log.debug", "f.read", "log.info", "os.path", "port_name.match", "log.warning", "urllib.parse", "re.MULTILINE", "logging.getLogger", "ret.get", "old_labels.items", "base64.b64decode", "secret.get", "res.get", "fh_k8s.readlines", "log.trace", "labels.get", "dns_label.match", "i.get", "salt.utils", "name.strip", "kubeapi_regex.match", "source_url.path", "re.compile", "os.environ", "secrets.get", "base64.b64encode", "obj.get", "match_line.group", "key.startswith", "names.append", "source.items", "http.query"]}, "kapacitor.py": {"libraries": ["salt.utils.files", "salt.utils.stringutils", "difflib"], "function_names": ["task_absent", "task_present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["old_script.splitlines", "dbrps.append", "dbrp.split", "comments.append", "tick_script.startswith", "difflib.unified_diff", "result.get", "salt.utils", "file.read", "new_script.splitlines"]}, "kerberos.py": {"libraries": ["salt.utils.path", "logging"], "function_names": ["get_policy", "list_principals", "list_policies", "get_privs", "delete_principal", "create_keytab", "create_principal", "get_principal", "__execute_kadmin", "__virtual__"], "function_calls": ["__execute_kadmin"], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "log.error", "val.split", "i.split", "salt.utils"]}, "kernelpkg_linux_apt.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.utils.versions.LooseVersion", "functools", "re", "logging"], "function_names": ["_cmp_version", "remove", "upgrade_available", "_kernel_type", "cleanup", "upgrade", "active", "needs_reboot", "latest_installed", "_package_prefix", "list_installed", "latest_available", "__virtual__"], "function_calls": ["remove", "_kernel_type", "filter", "LooseVersion", "active", "needs_reboot", "latest_installed", "list", "_package_prefix", "len", "sorted", "list_installed", "CommandExecutionError", "latest_available"], "class_names": [], "class_method_calls": ["logging.getLogger", "re.compile", "version.group", "pkg_re.match", "__grains__.get", "removed.extend", "re.match", "log.info", "functools.cmp_to_key", "log.warning"]}, "kernelpkg_linux_yum.py": {"libraries": ["salt.utils.systemd", "salt.exceptions.CommandExecutionError", "salt.utils.versions.LooseVersion", "functools", "salt.utils.functools", "logging", "salt.utils.data", "salt.modules.yumpkg"], "function_names": ["_cmp_version", "remove", "upgrade_available", "cleanup", "upgrade", "active", "needs_reboot", "latest_installed", "list_installed", "_package_name", "latest_available", "__virtual__"], "function_calls": ["remove", "LooseVersion", "active", "needs_reboot", "latest_installed", "CommandExecutionError", "_yum", "sorted", "list_installed", "globals", "_package_name", "latest_available"], "class_names": [], "class_method_calls": ["logging.getLogger", "__context__.pop", "__grains__.get", "salt.modules", "removed.extend", "log.info", "salt.utils", "cmd.extend", "functools.cmp_to_key", "log.warning"]}, "keyboard.py": {"libraries": [], "function_names": ["xorg", "system", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "keystoneng.py": {"libraries": ["shade", "shade.exc.OpenStackCloudException"], "function_names": ["get_entity", "group_get", "group_list", "project_list", "role_search", "endpoint_list", "get_openstack_cloud", "role_list", "_clean_kwargs", "group_delete", "user_create", "service_list", "role_grant", "domain_create", "get_operator_cloud", "group_create", "service_delete", "service_search", "role_get", "service_update", "project_create", "role_create", "role_delete", "service_get", "project_delete", "role_assignment_list", "domain_search", "project_get", "__virtual__", "domain_delete", "domain_update", "endpoint_delete", "endpoint_update", "compare_changes", "user_update", "user_delete", "endpoint_create", "role_update", "endpoint_get", "project_update", "service_create", "user_search", "endpoint_search", "setup_clouds", "project_search", "role_revoke", "user_list", "domain_list", "group_search", "group_update", "domain_get", "user_get"], "function_calls": ["get_openstack_cloud", "get_operator_cloud", "_clean_kwargs"], "class_names": [], "class_method_calls": ["kwargs.pop", "cloud.create_role", "cloud.search_services", "cloud.list_users", "cloud.delete_user", "cloud.list_domains", "cloud.create_service", "cloud.delete_group", "cloud.get_user", "e.inner_exception", "cloud.create_user", "cloud.update_domain", "cloud.revoke_role", "cloud.search_projects", "cloud.delete_domain", "cloud.list_roles", "cloud.get_project", "cloud.list_services", "cloud.create_endpoint", "cloud.update_project", "cloud.update_group", "cloud.delete_endpoint", "cloud.delete_service", "cloud.grant_role", "cloud.search_endpoints", "cloud.update_role", "shade.openstack_cloud", "cloud.list_groups", "cloud.search_groups", "cloud.get_group", "cloud.get_role", "cloud.list_projects", "cloud.update_user", "cloud.update_endpoint", "cloud.search_users", "cloud.delete_project", "cloud.update_service", "cloud.create_group", "cloud.get_domain", "cloud.delete_role", "cloud.search_roles", "cloud.get_endpoint", "cloud.get_service", "cloud.search_domains", "cloud.list_role_assignments", "shade.operator_cloud", "cloud.list_endpoints", "cloud.create_domain", "obj.items", "cloud.create_project"]}, "keystore.py": {"libraries": ["os", "logging"], "function_names": ["managed", "__virtual__"], "function_calls": ["set", "list"], "class_names": [], "class_method_calls": ["entry.get", "logging.getLogger", "keep_list.append", "log.debug", "old_aliases.append", "existing_sha1.decode", "new_sha1.decode", "os.path"]}, "kmod.py": {"libraries": [], "function_names": ["_append_comment", "present", "absent", "__virtual__"], "function_calls": ["_append_comment", "list", "len", "set", "isinstance"], "class_names": [], "class_method_calls": ["loaded_by_dependency.append"]}, "kubeadm.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.utils.files", "json", "re", "logging"], "function_names": ["config_print_init_defaults", "config_images_list", "token_create", "config_images_pull", "config_upload_from_file", "config_print_join_defaults", "join", "config_view", "reset", "token_generate", "_discovery_token_ca_cert_hash", "_cmd", "token_list", "config_upload_from_flags", "join_params", "alpha_certs_renew", "version", "config_migrate", "token_delete", "_token", "alpha_kubeconfig_user", "alpha_kubelet_config_download", "alpha_kubelet_config_enable_dynamic", "alpha_selfhosting_pivot", "init", "_api_server_endpoint"], "function_calls": ["token_create", "_cmd", "_discovery_token_ca_cert_hash", "token_list", "bool", "_token", "str", "zip", "len", "CommandExecutionError", "_api_server_endpoint"], "class_names": [], "class_method_calls": ["re.MULTILINE", "logging.getLogger", "log.error", "lines.pop", "json.loads", "fp_.read", "i.lower", "cmd.extend", "line.replace", "salt.utils", "tokens.append", "json.dumps", "re.findall", "re.search", "cmd.append"]}, "kubernetesmod.py": {"libraries": ["kubernetes.client.rest.ApiException", "salt.utils.files", "urllib3.exceptions.HTTPError", "os.path", "salt.utils.templates", "logging", "tempfile", "kubernetes.client.V1beta1DeploymentSpec", "base64", "salt.exceptions.CommandExecutionError", "kubernetes.client.V1beta1Deployment", "kubernetes.client.AppsV1beta1Deployment", "signal", "sys", "contextlib.contextmanager", "time", "errno", "kubernetes.client.AppsV1beta1DeploymentSpec", "kubernetes", "salt.utils.platform", "kubernetes.client", "salt.exceptions.TimeoutError", "salt.utils.yaml"], "function_names": ["_cleanup", "configmaps", "__dict_to_deployment_spec", "show_service", "services", "show_deployment", "__read_and_render_yaml_file", "node_add_label", "_setup_conn_old", "create_deployment", "create_pod", "__dict_to_service_spec", "replace_deployment", "__create_object_body", "show_secret", "_setup_conn", "delete_deployment", "_cleanup_old", "show_namespace", "delete_namespace", "__enforce_only_strings_dict", "delete_pod", "replace_configmap", "__virtual__", "create_namespace", "secrets", "delete_configmap", "create_configmap", "pods", "delete_secret", "deployments", "create_secret", "__dict_to_pod_spec", "namespaces", "show_configmap", "delete_service", "node_remove_label", "__dict_to_object_meta", "node", "show_pod", "signal_handler", "replace_secret", "nodes", "create_service", "_time_limit", "replace_service", "ping", "node_labels"], "function_calls": ["_cleanup", "range", "CommandExecutionError", "show_deployment", "__read_and_render_yaml_file", "hasattr", "_setup_conn_old", "__create_object_body", "_setup_conn", "str", "_cleanup_old", "__enforce_only_strings_dict", "AppsV1beta1DeploymentSpec", "isinstance", "obj_class", "spec_creator", "setattr", "__dict_to_object_meta", "node", "nodes", "_time_limit"], "class_names": [], "class_method_calls": ["api_instance.create_namespaced_secret", "exc.status", "api_instance.create_namespaced_pod", "log.exception", "api_instance.list_namespaced_config_map", "api_instance.read_namespaced_service", "api_instance.replace_namespaced_secret", "api_instance.list_namespaced_secret", "api_instance.create_namespaced_deployment", "kcfg.name", "metadata.items", "api_response.to_dict", "os.path", "body.metadata", "spec.items", "ca.name", "api_instance.list_namespaced_pod", "api_instance.delete_namespaced_service", "api_instance.create_namespaced_config_map", "kubernetes.config", "log.warning", "logging.getLogger", "spec_obj.ports", "api_response.data", "k.write", "api_instance.list_namespaced_deployment", "api_instance.delete_namespaced_deployment", "base64.b64decode", "signal.SIGALRM", "tempfile.NamedTemporaryFile", "k8s_node.to_dict", "time.sleep", "signal.alarm", "body.spec", "api_instance.read_namespace", "api_instance.delete_namespace", "kwargs.get", "k8s_node.metadata", "api_instance.delete_namespaced_config_map", "meta_obj.namespace", "api_instance.patch_node", "sys.argv", "port.items", "api_response.items", "meta_obj.name", "api_instance.read_namespaced_config_map", "api_instance.replace_namespaced_deployment", "kcfg.write", "ca.write", "api_instance.delete_namespaced_secret", "api_instance.list_namespaced_service", "src.read", "api_instance.read_namespaced_deployment", "err.errno", "salt.utils", "errno.ENOENT", "spec.get", "k.name", "api_instance.create_namespace", "os.unlink", "base64.b64encode", "api_instance.read_namespaced_secret", "c.name", "signal.signal", "c.write", "api_instance.create_namespaced_service", "api_instance.read_namespaced_pod", "api_instance.list_namespace", "kube_port.port", "kubernetes.client", "api_instance.list_node", "api_instance.replace_namespaced_service", "api_instance.delete_namespaced_pod", "dictionary.items", "api_instance.replace_namespaced_config_map"]}, "launchctl_service.py": {"libraries": ["fnmatch", "salt.utils.decorators", "os", "salt.utils.versions.Version", "plistlib", "salt.utils.stringutils", "salt.utils.files", "salt.utils.platform", "re", "logging", "salt.utils.data", "salt.utils.path"], "function_names": ["status", "_service_by_name", "start", "disabled", "available", "_get_launchctl_data", "get_all", "_launchd_paths", "restart", "missing", "enabled", "stop", "_available_services", "__virtual__"], "function_calls": ["Version", "_service_by_name", "dict", "bool", "list", "start", "_get_launchctl_data", "get_all", "sorted", "_launchd_paths", "set", "stop", "_available_services"], "class_names": [], "class_method_calls": ["logging.getLogger", "name.lower", "decorators.memoize", "plistlib.readPlist", "overrides_data.get", "plistlib.readPlistFromBytes", "basename.lower", "fnmatch.filter", "line.split", "line.startswith", "services.values", "os.path", "salt.utils", "plistlib.loads", "plist.Label", "re.search"]}, "layman.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["len"], "class_names": [], "class_method_calls": []}, "ldap3.py": {"libraries": ["ldap.ldapobject", "ldap.modlist", "ldap.sasl", "ldap", "logging", "salt.utils.data"], "function_names": ["change", "_format_unicode_password", "__enter__", "__exit__", "delete", "__init__", "_bind", "_convert_exception", "add", "connect", "modify", "search", "__virtual__"], "function_calls": ["_format_unicode_password", "super", "connect", "repr", "dict", "list", "enumerate", "_connect_ctx", "sasl_class", "_bind", "getattr", "LDAPError", "set", "_convert_exception", "isinstance", "ValueError"], "class_names": ["LDAPError", "_connect_ctx"], "class_method_calls": ["available_backends.add", "k.upper", "l.protocol_version", "ldap.sasl", "scope.upper", "self.cause", "op.upper", "l.simple_bind_s", "log.info", "l.start_tls_s", "ldap.NO_SUCH_OBJECT", "l.set_option", "logging.getLogger", "l.sasl_interactive_bind_s", "ldap.OPT_REFERRALS", "l.c", "ldap.VERSION3", "attributes.items", "ldap.OPT_X_TLS_NEWCTX", "ldap.modlist", "tls.items", "after.items", "vars.get", "bind.get", "salt.utils", "opts.items", "before.items", "creds.get", "v.upper", "ldap.initialize", "self.c", "connect_spec.get", "ldap.LDAPError"]}, "ldapmod.py": {"libraries": ["ldap.modlist", "time", "salt.exceptions.CommandExecutionError", "ldap", "logging", "salt.utils.data"], "function_names": ["__init__", "_connect", "_config", "search", "__virtual__"], "function_calls": ["_LDAPConnection", "str", "int", "_connect", "round", "len", "CommandExecutionError", "_config"], "class_names": ["_LDAPConnection"], "class_method_calls": ["self.uri", "logging.getLogger", "ldap.initialize", "ldap.OPT_X_TLS_REQUIRE_CERT", "ldap.set_option", "log.debug", "_ldap.search_s", "self.ldap", "time.time", "self.binddn", "ldap.OPT_REFERRALS", "self.server", "self.bindpw", "salt.utils", "ldap.OPT_X_TLS_NEVER", "self.tls", "self.port"]}, "libcloud_compute.py": {"libraries": ["libcloud.compute.providers.get_driver", "salt.utils.compat", "salt.utils.versions.Version", "libcloud", "salt.utils.args", "os.path", "logging", "libcloud.compute.base.Node"], "function_names": ["delete_image", "delete_key_pair", "_simple_volume_snapshot", "get_image", "extra", "list_nodes", "create_volume", "create_image", "list_images", "create_volume_snapshot", "destroy_volume_snapshot", "create_key_pair", "copy_image", "_simple_image", "_simple_node", "destroy_volume", "_simple_key_pair", "__virtual__", "detach_volume", "import_key_pair", "get_key_pair", "list_sizes", "reboot_node", "list_locations", "_get_driver", "_simple_volume", "_simple_location", "destroy_node", "_get_by_id", "list_volume_snapshots", "attach_volume", "list_key_pairs", "_simple_size", "list_volumes"], "function_calls": ["Version", "_simple_volume_snapshot", "getattr", "hasattr", "get_driver", "connection_method", "str", "_simple_image", "_simple_node", "cls", "_simple_key_pair", "ValueError", "_get_driver", "_simple_volume", "_simple_location", "_get_by_id", "ImportError", "len", "_simple_size"], "class_names": [], "class_method_calls": ["snapshot.state", "conn.attach_volume", "conn.destroy_volume_snapshot", "key.fingerprint", "volume.extra", "key.private_key", "config.copy", "volume.state", "conn.list_locations", "snapshot.size", "key.public_key", "conn.get_key_pair", "image.id", "image.name", "os.path", "conn.delete_image", "conn.get_image", "size.id", "node.state", "node.name", "logging.getLogger", "conn.destroy_volume", "conn.list_nodes", "size.ram", "snapshot.name", "location.name", "size.disk", "conn.import_key_pair_from_file", "location.country", "conn.list_volumes", "conn.reboot_node", "conn.list_images", "volume.name", "item.id", "conn.list_sizes", "config.get", "loc.id", "libcloud.__version__", "conn.import_key_pair_from_string", "volume.id", "volume.size", "conn.copy_image", "conn.create_volume", "node.public_ips", "node.id", "key.extra", "conn.create_key_pair", "conn.destroy_node", "snapshot.id", "node.size", "snapshot.created", "location.id", "conn.detach_volume", "image.extra", "size.bandwidth", "conn.create_image", "ret.append", "size.name", "node.extra", "salt.utils", "size.price", "conn.create_volume_snapshot", "node.private_ips", "key.name", "conn.delete_key_pair", "logging.CRITICAL", "snapshot.extra", "size.extra", "conn.list_key_pairs", "conn.list_volume_snapshots"]}, "libcloud_dns.py": {"libraries": [], "function_names": ["state_result", "record_absent", "zone_absent", "record_present", "zone_present", "__virtual__"], "function_calls": ["state_result", "all", "len"], "class_names": [], "class_method_calls": ["result.append"]}, "libcloud_loadbalancer.py": {"libraries": ["logging"], "function_names": ["member_absent", "balancer_absent", "state_result", "member_present", "balancer_present", "__virtual__"], "function_calls": ["state_result", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "starting_members.append"]}, "libcloud_storage.py": {"libraries": ["logging"], "function_names": ["object_absent", "state_result", "file_present", "object_present", "container_absent", "container_present", "__virtual__"], "function_calls": ["state_result", "len"], "class_names": [], "class_method_calls": ["logging.getLogger"]}, "linux_acl.py": {"libraries": ["os", "salt.exceptions.CommandExecutionError", "salt.utils.path", "logging"], "function_names": ["__virtual__", "present", "list_absent", "list_present", "absent"], "function_calls": ["iter", "sum", "next", "enumerate", "str", "set"], "class_names": [], "class_method_calls": ["logging.getLogger", "changes.update", "_current_perms.get", "users.update", "_current_acl_types.append", "acl_type.split", "current_acl_name.encode", "exc.strerror", "ret.update", "_current_perms_path.get", "_octal.get", "key.keys", "os.path", "salt.utils", "i.keys", "_current_acl_types.remove", "acl_type.startswith"]}, "linux_ip.py": {"libraries": ["salt.utils.files", "salt.utils.stringutils", "salt.utils.platform", "salt.utils.path"], "function_names": ["_route_flags", "down", "get_interface", "_parse_routes", "_hex_to_octets", "_ip_ifaces", "up", "get_routes", "__virtual__"], "function_calls": ["iter", "_route_flags", "dict", "list", "_parse_routes", "int", "len", "zip", "_hex_to_octets", "_ip_ifaces"], "class_names": [], "class_method_calls": ["ifaces.get", "opts_comps.pop", "routes.get", "line.split", "line.strip", "line.startswith", "salt.utils", "comps.pop", "out.splitlines", "fp_.read"]}, "linux_lvm.py": {"libraries": ["salt.utils.path", "os.path", "logging"], "function_names": ["lvextend", "lvcreate", "vgextend", "vgcreate", "__virtual__", "vgremove", "pvremove", "lvremove", "pvresize", "pvcreate", "vgdisplay", "lvdisplay", "lvresize", "version", "fullversion", "pvdisplay"], "function_calls": ["pvdisplay", "isinstance", "lvdisplay", "vgdisplay"], "class_names": [], "class_method_calls": ["logging.getLogger", "devices.split", "log.error", "kwargs.items", "extra_arguments.append", "cmd_ret.get", "line.split", "line.strip", "extra_arguments.extend", "cmd.extend", "salt.utils", "out.get", "os.path", "cmd.append"]}, "linux_service.py": {"libraries": ["fnmatch", "os", "re"], "function_names": ["run", "status", "reload_", "start", "available", "restart", "get_all", "missing", "stop", "__virtual__"], "function_calls": ["get_all", "sorted", "bool", "run"], "class_names": [], "class_method_calls": ["_GRAINMAP.get", "os.listdir", "fnmatch.filter", "__grains__.get", "os.path", "re.search"]}, "linux_shadow.py": {"libraries": ["spwd", "os", "salt.exceptions.CommandExecutionError", "salt.utils.files", "functools", "datetime", "logging", "salt.utils.data", "salt.utils.pycrypto"], "function_names": ["_getspall", "info", "set_maxdays", "default_hash", "del_password", "set_password", "list_users", "gen_password", "unlock_password", "set_date", "set_warndays", "_getspnam", "lock_password", "_set_attrib", "set_expire", "set_inactdays", "set_mindays", "__virtual__"], "function_calls": ["getspall", "info", "getspnam", "range", "str", "int", "sorted", "_set_attrib", "len", "CommandExecutionError", "hasattr"], "class_names": [], "class_method_calls": ["comps.extend", "spwd.getspall", "__grains__.get", "functools.partial", "os.path", "data.sp_nam", "log.warning", "data.sp_expire", "logging.getLogger", "data.sp_pwdp", "lines.append", "data.sp_min", "line.strip", "data.sp_lstchg", "cmd.extend", "fp_.write", "user.sp_nam", "data.sp_inact", "salt.utils", "user.sp_namp", "spwd.struct_spwd", "fp_.writelines", "spwd.getspnam", "datetime.datetime", "data.sp_pwd", "data.sp_max", "data.sp_namp", "data.sp_warn"]}, "linux_sysctl.py": {"libraries": ["os", "salt.utils.systemd", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "salt.utils.files", "re", "logging", "salt.utils.data", "salt.utils.path"], "function_names": ["_sanitize_sysctl_value", "persist", "assign", "_which", "show", "default_config", "get", "__virtual__"], "function_calls": ["_sanitize_sysctl_value", "str", "_which", "CommandExecutionError", "default_config", "get", "assign"], "class_names": [], "class_method_calls": ["log.error", "nlines.append", "_fh.write", "os.path", "logging.getLogger", "i.strip", "out.splitlines", "os.makedirs", "key.rstrip", "regex.match", "name.translate", "line.split", "salt.utils", "msg.format", "value.lstrip", "re.compile", "_fh.readlines", "line.startswith", "_fh.writelines", "re.sub", "re.escape", "out.split"]}, "localemod.py": {"libraries": ["os", "salt.utils.systemd", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "dbus", "re", "salt.utils.locales", "logging", "salt.utils.path"], "function_names": ["_localectl_status", "gen_locale", "_parse_dbus_locale", "_localectl_set", "get_locale", "list_avail", "set_locale", "avail", "__virtual__"], "function_calls": ["_localectl_status", "next", "_parse_dbus_locale", "_localectl_set", "str", "len", "CommandExecutionError"], "class_names": [], "class_method_calls": ["log.error", "properties.Get", "log.debug", "os.listdir", "__grains__.get", "os.path", "re.MULTILINE", "logging.getLogger", "locale_params.items", "line.strip", "dbus.Interface", "kwargs.get", "cmd.append", "dbus.SystemBus", "line.split", "re.match", "salt.utils", "ctl_data.split", "x.strip", "ctl_key.strip", "match.group", "locale_ctl_out.splitlines", "bus.get_object"]}, "locate.py": {"libraries": ["salt.utils.platform", "logging"], "function_names": ["locate", "stats", "version", "updatedb", "__virtual__"], "function_calls": ["bool"], "class_names": [], "class_method_calls": ["logging.getLogger", "line.startswith", "salt.utils", "line.strip"]}, "logadm.py": {"libraries": ["salt.utils.data", "salt.utils.args", "logging"], "function_names": ["remove", "rotate", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "name.startswith", "salt.utils"]}, "logrotate.py": {"libraries": [], "function_names": ["_convert_if_int", "set_", "__virtual__"], "function_calls": ["_convert_if_int", "int", "dict", "str"], "class_names": [], "class_method_calls": []}, "lvs.py": {"libraries": ["salt.utils.decorators", "salt.exceptions.SaltException", "salt.utils.path"], "function_names": ["zero", "list_", "delete_service", "delete_server", "add_service", "__detect_os", "edit_server", "check_service", "get_rules", "check_server", "_build_cmd", "edit_service", "add_server", "clear", "__virtual__"], "function_calls": ["get_rules", "__detect_os", "_build_cmd", "SaltException"], "class_names": [], "class_method_calls": ["decorators.memoize", "all_rules.find", "salt.utils"]}, "lxd.py": {"libraries": ["salt.exceptions.SaltInvocationError", "salt.exceptions.CommandExecutionError", "os.path"], "function_names": ["config_managed", "_unchanged", "_error", "authenticate", "init", "_success", "__virtual__"], "function_calls": ["_error", "_unchanged", "_success", "str"], "class_names": [], "class_method_calls": ["done_file.replace", "os.path", "client.trusted"]}, "mac_assistive.py": {"libraries": ["salt.utils.platform", "salt.utils.versions.Version", "logging"], "function_names": ["installed", "__virtual__"], "function_calls": ["Version"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "mac_brew_pkg.py": {"libraries": ["salt.modules.cmdmod", "os", "salt.utils.path", "salt.modules.file", "salt.utils.json", "salt.utils.pkg", "salt.exceptions.MinionError", "salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError", "salt.utils.functools", "logging", "salt.utils.versions", "salt.utils.data", "copy"], "function_names": ["homebrew_prefix", "_pin", "_list_taps", "_list_pinned", "list_upgrades", "hold", "get_version", "_tap", "info_installed", "_homebrew_bin", "__virtual__", "remove", "upgrade_available", "upgrade", "_call_brew", "_unpin", "unhold", "version", "list_pkgs", "_info", "refresh_db", "_list_pkgs_from_context", "install", "_homebrew_os_bin", "latest_version"], "function_calls": ["any", "homebrew_prefix", "_list_taps", "_pin", "list", "_list_pinned", "list_upgrades", "CommandExecutionError", "get_version", "_tap", "_homebrew_bin", "isinstance", "dict", "SaltInvocationError", "_call_brew", "_unpin", "list_pkgs", "_info", "refresh_db", "next", "iter", "_list_pkgs_from_context", "len", "_homebrew_os_bin"], "class_names": [], "class_method_calls": ["__context__.pop", "log.error", "kwargs.pop", "meta_info.items", "log.debug", "extended_path.lstrip", "versions_dict.values", "os.path", "log.warning", "package.get", "logging.getLogger", "copy.deepcopy", "cmd.extend", "kwargs.get", "salt.utils", "current_path.split", "os.environ", "targets.extend", "salt.modules", "targets.append", "pkg_names.add"]}, "mac_desktop.py": {"libraries": ["salt.utils.platform", "salt.exceptions.CommandExecutionError"], "function_names": ["say", "set_output_volume", "_check_cmd", "get_output_volume", "screensaver", "lock", "__virtual__"], "function_calls": ["CommandExecutionError", "_check_cmd", "get_output_volume"], "class_names": [], "class_method_calls": ["call.get", "salt.utils"]}, "mac_group.py": {"libraries": ["salt.modules.mac_user._flush_dscl_cache", "salt.modules.mac_user._dscl", "salt.utils.stringutils", "salt.utils.itertools", "salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError", "salt.utils.functools", "logging", "grp"], "function_names": ["getent", "info", "_list_gids", "deluser", "members", "delete", "chgid", "_format_info", "add", "adduser", "__virtual__"], "function_calls": ["info", "iter", "next", "_list_gids", "SaltInvocationError", "CommandExecutionError", "str", "sorted", "_format_info", "globals", "set", "isinstance"], "class_names": [], "class_method_calls": ["data.gr_name", "name.startswith", "ret.update", "data.gr_gid", "data.gr_passwd", "__grains__.get", "log.warning", "logging.getLogger", "grinfo.gr_name", "cmd.extend", "x.gr_name", "cmd.append", "data.gr_mem", "members_list.split", "grp.getgrall", "ret.append", "line.split", "salt.utils", "line.startswith"]}, "mac_keychain.py": {"libraries": ["salt.utils.platform", "os", "logging"], "function_names": ["uninstalled", "installed", "default_keychain", "__virtual__"], "function_calls": ["len"], "class_names": [], "class_method_calls": ["logging.getLogger", "os.path", "kwargs.get", "salt.utils"]}, "mac_pkgutil.py": {"libraries": ["salt.utils.mac_utils", "salt.utils.itertools", "salt.utils.platform", "salt.exceptions.SaltInvocationError", "os.path", "salt.utils.path", "urllib"], "function_names": ["list_", "__virtual__", "_install_from_path", "install", "forget", "is_installed"], "function_calls": ["_install_from_path", "list_", "SaltInvocationError", "is_installed"], "class_names": [], "class_method_calls": ["os.path", "salt.utils", "ret.splitlines", "uri.scheme", "urllib.parse"]}, "mac_portspkg.py": {"libraries": ["salt.utils.path", "salt.utils.pkg", "salt.utils.mac_utils", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "salt.utils.functools", "re", "logging", "salt.utils.versions", "salt.utils.data", "copy"], "function_names": ["remove", "upgrade_available", "refresh_db", "_list_pkgs_from_context", "upgrade", "_list", "latest_version", "install", "version", "list_upgrades", "list_pkgs", "__virtual__"], "function_calls": ["any", "refresh_db", "_list_pkgs_from_context", "_list", "list_upgrades", "CommandExecutionError", "version", "list_pkgs"], "class_names": [], "class_method_calls": ["logging.getLogger", "available.items", "__context__.pop", "re.split", "exc.strerror", "copy.deepcopy", "pkg_params.items", "formulas_array.append", "cmd.extend", "salt.utils", "out.splitlines", "kwargs.get", "line.lstrip"]}, "mac_power.py": {"libraries": ["salt.utils.platform", "salt.utils.mac_utils", "salt.exceptions.SaltInvocationError"], "function_names": ["set_sleep_on_power_button", "get_computer_sleep", "get_sleep_on_power_button", "get_wake_on_modem", "set_sleep", "get_wake_on_network", "__virtual__", "get_harddisk_sleep", "set_computer_sleep", "_validate_sleep", "set_display_sleep", "get_display_sleep", "get_restart_power_failure", "set_wake_on_network", "set_harddisk_sleep", "get_sleep", "set_wake_on_modem", "set_restart_freeze", "set_restart_power_failure", "get_restart_freeze"], "function_calls": ["get_harddisk_sleep", "range", "_validate_sleep", "SaltInvocationError", "get_display_sleep", "get_computer_sleep", "str", "all", "isinstance"], "class_names": [], "class_method_calls": ["minutes.lower", "state.append", "salt.utils"]}, "mac_service.py": {"libraries": ["os", "salt.utils.versions.Version", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.utils.platform", "logging", "salt.utils.path"], "function_names": ["enabled", "_always_running_service", "status", "enable", "_name_in_services", "available", "show", "__virtual__", "list_", "launchctl", "disabled", "restart", "_launch_agent", "loaded", "stop", "disable", "_get_service", "_get_domain_target", "start", "get_all", "missing", "get_enabled"], "function_calls": ["_always_running_service", "list_", "Version", "any", "_get_service", "_get_domain_target", "dict", "_name_in_services", "launchctl", "list", "available", "sorted", "show", "_launch_agent", "CommandExecutionError", "set", "get_enabled", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "service.split", "status.lower", "keep_alive.get", "SALT_MAC_SERVICES.get", "stdout.splitlines", "basename.lower", "line.split", "line.startswith", "__context__.get", "services.values", "os.path", "salt.utils", "disabled.split", "enabled.append"]}, "mac_shadow.py": {"libraries": ["datetime.datetime", "salt.utils.mac_utils", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "logging", "pwd"], "function_names": ["del_password", "get_expire", "get_login_failed_count", "get_account_created", "_set_account_policy", "set_change", "get_last_change", "_get_account_policy", "set_warndays", "get_maxdays", "set_mindays", "__virtual__", "info", "set_maxdays", "_get_account_policy_data_value", "_convert_to_datetime", "set_expire", "get_change", "set_password", "set_inactdays", "get_login_failed_last"], "function_calls": ["info", "_set_account_policy", "get_last_change", "_get_account_policy", "_get_account_policy_data_value", "_convert_to_datetime", "get_expire", "get_login_failed_count", "int", "get_maxdays", "CommandExecutionError", "float", "get_change", "get_account_created", "get_login_failed_last"], "class_names": [], "class_method_calls": ["logging.getLogger", "policy.split", "data.pw_passwd", "log.debug", "exc.strerror", "ret.split", "exc.message", "salt.utils", "pwd.getpwnam", "data.pw_name", "datetime.fromtimestamp"]}, "mac_softwareupdate.py": {"libraries": ["os", "salt.utils.mac_utils", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.utils.platform", "salt.exceptions.SaltInvocationError", "re", "salt.utils.data", "salt.utils.path"], "function_names": ["update", "get_catalog", "reset_ignored", "download", "update_all", "list_ignored", "schedule_enable", "reset_catalog", "_get_available", "list_available", "list_downloads", "ignore", "download_all", "schedule_enabled", "set_catalog", "update_available", "__virtual__"], "function_calls": ["get_catalog", "download", "f", "SaltInvocationError", "list_ignored", "_get_available", "list_downloads", "all", "schedule_enabled", "update_available"], "class_names": [], "class_method_calls": ["m.group", "re.compile", "rexp.finditer", "dist_files.append", "update.rsplit", "name.rsplit", "ret.split", "ret.append", "outfiles.append", "fhr.read", "rexp.findall", "salt.utils", "f.endswith", "os.path", "conditions.append", "cmd.append"]}, "mac_sysctl.py": {"libraries": ["salt.utils.files", "os", "salt.exceptions.CommandExecutionError"], "function_names": ["persist", "__virtual__", "show", "get", "assign"], "function_calls": ["any", "str", "len", "CommandExecutionError", "assign"], "class_names": [], "class_method_calls": ["msg.format", "rest.split", "nlines.append", "new_value.split", "line.split", "line.startswith", "_fh.write", "os.path", "salt.utils", "out.splitlines", "ofile.writelines", "rest.startswith"]}, "mac_system.py": {"libraries": ["shlex", "getpass", "salt.utils.mac_utils", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "salt.exceptions.SaltInvocationError"], "function_names": ["get_remote_events", "get_subnet_name", "get_startup_disk", "set_remote_events", "set_subnet_name", "get_boot_arch", "set_remote_login", "set_boot_arch", "get_disable_keyboard_on_lock", "_execute_command", "__virtual__", "get_restart_delay", "sleep", "halt", "shutdown", "get_remote_login", "set_startup_disk", "get_computer_name", "set_disable_keyboard_on_lock", "_atrun_enabled", "list_startup_disks", "restart", "_enable_atrun", "set_computer_name", "set_restart_delay"], "function_calls": ["halt", "_execute_command", "SaltInvocationError", "bool", "list_startup_disks", "_atrun_enabled", "_enable_atrun"], "class_names": [], "class_method_calls": ["ret.splitlines", "salt.utils", "getpass.getuser", "shlex.quote"]}, "mac_timezone.py": {"libraries": ["salt.utils.platform", "salt.utils.mac_utils", "datetime.datetime", "salt.exceptions.SaltInvocationError"], "function_names": ["get_hwclock", "get_zone", "set_using_network_time", "zone_compare", "set_time", "set_date", "set_zone", "get_using_network_time", "list_zones", "get_offset", "get_time_server", "set_hwclock", "_get_date_time_format", "get_zonecode", "set_time_server", "get_time", "get_date", "__virtual__"], "function_calls": ["get_zone", "get_using_network_time", "SaltInvocationError", "get_time_server", "list_zones", "_get_date_time_format"], "class_names": [], "class_method_calls": ["dt_obj.strftime", "salt.utils", "datetime.strptime", "zones.splitlines", "x.strip"]}, "mac_user.py": {"libraries": ["time", "salt.utils.stringutils", "salt.utils.user", "pwd", "salt.exceptions.CommandExecutionError", "salt.utils.decorators.path", "salt.utils.files", "salt.exceptions.SaltInvocationError", "salt.utils.args", "logging", "salt.utils.data"], "function_names": ["chhome", "list_users", "_dscl", "_flush_dscl_cache", "chgroups", "_kcpassword", "rename", "getent", "enable_auto_login", "delete", "chuid", "add", "chshell", "__virtual__", "chfullname", "info", "list_groups", "primary_group", "chgid", "_format_info", "get_auto_login", "disable_auto_login", "_first_avail_uid"], "function_calls": ["range", "_dscl", "chgroups", "list", "_kcpassword", "CommandExecutionError", "min", "str", "isinstance", "map", "info", "SaltInvocationError", "bool", "list_groups", "bytes", "iter", "next", "_format_info", "get_auto_login", "len", "set", "_first_avail_uid"], "class_names": [], "class_method_calls": ["kwargs.pop", "pwd.getpwall", "x.pw_name", "x.pw_uid", "__grains__.get", "log.info", "groups.split", "data.pw_dir", "data.pw_gid", "log.warning", "logging.getLogger", "data.pw_uid", "fd.write", "time.sleep", "name.lower", "data.pw_shell", "ret.append", "salt.utils", "current.lower", "data.pw_gecos", "users.split", "desired.add", "data.pw_name"]}, "mac_xattr.py": {"libraries": ["os", "logging"], "function_names": ["delete", "exists", "__virtual__"], "function_calls": ["len"], "class_names": [], "class_method_calls": ["logging.getLogger", "attr.split", "attr_val.startswith", "current_attrs.keys", "os.path"]}, "macdefaults.py": {"libraries": ["salt.utils.platform", "logging"], "function_names": ["absent", "write", "safe_cast", "__virtual__"], "function_calls": ["to_type", "safe_cast"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "macpackage.py": {"libraries": ["os", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "re", "logging", "shutil"], "function_names": ["installed", "failed_pkg", "__virtual__"], "function_calls": ["failed_pkg", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "version_check.split", "installing.append", "shutil.rmtree", "found.append", "re.match", "salt.utils", "os.path", "out.split", "log.info", "version_out.strip"]}, "makeconf.py": {"libraries": [], "function_names": ["absent", "present", "_make_set", "__virtual__"], "function_calls": ["_make_set", "list", "len", "set", "isinstance"], "class_names": [], "class_method_calls": ["excludes_set.intersection", "contains_set.intersection", "name.upper", "var.split", "msg.format", "contains_set.difference"]}, "mandrill.py": {"libraries": ["salt.utils.json", "salt.utils.versions", "requests", "logging"], "function_names": ["send", "_get_headers", "_get_api_params", "_default_ret", "_http_request", "_get_url", "__virtual__"], "function_calls": ["_get_headers", "_get_api_params", "_default_ret", "_http_request", "float", "_get_url"], "class_names": [], "class_method_calls": ["logging.getLogger", "requests.session", "log.debug", "req_body.get", "ret.update", "session.post", "req.json", "salt.utils", "req.status_code", "req_body.pop", "mandrill_cfg.get"]}, "match.py": {"libraries": ["salt.utils.verify", "salt.utils.minions", "salt.defaults.DEFAULT_TARGET_DELIM", "logging"], "function_names": ["compound_matches"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "log.debug", "salt.utils", "ckminions._check_compound_pillar_exact_minions", "log.warning"]}, "mattermost.py": {"libraries": ["salt.version.__version__", "http.client", "logging", "salt.utils.http", "urllib.parse"], "function_names": ["query"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "http.client", "result.get", "salt.utils", "urllib.parse"]}, "mdadm_raid.py": {"libraries": ["salt.utils.path", "logging"], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["iter", "next", "sorted", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "new_devices.append", "raids.get", "missing.append", "salt.utils"]}, "memcached.py": {"libraries": ["memcache", "salt.exceptions.SaltInvocationError", "salt.exceptions.CommandExecutionError", "logging"], "function_names": ["set_", "get_conn", "_check_stats", "get", "__virtual__"], "function_calls": ["SaltInvocationError", "_check_stats", "str", "CommandExecutionError", "isinstance"], "class_names": [], "class_method_calls": ["conn.set", "logging.getLogger", "opts.get", "opts_merged.update", "opts_merged.get", "conn.get_stats", "conn.get", "memcache.Client", "conf.get", "opts_pillar.get"]}, "mod_random.py": {"libraries": ["base64", "random", "salt.exceptions.SaltInvocationError", "salt.utils.data", "salt.utils.pycrypto"], "function_names": ["seed", "shadow_hash", "sample", "shuffle", "hash", "rand_int", "str_encode", "get_str", "__virtual__"], "function_calls": ["SaltInvocationError", "isinstance"], "class_names": [], "class_method_calls": ["value.encode", "base64.b64encode", "random.randint", "salt.utils", "random.seed", "out.decode", "random.randrange"]}, "modjk.py": {"libraries": ["logging"], "function_names": ["worker_activated", "worker_recover", "worker_disabled", "_bulk_state", "worker_stopped", "__virtual__"], "function_calls": ["type", "_bulk_state", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "errors.append", "log.info", "cmdret.items"]}, "mongodb.py": {"libraries": ["salt.utils.json", "salt.utils.versions.Version", "salt.exceptions.get_error_message", "pymongo", "re", "logging"], "function_names": ["_version", "db_list", "user_create", "user_revoke_roles", "user_exists", "user_roles_exists", "user_remove", "user_grant_roles", "db_remove", "insert", "__virtual__", "remove", "update_one", "collection_create", "collection_drop", "version", "find", "_connect", "_to_dict", "user_list", "collections_list", "user_find", "db_exists"], "function_calls": ["Version", "range", "find", "dict", "_version", "db_list", "str", "user_list", "_connect", "_to_dict", "len", "getattr", "isinstance", "_get_error_message"], "class_names": [], "class_method_calls": ["ids.acknowledged", "log.error", "pymongo.database", "conn.drop_database", "mdb.create_collection", "col.delete_one", "log.info", "ret.extend", "mdb.command", "mdb.authenticate", "logging.getLogger", "re.split", "output.append", "ids.modified_count", "col.update_one", "mdb.drop_collection", "document.append", "col.find", "col.insert_many", "mdb.system", "salt.utils", "res.deleted_count", "pymongo.MongoClient", "conn.list_database_names", "mdb.list_collection_names", "user.get", "pymongo.errors"]}, "monit.py": {"libraries": [], "function_names": ["unmonitor", "monitor", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["result.items"]}, "moosefs.py": {"libraries": ["salt.utils.path"], "function_names": ["dirinfo", "getgoal", "fileinfo", "mounts", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["line.strip", "salt.utils", "line.split"]}, "mount.py": {"libraries": ["os", "salt.utils.stringutils", "salt.utils.files", "logging", "salt.utils.versions", "salt.utils.yaml"], "function_names": ["write_cache", "get_cache", "read_cache", "_read_file"], "function_calls": ["get_cache", "_read_file"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "fp_.write", "salt.utils", "os.path", "logging.DEBUG"]}, "mssql.py": {"libraries": ["salt.utils.json", "pymssql"], "function_names": ["db_create", "tsql_query", "db_list", "role_list", "user_create", "login_exists", "login_create", "user_exists", "_get_connection", "role_create", "user_remove", "db_remove", "__virtual__", "default", "version", "role_exists", "role_remove", "user_list", "login_remove", "db_exists"], "function_calls": ["user_exists", "_get_connection", "bool", "tsql_query", "str", "len", "isinstance", "login_exists", "db_exists", "_MssqlEncoder"], "class_names": ["_MssqlEncoder"], "class_method_calls": ["cur.fetchall", "conn.close", "new_login_options.insert", "cur.execute", "conn.autocommit", "conn.cursor", "salt.utils", "_DEFAULTS.get", "pymssql.connect"]}, "msteams.py": {"libraries": ["salt.exceptions.SaltInvocationError"], "function_names": ["post_card", "__virtual__"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": []}, "munin.py": {"libraries": ["salt.utils.files", "os", "stat", "salt.utils.stringutils"], "function_names": ["run", "list_plugins", "run_all", "_get_conf", "__virtual__"], "function_calls": ["run", "int", "list_plugins", "float", "isinstance"], "class_names": [], "class_method_calls": ["plugins.split", "os.stat", "stat.ST_MODE", "os.listdir", "ret.update", "ret.append", "line.split", "stat.S_IXUSR", "key.split", "os.path", "salt.utils", "muninout.split", "fp_.read"]}, "nacl.py": {"libraries": ["os", "base64", "salt.utils.win_functions", "nacl.secret", "salt.utils.stringutils", "nacl.public", "salt.utils.win_dacl", "salt.utils.files", "salt.utils.platform", "salt.syspaths", "salt.utils.versions"], "function_names": ["sealedbox_encrypt", "_get_config", "secretbox_encrypt", "enc_file", "enc", "dec", "secretbox_decrypt", "sealedbox_decrypt", "_get_pk", "check_requirements", "keygen", "_get_sk", "dec_file", "__virtual__"], "function_calls": ["sealedbox_encrypt", "set", "_get_config", "enc", "dec", "Exception", "sealedbox_decrypt", "_get_pk", "check_requirements", "str", "secretbox_decrypt", "secretbox_encrypt", "_get_sk"], "class_names": [], "class_method_calls": ["keyf.write", "f.write", "nacl.secret", "f.read", "os.path", "b.encrypt", "kp.public_key", "base64.b64decode", "kwargs.get", "nacl.public", "keyf.read", "salt.utils", "kwargs.keys", "b.decrypt", "base64.b64encode", "kp.encode", "config.keys", "config.update", "os.chmod"]}, "nagios.py": {"libraries": ["os", "stat", "logging"], "function_names": ["run_pillar", "_format_dict_key", "retcode", "retcode_pillar", "run", "run_all_pillar", "list_plugins", "run_all", "_execute_pillar", "_execute_cmd", "__virtual__"], "function_calls": ["iter", "_format_dict_key", "run_type", "next", "retcode", "int", "list_plugins", "_execute_pillar", "_execute_cmd", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "os.stat", "command.keys", "stat.ST_MODE", "os.listdir", "check.update", "ret.append", "args.replace", "stat.S_IXUSR", "os.path"]}, "nagios_rpc.py": {"libraries": ["logging", "salt.utils.http", "salt.exceptions.CommandExecutionError", "http.client"], "function_names": ["host_status", "_status_query", "service_status", "_config", "__virtual__"], "function_calls": ["CommandExecutionError", "_status_query", "_config"], "class_names": [], "class_method_calls": ["logging.getLogger", "http.client", "result.text", "result.get", "salt.utils", "data.get", "kwargs.get"]}, "namecheap_domains.py": {"libraries": ["salt.utils.namecheap", "logging"], "function_names": ["check", "get_tld_list", "renew", "reactivate", "add_to_opts", "get_info", "create", "get_list", "__virtual__"], "function_calls": ["str", "len", "Exception", "add_to_opts"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "subcategories.getElementsByTagName", "e.getElementsByTagName", "e.firstChild", "kwargs.items", "categories.append", "domains.append", "tldresult.getElementsByTagName", "response_xml.getElementsByTagName", "key.startswith", "domainresult.getElementsByTagName", "salt.utils", "log.warning", "result.getAttribute", "tlds.append"]}, "namecheap_domains_dns.py": {"libraries": ["salt.utils.namecheap"], "function_names": ["set_hosts", "get_hosts", "set_default", "set_custom", "get_list", "__virtual__"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["dnsresult.getAttribute", "salt.utils", "response_xml.getElementsByTagName"]}, "namecheap_domains_ns.py": {"libraries": ["salt.utils.namecheap"], "function_names": ["update", "delete", "get_info", "create", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["domainnscreateresult.getAttribute", "response_xml.getElementsByTagName", "domainnsupdateresult.getAttribute", "salt.utils", "domainnsdeleteresult.getAttribute"]}, "namecheap_ssl.py": {"libraries": ["salt.utils.files", "salt.utils.stringutils", "salt.utils.namecheap", "logging"], "function_names": ["get_list", "renew", "parse_csr", "reissue", "get_info", "create", "__get_certificates", "activate", "__virtual__"], "function_calls": ["str", "__get_certificates", "Exception"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "sslcreateresult.getElementsByTagName", "kwargs.items", "result.append", "sslresult.getElementsByTagName", "response_xml.getElementsByTagName", "result.update", "salt.utils", "validation_tag.getElementsByTagName", "csr_handle.read", "validation_tag.getAttribute", "ssllistresult.getElementsByTagName"]}, "namecheap_users.py": {"libraries": ["salt.utils.namecheap"], "function_names": ["check_balances", "get_balances", "__virtual__"], "function_calls": ["float", "get_balances"], "class_names": [], "class_method_calls": ["salt.utils", "response_xml.getElementsByTagName"]}, "napalm_bgp.py": {"libraries": ["salt.utils.napalm", "salt.utils.napalm.proxy_napalm_wrap", "logging"], "function_names": ["neighbors", "config", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "napalm_formula.py": {"libraries": ["fnmatch", "salt.utils.data.traverse_dict_and_list", "salt.defaults.DEFAULT_TARGET_DELIM", "salt.utils.napalm", "logging", "salt.utils.dictupdate", "copy"], "function_names": ["render_field", "container_path", "setval", "_container_path", "dictupdate", "traverse", "render_fields", "defaults", "__virtual__"], "function_calls": ["list", "len", "setval", "_traverse_dict_and_list", "_container_path", "render_field", "traverse"], "class_names": [], "class_method_calls": ["logging.getLogger", "default_path.split", "log.debug", "results.append", "copy.deepcopy", "fnmatch.fnmatch", "key.split", "salt.utils", "model_path.split", "model.items", "field.replace"]}, "napalm_mod.py": {"libraries": ["ciscoconfparse", "salt.utils.decorators.depends", "jxmlease", "netmiko.BaseConnection", "salt.exceptions.CommandExecutionError", "napalm.base.netmiko_helpers", "salt.utils.napalm", "salt.utils.napalm.proxy_napalm_wrap", "logging", "scp"], "function_names": ["config_lines_wo_child", "config_find_lines", "_ret_device", "call", "_netmiko_conn", "pyeapi_run_commands", "netmiko_multi_call", "nxos_api_rpc", "nxos_api_config", "rpc", "scp_put", "alive", "junos_cli", "netmiko_commands", "config_diff_text", "junos_call", "netmiko_args", "pyeapi_config", "config_diff_tree", "__virtual__", "netmiko_fun", "junos_install_os", "config_merge_diff", "config_filter_lines", "junos_facts", "junos_rpc", "config_tree", "scp_get", "config_merge_text", "junos_copy_file", "pyeapi_call", "_junos_prep_fun", "nxos_api_show", "netmiko_config", "netmiko_call", "_pyeapi_conn", "pyeapi_nxos_api_args", "config_lines_w_child", "junos_commit", "reconnect", "compliance_report", "_get_netmiko_args", "_inject_junos_proxy", "config_merge_tree"], "function_calls": ["dict", "alive", "pyeapi_nxos_api_args", "CommandExecutionError", "ValueError", "depends", "_netmiko_conn", "zip", "netmiko_args", "_junos_prep_fun", "_get_netmiko_args", "_inject_junos_proxy"], "class_names": [], "class_method_calls": ["netmiko_args.pop", "karg.startswith", "napalm.base", "log.debug", "netmiko_device_type_map.update", "log.info", "BaseConnection.__init__", "optional_args.get", "logging.getLogger", "napalm_map.update", "netmiko_argument_map.pop", "default_ret.update", "rpc_ret.pop", "netmiko_argument_map.items", "is_alive.get", "ret.append", "salt.utils", "kwargs.update", "__opts__.get", "kwargs.items", "prev_kwargs.update", "napalm_map.get", "conn.send_command"]}, "napalm_netacl.py": {"libraries": ["capirca.lib.policy", "capirca.aclgen", "salt.utils.napalm", "salt.utils.napalm.proxy_napalm_wrap", "logging", "capirca.lib.aclgenerator", "capirca"], "function_names": ["_get_capirca_platform", "load_filter_config", "load_term_config", "get_term_pillar", "get_filter_pillar", "load_policy_config", "__virtual__"], "function_calls": ["_get_capirca_platform"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "napalm_network.py": {"libraries": ["time", "jxmlease", "salt.utils.files", "salt.utils.napalm", "datetime", "salt.utils.templates", "logging", "salt.utils.versions"], "function_names": ["traceroute", "blockreplace", "load_template", "cancel_commit", "interfaces", "_safe_dicard_config", "facts", "ipaddrs", "_config_logic", "load_config", "_explicit_close", "lldp", "_safe_commit_config", "patch", "replace_pattern", "arp", "config", "_filter_dict", "__virtual__", "config_changed", "discard_config", "save_config", "confirm_commit", "_filter_list", "environment", "cli", "optics", "connected", "rollback", "config_control", "commit", "mac", "compare_config", "ping"], "function_calls": ["cancel_commit", "list", "int", "_safe_dicard_config", "_config_logic", "_explicit_close", "_safe_commit_config", "str", "isinstance", "config_changed", "dict", "discard_config", "save_config", "_filter_list", "rollback", "enumerate", "len", "commit", "compare_config"], "class_names": [], "class_method_calls": ["command_output.strip", "log.error", "template_name.startswith", "lldp_neighbors.get", "proxy_output.get", "try_commit.get", "log.debug", "template_hash.startswith", "input_dict.items", "_loaded.update", "napalm_device.get", "log.info", "logging.getLogger", "_discarded.get", "output_list.append", "_compare.get", "__pillar__.get", "kwargs.get", "context.update", "fp_.write", "fh_.write", "time.time", "proxy_output.update", "salt.utils", "try_rollback.get", "loaded_result.pop", "__opts__.get", "datetime.datetime", "_commit.get", "fh_.read", "raw_cli_outputs.get", "confirmed.pop", "loaded_result.get", "dictionary.get", "try_compare.get"]}, "napalm_ntp.py": {"libraries": ["salt.utils.napalm", "salt.utils.napalm.proxy_napalm_wrap", "logging"], "function_names": ["peers", "delete_servers", "servers", "set_servers", "set_peers", "stats", "delete_peers", "__virtual__"], "function_calls": ["list"], "class_names": [], "class_method_calls": ["logging.getLogger", "options.pop", "ntp_peers.get", "proxy_output.get", "ntp_servers.get", "proxy_output.update", "salt.utils", "ntp_peer.get"]}, "napalm_probes.py": {"libraries": ["salt.utils.napalm", "salt.utils.napalm.proxy_napalm_wrap", "logging"], "function_names": ["set_probes", "results", "delete_probes", "config", "schedule_probes", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "napalm_route.py": {"libraries": ["salt.utils.napalm", "salt.utils.napalm.proxy_napalm_wrap", "logging"], "function_names": ["show", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "napalm_snmp.py": {"libraries": ["salt.utils.napalm", "salt.utils.napalm.proxy_napalm_wrap", "logging"], "function_names": ["update_config", "remove_config", "config", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "napalm_users.py": {"libraries": ["salt.utils.napalm", "salt.utils.napalm.proxy_napalm_wrap", "logging"], "function_names": ["set_users", "delete_users", "config", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "napalm_yang_mod.py": {"libraries": ["salt.utils.napalm", "napalm_yang", "salt.utils.napalm.proxy_napalm_wrap", "logging"], "function_names": ["parse", "diff", "_get_root_object", "get_config", "load_config", "compliance_report", "__virtual__"], "function_calls": ["_get_root_object", "get_config", "getattr", "isinstance", "hasattr"], "class_names": [], "class_method_calls": ["kwargs.pop", "napalm_yang.base", "log.debug", "root.translate_config", "__grains__.get", "root.parse_config", "first.load_dict", "napalm_device.get", "root.parse_state", "logging.getLogger", "root.load_dict", "model.split", "napalm_device.profile", "salt.utils", "root.to_dict", "root.add_model", "napalm_yang.utils", "root.compliance_report", "second.load_dict"]}, "netaddress.py": {"libraries": ["netaddr"], "function_names": ["cidr_broadcast", "list_cidr_ips", "cidr_netmask", "list_cidr_ips_ipv6", "__virtual__"], "function_calls": ["str", "list"], "class_names": [], "class_method_calls": ["ips.netmask", "ips.broadcast", "netaddr.IPNetwork", "ip.ipv6"]}, "netbox.py": {"libraries": ["salt.utils.http", "salt.utils.url", "salt._compat.ipaddress", "logging"], "function_names": ["_get_devices", "_get_connected_devices", "_get_interfaces", "_get_proxy_details", "ext_pillar", "_get_site_details", "_get_site_prefixes", "_associate_ips_to_interfaces", "_get_virtual_machines", "_get_interface_ips"], "function_calls": ["_get_connected_devices", "_get_devices", "_get_interfaces", "_get_proxy_details", "dict", "str", "int", "_get_site_details", "len", "_get_site_prefixes", "_associate_ips_to_interfaces", "_get_virtual_machines", "_get_interface_ips"], "class_names": [], "class_method_calls": ["connected_devices_ids.append", "logging.getLogger", "log.error", "ipaddress.ip_interface", "device_short.keys", "int_short.keys", "nodes.extend", "log.debug", "site_prefixes_results.extend", "interfaces_results.extend", "log.info", "salt.utils", "device_results.extend", "vm_results.extend", "interface_ips_results.extend", "kwargs.get"]}, "netbsd_sysctl.py": {"libraries": ["os", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "salt.utils.files", "re", "salt.utils.data"], "function_names": ["persist", "__virtual__", "show", "get", "assign"], "function_calls": ["any", "str", "len", "CommandExecutionError", "assign"], "class_names": [], "class_method_calls": ["msg.format", "rest.split", "re.split", "m.group", "nlines.append", "new_value.split", "line.split", "line.startswith", "re.match", "os.path", "salt.utils", "out.splitlines", "ofile.writelines", "rest.startswith"]}, "netbsdservice.py": {"libraries": ["fnmatch", "glob", "os", "re"], "function_names": ["enabled", "get_disabled", "status", "enable", "reload_", "force_reload", "available", "__virtual__", "disabled", "restart", "stop", "disable", "start", "_rcconf_status", "_get_svc", "get_all", "missing", "get_enabled", "_get_svc_list"], "function_calls": ["_rcconf_status", "bool", "_get_svc", "sorted", "get_all", "set", "_get_svc_list"], "class_names": [], "class_method_calls": ["glob.glob", "fnmatch.filter", "rcvar.startswith", "os.path", "ret.add", "re.search", "rcvar.split"]}, "netmiko_mod.py": {"libraries": ["netmiko.ConnectHandler", "netmiko.BaseConnection", "salt.exceptions.CommandExecutionError", "salt.utils.args.clean_kwargs", "salt.utils.platform", "logging"], "function_names": ["multi_call", "send_command", "commit", "get_connection", "call", "send_config", "enter_config_mode", "_prepare_connection", "exit_config_mode", "send_command_timing", "__virtual__"], "function_calls": ["CommandExecutionError", "call", "isinstance", "getattr", "ConnectHandler", "_prepare_connection", "clean_kwargs"], "class_names": [], "class_method_calls": ["logging.getLogger", "netmiko_kwargs.update", "conn.send_config_set", "file_str.splitlines", "ret.append", "line.strip", "conn.disconnect", "conn.commit", "salt.utils", "method.get", "conn.is_alive", "netmiko_init_args.pop", "BaseConnection.__init__", "netmiko_kwargs.items"]}, "netscaler.py": {"libraries": ["nsnitro.nsexceptions.NSNitroError", "nsnitro.nsnitro.NSNitro", "nsnitro.nsresources.nsservicegroup.NSServiceGroup", "nsnitro.nsresources.nsservicegroupserverbinding.NSServiceGroupServerBinding", "nsnitro.nsresources.nslbvserver.NSLBVServer", "nsnitro.nsresources.nsserver.NSServer", "salt.utils.platform", "nsnitro.nsresources.nssslvserversslcertkeybinding.NSSSLVServerSSLCertKeyBinding", "logging", "nsnitro.nsresources.nsservice.NSService", "nsnitro.nsresources.nslbvserverservicegroupbinding.NSLBVServerServiceGroupBinding"], "function_names": ["servicegroup_exists", "server_add", "vserver_delete", "server_update", "servicegroup_server_delete", "server_exists", "servicegroup_server_add", "server_delete", "vserver_servicegroup_exists", "service_exists", "service_up", "_servicegroup_get", "_vserver_sslcert_get", "_service_get", "service_disable", "__virtual__", "vserver_sslcert_delete", "server_disable", "_vserver_get", "_disconnect", "servicegroup_delete", "_servicegroup_get_servers", "_server_get", "vserver_sslcert_add", "vserver_add", "_servicegroup_get_server", "_vserver_servicegroup_get", "vserver_servicegroup_add", "servicegroup_server_enable", "vserver_servicegroup_delete", "__connarg", "servicegroup_server_exists", "_connect", "service_enable", "servicegroup_add", "servicegroup_server_up", "server_enable", "vserver_exists", "vserver_sslcert_exists", "server_enabled", "servicegroup_server_disable"], "function_calls": ["servicegroup_exists", "NSLBVServer", "server_exists", "vserver_servicegroup_exists", "_servicegroup_get", "NSServiceGroupServerBinding", "_vserver_sslcert_get", "_service_get", "NSSSLVServerSSLCertKeyBinding", "NSNitro", "len", "NSService", "NSServer", "dict", "_disconnect", "_servicegroup_get_servers", "_server_get", "_vserver_get", "NSLBVServerServiceGroupBinding", "_servicegroup_get_server", "_vserver_servicegroup_get", "__connarg", "NSServiceGroup", "_connect", "vserver_exists", "vserver_sslcert_exists"], "class_names": [], "class_method_calls": ["vsg.get_servicegroupname", "NSServer.update", "NSServiceGroup.add", "sg.set_servicetype", "service.set_name", "name.startswith", "sg_type.upper", "NSServer.get", "sg.set_servicegroupname", "sslcert.set_certkeyname", "NSServiceGroup.disable_server", "NSServer.delete", "NSLBVServer.get", "vsg.set_servicegroupname", "NSServer.enable", "log.debug", "server.get_ipaddress", "v_type.upper", "NSLBVServerServiceGroupBinding.add", "NSServiceGroupServerBinding.delete", "service.get_svrstate", "s_state.upper", "NSServiceGroup.delete", "sg.get_servicetype", "NSService.get", "server.set_ipaddress", "logging.getLogger", "NSLBVServer.delete", "vserver.get_ipv46", "sslcert.set_vservername", "vserver.set_ipv46", "alt_server.set_name", "NSService.enable", "vserver.set_name", "NSSSLVServerSSLCertKeyBinding.delete", "NSServiceGroup.enable_server", "server.set_state", "NSSSLVServerSSLCertKeyBinding.get", "sgsb.set_servicegroupname", "alt_server.set_ipaddress", "NSLBVServerServiceGroupBinding.delete", "vserver.set_servicetype", "vserver.get_port", "NSServer.disable", "NSService.disable", "nitro.logout", "server.set_name", "NSServiceGroupServerBinding.add", "vserver.set_port", "nitro.login", "NSLBVServer.add", "salt.utils", "cur_server.get_ipaddress", "server.get_svrstate", "NSSSLVServerSSLCertKeyBinding.add", "sgsb.set_port", "server.get_port", "NSServiceGroup.get", "NSServer.add", "NSLBVServerServiceGroupBinding.get", "sgsb.set_servername", "server.get_servername", "sslcert.get_certkeyname", "vserver.get_servicetype", "NSServiceGroup.get_servers", "server.get_state", "service.set_delay", "vsg.set_name"]}, "network.py": {"libraries": ["fnmatch", "salt.utils.win_network", "platform", "salt.exceptions.SaltClientError", "salt.utils.files", "logging", "collections.abc.Mapping", "salt.utils.path", "salt._compat.ipaddress", "salt.utils.stringutils", "itertools", "os", "ctypes.util", "subprocess", "collections.abc.Sequence", "types", "re", "salt.exceptions.SaltSystemExit", "ctypes", "random", "salt.utils.versions.Version", "socket", "string.digits", "salt.utils.platform", "salt.utils.args", "salt.utils.decorators.jinja.jinja_filter", "string.ascii_letters", "shutil"], "function_names": ["_interfaces_ifconfig", "subnets6", "is_reachable_host", "_ip_networks", "is_ipv6", "remote_port_tcp", "mac2eui64", "_is_ipv", "_subnets", "get_socket", "_ip_addrs", "append", "ip_addrs6", "_ip_options_unspecified", "_filter_ipaddr", "_ip_options_private", "_netlink_tool_remote_on", "ipwrap", "_remotes_on", "_get_ips", "extend", "in_subnet", "filter", "interface_ip", "ipaddr", "hw_addr", "calc_net", "_number_of_set_bits", "_ip_options_loopback", "_ip_options_multicast", "linux_interfaces", "_ip_options_global", "_generate_minion_id", "network_hosts", "is_ipv4_subnet", "ip_bracket", "_freebsd_remotes_on", "_filter_interfaces", "_ip_options_link_local", "_interfaces_ipconfig", "generate_minion_id", "ip_addrs", "interface", "get_net_size", "is_ipv6_filter", "_ipv4_to_bits", "first", "isportopen", "sanitize_host", "get_net_start", "_filter", "is_ipv4", "_parse_tcp_line", "_ip_options", "natural_ipv4_netmask", "hex2ip", "_hw_addr_aix", "_netbsd_remotes_on", "__init__", "cidr_to_ipv4_netmask", "ip_host", "ipv6", "_ip_options_site_local", "is_ipv6_subnet", "is_subnet", "_junos_interfaces_ifconfig", "network_size", "_get_iface_info", "netbsd_interfaces", "_ip_options_reserved", "ip_networks6", "_interfaces_ip", "filter_by_networks", "ipv4", "refresh_dns", "parse_host_port", "_openbsd_remotes_on", "is_loopback", "host_to_ips", "__call__", "ip_to_host", "_network_hosts", "_test_addrs", "_network_size", "_netbsd_interfaces_ifconfig", "win_interfaces", "mac_str_to_bytes", "is_ip", "subnets", "_windows_remotes_on", "_linux_remotes_on", "parse_network", "interfaces", "_aix_remotes_on", "rpad_ipv4_network", "_sunos_remotes_on", "is_ip_filter", "ip_networks", "junos_interfaces", "gen_mac", "clear", "active_tcp", "dns_check", "_number_of_set_bits_to_ipv4_netmask", "local_port_tcp", "get_fqhostname", "is_ipv4_filter", "_ipv_filter"], "function_calls": ["_interfaces_ifconfig", "_ip_networks", "is_ipv6", "_is_ipv", "_subnets", "_ip_addrs", "ip_addrs6", "_filter_ipaddr", "_netlink_tool_remote_on", "bool", "_remotes_on", "_get_ips", "ipaddr", "SaltSystemExit", "set", "linux_interfaces", "_generate_minion_id", "list", "SaltClientError", "is_ipv4_subnet", "ip_bracket", "bin", "_freebsd_remotes_on", "_filter_interfaces", "DistinctList", "ip_addrs", "jinja_filter", "is_ipv6_filter", "_ipv4_to_bits", "dict", "sanitize_host", "_filter", "is_ipv4", "_parse_tcp_line", "_ip_options", "hex2ip", "_hw_addr_aix", "_netbsd_remotes_on", "tuple", "cidr_to_ipv4_netmask", "ipv6", "Version", "type", "is_ipv6_subnet", "_junos_interfaces_ifconfig", "_get_iface_info", "netbsd_interfaces", "_interfaces_ip", "ipv4", "fun", "refresh_dns", "RES_INIT", "_openbsd_remotes_on", "iter", "next", "_network_hosts", "_test_addrs", "_network_size", "_netbsd_interfaces_ifconfig", "win_interfaces", "any", "range", "_windows_remotes_on", "_linux_remotes_on", "parse_network", "interfaces", "int", "_aix_remotes_on", "super", "_sunos_remotes_on", "str", "sorted", "Interfaces", "isinstance", "junos_interfaces", "bytes", "ValueError", "hex", "_number_of_set_bits_to_ipv4_netmask", "len", "is_ipv4_filter", "_ipv_filter"], "class_names": ["Interfaces", "DistinctList"], "class_method_calls": ["exc.returncode", "iface_info.get", "cmd.split", "ipaddress._BaseAddress", "pbcast.match", "self.filter", "mmask.group", "ip_obj.is_unspecified", "socket.getfqdn", "subprocess.CalledProcessError", "data.items", "logging.getLogger", "socket.SOL_TCP", "ex.returncode", "s.connect", "iface_info.keys", "self.append", "socket.AF_INET6", "group.splitlines", "intf.is_loopback", "ip_info.get", "socket.AF_INET", "os.getenv", "local.pop", "shutil.which", "_get_interfaces.clear", "socket.IPPROTO_IP", "subprocess.STDOUT", "piface.match", "itertools.chain", "sock.connect_ex", "remotes.add", "ip_obj.is_site_local", "ipaddress.IPv6Network", "fnmatch.fnmatch", "addr.rstrip", "subprocess.PIPE", "ip_addr.append", "local.split", "ipv6scope.lower", "socket.gaierror", "pmask6.match", "net.network_address", "ip_obj.is_private", "socket.AI_CANONNAME", "ret.extend", "log.warning", "ip_net.is_loopback", "key.strip", "addr.extend", "line.strip", "pip6.match", "miface.group", "out.splitlines", "os.uname", "cols.index", "re.findall", "ctypes.util", "re.match", "mip.group", "val.strip", "address.compressed", "socket.socket", "attrs.split", "ipaddress.IPv6Address", "addr.version", "ip_addr.split", "re.sub", "socket.gethostbyaddr", "subprocess.Popen", "addr.lstrip", "mac_str.replace", "s.close", "self.interfaces", "log.error", "ifaces.values", "socket.gethostname", "addr.get", "ip_obj.version", "pmask.match", "socket.getaddrinfo", "_s_.lstrip", "ip_addrs.append", "_s_.partition", "ipaddress.IPv4Network", "subprocess.check_output", "remote.pop", "platform.node", "addrs.extend", "hosts.extend", "match.groups", "mbcast.group", "pupdown.search", "socket.AF_UNSPEC", "x.prefixlen", "binary_str.rstrip", "pmac.match", "bits.startswith", "ip_obj.is_multicast", "random.randint", "socket.SOCK_STREAM", "mmac.group", "local.rsplit", "line.startswith", "mmask6.group", "x.network_address", "ipaddr.split", "option.strip", "ipaddress.ip_interface", "pip.match", "type_.startswith", "adapter_iface_regex.search", "options_fun_map.items", "log.debug", "ip_obj.is_link_local", "remote_host.strip", "ips.append", "os.path", "ret.add", "remote.split", "ip_obj.is_loopback", "mip6.group", "self.localhost_matchers", "intf.network", "_s_.count", "ifaces.items", "x.netmask", "net.prefixlen", "options.split", "ipaddress.AddressValueError", "ctypes.cdll", "itertools.islice", "val.rstrip", "ipaddress.ip_network", "LIBC.__res_init", "address.ipv4_mapped", "line.split", "ret.append", "mask.split", "remote.rsplit", "salt.utils", "hosts.first", "hosts.append", "re.compile", "addr.is_loopback", "socket.SOCK_RAW", "value.split", "ipaddress.ip_address", "x.num_addresses", "s.settimeout", "expand_mac.append", "types.GeneratorType", "ip_obj.is_reserved", "rhost.strip"]}, "neutron.py": {"libraries": ["salt.exceptions", "keystoneauth1.session", "neutronclient.shell.NeutronShell", "keystoneauth1.loading", "neutronclient.v2_0.client", "logging", "salt.utils.versions"], "function_names": ["_fetch_ikepolicy", "_fetch_ipsecpolicy", "show_subnet", "delete_floatingip", "_find_firewall_rule_id", "check_keystone", "show_firewall", "delete_subnet", "show_security_group_rule", "delete_ipsec_site_connection", "show_floatingip", "list_ipsec_site_connections", "list_agents", "update_firewall_rule", "_fetch_vpnservice", "show_ipsecpolicy", "update_vpnservice", "delete_vpnservice", "show_ikepolicy", "create_subnet", "_old_init", "create_port", "create_network", "show_ipsec_site_connection", "list_security_groups", "show_network", "create_ipsec_site_connection", "show_router", "delete_router", "_new_init", "update_network", "create_router", "show_security_group", "_find_port_id", "update_security_group", "_find_ipsec_site_connection_id", "check_neutron", "update_quota", "list_ports", "update_subnet", "list_security_group_rules", "remove_interface_router", "list_firewall_rules", "list_ikepolicies", "create_floatingip", "list_networks", "_fetch", "add_gateway_router", "__init__", "_find_router_id", "_find_ikepolicy_id", "delete_ikepolicy", "show_quota", "_fetch_ipsec_site_connection", "create_ikepolicy", "_fetch_router", "create_ipsecpolicy", "_fetch_subnet", "create_security_group_rule", "delete_security_group", "delete_port", "create_firewall_rule", "_fetch_security_group", "_find_vpnservice_id", "_fetch_port", "show_port", "_find_network_id", "list_subnets", "_fetch_firewall", "get_quotas_tenant", "_find_ipsecpolicy_id", "list_floatingips", "list_firewalls", "remove_gateway_router", "delete_network", "list_extensions", "list_l3_agent_hosting_routers", "_find_security_group_id", "_fetch_network", "add_interface_router", "show_vpnservice", "create_security_group", "list_ipsecpolicies", "delete_firewall_rule", "delete_quota", "update_floatingip", "delete_ipsecpolicy", "update_port", "delete_security_group_rule", "_fetch_firewall_rule", "list_quotas", "show_firewall_rule", "_find_subnet_id", "create_vpnservice", "update_router", "list_vpnservices", "list_routers", "sanitize_neutronclient"], "function_calls": ["all", "sanitize_neutronclient", "len"], "class_names": ["SaltNeutron"], "class_method_calls": ["self.kwargs", "self._old_init", "self._find_ikepolicy_id", "self._find_firewall_rule_id", "self._fetch_security_group", "self.list_ports", "self._fetch_vpnservice", "self._find_security_group_id", "keystoneauth1.session", "self._fetch", "self._find_network_id", "self._find_vpnservice_id", "logging.getLogger", "self.list_ikepolicies", "self._fetch_port", "self.get_quotas_tenant", "self._fetch_ipsec_site_connection", "self.list_ipsecpolicies", "self._fetch_subnet", "resource.get", "self.list_security_groups", "kwargs.get", "self._find_port_id", "self.list_vpnservices", "exceptions.MinionError", "auth_url.endswith", "self.session", "loader.load_from_options", "self.client_kwargs", "self._find_ipsec_site_connection_id", "self.list_firewalls", "ret.append", "self._find_ipsecpolicy_id", "self._fetch_firewall", "self._find_subnet_id", "salt.utils", "kwargs.keys", "self._fetch_firewall_rule", "self._fetch_network", "self.network_conn", "self._fetch_ikepolicy", "self.list_networks", "auth.copy", "self._find_router_id", "self._fetch_router", "self._fetch_ipsecpolicy", "self.list_subnets", "self.list_ipsec_site_connections", "self._new_init", "self.list_routers", "keystoneauth1.loading", "client.Client", "self.list_firewall_rules", "kwargs.copy"]}, "neutronng.py": {"libraries": ["shade"], "function_names": ["security_group_rule_create", "security_group_update", "get_openstack_cloud", "_clean_kwargs", "network_delete", "get_operator_cloud", "subnet_update", "subnet_get", "subnet_create", "list_subnets", "security_group_delete", "security_group_get", "__virtual__", "compare_changes", "network_get", "network_create", "setup_clouds", "list_networks", "subnet_delete", "security_group_rule_delete", "security_group_create"], "function_calls": ["get_openstack_cloud", "get_operator_cloud", "_clean_kwargs"], "class_names": [], "class_method_calls": ["kwargs.pop", "cloud.create_security_group", "cloud.delete_security_group_rule", "cloud.list_networks", "cloud.list_subnets", "shade.openstack_cloud", "cloud.get_network", "cloud.create_subnet", "cloud.create_network", "cloud.create_security_group_rule", "cloud.delete_network", "cloud.delete_security_group", "cloud.update_security_group", "cloud.update_subnet", "cloud.get_subnet", "cloud.get_security_group", "shade.operator_cloud", "cloud.delete_subnet", "obj.items"]}, "nexus.py": {"libraries": ["logging"], "function_names": ["__fetch_from_nexus", "downloaded", "__virtual__"], "function_calls": ["__fetch_from_nexus", "str"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "version.endswith"]}, "nfs3.py": {"libraries": ["salt.utils.files", "salt.utils.stringutils", "salt.utils.path", "logging"], "function_names": ["list_exports", "del_export", "add_export", "_write_exports", "reload_exports", "__virtual__"], "function_calls": ["_write_exports", "list_exports", "isinstance", "TypeError"], "class_names": [], "class_method_calls": ["perm.startswith", "logging.getLogger", "newshares.append", "efl.read", "perm.split", "line.split", "line.startswith", "salt.utils", "efh.write"]}, "nftables.py": {"libraries": ["salt.state.STATE_INTERNAL_KEYWORDS", "logging"], "function_names": ["flush", "set_policy", "__virtual__", "append", "chain_absent", "delete", "table_absent", "table_present", "insert", "chain_present"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "flush_chain.strip", "command.strip", "kwargs.get"]}, "nginx.py": {"libraries": ["salt.utils.decorators", "urllib.request", "re", "salt.utils.path"], "function_names": ["configtest", "status", "__detect_os", "build_info", "version", "signal", "__virtual__"], "function_calls": ["int", "__detect_os", "len"], "class_names": [], "class_method_calls": ["urllib.request", "decorators.memoize", "resp.close", "resp.read", "status_data.splitlines", "salt.utils", "i.startswith", "out.splitlines", "re.findall"]}, "nilrt_ip.py": {"libraries": ["pyiface.ifreqioctls.IFF_RUNNING", "salt.exceptions", "os", "time", "salt.utils.validate.net", "pyiface.ifreqioctls.IFF_LOOPBACK", "pyconnman", "salt.utils.files", "dbus", "requests.structures.CaseInsensitiveDict", "re", "pyiface", "logging", "configparser"], "function_names": ["_remove_quotes", "_get_possible_adapter_modes", "_get_ethercat_interface_info", "_get_static_info", "_get_interface_info", "_get_service_info", "_space_delimited_list", "_get_base_interface_info", "_change_state_legacy", "set_dhcp_only_all", "enable", "down", "get_interface", "_change_state", "_dict_to_string", "_change_dhcp_config", "_get_services", "_interface_to_service", "build_network_settings", "set_static_all", "__virtual__", "_load_config", "set_ethercat", "build_interface", "_get_info", "_get_dns_info", "_assume_condition", "_get_technologies", "_get_tcpip_interface_info", "_save_config", "_connected", "_get_adapter_mode_info", "disable", "_get_request_mode_info", "_restart", "_configure_static_interface", "set_dhcp_linklocal_all", "get_network_settings", "apply_network_settings", "get_interfaces_details", "set_linklocal_only_all", "up", "_get_state", "_validate_ipv4"], "function_calls": ["any", "range", "_get_possible_adapter_modes", "_get_ethercat_interface_info", "list", "_get_static_info", "int", "_get_service_info", "hasattr", "_change_state_legacy", "_get_base_interface_info", "_space_delimited_list", "enable", "down", "get_interface", "_change_state", "str", "_change_dhcp_config", "_dict_to_string", "_get_services", "sorted", "all", "_interface_to_service", "isinstance", "map", "set_static_all", "_load_config", "_get_dns_info", "_assume_condition", "_get_tcpip_interface_info", "_save_config", "_get_adapter_mode_info", "disable", "_get_request_mode_info", "RuntimeError", "_restart", "set_dhcp_linklocal_all", "_configure_static_interface", "get_interfaces_details", "len", "up", "_get_state", "_validate_ipv4"], "class_names": [], "class_method_calls": ["service_info.get_property", "dbus.String", "changes.append", "interface.hwaddr", "service.set_property", "dns_list.append", "nameservers.append", "os.path", "hwaddr.split", "route_file.read", "parser.write", "log.warning", "config_parser.readfp", "parser.set", "logging.getLogger", "ipv4_info.get", "dns_info.readlines", "re.MULTILINE", "configparser.ConfigParser", "service.get_property", "settings.append", "time.sleep", "x.name", "ipv6_info.get", "parser.readfp", "info.lower", "parser.remove_section", "dictionary.items", "value.get", "interface.flags", "configparser.MissingSectionHeaderError", "settings.get", "nameservers.split", "settings.items", "line.split", "interface.addr", "interface.name", "os.readlink", "pyconnman.ConnService", "serv.append", "salt.utils", "parser.add_section", "parser.optionxform", "pyiface.getIfaces", "configparser.RawConfigParser", "salt.exceptions", "re.compile", "blacklist.get", "pyconnman.ConnManager", "value.split", "interface.netmask", "match.group", "config_parser.getunquoted", "pattern.search", "parser.has_section", "uevent_file.readlines", "line.startswith", "interface.sockaddrToStr", "ret.splitlines", "dbus.DBusException", "pyiface.Interface"]}, "nix.py": {"libraries": ["itertools", "os", "salt.utils.itertools", "logging", "salt.utils.path"], "function_names": ["_output_format", "_quietnix", "_zip_flatten", "_strip_quotes", "collect_garbage", "upgrade", "_run", "_nix_collect_garbage", "_nix_env", "install", "uninstall", "_format_upgrade", "list_pkgs", "__virtual__"], "function_calls": ["_quietnix", "_strip_quotes", "_zip_flatten", "_run", "_nix_collect_garbage", "_nix_env", "list", "zip", "_format_upgrade"], "class_names": [], "class_method_calls": ["s.split", "logging.getLogger", "itertools.repeat", "p.append", "itertools.chain", "cmd.extend", "os.path", "salt.utils", "s.startswith", "kwargs.get", "s.strip", "cmd.append"]}, "nova.py": {"libraries": ["salt.exceptions.SaltCloudSystemExit", "novaclient", "time", "keystoneauth1.loading", "salt.utils.versions.Version", "novaclient.base", "novaclient.extension", "novaclient.exceptions", "novaclient.client", "salt.utils.files", "inspect", "logging", "keystoneauth1.session", "novaclient.shell.OpenStackComputeShell", "novaclient.auth_plugin", "novaclient.utils", "salt.utils.cloud"], "function_names": ["get_catalog", "flavor_delete", "server_show", "floating_ip_create", "_v2_setup", "show_instance", "keypair_list", "floating_ip_disassociate", "__str__", "get_entry", "root_password", "volume_attach", "floating_ip_list", "secgroup_list", "image_meta_delete", "_new_init", "_item_list", "get_endpoint_url_v3", "flavor_create", "image_show", "image_meta_set", "volume_detach", "delete", "volume_show", "_sanatize_network_params", "volume_list", "flavor_list", "_server_uuid_from_name", "lock", "volume_delete", "image_list", "floating_ip_pool_list", "virtual_interface_list", "virtual_interface_create", "server_show_libcloud", "secgroup_delete", "_parse_block_device_mapping_v2", "network_list", "server_list", "server_list_detailed", "server_list_min", "keypair_add", "network_create", "floating_ip_associate", "check_nova", "floating_ip_delete", "_volume_get", "sanatize_novaclient", "suspend", "floating_ip_show", "_v3_setup", "network_show", "server_by_name", "boot", "expand_extensions", "volume_create", "secgroup_create", "resume", "__init__", "keypair_delete", "_old_init", "get_entry_multi", "_network_show"], "function_calls": ["Version", "list", "hasattr", "get_entry", "NovaServer", "SaltCloudSystemExit", "get_endpoint_url_v3", "str", "OpenStackComputeShell", "all", "isinstance", "KwargsStruct", "_parse_block_device_mapping_v2", "check_nova", "iter", "next", "sanatize_novaclient", "setattr", "getattr"], "class_names": ["NovaServer", "SaltNova", "KwargsStruct"], "class_method_calls": ["self.kwargs", "server.remove_floating_ip", "item.__dict__", "conn.client", "net.label", "image.name", "item.addresses", "logging.getLogger", "nt_ks.items", "item.image", "self.volume_list", "floating_ip.id", "item.links", "volume.display_description", "self.expand_extensions", "volume.id", "image.metadata", "kwargs.get", "volume.status", "item.metadata", "self.catalog", "nt_ks.virtual_interfaces", "server_info.values", "self.extensions", "bdm_dict.get", "nt_ks.security_groups", "self.public_ips", "item.accessIPv4", "nt_ks.images", "flavor.ram", "item.tenant_id", "keystoneauth1.loading", "flavor.links", "client.discover_extensions", "self.image", "novaclient.exceptions", "self.size", "server.add_floating_ip", "self.addresses", "kwargs.pop", "item.accessIPv6", "nt_ks.floating_ips", "flavor.rxtx_factor", "self.password", "self.floating_ip_list", "servers.items", "floating_ip.ip", "self._v3_setup", "self.version", "nt_ks.servers", "item.key_name", "time.sleep", "self.floating_ips", "fp_.read", "image.minDisk", "image.status", "self._sanatize_network_params", "server_info.keys", "flavor.vcpus", "self._uuid", "self.client_kwargs", "self.compute_conn", "self.server_show", "novaclient.base", "time.time", "self.uuid", "nt_ks.networks", "item.flavor", "image.created", "item.user_id", "auth.copy", "volume.display_name", "self.volume_show", "nt_ks.volumes", "keypair.public_key", "nt_ks.keypairs", "self._network_show", "kwargs.copy", "self.name", "net.__dict__", "novaclient.__version__", "self.private_ips", "self._v2_setup", "server.id", "self._old_init", "self.kwargstruct", "keypair.name", "item.hostId", "addr.get", "image.progress", "image.id", "item.rules", "keystoneauth1.session", "floating_ip.fixed_ip", "item.name", "image.minRam", "flavor.id", "self.server_list_detailed", "volume.attachments", "pool.name", "self.server_list", "extension.module", "volume.size", "network.__dict__", "extension.run_hooks", "server.get", "loader.load_from_options", "response.id", "nt_ks.flavors", "image.links", "novaclient.auth_plugin", "self.__dict__", "value.__class__", "flavor.name", "item.created", "self.id", "floating_ip.pool", "self.server_show_libcloud", "client.Client", "floating_ip.instance_id", "nt_ks.floating_ip_pools", "self._volume_get", "bdm.append", "item.status", "flavor.disk", "self.extra", "log.debug", "self.state", "self._server_uuid_from_name", "flavor.swap", "extension.manager_class", "server_.__dict__", "item.id", "keys.split", "self.network_show", "device_spec.items", "self.volume_conn", "self.session", "auth_url.endswith", "inspect.isclass", "image.updated", "keypair.fingerprint", "ret.append", "salt.utils", "item.updated", "log.error", "self.floating_ip_show", "self._new_init", "connection.__dict__", "self.fixed_ips", "item.description", "self.server_by_name"]}, "npm.py": {"libraries": ["re", "salt.exceptions.CommandExecutionError", "salt.exceptions.CommandNotFoundError"], "function_names": ["removed", "_pkg_is_installed", "cache_cleaned", "bootstrap", "installed", "__virtual__"], "function_calls": ["isinstance", "_pkg_is_installed"], "class_names": [], "class_method_calls": ["pkgs_to_install.append", "installed_pkgs.items", "pkg_name.startswith", "pkg_name.split", "pkgs_satisfied.append", "matches.group", "comment_msg.append", "pkg_details.get", "pkg_from.endswith", "re.search", "installed_pkgs.values"]}, "nspawn.py": {"libraries": ["errno", "os", "salt.utils.path", "time", "salt.utils.systemd", "salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError", "functools", "salt.utils.functools", "re", "salt.utils.args", "logging", "tempfile", "salt.defaults.exitcodes", "shutil"], "function_names": ["_ensure_systemd", "_clear_context", "bootstrap_container", "terminate", "_sd_version", "_needs_install", "state", "_bad_verify", "run_stderr", "list_stopped", "pid", "_make_container_root", "run", "_run", "enable", "check_exists", "_ensure_exists", "_bootstrap_arch", "_root", "_bootstrap_ubuntu", "_bootstrap_debian", "__virtual__", "info", "remove", "pull_tar", "_failed_remove", "reboot", "list_running", "restart", "run_all", "_pull_image", "pull_raw", "stop", "list_all", "poweroff", "_ensure_running", "disable", "retcode", "pull_dkr", "_machinectl", "exists", "copy_to", "start", "bootstrap_salt", "_bootstrap_fedora", "_build_failed", "run_stdout"], "function_calls": ["_ensure_systemd", "_sd_version", "int", "_needs_install", "state", "CommandExecutionError", "_bad_verify", "_make_container_root", "run", "_run", "sorted", "_root", "info", "_failed_remove", "SaltInvocationError", "reboot", "list_running", "_pull_image", "globals", "wrapped", "stop", "list_all", "_ensure_running", "retcode", "_machinectl", "exists", "copy_to", "start", "enumerate", "set", "_build_failed", "run_stdout"], "class_names": [], "class_method_calls": ["__context__.pop", "log.error", "kwargs.pop", "tree.search", "val.split", "log.debug", "os.listdir", "key_name_map.get", "log.info", "os.path", "exc.errno", "logging.getLogger", "time.sleep", "verify.lower", "x.startswith", "match.groups", "kwargs.get", "log.trace", "os.makedirs", "tempfile.mkdtemp", "bootstrap_args.replace", "pull_opts.append", "ret.append", "shutil.rmtree", "line.split", "bootstrap_args.format", "salt.utils", "kv_pair.match", "errno.ENOENT", "salt.defaults", "functools.wraps", "re.compile", "salt.config", "source.startswith"]}, "nxos_api.py": {"libraries": ["salt.utils.args.clean_kwargs", "json", "logging", "salt.exceptions.SaltException", "salt.utils.http"], "function_names": ["_prepare_connection", "rpc"], "function_calls": ["SaltException", "enumerate", "isinstance", "_prepare_connection", "clean_kwargs"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "init_kwargs.get", "nxos_api_kwargs.items", "salt.utils", "payload.append", "json.dumps"]}, "nxos_upgrade.py": {"libraries": ["logging"], "function_names": ["image_running", "_version_info", "__virtual__"], "function_calls": ["_version_info"], "class_names": [], "class_method_calls": ["logging.getLogger"]}, "omapi.py": {"libraries": ["pypureomapi", "salt.utils.stringutils", "struct", "logging"], "function_names": ["_conn", "delete_host", "add_host", "__virtual__"], "function_calls": ["_conn", "TypeError"], "class_names": [], "class_method_calls": ["logging.getLogger", "response.opcode", "omapi.OMAPI_OP_UPDATE", "__opts__.get", "omapi.OMAPI_OP_STATUS", "struct.pack", "omapi.OmapiMessage", "omapi.Omapi", "omapi.pack_mac", "response.handle", "omapi.pack_ip", "salt.utils", "__pillar__.get", "msg.obj", "msg.message", "o.query_server"]}, "openbsd_sysctl.py": {"libraries": ["os", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "salt.utils.files", "re", "salt.utils.data"], "function_names": ["persist", "__virtual__", "show", "get", "assign"], "function_calls": ["str", "len", "CommandExecutionError", "assign"], "class_names": [], "class_method_calls": ["msg.format", "rest.split", "nlines.append", "new_value.split", "line.split", "line.startswith", "re.match", "os.path", "salt.utils", "out.splitlines", "ofile.writelines", "rest.startswith"]}, "openbsdpkg.py": {"libraries": ["salt.exceptions.MinionError", "salt.exceptions.CommandExecutionError", "re", "logging", "salt.utils.versions", "salt.utils.data", "copy"], "function_names": ["remove", "upgrade_available", "_list_pkgs_from_context", "upgrade", "install", "version", "list_pkgs", "purge", "latest_version", "__virtual__"], "function_calls": ["any", "remove", "_list_pkgs_from_context", "latest_version", "len", "CommandExecutionError", "list_pkgs"], "class_names": [], "class_method_calls": ["__PKG_RE.match", "logging.getLogger", "re.compile", "kwargs.pop", "__context__.pop", "pkg.split", "stem.split", "copy.deepcopy", "x.split", "errors.append", "re.match", "cmd.extend", "salt.utils", "out.splitlines", "pkgs.get", "kwargs.get", "cmd.append"]}, "openbsdrcctl_service.py": {"libraries": ["salt.utils.decorators", "os", "salt.exceptions.CommandNotFoundError", "salt.utils.path"], "function_names": ["disable", "get_disabled", "status", "enable", "_cmd", "reload_", "start", "disabled", "available", "enabled", "get_all", "restart", "missing", "get_enabled", "_get_flags", "stop", "__virtual__"], "function_calls": ["any", "_cmd", "bool", "available", "sorted", "format", "_get_flags"], "class_names": [], "class_method_calls": ["decorators.memoize", "ret.append", "salt.utils", "os.path", "kwargs.get"]}, "openbsdservice.py": {"libraries": ["fnmatch", "os", "salt.utils.files", "re", "logging", "salt.utils.data"], "function_names": ["get_disabled", "status", "_get_rc", "reload_", "start", "disabled", "available", "get_enabled", "restart", "get_all", "enabled", "missing", "stop", "__virtual__"], "function_calls": ["get_disabled", "_get_rc", "bool", "list", "available", "get_all", "sorted", "len", "set", "get_enabled", "map"], "class_names": [], "class_method_calls": ["logging.getLogger", "re.compile", "os.X_OK", "log.error", "start_daemon_parameter_regex.findall", "start_daemon_call_regex.match", "handle.readlines", "match.group", "fnmatch.filter", "os.listdir", "service_flags_regex.match", "pkg_scripts_regex.match", "os.path", "salt.utils", "services.append", "os.access", "re.search"]}, "openscap.py": {"libraries": ["shlex", "subprocess", "os.path", "salt.utils.versions", "tempfile", "argparse", "shutil"], "function_names": ["__init__", "xccdf_eval", "error", "xccdf"], "function_calls": ["_ArgumentParser", "super", "dict", "Exception", "str"], "class_names": ["_ArgumentParser"], "class_method_calls": ["tempfile.mkdtemp", "shlex.split", "cmd_opts.append", "proc.returncode", "args.profile", "shutil.rmtree", "cmd_opts.extend", "_OSCAP_EXIT_CODES_MAP.get", "self.add_argument", "proc.communicate", "subprocess.Popen", "os.path", "salt.utils", "argparse.ArgumentParser", "parser.parse_known_args", "subprocess.PIPE"]}, "openstack_config.py": {"libraries": ["salt.exceptions.CommandExecutionError"], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["str"], "class_names": [], "class_method_calls": []}, "openstack_mng.py": {"libraries": ["salt.utils.files", "salt.utils.stringutils", "os.path", "logging"], "function_names": ["start_service", "stop_service", "restart_service", "__virtual__"], "function_calls": ["float", "int"], "class_names": [], "class_method_calls": ["logging.getLogger", "rfh.read", "service_info.get", "salt.utils", "os.path"]}, "openvswitch.py": {"libraries": ["salt.utils.json", "salt.exceptions.CommandExecutionError", "logging", "salt.utils.path", "salt.exceptions.ArgumentValueError"], "function_names": ["port_get_tag", "_stdout_parse_json", "port_create_vxlan", "bridge_to_vlan", "_param_if_exists", "_stdout_list_split", "_convert_json", "bridge_exists", "__virtual__", "port_create_vlan", "_param_may_exist", "port_remove", "db_set", "_retcode_to_bool", "bridge_create", "port_list", "db_get", "bridge_delete", "port_create_gre", "interface_get_type", "port_add", "bridge_to_parent", "interface_get_options", "bridge_list"], "function_calls": ["_stdout_parse_json", "_stdout_list_split", "port_list", "ArgumentValueError", "_convert_json", "_param_if_exists", "_param_may_exist", "str", "int", "_retcode_to_bool", "len", "CommandExecutionError", "isinstance", "bridge_exists"], "class_names": [], "class_method_calls": ["logging.getLogger", "json.loads", "stdout.split", "salt.utils", "json.dumps", "obj.items"]}, "opkg.py": {"libraries": ["salt.utils.files", "logging", "salt.utils.path", "shlex", "salt.utils.pkg", "salt.utils.stringutils", "salt.utils.itertools", "salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError", "pathlib", "copy", "os", "re", "salt.utils.data", "errno", "salt.exceptions.MinionError", "salt.utils.versions.Version", "salt.utils.args", "salt.utils.versions"], "function_names": ["normalize", "list_upgrades", "purge", "hold", "list_repos", "_fingerprint_file", "_convert_to_standard_attr", "_get_nisysapi_conf_d_path", "info_installed", "_set_trusted_option_if_needed", "del_repo", "_is_testmode", "_append_noaction_if_testmode", "_execute_install_command", "version_cmp", "mod_repo", "_add_new_repo", "_process_restartcheck_result", "owner", "_del_repo_from_file", "_parse_reported_packages_from_install_output", "__virtual__", "_set_state", "remove", "upgrade_available", "upgrade", "_set_repo_options", "_mod_repo_in_file", "file_list", "get_repo", "unhold", "version", "version_clean", "_parse_reported_packages_from_remove_output", "_process_info_installed_output", "list_pkgs", "_build_install_command_list", "refresh_db", "_create_repo", "_list_pkgs_from_context", "_set_repo_option", "file_dict", "_get_restartcheck_result", "check_extra_requirements", "install", "_read_repos", "_update_nilrt_restart_state", "_get_state", "latest_version"], "function_calls": ["any", "Version", "_read_repos", "normalize", "list", "CommandExecutionError", "list_repos", "_fingerprint_file", "_convert_to_standard_attr", "_get_nisysapi_conf_d_path", "_set_trusted_option_if_needed", "_is_testmode", "str", "_append_noaction_if_testmode", "_execute_install_command", "_add_new_repo", "_process_restartcheck_result", "isinstance", "map", "_del_repo_from_file", "_parse_reported_packages_from_install_output", "_set_state", "remove", "_set_repo_options", "SaltInvocationError", "dict", "bool", "_mod_repo_in_file", "_parse_reported_packages_from_remove_output", "_process_info_installed_output", "list_pkgs", "_build_install_command_list", "refresh_db", "_create_repo", "next", "iter", "_list_pkgs_from_context", "_set_repo_option", "file_dict", "_get_restartcheck_result", "len", "set", "_update_nilrt_restart_state", "_get_state", "latest_version"], "class_names": [], "class_method_calls": ["__context__.pop", "repos.values", "kwargs.pop", "parsed_packages.update", "filename.endswith", "old.get", "os.listdir", "__grains__.get", "ret.update", "ret.values", "prev_line.strip", "os.path", "fhandle.writelines", "to_install.append", "option.split", "new.update", "fhandle.write", "exc.errno", "log.warning", "logging.getLogger", "re.split", "cmds.append", "attr.split", "output.append", "ATTR_MAP.get", "fcount.write", "properties.get", "deleted_from.items", "copy.deepcopy", "line.strip", "cmd_prefix.append", "new.get", "attr.lower", "cmd.extend", "upgrade_pattern.match", "out.splitlines", "to_install.extend", "errno.EEXIST", "kwargs.get", "cmd.append", "os.makedirs", "regex.search", "shlex.quote", "pkg_params.items", "line.split", "new.items", "pathlib.Path", "filename.name", "errors.append", "to_downgrade.append", "salt.utils", "install_pattern.match", "msg.format", "value.lstrip", "remove_pattern.match", "files.append", "re.compile", "__opts__.get", "to_reinstall.append", "output.split", "match.group", "source.get", "targets.extend", "exc.strerror", "line.startswith", "os.remove", "error_repos.append", "re.escape", "targets.append", "files.extend"]}, "opsgenie.py": {"libraries": ["salt.exceptions", "inspect", "logging"], "function_names": ["close_alert", "create_alert"], "function_calls": ["create_alert"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "salt.exceptions", "inspect.getargvalues", "inspect.currentframe", "log.info"]}, "oracle.py": {"libraries": ["cx_Oracle", "os", "salt.utils.decorators.depends", "logging"], "function_names": ["get_version", "client_version", "run_query", "show_env", "show_pillar", "_connect", "_unicode_output", "version", "_cx_oracle_req", "show_dbs", "__virtual__"], "function_calls": ["get_version", "run_query", "str", "depends", "_connect", "len", "show_dbs"], "class_names": [], "class_method_calls": ["log.debug", "conn.outputtypehandler", "cursor.var", "logging.getLogger", "hostportsid.split", "cx_Oracle.LONG_STRING", "cx_Oracle.SYSOPER", "credentials.split", "sid.split", "cx_Oracle.connect", "cursor.arraysize", "cx_Oracle.FIXED_CHAR", "hostport.split", "uri.rsplit", "os.environ", "cx_Oracle.STRING", "cx_Oracle.SYSDBA", "cx_Oracle.clientversion", "cx_Oracle.makedsn", "userpass.split", "conn.cursor", "cx_Oracle.CLOB"]}, "osquery.py": {"libraries": ["salt.utils.json", "salt.utils.platform", "salt.utils.path", "logging"], "function_names": ["crontab", "process_open_sockets", "interface_addresses", "interface_details", "suid_bin", "startup_items", "osquery_flags", "iokit_registry", "shell_history", "chrome_extensions", "homebrew_packages", "etc_hosts", "listening_ports", "mounts", "process_memory_map", "hardware_events", "firefox_addons", "osquery_extensions", "osquery_info", "certificates", "safari_extensions", "alf_exceptions", "deb_packages", "process_envs", "rpm_packages", "memory_map", "iokit_devicetree", "nfs_shares", "etc_services", "keychain_items", "users", "processes", "kernel_modules", "smbios_tables", "alf_explicit_auths", "logged_in_users", "xattr_where_from", "osquery_registry", "__virtual__", "kernel_integrity", "shared_memory", "alf", "hash_", "kernel_info", "acpi_tables", "_table_attrs", "version", "preferences", "_osquery", "system_controls", "usb_devices", "file_", "routes", "os_version", "passwd_changes", "block_devices", "apt_sources", "xprotect_entries", "xprotect_reports", "time_", "process_open_files", "file_changes", "last", "kernel_extensions", "nvram", "groups", "cpuid", "query", "alf_services", "pci_devices", "_osquery_cmd", "launchd", "arp_cache", "quarantine", "apps"], "function_calls": ["_osquery", "isinstance", "_table_attrs", "_osquery_cmd"], "class_names": [], "class_method_calls": ["attrs.append", "logging.getLogger", "log.debug", "salt.utils"]}, "out.py": {"libraries": ["salt.output", "logging"], "function_names": ["string_format", "html_format", "out_format", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.output"]}, "pacmanpkg.py": {"libraries": ["fnmatch", "salt.utils.systemd", "salt.utils.pkg", "salt.exceptions.MinionError", "salt.utils.itertools", "salt.exceptions.CommandExecutionError", "salt.utils.versions.LooseVersion", "salt.utils.functools", "salt.utils.args", "os.path", "logging", "salt.utils.data", "copy"], "function_names": ["group_list", "list_upgrades", "purge", "group_diff", "group_info", "__virtual__", "remove", "upgrade_available", "upgrade", "file_list", "version", "_list_removed", "list_pkgs", "refresh_db", "_uninstall", "_list_pkgs_from_context", "file_dict", "list_repo_pkgs", "install", "owner", "latest_version"], "function_calls": ["any", "refresh_db", "next", "iter", "_uninstall", "_list_pkgs_from_context", "LooseVersion", "latest_version", "list", "list_repo_pkgs", "str", "sorted", "len", "CommandExecutionError", "set", "list_pkgs"], "class_names": [], "class_method_calls": ["__context__.pop", "log.error", "kwargs.pop", "pkgver.lower", "ret.values", "available.keys", "os.path", "group_pkgs.get", "packages.pop", "logging.getLogger", "byrepo_ret.setdefault", "copy.deepcopy", "line.strip", "x.vstring", "available.setdefault", "cmd.extend", "wildcards.append", "fromrepo.split", "kwargs.get", "installed.setdefault", "cmd.append", "ret.setdefault", "cmd.remove", "pkgname.lower", "available.pop", "pkg_params.items", "line.split", "ret.append", "errors.append", "salt.utils", "_available.get", "x.strip", "fnmatch.fnmatch", "line.startswith", "targets.append"]}, "pagerduty.py": {"libraries": ["salt.utils.json", "salt.version.__version__", "salt.utils.http", "logging"], "function_names": ["list_items", "query"], "function_calls": ["isinstance", "query"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "pagerduty_util.py": {"libraries": ["salt.utils.json", "requests"], "function_names": ["delete_resource", "resource_absent", "get_schedules", "get_services", "create_or_update_resource", "__virtual__", "_list_items", "resource_present", "get_users", "_get_resource_id", "_query", "get_resource", "get_escalation_policies"], "function_calls": ["delete_resource", "create_or_update_resource", "diff", "_list_items", "_get_resource_id", "isinstance", "_query", "get_resource"], "class_names": [], "class_method_calls": ["k.startswith", "kwargs.items", "result.json", "result.text", "result_json.items", "requests.request", "resource.get", "salt.utils", "data.items"]}, "parted_partition.py": {"libraries": ["os", "string", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "re", "logging", "stat", "salt.utils.path"], "function_names": ["system_types", "_validate_device", "_is_fstype", "disk_set", "rm", "cp", "set_", "mkpart", "set_id", "disk_toggle", "get_id", "align_check", "__virtual__", "list_", "resize", "name", "rescue", "mkfs", "_validate_partition_boundary", "mklabel", "get_block_device", "toggle", "probe", "exists", "check", "mkpartfs"], "function_calls": ["system_types", "_validate_device", "_is_fstype", "mkpart", "dict", "str", "_validate_partition_boundary", "int", "zip", "len", "CommandExecutionError"], "class_names": [], "class_method_calls": ["logging.getLogger", "os.stat", "match.group", "string.digits", "stat.S_ISBLK", "fields.extend", "line.strip", "line.startswith", "line.rstrip", "fields.append", "os.path", "string.ascii_letters", "salt.utils", "out.splitlines", "re.search", "cols.pop"]}, "pcs.py": {"libraries": ["os", "salt.utils.stringutils", "salt.utils.files", "logging", "salt.utils.path"], "function_names": ["_file_read", "cib_present", "constraint_present", "auth", "_get_cibfile_tmp", "_get_node_list_for_version", "stonith_present", "__virtual__", "cluster_node_present", "resource_op_defaults_to", "_get_cibfile_cksum", "cluster_setup", "cib_pushed", "_item_present", "_get_cibpath", "_file_write", "resource_present", "prop_has_value", "resource_defaults_to", "_get_cibfile"], "function_calls": ["_file_read", "_file_write", "_get_cibfile_cksum", "auth", "_get_node_list_for_version", "str", "len", "_get_cibfile_tmp", "_get_cibpath", "_item_present", "isinstance", "_get_cibfile"], "class_names": [], "class_method_calls": ["x.lower", "log.debug", "__grains__.get", "node_add_dict.update", "log.info", "os.path", "logging.getLogger", "authorized_dict.update", "fp_.close", "item_id.replace", "log.trace", "fp_.read", "os.makedirs", "fp_.write", "line.split", "salt.utils", "authorize_dict.update", "value.split", "item_id.split", "setup_dict.update"]}, "pdbedit.py": {"libraries": ["salt.utils.data", "logging"], "function_names": ["absent", "managed", "present", "__virtual__"], "function_calls": ["managed"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "pecl.py": {"libraries": [], "function_names": ["installed", "removed", "__virtual__"], "function_calls": ["str", "isinstance"], "class_names": [], "class_method_calls": ["name.split"]}, "peeringdb.py": {"libraries": ["salt.utils.args.clean_kwargs", "salt.utils.http", "logging"], "function_names": ["_get_auth", "_get_endpoint", "get_net", "get_netixlan", "get_org", "get_ixfac", "get_ixlan", "get_fac", "get_ixpfx", "get_poc", "get_netfac", "_build_url", "get_ix", "__virtual__"], "function_calls": ["_get_auth", "_get_endpoint", "_build_url", "clean_kwargs"], "class_names": [], "class_method_calls": ["logging.getLogger", "kwargs.pop", "ret.update", "peeringdb_cfg.get", "salt.utils"]}, "pf.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError", "re", "logging", "salt.utils.path"], "function_names": ["disable", "flush", "load", "enable", "table", "loglevel", "show", "__virtual__"], "function_calls": ["CommandExecutionError", "SaltInvocationError"], "class_names": [], "class_method_calls": ["logging.getLogger", "re.match", "modifier.title", "salt.utils", "kwargs.get", "cmd.append"]}, "pip.py": {"libraries": ["sys", "os", "salt.utils.url", "salt.utils.data", "salt.utils.package", "salt.utils.json", "salt.utils.stringutils", "pkg_resources", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.utils.platform", "re", "salt.utils.locales", "logging", "salt.utils.versions", "tempfile", "salt.exceptions.CommandNotFoundError", "shutil"], "function_names": ["list_all_versions", "_get_pip_bin", "_process_requirements", "_clear_context", "_search_paths", "uninstall", "list_upgrades", "_get_env_activate", "list_freeze_parse", "is_installed", "_pip_bin_env", "__virtual__", "freeze", "list_", "upgrade_available", "upgrade", "_get_cached_requirements", "version", "_check_bundled", "_format_env_vars", "_resolve_requirements_chain", "install", "_find_req"], "function_calls": ["any", "_process_requirements", "_get_pip_bin", "_clear_context", "_search_paths", "int", "TypeError", "list_upgrades", "CommandExecutionError", "list_freeze_parse", "OSError", "str", "_pip_bin_env", "isinstance", "freeze", "list_", "dict", "_get_cached_requirements", "version", "ValueError", "_check_bundled", "_format_env_vars", "_resolve_requirements_chain", "CommandNotFoundError", "len", "_find_req"], "class_names": [], "class_method_calls": ["__context__.pop", "allow_external.split", "cmd_kwargs.setdefault", "fh_link.read", "requirements.split", "find_links.split", "logger.warning", "chain.extend", "os.path", "ret.extend", "pkg.lower", "os.access", "re.MULTILINE", "logging.getLogger", "logger.info", "req.split", "allow_unverified.split", "cmd_kwargs.update", "rex_pip_chain_read.findall", "sys.RELENV", "l.strip", "r.strip", "os.makedirs", "config.get", "cmd.extend", "io.strip", "mirrors.split", "match.groups", "filtered.append", "egg_match.search", "cmd.append", "pkg_resources.parse_version", "m.strip", "pkgs.split", "os.X_OK", "regex.search", "tempfile.mkdtemp", "install_options.split", "logger.debug", "name.lower", "chain.append", "pkgname.lower", "os.chdir", "os.curdir", "pat.search", "mirror.startswith", "shutil.rmtree", "line.split", "entry.startswith", "re.match", "cleanup_requirements.append", "salt.utils", "p.strip", "editable.split", "p.replace", "rex_pip_reqs_comment.sub", "excludes.match", "go.strip", "e.strip", "re.compile", "os.environ", "sys.executable", "global_options.split", "requirement.startswith", "logger.error", "os.W_OK", "match.group", "arg.popitem", "versions.sort", "env_vars.items", "line.startswith", "os.remove", "prefix.lower", "pkgs.remove", "exists_action.lower"]}, "pkg_resource.py": {"libraries": ["fnmatch", "os", "salt.exceptions.SaltInvocationError", "salt.utils.yaml", "logging", "salt.utils.versions", "pprint", "salt.utils.data", "copy"], "function_names": ["pack_sources", "parse_targets", "_repack_pkgs", "format_version", "stringify", "_normalize_name", "check_extra_requirements", "add_pkg", "version", "version_clean", "sort_pkglist", "format_pkg_list", "version_compare"], "function_calls": ["pack_sources", "iter", "next", "SaltInvocationError", "_repack_pkgs", "format_version", "str", "stringify", "_normalize_name", "sorted", "len", "set", "isinstance"], "class_names": [], "class_method_calls": ["log.error", "ret_attr.setdefault", "kwargs.pop", "srcinfo.append", "log.exception", "name.split", "ret.values", "os.path", "filtered_attr.get", "log.warning", "pprint.pformat", "logging.getLogger", "__salt__.get", "versions.append", "copy.deepcopy", "pkgs.get", "kwargs.get", "fnmatch.filter", "salt.utils", "pkgs.setdefault", "sources.items"]}, "pkgin.py": {"libraries": ["salt.utils.decorators", "os", "salt.utils.path", "salt.utils.pkg", "salt.exceptions.MinionError", "salt.exceptions.CommandExecutionError", "salt.utils.functools", "re", "logging", "salt.utils.data", "copy"], "function_names": ["_supports_parsing", "list_upgrades", "_splitpkg", "purge", "_rehash", "__virtual__", "remove", "upgrade", "_supports_regex", "file_list", "normalize_name", "version", "_check_pkgin", "search", "list_pkgs", "_get_version", "refresh_db", "_list_pkgs_from_context", "file_dict", "install", "latest_version"], "function_calls": ["any", "_supports_parsing", "list", "int", "_splitpkg", "CommandExecutionError", "_rehash", "sorted", "isinstance", "remove", "_supports_regex", "_check_pkgin", "list_pkgs", "_get_version", "refresh_db", "_list_pkgs_from_context", "file_dict", "tuple", "len", "latest_version"], "class_names": [], "class_method_calls": ["__context__.pop", "log.error", "kwargs.pop", "env.append", "name.split", "old.get", "VERSION_MATCH.search", "log.info", "os.path", "shell.split", "logging.getLogger", "re.split", "cmds.append", "args.insert", "copy.deepcopy", "cmd.extend", "out.splitlines", "args.append", "kwargs.get", "cmd.append", "version_match.group", "args.extend", "cmd.insert", "line.split", "errors.append", "salt.utils", "re.compile", "decorators.memoize", "cmd_prefix.insert", "line.startswith", "files.extend"]}, "pkgng.py": {"libraries": [], "function_names": ["update_packaging_site"], "function_calls": [], "class_names": [], "class_method_calls": []}, "pkgutil.py": {"libraries": ["salt.utils.pkg", "salt.exceptions.MinionError", "salt.exceptions.CommandExecutionError", "salt.utils.functools", "salt.utils.versions", "salt.utils.data", "copy"], "function_names": ["remove", "upgrade_available", "refresh_db", "_list_pkgs_from_context", "upgrade", "latest_version", "install", "list_upgrades", "purge", "version", "list_pkgs", "__virtual__"], "function_calls": ["remove", "refresh_db", "_list_pkgs_from_context", "enumerate", "len", "CommandExecutionError", "list_pkgs"], "class_names": [], "class_method_calls": ["__context__.pop", "version_rev.split", "kwargs.pop", "pkg_params.items", "copy.deepcopy", "line.split", "salt.utils", "out.split", "targets.append", "pkgs.get", "kwargs.get"]}, "portage_config.py": {"libraries": ["traceback"], "function_names": ["_flags_helper", "mod_init", "_mask_helper", "flags", "__virtual__"], "function_calls": ["_flags_helper", "_mask_helper"], "class_names": [], "class_method_calls": ["traceback.format_exc"]}, "postfix.py": {"libraries": ["salt.utils.stringutils", "salt.utils.files", "re", "logging", "salt.utils.path"], "function_names": ["show_queue", "_write_conf", "_parse_main", "set_master", "show_main", "show_master", "delete", "requeue", "_parse_master", "set_main", "unhold", "hold", "_format_master", "__virtual__"], "function_calls": ["show_queue", "_write_conf", "_parse_main", "str", "_parse_master", "all", "isinstance", "_format_master"], "class_names": [], "class_method_calls": ["logging.getLogger", "re.compile", "log.error", "m.group", "fh_.read", "conf_list.append", "fh_.write", "line.split", "line.strip", "line.startswith", "re.match", "salt.utils", "re.escape", "full_conf.splitlines", "queue.append", "new_conf.append"]}, "postgres.py": {"libraries": ["sys", "contextlib.contextmanager", "salt.exceptions", "salt.utils.json", "salt.returners", "logging", "psycopg2", "salt.utils.data"], "function_names": ["save_load", "prep_jid", "get_fun", "get_minions", "event_return", "returner", "get_jid", "save_minions", "get_load", "_get_options", "_get_serv", "get_jids", "__virtual__"], "function_calls": ["str", "int", "_get_options", "_get_serv"], "class_names": [], "class_method_calls": ["cur.fetchall", "err.args", "log.critical", "psycopg2.IntegrityError", "logging.getLogger", "ret.get", "psycopg2.connect", "event.get", "cur.execute", "salt.returners", "conn.close", "ret.append", "salt.utils", "psycopg2.OperationalError", "_options.get", "salt.exceptions", "cur.fetchone", "cursor.execute", "conn.cursor", "psycopg2.DatabaseError", "sys.stderr"]}, "poudriere.py": {"libraries": ["os", "salt.utils.stringutils", "salt.utils.files", "logging", "salt.utils.path"], "function_names": ["_config_file", "create_ports_tree", "parse_config", "is_jail", "create_jail", "list_ports", "delete_jail", "_config_dir", "info_jail", "_check_config_exists", "update_ports_tree", "version", "bulk_build", "list_jails", "make_pkgng_aware", "update_jail", "__virtual__"], "function_calls": ["_config_file", "is_jail", "_config_dir", "_check_config_exists", "list_jails", "make_pkgng_aware"], "class_names": [], "class_method_calls": ["logging.getLogger", "os.makedirs", "os.remove", "os.path", "salt.utils", "jail.split", "res.splitlines"]}, "powerpath.py": {"libraries": [], "function_names": ["license_absent", "license_present"], "function_calls": [], "class_names": [], "class_method_calls": []}, "puppet.py": {"libraries": ["salt.utils.yaml", "logging"], "function_names": ["ext_pillar"], "function_calls": [], "class_names": [], "class_method_calls": ["log.critical", "logging.getLogger", "salt.utils"]}, "purefa.py": {"libraries": ["os", "purestorage", "datetime.datetime", "salt.exceptions.CommandExecutionError", "platform"], "function_names": ["pg_eradicate", "_get_system", "pg_update", "_get_deleted_pgroup", "_get_host", "volume_clone", "host_create", "host_delete", "volume_attach", "snap_create", "hg_remove", "_get_pgroup", "pg_create", "_get_snapshot", "snap_volume_create", "volume_detach", "_get_hgroup", "hg_delete", "volume_eradicate", "pg_delete", "volume_delete", "__virtual__", "volume_extend", "_get_deleted_volume", "_get_volume", "snap_delete", "hg_update", "host_update", "volume_create", "hg_create", "snap_eradicate", "pg_remove"], "function_calls": ["_get_pgroup", "_get_snapshot", "_get_system", "CommandExecutionError", "_get_deleted_pgroup", "str", "_get_host", "hg_delete", "_get_deleted_volume", "datetime", "_get_volume", "len", "_get_hgroup", "pg_delete"], "class_names": [], "class_method_calls": ["array.get_volume", "array.get_hgroup", "suffix.replace", "name.split", "array.copy_volume", "array.set_hgroup", "array.add_host", "array.list_host_connections", "array.create_host", "array.connect_host", "array.get_pgroup", "array.list_pgroups", "array.remove_host", "array.delete_hgroup", "array.eradicate_pgroup", "array.destroy_volume", "array.set_host", "array.list_hgroups", "array.remove_hgroup", "array.add_hgroup", "purestorage.PureError", "array.create_pgroup", "platform.platform", "array.extend_volume", "array.add_volume", "array.set_pgroup", "array.create_volume", "array.connect_hgroup", "array.disconnect_hgroup", "array.delete_host", "array.create_snapshot", "array.list_hgroup_connections", "array.create_hgroup", "os.environ", "array.list_hosts", "array.disconnect_host", "datetime.utcnow", "system.get", "array.destroy_pgroup", "purestorage.FlashArray", "array.eradicate_volume", "array.remove_volume"]}, "purefb.py": {"libraries": ["os", "datetime.datetime", "purity_fb.FileSystemSnapshot", "purity_fb.ProtocolRule", "purity_fb.SnapshotSuffix", "purity_fb.NfsRule", "salt.exceptions.CommandExecutionError", "purity_fb.rest", "purity_fb.FileSystem", "purity_fb.PurityFb"], "function_names": ["snap_delete", "fs_create", "_get_snapshot", "_get_fs", "snap_eradicate", "fs_eradicate", "fs_update", "snap_create", "fs_extend", "_get_blade", "fs_delete", "_get_deleted_fs", "__virtual__"], "function_calls": ["SnapshotSuffix", "ProtocolRule", "_get_snapshot", "_get_fs", "_get_deleted_fs", "str", "PurityFb", "NfsRule", "datetime", "len", "CommandExecutionError", "_get_blade", "FileSystemSnapshot", "print", "FileSystem"], "class_names": [], "class_method_calls": ["proto.lower", "blade.file_systems", "blade.file_system_snapshots", "os.environ", "datetime.utcnow", "_fs.destroyed", "suffix.replace", "_fs.append", "rest.ApiException", "blade.login", "_fs.provisioned", "_fs.nfs", "res.items", "source.append", "blade.disable_verify_ssl"]}, "pushbullet.py": {"libraries": ["pushbullet", "logging"], "function_names": ["__init__", "push_note", "_find_device_by_name", "__virtual__"], "function_calls": ["_SaltPushbullet"], "class_names": ["_SaltPushbullet"], "class_method_calls": ["self.pb", "logging.getLogger", "self._find_device_by_name", "spb.push_note", "dev.nickname", "pushbullet.Pushbullet", "self.target"]}, "pushover_notify.py": {"libraries": ["urllib.parse", "salt.exceptions.SaltInvocationError", "salt.utils.pushover", "logging"], "function_names": ["post_message", "__virtual__"], "function_calls": ["dict", "SaltInvocationError"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils", "urllib.parse"]}, "pw_group.py": {"libraries": ["grp", "salt.utils.data", "salt.utils.args", "logging"], "function_names": ["getent", "info", "deluser", "members", "delete", "chgid", "add", "adduser", "__virtual__"], "function_calls": ["info"], "class_names": [], "class_method_calls": ["logging.getLogger", "grp.getgrnam", "kwargs.pop", "grp.getgrall", "grinfo.gr_passwd", "grinfo.gr_name", "ret.append", "grinfo.gr_gid", "salt.utils", "log.warning", "grinfo.gr_mem"]}, "pw_user.py": {"libraries": ["salt.utils.user", "pwd", "salt.exceptions.CommandExecutionError", "salt.utils.args", "logging", "salt.utils.data", "copy"], "function_names": ["chhome", "list_users", "chgroups", "chworkphone", "chhomephone", "rename", "get_loginclass", "getent", "_build_gecos", "delete", "_update_gecos", "chuid", "add", "chshell", "__virtual__", "chfullname", "info", "list_groups", "chloginclass", "chgid", "_get_gecos", "chroomnumber"], "function_calls": ["info", "get_loginclass", "_build_gecos", "str", "list_groups", "_update_gecos", "_get_gecos", "sorted", "len", "CommandExecutionError", "set", "isinstance"], "class_names": [], "class_method_calls": ["log.error", "userinfo.split", "kwargs.pop", "pwd.getpwall", "groups.split", "data.pw_dir", "data.pw_gid", "log.warning", "logging.getLogger", "copy.deepcopy", "data.pw_uid", "cmd.extend", "gecos_field.append", "pwd.getpwnam", "gecos_dict.get", "cmd.append", "data.pw_shell", "ret.append", "salt.utils", "data.pw_passwd", "user.pw_name", "data.pw_gecos", "data.pw_name"]}, "pyenv.py": {"libraries": ["re"], "function_names": ["install_pyenv", "_python_installed", "_check_and_install_python", "_check_pyenv", "_check_and_uninstall_python", "installed", "absent"], "function_calls": ["_check_and_uninstall_python", "_python_installed", "_check_pyenv", "_check_and_install_python"], "class_names": [], "class_method_calls": ["re.sub", "name.startswith"]}, "qemu_img.py": {"libraries": ["os", "salt.utils.path"], "function_names": ["convert", "make_image", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["os.path", "salt.utils"]}, "qemu_nbd.py": {"libraries": ["glob", "os", "salt.crypt", "time", "logging", "tempfile", "salt.utils.path"], "function_names": ["mount", "init", "connect", "clear", "__virtual__"], "function_calls": ["mount", "set", "connect"], "class_names": [], "class_method_calls": ["logging.getLogger", "glob.glob", "dev.rindex", "time.sleep", "nbds.add", "mnt.items", "salt.utils", "os.path", "tempfile.gettempdir", "log.warning"]}, "quota.py": {"libraries": [], "function_names": ["mode", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "rabbitmq.py": {"libraries": ["os", "string", "winreg", "random", "salt.utils.json", "salt.utils.versions.Version", "salt.utils.itertools", "salt.utils.user", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "salt.exceptions.SaltInvocationError", "re", "logging", "salt.utils.path"], "function_names": ["set_permissions", "values_mapper", "list_users", "_format_response", "start_app", "_safe_output", "change_password", "list_upstreams", "list_policies", "set_upstream", "list_vhosts", "check_password", "reset", "list_available_plugins", "delete_vhost", "list_queues", "list_queues_vhost", "vhost_exists", "status", "user_exists", "_output_to_list", "delete_policy", "cluster_status", "delete_user", "add_vhost", "_strip_listing_to_done", "clear_password", "stop_app", "__virtual__", "force_reset", "join_cluster", "set_user_tags", "list_enabled_plugins", "policy_exists", "enable_plugin", "_output_lines_to_list", "list_permissions", "add_user", "set_policy", "_output_to_dict", "plugin_is_enabled", "delete_upstream", "_get_rabbitmq_plugin", "list_user_permissions", "func", "upstream_exists", "disable_plugin", "_check_response"], "function_calls": ["any", "Version", "values_mapper", "range", "list_users", "_format_response", "start_app", "_safe_output", "list", "list_upstreams", "int", "TypeError", "list_policies", "list_vhosts", "CommandExecutionError", "OSError", "_output_to_list", "delete_user", "_strip_listing_to_done", "isinstance", "clear_password", "stop_app", "list_enabled_plugins", "SaltInvocationError", "bool", "_output_lines_to_list", "iter", "next", "_output_to_dict", "tuple", "_get_rabbitmq_plugin", "len", "_check_response"], "class_names": [], "class_method_calls": ["winreg.REG_SZ", "name.startswith", "log.debug", "os.listdir", "line.endswith", "cmdoutput.splitlines", "winreg.OpenKeyEx", "winreg.KEY_READ", "os.path", "string.split", "server_version.split", "re.search", "random.SystemRandom", "logging.getLogger", "line.strip", "winreg.HKEY_LOCAL_MACHINE", "winreg.QueryValueEx", "cmd.extend", "winreg.CloseKey", "cmd.append", "row.split", "name.replace", "line.split", "server_version.group", "salt.utils", "string.ascii_uppercase", "x.strip", "string.digits", "raw_line.split", "winreg.KEY_WOW64_32KEY", "line.startswith", "password.replace"]}, "rallydev.py": {"libraries": ["salt.utils.json", "salt.exceptions.SaltInvocationError", "salt.utils.http", "logging"], "function_names": ["update_user", "list_users", "_get_token", "show_item", "list_items", "show_user", "query_item", "update_item", "query_user", "_query", "show_artifact", "__virtual__"], "function_calls": ["SaltInvocationError", "show_item", "_get_token", "list_items", "update_item", "query_item", "_query", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "log.error", "name.title", "log.debug", "result.get", "salt.utils"]}, "random_org.py": {"libraries": ["urllib.request", "salt.utils.json", "http.client", "logging", "salt.utils.http"], "function_names": ["generateBlobs", "generateGaussians", "generateStrings", "generateUUIDs", "generateDecimalFractions", "generateIntegers", "_query", "getUsage", "_numeric", "__virtual__"], "function_calls": ["str", "len", "_query", "isinstance", "hasattr", "_numeric"], "class_names": [], "class_method_calls": ["logging.getLogger", "options.get", "log.error", "log.debug", "http.client", "result.text", "result.get", "_result.get", "salt.utils", "RANDOM_ORG_FUNCTIONS.get", "urllib.parse"]}, "rbac_solaris.py": {"libraries": ["logging"], "function_names": ["managed", "__virtual__"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug"]}, "rbenv.py": {"libraries": ["re", "copy"], "function_names": ["_check_and_uninstall_ruby", "_check_and_install_rbenv", "install_rbenv", "_check_and_install_ruby", "_ruby_installed", "_check_rbenv", "installed", "absent"], "function_calls": ["_check_and_install_rbenv", "_check_and_uninstall_ruby", "_check_and_install_ruby", "_ruby_installed", "_check_rbenv"], "class_names": [], "class_method_calls": ["re.sub", "name.startswith", "copy.deepcopy"]}, "rdp.py": {"libraries": [], "function_names": ["disabled", "enabled", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "rebootmgr.py": {"libraries": ["salt.exceptions", "re", "logging"], "function_names": ["set_strategy", "unlock", "set_max", "set_group", "status", "get_window", "_cmd", "reboot", "lock", "cancel", "is_active", "version", "get_strategy", "set_window", "get_group", "__virtual__"], "function_calls": ["dict", "_cmd", "zip"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.exceptions", "cmd.extend", "re.search", "cmd.append"]}, "redismod.py": {"libraries": ["copy"], "function_names": ["absent", "slaveof", "string", "__virtual__"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["kwargs.update", "copy.copy"]}, "reg.py": {"libraries": ["salt.utils.stringutils"], "function_names": ["list_", "set_", "delete", "mean", "clear"], "function_calls": ["set", "int", "isinstance"], "class_names": [], "class_method_calls": ["salt.utils", "add.split"]}, "rest_pkg.py": {"libraries": ["salt.utils.platform", "salt.utils.data", "logging"], "function_names": ["remove", "upgrade", "install", "list_pkgs", "installed", "version", "__virtual__"], "function_calls": ["str", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "rest_sample_utils.py": {"libraries": [], "function_names": ["get_test_string", "fix_outage"], "function_calls": [], "class_names": [], "class_method_calls": []}, "rest_service.py": {"libraries": ["fnmatch", "salt.utils.platform", "re", "logging"], "function_names": ["list_", "status", "running", "start", "enabled", "get_all", "restart", "stop", "__virtual__"], "function_calls": ["get_all", "bool", "status"], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger", "fnmatch.filter", "re.search"]}, "restartcheck.py": {"libraries": ["sys", "salt.exceptions", "os", "time", "psutil", "subprocess", "salt.utils.files", "re", "salt.utils.args", "salt.utils.path"], "function_names": ["_kernel_modules_changed_nilrt", "restartcheck", "_kernel_versions_nilrt", "_valid_deleted_file", "_sysapi_changed_nilrt", "_kernel_versions_debian", "_deleted_files", "_get_kver_from_bin", "_kernel_versions_redhat", "_format_output", "_file_changed_nilrt", "_check_timeout", "__virtual__"], "function_calls": ["_kernel_modules_changed_nilrt", "_kernel_versions_nilrt", "_valid_deleted_file", "_sysapi_changed_nilrt", "_deleted_files", "bool", "_kernel_versions_debian", "str", "int", "_get_kver_from_bin", "_kernel_versions_redhat", "round", "isinstance", "len", "_format_output", "_file_changed_nilrt", "_check_timeout"], "class_names": [], "class_method_calls": ["pth.endswith", "kwargs.pop", "servicefile.readlines", "kernel_get_selections.splitlines", "kernel_get_last.splitlines", "__grains__.get", "path.endswith", "os.listdir", "psutil.process_iter", "nonrestartable.append", "filenames.append", "os.path", "sys.stdout", "re.search", "kernel.rstrip", "psutil.NoSuchProcess", "matched.group", "paths.stdout", "restartinitcommands.extend", "mapline.match", "line.strip", "kernel_versions.append", "proc.as_dict", "re_result.group", "maps.readlines", "cmd.append", "packages.append", "regex.match", "kernel.strip", "deleted_files.append", "os.readlink", "time.time", "restart_services.remove", "salt.utils", "pth.startswith", "kernel_get_version.splitlines", "servicefile.close", "pth.find", "salt.exceptions", "re.compile", "kernel_versions.extend", "kernels.append", "fcount.read", "restartable.append", "restart_services.append", "restartservicecommands.extend", "line.find", "line.startswith", "subprocess.Popen", "subprocess.PIPE", "excludepid.append"]}, "restconf.py": {"libraries": ["salt.utils.odict", "yaml", "json", "difflib", "logging"], "function_names": ["config_manage", "_compare_changes", "__virtual__"], "function_calls": ["str", "type", "isinstance", "_compare_changes"], "class_names": [], "class_method_calls": ["x.replace", "logging.getLogger", "json.loads", "log.critical", "log.debug", "yaml.safe_dump", "difflib.unified_diff", "salt.utils", "json.dumps"]}, "ret.py": {"libraries": ["salt.loader"], "function_names": ["get_minions", "get_jid", "get_jids", "get_fun"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.loader"]}, "rh_ip.py": {"libraries": ["os", "salt.utils.json", "salt.utils.stringutils", "jinja2", "salt.utils.validate.net", "salt.exceptions.CommandExecutionError", "salt.utils.files", "jinja2.exceptions", "salt.utils.templates", "logging"], "function_names": ["_parse_settings_bond_0", "_raise_error_iface", "_write_file_network", "_parse_routes", "_parse_settings_bond_2", "_parse_settings_bond_1", "_error_msg_routes", "_parse_settings_bond_4", "_read_temp", "down", "build_routes", "get_interface", "_error_msg_iface", "_parse_settings_miimon", "_parse_network_settings", "_parse_rh_config", "build_network_settings", "__virtual__", "build_interface", "_log_default_network", "_parse_settings_vlan", "_parse_settings_arp", "_parse_settings_bond_6", "_read_file", "_write_file_iface", "_raise_error_routes", "_parse_settings_bond", "_parse_ethtool_opts", "get_routes", "_parse_settings_eth", "_parse_settings_bond_5", "get_network_settings", "_parse_settings_bond_3", "apply_network_settings", "_raise_error_network", "_error_msg_network", "up", "_log_default_iface"], "function_calls": ["_parse_settings_bond_0", "_write_file_network", "_raise_error_iface", "range", "_parse_routes", "int", "_parse_settings_bond_2", "_parse_settings_bond_1", "_error_msg_routes", "_parse_settings_bond_4", "_read_temp", "str", "AttributeError", "_error_msg_iface", "_parse_settings_miimon", "_parse_network_settings", "_parse_rh_config", "isinstance", "_log_default_network", "_parse_settings_vlan", "_parse_settings_arp", "_write_file_iface", "_read_file", "_parse_settings_bond_6", "_raise_error_routes", "_parse_settings_bond", "_parse_ethtool_opts", "_parse_settings_eth", "_parse_settings_bond_5", "_parse_settings_bond_3", "_raise_error_network", "_error_msg_network", "len", "_log_default_iface"], "class_names": [], "class_method_calls": ["log.error", "opts6.append", "log.debug", "ret.update", "jinja2.exceptions", "log.info", "os.path", "pattern.format", "vlan.update", "log.warning", "logging.getLogger", "bond.update", "opts.get", "opts.update", "current.items", "jinja2.Environment", "line.strip", "data.splitlines", "i.strip", "ethtool.items", "settings.get", "fp_.write", "bonding.items", "JINJA.get_template", "channels_params.append", "line.split", "opt.split", "lines.remove", "salt.utils", "name.upper", "msg.format", "opts.items", "template.render", "rfh.read", "settings.pop", "k.lower", "iface.strip", "routes.extend", "line.startswith", "opts4.append", "config.update", "p.rstrip", "iface_type.lower", "jinja2.FileSystemLoader"]}, "rh_service.py": {"libraries": ["fnmatch", "glob", "os", "salt.modules.upstart_service._upstart_is_enabled", "salt.modules.upstart_service._upstart_disable", "re", "logging", "stat", "salt.modules.upstart_service._upstart_enable", "salt.utils.path"], "function_names": ["_sysv_services", "_chkconfig_add", "_upstart_services", "_sysv_disable", "enabled", "_service_is_upstart", "_chkconfig_is_enabled", "get_disabled", "status", "_sysv_enable", "enable", "reload_", "delete", "available", "__virtual__", "_runlevel", "_service_is_sysv", "disabled", "restart", "stop", "_service_is_chkconfig", "disable", "_sysv_is_enabled", "_sysv_delete", "start", "get_all", "_upstart_delete", "missing", "get_enabled"], "function_calls": ["_sysv_services", "_chkconfig_add", "_upstart_services", "_sysv_disable", "_upstart_disable", "_service_is_upstart", "_chkconfig_is_enabled", "_sysv_enable", "str", "sorted", "_upstart_enable", "_runlevel", "bool", "_service_is_sysv", "_service_is_chkconfig", "_upstart_is_enabled", "_sysv_is_enabled", "_sysv_delete", "get_all", "_upstart_delete", "len"], "class_names": [], "class_method_calls": ["limit.lower", "logging.getLogger", "log.error", "os.stat", "row.split", "glob.glob", "_services.append", "fnmatch.filter", "line.split", "__grains__.get", "output.splitlines", "stat.S_IXUSR", "log.info", "salt.utils", "os.path", "out.split", "re.search", "os.rename"]}, "riak.py": {"libraries": ["salt.utils.path"], "function_names": ["__execute_cmd", "cluster_commit", "status", "start", "cluster_leave", "test", "cluster_join", "services", "cluster_plan", "stop", "member_status", "__virtual__"], "function_calls": ["__execute_cmd", "len"], "class_names": [], "class_method_calls": ["item.split", "key.strip", "line.split", "line.startswith", "i.split", "salt.utils", "name.strip", "val.strip"]}, "rpm_lowpkg.py": {"libraries": ["os", "salt.utils.itertools", "rpm", "salt.exceptions.CommandExecutionError", "salt.utils.decorators.path", "salt.utils.versions.LooseVersion", "salt.exceptions.SaltInvocationError", "rpmUtils.miscutils", "datetime", "re", "salt.utils.pkg.rpm", "logging", "salt.utils.versions", "salt.utils.path", "rpm_vercmp"], "function_names": ["info", "modified", "normalize", "verify", "diff", "_ensure_epoch", "file_dict", "file_list", "_prepend", "checksum", "version_cmp", "bin_pkg_info", "owner", "list_pkgs", "__virtual__"], "function_calls": ["normalize", "_ensure_epoch", "list", "int", "reversed", "CommandExecutionError", "str", "len", "sorted", "isinstance", "dict", "SaltInvocationError", "_prepend", "bool", "cmp_func", "iter", "next", "LooseVersion", "zip", "getattr"], "class_names": [], "class_method_calls": ["res.startswith", "pkg_name.startswith", "query.append", "descr.append", "changes.append", "log.debug", "cmd.format", "flags.items", "stats.append", "ret.values", "rpmUtils.miscutils", "os.path", "rpm_vercmp.vercmp", "item.strip", "data.items", "log.warning", "pkg_data.copy", "logging.getLogger", "re.split", "pkginfo._fields", "pkg_data.pop", "param.startswith", "cmd.extend", "attr_map.items", "out.splitlines", "kwargs.get", "cmd.append", "_ret.append", "attr.append", "flags.get", "rpm.labelCompare", "line.split", "pkg_info.split", "errors.append", "ptrn.split", "salt.utils", "x.strip", "re.compile", "os.linesep", "datetime.datetime", "pkg_info.strip", "verify_options.split", "ignore_types.split", "flags.pop"]}, "rpmbuild_pkgbuild.py": {"libraries": ["errno", "urllib.parse", "os", "salt.utils.vt", "traceback", "time", "salt.utils.user", "salt.modules.gpg", "salt.exceptions.CommandExecutionError", "salt.utils.files", "gnupg", "salt.exceptions.SaltInvocationError", "functools", "re", "logging", "tempfile", "salt.utils.path", "shutil"], "function_names": ["build", "_create_rpmmacros", "_get_gpg_key_resources", "_get_src", "_mk_tree", "make_repo", "_get_spec", "_check_repo_gpg_phrase_utils", "_get_deps", "make_src_pkg", "_sign_file", "_sign_files_with_gpg_agent", "_get_distset", "__virtual__"], "function_calls": ["iter", "_create_rpmmacros", "next", "_get_gpg_key_resources", "_get_src", "_mk_tree", "SaltInvocationError", "_get_spec", "_check_repo_gpg_phrase_utils", "_get_deps", "make_src_pkg", "int", "_sign_file", "CommandExecutionError", "_sign_files_with_gpg_agent", "isinstance", "_get_distset"], "class_names": [], "class_method_calls": ["log.error", "SIGN_PROMPT_RE.search", "filename.endswith", "os.listdir", "__grains__.get", "functools.partial", "traceback.format_exc", "os.path", "proc.sendline", "exc.errno", "urllib.parse", "re.M", "logging.getLogger", "proc.close", "local_keys2_keygrip.splitlines", "proc.recv", "time.sleep", "proc.has_unread_data", "errno.EEXIST", "proc.exitstatus", "shutil.copy", "sources.split", "parsed.scheme", "tempfile.mkdtemp", "deps_list.isspace", "ret.setdefault", "ret.append", "shutil.rmtree", "fileused.endswith", "afile.write", "tgt.split", "salt.utils", "re.compile", "line.startswith"]}, "rsync.py": {"libraries": ["os", "salt.utils.path", "logging"], "function_names": ["_get_summary", "_get_changes", "synchronized", "__virtual__"], "function_calls": ["_get_summary", "_get_changes", "sorted", "list"], "class_names": [], "class_method_calls": ["logging.getLogger", "os.makedirs", "os.linesep", "rsync_out.split", "deleted.append", "line.split", "line.startswith", "result.get", "salt.utils", "os.path", "copied.append"]}, "runit.py": {"libraries": ["glob", "os", "time", "salt.exceptions.CommandExecutionError", "salt.utils.files", "logging", "salt.utils.path"], "function_names": ["_service_path", "get_svc_alias", "_get_svc_list", "enabled", "get_svc_broken_path", "get_disabled", "status", "enable", "reload_", "available", "show", "add_svc_avail_path", "__virtual__", "remove", "full_restart", "status_autostart", "disabled", "restart", "stop", "disable", "_is_svc", "start", "get_all", "missing", "get_enabled", "get_svc_avail_path", "_get_svc_path"], "function_calls": ["status", "_service_path", "status_autostart", "_is_svc", "get_svc_alias", "bool", "_get_svc_path", "available", "enabled", "restart", "sorted", "CommandExecutionError", "set", "stop", "add_svc_avail_path", "_get_svc_list"], "class_names": [], "class_method_calls": ["log.error", "__grains__.get", "os.path", "ret.add", "os.access", "ava.difference", "AVAIL_SVR_DIRS.append", "logging.getLogger", "time.sleep", "ava.union", "log.trace", "os.X_OK", "ava.add", "ena.add", "os.readlink", "out.startswith", "salt.utils", "os.symlink", "os.unlink", "glob.glob", "os.remove"]}, "rvm.py": {"libraries": ["re"], "function_names": ["_check_rvm", "gemset_present", "_check_and_install_ruby", "installed", "_check_ruby"], "function_calls": ["_check_and_install_ruby", "_check_rvm", "_check_ruby"], "class_names": [], "class_method_calls": ["micro_version_regex.search", "re.compile", "name.split", "micro_version_regex.sub", "re.sub", "re.search"]}, "s3.py": {"libraries": ["xml.etree.ElementTree", "requests", "salt.exceptions.CommandExecutionError", "salt.utils.aws", "salt.utils.files", "logging", "salt.utils.hashutils", "salt.utils.xmlutil", "urllib.parse"], "function_names": ["query"], "function_calls": ["CommandExecutionError", "dict", "type", "str"], "class_names": [], "class_method_calls": ["result.content", "log.error", "result.status_code", "log.debug", "ET.ParseError", "result.headers", "header.strip", "urllib.parse", "logging.getLogger", "result.iter_content", "out.write", "xml.to_dict", "fh.read", "requests.codes", "ret.append", "requests.request", "salt.utils", "fh.close", "ET.fromstring"]}, "s6.py": {"libraries": ["os", "re", "salt.exceptions.CommandExecutionError"], "function_names": ["full_restart", "status", "_service_path", "reload_", "start", "available", "restart", "get_all", "term", "missing", "stop"], "function_calls": ["_service_path", "get_all", "restart", "sorted", "CommandExecutionError"], "class_names": [], "class_method_calls": ["os.listdir", "dirname.startswith", "os.path", "re.search"]}, "salt_version.py": {"libraries": ["salt.utils.versions", "salt.version", "salt.exceptions.CommandExecutionError", "logging"], "function_names": ["greater_than", "get_release_number", "equal", "_check_release_cmp", "less_than", "__virtual__"], "function_calls": ["str", "get_release_number", "_check_release_cmp", "CommandExecutionError", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.version", "version_map.get", "name.lower", "current_version.rsplit", "log.info", "salt.utils"]}, "saltcloudmod.py": {"libraries": ["salt.utils.json", "salt.utils.data", "saltcloud"], "function_names": ["create", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils"]}, "saltutil.py": {"libraries": ["logging"], "function_names": ["sync_utils", "sync_states", "sync_serializers", "sync_executors", "sync_returners", "sync_outputters", "__virtual__", "sync_pillar", "sync_thorium", "sync_grains", "sync_matchers", "sync_sdb", "sync_tops", "sync_renderers", "sync_log_handlers", "_sync_single", "sync_output", "sync_beacons", "sync_all", "sync_clouds", "sync_modules", "sync_engines", "sync_proxymodules", "sync_wrapper"], "function_calls": ["_sync_single"], "class_names": [], "class_method_calls": ["sync_status.items", "logging.getLogger", "log.error"]}, "schedule.py": {"libraries": ["dateutil.parser", "salt.utils.user", "salt.utils.files", "datetime", "salt.payload", "logging", "salt.utils.minion", "salt.utils.stringutils", "salt.utils.event", "salt.exceptions.SaltInvocationError", "salt.utils.error", "itertools", "signal", "copy", "sys", "os", "time", "salt.utils.process", "salt.utils.jid", "salt.loader", "salt.minion", "salt.syspaths", "croniter", "salt.defaults.exitcodes", "errno", "salt.exceptions", "threading", "random", "salt.utils.odict.OrderedDict", "salt.utils.platform", "salt.config", "salt.utils.args", "weakref", "salt.utils.master", "salt.utils.yaml"], "function_names": ["__singleton_init__", "_handle_once", "clean_proc_dir", "persist", "postpone_job", "list", "disable_job", "get_next_fire_time", "_chop_ms", "handle_func", "reset", "_get_schedule", "cleanup_subprocesses", "disable_schedule", "_handle_range", "reload", "__getnewargs__", "__new__", "option", "enable_job", "_handle_when", "_handle_skip_during_range", "modify_job", "job_status", "skip_job", "_handle_until", "_handle_skip_explicit", "delete_job_prefix", "delete_job", "_handle_cron", "_handle_time_elements", "enable_schedule", "_handle_run_explicit", "eval", "run_job", "save_schedule", "add_job", "_splay", "_handle_after", "_check_max_running", "_run_job", "__init__"], "function_calls": ["any", "type", "_handle_once", "clean_proc_dir", "list", "int", "_chop_ms", "_handle_range", "hasattr", "_handle_when", "_handle_skip_during_range", "isinstance", "_handle_until", "SaltInvocationError", "_handle_skip_explicit", "bool", "thread_cls", "_handle_time_elements", "_handle_cron", "_handle_run_explicit", "ValueError", "abs", "iter", "next", "_splay", "_handle_after", "tuple", "len", "set"], "class_names": ["Schedule"], "class_method_calls": ["jids.append", "dt.microsecond", "self.time_offset", "evt.fire_event", "logging.getLogger", "instance.__singleton_init__", "completed_funcs.append", "os.makedirs", "self.loop_interval", "itertools.chain", "self.intervals", "argspec.keywords", "_when.append", "signal.SIGTERM", "datetime.datetime", "self.splay", "time.ctime", "object.__new__", "log.exception", "datetime.timedelta", "mod_name.split", "log.info", "salt.payload", "schedule.items", "log.warning", "self.handle_func", "time.gmtime", "self.skip_during_range", "errno.EEXIST", "fp_.write", "self.opts", "salt.minion", "returners.loader", "sys.maxsize", "self.delete_job", "self.skip_function", "logging.DEBUG", "log.error", "time.strftime", "self.schedule_returner", "sys.exit", "item.startswith", "self.standalone", "_skip_explicit.remove", "self.persist", "os.getpid", "self.proxy", "exc.errno", "rets.extend", "func_globals.items", "dateutil_parser.parse", "job.startswith", "namespaced_event.destroy", "event.destroy", "_run_explicit.remove", "self.enabled", "fp_.close", "log.trace", "croniter.croniter", "threading.Thread", "self.utils", "salt.syspaths", "random.randint", "schedule.update", "errno.ENOENT", "salt.defaults", "data.get", "self.delete_job_prefix", "_next_fire_time.strftime", "salt.config", "rets.append", "itertools.combinations", "_when.sort", "copy.copy", "self._get_schedule", "log.debug", "os.listdir", "os.path", "cls.instance", "invalid_time_combos.append", "ret.items", "weakref.proxy", "self_functions.keys", "self.functions", "_skip_explicit.append", "copy.deepcopy", "self._run_job", "mret.items", "event.fire_event", "self.returners", "schedule.get", "salt.loader", "self.option", "salt.utils", "self._subprocess_list", "os.unlink", "proc.start", "ret.copy", "data.keys", "self._check_max_running", "OrderedDict.fromkeys", "_when.remove", "_run_explicit.append", "signal.SIGINT"]}, "scp_mod.py": {"libraries": ["paramiko", "scp", "logging"], "function_names": ["_select_kwargs", "__virtual__", "_prepare_connection", "get", "put"], "function_calls": ["_prepare_connection", "_select_kwargs", "isinstance"], "class_names": [], "class_method_calls": ["ssh.connect", "logging.getLogger", "paramiko_args.append", "kwargs.items", "scp.SCPClient", "scp_client.put", "paramiko_kwargs.pop", "ssh.get_transport", "paramiko.AutoAddPolicy", "paramiko.SSHClient", "scp_client.get", "scp_args.pop", "cached_files.append", "ssh.set_missing_host_key_policy"]}, "scsi.py": {"libraries": ["salt.utils.path", "os.path", "logging"], "function_names": ["rescan_all", "ls_"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "majmin.startswith", "line.strip", "line.startswith", "data.splitlines", "os.path", "salt.utils", "res.get", "key.replace", "majmin.replace", "comps.pop"]}, "sdb.py": {"libraries": ["random", "salt.exceptions.SaltInvocationError", "salt.loader"], "function_names": ["sdb_set", "sdb_delete", "sdb_get_or_set_hash", "sdb_get"], "function_calls": ["range", "sdb_get", "SaltInvocationError", "sdb_set", "len", "isinstance"], "class_names": [], "class_method_calls": ["uri.startswith", "uri.find", "opts.get", "salt.loader", "random.SystemRandom"]}, "seed.py": {"libraries": ["os", "salt.crypt", "salt.utils.files", "salt.syspaths", "salt.config", "uuid", "logging", "tempfile", "salt.utils.cloud", "shutil"], "function_names": ["_umount", "_file_or_content", "apply_", "_install", "_check_install", "_mount", "prep_bootstrap", "mkconfig", "_check_resolv"], "function_calls": ["_umount", "_file_or_content", "_install", "_check_install", "_mount", "prep_bootstrap", "mkconfig", "_check_resolv"], "class_names": [], "class_method_calls": ["os.rmdir", "log.error", "log.debug", "log.info", "os.path", "log.warning", "logging.getLogger", "fpd_.replace", "fp_.read", "shutil.copy", "os.makedirs", "tempfile.mkdtemp", "fp_.write", "salt.syspaths", "salt.utils", "fic.read", "os.rename", "salt.crypt", "pki_dir.lstrip", "salt.config", "fic.write", "os.chmod", "uuid.uuid4"]}, "selinux.py": {"libraries": [], "function_names": ["module_remove", "fcontext_policy_absent", "_refine_mode", "module_install", "port_policy_present", "_refine_module_state", "boolean", "module", "mode", "port_policy_absent", "fcontext_policy_applied", "fcontext_policy_present", "_refine_value", "__virtual__"], "function_calls": ["any", "module_remove", "_refine_mode", "module_install", "_refine_module_state", "str", "_refine_value"], "class_names": [], "class_method_calls": ["opts.get", "ret.update", "apply_ret.get", "new_state.update", "mode.startswith", "old_state.update"]}, "sensors.py": {"libraries": ["salt.utils.path", "logging"], "function_names": ["sense", "__virtual__"], "function_calls": ["len"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils", "sensor.split"]}, "serverdensity_device.py": {"libraries": ["salt.utils.json", "logging"], "function_names": ["monitored", "_get_salt_params"], "function_calls": ["str", "int", "_get_salt_params"], "class_names": [], "class_method_calls": ["params_from_salt.pop", "logging.getLogger", "params.items", "salt.utils"]}, "servicenow.py": {"libraries": ["servicenow_rest.api.Client", "logging"], "function_names": ["delete_record", "non_structured_query", "update_record_field", "_get_client", "set_change_request_state", "__virtual__"], "function_calls": ["_get_client", "Client", "str"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "client.table", "kwargs.items", "client.delete", "client.get", "query_parts.append", "client.update"]}, "slack_notify.py": {"libraries": ["salt.utils.slack", "salt.utils.json", "salt.exceptions.SaltInvocationError", "logging", "urllib.parse"], "function_names": ["post_message", "list_users", "find_room", "_get_hook_id", "call_hook", "list_rooms", "find_user", "_get_api_key", "__virtual__"], "function_calls": ["list_users", "_get_hook_id", "SaltInvocationError", "list_rooms", "_get_api_key"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "name.startswith", "channel.startswith", "result.get", "salt.utils", "log.warning", "urllib.parse"]}, "slackware_service.py": {"libraries": ["fnmatch", "glob", "os", "re"], "function_names": ["enabled", "_rcd_mode", "get_disabled", "status", "enable", "reload_", "force_reload", "available", "__virtual__", "disabled", "restart", "stop", "disable", "start", "_get_svc", "get_all", "missing", "get_enabled", "_get_svc_list"], "function_calls": ["bool", "get_all", "sorted", "_rcd_mode", "_get_svc", "set", "_get_svc_list"], "class_names": [], "class_method_calls": ["os.stat", "re.compile", "os.X_OK", "glob.glob", "ret.add", "fnmatch.filter", "os.path", "notservice.match", "os.chmod", "rcd.split", "os.access", "re.search"]}, "smartos_nictagadm.py": {"libraries": ["salt.utils.platform", "salt.utils.path", "logging"], "function_names": ["update", "exists", "vms", "delete", "add", "list_nictags", "__virtual__"], "function_calls": ["list_nictags"], "class_names": [], "class_method_calls": ["logging.getLogger", "header.index", "mac.replace", "nictag.split", "salt.utils", "kwargs.get"]}, "smartos_virt.py": {"libraries": ["salt.utils.platform", "salt.exceptions.CommandExecutionError", "salt.utils.path", "logging"], "function_names": ["list_active_vms", "shutdown", "get_macs", "list_domains", "start", "reboot", "setmem", "stop", "vm_virt_type", "init", "list_inactive_vms", "vm_info", "__virtual__"], "function_calls": ["vm_virt_type", "list_active_vms", "list_inactive_vms", "CommandExecutionError"], "class_names": [], "class_method_calls": ["logging.getLogger", "macs.append", "vms.append", "vm.ljust", "salt.utils", "log.warning"]}, "smbios.py": {"libraries": ["salt.modules.cmdmod", "re", "uuid", "logging", "salt.utils.path"], "function_names": ["_dmi_isclean", "records", "_dmi_data", "_dmidecoder", "_dmi_cast", "_dmi_parse", "get", "__virtual__"], "function_calls": ["_dmi_isclean", "iter", "range", "_dmidecoder", "bool", "int", "zip", "_dmi_cast", "_dmi_parse", "_dmi_data"], "class_names": [], "class_method_calls": ["val.split", "val.startswith", "log.debug", "dmi_raw.split", "val.replace", "re.search", "re.MULTILINE", "logging.getLogger", "re.split", "key.strip", "hline.split", "line.strip", "log.trace", "handle.split", "el.strip", "line.split", "re.match", "salt.utils", "re.IGNORECASE", "val.strip", "re.compile", "v.startswith", "uuid.UUID", "salt.modules", "dmi_raw.pop", "vlist.insert", "dmi.append"]}, "smf_service.py": {"libraries": ["fnmatch", "re"], "function_names": ["disable", "get_disabled", "get_stopped", "status", "enable", "reload_", "start", "missing", "disabled", "available", "_get_enabled_disabled", "get_all", "restart", "enabled", "get_running", "get_enabled", "stop", "__virtual__"], "function_calls": ["bool", "start", "_get_enabled_disabled", "get_all", "sorted", "enabled", "set"], "class_names": [], "class_method_calls": ["fnmatch.filter", "ret.add", "re.search", "line.split"]}, "smtp.py": {"libraries": ["os", "email.utils.formatdate", "smtplib", "gnupg", "logging"], "function_names": ["send"], "function_calls": ["str", "formatdate", "int"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "server.quit", "server.sendmail", "opts.get", "encrypted_data.stderr", "log.debug", "encrypted_data.status", "encrypted_data.ok", "gnupg.GPG", "smtplib.SMTP", "gpg.encrypt", "server.starttls", "server.login", "os.path", "config.update"]}, "snapper.py": {"libraries": ["os"], "function_names": ["baseline_snapshot", "_get_baseline_from_tag", "__virtual__"], "function_calls": ["_get_baseline_from_tag", "len"], "class_names": [], "class_method_calls": ["ret.update", "target_file.startswith", "status.pop", "os.path", "status.keys"]}, "solaris_fmadm.py": {"libraries": ["salt.utils.decorators", "salt.utils.odict.OrderedDict", "salt.utils.platform", "logging", "salt.utils.path"], "function_names": ["_merge_data", "repaired", "acquit", "reset", "load", "unload", "_check_fmadm", "healthy", "show", "config", "list_records", "__virtual__", "replaced", "_parse_fmadm_config", "_parse_fmdump", "_check_fmdump", "faulty", "_parse_fmdump_verbose", "flush", "_fmadm_action_fmri", "_parse_fmadm_faulty"], "function_calls": ["_parse_fmadm_faulty", "_fmadm_action_fmri", "_check_fmadm", "_check_fmdump", "_merge_data", "faulty", "OrderedDict", "len", "_parse_fmdump_verbose", "_parse_fmadm_config", "_parse_fmdump"], "class_names": [], "class_method_calls": ["logging.getLogger", "decorators.memoize", "output.split", "result.append", "fault.append", "line.strip", "header.index", "result.update", "line.startswith", "line.split", "salt.utils", "summary.append", "entry.split"]}, "solaris_group.py": {"libraries": ["grp", "salt.utils.data", "logging"], "function_names": ["getent", "info", "delete", "chgid", "add", "__virtual__"], "function_calls": ["info"], "class_names": [], "class_method_calls": ["logging.getLogger", "grp.getgrnam", "kwargs.pop", "grp.getgrall", "grinfo.gr_passwd", "grinfo.gr_name", "ret.append", "grinfo.gr_gid", "salt.utils", "log.warning", "grinfo.gr_mem"]}, "solaris_shadow.py": {"libraries": ["os", "salt.exceptions.CommandExecutionError", "salt.utils.files", "spwd", "pwd", "salt.utils.pycrypto"], "function_names": ["info", "set_maxdays", "default_hash", "del_password", "set_password", "gen_password", "set_warndays", "set_mindays", "__virtual__"], "function_calls": ["CommandExecutionError", "info", "int", "len"], "class_names": [], "class_method_calls": ["data.sp_expire", "lines.append", "data.sp_pwd", "data.sp_max", "ret.update", "__grains__.get", "data.sp_min", "data.sp_lstchg", "data.sp_inact", "data.sp_nam", "line.strip", "data.sp_warn", "os.path", "salt.utils", "ofile.writelines", "pwd.getpwnam", "data.pw_name", "spwd.getspnam"]}, "solaris_system.py": {"libraries": ["salt.utils.platform", "salt.utils.path"], "function_names": ["halt", "shutdown", "reboot", "init", "poweroff", "__virtual__"], "function_calls": ["shutdown"], "class_names": [], "class_method_calls": ["salt.utils", "cmd.append"]}, "solaris_user.py": {"libraries": ["salt.utils.user", "pwd", "salt.exceptions.CommandExecutionError", "logging", "salt.utils.data", "copy"], "function_names": ["chhome", "list_users", "chgroups", "chworkphone", "chhomephone", "rename", "getent", "_build_gecos", "delete", "_update_gecos", "chuid", "add", "chshell", "__virtual__", "chfullname", "info", "list_groups", "chgid", "_get_gecos", "chroomnumber"], "function_calls": ["chroomnumber", "info", "chfullname", "chworkphone", "_build_gecos", "str", "list_groups", "_update_gecos", "_get_gecos", "sorted", "len", "CommandExecutionError", "set", "chhomephone", "isinstance"], "class_names": [], "class_method_calls": ["kwargs.pop", "groups.update", "pwd.getpwall", "groups.split", "data.pw_dir", "data.pw_gid", "log.warning", "logging.getLogger", "copy.deepcopy", "data.pw_uid", "cmd.extend", "gecos_field.append", "pwd.getpwnam", "gecos_dict.get", "cmd.append", "data.pw_shell", "ret.append", "salt.utils", "data.pw_passwd", "user.pw_name", "data.pw_gecos", "data.pw_name"]}, "solarisipspkg.py": {"libraries": ["salt.utils.pkg", "salt.exceptions.CommandExecutionError", "salt.utils.functools", "copy", "logging", "salt.utils.data", "salt.utils.path"], "function_names": ["remove", "upgrade_available", "refresh_db", "_list_pkgs_from_context", "upgrade", "_ips_get_pkgversion", "get_fmri", "_ips_get_pkgname", "latest_version", "normalize_name", "install", "is_installed", "list_upgrades", "purge", "version", "search", "list_pkgs", "__virtual__"], "function_calls": ["any", "remove", "refresh_db", "next", "iter", "_list_pkgs_from_context", "_ips_get_pkgversion", "_ips_get_pkgname", "getattr", "list", "len", "version", "CommandExecutionError", "float", "isinstance", "list_pkgs", "is_installed"], "class_names": [], "class_method_calls": ["logging.getLogger", "__context__.pop", "name.startswith", "pkg.items", "log.debug", "pkg2inst.append", "copy.deepcopy", "ret.append", "line.split", "ret.values", "cmd.extend", "salt.utils", "kwargs.get", "cmd.append"]}, "solarispkg.py": {"libraries": ["os", "salt.exceptions.MinionError", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.utils.functools", "logging", "salt.utils.data", "copy"], "function_names": ["remove", "upgrade_available", "_list_pkgs_from_context", "_write_adminfile", "install", "version", "list_pkgs", "purge", "_write_line", "latest_version", "__virtual__"], "function_calls": ["any", "remove", "_list_pkgs_from_context", "_write_adminfile", "latest_version", "enumerate", "len", "CommandExecutionError", "float", "_write_line", "list_pkgs"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "kwargs.pop", "__context__.pop", "fp_.write", "copy.deepcopy", "line.split", "cmd_prefix.append", "os.remove", "errors.append", "salt.utils", "kwargs.get", "log.warning"]}, "solr.py": {"libraries": ["salt.utils.json", "urllib.request", "os", "salt.utils.path"], "function_names": ["_checks", "set_is_polling", "core_status", "reload_import_config", "_get_none_or_value", "lucene_version", "_replication_request", "full_import", "_auth", "import_status", "_get_return_dict", "_update_return_dict", "signal", "_is_master", "__virtual__", "abort_import", "_match", "match_index_versions", "backup", "_check_for_cores", "replication_details", "_merge_options", "_http_request", "version", "_get_admin_info", "delta_import", "optimize", "_find_value", "reload_core", "_format_url", "_pre_index_check", "set_replication_enabled", "ping", "is_replication_enabled"], "function_calls": ["_checks", "_get_none_or_value", "_replication_request", "_auth", "str", "import_status", "_get_return_dict", "len", "_update_return_dict", "isinstance", "_is_master", "_match", "_check_for_cores", "_merge_options", "_http_request", "_pre_index_check", "_get_admin_info", "_find_value", "reload_core", "_format_url", "set_is_polling", "set_replication_enabled"], "class_names": [], "class_method_calls": ["ret_dict.items", "urllib.request", "versions.update", "params.append", "defaults.update", "extra.append", "digest.add_password", "basic.add_password", "ret.update", "ret.append", "path.endswith", "salt.utils", "os.path", "defaults.items", "options.items", "value.lower"]}, "solrcloud.py": {"libraries": ["salt.utils.json"], "function_names": ["alias", "collection"], "function_calls": ["set", "len"], "class_names": [], "class_method_calls": ["options.items", "salt.utils"]}, "splunk.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["set", "isinstance", "list"], "class_names": [], "class_method_calls": ["target.get", "result.get", "kwargs.get"]}, "splunk_search.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["dict"], "class_names": [], "class_method_calls": ["target.content", "old_content.get"]}, "sqlite3.py": {"libraries": ["sqlite3"], "function_names": ["_dict_factory", "row_present", "_get_sql_from_schema", "row_absent", "_query", "table_absent", "table_present", "__virtual__"], "function_calls": ["_get_sql_from_schema", "enumerate", "str", "len", "_query", "isinstance"], "class_names": [], "class_method_calls": ["sqlite3.connect", "columns.append", "params.append", "conn.execute", "conn.close", "cursor.fetchall", "schema.strip", "values.append", "sqlite3.PARSE_DECLTYPES", "cursor.description", "value_stmt.append", "conn.row_factory", "conn.commit", "cursor.rowcount", "data.items"]}, "ssh_pkg.py": {"libraries": ["salt.utils.platform", "logging"], "function_names": ["remove", "install", "list_pkgs", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "ssh_service.py": {"libraries": ["fnmatch", "salt.utils.platform", "re", "logging"], "function_names": ["list_", "status", "running", "start", "enabled", "get_all", "restart", "stop", "__virtual__"], "function_calls": ["get_all", "bool", "status"], "class_names": [], "class_method_calls": ["salt.utils", "logging.getLogger", "fnmatch.filter", "re.search"]}, "statuspage.py": {"libraries": ["time", "logging"], "function_names": ["update", "managed", "_update_on_fields", "_compute_diff_ret", "_compute_diff", "_clear_ignore_list", "_unique", "_clear_ignore", "_find_match", "delete", "_default_ret", "_clear_dict", "create", "_ignore_keys", "__virtual__"], "function_calls": ["_update_on_fields", "_compute_diff_ret", "_compute_diff", "_clear_ignore_list", "_unique", "_clear_ignore", "_find_match", "_default_ret", "len", "set"], "class_names": [], "class_method_calls": ["log.error", "sp_delete.get", "complete_diff.items", "karg.startswith", "log.debug", "update_endpoint.pop", "ret.update", "new_ele.items", "adding.get", "sp_update.get", "remove_endpoint.pop", "ele.get", "config.items", "logging.getLogger", "fields_update.keys", "time.sleep", "updating.get", "endpoint_diff.get", "endpoint_props.items", "sp_create.get", "new_endpoints.append", "prev_ele.get", "unique_list.append", "new_ele.get", "update_endpoints.append", "__opts__.get", "remove_endpoints.append", "kwargs.items", "endpoint_existing_config_ret.get", "_ele.get", "removing.get"]}, "supervisord.py": {"libraries": ["logging"], "function_names": ["running", "mod_watch", "dead", "_check_error", "_is_stopped_state"], "function_calls": ["any", "running", "bool", "list", "str", "sorted", "len", "set", "_check_error", "_is_stopped_state"], "class_names": [], "class_method_calls": ["logging.getLogger", "process_groups.append", "changes.append", "log.debug", "matches.items", "ret.update", "proc.startswith", "proc.index", "x.startswith", "name.endswith", "process_groups.add"]}, "suse_apache.py": {"libraries": ["salt.utils.path", "logging"], "function_names": ["check_mod_enabled", "a2enmod", "a2dismod", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "mod.endswith", "salt.utils"]}, "suse_ip.py": {"libraries": ["os", "salt.utils.stringutils", "jinja2", "salt.utils.validate.net", "salt.exceptions.CommandExecutionError", "salt.utils.files", "jinja2.exceptions", "salt.utils.templates", "logging"], "function_names": ["_parse_settings_bond_0", "_raise_error_iface", "_write_file_network", "_parse_routes", "_parse_settings_bond_2", "_parse_settings_bond_1", "_error_msg_routes", "_parse_settings_bond_4", "_parse_suse_config", "_get_non_blank_lines", "down", "build_routes", "get_interface", "_error_msg_iface", "_parse_settings_miimon", "_parse_network_settings", "build_network_settings", "__virtual__", "build_interface", "_log_default_network", "_parse_settings_vlan", "_parse_settings_arp", "_parse_settings_bond_6", "_read_file", "_write_file_iface", "_raise_error_routes", "_parse_settings_bond", "_parse_ethtool_opts", "get_routes", "_parse_settings_eth", "_parse_settings_bond_5", "get_network_settings", "_parse_settings_bond_3", "apply_network_settings", "_raise_error_network", "_error_msg_network", "up", "_log_default_iface"], "function_calls": ["_parse_settings_bond_0", "_write_file_network", "_raise_error_iface", "range", "_parse_routes", "int", "_parse_settings_bond_2", "_parse_settings_bond_1", "_error_msg_routes", "_parse_settings_bond_4", "_parse_suse_config", "_get_non_blank_lines", "str", "AttributeError", "_error_msg_iface", "_parse_settings_miimon", "_parse_network_settings", "isinstance", "_log_default_network", "_parse_settings_vlan", "_parse_settings_arp", "_write_file_iface", "_read_file", "_parse_settings_bond_6", "_raise_error_routes", "_parse_settings_bond", "_parse_ethtool_opts", "_parse_settings_eth", "_parse_settings_bond_5", "_parse_settings_bond_3", "_error_msg_network", "len", "_log_default_iface"], "class_names": [], "class_method_calls": ["log.error", "log.debug", "ret.update", "jinja2.exceptions", "log.info", "os.path", "pattern.format", "vlan.update", "log.warning", "logging.getLogger", "bond.update", "opts.get", "opts.update", "current.items", "jinja2.Environment", "opt.startswith", "line.strip", "data.splitlines", "ethtool.items", "settings.get", "fp_.write", "bonding.items", "JINJA.get_template", "channels_params.append", "line.split", "lines.remove", "salt.utils", "name.upper", "msg.format", "opts.items", "template.render", "rfh.read", "k.lower", "iface.strip", "line.startswith", "config.update", "p.rstrip", "iface_type.lower", "jinja2.FileSystemLoader"]}, "svn.py": {"libraries": ["salt.exceptions", "os", "salt.states.git._neutral_test", "salt.states.git._fail", "logging", "salt.utils.path"], "function_names": ["dirty", "latest", "export", "__virtual__"], "function_calls": ["tuple", "str", "_neutral_test", "_fail"], "class_names": [], "class_method_calls": ["exceptions.CommandExecutionError", "logging.getLogger", "salt.utils", "os.path"]}, "swarm.py": {"libraries": ["salt.utils.json", "docker"], "function_names": ["swarm_init", "leave_swarm", "service_create", "swarm_service_info", "node_ls", "joinswarm", "remove_service", "__init__", "_is_docker_module", "update_node", "swarm_tokens", "remove_node", "__virtual__"], "function_calls": ["str", "_is_docker_module", "all", "swarm_tokens", "hasattr"], "class_names": [], "class_method_calls": ["client.update_node", "docker.APIClient", "client.remove_node", "client.nodes", "docker.from_env", "salt_return.update", "client.inspect_swarm", "docker.types", "salt.utils", "docker.errors", "client.inspect_service", "err.explanation", "client.remove_service"]}, "swift.py": {"libraries": ["sys", "os.path.isdir", "os.makedirs", "salt.utils.files", "swiftclient.client", "os.path.dirname", "logging", "errno.EEXIST"], "function_names": ["put_container", "head_object", "mkdirs", "get_object", "_sanitize", "put_object", "post_object", "delete_container", "__init__", "get_container", "head_container", "post_container", "check_swift", "delete_object", "get_account"], "function_calls": ["makedirs", "dirname", "_sanitize", "mkdirs", "getattr", "str", "isdir", "len", "hasattr"], "class_names": ["SaltSwift"], "class_method_calls": ["self.kwargs", "logging.getLogger", "log.error", "fp.write", "exc.code", "err.errno", "exc.msg", "salt.utils", "fp.close", "client.Connection", "sys.stdout", "kwargs.copy", "self.conn"]}, "sysbench.py": {"libraries": ["re", "salt.utils.path"], "function_names": ["mutex", "threads", "fileio", "_parser", "memory", "cpu", "ping", "__virtual__"], "function_calls": ["_parser", "zip"], "class_names": [], "class_method_calls": ["re.compile", "test_command.format", "mutex_locks.extend", "salt.utils", "per_response_time.group", "re.search"]}, "sysfs.py": {"libraries": ["re"], "function_names": ["present", "__virtual__"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["re.sub"]}, "syslog_ng.py": {"libraries": ["logging"], "function_names": ["stopped", "started", "config", "reloaded"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger"]}, "sysmod.py": {"libraries": ["fnmatch", "salt.runner", "salt.state", "salt.loader", "salt.utils.doc", "salt.utils.schema", "salt.utils.args", "logging"], "function_names": ["doc", "runner_doc", "returner_argspec", "_argspec_to_schema", "list_runners", "list_state_functions", "state_schema", "list_renderers", "__virtual__", "list_modules", "argspec", "returner_doc", "list_functions", "renderer_doc", "state_doc", "reload_modules", "list_returner_functions", "list_runner_functions", "runner_argspec", "state_argspec", "list_returners", "list_state_modules"], "function_calls": ["type", "_argspec_to_schema", "list", "zip", "sorted", "len", "set", "state_argspec", "hasattr"], "class_names": [], "class_method_calls": ["run_.functions", "salt.runner", "log.debug", "func.startswith", "names.add", "salt.state", "renderers.add", "fun.startswith", "logging.getLogger", "func.split", "schemas.append", "runners.add", "module.endswith", "module.split", "returners_.keys", "salt.loader", "fnmatch.filter", "returners.add", "st_.states", "salt.utils", "renderers_.keys", "modules.add", "fun.split", "specs.items"]}, "sysrc.py": {"libraries": [], "function_names": ["absent", "managed", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["current_state.items"]}, "system.py": {"libraries": ["datetime.tzinfo", "datetime.datetime", "salt.utils.decorators.depends", "datetime.timedelta", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.utils.platform", "salt.exceptions.SaltInvocationError", "re", "os.path", "salt.utils.path"], "function_names": ["_strip_quotes", "set_system_time", "get_system_date_time", "set_computer_desc", "has_settable_hwclock", "set_system_date", "get_system_date", "_date_bin_set_datetime", "_offset_to_min", "__virtual__", "tzname", "halt", "shutdown", "reboot", "get_computer_name", "set_reboot_required_witnessed", "utcoffset", "poweroff", "get_computer_desc", "set_system_date_time", "_is_nilrt_family", "set_computer_name", "__init__", "get_system_time", "get_reboot_required_witnessed", "dst", "init", "_get_offset_time", "_try_parse_datetime", "_swclock_to_hwclock"], "function_calls": ["set_system_date_time", "has_settable_hwclock", "super", "_strip_quotes", "_FixedOffset", "SaltInvocationError", "timedelta", "enumerate", "int", "depends", "datetime", "_date_bin_set_datetime", "CommandExecutionError", "_get_offset_time", "_try_parse_datetime", "_offset_to_min", "_swclock_to_hwclock"], "class_names": ["_FixedOffset"], "class_method_calls": ["mach_info.seek", "date_time.tzinfo", "__grains__.get", "dt_obj.year", "date_time.second", "pattern.match", "new_date.utcoffset", "os.path", "dt_obj.day", "ex.errno", "new_date.replace", "dt_obj.minute", "lines.append", "date_time.year", "dt_obj.hour", "self.__offset", "datetime.now", "cmd.append", "dt_obj.month", "os.makedirs", "date_time.day", "date_time.minute", "str_q.startswith", "offset_time.replace", "mach_info.readlines", "re.match", "salt.utils", "date_time.month", "datetime.strftime", "re.compile", "datetime.utcnow", "mach_info.writelines", "date_time.hour", "match.group", "dt_obj.second", "mach_info.truncate", "err.message", "desc.replace", "datetime.strptime", "new_date.timetuple", "ex.strerror"]}, "system_profiler.py": {"libraries": ["plistlib", "subprocess", "salt.utils.path"], "function_names": ["applications", "receipts", "_call_system_profiler", "__virtual__"], "function_calls": ["dict", "_call_system_profiler"], "class_names": [], "class_method_calls": ["details.pop", "plistlib.readPlistFromBytes", "p.communicate", "salt.utils", "subprocess.Popen", "subprocess.PIPE"]}, "systemd_service.py": {"libraries": ["errno", "fnmatch", "os", "glob", "shlex", "salt.utils.systemd", "salt.utils.stringutils", "salt.utils.itertools", "salt.exceptions.CommandExecutionError", "salt.utils.files", "re", "logging", "salt.utils.path"], "function_names": ["_check_available", "_get_sysv_services", "_untracked_custom_unit_found", "_clear_context", "_sysv_enabled", "execs", "_systemctl_status", "enabled", "get_running", "systemctl_reload", "get_disabled", "status", "offline", "enable", "reload_", "masked", "_default_runlevel", "force_reload", "available", "mask", "get_static", "show", "_root", "__virtual__", "firstboot", "_strip_scope", "_check_for_unit_changes", "_runlevel", "_canonical_unit_name", "disabled", "_unit_file_changed", "restart", "stop", "disable", "_get_systemd_services", "_systemctl_cmd", "_get_service_exec", "unmask_", "start", "get_all", "missing", "get_enabled", "_check_unmask"], "function_calls": ["any", "_check_available", "_get_sysv_services", "_untracked_custom_unit_found", "_clear_context", "_sysv_enabled", "list", "_systemctl_status", "enabled", "CommandExecutionError", "systemctl_reload", "offline", "masked", "_default_runlevel", "str", "available", "sorted", "show", "_root", "isinstance", "_strip_scope", "_check_for_unit_changes", "_runlevel", "_canonical_unit_name", "bool", "_unit_file_changed", "_get_systemd_services", "_systemctl_cmd", "unmask_", "_get_service_exec", "get_all", "len", "set", "_check_unmask"], "class_names": [], "class_method_calls": ["__context__.pop", "log.error", "fullname.rsplit", "log.debug", "ret.update", "__grains__.get", "os.listdir", "value.startswith", "line.endswith", "value.replace", "os.path", "ret.extend", "exc.errno", "os.access", "re.search", "ret.add", "logging.getLogger", "line.strip", "msg.splitlines", "cmd.extend", "name.endswith", "log.trace", "service_exec.endswith", "os.X_OK", "unit_state.split", "fnmatch.filter", "ret.append", "line.split", "os.readlink", "re.match", "salt.utils", "errno.ENOENT", "errno.EACCES", "item.split", "glob.glob", "value.split", "shlex.split", "match.group", "exc.strerror", "line.startswith", "key.startswith", "errno.EINVAL", "out.split", "os.R_OK"]}, "telegram.py": {"libraries": ["salt.exceptions.SaltInvocationError", "requests", "logging"], "function_names": ["post_message", "_get_token", "_post_message", "_get_chat_id", "__virtual__"], "function_calls": ["dict", "SaltInvocationError", "_get_token", "_post_message", "_get_chat_id"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "log.exception", "response.json", "log.debug", "result.get", "requests.post"]}, "telemetry.py": {"libraries": ["salt.utils.json", "salt.utils.stringutils", "requests", "logging"], "function_names": ["get_alarms", "_auth", "_get_telemetry_base", "get_notification_channel_id", "_update_cache", "_retrieve_channel_id", "update_alarm", "delete_alarms", "create_alarm", "get_alert_config", "__virtual__"], "function_calls": ["Exception", "_auth", "_get_telemetry_base", "enumerate", "str", "get_notification_channel_id", "_update_cache", "_retrieve_channel_id", "isinstance", "get_alert_config"], "class_names": [], "class_method_calls": ["log.error", "response.status_code", "response.json", "log.debug", "log.info", "requests.post", "logging.getLogger", "alert.get", "response.text", "requests.put", "config.get", "requests.exceptions", "requests.delete", "__context__.get", "salt.utils", "data.get", "requests.get", "_profile.get", "failed_to_delete.append", "notify_channel.find"]}, "temp.py": {"libraries": ["os", "tempfile", "logging"], "function_names": ["file", "dir"], "function_calls": [], "class_names": [], "class_method_calls": ["os.close", "logging.getLogger", "tempfile.mkdtemp", "tempfile.mkstemp"]}, "test_virtual.py": {"libraries": [], "function_names": ["ping", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "testinframod.py": {"libraries": ["salt.utils.stringutils.camel_to_snake_case", "testinfra.modules", "logging"], "function_names": ["_wrap_module_function", "_generate_functions", "_module_function_wrapper", "__virtual__"], "function_calls": ["globals", "_generate_functions", "_wrap_module_function", "func", "camel_to_snake_case"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "__all__.append", "modules.__all__", "modules.modules"]}, "textfsm_mod.py": {"libraries": ["os", "textfsm", "salt.utils.files", "logging", "textfsm.clitable"], "function_names": ["extract", "_clitable_to_dict", "index", "__virtual__"], "function_calls": ["enumerate", "_clitable_to_dict"], "class_names": [], "class_method_calls": ["log.error", "log.debug", "__grains__.get", "clitable.CliTable", "log.info", "os.path", "fsm_handler.header", "logging.getLogger", "textfsm.TextFSMTemplateError", "objs.append", "textfsm_obj.ParseCmd", "__pillar__.get", "tpl_file_handle.read", "clitable.CliTableError", "salt.utils", "textfsm.TextFSM", "__opts__.get", "tpl_file_handle.seek", "fsm_handler.ParseText"]}, "timezone.py": {"libraries": ["salt.exceptions.SaltInvocationError", "salt.exceptions.CommandExecutionError"], "function_names": ["system", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["messages.append"]}, "tls.py": {"libraries": ["datetime", "time", "logging"], "function_names": ["valid_certificate", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "time.time", "datetime.timedelta", "log.error"]}, "tomcat.py": {"libraries": [], "function_names": ["wait", "undeployed", "war_deployed", "mod_watch", "__virtual__"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["un.startswith", "deploy_res.startswith", "msg.startswith", "undeploy.startswith"]}, "trafficserver.py": {"libraries": [], "function_names": ["shutdown", "restart_cluster", "clear_node", "restart_local", "startup", "bounce_cluster", "offline", "zero_cluster", "refresh", "bounce_local", "config", "zero_node", "clear_cluster", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "travisci.py": {"libraries": ["OpenSSL.crypto", "OpenSSL", "base64", "salt.utils.json", "salt.utils.versions.Version", "urllib.parse"], "function_names": ["verify_webhook", "__virtual__"], "function_calls": ["Version"], "class_names": [], "class_method_calls": ["OpenSSL.crypto", "OpenSSL.__version__", "base64.b64decode", "salt.utils", "certificate.set_pubkey", "urllib.parse"]}, "tuned.py": {"libraries": ["salt.exceptions", "salt.modules.tuned.TUNED_OFF_RETURN_NAME"], "function_names": ["profile", "off"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.exceptions"]}, "twilio_notify.py": {"libraries": ["twilio.base.exceptions.TwilioRestException", "twilio.rest.TwilioException", "twilio", "twilio.rest.Client", "twilio.rest.TwilioRestClient", "logging", "twilio.TwilioRestException"], "function_names": ["_get_twilio", "send_sms", "__virtual__"], "function_calls": ["_get_twilio", "TwilioRestClient", "tuple", "int", "str"], "class_names": [], "class_method_calls": ["message.status", "logging.getLogger", "message.num_segments", "message.sid", "exc.status", "client.messages", "twilio.__version_info__", "exc.code", "log.debug", "creds.get", "message.date_sent", "message.price", "log.info", "client.sms", "message.date_created", "exc.msg", "message.price_unit", "message.body"]}, "udev.py": {"libraries": ["salt.modules.cmdmod", "salt.exceptions.CommandExecutionError", "salt.utils.path", "logging"], "function_names": ["info", "_normalize_info", "name", "env", "path", "_parse_udevadm_info", "exportdb", "links", "__virtual__"], "function_calls": ["info", "_normalize_info", "int", "_parse_udevadm_info", "len", "CommandExecutionError", "float"], "class_names": [], "class_method_calls": ["logging.getLogger", "data.strip", "line.strip", "line.split", "salt.modules", "udev_info.splitlines", "salt.utils", "dev.items", "devices.append"]}, "upstart_service.py": {"libraries": ["fnmatch", "glob", "os", "salt.modules.cmdmod", "salt.utils.systemd", "salt.utils.files", "re", "salt.utils.path"], "function_names": ["_upstart_is_disabled", "_iter_service_names", "enabled", "_upstart_disable", "_service_is_upstart", "get_disabled", "status", "_is_symlink", "enable", "reload_", "_default_runlevel", "force_reload", "available", "__virtual__", "_upstart_enable", "full_restart", "_runlevel", "_service_is_sysv", "disabled", "restart", "stop", "disable", "_find_utmp", "_upstart_is_enabled", "_sysv_is_disabled", "_get_service_exec", "_sysv_is_enabled", "start", "get_all", "missing", "get_enabled"], "function_calls": ["_upstart_is_disabled", "_iter_service_names", "_upstart_disable", "_service_is_upstart", "get_disabled", "_default_runlevel", "sorted", "_upstart_enable", "_runlevel", "bool", "_service_is_sysv", "filter", "_find_utmp", "_upstart_is_enabled", "_sysv_is_disabled", "_get_service_exec", "_sysv_is_enabled", "get_all", "set", "get_enabled"], "class_names": [], "class_method_calls": ["ofile.write", "found.add", "os.path", "ret.add", "os.access", "re.search", "re.MULTILINE", "os.stat", "fp_.truncate", "line.strip", "fp_.read", "os.X_OK", "fp_.write", "fnmatch.filter", "line.split", "salt.utils", "os.unlink", "glob.glob", "fp_.seek", "line.startswith", "salt.modules", "re.sub", "out.split", "os.R_OK"]}, "uptime.py": {"libraries": [], "function_names": ["monitored", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["msg.format", "ret.update"]}, "useradd.py": {"libraries": ["os", "salt.utils.path", "salt.utils.stringutils", "salt.utils.user", "pwd", "salt.exceptions.CommandExecutionError", "salt.utils.decorators.path", "salt.utils.files", "functools", "logging", "salt.utils.data", "copy"], "function_names": ["chhome", "list_users", "chgroups", "chworkphone", "_quote_username", "chhomephone", "rename", "get_loginclass", "getent", "_getpwnam", "_build_gecos", "delete", "_update_gecos", "chuid", "add", "chshell", "__virtual__", "chfullname", "info", "_chattrib", "chother", "list_groups", "_which", "chloginclass", "primary_group", "_getpwall", "chgid", "_get_gecos", "_format_info", "chroomnumber"], "function_calls": ["chgroups", "chworkphone", "_quote_username", "int", "chhomephone", "get_loginclass", "CommandExecutionError", "_build_gecos", "str", "_update_gecos", "sorted", "isinstance", "info", "chfullname", "getpwnam", "_chattrib", "chother", "list_groups", "_which", "getpwall", "_get_gecos", "_format_info", "len", "chroomnumber", "set"], "class_names": [], "class_method_calls": ["pwd.getpwall", "log.debug", "pwd.struct_passwd", "functools.partial", "groups.split", "os.path", "data.pw_dir", "data.pw_gid", "log.warning", "logging.getLogger", "copy.deepcopy", "data.pw_uid", "line.strip", "cmd.extend", "gecos_field.append", "pwd.getpwnam", "gecos_dict.get", "cmd.append", "data.pw_shell", "ret.append", "line.split", "salt.utils", "userinfo.splitlines", "data.pw_passwd", "user.pw_name", "data.pw_gecos", "line.startswith", "logging.DEBUG", "data.pw_name"]}, "uwsgi.py": {"libraries": ["salt.utils.json", "salt.utils.path"], "function_names": ["stats", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils"]}, "varnish.py": {"libraries": ["re", "salt.utils.path", "logging"], "function_names": ["ban", "ban_list", "_run_varnishadm", "param_show", "param_set", "version", "purge", "__virtual__"], "function_calls": ["str", "_run_varnishadm", "ban"], "class_names": [], "class_method_calls": ["logging.getLogger", "m.group", "log.debug", "cmd.extend", "salt.utils", "re.search"]}, "vault.py": {"libraries": ["time", "subprocess", "pytestshellutils.utils.processes.ProcessResult", "salt.utils.files", "tests.support.runtests.RUNTIME_VARS", "json", "tests.support.helpers.PatchedEnviron", "pytest", "logging", "salt.utils.path"], "function_names": ["vault_read_secret", "vault_disable_auth_method", "vault_write_policy", "vault_environ", "vault_list_policies", "vault_delete_secret", "vault_container_version", "vault_container_version_id", "vault_read_policy", "vault_enable_auth_method", "vault_write_secret_file", "vault_list", "vault_list_secrets", "_vault_cmd", "vault_delete_policy", "vault_write_secret", "vault_enable_secret_engine", "vault_write_policy_file", "vault_disable_secret_engine"], "function_calls": ["ProcessResult", "vault_write_policy_file", "vault_read_secret", "RuntimeError", "vault_enable_secret_engine", "_vault_cmd", "vault_enable_auth_method", "PatchedEnviron"], "class_names": [], "class_method_calls": ["request.param", "log.debug", "ret.stderr", "pytest.fixture", "salt_factories.get_container", "proc.stdout", "json.dumps", "ret.stdout", "logging.getLogger", "json.loads", "time.sleep", "pytest.fail", "proc.stderr", "subprocess.run", "proc.args", "ret.returncode", "salt.utils", "json.load", "kwargs.items", "proc.returncode", "RUNTIME_VARS.FILES", "factory.started"]}, "vbox_guest.py": {"libraries": ["logging"], "function_names": ["grant_access_to_shared_folders_to", "additions_removed", "additions_installed"], "function_calls": ["bool"], "class_names": [], "class_method_calls": ["logging.getLogger"]}, "vboxmanage.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.utils.files", "re", "os.path", "logging", "salt.utils.path"], "function_names": ["vboxcmd", "create", "destroy", "list_nodes_full", "clonemedium", "register", "start", "list_nodes", "clonevm", "list_items", "unregister", "list_ostypes", "list_nodes_min", "stop", "__virtual__"], "function_calls": ["list_nodes_full", "list_nodes_min", "list_items", "isinstance", "CommandExecutionError", "unregister", "list_ostypes", "vboxcmd"], "class_names": [], "class_method_calls": ["logging.getLogger", "re.compile", "__opts__.get", "os.unlink", "UUID_RE.search", "line.split", "line.strip", "salt.modules", "salt.utils", "os.path", "NAME_RE.search"]}, "victorops.py": {"libraries": [], "function_names": ["create_event", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "virt.py": {"libraries": ["sys", "time", "tests.conftest.CODE_DIR", "uuid", "logging", "pytestshellutils.utils.ports", "attr", "saltfactories.daemons.container.SaltMinion"], "function_names": ["_check_script_path_exists", "_install_salt_in_container", "__attrs_post_init__"], "function_calls": ["str", "super"], "class_names": ["SaltVirtMinionContainerFactory"], "class_method_calls": ["self.libvirt_tls_port", "self._check_script_path_exists", "ports.get_unused_localhost_port", "self.get_script_path", "self.before_start", "self.python_executable", "log.debug", "attr.ib", "self.check_ports", "self._install_salt_in_container", "self.ssh_port", "self.ssh_uri", "ret.stdout", "self.tls_uri", "log.warning", "self.sshd_port", "logging.getLogger", "self.tcp_uri", "self.container_run_kwargs", "time.sleep", "self.container_start_check", "self.host_uuid", "self.uri", "attr.Factory", "self.libvirt_tcp_port", "ret.returncode", "time.time", "self.run", "attr.s", "sys.version_info", "uuid.uuid4"]}, "virtualenv_mod.py": {"libraries": ["os", "salt.version", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "salt.utils.functools", "logging", "salt.utils.versions", "salt.exceptions.CommandNotFoundError"], "function_names": ["managed", "__virtual__"], "function_calls": ["set", "isinstance", "TypeError", "list"], "class_names": [], "class_method_calls": ["logging.getLogger", "requirements.split", "exc.strerror", "ret.update", "requirements.startswith", "salt.utils", "os.path"]}, "vmctl.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError", "re", "logging", "salt.utils.path"], "function_names": ["load", "status", "start", "create_disk", "reset", "stop", "_id_to_name", "reload", "__virtual__"], "function_calls": ["status", "dict", "SaltInvocationError", "list", "int", "zip", "len", "CommandExecutionError", "_id_to_name"], "class_names": [], "class_method_calls": ["logging.getLogger", "x.lower", "vm.pop", "line.split", "re.match", "cmd.extend", "salt.utils", "m.groups", "cmd.append"]}, "vsphere.py": {"libraries": ["pyVmomi.VmomiSupport", "salt.utils.dictdiffer.recursive_diff", "com.vmware.cis.tagging_client.Tag", "datetime", "logging", "salt.utils.decorators.ignores_kwargs", "salt.config.schemas.esxcluster.ESXClusterConfigSchema", "salt.utils.path", "com.vmware.vapi.std.errors_client.AlreadyExists", "com.vmware.cis.tagging_client.CategoryModel", "salt.exceptions.VMwareSaltError", "salt.utils.listdiffer.list_diff", "salt.exceptions.InvalidConfigError", "salt.exceptions.CommandExecutionError", "pyVmomi.vmodl", "salt.exceptions.InvalidEntityError", "salt.utils.dictupdate", "com.vmware.vapi.std.errors_client.Unauthorized", "salt.utils.pbm", "salt.exceptions.VMwareObjectRetrievalError", "sys", "salt.config.schemas.esxi.VmfsDatastoreSchema", "salt.config.schemas.vcenter.VCenterEntitySchema", "com.vmware.cis.tagging_client.Category", "pyVmomi.pbm", "salt.utils.decorators.depends", "com.vmware.vapi.std.errors_client.InvalidArgument", "com.vmware.vcenter_client.Cluster", "com.vmware.cis.tagging_client.TagAssociation", "pyVmomi.vim", "com.vmware.vapi.std_client.DynamicID", "com.vmware.vapi.std.errors_client.Unauthenticated", "salt.utils.vmware", "salt.config.schemas.esxvm.ESXVirtualMachineDeleteSchema", "functools.wraps", "salt.exceptions.ArgumentValueError", "salt.config.schemas.esxcluster.ESXClusterEntitySchema", "com.vmware.cis.tagging_client.TagModel", "salt.config.schemas.esxi.DiskGroupsDiskIdSchema", "salt.exceptions.VMwareApiError", "com.vmware.vapi.std.errors_client.NotFound", "salt.config.schemas.esxi.SimpleHostCacheSchema", "salt.utils.args", "salt.utils.vsan", "salt.config.schemas.esxvm.ESXVirtualMachineUnregisterSchema", "salt.exceptions.VMwareObjectExistsError", "salt.utils.http", "jsonschema"], "function_names": ["create_storage_policy", "_get_host_disks", "power_off_vm", "get_vm_config", "_apply_dvportgroup_out_shaping", "create_tag", "_get_policy_dict", "create_vm", "get_firewall_status", "vmotion_enable", "list_datacenters", "_get_scsi_controller_key", "_get_host_non_ssds", "list_licenses", "_get_dvs_infrastructure_traffic_resources", "_get_capability_definition_dict", "_apply_cpu_config", "list_dvportgroups", "list_default_storage_policy_of_datastore", "_get_dvs_capability", "get_proxy_type", "list_hosts", "_get_device_by_label", "set_coredump_network_config", "assign_license", "_get_esxi_proxy_details", "_gets_service_instance_via_proxy", "list_disk_partitions", "_apply_dvs_capability", "list_assigned_licenses", "_apply_dvportgroup_security_policy", "list_folders", "_create_ide_controllers", "_apply_dvportgroup_config", "list_cluster", "list_resourcepools", "rename_datastore", "upload_ssh_key", "delete_tag", "assign_default_storage_policy_to_datastore", "reset_syslog_config", "_create_adapter_type", "_update_serial_ports", "update_dvportgroup", "list_diskgroups", "set_service_policy", "enable_firewall_ruleset", "list_storage_policies", "_create_cd_drives", "coredump_network_enable", "create_cluster", "_apply_dvs_product_info", "_create_network_adapters", "_get_esxcluster_proxy_details", "list_clusters", "esxcli_cmd", "_update_disks", "list_disks", "configure_host_cache", "_apply_dvs_network_resource_pools", "vsan_add_disks", "_apply_cluster_dict", "vmotion_disable", "_apply_hard_disk", "get_vmotion_enabled", "_update_cd_drives", "list_tag_categories", "get_ntp_config", "create_diskgroup", "_remove_vm", "delete_vm", "syslog_service_reload", "_get_dvs_link_discovery_protocol", "_create_disks", "create_tag_category", "_set_network_adapter_mapping", "wrapped", "_apply_sata_controller_config", "set_syslog_config", "list_networks", "service_stop", "_apply_dvs_link_discovery_protocol", "unregister_vm", "list_datacenters_via_proxy", "_delete_advanced_config", "_apply_cd_drive", "__supports_proxies_", "list_dvss", "attach_tag", "vsan_enable", "_get_dvportgroup_security_policy", "update_storage_policy", "list_ssds", "_get_cluster_dict", "_create_scsi_devices", "_get_host_ssds", "update_dvs", "erase_disk_partitions", "list_default_vsan_policy", "remove_datastore", "_create_serial_ports", "_convert_units", "_update_scsi_devices", "system_info", "get_vm", "_delete_device", "disconnect", "_set_syslog_config_helper", "_get_device_by_key", "_get_dvportgroup_out_shaping", "_get_host_ref", "list_datastores_via_proxy", "_apply_ide_controller_config", "_apply_hardware_version", "_update_network_adapters", "_get_proxy_connection_details", "get_service_instance_via_proxy", "get_ssh_key", "list_tags", "_apply_dvportgroup_teaming", "remove_dvportgroup", "_get_entity", "add_host_to_dvs", "_format_firewall_stdout", "delete_advanced_configs", "_gets_service_instance_via_proxy_", "_apply_network_adapter_config", "list_capability_definitions", "get_service_policy", "get_host_datetime", "compare_vm_configs", "list_uplink_dvportgroup", "_format_syslog_config", "test_vcenter_connection", "remove_diskgroup", "_format_coredump_stdout", "create_datacenter", "update_host_datetime", "list_datastore_clusters", "get_vsan_eligible_disks", "list_attached_tags", "_get_dvs_config_dict", "_apply_policy_config", "_get_date_time_mgr", "service_start", "service_restart", "_deprecation_message", "list_dvs", "get_vsan_enabled", "create_dvportgroup", "_check_hosts", "_get_service_manager", "get_advanced_configs", "_apply_dvs_config", "_get_dvportgroup_teaming", "_get_proxy_target", "_get_dvs_product_info", "_apply_scsi_controller", "_apply_dvs_infrastructure_traffic_resources", "delete_tag_category", "add_capacity_to_diskgroup", "_reset_syslog_config_params", "list_datastores", "_validate_entity", "_apply_advanced_config", "_apply_memory_config", "_get_client", "get_vm_config_file", "__virtual__", "list_vms", "update_cluster", "get_host_cache", "register_vm", "power_on_vm", "get_service_running", "_get_esxdatacenter_proxy_details", "vsan_disable", "update_host_password", "add_license", "list_hosts_via_proxy", "list_non_ssds", "create_dvs", "set_advanced_configs", "_apply_serial_port", "create_vmfs_datastore", "_get_vsan_eligible_disks", "get_syslog_config", "remove_capacity_from_diskgroup", "_create_network_backing", "get_coredump_network_config", "_supports_proxies", "update_vm", "set_ntp_config", "_supports_proxies_", "_create_sata_controllers", "_get_dvportgroup_dict", "list_vapps"], "function_calls": ["_get_host_disks", "power_off_vm", "get_vm_config", "_apply_dvportgroup_out_shaping", "_get_policy_dict", "InvalidEntityError", "float", "VMwareObjectExistsError", "_get_scsi_controller_key", "_get_host_non_ssds", "_get_dvs_infrastructure_traffic_resources", "_get_capability_definition_dict", "bool", "_apply_cpu_config", "recursive_diff", "_get_dvs_capability", "get_proxy_type", "_get_device_by_label", "set", "_apply_dvs_capability", "_apply_dvportgroup_security_policy", "_create_ide_controllers", "_apply_dvportgroup_config", "list_diff", "list", "CommandExecutionError", "_create_adapter_type", "hasattr", "_update_serial_ports", "enable_firewall_ruleset", "_create_cd_drives", "_apply_dvs_product_info", "_create_network_adapters", "_get_esxcluster_proxy_details", "_update_disks", "_apply_cluster_dict", "_apply_hard_disk", "_update_cd_drives", "_remove_vm", "syslog_service_reload", "_get_dvs_link_discovery_protocol", "_create_disks", "_set_network_adapter_mapping", "function", "_apply_sata_controller_config", "abs", "setattr", "tuple", "_apply_dvs_link_discovery_protocol", "zip", "_delete_advanced_config", "_apply_cd_drive", "_get_dvportgroup_security_policy", "type", "_get_cluster_dict", "_create_scsi_devices", "_get_host_ssds", "_create_serial_ports", "_convert_units", "_update_scsi_devices", "_delete_device", "_set_syslog_config_helper", "_get_device_by_key", "_get_host_ref", "_get_dvportgroup_out_shaping", "_apply_ide_controller_config", "_apply_hardware_version", "_update_network_adapters", "_get_proxy_connection_details", "_apply_dvportgroup_teaming", "_get_entity", "_format_firewall_stdout", "_apply_network_adapter_config", "compare_vm_configs", "_format_syslog_config", "ImportError", "_format_coredump_stdout", "getattr", "range", "_apply_policy_config", "_get_dvs_config_dict", "VMwareObjectRetrievalError", "_get_date_time_mgr", "int", "_check_hosts", "_get_service_manager", "_apply_dvs_config", "_get_proxy_target", "DynamicID", "_get_dvs_product_info", "_get_dvportgroup_teaming", "InvalidConfigError", "_apply_scsi_controller", "_apply_dvs_infrastructure_traffic_resources", "_reset_syslog_config_params", "_validate_entity", "_apply_advanced_config", "str", "_apply_memory_config", "_get_client", "isinstance", "fn", "wraps", "ArgumentValueError", "_get_esxdatacenter_proxy_details", "ignores_kwargs", "depends", "_apply_serial_port", "_get_vsan_eligible_disks", "ValueError", "_create_network_backing", "VMwareApiError", "_supports_proxies", "_create_sata_controllers", "_get_dvportgroup_dict", "len"], "class_names": [], "class_method_calls": ["cluster_spec.vmSwapPlacement", "device.backing", "product_info_dict.get", "dvs_capability.dvsOperationSupported", "device.busNumber", "device.key", "dvs_dict.update", "device_config_spec.device", "vim.DistributedVirtualSwitchProductSpec", "vim.DVSCapability", "device.capacityInKB", "l.used", "subprofile_dicts.append", "config_spec.memoryMB", "teaming_policy.notifySwitches", "vmotion_system.DeselectVnic", "pg_spec.defaultPortConfig", "device.unitNumber", "device_config_specs.append", "new_config.keys", "dvs_capability.dvPortOperationSupported", "vim.DVSNetworkResourcePoolConfigSpec", "out_shaping.enabled", "datetime.datetime", "das_config.defaultVmSettings", "cd_controllers.extend", "scheduled_hardware_upgrade.upgradePolicy", "vim.HostVirtualSwitchConfig", "vim.HostVmfsVolume", "dvs_config.infrastructureTrafficResourceConfig", "l.name", "config_spec.numCoresPerSocket", "config_spec.name", "pol.memoryFailoverResourcesPercent", "das_config.admissionControlPolicy", "dvs_config.lacpApiVersion", "response.items", "log.warning", "vim.ClusterDasConfigInfo", "dvs_dict.get", "vim.vsan", "interface_diffs.diffs", "policy_create_spec.resourceType", "adapter_mapping.macAddress", "vsan_spec.dataEfficiencyConfig", "host_ref.config", "SimpleHostCacheSchema.serialize", "teaming.notifySwitches", "ssds.append", "cluster_spec.dasConfig", "vim.LongPolicy", "controller.deviceInfo", "disc_prot_config.protocol", "vim.IntPolicy", "sec_policy.allowPromiscuous", "browser_spec.query", "sys.maxsize", "def_vm_set.isolationResponse", "network_spec.operation", "disk_spec.device", "det.get", "teaming.uplinkPortOrder", "ha_conf.admissionControlPolicy", "vim.HostProxySwitchSpec", "d.deviceInfo", "ide_spec.device", "p.partition", "vim.VsanClusterConfigInfo", "target_portgroup.key", "das_config.option", "teaming_policy.policy", "vmotion_system.SelectVnic", "subprofile.forceProvision", "vim.DVSContactInfo", "vim.StringPolicy", "vim.VmwareUplinkPortTeamingPolicy", "vim.BoolPolicy", "res.allocationInfo", "dvs_config.uplinkPortPolicy", "vim.VMwareDVSConfigSpec", "log.trace", "product_info_spec.version", "backing.port", "cap_specs.append", "VmomiSupport.versionMap", "vsan_conf.defaultConfig", "sata_spec.operation", "subprofiles.append", "cap_metadata.summary", "ide_ctrls.append", "network_changes.append", "scsi_spec.operation", "vm_ref.config", "i.volume", "connect_info.startConnected", "ESXVirtualMachineDeleteSchema.serialize", "vim.HostPortGroupConfig", "device.device", "subprofile.capability", "config_spec.numCPUs", "sata_specs.append", "jsonschema.validate", "user_account.id", "scsi_address_to_lun.items", "product_info_spec.vendor", "ds.name", "sata_spec.device", "connect_info.allowGuestControl", "ctrl.busNumber", "res.key", "d.canonicalName", "config_spec.maxMtu", "res_dict.get", "pg_default_port_config.uplinkTeamingPolicy", "res_dict.update", "capability_spec.dvPortGroupOperationSupported", "device.yieldOnPoll", "controller.key", "dvs_link_disc_protocol.protocol", "das_config.hostMonitoring", "line.split", "device_diffs.diffs", "salt.utils", "o.key", "dvs.ReconfigureDvs_Task", "failure_criteria.checkSpeed", "user_account.password", "vim.HostNetworkConfig", "interface_diffs.remove_diff", "names.append", "o.value", "vim.VMwareDVSPortSetting", "scheduled_hardware_upgrade.versionKey", "teaming_policy.rollingOrder", "cap_metadata.id", "dvs_capability.dvPortGroupOperationSupported", "new_controllers.extend", "host_reference.configManager", "device.macAddress", "dvs_config.__dict__", "properties.remove_diff", "disk_names.append", "product_info_spec.name", "diffs.items", "kwargs.get", "vim.DVSFailureCriteria", "l.total", "vim.vm", "vim.DVSNetworkResourcePoolAllocationInfo", "ESXClusterEntitySchema.serialize", "vim.SharesLevel", "subprofile_spec.forceProvision", "item.state", "e.message", "traffic_res.key", "device.sharedBus", "pg_spec.name", "network_adapter.deviceInfo", "conf_dict.update", "network_specs.append", "uplink_order.activeUplinkPort", "hci.key", "failure_criteria.speed", "vim.HostProxySwitchConfig", "das_config.enabled", "proxy_details.append", "vim.DVSCreateSpec", "vsan_conf.dataEfficiencyConfig", "config_spec.memoryReservationLockedToMax", "e.diskName", "vsan_system.QueryDisksForVsan", "failure_criteria.checkBeacon", "vim.VmwareDistributedVirtualSwitchVlanIdSpec", "failure_criteria.percentage", "vsan_system.UpdateVsan_Task", "response.get", "ESXVirtualMachineUnregisterSchema.serialize", "details.get", "cap_dicts.append", "policy.description", "dvs_product_info.vendor", "config_spec.version", "serial_changes.extend", "dvs_create_spec.configSpec", "vim.HostDateTimeConfig", "pg_spec.description", "val.values", "nics_settings.append", "device_spec.operation", "drive_spec.device", "part_spec.type", "keys.remove", "cap.id", "out_shaping.averageBandwidth", "out_shaping_policy.peakBandwidth", "date_time_manager.UpdateDateTime", "single_value_diff.diffs", "vim.DrsBehavior", "def_vm_set.restartPriority", "disk_changes.extend", "drs_config.enabled", "vim.Description", "out_shaping.peakBandwidth", "vim.DVSSecurityPolicy", "ESXClusterConfigSchema.serialize", "disk_ids.insert", "type_backing.serviceURI", "infra_traffic_resources.append", "part_layout.end", "fn.__name__", "adapter_mapping.adapter", "salt.exceptions", "controller.busNumber", "dictupdate.update", "teaming.reversePolicy", "dvs_product_info.name", "adapter_type.strip", "backing.network", "x.device", "sata_ctrls.append", "l.labels", "config_spec.uplinkPortPolicy", "date_time_manager.QueryDateTime", "device.controllerKey", "device.connectable", "config_spec.nestedHVEnabled", "spec.device", "client.tagging", "config_spec.description", "target_portgroup.config", "scsi_changes.append", "p.systemCreatedProfileType", "disk_diffs.diffs", "vim.HostVirtualSwitchSpec", "cpu_diff.diffs", "network_resource_pools.append", "dvs.config", "vim.DvsHostInfrastructureTrafficResource", "option.key", "l.licenseKey", "network_ref.key", "failure_criteria.checkDuplex", "config_spec.files", "das_config.vmMonitoring", "ind_reset.strip", "serial_changes.append", "config_spec.cpuHotRemoveEnabled", "policy.name", "network_system.UpdateNetworkConfig", "vcenter_info.apiVersion", "properties.diffs", "uplink_portgroup.key", "ret.get", "disk.ssd", "backing.deviceName", "ha_conf.hBDatastoreCandidatePolicy", "cd_drive_specs.append", "res_dicts.append", "failure_criteria.fullDuplex", "option.value", "vsan_config.enabled", "suitable_disk.disk", "vim.DVSTrafficShapingPolicy", "vim.DistributedVirtualSwitchPortConnection", "disk_spec.operation", "vim.DVPortgroupConfigSpec", "ret_dict.update", "dvs_config.description", "subprofile_dict.get", "sys.version_info", "device_spec.device", "config_spec.contact", "ha_conf.admissionControlEnabled", "disk_changes.append", "teaming_policy.reversePolicy", "partition_info.layout", "dvs_link_disc_protocol.operation", "dvs_config.maxMtu", "config_spec.memoryHotAddEnabled", "ds.summary", "teaming_policy.uplinkPortOrder", "e.msg", "source_portgroup.spec", "d.key", "subprofile_spec.capability", "data_eff.dedupEnabled", "part_layout.start", "service_manager.StartService", "network_changes.extend", "prop_inst_spec.value", "vim.VirtualMachine", "CategoryModel.Cardinality", "vim.OptionValue", "partition_info.spec", "subprofile.name", "pg_spec.type", "disk_specs.append", "controllers.extend", "service_manager.StopService", "device.deviceInfo", "VmfsDatastoreSchema.serialize", "vsan_config.defaultConfig", "log.error", "disk_diffs.remove_diff", "device.update", "out_shaping.burstSize", "lun.canonicalName", "keys.discard", "config_spec.cpuHotAddEnabled", "teaming.policy", "difference.ignore_unset_values", "out_shaping_policy.averageBandwidth", "drs_config.vmotionRate", "ha_conf.defaultVmSettings", "ha_conf.hostMonitoring", "pg_spec.numPorts", "memory_diff.diffs", "arg_names.index", "val.min", "network_spec.device", "diffs.keys", "teaming_policy.failureCriteria", "network_ref.config", "service.running", "drs_config.defaultVmBehavior", "policy_dict.get", "out_shaping_policy.enabled", "scsi_specs.append", "disc_prot_config.operation", "ctrl.key", "matching.append", "hci.swapSize", "cap.constraint", "part_spec.partition", "teaming.failureCriteria", "vim.HostSystem", "suitable_disks.append", "vsan_system.AddDisks", "policy.resourceType", "dvs_product_info.version", "extra_conf.value", "difference.changed", "traffic_res.allocationInfo", "host_ref.configManager", "service_manager.RestartService", "data_eff.compressionEnabled", "vim.fault", "vcenter_info.build", "jsonschema.exceptions", "account_manager.UpdateUser", "das_config.hBDatastoreCandidatePolicy", "default_config.autoClaimStorage", "result.get", "advanced_config.items", "logging.getLogger", "vim.ClusterConfigSpecEx", "cluster_spec.vsanConfig", "cd_changes.append", "vsan_info.dataEfficiencyConfig", "drs_conf.defaultVmBehavior", "vim.SharesInfo", "policy.constraints", "vim.ClusterFailoverResourcesAdmissionControlPolicy", "vim.dvs", "vsan_spec.vsanClusterConfig", "pg.spec", "dpg.vlan", "type_backing.direction", "vim.HostNtpConfig", "config_spec.deviceChange", "policy_spec.description", "dg.ssd", "policy_spec.name", "part_spec.endSector", "vim.DVSConfigSpec", "dvs_config.contact", "config_dict.get", "cap_metadata.mandatory", "log.info", "ports.append", "pg_default_port_config.securityPolicy", "err.msg", "cluster_spec.drsConfig", "dvs_create_spec.productInfo", "sec_policy.macChanges", "line.strip", "vim.HostVirtualNicConfig", "service.policy", "__pillar__.get", "removed_configs.append", "sec_policy.forgedTransmits", "create_spec.description", "pbm.capability", "search_index.FindByIp", "capability_spec.dvsOperationSupported", "drs_conf.vmotionRate", "service.key", "advanced_diff.diffs", "ha_conf.option", "vim.LinkDiscoveryProtocolConfig", "capability_spec.dvPortOperationSupported", "vim.ClusterDasVmSettings", "drive_spec.operation", "dvs_config.networkResourceManagementEnabled", "pg_default_port_config.outShapingPolicy", "VCenterEntitySchema.serialize", "failure_criteria.checkErrorPercent", "vim.DistributedVirtualPortgroup", "create_spec.associable_types", "switch_type.strip", "create_spec.cardinality", "config_spec.networkResourceControlVersion", "vim.ClusterDrsConfigInfo", "syslog_config.split", "vmodl.fault", "create_spec.name", "vim.VMwareUplinkPortOrderPolicy", "backing_disk_ids.extend", "storage_system.storageDeviceInfo", "vol.extent", "dvs_create_spec.capability", "scsi_controllers.extend", "disk.canonicalName", "vsan_conf.enabled", "ide_spec.operation", "disks_to_update.append", "vim.VsanClusterConfigInfoHostDefaultInfo", "dvs_config.networkResourceControlVersion", "vim.host", "line.startswith", "r.key", "config_spec.extraConfig", "policy_spec.constraints", "cap_metadata.propertyMetadata", "out_shaping_policy.burstSize", "service_manager.UpdateServicePolicy", "extra_conf.key", "ha_conf.vmMonitoring", "das_config.failoverLevel", "out_shaping_conf.get", "log.debug", "vim.HostVirtualNicSpec", "val.max", "ret.update", "config_spec.scheduledHardwareUpgradeInfo", "das_config.admissionControlEnabled", "uplink_order.standbyUplinkPort", "non_ssds.append", "DiskGroupsDiskIdSchema.serialize", "scsi_changes.extend", "part_spec.startSector", "vim.option", "dvs_config.linkDiscoveryProtocolConfig", "pol.cpuFailoverResourcesPercent", "vim.DVSNameArrayUplinkPortPolicy", "teaming.rollingOrder", "pg_dict.update", "value.get", "config_spec.guestId", "scsi_spec.device", "props.get", "create_spec.category_id", "cd_changes.extend", "date_time_manager.UpdateDateTimeConfig", "pbm.profile", "config_spec.lacpApiVersion", "ret_list.append", "__opts__.get", "vim.DvsHostInfrastructureTrafficResourceAllocation", "type_backing.proxyURI", "dg.nonSsd", "cluster_dict.get", "search_index.FindByDnsName", "disk_spec.fileOperation", "ret_dict.append"]}, "webutil.py": {"libraries": ["salt.utils.path"], "function_names": ["user_exists", "user_absent", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils"]}, "win_appx.py": {"libraries": ["fnmatch", "salt.utils.data", "salt.utils.platform", "logging"], "function_names": ["absent", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "comment.extend", "salt.utils", "fnmatch.filter"]}, "win_auditpol.py": {"libraries": ["salt.utils.platform"], "function_names": ["get_settings", "get_setting", "set_setting", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils"]}, "win_autoruns.py": {"libraries": ["salt.utils.platform", "os"], "function_names": ["list_", "_get_dirs", "__virtual__"], "function_calls": ["_get_dirs"], "class_names": [], "class_method_calls": ["os.path", "full_dirs.append", "salt.utils", "os.listdir"]}, "win_certutil.py": {"libraries": ["salt.utils.platform", "logging"], "function_names": ["add_store", "del_store", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "win_dacl.py": {"libraries": ["salt.utils.win_functions", "win32api", "salt.exceptions.CommandExecutionError", "pywintypes", "salt.utils.platform", "win32security", "salt.exceptions.SaltInvocationError", "win32con", "logging"], "function_names": ["save", "set_permissions", "copy_security", "get_primary_group", "rm_permissions", "set_owner", "rm_ace", "set_inheritance", "get_name", "has_permission", "dacl", "add_ace", "get_sid_string", "get_owner", "flags", "__virtual__", "_check_perms", "get_inheritance", "get_permissions", "_ace_to_dict", "check_perms", "order_acl", "has_permissions", "get_ace", "set_primary_group", "_set_perms", "set_perms", "get_reg_name", "get_sid", "__init__", "rm_all_aces", "list_aces"], "function_calls": ["type", "Flags", "range", "set_permissions", "CommandExecutionError", "rm_permissions", "set_owner", "set_inheritance", "get_name", "has_permission", "dacl", "get_sid_string", "get_owner", "flags", "isinstance", "_check_perms", "get_inheritance", "get_permissions", "SaltInvocationError", "has_permissions", "_set_perms", "get_sid", "set", "Dacl"], "class_names": ["Flags", "Dacl"], "class_method_calls": ["obj_dacl.rm_ace", "changes.setdefault", "win32api.FormatMessage", "obj_dacl.add_ace", "logging.getLogger", "self.element", "ace_perms.append", "pywintypes.SIDType", "passed_hive.upper", "win32security.SE_REGISTRY_KEY", "self.get_reg_name", "win32security.SE_PRINTER", "new_dacl.dacl", "win32security.ConvertStringSidToSid", "access_mode.capitalize", "self.dacl", "self.inheritance", "win32security.ConvertSidToStringSid", "win32security.LookupAccountName", "reg.pop", "reg.insert", "exc.strerror", "self._ace_to_dict", "win32security.LookupAccountSid", "obj_dacl.dacl", "allow_dacl.dacl", "obj_dacl.save", "obj_dacl.ace_perms", "win32security.UNPROTECTED_DACL_SECURITY_INFORMATION", "log.exception", "sec.GetSecurityDescriptorDacl", "win32security.LookupPrivilegeValue", "log.info", "win32security.INHERITED_ACE", "win32security.ACCESS_DENIED_OBJECT_ACE_TYPE", "win32security.OpenProcessToken", "str_sid.startswith", "win32security.ACL", "permission.lower", "obj_flags.element", "deny_dacl.dacl", "win32security.SE_REGISTRY_WOW64_32KEY", "win32security.SetNamedSecurityInfo", "exc.winerror", "obj_dacl.order_acl", "ace_type.lower", "deny_obj_dacl.dacl", "obj_type.lower", "sd.GetSecurityDescriptorDacl", "win32security.ACCESS_ALLOWED_OBJECT_ACE_TYPE", "win32api.GetCurrentProcess", "self.ace_prop", "obj_flags.obj_type", "win32security.NO_PROPAGATE_INHERIT_ACE", "win32security.SE_SERVICE", "self.list_aces", "obj_dacl.get_ace", "sec.GetSecurityDescriptorOwner", "win32security.OWNER_SECURITY_INFORMATION", "win32security.SE_FILE_OBJECT", "self.ace_perms", "obj_name.split", "allow_obj_dacl.dacl", "ace_perms.sort", "access_mode.lower", "win32security.ACCESS_ALLOWED_ACE_TYPE", "win32security.GetNamedSecurityInfo", "sec.GetSecurityDescriptorSacl", "win32security.SACL_SECURITY_INFORMATION", "win32con.SE_PRIVILEGE_ENABLED", "win32security.SE_LMSHARE", "win32security.ACCESS_DENIED_ACE_TYPE", "pywintypes.error", "log.debug", "win32security.GROUP_SECURITY_INFORMATION", "win32con.TOKEN_ADJUST_PRIVILEGES", "self.ace_type", "new_privs.add", "win32security.DACL_SECURITY_INFORMATION", "obj_dacl.list_aces", "orig_comment.extend", "security_descriptor.GetSecurityDescriptorGroup", "obj_dacl.get_reg_name", "ret.append", "self.obj_type", "sec.GetSecurityDescriptorGroup", "salt.utils", "win32security.AdjustTokenPrivileges", "win32security.TOKEN_ALL_ACCESS", "security_descriptor.GetSecurityDescriptorOwner", "obj_dacl.ace_type", "win32security.PROTECTED_DACL_SECURITY_INFORMATION", "win32security.ACL_REVISION_DS", "self.dacl_type"]}, "win_disk.py": {"libraries": ["salt.utils.platform", "string", "win32api", "ctypes"], "function_names": ["usage", "__virtual__"], "function_calls": ["float"], "class_names": [], "class_method_calls": ["salt.utils", "ctypes.windll", "string.ascii_uppercase", "win32api.GetDiskFreeSpaceEx", "drives.append"]}, "win_dism.py": {"libraries": ["salt.utils.platform", "os", "salt.utils.data", "logging"], "function_names": ["feature_removed", "capability_installed", "provisioned_package_installed", "feature_installed", "capability_removed", "package_installed", "package_removed", "kb_removed", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils", "os.path"]}, "win_dns_client.py": {"libraries": [], "function_names": ["dns_dhcp", "primary_suffix", "dns_exists", "__virtual__"], "function_calls": ["enumerate", "bool", "isinstance", "str"], "class_names": [], "class_method_calls": ["configured_list.index"]}, "win_dsc.py": {"libraries": ["os", "salt.utils.json", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "salt.exceptions.SaltInvocationError", "logging", "salt.utils.versions"], "function_names": ["set_lcm_config", "get_lcm_config", "remove_config", "test_config", "apply_config", "get_config_status", "get_config", "_pshell", "restore_config", "_remove_fs_obj", "compile_config", "run_config", "__virtual__"], "function_calls": ["dict", "SaltInvocationError", "apply_config", "_remove_fs_obj", "_pshell", "CommandExecutionError", "compile_config", "isinstance"], "class_names": [], "class_method_calls": ["item.pop", "logging.getLogger", "ret.get", "log.error", "raw_config.pop", "config.setdefault", "cmd.lower", "log.debug", "log.info", "cmd.extend", "os.path", "salt.utils", "os.getenv", "path_name.lower", "source_name.lower", "exc.info", "cmd.append"]}, "win_event.py": {"libraries": ["xmltodict", "collections", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "pywintypes", "salt.utils.platform", "winerror", "win32evtlog", "win32evtlogutil", "logging"], "function_names": ["clear", "count", "get_filtered", "_make_event_dict", "_event_generator_filter", "_raw_time", "_event_generator_with_time", "add", "_to_bytes", "_get_handle", "_close_handle", "query", "_event_generator", "get_log_names", "get", "__virtual__"], "function_calls": ["repr", "_make_event_dict", "TimeTuple", "_event_generator_filter", "_raw_time", "FileNotFoundError", "tuple", "_event_generator_with_time", "enumerate", "_to_bytes", "_get_handle", "_close_handle", "int", "getattr", "CommandExecutionError", "_event_generator", "isinstance"], "class_names": [], "class_method_calls": ["pywintypes.error", "win32evtlog.EvtQueryForwardDirection", "win32evtlog.EvtNextChannelPath", "win32evtlog.EvtNext", "winerror.HRESULT_CODE", "event_list.append", "time.hour", "win32evtlogutil.ReportEvent", "logging.getLogger", "data.encode", "time.day", "time.minute", "win32evtlog.EVENTLOG_BACKWARDS_READ", "win32evtlog.ClearEventLog", "time.year", "log.trace", "collections.namedtuple", "win32evtlog.EvtQuery", "win32evtlog.EvtOpenChannelEnum", "time.second", "win32evtlog.GetNumberOfEventLogRecords", "time.month", "salt.utils", "log_names.append", "win32evtlog.OpenEventLog", "win32evtlog.EvtRender", "new_list.append", "exc.strerror", "win32evtlog.EVENTLOG_SEQUENTIAL_READ", "key.startswith", "xmltodict.parse", "win32evtlog.EvtQueryReverseDirection", "win32evtlog.ReadEventLog", "win32evtlog.CloseEventLog"]}, "win_file.py": {"libraries": ["salt.modules.file.pardir", "salt.modules.file.get_diff", "salt.modules.file._check_sig", "salt.modules.file.basename", "salt.modules.file._binary_replace", "salt.modules.file._assert_occurrence", "pathlib", "salt.modules.file.access", "salt.modules.file.get_source_sum", "sys", "os", "salt.modules.file._mkstemp_copy", "salt.modules.file.__clean_tmp", "salt.modules.file._error", "salt.modules.file.apply_template_on_contents", "salt.modules.file.prepend", "salt.modules.file.uncomment", "errno", "salt.modules.file.restore_backup", "salt.modules.file.list_backups_dir", "salt.utils.win_dacl", "salt.utils.platform", "salt.modules.file.contains", "salt.utils.functools.namespaced_function", "salt.modules.file.path_exists_glob", "salt.modules.file.manage_file", "salt.utils.user", "salt.modules.file.contains_glob", "salt.modules.file.line", "salt.modules.file.lstat", "logging", "salt.modules.file._splitlines_preserving_trailing_newline", "salt.modules.file._get_flags", "salt.exceptions.CommandExecutionError", "salt.modules.file.search", "salt.modules.file.get_sum", "salt.modules.file.replace", "salt.modules.file.psed", "salt.modules.file.source_list", "salt.modules.file.read", "salt.modules.file._get_bkroot", "salt.modules.file.append", "salt.modules.file._get_eol", "win32con", "salt.modules.file._regex_to_static", "salt.modules.file.copy", "salt.modules.file.join", "salt.modules.file._set_line_indent", "salt.modules.file.contains_regex", "salt.modules.file.rmdir", "salt.modules.file.blockreplace", "win32api", "salt.modules.file._set_line", "salt.modules.file.comment_line", "salt.modules.file.seek_read", "salt.modules.file.comment", "salt.modules.file.check_hash", "salt.modules.file.extract_hash", "tempfile", "salt.exceptions.SaltInvocationError", "salt.modules.file.get_managed", "salt.modules.file._add_flags", "salt.modules.file.check_file_meta", "salt.modules.file.dirname", "salt.modules.file.readdir", "salt.modules.file.delete_backup", "salt.modules.file.patch", "salt.modules.file.touch", "pywintypes", "salt.modules.file.directory_exists", "salt.modules.file.truncate", "salt.modules.file.file_exists", "salt.modules.file.normpath", "salt.utils.files", "salt.modules.file.list_backups", "salt.modules.file.seek_write", "win32file", "os.path", "salt.modules.file.get_hash", "salt.modules.file._set_line_eol", "salt.modules.file.readlink", "salt.utils.path", "salt.platform.win", "win32security", "salt.modules.file.check_managed", "salt.modules.file.find", "salt.modules.file.rename", "salt.modules.file.write", "salt.modules.file.check_managed_changes", "stat"], "function_names": ["_resolve_symlink", "version_details", "get_pgid", "makedirs_", "_get_version_os", "set_mode", "get_mode", "get_group", "is_link", "get_attributes", "chpgrp", "chgrp", "_get_version_type", "chown", "group_to_gid", "__virtual__", "remove", "symlink", "mkdir", "check_perms", "stats", "makedirs_perms", "version", "lchown", "user_to_uid", "_get_version", "get_uid", "get_user", "set_perms", "uid_to_user", "get_gid", "get_pgroup", "gid_to_group", "set_attributes"], "function_calls": ["_resolve_symlink", "get_pgid", "int", "_get_version_os", "oct", "CommandExecutionError", "get_mode", "is_link", "get_sum", "str", "_get_version_type", "chown", "namespaced_function", "remove", "mkdir", "SaltInvocationError", "makedirs_perms", "globals", "_get_version", "get_uid", "next", "get_user", "exists", "uid_to_user", "readlink", "gid_to_group"], "class_names": [], "class_method_calls": ["win32file.SetFileAttributes", "pywintypes.error", "salt.platform", "tempfile.mktemp", "stat.S_ISFIFO", "sys.getwindowsversion", "log.debug", "win32file.GetFileAttributes", "stat.S_ISLNK", "pstat.st_mtime", "path.rmdir", "stat.S_ISDIR", "log.info", "os.path", "path.iterdir", "paths_seen.add", "win32file.CreateSymbolicLink", "exc.errno", "pstat.st_atime", "win32con.FILE_ATTRIBUTE_NORMAL", "logging.getLogger", "os.stat", "directories_to_create.append", "stat.S_ISCHR", "win32security.TOKEN_ADJUST_PRIVILEGES", "win32file.MoveFileEx", "win32security.OpenProcessToken", "win32security.TOKEN_QUERY", "win32api.LOWORD", "path.is_absolute", "stat.S_ISREG", "path.is_file", "errno.EEXIST", "pstat.st_ino", "win32file.MOVEFILE_WRITE_THROUGH", "win32api.GetFileVersionInfo", "pstat.st_ctime", "os.curdir", "path.exists", "win32api.GetFileAttributes", "pathlib.Path", "win32api.SetFileAttributes", "os.mkdir", "stat.S_ISSOCK", "win32file.error", "salt.utils", "directories_to_create.reverse", "pstat.st_mode", "pstat.st_size", "win32api.HIWORD", "win32file.FindFilesIterator", "stat.S_IMODE", "file_os.append", "exc.winerror", "__opts__.get", "os.unlink", "path.is_symlink", "path.unlink", "win32file.MOVEFILE_REPLACE_EXISTING", "exc.strerror", "stat.S_ISBLK", "os.remove", "win32api.GetCurrentProcess"]}, "win_firewall.py": {"libraries": ["salt.exceptions.SaltInvocationError", "salt.exceptions.CommandExecutionError"], "function_names": ["disabled", "add_rule", "enabled", "__virtual__"], "function_calls": ["SaltInvocationError"], "class_names": [], "class_method_calls": []}, "win_groupadd.py": {"libraries": ["salt.utils.win_functions", "win32api", "salt.utils.winapi", "pywintypes", "salt.utils.platform", "win32com.client", "logging"], "function_names": ["getent", "info", "deluser", "_get_group_object", "_get_computer_object", "_get_username", "adduser", "members", "list_groups", "delete", "add", "_get_all_groups", "__virtual__"], "function_calls": ["info", "_get_group_object", "_get_computer_object", "_get_username", "isinstance", "_get_all_groups"], "class_names": [], "class_method_calls": ["log.error", "win32api.FormatMessage", "username.replace", "log.debug", "obj_group.members", "log.info", "comp_obj.Delete", "log.warning", "groupObj.members", "logging.getLogger", "new_group.SetInfo", "group_obj.members", "win32com.client", "results.Filter", "result.Name", "existing_members.sort", "members_list.split", "group_obj.Remove", "members_list.sort", "ret.append", "member.ADSPath", "member.replace", "pywintypes.com_error", "salt.utils", "exc.excepinfo", "comp_obj.Create", "obj_group.Remove", "obj_group.Add", "group_obj.Add", "groupObj.Name", "nt.GetObject", "result.members"]}, "win_iis.py": {"libraries": [], "function_names": ["remove_vdir", "create_cert_binding", "create_app", "remove_binding", "create_apppool", "set_app", "remove_apppool", "remove_cert_binding", "remove_app", "webconfiguration_settings", "create_vdir", "container_setting", "deployed", "create_binding", "_get_binding_info", "remove_site", "__virtual__"], "function_calls": ["list", "enumerate", "str", "_get_binding_info", "len", "map"], "class_names": [], "class_method_calls": ["settings_list.append", "settings.items", "settings.keys", "hostheader.replace", "filter_settings.items"]}, "win_ip.py": {"libraries": ["time", "salt.utils.validate.net", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "salt.exceptions.SaltInvocationError", "logging", "salt.utils.network"], "function_names": ["disable", "is_disabled", "_find_addr", "get_all_interfaces", "_interface_configs", "is_enabled", "enable", "set_dhcp_dns", "get_interface", "set_static_ip", "get_default_gateway", "set_dhcp_all", "get_subnet_length", "raw_interface_configs", "set_dhcp_ip", "set_static_dns", "__virtual__"], "function_calls": ["is_disabled", "_find_addr", "next", "_interface_configs", "range", "iter", "is_enabled", "set_dhcp_dns", "SaltInvocationError", "str", "get_interface", "CommandExecutionError", "set_dhcp_ip"], "class_names": [], "class_method_calls": ["current_iface.setdefault", "val.split", "log.debug", "subnet.strip", "line.rstrip", "log.warning", "logging.getLogger", "key.strip", "line.strip", "time.sleep", "x.split", "cmd.extend", "cmd.append", "line.split", "salt.utils", "val.strip", "addr.rsplit", "netmask.lstrip", "current_ip_list.append", "key.lower"]}, "win_lgpo.py": {"libraries": ["salt.utils.win_functions", "salt.utils.json", "salt.utils.stringutils", "salt.utils.dictdiffer", "logging", "salt.utils.versions", "salt.utils.data"], "function_names": ["_compare_policies", "_convert_to_unicode", "set_", "__virtual__"], "function_calls": ["_convert_to_unicode", "isinstance", "_compare_policies", "list"], "class_names": [], "class_method_calls": ["logging.getLogger", "data.items", "valid_names.extend", "e_name.split", "new_policy.setdefault", "deprecation_comments.append", "log.debug", "deprecation_comments.insert", "p_data.get", "policy_class.lower", "salt.utils", "requested_policy.items", "policy_changes.append", "pol_data.items", "current_policy.setdefault", "resolved_names.append", "data.replace"]}, "win_lgpo_reg.py": {"libraries": ["salt.utils.win_reg", "os", "salt.modules.win_file", "salt.exceptions.CommandExecutionError", "salt.utils.files", "struct", "re", "logging"], "function_names": ["search_reg_pol", "read_reg_pol_file", "strip_field_end", "write_reg_pol_data", "dict_to_reg_pol", "reg_pol_to_dict", "__virtual__"], "function_calls": ["search_reg_pol", "strip_field_end", "str", "int", "len", "CommandExecutionError"], "class_names": [], "class_method_calls": ["version_loc.start", "log.exception", "gpt_ini_data.replace", "v_data.decode", "log.debug", "gpt_extension.lower", "REG_POL_HEADER.encode", "os.path", "version_loc.end", "data.items", "re.search", "gpt_file.write", "re.MULTILINE", "logging.getLogger", "general_location.end", "struct.pack", "policy_data.lstrip", "policies.append", "policy.replace", "pol_file_data.split", "struct.unpack", "gpt_ext_loc.start", "os.getenv", "version_str.split", "pol_file.read", "policy.append", "policy_data.startswith", "general_location.start", "data_to_write.startswith", "gpt_ext_str.split", "gpt_ext_loc.end", "salt.utils", "re.IGNORECASE", "reg.vtype_reverse", "reg_pol.setdefault", "value.items", "policy.split", "pol_section_delim.join", "gpt_file.read", "salt.modules", "pol_file.write", "re.escape", "reg.vtype"]}, "win_license.py": {"libraries": ["salt.utils.platform", "logging"], "function_names": ["activate", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "win_network.py": {"libraries": ["salt.utils.win_reg", "salt._compat.ipaddress", "salt.utils.winapi", "platform", "System.Net.NetworkInformation", "wmi", "clr", "logging"], "function_names": ["_get_ip_base_properties", "get_interface_info_wmi", "_get_ip_multicast_info", "_get_ip_unicast_info", "get_interface_info_dot_net_formatted", "_get_ip_wins_info", "get_interface_info", "_get_ip_anycast_info", "get_interface_info_dot_net", "_get_ip_dns_info", "_get_base_properties", "_get_ip_gateway_info", "_get_network_interfaces", "__virtual__"], "function_calls": ["_get_ip_base_properties", "get_interface_info_wmi", "_get_ip_multicast_info", "range", "next", "get_interface_info_dot_net_formatted", "_get_ip_unicast_info", "_get_ip_wins_info", "_get_ip_anycast_info", "get_interface_info_dot_net", "int", "_get_base_properties", "_get_ip_gateway_info", "_get_network_interfaces", "_get_ip_dns_info"], "class_names": [], "class_method_calls": ["i_face.OperationalStatus", "addrs.SuffixOrigin", "platform.system", "temp_dict.update", "log.debug", "net.broadcast_address", "i_face.Id", "addrs.IPv4Mask", "i_face.GetIPProperties", "ip_properties.IsDynamicDnsEnabled", "ipaddress.IPv4Network", "i_face.IPSubnet", "logging.getLogger", "c.Win32_NetworkAdapterConfiguration", "addrs.Address", "i_faces.setdefault", "ip_properties.DnsSuffix", "i_face.MACAddress", "ip_info.update", "ip_properties.GatewayAddresses", "ip_properties.UnicastAddresses", "addrs.ToString", "ip_properties.DnsAddresses", "addrs.AddressFamily", "i_face.IPAddress", "i_face.Name", "ip_properties.MulticastAddresses", "i_face.GetPhysicalAddress", "wmi.WMI", "i_face.IPEnabled", "salt.utils", "NetworkInformation.NetworkInterface", "i_face.Description", "i_face.IsReceiveOnly", "i_face.DefaultIPGateway", "ip_properties.IsDnsEnabled", "addrs.PrefixLength", "int_dict.setdefault", "i_face.NetworkInterfaceType", "addrs.PrefixOrigin", "ip_properties.AnycastAddresses", "ip_properties.WinsServersAddresses"]}, "win_ntp.py": {"libraries": ["salt.utils.platform", "logging"], "function_names": ["get_servers", "set_servers", "__virtual__"], "function_calls": ["get_servers", "sorted", "list"], "class_names": [], "class_method_calls": ["logging.getLogger", "line.rsplit", "line.startswith", "ntpsvrs.split", "salt.utils"]}, "win_path.py": {"libraries": ["salt.utils.stringutils", "os"], "function_names": ["_index", "_changes", "exists", "__virtual__", "_format_comments", "_get_path_lowercase", "absent"], "function_calls": ["_index", "_changes", "_format_comments", "str", "len", "isinstance", "_get_path_lowercase"], "class_names": [], "class_method_calls": ["x.lower", "name.lower", "ret.setdefault", "comments.append", "path.index", "os.path", "salt.utils"]}, "win_pkg.py": {"libraries": ["salt.utils.files", "datetime", "salt.payload", "logging", "salt.utils.hashutils", "salt.utils.path", "urllib.parse", "salt.utils.pkg", "collections", "salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError", "salt.exceptions.SaltRenderError", "functools.cmp_to_key", "sys", "os", "time", "salt.utils.versions.LooseVersion", "salt.syspaths", "re", "salt.utils.data", "errno", "salt.utils.win_functions", "salt.exceptions.MinionError", "salt.fileserver", "salt.utils.platform", "salt.utils.args", "salt.utils.versions"], "function_names": ["_get_package_info", "_repo_process_pkg_sls", "get_package_info", "list_upgrades", "purge", "skip_release_type", "skip_win_installer", "_get_name_map", "skip_uninstall_string", "_failed_compile", "list_available", "get_repo_data", "__virtual__", "_get_latest_pkg_version", "remove", "upgrade_available", "_get_reg_software", "skip_component", "upgrade", "_get_msiexec", "_get_repo_details", "genrepo", "_reverse_cmp_pkg_versions", "skip_parent_key", "normalize_name", "version", "_get_source_sum", "list_pkgs", "refresh_db", "compare_versions", "add_software", "_refresh_db_conditional", "install", "latest_version"], "function_calls": ["any", "_get_package_info", "_repo_process_pkg_sls", "list", "cmp_to_key", "CommandExecutionError", "skip_release_type", "repo_details", "skip_win_installer", "_get_name_map", "skip_uninstall_string", "str", "_failed_compile", "sorted", "all", "isinstance", "get_repo_data", "_get_latest_pkg_version", "remove", "skip_component", "_get_reg_software", "_get_msiexec", "_get_repo_details", "genrepo", "dict", "skip_parent_key", "SaltInvocationError", "bool", "_get_source_sum", "list_pkgs", "refresh_db", "next", "iter", "LooseVersion", "compare_versions", "add_software", "_refresh_db_conditional", "len", "latest_version"], "class_names": [], "class_method_calls": ["__context__.pop", "log.error", "kwargs.pop", "changed.append", "log.exception", "pkginfo.keys", "fileserver.clear_file_list_cache", "reg_software.setdefault", "uninstaller.startswith", "log.debug", "re.UNICODE", "repo_details.local_dest", "datetime.timedelta", "ret.update", "old.get", "products_key.format", "log.info", "source_hash.split", "os.path", "salt.payload", "repofile.read", "product_key.format", "exc.errno", "installed_pkgs.get", "log.warning", "re.search", "config.items", "logging.getLogger", "os.stat", "urllib.parse", "os.sep", "item.strip", "removal_targets.append", "cached_pkg.replace", "stat_result.st_mtime", "results.get", "installer.startswith", "time.sleep", "version_list.items", "cache_file.startswith", "os.getenv", "name.endswith", "errno.EEXIST", "url_parts.netloc", "kwargs.get", "log.trace", "collections.namedtuple", "os.makedirs", "ret.setdefault", "salt.loader", "pkg_params.items", "url_parts.path", "repo_details.winrepo_source_dir", "repo_cache.write", "time.time", "re.match", "salt.utils", "errors.append", "repo_details.winrepo_age", "errno.ENOENT", "re.IGNORECASE", "pkg_info.keys", "user_data_key.format", "salt.template", "sys.maxsize", "options.get", "os.environ", "dirs.append", "__opts__.get", "repo_details.winrepo_file", "salt.fileserver", "dirs.extend", "uninstall_key.format", "failed.append", "os.remove", "config.keys"]}, "win_pki.py": {"libraries": [], "function_names": ["import_cert", "remove_cert", "__virtual__"], "function_calls": ["dict"], "class_names": [], "class_method_calls": []}, "win_powercfg.py": {"libraries": ["salt.utils.platform", "salt.utils.data", "logging"], "function_names": ["set_timeout", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "name.lower", "log.debug", "power.upper", "power.lower", "name.capitalize", "salt.utils"]}, "win_psget.py": {"libraries": ["xml.etree.ElementTree", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "logging", "salt.utils.versions"], "function_names": ["_ps_xml_to_dict", "list_modules", "update", "remove", "register_repository", "get_repository", "avail_modules", "install", "_pshell", "bootstrap", "__virtual__"], "function_calls": ["_ps_xml_to_dict", "list_modules", "list", "_pshell", "CommandExecutionError"], "class_names": [], "class_method_calls": ["logging.getLogger", "child.text", "log.debug", "xml.etree", "names.append", "salt.utils", "child.items", "flags.append"]}, "win_servermanager.py": {"libraries": ["salt.utils.data"], "function_names": ["installed", "removed", "__virtual__"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["kwargs.pop", "fail_feat.insert", "new_feat.insert", "name.split", "rem_feat.append", "salt.utils", "rem_feat.insert", "cur_feat.insert", "cur_feat.append", "new_feat.append", "features.split", "fail_feat.append"]}, "win_service.py": {"libraries": ["win32security", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "pywintypes", "win32service"], "function_names": ["info", "__virtual__"], "function_calls": ["CommandExecutionError", "dict", "isinstance", "list"], "class_names": [], "class_method_calls": ["pywintypes.error", "win32service.CloseServiceHandle", "win32service.OpenService", "win32service.SERVICE_CONFIG_DESCRIPTION", "win32service.SC_MANAGER_CONNECT", "win32service.SERVICE_ENUMERATE_DEPENDENTS", "win32service.SERVICE_CONFIG_DELAYED_AUTO_START_INFO", "win32service.QueryServiceStatusEx", "flags.append", "win32service.SERVICE_QUERY_STATUS", "win32service.SERVICE_INTERROGATE", "win32service.SERVICE_QUERY_CONFIG", "win32service.OpenSCManager", "win32service.QueryServiceConfig2", "salt.utils", "win32security.ConvertSidToStringSid", "win32security.LookupAccountName", "exc.strerror", "win32service.QueryServiceConfig"]}, "win_shadow.py": {"libraries": ["salt.utils.platform"], "function_names": ["info", "set_password", "set_expire", "unlock_account", "require_password_change", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils"]}, "win_shortcut.py": {"libraries": ["salt.utils.platform", "salt.utils.data", "salt.exceptions.CommandExecutionError", "salt.utils.path"], "function_names": ["present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["__salt__.get", "exc.message", "salt.utils"]}, "win_smtp_server.py": {"libraries": ["salt.utils.args"], "function_names": ["connection_ip_list", "server_setting", "_normalize_server_settings", "active_log_format", "relay_ip_list", "_merge_dicts", "__virtual__"], "function_calls": ["iter", "next", "dict", "str", "_normalize_server_settings", "isinstance"], "class_names": [], "class_method_calls": ["settings.keys", "salt.utils", "ret.update"]}, "win_snmp.py": {"libraries": [], "function_names": ["agent_settings", "community_names", "auth_traps_enabled", "__virtual__"], "function_calls": ["str", "set", "dict", "sorted"], "class_names": [], "class_method_calls": []}, "win_status.py": {"libraries": ["ctypes", "salt.utils.winapi", "salt.utils.stringutils", "psutil", "salt.modules.status.time_", "salt.utils.win_pdh", "salt.modules.status.ping_master", "salt.utils.event", "salt.utils.platform", "wmi", "datetime", "salt.utils.network.host_to_ips", "logging", "salt.utils.functools.namespaced_function"], "function_names": ["saltmem", "get_unit_value", "procs", "master", "cpustats", "uptime", "_get_process_owner", "vmstats", "_byte_calc", "_get_connected_ips", "cpuload", "loadavg", "diskusage", "meminfo", "_get_process_info", "__virtual__"], "function_calls": ["_host_to_ips", "getattr", "int", "float", "_get_process_owner", "_byte_calc", "str", "len", "all", "namespaced_function", "get_unit_value", "dict", "_get_connected_ips", "SYSTEM_PERFORMANCE_INFORMATION", "globals", "enumerate", "reversed", "set", "_get_process_info"], "class_names": ["SYSTEM_PERFORMANCE_INFORMATION"], "class_method_calls": ["conn.status", "p.oneshot", "event_bus.fire_event", "connected_ips.add", "ret.update", "spi._fields_", "psutil.boot_time", "proc.CommandLine", "ctypes.c_longlong", "ctypes.windll", "log.warning", "ctypes.byref", "logging.getLogger", "ctypes.c_ulong", "psutil.swap_memory", "psutil.pids", "ctypes.Structure", "process.ProcessId", "disk_stats.percent", "ctypes.c_ulonglong", "ctypes.sizeof", "process.GetOwner", "proc.Name", "wmi.WMI", "psutil.Process", "ctypes.c_int64", "disk_stats.used", "disk_stats.total", "psutil.cpu_times", "salt.minion", "psutil.virtual_memory", "p.memory_info", "salt.utils", "conn.laddr", "wmi_obj.win32_process", "psutil.cpu_stats", "datetime.datetime", "uptime.total_seconds", "psutil.disk_usage", "disk_stats.free", "psutil.CONN_ESTABLISHED", "proc.ProcessId", "psutil.cpu_percent", "psutil.net_connections"]}, "win_system.py": {"libraries": ["salt.utils.win_reg", "win32api", "salt.utils.win_update", "win32con", "logging"], "function_names": ["get_pending_reboot", "get_pending_dvd_reboot", "get_pending_file_rename", "__virtual__", "get_pending_windows_update", "get_computer_name", "set_reboot_required_witnessed", "get_pending_component_servicing", "get_pending_update_exe_volatile", "get_reboot_required_witnessed", "get_pending_update", "get_pending_reboot_details", "get_pending_domain_join", "get_pending_servermanager", "get_pending_computer_name"], "function_calls": ["get_pending_dvd_reboot", "get_pending_file_rename", "check", "get_pending_windows_update", "get_computer_name", "get_pending_component_servicing", "int", "get_pending_update_exe_volatile", "get_reboot_required_witnessed", "get_pending_update", "get_pending_domain_join", "get_pending_servermanager", "get_pending_computer_name"], "class_names": [], "class_method_calls": ["logging.getLogger", "current.lower", "win32con.ComputerNamePhysicalDnsHostname", "salt.utils", "pending.lower", "win32api.GetComputerNameEx"]}, "win_task.py": {"libraries": ["salt.utils.dateutils", "time", "pywintypes", "salt.utils.platform", "logging", "salt.utils.data", "copy"], "function_names": ["absent", "_get_task_state_prediction", "_task_state_prediction_bandage", "_get_arguments", "_get_task_state_data", "present", "_valid_location", "__virtual__"], "function_calls": ["_get_task_state_prediction", "sum", "repr", "_task_state_prediction_bandage", "_get_task_state_data", "_get_arguments", "list", "int", "_valid_location", "len", "set", "isinstance"], "class_names": [], "class_method_calls": ["kwargs.update", "logging.getLogger", "copy.deepcopy", "time.strftime", "pywintypes.com_error", "salt.utils", "trigger_keys.union", "action_keys.union", "log.warning"]}, "win_timezone.py": {"libraries": ["pytz", "datetime.datetime", "salt.exceptions.CommandExecutionError", "logging"], "function_names": ["remove", "get_hwclock", "get_zone", "zone_compare", "list_win", "set_zone", "list", "set_hwclock", "__init__", "get_zonecode", "get_unix", "list_unix", "add", "get_offset", "get_win", "__virtual__"], "function_calls": ["get_zone", "TzMapper", "zone_compare", "sorted", "CommandExecutionError"], "class_names": ["TzMapper"], "class_method_calls": ["self.win_to_unix", "tz.endswith", "mapper.get_unix", "mapper.list_win", "loc_time.tzname", "unix_to_win.items", "pytz.timezone", "logging.getLogger", "utc_time.astimezone", "tz_object.normalize", "mapper.list_unix", "self.unix_to_win", "timezone.lower", "norm_time.strftime", "mapper.get_win", "datetime.utcnow", "k.lower", "tz_object.localize", "mapper.win_to_unix", "key.lower", "v.lower", "mapper.unix_to_win", "pytz.utc"]}, "win_useradd.py": {"libraries": ["win32api", "logging", "salt.utils.win_reg", "shlex", "win32profile", "salt.exceptions.CommandExecutionError", "win32security", "salt.utils.dateutils", "time", "salt.utils.winapi", "win32net", "wmi", "win32con", "win32netcon", "datetime.datetime", "ctypes", "pywintypes", "salt.utils.platform", "win32ts", "salt.utils.args", "salt.utils.versions"], "function_names": ["chhome", "get_user_sid", "list_users", "chgroups", "rename", "setpassword", "chprofile", "getent", "delete", "add", "getUserSid", "__virtual__", "update", "removegroup", "chfullname", "info", "list_groups", "current", "_get_userprofile_from_registry", "addgroup"], "function_calls": ["update", "info", "get_user_sid", "list_users", "chgroups", "_get_userprofile_from_registry", "bool", "list", "str", "list_groups", "int", "sorted", "len", "CommandExecutionError", "set", "isinstance"], "class_names": [], "class_method_calls": ["log.error", "kwargs.pop", "pywintypes.error", "expected_groups.add", "username.split", "win32ts.WTS_CURRENT_SERVER_HANDLE", "log.debug", "win32netcon.MAX_PREFERRED_LENGTH", "win32net.NetUserSetInfo", "win32net.NetUserGetLocalGroups", "win32con.NameSamCompatible", "log.info", "groups.split", "time.mktime", "win32net.NetUserEnum", "logging.getLogger", "ctypes.c_ulong", "win32ts.error", "exc.funcname", "exc.args", "win32ts.WTSLogoffSession", "win32net.NetUserGetInfo", "win32ts.WTSEnumerateSessions", "dt_obj.timestamp", "win32netcon.UF_DONT_EXPIRE_PASSWD", "datetime.fromtimestamp", "datetime.now", "win32netcon.UF_PASSWD_CANT_CHANGE", "win32netcon.UF_LOCKOUT", "win32ts.WTSQuerySessionInformation", "win32api.GetComputerName", "win32netcon.USER_PRIV_USER", "shlex.quote", "win32net.NetUserAdd", "wmi.WMI", "win32net.NetUserDel", "ret.append", "ugrp.add", "win32api.GetUserNameEx", "salt.utils", "exc.winerror", "win32security.ConvertSidToStringSid", "current_groups.union", "win32security.LookupAccountName", "x.strip", "win32netcon.UF_ACCOUNTDISABLE", "win32net.error", "group.strip", "domain.upper", "win32api.GetUserName", "user_list.append", "c.Win32_UserAccount", "exc.strerror", "win32profile.DeleteProfile", "user.Rename", "win32netcon.FILTER_NORMAL_ACCOUNT", "win32netcon.TIMEQ_FOREVER", "username.find", "win32netcon.UF_SCRIPT", "win32ts.WTSUserName"]}, "win_wua.py": {"libraries": ["salt.utils.platform", "salt.utils.win_update", "salt.utils.data", "logging"], "function_names": ["installed", "uptodate", "removed", "__virtual__"], "function_calls": ["isinstance", "list"], "class_names": [], "class_method_calls": ["updates.updates", "item.IsDownloaded", "available_updates.count", "wua.install", "uninstall.updates", "wua.refresh", "logging.getLogger", "wua.download", "wua.updates", "wua.available", "item.IsInstalled", "uninstall.list", "installed_updates.extend", "available_updates.list", "download.updates", "item.KBArticleIDs", "install.list", "comments.append", "wua.search", "uninstall.count", "salt.utils", "wua.uninstall", "update.Title", "install_list.count", "install_list.updates", "removed_updates.extend", "install.updates", "install.count", "updates.count", "update.Identity"]}, "win_wusa.py": {"libraries": ["salt.utils.url", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "salt.exceptions.SaltInvocationError", "logging"], "function_names": ["uninstalled", "installed", "__virtual__"], "function_calls": ["SaltInvocationError"], "class_names": [], "class_method_calls": ["logging.getLogger", "exc.message", "salt.utils"]}, "winrepo.py": {"libraries": ["os", "salt.runner", "salt.syspaths", "salt.config", "itertools", "stat", "salt.utils.path"], "function_names": ["genrepo", "__virtual__"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["os.stat", "salt.runner", "runner.cmd", "os.remove", "salt.syspaths", "salt.config", "itertools.chain", "os.path", "salt.utils", "stat.ST_MTIME"]}, "wordpress.py": {"libraries": [], "function_names": ["deactivated", "installed", "activated", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "x509.py": {"libraries": ["idna", "cryptography.hazmat.primitives.hashes", "salt.utils.files", "datetime", "urllib.parse.urlparse", "os.path", "logging", "cryptography.exceptions.InvalidSignature", "base64", "cryptography.hazmat.primitives.asymmetric.padding", "enum.Enum", "ipaddress", "cryptography", "cryptography.x509", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError", "urllib.parse.urlunparse", "copy", "cryptography.hazmat.primitives.asymmetric.ed25519", "cryptography.hazmat.primitives.serialization.pkcs12", "salt.utils.immutabletypes", "cryptography.hazmat.primitives.serialization", "re", "cryptography.hazmat.primitives.asymmetric.ed448", "salt.utils.odict.OrderedDict", "cryptography.x509.oid.SubjectInformationAccessOID", "cryptography.hazmat.primitives.serialization.pkcs7", "cryptography.hazmat.primitives.asymmetric.ec", "salt.utils.versions", "cryptography.hazmat.primitives.asymmetric.rsa"], "function_names": ["_create_issuing_distribution_point", "generate_ed25519_privkey", "_create_extension", "_render_name_constraints", "_render_authority_key_identifier", "_create_authority_info_access", "_create_name_constraints", "dec2hex", "_create_inhibit_any_policy", "_parse_general_names", "_render_policy_constraints", "_create_ns_cert_type", "_create_key_usage", "_render_subject_key_identifier", "load_csr", "render_extension", "_create_no_check", "_create_issuer_alt_name", "load_file_or_bytes", "_render_invalidity_date", "ensure_cert_kwargs_compat", "_get_serial_number", "_get_oid", "_render_general_names", "_render_basic_constraints", "is_pair", "_render_tlsfeature", "split_pems", "generate_rsa_privkey", "merge_signing_policy", "get_hashing_algorithm", "verify_signature", "_create_crl_distribution_points", "build_crt", "_deserialize_openssl_confstring", "to_der", "_create_crl_number", "load_cert", "load_pubkey", "load_crl", "render_gn", "_render_issuing_distribution_point", "_render_inhibit_any_policy", "_render_crl_reason", "_render_crl_number", "build_crl", "_get_dn", "pretty_hex", "_render_no_check", "_get_rdn", "_create_authority_key_identifier", "_create_invalidity_date", "get_key_type", "generate_ec_privkey", "_get_gn", "_render_key_usage", "to_pem", "_create_subject_alt_name", "_create_certificate_issuer", "_create_freshest_crl", "_render_certificate_policies", "idna_encode", "_parse_distribution_points", "_create_extended_key_usage", "_render_extended_key_usage", "_render_distribution_points", "build_csr", "_create_tlsfeature", "_render_authority_info_access", "_create_basic_constraints", "_create_ns_comment", "load_privkey", "generate_ed448_privkey", "_create_policy_constraints", "_create_certificate_policies", "_create_delta_crl_indicator", "isfile", "_create_subject_key_identifier", "match_pubkey", "_parse_issuer_general_name", "_create_crl_reason"], "function_calls": ["any", "type", "load_file_or_bytes", "range", "_get_dn", "urlparse", "pretty_hex", "_create_extension", "_get_serial_number", "int", "list", "OrderedDict", "CommandExecutionError", "ord", "hasattr", "_get_rdn", "_get_oid", "get_key_type", "str", "len", "is_pair", "dec2hex", "sorted", "isinstance", "_parse_general_names", "split_pems", "_get_gn", "SaltInvocationError", "load_privkey", "to_pem", "_deserialize_openssl_confstring", "load_cert", "isfile", "frozenset", "load_pubkey", "match_pubkey", "iter", "load_csr", "next", "render_gn", "RuntimeError", "hex", "idna_encode", "_parse_distribution_points", "_parse_issuer_general_name", "tuple", "getattr", "urlunparse"], "class_names": ["KEY_TYPE"], "class_method_calls": ["ext.critical", "signing_cert.subject", "cx509.general_name", "EXTENSIONS_ALT_NAMES.items", "key_type.upper", "rev.get", "csr.extensions", "cx509.CertificateRevocationListBuilder", "ca_crt.issuer", "cx509.Certificate", "dpoints.append", "cx509.UniformResourceIdentifier", "ed25519.Ed25519PrivateKey", "val.replace", "builder.next_update", "re.search", "logging.getLogger", "splits.append", "dpoint.get", "cx509.CertificateIssuer", "base64.b64decode", "signing_private_key.public_key", "pubkey_b.public_numbers", "x.split", "revoked_cert.add_extension", "dpoint.relative_name", "list_.extend", "serialization.PublicFormat", "pk.__class__", "cx509.NoticeReference", "ed448.Ed448PrivateKey", "chain.append", "builder.subject_name", "serialization.load_der_private_key", "EXTENDED_KEY_USAGE_OID.get", "cx509.AuthorityKeyIdentifier", "cx509.DistributionPoint", "idna.encode", "passphrase.encode", "cx509.CRLNumber", "SubjectInformationAccessOID.CA_REPOSITORY", "pubkey.verify", "ec.generate_private_key", "datetime.datetime", "cx509.AccessDescription", "cert.tbs_certificate_bytes", "ipaddress.ip_address", "parsed.append", "v.rsplit", "cx509.RevokedCertificateBuilder", "cx509.random_serial_number", "cx509.UserNotice", "extensions.items", "cx509.FreshestCRL", "cx509.NameOID", "kwargs.pop", "x._name", "cx509.ObjectIdentifier", "val.split", "cx509.InhibitAnyPolicy", "val.startswith", "datetime.timedelta", "loaded.cert", "f.read", "url.params", "conf.split", "log.warning", "NAME_ATTRS_ALT_NAMES.items", "KEY_TYPE.RSA", "ed448.Ed448PublicKey", "cx509.load_der_x509_certificate", "dpoint.crl_issuer", "url.query", "list_.append", "line.strip", "conf.startswith", "url.scheme", "loaded.additional_certs", "cx509.CertificateBuilder", "cx509.Name", "re.findall", "serialization.load_pem_public_key", "revoked_cert.build", "invalid.group", "invalid.end", "cx509.CRLDistributionPoints", "private_key.public_key", "gn.value", "description.access_method", "cx509.ReasonFlags", "int.from_bytes", "cert.signature", "typ.lower", "ec.ECDSA", "NAME_ATTRS_OID.items", "cx509.IssuingDistributionPoint", "ext_present.append", "kwargs.update", "rev_cert.not_valid_after", "gn.split", "pkcs7.load_pem_pkcs7_certificates", "v.strip", "bytes.fromhex", "cx509.OCSPNoCheck", "x.dotted_string", "notice.explicit_text", "rendered.append", "dpoint.reasons", "ca_crt.serial_number", "EXTENSIONS_OID.items", "args.values", "pems.splitlines", "rsa.RSAPrivateKey", "serialization.load_der_public_key", "cx509.load_pem_x509_certificate", "ACCESS_OID.get", "csr.public_key", "cx509.IPAddress", "policy.pop", "parsed.rdns", "cx509.CRLReason", "builder.add_revoked_certificate", "x.items", "pub_or_cert.public_bytes", "cx509.PolicyInformation", "privkey.public_key", "cx509.BasicConstraints", "cx509.InvalidityDate", "signing_cert.public_key", "cx509.RegisteredID", "description.access_location", "val.items", "ec.EllipticCurvePublicKey", "cx509.AuthorityInformationAccessOID", "loaded.key", "cx509.load_pem_x509_csr", "cert.signature_hash_algorithm", "cx509.RFC822Name", "x.value", "pems.pop", "builder.add_extension", "cx509.CertificatePolicies", "padding.PKCS1v15", "serialization.load_pem_private_key", "KEY_TYPE.ED25519", "cx509.ExtensionNotFound", "ed25519.Ed25519PublicKey", "digest.upper", "val.lower", "url.netloc", "KEY_TYPE.EC", "cx509.DirectoryName", "loaded.pop", "sn.replace", "padding.MGF1", "private_key_loaded.public_key", "cx509.TLSFeatureType", "cx509.PolicyConstraints", "padding.PSS", "cx509.TLSFeature", "line.startswith", "cx509.CertificateRevocationList", "idna.IDNAError", "cx509.IssuerAlternativeName", "cx509.load_der_x509_csr", "cert.signature_algorithm_oid", "cx509.KeyUsage", "qualifiers.append", "x.name", "rsa.RSAPublicKey", "parsed.extend", "builder.issuer_name", "cx509.ExtendedKeyUsage", "cx509.DeltaCRLIndicator", "ca_crt.extensions", "builder.not_valid_before", "cryptography.__version__", "ca_crt.public_key", "rev_cert.serial_number", "ret.update", "cx509.CRLEntryExtensionOID", "ext.value", "cx509.SubjectAlternativeName", "os.path", "val.get", "immutabletypes.freeze", "cx509.CertificateSigningRequest", "cx509.SubjectKeyIdentifier", "x.certificate", "features.append", "cx509.NameConstraints", "policies.append", "cx509.ExtensionOID", "copy.deepcopy", "parsed_qualifiers.append", "usages.append", "url.path", "dpoint.full_name", "url.fragment", "val.encode", "pubkey_a.public_numbers", "cx509.load_der_x509_crl", "KEY_TYPE.ED448", "ipaddress.ip_network", "cx509.AuthorityInformationAccess", "val.lstrip", "salt.utils", "notice.notice_reference", "cur.append", "policy.policy_qualifiers", "x.strip", "fob.startswith", "serialization.Encoding", "builder.last_update", "cx509.CertificateSigningRequestBuilder", "rsa.generate_private_key", "cx509.DNSName", "pkcs12.load_pkcs12", "pkcs7.load_der_pkcs7_certificates", "cx509.load_pem_x509_crl", "qual.get", "k.strip", "PEM_BEGIN.decode", "fob.encode", "hex_str.hex", "cx509.NameAttribute", "ec.EllipticCurvePrivateKey", "policy.policy_identifier"]}, "x509_v2.py": {"libraries": ["base64", "cryptography.x509", "salt.utils.x509", "salt.state.STATE_INTERNAL_KEYWORDS", "cryptography.hazmat.primitives.hashes", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.exceptions.SaltInvocationError", "cryptography.exceptions.UnsupportedAlgorithm", "datetime", "os.path", "logging", "copy"], "function_names": ["_split_file_kwargs", "_getattr_safe", "_compare_exts", "certificate_managed", "_get_extension_for_oid", "_compareattr_safe", "_compare_csr", "csr_managed", "_compare_ca_chain", "__virtual__", "getextname", "_check_file_ret", "_compare_crl", "_safe_atomic_write", "_filter_state_internal_kwargs", "private_key_managed", "_get_revoked_certificate_by_serial_number", "pem_managed", "_file_managed", "_build_cert", "crl_managed", "_add_sub_state_run", "_compare_cert"], "function_calls": ["any", "type", "_getattr_safe", "_split_file_kwargs", "list", "_compare_exts", "CommandExecutionError", "_get_extension_for_oid", "_compareattr_safe", "str", "_compare_csr", "len", "isinstance", "_compare_ca_chain", "getextname", "SaltInvocationError", "bool", "_check_file_ret", "_compare_crl", "iter", "next", "_safe_atomic_write", "_filter_state_internal_kwargs", "_get_revoked_certificate_by_serial_number", "_file_managed", "enumerate", "_build_cert", "_add_sub_state_run", "getattr", "set", "_compare_cert"], "class_names": [], "class_method_calls": ["ext.critical", "changes.update", "kwargs.pop", "changed.append", "extensions.get", "x509util.load_crl", "x509util.load_cert", "datetime.timedelta", "cur_ext.value", "x509util.build_crt", "hashes.SHA256", "revoked_parsed.append", "ext.value", "cx509.Extensions", "os.path", "file_args.get", "x.serial_number", "current.issuer", "cur_ext.oid", "x509util.load_csr", "x509util.build_crl", "logging.getLogger", "x509util.dec2hex", "current.subject", "ext_changes.values", "signing_cert.public_key", "log.warning", "current.public_key", "sig_privkey.public_key", "current.extensions", "cur.extensions", "rev_changes.values", "removed.append", "base64.b64decode", "copy.deepcopy", "new_cert.fingerprint", "x.oid", "x509util.KEY_TYPE", "x509util.load_privkey", "rev.extensions", "rev.serial_number", "x509util.is_pair", "x509util.get_key_type", "current.next_update", "current.get_revoked_certificate_by_serial_number", "x509util.match_pubkey", "current.key_size", "x509util.merge_signing_policy", "current.serial_number", "extensions.pop", "cur_ext.critical", "current.signature_hash_algorithm", "x509util.verify_signature", "ext.oid", "cx509.ExtensionNotFound", "obj.__class__", "salt.utils", "current_extra.cert", "cx509.CRLNumber", "added.append", "changes.pop", "current.not_valid_after", "datetime.datetime", "kwargs.items", "parsed.update", "x509util.get_hashing_algorithm", "cx509.InvalidVersion", "x509util.build_csr", "builder_extensions.get_extension_for_oid", "x509util.ensure_cert_kwargs_compat", "current.is_signature_valid", "tmp_.write"]}, "xapi_virt.py": {"libraries": ["sys", "salt.modules.cmdmod", "os", "importlib", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "salt.utils.files", "contextlib", "salt.utils.path"], "function_names": ["get_macs", "_get_metrics_record", "list_domains", "_get_xapi_session", "_get_all", "vm_netstats", "reset", "vm_info", "freemem", "vm_state", "_get_record", "freecpu", "is_hyper", "get_nics", "_get_label_uuid", "_check_xenapi", "node_info", "_get_record_by_label", "getFreeCpuCount", "setvcpus", "setmem", "vcpu_pin", "getCpuFeatures", "__virtual__", "vm_cputime", "shutdown", "_get_xtool", "cpu_make_map", "reboot", "stop", "migrate", "_info", "getCpuMhz", "get_disks", "full_info", "pause", "start", "resume", "vm_diskstats", "_get_val"], "function_calls": ["_get_metrics_record", "range", "list_domains", "_get_xapi_session", "getattr", "int", "_get_all", "CommandExecutionError", "vm_info", "_get_record", "get_nics", "_get_label_uuid", "_check_xenapi", "node_info", "_get_record_by_label", "getFreeCpuCount", "map", "getCpuFeatures", "_get_xtool", "cpu_make_map", "bool", "_info", "getCpuMhz", "get_disks", "sum", "len", "_get_val"], "class_names": [], "class_method_calls": ["contextlib.contextmanager", "fp_.read", "_xenapi.Session", "cpulist.split", "cpus.append", "xapi.VBD", "sys.path", "cpus.sort", "macs.append", "ret.append", "importlib.import_module", "salt.modules", "os.path", "salt.utils", "c.split", "session.xenapi", "xapi.VM"]}, "xbpspkg.py": {"libraries": ["glob", "os", "salt.utils.decorators", "salt.utils.pkg", "salt.exceptions.MinionError", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "salt.utils.files", "re", "logging", "salt.utils.data", "salt.utils.path"], "function_names": ["_get_version", "remove", "upgrade_available", "refresh_db", "_rehash", "_check_xbps", "upgrade", "del_repo", "add_repo", "latest_version", "install", "get_repo", "list_upgrades", "_locate_repo_files", "list_repos", "version", "list_pkgs", "__virtual__"], "function_calls": ["any", "_locate_repo_files", "refresh_db", "_rehash", "_check_xbps", "latest_version", "int", "len", "CommandExecutionError", "list_repos", "list_pkgs"], "class_names": [], "class_method_calls": ["__context__.pop", "log.error", "kwargs.pop", "VERSION_MATCH.search", "nb.isdigit", "shell.split", "logging.getLogger", "line.strip", "rewrite_file.writelines", "cmd.extend", "out.splitlines", "write_buff.append", "kwargs.get", "log.trace", "cmd.append", "version_match.group", "regex.match", "line.split", "conf_file.write", "salt.utils", "re.compile", "glob.glob", "decorators.memoize", "ret_val.append", "line.find", "os.remove", "files.extend"]}, "xfs.py": {"libraries": ["os", "time", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.utils.platform", "re", "logging", "salt.utils.data", "salt.utils.path"], "function_names": ["flt", "estimate", "inventory", "devices", "dump", "_verify_run", "getopts", "defragment", "modify", "_xfs_info_get_kv", "__virtual__", "info", "mkfs", "_xfs_estimate_output", "_get_mounts", "_blkid_output", "_xfsdump_output", "_xfs_prune_output", "_xr_to_keyset", "_xfs_inventory_output", "prune_dump", "_parse_xfs_info"], "function_calls": ["_xfs_prune_output", "eval", "_xr_to_keyset", "flt", "_xfs_inventory_output", "range", "_verify_run", "dict", "_xfs_estimate_output", "getopts", "tuple", "_get_mounts", "_parse_xfs_info", "_blkid_output", "len", "CommandExecutionError", "_xfs_info_get_kv", "_xfsdump_output"], "class_names": [], "class_method_calls": ["dev_meta.strip", "log.debug", "time.strftime", "__grains__.get", "os.path", "opt.append", "spc.sub", "logging.getLogger", "serialized.split", "key.strip", "line.strip", "time.localtime", "l.strip", "out.get", "data.append", "options.split", "cmd.append", "fhr.readlines", "items.split", "serialized.replace", "dev.get", "el.strip", "line.split", "kw.split", "salt.utils", "args.split", "summary.append", "data.get", "serialized.startswith", "val.strip", "re.compile", "nfo.pop", "line.startswith", "t.strip", "re.sub", "data.split", "key.lower", "out.split", "dev.pop", "spr.sub", "cnt.append", "kset.split"]}, "xml.py": {"libraries": ["logging"], "function_names": ["value_present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get"]}, "xmpp.py": {"libraries": [], "function_names": ["send_msg_multi", "send_msg", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "yaml.py": {"libraries": ["yaml.scanner", "yaml.parser", "salt.utils.yamlloader.*", "yaml.YAMLError", "salt.utils.yamldumper.*"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "yumpkg.py": {"libraries": ["fnmatch", "salt.utils.environment", "string", "salt.utils.files", "datetime", "salt.utils.functools", "logging", "salt.utils.lazy", "salt.utils.path", "configparser", "salt.utils.pkg", "salt.utils.itertools", "salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError", "salt.utils.pkg.rpm", "itertools", "os", "salt.utils.systemd", "salt.utils.versions.LooseVersion", "re", "contextlib", "salt.utils.data", "salt.exceptions.MinionError", "salt.utils.args", "salt.utils.versions"], "function_names": ["_get_hold", "_parse_output", "_strip_headers", "group_list", "_check_versionlock", "group_install", "list_holds", "_load_all", "list_upgrades", "purge", "hold", "list_repos", "group_diff", "download", "info_installed", "del_repo", "services_need_restart", "list_downloaded", "_normalize_basedir", "group_info", "mod_repo", "version_cmp", "_yum_pkginfo", "list_patches", "_check_args", "_versionlock_pkg", "_check", "__virtual__", "update", "remove", "upgrade_available", "upgrade", "verify", "diff", "clean_metadata", "_yum", "_call_yum", "normalize_name", "get_repo", "file_list", "list_installed_patches", "unhold", "version", "_get_patches", "_add_common_args", "_get_options", "list_pkgs", "refresh_db", "modified", "_get_copr_repo", "_list_pkgs_from_context", "_check_cur", "_bool_to_str", "parse_arch", "_load", "file_dict", "list_repo_pkgs", "_get_yum_config", "__init__", "_parse_repo_file", "_temporarily_unhold", "install", "owner", "_get_yum_config_value", "latest_version"], "function_calls": ["any", "_get_hold", "_parse_output", "_strip_headers", "_check_versionlock", "list_holds", "list", "int", "CommandExecutionError", "list_repos", "hold", "super", "list_downloaded", "str", "_normalize_basedir", "group_info", "len", "sorted", "all", "_yum_pkginfo", "list_patches", "isinstance", "AvailablePackages", "_versionlock_pkg", "_check", "_check_args", "remove", "upgrade", "dict", "SaltInvocationError", "_call_yum", "_yum", "_bool_to_str", "_add_common_args", "_get_patches", "unhold", "globals", "_get_options", "list_pkgs", "refresh_db", "next", "iter", "LooseVersion", "_list_pkgs_from_context", "_get_copr_repo", "_check_cur", "list_repo_pkgs", "_get_yum_config", "_parse_repo_file", "zip", "_temporarily_unhold", "install", "set", "_get_yum_config_value", "latest_version"], "class_names": ["AvailablePackages"], "class_method_calls": ["woarch.rsplit", "line.endswith", "pkginfo.install_date", "include.split", "source.keys", "to_install.append", "unhold_prevented.append", "re.search", "group_pkgs.get", "logging.getLogger", "repofile.endswith", "version_num.split", "value.rsplit", "opt.startswith", "todelete.append", "cp.get", "pkg_to_paths.items", "x.startswith", "self._args", "pkginfo.install_date_time_t", "kwargs.get", "line.partition", "os.makedirs", "worel.rsplit", "has_wildcards.append", "has_comparison.append", "value.lstrip", "section_dict.pop", "pkginfo.name", "repo_dict.setdefault", "datetime.datetime", "pid.strip", "itertools.cycle", "fnmatch.fnmatch", "fileout.write", "os.defpath", "key.lower", "__context__.pop", "kwargs.pop", "self.loaded", "old_as_list.get", "update_cmd.append", "__grains__.get", "self._kwargs", "log.info", "skip.split", "ret.extend", "_setopt.append", "log.warning", "cp.read", "repo_info.get", "parsed._sections", "pkg_to_paths.keys", "line.strip", "os.F_OK", "cp.options", "pkg_to_paths.get", "cmd.extend", "dnf_output.split", "cmd.append", "contextlib.contextmanager", "disablerepo.split", "comments.append", "to_downgrade.append", "output.splitlines", "value.rstrip", "retcodes.get", "re.match", "group_detail.get", "enablerepo.split", "parsed.read", "copr.split", "to_purge.extend", "match.group", "version_to_remove.split", "targets.extend", "_nfo.items", "err.message", "self._dict", "pkginfo.version", "pkg.arch", "log.error", "string.punctuation", "patches.items", "ret.values", "x.version", "self._load_all", "pkg.version", "repo.split", "pkg.repoid", "configparser.ConfigParser", "byrepo_ret.setdefault", "pkg.name", "cmd_prefix.append", "pkgver.split", "dld_result.startswith", "pkg_params_items.append", "context.get", "match.groups", "fromrepo.split", "log.trace", "dld_result.endswith", "ret.setdefault", "cp.has_section", "_available.get", "params.update", "kwargs.items", "to_reinstall.append", "update_cmd.extend", "filerepos.keys", "line.startswith", "services.add", "targets.append", "x.name", "x.lower", "repo.startswith", "pkginfo.arch", "log.debug", "name.split", "old.get", "os.listdir", "ret.update", "section_map.get", "os.path", "basedir.split", "grains.get", "os.access", "version_num.lstrip", "pkgver.startswith", "new.get", "x.vstring", "os.pathsep", "clean_cmd.extend", "configparser.MissingSectionHeaderError", "os.X_OK", "fnmatch.filter", "ret.append", "pkg_params.items", "line.split", "errors.append", "salt.utils", "x.strip", "__opts__.get", "os.unlink", "os.linesep", "os.environ", "pkgname.rsplit", "name.rsplit", "value.split", "g_info.get", "line.lower", "os.remove", "key.startswith", "target.keys", "to_unhold.keys", "conf.get", "version_list.add", "completed_groups.append"]}, "zabbix.py": {"libraries": ["os", "salt.utils.json", "salt.utils.versions.Version", "socket", "urllib.error", "salt.utils.files", "logging", "salt.exceptions.SaltException", "salt.utils.data", "salt.utils.http"], "function_names": ["_map_to_list_of_dicts", "hostinterface_update", "usermacro_deleteglobal", "host_inventory_set", "hostgroup_create", "hostgroup_update", "usermacro_updateglobal", "mediatype_update", "host_create", "host_delete", "user_create", "hostgroup_exists", "_params_extend", "hostinterface_create", "host_get", "hostgroup_delete", "usergroup_delete", "host_list", "usermacro_delete", "usergroup_exists", "user_exists", "hostgroup_list", "usergroup_update", "usergroup_get", "_query", "usergroup_list", "hostinterface_delete", "apiinfo_version", "usermacro_create", "mediatype_delete", "_connarg", "user_deletemedia", "user_getmedia", "__virtual__", "usermacro_update", "get_object_id_by_params", "host_exists", "hostinterface_get", "template_get", "hostgroup_get", "_login", "substitute_params", "user_update", "user_delete", "configuration_import", "mediatype_create", "usermacro_get", "usermacro_createglobal", "host_update", "host_inventory_get", "run_query", "_frontend_url", "compare_params", "usergroup_create", "user_list", "mediatype_get", "get_zabbix_id_mapper", "user_addmedia", "user_get"], "function_calls": ["_map_to_list_of_dicts", "Version", "any", "type", "_params_extend", "host_get", "set", "usergroup_get", "str", "apiinfo_version", "all", "_connarg", "isinstance", "SaltException", "get_object_id_by_params", "dict", "hostgroup_get", "bool", "_login", "substitute_params", "iter", "next", "run_query", "_frontend_url", "compare_params", "len", "_query", "user_get"], "class_names": [], "class_method_calls": ["socket.gethostname", "name.startswith", "result.get", "log.info", "os.path", "query_params.update", "logging.getLogger", "output.append", "connection_args.pop", "params.pop", "connargs.pop", "connection_args.get", "input_object.items", "fp_.read", "macro.endswith", "salt.utils", "medias.extend", "diffdict.update", "urllib.error", "key.startswith", "error.find", "user.get", "difflist.append", "params.setdefault", "macro.startswith", "d_in_e.append"]}, "zcbuildout.py": {"libraries": ["sys", "logging"], "function_names": ["_valid", "__salt", "_invalid", "installed", "_ret_status", "__virtual__"], "function_calls": ["dict", "object", "int", "__salt", "func", "isinstance", "_ret_status"], "class_names": [], "class_method_calls": ["logging.getLogger", "sys.executable", "ret.update", "exec_status.get", "kwargs.get", "log.warning"]}, "zenoss.py": {"libraries": ["logging"], "function_names": ["monitored", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger"]}, "zk_concurrency.py": {"libraries": [], "function_names": ["lock", "unlock", "min_party", "__virtual__"], "function_calls": ["isinstance", "Exception", "all", "len"], "class_names": [], "class_method_calls": []}, "znc.py": {"libraries": ["random", "hashlib", "os.path", "logging", "signal", "salt.utils.path"], "function_names": ["__virtual__", "dumpconf", "rehashconf", "version", "buildmod", "_makepass"], "function_calls": ["range"], "class_names": [], "class_method_calls": ["logging.getLogger", "h.update", "signal.SIGHUP", "h.name", "hashlib.sha256", "signal.SIGUSR1", "hashlib.md5", "h.hexdigest", "cmd.extend", "salt.utils", "os.path", "random.SystemRandom"]}, "zoneadm.py": {"libraries": ["salt.utils.decorators", "salt.utils.path", "logging"], "function_names": ["halt", "_is_globalzone", "shutdown", "attach", "ready", "clone", "verify", "detach", "boot", "list_zones", "reboot", "install", "_is_uuid", "move", "uninstall", "__virtual__"], "function_calls": ["_is_globalzone", "enumerate", "int", "_is_uuid", "sorted", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "zone.index", "zone.split", "zones.keys", "salt.utils", "boot_options.strip"]}, "zonecfg.py": {"libraries": ["salt.utils.decorators", "salt.utils.odict.OrderedDict", "salt.utils.files", "salt.utils.args", "re", "logging", "salt.utils.data", "salt.utils.path"], "function_names": ["add_resource", "_parse_value", "create_from_template", "remove_resource", "create", "delete", "export", "__virtual__", "info", "_resource", "clear_property", "_clean_message", "_is_globalzone", "import_", "_dump_cfg", "set_property", "_property", "update_resource", "_sanitize_value"], "function_calls": ["_parse_value", "_is_globalzone", "_resource", "dict", "_dump_cfg", "str", "_property", "int", "_sanitize_value", "_clean_message", "isinstance"], "class_names": [], "class_method_calls": ["log.debug", "value.startswith", "value.endswith", "line.rstrip", "new_value.append", "item.items", "value.replace", "log.warning", "logging.getLogger", "value.strip", "fp_.readlines", "line.strip", "message.replace", "listparser.split", "message.splitlines", "fp_.write", "value.isdigit", "salt.utils", "re.compile", "value.items", "kwargs.items", "message.remove", "line.startswith", "pair.split"]}, "zookeeper.py": {"libraries": [], "function_names": ["__virtual__", "_check_acls", "present", "acls", "absent"], "function_calls": ["set", "_check_acls", "isinstance", "bool"], "class_names": [], "class_method_calls": ["changes.setdefault"]}, "zpool.py": {"libraries": ["os", "salt.utils.odict.OrderedDict", "logging"], "function_names": ["absent", "_layout_to_vdev", "present", "__virtual__"], "function_calls": ["_layout_to_vdev", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "vdev.split", "log.debug", "default_config.update", "prop.startswith", "__grains__.get", "os.path", "vdevs.append", "properties_update.append", "vdevs.extend", "vdev_disk.split", "log.warning", "vdevs.insert"]}, "zypperpkg.py": {"libraries": ["fnmatch", "salt.utils.environment", "salt.utils.files", "datetime", "salt.utils.functools", "logging", "salt.utils.path", "urllib.parse", "configparser", "salt.utils.pkg", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "salt.utils.event", "salt.exceptions.SaltInvocationError", "salt.utils.pkg.rpm", "fcntl", "os", "time", "salt.utils.systemd", "xml.parsers.expat.ExpatError", "salt.utils.versions.LooseVersion", "re", "xml.dom.minidom", "salt.utils.data", "errno", "salt.exceptions.MinionError", "salt.utils.versions"], "function_names": ["_get_first_aggregate_text", "purge", "del_repo", "_is_xml_mode", "mod_repo", "_find_types", "remove", "_get_available_versions", "file_list", "list_pkgs", "_handle_rpm_lock_file", "_reset", "stderr", "_find_ptf_packages", "list_locks", "list_holds", "_get_installed_patterns", "list_upgrades", "info_installed", "list_patterns", "version_cmp", "_pattern_name", "_is_error", "upgrade_available", "diff", "list_installed_patches", "unhold", "error_msg", "_set_version", "parse_arch", "clean_locks", "list_repo_pkgs", "__init__", "__getattr__", "_clean_cache", "owner", "list_downloaded", "latest_version", "_is_zypper_lock", "list_repos", "pid", "list_installed_patterns", "_get_configured_repos", "services_need_restart", "_is_rpm_lock", "_check_result", "_get_repo_info", "upgrade", "info_available", "_systemd_scope", "_get_patches", "version", "stdout", "refresh_db", "modified", "_uninstall", "_list_pkgs_from_context", "__call__", "install", "resolve_capabilities", "list_provides", "list_products", "_handle_zypper_lock_file", "hold", "download", "__call", "list_patches", "_get_visible_patterns", "__virtual__", "verify", "normalize_name", "_get_scope_versions", "get_repo", "search", "_is_match", "file_dict", "exit_code"], "function_calls": ["any", "list_locks", "list_products", "_get_first_aggregate_text", "list", "_get_installed_patterns", "int", "CommandExecutionError", "__zypper__", "list_installed_patterns", "_get_configured_repos", "info_installed", "del_repo", "_Zypper", "str", "mod_repo", "sorted", "_pattern_name", "list_patches", "_get_visible_patterns", "isinstance", "_get_repo_info", "_find_types", "dict", "info_available", "Wildcard", "SaltInvocationError", "latest_version", "bool", "_systemd_scope", "get_repo", "list_installed_patches", "_get_patches", "globals", "search", "list_pkgs", "refresh_db", "next", "iter", "_uninstall", "_list_pkgs_from_context", "_is_match", "LooseVersion", "tuple", "_clean_cache", "len", "set", "list_downloaded", "_find_ptf_packages"], "class_names": ["Wildcard", "_Zypper"], "class_method_calls": ["self.__called", "self.error_msg", "new_url.query", "ptrn_re.match", "keys.append", "rfh.readline", "pkginfo.install_date", "refresh_opts.extend", "locks.get", "self.__no_raise", "rfile.readline", "__zypper__.SUCCESS_EXIT_CODES", "self.XML_DIRECTIVES", "logging.getLogger", "zypper_output.split", "self.__cmd", "data.strip", "self._handle_zypper_lock_file", "pkg_to_paths.items", "solvable.getAttribute", "solvable.attributes", "self._is_xml_mode", "version.replace", "pkginfo.install_date_time_t", "kwargs.get", "pkgname.startswith", "fcntl.LOCK_UN", "self._reset", "downgrades.append", "err.errno", "text.split", "cmd_install.insert", "_error_msg.append", "exit_code.setter", "cmd_update.insert", "repo_info.update", "self.__call", "self.__systemd_scope", "package_info.get", "self.Z_OP", "added.append", "pkginfo.name", "repo_dict.setdefault", "update_node.getAttribute", "datetime.datetime", "inst_pkgs.items", "nfo.pop", "fnmatch.fnmatch", "configparser.NoSectionError", "new_url.scheme", "node.childNodes", "__context__.pop", "dld_result.getElementsByTagName", "kwargs.pop", "__zypper__.stderr", "node.getAttribute", "pkg_params.keys", "self.TAG_RELEASED", "self._set_version", "__grains__.get", "search_patterns.getElementsByTagName", "log.info", "pkg.split", "log.warning", "self.SUCCESS_EXIT_CODES", "urllib.parse", "re.split", "error_msg.setter", "repos_cfg.sections", "prd.attributes", "self.version", "pkg_to_paths.keys", "line.strip", "pkg_to_paths.get", "time.sleep", "cmd.extend", "i.strip", "__pillar__.get", "out.splitlines", "new_url.netloc", "repos_cfg.read", "cmd.append", "pkg_data.split", "global_opts.append", "pkg_info.extend", "fcntl.lockf", "output.splitlines", "re.match", "self.ZYPPER_LOCK", "get_in_versions.append", "out.append", "kwargs.update", "contextkey.startswith", "__zypper__.exit_code", "self.__exit_code", "match.group", "targets.extend", "self.exit_code", "_nfo.items", "re.sub", "pkginfo.version", "doc.getElementsByTagName", "self.__ignore_repo_failure", "self.name", "log.error", "self._handle_rpm_lock_file", "refresh_opts.append", "self.WARNING_EXIT_CODES", "dom.Document", "element.split", "self.__refresh", "node.nodeValue", "self.RPM_LOCK", "lock_ver.lstrip", "prd.getElementsByTagName", "fname.endswith", "ptfs.append", "configparser.ConfigParser", "cmd_install.append", "self.LOCK_EXIT_CODE", "removed.append", "byrepo_ret.setdefault", "pkgver.split", "self.TAG_BLOCKED", "self._attr_solvable_version", "slv.getAttribute", "self.__error_msg", "dom.parseString", "ret.setdefault", "self._op", "self.__call_result", "self._is_rpm_lock", "fhr.read", "node.attributes", "ALLOWED_SEARCH_OPTIONS.get", "new_url.params", "item.split", "self.__dict__", "meta.items", "lock.update", "line.startswith", "__zypper__.pid", "new_url.path", "targets.append", "self._is_zypper_lock", "self.__root", "log.debug", "repo_info.setdefault", "self._check_result", "pkginfo.arch", "os.listdir", "self.zypper", "os.path", "repo.getAttribute", "__zypper__.stdout", "nfo.get", "self._get_available_versions", "x.vstring", "cmd_update.extend", "self.__no_lock", "result.keys", "self._is_error", "cmd_install.extend", "lock.get", "target.items", "pkg_params.items", "line.split", "ret.append", "fnmatch.filter", "inst_pkgs.update", "__context__.get", "pkg_info.get", "salt.utils", "capability.split", "text.startswith", "cmd_opt.append", "self.__xml", "element.getAttribute", "self.__env", "re.compile", "node.nodeType", "os.linesep", "self._get_scope_versions", "locks.items", "name.rsplit", "lock.pop", "fcntl.LOCK_NB", "new_url.fragment", "cmd_update.append", "status.find", "fcntl.LOCK_EX", "version_list.add", "errno.EAGAIN"]}, "app.py": {"libraries": ["salt.utils.json", "salt.netapi", "logging", "collections.abc.Mapping", "cherrypy.lib.cpstats", "tools.websockets", "traceback", "salt.utils.stringutils", "salt.utils.event", "functools", "io", "itertools", "signal", "multiprocessing.Pipe", "salt", "cherrypy", "os", "time", "collections.abc.Iterator", "multiprocessing.Process", "salt.exceptions", "tarfile", "salt.auth", "salt.utils.args", "salt.utils.versions", "salt.utils.yaml", "urllib.parse.parse_qsl"], "function_names": ["urlencoded_processor", "POST", "event_stream", "lowdata_fmt", "html_override_tool", "hypermedia_out", "GET", "yaml_processor", "hypermedia_handler", "salt_ip_verify_tool", "_is_valid_token", "get_app", "cors_tool", "json_processor", "get_conf", "wrapped", "_setattr_url_map", "hypermedia_in", "salt_api_acl_tool", "salt_auth_tool", "listen", "salt_token_tool", "_update_url_map", "signal_handler", "__init__", "process_request_body", "text_processor", "exec_lowstate"], "function_calls": ["parse_qsl", "type", "out", "list", "int", "hasattr", "super", "len", "fn", "isinstance", "cls", "dict", "Process", "salt_api_acl_tool", "API", "next", "setattr", "listen", "enumerate", "getattr", "Pipe"], "class_names": ["Run", "Token", "Webhook", "Logout", "API", "Keys", "Login", "App", "Stats", "Events", "Jobs", "LowDataAdapter", "Minions", "WebsocketEndpoint"], "class_method_calls": ["request.path_info", "LowDataAdapter._cp_config", "req_head.get", "logger.warning", "handler.send", "pipe.recv", "logging.getLogger", "self.event", "ret.get", "self._is_valid_token", "cherrypy_conf.get", "urlencoded.decode", "io.BytesIO", "cherrypy.HTTPError", "cpstats.extrapolate_statistics", "event.iter_events", "pub_key_file.size", "itertools.chain", "pub_key.encode", "logging.statistics", "signal.SIGTERM", "token.get", "unserialized_data.setdefault", "resolved_tkn.get", "exc.strerror", "contents.read", "handler.pipe", "e.message", "priv_key.encode", "cherrypy.serving", "cherrypy.__version__", "cherrypy.request", "entity.read", "cherrypy.response", "functools.partial", "traceback.format_exc", "cherrypy.dispatch", "tarball.addfile", "self._setattr_url_map", "os._exit", "cherrypy.CherryPyException", "cherrypy.tools", "unserialized_data.items", "logger.debug", "self.opts", "contents.seek", "time.time", "cherrypy.lib", "request._hypermedia_inner_handler", "creds.get", "salt.auth", "self.api", "acl.get", "entity.fp", "cherrypy.config", "cherrypy.Tool", "event_processor.SaltInfo", "self._cp_config", "cherrypy.TimeoutError", "opts.get", "self.tag_base", "request.handler", "self.resolver", "handler.opts", "tarfile.TarInfo", "data.get", "salt.exceptions", "websockets.SynchronizingWebsocket", "self.exec_lowstate", "lowstate.update", "request.headers", "root.get_conf", "self.url_map", "cherrypy.InternalRedirect", "salt.netapi", "request.remote", "self._update_url_map", "os.path", "fileobj.getvalue", "logger.info", "salt_config.get", "cherrypy.session", "tarfile.open", "creds.update", "self.apiopts", "orig_session.get", "tools_config.items", "apiopts.get", "self.auth", "salt.utils", "tarball.close", "functools.wraps", "priv_key_file.size", "proc.start", "logger.error", "__name__.rsplit", "SaltInfo.process", "signal.signal", "fileobj.seek"]}, "event_processor.py": {"libraries": ["salt.utils.json", "threading", "salt.netapi", "logging"], "function_names": ["process_ret_job_event", "publish", "publish_minions", "process_presence_events", "process", "__init__", "process_minion_update", "process_new_job_event", "process_key_event"], "function_calls": ["set", "all", "len"], "class_names": ["SaltInfo"], "class_method_calls": ["self.publish_minions", "self.publish", "minion.update", "log.debug", "self.minions", "salt.netapi", "client.run", "logging.getLogger", "self.process_minion_update", "self.handler", "curr_minion.update", "self.process_ret_job_event", "self.process_presence_events", "salt.utils", "self.process_key_event", "job.setdefault", "tag.split", "self.process_new_job_event", "threading.current_thread", "self.jobs"]}, "websockets.py": {"libraries": ["cherrypy", "ws4py.server.cherrypyserver.WebSocketPlugin", "ws4py.server.cherrypyserver.WebSocketTool", "ws4py.websocket.WebSocket"], "function_names": ["received_message", "__init__"], "function_calls": ["super", "WebSocketPlugin", "WebSocketTool"], "class_names": ["SynchronizingWebsocket"], "class_method_calls": ["cherrypy.tools", "self.pipe", "message.data", "self.opts", "self.token", "cherrypy.engine", "self.send"]}, "wsgi.py": {"libraries": ["cherrypy", "os", "salt.config", "salt.netapi.rest_cherrypy.app"], "function_names": ["bootstrap_app", "wsgi_app", "get_application"], "function_calls": ["bootstrap_app", "get_application"], "class_names": [], "class_method_calls": ["cherrypy.config", "os.environ", "cherrypy.tree", "app.get_app", "salt.config"]}, "saltnado.py": {"libraries": ["fnmatch", "salt.runner", "tornado.ioloop", "salt.utils.json", "tornado.concurrent.Future", "salt.netapi", "tornado.httpserver", "logging", "cgi", "tornado.escape", "salt.utils.event", "time", "tornado.gen", "collections.defaultdict", "salt.exceptions.AuthorizationError", "salt.exceptions.EauthAuthenticationError", "salt.utils.minions", "tornado.web", "salt.client", "salt.auth", "salt.utils.args", "salt.utils.event.tagify", "salt.utils.yaml", "salt.exceptions.AuthenticationError", "copy.copy"], "function_names": ["_handle_event_socket_recv", "on_finish", "initialize", "destroy", "disbatch", "handle_future", "prefix_matcher", "token", "exact_matcher", "set_default_headers", "get", "clean_by_request", "subscribe_minion", "_json_dumps", "_disbatch_runner_async", "_verify_client", "deserialize", "_form_loader", "options", "post", "job_not_running", "_disbatch_local_async", "on_connection_close", "get_event", "prepare", "serialize", "_disbatch_local", "timeout_futures", "_format_call_run_job_async", "more_todo", "_timeout_future", "cancel_inflight_futures", "__init__", "done_callback", "_get_lowstate", "_check_cors_origin", "get_minion_returns", "_disbatch_runner", "find_acceptable_content_type", "_verify_auth"], "function_calls": ["any", "Future", "list", "getattr", "TypeError", "hasattr", "subscribe_minion", "super", "_json_dumps", "isinstance", "copy", "dict", "TimeoutException", "matcher", "EventListener", "more_todo", "cancel_inflight_futures", "Any", "_check_cors_origin", "len", "set", "defaultdict", "tagify", "find_acceptable_content_type"], "class_names": ["WebhookSaltAPIHandler", "BaseSaltAPIHandler", "EventListener", "SaltAuthHandler", "TimeoutException", "JobsSaltAPIHandler", "Any", "RunSaltAPIHandler", "EventsSaltAPIHandler", "SaltAPIHandler", "MinionSaltAPIHandler"], "class_method_calls": ["tornado.ioloop", "EventListener.exact_matcher", "self.set_cookie", "minions.values", "events.remove", "self.lowstate", "chunk.pop", "future.done", "logging.getLogger", "self.event", "self.timeout_futures", "self.set_status", "self._form_loader", "self.done_callback", "f_call.get", "min_wait_time.done", "self.connected", "tornado.gen", "self.ct_out_map", "self.start", "token.get", "self._handle_event_socket_recv", "future.set_result", "self.dumper", "mod_opts.get", "fnmatch.fnmatch", "self.set_header", "log.exception", "self._timeout_future", "accept_header.split", "self._auto_finish", "self.ckminions", "mtag.startswith", "self.request_payload", "self.deserialize", "self.content_type", "self.write", "future.set_exception", "event.set_result", "self.opts", "time.time", "self.get_cookie", "_loop.call_later", "self._format_call_run_job_async", "min_wait_time.set_result", "self.get_arguments", "low.get", "log.error", "self.disbatch", "local_client.run_job_async", "event.done", "self.job_not_running", "self.mod_opts", "event.get", "self._verify_auth", "self.send_error", "prefix_matcher.__func__", "self._get_lowstate", "events.append", "self.finish", "self.redirect", "f.result", "self.request_map", "self.serialize", "salt.runner", "log.debug", "salt.netapi", "chunk.get", "self.timeout_map", "self.get_minion_returns", "self.set_result", "self.tag_map", "tornado.escape", "self.application", "self.saltclients", "future.add_done_callback", "self.flush", "request_headers.split", "is_finished.done", "ret.append", "token_dict.get", "_loop.add_callback", "salt.utils", "cgi.parse_header", "tornado.web", "salt.client", "self.token", "self.done", "self._verify_client", "self.request"]}, "saltnado_websockets.py": {"libraries": ["tornado.websocket", "salt.utils.json", "salt.netapi", "tornado.gen", "logging", "saltnado._check_cors_origin"], "function_names": ["on_message", "check_origin", "open", "on_close", "get"], "function_calls": ["super", "_check_cors_origin", "bool"], "class_names": ["FormattedEventsHandler", "AllEventsHandler"], "class_method_calls": ["self.send_error", "logging.getLogger", "tornado.websocket", "evt_processor.process", "self.token", "self.connected", "tornado.gen", "log.debug", "self.application", "mod_opts.get", "salt.netapi", "self.write_message", "self.close", "event_processor.SaltInfo", "client.run", "salt.utils", "log.info"]}, "rest_wsgi.py": {"libraries": ["errno", "os", "salt.utils.json", "salt.netapi", "wsgiref.simple_server.make_server", "salt.config", "logging", "salt"], "function_names": ["get_headers", "run_chunk", "saltenviron", "get_opts", "start", "application", "read_body", "get_json", "__init__", "mkdir_p", "dispatch", "__virtual__"], "function_calls": ["get_opts", "list", "int", "read_body", "get_json", "str", "HTTPError", "SystemExit", "__virtual__", "get_headers", "run_chunk", "globals", "saltenviron", "start", "make_server", "len", "locals", "dispatch", "start_response"], "class_names": ["HTTPError"], "class_method_calls": ["salt.netapi", "httpd.serve_forever", "client.run", "os.path", "exc.errno", "logging.getLogger", "exc.code", "Exception.__init__", "self.code", "errno.EEXIST", "response_headers.update", "os.makedirs", "salt.utils", "salt.exceptions", "__opts__.get", "os.environ", "environ.get", "response_headers.items", "salt.config"]}, "dson.py": {"libraries": ["dson", "logging"], "function_names": ["render", "__virtual__"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "dson_input.startswith", "log.debug", "dson.loads", "dson_input.read", "dson_input.find", "dson_input.strip"]}, "highstate.py": {"libraries": ["salt.output", "collections", "textwrap", "salt.utils.color", "salt.utils.stringutils", "re", "logging", "pprint", "salt.utils.data"], "function_names": ["_compress_ids", "_format_host", "_nested_changes", "_format_changes", "output", "_format_terse", "_counts"], "function_calls": ["any", "int", "float", "max", "min", "_format_host", "str", "round", "sorted", "isinstance", "map", "_compress_ids", "_nested_changes", "_counts", "iter", "next", "sum", "_format_changes", "output", "_format_terse", "len"], "class_names": [], "class_method_calls": ["log.error", "changestats.append", "hstrs.extend", "sline.format", "data.values", "pdurations.append", "rdurations.append", "textwrap.TextWrapper", "clikwargs.get", "comment.strip", "state_lines.insert", "hstrs.insert", "s.splitlines", "state_output.endswith", "rlabel.values", "data.items", "log.warning", "rcounts.setdefault", "ret.items", "logging.getLogger", "re.search", "ret.get", "pprint.pformat", "re.MULTILINE", "salt.output", "data.splitlines", "fmt_string.format", "rduration.partition", "item.copy", "kwargs.get", "hstrs.append", "tname.split", "ret.setdefault", "collections.Counter", "colorfmt.format", "rcounts.values", "info.get", "key.endswith", "rcounts.get", "salt.utils", "count_match.group", "state_lines.extend", "wrapper.fill", "__opts__.get", "state_output.startswith", "data.keys", "pduration.partition", "_data.get", "hostdata.items", "re.sub", "changes.get"]}, "json_out.py": {"libraries": ["salt.utils.json", "logging"], "function_names": ["output", "__virtual__"], "function_calls": ["str", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "log.error", "log.debug", "salt.utils"]}, "nested.py": {"libraries": ["salt.output", "numbers.Number", "salt.utils.color", "salt.utils.stringutils", "salt.utils.odict", "collections.abc.Mapping"], "function_names": ["__init__", "output", "display", "ustring"], "function_calls": ["repr", "str", "sorted", "len", "NestDisplay", "isinstance"], "class_names": ["NestDisplay"], "class_method_calls": ["self.YELLOW", "ret.items", "salt.output", "fmt.format", "self.ustring", "self.CYAN", "kwargs.get", "self.ENDC", "salt.utils", "self.strip_colors", "out.append", "self.GREEN", "nest.display", "__opts__.get", "self.__dict__", "self.RED", "self.retcode", "self.LIGHT_YELLOW", "ret.keys", "self.display", "ret.splitlines"]}, "newline_values_only.py": {"libraries": [], "function_names": ["_string_list", "_one_level_values", "output", "_get_values"], "function_calls": ["_string_list", "_get_values", "str", "_one_level_values", "isinstance"], "class_names": [], "class_method_calls": ["values.extend", "values.append", "data.items"]}, "no_out_quiet.py": {"libraries": [], "function_names": ["output", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "no_return.py": {"libraries": ["salt.utils.color"], "function_names": ["__init__", "output", "display"], "function_calls": ["NestDisplay", "isinstance", "sorted"], "class_names": ["NestDisplay"], "class_method_calls": ["nest.display", "__opts__.get", "ret.split", "self.display", "salt.utils", "self.colors"]}, "overstatestage.py": {"libraries": ["salt.utils.color"], "function_names": ["output"], "function_calls": ["sorted"], "class_names": [], "class_method_calls": ["__opts__.get", "salt.utils", "comp.items"]}, "pony.py": {"libraries": ["salt.utils.data", "subprocess", "salt.utils.path"], "function_names": ["output", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["subprocess.check_output", "salt.utils"]}, "pprint_out.py": {"libraries": ["pprint"], "function_names": ["output", "__virtual__"], "function_calls": ["str", "isinstance"], "class_names": [], "class_method_calls": ["pprint.pformat"]}, "profile.py": {"libraries": ["os", "salt.utils.stringutils", "cProfile", "subprocess", "pstats", "salt.utils.files", "datetime", "logging", "salt.utils.hashutils", "salt.utils.path"], "function_names": ["profiled_func", "output_profile", "profile_func", "proffunc", "activate_profile"], "function_calls": [], "class_names": [], "class_method_calls": ["log.error", "cProfile.Profile", "log.info", "os.path", "pstats.Stats", "pr.disable", "pr.enable", "logging.getLogger", "pro.stderr", "profiler.dump_stats", "logging.info", "log.trace", "os.makedirs", "fun.__name__", "profiler.runcall", "pr.dump_stats", "salt.utils", "logging.exception", "datetime.datetime", "pro.stdout", "subprocess.Popen", "subprocess.PIPE", "pro.returncode"]}, "progress.py": {"libraries": ["progressbar"], "function_names": ["output", "progress_iter", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["progressbar.Bar", "progressbar.Percentage", "bar.start", "progressbar.ProgressBar", "progressbar.Timer", "bar.update", "progressbar.Counter", "bar.maxval"]}, "raw.py": {"libraries": ["salt.utils.stringutils"], "function_names": ["output"], "function_calls": ["str", "isinstance"], "class_names": [], "class_method_calls": ["salt.utils"]}, "table_out.py": {"libraries": ["functools.reduce", "salt.output", "salt.utils.color", "operator", "salt.utils.data"], "function_names": ["row_wrapper", "prepare_rows", "__init__", "output", "display", "ustring", "wrap_onspace", "display_rows", "_truncate", "__virtual__"], "function_calls": ["row_wrapper", "type", "sum", "justify", "list", "str", "callable", "sorted", "reduce", "len", "zip", "TableDisplay", "isinstance", "map", "max"], "class_names": ["TableDisplay"], "class_method_calls": ["kwargs.pop", "self.display_rows", "labels_temp.append", "self.WHITE", "self.delim", "self.row_delimiter", "self.justify", "self.separate_rows", "table.display", "self.wrapfunc", "ret.get", "line.rfind", "temp_rows.append", "str.rjust", "self.prepare_rows", "str.center", "self.wrap_onspace", "fmt.format", "self.DARK_GRAY", "out.extend", "self.width", "self.ustring", "kwargs.get", "self.LIGHT_GRAY", "temp_row.append", "self.ENDC", "table.ustring", "text.split", "salt.utils", "self._JUSTIFY_MAP", "self.strip_colors", "operator.add", "out.append", "rows.append", "__opts__.get", "self.__dict__", "word.split", "table.WHITE", "str.ljust", "self.has_header", "self.prefix", "self.suffix", "ret.keys", "self.display"]}, "txt.py": {"libraries": ["pprint"], "function_names": ["output"], "function_calls": ["hasattr"], "class_names": [], "class_method_calls": ["value.splitlines", "pprint.pformat"]}, "virt_query.py": {"libraries": [], "function_names": ["output"], "function_calls": ["iter", "next"], "class_names": [], "class_method_calls": []}, "yaml_out.py": {"libraries": ["pprint", "salt.utils.yaml", "logging"], "function_names": ["output", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["pprint.pformat", "logging.getLogger", "log.exception", "salt.utils", "params.update"]}, "payload.py": {"libraries": ["salt.utils.immutabletypes", "salt.utils.stringutils", "salt.transport.frame", "salt.exceptions.SaltDeserializationError", "salt.defaults._Constant", "salt.utils.data.CaseInsensitiveDict", "datetime", "zmq", "logging", "salt.exceptions.SaltReqTimeoutError", "gc", "collections.abc", "salt.utils.msgpack"], "function_names": ["send", "ext_type_decoder", "load", "destroy", "unpackage", "ext_type_encoder", "clear_socket", "socket", "send_auto", "package", "format_payload", "__init__", "verylong_encoder", "__del__", "dumps", "_set_tcp_keepalive", "loads", "dump"], "function_calls": ["type", "dumps", "SaltReqTimeoutError", "SaltDeserializationError", "_Constant", "dict", "pow", "package", "str", "list", "verylong_encoder", "id", "enumerate", "tuple", "set", "isinstance", "hasattr", "loads"], "class_names": ["SREQ"], "class_method_calls": ["zmq.TCP_KEEPALIVE_CNT", "self.linger", "log.critical", "fn_.write", "log.debug", "zmq.IDENTITY", "context.add", "zmq.TCP_KEEPALIVE", "zmq.RECONNECT_IVL_MAX", "immutabletypes.ImmutableDict", "payload.get", "zmq.TCP_KEEPALIVE_INTVL", "log.info", "self.clear_socket", "zmq.TCP_KEEPALIVE_IDLE", "collections.abc", "logging.getLogger", "obj.value", "salt.transport", "self.destroy", "zmq.LINGER", "fn_.read", "self.poller", "self._socket", "fn_.close", "zmq.IPV6", "immutabletypes.ImmutableList", "obj.strftime", "zmq.Context", "log.trace", "obj.copy", "obj.name", "self.socket", "self.opts", "datetime.date", "socket.close", "self.master", "salt.utils", "immutabletypes.ImmutableSet", "zmq.REQ", "zmq.Poller", "datetime.datetime", "self._set_tcp_keepalive", "socket.closed", "socket.setsockopt", "gc.enable", "zmq.IPV4ONLY", "self.context", "zmq.POLLIN", "loads_kwargs.pop", "self.id_", "gc.disable", "self.send"]}, "cmd_json.py": {"libraries": ["salt.utils.json", "logging"], "function_names": ["ext_pillar"], "function_calls": [], "class_names": [], "class_method_calls": ["log.critical", "logging.getLogger", "salt.utils", "command.replace"]}, "cmd_yaml.py": {"libraries": ["salt.utils.yaml", "logging"], "function_names": ["ext_pillar"], "function_calls": [], "class_names": [], "class_method_calls": ["log.critical", "logging.getLogger", "salt.utils", "command.replace"]}, "cmd_yamlex.py": {"libraries": ["salt.serializers.yamlex.deserialize", "logging"], "function_names": ["ext_pillar"], "function_calls": ["deserialize"], "class_names": [], "class_method_calls": ["log.critical", "logging.getLogger", "command.replace"]}, "cobbler.py": {"libraries": ["xmlrpc.client", "logging"], "function_names": ["top"], "function_calls": [], "class_names": [], "class_method_calls": ["xmlrpc.client", "logging.getLogger", "log.exception", "server.login", "log.info", "server.get_blended_data"]}, "confidant.py": {"libraries": ["confidant.client", "confidant.formatter", "copy", "logging"], "function_names": ["get", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "ret.get", "log.debug", "confidant.client", "copy.deepcopy", "client.get_service", "profile_data.get", "confidant.formatter"]}, "consul_pillar.py": {"libraries": ["salt.utils.minions", "consul", "salt.exceptions.CommandExecutionError", "re", "logging", "salt.utils.yaml", "salt.utils.dictupdate.update"], "function_names": ["ext_pillar", "get_conn", "fetch_tree", "pillar_format", "consul_fetch", "_resolve_datacenter", "__virtual__"], "function_calls": ["dict_merge", "get_conn", "repr", "fetch_tree", "CommandExecutionError", "enumerate", "len", "sorted", "pillar_format", "reversed", "consul_fetch", "_resolve_datacenter", "hasattr"], "class_names": [], "class_method_calls": ["log.error", "keys.reverse", "log.debug", "pillar_root_re.search", "opts_pillar.get", "consul.__version__", "logging.getLogger", "opts.get", "opts_merged.update", "opts_merged.get", "params.pop", "match.groupdict", "client.kv", "checker.check_minions", "consul.Consul", "target.format", "target_re.search", "root_re.search", "re.match", "salt.utils", "temp.replace", "re.IGNORECASE", "expand_keys_re.search", "re.compile", "params.get", "profile_re.search", "dc.items", "path.rstrip", "match.group", "keys.pop", "key.startswith", "has_children.search", "re.sub", "key.split", "re.escape"]}, "csvpillar.py": {"libraries": ["salt.utils.files", "csv"], "function_names": ["ext_pillar", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["csv.DictReader", "salt.utils"]}, "digicert.py": {"libraries": ["salt.syspaths", "salt.cache", "logging"], "function_names": ["ext_pillar", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "cache.fetch", "salt.cache", "syspaths.CACHE_DIR"]}, "django_orm.py": {"libraries": ["sys", "salt.exceptions", "os", "salt.utils.stringutils", "subprocess", "virtualenv", "django.db.models.loading.get_model", "logging"], "function_names": ["ext_pillar", "__virtual__"], "function_calls": ["get_model"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "os.environ", "model_orm.__name__", "salt.exceptions", "virtualenv.path_locations", "proj_app.rpartition", "sys.path", "log.debug", "proc.stdout", "model_orm.objects", "value.rstrip", "os.path", "salt.utils", "subprocess.Popen", "django_app.items", "models.items", "subprocess.PIPE"]}, "ec2_pillar.py": {"libraries": ["boto.ec2", "salt.utils.versions.Version", "boto.utils", "re", "logging", "boto.exception"], "function_names": ["_get_instance_info", "ext_pillar", "__virtual__"], "function_calls": ["Version", "_get_instance_info", "enumerate", "len", "isinstance"], "class_names": [], "class_method_calls": ["log.error", "log.debug", "minion_id.split", "__grains__.get", "log.info", "re.search", "instance.tags", "logging.getLogger", "myself.keys", "logging.WARNING", "boto.exception", "inst_data.state", "boto.ec2", "boto.__version__", "boto.utils", "re.match", "conn.get_only_instances", "active_inst.append", "find_filter.update"]}, "etcd_pillar.py": {"libraries": ["salt.utils.etcd_util", "logging"], "function_names": ["ext_pillar", "__virtual__"], "function_calls": ["len"], "class_names": [], "class_method_calls": ["logging.getLogger", "conf.split", "log.error", "salt.utils"]}, "extra_minion_data_in_pillar.py": {"libraries": ["logging"], "function_names": ["ext_pillar", "get_subtree", "__virtual__"], "function_calls": ["get_subtree"], "class_names": [], "class_method_calls": ["logging.getLogger", "data.update", "key.split", "log.trace"]}, "file_tree.py": {"libraries": ["fnmatch", "salt.utils.minions", "os", "salt.utils.stringio", "salt.utils.stringutils", "salt.loader", "salt.utils.files", "logging", "salt.utils.dictupdate", "salt.utils.path", "salt.template"], "function_names": ["ext_pillar", "_ext_pillar", "_construct_pillar", "_check_newline", "_on_walk_error"], "function_calls": ["_ext_pillar", "_construct_pillar", "str", "len", "isinstance", "_check_newline"], "class_names": [], "class_method_calls": ["log.error", "ckminions.check_minions", "log.debug", "os.listdir", "os.path", "logging.getLogger", "contents.endswith", "path_parts.insert", "err.strerror", "env_dirs.append", "salt.loader", "fhr.read", "salt.utils", "data.getvalue", "salt.template", "__opts__.get", "exc.strerror", "fnmatch.fnmatch", "path_parts.pop", "err.filename"]}, "foreman.py": {"libraries": ["requests", "logging"], "function_names": ["ext_pillar", "__virtual__"], "function_calls": ["str", "dict"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "log.exception", "resp.json", "log.debug", "requests.get", "log.info", "parameters.update"]}, "git_pillar.py": {"libraries": ["salt.utils.gitfs", "salt.exceptions.SaltRunnerError", "salt.pillar.git_pillar", "logging"], "function_names": ["update"], "function_calls": ["SaltRunnerError", "iter", "next", "getattr"], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "log.error", "pillar.remotes", "remote.clear_lock", "remote.url", "remote.branch", "remote.fetch", "salt.utils", "remote.id", "logging.DEBUG", "salt.pillar"]}, "hg_pillar.py": {"libraries": ["os", "hglib", "salt.config.DEFAULT_HASH_TYPE", "salt.utils.stringutils", "hashlib", "logging", "salt.pillar", "copy"], "function_names": ["update", "close", "ext_pillar", "__enter__", "__exit__", "pull", "__init__", "__virtual__"], "function_calls": ["any", "getattr", "hash_type", "Repo"], "class_names": ["Repo"], "class_method_calls": ["logging.getLogger", "log.error", "repo.update", "self.working_dir", "salt.pillar", "self.repo", "__opts__.get", "repo.pull", "log.debug", "hglib.clone", "copy.deepcopy", "pil.compile_pillar", "self.close", "self.repo_uri", "os.path", "hglib.open", "salt.utils", "repo.working_dir"]}, "hiera.py": {"libraries": ["salt.utils.yaml", "salt.utils.path", "logging"], "function_names": ["ext_pillar", "__virtual__"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["log.critical", "logging.getLogger", "__grains__.items", "salt.utils"]}, "http_json.py": {"libraries": ["urllib.parse", "re", "logging"], "function_names": ["ext_pillar", "__virtual__"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "log.debug", "match.group", "re.finditer", "url.replace", "re.sub", "urllib.parse"]}, "http_yaml.py": {"libraries": ["urllib.parse", "re", "logging"], "function_names": ["ext_pillar", "__virtual__"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "log.debug", "match.group", "re.finditer", "url.replace", "re.sub", "urllib.parse"]}, "makostack.py": {"libraries": ["os", "mako.exceptions", "salt.utils.data", "functools", "logging", "mako.lookup.TemplateLookup", "salt.utils.yaml"], "function_names": ["ext_pillar", "_cleanup", "_parse_top_cfg", "_process_stack_cfg", "_merge_dict", "_merge_list", "__virtual__"], "function_calls": ["TemplateLookup", "_cleanup", "type", "_parse_top_cfg", "Exception", "list", "_process_stack_cfg", "_merge_dict", "_merge_list", "isinstance"], "class_names": [], "class_method_calls": ["log.debug", "matcher.split", "functools.partial", "log.info", "os.path", "obj.pop", "log.warning", "traverse.keys", "logging.getLogger", "content.splitlines", "cfg.split", "path.startswith", "exceptions.TopLevelLookupException", "salt.utils", "namespace.split", "stack.pop", "exceptions.text_error_template", "kwargs.items", "lookup.get_template", "obj.items", "matchs.get"]}, "mongo.py": {"libraries": ["re", "pymongo", "logging"], "function_names": ["top", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "log.debug", "pymongo.MongoClient", "log.info", "re.sub", "mdb.authenticate"]}, "nodegroups.py": {"libraries": ["salt.utils.minions.CkMinions"], "function_names": ["ext_pillar"], "function_calls": ["CkMinions"], "class_names": [], "class_method_calls": ["all_nodegroups.keys", "ckminions.check_minions", "nodegroups_minion_is_in.append"]}, "pepa.py": {"libraries": ["sys", "glob", "os", "cerberus", "pygments", "pygments.lexers", "getpass", "requests", "jinja2", "pygments.formatters", "salt.utils.files", "re", "logging", "colorlog", "salt.utils.yaml", "argparse"], "function_names": ["ext_pillar", "validate", "key_value_to_tree", "_print_result", "__virtual__"], "function_calls": ["ext_pillar", "iter", "next", "type", "RuntimeError", "validate", "input", "list", "enumerate", "key_value_to_tree", "len", "_print_result", "print", "isinstance"], "class_names": [], "class_method_calls": ["log.error", "log.critical", "log.debug", "parser.parse_args", "stream.setLevel", "s.items", "e.keys", "args.config", "sys.exit", "val.errors", "log.info", "os.path", "logging.Formatter", "pepa_schemas.append", "args.username", "args.url", "argparse.ArgumentParser", "log.warning", "data.items", "tree.copy", "flatkey.split", "__grains__.update", "logging.getLogger", "all_schemas.update", "cerberus.Validator", "logging.StreamHandler", "val.validate", "requests.post", "request.ok", "pygments.lexers", "entry.lower", "__grains__.copy", "args.query_api", "args.grains", "args.debug", "logging.WARNING", "args.hostname", "output.copy", "__pillar__.update", "parser.add_argument", "args.pillar", "args.validate", "pillar.copy", "__opts__.update", "t.setdefault", "pygments.highlight", "__pillar__.copy", "fhr.read", "log.addHandler", "salt.utils", "getpass.getpass", "key.rfind", "args.no_color", "stream.setFormatter", "template.render", "request.text", "jinja2.Template", "glob.glob", "colorlog.ColoredFormatter", "jinja2.UndefinedError", "requests.get", "key.rsplit", "args.password", "log.setLevel", "request.json", "pygments.formatters", "re.sub", "logging.DEBUG"]}, "pillar_ldap.py": {"libraries": ["os", "jinja2", "salt.exceptions.SaltInvocationError", "salt.utils.yaml", "ldap", "logging", "salt.utils.data"], "function_names": ["ext_pillar", "__virtual__", "_render_template", "_config", "_result_to_dict", "_do_search"], "function_calls": ["SaltInvocationError", "_render_template", "sorted", "isinstance", "_config", "_result_to_dict", "_do_search"], "class_names": [], "class_method_calls": ["logging.getLogger", "template.render", "jinja2.FileSystemLoader", "item.split", "env.get_template", "log.critical", "record.get", "log.debug", "jinja2.Environment", "jinja2.exceptions", "result.get", "os.path", "salt.utils", "log.warning"]}, "reclass_adapter.py": {"libraries": ["sys", "reclass.errors.ReclassException", "salt.utils.reclass.set_inventory_base_uri_default", "salt.utils.reclass.filter_out_source_path_option", "reclass", "salt.utils.reclass.prepend_reclass_source_path", "reclass.adapters.salt.top", "salt.exceptions.SaltInvocationError"], "function_names": ["top", "__virtual__"], "function_calls": ["prepend_reclass_source_path", "SaltInvocationError", "set_inventory_base_uri_default", "str", "filter_out_source_path_option", "reclass_top", "__virtual__"], "class_names": [], "class_method_calls": ["sys.path", "__opts__.get"]}, "rethinkdb_pillar.py": {"libraries": ["rethinkdb", "logging"], "function_names": ["ext_pillar", "__virtual__"], "function_calls": ["len"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "conn.close", "log.debug", "rethinkdb.connect", "rethinkdb.table", "data.items", "conn.is_open"]}, "saltclass.py": {"libraries": ["glob", "os", "salt.utils.path", "jinja2.Environment", "re", "logging", "salt.utils.yaml", "jinja2.FileSystemLoader"], "function_names": ["dict_merge", "get_pillars", "render_yaml", "render_jinja", "expand_variables", "get_class_from_file", "expand_classes_in_order", "get_class", "get_class_paths", "match_class_glob", "expanded_dict_from_minion", "find_and_process_re", "find_value_to_expand", "get_tops", "get_env_from_dict", "dict_search_and_replace", "expand_classes_glob"], "function_calls": ["render_yaml", "get_class_from_file", "find_and_process_re", "find_value_to_expand", "Environment", "str", "expand_classes_in_order", "get_class", "isinstance", "expand_classes_glob", "dict_merge", "FileSystemLoader", "render_jinja", "expand_variables", "expanded_dict_from_minion", "get_env_from_dict", "dict_search_and_replace", "match_class_glob", "get_class_paths", "len"], "class_names": [], "class_method_calls": ["a.get", "classes_to_expand.index", "_class.replace", "os.path", "all_classes.extend", "log.warning", "seen_classes.append", "tmp.append", "logging.getLogger", "os.sep", "d.items", "re_v.group", "ord_expanded_classes.append", "matches.extend", "_str.replace", "j_env.get_template", "expanded.append", "salt.utils", "_file.endswith", "v.replace", "_file.replace", "ord_expanded_states.extend", "re_str.startswith", "a.copy", "re_str.lstrip", "glob.glob", "l_files.append", "j_env.globals", "classes.append", "re.finditer", "pillars_dict.update", "a.items", "expanded_classes.append"]}, "sql_base.py": {"libraries": ["salt.utils.odict.OrderedDict", "salt.utils.dictupdate.update", "abc", "logging"], "function_names": ["_get_cursor", "process_results", "fetch", "enter_root", "extract_queries", "_db_name", "process_fields", "__init__", "__virtual__"], "function_calls": ["update", "type", "range", "list", "int", "id", "OrderedDict", "len", "isinstance"], "class_names": ["SqlBaseExtPillar"], "class_method_calls": ["self._get_cursor", "self.as_list", "cursor.fetchall", "self.num_fields", "log.debug", "self.field_names", "self.focus", "log.info", "logging.getLogger", "qbuffer.extend", "self.as_json", "self._db_name", "cursor.description", "self.depth", "ks.reverse", "self.process_results", "listify_dicts.keys", "defaults.update", "self.enter_root", "self.ignore_null", "kwargs.keys", "abc.ABCMeta", "self.result", "cursor.execute", "self.with_lists", "klist.sort", "abc.abstractmethod", "self.process_fields", "self.extract_queries"]}, "sqlcipher.py": {"libraries": ["pysqlcipher.dbapi2", "contextlib.contextmanager", "salt.pillar.sql_base.SqlBaseExtPillar", "logging"], "function_names": ["ext_pillar", "_get_cursor", "_db_name", "_get_options", "__virtual__"], "function_calls": ["float", "SQLCipherExtPillar"], "class_names": ["SQLCipherExtPillar"], "class_method_calls": ["logging.getLogger", "__opts__.get", "err.args", "log.exception", "conn.execute", "self._get_options", "conn.close", "log.debug", "sqlcipher.Error", "conn.cursor", "_options.get", "sqlcipher.connect"]}, "stack.py": {"libraries": ["glob", "os", "posixpath", "jinja2.Environment", "salt.utils.jinja", "functools", "salt.utils.yaml", "logging", "salt.utils.data", "jinja2.FileSystemLoader"], "function_names": ["ext_pillar", "_cleanup", "_process_stack_cfg", "_merge_dict", "_merge_list", "_to_unix_slashes", "_parse_stack_cfg"], "function_calls": ["FileSystemLoader", "_cleanup", "type", "Environment", "Exception", "list", "_process_stack_cfg", "_merge_dict", "sorted", "_merge_list", "_to_unix_slashes", "isinstance", "_parse_stack_cfg"], "class_names": [], "class_method_calls": ["log.debug", "cfg.replace", "matcher.split", "functools.partial", "log.info", "os.path", "jenv.get_template", "obj.pop", "matchs.items", "item.strip", "traverse.keys", "logging.getLogger", "os.sep", "content.splitlines", "posixpath.join", "salt.utils", "stack.pop", "kwargs.items", "glob.glob", "path.split", "jenv.globals", "obj.items", "matchs.get"]}, "svn_pillar.py": {"libraries": ["os", "pysvn", "copy.deepcopy", "hashlib", "salt.pillar.Pillar", "logging"], "function_names": ["update", "ext_pillar", "__init__", "_extract_key_val", "pillar_dir", "__virtual__"], "function_calls": ["any", "SvnPillar", "_extract_key_val", "deepcopy", "Pillar"], "class_names": ["SvnPillar"], "class_method_calls": ["log.error", "self.branch", "log.debug", "pil.compile_pillar", "hashlib.md5", "os.path", "pysvn.Client", "log.warning", "logging.getLogger", "self.repo_dir", "self.repo_location", "delimiter.join", "svnpil.pillar_dir", "os.makedirs", "CLIENT.update", "repo_string.strip", "svnpil.update", "__opts__.get", "self.root", "kv.split", "CLIENT.checkout", "pysvn.ClientError"]}, "varstack_pillar.py": {"libraries": ["varstack"], "function_names": ["ext_pillar", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["varstack.Varstack", "vs.evaluate"]}, "venafi.py": {"libraries": ["salt.syspaths", "salt.cache", "logging"], "function_names": ["ext_pillar", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "cache.list", "syspaths.CACHE_DIR", "cache.fetch", "salt.cache"]}, "virtkey.py": {"libraries": ["salt.utils.virt", "logging"], "function_names": ["ext_pillar"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "vk.accept", "salt.utils"]}, "vmware_pillar.py": {"libraries": ["pyVmomi.vim", "pyVim.connect.Disconnect", "salt.utils.vmware", "datetime", "logging", "salt.utils.dictupdate"], "function_names": ["_serializer", "ext_pillar", "_recurse_config_to_dict", "_crawl_attribute", "__virtual__"], "function_calls": ["_serializer", "type", "next", "iter", "_recurse_config_to_dict", "str", "getattr", "_crawl_attribute", "isinstance", "hasattr", "Disconnect"], "class_names": [], "class_method_calls": ["log.error", "log.debug", "property_types.append", "log.warning", "logging.getLogger", "t_data.__dict__", "data.customValue", "availableField.key", "kwargs.get", "vim.VirtualMachine", "customValue.key", "customValue.value", "t_list.append", "salt.utils", "availableField.name", "obj.utcoffset", "data.availableField", "datetime.datetime", "dictupdate.update", "t_data.items"]}, "win.py": {"libraries": ["win32api", "salt.utils.json", "platform", "timeit", "datetime", "os.path", "logging", "collections", "win32security", "functools.cmp_to_key", "win32process", "sys", "time", "win32con", "re", "collections.OrderedDict", "salt.utils.versions.Version", "salt.utils.odict.OrderedDict", "pywintypes", "winerror", "locale"], "function_names": ["__len__", "guid", "upgrade_code", "__sid_to_username", "get_product_value", "get", "pkg_version_latest", "pkg_version_oldest", "__iter__", "run", "__one_equals_true", "__main", "__get_software_details", "get_install_value", "list_patches", "data", "__next__", "registry_path_text", "__latest_to_oldest_version", "is_install_true", "__collect_software_info", "version_binary", "pkg_version_list", "__squid_to_guid", "package_code", "__software_to_pkg_id", "install_time", "next", "registry_path", "squid", "__init__", "__getitem__", "__version_capture_slp", "__oldest_to_latest_version", "__reg_query_value", "version_only"], "function_calls": ["Version", "RegSoftwareInfo", "range", "list", "cmp_to_key", "int", "OrderedDict", "hasattr", "KeyError", "__main", "str", "len", "sorted", "isinstance", "print", "ValueError", "next", "RuntimeError", "ImportError", "zip", "getattr", "WinSoftware"], "class_names": ["RegSoftwareInfo", "WinSoftware"], "class_method_calls": ["win32con.REG_SZ", "self.__upgrade_code_have_scan", "re.UNICODE", "self.__pkg_cnt", "win32process.IsWow64Process", "win32con.REG_MULTI_SZ", "win32con.REG_DWORD", "pkg_list.data", "re.search", "reg_soft_info.package_code", "logging.getLogger", "data.setdefault", "self.__whitespace_pattern", "collections.deque", "self.__squid", "self.__oldest_to_latest_version", "self.__products_search_list", "reg_soft_info.list_patches", "self.__reg_types", "self.__reg_32bit", "self.__collect_software_info", "self.__mod_time1970", "self.__version_capture_slp", "win32api.NameSamCompatible", "sid_all.append", "timeit.timeit", "re.IGNORECASE", "self.__get_software_details", "self.__reg_upgradecode_path", "self.__reg_patches_path", "datetime.datetime", "publisher.replace", "exc.strerror", "pkg_data.get", "win32security.LookupAccountSid", "self.__squid_pattern", "winerror.ERROR_FILE_NOT_FOUND", "key_software.endswith", "item_value.strip", "self.__reg_hive", "reg_soft_info.get_product_value", "win32security.GetBinarySid", "win32con.KEY_WOW64_32KEY", "logging.Formatter", "time.mktime", "reg_soft_info.version_binary", "self.__software_to_pkg_id", "log.warning", "win32con.REG_EXPAND_SZ", "self.__pkg_obj", "winerror.ERROR_NO_SUCH_DOMAIN", "win32api.NameUserPrincipal", "win32api.RegQueryValueEx", "LOG_CONSOLE.setFormatter", "sys.argv", "reg_soft_info.get_install_value", "name.lower", "name.replace", "re.match", "default_value.startswith", "exc.winerror", "reg_soft_info.is_install_true", "self.__reg_query_value", "logging.DEBUG", "sys.stderr", "reg_soft_info.upgrade_code", "log.error", "self.__reg_uninstall_handle", "sys.exit", "win32con.REG_QWORD", "self.get_product_value", "logging.StreamHandler", "mod_win_time.utctimetuple", "winerror.ERROR_INVALID_DOMAINNAME", "self.pkg_version_list", "guid_match.group", "self.__version_only", "version_data.update", "locale.windows_locale", "win32api.RegEnumKey", "log.addHandler", "win32api.RegQueryInfoKey", "win32con.HKEY_USERS", "win32con.REG_BINARY", "win32con.HKEY_LOCAL_MACHINE", "publisher.lower", "self.__guid_pattern", "self.__sid_to_username", "domain.lower", "log.setLevel", "data.update", "self.__reg_software", "win32security.TranslateName", "winerror.ERROR_NONE_MAPPED", "win32api.RegEnumValue", "self.__upgrade_codes", "self.__version_pattern", "pywintypes.error", "win32api.RegOpenKeyEx", "log.debug", "self.__iter_list", "reg_soft_info.install_time", "os.path", "self.__reg_products_path", "win32con.KEY_WOW64_64KEY", "self.__reg_key_guid", "win32api.RegCloseKey", "self.__patch_list", "self.__reg_products_handle", "self.__sid_pattern", "self.__one_equals_true", "date_object.timetuple", "platform.architecture", "win32con.REG_DWORD_BIG_ENDIAN", "win32con.KEY_READ", "win32api.RegQueryInfoKeyW", "squid_match.group", "ret.append", "win32api.ExpandEnvironmentStrings", "self.__reg_32bit_access", "self.get_install_value", "salt.utils", "win32api.RegEnumKeyEx", "re.compile", "self.__use_32bit_lookup", "self.__reg_uninstall_path", "self.__squid_to_guid", "self.__uninstall_search_list"]}, "dummy.py": {"libraries": ["contextlib.contextmanager", "os", "salt.exceptions.MinionError", "salt.exceptions.CommandExecutionError", "salt.utils.files", "logging", "pprint", "copy", "salt.utils.msgpack"], "function_names": ["package_remove", "_save_state", "service_start", "service_restart", "service_list", "_loaded_state", "package_install", "service_status", "_initial_state", "fns", "package_list", "initialized", "grains", "grains_refresh", "__virtual__", "shutdown", "upgrade", "package_status", "_load_state", "uptodate", "service_stop", "test_from_state", "init", "ping"], "function_calls": ["grains", "_loaded_state", "_load_state", "MinionError", "list", "str", "_save_state", "_initial_state", "CommandExecutionError", "float"], "class_names": [], "class_method_calls": ["pprint.pformat", "logging.getLogger", "os.unlink", "pck.write", "state.get", "log.exception", "log.debug", "copy.deepcopy", "os.path", "salt.utils", "state.pop", "pck.read", "kwargs.get", "log.warning"]}, "netmiko_px.py": {"libraries": ["netmiko.ConnectHandler", "netmiko.NetMikoAuthenticationException", "time", "netmiko.ssh_exception.NetMikoAuthenticationException", "contextlib", "netmiko.NetMikoTimeoutException", "netmiko.ssh_exception.NetMikoTimeoutException", "salt.utils.args", "logging"], "function_names": ["initialized", "shutdown", "conn", "make_con", "args", "alive", "call", "init", "connection", "ping", "__virtual__"], "function_calls": ["initialized", "make_con", "Exception", "call", "getattr", "ConnectHandler", "connection", "ping"], "class_names": [], "class_method_calls": ["proxy_dict.get", "contextlib.contextmanager", "logging.getLogger", "log.error", "opts.get", "log.debug", "proxy_dict.copy", "con.remote_conn", "time.time", "salt.utils", "netmiko_connection_args.pop", "args.copy", "con.disconnect", "log.warning"]}, "pgjsonb_queue.py": {"libraries": ["sys", "contextlib.contextmanager", "salt.utils.json", "salt.exceptions.SaltInvocationError", "logging", "psycopg2", "salt.exceptions.SaltMasterError"], "function_names": ["list_queues", "_list_tables", "_create_table", "_conn", "_list_items", "list_length", "delete", "list_items", "pop", "handle_queue_creation", "_queue_exists", "insert", "__virtual__"], "function_calls": ["list_queues", "_list_tables", "_create_table", "_conn", "SaltInvocationError", "_list_items", "str", "int", "len", "handle_queue_creation", "SaltMasterError", "isinstance", "_queue_exists"], "class_names": [], "class_method_calls": ["psycopg2.IntegrityError", "logging.getLogger", "cur.fetchall", "__opts__.get", "err.args", "cur.executemany", "conn.close", "psycopg2.connect", "log.debug", "cursor.execute", "cur.execute", "conn.cursor", "psycopg2.DatabaseError", "salt.utils", "psycopg2.OperationalError", "defaults.items", "sys.stderr"]}, "sqlite_queue.py": {"libraries": ["glob", "os", "sqlite3", "salt.utils.json", "salt.exceptions.SaltInvocationError", "re", "logging"], "function_names": ["list_queues", "_list_tables", "_create_table", "_conn", "_quote_escape", "insert", "_list_items", "list_length", "delete", "list_items", "pop", "_list_queues", "__virtual__"], "function_calls": ["_list_tables", "_create_table", "_conn", "_quote_escape", "SaltInvocationError", "_list_items", "int", "len", "isinstance", "_list_queues"], "class_names": [], "class_method_calls": ["logging.getLogger", "re.compile", "sqlite3.connect", "cur.fetchall", "sqlite3.IntegrityError", "glob.glob", "cur.executemany", "newitems.append", "log.debug", "cur.execute", "log.info", "os.path", "salt.utils", "con.commit", "rex_sqlquote.sub", "con.cursor", "re.M"]}, "aws_kms.py": {"libraries": ["cryptography.fernet", "boto3", "base64", "salt.utils.stringio", "logging", "botocore.exceptions", "salt.exceptions.SaltConfigurationError"], "function_names": ["_decrypt_object", "_plaintext_data_key", "_decrypt_ciphertext", "_session", "_api_decrypt", "_base64_plaintext_data_key", "_kms", "_cfg_data_key", "_cfg", "render", "__virtual__"], "function_calls": ["_decrypt_object", "_plaintext_data_key", "setattr", "_decrypt_ciphertext", "_session", "getattr", "str", "_base64_plaintext_data_key", "_kms", "SaltConfigurationError", "_api_decrypt", "enumerate", "root_cfg", "_cfg_data_key", "_cfg", "isinstance", "hasattr"], "class_names": [], "class_method_calls": ["log.debug", "log.info", "botocore.exceptions", "logging.getLogger", "__salt__.get", "session.client", "fernet.InvalidToken", "cipher.replace", "plain_text.decode", "plaintext.encode", "kwargs.get", "orig_exc.response", "kms.decrypt", "salt.utils", "kms_cfg.get", "__opts__.get", "cipher.encode", "obj.getvalue", "boto3.Session", "fernet.Fernet", "logging.CRITICAL", "base64.urlsafe_b64encode", "obj.items"]}, "cheetah.py": {"libraries": ["Cheetah.Template.Template"], "function_names": ["render"], "function_calls": ["str", "isinstance", "Template"], "class_names": [], "class_method_calls": ["cheetah_data.strip", "cheetah_data.startswith", "cheetah_data.read", "cheetah_data.find"]}, "genshi.py": {"libraries": ["genshi.template.MarkupTemplate", "genshi.template.OldTextTemplate", "genshi.template.NewTextTemplate"], "function_names": ["render"], "function_calls": ["isinstance", "NewTextTemplate", "OldTextTemplate", "MarkupTemplate"], "class_names": [], "class_method_calls": ["genshi_data.strip", "genshi_data.read", "genshi_data.startswith", "genshi_data.find", "tmpl.generate"]}, "hjson.py": {"libraries": ["hjson"], "function_names": ["render"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["hjson.loads", "hjson_data.read", "hjson_data.startswith", "hjson_data.find", "hjson_data.strip"]}, "json.py": {"libraries": ["salt.utils.stringutils", "salt.utils.data", "json", "logging"], "function_names": ["find_json", "load", "__split", "dumps", "import_json", "loads", "dump"], "function_calls": ["__split", "isinstance", "__import__", "enumerate"], "class_names": [], "class_method_calls": ["json_module.dump", "logging.getLogger", "raw.splitlines", "kwargs.pop", "json.loads", "json_module.loads", "json_module.dumps", "salt.utils", "json.JSONEncoder", "log.trace"]}, "json5.py": {"libraries": ["json5", "logging"], "function_names": ["render", "__virtual__"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "json.loads", "json_data.strip", "json_data.find", "json_data.read", "json_data.startswith"]}, "mako.py": {"libraries": ["os", "salt.utils.url", "mako.lookup.TemplateCollection", "salt.fileclient", "mako.lookup.TemplateLookup", "urllib.parse"], "function_names": ["get_template", "cache_file", "destroy", "__init__", "file_client", "adjust_uri"], "function_calls": ["TemplateLookup", "ValueError", "len"], "class_names": ["SaltMakoTemplateLookup"], "class_method_calls": ["self.cache", "uri.startswith", "file_client.destroy", "self.cache_file", "self.opts", "self._file_client", "self.lookup", "self.file_client", "salt.fileclient", "os.path", "salt.utils", "self.saltenv", "self.pillar_rend", "urllib.parse"]}, "msgpack.py": {"libraries": ["msgpack_pure", "msgpack", "logging"], "function_names": ["pack", "packb", "unpack", "_sanitize_msgpack_kwargs", "__init__", "unpackb", "_sanitize_msgpack_unpack_kwargs"], "function_calls": ["_exceptions", "PackValueError", "_sanitize_msgpack_kwargs", "isinstance", "hasattr", "_sanitize_msgpack_unpack_kwargs"], "class_names": ["Unpacker", "PackValueError", "_exceptions"], "class_method_calls": ["msgpack.packb", "logging.getLogger", "kwargs.setdefault", "kwargs.pop", "msgpack.Packer", "msgpack.dumps", "msgpack.loads", "log.debug", "msgpack.exceptions", "msgpack.ExtType", "msgpack.version", "msgpack.unpackb", "msgpack.unpack", "msgpack.pack", "msgpack.Unpacker"]}, "pass.py": {"libraries": ["os", "os.path.expanduser", "salt.exceptions.SaltConfigurationError", "logging", "subprocess.Popen", "salt.exceptions.SaltRenderError", "subprocess.PIPE", "salt.utils.path"], "function_names": ["_decrypt_object", "_get_pass_exec", "render", "_fetch_secret"], "function_calls": ["_decrypt_object", "_fetch_secret", "SaltRenderError", "expanduser", "str", "Popen", "enumerate", "_get_pass_exec", "SaltConfigurationError", "len", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "os.environ", "pass_data.rstrip", "log.debug", "proc.returncode", "proc.communicate", "salt.utils", "pass_path.startswith", "obj.items", "log.warning", "pass_path.strip"]}, "py.py": {"libraries": ["salt.exceptions.SaltRenderError", "os", "salt.utils.templates"], "function_names": ["render"], "function_calls": ["SaltRenderError"], "class_names": [], "class_method_calls": ["tmp_data.get", "salt.utils", "os.path"]}, "pydsl.py": {"libraries": ["pprint", "salt.state.HighState", "salt.utils.odict.OrderedDict", "uuid.uuid4"], "function_names": ["req", "_remove_auto_require", "state", "track_func", "__str__", "load_highstate", "__iter__", "configure", "include", "to_highstate", "reference", "get_all_decls", "_generate_requsite_method", "_repr", "extend", "__call__", "__init__", "__getattr__", "get_render_stack", "set", "last_func"], "function_calls": ["StateModule", "list", "reversed", "callable", "OrderedDict", "set", "str", "len", "sorted", "StateDeclaration", "isinstance", "Options", "_generate_requsite_method", "mod", "dict", "PyDslError", "StateFunction", "_uuid", "iter", "next", "getattr", "locals"], "class_names": ["Options", "StateModule", "PyDslError", "StateDeclaration", "StateFunction", "Sls"], "class_method_calls": ["HIGHSTATE.clean_duplicate_extends", "sls.track_func", "self.last_func", "self.extends", "self.rendered_sls", "self.get_all_decls", "self.state", "modname.rsplit", "self.decls", "self._name", "highstate.items", "first.__name__", "x.items", "sls.options", "pprint.pformat", "kws.pop", "HIGHSTATE.top_matches", "self.require_index", "m._func", "self._repr", "sls.last_func", "self._mods", "args.append", "m._repr", "sls.get_all_decls", "self.includes", "self.options", "decl._id", "m._name", "self.funcs", "ext._id", "self.require", "HighState.get_active", "sls.funcs", "self._func", "self._state_id", "result.items", "self.mod", "self.saltenv", "decl.items", "decl._repr", "kws.items", "HIGHSTATE.merge_included_states", "last_f.mod", "self.args", "slsmods.append", "HIGHSTATE.get_top", "last_func.mod", "self._id", "HIGHSTATE.render_state", "self.included_highstate", "self.configure", "self.reference", "ext._repr", "sls.decls", "f.mod", "args.remove", "mod._state_id", "self.get", "Sls.get_render_stack", "self.name", "kws.get"]}, "pyobjects.py": {"libraries": ["salt.utils.odict.OrderedDict", "inspect", "logging"], "function_names": ["__enter__", "attrs", "pop_requisite", "need_salt", "make_extend", "__str__", "push_requisite", "__exit__", "__new__", "include", "add", "__set_attributes__", "salt_data", "__prepare__", "empty", "extend", "__call__", "__init__", "__getattr__", "full_func", "make_state"], "function_calls": ["req", "DuplicateState", "list", "OrderedDict", "state", "hasattr", "StateRequisite", "super", "InvalidFunction", "State", "sorted", "isinstance", "iter", "setattr", "enumerate", "__wrapper__", "getattr", "set", "StateExtend"], "class_names": ["StateException", "StateRequisite", "Map", "MapMeta", "InvalidFunction", "StateFactory", "DuplicateState", "State", "Registry", "__wrapper__", "SaltObject", "StateExtend"], "class_method_calls": ["self.kwargs", "log.error", "new_match_info.append", "type.__new__", "cls.requisites", "c.__ordered_attrs__", "Registry.extend", "cls.states", "cls.priority", "logging.getLogger", "match_info.append", "filt.__dict__", "attrs.keys", "req.requisite", "Registry.add", "self.func", "cls.__ordered_attrs__", "cls.__dict__", "state.kwargs", "cls.includes", "self.name", "self.attrs", "self.valid_funcs", "attrs.update", "inspect.isclass", "cls.empty", "grain_targets.add", "Registry.push_requisite", "kwargs.keys", "self._salt", "self.full_func", "state.full_func", "Map.__salt__", "cls.merge", "Registry.pop_requisite", "self.module", "cls.__set_attributes__", "cls.add", "new_match_info.extend", "cls.enabled", "self.id_", "cls.extends", "self.requisite"]}, "stateconf.py": {"libraries": [], "function_names": ["_no_op"], "function_calls": ["dict"], "class_names": [], "class_method_calls": []}, "tomlmod.py": {"libraries": ["toml", "salt.serializers.DeserializationError", "salt.serializers.SerializationError", "logging"], "function_names": ["serialize", "deserialize", "__virtual__"], "function_calls": ["isinstance", "DeserializationError", "SerializationError"], "class_names": [], "class_method_calls": ["logging.getLogger", "toml.loads", "toml.load", "stream_or_string.decode", "toml.dump", "toml.dumps"]}, "wempy.py": {"libraries": ["salt.exceptions.SaltRenderError", "io", "salt.utils.templates"], "function_names": ["render"], "function_calls": ["SaltRenderError"], "class_names": [], "class_method_calls": ["tmp_data.get", "io.StringIO", "salt.utils"]}, "yamlex.py": {"libraries": ["salt.utils.aggregation.Sequence", "yaml.scanner.ScannerError", "salt.utils.odict.OrderedDict", "salt.serializers.SerializationError", "yaml", "datetime", "salt.utils.aggregation.Map", "salt.utils.aggregation.aggregate", "logging", "salt.serializers.DeserializationError", "yaml.nodes.MappingNode", "copy", "yaml.constructor.ConstructorError"], "function_names": ["construct_sls_int", "construct_sls_aggregate", "resolve_sls_tag", "merge_recursive", "construct_sls_reset", "compose_document", "__str__", "serialize", "represent_odict", "construct_sls_str", "deserialize", "construct_yaml_omap", "__repr__"], "function_calls": ["ConstructorError", "type", "SLSString", "merge_recursive", "DeserializationError", "serialize", "hash", "SerializationError", "list", "int", "aggregate", "SLSMap", "isinstance", "getattr", "AggregatedMap", "AggregatedSequence"], "class_names": ["SLSString", "Loader", "Dumper", "SLSMap", "AggregatedMap", "AggregatedSequence"], "class_method_calls": ["Dumper.represent_set", "yaml.load", "Dumper.represent_odict", "log.exception", "Dumper.represent_float", "self.resolve", "yaml.nodes", "Loader.construct_sls_aggregate", "Dumper.represent_undefined", "Dumper.represent_list", "yaml.dumper", "self.flatten_mapping", "log.warning", "Dumper.add_multi_representer", "yaml.dump", "logging.getLogger", "Dumper.represent_bool", "data.items", "Loader.construct_yaml_bool", "Dumper.represent_binary", "node.value", "Loader.construct_yaml_set", "BaseLoader.compose_document", "self.DEFAULT_MAPPING_TAG", "error.problem_mark", "Loader.construct_sls_str", "self.DEFAULT_SEQUENCE_TAG", "Loader.construct_yaml_binary", "Loader.construct_yaml_null", "node.id", "Loader.construct_yaml_map", "self.represent_mapping", "error.problem", "Loader.construct_sls_int", "options.setdefault", "key_node.tag", "Dumper.represent_date", "Dumper.represent_none", "datetime.date", "value_node.tag", "key_node.start_mark", "node.start_mark", "Loader.construct_yaml_seq", "Loader.construct_sls_reset", "response.endswith", "self.construct_scalar", "self.resolve_sls_tag", "Loader.add_multi_constructor", "node.tag", "datetime.datetime", "Dumper.represent_datetime", "yaml.SafeLoader", "ERROR_MAP.get", "Dumper.represent_int", "Loader.add_constructor", "yaml.SafeDumper", "Dumper.represent_str", "Loader.construct_yaml_float", "Loader.construct_yaml_timestamp", "self.construct_object", "Loader.construct_yaml_omap", "Loader.construct_yaml_pairs", "copy.copy"]}, "appoptics_return.py": {"libraries": ["appoptics_metrics", "salt.utils.jid", "salt.returners", "logging"], "function_names": ["_calculate_runtimes", "_get_appoptics", "returner", "_state_metrics", "_get_options", "__virtual__"], "function_calls": ["_calculate_runtimes", "_get_appoptics", "str", "_state_metrics", "sorted", "set", "_get_options", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "options.get", "appoptics_metrics.sanitize_metric_name", "appoptics_metrics.connect", "q.submit", "log.debug", "appoptics_conn.new_queue", "q.add", "log.info", "states.items", "_options.get", "salt.returners", "states_to_report.append"]}, "carbon_return.py": {"libraries": ["contextlib.contextmanager", "pickle", "time", "salt.utils.jid", "socket", "struct", "salt.returners", "logging", "collections.abc.Mapping"], "function_names": ["prep_jid", "_send_textmetrics", "event_return", "returner", "_carbon", "_get_options", "_send_picklemetrics", "_send", "_walk", "__virtual__"], "function_calls": ["int", "handler", "_carbon", "len", "map", "float", "_get_options", "isinstance", "_send", "_walk"], "class_names": [], "class_method_calls": ["log.error", "log.debug", "socket.IPPROTO_TCP", "pickle.dumps", "metric_base.startswith", "log.info", "metrics.append", "logging.getLogger", "opts.get", "struct.pack", "salt.returners", "socket.AF_INET", "log.trace", "time.time", "socket.SHUT_RDWR", "salt.utils", "carbon_sock.shutdown", "socket.SOCK_STREAM", "socket.socket", "value.items", "carbon_sock.close", "sock.send", "carbon_sock.connect"]}, "cassandra_cql_return.py": {"libraries": ["salt.exceptions", "time", "salt.utils.json", "cassandra.query.dict_factory", "salt.utils.jid", "cassandra.cluster.NoHostAvailable", "cassandra.connection.ConnectionException", "salt.exceptions.CommandExecutionError", "salt.returners", "uuid", "logging", "cassandra.auth.PlainTextAuthProvider", "cassandra.connection.ConnectionShutdown", "cassandra.cluster.Cluster"], "function_names": ["prep_jid", "get_fun", "get_minions", "event_return", "returner", "get_jid", "save_minions", "get_load", "save_load", "get_jids", "__virtual__"], "function_calls": ["tuple", "int", "str"], "class_names": [], "class_method_calls": ["logging.getLogger", "ret.get", "log.critical", "event.get", "row.get", "ret.append", "time.time", "uuid.uuid1", "salt.utils"]}, "couchbase_return.py": {"libraries": ["salt.utils.minions", "couchbase", "salt.utils.json", "salt.utils.jid", "logging"], "function_names": ["prep_jid", "_verify_views", "save_load", "_get_connection", "_json_dumps", "_get_ttl", "_format_jid_instance", "returner", "get_jid", "save_minions", "get_load", "_format_job_instance", "_get_options", "get_jids", "__virtual__"], "function_calls": ["set", "prep_jid", "_verify_views", "_get_connection", "_format_jid_instance", "list", "str", "_get_ttl", "save_minions", "sorted", "_format_job_instance", "_get_options"], "class_names": [], "class_method_calls": ["log.error", "cb_.add", "ckminions.check_minions", "ret.update", "cb_.query", "couchbase.set_json_converters", "cb_.get", "cb_.design_get", "result.value", "couchbase.exceptions", "log.warning", "logging.getLogger", "cb_.replace", "result.key", "jid_doc.value", "job.get", "jid_doc.cas", "salt.utils", "__opts__.get", "couchbase.Couchbase", "clear_load.get", "cb_.design_create", "result.doc"]}, "couchdb_return.py": {"libraries": ["time", "salt.utils.json", "urllib.error.HTTPError", "salt.utils.jid", "urllib.request.Request", "urllib.request.build_opener", "salt.returners", "urllib.request.HTTPHandler", "logging"], "function_names": ["prep_jid", "_request", "ensure_views", "get_fun", "get_minions", "_generate_doc", "get_valid_salt_views", "set_salt_view", "returner", "get_jid", "save_minions", "_get_options", "get_jids", "__virtual__"], "function_calls": ["_request", "ensure_views", "get_minions", "_generate_doc", "set_salt_view", "_Request", "len", "_get_options", "get_valid_salt_views", "_build_opener"], "class_names": [], "class_method_calls": ["request.add_header", "logging.getLogger", "handler.read", "log.error", "_ret.append", "request.get_method", "ret.copy", "log.debug", "opener.open", "time.time", "salt.returners", "log.info", "salt.utils", "log.warning"]}, "elasticsearch_return.py": {"libraries": ["datetime.tzinfo", "salt.utils.json", "salt.utils.jid", "datetime.timedelta", "datetime", "salt.returners", "uuid", "logging"], "function_names": ["_convert_keys", "tzname", "prep_jid", "save_load", "event_return", "returner", "get_load", "utcoffset", "dst", "_ensure_index", "_get_options", "__virtual__"], "function_calls": ["_convert_keys", "timedelta", "str", "UTC", "tuple", "len", "_ensure_index", "_get_options", "isinstance"], "class_names": ["UTC"], "class_method_calls": ["k.replace", "logging.getLogger", "ret.get", "datetime.datetime", "new_data.append", "log.debug", "event.get", "uid.split", "datetime.date", "salt.returners", "log.info", "salt.utils", "uid.startswith", "data.items", "uuid.uuid4", "job_fun.replace"]}, "etcd_return.py": {"libraries": ["salt.utils.json", "salt.utils.jid", "salt.utils.etcd_util", "logging"], "function_names": ["prep_jid", "get_fun", "get_minions", "returner", "clean_old_jobs", "_get_conn", "save_minions", "get_load", "get_jid", "save_load", "get_jids", "__virtual__"], "function_calls": ["str", "isinstance", "_get_conn"], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "opts.get", "log.debug", "ret.append", "client.get", "id.split", "client.set", "items.items", "salt.utils"]}, "highstate_return.py": {"libraries": ["email.mime.text.MIMEText", "salt.utils.json", "salt.utils.stringutils", "smtplib", "salt.utils.files", "salt.returners", "io", "logging", "html", "salt.utils.yaml"], "function_names": ["_sprinkle", "_generate_html_table", "_lookup_style", "_dict_to_name_value", "_generate_html", "_produce_output", "returner", "__test_html", "_generate_states_report", "_get_options", "_generate_report", "__virtual__"], "function_calls": ["_generate_html_table", "range", "float", "MIMEText", "str", "sorted", "_produce_output", "isinstance", "__test_html", "_generate_states_report", "_dict_to_name_value", "print", "_get_options", "_sprinkle", "iter", "next", "_lookup_style", "_generate_html", "len", "_generate_report"], "class_names": [], "class_method_calls": ["setup.get", "report.insert", "sub.split", "log.debug", "__grains__.get", "state.split", "output.write", "_STYLES.get", "smtp.sendmail", "data.items", "logging.getLogger", "ret.get", "string_file.seek", "states.append", "io.StringIO", "salt.returners", "out.write", "html.escape", "single.append", "result.append", "subdata.items", "smtp.quit", "retdata.items", "recipients.split", "config_str.split", "salt.utils", "data.get", "x.strip", "msg.as_string", "input_file.read", "smtplib.SMTP", "string_file.read"]}, "influxdb_return.py": {"libraries": ["influxdb", "requests", "salt.utils.decorators.memoize", "salt.utils.jid", "influxdb.influxdb08", "salt.returners", "logging"], "function_names": ["_get_version", "save_load", "prep_jid", "get_fun", "get_minions", "returner", "get_jid", "save_minions", "get_load", "_get_options", "_get_serv", "get_jids", "__virtual__"], "function_calls": ["_get_version", "_get_options", "_get_serv"], "class_names": [], "class_method_calls": ["logging.getLogger", "serv.__module__", "log.critical", "influxdb.InfluxDBClient", "log.debug", "influxdb.influxdb08", "requests.get", "ret.append", "serv.query", "salt.returners", "result.headers", "_options.get", "serv.write_points", "salt.utils"]}, "kafka_return.py": {"libraries": ["salt.utils.json", "confluent_kafka.Producer", "logging"], "function_names": ["returner", "_delivery_report", "_get_conn", "__virtual__"], "function_calls": ["str", "_get_conn", "Producer"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "log.debug", "msg.topic", "producer.poll", "producer.produce", "salt.utils", "msg.partition", "producer.flush"]}, "librato_return.py": {"libraries": ["librato", "salt.utils.jid", "salt.returners", "logging"], "function_names": ["_get_librato", "_calculate_runtimes", "returner", "_get_options", "__virtual__"], "function_calls": ["_get_options", "_calculate_runtimes", "_get_librato", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "librato.sanitize_metric_name", "librato_conn.new_queue", "librato.connect", "log.debug", "q.submit", "q.add", "log.info", "states.items", "_options.get", "salt.returners"]}, "local.py": {"libraries": ["salt.utils.files", "salt.channel.client.ReqChannel", "logging"], "function_names": ["close", "crypted_transfer_decode_dictentry", "__init__", "send"], "function_calls": ["super", "print"], "class_names": ["LocalChannel"], "class_method_calls": ["self.kwargs", "logging.getLogger", "self.tries", "self.opts", "log.debug", "salt.utils", "f.readlines"]}, "local_cache.py": {"libraries": ["errno", "glob", "os", "salt.exceptions", "salt.utils.atomicfile", "salt.utils.minions", "time", "salt.payload", "salt.utils.stringutils", "salt.utils.jid", "salt.utils.files", "salt.utils.msgpack", "bisect", "logging", "salt.utils.job", "shutil"], "function_names": ["_reg_dir", "prep_jid", "get_endtime", "get_jids_filter", "save_reg", "update_endtime", "returner", "_job_dir", "_walk_through", "save_minions", "get_load", "get_jid", "_remove_job_dir", "clean_old_jobs", "save_load", "load_reg", "get_jids"], "function_calls": ["_reg_dir", "range", "prep_jid", "get_endtime", "list", "str", "_job_dir", "_walk_through", "save_minions", "sorted", "len", "_remove_job_dir", "set", "save_load", "isinstance"], "class_names": [], "class_method_calls": ["log.error", "ret.insert", "ckminions.check_minions", "log.exception", "etfile.write", "log.critical", "fn_.write", "log.debug", "os.listdir", "keys.insert", "os.path", "salt.payload", "exc.errno", "log.warning", "logging.getLogger", "os.stat", "SYNDIC_MINIONS_P.format", "all_minions.update", "time.sleep", "errno.EEXIST", "fn_.startswith", "dirs_to_remove.add", "os.makedirs", "shutil.rmtree", "err.errno", "time.time", "salt.utils", "errno.ENOENT", "load.get", "salt.exceptions", "__opts__.get", "minions_cache.extend", "glob.glob", "bisect.bisect", "clear_load.get", "etfile.read"]}, "mattermost_returner.py": {"libraries": ["salt.utils.json", "salt.returners", "salt.utils.mattermost", "logging"], "function_names": ["post_message", "event_return", "returner", "_get_options", "__virtual__"], "function_calls": ["post_message", "_get_options", "dict", "bool"], "class_names": [], "class_method_calls": ["logging.getLogger", "ret.get", "log.error", "log.debug", "salt.returners", "salt.utils", "_options.get"]}, "memcache_return.py": {"libraries": ["salt.utils.json", "memcache", "salt.utils.jid", "salt.returners", "logging"], "function_names": ["prep_jid", "save_load", "_get_list", "_append_list", "get_fun", "get_minions", "returner", "get_jid", "save_minions", "get_load", "_get_options", "_get_serv", "get_jids", "__virtual__"], "function_calls": ["_get_list", "_get_options", "_get_serv", "_append_list"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "log.debug", "serv.add", "serv.get_multi", "serv.get", "value.strip", "returns.items", "loads.items", "salt.returners", "serv.append", "_options.get", "serv.set", "salt.utils", "memcache.Client"]}, "mongo_future_return.py": {"libraries": ["salt.utils.versions.Version", "salt.utils.jid", "pymongo", "salt.returners", "logging"], "function_names": ["save_load", "prep_jid", "_remove_dots", "_safe_copy", "get_fun", "get_minions", "event_return", "returner", "get_jid", "_get_conn", "save_minions", "get_load", "_get_options", "get_jids", "__virtual__"], "function_calls": ["Version", "_remove_dots", "_safe_copy", "_get_conn", "_get_options", "isinstance"], "class_names": [], "class_method_calls": ["mdb.jobs", "log.debug", "sdata.copy", "src.items", "key.replace", "logging.getLogger", "mdb.saltReturns", "salt.returners", "k.replace", "pymongo.uri_parser", "ret.append", "salt.utils", "_options.get", "salt.exceptions", "mdb.events", "pymongo.MongoClient", "pymongo.Connection", "events.copy", "conn.get_database", "pymongo.version"]}, "mongo_return.py": {"libraries": ["salt.utils.versions.Version", "salt.utils.jid", "pymongo", "salt.returners", "logging"], "function_names": ["prep_jid", "_remove_dots", "get_fun", "returner", "get_jid", "_get_conn", "save_minions", "_get_options", "__virtual__"], "function_calls": ["Version", "_remove_dots", "_get_conn", "_get_options", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "mdb.jobs", "log.debug", "pymongo.MongoClient", "pymongo.Connection", "mdb.saltReturns", "sdata.copy", "salt.returners", "salt.utils", "_options.get", "src.items", "key.replace", "mdb.authenticate", "pymongo.version"]}, "multi_returner.py": {"libraries": ["salt.minion", "logging"], "function_names": ["prep_jid", "_mminion", "returner", "get_jid", "clean_old_jobs", "save_minions", "get_load", "save_load", "get_jids"], "function_calls": ["_mminion"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "ret.update", "salt.minion"]}, "nagios_nrdp_return.py": {"libraries": ["logging", "html", "salt.returners", "http.client"], "function_names": ["returner", "_getText", "_get_options", "_post_data", "_prepare_xml", "__virtual__"], "function_calls": ["str", "isinstance", "_get_options", "_post_data", "_prepare_xml"], "class_names": [], "class_method_calls": ["logging.getLogger", "ret.get", "options.get", "node.nodeType", "log.error", "html.escape", "rc.append", "log.debug", "_content.get", "node.TEXT_NODE", "http.client", "salt.returners", "node.data", "salt.utils", "res.get", "res.status_code"]}, "odbc.py": {"libraries": ["salt.utils.json", "salt.utils.jid", "pyodbc", "salt.returners"], "function_names": ["_close_conn", "save_load", "prep_jid", "get_fun", "get_minions", "returner", "get_jid", "_get_conn", "save_minions", "get_load", "_get_options", "get_jids", "__virtual__"], "function_calls": ["_get_options", "_get_conn", "_close_conn"], "class_names": [], "class_method_calls": ["cur.fetchall", "conn.close", "cur.fetchone", "ret.append", "cur.execute", "conn.cursor", "salt.returners", "conn.commit", "pyodbc.connect", "salt.utils", "_options.get"]}, "pgjsonb.py": {"libraries": ["sys", "contextlib.contextmanager", "salt.exceptions", "time", "salt.utils.job", "psycopg2.extras", "salt.returners", "logging", "psycopg2", "salt.utils.data"], "function_names": ["save_load", "prep_jid", "_archive_jobs", "get_fun", "get_minions", "event_return", "returner", "get_jid", "clean_old_jobs", "save_minions", "get_load", "_purge_jobs", "_get_options", "_get_serv", "get_jids", "__virtual__"], "function_calls": ["_archive_jobs", "str", "int", "_purge_jobs", "_get_options", "_get_serv"], "class_names": [], "class_method_calls": ["cur.fetchall", "log.error", "err.args", "log.critical", "conn.server_version", "_options.items", "psycopg2.IntegrityError", "logging.getLogger", "ret.get", "psycopg2.connect", "event.get", "cur.execute", "salt.returners", "conn.close", "psycopg2.extras", "ret.append", "time.time", "salt.utils", "psycopg2.OperationalError", "_options.get", "salt.exceptions", "__opts__.get", "cur.fetchone", "cursor.execute", "conn.cursor", "psycopg2.DatabaseError", "sys.stderr"]}, "postgres_local_cache.py": {"libraries": ["sys", "salt.utils.json", "salt.utils.jid", "re", "logging", "psycopg2", "salt.utils.job"], "function_names": ["_close_conn", "_gen_jid", "prep_jid", "_format_jid_instance", "event_return", "returner", "_escape_jid", "_get_conn", "save_minions", "get_load", "_build_dict", "get_jid", "_format_job_instance", "save_load", "clean_old_jobs", "get_jids", "__virtual__"], "function_calls": ["_close_conn", "_format_jid_instance", "str", "_escape_jid", "int", "_get_conn", "_build_dict", "_format_job_instance", "isinstance", "_gen_jid"], "class_names": [], "class_method_calls": ["cur.fetchall", "log.error", "cur.close", "ret.update", "log.info", "logging.getLogger", "psycopg2.connect", "sys.exc_info", "event.get", "cur.execute", "conn.commit", "conn.close", "job.get", "salt.utils", "psycopg2.OperationalError", "load.get", "cur.fetchone", "clear_load.get", "conn.cursor", "re.sub"]}, "pushover_returner.py": {"libraries": ["salt.exceptions.SaltInvocationError", "salt.utils.pushover", "salt.returners", "logging", "pprint", "urllib.parse"], "function_names": ["_post_message", "_get_options", "returner", "__virtual__"], "function_calls": ["SaltInvocationError", "dict", "_get_options", "_post_message"], "class_names": [], "class_method_calls": ["pprint.pformat", "logging.getLogger", "ret.get", "log.debug", "salt.returners", "log.info", "_options.get", "salt.utils", "urllib.parse"]}, "rawfile_json.py": {"libraries": ["salt.utils.files", "salt.utils.json", "salt.returners", "logging"], "function_names": ["event_return", "_get_options", "returner", "__virtual__"], "function_calls": ["_get_options", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "logfile.write", "salt.returners", "salt.utils"]}, "redis_return.py": {"libraries": ["redis", "salt.utils.json", "salt.utils.jid", "salt.utils.platform", "salt.returners", "rediscluster.StrictRedisCluster", "logging", "salt.utils.job"], "function_names": ["save_load", "prep_jid", "get_fun", "_get_ttl", "get_minions", "returner", "get_jid", "clean_old_jobs", "save_minions", "get_load", "_get_options", "_get_serv", "get_jids", "__virtual__"], "function_calls": ["StrictRedisCluster", "_get_ttl", "list", "len", "set", "_get_options", "_get_serv"], "class_names": [], "class_method_calls": ["serv.delete", "log.debug", "serv.smembers", "serv.get", "logging.getLogger", "ret_key.replace", "pipeline.sadd", "serv.hgetall", "serv.setex", "salt.returners", "pipeline.hset", "serv.keys", "redis.StrictRedis", "salt.utils", "_options.get", "serv.mget", "pipeline.set", "__opts__.get", "to_remove.append", "serv.pipeline", "pipeline.expire", "pipeline.execute"]}, "sentry_return.py": {"libraries": ["raven.Client", "raven.transport.http.HTTPTransport", "salt.utils.jid", "logging"], "function_names": ["prep_jid", "_ret_is_not_error", "_get_message", "_connect_sentry", "returner", "__virtual__"], "function_calls": ["_ret_is_not_error", "_get_message", "_connect_sentry", "sorted", "all", "len", "Client", "isinstance"], "class_names": [], "class_method_calls": ["k.startswith", "logging.getLogger", "raven_config.get", "ret.get", "log.error", "kwargs.items", "servers.append", "result_dict.keys", "result.get", "client.capture", "log.info", "result_dict.items", "salt.utils"]}, "slack_returner.py": {"libraries": ["salt.utils.slack", "salt.returners", "logging", "pprint", "salt.utils.yaml", "urllib.parse"], "function_names": ["_post_message", "_get_options", "returner", "__virtual__"], "function_calls": ["dict", "_get_options", "_post_message"], "class_names": [], "class_method_calls": ["pprint.pformat", "logging.getLogger", "ret.get", "log.error", "log.debug", "returns.items", "salt.returners", "salt.utils", "_options.get", "urllib.parse"]}, "slack_webhook_return.py": {"libraries": ["json", "salt.returners", "logging", "salt.utils.yaml", "salt.utils.http", "urllib.parse"], "function_names": ["_sprinkle", "_generate_payload", "_process_state", "_post_message", "_state_return", "event_return", "returner", "_format_task", "_get_options", "_generate_report", "__virtual__"], "function_calls": ["_sprinkle", "iter", "_generate_payload", "range", "_process_state", "next", "_post_message", "_state_return", "str", "list", "returner", "sorted", "len", "float", "_get_options", "isinstance", "map", "_generate_report"], "class_names": [], "class_method_calls": ["log.error", "sub.split", "query_result.get", "__grains__.get", "state.split", "json.dumps", "ret_data.values", "urllib.parse", "logging.getLogger", "ret.get", "event.get", "salt.returners", "kwargs.get", "report.update", "failed_tasks.append", "returns.items", "config_str.split", "salt.utils", "_options.get", "data.get", "attachments.append", "report.get", "changed_tasks.append"]}, "sms_return.py": {"libraries": ["twilio.base.exceptions.TwilioRestException", "twilio.rest.TwilioException", "twilio", "twilio.rest.Client", "salt.returners", "logging", "twilio.rest.TwilioRestClient", "twilio.TwilioRestException"], "function_names": ["_get_options", "returner", "__virtual__"], "function_calls": ["tuple", "TwilioRestClient", "_get_options", "int"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "client.messages", "twilio.__version_info__", "salt.returners", "_options.get", "e.code"]}, "smtp_return.py": {"libraries": ["os", "email.utils.formatdate", "salt.utils.jid", "smtplib", "salt.loader", "gnupg", "salt.returners", "io", "logging", "salt.template.compile_template"], "function_names": ["prep_jid", "event_return", "returner", "_get_options", "__virtual__"], "function_calls": ["compile_template", "str", "int", "returner", "formatdate", "_get_options", "isinstance"], "class_names": [], "class_method_calls": ["log.error", "server.sendmail", "log.debug", "subject.read", "encrypted_data.status", "server.login", "os.path", "content.read", "logging.getLogger", "server.quit", "event.get", "io.StringIO", "encrypted_data.ok", "salt.returners", "salt.loader", "gpg.encrypt", "salt.utils", "_options.get", "__opts__.get", "encrypted_data.stderr", "server.set_debuglevel", "server.starttls", "gnupg.GPG", "smtplib.SMTP"]}, "sqlite3_return.py": {"libraries": ["salt.utils.json", "sqlite3", "salt.utils.jid", "datetime", "salt.returners", "logging"], "function_names": ["_close_conn", "save_load", "prep_jid", "get_fun", "get_minions", "returner", "get_jid", "_get_conn", "save_minions", "get_load", "_get_options", "get_jids", "__virtual__"], "function_calls": ["_close_conn", "Exception", "str", "_get_conn", "len", "float", "_get_options"], "class_names": [], "class_method_calls": ["logging.getLogger", "sqlite3.connect", "cur.fetchall", "ret.get", "datetime.datetime", "conn.close", "cur.fetchone", "log.debug", "ret.append", "cur.execute", "conn.cursor", "salt.returners", "conn.commit", "_options.get", "salt.utils", "data.pop"]}, "syslog_return.py": {"libraries": ["salt.utils.json", "salt.utils.jid", "syslog", "salt.returners", "logging"], "function_names": ["_verify_options", "prep_jid", "returner", "_get_options", "__virtual__"], "function_calls": ["_verify_options", "len", "getattr", "_get_options", "isinstance", "hasattr"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "bitwise_args.extend", "salt.returners", "syslog.openlog", "salt.utils", "syslog.closelog", "syslog.syslog"]}, "telegram_return.py": {"libraries": ["salt.returners", "logging"], "function_names": ["_get_options", "returner", "__virtual__"], "function_calls": ["_get_options"], "class_names": [], "class_method_calls": ["logging.getLogger", "ret.get", "log.error", "log.debug", "salt.returners", "_options.get"]}, "xmpp_return.py": {"libraries": ["salt.utils.versions.Version", "sleekxmpp.ClientXMPP", "sleekxmpp", "salt.returners", "logging", "pprint"], "function_names": ["start", "__init__", "returner", "_get_options", "__virtual__"], "function_calls": ["SendMsgBot", "Version", "_get_options", "super"], "class_names": ["SendMsgBot", "_ClientXMPP"], "class_method_calls": ["self.send_presence", "logging.getLogger", "log.error", "ret.get", "pprint.pformat", "xmpp.process", "self.recipient", "sleekxmpp.__version__", "self.disconnect", "self.msg", "self.add_event_handler", "self.send_message", "xmpp.register_plugin", "salt.returners", "_options.get", "self.start", "xmpp.connect"]}, "zabbix_return.py": {"libraries": ["os"], "function_names": ["zbx", "zabbix_send", "returner", "save_load", "__virtual__"], "function_calls": ["type", "zabbix_send", "zbx"], "class_names": [], "class_method_calls": ["os.path"]}, "ansible.py": {"libraries": ["salt.modules.cmdmod", "os", "salt.utils.json", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "logging", "salt.utils.path"], "function_names": ["targets", "__virtual__"], "function_calls": ["CommandExecutionError"], "class_names": [], "class_method_calls": ["logging.getLogger", "extra_cmd.append", "salt.modules", "os.path", "salt.utils"]}, "cache.py": {"libraries": ["salt.utils.vault.exceptions.VaultConfigExpired", "salt.utils.vault.leases", "salt.utils.vault.exceptions.VaultLeaseExpired", "time", "logging", "salt.utils.vault.helpers", "salt.cache", "copy"], "function_names": ["flush", "store", "_get_cache_bank", "_check_validity", "_store_ckey", "_list", "exists", "_ckey_exists", "_get_ckey", "_load", "list", "__init__", "_get_cache_backend", "_get_config_cache", "_flush", "get"], "function_calls": ["VaultLeaseExpired", "super", "RuntimeError", "list", "int", "set", "VaultConfigCache"], "class_names": ["VaultAuthCache", "CommonCache", "VaultCache", "VaultLeaseCache", "LeaseCacheMixin", "VaultConfigCache"], "class_method_calls": ["self.config", "kwargs.pop", "self.lease_cls", "self.expire_events", "log.debug", "self.ckey", "hlp.SALT_RUNTYPE_MASTER_IMPERSONATING", "value.to_dict", "log.warning", "self.cbank", "logging.getLogger", "hlp._get_salt_run_type", "opts.get", "self._check_validity", "self._ckey_exists", "self._store_ckey", "self.ttl", "salt.cache", "self._load", "self.flush", "self._list", "cache.contains", "self.opts", "leases.VaultLease", "hlp.SALT_RUNTYPE_MASTER_PEER_RUN", "time.time", "self._flush", "self.flush_exception", "lease.is_valid_for", "leases.VaultToken", "data.get", "self.cache", "cache.fetch", "bank.startswith", "self.context", "self._get_ckey", "lease.is_valid", "self.cache_backend_factory", "copy.copy"]}, "clustershell.py": {"libraries": ["ClusterShell.NodeSet.NodeSet", "socket", "copy"], "function_names": ["targets", "__virtual__"], "function_calls": ["list", "str", "NodeSet", "float", "isinstance", "map"], "class_names": [], "class_method_calls": ["socket.socket", "__opts__.get", "sock.settimeout", "socket.gethostbyname", "sock.close", "sock.connect", "copy.deepcopy", "sock.shutdown", "socket.SHUT_RDWR", "socket.AF_INET", "socket.SOCK_STREAM", "host_addrs.items"]}, "dir.py": {"libraries": ["os", "salt.utils.verify", "salt.loader", "salt.exceptions.CommandExecutionError", "logging", "salt.template"], "function_names": ["targets", "_render"], "function_calls": ["_render", "CommandExecutionError", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "log.debug", "rendered.items", "salt.loader", "os.listdir", "dict.fromkeys", "salt.utils", "os.path", "result.setdefault", "log.warning", "salt.template"]}, "flat.py": {"libraries": ["salt.loader", "salt.roster.get_roster_file", "salt.config", "logging", "salt.template.compile_template"], "function_names": ["targets"], "function_calls": ["get_roster_file", "str", "compile_template"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.config", "salt.loader"]}, "range.py": {"libraries": ["fnmatch", "seco.range", "copy", "logging"], "function_names": ["target_range", "target_glob", "targets", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["r.expand", "logging.getLogger", "log.error", "__opts__.get", "seco.range", "log.debug", "fnmatch.fnmatch", "copy.deepcopy"]}, "scan.py": {"libraries": ["salt._compat.ipaddress", "socket", "logging", "salt.utils.network", "copy"], "function_names": ["__init__", "targets"], "function_calls": ["list", "str", "RosterMatcher", "float", "isinstance", "map"], "class_names": ["RosterMatcher"], "class_method_calls": ["logging.getLogger", "self.tgt", "__opts__.get", "sock.settimeout", "ipaddress.ip_network", "sock.close", "ipaddress.ip_address", "sock.connect", "copy.deepcopy", "rmatcher.targets", "addrs.extend", "sock.shutdown", "socket.SHUT_RDWR", "addrs.append", "salt.utils", "self.tgt_type", "socket.SOCK_STREAM", "log.trace"]}, "sshconfig.py": {"libraries": ["fnmatch", "os", "collections", "salt.utils.stringutils", "salt.utils.files", "re", "logging"], "function_names": ["_get_ssh_config_file", "parse_ssh_config", "targets", "__init__", "ret_glob_minions", "get_data"], "function_calls": ["_get_ssh_config_file", "OSError", "parse_ssh_config", "_SSHConfRegex", "getattr", "RosterMatcher", "isinstance"], "class_names": ["RosterMatcher"], "class_method_calls": ["wildcard_targets.append", "rmatcher.targets", "line.rstrip", "os.path", "self.tgt_type", "os.access", "field.pattern", "logging.getLogger", "self.tgt", "opts.get", "non_wildcard_targets.append", "collections.namedtuple", "self.raw", "targets.keys", "re.match", "salt.utils", "hosts.append", "collections.OrderedDict", "self.get_data", "match.group", "fnmatch.fnmatch", "line.startswith", "field.target_field", "os.R_OK"]}, "sshknownhosts.py": {"libraries": ["salt.utils.files", "os", "salt.utils.stringutils", "logging"], "function_names": ["_parse_ssh_known_hosts_line", "_parse_ssh_known_hosts", "targets"], "function_calls": ["_parse_ssh_known_hosts_line", "_parse_ssh_known_hosts", "OSError", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "log.error", "targets_.update", "line.rstrip", "log.warn", "line_unicode.split", "names.split", "salt.utils", "os.path", "os.R_OK", "os.access"]}, "terraform.py": {"libraries": ["salt.utils.files", "salt.utils.json", "os.path", "logging"], "function_names": ["_cast_output_to_type", "_do_parse_new_state_file", "_handle_new_salt_host_resource", "_do__parse_old_state_file", "targets", "_handle_old_salt_host_resource", "_add_ssh_key", "_parse_state_file"], "function_calls": ["_cast_output_to_type", "_do_parse_new_state_file", "_do__parse_old_state_file", "_handle_new_salt_host_resource", "bool", "int", "len", "_handle_old_salt_host_resource", "_add_ssh_key", "_parse_state_file", "set"], "class_names": [], "class_method_calls": ["log.error", "log.debug", "log.info", "os.path", "module.get", "logging.getLogger", "attrs.keys", "resource.get", "resources.items", "roster_file.endswith", "salt.utils", "tfstate.get", "attrs.get", "instance.get", "__opts__.get", "TF_ROSTER_ATTRS.get", "TF_ROSTER_ATTRS.keys", "roster_entry.get", "rets.append"]}, "runner.py": {"libraries": ["salt.runner"], "function_names": ["cmd"], "function_calls": [], "class_names": [], "class_method_calls": ["runner.run", "local_opts.update", "salt.runner"]}, "asam.py": {"libraries": ["requests", "html.parser", "logging"], "function_names": ["add_platform", "_make_post_request", "list_platforms", "_get_asam_configuration", "_get_platforms", "handle_starttag", "_get_platform_sets", "__init__", "_parse_html_content", "remove_platform", "_get_platformset_name", "list_platform_sets", "__virtual__"], "function_calls": ["_make_post_request", "list_platforms", "_get_asam_configuration", "_get_platforms", "ASAMHTMLParser", "str", "_get_platform_sets", "_parse_html_content", "_get_platformset_name", "list_platform_sets"], "class_names": ["ASAMHTMLParser"], "class_method_calls": ["log.error", "log.debug", "item.startswith", "parameter.split", "parser.feed", "requests.post", "logging.getLogger", "parameter.startswith", "service_config.get", "html.parser", "asam_config.items", "r.raise_for_status", "parser.data", "r.status_code", "requests.codes", "platform_set_list.append", "html_content.remove", "self.data", "item.split", "line.startswith", "r.text", "platform_list.append"]}, "auth.py": {"libraries": ["salt.utils.vault.exceptions.VaultAuthExpired", "salt.utils.vault.leases", "logging"], "function_names": ["is_renewable", "is_valid", "payload", "update_token", "_login", "_write_cache", "__init__", "replace_token", "replace_secret_id", "_replace_token", "get_token", "used"], "function_calls": ["InvalidVaultToken", "VaultAuthExpired", "isinstance", "VaultTokenAuth"], "class_names": ["InvalidVaultToken", "InvalidVaultSecretId", "LocalVaultSecretId", "VaultAppRoleAuth", "VaultTokenAuth", "VaultAppRole"], "class_method_calls": ["logging.getLogger", "self.cache", "self._replace_token", "self._write_cache", "self.token", "self.approle", "self.mount", "log.debug", "leases.VaultSecretId", "cache.get", "self.use_count", "self.num_uses", "self.client", "self._login", "self.secret_id", "leases.VaultToken", "self.renewable", "self.role_id"]}, "bgp.py": {"libraries": ["netaddr.IPAddress", "napalm.base.helpers", "netaddr.IPNetwork", "salt.output"], "function_names": ["_get_bgp_runner_opts", "_display_runner", "_get_mine", "_compare_match", "neighbors", "__virtual__"], "function_calls": ["IPNetwork", "_get_bgp_runner_opts", "IPAddress", "_display_runner", "list", "str", "_get_mine", "_compare_match", "print", "set", "map"], "class_names": [], "class_method_calls": ["vrf_bgp_neighbors.items", "dict1.items", "__opts__.get", "kwargs.pop", "neighbor.get", "salt.output", "kwargs_copy.items", "karg.startswith", "get_bgp_neighbors_all.items", "runner_opts.get", "word.title", "kwargs_copy.update", "field.split", "get_bgp_neighbors_minion.get", "title_parts.append", "get_bgp_neighbors_minion_out.items", "rows.append"]}, "digicertapi.py": {"libraries": ["os", "Cryptodome.PublicKey.RSA", "salt.utils.json", "salt.exceptions.SaltRunnerError", "subprocess", "collections.abc.Sequence", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.syspaths", "re", "M2Crypto.RSA", "logging", "Crypto.PublicKey.RSA", "tempfile", "salt.utils.http", "salt.cache"], "function_names": ["list_domain_cache", "_api_key", "gen_csr", "show_organization", "list_domains", "list_orders", "list_requests", "get_certificate", "del_cached_domain", "_id_map", "__virtual__", "order_certificate", "_base_url", "_paginate", "show_rsa", "list_organizations", "get_org_details", "show_csrs", "gen_key"], "function_calls": ["_paginate", "_api_key", "range", "SaltRunnerError", "gen_csr", "bytes", "_base_url", "str", "int", "gen_key", "CommandExecutionError", "get_org_details", "isinstance", "_id_map"], "class_names": [], "class_method_calls": ["gen.as_pem", "gen.exportKey", "cache.store", "RSA.generate", "common_name_match.group", "subprocess.check_output", "re.search", "RSA.gen_key", "of_.read", "logging.getLogger", "out.splitlines", "salt.cache", "success.append", "tempfile.mkdtemp", "os.write", "cache.list", "syspaths.CACHE_DIR", "if_.write", "salt.utils", "tempfile.mkstemp", "data.get", "os.unlink", "__opts__.get", "domains.split", "failed.append", "cache.fetch", "data.update", "cache.flush", "os.close", "dns_names.append", "os.chmod"]}, "doc.py": {"libraries": ["re", "logging"], "function_names": ["parse_docstring", "strip_rst"], "function_calls": ["list"], "class_names": [], "class_method_calls": ["logging.getLogger", "x.strip", "docs.items", "log.debug", "docstring.splitlines", "match.group", "re.sub", "deps.append", "re.search", "re.M"]}, "error.py": {"libraries": ["salt.utils.error"], "function_names": ["error"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.utils"]}, "f5.py": {"libraries": ["pycontrol.pycontrol", "salt.exceptions.CommandExecutionError"], "function_names": ["check_pool", "create_pool", "check_virtualserver", "add_pool_member", "__init__", "check_member_pool", "_connect", "create_vs", "lbmethods", "__virtual__"], "function_calls": ["CommandExecutionError", "F5Mgmt", "Exception", "list"], "class_names": ["F5Mgmt"], "class_method_calls": ["vs.get_list", "F5.add_pool_member", "self.password", "vs_profile_seq.item", "v.split", "self.bigIP", "vs.create", "self.lb", "vs_def.address", "member.port", "F5.check_virtualserver", "vs_def.name", "F5.check_pool", "mem.address", "pools.get_list", "self.check_pool", "pool.split", "vs_type.RESOURCE_TYPE_POOL", "method.upper", "vs_resource.default_pool_name", "vs_def.port", "vs_profile.profile_name", "vs_resource.type", "resource_seq.item", "self._connect", "vs_def.protocol", "vs.typefactory", "f5.BIGIP", "F5.create_vs", "self.username", "vs_def_seq.item", "vs_profile_http.profile_name", "F5.create_pool", "vs_context.PROFILE_CONTEXT_TYPE_ALL", "vs_profile_conn.profile_name", "protocol.upper", "F5.check_member_pool", "members_seq.items", "vs_profile.profile_context", "member.address"]}, "fileserver.py": {"libraries": ["salt.fileserver"], "function_names": ["update", "envs", "clear_cache", "lock", "file_list", "clear_lock", "empty_dir_list", "clear_file_list_cache", "dir_list", "symlink_list"], "function_calls": ["sorted"], "class_names": [], "class_method_calls": ["fileserver.symlink_list", "fileserver.update", "fileserver.file_list_emptydirs", "fileserver.dir_list", "fileserver.clear_file_list_cache", "fileserver.clear_cache", "fileserver.lock", "salt.fileserver", "fileserver.clear_lock", "fileserver.envs", "fileserver.file_list"]}, "jobs.py": {"libraries": ["fnmatch", "os", "dateutil.parser", "salt.payload", "salt.client", "salt.utils.jid", "salt.exceptions.SaltClientError", "salt.minion", "salt.utils.files", "salt.returners", "salt.utils.args", "logging", "salt.utils.master"], "function_names": ["list_job", "exit_success", "print_job", "lookup_jid", "active", "master", "_get_returner", "_format_jid_instance", "list_jobs_filter", "last_run", "_walk_through", "list_jobs", "_format_job_instance"], "function_calls": ["list_job", "iter", "next", "print_job", "dict", "_get_returner", "_format_jid_instance", "list", "NotImplementedError", "sorted", "list_jobs", "print", "_format_job_instance", "isinstance"], "class_names": [], "class_method_calls": ["log.error", "ret.update", "os.listdir", "log.info", "os.path", "salt.payload", "active_.items", "logging.getLogger", "dateutil_parser.parse", "client.cmd", "mminion.returners", "__jid_event__.fire_event", "job.get", "salt.minion", "active_.keys", "salt.utils", "data.get", "__opts__.get", "salt.client", "fnmatch.fnmatch"]}, "launchd.py": {"libraries": ["sys", "os"], "function_names": ["write_launchd_plist"], "function_calls": [], "class_names": [], "class_method_calls": ["sys.executable", "plist_sample_text.format", "sys.exit", "os.path", "sys.stderr"]}, "manage.py": {"libraries": ["salt.wheel", "salt.exceptions.SaltClientError", "salt.key", "salt.utils.files", "logging", "tempfile", "salt.utils.path", "salt.version", "salt.client.ssh", "uuid", "os", "time", "subprocess", "re", "operator", "salt.exceptions.SaltSystemExit", "salt.utils.minions", "urllib.request", "salt.utils.compat", "salt.client", "salt.utils.versions"], "function_names": ["joined", "list_state", "alived", "_ping", "list_not_state", "bootstrap", "safe_accept", "bootstrap_psexec", "status", "down", "not_reaped", "not_present", "not_alived", "allowed", "reaped", "key_regen", "present", "not_allowed", "versions", "not_joined", "up"], "function_calls": ["list_state", "status", "dict", "str", "_ping", "list_not_state", "len", "sorted", "print", "set"], "class_names": [], "class_method_calls": ["salt.wheel", "log.error", "client.get_cli_event_returns", "salty_rx.findall", "__opts__.copy", "log.debug", "master_version.string", "salt.key", "subprocess.call", "os.path", "ssh_client.cmd", "fingerprints.get", "ret.items", "logging.getLogger", "salt.version", "batch_file.write", "key.list_keys", "y.split", "client.cmd", "operator.itemgetter", "returned.add", "__jid_event__.fire_event", "client.run_job", "salt_key.finger", "ret.setdefault", "key.ACC", "salt.utils", "tempfile.mkstemp", "re.compile", "urllib.request", "salt.client", "fn_ret.items", "minion_version.string", "client._get_timeout", "not_connected.append", "vb_script.format", "tmp_dir.rstrip", "wheel.call_func", "ckminions.connected_ids", "os.remove", "time.strptime", "FINGERPRINT_REGEX.match", "failures.items", "hosts.split", "uuid.uuid4"]}, "net.py": {"libraries": ["salt.utils.platform", "salt.ext.win_inet_pton", "socket", "re"], "function_names": ["__ip_addr", "netmask", "ipv6_addr", "ip_addr", "ipv4_addr", "mac"], "function_calls": ["__ip_addr", "ipv6_addr", "int", "sorted", "len", "ipv4_addr", "isinstance"], "class_names": [], "class_method_calls": ["re.compile", "addr.rsplit", "re.VERBOSE", "socket.AF_INET6", "re.IGNORECASE", "mask.split", "salt.utils", "valid.match", "socket.AF_INET", "socket.inet_pton"]}, "queue.py": {"libraries": ["salt.exceptions.SaltInvocationError", "salt.utils.event.get_event", "salt.loader", "salt.utils.event.tagify"], "function_names": ["list_queues", "insert_runner", "process_queue", "list_length", "delete", "list_items", "pop", "__get_queue_opts", "process_runner", "insert"], "function_calls": ["get_event", "process_queue", "SaltInvocationError", "pop", "__get_queue_opts", "isinstance", "tagify", "insert"], "class_names": [], "class_method_calls": ["__opts__.get", "__jid_event__.fire_event", "event_bus.fire_event", "salt.loader", "args.split"]}, "spacewalk.py": {"libraries": ["logging", "xmlrpc.client", "atexit"], "function_names": ["api", "deleteAllSystems", "_disconnect_session", "_get_client_and_key", "_get_spacewalk_configuration", "deleteAllGroups", "_get_session", "addGroupsToKey", "deleteAllActivationKeys", "unregister", "__virtual__"], "function_calls": ["endpoint", "Exception", "_get_client_and_key", "_get_spacewalk_configuration", "_get_session", "getattr"], "class_names": [], "class_method_calls": ["xmlrpc.client", "logging.getLogger", "log.error", "atexit.register", "service_config.get", "client.system", "ids.append", "client.systemgroup", "deleted_keys.append", "failed_groups.append", "failed_keys.append", "deleted_groups.append", "spacewalk_config.items", "names.append", "client.activationkey", "groupIds.append", "command.rpartition"]}, "survey.py": {"libraries": ["hashlib", "salt.client", "difflib", "salt.exceptions.SaltClientError"], "function_names": ["_get_pool_results", "diff", "hash"], "function_calls": ["enumerate", "str", "len", "sorted", "print", "_get_pool_results"], "class_names": [], "class_method_calls": ["kwargs.pop", "kwargs.items", "salt.client", "client.cmd", "sorted_ret.append", "hashlib.sha256", "difflib.unified_diff", "key.startswith"]}, "thin.py": {"libraries": ["contextvars", "salt.utils.json", "salt.utils.files", "logging", "salt.utils.hashutils", "certifi", "tempfile", "looseversion", "importlib.util", "salt.utils.path", "backports.ssl_match_hostname", "salt.version", "salt.utils.stringutils", "backports_abc", "salt.ext.ssl_match_hostname", "yaml", "salt", "distro", "copy", "sys", "os", "subprocess", "markupsafe", "singledispatch", "salt.ext.backports_abc", "packaging", "msgpack", "zlib", "tornado", "salt.exceptions", "tarfile", "jinja2", "singledispatch_helpers", "zipfile", "site", "immutables", "shutil"], "function_names": ["gen_min", "gte", "_get_salt_call", "find_site_modules", "getsitepackages", "_get_ext_namespaces", "get_tops_python", "gen_thin", "_get_thintar_prefix", "_is_shareable", "get_tops", "_add_dependency", "import_module", "min_sum", "thin_path", "get_ext_tops", "_pack_alternative", "_get_supported_py_config", "thin_sum"], "function_calls": ["gen_min", "__import__", "_get_salt_call", "find_site_modules", "getsitepackages", "_get_ext_namespaces", "int", "hasattr", "get_tops_python", "gen_thin", "str", "_get_thintar_prefix", "_is_shareable", "NotImplementedError", "get_tops", "isinstance", "_add_dependency", "import_module", "get_ext_tops", "globals", "_pack_alternative", "RuntimeError", "_get_supported_py_config", "tuple", "locals"], "class_names": [], "class_method_calls": ["zipfile.ZIP_DEFLATED", "log.error", "obj.__file__", "egg.extractall", "site.getsitepackages", "log.debug", "libs.append", "required.append", "tops_py_version_mapping.items", "os.path", "tops.append", "container.append", "root.startswith", "os.access", "log.warning", "shutil.move", "config.items", "logging.getLogger", "so_mods.split", "salt.version", "pymap.append", "mod.__name__", "os.R_OK", "zipfile.ZIP_STORED", "mod_file.replace", "copy.deepcopy", "lib.getsitepackages", "cmd.communicate", "tarfile.open", "os.getcwd", "spec.loader", "name.endswith", "required.pop", "template.replace", "sys.argv", "os.makedirs", "tfp.write", "os.X_OK", "sys.path", "fp_.write", "os.chdir", "tempfile.mkdtemp", "fh.read", "required.index", "shutil.rmtree", "tfp.getinfo", "cfg.get", "exclude.append", "salt.utils", "digest_collector.add", "tempfile.mkstemp", "digest_collector.digest", "salt.exceptions", "deps.keys", "os.linesep", "fh_.read", "cfg_copy.items", "extra_mods.split", "mod.endswith", "zipfile.ZipFile", "os.remove", "mods.append", "os.close", "tfp.close", "subprocess.Popen", "sys.version_info", "tfp.add", "subprocess.PIPE", "importlib.util"]}, "venafiapi.py": {"libraries": ["sys", "vcert", "time", "salt.utils.json", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.syspaths", "logging", "vcert.common.CertificateRequest", "salt.cache"], "function_names": ["list_domain_cache", "_init_connection", "__virtual__", "request", "show_cert", "del_cached_domain", "_id_map"], "function_calls": ["CertificateRequest", "_init_connection", "Exception", "CommandExecutionError", "isinstance"], "class_names": [], "class_method_calls": ["log.error", "request.update_from_zone_config", "request.private_key_pem", "cache.store", "pkey_file.read", "domain_data.get", "sys.exit", "log.info", "logging.getLogger", "time.sleep", "conn.request_cert", "salt.cache", "csr_file.read", "success.append", "cert.cert", "cache.list", "syspaths.CACHE_DIR", "time.time", "salt.utils", "conn.retrieve_cert", "__opts__.get", "cert.chain", "domains.split", "key_password.startswith", "failed.append", "cache.fetch", "cache.flush", "vcert.Connection", "dns_names.append", "conn.read_zone_conf"]}, "vistara.py": {"libraries": ["salt.output", "salt.utils.http", "logging"], "function_names": ["_delete_resource", "_get_vistara_configuration", "_search_devices", "_get_oath2_access_token", "delete_device", "__virtual__"], "function_calls": ["_delete_resource", "_get_vistara_configuration", "_search_devices", "_get_oath2_access_token", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "log.debug", "delete_responses.append", "resp.get", "vistara_config.get", "salt.utils"]}, "scripts.py": {"libraries": ["salt._logging", "multiprocessing", "salt.cli.ssh", "salt.cli.salt", "salt.exceptions.SaltClientError", "logging", "salt.exceptions.SaltReqTimeoutError", "salt.cli.api", "traceback", "salt.cli.cp", "salt.cli.daemons", "salt.cli.key", "salt.cli.call", "functools", "salt.utils.extend", "salt.cli.spm", "signal", "sys", "salt.cli.run", "os", "time", "salt.utils.process", "subprocess", "random.randint", "salt.exceptions.SaltSystemExit", "contextlib", "salt.cloud", "salt.cloud.cli", "salt.defaults.exitcodes", "threading", "salt.utils.platform"], "function_names": ["_install_signal_handlers", "salt_spm", "salt_pip", "salt_proxy", "salt_cloud", "handle_hup", "salt_minion", "minion_process", "_handle_signals", "_pip_environment", "salt_cp", "salt_key", "proxy_minion_process", "_pip_args", "salt_master", "salt_api", "salt_run", "salt_syndic", "salt_ssh", "suicide_when_without_parent", "salt_main", "salt_unity", "escalate_signal_to_process", "salt_extend", "salt_call", "_get_onedir_env_path"], "function_calls": ["_pip_args", "s_fun", "_install_signal_handlers", "_pip_environment", "getattr", "str", "randint", "dir", "len", "print", "hasattr", "_get_onedir_env_path"], "class_names": [], "class_method_calls": ["log.error", "signal.default_int_handler", "process.join", "master.start", "sapi.start", "salt._logging", "sys.version_info", "multiprocessing.Queue", "process.pid", "fun.startswith", "sys.exit", "signal.SIG_DFL", "client.run", "log.info", "traceback.format_exc", "functools.partial", "process.exitcode", "client.local_client", "os.getpid", "log.warning", "signal.getsignal", "new_args.append", "logging.getLogger", "rlogger.removeHandler", "avail.append", "signal.SIGHUP", "syndic.start", "minion.config", "exc.code", "lock.release", "rlogger.handlers", "sys.RELENV", "sys.modules", "time.sleep", "os.pathsep", "subprocess.run", "os._exit", "os.getppid", "salt.cli", "process.start", "proxyminion.start", "sys.argv", "sys.path", "os.getuid", "minion.start", "ret.returncode", "threading.Thread", "spm.run", "client.options", "multiprocessing.Process", "salt.utils", "salt.cloud", "signal.SIGTERM", "salt.defaults", "logging.basicConfig", "sys.executable", "os.environ", "os.kill", "queue.put", "lock.acquire", "env.copy", "signal.signal", "contextlib.suppress", "queue.get", "proxyminion.config", "manager.minion", "sys.stderr", "threading.RLock", "signal.SIGINT", "thread.start"]}, "couchdb.py": {"libraries": ["couchdb", "salt.utils.decorators.memoize", "uuid.uuid4", "logging"], "function_names": ["set_", "_get_db", "_construct_uri", "_get_conn", "get", "__virtual__"], "function_calls": ["_construct_uri", "_get_conn", "_get_db", "uuid4"], "class_names": [], "class_method_calls": ["logging.getLogger", "db.get", "db.save", "couchdb.Server", "server.create"]}, "env.py": {"libraries": ["os"], "function_names": ["set_", "get", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["os.environ"]}, "etcd_db.py": {"libraries": ["salt.utils.etcd_util", "logging"], "function_names": ["set_", "delete", "_get_conn", "get", "__virtual__"], "function_calls": ["_get_conn", "get"], "class_names": [], "class_method_calls": ["logging.getLogger", "client.delete", "client.get", "client.set", "salt.utils"]}, "keyring_db.py": {"libraries": ["keyring", "logging"], "function_names": ["set_", "_get_service", "get", "__virtual__"], "function_calls": ["isinstance", "_get_service"], "class_names": [], "class_method_calls": ["logging.getLogger", "keyring.get_password", "keyring.set_password"]}, "redis_sdb.py": {"libraries": ["redis"], "function_names": ["delete", "set_", "get", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["redis_kwargs.pop", "redis.StrictRedis", "redis_conn.get", "redis_conn.set", "profile.copy", "redis_conn.delete"]}, "tism.py": {"libraries": ["salt.utils.json", "salt.utils.http", "salt.exceptions.SaltConfigurationError", "logging"], "function_names": ["get", "__virtual__"], "function_calls": ["str", "SaltConfigurationError"], "class_names": [], "class_method_calls": ["logging.getLogger", "result.get", "profile.get", "salt.utils", "http.query", "log.warning"]}, "configparser.py": {"libraries": ["salt.utils.stringutils", "collections.OrderedDict", "re", "configparser.*"], "function_names": ["_read", "_add_option", "remove_option_regexp", "write", "_string_check", "__init__", "set", "set_multivar", "get"], "function_calls": ["NoSectionError", "convert", "type", "super", "repr", "bool", "TypeError", "ParsingError", "all", "len", "isinstance", "MissingSectionHeaderError"], "class_names": ["GitConfigParser"], "class_method_calls": ["fp.readline", "self._optcre", "line.lstrip", "optname.rstrip", "self._string_check", "self._sections", "self.SECTCRE", "line.strip", "e.append", "optval.find", "fp_.write", "self._defaults", "line.split", "regexp.search", "self._add_option", "self.DEFAULTSECT", "salt.utils", "fp_.mode", "re.compile", "optval.strip", "self.SPACEINDENT", "self.optionxform", "self.OPTCRE", "line.startswith", "self._dict", "mo.group"]}, "keyvalue.py": {"libraries": ["salt.utils.stringutils.dequote", "salt.utils.jinja.quote", "salt.serializers.SerializationError", "salt.utils.platform", "salt.serializers.DeserializationError"], "function_names": ["serialize", "deserialize"], "function_calls": ["DeserializationError", "quote", "SerializationError", "dequote", "isinstance"], "class_names": [], "class_method_calls": ["options.get", "lines.append", "stream_or_string.read", "line.split", "linend.join", "stream_or_string.splitlines", "stream_or_string.decode", "salt.utils", "obj.items"]}, "plist.py": {"libraries": ["plistlib", "salt.serializers.DeserializationError", "salt.serializers.SerializationError", "logging"], "function_names": ["serialize", "deserialize"], "function_calls": ["isinstance", "DeserializationError", "SerializationError"], "class_names": [], "class_method_calls": ["logging.getLogger", "options.pop", "stream_or_string.encode", "plistlib.FMT_BINARY", "plistlib.dump", "plistlib.load", "plistlib.dumps", "plistlib.loads", "log.trace"]}, "python.py": {"libraries": ["salt.utils.json", "pprint", "json", "simplejson"], "function_names": ["serialize"], "function_calls": [], "class_names": [], "class_method_calls": ["pprint.pformat", "salt.utils"]}, "alias.py": {"libraries": [], "function_names": ["present", "absent"], "function_calls": [], "class_names": [], "class_method_calls": []}, "apache_conf.py": {"libraries": ["salt.utils.path"], "function_names": ["disabled", "enabled", "__virtual__"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["salt.utils"]}, "apache_module.py": {"libraries": [], "function_names": ["disabled", "enabled", "__virtual__"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": []}, "apache_site.py": {"libraries": [], "function_names": ["disabled", "enabled", "__virtual__"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": []}, "augeas.py": {"libraries": ["salt.utils.stringutils", "salt.utils.files", "difflib", "salt.utils.args", "re", "os.path", "logging", "salt.modules.augeas_cfg.METHOD_MAP"], "function_names": ["_workout_filename", "change", "_check_filepath", "__virtual__"], "function_calls": ["locals", "_check_filepath", "str", "_workout_filename", "isinstance", "ValueError"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "file_.readlines", "change_.split", "difflib.unified_diff", "re.sub", "os.path", "salt.utils", "filename_.startswith"]}, "beacon.py": {"libraries": ["logging"], "function_names": ["disabled", "present", "enabled", "absent"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "kwargs.items"]}, "blockdev.py": {"libraries": ["os", "time", "os.path", "logging", "salt.utils.path"], "function_names": ["tuned", "formatted", "_checkblk", "__virtual__"], "function_calls": ["_checkblk", "isinstance", "range"], "class_names": [], "class_method_calls": ["logging.getLogger", "time.sleep", "log.info", "salt.utils", "os.path"]}, "boto_cloudwatch_alarm.py": {"libraries": ["salt.utils.data"], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["int", "sorted", "len", "float", "isinstance"], "class_names": [], "class_method_calls": ["attributes.items", "difference.append", "create_or_update_alarm_args.update", "salt.utils"]}, "boto_iam_role.py": {"libraries": ["salt.utils.dictupdate", "salt.utils.odict.OrderedDict", "salt.utils.dictdiffer", "logging"], "function_names": ["absent", "_policies_detached", "present", "_instance_profile_disassociated", "_policies_absent", "_instance_profile_associated", "_policies_attached", "_instance_profile_absent", "_sort_policy", "_instance_profile_present", "_role_present", "_role_absent", "_policies_present", "__virtual__"], "function_calls": ["_policies_detached", "_instance_profile_disassociated", "_policies_absent", "list", "_instance_profile_associated", "_policies_attached", "_instance_profile_absent", "sorted", "_role_present", "_policies_present", "_instance_profile_present", "_role_absent", "_sort_policy", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "_policies.update", "doc.items", "policy_data.get", "dictupdate.update", "log.debug", "policies.items", "x.get", "policies_to_delete.append", "policies_to_attach.append", "roledict.get", "salt.utils", "policies_to_create.items", "policies_to_detach.append", "entities.get", "_to_modify.extend", "_policy_document.setdefault"]}, "boto_lc.py": {"libraries": ["salt.exceptions.SaltInvocationError"], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["SaltInvocationError"], "class_names": [], "class_method_calls": []}, "chronos_job.py": {"libraries": ["salt.utils.configcomparer", "copy", "logging"], "function_names": ["config", "absent"], "function_calls": ["str", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "new.split", "log.debug", "old.split", "copy.deepcopy", "salt.utils"]}, "cmd.py": {"libraries": ["os", "salt.utils.json", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "salt.utils.functools", "salt.utils.args", "logging", "salt.exceptions.SaltRenderError", "copy"], "function_names": ["_is_true", "wait", "run", "_reinterpreted_state", "call", "wait_call", "_failout", "mod_watch", "wait_script", "script"], "function_calls": ["_is_true", "run", "_reinterpreted_state", "bool", "str", "call", "_failout", "len", "func", "script", "isinstance", "ValueError"], "class_names": [], "class_method_calls": ["logging.getLogger", "ret.get", "data.setdefault", "kwargs.pop", "item.split", "cmd_kwargs.update", "name.split", "copy.deepcopy", "ret.update", "tmpctx.update", "salt.utils", "cmd_kwargs.get", "os.path", "data.get", "kwargs.get", "out.rstrip"]}, "dellchassis.py": {"libraries": ["os", "salt.exceptions.CommandExecutionError", "logging"], "function_names": ["chassis", "firmware_update", "_firmware_update", "switch", "blade_idrac", "__virtual__"], "function_calls": ["any", "iter", "next", "str", "_firmware_update", "all"], "class_names": [], "class_method_calls": ["logging.getLogger", "status.get", "slot_rets.append", "key.startswith", "current_slot_names.get", "ret.changes", "os.path", "target_power_states.items", "current_nic.get"]}, "docker_container.py": {"libraries": ["salt.utils.dockermod", "salt.exceptions.CommandExecutionError", "salt.utils.args", "logging", "salt.utils.data", "copy"], "function_names": ["absent", "stopped", "_check_diff", "run", "_delete_temp_container", "_resolve_image", "_get_nets", "_format_comments", "running", "mod_watch", "_parse_networks", "_replace", "__virtual__"], "function_calls": ["stopped", "_get_nets", "running", "list", "CommandExecutionError", "_replace", "_check_diff", "run", "_delete_temp_container", "str", "sorted", "all", "isinstance", "_resolve_image", "bool", "_parse_networks", "_format_comments", "len", "set"], "class_names": [], "class_method_calls": ["__context__.pop", "net_changes.pop", "kwargs.pop", "__salt__.missing_fun_string", "log.exception", "stop_errors.append", "log.debug", "post_net_connect.get", "log.warning", "logging.getLogger", "ret.get", "containers.get", "changes_ptr.update", "copy.deepcopy", "containers.setdefault", "net_conf.items", "ret.setdefault", "comments.append", "errors.append", "salt.utils", "comments.extend", "watch_kwargs.get", "networks.items", "new_container_info.get", "exc.info", "targets.append"]}, "docker_image.py": {"libraries": ["salt.utils.dockermod", "salt.utils.args", "salt.exceptions.CommandExecutionError", "logging"], "function_names": ["absent", "present", "mod_watch", "__virtual__"], "function_calls": ["dict", "present", "list", "str", "zip", "len", "locals", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "__salt__.missing_fun_string", "argspec.args", "to_delete.append", "argspec.defaults", "salt.utils", "image_update.get", "kwargs.get"]}, "docker_network.py": {"libraries": ["salt.utils.dockermod.translate.network", "string", "salt._compat.ipaddress", "random", "salt.exceptions.CommandExecutionError", "logging", "copy"], "function_names": ["_remove_network", "_normalize_pools", "is_default_pool", "__virtual__", "present", "absent"], "function_calls": ["range", "is_default_pool", "bool", "list", "str", "sorted", "len", "ValueError", "_remove_network"], "class_names": [], "class_method_calls": ["kwargs.pop", "__salt__.missing_fun_string", "random.choice", "key_name.endswith", "log.debug", "to_connect.items", "logging.getLogger", "copy.deepcopy", "missing_containers.append", "kwargs.get", "log.trace", "disconnected_containers.items", "string.ascii_lowercase", "stopped_containers.append", "ipaddress.ip_network", "ret.setdefault", "cinfo.get", "ipam_kwargs.pop", "errors.append", "salt.utils", "netinfo.get", "subnet.version", "driver_opts.get", "ipam_kwarg_names.extend", "pool.get"]}, "docker_volume.py": {"libraries": ["salt.utils.data", "logging"], "function_names": ["absent", "present", "_find_volume", "__virtual__"], "function_calls": ["_find_volume"], "class_names": [], "class_method_calls": ["logging.getLogger", "__salt__.missing_fun_string", "salt.utils"]}, "dvs.py": {"libraries": ["sys", "salt.exceptions", "pyVmomi.VmomiSupport", "logging"], "function_names": ["dvs_configured", "uplink_portgroup_configured", "mod_init", "__virtual__", "_get_val2_dict_from_diff_dict", "_get_val1_dict_from_diff_dict", "portgroups_configured", "_get_datacenter_name", "_get_changes_from_diff_dict", "_get_diff_dict"], "function_calls": ["range", "dict", "_get_val2_dict_from_diff_dict", "_get_val1_dict_from_diff_dict", "str", "sorted", "isinstance", "len", "_get_datacenter_name", "_get_changes_from_diff_dict", "ValueError", "_get_diff_dict"], "class_names": [], "class_method_calls": ["log.error", "changes.update", "updated_infra_res_pools.append", "ret.update", "p.get", "log.info", "logging.getLogger", "current_dvs.get", "log.trace", "changes_strings.extend", "changes_strings.append", "diff_dict.keys", "comments.append", "dict2.keys", "VmomiSupport.versionMap", "salt.exceptions", "expected_pg_names.append", "exc.strerror", "ret_dict.update", "dvs.get", "sys.version_info", "original_infra_res_pools.append"]}, "elasticsearch_index.py": {"libraries": ["logging"], "function_names": ["present", "absent"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["logging.getLogger"]}, "elasticsearch_index_template.py": {"libraries": ["logging"], "function_names": ["present", "absent"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["logging.getLogger"]}, "firewall.py": {"libraries": [], "function_names": ["check", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["__opts__.get"]}, "glance_image.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["image.id"]}, "grafana.py": {"libraries": ["salt.utils.json", "salt.exceptions.SaltInvocationError", "copy", "salt.utils.dictdiffer.DictDiffer"], "function_names": ["_rows_differ", "_parse_profile", "dashboard_present", "dashboard_absent", "__virtual__"], "function_calls": ["_rows_differ", "_parse_profile", "SaltInvocationError", "enumerate", "DictDiffer", "isinstance"], "class_names": [], "class_method_calls": ["copy.deepcopy", "diff.added", "_profile.get", "diff.removed", "diff.changed", "update_rows.append", "salt.utils", "_ids.sort", "_dashboard.get", "_ids.append", "rows.append"]}, "grafana4_dashboard.py": {"libraries": ["salt.utils.json", "copy", "salt.utils.dictdiffer.DictDiffer"], "function_names": ["_inherited_dashboard", "_stripped", "_ensure_panel_ids", "__virtual__", "present", "_auto_adjust_panel_spans", "_dashboard_diff", "_inherited_row", "_cleaned", "_ensure_pinned_rows", "_inherited_panel", "_ensure_annotations", "absent"], "function_calls": ["_inherited_dashboard", "set", "_stripped", "sum", "_ensure_panel_ids", "list", "enumerate", "_auto_adjust_panel_spans", "_inherited_row", "_cleaned", "_ensure_pinned_rows", "_dashboard_diff", "len", "_inherited_panel", "_ensure_annotations", "DictDiffer", "isinstance", "float"], "class_names": [], "class_method_calls": ["result_panel.update", "old_row.get", "old_dashboard.get", "rows_diff.removed", "title.lower", "base_dashboards.append", "row.pop", "row_diff.changed", "panels_diff.removed", "new_dashboard.get", "d.items", "dashboard_diff.added", "copy.deepcopy", "panel.get", "result_row.update", "current_level.append", "dashboard.pop", "row_diff.added", "base_rows.append", "new_rows.append", "ret.setdefault", "result_dashboard.update", "dashboard.get", "dashboard_diff.removed", "response.get", "pinned_rows.append", "panels_diff.changed", "row_diff.removed", "salt.utils", "target.pop", "pinned_row_titles_lower.append", "levels.append", "rows_diff.changed", "panels_diff.added", "base_panels.append", "dashboard_diff.changed", "rows_diff.added", "panel.pop", "row.get", "tags.update"]}, "grafana4_datasource.py": {"libraries": ["salt.utils.dictdiffer.deep_diff"], "function_names": ["absent", "present", "_get_json_data", "__virtual__"], "function_calls": ["deep_diff", "isinstance", "_get_json_data"], "class_names": [], "class_method_calls": ["defaults.get", "kwargs.items"]}, "grafana4_org.py": {"libraries": ["salt.utils.dictupdate", "requests.exceptions.HTTPError", "salt.utils.dictdiffer.deep_diff"], "function_names": ["absent", "present", "_get_json_data", "__virtual__"], "function_calls": ["deep_diff", "isinstance", "_get_json_data"], "class_names": [], "class_method_calls": ["users.items", "kwargs.items", "dictupdate.update", "defaults.get", "e.response"]}, "grafana4_user.py": {"libraries": ["salt.utils.dictupdate", "salt.utils.dictdiffer.deep_diff"], "function_names": ["absent", "present", "_get_json_data", "__virtual__"], "function_calls": ["deep_diff", "isinstance", "_get_json_data"], "class_names": [], "class_method_calls": ["dictupdate.update", "defaults.get", "kwargs.items"]}, "grafana_dashboard.py": {"libraries": ["salt.utils.json", "requests", "copy", "salt.utils.dictdiffer.DictDiffer"], "function_names": ["_inherited_dashboard", "_stripped", "_get", "_ensure_panel_ids", "__virtual__", "present", "_delete", "_auto_adjust_panel_spans", "_dashboard_diff", "_inherited_row", "_cleaned", "_ensure_pinned_rows", "_inherited_panel", "_ensure_annotations", "_update", "absent"], "function_calls": ["list", "_cleaned", "_ensure_pinned_rows", "float", "_stripped", "_dashboard_diff", "_inherited_panel", "DictDiffer", "isinstance", "_inherited_dashboard", "_ensure_annotations", "_get", "sum", "_ensure_panel_ids", "_delete", "enumerate", "_auto_adjust_panel_spans", "_inherited_row", "len", "set", "_update"], "class_names": [], "class_method_calls": ["result_panel.update", "old_row.get", "old_dashboard.get", "response.json", "rows_diff.removed", "title.lower", "base_dashboards.append", "row.pop", "row_diff.changed", "panels_diff.removed", "requests.post", "new_dashboard.get", "d.items", "dashboard_diff.added", "copy.deepcopy", "panel.get", "result_row.update", "current_level.append", "dashboard.pop", "requests.delete", "row_diff.added", "base_rows.append", "new_rows.append", "ret.setdefault", "result_dashboard.update", "dashboard.get", "dashboard_diff.removed", "response.get", "pinned_rows.append", "panels_diff.changed", "row_diff.removed", "salt.utils", "target.pop", "pinned_row_titles_lower.append", "levels.append", "data.get", "rows_diff.changed", "panels_diff.added", "base_panels.append", "dashboard_diff.changed", "rows_diff.added", "panel.pop", "row.get", "requests.get", "profile.get", "tags.update"]}, "grafana_datasource.py": {"libraries": ["requests"], "function_names": ["_get_headers", "__virtual__", "present", "_get_json_data", "_get_datasource", "_get_url", "_diff", "absent"], "function_calls": ["_get_headers", "_get_json_data", "_get_datasource", "isinstance", "_get_url", "_diff"], "class_names": [], "class_method_calls": ["requests.delete", "response.json", "old.copy", "new.keys", "requests.put", "requests.get", "new.copy", "profile.get", "requests.post", "old.keys"]}, "group.py": {"libraries": ["sys", "salt.utils.platform", "salt.utils.win_functions"], "function_names": ["absent", "present", "_get_root_args", "_changes"], "function_calls": ["int", "set", "_get_root_args", "_changes"], "class_names": [], "class_method_calls": ["sys.modules", "user.lower", "salt.utils", "changes.items"]}, "host.py": {"libraries": ["salt.utils.validate.net", "logging"], "function_names": ["present", "only", "absent"], "function_calls": ["set", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "update_comment.add", "to_add.update", "to_add.add", "all_hosts.items", "update_comment.update", "ret.setdefault", "comments.append", "salt.utils", "to_remove.add", "x.strip"]}, "influxdb08_database.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "influxdb08_user.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "influxdb_continuous_query.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "influxdb_database.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "influxdb_retention_policy.py": {"libraries": [], "function_names": ["absent", "convert_duration", "present", "__virtual__"], "function_calls": ["str", "int", "convert_duration"], "class_names": [], "class_method_calls": ["duration.endswith", "duration.split"]}, "influxdb_user.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["db_privileges.get", "privilege.lower", "grants.items"]}, "infoblox_a.py": {"libraries": [], "function_names": ["present", "absent"], "function_calls": [], "class_names": [], "class_method_calls": ["data.update"]}, "infoblox_cname.py": {"libraries": [], "function_names": ["present", "absent"], "function_calls": [], "class_names": [], "class_method_calls": ["data.update"]}, "infoblox_host_record.py": {"libraries": [], "function_names": ["present", "absent"], "function_calls": [], "class_names": [], "class_method_calls": ["addrobj.startswith", "data.update", "obj_addrs.append"]}, "infoblox_range.py": {"libraries": [], "function_names": ["present", "absent"], "function_calls": [], "class_names": [], "class_method_calls": ["data.update"]}, "jenkins.py": {"libraries": ["xml.etree.ElementTree", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "salt.utils.files", "difflib", "io", "logging"], "function_names": ["_fail", "present", "absent", "_elements_equal"], "function_calls": ["_fail", "len", "zip", "all", "_elements_equal"], "class_names": [], "class_method_calls": ["logging.getLogger", "e1.tail", "e2.tag", "buf.readlines", "e1.attrib", "e2.tail", "exc.strerror", "buf.read", "io.StringIO", "difflib.unified_diff", "ET.tostringlist", "e2.text", "e2.attrib", "e1.text", "salt.utils", "_fp.read", "ET.fromstring", "e1.tag"]}, "kernelpkg.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "salt.exceptions.CommandExecutionError"], "function_names": ["test_upgrade_available_inverted", "test_latest_available_with_updates", "test_upgrade_not_needed_with_reboot", "test_upgrade_needed_with_reboot", "test_upgrade_available_false", "test_latest_installed_with_updates", "test_latest_available_at_latest", "test_needs_reboot_with_update", "test_latest_installed_at_latest", "test_upgrade_available_true", "test_latest_available_no_results", "test_upgrade_not_needed_without_reboot", "test_upgrade_needed_without_reboot", "test_needs_reboot_at_latest", "test_remove_active", "test_remove_invalid", "test_active", "test_needs_reboot_order_inverted"], "function_calls": ["MagicMock"], "class_names": ["KernelPkgTestCase"], "class_method_calls": ["self.assertRaises", "self.LATEST", "self.assertEqual", "self.KERNEL_LIST", "self.assertTrue", "self.assertFalse", "patch.dict", "patch.object", "self._kernelpkg", "self.assertIn"]}, "keystone_domain.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["domain.id"]}, "keystone_endpoint.py": {"libraries": [], "function_names": ["absent", "present", "_common", "__virtual__"], "function_calls": ["enumerate", "_common", "len"], "class_names": [], "class_method_calls": ["service.id", "filters.pop", "endpoint.id", "kwargs.copy"]}, "keystone_group.py": {"libraries": [], "function_names": ["absent", "present", "_common", "__virtual__"], "function_calls": ["hasattr", "_common"], "class_names": [], "class_method_calls": ["group.id", "kwargs.pop", "domain.id"]}, "keystone_project.py": {"libraries": [], "function_names": ["absent", "present", "_common", "__virtual__"], "function_calls": ["hasattr", "_common"], "class_names": [], "class_method_calls": ["domain.id", "kwargs.pop", "project.id"]}, "keystone_role.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["role.id", "role.name"]}, "keystone_role_grant.py": {"libraries": [], "function_names": ["absent", "_get_filters", "present", "__virtual__"], "function_calls": ["_get_filters", "hasattr"], "class_names": [], "class_method_calls": ["kwargs.pop", "project.id", "role.id", "user.id", "filters.items", "domain.id", "group.id"]}, "keystone_service.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["service.id"]}, "keystone_user.py": {"libraries": [], "function_names": ["absent", "present", "_common", "__virtual__"], "function_calls": ["hasattr", "_common"], "class_names": [], "class_method_calls": ["domain.id", "user.id", "kwargs.pop"]}, "kubernetes.py": {"libraries": ["copy", "logging"], "function_names": ["pod_absent", "secret_absent", "node_label_present", "configmap_present", "service_present", "node_label_absent", "node_label_folder_absent", "pod_present", "_error", "service_absent", "deployment_present", "configmap_absent", "namespace_absent", "secret_present", "deployment_absent", "namespace_present", "__virtual__"], "function_calls": ["_error", "isinstance", "list"], "class_names": [], "class_method_calls": ["logging.getLogger", "label.startswith", "labels_to_drop.append", "new_labels.append", "log.info", "name.strip", "copy.copy"]}, "locale.py": {"libraries": ["salt.exceptions.CommandExecutionError"], "function_names": ["system", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["__salt__.missing_fun_string"]}, "loop.py": {"libraries": ["sys", "time", "operator", "logging"], "function_names": ["until_no_eval", "until", "__virtual__"], "function_calls": ["eval", "comparator", "getattr", "isinstance", "hasattr"], "class_names": [], "class_method_calls": ["logging.getLogger", "res_archive.append", "sys.exc_info", "log.debug", "time.sleep", "time.time"]}, "lvs_server.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "lvs_service.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "lxd_container.py": {"libraries": ["salt.exceptions.SaltInvocationError", "salt.exceptions.CommandExecutionError"], "function_names": ["stopped", "frozen", "__virtual__", "_unchanged", "present", "running", "migrated", "_error", "_success", "absent"], "function_calls": ["_unchanged", "list", "_error", "str", "len", "set", "map", "_success"], "class_names": [], "class_method_calls": ["new_profiles.difference", "old_profiles.discard", "container.status_code", "container.start", "old_profiles.add", "container.profiles", "profile_changes.append", "container.restart", "container.delete", "container.freeze", "old_profiles.difference", "container.stop"]}, "lxd_image.py": {"libraries": ["salt.exceptions.SaltInvocationError", "salt.exceptions.CommandExecutionError"], "function_names": ["__virtual__", "_unchanged", "present", "_error", "_success", "absent"], "function_calls": ["_unchanged", "str", "_error", "len", "set", "map", "_success"], "class_names": [], "class_method_calls": ["new_aliases.difference", "aliases.append", "image.public", "alias_changes.append", "source.get", "image.aliases", "old_aliases.difference"]}, "lxd_profile.py": {"libraries": ["salt.exceptions.SaltInvocationError", "salt.exceptions.CommandExecutionError"], "function_names": ["__virtual__", "_unchanged", "present", "_error", "_success", "absent"], "function_calls": ["_unchanged", "str", "_error", "len", "_success"], "class_names": [], "class_method_calls": ["profile.description"]}, "marathon_app.py": {"libraries": ["salt.utils.configcomparer", "copy", "logging"], "function_names": ["running", "config", "absent"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils", "copy.deepcopy"]}, "modjk_worker.py": {"libraries": [], "function_names": ["disable", "_talk2modjk", "_send_command", "stop", "activate", "_worker_status", "__virtual__"], "function_calls": ["_send_command", "_talk2modjk", "_worker_status", "len"], "class_names": [], "class_method_calls": ["errors.append", "minions.append"]}, "module.py": {"libraries": ["salt.utils.jid", "salt.loader", "salt.exceptions.SaltInvocationError", "salt.utils.functools", "salt.utils.args", "logging"], "function_names": ["wait", "run", "_get_dict_result", "_run", "_legacy_run", "_call_function", "_get_result"], "function_calls": ["range", "_get_dict_result", "_run", "bool", "list", "_get_result", "_legacy_run", "len", "_call_function", "set", "isinstance"], "class_names": [], "class_method_calls": ["kwargs.pop", "aspec.keywords", "log.debug", "aspec.args", "node.items", "name.find", "logging.getLogger", "func.split", "missing.add", "missing.append", "tests.append", "args.append", "kwargs.get", "success.append", "func_ret.get", "args.extend", "salt.loader", "failures.append", "salt.utils", "msg.format", "aspec.defaults", "changes_ret.get", "aspec.varargs", "changes.get", "keys.remove"]}, "mongodb_database.py": {"libraries": [], "function_names": ["absent", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "mongodb_user.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["int", "isinstance", "set", "len"], "class_names": [], "class_method_calls": ["current_roles.append"]}, "mssql_database.py": {"libraries": ["collections"], "function_names": ["absent", "_normalize_options", "present", "__virtual__"], "function_calls": ["type", "_normalize_options"], "class_names": [], "class_method_calls": ["options.items", "collections.OrderedDict"]}, "mssql_login.py": {"libraries": ["collections"], "function_names": ["absent", "_normalize_options", "present", "__virtual__"], "function_calls": ["type", "bool", "_normalize_options"], "class_names": [], "class_method_calls": ["options.items", "collections.OrderedDict"]}, "mssql_role.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "mssql_user.py": {"libraries": ["collections"], "function_names": ["absent", "_normalize_options", "present", "__virtual__"], "function_calls": ["type", "_normalize_options"], "class_names": [], "class_method_calls": ["options.items", "collections.OrderedDict"]}, "mysql_database.py": {"libraries": ["sys", "logging"], "function_names": ["absent", "_get_mysql_error", "present", "__virtual__"], "function_calls": ["str", "_get_mysql_error", "bytes"], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "log.debug", "existing.get", "sys.modules", "current.get"]}, "mysql_grants.py": {"libraries": ["sys"], "function_names": ["absent", "_get_mysql_error", "present", "__virtual__"], "function_calls": ["_get_mysql_error"], "class_names": [], "class_method_calls": ["comment.format", "sys.modules", "database.rpartition"]}, "mysql_query.py": {"libraries": ["sys", "salt.utils.stringutils", "salt.utils.files", "os.path"], "function_names": ["_get_mysql_error", "run_file", "run", "__virtual__"], "function_calls": ["any", "enumerate", "_get_mysql_error", "str", "isinstance"], "class_names": [], "class_method_calls": ["mapped_results.append", "output_file.write", "query_result.items", "query_file.startswith", "sys.modules", "os.path", "salt.utils", "res.items"]}, "mysql_user.py": {"libraries": ["sys", "salt.utils.data"], "function_names": ["absent", "_get_mysql_error", "present", "__virtual__"], "function_calls": ["any", "_get_mysql_error"], "class_names": [], "class_method_calls": ["sys.modules", "salt.utils"]}, "net_napalm_yang.py": {"libraries": ["salt.utils.json", "salt.utils.stringutils", "napalm_yang", "salt.utils.files", "salt.utils.napalm", "logging", "salt.utils.yaml"], "function_names": ["managed", "configured", "__virtual__"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "__opts__.get", "log.debug", "compliance_report.get", "ret.update", "salt.utils", "data.pop", "kwargs.get"]}, "netacl.py": {"libraries": ["capirca.lib.policy", "capirca.aclgen", "salt.utils.napalm", "capirca.lib.aclgenerator", "logging", "capirca"], "function_names": ["managed", "filter", "term", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "netconfig.py": {"libraries": ["salt.utils.napalm", "logging"], "function_names": ["managed", "saved", "replace_pattern", "commit_cancelled", "_update_config", "commit_confirmed", "__virtual__"], "function_calls": ["_update_config"], "class_names": [], "class_method_calls": ["confirmed.update", "logging.getLogger", "cancelled.update", "salt.utils"]}, "netntp.py": {"libraries": ["dns.resolver", "netaddr.IPAddress", "salt.utils.napalm", "logging", "netaddr.core.AddrFormatError"], "function_names": ["managed", "_delete_ntp_servers", "_clean", "_delete_ntp_peers", "_set_ntp_peers", "_retrieve_ntp_servers", "_check_diff_and_configure", "_retrieve_ntp_peers", "_exec_fun", "_default_ret", "_set_ntp_servers", "_check", "__virtual__"], "function_calls": ["_clean", "IPAddress", "list", "_check_diff_and_configure", "str", "_exec_fun", "_default_ret", "globals", "set", "isinstance", "_check"], "class_names": [], "class_method_calls": ["dns.resolver", "logging.getLogger", "ret.get", "ntp_list_output.get", "ip_only_peers.append", "_peers_ret.get", "ret.update", "_servers_ret.get", "_ret.update", "salt.utils", "_removed.get", "_set.get"]}, "netsnmp.py": {"libraries": ["salt.utils.json", "salt.utils.napalm", "logging"], "function_names": ["managed", "_clear_community_details", "_ordered_dict_to_dict", "_expand_config", "_check_config", "_str_elem", "_compute_diff", "_retrieve_device_config", "_configure", "_valid_dict", "_create_diff_action", "_valid_str", "_create_diff", "_community_defaults", "__virtual__"], "function_calls": ["_clear_community_details", "_ordered_dict_to_dict", "_expand_config", "_check_config", "_compute_diff", "_str_elem", "_retrieve_device_config", "fun", "_community_defaults", "_configure", "_valid_dict", "_create_diff_action", "_valid_str", "len", "_create_diff", "isinstance"], "class_names": [], "class_method_calls": ["changes.update", "ret.update", "logging.getLogger", "_device_config.get", "_ret.get", "community_details.get", "_COMMUNITY_MODE_MAP.get", "_community.items", "config.get", "_configured.get", "_comm.items", "defaults.update", "config.pop", "existing.get", "reasons.append", "salt.utils", "expected.get", "_updated_changes.get", "changes.get"]}, "netusers.py": {"libraries": ["salt.utils.json", "salt.utils.napalm", "copy", "logging"], "function_names": ["managed", "_delete_users", "_expand_users", "_set_users", "_ordered_dict_to_dict", "_compute_diff", "_update_users", "_check_users", "_retrieve_users", "__virtual__"], "function_calls": ["_delete_users", "_expand_users", "_set_users", "_ordered_dict_to_dict", "_compute_diff", "_update_users", "set", "_check_users", "isinstance", "_retrieve_users"], "class_names": [], "class_method_calls": ["users.items", "ret.update", "user_configuration.get", "configured.get", "logging.getLogger", "configured.keys", "diff.update", "user_expected.items", "copy.deepcopy", "user_details.get", "salt.utils", "expected_users.update", "_delete.get", "expected.get", "diff.get", "users_output.get", "expected.keys", "_set.get", "_update.get"]}, "neutron_network.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["project.id", "network.id"]}, "neutron_secgroup.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["secgroup.id", "project.id"]}, "neutron_secgroup_rule.py": {"libraries": [], "function_names": ["_rule_compare", "present", "absent", "__virtual__"], "function_calls": ["_rule_compare", "set"], "class_names": [], "class_method_calls": ["rule2.keys", "rule1.keys", "project.id"]}, "neutron_subnet.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["subnet.id"]}, "nfs_export.py": {"libraries": ["salt.utils.path"], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["add_export", "bool"], "class_names": [], "class_method_calls": ["salt.utils"]}, "ntp.py": {"libraries": ["salt.utils.platform", "logging"], "function_names": ["_get_servers", "_check_servers", "managed", "__virtual__"], "function_calls": ["_check_servers", "_get_servers", "sorted", "set", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "openvswitch_bridge.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "openvswitch_db.py": {"libraries": [], "function_names": ["managed", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["comment_error.format"]}, "openvswitch_port.py": {"libraries": [], "function_names": ["_check_gre", "__virtual__", "present", "_check_vlan", "_check_vxlan", "absent"], "function_calls": ["_check_gre", "_check_vlan", "str", "int", "TypeError", "_check_vxlan"], "class_names": [], "class_method_calls": []}, "pagerduty_escalation_policy.py": {"libraries": [], "function_names": ["__virtual__", "present", "_escalation_rules_to_string", "_diff", "absent"], "function_calls": ["_escalation_rules_to_string", "Exception"], "class_names": [], "class_method_calls": ["state_data.items", "resource_object.keys"]}, "pagerduty_schedule.py": {"libraries": [], "function_names": ["absent", "present", "_diff", "__virtual__"], "function_calls": ["Exception", "len"], "class_names": [], "class_method_calls": ["layer.items"]}, "pagerduty_service.py": {"libraries": [], "function_names": ["absent", "present", "_diff", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["resource_value.find"]}, "pagerduty_user.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "pbm.py": {"libraries": ["salt.exceptions.VMwareRuntimeError", "pyVmomi.pbm", "salt.exceptions.VMwareApiError", "pyVmomi.vim", "pyVmomi.vmodl", "salt.utils.vmware", "logging", "salt.exceptions.VMwareObjectRetrievalError"], "function_names": ["update_storage_policy", "get_storage_policies", "get_profile_manager", "create_storage_policy", "get_policies_by_id", "get_default_storage_policy_of_datastore", "assign_default_storage_policy_to_datastore", "get_placement_solver", "get_capability_definitions", "__virtual__"], "function_calls": ["VMwareObjectRetrievalError", "VMwareApiError", "VMwareRuntimeError", "get_policies_by_id"], "class_names": [], "class_method_calls": ["log.exception", "profile_manager.RetrieveContent", "profile_manager.QueryProfile", "pbm.placement", "vmodl.RuntimeFault", "p.name", "logging.getLogger", "pbm.ServiceInstance", "pbm_si.RetrieveContent", "exc.privilegeId", "profile_manager.Create", "log.trace", "p.resourceType", "pbm.profile", "cat.capabilityMetadata", "salt.utils", "datastore._moId", "profile_manager.AssignDefaultRequirementProfile", "cap_definitions.extend", "policy.profileId", "vim.fault", "profile_manager.Update", "exc.msg", "profile_manager.FetchCapabilityMetadata", "profile_manager.QueryDefaultRequirementProfile"]}, "pip_state.py": {"libraries": ["sys", "pip._internal.exceptions.InstallationError", "pip._internal.req", "pip.exceptions.InstallationError", "pip", "pkg_resources", "types", "salt.exceptions.CommandExecutionError", "pip._internal.req.constructors", "re", "logging", "salt.utils.versions", "salt.utils.data", "salt.exceptions.CommandNotFoundError", "pip.req"], "function_names": ["_check_pkg_version_format", "uptodate", "removed", "pip_has_exceptions_mod", "purge_pip", "_fulfills_version_spec", "_check_if_installed", "_pep440_version_cmp", "normalize", "prepro", "pip_has_internal_exceptions_mod", "_from_line", "installed", "__virtual__"], "function_calls": ["any", "normalize", "_check_if_installed", "reversed", "pip_has_internal_exceptions_mod", "_from_line", "hasattr", "_fulfills_version_spec", "str", "len", "isinstance", "locals", "_check_pkg_version_format", "globals", "iter", "purge_pip", "_pep440_version_cmp", "prepro", "getattr", "set"], "class_names": [], "class_method_calls": ["install_req.req", "state_pkg_name.replace", "updated.get", "logger.warning", "ret.update", "pip_install_call.get", "spec.operator", "pkg.split", "pip.__version__", "logging.getLogger", "spec.version", "package.lower", "line.strip", "sys.modules", "pkg_resources.parse_version", "pkgs_details.append", "v.__name__", "pkg_404_comms.append", "install_req.specifier", "already_installed_packages.add", "pkg.startswith", "logger.debug", "pkg.items", "types.ModuleType", "comments.append", "line.split", "salt.utils", "pip._internal", "msg.format", "logger.exception", "already_installed_comments.append", "target_pkgs.append", "install_req.name", "line.startswith", "re.sub", "prefix.lower", "purge_pip.__pip_ver__", "pip.req"]}, "pkgbuild.py": {"libraries": ["errno", "os", "logging"], "function_names": ["repo", "_get_missing_results", "built"], "function_calls": ["set", "isinstance", "sorted", "_get_missing_results"], "class_names": [], "class_method_calls": ["errno.EACCES", "logging.getLogger", "log.error", "log.debug", "os.listdir", "results.split", "__grains__.get", "file.endswith", "res.endswith", "errno.ENOENT", "exc.errno"]}, "pkgrepo.py": {"libraries": ["sys", "salt.state.STATE_INTERNAL_KEYWORDS", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.modules.aptpkg._expand_repo_def", "salt.exceptions.SaltInvocationError", "salt.utils.pkg.rpm", "salt.modules.aptpkg._split_repo_str", "salt.utils.versions", "salt.utils.pkg.deb", "salt.utils.data"], "function_names": ["absent", "managed", "__virtual__"], "function_calls": ["any", "_split_repo_str", "str", "sorted", "_expand_repo_def", "set", "isinstance"], "class_names": [], "class_method_calls": ["pre.get", "kwargs.pop", "__opts__.get", "name.startswith", "exc.strerror", "pre.pop", "reposplit.split", "__grains__.get", "sys.modules", "salt.utils", "post.get", "sanitizedkwargs.get", "kwargs.get", "x.strip", "sanitizedkwargs.pop"]}, "ports.py": {"libraries": ["sys", "os", "salt.modules.freebsdports._normalize", "salt.modules.freebsdports._options_file_exists", "salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError", "logging", "salt.utils.data", "copy"], "function_names": ["_build_option_string", "_get_option_list", "_repack_options", "installed", "__virtual__"], "function_calls": ["iter", "next", "_build_option_string", "_get_option_list", "str", "_normalize", "_options_file_exists", "_repack_options"], "class_names": [], "class_method_calls": ["logging.getLogger", "copy.deepcopy", "__grains__.get", "sys.modules", "salt.utils", "options.items", "desired_options.update"]}, "postgres_cluster.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["any"], "class_names": [], "class_method_calls": ["msg.format", "__opts__.get"]}, "postgres_database.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["any", "all"], "class_names": [], "class_method_calls": ["dbs.get", "encoding.lower", "db_params.get"]}, "postgres_extension.py": {"libraries": ["salt.modules.postgres", "logging"], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "postgres._EXTENSION_INSTALLED", "mode.capitalize", "postgres._EXTENSION_TO_UPGRADE", "postgres._EXTENSION_TO_MOVE", "postgres._EXTENSION_NOT_INSTALLED", "mode.endswith"]}, "postgres_group.py": {"libraries": ["salt.modules.postgres", "logging"], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "group_attr.get", "postgres._maybe_encrypt_password", "lgroups.split", "postgres._DEFAULT_PASSWORDS_ENCRYPTION", "postgres._verify_password"]}, "postgres_initdb.py": {"libraries": [], "function_names": ["present", "__virtual__"], "function_calls": ["dict"], "class_names": [], "class_method_calls": []}, "postgres_language.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "postgres_privileges.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "postgres_schema.py": {"libraries": ["logging"], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "msg.format"]}, "postgres_tablespace.py": {"libraries": ["salt.utils.dictupdate"], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["dictupdate.update", "options.items"]}, "postgres_user.py": {"libraries": ["salt.modules.postgres", "datetime", "logging"], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "datetime.datetime", "postgres._maybe_encrypt_password", "user_attr.get", "lgroups.split", "postgres._DEFAULT_PASSWORDS_ENCRYPTION", "valid_until.replace", "postgres._verify_password"]}, "probes.py": {"libraries": ["salt.utils.json", "salt.utils.napalm", "copy", "logging"], "function_names": ["managed", "_set_rpm_probes", "_ordered_dict_to_dict", "_delete_rpm_probes", "_schedule_probes", "_retrieve_rpm_probes", "_default_ret", "_expand_probes", "_compare_probes", "_clean_probes", "__virtual__"], "function_calls": ["_set_rpm_probes", "_ordered_dict_to_dict", "_delete_rpm_probes", "_schedule_probes", "_retrieve_rpm_probes", "_default_ret", "_expand_probes", "isinstance", "set", "_compare_probes", "_clean_probes"], "class_names": [], "class_method_calls": ["probe_tests.items", "configured_probe_tests.keys", "updated.get", "ret.update", "probe_test.pop", "rpm_probes_config.get", "configured_probes.keys", "add_scheduled.get", "test_details.pop", "logging.getLogger", "expected_probes.pop", "expected_probes.keys", "copy.deepcopy", "probe_test.items", "configured_probes.pop", "configured_probe_tests.get", "probe_tests.pop", "probe_tests.keys", "configured_probe_tests.pop", "probes.get", "removed.get", "salt.utils", "diff.get", "configured_probes.get", "probes.items", "added.get", "expected_probes.items", "expected_test_details.update", "probes.pop", "probes_copy.items"]}, "process.py": {"libraries": ["salt._logging", "psutil", "multiprocessing", "salt.utils.files", "logging", "salt.utils.path", "functools", "json", "inspect", "io", "signal", "setproctitle", "pwd", "copy", "sys", "os", "time", "subprocess", "tornado.gen", "contextlib", "queue", "salt.defaults.exitcodes", "errno", "salt.utils.crypt", "threading", "socket", "salt.utils.platform", "multiprocessing.util", "salt.utils.versions", "systemd.daemon"], "function_names": ["check_children", "check_mantle_of_responsibility", "cleanup", "terminate", "register_finalize_method", "stop_restarting", "wrapped_run_func", "appendproctitle", "notify_systemd", "daemonize", "register_after_fork_method", "daemonize_if", "restart_process", "_handle_signals", "run", "__getstate__", "add_process", "__new__", "clean_proc", "default_signals", "add", "claim_mantle_of_responsibility", "os_is_running", "get_process_info", "send_signal_to_processes", "fire_async", "_thread_target", "get_pidfile", "dup2", "__setstate__", "check_pidfile", "kill_children", "__decorate_run", "systemd_notify_call", "start", "_setup_signals", "__init__", "set_pidfile"], "function_calls": ["method", "range", "tgt", "int", "callable", "appendproctitle", "daemonize", "hasattr", "super", "issubclass", "str", "default_signals", "isinstance", "get_process_info", "dup2", "Process", "setattr", "run_func", "systemd_notify_call", "func"], "class_names": ["SignalHandlingProcess", "ProcessManager", "SubprocessList", "ThreadPool", "Process"], "class_method_calls": ["self._process_map", "process.pid", "SignalHandlingProcess._setup_signals", "self._handle_signals", "sys.stdout", "sys.platform", "logging.getLogger", "self.send_signal_to_processes", "self.__init__", "gen.coroutine", "file_process_info.get", "json.dump", "os.getenv", "kwargs.get", "process.start", "self.add_process", "os.makedirs", "os.getuid", "process.children", "signal.SIGKILL", "err.errno", "self._workers", "self._pid", "sys.stdin", "signal.SIGTERM", "instance.__logging_config__", "queue.Queue", "instance.__decorate_run", "queue.Full", "self.kill_children", "instance._kwargs_for_getstate", "self.stop_restarting", "self.__class__", "setproctitle.getproctitle", "subprocess.PIPE", "self.check_children", "self.num_threads", "log.exception", "raw_process_info.pid", "log.critical", "self.count", "self.lock", "self.restart_process", "log.info", "log.warning", "signal.getsignal", "multiprocessing.current_process", "file1.fileno", "errno.EINTR", "time.sleep", "self.register_after_fork_method", "thread.daemon", "errno.ESRCH", "json.decoder", "os._exit", "self.__logging_config__", "file2.fileno", "contextlib.contextmanager", "instance.run", "sys.argv", "os.umask", "process.name", "socket.SOCK_DGRAM", "queue.Empty", "self._finalize_methods", "self.register_finalize_method", "time.time", "multiprocessing.Process", "proc.pid", "io.UnsupportedOperation", "sock.sendall", "os.fork", "socket.socket", "os.kill", "subprocess.Popen", "sys.stderr", "self.name", "thread.start", "ofile.write", "log.error", "signal.default_int_handler", "socket.AF_UNIX", "current.strip", "sys.exit", "signal.SIG_DFL", "os.setsid", "os.getpid", "exc.errno", "self._thread_target", "notify_socket.startswith", "psutil.NoSuchProcess", "self.pid", "opts.get", "instance.register_after_fork_method", "pwd.getpwnam", "os.chown", "log.trace", "os.chdir", "self._sigterm_handler", "proc.terminate", "sock.connect", "psutil.Process", "threading.Thread", "raw_process_info.status", "json.load", "salt.defaults", "errno.EACCES", "self._after_fork_methods", "psutil.pid_exists", "proc.join", "multiprocessing.Lock", "instance._finalize_methods", "systemd.daemon", "copy.copy", "proc.name", "setproctitle.setproctitle", "proc.is_alive", "self._restart_processes", "salt._logging", "log.debug", "sock.close", "child.terminate", "raw_process_info.name", "os.path", "subprocess.call", "process.poll", "child.is_running", "current.rsplit", "self.processes", "current.rstrip", "self._args_for_getstate", "self._job_queue", "os.devnull", "gen.sleep", "multiprocessing.cpu_count", "self._kwargs_for_getstate", "inspect.isclass", "salt.utils", "functools.wraps", "instance._after_fork_methods", "instance._args_for_getstate", "signal.signal", "process.communicate", "tgt.__qualname__", "pdf.read", "os.dup2", "raw_process_info.create_time", "self.wait_for_kill", "signal.SIG_IGN", "signal.SIGINT"]}, "pushover.py": {"libraries": ["urllib.parse.urlencode", "salt.version.__version__", "urllib.parse.urljoin", "http.client", "logging", "salt.utils.http"], "function_names": ["query", "validate_user", "validate_sound"], "function_calls": ["dict", "urljoin", "query", "urlencode"], "class_names": [], "class_method_calls": ["logging.getLogger", "_message.get", "response.get", "http.client", "pushover_functions.get", "result.get", "salt.utils"]}, "pyrax_queues.py": {"libraries": ["salt.utils.openstack.pyrax"], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["iter", "next"], "class_names": [], "class_method_calls": ["suop.HAS_PYRAX"]}, "rabbitmq_cluster.py": {"libraries": ["salt.utils.functools", "salt.utils.path", "logging"], "function_names": ["joined", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "rabbitmq_plugin.py": {"libraries": ["salt.exceptions.CommandExecutionError", "logging"], "function_names": ["disabled", "enabled", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger"]}, "rabbitmq_policy.py": {"libraries": ["json", "salt.utils.path", "logging"], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["int"], "class_names": [], "class_method_calls": ["logging.getLogger", "json.loads", "updates.append", "log.debug", "salt.utils", "policy.get", "policies.get"]}, "rabbitmq_upstream.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.utils.dictdiffer", "json", "logging", "salt.utils.data"], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["all"], "class_names": [], "class_method_calls": ["logging.getLogger", "json.loads", "current_upstreams.get", "salt.utils"]}, "rabbitmq_user.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.utils.path", "logging"], "function_names": ["_get_current_tags", "_check_perms_changes", "__virtual__", "present", "absent"], "function_calls": ["_get_current_tags", "any", "_check_perms_changes", "list", "set", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "tags.split", "log.debug", "vhost_perms.items", "salt.utils", "vhost_perm.items"]}, "rabbitmq_vhost.py": {"libraries": ["salt.utils.path", "logging"], "function_names": ["absent", "present", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils"]}, "saltmod.py": {"libraries": ["fnmatch", "sys", "threading", "salt.exceptions", "time", "salt.output", "salt.utils.event", "salt.syspaths", "logging", "salt.utils.versions", "salt.utils.data"], "function_names": ["run_thread", "create_thread", "call_runner", "parallel_runners", "wheel", "_parallel_map", "_fire_args", "state", "wait_for_event", "runner", "function", "extract_changes", "__virtual__"], "function_calls": ["func", "iter", "next", "range", "type", "list", "str", "int", "_parallel_map", "zip", "all", "len", "_fire_args", "set", "isinstance", "map", "extract_changes"], "class_names": [], "class_method_calls": ["log.error", "thread.join", "runners.keys", "log.debug", "outputs.items", "func_ret.setdefault", "log.warning", "exc_value.with_traceback", "logging.getLogger", "outputs.values", "salt.output", "sys.exc_info", "no_change.add", "mdata.pop", "state_ret.setdefault", "arg.split", "obj.items", "runner_config.get", "tmp_ret.get", "log.trace", "fail_minions.split", "runners.items", "threading.Thread", "cmd_kw.update", "mdata.get", "time.time", "cmd_ret.items", "minion.strip", "salt.utils", "minions_seen.append", "runners.values", "salt.exceptions", "__opts__.get", "id_list.remove", "cmd_kw.pop", "fail.add", "fnmatch.fnmatch", "out.get", "id_list.index", "m_ret.values", "sevent.get_event", "thread.start"]}, "ssh_auth.py": {"libraries": ["sys", "re"], "function_names": ["_absent_test", "present", "manage", "_present_test", "absent"], "function_calls": ["_absent_test", "present", "list", "len", "_present_test", "set", "absent"], "class_names": [], "class_method_calls": ["re.compile", "keys.items", "key.rstrip", "all_potential_keys.extend", "name.split", "sshre.match", "ssh_key.split", "sys.modules", "fullkey.group", "sshre.search", "keyline.split"]}, "ssh_known_hosts.py": {"libraries": ["salt.utils.platform", "os", "salt.exceptions.CommandNotFoundError"], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["dict"], "class_names": [], "class_method_calls": ["os.path", "salt.utils"]}, "sysctl.py": {"libraries": ["re", "salt.exceptions.CommandExecutionError"], "function_names": ["present", "__virtual__"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["re.sub", "current.split"]}, "telemetry_alert.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["str", "int", "len", "float", "isinstance"], "class_names": [], "class_method_calls": ["difference.append", "post_body.items", "is_present.get", "alert_config.get"]}, "user.py": {"libraries": ["re", "logging"], "function_names": ["valid_username"], "function_calls": ["isinstance", "len"], "class_names": [], "class_method_calls": ["re.IGNORECASE", "logging.getLogger", "re.compile", "VALID_USERNAME.match"]}, "zabbix_action.py": {"libraries": ["salt.exceptions.SaltException", "json", "logging"], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["str", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.info", "json.dumps"]}, "zabbix_host.py": {"libraries": ["salt.utils.json", "collections.abc.Mapping", "salt.utils.dictdiffer", "copy.deepcopy"], "function_names": ["__virtual__", "assign_templates", "present", "_update_interfaces", "_interface_format", "absent"], "function_calls": ["dict", "_update_interfaces", "list", "str", "int", "sorted", "_interface_format", "deepcopy", "set", "isinstance"], "class_names": [], "class_method_calls": ["kwargs.pop", "intf_val.items", "interfaces_list.append", "inv_item.items", "curr_template_ids.append", "hostintf.pop", "value.get", "sum_kwargs.update", "cur_hostgroups.append", "error.append", "interfaces_dict.items", "salt.utils", "groupids.append", "other_interfaces.append", "inventory_diff.changed", "val_details.update", "host_extra_properties.get", "val_details.get", "requested_template_ids.append"]}, "zabbix_hostgroup.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["str"], "class_names": [], "class_method_calls": []}, "zabbix_mediatype.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["str", "int", "isinstance"], "class_names": [], "class_method_calls": ["error.append"]}, "zabbix_template.py": {"libraries": ["salt.exceptions.SaltException", "json", "logging"], "function_names": ["absent", "__virtual__", "present", "_get_existing_template_c_list", "_manage_component", "_adjust_object_lists", "is_present", "_diff_and_merge_host_list"], "function_calls": ["SaltException", "next", "dict", "str", "len", "_get_existing_template_c_list", "_manage_component", "_adjust_object_lists", "_diff_and_merge_host_list"], "class_names": [], "class_method_calls": ["logging.getLogger", "q_params.update", "CHANGE_STACK.append", "d_rules.append", "object_params.update", "log.info", "json.dumps", "discovery_components.append"]}, "zabbix_user.py": {"libraries": ["salt.utils.json", "salt.utils.versions.Version", "copy.deepcopy", "logging", "salt.exceptions.SaltException"], "function_names": ["__virtual__", "present", "admin_password_present", "_media_format", "absent"], "function_calls": ["Version", "dict", "list", "str", "int", "deepcopy", "all", "set", "_media_format"], "class_names": [], "class_method_calls": ["unique_passwords.reverse", "logging.getLogger", "unique_passwords.append", "medias_dict.items", "passwords.append", "log.debug", "medias_list.append", "seen.add", "user.get", "media_type.get", "error.append", "medattr.items", "salt.utils", "user_med.pop", "cur_usrgrps.append", "value.get"]}, "zabbix_usergroup.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["str", "int", "sorted"], "class_names": [], "class_method_calls": ["error.append"]}, "zabbix_usermacro.py": {"libraries": [], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["str", "int", "isinstance"], "class_names": [], "class_method_calls": ["error.append"]}, "zabbix_valuemap.py": {"libraries": ["salt.exceptions.SaltException", "json", "logging"], "function_names": ["absent", "present", "__virtual__"], "function_calls": ["str", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.info", "json.dumps"]}, "zone.py": {"libraries": ["salt.utils.atomicfile", "salt.utils.odict.OrderedDict", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.utils.args", "logging", "salt.modules.zonecfg._parse_value", "salt.modules.zonecfg._zonecfg_resource_default_selectors", "salt.utils.dictupdate.merge"], "function_names": ["absent", "resource_absent", "property_present", "uninstalled", "import_", "present", "detached", "resource_present", "attached", "property_absent", "export", "booted", "halted", "installed", "__virtual__"], "function_calls": ["_parse_value", "resource_absent", "property_present", "merge_dict", "dict", "resource_present", "property_absent", "OrderedDict", "len", "float", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "kwargs.items", "log.debug", "zonecfg_kwargs.update", "mode.lower", "resource.items", "resource_cfg.update", "salt.utils", "properties.append", "log.warning", "prop.items"]}, "syspaths.py": {"libraries": ["sys", "salt.utils.win_reg", "os", "salt._syspaths", "types", "salt.utils.platform", "os.path", "logging"], "function_names": ["_get_windows_root_dir"], "function_calls": ["globals", "hasattr", "_get_windows_root_dir", "setattr"], "class_names": [], "class_method_calls": ["__generated_syspaths.CONFIG_DIR", "__generated_syspaths.BASE_MASTER_ROOTS_DIR", "__generated_syspaths.LOGS_DIR", "log.debug", "__generated_syspaths.SPM_REACTOR_PATH", "__generated_syspaths.SRV_ROOT_DIR", "__generated_syspaths.PIDFILE_DIR", "os.path", "__generated_syspaths.BASE_FILE_ROOTS_DIR", "sys.platform", "log.warning", "logging.getLogger", "__generated_syspaths.SHARE_DIR", "__generated_syspaths.CACHE_DIR", "__generated_syspaths.LIB_STATE_DIR", "types.ModuleType", "__generated_syspaths.HOME_DIR", "__generated_syspaths.ROOT_DIR", "salt.utils", "__generated_syspaths.SPM_PARENT_PATH", "__PLATFORM.startswith", "__generated_syspaths.BASE_THORIUM_ROOTS_DIR", "__generated_syspaths.SPM_PILLAR_PATH", "__generated_syspaths.BASE_PILLAR_ROOTS_DIR", "os.environ", "__generated_syspaths.SPM_FORMULA_PATH", "__generated_syspaths.SOCK_DIR"]}, "template.py": {"libraries": ["salt.utils.sanitizers", "os", "time", "salt.utils.stringio", "salt.utils.files", "salt.utils.versions", "io", "codecs", "logging", "salt.utils.data"], "function_names": ["template_shebang", "check_render_pipe_str", "compile_template_str", "compile_template"], "function_calls": ["check_render_pipe_str", "template_shebang", "dict", "compile_template", "isinstance", "SLS_ENCODER", "render"], "class_names": [], "class_method_calls": ["ofile.write", "log.error", "kwargs.pop", "codecs.getencoder", "log.debug", "ret.seek", "input_data.strip", "pipestr.split", "os.path", "argline.strip", "log.warning", "logging.getLogger", "io.StringIO", "results.append", "line.strip", "ifile.read", "time.sleep", "r.strip", "input_data.seek", "kwargs.get", "logging.GARBAGE", "log.profile", "ret.read", "time.time", "salt.utils", "render_kwargs.update", "codecs.open", "os.unlink", "contents.replace", "render.__module__", "comb.split", "log.isEnabledFor", "line.startswith", "ifile.readline", "input_data.split"]}, "calc.py": {"libraries": ["statistics"], "function_names": ["median_high", "opmul", "opadd", "mul", "calc", "mode", "mean", "median_low", "median", "add", "median_grouped", "__virtual__"], "function_calls": ["calc", "len"], "class_names": [], "class_method_calls": ["vals.append", "statistics.mode", "statistics.median_grouped", "statistics.mean", "statistics.median_high", "statistics.median", "statistics.median_low"]}, "check.py": {"libraries": ["salt.utils.stringutils", "logging"], "function_names": ["gte", "ne", "eq", "len_gt", "lt", "len_gte", "len_eq", "contains", "len_ne", "lte", "len_lt", "len_lte", "gt", "event"], "function_calls": ["len"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "salt.utils"]}, "timer.py": {"libraries": ["time"], "function_names": ["hold"], "function_calls": [], "class_names": [], "class_method_calls": ["time.time"]}, "wheel.py": {"libraries": ["salt.wheel"], "function_names": ["cmd"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.wheel", "client.cmd_async"]}, "rediscluster.py": {"libraries": ["os", "hashlib", "salt.payload", "logging", "rediscluster", "salt.config.DEFAULT_HASH_TYPE"], "function_names": ["_redis_client", "rm_token", "list_tokens", "mk_token", "get_token", "__virtual__"], "function_calls": ["str", "_redis_client", "hash_type", "getattr"], "class_names": [], "class_method_calls": ["logging.getLogger", "rediscluster.exceptions", "k.decode", "opts.get", "redis_client.get", "salt.payload", "redis_client.delete", "os.urandom", "redis_client.set", "redis_client.keys", "rediscluster.StrictRedisCluster", "log.warning"]}, "ext_nodes.py": {"libraries": ["shlex", "subprocess", "salt.utils.platform", "logging", "salt.utils.win_functions.escape_argument", "salt.utils.yaml"], "function_names": ["top", "__virtual__"], "function_calls": ["_cmd_quote", "isinstance", "list"], "class_names": [], "class_method_calls": ["logging.getLogger", "shlex.quote", "shlex.split", "proc.stdout", "log.info", "salt.utils", "subprocess.run", "subprocess.PIPE"]}, "varstack_top.py": {"libraries": ["varstack"], "function_names": ["top", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["varstack.Varstack", "vs_.evaluate"]}, "base.py": {"libraries": ["os", "traceback", "ssl", "warnings", "salt.transport.zeromq", "salt.transport.tcp", "salt.utils.stringutils", "hashlib", "salt.transport.ws", "salt.transport.local", "logging"], "function_names": ["close", "__enter__", "ssl_context", "post_fork", "ipc_publish_server", "request_client", "__exit__", "publish", "on_recv", "publish_server", "request_server", "pre_fork", "publish_client", "ipc_publish_client", "publish_daemon", "common_name", "connect", "__init__", "_minion_hash", "__del__"], "function_calls": ["super", "dict", "hasher", "Exception", "publish_server", "int", "getattr", "_minion_hash", "isinstance", "hasattr", "publish_client"], "class_names": ["PublishServer", "Transport", "RequestClient", "TransportWarning", "DaemonizedRequestServer", "DaemonizedPublishServer", "RequestServer", "PublishClient"], "class_method_calls": ["ssl.PROTOCOL_TLS_CLIENT", "kwargs.pop", "context.set_ciphers", "context.verify_flags", "context.verify_mode", "ssl.VerifyFlags", "context.load_cert_chain", "ssl.Purpose", "os.path", "log.warning", "logging.getLogger", "ssl.PROTOCOL_TLS", "salt.transport", "opts.get", "context.load_verify_locations", "ssl.PROTOCOL_TLS_SERVER", "context.check_hostname", "ssl.create_default_context", "self._closing", "flag.upper", "traceback.format_stack", "warnings.warn", "salt.utils", "ssl.VerifyMode", "kwargs.update", "self._trace", "key.lower", "ssl_options.get", "self._connect_called", "context.protocol"]}, "frame.py": {"libraries": ["salt.utils.msgpack"], "function_names": ["_decode_embedded_list", "_decode_embedded_dict", "decode_embedded_strs", "frame_msg_ipc", "frame_msg"], "function_calls": ["_decode_embedded_dict", "isinstance", "_decode_embedded_list"], "class_names": [], "class_method_calls": ["key.decode", "output.append", "val.decode", "elem.decode", "src.decode", "salt.utils", "src.items"]}, "ipc.py": {"libraries": ["errno", "tornado", "tornado.concurrent", "tornado.ioloop.TimeoutError", "tornado.locks.Lock", "tornado.ioloop", "time", "salt.utils.versions.warn_until", "salt.transport.frame", "socket", "tornado.gen", "tornado.ioloop.IOLoop", "tornado.netutil", "tornado.iostream.IOStream", "tornado.iostream.StreamClosedError", "logging", "salt.utils.msgpack"], "function_names": ["close", "_read", "read_async", "future_with_timeout_callback", "__enter__", "handle_future", "read_sync", "discard_after_closed", "write_callback", "__exit__", "publish", "_timeout_callback", "handle_connection", "return_message", "_write", "connect", "handle_stream", "connected", "_null", "start", "__init__", "_connect", "read", "__del__", "_done_callback"], "function_calls": ["Lock", "future_with_timeout_callback", "super", "write_callback", "FutureWithTimeout", "IOStream", "TornadoTimeoutError", "set", "isinstance", "hasattr", "warn_until"], "class_names": ["IPCServer", "IPCMessagePublisher", "FutureWithTimeout", "IPCClient", "IPCMessageServer", "IPCMessageClient", "IPCMessageSubscriber"], "class_method_calls": ["stream.closed", "log.error", "future.result", "tornado.ioloop", "stream.read_bytes", "log.debug", "socket.AF_UNIX", "self.stream", "self._started", "self._timeout_callback", "self.set_result", "exc.errno", "log.warning", "logging.getLogger", "self._timeout_handle", "self.handle_connection", "header.get", "salt.transport", "self.unpacker", "stream.write", "self.payload_handler", "self._write", "self._future", "unpacker.feed", "self._connecting_future", "future.add_done_callback", "socket.AF_INET", "self._read_stream_future", "self.streams", "socket.SO_REUSEADDR", "log.trace", "self.io_loop", "stream.close", "self._read_in_progress", "self.socket_path", "self._closing", "self._connect", "self.opts", "self._read", "self.connected", "tornado.gen", "IOLoop.current", "self.set_exception", "self.sock", "tornado.netutil", "errno.EBADF", "time.time", "self._saved_data", "salt.utils", "socket.SOCK_STREAM", "tornado.concurrent", "socket.socket", "self.connect", "stream.set_close_callback", "self.close", "socket.SOL_SOCKET", "self.__class__", "self.handle_stream", "future._future_with_timeout"]}, "tcp.py": {"libraries": ["warnings", "multiprocessing", "salt.exceptions.SaltClientError", "salt.utils.files", "logging", "salt.payload", "salt.master", "salt.exceptions.SaltReqTimeoutError", "tornado.iostream", "salt.transport.base", "salt.utils.network.ip_bracket", "tornado.tcpclient", "salt.transport.frame", "uuid", "salt.utils.msgpack", "time", "salt.utils.process", "tornado.gen", "asyncio.exceptions", "tornado.netutil", "tornado.util", "salt.utils.asynchronous", "queue", "urllib", "errno", "tornado", "threading", "tornado.concurrent", "socket", "tornado.tcpserver", "salt.utils.platform", "salt.utils.versions", "select", "asyncio"], "function_names": ["close", "__enter__", "_null_callback", "post_fork", "_do_send", "handle_future", "getstream", "_decode_messages", "send", "write_callback", "run", "__exit__", "__getstate__", "on_recv", "_create_stream", "handle_connection", "socket_queue_thread", "_get_bind_addr", "pre_fork", "topic_support", "wrap_recv", "timeout_message", "remove_client", "check_close", "publish_daemon", "__setstate__", "connect", "_set_tcp_keepalive", "handle_stream", "remove_message_timeout", "decode_payload", "_stream_return", "connected", "socket", "start", "_message_id", "__init__", "__del__", "_get_socket"], "function_calls": ["list", "int", "TCPPuller", "ip_bracket", "hasattr", "Subscriber", "PubServer", "ClosingError", "write_callback", "super", "SaltReqTimeoutError", "Exception", "str", "isinstance", "_get_bind_addr", "callback", "LoadBalancerWorker", "TCPClientKeepAlive", "_set_tcp_keepalive", "RuntimeError", "set", "SaltMessageServer", "_get_socket"], "class_names": ["TCPPubClient", "RequestServer", "_TCPPubServerPublisher", "TCPPuller", "TCPPublishServer", "Subscriber", "PubServer", "ClosingError", "MessageClient", "LoadBalancerServer", "PublishClient", "TCPReqClient", "PublishServer", "RequestClient", "TCPReqServer", "LoadBalancerWorker", "TCPClientKeepAlive", "Resolver", "SaltMessageServer"], "class_method_calls": ["tornado.ioloop", "client.address", "stream.read_bytes", "client.id_", "self.clients", "self.backoff", "stream.connect", "logging.getLogger", "socket.SOL_TCP", "self.disconnect_callback", "self.__init__", "self.unpacker", "tornado.tcpclient", "self._socket", "self._on_recv", "socket.AF_INET6", "asyncio.wait_for", "self.host", "time.monotonic", "self._handle_connection", "self.ssl", "socket.AF_INET", "self.stop", "self.socket_queue", "kwargs.get", "self._read_in_progress", "self._mid", "self.connected", "tornado.gen", "tornado.netutil", "socket.SHUT_RDWR", "self.socket_queue_thread", "client._read_until_future", "self.address", "tornado.concurrent", "self.message_handler", "self.req_server", "self.pull_path", "sock.setsockopt", "pub_server.add_socket", "client.close", "self.__class__", "self.pub_server", "stream.closed", "kwargs.pop", "self.getstream", "log.exception", "socket.SO_KEEPALIVE", "self.stream", "errno.ECONNABORTED", "self._started", "log.info", "socket.TCP_KEEPCNT", "salt.payload", "self._closed", "self.send_queue", "urllib.parse", "self.check_close", "log.warning", "tornado.iostream", "self.handle_connection", "self.source_ip", "salt.transport", "stream.write", "self.payload_handler", "self.source_port", "self.path", "socket.SIO_KEEPALIVE_VALS", "future.set_exception", "select.select", "self._connect", "self.opts", "self._max_messages", "self.send_future_map", "queue.Empty", "self.pub_sock", "self.thread", "warnings.warn", "kwargs.update", "socket.socket", "sock.bind", "self.timeout_message", "self._trace", "self.presence_events", "self.connect", "errno.ENOTCONN", "uuid.uuid4", "log.error", "self.publish_daemon", "threading.Event", "self.publish_payload", "socket.AF_UNIX", "multiprocessing.Queue", "self._stream", "self.backlog", "exc.errno", "self.remove_client", "self.connect_callback", "self.presence_callback", "opts.get", "self.pull_port", "self.send_timeout_map", "self.poller", "self._tcp_client", "self.on_recv_handler", "self.publisher", "self._connecting_future", "self._stream_return_running", "self.resolver", "stream.close", "log.trace", "self.io_loop", "self.pub_host", "self.pull_host", "sock.listen", "self._closing", "self.on_recv_task", "threading.Thread", "asyncio.exceptions", "self.sock", "errno.EBADF", "stream.socket", "tornado.util", "socket.TCP_KEEPINTVL", "socket.SOCK_STREAM", "self.decode_payload", "to_remove.append", "self.recv", "client.stream", "self._stream_return", "self._message_id", "self._read_until_future", "self.remove_presence_callback", "sock.setblocking", "socket.TCP_KEEPIDLE", "self.handle_stream", "self.port", "asyncio.sleep", "parse.netloc", "future.result", "io_loop.start", "self.task", "log.debug", "sock.ioctl", "self._stream_read", "self.pub_port", "header.get", "unpacker.feed", "process_manager.add_process", "future.add_done_callback", "socket.SO_REUSEADDR", "self.handle_message", "self.pub_path", "asyncio.create_task", "salt.utils", "asyncio.Lock", "self._stop", "io_loop.add_callback", "tornado.tcpserver", "self.close", "self.pull_sock", "socket.SOL_SOCKET", "self.id_", "self._connect_called"]}, "ws.py": {"libraries": ["aiohttp.web", "salt.transport.base", "tornado.ioloop", "aiohttp", "time", "warnings", "salt.payload", "salt.transport.tcp._get_bind_addr", "multiprocessing", "socket", "salt.transport.frame", "salt.transport.tcp._get_socket", "logging", "salt.transport.tcp._set_tcp_keepalive", "salt.transport.tcp.USE_LOAD_BALANCER", "salt.transport.tcp.LoadBalancerServer", "asyncio"], "function_names": ["close", "__enter__", "__exit__", "__getstate__", "on_recv", "post_fork", "publish_daemon", "__init__", "_decode_messages", "get_master_uri", "__setstate__", "__del__", "connect", "topic_support", "pre_fork"], "function_calls": ["_get_bind_addr", "Exception", "list", "set", "isinstance", "_set_tcp_keepalive", "_get_socket", "callback"], "class_names": ["RequestServer", "PublishServer", "PublishClient", "RequestClient"], "class_method_calls": ["tornado.ioloop", "site.start", "self.clients", "runner.setup", "self.backoff", "session.ws_connect", "logging.getLogger", "self.disconnect_callback", "self.__init__", "self.sending", "self._socket", "asyncio.wait_for", "self.host", "time.monotonic", "self.ssl", "self.socket_queue", "kwargs.get", "self.puller", "self.connected", "self.handle_request", "tornado.netutil", "self.message_handler", "ws.close", "self.pull_path", "sock.setsockopt", "self.__class__", "self.getstream", "self._started", "log.info", "self.server", "salt.payload", "self._pub_payload", "self._closed", "log.warning", "self.pull_handler", "asyncio.start_unix_server", "self.source_ip", "salt.transport", "asyncio.Event", "reader.read", "self.source_port", "self.path", "msg.type", "ws.prepare", "ws.exception", "self._connect", "ws.send_bytes", "self.opts", "aiohttp.UnixConnector", "warnings.warn", "self._ws", "kwargs.update", "sock.bind", "io_loop.spawn_callback", "msg.data", "aiohttp.TCPConnector", "self.connect", "log.error", "self.publish_daemon", "self.pub_writer", "self.publish_payload", "asyncio.open_unix_connection", "multiprocessing.Queue", "self.backlog", "self._close", "self.connect_callback", "self._connecting", "aiohttp.WSMsgType", "aiohttp.web", "self.pub_reader", "self.pull_port", "opts.get", "self.poller", "self.on_recv_handler", "self.publisher", "asyncio.start_server", "sock.listen", "self.io_loop", "self.pub_host", "self.pull_host", "self.ws", "self._closing", "self.on_recv_task", "self.close_task", "session.close", "self.recv", "raw_msg.data", "self._session", "self._run", "sock.setblocking", "request.get_extra_info", "self.port", "self.message_client", "asyncio.sleep", "io_loop.start", "self.get_master_uri", "log.debug", "self.pub_port", "asyncio.open_connection", "unpacker.feed", "process_manager.add_process", "socket.SO_REUSEADDR", "self.handle_message", "self.session", "self.pub_path", "asyncio.create_task", "aiohttp.ClientSession", "salt.utils", "raw_msg.type", "io_loop.add_callback", "self.site", "self.close", "socket.SOL_SOCKET"]}, "zeromq.py": {"libraries": ["salt.utils.network.ip_bracket", "zmq", "salt.exceptions.SaltSystemExit", "salt.utils.versions", "logging"], "function_names": ["ip_bracket", "check_ipc_path_max_len"], "function_calls": ["getattr", "tuple", "int", "SaltSystemExit", "len", "_new_ip_bracket"], "class_names": [], "class_method_calls": ["logging.getLogger", "zmq.zmq_version", "zmq.__version__", "log.exception", "log.debug", "salt.utils"]}, "aggregation.py": {"libraries": ["salt.utils.odict.OrderedDict", "copy", "logging"], "function_names": ["mark", "aggregate", "levelise", "Scalar"], "function_calls": ["map_class", "levelise", "sequence_class", "bool", "int", "Sequence", "aggregate", "mark", "isinstance"], "class_names": ["Aggregate", "Sequence", "Map"], "class_method_calls": ["logging.getLogger", "obj_a.__class__", "obj_b.items", "log.debug", "response.append", "log.info", "log.warning", "copy.copy"]}, "args.py": {"libraries": ["fnmatch", "shlex", "salt.utils.jid", "salt.exceptions.SaltInvocationError", "salt.utils.yaml", "re", "inspect", "logging", "salt.utils.versions", "salt.utils", "salt.utils.data", "copy", "collections.namedtuple"], "function_names": ["condition_input", "invalid_kwargs", "arg_lookup", "shlex_split", "prepare_kwargs", "mapper", "test_mode", "format_call", "split_input", "yamlify_arg", "get_function_argspec", "argspec_report", "parse_kwarg", "parse_input", "parse_function", "clean_kwargs"], "function_calls": ["any", "list", "callable", "TypeError", "condition_input", "hasattr", "_ArgSpec", "str", "all", "parse_kwarg", "isinstance", "map", "arg_lookup", "SaltInvocationError", "dict", "get_function_argspec", "namedtuple", "yamlify_arg", "tuple", "zip", "len"], "class_names": [], "class_method_calls": ["brackets.append", "re.UNICODE", "aspec.keywords", "val.split", "param.VAR_KEYWORD", "missing_args.append", "extra.keys", "aspec.args", "fun.startswith", "sig.parameters", "param.KEYWORD_ONLY", "data.items", "func.__wrapped__", "invalid_kwargs.items", "logging.getLogger", "ret.get", "original_arg.startswith", "inspect._empty", "param.default", "_kwargs.update", "copy.deepcopy", "param.kind", "inspect.signature", "word.append", "_args.append", "defaults.append", "arg.pop", "sh.escapedquotes", "KWARG_REGEX.match", "data.pop", "args.append", "brackets.pop", "arg.strip", "fun.__module__", "args.pop", "fun.__name__", "fnmatch.filter", "ret.append", "param.POSITIONAL_OR_KEYWORD", "param.name", "salt.utils", "data.copy", "original_arg.strip", "x.strip", "re.compile", "kwargs.items", "aspec.defaults", "shlex.split", "param.VAR_POSITIONAL", "key.startswith", "all_kwargs.items", "arg.lower", "shlex.shlex"]}, "asynchronous.py": {"libraries": ["sys", "tornado.concurrent", "threading", "tornado.ioloop", "contextlib", "logging", "asyncio"], "function_names": ["close", "__enter__", "wrap", "__exit__", "current_ioloop", "__init__", "__getattr__", "_target", "_populate_async_methods", "_wrap", "__repr__"], "function_calls": ["method", "list", "getattr", "set", "cls", "hasattr"], "class_names": ["SyncWrapper"], "class_method_calls": ["orig_loop.asyncio_loop", "log.error", "thread.join", "tornado.ioloop", "log.exception", "self.obj", "io_loop.stop", "logging.getLogger", "sys.exc_info", "asyncio.set_event_loop", "self._async_methods", "results.append", "asyncio.new_event_loop", "io_loop.close", "self.io_loop", "contextlib.contextmanager", "threading.Thread", "self.loop_kwarg", "self.cls", "self._close_methods", "self.asyncio_loop", "self._wrap", "self._target", "self.close", "io_loop.run_sync", "io_loop.asyncio_loop", "thread.start"]}, "atomicfile.py": {"libraries": ["errno", "sys", "os", "ctypes", "time", "random", "salt.utils.win_dacl", "tempfile", "shutil"], "function_names": ["close", "__repr__", "__enter__", "__exit__", "_rename", "__init__", "__getattr__", "atomic_rename", "atomic_open", "_rename_atomic"], "function_calls": ["_CreateTransaction", "_MoveFileTransacted", "_MoveFileEx", "_CommitTransaction", "getattr", "_rename", "str", "TypeError", "atomic_rename", "isinstance", "_CloseHandle", "_AtomicWFile", "_rename_atomic"], "class_names": ["_AtomicWFile"], "class_method_calls": ["self._filename", "self._fh", "os.path", "ctypes.windll", "os.name", "ntf.name", "os.stat", "st.st_uid", "tempfile.NamedTemporaryFile", "time.sleep", "self._tmp_filename", "st.st_gid", "errno.EEXIST", "os.chown", "sys.maxint", "err.errno", "random.randint", "salt.utils", "shutil.copymode", "os.rename", "os.unlink", "os.remove", "self.close", "sys.getfilesystemencoding", "self.__class__"]}, "aws.py": {"libraries": ["xml.etree.ElementTree", "datetime.datetime", "binascii", "random", "time", "requests", "hashlib", "hmac", "re", "salt.config", "logging", "salt.utils.hashutils", "salt.utils.xmlutil", "copy", "urllib.parse"], "function_names": ["sig4", "sig2", "assumed_creds", "_sig_key", "creds", "get_location", "sleep_exponential_backoff", "query", "get_region_from_metadata", "_sign", "get_metadata"], "function_calls": ["sig4", "assumed_creds", "_sig_key", "get_location", "creds", "sig2", "list", "enumerate", "sleep_exponential_backoff", "sorted", "zip", "get_region_from_metadata", "_sign", "isinstance", "map", "get_metadata"], "class_names": [], "class_method_calls": ["result.content", "a_canonical_headers.append", "provider.copy", "log.error", "method.encode", "result.status_code", "result.json", "log.debug", "str.lower", "params.copy", "msg.encode", "log.info", "prov_dict.get", "valid_session_name_re.sub", "time.mktime", "timenow.strftime", "a_signed_headers.append", "params_with_headers.keys", "urllib.parse", "log.warning", "logging.getLogger", "string_to_sign.encode", "sig.strip", "opts.get", "hashed.digest", "providers.get", "item.tag", "params_with_headers.get", "requests.put", "copy.deepcopy", "time.sleep", "random.uniform", "token_result.ok", "new_headers.keys", "requests.exceptions", "log.trace", "querystring.encode", "xml.to_dict", "binascii.b2a_base64", "hmac.new", "ret.append", "header.lower", "requests.request", "provider.get", "salt.utils", "data.get", "re.compile", "headers.copy", "datetime.utcnow", "prov_dict.keys", "provider_shadow.pop", "requests.get", "hashlib.sha256", "endpoint.encode", "exc.response", "token_result.text", "result.text", "salt.config", "result.raise_for_status", "ET.fromstring"]}, "boto3mod.py": {"libraries": ["sys", "boto3", "salt.loader.context", "boto3.session", "salt.utils.stringutils", "hashlib", "functools.partial", "salt.exceptions.SaltInvocationError", "botocore", "logging", "salt.utils.versions", "botocore.exceptions"], "function_names": ["paged_call", "cache_id_func", "get_region", "get_error", "_option", "exactly_n", "exactly_one", "cache_id", "get_connection", "assign_funcs", "get_connection_func", "ordered", "json_objs_equal", "_get_profile", "__virtual__"], "function_calls": ["any", "iter", "range", "setattr", "cache_id_func", "partial", "_option", "SaltInvocationError", "str", "get_connection_func", "ordered", "sorted", "all", "isinstance", "_get_profile", "function", "exactly_n"], "class_names": [], "class_method_calls": ["kwargs.pop", "boto3.session", "hashlib.md5", "log.info", "botocore.exceptions", "logging.getLogger", "ret.get", "session.client", "sys.modules", "__pillar__.get", "__context__.update", "e.args", "salt.loader", "__context__.clear", "__salt_loader__.named_context", "__context__.get", "salt.utils", "__context__.items", "logging.CRITICAL", "_profile.get", "__context__.values", "obj.items"]}, "boto_elb_tag.py": {"libraries": [], "function_names": ["startElement", "endElement", "get_tag_descriptions", "__init__", "__virtual__"], "function_calls": ["TagSet"], "class_names": ["TagSet", "TagDescriptions"], "class_method_calls": ["self.load_balancer_name", "self._current_value", "self.tags", "self.connection", "self._tags", "self._current_key", "dict.__init__", "self._load_balancer_name"]}, "botomod.py": {"libraries": ["sys", "salt.loader.context", "salt.utils.stringutils", "hashlib", "functools.partial", "salt.exceptions.SaltInvocationError", "salt.loader.minion_mods", "logging", "salt.utils.versions", "boto.exception", "boto"], "function_names": ["paged_call", "cache_id_func", "get_error", "exactly_one", "assign_funcs", "exactly_n", "get_connection", "cache_id", "get_connection_func", "_get_profile", "__virtual__"], "function_calls": ["any", "minion_mods", "iter", "__import__", "setattr", "cache_id_func", "range", "partial", "SaltInvocationError", "str", "get_connection_func", "_get_profile", "all", "getattr", "isinstance", "hasattr", "function", "exactly_n"], "class_names": [], "class_method_calls": ["kwargs.pop", "hashlib.md5", "logging.getLogger", "ret.get", "sys.modules", "e.reason", "__context__.update", "boto.exception", "salt.loader", "__context__.clear", "__salt_loader__.named_context", "__context__.get", "svc_mod.connect_to_region", "salt.utils", "e.status", "__context__.items", "e.message", "logging.CRITICAL", "_profile.get", "__context__.values", "e.error_code"]}, "channel.py": {"libraries": ["copy"], "function_names": ["iter_transport_opts"], "function_calls": ["set"], "class_names": [], "class_method_calls": ["t_opts.update", "transports.add", "copy.deepcopy", "opts.get"]}, "color.py": {"libraries": ["os", "salt.utils.files", "salt.utils.yaml", "logging", "salt.utils.textformat.TextFormat", "salt.utils.data"], "function_names": ["get_color_theme", "get_colors"], "function_calls": ["get_color_theme", "isinstance", "TextFormat"], "class_names": [], "class_method_calls": ["logging.getLogger", "os.path", "salt.utils", "colors.update", "log.warning"]}, "compat.py": {"libraries": ["sys", "importlib", "salt.loader", "types", "copy"], "function_names": ["cmp", "_deepcopy_method", "pack_dunder", "deepcopy_bound", "reload"], "function_calls": ["type", "setattr", "isinstance", "hasattr", "reload"], "class_names": [], "class_method_calls": ["mod.__opts__", "x.im_func", "salt.loader", "types.MethodType", "copy.deepcopy", "copy._deepcopy_dispatch", "sys.modules", "importlib.reload", "x.im_class", "x.im_self"]}, "configcomparer.py": {"libraries": [], "function_names": ["compare_and_update_config"], "function_calls": ["enumerate", "compare_and_update_config", "isinstance", "len"], "class_names": [], "class_method_calls": ["update_config.append", "update_config.get", "config.items"]}, "ctx.py": {"libraries": ["contextvars", "_contextvars", "contextlib"], "function_names": ["get_request_context", "request_context"], "function_calls": [], "class_names": [], "class_method_calls": ["contextlib.contextmanager", "request_ctxvar.reset", "request_ctxvar.set", "contextvars.ContextVar", "request_ctxvar.get"]}, "dateutils.py": {"libraries": ["salt.utils.stringutils", "datetime", "timelib", "salt.utils.decorators.jinja.jinja_filter"], "function_names": ["total_seconds", "date_cast", "strftime"], "function_calls": ["RuntimeError", "jinja_filter", "date_cast", "int", "float", "isinstance", "ValueError"], "class_names": [], "class_method_calls": ["timelib.strtodatetime", "datetime.datetime", "td.days", "date.isdigit", "td.seconds", "salt.utils", "td.microseconds"]}, "debug.py": {"libraries": ["sys", "os", "traceback", "time", "salt.utils.stringutils", "yappi", "salt.utils.files", "inspect", "signal", "tempfile"], "function_names": ["_handle_sigusr2", "inspect_stack", "enable_sigusr1_handler", "caller_name", "_handle_sigusr1", "enable_sig_handler", "_makepretty", "enable_sigusr2_handler"], "function_calls": ["int", "len", "getattr", "enable_sig_handler", "hasattr", "_makepretty"], "class_names": [], "class_method_calls": ["printout.write", "traceback.print_stack", "inspect.getmodule", "inspect.stack", "os.path", "parentframe.f_code", "inspect.getframeinfo", "parentframe.f_locals", "os.getpid", "yappi.clear_stats", "yappi.get_func_stats", "yappi.stop", "name.append", "time.time", "yappi.start", "salt.utils", "module.__name__", "tempfile.gettempdir", "yappi.is_running", "signal.signal", "sys.stderr"]}, "extension_deprecation.py": {"libraries": ["salt.utils.versions", "salt.utils.args", "functools.wraps", "logging"], "function_names": ["wrapper", "decorator", "extension_deprecation_message"], "function_calls": ["wraps", "function"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils", "function.__name__"]}, "path.py": {"libraries": ["os"], "function_names": ["is_executable", "is_readable", "is_writeable"], "function_calls": [], "class_names": [], "class_method_calls": ["os.X_OK", "os.W_OK", "os.F_OK", "os.path", "os.R_OK", "os.access"]}, "dictdiffer.py": {"libraries": ["collections.abc.Mapping", "copy"], "function_names": ["deep_diff", "unchanged", "_get_values", "removed", "_changed", "changed", "_unchanged", "diff", "_get_changes", "diffs", "__init__", "old_values", "recursive_diff", "_get_diffs", "_it_addrm", "changes_str", "new_values", "added"], "function_calls": ["super", "_changed", "_unchanged", "list", "RecursiveDictDiffer", "sorted", "set", "DictDiffer", "isinstance"], "class_names": ["RecursiveDictDiffer", "DictDiffer"], "class_method_calls": ["keys.append", "self.NONE_VALUE", "cls.NONE_VALUE", "self.intersect", "keys.extend", "self._get_changes", "copy.deepcopy", "self.current_dict", "self._diffs", "changes_strings.extend", "self.diffs", "changes_strings.append", "self.set_current", "cls._get_values", "self._get_diffs", "self._get_values", "self.past_dict", "tmp_old.get", "cls._get_changes", "tmp_new.get", "self.set_past", "stack.pop", "self._it_addrm", "self.ignore_unset_values", "stack.extend", "cls._get_diffs", "ret_dict.update", "tmps.append"]}, "dicttrim.py": {"libraries": ["sys", "salt.payload"], "function_names": ["trim_dict", "_trim_dict_in_dict"], "function_calls": ["float", "_trim_dict_in_dict", "isinstance"], "class_names": [], "class_method_calls": ["sys.getsizeof", "salt.payload"]}, "dictupdate.py": {"libraries": ["salt.serializers.yamlex.merge_recursive", "salt.utils.odict.OrderedDict", "salt.defaults.DEFAULT_TARGET_DELIM", "salt.exceptions.SaltInvocationError", "salt.utils.decorators.jinja.jinja_filter", "logging", "collections.abc.Mapping", "salt.utils.data", "copy"], "function_names": ["update", "merge_list", "update_dict_key_value", "merge", "extend_dict_key_value", "set_dict_key_value", "append_dict_key_value", "_dict_rpartition", "merge_aggregate", "merge_recurse", "merge_overwrite", "ensure_dict_key"], "function_calls": ["update", "type", "merge_list", "SaltInvocationError", "_yamlex_merge_recursive", "list", "jinja_filter", "TypeError", "OrderedDict", "_dict_rpartition", "merge_aggregate", "merge_recurse", "set", "isinstance", "merge_overwrite", "ensure_dict_key"], "class_names": [], "class_method_calls": ["logging.getLogger", "keys.rpartition", "renderer.startswith", "upd.keys", "dest.get", "a_keys.pop", "obj_a.items", "copy.deepcopy", "dest.keys", "renderer.split", "keys.split", "salt.utils", "merged.extend", "log.warning"]}, "dns.py": {"libraries": ["string", "ssl", "hashlib", "salt.utils.files", "logging", "tldextract", "salt.utils.path", "shlex", "salt._compat.ipaddress", "base64", "salt.utils.stringutils", "functools", "itertools", "salt.utils.network", "salt.modules.cmdmod", "dns.resolver", "re", "binascii", "random", "salt.utils.odict.OrderedDict", "socket"], "function_names": ["_lookup_dig", "_wrapper", "ptr_name", "validate", "service", "sshfp_data", "services", "srv_name", "_lookup_nslookup", "spf_rec", "_to_port", "mx_data", "_rec2data", "mx_rec", "tlsa_rec", "_lookup_gai", "srv_rec", "caa_rec", "lookup", "_lookup_host", "_multi_srvr", "_data2rec_group", "a_rec", "soa_rec", "tlsa_data", "sshfp_rec", "parse_resolv", "_lookup_drill", "_cast", "_weighted_order", "_data2rec", "aaaa_rec", "srv_data", "query", "_data_clean", "_tree", "host", "_lookup_dnspython"], "function_calls": ["any", "type", "_data_clean", "ptr_name", "resolv_func", "rec_cast", "list", "int", "OrderedDict", "float", "srv_name", "_to_port", "KeyError", "_rec2data", "str", "lookup", "isinstance", "_multi_srvr", "_data2rec_group", "dict", "ValueError", "resolver", "iter", "next", "sum", "_cast", "_weighted_order", "_data2rec", "enumerate", "query", "zip", "len", "_tree", "set"], "class_names": ["RFC"], "class_method_calls": ["schema.items", "dns.rdatatype", "nameservers.append", "res.append", "re.search", "logging.getLogger", "mech_spec.startswith", "data.strip", "resolver.lifetime", "base64.b64decode", "socket.AF_INET6", "socket.AF_INET", "rec_cast.keys", "resolver.nameservers", "pp_res.get", "hasher.hexdigest", "qres.items", "string.whitespace", "schema.values", "shlex.split", "binascii.b2a_hex", "resolver.query", "res.items", "ip_net.version", "val.split", "socket.gaierror", "ipaddress.IPv4Address", "RFC.SSHFP_ALGO", "log.info", "svc.isdigit", "options.append", "log.warning", "RFC.SRV_PROTO", "ip4_nameservers.append", "line.strip", "res.get", "domain.find", "pub.strip", "val.strip", "ipaddress.IPv6Address", "itertools.takewhile", "salt.modules", "dns.exception", "_stdout.splitlines", "log.error", "sortlist.append", "param.split", "weights.pop", "mech_spec.find", "ssl.PEM_cert_to_DER_cert", "socket.getaddrinfo", "ip_addr.version", "mech_spec.split", "mods.add", "name.find", "dns.flags", "data.endswith", "RFC.CAA_TAGS", "curr_proto.append", "ip6_nameservers.append", "svc_res.get", "opts.get", "resolver.ednsflags", "svc_def.split", "svc_def.startswith", "dns.resolver", "hashlib.new", "hasher.update", "val.version", "data.startswith", "val.lower", "rdata.values", "schema.keys", "line.startswith", "answer.startswith", "RFC.TLSA_USAGE", "ipaddress.ip_interface", "rdata.pop", "data.values", "log.debug", "comment.strip", "random.random", "RFC.TLSA_MATCHING", "RFC.TLSA_SELECT", "recs.pop", "name.endswith", "rec_data.split", "svc_defs.readlines", "rr.to_text", "ipaddress.ip_network", "domain.rstrip", "line.split", "tldextract.extract", "RFC.validate", "ip.with_netmask", "salt.utils", "RFC.SSHFP_HASH", "functools.wraps", "svc_def.pop", "rdata.split", "rdtype.upper", "socket.SOCK_RAW", "svc_def.strip", "ipaddress.ip_address", "ip_net.network_address", "ref.items", "spf_fields.pop"]}, "container.py": {"libraries": ["os", "salt.exceptions.SaltInvocationError"], "function_names": ["ipc_mode", "cpuset_mems", "restart_policy", "group_add", "device_write_bps", "detach", "command", "volumes", "volumes_from", "cpu_period", "shm_size", "dns", "cpu_group", "log_opt", "blkio_weight", "links", "network_mode", "devices", "hostname", "pid_mode", "read_only", "userns_mode", "labels", "mem_limit", "tty", "cpuset_cpus", "user", "tmpfs", "working_dir", "cap_drop", "security_opt", "mem_swappiness", "lxc_conf", "_merge_keys", "cap_add", "ports", "dns_search", "log_driver", "stdin_open", "binds", "memswap_limit", "pids_limit", "publish_all_ports", "dns_opt", "extra_hosts", "storage_opt", "stop_signal", "entrypoint", "isolation", "name", "_post_processing", "mac_address", "device_read_iops", "network_disabled", "auto_remove", "host_config", "environment", "blkio_weight_device", "device_read_bps", "port_bindings", "stop_timeout", "ulimits", "cpu_shares", "sysctls", "device_write_iops", "domainname", "oom_kill_disable", "oom_score_adj", "volume_driver", "_format_port", "privileged"], "function_calls": ["range", "SaltInvocationError", "list", "enumerate", "int", "str", "_format_port", "all", "len", "set", "isinstance"], "class_names": [], "class_method_calls": ["proto.lower", "kwargs.pop", "actual_volumes.extend", "new_ports.add", "helpers.translate_command", "os.path", "helpers.translate_int", "helpers.translate_dict", "helpers.validate_ip", "helpers.translate_device_rates", "helpers.map_vals", "helpers.NOTSET", "helpers.split", "cport.split", "container_port.partition", "kwargs.get", "ports_to_open.update", "kwargs.setdefault", "helpers.get_port_def", "helpers.translate_stringlist", "helpers.translate_bool", "helpers.translate_labels", "ALIASES.items", "helpers.get_port_range", "item.partition", "auto_volumes.append", "helpers.translate_bytes", "helpers.translate_key_val", "new_ports.update", "helpers.translate_str", "actual_volumes.sort"]}, "helpers.py": {"libraries": ["warnings", "psutil", "tests.support.sminion.create_sminion", "logging", "tempfile", "tests.support.pytest.loader.LoaderModuleMock", "requests", "tests.support.runtests.RUNTIME_VARS", "pathlib", "pprint", "saltfactories.utils.random_string", "contextlib.contextmanager", "os", "time", "textwrap", "subprocess", "types", "saltfactories.utils.tempfiles.temp_file", "attr", "salt.utils.platform", "pytest", "salt.utils.pycrypto", "shutil"], "function_names": ["group", "__enter__", "shell_test_false", "_pkgname", "temp_state_file", "reap_stray_processes", "__attrs_post_init__", "download_file", "_default_sminion", "__exit__", "_laydown_files", "change_cwd", "_default_group_name", "generate_entropy", "_default__group", "temp_pillar_file", "info", "remove_stale_proxy_minion_cache_file", "on_terminate", "_default_hashed_password", "_set_group", "remove_stale_master_key", "create_account", "loader_mock", "_default_username", "_srcdir", "shell_test_true", "create_group", "remove_stale_minion_key", "_default_name", "_default_password", "__init__", "salt_loader_module_functions"], "function_calls": ["type", "LoaderModuleMock", "RuntimeError", "TestAccount", "getattr", "str", "int", "create_sminion", "dir", "random_string", "len", "temp_file", "locals", "isinstance", "TestGroup"], "class_names": ["TestAccount", "FakeSaltExtension", "TestGroup", "EntropyGenerator"], "class_method_calls": ["self.sminion", "f.write", "process.pid", "RUNTIME_VARS.TMP_BASEENV_STATE_TREE", "self.current_entropy", "logging.getLogger", "kernel_poolsize_file.exists", "RUNTIME_VARS.TMP_BASEENV_PILLAR_TREE", "extension_package_dir.mkdir", "runners1_dir.mkdir", "RUNTIME_VARS.TMP_PRODENV_STATE_TREE", "shutil.which", "RUNTIME_VARS.TMP_PRODENV_PILLAR_TREE", "self.pkgname", "utils_dir.joinpath", "name.default", "setup_cfg.write_text", "group_name.default", "kernel_poolsize_file.read_text", "child.kill", "psutil.wait_procs", "setup_py.write_text", "self.group", "self._delete_group", "setup_py.exists", "proxy_minion.config", "wheel_dir.mkdir", "self.password", "children.reverse", "log.info", "runners2_dir.joinpath", "log.warning", "pprint.pformat", "modules_dir.joinpath", "pytest.fail", "subprocess.run", "runners2_dir.mkdir", "kernel_entropy_file.read_text", "name.replace", "self.generate_entropy", "shutil.rmtree", "pathlib.Path", "states_dir.mkdir", "warnings.warn", "time.time", "self._laydown_files", "self.gid", "sminion.default", "password.default", "proc.returncode", "extension_package_dir.joinpath", "self.create_group", "pkgname.default", "self.name", "name.startswith", "target_file.name", "children.append", "self.minimum_entropy", "attr.ib", "os.getpid", "func_alias.get", "psutil.NoSuchProcess", "_group.default", "pytest.helpers", "self.max_minutes", "tempfile.NamedTemporaryFile", "target_file.close", "runners1_dir.joinpath", "kernel_entropy_file.exists", "pytest.skip", "os.chdir", "types.ModuleType", "types.SimpleNamespace", "textwrap.dedent", "psutil.Process", "self.username", "master.id", "module.__name__", "self._group", "setup_cfg.exists", "self._delete_account", "psutil.pid_exists", "attr.NOTHING", "wheel_dir.joinpath", "requests.get", "self.skip", "extension_package_dir.exists", "self.info", "attr.s", "utils_dir.mkdir", "username.default", "modules_dir.mkdir", "self.tmp_path_factory", "log.debug", "types.FunctionType", "os.path", "states_dir.joinpath", "self.hashed_password", "proxy_minion.id", "r.iter_content", "master.config", "r.raise_for_status", "os.getcwd", "func.__name__", "srcdir.default", "child.as_dict", "group.setter", "self.group_name", "self.current_poolsize", "hashed_password.default", "self.srcdir", "salt.utils", "os.unlink", "self.members"]}, "entrypoints.py": {"libraries": ["time", "types", "functools", "logging", "salt._compat.importlib_metadata"], "function_names": ["iter_entry_points", "_wrapped", "_wrapper", "timed_lru_cache", "name_and_version_from_entry_point"], "function_calls": ["f", "timed_lru_cache"], "class_names": [], "class_method_calls": ["f.delta", "logging.getLogger", "entry_point.name", "f.expiration", "types.SimpleNamespace", "importlib_metadata.entry_points", "entry_points.items", "entry_point.dist", "time.monotonic", "f.cache_clear", "entry_points_listing.append", "functools.lru_cache", "entry_points.select", "functools.wraps"]}, "environment.py": {"libraries": ["os"], "function_names": ["get_module_environment"], "function_calls": [], "class_names": [], "class_method_calls": ["m_names.append", "result.update", "env_src.get", "os.path", "env.get"]}, "etcd_util.py": {"libraries": ["etcd", "urllib3.exceptions.MaxRetryError", "urllib3.exceptions.ReadTimeoutError", "etcd3", "logging", "salt.utils.versions", "salt.exceptions.SaltException", "salt.utils.msgpack"], "function_names": ["rm", "write_file", "get", "_maybe_encode_key", "_maybe_encode_value", "_flatten", "ls", "_get_etcd_opts", "write", "delete", "_decode_kv", "_expand", "watch", "update", "_maybe_decode_key", "_expand_recurse", "get_conn", "tree", "_maybe_decode_value", "__init__", "write_directory", "read", "set"], "function_calls": ["Etcd3DirectoryException", "super", "EtcdClient", "EtcdClientV3", "EtcdLibraryNotInstalled", "IncompatibleEtcdRequirements", "_get_etcd_opts", "str", "len", "EtcdUtilWatchTimeout", "getattr", "NotImplementedError", "isinstance", "hasattr"], "class_names": ["Etcd3DirectoryException", "EtcdBase", "EtcdClient", "EtcdLibraryNotInstalled", "IncompatibleEtcdRequirements", "EtcdClientV3", "EtcdUtilWatchTimeout"], "class_method_calls": ["self.write_file", "self._expand", "kwargs.pop", "self.encode_values", "fields.items", "opts_merged.pop", "log.error", "self.read", "etcd.EtcdRootReadOnly", "log.debug", "self.get", "self.conf", "kv.value", "etcd.EtcdDirNotEmpty", "self._maybe_encode_key", "path.endswith", "etcd.Client", "self._maybe_decode_key", "log.info", "self._decode_kv", "opts_pillar.get", "result.value", "data.items", "log.warning", "logging.getLogger", "item.dir", "opts.get", "opts_merged.update", "self._flatten", "etcd3.Client", "kvs.items", "item.value", "self.raw_keys", "value.decode", "lease.grant", "self.host", "items.pop", "etcd.EtcdException", "self.write", "kwargs.get", "client.tree", "result.key", "self._maybe_encode_value", "key.lstrip", "etcd.EtcdKeyNotFound", "self.xargs", "etcd.EtcdNotDir", "item.key", "key.decode", "self._maybe_decode_value", "self._expand_recurse", "salt.utils", "self.tree", "self.client", "self.write_directory", "lease.ID", "self.delete", "self.encode_keys", "watcher.watch_once", "etcd.EtcdNotFile", "auth.copy", "flat.update", "etcd.EtcdConnectionFailed", "path.strip", "self.unicode_errors", "k.strip", "tree.items", "self.raw_values", "items.children", "result.deleted", "kv.key", "result.pop", "path.encode", "conf.get", "extra_kwargs.setdefault", "self.port"]}, "extend.py": {"libraries": ["sys", "os", "salt.version", "jinja2.Template", "salt.utils.odict.OrderedDict", "click", "salt.utils.files", "datetime.date", "logging", "salt.serializers.yaml.deserialize", "tempfile", "shutil"], "function_names": ["apply_template", "_mergetree", "_mergetreejinja", "run", "_fetch_templates", "_get_template", "_prompt_choice", "_prompt_user_variable"], "function_calls": ["apply_template", "_mergetree", "Template", "run", "_mergetreejinja", "_fetch_templates", "list", "enumerate", "OrderedDict", "deserialize", "print", "_get_template", "zip", "_prompt_choice", "_prompt_user_variable"], "class_names": [], "class_method_calls": ["extension_context.get", "source_file.read", "templates.append", "log.debug", "date.today", "os.listdir", "sys.exit", "log.info", "os.path", "shutil.copytree", "val.get", "click.Choice", "choice_map.items", "choice_map.keys", "logging.getLogger", "salt.version", "click.prompt", "dest_file.write", "context.update", "tempfile.mkdtemp", "os.mkdir", "salt.utils", "template.get", "param_dict.copy", "shutil.copy2"]}, "extmods.py": {"libraries": ["os", "salt.utils.url", "salt.config.DEFAULT_HASH_TYPE", "salt.utils.files", "salt.fileclient", "logging", "salt.utils.hashutils", "salt.utils.path", "shutil"], "function_names": ["_list_emptydirs", "_listdir_recursively", "sync"], "function_calls": ["_list_emptydirs", "_listdir_recursively", "bool", "set", "isinstance"], "class_names": [], "class_method_calls": ["log.error", "cache.extend", "extmod_blacklist.split", "log.debug", "shutil.copyfile", "log.info", "os.path", "logging.getLogger", "fileclient.cache_dir", "os.sep", "opts.get", "extmod_whitelist.split", "os.makedirs", "remote.add", "emptydirs.append", "saltenv.split", "ret.append", "shutil.rmtree", "salt.utils", "salt.fileclient", "file_list.append", "os.remove"]}, "filebuffer.py": {"libraries": ["salt.utils.files", "salt.exceptions.SaltException", "salt.utils.stringutils"], "function_names": ["__enter__", "next", "__iter__", "__exit__", "buffered", "__init__"], "function_calls": ["InvalidFileMode"], "class_names": ["BufferedReader", "InvalidFileMode"], "class_method_calls": ["self.__file", "self.__path", "self.__buffered", "salt.utils", "self.__max_in_mem", "self.__chunk_size"]}, "files.py": {"libraries": ["logging", "tempfile", "salt.utils.path", "urllib.parse", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "io", "codecs", "fcntl", "os", "time", "subprocess", "re", "contextlib", "errno", "salt.exceptions.FileLockError", "salt.exceptions.MinionError", "salt.utils.platform", "salt.modules.selinux", "salt.utils.decorators.jinja.jinja_filter", "stat", "shutil"], "function_names": ["__clean_tmp", "safe_walk", "normalize_mode", "rename", "fpopen", "recursive_copy", "_replace", "case_insensitive_filesystem", "rm_rf", "mkstemp", "list_files", "human_size_to_bytes", "_raise_error", "backup_minion", "st_mode_to_octal", "copyfile", "get_umask", "safe_rm", "check_bom", "is_binary", "process_read_exception", "remove", "check_system_encoding", "check_ascii", "is_fcntl_available", "check_utf8_markers", "int2byte", "is_text", "_onerror", "fopen", "safe_filepath", "safe_filename_leaf", "guess_archive_type", "flopen", "get_encoding", "wait_lock", "set_umask", "is_empty"], "function_calls": ["any", "__clean_tmp", "range", "list", "int", "safe_walk", "TypeError", "oct", "CommandExecutionError", "float", "hasattr", "rm_rf", "mkstemp", "onerror", "OSError", "_raise_error", "str", "jinja_filter", "backup_minion", "check_bom", "isinstance", "check_system_encoding", "check_ascii", "is_fcntl_available", "check_utf8_markers", "int2byte", "bytes", "FileLockError", "ValueError", "fopen", "safe_filename_leaf", "MinionError", "open", "len", "func", "set"], "class_names": [], "class_method_calls": ["re.UNICODE", "fcntl.F_GETFD", "shutil.copyfile", "_data.decode", "fstat.st_uid", "logging.getLogger", "dname.replace", "size_exp_map.get", "os.O_CREAT", "f_handle.fileno", "kwargs.get", "re_obj.group", "os.makedirs", "fcntl.LOCK_UN", "HASHES.items", "data.decode", "tempfile.mkstemp", "fstat.st_mode", "exc.strerror", "kwargs.pop", "mode.replace", "d_stat.st_gid", "d_stat.st_uid", "shutil.move", "urllib.parse", "time.sleep", "os.fdopen", "errno.EEXIST", "dir_sep.encode", "fp_.read", "contextlib.contextmanager", "name.lower", "os.umask", "shutil.rmtree", "time.time", "re.match", "os.O_EXCL", "os.rename", "path.rsplit", "match.group", "os.W_OK", "fstat.st_gid", "salt.modules", "re.sub", "logging.DEBUG", "os.chmod", "codecs.BOM_UTF32_BE", "log.error", "mode.strip", "os.O_WRONLY", "time.strftime", "fcntl.fcntl", "exc.errno", "os.sep", "os.stat", "tempfile.NamedTemporaryFile", "os.chown", "log.trace", "fcntl.F_SETFD", "fcntl.LOCK_SH", "stat.S_IMODE", "errno.ENOENT", "d_stat.st_mode", "errno.EACCES", "io.DEFAULT_BUFFER_SIZE", "block.translate", "dirs.append", "codecs.BOM_UTF32_LE", "fp2_.read", "_seen.add", "root.replace", "status.st_ino", "stat.S_IWUSR", "log.debug", "os.listdir", "os.path", "subprocess.call", "ret.add", "os.access", "fcntl.FD_CLOEXEC", "nondirs.append", "os.open", "name.endswith", "os.devnull", "codecs.BOM_UTF16_LE", "fcntl.flock", "status.st_dev", "block.decode", "codecs.BOM_UTF16_BE", "dir_sep.join", "salt.utils", "_data.startswith", "codecs.BOM_UTF8", "os.remove", "os.close", "fcntl.LOCK_EX", "tmp_file.name"]}, "find.py": {"libraries": ["sys", "os", "salt.utils.path", "salt.utils.hashutils", "time", "salt.utils.stringutils", "pwd", "salt.utils.filebuffer.BufferedReader", "re", "salt.utils.args", "logging", "subprocess.Popen", "grp", "stat", "subprocess.PIPE", "salt.defaults.exitcodes", "shutil"], "function_names": ["_check_criteria", "find", "_perform_actions", "path_depth", "__init__", "_main", "execute", "_parse_size", "requires", "match", "_parse_interval"], "function_calls": ["list", "int", "Popen", "_parse_size", "oct", "float", "hasattr", "super", "str", "_parse_interval", "path_depth", "BufferedReader", "print", "globals", "ValueError", "PrintOption", "_main", "len", "set", "Finder"], "class_names": ["Option", "GroupOption", "GrepOption", "InameOption", "OwnerOption", "ExecOption", "RegexOption", "PrintOption", "IregexOption", "NameOption", "TypeOption", "DeleteOption", "MtimeOption", "Finder", "SizeOption"], "class_method_calls": ["self.command", "log.error", "os.lstat", "stat.S_IFSOCK", "_FILE_TYPES.get", "re.VERBOSE", "self.test", "self.actions", "stat.S_IFIFO", "sys.exit", "value.replace", "os.path", "stat.S_IFBLK", "scalar.startswith", "stat.S_IFLNK", "self.ftypes", "logging.getLogger", "self.criteria", "criterion.requires", "os.stat", "action.requires", "grp.getgrnam", "self.regex", "self.modifier", "value.strip", "self.fmt", "finder.find", "stat.S_ISREG", "self.maxdepth", "arg.split", "p.communicate", "action.execute", "self.max_size", "pwd.getpwnam", "re.error", "stat.ST_GID", "sys.argv", "pwd.getpwuid", "stat.ST_MODE", "result.append", "stat.S_IFMT", "self._perform_actions", "shutil.rmtree", "self.uids", "time.time", "salt.utils", "self.mtime", "re.IGNORECASE", "self.min_size", "options.items", "name.isdigit", "self.gids", "stat.ST_SIZE", "sys.maxsize", "stat.S_IFDIR", "re.compile", "self._check_criteria", "stat.ST_MTIME", "salt.defaults", "stat.ST_UID", "self.mindepth", "match.group", "key.title", "criterion.match", "stat.S_IFCHR", "self.need_stat", "self.print_title", "stat.S_IFREG", "key.startswith", "os.remove", "grp.getgrgid", "obj.requires", "sys.stderr", "_INTERVAL_REGEX.match"]}, "fsutils.py": {"libraries": ["os", "salt.exceptions.CommandExecutionError", "salt.utils.files", "re", "logging"], "function_names": ["flt", "_verify_run", "_get_mounts", "_blkid", "_is_device", "_blkid_output"], "function_calls": ["flt", "_verify_run", "dict", "_get_mounts", "CommandExecutionError"], "class_names": [], "class_method_calls": ["dev_meta.strip", "mounts.get", "log.debug", "logging.getLogger", "re.split", "line.strip", "dev_meta.split", "out.get", "ks_key.lower", "options.split", "fhr.readlines", "items.split", "dev.get", "el.strip", "salt.utils", "data.get", "os.linesep", "os.popen", "key.lower", "out.split", "dev.pop", "k_set.split", "device.pop", "elm.replace"]}, "functools.py": {"libraries": ["types", "salt.exceptions.SaltInvocationError", "salt.utils.args", "logging", "salt.utils.versions"], "function_names": ["call_function", "namespaced_function", "parse_function", "alias_function"], "function_calls": ["dict", "SaltInvocationError", "str", "reversed", "salt_function", "zip", "len", "isinstance"], "class_names": [], "class_method_calls": ["fun.__globals__", "fun.__dict__", "function.__defaults__", "function_args.append", "types.FunctionType", "logging.getLogger", "function_args.reverse", "new_namespaced_function.__dict__", "function.__closure__", "function.__dict__", "missing.append", "fun.__doc__", "funcset.keys", "fun.__name__", "function.__globals__", "function_kwargs.update", "argspec.defaults", "fun.__closure__", "salt.utils", "function.__name__", "fun.__code__", "fun.__defaults__", "argspec.args", "alias_fun.__dict__", "alias_fun.__doc__", "function.__code__"]}, "gzip_util.py": {"libraries": ["salt.utils.files", "io", "gzip"], "function_names": ["open_fileobj", "__enter__", "__exit__", "compress_file", "compress", "open", "__init__", "uncompress"], "function_calls": ["open_fileobj", "int", "GzipFile", "isinstance", "hasattr", "ValueError"], "class_names": ["GzipFile"], "class_method_calls": ["buf.getvalue", "fh_.read", "data.encode", "gzip.open", "igz.read", "ogz.write", "self.close", "io.BytesIO", "gzip.GzipFile", "salt.utils", "fh_.close"]}, "hashutils.py": {"libraries": ["os", "base64", "random", "salt.utils.stringutils", "hashlib", "salt.utils.files", "salt.utils.platform", "hmac", "salt.utils.decorators.jinja.jinja_filter"], "function_names": ["base64_encodestring", "sha512_digest", "base64_b64decode", "base64_b64encode", "sha1_digest", "hmac_signature", "get_hash", "sha256_digest", "random_hash", "hmac_compute", "__init__", "digest", "md5_digest", "add", "base64_decodestring"], "function_calls": ["iter", "hasher", "hash_type", "str", "jinja_filter", "getattr", "hasattr", "ValueError"], "class_names": ["DigestCollector"], "class_method_calls": ["self.__buff", "hashlib.sha1", "os.linesep", "base64.b64encode", "base64.encodebytes", "base64.b64decode", "hmac.new", "hashlib.sha256", "hash_obj.hexdigest", "ifile.read", "hashlib.md5", "hashlib.sha512", "hash_obj.update", "salt.utils", "self.__digest", "base64.decodebytes", "hmac_hash.digest", "random.SystemRandom"]}, "iam.py": {"libraries": ["pprint", "requests", "time", "logging"], "function_names": ["_convert_key_to_str", "_retry_get_url"], "function_calls": ["hasattr", "range"], "class_names": [], "class_method_calls": ["pprint.pformat", "logging.getLogger", "log.error", "result.content", "requests.get", "time.sleep", "result.text", "requests.exceptions", "log.warning"]}, "immutabletypes.py": {"libraries": ["collections.abc.Set", "collections.abc.Mapping", "collections.abc.Sequence", "copy"], "function_names": ["freeze", "__len__", "__iter__", "__add__", "__radd__", "__contains__", "__init__", "__getitem__", "copy", "__deepcopy__", "__repr__"], "function_calls": ["freeze", "iter", "ImmutableSet", "repr", "ImmutableDict", "len", "isinstance", "ImmutableList"], "class_names": ["ImmutableDict", "ImmutableSet", "ImmutableList"], "class_method_calls": ["self.__class__", "copy.deepcopy", "self.__obj"]}, "itertools.py": {"libraries": ["fnmatch", "salt.utils.files", "re"], "function_names": ["read_file", "fnmatch_multiple", "split"], "function_calls": ["int", "iter", "ValueError", "len"], "class_names": [], "class_method_calls": ["match.start", "re.compile", "fh_.read", "fnmatch.fnmatch", "exp.search", "match.end", "salt.utils", "re.escape", "fh_.close"]}, "jid.py": {"libraries": ["os", "salt.utils.stringutils", "hashlib", "datetime", "calendar.month_abbr"], "function_names": ["format_jid_instance_ext", "jid_dir", "_utc_now", "format_job_instance", "gen_jid", "format_jid_instance", "jid_to_time", "is_jid"], "function_calls": ["_utc_now", "format_job_instance", "list", "str", "int", "getattr", "jid_to_time", "len", "isinstance"], "class_names": [], "class_method_calls": ["datetime.datetime", "opts.get", "parts.append", "job.get", "datetime.timedelta", "ret.update", "parts.extend", "os.path", "salt.utils", "os.getpid"]}, "job.py": {"libraries": ["salt.utils.verify", "salt.utils.jid", "salt.minion", "salt.utils.event", "logging", "salt.utils.versions"], "function_names": ["store_minions", "get_retcode", "get_keep_jobs_seconds", "store_job"], "function_calls": ["any", "KeyError", "isinstance"], "class_names": [], "class_method_calls": ["mminion.returners", "logging.getLogger", "log.error", "ret.get", "opts.get", "log.critical", "log.debug", "load.update", "salt.minion", "log.info", "salt.utils", "event.fire_event", "event.fire_ret_load", "load.get"]}, "kickstart.py": {"libraries": ["salt.utils.files", "shlex", "salt.utils.yaml", "argparse"], "function_names": ["parse_timezone", "parse_user", "parse_group", "parse_firewall", "parse_firstboot", "parse_xconfig", "parse_harddrive", "parse_raid", "parse_logging", "parse_network", "parse_dmraid", "parse_keyboard", "parse_volgroup", "parse_iscsi", "parse_btrfs", "parse_repo", "parse_auth", "parse_partition", "parse_clearpart", "parse_sshpw", "clean_args", "parse_multipath", "parse_driverdisk", "parse_lang", "parse_services", "parse_updates", "parse_nfs", "parse_reboot", "parse_bootloader", "parse_upgrade", "parse_zfcp", "parse_rootpw", "parse_ignoredisk", "parse_iscsiname", "parse_logvol", "parse_monitor", "parse_url", "parse_vnc", "parse_device", "parse_autopart", "parse_rescue", "parse_selinux", "parse_autostep", "mksls"], "function_calls": ["parse_timezone", "parse_user", "type", "parse_group", "parse_firewall", "parse_firstboot", "parse_xconfig", "parse_raid", "parse_logging", "list", "parse_network", "parse_dmraid", "parse_keyboard", "parse_volgroup", "parse_iscsi", "parse_btrfs", "parse_repo", "vars", "parse_auth", "parse_partition", "parse_clearpart", "parse_sshpw", "clean_args", "parse_multipath", "parse_driverdisk", "parse_lang", "parse_services", "parse_updates", "parse_reboot", "parse_bootloader", "parse_upgrade", "parse_zfcp", "parse_rootpw", "parse_ignoredisk", "parse_iscsiname", "parse_logvol", "parse_monitor", "parse_vnc", "parse_device", "parse_autopart", "enumerate", "parse_rescue", "parse_selinux", "parse_autostep"], "class_names": [], "class_method_calls": ["interface.get", "shlex.split", "parser.parse_args", "line.strip", "opts.pop", "line.startswith", "package.replace", "rule.startswith", "salt.utils", "line.replace", "partitions.append", "argparse.ArgumentParser", "package.startswith", "rules.pop", "newrules.append", "parser.add_argument"]}, "kinds.py": {"libraries": ["salt.utils.odict.OrderedDict", "collections.namedtuple"], "function_names": [], "function_calls": ["ApplKind", "namedtuple", "OrderedDict", "list"], "class_names": [], "class_method_calls": ["APPL_KINDS.keys", "APPL_KINDS.items"]}, "listdiffer.py": {"libraries": ["salt.utils.dictdiffer.recursive_diff"], "function_names": ["new_values", "removed", "changed", "new_list", "list_diff", "diffs", "current_list", "get_old_values_and_key", "_get_recursive_difference", "__init__", "old_values", "changes_str", "changes_str2", "intersect", "remove_diff", "get_new_values_and_key", "added"], "function_calls": ["get_new_values_and_key", "ListDictDiffer", "dict", "str", "get_old_values_and_key", "recursive_diff", "ValueError"], "class_names": ["ListDictDiffer"], "class_method_calls": ["self._new", "recursive_list.extend", "item.current_dict", "changed.append", "changes.append", "differences.append", "self._removed", "item.diffs", "item.pop", "self._current", "values.update", "current_item.keys", "item.old_values", "recursive_item.changed", "item.past_dict", "self._intersect", "recursive_item.ignore_unset_values", "recursive_item.past_dict", "self._get_recursive_difference", "next_item.keys", "self._key", "recursive_item.current_dict", "el.diffs", "self._added", "el.past_dict", "el.current_dict", "item.new_values", "item.changes_str"]}, "locales.py": {"libraries": ["sys", "salt.utils.decorators.memoize"], "function_names": ["split_locale", "normalize_locale", "join_locale", "split", "get_encodings"], "function_calls": ["join_locale", "split_locale", "split", "len"], "class_names": [], "class_method_calls": ["sys.getdefaultencoding", "st.split", "encodings.append", "split_st.append", "comps.get"]}, "mac_utils.py": {"libraries": ["salt.modules.cmdmod", "xml.parsers.expat", "os", "salt.exceptions.TimedProcTimeoutError", "salt.utils.timed_subprocess", "time", "plistlib", "salt.utils.stringutils", "subprocess", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.utils.platform", "salt.exceptions.SaltInvocationError", "salt.utils.args", "logging", "pwd", "salt.grains.extra", "salt.utils.path"], "function_names": ["_run_all", "validate_enabled", "_read_plist_file", "launchctl", "execute_return_result", "available_services", "console_user", "_check_launchctl_stderr", "confirm_updated", "git_is_stub", "execute_return_success", "parse_return", "_available_services", "__virtual__"], "function_calls": ["_run_all", "range", "_read_plist_file", "check_fun", "SaltInvocationError", "bool", "enumerate", "str", "_check_launchctl_stderr", "CommandExecutionError", "isinstance", "_available_services", "validate_enabled"], "class_names": [], "class_method_calls": ["kwargs.pop", "proc.process", "log.debug", "agent_path.format", "os.listdir", "proc.stdout", "xml.parsers", "launchd_paths.update", "os.path", "enabled.lower", "subprocess.CalledProcessError", "log.warning", "subprocess.check_call", "logging.getLogger", "os.stat", "plistlib.load", "time.sleep", "salt.grains", "proc.stderr", "cmd.extend", "pwd.getpwuid", "proc.run", "salt.utils", "plistlib.InvalidFileException", "os.environ", "file_path.lower", "salt.modules", "data.split", "subprocess.PIPE"]}, "migrations.py": {"libraries": ["salt.syspaths", "os.path", "shutil"], "function_names": ["migrate_paths"], "function_calls": [], "class_names": [], "class_method_calls": ["syspaths.CONFIG_DIR", "os.makedirs", "os.path", "shutil.move"]}, "minions.py": {"libraries": ["salt.utils.minions", "salt.config", "salt.utils.cache.CacheCli"], "function_names": ["connected"], "function_calls": ["CacheCli", "list"], "class_names": [], "class_method_calls": ["cache_cli.get_cached", "salt.config", "salt.utils", "opts.get"]}, "namecheap.py": {"libraries": ["xml.dom.minidom", "requests", "salt.loader", "logging"], "function_names": ["post_request", "get_request", "get_opts", "_handle_request", "atts_to_dict", "string_to_value", "xml_to_dict", "__virtual__"], "function_calls": ["_handle_request", "Exception", "str", "atts_to_dict", "int", "isinstance", "len", "float", "string_to_value", "xml_to_dict"], "class_names": [], "class_method_calls": ["log.error", "xml.childNodes", "xml.TEXT_NODE", "apiresponse.getElementsByTagName", "xml.CDATA_SECTION_NODE", "log.info", "requests.post", "logging.getLogger", "apiresponse.getAttribute", "xml.attributes", "response_xml.getElementsByTagName", "r.close", "n.tagName", "data.append", "r.status_code", "xml.firstChild", "n.data", "e.firstChild", "val.append", "xml.nodeType", "xml.data", "salt.loader", "xml.dom", "errors.getElementsByTagName", "n.nodeType", "requests.get", "xml.tagName", "key.lower", "r.text", "value.lower"]}, "nb_popen.py": {"libraries": ["errno", "sys", "os", "win32file.WriteFile", "time", "msvcrt", "subprocess", "win32pipe.PeekNamedPipe", "pywintypes", "win32file.ReadFile", "logging", "fcntl", "tempfile", "select"], "function_names": ["send", "_recv", "recv", "recv_err", "__init__", "_close", "poll_and_read_until_finish", "get_conn_maxsize", "send_recv", "communicate"], "function_calls": ["super", "setattr", "WriteFile", "getattr", "PeekNamedPipe", "ReadFile"], "class_names": ["NonBlockingPopen"], "class_method_calls": ["log.error", "kwargs.pop", "pywintypes.error", "self.stdout_buff", "log.debug", "self.recv_err", "errno.ESHUTDOWN", "log.info", "fcntl.F_SETFL", "fcntl.fcntl", "fcntl.F_GETFL", "self._close", "sys.platform", "self.communicate", "self.universal_newlines", "logging.getLogger", "self.poll", "self.pid", "tempfile.SpooledTemporaryFile", "errno.EPIPE", "self.max_size_in_mem", "self.stdout", "time.sleep", "conn.read", "self._recv", "conn.fileno", "self._translate_newlines", "kwargs.get", "self._stdout_logger", "read.rstrip", "select.select", "self.stderr", "os.write", "buff.rstrip", "why.args", "subprocess.STDOUT", "self._stderr_logger_name_", "self._stdout_logger_name_", "os.O_NONBLOCK", "self.get_conn_maxsize", "self._stderr_logger", "self.stream_stds", "self.stdin", "self.recv", "conn.closed", "msvcrt.get_osfhandle", "subprocess.Popen", "self.stderr_buff", "self.send"]}, "odict.py": {"libraries": ["collections.abc.Callable", "collections.OrderedDict", "copy"], "function_names": ["__deepcopy__", "__missing__", "__copy__", "__init__", "__getitem__", "__reduce__", "copy", "__repr__"], "function_calls": ["type", "super", "KeyError", "tuple", "TypeError", "isinstance"], "class_names": ["DefaultOrderedDict"], "class_method_calls": ["self.items", "self.default_factory", "self.__missing__", "copy.deepcopy", "OrderedDict.__getitem__", "copy.copy"]}, "authenticate.py": {"libraries": ["pyrax"], "function_names": ["__init__"], "function_calls": [], "class_names": ["Authenticate"], "class_method_calls": ["pyrax.set_credentials", "pyrax.settings", "kwargs.get", "self.conn"]}, "queues.py": {"libraries": ["pyrax", "salt.utils.openstack.pyrax.authenticate", "pyrax.exceptions", "logging"], "function_names": ["exists", "delete", "__init__", "show", "create"], "function_calls": [], "class_names": ["RackspaceQueues"], "class_method_calls": ["logging.getLogger", "log.error", "authenticate.Authenticate", "self.show", "queue.delete", "self.exists", "self.auth", "queue.name", "pyrax.exceptions", "self.conn"]}, "oset.py": {"libraries": ["collections.abc.MutableSet"], "function_names": ["update", "is_iterable", "__len__", "discard", "index", "__iter__", "__getstate__", "__contains__", "__init__", "__getitem__", "pop", "__eq__", "__setstate__", "add", "__reversed__", "clear", "copy", "__repr__"], "function_calls": ["is_iterable", "iter", "type", "repr", "slice", "KeyError", "list", "ValueError", "reversed", "TypeError", "len", "set", "isinstance", "hasattr", "OrderedSet"], "class_names": ["OrderedSet"], "class_method_calls": ["self.items", "other.items", "self.__init__", "self.index", "self.map", "self.add", "self.__class__"]}, "parsers.py": {"libraries": ["salt.utils.process.check_pidfile", "salt._logging", "getpass", "salt.utils.user", "salt.utils.files", "functools.partial", "logging", "salt.utils.process.get_pidfile", "salt.version", "salt.utils.verify.verify_log_files", "traceback", "salt.utils.stringutils", "salt.cloud.libcloudfuncs", "salt.utils.process.set_pidfile", "signal", "salt.utils.process.os_is_running", "pprint", "copy", "sys", "os", "salt.utils.process", "salt.utils.jid", "types", "salt.syspaths", "salt.utils.validate.path.is_writeable", "optparse", "salt.utils.data", "salt.defaults.exitcodes", "salt.exceptions", "salt.utils.verify.verify_log", "salt.utils.win_functions", "salt.utils.verify.insecure_log", "salt.defaults.DEFAULT_TARGET_DELIM", "salt.utils.platform", "salt.utils.xdg", "salt.config", "salt.utils.args", "salt.utils.yaml"], "function_names": ["process_gen_keys_dir", "_install_signal_handlers", "process_state_verbose", "process_preserve_minions", "process_no_parse", "_sorted", "get_config_file_path", "process_keysize", "process_function", "process_log_level_logfile", "process_rotate_aes_key", "add_option_group", "__setup_logging_routines", "exit", "process_set_password", "setup_config", "_handle_signals", "process_pillar_target", "__new__", "append", "process", "print_versions_report", "process_log_level", "__setup_console_logger_config", "process_log_file", "claim_process_responsibility", "_mixin_after_parsed", "_mixin_setup", "process_saltfile", "__setup_logging", "_add_version_option", "process_list", "shutdown", "__shutdown_logging", "prepare", "_logfile_callback", "get_pidfile", "_mixin_before_exit", "parse_args", "process_config_dir", "_create_process_functions", "__setup_logfile_logger_config", "daemonize_if_required", "take_action", "__merge_config_with_cli", "__verify_logging", "check_pidfile", "__create_keys_dir", "error", "process_jid", "start", "process_module_dirs", "_populate_option_list", "__init__", "check_running", "process_output", "__setup_logging_config", "set_pidfile", "process_output_file", "is_daemonized"], "function_calls": ["verify_log_files", "range", "list", "_sorted", "hasattr", "vars", "insecure_log", "super", "set_pidfile", "str", "len", "dir", "sorted", "isinstance", "verify_log", "process_option_func", "MixinFuncsContainer", "partial", "get_pidfile", "print", "mixin_before_exit_func", "is_writeable", "setattr", "check_pidfile", "RuntimeError", "mixin_after_parsed_func", "enumerate", "getattr", "os_is_running", "mixin_setup_func"], "class_names": ["RunUserMixin", "ArgsStdinMixIn", "OutputOptionsMixIn", "SaltAPIParser", "CloudQueriesMixIn", "SaltRunOptionParser", "ExecutionOptionsMixIn", "MergeConfigMixIn", "ProfilingPMixIn", "HardCrashMixin", "SyndicOptionParser", "SaltCMDOptionParser", "SaltCloudParser", "ExtendedTargetOptionsMixIn", "TimeoutMixIn", "EAuthMixIn", "SaltCallOptionParser", "CloudProvidersListsMixIn", "LogLevelMixIn", "SaltfileMixIn", "ExecutorsMixIn", "MixinFuncsContainer", "SPMParser", "MasterOptionParser", "SaltKeyOptionParser", "SaltCPOptionParser", "MixInMeta", "CacheDirMixIn", "CloudCredentialsMixIn", "JIDMixin", "SaltSSHOptionParser", "OptionParserMeta", "DaemonMixIn", "NoParseMixin", "CustomOption", "TargetOptionsMixIn", "OptionParser", "MinionOptionParser", "ProxyIdMixIn", "ProxyMinionOptionParser", "ConfigDirMixIn"], "class_method_calls": ["optparse.Option", "config.DEFAULT_MINION_OPTS", "scan_group.add_option", "self.__setup_logging_config", "arg.rstrip", "self.cloud_queries_group", "self.additional_target_options_group", "self._handle_signals", "sys.stdout", "option_group.option_class", "logging.getLogger", "list.append", "option.dest", "actions_group.set_conflict_handler", "syspaths.PIDFILE_DIR", "group.option_list", "self._default_config_dir_env_var_", "self.default_timeout", "arg.split", "key_options_group.add_option", "self.get_pidfile", "config.DEFAULT_API_OPTS", "self.cloud_credentials_group", "func.__func__", "os.makedirs", "self.__setup_logfile_logger_config", "process_config_dir._mixin_prio_", "libcloudfuncs.check_libcloud_version", "os.getuid", "self.description", "self.selected_output_option", "sys.stdin", "signal.SIGTERM", "self.__setup_logging", "self.get_prog_name", "self.epilog", "self._logfile_loglevel_config_setting_name_", "self._default_logging_level_", "version.__saltstack_version__", "self._console_log_level_cli_flags", "self.__class__", "self.function_provider", "instance._mixin_before_exit_funcs", "log.exception", "func.startswith", "self.selected_query_option", "self.__create_keys_dir", "config.DEFAULT_SPM_OPTS", "traceback.format_exc", "log.info", "config.cloud_config", "log.warning", "self.profiling_group", "self.function_name", "self.parse_args", "actions_group.add_option", "self.shutdown", "self.option_list", "self.target_options_group", "option.get_opt_string", "self.explicit", "self._mixin_after_parsed_funcs", "option_dict.get", "parser.values", "args.extend", "config.proxy_config", "auth_group.add_option", "TargetOptionsMixIn._mixin_setup", "self.add_option_group", "sys.maxsize", "self.exit", "self.args", "self.error", "self.__merge_config_with_cli", "self._config_filename_", "self.print_versions_report", "sys.stderr", "logging.DEBUG", "log.error", "self.output_options_group", "opt.dest", "self.add_option", "sys.exit", "os.getpid", "func._mixin_prio_", "new_options.__dict__", "self._install_signal_handlers", "syspaths.CONFIG_DIR", "process_option_funcs.append", "self.setup_config", "config.DEFAULT_MASTER_OPTS", "option.explicit", "cli_config.pop", "os.getppid", "log.trace", "config.DEFAULT_CLOUD_OPTS", "kwargs.setdefault", "self.options", "options.versions_report", "self.defaults", "options.__dict__", "self._create_process_functions", "optparse.OptionParser", "self._logfile_config_setting_name_", "self.__verify_logging", "getpass.getpass", "salt.defaults", "self._loglevel_config_setting_name_", "salt.exceptions", "error.message", "self.providers_listings_group", "version.versions_report", "self.print_usage", "salt.config", "ssh_group.add_option", "self._default_logging_logfile_", "self.values", "os.R_OK", "self._mixin_setup_funcs", "self.config", "config._read_conf_file", "salt._logging", "log.debug", "types.MethodType", "self.check_pidfile", "os.path", "self.is_daemonized", "self.usage", "self.option_groups", "self.execution_group", "os.access", "optparse.OptionGroup", "copy.deepcopy", "self.VERSION", "module_dir.split", "os.getcwd", "config.DEFAULT_PROXY_MINION_OPTS", "temp_log_handler.flush", "self.print_help", "options.args_stdin", "instance._mixin_after_parsed_funcs", "group.add_option", "self.prepare", "self._mixin_before_exit_funcs", "instance._mixin_setup_funcs", "self._default_config_dir_", "pprint.pprint", "file_opts_group.add_option", "self.get_config_file_path", "self.eauth_group", "config.master_config", "acl.keys", "mcs.__name__", "salt.utils", "self.__shutdown_logging", "config.minion_config", "config.syndic_config", "x.strip", "ConfigDirMixIn._mixin_prio_", "self.logging_options_group", "os.unlink", "os.environ", "self.__setup_console_logger_config", "instance._mixin_process_funcs", "self.selected_target_option", "config.client_config", "signal.signal", "self.__setup_logging_routines", "signal.SIGINT"]}, "deb.py": {"libraries": [], "function_names": ["strip_uri", "combine_comments"], "function_calls": ["enumerate", "isinstance", "any", "str"], "class_names": [], "class_method_calls": ["val.startswith", "repo.split", "val.rstrip"]}, "rpm.py": {"libraries": ["collections", "salt.utils.stringutils", "subprocess", "platform", "datetime", "logging", "salt.utils.path"], "function_names": ["check_32", "version_to_evr", "parse_pkginfo", "get_osarch", "combine_comments", "pkginfo", "resolve_name"], "function_calls": ["check_32", "get_osarch", "pkginfo", "int", "resolve_name", "str", "all", "isinstance", "pkginfo_tuple"], "class_names": [], "class_method_calls": ["logging.getLogger", "verstring.find", "platform.uname", "datetime.datetime", "comment.lstrip", "ret.append", "line.split", "salt.utils", "subprocess.Popen", "subprocess.PIPE", "collections.namedtuple"]}, "platform.py": {"libraries": ["sys", "os", "multiprocessing", "subprocess", "salt.utils.decorators.memoize", "platform", "__main__", "contextlib", "distro"], "function_names": ["is_freebsd", "is_proxy", "is_junos", "spawning_platform", "is_smartos_zone", "is_smartos_globalzone", "is_smartos", "is_sunos", "is_aarch64", "is_linux", "is_photonos", "is_netbsd", "linux_distribution", "is_fedora", "is_windows", "is_darwin", "is_aix", "is_openbsd"], "function_calls": ["any", "is_smartos", "is_sunos", "linux_distribution"], "class_names": [], "class_method_calls": ["zonename_proc.communicate", "zonename_proc.poll", "distro.id", "subprocess.CalledProcessError", "sys.platform", "distro.version", "distro.codename", "platform.machine", "os.uname", "multiprocessing.get_start_method", "sys.argv", "subprocess.STDOUT", "arg.startswith", "distro.name", "x.strip", "main.__file__", "contextlib.suppress", "subprocess.Popen", "subprocess.PIPE"]}, "powershell.py": {"libraries": ["os", "salt.utils.path", "logging"], "function_names": ["get_modules", "module_exists"], "function_calls": ["get_modules", "list"], "class_names": [], "class_method_calls": ["base_name.lower", "logging.getLogger", "log.error", "os.environ", "ret.append", "ps_module_path.split", "file_extension.lower", "dir_name.lower", "os.path", "salt.utils", "root_paths.append"]}, "preseed.py": {"libraries": ["salt.utils.files", "shlex", "salt.utils.yaml", "salt.utils.stringutils"], "function_names": ["mksls"], "function_calls": ["len"], "class_names": [], "class_method_calls": ["shlex.split", "line.strip", "pointer.setdefault", "line.startswith", "salt.utils"]}, "pycrypto.py": {"libraries": ["Crypto.Random.get_random_bytes", "string", "crypt", "random", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "Cryptodome.Random.get_random_bytes", "salt.exceptions.SaltInvocationError", "re", "logging", "passlib.context", "M2Crypto.Rand.rand_bytes"], "function_names": ["_gen_hash_crypt", "gen_hash", "secure_password", "_gen_hash_passlib"], "function_calls": ["_gen_hash_crypt", "SaltInvocationError", "list", "str", "int", "get_random_bytes", "secure_password", "len", "CommandExecutionError", "_gen_hash_passlib"], "class_names": [], "class_method_calls": ["roundsstr.split", "string.punctuation", "log.exception", "known_methods.index", "m.name", "ctx.hash", "log.warning", "random.SystemRandom", "logging.getLogger", "crypt.crypt", "string.ascii_lowercase", "salt.utils", "passlib.context", "string.printable", "string.ascii_uppercase", "crypt_salt.split", "kwargs.update", "string.whitespace", "string.digits", "crypt.methods", "re.sub", "re.escape"]}, "reclass.py": {"libraries": ["sys", "os"], "function_names": ["prepend_reclass_source_path", "set_inventory_base_uri_default", "filter_out_source_path_option"], "function_calls": [], "class_names": [], "class_method_calls": ["sys.path", "config.get", "os.path", "opts.get"]}, "roster_matcher.py": {"libraries": ["fnmatch", "seco.range", "functools", "re", "logging", "copy"], "function_names": ["ret_list_minions", "ret_nodegroup_minions", "_convert_range_to_list", "targets", "_ret_minions", "ret_range_minions", "__init__", "ret_glob_minions", "get_data", "_tgt_set", "ret_pcre_minions"], "function_calls": ["RuntimeError", "_convert_range_to_list", "getattr", "RosterMatcher", "set", "isinstance", "filter_", "_tgt_set"], "class_names": ["RosterMatcher"], "class_method_calls": ["log.error", "rmatcher.targets", "ret.update", "functools.partial", "tgt.match", "self.tgt_type", "logging.getLogger", "self.tgt", "seco.range", "self._ret_minions", "copy.deepcopy", "range_hosts.__contains__", "r.expand", "self.raw", "fnmatch.filter", "tgt.split", "data.copy", "tgt.intersection", "re.compile", "__opts__.get", "self.ipv", "self.get_data", "nodegroup.intersection"]}, "rsax931.py": {"libraries": ["sys", "glob", "ctypes.util", "os", "ctypes.c_void_p", "ctypes.cdll", "ctypes.c_int", "ctypes.pointer", "ctypes.create_string_buffer", "salt.utils.stringutils", "platform", "ctypes.c_char_p", "salt.utils.platform", "salt.modules.mac_brew_pkg"], "function_names": ["_init_libcrypto", "verify", "__init__", "_load_libcrypto", "__del__", "_find_libcrypto", "sign"], "function_calls": ["_init_libcrypto", "OSError", "pointer", "list", "getattr", "int", "callable", "len", "openssl_version_num", "_load_libcrypto", "c_void_p", "reversed", "sorted", "create_string_buffer", "_find_libcrypto", "ValueError"], "class_names": ["RSAX931Verifier", "RSAX931Signer"], "class_method_calls": ["os.path", "sys.platform", "platform.mac_ver", "libcrypto.PEM_read_bio_RSA_PUBKEY", "libcrypto.BIO_free", "self._rsa", "libcrypto.RSA_public_decrypt", "libcrypto.OPENSSL_add_all_algorithms_noconf", "libcrypto.RSA_size", "ctypes.util", "sys.path", "self._bio", "libcrypto.OpenSSL_version_num", "cdll.LoadLibrary", "pubdata.replace", "salt.utils", "libcrypto.BIO_new_mem_buf", "libcrypto.OPENSSL_init_crypto", "sys.executable", "glob.glob", "mac_brew.homebrew_prefix", "libcrypto.RSA_private_encrypt", "libcrypto.PEM_read_bio_RSAPrivateKey", "libcrypto.OPENSSL_no_config", "libcrypto.RSA_new", "libcrypto.RSA_free"]}, "sanitizers.py": {"libraries": ["fnmatch", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "re", "os.path"], "function_names": ["hostname", "filename", "trim", "mask_args_value"], "function_calls": ["str", "InputSanitizer", "CommandExecutionError"], "class_names": ["InputSanitizer"], "class_method_calls": ["os.linesep", "InputSanitizer.trim", "key.strip", "fnmatch.fnmatch", "line.split", "line.strip", "re.sub", "data.split", "os.path", "salt.utils", "out.append"]}, "schema.py": {"libraries": ["salt.utils.odict.OrderedDict", "textwrap", "salt.utils.args", "inspect"], "function_names": ["__validate_attributes__", "get_definition", "get_complex_attrs", "_get_argname_value", "as_requirements_item", "__new__", "__get_properties__", "__get_description__", "defaults", "__get_items__", "serialize", "__prepare__", "_failing_new", "_add_missing_schema_attributes", "__bool__", "definition_name", "__call__", "__init__", "__get_pattern_properties__", "__get_additional_properties__"], "function_calls": ["argvalue", "type", "super", "RuntimeError", "getattr", "enumerate", "list", "RequirementsItem", "TypeError", "callable", "OrderedDict", "isinstance", "reversed", "len", "dir", "NullSentinel", "hasattr", "staticmethod"], "class_names": ["HostnameItem", "AllOfItem", "RequirementsItem", "BooleanItem", "NumberItem", "ArrayItem", "AnyOfItem", "StringItem", "IPv6Item", "ComplexSchemaItem", "NotItem", "Schema", "NullItem", "UriItem", "DateTimeItem", "BaseSchemaItem", "DefinitionsSchema", "EMailItem", "IPv4Item", "IntegerItem", "NullSentinel", "BaseSchemaItemMeta", "SchemaMeta", "DictItem", "PortItem", "SchemaItem", "OneOfItem", "SecretItem"], "class_method_calls": ["item.serialize", "attr.startswith", "instance.__item_name__", "required.append", "item.items", "self.__flatten__", "cls.__allow_additional_items__", "config.definition_name", "inspect.getmro", "value.__config_name__", "self.minimum", "attributes.append", "cls.after_items_update", "instance.__init__", "order.append", "base._order", "section.serialize", "prop.required", "self.additional_items", "instance._attributes", "required_attr_names.append", "self._add_missing_schema_attributes", "self.description", "required.extend", "self.pattern", "self.title", "order.extend", "instance.__allow_additional_items__", "i.serialize", "NullSentinel.__new__", "self.required", "serialized.get", "value.__item_name__", "self.__class__", "object.__new__", "config.__item_name__", "item.additional_properties", "self.__doc__", "kwargs.pop", "self.enumNames", "type.__new__", "cls._items", "cls.serialize", "attr.required", "self._get_argname_value", "items.update", "self.__serialize_attr_aliases__", "self.requirements", "self.unique_items", "self.min_properties", "base._items", "item.properties", "self.default", "prop.serialize", "self.max_length", "attributes.extend", "attrs.items", "self.format", "ordering.append", "after_items_update.update", "cls._order", "ordering.extend", "self.definition_name", "base._sections", "self.max_items", "item.get_complex_attrs", "instance.__flatten__", "config.__flatten__", "kwargs.copy", "config.get_definition", "cls.title", "config.required", "value.title", "defaults.setdefault", "self.__format__", "self.additional_properties", "self.maximum", "cls.description", "section.after_items_update", "serialized_schema.get", "self.item", "self.multiple_of", "textwrap.dedent", "aux_items.extend", "self.items", "self.min_items", "sections.update", "entry.items", "complex_items.append", "requirements.append", "aux_items.append", "aux_items.pop", "instance.__validate_attributes__", "self.exclusive_minimum", "self.exclusive_maximum", "self.extra", "properties.update", "self._definition_name", "base.__init__", "instance.__config_name__", "validate_attributes.__code__", "self.max_properties", "cls._sections", "self.properties", "self.__type__", "config.serialize", "items.append", "base.__validate_attributes__", "self.pattern_properties", "self.enum", "attr.__type__", "attr.serialize", "requirement.serialize", "salt.utils", "self.min_length", "self._attributes", "section.__flatten__", "cls.__doc__"]}, "smb.py": {"libraries": ["smbprotocol.open.ImpersonationLevel", "salt.utils.files", "smbprotocol.tree.TreeConnect", "logging", "smbprotocol.create_contexts.SMB2CreateContextRequest", "smbprotocol.create_contexts.SMB2CreateQueryMaximalAccessRequest", "salt.utils.stringutils", "smbprotocol.security_descriptor.SDControl", "smbprotocol.open.Open", "smbprotocol.open.ShareAccess", "smbprotocol.connection.Connection", "uuid", "smbprotocol.security_descriptor.AccessMask", "smbprotocol.security_descriptor.AccessAllowedAce", "smbprotocol.open.CreateDisposition", "smbprotocol.open.FileAttributes", "smbprotocol.open.FilePipePrinterAccessMask", "smbprotocol.security_descriptor.SIDPacket", "smbprotocol.session.Session", "smbprotocol.security_descriptor.SMB2CreateSDBuffer", "smbprotocol.security_descriptor.AclPacket", "smbprotocol.open.CreateOptions", "salt.exceptions.MissingSmb", "socket", "smbprotocol.create_contexts.CreateContextName", "smbprotocol.open.DirectoryAccessMask", "smbprotocol.open.FileInformationClass", "salt.utils.versions"], "function_names": ["close", "mkdirs", "tree_connect", "_mkdirs_smbprotocol", "put_file", "_delete_file_smbprotocol", "normalize_filename", "_delete_directory_smbprotocol", "open_file", "connection", "open_directory", "_put_file_smbprotocol", "delete_file", "_put_str_smbprotocol", "delete_directory", "connect", "get_conn", "_get_conn_smbprotocol", "put_str", "__init__"], "function_calls": ["SMB2CreateQueryMaximalAccessRequest", "_mkdirs_smbprotocol", "_delete_file_smbprotocol", "TreeConnect", "MissingSmb", "SMBProto", "SMB2CreateContextRequest", "_delete_directory_smbprotocol", "Session", "AclPacket", "_put_file_smbprotocol", "Open", "_put_str_smbprotocol", "Connection", "SIDPacket", "get_conn", "AccessAllowedAce", "_get_conn_smbprotocol", "enumerate", "SMB2CreateSDBuffer", "len"], "class_names": ["SMBProto"], "class_method_calls": ["CreateContextName.SMB2_CREATE_SD_BUFFER", "CreateDisposition.FILE_OPEN_IF", "log.debug", "self.connection", "file.lstrip", "conn.open_directory", "dir_open.query_directory", "socket.IPPROTO_TCP", "DirectoryAccessMask.GENERIC_WRITE", "ImpersonationLevel.Impersonation", "CreateContextName.SMB2_CREATE_QUERY_MAXIMAL_ACCESS_REQUEST", "cls.normalize_filename", "self.server", "log.info", "CreateDisposition.FILE_OPEN", "dir_open.create", "socket.getaddrinfo", "tree.connect", "logging.getLogger", "ShareAccess.FILE_SHARE_WRITE", "conn.open_file", "AccessMask.GENERIC_ALL", "responses.append", "sec_desc.set_dacl", "FilePipePrinterAccessMask.GENERIC_READ", "conn.connect", "logging.WARNING", "file_open.create", "conn.tree_connect", "SDControl.SELF_RELATIVE", "self.session", "tree.tree_connect_id", "DirectoryAccessMask.DELETE", "CreateDisposition.FILE_OVERWRITE_IF", "conn.session", "salt.utils", "CreateOptions.FILE_DIRECTORY_FILE", "DirectoryAccessMask.GENERIC_READ", "FileAttributes.FILE_ATTRIBUTE_NORMAL", "file_open.write", "FilePipePrinterAccessMask.DELETE", "conn.connection", "share.endswith", "CreateOptions.FILE_DELETE_ON_CLOSE", "fh_.read", "file_open.close", "FileInformationClass.FILE_NAMES_INFORMATION", "dir_open.close", "path.split", "FilePipePrinterAccessMask.GENERIC_WRITE", "everyone_sid.from_string", "CreateOptions.FILE_NON_DIRECTORY_FILE", "ShareAccess.FILE_SHARE_READ", "uuid.uuid4", "FileAttributes.FILE_ATTRIBUTE_DIRECTORY"]}, "ssdp.py": {"libraries": ["collections.OrderedDict", "time", "random", "salt.utils.json", "salt.utils.stringutils", "salt.utils.odict.OrderedDict", "socket", "datetime", "trollius", "logging", "copy", "asyncio"], "function_names": ["is_available", "connection_made", "slp_time", "__call__", "run", "_collect_masters_map", "create_datagram_endpoint", "discover", "__init__", "_is_available", "datagram_received", "get_self_ip", "_query", "_sendto"], "function_calls": ["hasattr", "slp_time", "setattr", "OSError", "bool", "ValueError", "OrderedDict", "len", "float", "isinstance", "protocol_factory", "SSDPFactory"], "class_names": ["SSDPDiscoveryServer", "TimeOutException", "SSDPDiscoveryClient", "TimeStampException", "SSDPBase", "SSDPFactory"], "class_method_calls": ["socket.gethostname", "sock.close", "datetime.timedelta", "self.disable_hidden", "self.TIMEOUT", "msg.startswith", "self.my_ip", "self.answer", "asyncio.get_event_loop", "loop.run_until_complete", "response.items", "asyncio.ported", "self._sendto", "logging.getLogger", "exceptions.append", "self.log", "self.DEFAULTS", "loop.run_forever", "self._socket", "loop.close", "copy.deepcopy", "msg.split", "self.PORT", "sck.getsockname", "time.sleep", "config.get", "self.ANSWER", "socket.AF_INET", "socket.SO_REUSEADDR", "loop._make_datagram_transport", "self.get_self_ip", "addr_infos.items", "loop.getaddrinfo", "asyncio.coroutines", "sck.close", "transport.close", "socket.SOCK_DGRAM", "self._collect_masters_map", "sck.connect", "self.SIGNATURE", "random.randint", "salt.utils", "self.LISTEN_IP", "SSDPDiscoveryServer.create_datagram_endpoint", "time.time", "self._query", "self.transport", "socket.socket", "sock.bind", "socket.gethostbyname", "datetime.datetime", "self._config", "message.startswith", "loop.sock_connect", "sock.setsockopt", "socket.SO_BROADCAST", "self.signature", "sock.setblocking", "asyncio.futures", "socket.SOL_SOCKET", "loop.create_datagram_endpoint", "SSDPBase._is_available", "self.port"]}, "stringio.py": {"libraries": ["io"], "function_names": ["is_stringio", "is_readable", "is_writable"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["obj.writable", "io.StringIO", "obj.readable"]}, "stringutils.py": {"libraries": ["errno", "fnmatch", "os", "shlex", "base64", "time", "unicodedata", "difflib", "re", "salt.utils.decorators.jinja.jinja_filter", "logging", "salt.utils.data"], "function_names": ["to_none", "expr_match", "build_whitespace_split_regex", "is_quoted", "_normalize", "dequote", "is_hex", "contains_whitespace", "is_binary", "to_str", "to_bytes", "snake_to_camel_case", "_pat_check", "to_unicode", "check_include_exclude", "to_num", "check_whitelist_blacklist", "print_cli", "random", "get_diff", "__build_parts", "camel_to_snake_case", "human_to_bytes", "get_context"], "function_calls": ["any", "type", "range", "list", "int", "TypeError", "expr_match", "float", "hasattr", "max", "min", "str", "jinja_filter", "is_quoted", "_normalize", "isinstance", "to_str", "chr", "print", "_pat_check", "bytes", "to_unicode", "ValueError", "__build_parts", "enumerate", "len"], "class_names": [], "class_method_calls": ["letter.isupper", "log.exception", "s.decode", "word.capitalize", "lexer.commenters", "msg.encode", "value.startswith", "default_unit.lower", "difflib.unified_diff", "x.isspace", "lexer.whitespace_split", "exc.errno", "re.search", "logging.getLogger", "errno.EPIPE", "time.sleep", "unicodedata.normalize", "letter.lower", "re.error", "template.splitlines", "m.group", "snake_input.split", "lexer.quotes", "re.match", "salt.utils", "s.encode", "text.splitlines", "base64.b64encode", "data.translate", "buf.extend", "fnmatch.fnmatch", "os.urandom", "re.escape", "buf.append", "errno.EAGAIN", "shlex.shlex"]}, "systemd.py": {"libraries": ["os", "salt.loader.context", "salt.utils.stringutils", "subprocess", "dbus", "salt.exceptions.SaltInvocationError", "re", "logging", "salt.utils.path"], "function_names": ["_strip_suffix", "offline", "booted", "_pid_to_service_dbus", "version", "has_scope", "pid_to_service", "_pid_to_service_systemctl"], "function_calls": ["_strip_suffix", "SaltInvocationError", "bool", "str", "int", "booted", "version", "isinstance", "_pid_to_service_dbus", "_pid_to_service_systemctl"], "class_names": [], "class_method_calls": ["log.error", "status_json.get", "outstr.splitlines", "subprocess.CalledProcessError", "re.search", "logging.getLogger", "systemd_output.stdout", "systemd.GetUnitByPID", "os.stat", "subprocess.run", "dbus.Interface", "name.endswith", "dbus.SystemBus", "subprocess.STDOUT", "salt.loader", "salt.utils", "service_props.Get", "bus.get_object", "subprocess.Popen", "dbus.DBusException", "subprocess.PIPE"]}, "templates.py": {"libraries": ["jinja2.sandbox", "mako.exceptions", "genshi.template.OldTextTemplate", "wemplate.wemplate.TemplateParser", "salt.utils.files", "salt.utils.decorators.jinja.JinjaTest", "salt.loader.dunder.__file_client__", "logging", "salt.utils.hashutils", "salt.modules.match", "tempfile", "traceback", "salt.utils.stringutils", "salt.utils.decorators.jinja.JinjaFilter", "salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError", "pathlib", "codecs", "salt.utils.decorators.jinja.JinjaGlobal", "mako.lookup.TemplateLookup", "salt.utils.network", "salt.__path__", "salt.exceptions.SaltRenderError", "mako.template.Template", "sys", "salt.utils.dateutils", "os", "Cheetah.Template.Template", "salt.utils.jinja", "salt.loader.context.NamedLoaderContext", "importlib.machinery", "salt.utils.data", "salt.utils.mako.SaltMakoTemplateLookup", "jinja2.ext", "salt.utils.versions.Version", "salt.utils.odict.OrderedDict", "genshi.template.MarkupTemplate", "jinja2", "genshi.template.NewTextTemplate", "salt.utils.platform", "salt.utils.yamlencoding", "salt.utils.http", "importlib.util"], "function_names": ["_get_jinja_error_line", "render_wempy_tmpl", "render_mako_tmpl", "render_cheetah_tmpl", "opt_jinja_env_helper", "_get_jinja_error_message", "wrap_tmpl_func", "render_tmpl", "py", "__contains__", "render_jinja_tmpl", "__init__", "__getitem__", "_get_jinja_error_slug", "__getattr__", "render_genshi_tmpl", "generate_sls_context", "_get_jinja_error"], "function_calls": ["Version", "Template", "type", "_get_jinja_error_message", "wrap_tmpl_func", "MarkupTemplate", "OldTextTemplate", "hasattr", "_get_jinja_error_line", "SaltRenderError", "str", "len", "_get_jinja_error_slug", "render_str", "isinstance", "opt_jinja_env_helper", "tclass", "dict", "NewTextTemplate", "generate_sls_context", "SaltMakoTemplateLookup", "_get_jinja_error", "TemplateLookup", "setattr", "ImportError", "AliasedLoader", "getattr"], "class_names": ["AliasedModule", "AliasedLoader"], "class_method_calls": ["mod.run", "k.upper", "log.error", "log.exception", "jinja2.sandbox", "mako.exceptions", "codecs.getencoder", "sls.replace", "log.debug", "target.write", "base_fname.split", "kws.update", "jinja2.exceptions", "tmplstr.endswith", "lookup.destroy", "os.path", "traceback.format_exc", "outf.write", "__file_client__.value", "tmplstr.decode", "log.warning", "logging.getLogger", "opts.get", "sys.exc_info", "tmpl.generate", "jinja2.defaults", "tempfile.NamedTemporaryFile", "tmplsrc.read", "sys.modules", "render_tmpl.render_str", "msg.splitlines", "JinjaGlobal.salt_jinja_globals", "jinja_env.globals", "context.get", "spec.loader", "template.endswith", "JinjaFilter.salt_jinja_filters", "fp_.read", "context.update", "traceback.extract_tb", "template.rsplit", "JinjaTest.salt_jinja_tests", "outf.name", "loader.destroy", "pathlib.Path", "output.splitlines", "importlib.machinery", "salt.utils", "self.wrapped", "opts.items", "Template.compile", "codecs.open", "jinja_env.from_string", "jinja_env.tests", "template.render", "os.linesep", "jinja2.ext", "value.value", "k.lower", "sls_context.update", "jinja_env.filters", "_tmplsrc.read", "jinja2.StrictUndefined", "self.aliases", "tmplsrc.close", "context.items", "logging.DEBUG", "slspath.replace", "jinja2.FileSystemLoader", "importlib.util"]}, "textformat.py": {"libraries": [], "function_names": ["__call__", "qualify_triple_int", "qualify_int", "__init__", "__str__", "__repr__"], "function_calls": ["qualify_triple_int", "qualify_int", "TextFormat", "len", "isinstance"], "class_names": ["TextFormat"], "class_method_calls": ["self.codes", "attr.lower", "kwargs.get", "self.sequence"]}, "timed_subprocess.py": {"libraries": ["salt.exceptions", "shlex", "threading", "salt.utils.stringutils", "subprocess", "salt.utils.data"], "function_names": ["terminate", "__init__", "receive", "run"], "function_calls": ["str", "receive", "isinstance"], "class_names": ["TimedProc"], "class_method_calls": ["self.command", "kwargs.pop", "self.stdin_raw_newlines", "self.timeout", "self.with_communicate", "self.wait", "str_args.append", "self.stdout", "rt.start", "self.process", "kwargs.get", "self.stderr", "threading.Timer", "threading.Thread", "salt.utils", "salt.exceptions", "self.stdin", "shlex.split", "rt.join", "rt.is_alive", "subprocess.Popen", "subprocess.PIPE"]}, "timeout.py": {"libraries": ["time", "logging"], "function_names": ["wait_for"], "function_calls": ["func", "min", "dict"], "class_names": [], "class_method_calls": ["logging.getLogger", "time.sleep", "time.time", "log.warning"]}, "timeutil.py": {"libraries": ["datetime.timedelta", "datetime.datetime", "time", "logging"], "function_names": ["get_time_at", "get_timestamp_at"], "function_calls": ["get_timestamp_at", "timedelta", "int", "isinstance", "ValueError"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "time_at.timetuple", "datetime.utcnow", "log.debug", "dt.timetuple", "time.strftime", "time.localtime", "time_in.replace", "datetime.strptime", "time.mktime", "time_in.split"]}, "url.py": {"libraries": ["sys", "salt.utils.path", "salt.utils.platform", "urllib.parse.urlparse", "re", "salt.utils.versions", "salt.utils.data", "urllib.parse.urlunparse"], "function_names": ["is_escaped", "split_env", "redact_http_basic_auth", "unescape", "strip_proto", "parse", "validate", "add_http_basic_auth", "escape", "add_env", "create"], "function_calls": ["parse", "urlparse", "len", "create", "ValueError", "urlunparse"], "class_names": [], "class_method_calls": ["urltuple.netloc", "url.startswith", "url.split", "urltuple.scheme", "re.IGNORECASE", "output.lower", "urltuple._replace", "re.sub", "salt.utils", "path.startswith", "path.lstrip", "url.lstrip", "path.replace", "sys.version_info", "resource.split", "re.search"]}, "value.py": {"libraries": [], "function_names": ["xor"], "function_calls": ["bool"], "class_names": [], "class_method_calls": []}, "factory.py": {"libraries": ["salt.utils.vault.exceptions.VaultException", "salt.utils.json", "logging", "salt.utils.vault.helpers", "salt.utils.vault.exceptions.VaultUnwrapException", "salt.utils.vault.exceptions.VaultConfigExpired", "base64", "salt.utils.vault.kv", "salt.utils.dictupdate", "salt.cache", "copy", "salt.utils.vault.client", "salt.utils.vault.leases", "salt.utils.vault.exceptions.VaultPermissionDeniedError", "salt.utils.context", "salt.utils.vault.auth", "salt.modules.publish", "salt.defaults.NOT_SET", "salt.utils.vault.cache", "salt.utils.data", "salt.exceptions", "requests.exceptions.ConnectionError", "salt.crypt", "salt.utils.vault.api", "salt.modules.saltutil", "salt.utils.vault.exceptions.VaultAuthExpired", "salt.utils.versions"], "function_names": ["_get_event", "_fetch_secret_id", "clear_cache", "get_lease_store", "_query_master", "get_kv", "update_config", "_build_authd_client", "get_authd_client", "_build_revocation_client", "cache_or_fetch", "parse_config", "check_result", "get_approle_api", "try_build", "_use_local_config", "_get_connection_config", "get_identity_api", "_fetch_token"], "function_calls": ["_get_event", "type", "_fetch_secret_id", "clear_cache", "list", "VaultConfigExpired", "_query_master", "AssertionError", "str", "_build_authd_client", "isinstance", "VaultException", "_build_revocation_client", "get_authd_client", "cache_or_fetch", "parse_config", "check_result", "try_build", "_use_local_config", "_get_connection_config", "_fetch_token"], "class_names": [], "class_method_calls": ["hlp.SALT_RUNTYPE_MASTER", "result.get", "embedded_token.get", "vcache._get_cache_bank", "vclient._get_expected_creation_path", "client.auth", "logging.getLogger", "secret_id_cache.get", "vcache.VaultCache", "client.token_renew", "secret_id_cache.store", "config.pop", "vleases.VaultSecretId", "unwrap_client.token_lookup", "vcache.VaultAuthCache", "token.num_uses", "salt.crypt", "vapi.IdentityApi", "config_cache.flush", "bank.startswith", "hlp.SALT_RUNTYPE_MINION_LOCAL", "unwrap_client.get_config", "client.token_revoke", "token_cache.store", "result.update", "unwrap_client.unwrap", "log.info", "hlp.SALT_RUNTYPE_MASTER_IMPERSONATING", "token_info.status_code", "log.warning", "config_cache.get", "unwrapped_response.get", "vclient.VaultClient", "vkv.VaultKV", "config_cache.store", "config.get", "cache.contains", "vcache.VaultLeaseCache", "cbank.split", "issue_params.get", "vauth.LocalVaultSecretId", "salt.modules", "err.message", "client.token_valid", "result.pop", "misc_data.items", "log.error", "event.fire_master", "context.pop", "vclient.AuthenticatedVaultClient", "token_cache.get", "hlp._get_salt_run_type", "opts.get", "token_info.json", "salt.cache", "vauth.VaultAppRoleAuth", "secret_id.num_uses", "unauthd_client.session", "hlp.SALT_RUNTYPE_MASTER_PEER_RUN", "vcache._get_cache_backend", "salt.exceptions", "vleases.VaultToken", "kwargs.items", "vleases.VaultWrappedResponse", "vcache._get_config_cache", "local_config.get", "copy.copy", "vauth.InvalidVaultSecretId", "secret_id.get", "err.event_data", "log.debug", "config_cache.ttl", "logging.WARNING", "event.fire_event", "vapi.AppRoleApi", "token.is_valid", "salt.utils", "vauth.VaultAppRole", "base64.b64encode", "cache.flush", "vleases.LeaseStore", "vauth.VaultTokenAuth", "merged.pop"]}, "kv.py": {"libraries": ["salt.utils.vault.exceptions.VaultException", "salt.utils.vault.exceptions.VaultPermissionDeniedError", "salt.utils.vault.exceptions.VaultInvocationError", "logging", "salt.utils.vault.exceptions.VaultUnsupportedOperationError"], "function_names": ["_parse_versions", "apply_json_merge_patch", "patch_in_memory", "is_v2", "patch", "destroy", "_v2_the_path", "write", "list", "delete", "__init__", "_get_secret_path_metadata", "nuke", "read"], "function_calls": ["type", "AssertionError", "apply_json_merge_patch", "patch_in_memory", "VaultInvocationError", "next", "tuple", "int", "isinstance", "ValueError", "VaultException"], "class_names": ["VaultKV"], "class_method_calls": ["log.error", "self.read", "log.debug", "self._get_secret_path_metadata", "patch.items", "log.warning", "logging.getLogger", "self._v2_the_path", "data.pop", "path.startswith", "self.write", "self.metadata_cache", "cache_content.items", "path_metadata.get", "cache_content.keys", "self.client", "data.get", "path.rstrip", "self._parse_versions", "pfilter.rstrip", "path.replace", "self.is_v2"]}, "leases.py": {"libraries": ["fnmatch", "salt.utils.vault.exceptions.VaultException", "salt.utils.vault.exceptions.VaultPermissionDeniedError", "time", "salt.utils.vault.exceptions.VaultNotFoundError", "salt.utils.vault.exceptions.VaultInvocationError", "logging", "salt.utils.vault.helpers.timestring_map", "copy", "salt.utils.vault.helpers.iso_to_timestamp"], "function_names": ["list", "check_revoke", "__str__", "get", "__repr__", "accessor_payload", "has_uses_left", "lookup", "used", "to_dict", "store", "is_renewable", "renew_cached", "revoke_cached", "payload", "renew", "revoke", "serialize_for_minion", "is_valid", "__init__", "__eq__", "is_valid_for", "with_renewed"], "function_calls": ["abs", "type", "timestring_map", "super", "repr", "VaultInvocationError", "bool", "check_revoke", "str", "int", "list", "iso_to_timestamp", "round", "isinstance", "VaultNotFoundError", "VaultException"], "class_names": ["AccessorMixin", "VaultToken", "BaseLease", "VaultLease", "UseCountMixin", "DropInitKwargsMixin", "VaultWrappedResponse", "LeaseStore", "VaultSecretId", "DurationMixin"], "class_method_calls": ["self.lease_id", "self.wrapping_accessor", "kwargs.pop", "self.expire_events", "self.has_uses_left", "log.debug", "self.list", "other.__dict__", "attrs.pop", "self.store", "self.revoke", "log.warning", "logging.getLogger", "ret.pop", "self.to_dict", "self.is_valid_for", "lease.with_renewed", "self.creation_path", "self.num_uses", "self.renewable", "self.creation_time", "attrs.update", "self.accessor", "self.lease_id_ckey_cache", "time.time", "self.client", "lease.is_valid_for", "self.data", "self.duration", "self.__dict__", "self.cache", "self.is_valid", "self.renew", "fnmatch.fnmatch", "failed.append", "self.id", "self.use_count", "self.expire_time", "copy.copy"]}, "verify.py": {"libraries": ["salt.utils.user", "salt.exceptions.SaltClientError", "salt.utils.files", "win32file", "logging", "salt.utils.path", "salt.utils.win_reg", "salt.exceptions.CommandExecutionError", "itertools", "zmq", "pwd", "sys", "os", "resource", "re", "salt.exceptions.SaltSystemExit", "salt.defaults.exitcodes", "errno", "salt.utils.win_functions", "socket", "salt.utils.win_dacl", "salt.utils.platform", "salt._logging.LOG_LEVELS", "stat"], "function_names": ["check_max_open_files", "verify_log_files", "check_user", "_realpath_darwin", "check_path_traversal", "list_path_traversal", "safe_py_code", "insecure_log", "zmq_version", "valid_id", "_get_pwnam", "verify_log", "lookup_family", "clean_path", "win_verify_env", "_realpath", "verify_socket", "verify_files", "verify_env", "verify_logs_filter", "_realpath_windows"], "function_calls": ["any", "_realpath_darwin", "int", "list_path_traversal", "SaltClientError", "CommandExecutionError", "hasattr", "zmq_version", "_get_pwnam", "str", "isinstance", "lookup_family", "clean_path", "bool", "win_verify_env", "_realpath", "print", "verify_files", "verify_logs_filter", "_realpath_windows", "SaltSystemExit", "len"], "class_names": [], "class_method_calls": ["fmode.st_uid", "log.log", "sys.platform", "logging.getLogger", "dacl.save", "exc.args", "mode.st_mode", "socket.AF_INET", "os.makedirs", "os.getuid", "dacl.add_ace", "err.errno", "itertools.chain", "LOG_LEVELS.get", "fmode.st_gid", "stats.st_uid", "logging.INFO", "path.split", "sock.setsockopt", "insecure.append", "log.critical", "socket.gaierror", "log.warning", "zmq.__version__", "errno.EEXIST", "pwuser.pw_dir", "sys.argv", "to_verify.append", "real_path.startswith", "os.readlink", "re.match", "minor.isdigit", "socket.socket", "sock.bind", "resource.getrlimit", "os.W_OK", "sys.stderr", "os.chmod", "name.startswith", "filename.startswith", "pwuser.pw_gid", "sys.exit", "socket.getaddrinfo", "os.stat", "opts.get", "code.count", "pwd.getpwnam", "match.groups", "logging.NOTSET", "os.chown", "out.insert", "socket.AF_UNSPEC", "base.startswith", "stat.S_IMODE", "pwuser.pw_shell", "resource.RLIMIT_NOFILE", "pwuser.pw_name", "salt.defaults", "socket.SOCK_STREAM", "errno.EACCES", "logging.CRITICAL", "os.initgroups", "LOG_LEVELS.items", "os.R_OK", "point.isdigit", "log.debug", "sock.close", "os.listdir", "os.path", "os.access", "major.isdigit", "logging.WARNING", "socket.SO_REUSEADDR", "win32file._getmaxstdio", "pwuser.pw_uid", "os.setuid", "os.setgroups", "salt.utils", "msg.format", "os.environ", "os.setgid", "socket.SOL_SOCKET"]}, "versions.py": {"libraries": ["sys", "os", "salt.version", "boto3", "warnings", "datetime", "botocore", "inspect", "logging", "numbers", "packaging.version", "looseversion", "boto"], "function_names": ["warn_until_date", "_format_warning", "compare", "kwargs_warn_until", "__gt__", "normalize", "check_boto_reqs", "parse", "__le__", "__eq__", "__ne__", "version_cmp", "__init__", "_cmp", "__lt__", "__ge__", "warn_until"], "function_calls": ["Version", "super", "LooseVersion", "RuntimeError", "normalize", "str", "version_cmp", "isinstance", "cmp_func", "warn_until"], "class_names": ["Version", "StrictVersion", "LooseVersion"], "class_method_calls": ["log.error", "log.exception", "other._str_version", "sys._getframe", "inspect.getframeinfo", "looseversion.LooseVersion", "caller.filename", "logging.getLogger", "salt.version", "self.version", "caller.lineno", "date.date", "other.version", "botocore.__version__", "packaging.version", "boto3.__version__", "vs.name", "version.info", "sys.stderr", "boto.__version__", "version.string", "version.formatted_version", "datetime.date", "warnings.warn", "message.format", "numbers.Integral", "os.environ", "datetime.datetime", "self._str_version", "category.__name__", "date.isoformat", "today.isoformat", "version.lower", "_version_.info", "_version_.formatted_version"]}, "vsan.py": {"libraries": ["sys", "salt.exceptions.VMwareRuntimeError", "ssl", "salt.exceptions.VMwareApiError", "pyVmomi.vim", "pyVmomi.vmodl", "salt.utils.vmware", "logging", "salt.ext.vsan.vsanapiutils", "salt.exceptions.VMwareObjectRetrievalError"], "function_names": ["create_diskgroup", "_wait_for_tasks", "remove_capacity_from_diskgroup", "remove_diskgroup", "vsan_supported", "add_capacity_to_diskgroup", "get_cluster_vsan_info", "get_vsan_cluster_config_system", "get_vsan_disk_management_system", "get_host_vsan_system", "reconfigure_cluster_vsan", "__virtual__"], "function_calls": ["VMwareApiError", "_wait_for_tasks", "VMwareObjectRetrievalError", "get_vsan_cluster_config_system", "int", "str", "VMwareRuntimeError", "getattr", "get_host_vsan_system"], "class_names": [], "class_method_calls": ["log.exception", "log.debug", "context.verify_mode", "vim.VimVsanHostDiskMappingCreationSpec", "vmodl.RuntimeFault", "vsan_cl_conf_sys.VsanClusterReconfig", "logging.getLogger", "vsanapiutils.GetVsanVcMos", "vmodl.fault", "maint_spec.vsanMode", "ssl.CERT_NONE", "service_instance._stub", "vim.VsanHostDecommissionMode", "exc.privilegeId", "vim.HostSystem", "vsan_disk_mgmt_system.InitializeDiskMappings", "vmodl.query", "vim.VsanHostDecommissionModeObjectAction", "vim.HostVsanSystem", "spec.capacityDisks", "context.check_hostname", "object_action.noAction", "service_instance.content", "log.trace", "spec.cacheDisks", "cache_disk.canonicalName", "diskgroup.ssd", "object_action.ensureObjectAccessibility", "ssl.create_default_context", "c.canonicalName", "host_vsan_system.RemoveDiskMapping_Task", "vsan_cl_conf_sys.VsanClusterGetConfig", "vsanapiutils.WaitForTasks", "spec.creationType", "exc.method", "vim.HostMaintenanceSpec", "salt.utils", "host_vsan_system.RemoveDisk_Task", "vim.fault", "spec.host", "api_version.split", "exc.msg", "sys.version_info"]}, "vt.py": {"libraries": ["win32api", "termios", "logging", "pty", "win32file.WriteFile", "salt.utils.stringutils", "win32pipe.PeekNamedPipe", "win32file.ReadFile", "functools", "struct", "signal", "fcntl", "win32process", "sys", "os", "time", "msvcrt", "subprocess", "win32con", "salt.utils.data", "errno", "salt.utils.crypt", "salt._logging.LOG_LEVELS", "select"], "function_names": ["close", "__enter__", "has_unread_data", "terminate", "recv", "kill", "_spawn", "getwinsize", "_translate_newlines", "send", "__exit__", "send_signal", "__detect_parent_terminal_size", "sendline", "_recv", "_execute", "_send", "isalive", "wait", "read_and_decode_fd", "setwinsize", "__init__", "_preexec"], "function_calls": ["getattr", "_wexitstatus", "getwinsize", "hasattr", "_terminal_exception", "_wifexited", "_wifsignaled", "isinstance", "TerminalException", "preexec_fn", "ValueError", "_wifstopped", "_wtermsig", "setattr", "RuntimeError", "read_and_decode_fd", "len", "_waitpid", "setwinsize"], "class_names": ["TerminalException", "Terminal"], "class_method_calls": ["win32con.STILL_ACTIVE", "self._send", "self.stream_stdout", "sys.stdout", "sys.platform", "logging.getLogger", "self._handle", "os.read", "self.child_fd", "self._recv", "struct.unpack", "self.receive_encoding", "ex.start", "os.write", "self.shell", "self.terminated", "signal.SIGKILL", "err.errno", "self._spawn", "sys.stdin", "self.signalstatus", "signal.SIGTERM", "LOG_LEVELS.get", "signal.CTRL_BREAK_EVENT", "os.O_NONBLOCK", "stripped.replace", "fcntl.ioctl", "self.stdin", "self.log_sanitize", "self.flag_eof_stderr", "self.stdout_logger", "self.__class__", "os.error", "stdout.rstrip", "self.proc", "os.ttyname", "functools.partial", "os.O_RDWR", "self.child_fde", "log.warning", "stderr.rstrip", "os.WEXITSTATUS", "os.WIFEXITED", "data.encode", "os.WNOHANG", "self.stdin_logger_level", "time.sleep", "pty.openpty", "select.select", "os.WIFSTOPPED", "self.env", "self.stream_stderr", "ex.end", "proc.pid", "os.kill", "self.args", "self.cwd", "rfds.append", "subprocess.Popen", "self.has_unread_data", "sys.stderr", "self.closed", "logging.DEBUG", "win32process.GetExitCodeProcess", "os.O_WRONLY", "self.stderr_logger_level", "logging.Logger", "os.setsid", "self.isalive", "fcntl.fcntl", "self.executable", "fcntl.F_GETFL", "exc.errno", "os.name", "self.pid", "signal.SIGHUP", "self._preexec", "struct.pack", "sys.exc_info", "signal.SIGCONT", "self.partial_data_stderr", "errno.EPIPE", "self.stdout", "self.stdin_logger", "self.stderr_logger", "signal.CTRL_C_EVENT", "self._translate_newlines", "self.rows", "log.trace", "self.stderr", "why.errno", "data.replace", "self.recv", "self.partial_data_stdout", "self.stdout_logger_level", "errno.ECHILD", "self.__detect_parent_terminal_size", "self.send", "self.cols", "log.debug", "os.O_NOCTTY", "self.preexec_fn", "self.wait", "fcntl.F_SETFL", "self.exitstatus", "self.flag_eof_stdout", "os.open", "win32api.TerminateProcess", "os.pipe", "os.waitpid", "os.WTERMSIG", "salt.utils", "terminal_command.replace", "stripped.startswith", "self.send_signal", "os.WIFSIGNALED", "os.linesep", "self.status", "self.close", "os.close", "self.terminate", "signal.SIGINT"]}, "vt_helper.py": {"libraries": ["os", "salt.utils.vt.TerminalException", "salt.utils.vt.Terminal", "re", "logging"], "function_names": ["sendline", "__init__", "close_connection"], "function_calls": ["TerminalException", "Terminal"], "class_names": ["SSHConnection"], "class_method_calls": ["re.M", "logging.getLogger", "re.compile", "log.error", "os.linesep", "ret_stderr.append", "log.debug", "KEY_VALID_RE.search", "self.prompt_re", "ret_stdout.append", "log.info", "self.linesep", "SSH_PASSWORD_PROMPT_RE.search", "self.conn"]}, "win_chcp.py": {"libraries": ["contextlib.contextmanager", "pywintypes", "salt.exceptions.CodePageError", "logging", "win32console"], "function_names": ["get_codepage_id", "chcp", "set_codepage_id", "__virtual__"], "function_calls": ["get_codepage_id", "set_codepage_id", "type", "int", "CodePageError", "isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "log.error", "pywintypes.error", "win32console.GetConsoleCP", "exc.args", "win32console.SetConsoleCP"]}, "win_dotnet.py": {"libraries": ["salt.utils.platform", "salt.utils.win_reg", "salt.utils.versions.Version"], "function_names": ["version_at_least", "versions", "dotnet_45_plus_versions", "versions_details", "versions_list", "__virtual__"], "function_calls": ["Version", "versions", "dotnet_45_plus_versions", "str", "sorted", "versions_list"], "class_names": [], "class_method_calls": ["win_reg.value_exists", "win_reg.read_value", "win_reg.list_keys", "ver_key.startswith", "salt.utils"]}, "win_functions.py": {"libraries": ["win32con.SMTO_ABORTIFHUNG", "win32api", "ctypes", "win32con.WM_SETTINGCHANGE", "psutil", "salt.exceptions.CommandExecutionError", "platform", "pywintypes", "win32net", "win32security", "win32con.HWND_BROADCAST", "re"], "function_names": ["escape_meta_chars", "get_parent_pid", "get_user_groups", "get_current_user", "escape_for_cmd_exe", "guid_to_squid", "is_admin", "get_sam_name", "escape_argument", "squid_to_guid", "enable_ctrl_logoff_handler", "broadcast_setting_change", "get_sid_from_name", "__virtual__"], "function_calls": ["get_user_groups", "range", "escape_for_cmd_exe", "list", "CommandExecutionError", "get_sid_from_name"], "class_names": [], "class_method_calls": ["pywintypes.error", "win32api.SetConsoleCtrlHandler", "win32net.NetUserGetLocalGroups", "re.search", "win32net.NetUserGetGroups", "platform.node", "ret_groups.append", "meta_re.sub", "m.group", "guid_match.group", "squid_match.group", "ctypes.WinDLL", "psutil.Process", "win32api.NameSamCompatible", "win32api.GetUserNameEx", "ctypes.create_unicode_buffer", "squid_pattern.match", "name.upper", "guid_pattern.match", "win32security.ConvertSidToStringSid", "win32security.LookupAccountName", "exc.winerror", "win32net.error", "re.compile", "win32api.GetUserName", "win32security.LookupAccountSid", "arg.replace", "user32.SendMessageTimeoutW", "re.escape"]}, "win_lgpo_auditpol.py": {"libraries": ["salt.modules.cmdmod", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.utils.platform", "re", "logging", "tempfile"], "function_names": ["get_setting", "set_setting", "get_settings", "_get_valid_names", "_auditpol_cmd", "get_auditpol_dump", "__virtual__"], "function_calls": ["iter", "get_settings", "_get_valid_names", "KeyError", "dict", "_auditpol_cmd", "list", "zip", "CommandExecutionError"], "class_names": [], "class_method_calls": ["logging.getLogger", "x.lower", "re.split", "name.lower", "k.lower", "tempfile.NamedTemporaryFile", "line.strip", "ret.update", "salt.modules", "setting.lower", "tmp_file.name", "category.lower", "fp.readlines", "salt.utils", "value.lower"]}, "win_lgpo_netsh.py": {"libraries": ["salt.modules.cmdmod", "os", "socket", "textwrap.dedent", "salt.exceptions.CommandExecutionError", "re", "logging", "tempfile"], "function_names": ["set_state", "get_settings", "set_firewall_settings", "_netsh_command", "get_all_profiles", "set_settings", "get_all_settings", "_netsh_file", "set_logging_settings", "__virtual__"], "function_calls": ["iter", "get_settings", "dict", "_netsh_command", "list", "int", "get_all_settings", "zip", "len", "CommandExecutionError", "dedent", "_netsh_file", "ValueError"], "class_names": [], "class_method_calls": ["socket.gethostname", "fp.write", "log.debug", "ret.update", "setting.lower", "logging.getLogger", "re.split", "state.lower", "tempfile.NamedTemporaryFile", "fp.name", "store.lower", "inbound.lower", "section.lower", "salt.utils", "profile.lower", "salt.modules", "os.remove", "outbound.lower", "value.lower"]}, "win_osinfo.py": {"libraries": ["ctypes.wintypes.DWORD", "ctypes", "ctypes.wintypes.WCHAR", "ctypes.wintypes.BYTE", "win32net", "ctypes.wintypes.WORD", "win32netcon"], "function_names": ["get_os_version_info", "get_join_info", "__init__", "os_version_info_ex", "__virtual__"], "function_calls": ["os_version_info_ex", "OSVersionInfoEx", "super"], "class_names": ["OSVersionInfo", "OSVersionInfoEx"], "class_method_calls": ["info.wServicePackMajor", "self.dwOSVersionInfoSize", "info.wSuiteMask", "win32netcon.NetSetupUnjoined", "ctypes.byref", "win32netcon.NetSetupUnknown", "win32net.NetGetJoinInformation", "info.dwMajorVersion", "info.wProductType", "ctypes.Structure", "ctypes.sizeof", "info.dwPlatformId", "ctypes.WinDLL", "info.wServicePackMinor", "win32netcon.NetSetupWorkgroupName", "kernel32.GetVersionExW", "info.dwBuildNumber", "win32netcon.NetSetupDomainName", "info.dwMinorVersion"]}, "win_pdh.py": {"libraries": ["time", "salt.exceptions.CommandExecutionError", "pywintypes", "salt.utils.platform", "logging", "win32pdh"], "function_names": ["list_instances", "build_counter_list", "get_info", "list_counters", "value", "get_counter", "add_to_query", "list_objects", "build_counter", "__init__", "get_counters", "type_string", "get_all_counters", "__str__", "__virtual__"], "function_calls": ["build_counter_list", "Counter", "dir", "get_counters", "sorted", "getattr", "CommandExecutionError", "isinstance", "staticmethod"], "class_names": ["Counter"], "class_method_calls": ["win32pdh.GetFormattedCounterValue", "win32pdh.PDH_FMT_DOUBLE", "self.type", "pywintypes.error", "self.obj", "counter.path", "win32pdh.CloseQuery", "log.debug", "self.instance", "ret.update", "logging.getLogger", "counter_list.append", "counter.add_to_query", "win32pdh.AddCounter", "type_list.append", "self.counter", "time.sleep", "self.path", "win32pdh.ValidatePath", "Counter.build_counter", "win32pdh.CollectQueryData", "instance.lower", "member.startswith", "self.index", "self.handle", "counters.append", "win32pdh.EnumObjects", "salt.utils", "win32pdh.EnumObjectItems", "win32pdh.GetCounterInfo", "exc.strerror", "counter.value", "win32pdh.MakeCounterPath", "win32pdh.OpenQuery", "self.info", "self.get_info"]}, "win_pwsh.py": {"libraries": ["salt.modules.cmdmod", "salt.utils.platform", "salt.utils.json", "salt.exceptions.CommandExecutionError"], "function_names": ["run_dict", "__virtual__"], "function_calls": ["CommandExecutionError"], "class_names": [], "class_method_calls": ["cmd.lower", "ret.get", "salt.modules", "salt.utils"]}, "win_reg.py": {"libraries": ["win32api", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "win32con", "logging", "win32gui"], "function_names": ["_to_unicode", "list_values", "key_exists", "broadcast_change", "read_value", "_traverse_registry_tree", "_subkeys", "value_exists", "delete_key_recursive", "list_keys", "__init__", "set_value", "delete_value", "__getattr__", "_to_mbcs", "cast_vdata", "__virtual__"], "function_calls": ["_to_unicode", "range", "broadcast_change", "key_exists", "_traverse_registry_tree", "_subkeys", "bool", "list", "Registry", "str", "int", "_to_mbcs", "len", "CommandExecutionError", "isinstance", "cast_vdata"], "class_names": ["Registry"], "class_method_calls": ["registry.opttype", "log.error", "win32con.REG_SZ", "win32api.RegOpenKeyEx", "win32con.WM_SETTINGCHANGE", "win32api.error", "log.exception", "self.vtype_reverse", "log.debug", "key.count", "registry.vtype_reverse", "win32con.KEY_ALL_ACCESS", "win32con.HKEY_CLASSES_ROOT", "self.subkey_slash_check", "win32api.RegFlushKey", "win32con.REG_DWORD", "win32gui.SendMessageTimeout", "win32con.REG_MULTI_SZ", "win32api.RegCreateKeyEx", "win32con.KEY_WOW64_32KEY", "win32api.RegSetValueEx", "registry.subkey_slash_check", "self.hkeys", "logging.getLogger", "self.vtype", "win32con.SMTO_ABORTIFHUNG", "win32con.REG_EXPAND_SZ", "win32con.REG_QWORD", "registry.registry_32", "win32api.RegCloseKey", "vdata.encode", "registry.hkeys", "self.opttype", "subkeys.append", "win32api.RegQueryValueEx", "log.trace", "_ret.append", "win32con.KEY_READ", "key_list.append", "values.append", "win32api.RegEnumKey", "win32con.HWND_BROADCAST", "salt.utils", "exc.winerror", "msg.format", "win32con.HKEY_LOCAL_MACHINE", "win32con.HKEY_CURRENT_USER", "win32con.HKEY_USERS", "win32con.REG_BINARY", "registry.vtype", "win32api.RegDeleteValue", "win32api.RegQueryInfoKey", "win32api.RegDeleteKey", "self.registry_32", "exc.strerror", "self.opttype_reverse", "win32api.RegEnumValue", "win32con.HKEY_CURRENT_CONFIG"]}, "win_runas.py": {"libraries": ["os", "win32api", "ctypes", "time", "salt.platform.win", "psutil", "msvcrt", "win32event", "win32profile", "salt.exceptions.CommandExecutionError", "pywintypes", "win32security", "win32con", "logging", "win32pipe", "win32process"], "function_names": ["create_env", "__virtual__", "runas_unpriv", "split_username", "runas"], "function_calls": ["create_env", "runas_unpriv", "int", "split_username", "CommandExecutionError"], "class_names": [], "class_method_calls": ["win32event.WaitForSingleObject", "msvcrt.open_osfhandle", "win32process.CREATE_NO_WINDOW", "pywintypes.error", "salt.platform", "stdout_read.handle", "win32security.RevertToSelf", "win32security.TokenElevationType", "username.split", "exitcode.value", "log.debug", "win32process.GetExitCodeProcess", "win32api.FormatMessage", "win32security.GetTokenInformation", "process_info.hThread", "win32security.TokenLinkedToken", "stderr_read.handle", "stdin_write.handle", "os.O_TEXT", "win32profile.CreateEnvironmentBlock", "win32pipe.CreatePipe", "ctypes.byref", "logging.getLogger", "f_err.read", "win32process.CREATE_NEW_CONSOLE", "win32security.TOKEN_ADJUST_PRIVILEGES", "process_info.dwThreadId", "win32security.OpenProcessToken", "win32con.LOGON32_LOGON_INTERACTIVE", "win32security.TOKEN_QUERY", "win32event.INFINITE", "stdin_read.handle", "os.fdopen", "process_info.hProcess", "win32process.CREATE_SUSPENDED", "win32con.LOGON32_PROVIDER_DEFAULT", "process_info.dwProcessId", "psutil.Process", "time.time", "win32api.GetCurrentProcess", "f_out.read", "exc.winerror", "win32con.STARTF_USESTDHANDLES", "security_attributes.bInheritHandle", "win32security.LookupAccountName", "win32security.SECURITY_ATTRIBUTES", "stderr_write.handle", "stdout_write.handle", "win32con.LOGON32_LOGON_SERVICE", "win32security.LogonUser", "win32api.CloseHandle", "os.O_RDONLY", "win32con.WAIT_OBJECT_0"]}, "win_update.py": {"libraries": ["salt.utils.winapi", "subprocess", "salt.exceptions.CommandExecutionError", "pywintypes", "win32com.client", "salt.utils.args", "logging", "salt.utils.data"], "function_names": ["count", "download", "_run", "needs_reboot", "summary", "list", "search", "__init__", "available", "refresh", "install", "uninstall", "installed", "updates", "__virtual__"], "function_calls": ["range", "needs_reboot", "bool", "str", "CommandExecutionError", "Updates", "isinstance"], "class_names": ["Updates", "WindowsUpdateAgent"], "class_method_calls": ["updates.updates", "log.error", "self.updates", "update.MsrcSeverity", "obj_sys.RebootRequired", "update.IsMandatory", "log.debug", "self.count", "item.Identity", "installer.Install", "install_list.Add", "uninstall_list.Add", "uninstall_list.Item", "found.Add", "result.ResultCode", "error.args", "searcher.Online", "logging.getLogger", "download_list.Add", "exc.args", "result.GetUpdateResult", "installer.Uninstall", "searcher.Search", "p.communicate", "update.Type", "update.IsDownloaded", "update.EulaAccepted", "win32com.client", "update.RebootRequired", "self.fail_codes", "result.RebootRequired", "category.Name", "update.Description", "downloader.Download", "update.AcceptEula", "installer.Updates", "item.KBArticleIDs", "install_list.Count", "update.Categories", "self.update_types", "pywintypes.com_error", "salt.utils", "item.Name", "download_list.Count", "results.Updates", "item.lower", "install_list.Item", "item.split", "uninstall_list.Count", "self._updates", "update.IsInstalled", "update.KBArticleIDs", "update.SupportUrl", "downloader.Updates", "update.Title", "self._session", "self.refresh", "update.InstallationBehavior", "update.IsHidden", "download_list.Item", "subprocess.Popen", "self._run", "subprocess.PIPE", "updates.count", "update.Identity"]}, "winapi.py": {"libraries": ["pythoncom", "threading", "logging"], "function_names": ["__enter__", "_is_main_thread", "__exit__", "__init__", "__virtual__"], "function_calls": [], "class_names": ["Com"], "class_method_calls": ["logging.getLogger", "self._is_main_thread", "log.debug", "self.need_com_init", "pythoncom.CoInitialize", "threading.current_thread", "pythoncom.CoUninitialize"]}, "xdg.py": {"libraries": ["os"], "function_names": ["xdg_config_dir"], "function_calls": [], "class_names": [], "class_method_calls": ["os.getenv", "os.path"]}, "xmlutil.py": {"libraries": ["xml.etree.ElementTree", "string", "re", "salt.utils.data"], "function_names": ["to_dict", "_to_full_dict", "del_text", "element_to_str", "get_xml_node", "clean_node", "set_node_text", "attribute", "strip_spaces", "int_attribute", "_do_delete", "_to_dict", "change_xml", "_conv_name", "del_attribute"], "function_calls": ["_to_full_dict", "convert_fn", "get_xml_node", "clean_node", "Exception", "list", "str", "strip_spaces", "_to_dict", "int", "get_fn", "del_fn", "compare_fn", "len", "set", "isinstance", "_conv_name", "set_fn"], "class_names": [], "class_method_calls": ["xmltree.attrib", "doc.findall", "ElementTree.tostring", "xpath.startswith", "doc.iter", "s.startswith", "n.text", "node.attrib", "n.get", "xmltree.tag", "item.tag", "value_item.get", "v.get", "x.split", "n.set", "item.text", "parent.remove", "param.get", "xmltree.text", "xpath.rfind", "s.endswith", "node.find", "matcher.group", "re.match", "salt.utils", "string.Template", "ElementTree.SubElement", "node.tail", "node.keys", "node.text", "parent_map.get", "re.sub", "kept_nodes.add"]}, "yamldumper.py": {"libraries": ["collections", "salt.utils.odict.OrderedDict", "salt.utils.context", "yaml.CDumper", "yaml.SafeDumper", "yaml", "yaml.CSafeDumper", "yaml.Dumper"], "function_names": ["safe_dump", "get_dumper", "increase_indent", "represent_ordereddict", "represent_undefined", "dump"], "function_calls": ["super", "list"], "class_names": ["IndentedSafeOrderedDumper", "SafeOrderedDumper", "OrderedDumper", "IndentMixin"], "class_method_calls": ["yaml.dump", "kwargs.setdefault", "SafeOrderedDumper.add_representer", "OrderedDumper.add_representer", "collections.defaultdict", "SafeOrderedDumper.represent_scalar", "dumper.represent_scalar", "yaml.representer", "salt.utils", "OrderedDumper.represent_scalar", "dumper.represent_dict", "data.items"]}, "yamlencoding.py": {"libraries": ["sys", "yaml", "io", "salt.utils.decorators.jinja.jinja_filter"], "function_names": ["yaml_dquote", "yaml_squote", "yaml_encode"], "function_calls": ["yaml_dquote", "type", "str", "jinja_filter", "TypeError", "isinstance"], "class_names": [], "class_method_calls": ["sys.maxsize", "yrepr.represent_data", "ostream.getvalue", "yemitter.write_single_quoted", "yaml.emitter", "io.StringIO", "yaml.representer", "ynode.value", "yaml.ScalarNode", "yemitter.write_double_quoted", "ynode.tag"]}, "yamllint.py": {"libraries": ["yamllint.config.YamlLintConfig", "salt.utils.stringutils", "yamllint", "logging", "yamllint.linter"], "function_names": ["lint", "has_yamllint", "version"], "function_calls": ["YamlLintConfig"], "class_names": [], "class_method_calls": ["problem.message", "logging.getLogger", "problem.line", "problem.level", "salt.utils", "linter.run", "yamllint.__version__", "problem.column", "problems.append"]}, "yamlloader.py": {"libraries": ["salt.utils.stringutils", "yaml", "yaml.nodes.SequenceNode", "yaml.nodes.MappingNode", "yaml.constructor.ConstructorError"], "function_names": ["construct_unicode", "load", "construct_scalar", "__init__", "construct_yaml_str", "construct_mapping", "construct_yaml_map", "safe_load", "flatten_mapping"], "function_calls": ["ConstructorError", "type", "super", "hash", "getattr", "len", "isinstance"], "class_names": ["SaltYamlSafeLoader"], "class_method_calls": ["yaml.load", "subnode.value", "value_node.id", "name_node.value", "self.flatten_mapping", "self.add_constructor", "submerge.append", "node.value", "self.dictclass", "submerge.reverse", "value_node.value", "node.id", "merge.extend", "key_node.tag", "subnode.start_mark", "self.construct_mapping", "key_node.start_mark", "node.start_mark", "salt.utils", "self.construct_scalar", "subnode.id", "node.tag", "yaml.SafeLoader", "value_node.start_mark", "data.update", "self.construct_object", "key_node.value"]}, "yamlloader_old.py": {"libraries": ["salt.utils.stringutils", "yaml", "re", "yaml.nodes.SequenceNode", "yaml.nodes.MappingNode", "yaml.constructor.ConstructorError"], "function_names": ["construct_unicode", "load", "construct_scalar", "__init__", "construct_yaml_str", "construct_mapping", "fetch_plain", "construct_yaml_map", "safe_load", "flatten_mapping"], "function_calls": ["ConstructorError", "eval", "type", "super", "hash", "len", "isinstance"], "class_names": ["SaltYamlSafeLoader"], "class_method_calls": ["yaml.load", "yaml.CLoader", "yaml.Dumper", "self.column", "subnode.value", "value_node.id", "self.flatten_mapping", "name_node.value", "self.add_constructor", "submerge.append", "yaml.scanner", "self.fetch_single", "node.value", "self.pointer", "self.peek", "self.dictclass", "submerge.reverse", "value_node.value", "node.id", "merge.extend", "key_node.tag", "subnode.start_mark", "self.construct_mapping", "yaml.CDumper", "key_node.start_mark", "re.match", "node.start_mark", "salt.utils", "re.IGNORECASE", "yaml.Loader", "self.construct_scalar", "subnode.id", "node.tag", "self.fetch_double", "yaml.SafeLoader", "value_node.start_mark", "self.line", "data.update", "exc.problem", "self.construct_object", "key_node.value"]}, "yast.py": {"libraries": ["salt.utils.files", "xml.etree.ElementTree", "salt.utils.xmlutil", "salt.utils.yaml"], "function_names": ["mksls"], "function_calls": [], "class_names": [], "class_method_calls": ["fh_.read", "ET.fromstring", "xml.to_dict", "salt.utils"]}, "version.py": {"libraries": ["sys", "os", "salt.utils.platform.linux_distribution", "win32api", "salt.utils.package", "functools.total_ordering", "subprocess", "platform", "salt.utils.entrypoints", "win32con", "re", "operator", "salt.utils.versions", "salt._compat.importlib_metadata", "argparse", "collections.namedtuple"], "function_names": ["system_version", "string", "next_release", "from_last_named_version", "pre_info", "from_name", "__lt__", "__str__", "__repr__", "full_info_all_versions", "__new__", "versions_information", "dependency_information", "extensions_information", "__ge__", "info", "min_info", "pre_index", "can_have_dot_zero", "parse", "__get_version", "noc_info", "__gt__", "previous_release", "full_info", "__discover_version", "new_version", "__compare__", "__le__", "versions", "current_release", "system_information", "_parser", "__eq__", "__init__", "salt_information", "formatted_version", "__ne__", "_sort_by_lowercased_name", "package_information", "sse", "versions_report"], "function_calls": ["method", "system_version", "type", "__import__", "list", "getattr", "int", "callable", "SaltVersion", "max", "super", "dir", "sorted", "versions_information", "dependency_information", "extensions_information", "isinstance", "cls", "map", "dict", "bool", "linux_distribution", "namedtuple", "print", "globals", "__get_version", "version", "ValueError", "iter", "__discover_version", "SaltStackVersion", "_parser", "tuple", "open", "system_information", "salt_information", "len", "package_information"], "class_names": ["SaltVersionsInfo", "SaltStackVersion", "SaltVersion"], "class_method_calls": ["SaltVersionsInfo._current_release", "SaltStackVersion.git_sha_regex", "self.minor", "self.min_info", "out.decode", "sys.platform", "re.search", "platform.machine", "cls.LNAMES", "self.__compare__", "fmt.format", "other.noc_info", "SaltVersionsInfo.versions", "version_string.decode", "self.RMATCH", "other.pre_index", "rfh.read", "__saltstack_version__.info", "sys.version", "win32api.RegOpenKey", "version.released", "version_string.lower", "self.__class__", "subprocess.PIPE", "cls._current_release", "cls.from_name", "parser.parse_args", "libs.append", "self.VNAMES", "__saltstack_version__.string", "argparse.ArgumentParser", "args.parse", "__saltstack_version__.name", "self.new_version", "win32api.RegQueryValueEx", "name.lower", "self.mbugfix", "parts.append", "self.pre_type", "re.match", "self.can_have_dot_zero", "sys.maxsize", "argparse.REMAINDER", "parts.remove", "SaltStackVersion.current_release", "SaltVersionsInfo.SULFUR", "out.strip", "err.decode", "operator.attrgetter", "subprocess.Popen", "self.noc", "SaltVersionsInfo.next_release", "self.noc_info", "self.name", "self.string", "args.next_release", "dist_nv.name", "product_name.split", "sys.exit", "cls.current_release", "saltstack_version.sha", "info.append", "self.pre_index", "v.info", "cls._next_release", "cls._previous_release", "match.groups", "platform.release", "other.info", "__saltstack_version__.next_release", "cls._sorted_versions", "info.extend", "win32con.HKEY_LOCAL_MACHINE", "importlib_metadata.version", "platform.win32_ver", "NAMES.items", "cls.versions", "k.lower", "os_err.errno", "v.name", "self.info", "parts.extend", "SaltVersionsInfo.current_release", "x.lower", "platform.system", "other.minor", "os.path", "other.pre_type", "platform.mac_ver", "self.sha", "self.major", "self.pre_num", "cls.git_describe_regex", "parser.add_argument", "SaltStackVersion.parse", "saltstack_version.noc", "self.bugfix", "salt.utils", "re.compile", "name.isupper", "process.communicate", "dist_nv.version", "self.sse"]}, "file_roots.py": {"libraries": ["salt.utils.files", "os", "salt.utils.path"], "function_names": ["list_roots", "list_env", "find", "write", "read"], "function_calls": ["iter", "next", "find", "list_env", "len"], "class_names": [], "class_method_calls": ["os.makedirs", "fn_.keys", "above.insert", "fp_.write", "ret.append", "salt.utils", "os.path", "fp_.read"]}, "pillar_roots.py": {"libraries": ["salt.utils.files", "os", "salt.utils.verify", "salt.utils.path"], "function_names": ["list_roots", "list_env", "find", "write", "read"], "function_calls": ["iter", "next", "find", "list_env", "len"], "class_names": [], "class_method_calls": ["os.makedirs", "fn_.keys", "above.insert", "fp_.write", "ret.append", "salt.utils", "os.path", "fp_.read"]}, "yumnotify.py": {"libraries": ["hashlib", "os", "yum.plugins.TYPE_CORE"], "function_names": ["_get_checksum", "_get_mtime", "posttrans_hook"], "function_calls": ["open", "int", "_get_mtime", "_get_checksum"], "class_names": [], "class_method_calls": ["os.environ", "hashlib.sha256", "digest.update", "digest.hexdigest", "os.path", "rpm_db_fh.read", "ck_fh.write"]}, "setup.py": {"libraries": ["glob", "salt.version.SaltStackVersion", "distutils.cmd.Command", "warnings", "distutils.version.LooseVersion", "setuptools.command.develop.develop", "setuptools.command.sdist.sdist", "setuptools.setup", "wheel.bdist_wheel.bdist_wheel", "setuptools", "distutils.log", "distutils.command.build.build", "requests", "urllib2.urlopen", "zmq", "sys", "os", "setuptools.command.bdist_egg.bdist_egg", "distutils.command.install_lib.install_lib", "subprocess", "distutils.dist", "urllib.request.urlopen", "esky.bdist_esky", "datetime.datetime", "distutils.command.clean.clean", "distutils.errors.DistutilsArgError", "setuptools.command.install.install", "bbfreeze", "yum", "bbfreeze.modulegraph.modulegraph.ModuleGraph"], "function_names": ["setup_esky", "make_distribution", "get_esky_freezer_includes", "update_metadata", "parse_command_line", "finalize_options", "run", "_called_from_setup", "_property_entry_points", "initialize_options", "_parse_requirements_file", "_property_install_requires", "write_manifest", "discover_packages", "make_release_tree", "_property_package_data", "_property_freezer_options", "__init__", "_property_data_files"], "function_calls": ["ModuleGraph", "type", "LooseVersion", "setattr", "DistutilsArgError", "urlopen", "getattr", "setup", "int", "open", "enumerate", "dir", "log", "str", "print", "_parse_requirements_file", "hasattr", "exit"], "class_names": ["BDistEgg", "WriteSaltSshPackagingFile", "InstallLib", "TestCommand", "BDistWheel", "Clean", "WriteSaltVersion", "Build", "Install", "SaltDistribution", "GenerateSaltSyspaths", "CloudSdist", "Sdist", "Develop"], "class_method_calls": ["self.salt_spm_parent_dir", "Sdist.write_manifest", "setuptools.__version__", "sys.stdout", "sys.platform", "self.get_option_dict", "req.text", "self.salt_spm_formula_dir", "parsed_requirements.append", "self.license", "scripts.extend", "INSTALL_SYSPATHS_TEMPLATE.format", "self.ssh_packaging", "self.mimic_salt_install", "self.author", "sys.path", "self.run_command", "self.salt_share_dir", "Sdist.boolean_options", "self.salt_base_master_roots_dir", "self.description", "mgraph.run_script", "ret.returncode", "self.zip_safe", "install_lib.run", "rfh.read", "self.packages", "funcname.split", "sdist.make_distribution", "develop.finalize_options", "inputfile.endswith", "self.salt_root_dir", "sys.version_info", "self.cmdclass", "self.salt_pidfile_dir", "bdist_wheel.finalize_options", "freezer_includes.remove", "install.finalize_options", "develop.initialize_options", "self.build_lib", "f.read", "log.info", "wfh.write", "self.salt_spm_pillar_dir", "attrname.startswith", "build.run", "self.classifiers", "chmod.append", "Sdist.run", "self.url", "self.skip_bootstrap_download", "line.strip", "req.encoding", "subprocess.run", "self.salt_sock_dir", "os.uname", "self.salt_srv_root_dir", "sys.argv", "fp_.write", "test_cmd.extend", "self.update_metadata", "warnings.warn", "sys.executable", "self.salt_home_dir", "self.salt_spm_reactor_dir", "datetime.utcnow", "Sdist.user_options", "develop.user_options", "req.read", "self.write_salt_version", "sys.stderr", "os.chmod", "req.status_code", "self.name", "self.salt_lib_state_dir", "log.error", "mod.identifier", "self.runtests_opts", "rfh.readlines", "sys.exit", "run_frame.f_back", "self.get_outputs", "log.warn", "self.author_email", "subprocess.check_output", "bdist_egg.finalize_options", "freezer_includes.extend", "self.discover_packages", "os.sep", "self.salt_logs_dir", "self.generate_salt_syspaths", "self.get_finalized_command", "funcname.startswith", "build_cmd.build_lib", "os.chdir", "distutils.dist", "Sdist.initialize_options", "zmq.pyzmq_version_info", "Sdist.finalize_options", "glob.glob", "self.salt_cache_dir", "requests.get", "line.startswith", "install.initialize_options", "sdist.make_release_tree", "self.long_description_content_type", "self.salt_transport", "os.walk", "self.with_salt_version", "self.distribution", "self.skip_build", "self.filelist", "install.run", "os.path", "req.getcode", "install._called_from_setup", "self.salt_config_dir", "self.salt_base_thorium_roots_dir", "scripts.append", "self.salt_base_pillar_roots_dir", "develop.boolean_options", "datetime.utcfromtimestamp", "clean.run", "self.metadata", "self.salt_version", "mgraph.flatten", "self.download_bootstrap_script", "SaltStackVersion.parse", "self.python_requires", "self.get_esky_freezer_includes", "modules.append", "develop.run", "self.setup_esky", "os.unlink", "os.environ", "self.long_description", "freezer_includes.append", "os.remove", "mod.filename", "script.startswith", "self.salt_base_file_roots_dir", "self.get_inputs"]}, "{{module_name}}.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "test_{{module_name}}.py": null, "buildpackage.py": {"libraries": ["errno", "glob", "os", "sys", "optparse.OptionGroup", "subprocess", "optparse.OptionParser", "re", "logging", "shutil"], "function_names": ["_init", "_abort", "_make_sdist", "build_centos", "_move", "_run_command"], "function_calls": ["_init", "_abort", "_make_sdist", "setattr", "build_centos", "OptionParser", "max", "getattr", "open", "int", "_move", "_run_command", "OptionGroup", "isinstance", "print"], "class_names": [], "class_method_calls": ["log.error", "rpm_group.add_option", "shutil.Error", "opt.dest", "log.debug", "parser.parse_args", "packages.extend", "sys.exit", "opts.log_level", "log.info", "os.path", "build_reqs.extend", "exc.errno", "shutil.move", "logging.getLogger", "opts.log_file", "opts.platform", "glob.iglob", "spec.read", "path_group.add_option", "group.option_list", "subprocess.Popen", "define_opts.extend", "cmd.extend", "logging.WARNING", "logging.NOTSET", "opts.build_dir", "cmd.append", "shutil.copy", "fp_.read", "os.makedirs", "redhat_release.split", "logging.GARBAGE", "fp_.write", "os.chdir", "sys.stderr", "logging.ERROR", "shutil.rmtree", "logging.addLevelName", "opts.artifact_dir", "errno.ENOENT", "logging.basicConfig", "logging.INFO", "re.compile", "glob.glob", "tarball_re.match", "opts.spec_file", "proc.returncode", "errno.ENOTDIR", "opts.source_dir", "logging.CRITICAL", "os.remove", "line.startswith", "logging.QUIET", "parser.add_option", "logging.TRACE", "parser.add_option_group", "proc.communicate", "logging.DEBUG", "subprocess.PIPE", "problems.append"]}, "committer_parser.py": {"libraries": ["sys", "email.utils", "getopt", "datetime", "re"], "function_names": ["parse_date", "parse_gitlog", "main", "__init__", "counts_by_contributor", "count_results"], "function_calls": ["parse_date", "parse_gitlog", "main", "open", "str", "sorted", "len", "counts_by_contributor", "Usage", "count_results", "print"], "class_names": ["Usage"], "class_method_calls": ["fh.readlines", "line.rstrip", "sys.exit", "d.month", "d.year", "err.msg", "getopt.error", "self.msg", "results.keys", "sys.argv", "email.utils", "isodate.group", "re.match", "sys.stdin", "fh.close", "commits_by_contributor.keys", "datetime.datetime", "getopt.getopt", "author.group", "line.startswith", "sys.stderr"]}, "eventlisten.py": {"libraries": ["os", "time", "salt.utils.event", "optparse", "pprint"], "function_names": ["check_access_and_print_warning", "listen", "parse"], "function_calls": ["listen", "check_access_and_print_warning", "parse", "print"], "class_names": [], "class_method_calls": ["found_minions.append", "options.id", "time.asctime", "parser.parse_args", "os.path", "os.access", "ret.get", "os.X_OK", "options.__dict__", "event.get_event", "pprint.pprint", "salt.utils", "optparse.OptionParser", "options.node", "data.get", "event.puburi", "os.W_OK", "data.keys", "parser.add_option", "os.R_OK"]}, "test_custom_module.py": {"libraries": ["pytest", "tests.support.case.SSHCase"], "function_names": ["test_ssh_sls_with_custom_module", "test_ssh_custom_module", "test_ssh_regular_module"], "function_calls": ["isinstance", "AssertionError"], "class_names": ["SSHCustomModuleTest"], "class_method_calls": ["self.assertEqual", "self.run_function", "pytest.mark"]}, "test_kwarg.py": {"libraries": ["salt.utils.platform", "pytest", "tests.support.case.ModuleCase"], "function_names": ["test_iter_no_block", "test_full_return_kwarg", "test_iter", "test_cli", "test_cmd_arg_kwarg_parsing", "test_full_returns", "test_kwarg_type", "setUp"], "function_calls": [], "class_names": ["StdTest"], "class_method_calls": ["ret.items", "self.assertEqual", "str.__name__", "self.TIMEOUT", "pytest.mark", "salt.utils", "self.client", "self.assertIn"]}, "test_standard.py": {"libraries": ["tests.support.case.ModuleCase", "os", "salt.utils.files", "salt.utils.platform", "pytest"], "function_names": ["test_iter_no_block", "test_disconnected_return", "setUp", "test_iter", "test_cli", "test_batch_raw", "test_full_returns", "test_missing_minion_list", "test_batch", "test_missing_minion_nodegroup"], "function_calls": [], "class_names": ["StdTest"], "class_method_calls": ["os.unlink", "self.assertEqual", "self.TIMEOUT", "pytest.mark", "self.assertTrue", "self.master_opts", "os.path", "salt.utils", "self.client", "self.assertIn"]}, "test_syndic.py": {"libraries": [], "function_names": ["test_syndic"], "function_calls": [], "class_names": [], "class_method_calls": ["salt_cli.run", "ret.data"]}, "test_digitalocean.py": {"libraries": ["salt.exceptions.SaltCloudSystemExit", "salt.cloud.clouds.digitalocean", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["test__get_vpc_by_name", "test_reboot_no_call", "vpc_list"], "function_calls": ["str", "MagicMock", "patch"], "class_names": [], "class_method_calls": ["logging.getLogger", "digitalocean.reboot", "pytest.fixture", "digitalocean._get_vpc_by_name", "pytest.raises", "excinfo.value"]}, "test_dimensiondata.py": {"libraries": ["salt.cloud.clouds.dimensiondata", "salt.exceptions.SaltCloudSystemExit", "salt.utils.versions.Version", "libcloud.security", "tests.support.mock.__version__", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "certifi"], "function_names": ["test_destroy_call", "configure_loader_modules", "test_avail_locations_call", "test_list_nodes_call", "test_avail_images_call", "test_query_node_data_filter_preferred_ip_addresses", "test_avail_sizes_call", "test_provider_matches", "test_avail_sizes", "vm_name", "test_import", "_ip_decider", "_preferred_ip"], "function_calls": ["Version", "MagicMock", "patch", "len", "_preferred_ip"], "class_names": [], "class_method_calls": ["dimensiondata.get_configured_provider", "data.public_ips", "dimensiondata.NodeState", "dimensiondata.list_nodes", "dimensiondata.destroy", "libcloud.security", "dimensiondata._query_node_data", "pytest.fixture", "pytest.mark", "dimensiondata.avail_sizes", "certifi.where", "dimensiondata.get_dependencies", "pytest.raises", "p.call_count", "libcloud.__version__", "dimensiondata.avail_images", "dimensiondata.avail_locations"]}, "test_ec2.py": {"libraries": ["salt.exceptions.SaltCloudSystemExit", "salt.crypt", "salt.utils.files", "tests.support.mock.PropertyMock", "salt.cloud.clouds.ec2", "pytest", "tests.support.mock.patch"], "function_names": ["test_create_volume_missing_iops_io2", "test_termination_protection", "test_get_imageid", "test_termination_protection_exception", "test__load_params_encrypted_kmskeyid", "test__load_params_snapshot", "test_create_volume_no_zone", "test__load_params_kmskeyid_without_encrypted", "test__load_params_type_io1", "test_get_password_data", "configure_loader_modules", "test_get_subnetname_id", "test_create_volume_call_not_function", "test__load_params_type", "test__validate_key_path_and_mode", "test__load_params_size", "test_create_volume_kmskeyid_without_encrypted", "test__load_params_type_io2", "test_create_volume_missing_iops_io1", "test__load_params_encrypted"], "function_calls": ["str", "type", "PropertyMock", "patch"], "class_names": [], "class_method_calls": ["salt.exceptions", "ec2.create_volume", "salt.crypt", "aws_query.assert_called_once", "fp.write", "_param_from_config.assert_called_once_with", "patched_stat.return_value", "ec2._get_subnetname_id", "ec2._load_params", "pytest.fixture", "pytest.mark", "pytest.raises", "salt.utils", "ec2.get_password_data", "ec2.get_imageid", "ec2._validate_key_path_and_mode", "ec2.request_instance"]}, "test_gce.py": {"libraries": ["salt.exceptions.SaltCloudSystemExit", "salt.utils.versions.Version", "collections", "tests.support.mock.__version__", "tests.support.mock.MagicMock", "pytest", "salt.cloud.clouds.gce", "tests.support.mock.patch", "tests.support.mock.call"], "function_names": ["config_metadata", "test_request_instance_with_accelerator", "test_destroy_call", "return_first", "fake_conf_provider", "config_subnetwork", "config", "config_network", "config_labels", "configure_loader_modules", "test_fail_virtual_libcloud_version_too_old", "config_tags", "conn", "test_get_configured_provider_should_pass_expected_args", "test_get_configured_provider_should_return_expected_result", "test_fail_virtual_deps_missing_config", "test_import", "config_image", "fake_libcloud_2_3_0", "fake_libcloud_2_5_0", "config_location", "config_size", "test_create_address_should_fire_creating_and_created_events_with_expected_args", "test_create_address_passes_correct_args_to_ex_create_address", "test_fail_virtual_missing_deps"], "function_calls": ["Version", "MagicMock", "patch", "object", "call"], "class_names": [], "class_method_calls": ["request.param", "fake_conf_provider.return_value", "gce.__virtual__", "pytest.fixture", "gce.__opts__", "fake_conf_provider.assert_called_with", "gce.get_dependencies", "fake_addy.extra", "pytest.mark", "gce.create_address", "pytest.raises", "p.assert_called_once", "collections.namedtuple", "gce.get_configured_provider", "fake_addy.region", "gce.request_instance", "conn.ex_create_address", "gce.__utils__", "gce.destroy", "fake_conn.return_value", "gce.HAS_LIBCLOUD", "region.name", "conn.create_node"]}, "test_gogrid.py": {"libraries": ["tests.integration.cloud.helpers.cloud_test_base.CloudTest", "tests.integration.cloud.helpers.cloud_test_base.TIMEOUT", "pytest"], "function_names": ["test_instance"], "function_calls": [], "class_names": ["GoGridTest"], "class_method_calls": ["self.assertDestroyInstance", "self.assertInstanceExists", "self.instance_name", "pytest.mark", "self.run_cloud"]}, "test_linode.py": {"libraries": ["salt.cloud.clouds.linode", "pytest"], "function_names": ["configure_loader_modules", "test_validate_name_too_short", "test_validate_name_valid_characters", "test_validate_name_last_character_invalid", "test_validate_name_invalid_characters", "test_validate_name_first_character_invalid", "test_validate_name_too_long"], "function_calls": ["len"], "class_names": [], "class_method_calls": ["linode._validate_name", "pytest.fixture"]}, "test_oneandone.py": {"libraries": ["tests.integration.cloud.helpers.cloud_test_base.CloudTest", "tests.integration.cloud.helpers.cloud_test_base.TIMEOUT", "pytest"], "function_names": ["test_instance", "test_list_images"], "function_calls": [], "class_names": ["OneAndOneTest"], "class_method_calls": ["self.assertDestroyInstance", "self.assertInstanceExists", "self.instance_name", "self.run_cloud", "i.strip", "self.PROVIDER_NAME", "pytest.importorskip", "self.assertIn"]}, "test_openstack.py": {"libraries": ["tests.support.mock.MagicMock", "pytest", "salt.cloud.clouds.openstack", "salt.utils.dictupdate", "tests.support.mock.patch", "tests.support.mock.call"], "function_names": ["test_when_ignore_cidr_is_configured_and_ip_is_provided_result_is_expected", "get_image", "test_request_instance_should_be_able_to_provide_a_dictionary_for_network", "__iter__", "test_show_instance", "test_get_configured_provider_auth", "test_when_getting_cloud_config_values_expected_args_should_be_provided", "test_get_configured_provider_cloud", "list_servers", "test__clean_create_kwargs", "test_request_instance_should_be_able_to_provide_a_list_of_single_ids_or_names_for_network", "configure_loader_modules", "expected_config_stuff", "test_get_dependencies_no_shade", "test_list_nodes_full_image_obj", "test_get_dependencies", "get_flavor", "test_request_instance_should_be_able_to_provide_a_list_of_dictionaries_for_network", "test_request_instance_should_create_conn_if_provided_is_None", "test_list_nodes_full_image_str", "test_get_configured_provider_bad", "get_server", "test_preferred_ip_function_returns_expected", "test_request_instance_should_use_provided_connection_if_not_None", "__init__"], "function_calls": ["MagicMock", "iter", "MockConn", "patch", "MockImage", "call", "MockNode"], "class_names": ["MockImage", "MockConn", "MockNode"], "class_method_calls": ["openstack.__utils__", "openstack.get_configured_provider", "openstack.preferred_ip", "pytest.fixture", "conn.node", "patch.object", "openstack.show_instance", "params.pop", "openstack.__opts__", "pytest.mark", "openstack.list_nodes_full", "fake_conn.create_server", "fake_get_conn.assert_not_called", "openstack.get_dependencies", "openstack.request_instance", "patch.dict", "MockImage.name", "fake_get_conn.assert_called_once_with", "dictupdate.update", "openstack.ignore_cidr", "self.node", "self.image", "openstack._clean_create_kwargs"]}, "test_profitbricks.py": {"libraries": ["profitbricks.client.ProfitBricksService", "tests.integration.cloud.helpers.cloud_test_base.CloudTest", "tests.integration.cloud.helpers.cloud_test_base.TIMEOUT", "pytest"], "function_names": ["test_list_image_alias", "test_list_location", "test_list_sizes", "test_list_nodes_full", "test_list_nodes", "test_instance", "test_list_images", "setUp", "test_list_datacenters"], "function_calls": ["super"], "class_names": ["ProfitBricksTest"], "class_method_calls": ["self.PROVIDER", "self.assertDestroyInstance", "self.assertInstanceExists", "pytest.mark", "self.instance_name", "self.skipTest", "self.run_cloud", "i.strip", "self.provider_config", "self.assertIn"]}, "test_tencentcloud.py": {"libraries": ["os", "tests.support.runtests.RUNTIME_VARS", "pytest", "tests.support.case.ShellCase", "saltfactories.utils.random_string", "salt.config.cloud_providers_config"], "function_names": ["tearDown", "test_instance", "setUp"], "function_calls": ["cloud_providers_config", "super", "random_string"], "class_names": ["TencentCloudTest"], "class_method_calls": ["pytest.mark", "self.skipTest", "self.run_cloud", "os.path", "i.strip", "RUNTIME_VARS.FILES", "self.assertIn"]}, "test_virtualbox.py": {"libraries": ["salt.utils.virtualbox.vb_get_box", "salt.utils.virtualbox.vb_get_network_addresses", "salt.utils.virtualbox.machine_get_machinestate_str", "tests.integration.cloud.helpers.virtualbox.INSTANCE_NAME", "tests.integration.cloud.helpers.virtualbox.PROVIDER_NAME", "tests.integration.cloud.helpers.virtualbox.BOOTABLE_BASE_BOX_NAME", "logging", "tests.integration.cloud.helpers.virtualbox.CONFIG_NAME", "tests.integration.cloud.helpers.virtualbox.PROFILE_NAME", "tests.integration.cloud.helpers.virtualbox.DEPLOY_PROFILE_NAME", "salt.utils.virtualbox.vb_xpcom_to_attribute_dict", "tests.integration.cloud.helpers.virtualbox.VirtualboxTestCase", "tests.support.unit.TestCase", "tests.support.runtests.RUNTIME_VARS", "salt.config.vm_profiles_config", "salt.utils.virtualbox.vb_destroy_machine", "salt.utils.virtualbox.vb_clone_vm", "os", "salt.utils.virtualbox.vb_create_machine", "salt.utils.virtualbox.vb_machine_exists", "salt.utils.virtualbox.vb_wait_for_network_address", "tests.integration.cloud.helpers.virtualbox.BASE_BOX_NAME", "tests.integration.cloud.helpers.virtualbox.VirtualboxCloudTestCase", "salt.utils.virtualbox.vb_stop_vm", "salt.utils.virtualbox.vb_start_vm", "salt.config.cloud_providers_config", "salt.utils.virtualbox.HAS_LIBS", "salt.utils.virtualbox.XPCOM_ATTRIBUTES", "socket", "pytest"], "function_names": ["test_cloud_list_select", "test_cloud_list_full", "test_function_show_instance", "setUp", "test_cloud_destroy", "__str__", "test_extra_nonexistent_attribute_with_default", "test_imachine_object_default", "test_cloud_list", "test_override_attributes", "test_cloud_create", "tearDownClass", "test_network_addresses", "assertIsIpAddress", "test_unknown_object", "tearDown", "test_deploy", "test_start_stop_action", "test_vm_creation_and_destruction", "test_start_stop", "test_get_manager", "_mock_xpcom_object", "test_restart_action", "test_extra_nonexistent_attributes", "test_create_machine", "run_cloud_destroy", "test_extra_attributes", "setUpClass"], "function_calls": ["range", "vb_machine_exists", "vb_start_vm", "vm_profiles_config", "vb_wait_for_network_address", "super", "machine_get_machinestate_str", "isinstance", "vb_destroy_machine", "dict", "vb_get_box", "vb_create_machine", "vb_get_network_addresses", "setattr", "vb_xpcom_to_attribute_dict", "cloud_providers_config", "XPCOM", "vb_stop_vm", "len", "vb_clone_vm"], "class_names": ["VirtualboxProviderTest", "XpcomConversionTests", "XPCOM", "BaseVirtualboxTests", "CreationDestructionVirtualboxTests", "CloneVirtualboxTests", "BootVirtualboxTests", "VirtualboxProviderHeavyTests"], "class_method_calls": ["self.assertDictEqual", "self.test_cloud_create", "machine.get", "self.assertMachineDoesNotExist", "log.debug", "expected_extras.keys", "self.run_cloud_function", "log.info", "os.path", "machine.keys", "output.get", "expected_extra_dict.keys", "log.warning", "self.assertIn", "self.assertIsIpAddress", "logging.getLogger", "self.assertCountEqual", "profiles.get", "self.assertEqual", "self.run_cloud_destroy", "pytest.mark", "socket.AF_INET6", "self.assertIsNotNone", "attributes.items", "machines.items", "res.get", "socket.inet_pton", "self.fail", "self.assertGreater", "XpcomConversionTests._mock_xpcom_object", "self.assertMachineExists", "self.vbox", "machines.keys", "self.assertGreaterEqual", "socket.inet_aton", "self.run_cloud_action", "expected_dict.keys", "ret.keys", "expected_machine.update", "self.assertTrue", "self.skipTest", "profile.get", "self.run_cloud", "RUNTIME_VARS.FILES", "self.name"]}, "test_vmware.py": {"libraries": ["salt.exceptions.VMwareRuntimeError", "gssapi", "ssl", "tests.support.mock.PropertyMock", "logging", "tests.support.mock.call", "salt.exceptions.VMwareConnectionError", "base64", "salt.exceptions.CommandExecutionError", "tests.support.unit.TestCase", "pyVmomi.vmodl", "tests.support.mock.patch", "salt.exceptions.VMwareObjectRetrievalError", "pyVmomi.vim", "salt.exceptions.VMwareSystemError", "salt.utils.vmware", "tests.support.mock.MagicMock", "salt.exceptions.ArgumentValueError", "salt.exceptions.VMwareApiError", "pytest", "tests.support.mixins.LoaderModuleMockMixin"], "function_names": ["test_userpass_mech_domain_unused", "test_property_obj_filter_specs_and_contents", "test_destroy_vm_raise_runtime_fault", "test_cluster_found", "test_unsupported_parrent", "test_empty_content", "test_entity_name", "test_reconfigure_dvporgroup_task", "test_default_name_parameter", "test_create_datacenter_raise_vim_fault", "test_enable_network_resource_management_raises_vim_fault", "test_info_error_invalid_argument_no_fault_message", "test_create_cluster_call", "test_disconnect_raise_no_permission", "test_filtered_all_dvss", "test_info_state_running_continues_loop", "test_info_state_success", "test_no_items_named_object", "test_retrieve_contents_raise_runtime_fault", "setUp", "test_get_all_pgs", "test_filtered_pgs", "test_third_attempt_unsuccessful_connection_detault_error", "test_add_license_arguments", "test_attempt_unsuccessful_connection_vim_fault", "test_add_license_raises_vim_fault", "test_conversion_bad_input_argument_fault", "test_enable_network_resource_management_raises_runtime_fault", "test_no_license_assignment_manager_passed_in", "test_return", "test_get_new_stub", "test_filter_hostname", "test_get_storage_system_call", "test_gb_conversion_call", "test_create_cluster_raise_vim_fault", "test_register_vm_raise_vim_fault", "test_host_traversal_spec", "test_rename_datastore_raise_no_permission", "test_enable_network_resource_management_raises_no_permission", "test_instance_uuid", "test_inner_loop_task_info_raise_runtime_fault", "test_datastore_not_found", "test_backing_disks_no_mount_info", "test_no_name_in_property_dict", "test_cluster_no_datacenter", "test_uncached_service_instance", "test_destroy_vm_raise_vim_fault", "test_rename_datastore_raise_vim_fault", "test_out_token_undefined", "test_get_all_host_flag_not_set_and_no_host_names", "test_wait_for_tasks", "test_create_dvs_task_raises_vim_fault", "test_inner_loop_task_info_raise_vim_fault", "test_get_mount_info_call", "test_get_no_uplink_pg", "test_sspi_get_token_error", "test_about_ret", "test_datastore_found", "test_create_container_view_raise_runtime_fault", "test_get_all_dvss", "test_new_stub_returned", "test_first_attempt_unsuccsessful_cannot_vim_fault_verify_ssl", "test_reconfigure_compute_resource_task_call", "test_info_error_no_permission", "test_multiple_element_content", "test_create_cluster_raise_runtime_fault", "test_create_datacenter_runtime_fault", "test_get_managed_object_name_call", "test_traversal_spec_init", "test_get_no_dvss", "test_info_error_vim_fault", "test_destroy_task", "test_valid_assignment_manager", "test_retrieve_contents_raise_no_permission", "test_get_uplink_pg", "test_service_instance_instantiation", "test_create_vm_pool_task_call", "test_add_license_raises_runtime_fault", "test_destroy_raise_runtime_fault", "test_create_dvs_task_passed_in_spec", "test_info_error_invalid_argument_with_fault_message", "test_cached_service_instance_different_host", "test_disconnect", "test_kb_conversion_call", "test_reconfigure_dvs_task_raises_vim_fault", "test_disconnect_raise_vim_fault", "test_service_name", "test_first_task_info_raise_no_permission", "test_get_si_datacenter_name_and_cluster_name", "test_register_vm_host_task_call", "test_userpass_mechanism_empty_username", "test_return_managed_object_name", "test_label_settings", "test_datastore_name_call", "test_info_error_exception", "test_traversal_spec_datacenter_parent", "test_update_vm_raise_vim_fault", "test_name_parameter_passed_in", "test_invalid_mechianism", "test_empty_mors_result", "test_wait_for_task_call", "test_first_task_info_raise_vim_fault", "test_defined_container_ref", "test_get_datacenter_return", "test_update_vm_task_call", "test_external_traversal_spec", "test_mb_conversion_call", "test_first_attempt_successful_connection_verify_ssl_false", "test_destroy_raise_no_permission", "test_create_vm_raise_vim_fault", "test_first_attempt_unsuccsessful_connection_default_error", "test_create_vm_host_task_call", "test_traversal_spec_dvs_parent", "test_second_attempt_successful_connection_verify_ssl_false", "test_connected_to_invalid_entity", "test_connected_to_a_vcenter", "test_info_state_queued_continues_loop", "test_instance_uuid_raises_vim_fault", "test_get_mors_with_properties_calls", "test_cached_unauthenticated_service_instance", "test_get_si_datacenter_name_no_cluster_name", "test_empty_license_assignment_manager", "test_userpass_mechanism_empty_password", "test_datastore_successfully_created", "test_get_si_no_datacenter_no_cluster", "test_out_token_defined", "test_get_mors_with_properties_call", "test_local_traversal_spec", "test_rename_datastore_raise_runtime_fault", "test_reconfigure_dvporgroup_task_raises_runtime_fault", "test_api_type_raise_vim_fault", "test_datacenter_traversal_spec", "test_unsupported_reference_type", "test_api_type_raise_runtime_fault", "test_query_assigned_licenses_with_entity", "test_update_vm_raise_runtime_fault", "test_valid_assignments", "test_no_dvs_create_spec", "test_get_network_folder", "test_get_reference_name_call", "test_create_datacenter_raise_no_permission", "test_root_folder_traversal_spec", "test_get_root_folder", "test_instance_uuid_raises_runtime_fault", "test_no_hostname_argument", "test_get_mors_with_properties", "test_create_vm_wait_for_task", "test_get_datacenters_call", "test_about_raises_no_permission", "test_get_no_network_folder", "test_add_license_raises_no_permission", "test_ssl_default_context_loaded", "test_enable_network_resource_management", "test_host_get_all_hosts", "test_get_datastores_filtered_by_both_name_and_backing_disk", "test_sspi_get_token_success_", "test_unregister_vm_task_call", "test_empty_container_ref", "test_valid_mors_result", "test_connected_to_a_host", "test_cluster_traversal_spec", "test_get_all_datastores", "test_rename_datastore", "test_one_elem_one_property", "test_no_cached_service_instance_same_host_on_proxy", "test_about_raises_runtime_fault", "test_info_state_running", "test_create_vm_raise_runtime_fault", "test_register_vm_raise_no_permission", "test_session_cookie_in_context", "test_destroy_task_raises_no_permission", "test_instance_uuid_raises_no_permission", "test_get_no_datastores", "test_one_elem_multiple_properties", "test_inner_loop_task_info_raise_no_permission", "test_si_return_and_stub_assignment", "test_reconfigure_dvs_task_raises_runtime_fault", "test_update_vm_wait_for_task", "test_update_assigned_licenses_raises_vim_fault", "test_second_attempt_unsuccessful_connection_vim_fault", "test_sspi_empty_domain", "test_current_time_raise_no_permission", "test_api_type_raise_no_permission", "test_license_assignment_manager_passed_in", "test_query_assigned_licenses_raises_no_permission", "test_one_host_returned", "test_no_license_manager_passed_in", "test_default_params", "test_query_assigned_licenses_vcenter", "test_managed_object_no_name_property", "test_update_assigned_licenses_call_with_entity", "test_destroy_raise_vim_fault", "test_filter_cluster", "test_current_time_raise_runtime_fault", "test_register_vm_raise_runtime_fault", "test_register_vm_pool_task_call", "test_destroy_treconfigure_dvporgroup_task_raises_runtime_fault", "test_destroy_vm_wait_for_task", "setup_loader_modules", "test_get_properties_of_managed_object_call", "test_reconfigure_compute_resource_raise_no_permission", "test_update_assigned_licenses_raises_runtime_fault", "test_reconfigure_compute_resource_raise_runtime_fault", "test_about_raises_vim_fault", "test_no_parameters", "test_disconnect_raise_runtime_fault", "test_reconfigure_compute_resource_raise_vim_fault", "test_license_manager_passed_in", "test_create_datacenter_call", "test_get_datastores_filtered_by_name", "test_update_assigned_licenses_raises_no_permission", "test_no_datacenters_returned", "test_get_no_pgs", "test_create_container_view_raise_vim_fault", "test_retrieve_contents_raise_vim_fault", "test_info_error_system_fault", "test_wrong_vcenter_name", "test_reconfigure_dvporgroup_task_raises_no_permission", "test_destroy_treconfigure_dvporgroup_task_raises_vim_fault", "test_create_vm_raise_no_permission", "test_get_service_instance_from_managed_object", "test_sspi_empty_principal", "test_register_vm_wait_for_task", "test_no_gssapi", "test_no_hosts", "tearDown", "test_get_mors_with_properties_returns_empty_array", "test_reconfigure_dvporgroup_task_raises_vim_fault", "test_create_dvporgroup_task_raises_no_permission", "test_cluster_not_found", "test_first_task_info_raise_runtime_fault", "test_create_dvporgroup_task_raises_runtime_fault", "test_valid_licenses", "test_update_assigned_licenses_vcenter", "test_create_dvs_task_raises_no_permission", "test_one_element_content", "test_raise_vim_fault", "test_attempt_unsuccessful_connection_default_error", "test_first_attempt_successful_connection", "test_create_dvporgroup_task", "test_hostname_argument", "test_query_assigned_licenses_raises_vim_fault", "test_unregister_vm_raise_vim_fault", "test_query_assigned_licenses_raises_runtime_fault", "test_get_service_instance_from_managed_object_call", "test_get_managed_object_name", "test_create_dvporgroup_task_raises_vim_fault", "test_current_time_raise_vim_fault", "test_local_properties_set", "test_get_datastores_filtered_by_backing_disk", "test_reconfigure_dvs_task", "test_userpass_mechanism_no_domain", "test_context_extablished", "test_unregister_vm_raise_runtime_fault", "test_raise_runtime_fault", "test_reconfigure_dvs_task_raises_no_permission", "test_create_cluster_raise_no_permission", "test_vcenter_entity_too_many_assignements", "test_raise_no_permission", "test_create_dvs_task_raises_runtime_fault", "test_create_container_view_raise_no_permission", "test_traversal_spec", "test_valid_license_added", "test_destroy_vm_task_call", "test_unauthenticated_service_instance"], "function_calls": ["type", "MagicMock", "patch", "delattr", "Exception", "PropertyMock", "str", "call", "int", "len"], "class_names": ["GetDatacenterTestCase", "FakeTaskClass", "CreateVirtualMachineTestCase", "GetMorsWithPropertiesTestCase", "GetLicenseManagerTestCase", "GetRootFolderTestCase", "GetStorageSystemTestCase", "CreateDatacenterTestCase", "GetPropertiesOfManagedObjectTestCase", "RenameDatastoreTestCase", "PrivateGetServiceInstanceTestCase", "GetAssignedLicensesTestCase", "CreateClusterTestCase", "GetNewServiceInstanceStub", "GetClusterTestCase", "GetServiceInfoTestCase", "DisconnectTestCase", "GetLicenseAssignmentManagerTestCase", "GetManagedObjectName", "GetHostsTestCase", "GetDvportgroupsTestCase", "GetDatastoresTestCase", "GetDatacentersTestCase", "AddLicenseTestCase", "AssignLicenseTestCase", "ConvertToKbTestCase", "GetContentTestCase", "IsConnectionToAVCenterTestCase", "DeleteVirtualMachineTestCase", "CreateDvsTestCase", "UpdateClusterTestCase", "UpdateVirtualMachineTestCase", "GetUplinkDvportgroupTestCase", "GetNetworkFolderTestCase", "UpdateDvportgroupTestCase", "GetDvssTestCase", "GssapiTokenTest", "RegisterVirtualMachineTestCase", "FakeClass", "UnregisterVirtualMachineTestCase", "GetServiceInstanceTestCase", "WaitForTaskTestCase", "SetDvsNetworkResourceManagementEnabledTestCase", "UpdateDvsTestCase", "GetLicensesTestCase", "CreateDvportgroupTestCase", "GetServiceInstanceFromManagedObjectTestCase", "RemoveDvportgroupTestCase"], "class_method_calls": ["self.container_ref", "prop_set_obj1_name_prop.call_count", "self.mock_vm_create_task", "obj2_propSet_prop.call_count", "mock_ssl_unverif.assert_called_once_with", "self.assertIn", "logging.getLogger", "self.traversal_spec_method_name", "self.mock_create_datacenter", "self.mock_get_mors", "self.mock_prop_hosts", "vmodl.query", "self.assertFalse", "mock_disconnect.call_count", "propSet_prop.call_count", "mock_get_properties_of_managed_object.assert_called_once_with", "self.obj_type_mock", "self.mock_folder_object", "self.datacenter", "mock_trace.assert_called_once_with", "vim.DistributedVirtualSwitch", "self.addCleanup", "mock_si.CurrentTime", "self.mock_host_ref", "self.mock_items", "mock_get_instance_from_managed_object.assert_called_once_with", "mock_sc.call_count", "self.mock_dvs_create_spec", "mock_traversal_spec.assert_has_calls", "self.result_mock", "vim.VimFault", "self.filter_spec_mock", "mock_sc.assert_called_once_with", "obj2_obj_prop.call_count", "mock_name.assert_called_once_with", "mock_licenses.call_count", "mock_getstub.call_count", "self.mock_add_license", "exc.msg", "self.mock_mount_infos", "self.mock_dvs_spec", "exception.msg", "self.si", "self.context_dict", "prop_set_obj1_val_prop.call_count", "mock_traversal_spec_init.assert_has_calls", "vim.HostVmfsVolume", "mock_task.info", "self.mock_update_assigned_license", "mock_get_license_manager.call_count", "prop_set_obj_name_prop.call_count", "self.mock_dc2", "self.retrieve_contents_mock", "self.mock_reference", "vmodl.RuntimeFault", "obj1_obj_prop.call_count", "prop_set_obj_val_prop.call_count", "prop_set_obj2_name_prop.call_count", "vim.ManagedEntity", "ret._stub", "mock_get_license_manager.assert_called_once_with", "self.assertEqual", "excinfo.exception", "self.mock_host_object", "pytest.mark", "self.mock_ret", "self.mock_props", "obj_prop.call_count", "self.mock_prop_host2", "self.filter_spec_method_name", "self.mock_cluster", "mock_config_spec.name", "ssl.PROTOCOL_TLSv1", "mock_ssl_context.return_value", "mock_get_mors_with_properties.assert_called_once_with", "self.destroy_mock", "self.mock_vm_ref", "self.mock_mo_ref", "mock_vmware_dvs_config_spec.assert_called_once_with", "vim.ClusterComputeResource", "self.mock_resourcepool_object", "mock_sc.reset_mock", "mock_disconnect.assert_called_once_with", "mock_get_mors_with_properties.assert_has_calls", "self.mock_about", "self.mock_ent_id", "self.mock_enabled", "self.property_spec_ret_mock", "self.si_mock", "self.traversal_spec_mock", "mock_get_license_assign_manager.call_count", "self.mock_licenses", "prop_mock_result.call_count", "mock_get_si.call_count", "self.mock_task", "self.mock_assignments", "self.assertDictEqual", "self.mock_prop_host3", "get_content.assert_called_once_with", "vim.DistributedVirtualPortgroup", "self.assertRaises", "self.mock_dc1", "self.mock_netw_folder", "self.mock_wait_for_task", "self.property_spec_mock", "self.mock_lic_assign_mgr", "self.mock_label", "mock_get_mors.assert_called_once_with", "patcher.stop", "self.traversal_spec", "self.mock_pg_spec", "self.mock_vm_unregister", "self.mock_item_name", "self.mock_dvs_ref", "self.mock_entity_ref", "patch.object", "self.mock_stub", "vmodl.fault", "self.mock_host1", "gssapi.C_NT_USER_NAME", "self.mock_storage_system", "self.mock_vm_register_task", "self.get_root_folder_mock", "self.mock_ds_ref", "self.assertIsNone", "self.mock_dc", "self.mock_create_cluster_ex", "vim.Datastore", "self.mock_vm_destroy_task", "self.mock_pg_ref", "mock_get_cl_name.call_count", "mock_ssl_context.assert_called_once_with", "self.obj_spec_mock", "self.filter_spec_ret_mock", "self.mock_prop_host1", "mock_spec.configSpec", "mock_traversal_spec_ini.assert_has_calls", "mock_ssl.assert_called_once_with", "self.mock_traversal_spec", "self.mock_root_folder", "mock_get_root_folder.assert_called_once_with", "self.mock_item", "prop_set_obj2_val_prop.call_count", "mock_get_si.assert_called_once_with", "self.mock_new_stub", "vim.view", "mock_service_instance_ini.assert_called_once_with", "vim.HostStorageSystem", "mock_traversal_spec_init.assert_called_once_with", "self.obj_spec_ret_mock", "self.mock_create_default_context", "self.mock_license", "self.mock_si", "self.create_container_view_mock", "mock_get_dc.assert_called_once_with", "self.container_view_mock", "self.prop_mock_moid", "self.mock_cluster_spec", "self.obj_spec_method_name", "self.mock_query_assigned_licenses", "vim.Folder", "self.mock_moid", "mock_get_managed_object_name.assert_called_once_with", "mock_context.step", "mock_traversal_spec.assert_called_once_with", "fault_message.message", "mock_dvs_create_spec.assert_called_once_with", "mock_get_network_folder.assert_called_once_with", "mock_si_current_time.call_count", "mock_get_license_assign_manager.assert_called_once_with", "prop_mock_state.call_count", "self.mock_cluster1", "self.mock_reconfigure_compute_resource_task", "self.vm_name", "mock_get_new_stub.assert_called_once_with", "self.mock_vm_update_task", "self.mock_host3", "self.mock_get_managed_object_name", "exc.privilegeId", "self.fake_mo_ref", "vim.HostSystem", "mock_get_datacenters.assert_called_once_with", "self.mock_context", "self.mock_host2", "self.property_spec_method_name", "self.traversal_spec_ret_mock", "self.mock_config_spec", "self.prop_list", "self.mock_lic_mgr", "self.mock_lic_key", "self.mock_vmx_path", "mock_token.assert_called_once_with", "patcher.start", "self.root_folder_mock", "mock_wait_for_task.assert_called_once_with", "self.obj_type", "self.mock_obj", "salt.utils", "mock_sc.assert_has_calls", "obj1_propSet_prop.call_count", "self.mock_get_storage_system", "self.mock_content", "base64.b64encode", "mock_ssl.return_value", "self.vm_folder_object", "self.mock_dc_ref", "vim.fault", "mock_get_service_instance_from_managed_object.assert_called_once_with", "exc.exception", "mock_context.return_value", "exc.faultMessage", "vim.LocalizableMessage", "self.mock_cluster2", "self.assertTrue", "mock_context.established", "vim.Datacenter", "self.mock_entries", "mock_si.content", "mock_instance_uuid_prop.call_count", "mock_ssl_unverif.return_value"]}, "test_vultrpy.py": {"libraries": ["salt.cloud.clouds.vultrpy", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["test_create_firewall_doesnotexist", "configure_loader_modules", "test_show_keypair", "test_create_ssh_key_ids_doesnotexist", "test_create_firewall_ssh", "test_show_keypair_no_keyname"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["logging.INFO", "mock_query.call_args", "caplog.at_level", "caplog.text", "pytest.fixture", "vultr.show_keypair", "vultr.create"]}, "cloud_test_base.py": {"libraries": ["os", "tests.support.paths.FILES", "salt.utils.yaml.safe_load", "salt.utils.files", "time.sleep", "tests.support.runtests.RUNTIME_VARS", "salt.config.cloud_config", "pytest", "logging", "tests.support.case.ShellCase", "saltfactories.utils.random_string", "salt.config.cloud_providers_config", "shutil"], "function_names": ["tearDown", "clean_cloud_dir", "providers", "profile_str", "assertDestroyInstance", "setUp", "query_instances", "_ensure_deletion", "setUpClass", "add_profile_config", "tearDownClass", "config", "provider_config", "_alt_names", "assertInstanceExists", "_instance_exists", "instance_name"], "function_calls": ["any", "hasattr", "sleep", "cloud_config", "range", "super", "cloud_providers_config", "tuple", "str", "random_string", "set", "isinstance", "safe_load"], "class_names": ["CloudTest"], "class_method_calls": ["log.error", "self._instance_name", "self.providers", "self._alt_names", "self.assertDestroyInstance", "log.debug", "instances.add", "os.listdir", "shutil.copyfile", "delete_status.get", "os.path", "self.profile_str", "self.assertIn", "self.REQUIRED_PROVIDER_CONFIG_ITEMS", "logging.getLogger", "self.PROVIDER", "self.assertEqual", "self._ensure_deletion", "pytest.mark", "cls.tmp_provider_dir", "self.query_instances", "q.strip", "self.assertFalse", "self._instance_exists", "i.strip", "x.lstrip", "self.fail", "current_state.get", "self._provider_config", "q.startswith", "self.__RE_TRIES", "self._providers", "self.__RE_RUN_DELAY", "fail_messages.append", "salt.utils", "self.provider_config", "cls.PROVIDER", "missing_conf_item.append", "x.strip", "RUNTIME_VARS.TMP_CONF_DIR", "self._config", "self.assertNotIn", "self.instance_name", "q.split", "os.remove", "self.assertTrue", "cls.clean_cloud_dir", "self.skipTest", "self.run_cloud", "self.__class__"]}, "test_cloud.py": {"libraries": ["os", "string", "pkg_resources", "keyring.backend", "tests.support.mock.patch", "smbprotocol.exceptions.CannotDelete", "tests.support.mock.MagicMock", "pytest", "winrm", "keyring", "salt.utils.cloud.__ssh_gateway_arguments", "tempfile", "salt.exceptions.SaltCloudException", "salt.utils.cloud"], "function_names": ["test_ssh_gateway_arguments_alive_args", "test_wait_for_port_default_alive_args", "delete_password", "test_sftp_file_with_content_under_python3", "test_run_psexec_command_cleanup_lingering_paexec", "test___ssh_gateway_config_dict", "test_deploy_windows_custom_port", "test__format_master_param", "test_check_name", "test_ip_to_int", "test_ssh_password_regex", "test_scp_file_default_alive_args", "get_password", "test_is_public_ip", "test__strip_cache_events", "create_class", "test_deploy_windows_programdata_master_sign_pub_file", "test_salt_cloud_force_asciii", "test_deploy_windows_programdata_minion_conf", "test_deploy_windows_default_port", "test_deploy_windows_programdata_minion_pub", "test_deploy_windows_programdata", "test_check_key_path_and_mode", "test_sftp_file_default_alive_args", "test_deploy_windows_programdata_minion_pem", "test_ssh_gateway_arguments_default_alive_args", "configure_loader_modules", "test_scp_file_alive_args", "test_wait_for_port_alive_args", "supported", "test_deploy_windows_programdata_minion_conf_grains", "test__save_password_in_keyring", "set_password", "test_sftp_file_alive_args", "test__unwrap_dict", "test_deploy_script_ssh_timeout", "test_userdata_template", "test_deploy_windows_master", "__init__", "test_retrieve_password_from_keyring", "test_winrm_pinnned_version", "test_get_salt_interface"], "function_calls": ["MagicMock", "CannotDelete", "patch", "CustomKeyring", "str", "ssh_gateway_arguments"], "class_names": ["CustomKeyring"], "class_method_calls": ["keyring.delete_password", "self.__storage", "mock_smb.delete_directory", "pattern.strip", "pytest.fixture", "caplog.text", "cloud._salt_cloud_force_ascii", "pkg_resources.get_distribution", "cloud.sftp_file", "cloud.scp_file", "patch.object", "exec_ssh_cmd.call_args", "cloud._save_password_in_keyring", "cloud._format_master_param", "root_cmd.call_count", "pattern.lower", "f.name", "mock_smb.delete_file", "root_cmd.call_args", "cloud.run_psexec_command", "tempfile.NamedTemporaryFile", "pytest.mark", "pytest.raises", "cloud.deploy_windows", "os.getcwd", "cloud.check_name", "exec_ssh_cmd.call_count", "cloud.get_salt_interface", "keyring.set_password", "cloud.wait_for_port", "cloud.is_public_ip", "cloud._strip_cache_events", "pytest.skip", "keyring.set_keyring", "os.chdir", "cloud.check_key_path_and_mode", "cloud.__ssh_gateway_config_dict", "context.exception", "mock_smb.put_file", "gpg_keydir.mkdir", "mock_smb.mkdirs", "cloud.userdata_template", "cloud._unwrap_dict", "mock_client.return_value", "mock.assert_called_once_with", "mock.call_args_list", "pytest.importorskip", "keyring.get_password", "cloud.deploy_script", "mock_smb.get_conn", "cloud_config.call_count", "cloud.SSH_PASSWORD_PROMP_RE", "cloud.ip_to_int", "string.digits", "winrm_pkg.version", "keyring.backend", "mock_smb.put_str", "string.ascii_letters", "os.chmod", "cloud.retrieve_password_from_keyring"]}, "test_venafiapi.py": {"libraries": ["cryptography.x509.oid.NameOID", "string", "random", "cryptography.x509", "cryptography.hazmat.primitives.serialization", "cryptography.hazmat.backends.default_backend", "functools", "pytest", "tests.support.case.ShellCase", "tempfile"], "function_names": ["wrapper", "with_random_name", "test_request", "_random_name", "test_sign"], "function_calls": ["range", "_random_name", "func", "isinstance", "default_backend"], "class_names": ["VenafiTest"], "class_method_calls": ["random.choice", "f.write", "pkey_output.encode", "x509.Certificate", "NameOID.COMMON_NAME", "f.name", "tempfile.NamedTemporaryFile", "pytest.mark", "x509.NameAttribute", "serialization.PublicFormat", "x509.load_pem_x509_certificate", "string.ascii_lowercase", "f.flush", "pkey.public_key", "serialization.load_pem_private_key", "cert_output.encode", "functools.wraps", "cert.public_key", "cert.subject", "serialization.Encoding", "self.run_run_plus"]}, "ext_pillar_opts.py": {"libraries": ["logging"], "function_names": ["ext_pillar", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug"]}, "master_tops_test.py": {"libraries": ["logging"], "function_names": ["top", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "log.info"]}, "arg.py": {"libraries": [], "function_names": ["execute", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "custom_grain2.py": {"libraries": [], "function_names": ["myfunction"], "function_calls": [], "class_names": [], "class_method_calls": []}, "custom_grains.py": {"libraries": [], "function_names": ["test"], "function_calls": [], "class_names": [], "class_method_calls": []}, "matcher_grain.py": {"libraries": [], "function_names": ["myfunction"], "function_calls": [], "class_names": [], "class_method_calls": []}, "depends_versioned.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "depends_versionless.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "override_test.py": {"libraries": [], "function_names": ["recho", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "runtests_decorators.py": {"libraries": ["salt.utils.decorators", "os", "time", "pathlib", "logging"], "function_names": ["booldependsTrue", "_exit_code", "command_success_nonzero_retcode_true", "command_failure_retcode", "working_function", "version_depends_true", "depends_will_not_fallback", "command_success_nonzero_retcode_false", "version_depends_versionless_true", "missing_depends_will_fallback", "command_failure_nonzero_retcode_true", "depends", "missing_depends", "command_success_retcode", "_fallbackfunc", "version_depends_false", "command_failure_nonzero_retcode_false", "booldependsFalse"], "function_calls": ["_exit_code"], "class_names": [], "class_method_calls": ["logging.getLogger", "os.environ", "pathlib.Path", "time.time", "salt.utils", "os.name"]}, "runtests_helpers.py": {"libraries": [], "function_names": ["success", "failure"], "function_calls": [], "class_names": [], "class_method_calls": []}, "salttest.py": {"libraries": [], "function_names": ["hello"], "function_calls": [], "class_names": [], "class_method_calls": []}, "bootstrap.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "noop_returner.py": {"libraries": ["salt.utils.jid", "logging"], "function_names": ["event_return", "returner", "prep_jid", "__virtual__"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "log.debug", "salt.utils"]}, "test_core.py": {"libraries": ["platform", "salt.utils.files", "logging", "tempfile", "salt.utils.path", "salt._compat.ipaddress", "salt.grains.core", "tests.support.mock.mock_open", "pathlib", "uuid", "salt.utils.network", "tests.support.mock.patch", "collections.namedtuple", "sys", "salt.modules.cmdmod", "os", "salt.utils.dns", "textwrap", "salt.modules.smbios", "salt.loader", "tests.support.mock.MagicMock", "errno", "salt.modules.network", "socket", "salt.utils.platform", "pytest", "locale", "tests.support.mock.Mock"], "function_names": ["test__systemd", "test__windows_virtual", "test_get_machine_id", "test_unicode_error", "test_osdata_virtual_key_win", "test_enable_fqdns_none", "test_enable_fqdns_false_is_aix", "test_virtual_linux_proc_files_with_non_utf8_chars", "test__clean_value_uuid", "_cmd_side_effect_kilobyte", "_gen_gethostbyaddr", "test_zmqversion", "test_almalinux_8_os_grains", "test_debian_10_os_grains", "_cmd_side_effect", "test_get_server_id", "test_parse_cpe_name_wfn", "test__selinux", "test_pop_focal_os_grains", "test_network_grains_cache", "test__windows_os_release_grain", "test_suse_os_grains_sles12sp1", "test__parse_lsb_release", "_open_mock", "_raise_fnfe", "_which_side_effect", "test_gnu_slash_linux_in_os_name", "test_hwaddr_interfaces", "test_osmc_os_grains", "test__bsd_cpudata_netbsd", "_run_suse_os_grains_tests", "test_Parrot_OS_grains", "test_saltpath", "test_enable_fqdns_false_is_proxy", "_cmd_side_effect_megabyte", "_run_os_grains_tests", "test_fqdn6_empty", "test_enable_fqdns_false_is_junos", "test__bsd_cpudata_openbsd", "test_fqdn_proxy_return_empty", "test__linux_lsb_distrib_data", "ipv4_tuple", "_check_ipaddress", "test_locale_info_tzname", "test_suse_os_grains_sles12", "test_append_domain", "test_bsd_memdata", "test_linux_mint_una_os_grains", "test_container_inside_virtual_machine", "test_fqdn4_empty", "_cmd_all_side_effect", "read", "test_parse_cpe_name_v23", "test__bsd_memdata", "test_ubuntu_impish_os_grains", "test_locale_info_no_tz_tzname", "_fopen", "test_kernelparams_return_linux_non_utf8", "test_rocky_8_os_grains", "test_suse_os_grains_opensuse_leap_42_1", "test_osx_memdata_with_comma", "test_solaris_sparc_s7zone", "test_locale_info_proxy_empty", "_check_solaris_sparc_productname_grains", "test_parse_etc_os_release", "test_kernelparams_file_not_found_error", "test_pythonexecutable", "_import_mock", "test_illumos_virtual", "test_lxc_virtual", "test_pythonpath", "test_ibm_power_virtual", "test_debian_12_os_grains", "test__linux_init_system", "test_enable_fqdns_false_is_sunos", "test_cwd_exists", "test__linux_bin_exists", "__exit__", "test_missing_os_release", "_check_empty", "test_get_master", "test_solaris_sparc_t5220zone", "test_astralinuxce_os_grains", "configure_loader_modules", "test__bsd_cpudata_darwin", "test_solaris_sparc_t5220", "test_kernelparams_return_linux", "test_centos_8_os_grains", "test_mendel_os_grains", "test_locale_getlocale_exception", "test_saltversioninfo", "test_core_virtual_invalid", "os_release_dir", "_check_ip_fqdn_set", "test_illumos_fallback_virtual", "test_centos_stream_8_os_grains", "test_suse_os_grains_sles11sp4", "test_enable_fqdns_true", "test_lxc_virtual_with_virt_what", "solaris_dir", "test_docker_virtual", "test_parse_cpe_name_broken", "test__windows_platform_data", "test_suse_os_from_cpe_data", "test_windows_virtual_set_virtual_grain", "_mock_is_file", "path_side_effect", "test_alinux2_os_grains", "_cmd_side_effect_gigabyte", "test_astralinuxse_os_grains", "test__clean_value_multiple_values", "_mock_open", "test__hw_data_linux_unicode_error", "test_virtual_set_virtual_ec2", "test_id", "test_kernelparams_return_windows", "test_suse_os_grains_sles11sp3", "test_if_virtual_subtype_exists_virtual_should_fallback_to_virtual", "test_windows_platform_data", "test_network_grains_secondary_ip", "test_fqdns_socket_error", "test_linux_gpus", "test__osx_gpudata", "test__ps", "test_suse_os_grains_tumbleweed", "test_windows_virtual_has_virtual_grain", "mockstat", "ipv6_tuple", "test_hostname", "test_enable_fqdns_false", "test_linux_cpu_data", "test_virtual_has_virtual_grain", "__enter__", "test_locale_info_unicode_error_tzname", "test_linux_devicetree_data", "test_fqdns_return", "_check_type", "test__netbsd_gpu_data", "_gethostbyaddr", "test_endeavouros_os_grains", "test_dns_return", "test_core_virtual_unicode", "test_fqdn_return", "test_pythonversion", "test_solaris_sparc_s7", "test_cwd_is_cwd", "_getaddrinfo", "test_xen_virtual", "test_path", "_is_file_mock", "test_debian_11_os_grains", "test_virtual_set_virtual_grain", "test_kernelparams_oserror", "test__hw_data_linux_empty", "test_linux_memdata", "test_saltversion", "test_pop_impish_os_grains", "test__osx_platform_data", "test_default_gateway", "test_debian_9_os_grains", "test_bsd_osfullname", "test_core_virtual", "_isdir_side_effect", "test_osx_memdata", "_run_fqdn_tests", "test_linux_proc_files_with_non_utf8_chars", "test_ubuntu_focal_os_grains", "test_fqdn_all_empty", "test_enable_fqdns_without_patching", "test_linux_cpudata_ppc64le", "test__parse_junos_showver", "test__bsd_cpudata_freebsd"], "function_calls": ["MagicMock", "range", "Mock", "_check_solaris_sparc_productname_grains", "_check_type", "_gen_gethostbyaddr", "mock_open", "set", "patch", "OSError", "Exception", "str", "_check_empty", "len", "sorted", "all", "_raise_fnfe", "isinstance", "_run_suse_os_grains_tests", "FileNotFoundError", "UnicodeDecodeError", "_salt_utils_files_fopen", "_run_os_grains_tests", "namedtuple", "nt_uname", "orig_import", "ValueError", "_check_ipaddress", "IndexError", "_run_fqdn_tests", "ImportError", "_check_ip_fqdn_set", "getattr", "_File"], "class_names": ["_File"], "class_method_calls": ["core._linux_bin_exists", "core._bsd_memdata", "core._DATEUTIL_TZ", "interfaces.call_count", "sparc_return_data.readlines", "lsb_release_mock.get_distro_information", "environ_fh.close", "logging.WARN", "is_windows.assert_not_called", "core.pythonexecutable", "logging.getLogger", "environ_fh.write", "socket.AF_INET6", "pytest.raises", "cpuinfo_list.append", "core._linux_cpudata", "socket.AF_INET", "core.saltversioninfo", "core.get_master", "cmdline_fh.close", "core.cwd", "is_windows.assert_called_once_with", "sys.path", "core.pythonversion", "cmdline_fh.write", "core._virtual", "core._linux_gpu_data", "core.socket", "core.dns", "core._bsd_cpudata", "caplog.at_level", "core._parse_os_release", "versions.items", "core.os_data", "core._windows_os_release_grain", "sys.version_info", "platform.uname", "m.__enter__", "embedded_versions.items", "ipaddress.IPv4Address", "caplog.messages", "core.HOST_NOT_FOUND", "subtests.test", "core._parse_cpe_name", "fopen_mock.side_effect", "os_release_map.get", "pytest.mark", "core.kernelparams", "now.assert_called_once_with", "core.hostname", "core._clean_value", "core.__salt__", "key.endswith", "pathlib.Path", "os_grains.get", "core._selinux", "ret.strip", "core.NO_DATA", "core._linux_lsb_distrib_data", "caplog.set_level", "sys.executable", "now_ret_object.method_calls", "ipaddress.IPv6Address", "core.default_gateway", "core._linux_init_system", "tzname.assert_not_called", "salt.modules", "core._parse_lsb_release", "logging.TRACE", "cpe_ret.items", "logging.DEBUG", "core._osx_gpudata", "core.ip6_interfaces", "_path_isfile_map.get", "core._ps", "memdata.get", "core.path", "is_proxy.assert_called_once_with", "mock_os_stat.side_effect", "core._netbsd_gpu_data", "core.get_machine_id", "patch.object", "core.id_", "core.saltversion", "mock_fopen.side_effect", "core.ip_fqdn", "core.get_server_id", "core.ip_interfaces", "mock_log.error", "core.locale_info", "datetime.method_calls", "os.chdir", "core._linux_devicetree_platform_data", "textwrap.dedent", "errno.ENOENT", "core._systemd", "core.saltpath", "mock_log.debug", "salt.exceptions", "core.zmqversion", "osdata.copy", "core.dateutil", "core._memdata", "core._hw_data", "core._parse_junos_showver", "core._osx_memdata", "core._windows_virtual", "core.fqdns", "core.append_domain", "herror.errno", "socket.herror", "log.debug", "now.assert_not_called", "core.ip4_interfaces", "pytest.fixture", "caplog.text", "core._windows_platform_data", "core.hwaddr_interfaces", "os.path", "core._linux_memdata", "grains.get", "datetime_module.method_calls", "mock_uuid.side_effect", "test_input.get", "os_release_file.readlines", "tzlocal.assert_called_once_with", "os.getcwd", "logging.WARNING", "tzname.assert_called_once_with", "decode.assert_called_once_with", "os_grains.items", "core._osx_platform_data", "core.pythonpath", "salt.loader", "core.__opts__", "salt.utils", "patch.dict", "core.salt", "tempfile.TemporaryDirectory", "os.environ", "key.startswith", "patch.multiple"]}, "test_custom.py": {"libraries": ["tests.support.case.ModuleCase", "pytest"], "function_names": ["test_grains_passed_to_custom_grain"], "function_calls": [], "class_names": ["TestGrainsCore"], "class_method_calls": ["self.assertEqual", "self.run_function", "pytest.mark"]}, "test_ext_grains.py": {"libraries": ["tests.support.case.ModuleCase", "os", "time", "salt.loader", "tests.support.runtests.RUNTIME_VARS", "salt.config", "pytest"], "function_names": ["test_grains_overwrite", "setUp", "test_grains_merge"], "function_calls": [], "class_names": ["LoaderGrainsTest", "LoaderGrainsMergeTest"], "class_method_calls": ["RUNTIME_VARS.RUNTIME_CONFIGS", "self.assertEqual", "self.opts", "salt.loader", "self.run_function", "pytest.mark", "time.sleep", "self.assertTrue", "salt.config", "os.path", "self.fail", "self.assertIn"]}, "test_ext_modules.py": {"libraries": ["tests.support.case.ModuleCase", "os", "time", "tests.support.runtests.RUNTIME_VARS", "pytest"], "function_names": ["test_overridden_internal", "setUp"], "function_calls": [], "class_names": ["LoaderOverridesTest"], "class_method_calls": ["RUNTIME_VARS.TMP", "self.assertEqual", "self.assertNotIn", "self.run_function", "pytest.mark", "time.sleep", "os.path", "self.assertIn"]}, "test_event_return.py": {"libraries": ["salt.utils.event", "salt.utils.stringutils", "pytestshellutils.utils.processes.terminate_process", "pytest"], "function_names": ["test_filter_denied", "test_event_return", "test_filter_no_allow_or_deny", "test_filter_allowed_but_denied", "test_filter_not_denied", "test_filter_not_allowed", "test_filter_allowed", "test_filter_cluster_peer"], "function_calls": ["str", "terminate_process"], "class_names": [], "class_method_calls": ["evt.pid", "evt.start", "pytest.mark", "pytest.fail", "salt.utils"]}, "test_executor.py": {"libraries": ["tests.support.case.ModuleCase", "tests.support.case.ShellCase", "pytest", "logging"], "function_names": ["test_executor", "test_executor_with_multijob", "setup"], "function_calls": [], "class_names": ["ExecutorTest"], "class_method_calls": ["logging.getLogger", "self.run_call", "self.run_function", "pytest.mark", "self.run_salt", "self.assertIn"]}, "test_minion_cache.py": {"libraries": ["tests.support.case.ModuleCase", "os", "salt.utils.files.fopen", "salt.loader", "salt.minion", "tests.support.helpers.with_tempdir", "salt.utils.yaml", "tests.support.mock.patch"], "function_names": ["test_minion_cache_should_cache_files"], "function_calls": ["patch", "with_tempdir", "fopen"], "class_names": ["BasePillarTest"], "class_method_calls": ["os.listdir", "salt.minion", "self.assertTrue", "salt.utils", "os.path"]}, "test_timeout.py": {"libraries": ["time", "tests.support.unit.TestCase", "salt.utils.timeout.wait_for", "pytest", "logging"], "function_names": ["tearDown", "test_wait_for_too_long", "test_wait_for_custom_kwargs", "test_return_false", "test_wait_for_true", "test_wait_for_self", "test_wait_for_with_big_step", "return_something_after", "return_kwargs_after", "actual", "test_wait_for_custom_args", "return_args_after", "setUp"], "function_calls": ["return_something_after", "return_kwargs_after", "wait_for", "return_args_after"], "class_names": ["WaitForTests"], "class_method_calls": ["self.self_after_1s", "logging.getLogger", "self.assertEqual", "log.debug", "pytest.mark", "time.time", "self.assertTrue", "self.assertFalse", "self.true_after_1s"]}, "test_boto_iam.py": {"libraries": ["tests.support.case.ModuleCase", "pytest", "boto"], "function_names": ["setUp", "test_get_account_id"], "function_calls": [], "class_names": ["BotoIAMTest"], "class_method_calls": ["self.assertRegex", "self.run_function", "pytest.mark", "boto.connect_iam", "self.skipTest", "boto.exception"]}, "test_boto_sns.py": {"libraries": ["salt.states.boto_sns", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["dict", "MagicMock"], "class_names": [], "class_method_calls": ["boto_sns.__opts__", "boto_sns.absent", "ret.update", "pytest.fixture", "boto_sns.__salt__", "boto_sns.present", "patch.dict"]}, "test_chocolatey.py": {"libraries": ["salt.modules.chocolatey", "salt.states.chocolatey", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "list_sources", "test_source_present", "choco_path", "pkgs"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["logging.getLogger", "chocolatey_mod.__salt__", "chocolatey_mod.add_source", "pytest.fixture", "chocolatey.__salt__", "chocolatey.source_present", "patch.dict"]}, "test_cmdmod.py": {"libraries": ["tests.support.mock.MockTimedProc", "getpass", "salt.utils.files", "builtins", "logging", "tempfile", "salt.grains.extra", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "tests.support.mock.mock_open", "tests.support.runtests.RUNTIME_VARS", "tests.support.mock.patch", "sys", "salt.modules.cmdmod", "os", "re", "tests.support.mock.MagicMock", "salt.utils.platform", "salt._logging.LOG_LEVELS", "pytest", "tests.support.mock.Mock"], "function_names": ["test_is_valid_shell_available", "test_run_invalid_cwd_not_dir", "test_run_cwd_doesnt_exist_issue_7154", "test_is_valid_shell_none", "test_shell_properly_handled_on_macOS", "test_run_all_none", "test_run_chroot_mount", "test_cmd_script_saltenv_from_config", "test__log_cmd_list", "test_render_cmd_no_template", "test_run_chroot_runas", "test__log_cmd_str", "test_cve_2021_25284", "__str__", "test_run_with_tuple", "test_os_environment_remains_intact", "test_run_cwd_in_combination_with_runas", "test_run_no_vt_os_error", "test_run_invalid_umask", "test_run_chroot_mount_bind", "test_run_no_vt_io_error", "test_powershell_empty", "test_parse_env_not_env", "test_run_runas_with_windows", "mock_loglevels", "test_cmd_script_saltenv_from_config_windows", "test_run_all_output_loglevel_quiet", "test_runas_env_all_os", "test_render_cmd_unavailable_engine", "test_parse_env_list", "test_render_cmd_saltenv_from_config", "configure_loader_modules", "test_run_shell_file_no_access", "test_run_all_unicode", "test_log_cmd_tuple", "test_is_valid_shell_unavailable", "test_prep_powershell_cmd", "test_check_loglevel_bad_level_not_str", "test_run_all_quiet_does_not_depend_on_salt_dunder", "test_parse_env_dict", "test_runas_env_sudo_group", "clear", "test_run_user_not_available", "mock_proc", "test_run", "test_run_all_binary_replace", "test_log_cmd_non_str_tuple_list", "test_run_zero_umask", "test_run_invalid_cwd_not_abs_path", "test_powershell", "test_is_valid_shell_windows", "test_check_loglevel_quiet", "test_run_all_output_encoding", "__init__", "test_check_loglevel_bad_level", "test_run_shell_is_not_file", "test_run_all_output_loglevel_debug", "test_os_environment_do_not_pass_notify_socket"], "function_calls": ["MagicMock", "cmd", "Mock", "MockTimedProc", "patch", "NameError", "OSError", "IOError", "_CommandHandler", "mock_open"], "class_names": ["_CommandHandler", "cmd"], "class_method_calls": ["mock_cp_cache_file.call_count", "mock_cp_cache_file.assert_called_with", "stdout.encode", "cmdmod.__salt__", "pytest.fixture", "caplog.text", "run_all_mock.assert_called_with", "self.cmd", "mock_umount.call_count", "getpass.getuser", "os.path", "cmdmod.script", "patch.object", "re.search", "sys.platform", "cmdmod.run_chroot", "popen_mock.return_value", "new_env.update", "mock_run.call_count", "stderr_unicode.encode", "pytest.mark", "mock_run.call_args", "mock_mount.call_count", "pytest.raises", "salt.grains", "cmd_handler.cmd", "stderr_bytes.decode", "os.getcwd", "mock_template.call_count", "fp_.read", "RUNTIME_VARS.BASE_FILES", "mock_cp_get_template.call_args", "cmdmod.powershell", "cmdmod.run", "cmdmod._render_cmd", "cmdmod._run", "cmdmod.__grains__", "stdout_unicode.encode", "stdout_bytes.rstrip", "salt_dunder_mock.__getitem__", "popen_mock.call_args_list", "mock_fp.return_value", "cmd_handler.clear", "cmdmod._parse_env", "salt.utils", "patch.dict", "getpwnam_mock.assert_called_with", "cmdmod._log_cmd", "tempfile.gettempdir", "cmdmod._check_loglevel", "env_cmd.extend", "cmdmod.run_all", "os.linesep", "os.environ", "caplog.at_level", "cmdmod._is_valid_shell", "sys.executable", "cmdmod._run_all_quiet", "mock_cp_get_template.call_count", "cmdmod.__opts__", "cmdmod._prep_powershell_cmd", "mock_template.call_args", "logging.DEBUG", "error.value"]}, "test_config.py": {"libraries": ["salt.utils.files", "logging", "tests.support.helpers.patched_environ", "salt.syspaths.CONFIG_DIR", "salt.exceptions.CommandExecutionError", "tests.support.helpers.with_tempdir", "tests.support.unit.TestCase", "tests.support.runtests.RUNTIME_VARS", "salt.utils.network", "tests.support.mock.patch", "salt.exceptions.SaltConfigurationError", "os", "textwrap", "salt.minion", "salt.exceptions.SaltCloudConfigError", "salt.syspaths", "tests.support.mixins.AdaptedConfigurationTestCaseMixin", "tests.support.mock.MagicMock", "tests.support.helpers.with_tempfile", "salt.utils.platform", "salt.config", "pytest", "salt.utils.yaml", "tests.support.mock.Mock"], "function_names": ["test_default_root_dir_included_in_config_root_dir", "test_api_config_pidfile_values", "test_minion_id_remove_domain_bool_true", "_unhandled_mock_read", "test__read_conf_file_integer_id", "test_api_config_log_file_values", "setUp", "test_is_provider_configured_key_is_none", "test_minion_pillar_roots_glob", "test_is_provider_configured_multiple_success", "test_conf_file_strings_are_unicode_for_master", "test_apply_cloud_providers_config_extends_no_provider", "test_backend_rename", "_count_strings", "test_minion_file_roots_glob", "test_proper_path_joining", "test_validate_bad_file_roots", "test_cloud_config_double_master_path", "test_cloud_config_double_profiles_path", "test_master_pillar_roots_glob", "test_apply_cloud_providers_config_extends_bad_provider", "test_conf_cloud_providers_d_files_are_commented", "test_apply_cloud_providers_extends_not_in_providers", "test_conf_cloud_profiles_d_files_are_commented", "test_is_provider_configured_multiple_driver_not_provider", "test_is_provider_configured_success", "test_apply_config", "test_cloud_config_providers_in_opts_path", "test_apply_cloud_providers_config_extend_multiple", "test_validate_bad_pillar_roots", "test_minion_config_role_master", "test_api_config_prepend_root_dirs_return", "test_load_cloud_config_from_environ_var", "test_include_config_with_errors", "test_cloud_config_double_providers_path", "test_load_minion_config_from_environ_var", "test_minion_id_remove_domain_string_negative", "test_minion_id_remove_domain_string_positive", "test_conf_cloud_providers_sample_is_commented", "test_minion_id_remove_domain_bool_false", "test_cloud_config_deploy_scripts_search_path", "test_conf_cloud_sample_is_commented", "test_syndic_config", "test__read_conf_file_empty_dict", "test_load_master_config_from_environ_var", "test_cloud_config_providers_in_opts", "test_apply_cloud_config_no_provider_detail_list", "test_includes_load", "test_sha256_is_default_for_minion", "test_issue_5970_minion_confd_inclusion", "test_deploy_search_path_as_string", "test_master_config_file_overrides_defaults", "test_mminion_config_cache_path", "test_minion_id_function", "test_sha256_is_default_for_master", "test__read_conf_file_invalid_yaml__schedule_conf", "test_conf_file_strings_are_unicode_for_minion", "test_conf_proxy_sample_is_commented", "test_conf_master_sample_is_commented", "test_is_provider_configured_no_alias", "test__read_conf_file_invalid_yaml", "test_apply_vm_profiles_config_extend_success", "test_apply_cloud_providers_config_extends_bad_alias", "test_conf_cloud_maps_d_files_are_commented", "test_apply_cloud_providers_config_same_providers", "test_apply_cloud_config_no_provider_detail_dict", "test_load_client_config_from_environ_var", "test_include_config_with_errors_exit", "_get_defaults", "test_include_config_without_errors", "test_conf_roster_sample_is_commented", "test_common_prefix_stripping", "test_master_file_roots_glob", "test_apply_cloud_config_success_list", "test_apply_vm_profiles_config_extend_override_success", "test_conf_minion_sample_is_commented", "tearDown", "test_minion_id_lowercase", "test_is_provider_configured_multiple_key_is_none", "test_apply_cloud_config_success_dict", "_get_tally", "test_mminion_config_cache_path_overrides", "test_apply_cloud_providers_config_extend", "test_master_confd_inclusion", "test_master_id_function", "_salt_configuration_error", "test_conf_cloud_profiles_sample_is_commented", "test_apply_vm_profiles_config_bad_profile_format", "test_is_provider_configured_no_driver", "test_apply_vm_profiles_config_success", "setUpClass"], "function_calls": ["with_tempdir", "MagicMock", "patched_environ", "Mock", "patch", "dict", "_count_strings", "SaltConfigurationError", "conf_func", "len", "with_tempfile", "CommandExecutionError", "set", "isinstance"], "class_names": ["DefaultConfigsBase", "APIConfigTestCase", "ConfigTestCase", "SampleConfTest"], "class_method_calls": ["self.assertRaises", "RUNTIME_VARS.CODE_DIR", "kwargs.pop", "hello_dir.replace", "config._read_conf_file", "log.debug", "os.listdir", "ret.update", "wfh.write", "self.maxDiff", "os.path", "self._get_tally", "patch.object", "validate_opts_mock.assert_not_called", "self.assertIn", "config.items", "logging.getLogger", "os.sep", "self.assertEqual", "apply_sdb_mock.assert_not_called", "mock_os.assert_not_called", "self.assertNotEqual", "foo_dir.replace", "pytest.mark", "self.assertFalse", "mock_os.assert_called_once_with", "RUNTIME_VARS.TMP_ROOT_DIR", "self.default_api_opts", "mk.called", "os.makedirs", "self.mock_master_default_opts", "fp_.write", "textwrap.dedent", "self.get_config_file_path", "cls.mock_master_default_opts", "self._get_defaults", "salt.syspaths", "salt.utils", "mock_master_config.update", "self.assertNotIn", "self.skipTest", "self.assertTrue", "salt.config", "tally.get"]}, "test_cp.py": {"libraries": ["salt.channel.client", "salt.exceptions.CommandExecutionError", "tests.support.mock.mock_open", "salt.utils.platform", "salt.utils.files", "tests.support.mock.MagicMock", "pytest", "salt.utils.templates", "tests.support.mock.Mock", "tests.support.mock.patch", "salt.modules.cp"], "function_names": ["configure_loader_modules", "test_push_non_absolute_path", "mock_jinja", "test_get_file_str_success", "test__render_filenames_success", "test_get_file_not_found", "test__render_filenames_undefined_template", "test_push", "test_push_dir_non_absolute_path", "test__render_filenames_render_failed"], "function_calls": ["MagicMock", "Mock", "patch", "req_channel_factory_mock", "dict", "len", "mock_open"], "class_names": [], "class_method_calls": ["templates.TEMPLATE_REGISTRY", "fh_.read", "cp.get_file", "cp.push", "cp.push_dir", "patch.multiple", "cp.get_file_str", "pytest.fixture", "cp.os", "pytest.raises", "fh_.tell", "cp._render_filenames", "salt.utils", "patch.dict", "m_open.filehandles"]}, "test_decorators.py": {"libraries": ["salt.utils.decorators", "salt.version.SaltStackVersion", "salt.exceptions.CommandExecutionError", "tests.support.unit.TestCase", "salt.exceptions.SaltInvocationError", "tests.support.mock.MagicMock", "inspect", "tests.support.mock.patch", "salt.exceptions.SaltConfigurationError"], "function_names": ["test_with_deprecated_with_name", "test_with_deprecated_opt_in_default", "test_allow_one_of", "test_with_deprecated_opt_in_use_superseded", "test_with_deprecated_no_conf", "test_with_depreciated_should_wrap_function", "test_is_deprecated_should_wrap_function", "test_require_one_of_raises_error_when_multiple_allowed_arguments_supplied", "test_is_deprecated_with_successor", "test_allow_one_of_raises_error_when_multiple_allowed_arguments_supplied", "test_with_deprecated_with_name_eol", "setUp", "test_memoize_should_wrap_function", "test_with_deprecated_found_eol", "test_is_deprecated", "test_with_deprecated_notfound_in_pillar", "timing_should_wrap_function", "_mk_version", "test_with_deprecated_notfound", "test_require_one_of_raises_error_when_none_of_allowed_arguments_supplied", "test_is_deprecated_version_eol", "test_allow_one_of_succeeds_when_no_arguments_supplied", "arg_function", "old_function", "test_ensure_unicode_args_should_wrap_function", "test_with_deprecated_opt_in_use_superseded_and_deprecated_in_pillar", "test_with_deprecated_opt_in_use_superseded_and_deprecated", "test_depends_get_previous_frame", "_new_function", "function", "new_function", "test_with_deprecated_found", "_log", "test_with_deprecated_opt_in_use_superseded_in_pillar", "test_require_one_of", "test_with_deprecated_found_eol_in_pillar", "__getattr__", "__init__", "test_is_deprecated_with_successor_eol", "test_ignores_kwargs_should_wrap_function", "test_with_deprecated_found_in_pillar"], "function_calls": ["MagicMock", "dep", "list", "depr", "require_one_of", "DummyLogger", "allow_one_of"], "class_names": ["DummyLogger", "DecoratorsTest", "DependsDecoratorTest"], "class_method_calls": ["self.assertRaises", "self.old_function", "patcher.stop", "stack_mock.assert_not_called", "currentframe_mock.assert_called_once_with", "inspect.stack", "inspect.currentframe", "self.globs", "self._mk_version", "patch.object", "wrapped.__module__", "decorators.allow_one_of", "self.messages", "self._new_function", "self.assertEqual", "self._messages", "self.assertFalse", "decorators.ignores_kwargs", "self.function", "decorators.ensure_unicode_args", "decorators._DeprecationDecorator", "patcher.start", "decorators.is_deprecated", "depr._curr_version", "self.addCleanup", "SaltStackVersion.from_name", "decorators.with_deprecated", "decorators.depends", "self.arg_function", "decorators.memoize", "decorators.timing", "self._log", "decorators.require_one_of", "self.new_function"]}, "test_disk.py": {"libraries": ["salt.states.disk", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "os.path", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_path_free_relative_acceptable", "test_path_used_absolute_acceptable", "test_mount_free_relative_below", "test_path_used_relative_below", "test_status_missing", "test_mount_used_absolute_above", "test_mount_free_absolute_acceptable", "test_status_strip", "setup_loader_modules", "test_mount_used_relative_below", "test_status_range_error", "test_path_free_absolute_acceptable", "test_path_free_relative_below", "test_path_used_absolute_above", "test_path_missing", "test_path_free_relative_above", "test_path_free_absolute_below", "test_mount_free_relative_above", "test_mount_free_absolute_above", "test_mount_used_relative_acceptable", "test_status_threshold", "test_path_used_relative_acceptable", "test_mount_used_absolute_acceptable", "test_path_used_absolute_below", "test_mount_free_relative_acceptable", "test_status_inverted_range", "test_mount_used_absolute_below", "test_mount_free_absolute_below", "test_path_used_relative_above", "test_path_free_absolute_above", "test_status", "test_status_type_error", "test_mount_used_relative_above"], "function_calls": ["int", "MagicMock"], "class_names": ["DiskTestCase"], "class_method_calls": ["self.assertDictEqual", "self.assertEqual", "patch.dict", "ret.update", "self.mock_data_path", "disk.status", "self.mock_data", "self.addCleanup", "disk.__salt__", "patch.object"]}, "test_file.py": {"libraries": ["tests.support.mock.create_autospec", "os", "salt.modules.file", "salt.states.file", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "tests.support.mock.call"], "function_names": ["configure_loader_modules", "fake_remove", "test_file_copy_should_use_provided_force_mode_for_file_remove", "test_file_tidied_for_file_remove", "test_file_absent_should_use_force_mode_for_file_remove", "test_file_recurse_directory_test"], "function_calls": ["patch", "call", "create_autospec", "MagicMock"], "class_names": [], "class_method_calls": ["fake_stat.return_value", "os.sep", "file.absent", "file.tidied", "filemod.remove", "pytest.mark", "pytest.fixture", "file.recurse", "fake_remove.assert_has_calls", "file.__salt__", "fake_remove.assert_called_with", "patch.dict", "file.copy_", "file.__opts__"]}, "test_gem.py": {"libraries": ["tests.support.mock.patch", "salt.states.gem", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_installed_version", "test_sources_add", "test_sources_remove", "test_removed", "test_installed"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["gem_install_succeeds.assert_called_once_with", "gem_sources_add_fails.assert_called_once_with", "gem.installed", "gem_sources_remove_fails.assert_called_once_with", "gem_sources_add_succeeds.assert_called_once_with", "gem_install_fails.assert_called_once_with", "gem.__salt__", "gem.sources_remove", "pytest.fixture", "gem_uninstall_succeeds.assert_called_once_with", "gem.sources_add", "gem.removed", "patch.dict", "gem_uninstall_fails.assert_called_once_with", "gem_sources_remove_succeeds.assert_called_once_with"]}, "test_gentoolkitmod.py": {"libraries": ["tests.support.case.ModuleCase", "pytest"], "function_names": ["test_revdep_rebuild_true", "setUp"], "function_calls": ["super"], "class_names": ["GentoolkitModuleTest"], "class_method_calls": ["self.skipTest", "self.assertTrue", "self.run_function", "pytest.mark"]}, "test_git.py": {"libraries": ["salt.states.git", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.Mock", "tests.support.mock.patch", "tests.support.mock.DEFAULT"], "function_names": ["configure_loader_modules", "test_latest_without_target", "test_latest_no_diff_for_bare_repo", "test_cloned_without_target", "test_detached_without_target"], "function_calls": ["str", "MagicMock", "patch", "Mock"], "class_names": [], "class_method_calls": ["logging.getLogger", "git_state.__salt__", "git_state.CommandExecutionError", "pytest.fixture", "git_diff.assert_not_called", "git_state.cloned", "pytest.raises", "patch.dict", "git_state.detached", "git_state.latest"]}, "test_groupadd.py": {"libraries": ["salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "salt.modules.groupadd", "grp", "tests.support.mock.patch"], "function_names": ["test_members", "configure_loader_modules", "test_add_local", "test_add", "test_getent", "test_chgid", "test_delete_local", "test_info", "test_delete_local_with_params", "test_adduser", "test_chgid_gid_same", "test_delete", "test_deluser", "test_format_info", "test_add_local_with_params"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["groupadd.getent", "groupadd.info", "pytest.fixture", "groupadd.members", "groupadd._format_info", "patch.object", "groupadd.delete", "pytest.mark", "groupadd.add", "pytest.raises", "groupadd.deluser", "groupadd.__salt__", "groupadd.__grains__", "groupadd.chgid", "which_mock.assert_called_once_with", "patch.dict", "mock.assert_called_once_with", "groupadd.adduser", "grp.struct_group"]}, "test_hosts.py": {"libraries": ["salt.utils.stringutils", "salt.modules.hosts", "tests.support.mock.mock_open", "salt.utils.platform", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "io", "tests.support.mixins.LoaderModuleMockMixin", "salt.utils.data", "tests.support.mock.patch"], "function_names": ["close", "__enter__", "test_add_host_no_file", "test_get_alias_none", "setup_loader_modules", "test_get_alias", "test_add_host", "__exit__", "test_get_ip_none", "write", "test_set_host", "test_list_hosts", "test_rm_host_false", "test_has_pair", "test_get_ip", "writelines", "test_set_host_true", "test_add_host_create_entry", "test_rm_host", "test_set_host_true_remove", "__init__", "read", "readlines", "test_set_comment"], "function_calls": ["MagicMock", "super", "patch", "TypeError", "isinstance", "mock_open"], "class_names": ["HostsTestCase", "TmpStringIO"], "class_method_calls": ["self.assertDictEqual", "hosts.rm_host", "self.mode", "hosts.__salt__", "hosts.add_host", "hosts.list_hosts", "self.assertListEqual", "self.assertEqual", "hosts.has_pair", "io.StringIO", "self.assertFalse", "hosts.get_alias", "self.write", "hosts.set_comment", "salt.utils", "patch.dict", "hosts.set_host", "hosts.get_ip", "self.getvalue", "self.assertTrue", "self.close"]}, "test_key.py": {"libraries": ["salt.utils.crypt", "salt.modules.key", "tests.support.mock.MagicMock", "pytest", "os.path", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_finger", "test_finger_master"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["key.finger", "pytest.fixture", "key.finger_master", "salt.utils", "os.path", "patch.dict", "key.__opts__", "patch.object"]}, "test_linux_acl.py": {"libraries": ["salt.exceptions.CommandExecutionError", "tests.support.unit.TestCase", "salt.modules.linux_acl", "tests.support.mock.MagicMock", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_getfacl__effective_acls", "test_delfacl__u_w_single_arg", "test_modfacl__d_user_w_single_arg", "test_delfacl__u_w_multiple_args", "test_delfacl__d_user_w_single_arg", "test_modfacl__g_w_single_arg", "test_modfacl__default_user_w_multiple_args", "test_wipefacls_w_multiple_args", "test_modfacl__d_user_w_multiple_args", "test_modfacl__user_w_multiple_args", "test_modfacl_wo_args", "setup_loader_modules", "setUp", "test_modfacl__recursive_w_multiple_args", "test_delfacl__user_w_multiple_args", "test_delfacl__default_user_w_multiple_args", "test_modfacl__group_w_single_arg", "test_delfacl_wo_args", "test_wipefacls__recursive_w_multiple_args", "test_modfacl_raise_err", "test_modfacl__g_w_multiple_args", "test_getfacl_w_multiple_args", "test_modfacl__group_w_multiple_args", "test_delfacl__recursive_w_multiple_args", "tearDown", "test_delfacl__d_u_w_multiple_args", "test_modfacl__d_u_w_multiple_args", "test_delfacl__g_w_multiple_args", "test_modfacl__d_u_w_single_arg", "test_modfacl__default_user_w_single_arg", "test_modfacl__user_w_single_arg", "test_delfacl__g_w_single_arg", "test_getfacl_w_single_arg", "test_wipefacls_w_single_arg", "test_modfacl__u_w_single_arg", "test_delfacl__d_u_w_single_arg", "test_delfacl__d_user_w_multiple_args", "test_delfacl__group_w_multiple_args", "test_wipefacls_wo_args", "test_delfacl__group_w_single_arg", "test_getfacl__recursive_w_multiple_args", "test_version", "test_delfacl__default_user_w_single_arg", "test_getfacl_wo_args", "test_modfacl__u_w_multiple_args", "test_delfacl__user_w_single_arg"], "function_calls": ["CommandExecutionError", "MagicMock", "delattr"], "class_names": ["LinuxAclTestCase"], "class_method_calls": ["linux_acl.modfacl", "self.d_u_acl", "self.assertRaises", "self.quoted_file", "self.user_acl_cmd", "self.files", "self.group_acl_cmd", "self.assertEqual", "excinfo.exception", "self.default_user_acl", "linux_acl.__salt__", "self.group_acl", "self.file", "linux_acl._parse_acl", "self.default_user_acl_cmd", "self.quoted_files", "self.user_acl", "linux_acl.wipefacls", "self.addCleanup", "self.u_acl", "self.cmdrun", "self.d_user_acl", "patch.dict", "linux_acl.delfacl", "self.g_acl", "linux_acl.getfacl"]}, "test_linux_shadow.py": {"libraries": ["types", "tests.support.mock.mock_open", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "tests.support.mock.DEFAULT"], "function_names": ["password", "configure_loader_modules", "test_set_password", "test_list_users", "test_info", "_pw_hash_ids", "library", "test_gen_password", "test_set_password_malformed_shadow_entry"], "function_calls": ["MagicMock", "patch", "Exception", "sorted", "len", "mock_open"], "class_names": [], "class_method_calls": ["request.param", "shadow.info", "pytest.fixture", "patch.object", "shadow.set_password", "pytest.mark", "shadow.list_users", "value.algorithm", "types.SimpleNamespace", "patch.dict", "shadow.__grains__", "spwd.struct_spwd", "password.pw_hash_passlib", "shadow_mock.filehandles", "shadow.gen_password", "result.items", "pytest.importorskip", "password.pw_salt", "password.algorithm", "shadow.__salt__", "password.pw_hash", "password.clear"]}, "test_localemod.py": {"libraries": ["salt.exceptions.CommandExecutionError", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "pytest", "tests.support.mixins.LoaderModuleMockMixin", "salt.modules.localemod", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["test_set_locale_with_systemd_nodbus", "test_dbus_locale_parser_doesnot_matches", "test_get_locale_with_systemd_and_dbus", "test_get_locale_with_no_systemd_redhat", "test_gen_locale_suse_invalid", "test_parse_localectl", "setup_loader_modules", "test_set_locale_with_no_systemd_gentoo", "test_localectl_status_parser_empty", "test_get_locale_with_no_systemd_gentoo", "test_set_locale_with_systemd_and_dbus", "test_gen_locale_gentoo", "test_dbus_locale_parser_matches", "test_localectl_status_parser_no_systemd", "test_set_locale_with_systemd_and_dbus_sle12", "test_gen_locale_debian_no_charmap", "test_set_locale_with_no_systemd_solaris_with_list_avail", "test_gen_locale", "test_set_locale_with_no_systemd_redhat", "test_set_locale_with_no_systemd_debian", "test_get_locale_with_systemd_nodbus", "test_set_locale_with_no_systemd_solaris_without_list_avail", "test_gen_locale_suse_valid", "test_get_locale_with_systemd_and_dbus_sle12", "test_get_locale_with_no_systemd_unknown", "test_set_locale_with_no_systemd_unknown", "test_gen_locale_gentoo_no_charmap", "test_localectl_status_parser_structure", "test_localectl_status_parser_notset", "test_gen_locale_suse_localedef_error_handling", "test_gen_locale_not_valid", "test_gen_locale_debian", "file_search", "test_gen_locale_ubuntu", "test_get_locale_with_no_systemd_debian", "test_list_avail", "test_set_locale_with_no_systemd_debian_no_update_locale", "test_get_locale_with_no_systemd_solaris", "test_avail", "test_gen_locale_verbose", "test_localectl_status_parser_broken", "test_localectl_status_parser"], "function_calls": ["MagicMock", "Mock", "patch", "str", "len", "isinstance"], "class_names": ["LocalemodTestCase"], "class_method_calls": ["exc_info.value", "localemod.log", "localemod.__grains__", "p.split", "localemod._parse_dbus_locale", "localemod.get_locale", "localemod.__salt__", "localemod._localectl_set", "i_dbus.Get", "pytest.raises", "pattern.split", "localemod.list_avail", "patch.dict", "localemod._localectl_status", "localemod.os", "localemod.gen_locale", "localemod.set_locale", "localemod.avail"]}, "test_lxc.py": {"libraries": ["salt.utils.versions", "tests.support.mock.MagicMock", "pytest", "salt.states.lxc", "tests.support.mock.patch"], "function_names": ["test_running", "configure_loader_modules", "test_frozen", "test_set_pass", "test_stopped", "test_present", "test_edited_conf", "test_absent"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["lxc.set_pass", "lxc.edited_conf", "lxc.__opts__", "lxc.__salt__", "lxc.present", "pytest.fixture", "ret.update", "lxc.stopped", "lxc.absent", "lxc.frozen", "salt.utils", "patch.dict", "patch.object", "lxc.running"]}, "test_macdefaults.py": {"libraries": ["salt.states.macdefaults", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_write_set", "configure_loader_modules", "test_absent_deleting_existing", "test_write", "test_write_integer", "test_write_integer_match", "test_write_boolean", "test_write_boolean_match", "test_absent_already"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["read_mock.assert_called_once_with", "write_mock.assert_called_once_with", "pytest.fixture", "macdefaults.absent", "macdefaults.__salt__", "write_mock.called", "patch.dict", "macdefaults.write", "mock.assert_called_once_with"]}, "test_mine.py": {"libraries": ["salt.modules.mine", "salt.utils.odict.OrderedDict", "salt.utils.mine", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_update_local_specific", "test_send_get_local", "debug", "test_valid", "test_update_master", "mock_cache", "fetch", "test_delete_local", "test_flush_master", "test_get_master", "test_send_get_acl_local", "configure_loader_modules", "store", "test_send_master_acl", "test_get_docker", "test_update_local", "test_get_docker_with_container_id", "test_flush_local", "test_get_local_empty", "test_get_local_classic", "test_get_master_exclude_minion", "__init__", "test_send_master", "test_delete_master"], "function_calls": ["MagicMock", "len", "FakeCache", "OrderedDict", "print", "sorted", "isinstance"], "class_names": ["FakeCache"], "class_method_calls": ["mine.get", "mine.__salt__", "mine.__opts__", "mine.flush", "mine.send", "mine.update", "pytest.fixture", "mine.valid", "mock_cache.fetch", "mock_cache.store", "mine.delete", "salt.utils", "patch.dict", "mine.get_docker", "patch.object", "self.data"]}, "test_mysql.py": {"libraries": ["tests.support.mock.patch", "salt.returners.mysql", "pytest"], "function_names": ["test_save_load_with_bytes", "test_returner_with_bytes"], "function_calls": [], "class_names": [], "class_method_calls": ["mysql.save_load", "patch.object", "mysql.returner", "pytest.fail"]}, "test_publish.py": {"libraries": ["tests.support.mock.MagicMock", "pytest", "salt.modules.publish", "tests.support.mock.patch", "salt.exceptions.SaltReqTimeoutError"], "function_names": ["send", "configure_loader_modules", "close", "factory", "__enter__", "__exit__", "test_publish", "__init__", "gen_token", "test_runner", "test_full_data"], "function_calls": ["Channel", "SAuth", "MagicMock", "patch"], "class_names": ["Channel", "SAuth"], "class_method_calls": ["self.load", "publish.__opts__", "Channel.flag", "pytest.fixture", "publish.runner", "self.flag", "self.tok", "patch.dict", "publish.publish"]}, "test_pw_user.py": {"libraries": ["salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "logging", "salt.modules.pw_user", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_chroomnumber", "test_chshell", "test_add", "test_getent", "test_chgid", "test_chhome", "test_chgroups", "test_chfullname", "test_list_users", "test_info", "test_rename", "test_chworkphone", "test_list_groups", "test_chuid", "test_delete", "test_chhomephone"], "function_calls": ["patch", "MagicMock", "MockData"], "class_names": ["MockData"], "class_method_calls": ["pw_user.chuid", "pw_user.chworkphone", "pw_user.info", "pw_user.chroomnumber", "pw_user.chhome", "pytest.fixture", "pw_user.chgid", "pwd.struct_passwd", "patch.object", "pw_user.__context__", "logging.getLogger", "pw_user.list_groups", "pw_user.__grains__", "pw_user.add", "pytest.raises", "pw_user.chshell", "pw_user.__salt__", "pw_user.chfullname", "pw_user.list_users", "patch.dict", "pw_user.chgroups", "pytest.importorskip", "pw_user.delete", "pw_user.chhomephone", "pw_user.rename", "pw_user.getent"]}, "test_rabbitmq.py": {"libraries": ["salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "logging", "salt.modules.rabbitmq", "tests.support.mock.patch"], "function_names": ["test_set_policy", "test_user_exists", "test_list_users_with_warning_rabbitmq3", "test_upstream_exists_negative", "test_disable_plugin", "test_delete_upstream", "test_list_enabled_plugins_space_delimited", "test_set_upstream", "test_list_available_plugins_space_delimited", "test_delete_vhost", "test_delete_policy", "test_list_queues_vhost", "test_user_exists_negative", "test_force_reset", "test_start_app", "test_list_policies", "test_upstream_exists", "test_list_available_plugins", "test_change_password", "test_list_policies_old_version", "test_list_policies_freebsd", "test_join_cluster", "test_list_users_rabbitmq3", "test_list_permissions", "test_plugin_is_enabled_negative", "test_plugin_is_enabled", "test_cluster_status", "test_list_user_permissions", "test_delete_user", "test_vhost_exists", "test_vhost_exists_negative", "test_clear_password", "test_policy_exists", "test_list_enabled_plugins", "configure_loader_modules", "test_set_permissions", "test_list_queues", "test_stop_app", "test_list_users_with_warning_rabbitmq2", "test_reset", "test_enable_plugin", "test_check_password_lt_38", "test_set_user_tags", "test_add_vhost", "test_list_users_rabbitmq2", "test_list_vhosts_with_warning", "test_add_user", "test_delete_upstream_negative", "test_list_vhosts", "test_status", "test_list_upstreams", "test_check_password_gt_38"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["rabbitmq.delete_user", "rabbitmq.change_password", "rabbitmq.policy_exists", "pytest.fixture", "rabbitmq.clear_password", "rabbitmq.delete_upstream", "rabbitmq.list_enabled_plugins", "patch.object", "rabbitmq.status", "logging.getLogger", "rabbitmq.user_exists", "rabbitmq.plugin_is_enabled", "rabbitmq.upstream_exists", "rabbitmq.list_permissions", "rabbitmq.cluster_status", "rabbitmq.list_available_plugins", "rabbitmq.__grains__", "rabbitmq.set_user_tags", "rabbitmq.start_app", "rabbitmq.set_upstream", "rabbitmq.check_password", "rabbitmq.disable_plugin", "pytest.raises", "rabbitmq.reset", "rabbitmq.set_permissions", "rabbitmq.list_vhosts", "rabbitmq.set_policy", "patch.dict", "rabbitmq.stop_app", "rabbitmq.add_user", "rabbitmq.list_queues_vhost", "rabbitmq.list_queues", "rabbitmq.__salt__", "rabbitmq.list_policies", "rabbitmq.force_reset", "rabbitmq.vhost_exists", "rabbitmq.list_users", "rabbitmq.add_vhost", "rabbitmq.delete_vhost", "rabbitmq.join_cluster", "rabbitmq.delete_policy", "rabbitmq.list_user_permissions", "rabbitmq.list_upstreams", "rabbitmq.enable_plugin"]}, "test_saltcheck.py": {"libraries": ["tests.support.unit.TestCase", "salt.syspaths", "salt.config", "tests.support.mock.MagicMock", "pytest", "os.path", "tests.support.mixins.LoaderModuleMockMixin", "salt.modules.saltcheck", "tests.support.mock.patch"], "function_names": ["test_validation", "test__assert_false1", "test__assert_not_equal1", "test__assert_greater3", "test__assert_greater_equal2", "test__assert_false2", "test__assert_less_equal2", "test_call_salt_command", "test__assert_not_in1", "test__assert__not_empty", "setup_loader_modules", "test_run_test_muliassert_failure", "test__assert_less3", "test__assert_less1", "test__assert_less2", "test_call_salt_command2", "test__assert_not_in2", "test_report_highstate_tests", "test_generate_output", "test__assert_true2", "test__assert_less_equal1", "test__assert_less_equal3", "test__assert_in2", "test__assert_greater2", "test__assert_greater_equal1", "test__assert_empty", "test_run_test_muliassert", "test__assert__not_empty_fail", "test_sls_path_generation", "test__assert_greater_equal3", "test__assert_empty_fail", "test__assert_true1", "test_run_test_1", "test_call_saltcheck_with_proxy", "test__assert_equal1", "test__assert_in1", "test__assert_equal2", "test__assert_greater1", "test__assert_not_equal2"], "function_calls": ["patch", "MagicMock"], "class_names": ["SaltcheckTestCase"], "class_method_calls": ["instance.found_states", "patcher.stop", "sc_instance._SaltCheck__assert_in", "saltcheck._generate_out_list", "sc_instance._call_salt_command", "os.path", "sc_instance._SaltCheck__is_valid_test", "self.assertEqual", "syspaths.CONFIG_DIR", "self.assertNotEqual", "pytest.mark", "saltcheck.__virtual__", "saltcheck.SaltCheck", "mocked_get_top.return_value", "saltcheck.__salt__", "self.assertFalse", "testLoader._generate_sls_path", "sc_instance._SaltCheck__assert_greater_equal", "sc_instance._SaltCheck__assert_less_equal", "patcher.start", "sc_instance._SaltCheck__assert_equal", "sc_instance._SaltCheck__assert_less", "mocked_stl.return_value", "saltcheck.StateTestLoader", "patch.dict", "self.addCleanup", "sc_instance._SaltCheck__assert_not_equal", "sc_instance._SaltCheck__assert_greater", "sc_instance._SaltCheck__assert_not_in", "saltcheck.run_test", "sc_instance._SaltCheck__assert_empty", "saltcheck.report_highstate_tests", "self.assertTrue", "salt.config", "sc_instance._SaltCheck__assert_not_empty", "sc_instance._SaltCheck__assert_false"]}, "test_ssh.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.utils.platform", "salt.utils.files", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "salt.modules.ssh", "tests.support.mixins.LoaderModuleMockMixin", "tempfile", "tests.support.mock.patch"], "function_names": ["tearDown", "test_rm_auth_key", "test_set_auth_key_invalid", "test_expand_user_token", "test_replace_auth_key", "test_set_auth_key_sk_ed25519_cert", "setup_loader_modules"], "function_calls": ["patch", "getattr", "MagicMock", "delattr"], "class_names": ["SSHAuthKeyTestCase"], "class_method_calls": ["ssh.__salt__", "self.assertRaises", "self.assertEqual", "ssh._replace_auth_key", "self.assertNotIn", "tempfile.NamedTemporaryFile", "_fh.read", "self.user_info_mock", "_fh.write", "temp_file.name", "salt.utils", "ssh._expand_authorized_keys_path", "patch.dict", "ssh.set_auth_key", "temp_file.close", "ssh.rm_auth_key", "self.assertIn"]}, "test_status.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.status", "pytest"], "function_names": ["configure_loader_modules", "test_process", "test_loadavg"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["status.loadavg", "status.__salt__", "ret.update", "pytest.fixture", "status.process", "patch.dict"]}, "test_supervisord.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.modules.supervisord", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_stop", "test_status_bool_expected_state_running_success", "test_reread", "test_status_bool_expected_state_running_fail", "test_options", "setup_loader_modules", "test_custom", "_m_bin", "items", "test_restart", "test_add", "test_status_bool_name_correct", "test_status_bool_name_wrong", "test_start", "test_update", "sections", "_m_all", "test_status_raw", "__init__", "test_status", "test_remove"], "function_calls": ["MockConfig", "MagicMock"], "class_names": ["MockConfig", "SupervisordTestCase"], "class_method_calls": ["self.assertDictEqual", "self.assertRaises", "supervisord.status", "supervisord.status_bool", "supervisord.custom", "supervisord.options", "supervisord.restart", "self.flag", "patch.object", "supervisord.stop", "supervisord.__salt__", "self._m_all", "MockConfig.flag", "self.assertFalse", "supervisord.add", "supervisord.start", "supervisord.update", "patch.dict", "supervisord.remove", "supervisord.status_raw", "supervisord.reread", "self._m_bin", "self.assertTrue", "self.name"]}, "test_sysctl.py": {"libraries": ["salt.states.sysctl", "salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["mock_current", "configure_loader_modules", "mock_config", "test_no_change", "test_failed_to_set", "test_inaccessible_config_file", "test_already_set", "test_not_to_be_changed_not_configured", "test_configured_but_unknown", "test_updated", "test_change", "test_to_be_changed_not_configured", "test_empty_config_file_and_value_not_found"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["sysctl.__opts__", "pytest.fixture", "sysctl.present", "sysctl.__salt__", "patch.dict"]}, "test_sysrc.py": {"libraries": ["salt.states.sysrc", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_managed", "configure_loader_modules", "test_absent"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["sysrc.absent", "sysrc.__salt__", "sysrc.__opts__", "ret.update", "pytest.fixture", "patch.dict", "sysrc.managed"]}, "test_test.py": {"libraries": ["salt.states.test", "salt.utils.odict.OrderedDict", "salt.exceptions.SaltInvocationError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_configurable_test_state_warnings", "test_check_pillar_present", "test_fail_with_changes", "test_fail_without_changes", "test_check_pillar_dictionary", "test_mod_watch", "test_succeed_without_changes", "test_succeed_with_changes", "test_check_pillar_string", "test_configurable_test_state_test", "test_configurable_test_state_changes", "test_configurable_test_state", "test_configurable_test_state_result"], "function_calls": ["MagicMock", "OrderedDict"], "class_names": [], "class_method_calls": ["test.succeed_without_changes", "test.fail_without_changes", "test.__salt__", "test.mod_watch", "ret.update", "pytest.fixture", "test.fail_with_changes", "pytest.raises", "test.__opts__", "patch.dict", "test.check_pillar", "test.succeed_with_changes", "test.configurable_test_state"]}, "test_timezone.py": {"libraries": ["salt.states.timezone", "salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_system"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["timezone.__salt__", "ret.update", "pytest.fixture", "patch.dict", "timezone.system", "timezone.__opts__"]}, "test_tls.py": {"libraries": ["salt.utils.versions.Version", "tests.support.mock.mock_open", "tests.support.mock.MagicMock", "tests.support.helpers.SKIP_INITIAL_PHOTONOS_FAILURES", "pytest", "logging", "tests.support.mock.patch", "salt.modules.tls"], "function_names": ["test_pyOpenSSL_version", "test_create_csr", "test_get_ca_text", "test_get_expiration_date", "test_set_ca_cert_path", "test_create_ca", "test_create_ca_signed_cert", "remove_not_in_result", "test_recreate_ca", "test_pyOpenSSL_version_destructive", "test_get_ca", "test_create_csr_permissions_on_csr_and_key", "test_cert_base_path", "test_cert_info", "test_get_ca_fail", "test_recreate_ca_signed_cert", "test_create_self_signed_cert_permissions_on_csr_cert_and_key", "tls_test_data", "configure_loader_modules", "ignore_extensions", "test_create_ca_permissions_on_cert_and_key", "test_create_pkcs12", "test_when_ca_path_not_provided_and_no_contextual_cert_base_path_should_be_context_cert_base_path", "path_getter", "test_recreate_self_signed_cert", "test_recreate_csr", "test_ca_exists", "test_create_self_signed_cert", "test_recreate_pkcs12"], "function_calls": ["ignore_extensions", "Version", "MagicMock", "patch", "str", "remove_not_in_result", "mock_open"], "class_names": [], "class_method_calls": ["tls.set_ca_path", "tls.create_pkcs12", "tls.__dict__", "log.exception", "OpenSSL.__version__", "pytest.fixture", "tls.cert_base_path", "tls.get_ca", "tls.get_extensions", "tls.create_ca", "logging.getLogger", "tls.__opts__", "certp.stat", "tls.__virtual__", "certk.stat", "tls.ca_exists", "pytest.mark", "config_option.get", "tls.create_self_signed_cert", "pytest.raises", "tls.cert_info", "tls.get_expiration_date", "pytest.skip", "keyp.exists", "csrp.exists", "tls.__salt__", "patch.dict", "tls.create_ca_signed_cert", "pytest.importorskip", "csrp.stat", "data.keys", "keyp.stat", "tls.create_csr", "tls.__context__"]}, "test_win_autoruns.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.modules.win_autoruns", "pytest"], "function_names": ["configure_loader_modules", "define_key", "test_list"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["pytest.fixture", "win_autoruns.__salt__", "win_autoruns.list_", "patch.dict", "win_autoruns.__grains__"]}, "test_win_dns_client.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.states.win_dns_client"], "function_names": ["test_primary_suffix", "configure_loader_modules", "test_dns_exists", "test_dns_dhcp"], "function_calls": ["MagicMock", "repr"], "class_names": [], "class_method_calls": ["win_dns_client.__utils__", "win_dns_client.__salt__", "ret.update", "pytest.fixture", "win_dns_client.__opts__", "win_dns_client.dns_dhcp", "patch.dict", "win_dns_client.primary_suffix", "win_dns_client.dns_exists"]}, "test_win_firewall.py": {"libraries": ["tests.support.case.ModuleCase", "pytest"], "function_names": ["test_firewall_add_delete_rule", "test_firewall_enable", "_pre_firewall_status", "test_firewall_get_rule", "test_firewall_disable", "test_firewall_get_config"], "function_calls": [], "class_names": ["FirewallTest"], "class_method_calls": ["self.assertNotIn", "self.run_function", "pytest.mark", "self._pre_firewall_status", "self.assertTrue", "self.assertFalse", "self.assertIn"]}, "test_win_ip.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError", "salt.modules.win_ip", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "tests.support.mock.call"], "function_names": ["test_get_default_gateway", "test_get_all_interfaces", "test_get_subnet_length", "test_set_dhcp_all", "test_raw_interface_configs", "test_set_dhcp_dns", "test_set_static_dns", "test_disable", "test_set_dhcp_ip", "ethernet_config", "test_set_static_dns_clear", "test_get_interface", "test_is_disabled", "configure_loader_modules", "test_is_enabled", "test_set_static_dns_no_action", "test_set_static_ip", "ethernet_enable", "test_enable"], "function_calls": ["call", "MagicMock"], "class_names": [], "class_method_calls": ["win_ip.get_interface", "win_ip.set_dhcp_ip", "pytest.fixture", "win_ip.set_static_dns", "patch.object", "win_ip.set_static_ip", "win_ip.get_all_interfaces", "win_ip.__salt__", "pytest.mark", "pytest.raises", "win_ip.enable", "win_ip.get_default_gateway", "mock_cmd.assert_has_calls", "mock_cmd.assert_called_once_with", "win_ip.is_disabled", "patch.dict", "win_ip.raw_interface_configs", "win_ip.set_dhcp_all", "win_ip.get_subnet_length", "win_ip.set_dhcp_dns", "win_ip.is_enabled", "win_ip.disable"]}, "test_win_ntp.py": {"libraries": ["tests.support.mock.patch", "salt.modules.win_ntp", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_get_servers", "test_set_servers"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["win_ntp.get_servers", "pytest.fixture", "win_ntp.__salt__", "win_ntp.set_servers", "patch.dict"]}, "test_win_pkg.py": {"libraries": ["salt.utils.win_reg", "salt.exceptions.MinionError", "salt.modules.win_pkg", "salt.utils.platform", "tests.support.mock.MagicMock", "pytest", "salt.modules.config", "logging", "salt.utils.data", "tests.support.mock.patch", "salt.modules.cp", "salt.modules.pkg_resource"], "function_names": ["test_pkg_remove_minion_error_salt_cache_dir", "test_pkg_install_rollback", "test_pkg_install_log_message", "test_pkg_remove_log_message", "test_pkg_install_verify_ssl_false", "test__reverse_cmp_pkg_versions", "test_pkg__get_reg_software_noremove", "test_pkg_install_single_pkg", "test_pkg_install_minion_error_salt_cache_dir", "test_pkg_install_name", "test_pkg__get_reg_software", "configure_loader_modules", "test__repo_process_pkg_sls", "test_pkg__get_reg_software_noremove_not_present", "test_pkg_install_not_found", "test_pkg_install_latest_is_cached", "test_pkg_remove_minion_error_salt", "test_pkg_install_latest", "test_pkg_install_minion_error_salt", "test_pkg_install_multiple_pkgs", "test_pkg_install_existing", "test_pkg_install_minion_error_https", "test_pkg_install_existing_with_version"], "function_calls": ["MagicMock", "patch", "MinionError", "str", "isinstance", "render"], "class_names": [], "class_method_calls": ["mock_cache_file.assert_called_once_with", "win_pkg.__salt__", "x.lower", "win_reg.delete_key_recursive", "win_pkg.remove", "win_pkg._reverse_cmp_pkg_versions", "pytest.fixture", "mock_cmd_run_all.call_args", "caplog.messages", "win_reg.set_value", "patch.object", "win_pkg.__opts__", "pkg_resource.add_pkg", "pytest.mark", "cp.hash_file", "config.valid_fileproto", "win_pkg._repo_process_pkg_sls", "pkg_resource.parse_targets", "win_pkg._get_reg_software", "win_reg.list_keys", "test.assert_called_once_with", "pkg_resource.sort_pkglist", "pkg_resource.stringify", "patch.dict", "win_reg.key_exists", "salt.utils", "win_reg.value_exists", "win_reg.read_value", "caplog.at_level", "win_pkg.install", "logging.DEBUG"]}, "test_win_servermanager.py": {"libraries": ["salt.states.win_servermanager", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_installed", "configure_loader_modules", "test_removed"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["win_servermanager.__salt__", "win_servermanager.removed", "win_servermanager.installed", "win_servermanager.__opts__", "pytest.fixture", "patch.dict"]}, "test_win_task.py": {"libraries": ["salt.modules.win_task", "salt.utils.platform", "tests.support.mock.MagicMock", "pytest", "salt.states.win_task", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_daily", "test_weekly", "test_on_task_creation", "test_monthly_day", "test_on_session_change", "test__get_arguments", "test__get_task_state_prediction", "test_on_idle", "test_present", "test_on_logon", "test_absent", "test_monthly", "test_on_boot"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["win_task.__grains__", "win_task._get_task_state_prediction", "win_task.__salt__", "win_task._get_arguments", "pytest.fixture", "pytest.mark", "salt.modules", "win_task.present", "win_task.absent", "patch.dict", "win_task.__opts__"]}, "test_app.py": {"libraries": ["os", "threading", "tornado.escape", "tornado.web", "time", "salt.utils.json", "salt.utils.stringutils", "tornado.testing.AsyncHTTPTestCase", "tests.support.helpers.TstSuiteLoggingHandler", "salt.auth", "tests.support.mixins.AdaptedConfigurationTestCaseMixin", "pytest", "tests.support.helpers.patched_environ", "salt.netapi.rest_tornado.saltnado"], "function_names": ["tearDown", "get_app", "opts", "fetch", "test_simple_local_post_only_dictionary_request_with_order_masters", "auth_creds_dict", "setUp", "auth", "test_post", "decode_body", "test_regression_49572", "verify_event", "build_tornado_app", "mod_opts", "token", "salt_api_account"], "function_calls": ["patched_environ", "super", "AssertionError", "TstSuiteLoggingHandler", "dict", "hasattr"], "class_names": ["TestSaltAPIHandler", "SaltnadoIntegrationTestsBase", "TestWebhookSaltAPIHandler"], "class_method_calls": ["future.result", "threading.Event", "self.http_server", "self.patched_environ", "self.build_tornado_app", "pytest.fixture", "self.content_type_map", "self.__auth", "application.event_listener", "saltnado.WebhookSaltAPIHandler", "self.assertIn", "self._AsyncHTTPTestCase__port", "response.headers", "tornado.escape", "self.assertEqual", "self.mod_opts", "self.application", "saltnado.SaltAPIHandler", "pytest.mark", "time.sleep", "self._future_resolved", "self.get_temp_config", "self.http_client", "self._test_generator", "self.fail", "self.io_loop", "self._finished", "self._app", "response._body", "self.opts", "self.auth", "salt.utils", "self.addCleanup", "response.body", "self.decode_body", "self.auth_creds", "application.auth", "os.environ", "self.auth_creds_dict", "tornado.web", "self.__port", "self.token", "handler.messages", "self._SaltnadoIntegrationTestsBase__auth", "salt.auth", "application.opts", "application.mod_opts", "self.fetch", "self.assertTrue", "saltnado.AUTH_TOKEN_HEADER", "saltnado.EventListener"]}, "test_output.py": {"libraries": ["os", "traceback", "tests.support.mixins.RUNTIME_VARS", "saltfactories.utils.tempfiles.temp_file", "salt.config", "salt.output.display_output", "pytest", "tests.support.case.ShellCase", "salt.utils.yaml"], "function_names": ["test_output_txt", "test_output_unicodebad", "test_output_highstate_falls_back_nested", "test_output_raw", "test_static_simple", "test_output_nested", "test_output_json", "test_output_yaml_namespaced_dict_wrapper", "test_output_quiet", "test_output_pprint", "test_output_highstate", "test_output_yaml"], "function_calls": ["delattr", "list", "object", "getattr", "temp_file", "isinstance", "display_output"], "class_names": ["OutputReturnTest"], "class_method_calls": ["RUNTIME_VARS.TMP_CONF_DIR", "RUNTIME_VARS.TMP", "self.assertEqual", "self.run_call", "RUNTIME_VARS.TMP_BASEENV_STATE_TREE", "pytest.mark", "salt.config", "traceback.format_exc", "os.path", "salt.utils", "self.maxDiff", "self.run_salt", "self.assertIn"]}, "test_git_pillar.py": {"libraries": ["tests.support.gitfs._OPTS", "salt.utils.files", "salt.runners.git_pillar", "pytest", "logging", "salt.utils.gitfs", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "cachedir", "fetch", "test_update", "init_remote", "clear_lock"], "function_calls": ["str"], "class_names": ["MockGitProvider"], "class_method_calls": ["logging.getLogger", "_OPTS.copy", "self.repo", "pytest.fixture", "salt.utils", "git_pillar.update", "patch.object"]}, "test_pydsl.py": {"libraries": ["sys", "os", "salt.utils.pydsl.PyDslError", "textwrap", "salt.loader", "salt.utils.files", "tests.support.helpers.with_tempdir", "tests.support.unit.TestCase", "salt.state.HighState", "salt.config", "tests.support.runtests.RUNTIME_VARS", "io", "pytest", "pprint", "tempfile", "copy", "shutil"], "function_names": ["tearDown", "state_highstate", "test_state_declarations", "render_sls", "test_no_state_func_in_state_mod", "test_load_highstate", "test_pipe_through_stateconf", "write_to", "test_include_extend", "test_ordered_states", "test_repeat_includes", "test_nested_high_state_execution", "test_compile_time_state_execution", "setUp", "test_multiple_state_func_in_state_mod", "test_cmd_call", "test_requisite_declarations"], "function_calls": ["with_tempdir", "iter", "next", "dict", "write_to", "len", "set", "HighState"], "class_names": ["CommonTestCaseBoilerplate", "PyDSLRendererTestCase"], "class_method_calls": ["self.config", "self.state_highstate", "f.write", "self.render_sls", "self.state_tree_dir", "HIGHSTATE.pop_active", "f.read", "os.path", "HIGHSTATE.state", "dirpath.replace", "self.assertIn", "kws.pop", "self.assertEqual", "self.assertRaisesRegex", "io.StringIO", "pytest.mark", "result.keys", "os.makedirs", "tempfile.mkdtemp", "output.replace", "RUNTIME_VARS.TMP", "HIGHSTATE.push_active", "salt.loader", "textwrap.dedent", "result.values", "shutil.rmtree", "pprint.pprint", "salt.utils", "sys.stdin", "self.addCleanup", "self.cache_dir", "self.root_dir", "HIGHSTATE.render_highstate", "os.linesep", "self.skipTest", "self.assertTrue", "salt.config", "self.HIGHSTATE", "copy.copy"]}, "test_appoptics_return.py": {"libraries": ["tests.support.case.ShellCase", "salt.returners.appoptics_return", "logging"], "function_names": ["test_count_runtimes"], "function_calls": [], "class_names": ["AppOpticsTest"], "class_method_calls": ["logging.getLogger", "appoptics_return._calculate_runtimes", "self.assertEqual"]}, "test_librato_return.py": {"libraries": ["tests.support.case.ShellCase", "salt.returners.librato_return", "pytest", "logging"], "function_names": ["test_count_runtimes"], "function_calls": [], "class_names": ["libratoTest"], "class_method_calls": ["logging.getLogger", "librato_return._calculate_runtimes", "self.assertEqual", "pytest.mark"]}, "test_fileserver.py": {"libraries": ["os", "time", "salt.fileserver", "salt.utils.files", "datetime"], "function_names": ["test_whitelist", "test_file_server_url_escape", "test_future_file_list_cache_file_ignored", "test_diff_with_diffent_values", "test_file_server_serve_url_escape", "test_diff_with_diffent_keys"], "function_calls": ["str", "sorted"], "class_names": [], "class_method_calls": ["os.makedirs", "datetime.datetime", "fs.servers", "fs.find_file", "fs.serve_file", "salt.fileserver", "datetime.timedelta", "future.timetuple", "os.utime", "os.path", "_f.write", "time.mktime", "salt.utils"]}, "test_manage.py": {"libraries": ["salt.runners.manage", "pytest"], "function_names": ["test_deprecation_58638"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["manage.list_state", "pytest.raises"]}, "test_runner_returns.py": {"libraries": ["errno", "os", "salt.utils.jid", "socket", "salt.utils.files", "salt.utils.yaml", "tests.support.runtests.RUNTIME_VARS", "salt.utils.args", "pytest", "salt.payload", "tests.support.case.ShellCase", "tempfile"], "function_names": ["tearDown", "test_runner_returns_enabled", "clean_return", "write_conf", "test_runner_returns_disabled", "setUp"], "function_calls": ["Exception"], "class_names": ["RunnerReturnsTest"], "class_method_calls": ["socket.gethostname", "RUNTIME_VARS.RUNNING_TESTS_USER", "self.conf", "os.path", "salt.payload", "exc.errno", "ret.get", "self.write_conf", "self.assertEqual", "tempfile.NamedTemporaryFile", "pytest.mark", "self.assertFalse", "data.pop", "errno.EEXIST", "self.job_dir", "fp_.read", "os.makedirs", "self.clean_return", "salt.utils", "self.hash_type", "os.environ", "self.master_d_dir", "self.master_opts", "self.config_dir", "self.run_run_plus"]}, "test_salt.py": {"libraries": ["sys", "os", "salt.utils.path", "time", "subprocess", "pytestshellutils.utils.processes.ProcessResult", "pytestshellutils.utils.processes.terminate_process", "pytest", "logging", "signal", "tempfile", "salt.defaults.exitcodes", "shutil"], "function_names": ["test_exit_status_correct_usage", "test_exit_status_unknown_argument", "test_context_retcode_salt", "test_minion_65400", "test_salt_error", "salt_minion_2", "test_missing_minion", "test_interrupt_on_long_running_job"], "function_calls": ["ProcessResult", "round", "len", "terminate_process", "isinstance"], "class_names": [], "class_method_calls": ["log.error", "terminal_stderr.read", "proc._translate_newlines", "salt_master.config_dir", "ret.stderr", "log.debug", "os.errno", "pytest.fixture", "shutil.copyfile", "salt_master.config", "exc.errno", "terminal_stdout.close", "ret.data", "ret.stdout", "salt_cli.get_script_path", "logging.getLogger", "sys.stdout", "tempfile.SpooledTemporaryFile", "pytest.mark", "salt_cli.run", "time.sleep", "factory.started", "pytest.fail", "terminal_stdout.read", "proc.args", "salt_master.salt_minion_daemon", "terminal_stderr.close", "salt_minion.id", "terminal_stdout.flush", "terminal_stderr.seek", "ret.returncode", "proc.poll", "subprocess.TimeoutExpired", "time.time", "proc.pid", "proc.wait", "salt.utils", "salt.defaults", "terminal_stderr.flush", "sys.executable", "os.kill", "proc.returncode", "salt_master.state_tree", "terminal_stdout.seek", "os.remove", "proc.communicate", "subprocess.Popen", "sys.stderr", "signal.SIGINT"]}, "test_env.py": {"libraries": ["tests.support.case.ModuleCase", "os", "textwrap", "tests.support.mixins.SaltReturnAssertsMixin", "salt.utils.files", "tests.support.runtests.RUNTIME_VARS", "pytest"], "function_names": ["tearDown", "setUp", "test_env_module_sets_key"], "function_calls": [], "class_names": ["EnvTestCase"], "class_method_calls": ["RUNTIME_VARS.BASE_FILES", "self.state_file_name", "self.state_file_set_var", "textwrap.dedent", "pytest.mark", "self.run_function", "os.remove", "self.assertTrue", "wfh.write", "os.path", "salt.utils", "self.state_name"]}, "test_arguments.py": {"libraries": ["tests.support.case.ModuleCase", "salt.utils.args", "pytest"], "function_names": ["test_kwarg_name_containing_dashes", "test_argument_containing_pound_sign", "test_unsupported_kwarg"], "function_calls": [], "class_names": ["ArgumentTestCase"], "class_method_calls": ["self.assertEqual", "self.run_function", "pytest.mark", "salt.utils", "self.assertIn"]}, "test_enabled.py": {"libraries": ["tests.support.case.ModuleCase", "os", "textwrap", "salt.utils.files", "salt.utils.platform", "tests.support.runtests.RUNTIME_VARS", "pytest"], "function_names": ["test_shell_disabled", "test_template_default_disabled", "test_shell_default_enabled", "test_template_shell"], "function_calls": [], "class_names": ["EnabledTest"], "class_method_calls": ["RUNTIME_VARS.BASE_FILES", "self.assertEqual", "fp_.write", "textwrap.dedent", "self.run_function", "pytest.mark", "os.remove", "self.cmd", "os.path", "salt.utils", "ret.strip"]}, "test_master_tops.py": {"libraries": ["tests.support.case.ShellCase", "pytest"], "function_names": ["test_custom_tops_gets_utilized"], "function_calls": ["any"], "class_names": ["MasterTopsTest"], "class_method_calls": ["self.run_call", "self.assertTrue", "pytest.mark"]}, "test_spm.py": {"libraries": ["os", "types", "salt.spm", "salt.utils.files", "pytest", "tests.support.mock.patch"], "function_names": ["confirm", "test_failure_paths", "formula", "formula_definition", "status", "client", "minion_config", "error", "test_build_install", "__init__", "formula_contents", "formulas_dir", "test_repo_paths"], "function_calls": ["str", "SPMTestUserInterface", "patch", "len"], "class_names": ["SPMTestUserInterface"], "class_method_calls": ["self._status", "formula.definition", "self._error", "line.format", "self._confirm", "path.write_text", "pytest.fixture", "salt.spm", "client.run", "os.path", "_minion_config.update", "pytest.mark", "client.ui", "fdir.mkdir", "os.makedirs", "types.SimpleNamespace", "salt.utils", "patch.dict", "minion_opts.copy", "formula.contents", "rfh.read"]}, "test_build.py": {"libraries": ["tests.support.case.ModuleCase", "os", "salt.utils.files", "tests.support.case.SPMCase", "pytest", "salt.utils.path", "shutil"], "function_names": ["tearDown", "test_spm_build_exclude", "test_spm_build_big_file", "setUp", "test_spm_build"], "function_calls": [], "class_names": ["SPMBuildTest"], "class_method_calls": ["self.config", "os.makedirs", "fp.write", "self.formula_dir", "self.run_spm", "self.assertNotIn", "pytest.mark", "self.run_function", "shutil.rmtree", "self.skipTest", "self.assertTrue", "self.formula_sls_dir", "os.path", "salt.utils", "self._tmp_spm", "self._spm_config", "self._spm_build_files", "self.assertIn"]}, "test_files.py": {"libraries": ["os", "salt.utils.files", "tests.support.mock.MagicMock", "pytest", "io", "tests.support.mock.patch", "copy"], "function_names": ["test_case_sensitive_filesystem_lin", "test_safe_walk_symlink_recursion", "_create_temp_structure", "test_recursive_copy", "test_case_sensitive_filesystem_win", "test_case_sensitive_filesystem_dar", "test_fopen_binary_line_buffering", "test_safe_rm_exceptions", "test_fopen_with_disallowed_fds", "test_safe_rm", "_validate_folder_structure_and_contents"], "function_calls": ["MagicMock", "_create_temp_structure", "patch", "str", "sorted", "_validate_folder_structure_and_contents"], "class_names": [], "class_method_calls": ["os_remove_mock.called", "structure.items", "desired_structure.update", "os.path", "open_mock.call_args", "tmp_path.stat", "pytest.mark", "open_mock.called", "pytest.fail", "fh.write", "os.makedirs", "fh.read", "files.items", "os.mkdir", "salt.utils", "os.symlink", "desired_structure.items", "io.DEFAULT_BUFFER_SIZE", "paths.append", "pytest.xfail", "copy.copy"]}, "test_info.py": {"libraries": ["tests.support.case.SPMCase", "pytest", "shutil"], "function_names": ["test_spm_info", "setUp", "tearDown"], "function_calls": [], "class_names": ["SPMInfoTest"], "class_method_calls": ["self.config", "self.run_spm", "pytest.mark", "shutil.rmtree", "self._tmp_spm", "self._spm_config", "self._spm_build_files", "self._spm_create_update_repo", "self.assertIn"]}, "test_install.py": {"libraries": ["sys", "salt.modules.virtualenv_mod.KNOWN_BINARY_NAMES", "os", "salt.version", "salt.utils.files", "salt.utils.platform", "json", "re", "pathlib", "logging", "pytest", "salt.utils.path"], "function_names": ["test_egg", "use_static_requirements", "virtualenv", "test_setup_install", "_check_skip", "test_wheel", "test_sdist", "test_salt_install_args", "use_static_requirements_ids"], "function_calls": ["str", "list"], "class_names": [], "class_method_calls": ["request.param", "cache_dir.iterdir", "site_packages_dir.glob", "installed_salt_path.is_dir", "log.debug", "pytest.fixture", "venv.venv_python", "cmd.stdout", "log.info", "syspath.exists", "cache_dir.glob", "ret.stdout", "re.search", "logging.getLogger", "salt.version", "json.loads", "salt_generated_version_file_path.is_file", "package.unlink", "pytest.mark", "site_packages_dir.is_dir", "pytest.fail", "fname.unlink", "virtualenv.environ", "venv.venv_dir", "packages.append", "subdir.pop", "salt_generated_package.name", "pytest.skip", "ret.returncode", "egg_ver.replace", "pathlib.Path", "salt_generated_version_file_path.open", "fname.name", "salt.utils", "venv.run", "site_packages_dir.joinpath", "whl_ver.replace", "os.environ", "rfh.read", "venv.install", "sys.version_info", "installed_salt_path.joinpath", "fp.read"]}, "test_remove.py": {"libraries": ["salt.modules.win_file", "salt.utils.path", "pytest"], "function_names": ["configure_loader_modules", "test_issue_52002_check_file_remove_symlink", "test_dir"], "function_calls": [], "class_names": [], "class_method_calls": ["test_dir.rmdir", "target.mkdir", "tmp_path_factory.mktemp", "test_dir.exists", "pytest.fixture", "pytest.mark", "symlink.symlink_to", "symlink.parent", "salt.utils", "win_file.remove"]}, "test_repo.py": {"libraries": ["tests.support.case.SPMCase", "os", "pytest", "shutil"], "function_names": ["test_spm_create_update_repo", "setUp", "tearDown"], "function_calls": [], "class_names": ["SPMRepoTest"], "class_method_calls": ["self.config", "pytest.mark", "shutil.rmtree", "self.assertTrue", "os.path", "self._tmp_spm", "self._spm_config", "self._spm_build_files", "self._spm_create_update_repo"]}, "test_state.py": {"libraries": ["textwrap", "salt.utils.odict", "tests.support.unit.TestCase", "salt.utils.state", "copy"], "function_names": ["test_check_result", "test_merge_result", "test_merge_changes", "test_merge_comments", "test_merge_empty_comments"], "function_calls": [], "class_names": ["StateUtilTestCase", "UtilStateMergeSubreturnTestcase"], "class_method_calls": ["self.assertDictEqual", "test_invalid_true_ht_states.items", "self.assertMultiLineEqual", "self.assertEqual", "test_valid_true_ht_states.items", "t_.split", "self.assertNotIn", "copy.deepcopy", "test_valid_false_states.items", "textwrap.dedent", "self.assertTrue", "test_valid_true_states.items", "self.assertFalse", "self.sub_ret", "salt.utils", "self.main_ret"]}, "test_alternatives.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.alternatives", "pytest"], "function_names": ["configure_loader_modules", "test_set", "test_install", "test_auto", "test_remove"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["alternatives.__salt__", "alternatives.install", "alternatives.__opts__", "ret.update", "pytest.fixture", "alternatives.set_", "patch.dict", "alternatives.auto", "alternatives.remove"]}, "test_archive.py": {"libraries": ["os", "salt.states.archive", "salt.utils.platform", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_extracted_when_if_missing_path_exists", "configure_loader_modules", "test_skip_files_list_verify_success", "test_tar_bsdtar", "_isfile_side_effect", "test_clean_parent_conflict", "test_tar_gnutar", "test_extracted_tar", "test_skip_files_list_verify_conflict", "test_tar_bsdtar_with_trim_output"], "function_calls": ["patch", "MagicMock", "zip"], "class_names": [], "class_method_calls": ["ret_opts.append", "os.sep", "archive.__salt__", "mock_run.assert_called_with", "archive.__states__", "pytest.fixture", "archive.extracted", "os.path", "salt.utils", "patch.dict", "path.lower", "archive.__opts__", "patch.object"]}, "test_bower.py": {"libraries": ["salt.states.bower", "salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_installed_new_with_error", "test_removed_existing_with_error", "test_installed_new_with_exc", "test_installed_with_error", "test_removed_with_error", "test_bootstrap_not_needed", "test_bootstrap_success", "test_bootstrap_with_error", "test_removed_existing", "test_removed_not_installed", "test_installed_success", "test_installed_not_needed"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["bower.bootstrap", "bower.__salt__", "bower.installed", "pytest.fixture", "patch.dict", "bower.removed"]}, "test_cmd.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.states.cmd", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_call", "configure_loader_modules", "test_run", "test_wait", "test_run_root", "test_wait_script", "test_script", "test_script_runas_no_password", "test_wait_call", "test_mod_watch", "func", "test_script_runas_password"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["cmd.__grains__", "cmd.run", "cmd.wait_script", "cmd.mod_watch", "cmd.__salt__", "cmd.__opts__", "pytest.fixture", "pytest.mark", "ret.update", "cmd.call", "cmd.wait", "cmd.script", "patch.dict", "cmd.wait_call"]}, "test_compiler.py": {"libraries": ["tests.support.case.ModuleCase"], "function_names": ["test_jinja_deep_error", "test_multi_state"], "function_calls": [], "class_names": ["CompileTest"], "class_method_calls": ["self.assertIsInstance", "self.assertTrue", "self.run_function"]}, "test_handle_error.py": {"libraries": ["tests.support.case.ModuleCase", "pytest"], "function_names": ["test_function_do_not_return_dictionary_type"], "function_calls": [], "class_names": ["HandleErrorTest"], "class_method_calls": ["self.assertTrue", "self.run_function", "pytest.mark"]}, "test_handle_iorder.py": {"libraries": ["tests.support.case.ModuleCase"], "function_names": ["test_handle_iorder"], "function_calls": ["sorted"], "class_names": ["HandleOrderTest"], "class_method_calls": ["self.assertEqual", "c.get", "self.run_function"]}, "test_host.py": {"libraries": ["collections.OrderedDict", "salt.states.zabbix_host", "tests.support.mock.MagicMock", "pytest", "ast", "tests.support.mock.patch"], "function_names": ["test_create_a_new_host_with_additional_parameters", "test_update_an_existent_host_proxy", "test_update_inventory_and_restore_inventory_mode", "test_update_a_host_with_additional_parameters", "test_create_a_new_host_with_inventory_as_a_dict", "test_create_a_new_host_with_proxy_by_id", "test_create_a_basic_new_host", "test_update_inventory_values", "test_update_a_hostinterface", "test_create_a_new_host_with_proxy_by_name", "test_ensure_that_inventory_is_not_sent_when_inventory_disabled", "test_add_a_new_hostinterface", "test_create_a_new_host_with_multiple_groups", "existing_host_responses", "test_update_inventory_keys", "test_ensure_nothing_happens_when_host_is_in_desired_state", "configure_loader_modules", "test_create_a_new_host_with_missing_proxy", "test_change_a_host_group", "test_create_a_new_host_with_missing_groups", "test_ensure_nothing_happens_when_inventory_is_not_sent", "basic_host_configuration", "test_update_inventory_values_without_clear_existing_data", "test_to_add_new_groups_to_a_host", "test_create_a_new_host_with_inventory_as_a_list", "test_create_a_new_host_with_multiple_interfaces", "test_clear_inventory_value_sending_an_empty_key"], "function_calls": ["MagicMock", "OrderedDict"], "class_names": [], "class_method_calls": ["zabbix_host.present", "ast.literal_eval", "mock_host_create.call_args", "mock_hostinterface_update.assert_called_with", "mock_host_update.called", "mock_host_inventory_set.called", "mock_hostinterface_create.assert_called_with", "pytest.fixture", "mock_host_update.assert_called_with", "patch.dict", "mock_host_create.called", "mock_host_inventory_set.assert_called_with", "zabbix_host.__salt__", "mock_host_create.assert_called_with"]}, "test_keystone.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.keystone", "pytest"], "function_names": ["test_user_present", "configure_loader_modules", "test_endpoint_absent", "test_tenant_absent", "test_tenant_present", "test_role_present", "test_role_absent", "test_service_present", "test_service_absent", "test_endpoint_present", "test_user_absent"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["keystone.tenant_present", "keystone.__opts__", "keystone.role_absent", "keystone.user_absent", "keystone.endpoint_absent", "keystone.user_present", "keystone.service_absent", "pytest.fixture", "ret.update", "keystone.__salt__", "keystone.service_present", "keystone.endpoint_present", "keystone.role_present", "patch.dict", "keystone.tenant_absent"]}, "test_lxd.py": {"libraries": ["tests.support.case.ModuleCase", "salt.modules.lxd", "tests.support.mixins.SaltReturnAssertsMixin", "pytest"], "function_names": ["test_01__init_lxd"], "function_calls": [], "class_names": ["LxdTestCase"], "class_method_calls": ["self.assertSaltTrueReturn", "self.run_state", "salt.modules", "pytest.mark"]}, "test_lxd_container.py": {"libraries": ["tests.support.case.ModuleCase", "salt.modules.lxd", "tests.support.mixins.SaltReturnAssertsMixin", "pytest"], "function_names": ["tearDown", "test_09__stop_container", "test_08__running_container", "test_02__create_container", "test_03__change_container", "test_10__delete_container", "setUp"], "function_calls": [], "class_names": ["LxdContainerTestCase"], "class_method_calls": ["self.assertSaltTrueReturn", "self.run_state", "salt.modules", "pytest.mark"]}, "test_lxd_image.py": {"libraries": ["tests.support.case.ModuleCase", "salt.modules.lxd", "tests.support.mixins.SaltReturnAssertsMixin", "pytest"], "function_names": ["test_02__pull_image", "test_03__delete_image"], "function_calls": [], "class_names": ["LxdImageTestCase"], "class_method_calls": ["self.assertSaltTrueReturn", "self.run_state", "salt.modules", "pytest.mark"]}, "test_lxd_profile.py": {"libraries": ["tests.support.case.ModuleCase", "salt.modules.lxd", "tests.support.mixins.SaltReturnAssertsMixin", "pytest"], "function_names": ["tearDown", "test_03__change_profile", "test_02__create_profile", "test_04__delete_profile"], "function_calls": [], "class_names": ["LxdProfileTestCase"], "class_method_calls": ["self.assertSaltTrueReturn", "self.run_state", "salt.modules", "pytest.mark"]}, "test_match.py": {"libraries": ["salt.matchers.compound_match", "salt.loader", "salt.matchers.glob_match", "salt.matchers.list_match", "pytest", "salt.matchers.pcre_match", "tests.support.mock.MagicMock", "salt.exceptions.SaltException", "salt.modules.match", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_filter_by_merge_fail", "test_compound", "test_filter_by", "test_watch_for_opts_mismatch_compound_match", "test_ifelse", "test_filter_by_merge_lists_rep", "test_filter_by_merge_lists_agg", "test_watch_for_opts_mismatch_list_match", "test_matchers_loaded_only_once", "minion_id", "test_watch_for_opts_mismatch_glob_match", "test_pcre_match_different_minion_id", "test_compound_with_minion_id", "test_list_match_different_minion_id", "test_glob_match_different_minon_id", "test_filter_by_merge_with_none", "test_filter_by_merge"], "function_calls": ["patch", "MagicMock", "range", "len"], "class_names": [], "class_method_calls": ["mock_compound_match.assert_called_with", "match.glob", "match.list_", "match.ifelse", "matchers.assert_called_once", "pytest.fixture", "patch.object", "pytest.raises", "match.__opts__", "matchers.call_args", "list_match.match", "compound_match.match", "salt.loader", "mock_compound_match.call_count", "match.compound", "glob_match.match", "pcre_match.match", "mock_compound_match.assert_called_once_with", "match.pcre", "match.filter_by"]}, "test_mysql_database.py": {"libraries": ["tests.support.case.ModuleCase", "tests.support.mixins.SaltReturnAssertsMixin", "pytest", "MySQLdb", "salt.utils.path"], "function_names": ["test_present_absent_fuzzy", "setUp", "_test_database", "test_utf8_from_sls_file", "test_present_absent"], "function_calls": ["super", "isinstance", "AssertionError", "repr"], "class_names": ["MysqlDatabaseStateTest"], "class_method_calls": ["ret.items", "kwargs.pop", "self.assertInSaltComment", "ret2.popitem", "self.assertEqual", "pytest.mark", "self.assertSaltTrueReturn", "self.run_state", "self.run_function", "self.skipTest", "self.password", "salt.utils", "self.user", "self.assertSaltStateChangesEqual", "self._test_database"]}, "test_mysql_grants.py": {"libraries": ["tests.support.case.ModuleCase", "salt.modules.mysql", "tests.support.mixins.SaltReturnAssertsMixin", "pytest", "logging", "MySQLdb", "salt.utils.path"], "function_names": ["tearDown", "_userCreation", "_userRemoval", "setUp", "test_grant_present_absent"], "function_calls": ["super"], "class_names": ["MysqlGrantsStateTest"], "class_method_calls": ["ret2.popitem", "self._userRemoval", "self.table2", "self.run_function", "self.password", "log.info", "self._userCreation", "logging.getLogger", "mysqlmod.quote_identifier", "pytest.mark", "self.assertSaltTrueReturn", "self.run_state", "self.user", "self.table1", "salt.utils", "self.testdb2", "self.users", "self.testdb1", "self.skipTest"]}, "test_network.py": {"libraries": ["salt.modules.network", "salt._compat.ipaddress", "socket", "salt.exceptions.CommandExecutionError", "tests.support.mock.mock_open", "tests.support.unit.TestCase", "salt.config", "tests.support.mock.MagicMock", "os.path", "logging", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch", "salt.utils.path", "shutil"], "function_names": ["test___virtual__is_windows_true", "patched_which", "test_get_route", "test_in_subnet", "test_get_hostname", "sendto", "test_ip_addrs6", "test___virtual__is_windows_false", "test_routes", "test_default_route_ipv6", "setup_loader_modules", "test_netstat", "test_interface", "test_connect", "setsockopt", "test_arp", "test_active_tcp", "test_subnets", "test_interface_ip", "test_get_bufsize", "test_interfaces", "test_dig", "test_mod_hostname", "test_wol_success", "test_ping", "test_is_private", "test_traceroute", "test_is_loopback", "test_hw_addr", "test_mod_hostname_quoted", "__call__", "test_mod_bufsize", "test_default_route", "__init__", "test_ip_addrs", "test_mod_hostname_unquoted", "test_wol_bad_mac"], "function_calls": ["patch", "MagicMock", "Exception", "mock_open"], "class_names": ["NetworkTestCase", "MockSocket"], "class_method_calls": ["self.assertDictEqual", "self.assertRaises", "mock_socket.connect", "network.get_route", "ipaddress.IPv4Address", "mock_is_windows.return_value", "network.routes", "network.interface", "network.interface_ip", "network.in_subnet", "mock_socket.settimeout", "network.is_loopback", "network.interfaces", "os.path", "patch.object", "network.dig", "network.__salt__", "logging.getLogger", "network.mod_bufsize", "self.assertEqual", "self.assertListEqual", "network.wol", "network.ip_addrs", "network.active_tcp", "self.assertFalse", "network.mod_hostname", "network.__utils__", "network.ip_addrs6", "shutil.which", "network.get_bufsize", "network.default_route", "mock_socket.shutdown", "network.netstat", "salt.loader", "network.__grains__", "patch.dict", "network.__virtual__", "fopen_mock.filehandles", "ipaddress.IPv6Address", "network.traceroute", "network.subnets", "network.hw_addr", "network.is_private", "network.arp", "self.assertTrue", "salt.config", "network.connect", "network.get_hostname", "network.ping", "mock_socket.side_effect"]}, "test_rabbitmq_user.py": {"libraries": ["tests.support.case.ModuleCase", "tests.support.mixins.SaltReturnAssertsMixin", "pytest"], "function_names": ["test_present", "setUp", "absent"], "function_calls": ["super"], "class_names": ["RabbitUserTestCase"], "class_method_calls": ["self.assertInSaltComment", "self.run_function", "pytest.mark", "self.run_state", "self.skipTest", "self.assertSaltFalseReturn"]}, "test_rabbitmq_vhost.py": {"libraries": ["tests.support.case.ModuleCase", "tests.support.mixins.SaltReturnAssertsMixin", "pytest"], "function_names": ["test_present", "setUp", "absent"], "function_calls": ["super"], "class_names": ["RabbitVHostTestCase"], "class_method_calls": ["self.run_function", "pytest.mark", "self.run_state", "self.skipTest", "self.assertSaltFalseReturn"]}, "test_reg.py": {"libraries": ["salt.utils.win_reg", "win32api", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.modules.reg", "saltfactories.utils.random_string"], "function_names": ["test_value_exists_invalid_hive", "test_value_exists_no_vname", "test_read_value_non_existing", "test_set_value_invalid_hive", "test_list_values_invalid_hive", "test_read_value_non_existing_key", "test_key_exists_existing", "test_read_value_invalid_hive", "test_set_value_unicode_value", "test_list_values_existing", "test_read_value_unknown_key_error", "test_read_value_existing", "test_delete_value_non_existing", "test_value_exists_non_existing", "test_delete_key_recursive_failed_to_open_key", "test_value_exists_unknown_key_error", "test_set_value_reg_dword", "test_delete_key_recursive_failed_to_delete", "test_list_keys_non_existing", "test_list_keys_invalid_hive", "test_delete_key_recursive_key_not_found", "test_delete_value", "test_delete_value_unicode", "test_set_value_reg_qword", "configure_loader_modules", "test_value_exists_empty_default_value", "test_list_keys_unknown_key_error", "test_delete_value_unicode_key", "test_read_value_multi_sz_empty_list", "test_key_exists_invalid_hive", "test_list_values_non_existing", "test_delete_key_recursive_unicode", "test_value_exists_existing", "test_read_value_default", "test_set_value_type_error", "test_key_exists_unknown_key_error", "test_delete_key_recursive_too_close", "test_key_exists_non_existing", "test_delete_value_unicode_vname", "test_set_value_default", "test_delete_value_invalid_hive", "test_set_value_value_error", "test_set_value", "test_set_value_system_error", "test_set_value_open_create_failure", "test_delete_key_recursive", "test_value_exists_key_not_exist", "test_delete_value_unknown_error", "test_set_value_unicode_key", "test_read_value_unknown_value_error", "test_list_values_unknown_key_error", "test_delete_key_recursive_invalid_hive", "test_list_keys_existing"], "function_calls": ["MagicMock", "patch", "SystemError", "TypeError", "random_string", "WindowsError", "ValueError"], "class_names": [], "class_method_calls": ["keys.append", "reg.list_values", "win32api.error", "pytest.fixture", "pytest.mark", "reg.key_exists", "reg.read_value", "reg.set_value", "pytest.raises", "reg.delete_value", "reg.delete_key_recursive", "reg.value_exists", "salt.utils", "reg.list_keys"]}, "test_renderers.py": {"libraries": ["tests.support.case.ModuleCase", "pytest"], "function_names": ["test_dot_notation", "test_salt_contains_function"], "function_calls": [], "class_names": ["TestJinjaRenderer"], "class_method_calls": ["ret.values", "self.assertTrue", "self.run_function", "pytest.mark"]}, "test_ssh_auth.py": {"libraries": ["salt.states.ssh_auth", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present", "test_manage"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["ssh_auth.absent", "ssh_auth.__salt__", "pytest.fixture", "ret.update", "ssh_auth.manage", "patch.dict", "call_mocked_absent.return_value", "call_mocked_present.return_value", "ssh_auth.__opts__", "ssh_auth.present"]}, "test_ssh_known_hosts.py": {"libraries": ["os", "salt.states.ssh_known_hosts", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["ssh_known_hosts.present", "ssh_known_hosts.__salt__", "ssh_known_hosts.absent", "ret.update", "pytest.fixture", "ssh_known_hosts.__opts__", "os.path", "patch.dict", "patch.object"]}, "test_x509.py": {"libraries": ["tests.support.helpers.dedent", "salt.states.x509", "salt.utils.files", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "pytest", "salt.modules.x509", "tests.support.mixins.LoaderModuleMockMixin", "tempfile", "M2Crypto"], "function_names": ["setup_loader_modules", "test_private_key_fips_mode", "test_certificate_info_matches"], "function_calls": ["dedent", "MagicMock"], "class_names": ["X509FipsTestCase", "X509TestCase"], "class_method_calls": ["x509_mod.get_pem_entry", "pytest.mark", "fd.write", "self.file_managed_mock", "salt.utils", "x509.private_key_managed", "x509_mod.get_private_key_size", "tempfile.mkstemp", "test_key.strip", "x509._certificate_info_matches"]}, "test_idem.py": {"libraries": ["contextlib.contextmanager", "tests.support.sminion", "salt.state", "salt.utils.idem", "pytest", "tempfile", "salt.utils.path"], "function_names": ["test_state", "test_bad_state"], "function_calls": ["float"], "class_names": [], "class_method_calls": ["tests.support", "fh.name", "salt.state", "tempfile.NamedTemporaryFile", "pytest.mark", "fh.flush", "state_obj.call_chunk", "salt_call_cli.run", "fh.write", "idem.HAS_POP", "ret.data"]}, "test_smb.py": {"libraries": ["os", "salt.utils.smb", "time", "getpass", "subprocess", "tests.support.case.TestCase", "salt.utils.files", "pytest", "logging", "signal", "salt.utils.network", "tempfile", "salt.utils.path", "shutil"], "function_names": ["test_delete_file_v6", "test_mkdirs_v6", "test_delete_dirs_v6", "test_write_file_ipv6", "test_mkdirs_v4", "test_connection_v6", "check_pid", "test_write_str_v4", "tearDownClass", "test_delete_file_v4", "test_write_file_ipv4", "test_write_str_v6", "setUpClass", "test_delete_dirs_v4", "test_connection"], "function_calls": ["int", "Exception", "bool"], "class_names": ["TestSmb"], "class_method_calls": ["tempfile.mktemp", "fp.write", "getpass.getuser", "os.path", "log.warning", "logging.getLogger", "cls.username", "pytest.mark", "time.sleep", "TBE.format", "CONFIG.format", "self.public_dir", "shutil.which", "os.makedirs", "tempfile.mkdtemp", "conn.close", "cls.check_pid", "self.username", "cls._pid", "salt.utils", "signal.SIGTERM", "os.kill", "cls.samba_dir", "cls.public_dir", "subprocess.Popen", "cls._smbd", "os.chmod", "fp.read"]}, "test_win_runas.py": {"libraries": ["salt.utils.win_runas", "pytest"], "function_names": ["test_split_username"], "function_calls": [], "class_names": [], "class_method_calls": ["win_runas.split_username", "pytest.mark"]}, "minionswarm.py": {"libraries": ["sys", "tests.support.runtests", "os", "time", "random", "subprocess", "hashlib", "salt.utils.files", "salt.utils.yaml", "optparse", "uuid", "signal", "salt", "tempfile", "shutil"], "function_names": ["shutdown", "_pki_dir", "start_minions", "parse", "start", "start_master", "__init__", "prep_configs", "clean_configs", "mkconf"], "function_calls": ["super", "range", "parse", "Swarm", "str", "MinionSwarm", "int", "len", "set", "MasterSwarm", "print"], "class_names": ["MinionSwarm", "MasterSwarm", "Swarm"], "class_method_calls": ["master_swarm.start", "random.choice", "parser.parse_args", "self.conf", "self.swarm_root", "os.listdir", "hashlib.md5", "swarm.start", "subprocess.call", "os.path", "swarm.shutdown", "sys.stdout", "time.sleep", "self.zfill", "self._pki_dir", "fn_.partition", "salt.__file__", "uuid.uuid4", "shutil.copy", "tests.support", "fp_.read", "os.makedirs", "tempfile.mkdtemp", "self.opts", "options.__dict__", "shutil.rmtree", "self.prep_configs", "salt.utils", "optparse.OptionParser", "random.seed", "signal.SIGTERM", "self.confs", "self.clean_configs", "os.kill", "self.start_master", "self.mkconf", "data.update", "self.pki", "os.remove", "parser.add_option", "minions.start_minions"]}, "modparser.py": {"libraries": ["sys", "os", "modulefinder", "salt.utils.json", "pprint", "salt.utils.yaml", "argparse"], "function_names": ["parse", "mod_data", "scan"], "function_calls": ["scan", "parse", "mod_data", "print", "exit"], "class_names": [], "class_method_calls": ["finder.badmodules", "os.walk", "out.__dict__", "sys.stderr", "mod.__file__", "parser.parse_args", "name.split", "pprint.pprint", "finder.load_file", "finder.modules", "ret.update", "modulefinder.ModuleFinder", "full.endswith", "os.path", "salt.utils", "basemod.startswith", "argparse.ArgumentParser", "parser.add_argument"]}, "packdump.py": {"libraries": ["pprint", "os", "sys", "salt.utils.msgpack"], "function_names": ["dump"], "function_calls": ["open", "print", "dump"], "class_names": [], "class_method_calls": ["sys.argv", "pprint.pprint", "os.path", "salt.utils", "fp_.read"]}, "test_consul.py": {"libraries": ["salt.states.consul", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_acl_absent", "test_acl_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["logging.getLogger", "consul.acl_absent", "pytest.fixture", "consul.acl_present", "consul.__salt__", "patch.dict", "patch.object"]}, "test_etcd.py": {"libraries": ["salt.loader", "tests.pytests.functional.cache.helpers.run_common_cache_tests", "pytest", "logging", "tests.support.pytest.etcd.*", "salt.cache"], "function_names": ["test_caching", "etcd_version", "cache"], "function_calls": ["run_common_cache_tests"], "class_names": [], "class_method_calls": ["logging.getLogger", "request.param", "EtcdVersion.v3_v2_mode", "pytest.skip", "salt.cache", "pytest.fixture", "pytest.mark", "minion_opts.copy", "EtcdVersion.v2", "pytest.importorskip"]}, "test_localfs.py": {"libraries": ["salt.exceptions", "os", "salt.utils.files", "pytest", "tests.support.mock.patch", "salt.tokens.localfs"], "function_names": ["__call__", "test_get_token_should_raise_SaltDeserializationError_if_token_file_is_empty", "test_get_token_should_return_token_if_exists", "test_write_token", "__init__", "expected_data", "test_get_token_should_raise_SaltDeserializationError_if_token_file_is_malformed"], "function_calls": ["str", "CalledWith", "patch", "len"], "class_names": ["CalledWith"], "class_method_calls": ["salt.exceptions", "rename.called_with", "salt.tokens", "f.write", "pytest.fixture", "f.truncate", "self.func", "pytest.raises", "os.path", "salt.utils", "fopen.called_with", "self.called_with", "os.rename"]}, "test_memcache.py": {"libraries": ["tests.support.mock.patch", "salt.cache", "pytest", "salt.payload"], "function_names": ["opts", "test_max_items", "test_flush", "cache", "test_fetch", "test_full_cleanup", "test_store", "test_fetch_debug"], "function_calls": ["patch"], "class_names": [], "class_method_calls": ["cache_fetch_mock.assert_called_once_with", "cache.hit", "cache_flush_mock.reset_mock", "cache.store", "cache.cleanup", "cache_fetch_mock.reset_mock", "pytest.fixture", "cache_store_mock.reset_mock", "cache.fetch", "cache.flush", "cache_flush_mock.assert_called_once_with", "cache.call", "cache_fetch_mock.assert_not_called", "salt.cache", "cache_store_mock.assert_called_once_with"]}, "test_redis.py": {"libraries": ["saltfactories.utils.random_string", "time", "salt.exceptions.SaltCacheError", "tests.pytests.functional.cache.helpers.run_common_cache_tests", "pytest", "logging", "salt.cache"], "function_names": ["test_caching", "redis_cluster_cache", "cache", "redis_container", "test_redis_cluster_cache_should_import_correctly"], "function_calls": ["run_common_cache_tests", "random_string"], "class_names": [], "class_method_calls": ["logging.getLogger", "rediscluster_exceptions.RedisClusterException", "redis_cluster_cache.store", "cache.contains", "pytest.fixture", "salt_factories.get_container", "pytest.mark", "container.started", "redis_container.get_host_port_binding", "time.time", "pytest.raises", "pytest.fail", "time.sleep", "minion_opts.copy", "salt.cache", "pytest.importorskip"]}, "test_client.py": {"libraries": ["salt.utils.vault.client", "salt.exceptions", "requests", "tests.support.mock.ANY", "salt.utils.vault", "pytest", "tests.pytests.unit.utils.vault.conftest._mock_json_response", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["test_vault_client_token_renew_increment_is_honored", "test_vault_client_unwrap_should_raise_appropriate_errors", "test_vault_client_request_returns_true_when_no_data_is_reported", "test_vault_client_request_hydrates_wrapped_response", "test_vault_client_token_lookup_requires_token_for_unauthenticated_client", "test_vault_client_wrap_info_should_fail_with_sensible_response", "test_vault_client_verify_pem", "test_vault_client_request_raw_increases_use_count_when_necessary_depending_on_path", "test_vault_client_request_raw_increases_use_count_when_necessary_depending_on_response", "test_vault_client_unwrap_returns_whole_response", "test_vault_client_get_config", "test_vault_client_wrapper_should_not_require_payload", "test_vault_client_request_respects_raise_error", "test_vault_client_token_renew_self_updates_token", "test_vault_client_token_lookup_returns_data_only", "test_vault_client_token_renew_supports_token_arg", "test_vault_client_unwrap_should_fail_on_unexpected_creation_path", "test_vault_client_request_raw_headers_namespace", "test_vault_client_unwrap_should_default_to_token_header_before_payload", "test_vault_client_request_raw_headers_additional", "test_vault_client_token_lookup_supports_token_arg", "test_get_expected_creation_path_fails_for_unknown_type", "test_vault_client_token_renew_self_possible", "test_get_expected_creation_path", "test_vault_client_wrap_info_only_data", "test_vault_client_token_renew_uses_accessor", "test_vault_client_unwrap_should_match_check_expected_creation_path", "test_vault_client_token_lookup_uses_accessor", "test_vault_client_token_valid", "test_vault_client_token_lookup_self_possible", "test_vault_client_request_raw_headers_wrap", "test_vault_client_token_lookup_respects_raw", "test_vault_client_request_raw_url", "test_vault_client_request_raw_kwargs_passthrough", "test_vault_client_request_returns_whole_response_data", "test_vault_client_request_raw_does_not_increase_use_count_with_unauthd_endpoint", "test_vault_client_token_valid_false", "test_vault_client_request_raw_does_not_raise_http_exception", "test_vault_client_wrapper_should_require_payload"], "function_calls": ["Mock", "patch", "_mock_json_response", "tgt", "str", "getattr", "req_any", "isinstance"], "class_names": [], "class_method_calls": ["vault.VaultUnsupportedOperationError", "req.assert_called_once", "client.namespace", "vault.VaultNotFoundError", "vault.VaultUnavailableError", "payload.get", "vault.VaultUnwrapException", "vclient._get_expected_creation_path", "req_any.assert_not_called", "client.auth", "patch.object", "client.token_renew", "headers.get", "vclient.VaultClient", "session.return_value", "pytest.mark", "req.call_args", "req.assert_called_with", "pytest.raises", "vault.VaultServerError", "requests.exceptions", "res.json", "client.request_raw", "client.url", "vault.VaultWrappedResponse", "res.raise_for_status", "client.request", "client.unwrap", "adapter.assert_called_once_with", "client.wrap_info", "client.get_config", "vault.VaultPermissionDeniedError", "req_any.call_args", "url.endswith", "vault.VaultPreconditionFailedError", "salt.exceptions", "adapter.return_value", "vault.VaultInvocationError", "req_any.assert_called_once", "req.return_value", "client.token_valid", "client.token_lookup"]}, "test_req_channel.py": {"libraries": ["salt.exceptions", "salt.channel.server", "ctypes", "salt.utils.process", "multiprocessing", "tornado.gen", "salt.channel.client", "salt.utils.stringutils", "salt.utils.platform", "pytestshellutils.utils.processes.terminate_process", "salt.config", "pytest", "logging", "salt.master"], "function_names": ["req_channel_crypt_ids", "close", "__enter__", "push_channel", "test_badload", "run", "_handle_signals", "__exit__", "_handle_payload", "test_normalization", "__init__", "test_basic", "req_server_channel", "req_channel_crypt"], "function_calls": ["type", "super", "dict", "tuple", "ReqServerChannelProcess", "terminate_process"], "class_names": ["ReqServerChannelProcess"], "class_method_calls": ["self.config", "request.param", "tornado.ioloop", "pytest.fixture", "ctypes.c_longlong", "salt_master.config", "multiprocessing.Event", "salt.master", "self.req_server_channel", "self.req_channel_crypt", "logging.getLogger", "pytest.mark", "multiprocessing.Value", "pytest.raises", "ctypes.c_char", "self._handle_payload", "self.io_loop", "self._closing", "self.process_manager", "tornado.gen", "_req_channel.obj", "salt.utils", "salt_minion.config", "self.start", "req_server_channel_process.pid", "self.running", "salt.exceptions", "salt.crypt", "multiprocessing.Array", "self.close", "push_channel.send", "self.terminate", "salt.channel"]}, "test_server.py": {"libraries": ["salt.channel.server", "pytest"], "function_names": ["test_compare_keys_newline_src", "test_compare_keys", "key_data", "test_compare_keys_newline_tgt"], "function_calls": [], "class_names": [], "class_method_calls": ["src_key.endswith", "server.ReqServerChannel", "pytest.fixture", "pytest.mark", "tgt_key.endswith", "linesep.join"]}, "test_api.py": {"libraries": ["salt.utils.vault.client", "salt.utils.vault.api", "salt.utils.vault", "pytest", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["test_read_approle", "entity_lookup_response", "test_read_entity_by_alias", "entity_fetch_response", "secret_id_response", "res_or_wrap", "secret_id_lookup_accessor_response", "test_read_entity_by_alias_failed", "test_write_entity_alias", "test_write_entity", "identity_api", "test_destroy_secret_id_by_accessor", "client", "test_lookup_mount_accessor", "test_generate_secret_id", "test_read_role_id", "wrapped_response", "lookup_mount_response", "secret_id_serialized", "approle_api", "test_destroy_secret_id_by_secret_id", "test_write_approle", "test_list_approles", "approle_meta"], "function_calls": ["patch", "Mock"], "class_names": [], "class_method_calls": ["vaultutil.VaultWrappedResponse", "approle_api.list_approles", "pytest.fixture", "approle_api.write_approle", "identity_api.write_entity", "vclient.AuthenticatedVaultClient", "client.list", "vaultutil.VaultSecretId", "approle_api.generate_secret_id", "pytest.mark", "pytest.raises", "client.post", "vapi.AppRoleApi", "kwargs.get", "approle_api.read_role_id", "identity_api.read_entity_by_alias", "identity_api._lookup_mount_accessor", "client.get", "approle_api.read_approle", "approle_api.destroy_secret_id", "identity_api.write_entity_alias", "vapi.IdentityApi", "vapi.VaultNotFoundError"]}, "test_batch.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.cli.batch.Batch", "pytest"], "function_names": ["test_get_bnum_invalid_batch_data", "test_return_value_in_run_for_return", "test_get_bnum_str", "test_get_bnum_percentage", "test_get_bnum_int", "batch", "test_get_bnum_high_percentage", "test_return_value_in_run_for_ret"], "function_calls": ["MagicMock", "next", "iter", "patch", "Batch"], "class_names": [], "class_method_calls": ["batch.local", "batch.minions", "batch.opts", "batch.gather_minions", "Batch.get_bnum", "pytest.fixture", "Batch.run"]}, "test_salt_cloud.py": {"libraries": ["pytest"], "function_names": ["test_function_arguments", "test_mutually_exclusive_query_options", "test_list_providers_accepts_no_arguments", "test_mutually_exclusive_list_options"], "function_calls": [], "class_names": [], "class_method_calls": ["ret.stderr", "pytest.mark", "ret.returncode", "salt_cloud_cli.run", "pytest.importorskip"]}, "test_salt_deltaproxy.py": {"libraries": ["random", "pytest", "logging", "pytestshellutils.exceptions.FactoryNotStarted", "tests.support.helpers.PRE_PYTEST_SKIP_REASON", "saltfactories.utils.random_string", "salt.defaults.exitcodes"], "function_names": ["test_exit_status_correct_usage", "proxy_minion_id", "test_exit_status_unknown_argument", "test_exit_status_no_proxyid", "test_invalid_connection", "test_custom_proxy_module_raise_exception", "test_exit_status_correct_usage_large_number_of_minions", "test_missing_pillar_file", "_skip_on_tcp_transport", "test_exit_status_unknown_user", "test_custom_proxy_module"], "function_calls": ["random_string"], "class_names": [], "class_method_calls": ["pytest.fixture", "ret.data", "logging.getLogger", "request.config", "random.sample", "pytest.helpers", "factory.before_start", "factory.after_terminate", "pytest.mark", "salt_cli.run", "pytest.raises", "factory.start", "factory.terminate", "pytest.skip", "ret.returncode", "exc.value", "salt_master.salt_proxy_minion_daemon", "salt_master.pillar_tree", "salt.defaults", "salt_master.state_tree", "factory.is_running", "factory.started"]}, "test_salt_master.py": {"libraries": ["time", "pytest", "logging", "tests.support.helpers.PRE_PYTEST_SKIP_REASON", "saltfactories.utils.random_string", "salt.defaults.exitcodes"], "function_names": ["master_id", "test_exit_status_correct_usage"], "function_calls": ["random_string"], "class_names": [], "class_method_calls": ["factory.start", "logging.getLogger", "factory.terminate", "pytest.fixture", "salt_factories.salt_master_daemon", "pytest.mark", "ret.returncode", "time.sleep", "factory.is_running", "salt.defaults"]}, "test_salt_pip.py": {"libraries": ["os", "salt.scripts", "salt.utils.platform", "tests.conftest.CODE_DIR", "pytest", "tests.support.mock.patch"], "function_names": ["test_outside_onedir_env", "test_within_onedir_env"], "function_calls": ["str", "patch"], "class_names": [], "class_method_calls": ["capsys.readouterr", "os.environ", "shell.run", "salt.scripts", "script_path.exists", "ret.returncode", "pytest.raises", "salt.utils", "captured.err"]}, "test_salt_run_.py": {"libraries": ["salt.version", "os", "logging"], "function_names": ["test_salt_run_exception_exit", "test_versions_report", "test_salt_run_non_exception_exit", "test_salt_run_version"], "function_calls": ["set", "isinstance", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.version", "os.environ", "expected_keys.remove", "ret.returncode", "line.strip", "line.endswith", "expected.items", "line.rstrip", "line.split", "ret.stdout", "salt_run_cli.run"]}, "test_salt_run_show_jid.py": {"libraries": ["re", "pytest", "logging"], "function_names": ["salt_master", "salt_run_cli", "test_salt_run_show_jid"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt_master.started", "pytest.fixture", "salt_factories.salt_master_daemon", "re.match", "salt_master.is_running", "salt_master.salt_run_cli", "ret.stdout", "salt_run_cli.run"]}, "test_hgfs.py": {"libraries": ["hglib", "psutil", "salt.fileserver.hgfs", "pathlib.Path", "pytestshellutils.utils.processes.terminate_process", "pytest", "tempfile", "tests.support.mock.patch", "shutil"], "function_names": ["test_fix_58852", "hgfs_setup_and_teardown", "test_envs", "test_all_branches", "test_find_file", "test_file_hash", "test_get_branch", "test_get_ref", "test_get_manifest", "test_all_bookmarks", "configure_loader_modules", "test_env_is_exposed_whitelist", "test_file_list", "test_env_is_exposed_blacklist", "test_get_tag", "test_all_tags", "test_serve_file", "test_dir_list", "test_get_bookmark"], "function_calls": ["terminate_process", "str", "len", "bytes", "Path", "isinstance"], "class_names": [], "class_method_calls": ["hgfs.file_list", "hgfs._all_branches", "tempdir.cleanup", "hgfs.envs", "pytest.fixture", "file.as_posix", "tempdirPath.as_posix", "tempdirPath.as_uri", "hglib.open", "tempdir.name", "hgfs.init", "hgfs.serve_file", "hgfs._all_tags", "tempsubdir.mkdir", "hgfs._get_tag", "source_dir.iterdir", "hgfs.__opts__", "pytest.mark", "repo.bookmark", "file.name", "hgfs._get_branch", "repo.add", "to_file2.as_posix", "shutil.copy", "hgfs._get_manifest", "hgfs.dir_list", "psutil.Process", "hgfs.find_file", "hgfs._all_bookmarks", "hgfs._env_is_exposed", "patch.dict", "hgfs.file_hash", "tempfile.TemporaryDirectory", "value.items", "hgfs._get_bookmark", "hglib.init", "hgfs._get_ref", "hgfs.update", "repo.tag", "repo.commit", "client.close", "to_file.as_posix", "repo.branch"]}, "test_roots.py": {"libraries": ["sys", "salt.utils.stringutils", "textwrap", "tests.support.mock.mock_open", "salt.fileserver.roots", "salt.utils.files", "salt.utils.platform", "pathlib", "pytest", "salt.fileclient", "salt.utils.hashutils", "tests.support.mock.MagicMock", "tests.support.mock.patch", "copy", "shutil"], "function_names": ["tmp_state_tree", "test_envs", "test_update_mtime_map", "unicode_dirname", "test_find_file", "testfilepath", "test_file_hash", "unicode_filename", "test_find_file_not_in_root", "configure_loader_modules", "test_file_list", "test_serve_file_not_in_root", "test_update_mtime_map_unicode_error", "test_symlink_list", "test_update_no_change", "test_serve_file", "test_file_list_with_slash", "test_dir_list", "test_dynamic_file_roots", "testfile", "test_file_list_emptydirs"], "function_calls": ["MagicMock", "patch", "str", "sorted", "mock_open"], "class_names": [], "class_method_calls": ["fp.write", "pytest.fixture", "shutil.copyfile", "master_opts.update", "roots.__opts__", "roots.symlink_list", "sys.platform", "dirname.mkdir", "unicode_dir.mkdir", "roots.update", "roots.serve_file", "pytest.mark", "roots.dir_list", "testfile.name", "roots.envs", "mtime_map_mock.write_calls", "dyn_root_dir.mkdir", "fp_.read", "empty_dir.mkdir", "fp_.write", "badfile.write_text", "textwrap.dedent", "pathlib.Path", "roots.file_list_emptydirs", "salt.utils", "source_sym.write_text", "patch.dict", "dest_sym.symlink_to", "roots.file_list", "new_mtime_map.items", "roots.file_hash", "fp.write_text", "mtime_map_path.parent", "roots.find_file", "copy.copy"]}, "test_docker.py": {"libraries": ["pytest"], "function_names": ["_formula", "test_docker_formula", "modules"], "function_calls": ["saltstack_formula"], "class_names": [], "class_method_calls": ["modules.state", "loaders.modules", "staterun.result", "pytest.fixture", "pytest.mark"]}, "test_nginx.py": {"libraries": ["tests.support.unit.TestCase", "salt.modules.nginx", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["close", "test_nginx_status_with_arg", "test_nginx_status", "read", "setup_loader_modules"], "function_calls": ["patch", "MockUrllibStatus", "Mock"], "class_names": ["MockUrllibStatus", "NginxTestCase"], "class_method_calls": ["self.assertEqual", "patcher.stop", "patcher.start", "self.addCleanup", "nginx.status", "mock.assert_called_once_with"]}, "test_sudoers.py": {"libraries": ["pytest"], "function_names": ["_formula", "test_sudoers_formula", "modules"], "function_calls": ["str", "saltstack_formula"], "class_names": [], "class_method_calls": ["modules.state", "ret.errors", "_formula.state_tree_path", "_formula.tag", "loaders.modules", "pytest.fixture", "pytest.mark", "staterun.result", "loaders.opts", "_formula.name", "ret.failed"]}, "test_users.py": {"libraries": ["salt.modules.napalm_users", "tests.support.napalm", "salt.modules.napalm_network", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_set_users", "configure_loader_modules", "test_delete_users", "test_config"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["napalm_users.set_users", "napalm_users.config", "napalm_test_support.TEST_USERS", "napalm_network.load_template", "napalm_test_support.true", "pytest.fixture", "napalm_test_support.get_managed_file", "napalm_users.delete_users", "napalm_test_support.MockNapalmDevice", "napalm_test_support.join", "napalm_test_support.random_hash"]}, "test_vim.py": {"libraries": ["pytest"], "function_names": ["test_vim_formula", "_formula", "modules"], "function_calls": ["str", "saltstack_formula"], "class_names": [], "class_method_calls": ["modules.state", "ret.errors", "_formula.state_tree_path", "_formula.tag", "loaders.modules", "pytest.fixture", "pytest.mark", "staterun.result", "loaders.opts", "_formula.name", "ret.failed"]}, "test_grains.py": {"libraries": ["os", "salt.states.grains", "salt.utils.stringutils", "salt.modules.grains", "salt.utils.files", "tests.support.mock.MagicMock", "pytest", "contextlib", "salt.utils.yaml", "tests.support.mock.patch"], "function_names": ["test_present_force_to_set_dict_or_list", "test_append", "set_grains", "test_list_present_inexistent", "test_list_absent_inexistent_nested", "test_absent_unset_test", "test_list_present_not_a_list", "test_list_absent_not_a_list", "test_present_unknown_failure", "test_list_absent_nested", "test_present_convert_value_to_key", "test_exists_found", "test_list_present_nested_already", "test_present_overwrite", "test_list_absent_inexistent", "test_list_present_inexistent_nested", "test_list_present", "test_present_fails_to_convert_value_to_key", "test_append_convert_to_list_empty", "test_make_hashable", "test_present_already_set", "test_append_fails_inexistent", "test_list_present_nested", "test_present_fails_to_set_dict_or_list", "test_present_fail_merge_dict", "test_present_add_key_to_existing", "configure_loader_modules", "test_absent_fails_nested_complex_grain", "assert_grain_file_content", "test_absent_force_nested_complex_grain", "test_append_already", "test_absent_delete", "test_append_nested", "test_present_overwrite_test", "test_list_present_already", "test_list_absent_already", "test_absent_already", "test_absent_unset", "test_list_present_unknown_failure", "test_present_add", "test_exists_missing", "test_present_fail_overwrite", "test_append_convert_to_list", "test_list_absent", "test_append_fails_not_a_list"], "function_calls": ["patch", "set_grains", "MagicMock", "assert_grain_file_content"], "class_names": [], "class_method_calls": ["grains.exists", "pytest.fixture", "grainsmod.delval", "grains.__opts__", "grains.make_hashable", "grainsmod.get", "os.path", "grainsmod.setval", "grainsmod.remove", "contextlib.contextmanager", "grainsmod.__salt__", "grf.read", "grains.list_present", "grains.present", "salt.utils", "patch.dict", "grains.__grains__", "grainsmod.set", "grainsmod.__grains__", "grains.list_absent", "mocked_setval.return_value", "grains.absent", "grainsmod.append", "grains.append"]}, "test_loaded_base_name.py": {"libraries": ["warnings", "salt.loader", "salt.config", "salt.loader.lazy.LazyLoader", "pytest", "saltfactories.utils.random_string"], "function_names": ["opts", "_loader_id", "test_loader", "loaded_base_name", "loader"], "function_calls": ["list", "isinstance", "random_string", "getattr"], "class_names": [], "class_method_calls": ["request.param", "loaded_func.loader", "loader._dict", "warnings.catch_warnings", "loader.tag", "salt.loader", "pytest.fixture", "module_name.startswith", "salt.config", "loader.clean_modules", "loader.values", "loaded_func.func", "loader.loaded_base_name", "warnings.simplefilter"]}, "test_loader.py": {"libraries": ["compileall", "salt.utils.files", "logging", "tempfile", "salt.loader.context", "collections", "salt.utils.stringutils", "tests.support.unit.TestCase", "tests.support.runtests.RUNTIME_VARS", "inspect", "tests.support.mock.patch", "copy", "sys", "tests.support.case.ModuleCase", "os", "salt.loader.lazy", "textwrap", "salt.loader", "tests.support.mock.MagicMock", "salt.config", "pytest", "shutil"], "function_names": ["rm_pyfile", "test_lazyloader_zip_modules", "test_package", "_get_module_filename", "__init_loader", "module_path", "test_osrelease_info_has_correct_type", "_expected", "test_load_source_file", "test_iter_load", "test_utils_not_found", "setUp", "test__load__and_depends", "test_renderers", "test_pack", "test_utils_found", "test_outputters", "test_bad_name", "test_disable", "_get_loader", "test_badkey", "tearDownClass", "test_context", "test_reload", "rm_lib", "test_optimization_order", "module_dir", "_byte_compile", "remove_bytecode", "test_alias", "tearDown", "test_clear", "lib_path", "update_pyfile", "test_reload_missing_lib", "test_returners", "test_lazyloader_pyx_modules", "test_tops", "test_single_item_no_dot", "rm_module", "_verify_libs", "_verify_globals", "test_depends", "test_virtual", "test_is_private", "test_len_load", "test_whitelist", "test_load", "test_is_loopback", "update_lib", "_write_module_file", "_test_optimization_order", "test_lazyloader_refresh_file_mapping_called_with_lock_at___init__", "test_virtual_alias", "test_loader_clean_modules", "test_serializers", "test_wrong_bytecode", "test_states", "test_loader_globals", "update_module", "test_module", "test__load__", "test_module_package_collision", "test_runners", "test_auth", "test_basic", "setUpClass", "test_pillars", "test_globals"], "function_calls": ["MagicMock", "next", "range", "iter", "delattr", "list", "getattr", "len", "isinstance", "hasattr", "remove_bytecode"], "class_names": ["LazyLoaderVirtualEnabledTest", "LoaderGlobalsTest", "NetworkUtilsTestCase", "LazyLoaderSubmodReloadingTest", "LazyLoaderReloadingTest", "LoaderMultipleGlobalTest", "LoaderLoadCachedGrainsTest", "LoaderCleanupTest", "LazyLoaderWhitelistTest", "LazyLoaderDeepSubmodReloadingTest", "LazyLoaderTest", "LazyLoaderVirtualDisabledTest", "LazyLoaderVirtualAliasTest", "LazyLoaderMock", "LazyLoaderSingleItem", "LazyLoaderRefreshFileMappingTest", "LazyLoaderModulePackageTest", "LazyLoaderOptimizationOrderTest", "LazyLoaderUtilsTest", "RawModTest", "LazyLoaderGrainsBlacklistTest"], "class_method_calls": ["deep_init_base.format", "self._expected", "inspect.isfunction", "self.assertIn", "logging.getLogger", "self.__init_loader", "self.module_path", "self.assertNotEqual", "sys.modules", "self.assertFalse", "self.update_lib", "self._get_module_filename", "submodule_template.format", "os.makedirs", "func1.__globals__", "collections.defaultdict", "self.addCleanup", "func2.__globals__", "testmod.items", "module_path.split", "self.assertNotIn", "self.rm_lib", "self.rm_module", "sys.version_info", "lock_mock.__enter__", "self.count", "self.rm_pyfile", "err.exception", "inspect.stack", "compileall.compile_file", "lib.replace", "self.assertEqual", "pytest.mark", "self.lib_count", "self.update_pyfile", "self.fail", "self.module_key", "fh.write", "self._byte_compile", "self.loader1", "self._verify_globals", "tempfile.mkdtemp", "self._get_loader", "RUNTIME_VARS.TMP", "self.opts", "shutil.rmtree", "self.minion_opts", "loader.suffix_order", "self.module_file", "cls.funcs", "self.cache_dir", "self.loader2", "item.keys", "k.startswith", "self.assertRaises", "name.startswith", "submodule_lib_template.format", "module_template.format", "self.LOADER_CLASS", "self.lib_paths", "patch.object", "self.proxy", "os.sep", "self.module_content", "val.__module__", "self.lib_path", "mod_template.format", "self.module_name", "global_vars.values", "self.loader", "sys.implementation", "textwrap.dedent", "self.utils", "fh.flush", "fh.fileno", "dirs.append", "mod_dict.values", "func_mock.assert_called", "salt.config", "self.master_opts", "self.module_dir", "modname.startswith", "cls.proxy", "func.__globals__", "self.tmp_dir", "log.debug", "self._write_module_file", "os.path", "self._verify_libs", "k.split", "self.utils_name", "self.update_module", "copy.deepcopy", "cls.utils", "self.utils_file", "self.funcs", "salt.loader", "self.minion_mods", "self._test_optimization_order", "salt.utils", "patch.dict", "self.utils_dir", "self.libs", "os.unlink", "os.fsync", "func_mock.call_args_list", "paths.append", "os.remove", "self.assertTrue", "key.split", "cls.opts", "loader.suffix_map", "val.__globals__"]}, "test_logstash_mod.py": {"libraries": ["errno", "time", "salt.utils.stringutils", "socket", "salt.log_handlers.logstash_mod.ZMQLogstashHander", "salt.log_handlers.logstash_mod.DatagramLogstashHandler", "pytest", "logging", "zmq", "pytestshellutils.utils.ports"], "function_names": ["zmq_server", "test_zmq_handler_log_pickling", "datagram_server", "test_datagram_handler_log_pickling"], "function_calls": ["ZMQLogstashHander", "DatagramLogstashHandler"], "class_names": [], "class_method_calls": ["ports.get_unused_localhost_port", "datagram_server.recvfrom", "logger.setLevel", "pytest.fixture", "zmq.NOBLOCK", "context.socket", "server.settimeout", "exc.errno", "context.term", "logging.getLogger", "logger.info", "server.setsockopt", "pytest.mark", "time.sleep", "zmq_server.recv", "zmq.Context", "socket.AF_INET", "zmq.ZMQError", "server.close", "logger.addHandler", "socket.SOCK_DGRAM", "zmq.SUBSCRIBE", "salt.utils", "socket.socket", "logger.removeHandler", "server.bind", "zmq.SUB", "logging.DEBUG", "errno.EAGAIN"]}, "test_masterminion_conf.py": {"libraries": ["os", "salt.minion", "pathlib", "pytest", "logging"], "function_names": ["test_issue_64219_masterminion_no_minion_d_include", "minion_config_overrides", "minion_d_include_value"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["logging.getLogger", "os.makedirs", "mminion.opts", "pytest.fixture", "salt.minion", "test_conf.write", "pathlib.Path", "salt.utils"]}, "test_powershell.py": {"libraries": ["salt.modules.cmdmod", "base64", "salt.utils.stringutils", "pytest", "salt.utils.path"], "function_names": ["test_powershell_all_encode_cmd", "test_cmd_run_encoded_cmd", "shell", "test_powershell", "test_cmd_run_all_powershell_list", "test_cmd_run_all_powershell_string", "test_cmd_run_all_encoded_cmd", "test_powershell_all", "test_powershell_encode_cmd"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["base64.standard_b64encode", "request.param", "cmdmod.powershell_all", "cmdmod.run_all", "cmdmod.powershell", "cmdmod.run", "pytest.skip", "pytest.fixture", "pytest.mark", "salt.utils", "cmd.encode"]}, "test_runas.py": {"libraries": ["pytest"], "function_names": ["account", "test_runas_id"], "function_calls": [], "class_names": [], "class_method_calls": ["account.username", "cmd.run", "pytest.helpers", "ret.result", "pytest.fixture", "pytest.mark", "ret.changes", "account.info"]}, "test_readlink.py": {"libraries": ["salt.exceptions.SaltInvocationError", "pytest"], "function_names": ["file", "source", "test_readlink_relative_path", "test_readlink", "test_readlink_non_canonical", "test_readlink_canonical", "test_readlink_not_a_link"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["source.resolve", "pytest.helpers", "target.symlink_to", "source.parent", "pytest.fixture", "pytest.mark", "target.unlink", "pytest.raises", "exc.value", "intermediate.symlink_to", "intermediate.unlink", "file.readlink", "modules.file"]}, "test_replace.py": {"libraries": ["os", "pytest"], "function_names": ["test_replace_issue_18612_change_mid_line_with_comment", "test_replace_issue_18841_no_changes", "test_replace_issue_18612_prepend", "test_file_replace_check_cmd", "test_file_replace_prerequired_issues_55775", "test_replace_issue_18841_omit_backup", "test_replace_issue_18612_append", "test_replace_issue_18612_append_not_found_content", "test_replace_issue_18612", "test_replace"], "function_calls": ["str", "range"], "class_names": [], "class_method_calls": ["managed_file.exists", "file.replace", "pytest.helpers", "fstats_orig.st_atime", "pytest.mark", "path_test.stat", "fstats_orig.st_mtime", "backup_file.is_file", "os.utime", "fstats_post.st_mtime", "name.read_text", "modules.state", "path_test.with_name", "backup_file.read_text", "path_test.read_text", "ret.result", "state_run.comment", "ret.append", "path_test.write_text", "contents.replace", "path_test.name", "state_run.result", "item.result", "name.write_text"]}, "test_rmdir.py": {"libraries": ["os", "pytest", "time"], "function_names": ["file", "nested_dirs_with_files", "test_rmdir_verbose_nested_dirs_with_files_failure_with_recurse", "test_rmdir_nested_empty_dirs_recurse_not_older_than", "test_rmdir_success_with_default_options", "test_rmdir_nested_empty_dirs_failure_with_default_options", "nested_empty_dirs", "test_rmdir_single_dir_success_with_recurse", "test_rmdir_verbose_success", "single_empty_dir", "test_rmdir_single_dir_failure_with_recurse", "test_rmdir_nested_empty_dirs_recurse_older_than", "test_rmdir_verbose_failure", "single_dir_with_file", "test_rmdir_nested_empty_dirs_success_with_recurse", "test_rmdir_nested_dirs_with_files_failure_with_recurse", "test_rmdir_failure_with_default_options"], "function_calls": ["str", "range", "len"], "class_names": [], "class_method_calls": ["file.rmdir", "last_file.write_text", "pytest.fixture", "pytest.mark", "file.write_text", "time.time", "os.utime", "os.path", "nest.mkdir", "modules.file"]}, "test_symlink.py": {"libraries": ["os", "salt.serializers.json", "salt.utils.win_functions", "salt.utils.json", "salt.serializers.python", "salt.states.file", "salt.utils.files", "salt.utils.platform", "salt.utils.yaml", "tests.support.mock.MagicMock", "pytest", "logging", "salt.serializers.plist", "salt.serializers.yaml", "salt.serializers.msgpack", "tests.support.mock.patch"], "function_names": ["return_val", "configure_loader_modules", "test_symlink"], "function_calls": ["return_val", "MagicMock", "patch"], "class_names": [], "class_method_calls": ["logging.getLogger", "os.sep", "yamlserializer.serialize", "filestate.__opts__", "plistserializer.serialize", "salt.states", "pytest.fixture", "filestate.__salt__", "ret.update", "val.update", "filestate.symlink", "jsonserializer.serialize", "msgpackserializer.serialize", "os.path", "salt.utils", "patch.dict", "pythonserializer.serialize", "patch.object"]}, "test_touch.py": {"libraries": ["pytest"], "function_names": ["test_touch", "test_touch_directory"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["file.touch", "name.is_file", "name.is_dir", "ret.result", "pytest.mark", "name.mkdir"]}, "test_listen.py": {"libraries": ["pytest"], "function_names": ["test_listen_in_requisite_resolution", "test_listen_requisite_resolution", "test_listen_in_requisite_resolution_names", "test_listen_requisite", "test_listen_in_requisite", "test_listen_requisite_resolution_names", "test_listen_requisite_not_exist", "test_listen_requisite_no_state_module", "test_onlyif_req"], "function_calls": [], "class_names": [], "class_method_calls": ["state.sls", "pytest.helpers", "state.single", "ret.comment", "ret.result", "pytest.mark", "ret.changes", "ret.raw"]}, "test_mixed.py": {"libraries": ["salt.modules.cmdmod", "salt.modules.state", "salt.modules.grains", "salt.modules.saltutil", "pytest", "salt.modules.config"], "function_names": ["test_requisites_mixed_require_prereq_use_4", "configure_loader_modules", "test_requisites_mixed_require_prereq_use_3", "test_issue_30161_unless_and_onlyif_together", "test_requisites_mixed_require_prereq_use_1", "test_requisites_mixed_require_prereq_use_5", "test_requisites_mixed_illegal_req", "test_requisites_mixed_require_prereq_use_2", "test_issue_46762_prereqs_on_a_state_with_unfulfilled_requirements"], "function_calls": ["str", "normalize_ret", "isinstance"], "class_names": [], "class_method_calls": ["state.sls", "cmd.run", "config.option", "pytest.helpers", "pytest.fixture", "pytest.mark", "saltutil.is_running", "state_mod.sls", "config.get", "grains.get", "ret.raw", "state_entry.result"]}, "test_onchanges.py": {"libraries": ["pytest"], "function_names": ["test_onchanges_any_recursive_error_issues_50811", "test_onchanges_requisite_multiple", "test_onchanges_requisite", "test_onchanges_in_requisite", "test_requisites_onchanges_any", "test_onchanges_requisite_with_duration", "test_onchanges_requisite_no_state_module"], "function_calls": ["normalize_ret"], "class_names": [], "class_method_calls": ["state.sls", "ret.raw", "pytest.helpers", "pytest.mark"]}, "test_onfail.py": {"libraries": ["pytest"], "function_names": ["test_multiple_onfail_requisite", "test_onfail_requisite_with_duration", "test_requisites_onfail_any", "test_onfail_in_requisite", "test_requisites_onfail_all", "test_onfail_requisite", "test_multiple_onfail_requisite_with_required", "test_onfail_requisite_no_state_module", "test_multiple_onfail_requisite_with_required_no_run"], "function_calls": ["normalize_ret"], "class_names": [], "class_method_calls": ["state.sls", "ret.raw", "pytest.helpers", "pytest.mark"]}, "test_onlyif.py": {"libraries": ["pytest"], "function_names": ["test_onlyif_req_retcode"], "function_calls": [], "class_names": [], "class_method_calls": ["state.single", "ret.comment", "ret.result", "pytest.mark", "ret.changes"]}, "test_prereq.py": {"libraries": ["pytest"], "function_names": ["test_requisites_prereq_simple_ordering_and_errors_4", "test_requisites_prereq_simple_ordering_and_errors_10", "test_requisites_prereq_simple_ordering_and_errors_3", "test_requisites_prereq_simple_ordering_and_errors_5", "test_infinite_recursion_sls_prereq", "test_requisites_prereq_simple_ordering_and_errors_1", "test_requisites_prereq_simple_ordering_and_errors_2", "test_infinite_recursion_prereq2", "test_requisites_prereq_fail_in_prereq", "test_requisites_prereq_simple_ordering_and_errors_6", "test_requisites_prereq_simple_ordering_and_errors_9", "test_requisites_full_sls_prereq", "test_requisites_prereq_simple_ordering_and_errors_8", "test_infinite_recursion_prereq", "test_requisites_prereq_simple_ordering_and_errors_7"], "function_calls": ["normalize_ret"], "class_names": [], "class_method_calls": ["state.sls", "pytest.helpers", "ret.errors", "state_return.result", "pytest.mark", "ret.raw", "ret.failed"]}, "test_require.py": {"libraries": ["pytest", "time"], "function_names": ["test_requisites_require_ordering_and_errors_4", "test_requisites_full_sls_require", "test_requisites_require_ordering_and_errors_2", "test_issue_59922_conflict_in_name_and_id_for_require_in", "test_issue_38683_require_order_failhard_combination", "test_requisites_require_ordering_and_errors_1", "test_requisites_require_any_fail", "test_requisites_require_ordering_and_errors_3", "test_requisites_require_ordering_and_errors_5", "test_issue_61121_extend_is_to_strict", "test_requisites_require_any", "test_parallel_state_with_requires", "test_requisites_require_no_state_module"], "function_calls": ["normalize_ret", "range"], "class_names": [], "class_method_calls": ["state.sls", "pytest.helpers", "ret.errors", "pytest.mark", "time.time", "ret.raw", "ret.failed"]}, "test_unless.py": {"libraries": ["pytest"], "function_names": ["test_unless_req", "test_unless_req_retcode"], "function_calls": [], "class_names": [], "class_method_calls": ["state.single", "ret.comment", "ret.result", "pytest.mark", "ret.changes"]}, "test_use.py": {"libraries": ["pytest"], "function_names": ["test_requisites_use", "test_requisites_use_no_state_module", "test_requisites_use_recursion_2", "test_requisites_use_recursion_1", "test_requisites_use_recursion_3"], "function_calls": [], "class_names": [], "class_method_calls": ["state.sls", "pytest.helpers", "ret.errors", "pytest.mark", "state_return.comment", "ret.failed"]}, "test_watch.py": {"libraries": ["salt.utils.platform", "pytest"], "function_names": ["test_watch_in_failure", "test_watch_in", "test_requisites_watch_any_fail", "test_requisites_watch_any", "test_issue_30820_requisite_in_match_by_name"], "function_calls": ["normalize_ret"], "class_names": [], "class_method_calls": ["state.sls", "pytest.helpers", "pytest.mark", "salt.utils", "ret.raw"]}, "test_jinja_filters.py": {"libraries": ["saltfactories.utils.functional.StateResult", "pytest"], "function_names": ["test_dateutils_strftime"], "function_calls": ["StateResult"], "class_names": [], "class_method_calls": ["salt_ssh_cli.run", "salt_master.state_tree", "ret.returncode", "pytest.mark", "staterun.result", "staterun.changes", "ret.data"]}, "test_jinja_renderer.py": {"libraries": ["pytest"], "function_names": ["test_jinja_renderer_argline"], "function_calls": [], "class_names": [], "class_method_calls": ["state.sls", "state_return.result", "pytest.helpers", "pytest.mark"]}, "test_mako_renderer.py": {"libraries": ["pytest"], "function_names": ["test_mako_renderer"], "function_calls": [], "class_names": [], "class_method_calls": ["state.sls", "pytest.helpers", "state_return.result", "pytest.mark", "state_return.id"]}, "test_pyobjects_renderer.py": {"libraries": ["pytest"], "function_names": ["test_pyobjects_renderer"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["state.sls", "pytest.helpers", "state_return.result", "ret.errors", "pytest.mark", "state_return.name"]}, "test_aliases.py": {"libraries": ["salt.exceptions.SaltInvocationError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "salt.modules.aliases"], "function_names": ["test_has_target_list_mult_differs", "test_list_aliases_mult", "test_has_target_no_target", "test_has_target_mult", "test_set_target_empty_target", "test_get_target", "test_get_target_no_alias", "mock_alias_mult", "test_set_target_equal", "configure_loader_modules", "test_has_target_list_mult", "test_rm_alias_absent", "test_has_target", "test_list_aliases", "test_has_target_mult_differs", "test_get_target_mult", "test_has_target_no_alias", "test_set_target_empty_alias", "mock_alias"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["aliases.has_target", "aliases.rm_alias", "pytest.fixture", "aliases.get_target", "aliases.list_aliases", "pytest.raises", "aliases.set_target"]}, "test_ansiblegate.py": {"libraries": ["salt.states.ansiblegate", "tests.support.runtests.RUNTIME_VARS", "json", "pathlib", "pytest", "tests.support.mock.MagicMock", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_ansible_playbooks_states_success_with_skipped", "playbooks_examples_dir", "test_ansible_playbooks_states_failed", "test_ansible_playbooks_states_success"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["ansiblegate.__opts__", "json.loads", "ansiblegate.playbooks", "pytest.fixture", "pathlib.Path", "RUNTIME_VARS.TESTS_DIR", "playbooks_examples_dir.joinpath", "patch.dict", "ansiblegate.__salt__"]}, "test_aptpkg.py": {"libraries": ["tests.support.mock.patch", "salt.states.aptpkg", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_held"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["patch.dict", "aptpkg.__salt__", "aptpkg.held", "pytest.fixture"]}, "test_data.py": {"libraries": ["salt.utils.stringutils", "salt.utils.odict.OrderedDict", "builtins", "pytest", "logging", "salt.exceptions.SaltException", "tests.support.unit.LOREM_IPSUM", "salt.utils.data", "tests.support.mock.patch"], "function_names": ["_s", "test_filter_dict_recurse_limit", "test_filter_list_no_recurse", "test_list_equality", "get_EGGS", "test_encode", "test_stringify", "test_decode_to_str", "test_tuple_inequality", "test_ordereddict_ignore", "test_ordered_dict_unequal_length", "test_compare_lists_changes_old", "test_ordereddict_equality", "test_ignore_missing_keys_ordered_dict", "test_dict_inequality", "test_repack_dict", "test_ordered_dict_unordered", "_b", "test_mysql_to_dict", "test_set_inequality", "test_encode_fallback", "test_json_query", "test_decode", "test_list_vs_set", "test_list_unordered", "test_compare_dicts", "test_circular_refs_tuple", "get_BYTES", "test_tuple_unequal_length", "test_set_unequal_length", "test_nop", "test_compare_lists_changes_new", "test_ordereddict_inequality", "test_encode_keep", "test_mixed_equality", "test_mixed_nested_ignore", "test_dict_ignore", "test_to_entries", "test_compare_lists_no_change", "test_filter_exclude_types", "test_list_unequal_length", "test_mixed_nested_unordered", "test_subdict_match_with_wildcards", "test_circular_refs_lists", "test_issue_39709", "test_decode_fallback", "test_ignore_missing_keys_dict", "test_traverse_dict_and_list", "test_dict_equality", "test_tuple_equality", "test_filter_list_recurse", "test_filter_set_no_recurse", "test_set_equality", "test_filter_dict_no_recurse", "test_list_ignore_ignored", "test_mixed_inequality", "get_test_data", "test_from_entries", "test_circular_refs_dicts", "test_filter_ordereddict_recurse", "test_compare_lists_changes", "test_subdict_match", "test_dict_vs_ordereddict", "test_sorted_ignorecase", "test_filter_dict_recurse", "test_filter_ordereddict_no_recurse", "test_filter_list_recurse_limit", "test_list_inequality", "test_dict_vs_ordereddict_ignore", "test_ignore_missing_keys_recursive", "test_traverse_dict"], "function_calls": ["_s", "type", "patch", "enumerate", "SaltOrderedDict", "sorted", "set", "_b"], "class_names": [], "class_method_calls": ["logging.getLogger", "x.encode", "log.debug", "pytest.fixture", "pytest.mark", "pytest.raises", "salt.utils", "patch.object"]}, "test_defaults.py": {"libraries": ["salt.defaults._Constant", "pickle"], "function_names": ["test_pickle_constants"], "function_calls": ["_Constant"], "class_names": [], "class_method_calls": ["pickle.loads", "pickle.dumps"]}, "test_dockermod.py": {"libraries": ["os", "salt.utils.dockermod.translate.network", "salt.loader", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "tests.support.unit.TestCase", "functools", "salt.config", "salt.utils.dockermod.translate.container", "salt.utils.dockermod.translate.helpers", "logging", "copy"], "function_names": ["test_environment", "test_shm_size", "test_group_add", "test_iprange", "test_network_mode", "test_publish_all_ports", "test_cpu_shares", "test_userns_mode", "test_memswap_limit", "test_mem_swappiness", "test_device_read_iops", "test_driver", "test_pid_mode", "test_binds", "test_blkio_weight_device", "test_oom_kill_disable", "test_dns", "test_get_port_range", "test_domainname", "test_cap_drop", "test_volumes", "test_dns_search", "test_labels", "test_privileged", "test_extra_hosts", "test_subnet", "test_tmpfs", "test_links", "test_dns_opt", "test_sysctls", "test_stop_timeout", "test_log_config", "test_volume_driver", "test_stop_signal", "test_mem_limit", "test_entrypoint", "test_cpuset_mems", "test_isolation", "test_gateway", "test_user", "__init__", "test_restart_policy", "test_check_duplicate", "test_cpu_period", "test_get_port_def", "test_cpu_group", "test_name", "test_command", "test_detach", "test_options", "wrap", "test_ipam", "test_ipc_mode", "test_device_write_iops", "test_lxc_conf", "test_pids_limit", "test_storage_opt", "test_mac_address", "__call__", "test_ipam_opts", "test_blkio_weight", "test_enable_ipv6", "test_hostname", "test_internal", "test_stdin_open", "test_auto_remove", "test_oom_score_adj", "test_working_dir", "ipam_pools", "apply_defaults", "test_network_disabled", "test_read_only", "test_device_read_bps", "test_volumes_from", "test_ports", "test_device_write_bps", "test_aux_addresses", "test_ulimits", "tearDown", "test_ingress", "test_security_opt", "test_devices", "test_ipam_driver", "test_tty", "test_attachable", "test_port_bindings", "test_key_value", "test_stringlist", "test_cap_add", "normalize_ports", "test_cpuset_cpus"], "function_calls": ["assert_stringlist", "assert_dict", "assert_string", "assert_key_equals_value", "assert_key_colon_value", "assert_device_rates", "assert_int_or_string", "str", "assert_int", "assert_subnet", "assert_bool", "getattr", "sorted", "assert_cmd", "isinstance", "assert_labels"], "class_names": ["assert_stringlist", "assert_dict", "assert_labels", "assert_string", "assert_key_equals_value", "Assert", "assert_key_colon_value", "assert_device_rates", "TranslateBase", "assert_int", "assert_subnet", "assert_bool", "DockerTranslateHelperTestCase", "TranslateContainerInputTestCase", "assert_cmd", "TranslateNetworkInputTestCase", "assert_int_or_string"], "class_method_calls": ["log.debug", "udp_ports.append", "testcase.assertRaisesRegex", "self.normalize_ports", "os.path", "translate_helpers.get_port_def", "logging.getLogger", "self.assertEqual", "self.translator", "self.ip_addrs", "self.assertRaisesRegex", "copy.deepcopy", "self.func", "translate_helpers.get_port_range", "name.endswith", "self.test_stringlist", "self.apply_defaults", "tcp_ports.append", "self.test_key_value", "salt.utils", "defaults.items", "testcase.assertEqual", "vals.split", "functools.wraps", "bindings.split", "ulimits.split", "expected.items", "self.id", "path.replace", "testcase.apply_defaults", "self.wrap"]}, "test_etcd_mod.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.etcd_mod", "pytest"], "function_names": ["configure_loader_modules", "test_wait_rm", "test_rm", "test_mod_watch", "test_directory", "test_set", "test_wait_set"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["etcd_state.wait_set", "etcd_state.mod_watch", "etcd_state.__salt__", "set_mock.return_value", "etcd_state.set_", "pytest.fixture", "etcd_state.wait_rm", "get_mock.return_value", "etcd_state.rm", "etcd_state.directory", "patch.dict", "rm_mock.return_value"]}, "test_freezer.py": {"libraries": ["salt.exceptions.CommandExecutionError", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "salt.modules.freezer", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_restore_remove_extra_package", "test_restore_clean_yml", "test_restore_add_missing_repo", "test_freeze_success_new_state", "test_restore_fails_missing_state", "test_freeze_success_force", "test_status", "test_list", "test_freeze_fails_cache", "test_freeze_fails_already_frozen", "test_restore_add_missing_package", "test_freeze_success_two_freeze", "setup_loader_modules", "test_restore_remove_extra_repo"], "function_calls": ["patch", "OSError", "MagicMock"], "class_names": ["FreezerTestCase"], "class_method_calls": ["self.assertRaises", "load.side_effect", "listdir.return_value", "freezer.status", "makedirs.call_count", "isfile.side_effect", "self.assertEqual", "isdir.return_value", "dump.assert_called", "freezer.freeze", "freezer.list_", "self.assertFalse", "freezer.__salt__", "fopen.assert_called", "patch.dict", "status.return_value", "freezer.restore", "self.assertTrue", "load.assert_called", "makedirs.side_effect", "remove.call_count", "makedirs.assert_called_once"]}, "test_gpg.py": {"libraries": ["tests.support.mock.Mock", "tests.support.mock.patch", "pytest", "salt.states.gpg"], "function_names": ["test_gpg_present_test_mode_no_changes", "configure_loader_modules", "test_gpg_present_trust_change", "test_gpg_present_new_key", "gpg_receive", "test_gpg_present_new_key_and_trust", "keys_list", "gpg_trust", "gpg_list_keys"], "function_calls": ["getattr", "bool", "Mock"], "class_names": [], "class_method_calls": ["recv.return_value", "gpg.present", "trust.return_value", "gpg_receive.assert_not_called", "gpg_trust.assert_not_called", "pytest.fixture", "gpg_trust.assert_called_once", "pytest.mark", "gpg.__opts__", "patch.dict", "list_.return_value", "gpg.__salt__", "gpg_receive.assert_called_once"]}, "test_http.py": {"libraries": ["sys", "requests", "werkzeug.wrappers.Response", "tests.support.mock.MagicMock", "pytest", "pytestshellutils.utils.ports", "salt.utils.http", "tests.support.mock.patch", "urllib"], "function_names": ["test_sanitize_components_one_element", "test_backends_decode_body_false", "test_requests_post_content_type", "test_requests_multipart_formdata_post", "test_parse_cookie_header", "test_session_ca_bundle_verify_false", "test_sanitize_url_no_elements", "test_sanitize_url_single_element", "test_sanitize_components_multiple_elements", "test_sanitize_url_multiple_elements", "test_query_error_handling", "test_query_proxy", "test_sanitize_url_hide_fields_none", "test_backends_decode_body_true", "test_session_ca_bundle", "test_sanitize_components_no_elements", "test_query_null_response", "mirror_post_handler", "test_session_headers", "test_requests_session_verify_ssl_false"], "function_calls": ["patch", "isinstance", "MagicMock", "Response"], "class_names": [], "class_method_calls": ["httpserver.host", "ports.get_unused_localhost_port", "kwargs.pop", "http._sanitize_url_components", "match_this.format", "ret.verify", "request.data", "cookie.value", "httpserver.url_for", "http.session", "http.parse_cookie_header", "http.sanitize_url", "sys.platform", "urllib.parse", "ret.pop", "ret.get", "cookie.domain", "cookie.path", "ret.headers", "pytest.mark", "mock_session.return_value", "pytest.raises", "requests.exceptions", "ret.status_code", "httpserver.expect_request", "ssl_webserver.url", "cookie.name", "cookie.secure", "session.get", "body.find", "cookie.expires", "sess.headers", "http.query"]}, "test_ipset.py": {"libraries": ["tests.support.unit.TestCase", "salt.states.ipset", "tests.support.mock.MagicMock", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch", "tests.support.mock.call"], "function_names": ["test_entries_already_present", "test_no_set", "test_remove_success", "test_flush_fails", "test_absent", "setup_loader_modules", "test_creates_set", "_runner", "test_already_exists", "test_missing_entry", "test_needs_update_test_mode", "test_already_absent", "test_success", "test_remove_fails", "test_add_fails", "test_create_fails", "test_del_fails", "test_remove_test_mode", "test_in_test_mode"], "function_calls": ["call", "MagicMock"], "class_names": ["IpsetSetPresentTestCase", "IpsetAbsentTestCase", "IpsetPresentTestCase", "IpsetSetAbsentTestCase", "IpsetFlushTestCase"], "class_method_calls": ["self.assertDictEqual", "ipset.absent", "mock_add.call_count", "mock_delete_set.assert_called_once_with", "ipset.flush", "mock_add.assert_has_calls", "mock_check_set.assert_called_once_with", "ipset.set_present", "mock_check.assert_has_calls", "mock_flush.call_count", "mock_flush.assert_called_once_with", "self.fake_entries", "self.fake_name", "mock_delete.assert_has_calls", "mock_new_set.call_count", "mock_delete_set.call_count", "mock_new_set.assert_called_once_with", "ipset.set_absent", "patch.dict", "ipset.present", "mock_delete.call_count", "ipset.__opts__", "self._runner", "self.assertTrue", "ipset.__salt__", "self.fake_set_type"]}, "test_mac_assistive.py": {"libraries": ["salt.states.mac_assistive", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_installed_enabled", "configure_loader_modules", "test_installed_not_enabled", "test_installed_not_disabled", "test_installed"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["enable_mock.called", "installed_mock.assert_called_once_with", "install_mock.called", "pytest.fixture", "install_mock.assert_called_once_with", "enabled_mock.assert_called_once_with", "assistive.installed", "assistive.__salt__", "patch.dict", "enable_mock.assert_called_once_with"]}, "test_mac_brew_pkg.py": {"libraries": ["os", "salt.utils.pkg", "textwrap", "salt.modules.mac_brew_pkg", "salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["TAPS_LIST", "test_homebrew_os_bin_fallback_apple_silicon", "test_tap_failure", "test_info_installed", "test_unhold", "test_tap_installed", "test_list_pkgs_removed", "test_unhold_not_installed", "HOMEBREW_PREFIX", "test_refresh_db", "test_homebrew_bin", "test_tap", "custom_call_brew", "test_list_pkgs_no_context", "test_hold_not_installed", "test_unhold_not_pinned", "test_list_taps", "configure_loader_modules", "test_homebrew_prefix_env", "test_list_upgrades", "test_homebrew_prefix_returns_none_even_with_execution_errors", "test_hold", "custom_add_pkg", "test_homebrew_prefix_command", "test_install", "test_hold_pinned", "test_refresh_db_failure", "TAPS_STRING", "test_list_pkgs_versions_true", "mock_utils_path_which", "test_version", "test_homebrew_prefix_returns_none", "test_list_pkgs_homebrew_cask_pakages", "test_remove", "HOMEBREW_BIN"], "function_calls": ["patch", "dict", "MagicMock", "Mock"], "class_names": [], "class_method_calls": ["mac_brew.list_pkgs", "pytest.fixture", "mac_brew.refresh_db", "list_pkgs_context_mock.assert_not_called", "os.path", "mac_brew.hold", "patch.object", "mac_brew.version", "pytest.raises", "mac_brew.__salt__", "mac_brew.install", "mac_brew.list_upgrades", "mac_brew._tap", "list_pkgs_context_mock.reset_mock", "textwrap.dedent", "salt.utils", "patch.dict", "mac_brew._list_taps", "os.environ", "mac_brew.homebrew_prefix", "mac_brew._homebrew_os_bin", "mac_brew.__context__", "mac_brew._homebrew_bin", "mac_brew.unhold", "mac_brew.info_installed", "mac_brew.remove"]}, "test_mac_desktop.py": {"libraries": ["salt.modules.mac_desktop", "salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_screensaver_error", "configure_loader_modules", "test_screensaver", "test_say_error", "test_say", "test_lock", "test_get_output_volume", "test_set_output_volume", "test_lock_error", "test_get_output_volume_error", "test_set_output_volume_error"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["mac_desktop.__salt__", "mac_desktop.get_output_volume", "pytest.fixture", "mac_desktop.lock", "mac_desktop.screensaver", "mac_desktop.say", "pytest.raises", "mac_desktop.set_output_volume", "patch.dict"]}, "test_mac_group.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError", "tests.support.mock.MagicMock", "pytest", "salt.modules.mac_group", "tests.support.mock.patch"], "function_names": ["test_delete_underscore", "test_add_group_exists", "test_add_underscore", "test_info_whitespace", "test_add_gid_exists", "test_getent", "test_info", "test_format_info", "test_delete", "test_add_whitespace", "configure_loader_modules", "test_add", "test_chgid", "test_chgid_gid_int", "test_chgid_gid_same", "test_add_gid_int", "test_delete_whitespace", "test_delete_group_exists", "test_chgid_group_exists"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["mac_group.add", "mac_group.__salt__", "pytest.fixture", "grp.struct_group", "mac_group.chgid", "pytest.raises", "mac_group.info", "mac_group.delete", "mac_group._format_info", "patch.dict", "mac_group.getent", "pytest.importorskip"]}, "test_mac_keychain.py": {"libraries": ["salt.states.mac_keychain", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "tests.support.mock.call"], "function_names": ["test_default_keychain_set_already", "configure_loader_modules", "test_install_cert", "test_uninstalled_cert", "test_uninstall_cert", "test_default_keychain_missing", "test_installed_cert", "test_default_keychain", "test_install_cert_salt_fileserver", "test_installed_cert_hash_different"], "function_calls": ["patch", "call", "MagicMock"], "class_names": [], "class_method_calls": ["get_default_mock.assert_called_once_with", "uninstall_mock.assert_called_once_with", "keychain.default_keychain", "set_mock.assert_called_once_with", "set_mock.called", "exists_mock.return_value", "install_mock.called", "pytest.fixture", "keychain.uninstalled", "install_mock.assert_called_once_with", "friendly_mock.assert_called_once_with", "patch.dict", "list_mock.assert_has_calls", "list_mock.assert_called_once_with", "keychain.__salt__", "keychain.installed", "uninstall_mock.called"]}, "test_mac_pkgutil.py": {"libraries": ["salt.modules.mac_pkgutil", "tests.support.mock.patch", "pytest"], "function_names": ["configure_loader_modules", "test_install_already_there", "test_install"], "function_calls": ["patch"], "class_names": [], "class_method_calls": ["_install_from_path.called", "mac_pkgutil.install", "pytest.fixture", "_install_from_path.assert_called_with"]}, "test_mac_portspkg.py": {"libraries": ["pytest"], "function_names": ["test_refresh_db", "_setup_teardown_vars", "uninstalled_pkg_name", "test_upgrade_available", "test_list_upgrades_type", "test_latest_version", "test_install", "test_list_pkgs", "test_upgrade", "pkg", "test_remove", "installed_pkg_name"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["modules.pkg", "pkg.list_pkgs", "pkg.upgrade", "result.data", "pkg.refresh_db", "pkg.latest_version", "pytest.fixture", "pytest.mark", "pkg.list_upgrades", "pkg.upgrade_available", "pkg.install", "pkg.remove", "ret.data"]}, "test_mac_power.py": {"libraries": ["salt.exceptions.SaltInvocationError", "salt.modules.mac_power", "pytest"], "function_names": ["configure_loader_modules", "test_validate_sleep_bool_false", "test_validate_sleep_unexpected", "test_validate_sleep_valid_number", "test_validate_sleep_bool_true", "test_validate_sleep_invalid_number", "test_validate_sleep_invalid_string", "test_validate_sleep_valid_string"], "function_calls": [], "class_names": [], "class_method_calls": ["pytest.raises", "mac_power._validate_sleep", "pytest.fixture"]}, "test_mac_service.py": {"libraries": ["salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "salt.modules.mac_service"], "function_names": ["test_service_status_on_daemon_with_failing_list_check", "test_get_service_on_service_dead", "test_service_loaded_when_true", "test_service_keep_alive", "test_service_status_no_service", "test_service_restart_failed_start", "test_service_disabled_srvname_wrong", "test_service_loaded_when_false", "test_service_disabled_when_enabled", "test_service_disabled_status_upper_case", "test_service_keep_alive_pathstate_file_rm", "test_service_keep_alive_empty", "test_service_keep_alive_pathstate", "test_service_name_change_salt_syndic", "test_service_keep_alive_false", "test_service_keep_alive_pathstate_false", "test_service_restart_failed_stop", "test_service_restart_already_loaded", "test_service_disabled_when_disabled", "configure_loader_modules", "test_service_name_change_salt_master", "test_service_status_on_daemon_with_no_pid_and_not_always_running", "test_service_status_on_agent_with_pid", "test_service_name_change_salt_api", "test_service_restart_not_loaded", "test_service_status_on_agent_with_no_pid_and_should_be_running", "test_service_status_on_daemon_with_no_pid_and_should_be_running", "test_service_name_change_salt_minion", "test_service_enabled_when_disabled", "test_service_keep_alive_missing", "test_service_keep_alive_wrong_setting", "test_service_enabled_when_enabled", "test_service_status_on_daemon_with_pid"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["mac_service.disabled", "mac_service._get_service", "mac_service.restart", "mac_service.__utils__", "mac_service.__salt__", "mac_service._always_running_service", "pytest.fixture", "mac_service.__context__", "pytest.raises", "patch.dict", "mac_service.loaded", "mac_service.status", "patch.object", "mac_service.enabled"]}, "test_mac_shadow.py": {"libraries": ["datetime.datetime", "salt.exceptions.CommandExecutionError", "salt.modules.mac_shadow", "pytest", "tests.support.mock.patch"], "function_names": ["zero_date", "test_get_login_failed_last_error", "test_get_login_failed_last_no_value", "test_get_account_created_no_value", "test_get_account_created", "test_get_login_failed_count_no_value", "test_get_login_failed_count_error", "test_get_last_change_error", "test_get_account_created_error", "test_get_last_change", "test_login_failed_count", "test_get_last_change_no_value", "test_login_failed_last"], "function_calls": ["CommandExecutionError"], "class_names": [], "class_method_calls": ["mac_shadow.get_login_failed_last", "mac_shadow.get_account_created", "pytest.fixture", "pytest.mark", "mac_shadow.get_last_change", "pytest.raises", "datetime.fromtimestamp", "patch.object", "mac_shadow.get_login_failed_count"]}, "test_mac_softwareupdate.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.modules.mac_softwareupdate"], "function_names": ["configure_loader_modules", "test_mojave_list_recommended", "test_catalina_list_restart", "test_mojave_list_shut_down", "test_bigsur_list_recommended", "test_mojave_list_available", "test_catalina_list_shut_down", "test_bigsur_list_available", "test_mojave_list_restart", "test_bigsur_list_restart", "test_catalina_list_recommended", "test_bigsur_list_shut_down", "test_mojave_list_available_trailing_ws", "test_catalina_list_available"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["patch.dict", "mac_softwareupdate.list_available", "pytest.fixture", "mac_softwareupdate.__grains__"]}, "test_mac_system.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError", "pytest", "logging", "saltfactories.utils.random_string"], "function_names": ["computer_name", "test_get_set_remote_events", "test_get_set_computer_name", "test_get_list_startup_disk", "test_get_set_remote_login", "_remote_login_cleanup", "test_get_set_subnet_name", "service", "subnet_name", "test_get_set_restart_delay", "system", "test_get_set_boot_arch", "_remote_events_cleanup", "test_get_set_disable_keyboard_on_lock", "_keyboard_cleanup"], "function_calls": ["str", "isinstance", "random_string"], "class_names": [], "class_method_calls": ["pytest.fixture", "system.set_startup_disk", "system.set_computer_name", "system.set_subnet_name", "modules.service", "logging.getLogger", "modules.system", "system.get_disable_keyboard_on_lock", "system.get_startup_disk", "system.get_boot_arch", "pytest.mark", "system.get_remote_login", "pytest.raises", "system.set_remote_login", "system.set_restart_delay", "system.get_subnet_name", "pytest.skip", "system.set_disable_keyboard_on_lock", "system.get_computer_name", "exc.value", "system.set_remote_events", "system.get_restart_delay", "system.set_boot_arch", "system.get_remote_events", "system.list_startup_disks"]}, "test_mac_timezone.py": {"libraries": ["salt.exceptions.SaltInvocationError", "datetime", "pytest"], "function_names": ["test_get_time", "test_get_set_zonecode", "test_zone_compare", "_reset_time_server", "test_get_offset", "test_list_zones", "_reset_using_network_time", "test_set_time", "test_get_set_using_network_time", "_reset_date", "_reset_zone", "_reset_time", "test_get_set_date", "test_get_set_time_server", "timezone", "test_get_set_zone"], "function_calls": ["str", "isinstance"], "class_names": [], "class_method_calls": ["timezone.get_using_network_time", "timezone.set_time", "pytest.fixture", "timezone.get_date", "modules.timezone", "timezone.set_zone", "timezone.set_date", "pytz.timezone", "timezone.get_offset", "timezone.list_zones", "pytest.mark", "pytest.raises", "pytz.UTC", "timezone.set_time_server", "now.astimezone", "timezone.set_using_network_time", "timezone.get_time", "datetime.date", "exc.value", "pytest.importorskip", "timezone.zone_compare", "datetime.datetime", "timezone.get_time_server", "timezone.get_zone"]}, "test_mac_user.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "salt.modules.mac_user"], "function_names": ["test_chgroups_user_exists", "test_chuid_int", "test_chgid_int", "test_delete_user_exists", "test_first_avail_uid", "test_dscl", "mock_info_ret", "test_chfullname_same_name", "test_kcpassword", "test_getent", "test_chfullname_user_exists", "test_info", "test_chgroups_same_desired", "test_chgid_user_exists", "test_format_info", "test_chshell_same_shell", "test_add_whitespace", "test_chshell_user_exists", "configure_loader_modules", "test_add_uid_int", "test_list_users", "test_chhome_same_home", "test_add_user_exists", "test_chhome_user_exists", "_test_flush_dscl_cache", "test_add_gid_int", "test_chuid_same_uid", "test_delete_whitespace", "test_chgroups_bad_groups", "test_chgid_same_gid", "mock_pwall", "test_chuid_user_exists"], "function_calls": ["patch", "MagicMock", "len"], "class_names": [], "class_method_calls": ["mac_user._first_avail_uid", "mac_user.list_users", "mac_user.chgid", "pytest.fixture", "mac_user.getent", "pwd.struct_passwd", "mac_user.__grains__", "mac_user.chgroups", "pytest.mark", "hashes.items", "pytest.raises", "mac_user.chuid", "mac_user.chhome", "mac_user._format_info", "mac_user.__salt__", "mac_user.add", "mac_user.info", "patch.dict", "mac_user.chshell", "pytest.importorskip", "mac_user._kcpassword", "bytes.fromhex", "mac_user.delete", "mac_user._dscl", "mac_user.chfullname"]}, "test_mac_xattr.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.mac_xattr", "pytest"], "function_names": ["configure_loader_modules", "test_exists_already", "test_exists_not", "test_delete_not", "test_exists_change", "test_delete"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["write_mock.assert_called_once_with", "xattr.__salt__", "exists_mock.return_value", "pytest.fixture", "xattr.exists", "xattr.delete", "delete_mock.called", "write_mock.called", "patch.dict", "list_mock.assert_called_once_with", "delete_mock.assert_called_once_with"]}, "test_nilrt_ip.py": {"libraries": ["tests.support.unit.TestCase", "tests.support.mock.mock", "salt.modules.nilrt_ip", "tests.support.mock.MagicMock", "pytest", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_change_state_down_state", "test_change_state_up_state", "test_set_static_all_with_dns", "test_set_static_all_no_dns", "setup_loader_modules"], "function_calls": ["patch", "MagicMock", "next"], "class_names": ["NilrtIPTestCase"], "class_method_calls": ["patch.dict", "self.assertEqual", "nilrt_ip.set_static_all", "nilrt_ip.__grains__", "change_dhcp_config_mock.assert_called_with", "save_config_mock.mock_calls", "mock.call", "call.args", "iface_mock.name", "nilrt_ip._change_state", "patch.object", "pytest.importorskip"]}, "test_opkg.py": {"libraries": ["os", "collections", "textwrap", "tests.support.mock.mock_open", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "pytest", "salt.modules.opkg", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch", "copy"], "function_names": ["test_mod_repo_uri_not_provided", "test_info_installed", "test_file_dict", "test_remove_noaction", "test_version_clean", "test_mod_repo_add_new_repo", "test_check_extra_requirements", "setup_loader_modules", "test_owner", "tearDownClass", "test_virtual_open_embedded_system", "test_virtual_update_restart_state_called", "test_upgrade_available", "test_file_list", "test_mod_repo_set_trusted", "test_mod_repo_repo_exists", "test_install", "test_list_repos", "test_virtual_update_restart_state_not_called", "test_version", "test_virtual_ni_linux_rt_system", "_get_repo", "setUpClass", "test_remove", "test_virtual_not_supported_system", "test_install_noaction"], "function_calls": ["patch", "MagicMock", "sorted", "mock_open"], "class_names": ["OpkgTestCase"], "class_method_calls": ["self.assertDictEqual", "opkg.CommandExecutionError", "opkg.mod_repo", "cls.removed", "opkg.file_dict", "opkg.version_clean", "os.path", "opkg.__salt__", "opkg.info_installed", "file_mock.filehandles", "cls.opkg_vim_files", "patch.object", "installed.items", "self.assertEqual", "patch.multiple", "self.assertRaisesRegex", "self.opkg_vim_files", "copy.deepcopy", "pytest.mark", "self.installed", "cls.opkg_vim_info", "self.assertFalse", "opkg.check_extra_requirements", "opkg.__grains__", "opkg.file_list", "opkg.install", "opkg.__virtual__", "opkg.owner", "textwrap.dedent", "ordered_info.items", "opkg.salt", "opkg.upgrade_available", "patch.dict", "cls.packages", "mock_cmd.assert_not_called", "self._get_repo", "self.opkg_vim_info", "opkg.list_repos", "opkg.os", "collections.OrderedDict", "opkg.version", "self.packages", "k.lower", "self.removed", "handle.writelines", "opkg.remove", "handle.write", "cls.installed", "mock_cmd.assert_called_once"]}, "test_pip.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.states.pip_state", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_issue_64169"], "function_calls": ["CommandExecutionError", "MagicMock"], "class_names": [], "class_method_calls": ["caplog.at_level", "logging.WARNING", "pip_state.installed", "pytest.fixture", "caplog.messages", "pytest.fail", "patch.dict", "mock_pip_install.call_args", "pip_state.__salt__"]}, "test_pkg.py": {"libraries": ["salt.utils.pkg", "tests.support.mock.ANY", "tests.support.unit.TestCase", "salt.utils.pkg.rpm", "tests.support.mock.MagicMock", "tests.support.mock.patch"], "function_names": ["test_get_osarch_by_platform_no_cpu_arch_no_machine", "test_split_comparison", "test_get_osarch_by_platform", "test_get_osarch_by_rpm", "test_get_osarch_by_platform_no_cpu_arch"], "function_calls": ["patch", "MagicMock"], "class_names": ["PkgUtilsTestCase", "PkgRPMTestCase"], "class_method_calls": ["subprocess_mock.Popen", "rpm.get_osarch", "self.assertEqual", "salt.utils", "self.test_parameters"]}, "test_runit.py": {"libraries": ["salt.modules.runit", "tests.support.mock.patch", "pathlib", "pytest"], "function_names": ["configure_loader_modules", "test__get_svc_path_on_symlinked_service", "service_dir", "test__get_svc_path_on_non_symlinked_service"], "function_calls": ["str", "patch", "len"], "class_names": [], "class_method_calls": ["dirname.mkdir", "service.symlink_to", "pytest.fixture", "pytest.mark", "pathlib.Path", "service.mkdir", "service_runfile.touch", "runit._get_svc_path", "patch.object", "sym_dir.mkdir"]}, "test_saltutil.py": {"libraries": ["salt.states.saltutil", "salt.modules.saltutil", "tests.support.mock.MagicMock", "pytest", "inspect", "tests.support.mock.patch"], "function_names": ["test_saltutil_sync_states_should_match_saltutil_module", "test_saltutil_sync_all_test", "configure_loader_modules", "test_saltutil_sync_all_nochange", "test_saltutil_sync_all_change"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["pytest.fixture", "saltutil_state.__salt__", "inspect.getmembers", "saltutil_state.__opts__", "saltutil_state.sync_all", "patch.dict", "inspect.isfunction"]}, "test_sdb.py": {"libraries": ["os", "tests.support.unit.TestCase", "tests.support.runtests.RUNTIME_VARS", "salt.utils.sdb", "tests.support.mixins.LoaderModuleMockMixin"], "function_names": ["test_sqlite_get_found", "tearDownClass", "test_sqlite_get_not_found", "setUpClass", "setup_loader_modules"], "function_calls": [], "class_names": ["SdbTestCase"], "class_method_calls": ["os.unlink", "sdb.sdb_set", "RUNTIME_VARS.TMP", "self.assertEqual", "cls.sdb_opts", "sdb.sdb_get", "self.sdb_opts", "os.path", "cls.TEMP_DATABASE_FILE"]}, "test_service.py": {"libraries": ["salt.states.service", "salt.modules.beacons", "salt.utils.platform", "salt.utils.event.SaltEvent", "tests.support.mock.MagicMock", "salt.states.beacon", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["test_running", "configure_loader_modules", "test_running_with_reload", "test_disabled", "test_dead_with_missing_service", "test_get_systemd_only_platform", "test_enabled_in_test_mode", "test_mod_watch", "test_func", "test_enabled", "test_get_systemd_only", "test_dead_in_offline_mode", "test_mod_beacon", "func", "test_running_in_offline_mode", "test_get_systemd_only_no_mock", "test_dead"], "function_calls": ["MagicMock", "patch", "str", "int", "len", "isinstance"], "class_names": [], "class_method_calls": ["service.__grains__", "service.__opts__", "beaconmod.__opts__", "pytest.fixture", "service.enabled", "patch.object", "service.disabled", "logging.getLogger", "beaconstate.present", "service.__states__", "pytest.mark", "beaconmod.list_", "service.mod_watch", "service.mod_beacon", "pytest.skip", "beaconmod.__salt__", "service._get_systemd_only", "salt.loader", "salt.utils", "patch.dict", "service.dead", "service.__salt__", "beaconstate.__salt__", "beaconmod.list_available", "service.__utils__", "service.__context__", "beaconmod.add", "os_release.split", "service.running"]}, "test_swarm.py": {"libraries": ["tests.support.unit.TestCase", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch", "salt.modules.swarm"], "function_names": ["from_env", "setup_loader_modules", "test___virtual___valid_docker_module", "test___virtual___not_valid_docker_module"], "function_calls": ["patch", "NotValidDockerModule", "ValidDockerModule", "len"], "class_names": ["SwarmTestCase", "NotValidDockerModule", "ValidDockerModule", "APIClient"], "class_method_calls": ["salt.modules", "self.assertFalse", "self.assertEqual"]}, "test_system.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.modules.system"], "function_names": ["test_poweroff", "configure_loader_modules", "test_reboot", "test_shutdown_freebsd", "test_init", "test_halt", "test_reboot_with_delay", "test_shutdown_netbsd", "test_shutdown_openbsd", "test_shutdown"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["system.reboot", "system.halt", "pytest.fixture", "pytest.mark", "system.poweroff", "system.shutdown", "patch.dict", "system.__salt__", "system.init", "cmd_mock.assert_called_with"]}, "test_user.py": {"libraries": ["salt.utils.user", "types.SimpleNamespace", "tests.support.mock.MagicMock", "pytest", "grp", "tests.support.mock.patch"], "function_names": ["test_get_group_list"], "function_calls": ["patch", "SimpleNamespace", "MagicMock"], "class_names": [], "class_method_calls": ["grp.struct_group", "getgrgid.assert_called_once", "salt.utils", "pytest.importorskip"]}, "test_vault.py": {"libraries": ["salt.states.vault", "pytest", "salt.modules.vault", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["policy_fetch", "configure_loader_modules", "test_policy_present_changes", "test_policy_absent_changes", "policy_write", "test_policy_present_no_changes", "test_policy_present_create", "test_policy_absent_no_changes"], "function_calls": ["Mock"], "class_names": [], "class_method_calls": ["delete.assert_called_once_with", "vault.__opts__", "policy_fetch.return_value", "delete.assert_not_called", "pytest.fixture", "pytest.mark", "vault.policy_present", "policy_write.assert_called_once_with", "vault.policy_absent", "vaultexe.policy_write", "vaultexe.policy_delete", "patch.dict", "vaultexe.policy_fetch", "vault.__salt__", "policy_write.assert_not_called"]}, "test_virtualenv_mod.py": {"libraries": ["sys", "tests.support.helpers.TstSuiteLoggingHandler", "salt.exceptions.CommandExecutionError", "tests.support.unit.TestCase", "tests.support.helpers.ForceImportErrorOn", "tests.support.mock.MagicMock", "tests.support.mixins.LoaderModuleMockMixin", "salt.modules.virtualenv_mod", "tests.support.mock.patch"], "function_names": ["test_symlinks_argument", "test_virtualenv_ver", "test_clear_argument", "test_issue_6029_deprecated_distribute", "test_upgrade_argument", "test_python_argument", "test_virtualenv_ver_importerror", "test_virtualenv_ver_importerror_cmd_error", "test_issue_6030_deprecated_never_download", "test_issue_57734_debian_package", "test_virtualenv_importerror_ver_output", "test_prompt_argument", "test_issue_57734_debian_package_importerror", "test_get_virtualenv_version_from_shell", "test_unapplicable_options", "test_issue_6031_multiple_extra_search_dirs", "setup_loader_modules"], "function_calls": ["patch", "TstSuiteLoggingHandler", "MagicMock", "ForceImportErrorOn"], "class_names": ["VirtualenvTestCase"], "class_method_calls": ["self.assertRaises", "sys.executable", "virtualenv_mod.virtualenv_ver", "self.assertEqual", "patch.dict", "patcher.stop", "virtualenv_mod.create", "patcher.start", "virtualenv_mod.__salt__", "virtualenv_mock.__version__", "handler.messages", "mock.assert_called_with", "base_virtualenv_mock.__version__", "self.addCleanup", "mock.assert_called_once_with", "self.assertIn"]}, "test_win_certutil.py": {"libraries": ["salt.states.win_certutil", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_add_store_fail_retcode", "configure_loader_modules", "test_add_store_fail_check", "test_del_store_fail_retcode", "test_del_store_fail_check"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["certutil.del_store", "certutil.add_store", "certutil.__salt__", "pytest.fixture", "patch.dict"]}, "test_win_dsc.py": {"libraries": ["salt.exceptions", "psutil", "subprocess", "pytest", "os.path", "shutil"], "function_names": ["ps1_file_multiple", "test_get_config_status", "test_test_config_not_configured", "test_get_lcm_config", "test_compile_config_missing", "test_compile_config_issue_61261", "test_apply_config", "test_get_config_not_configured", "test_test_config", "test_get_config_multiple", "_reset_config", "test_get_config_single", "ps1_file", "ps1_file_meta", "psd1_file", "dsc", "test_set_lcm_config", "test_apply_config_missing", "test_get_config_status_not_configured", "test_compile_config"], "function_calls": ["str", "_reset_config", "isinstance"], "class_names": [], "class_method_calls": ["proc.name", "pytest.fixture", "dsc.run_config", "psutil.process_iter", "os.path", "file.parent", "dsc.compile_config", "pytest.helpers", "dsc.get_config_status", "dsc.get_lcm_config", "pytest.mark", "ps1_file.parent", "pytest.raises", "subprocess.run", "dsc.get_config", "shutil.rmtree", "dsc.apply_config", "exc.value", "dsc.set_lcm_config", "salt.exceptions", "subprocess.DEVNULL", "dsc.test_config", "modules.dsc", "dsc.remove_config", "os.remove", "proc.kill"]}, "test_win_shortcut.py": {"libraries": ["os", "pytest", "win32com.shell.shell", "pythoncom", "shutil"], "function_names": ["test_present_existing_subdir", "tmp_dir", "test_present_test_true", "test_present_existing_test_true", "test_present_existing_subdir_make_dirs", "shortcut_mod", "tmp_shortcut", "test_present", "test_present_existing_same", "test_present_existing", "shortcut", "test_present_existing_backup", "test_present_existing_force"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["short_cut.SetHotkey", "tmp_path_factory.mktemp", "shortcut_mod.get", "test_dir.exists", "short_cut.QueryInterface", "ret.comment", "pytest.fixture", "os.path", "tmp_dir.exists", "short_cut.SetArguments", "short_cut.SetIconLocation", "shell.CLSID_ShellLink", "pytest.mark", "states.shortcut", "modules.shortcut", "pythoncom.CoCreateInstance", "short_cut.SetDescription", "short_cut.SetShowCmd", "persist_file.Save", "short_cut.SetWorkingDirectory", "ret.result", "shutil.rmtree", "short_cut.SetPath", "ret.changes", "shell.IID_IShellLink", "shortcut.present", "pythoncom.CLSCTX_INPROC_SERVER", "ret.name", "pythoncom.IID_IPersistFile"]}, "test_win_useradd.py": {"libraries": ["salt.exceptions.CommandExecutionError", "saltfactories.utils.random_string", "pytest"], "function_names": ["test_removegroup_int", "test_chfullname_str", "test_add_int", "test_chgroups_list_int", "test_setpassword_str", "test_chgroups_single_int", "test_chgroups_list_append_false_str", "test_chhome_str", "test_chgroups_list_append_false_int", "test_get_user_sid_str", "test_chgroups_single_str", "test_chhome_int", "test_chgroups_list_str", "user", "test_get_user_sid_int", "test_chprofile_int", "test_addgroup_int", "test_delete_int", "test_update_str", "test_list_groups_int", "test_chprofile_str", "test_delete_str", "test_chfullname_int", "test_rename_str_missing", "test_rename_str", "test_info_int", "test_list_users", "test_info_str", "account_str", "test_removegroup_str", "test_rename_int_existing", "account_int", "test_add_str", "test_addgroup_str", "username_str", "test_rename_str_existing", "test_rename_int", "test_rename_int_missing", "test_setpassword_int", "username_int", "test_list_groups_str"], "function_calls": ["sorted", "random_string"], "class_names": [], "class_method_calls": ["account.username", "user.update", "pytest.fixture", "account_int.username", "user.rename", "user.list_users", "user.get_user_sid", "pytest.helpers", "user.chprofile", "groups.append", "pytest.mark", "user.removegroup", "pytest.raises", "ret.startswith", "user.add", "user.delete", "user.chhome", "user.info", "user.chfullname", "user.chgroups", "user.setpassword", "modules.user", "account_str.username", "user.list_groups", "user.addgroup"]}, "test_x509_v2.py": {"libraries": ["cryptography.hazmat.primitives.serialization.pkcs12", "base64", "cryptography", "cryptography.x509", "salt.utils.x509", "cryptography.hazmat.primitives.serialization.pkcs7", "pathlib.Path", "cryptography.hazmat.primitives.serialization.load_der_private_key", "pytest", "logging", "cryptography.hazmat.primitives.serialization.load_pem_private_key", "saltfactories.utils.random_string", "shutil"], "function_names": ["test_certificate_managed_remote_ca_cert_change", "test_certificate_managed_remote_renew", "x509ca_salt_minion", "cert_args_exts", "rsa_pubkey", "csr", "rsa_privkey_enc", "ca_minion_config", "_signed_by", "test_privkey_new_with_prereq", "rsa_privkey", "existing_privkey", "test_file_managed_does_not_run_in_test_mode_after_x509_v2_invocation_without_changes", "_get_cert", "x509_salt_minion", "ca_new_cert", "test_certificate_managed_remote_no_changes_signing_policy_override", "test_certificate_managed_remote_policy_change", "privkey_new", "privkey_new_pkcs12", "cert_args", "test_certificate_managed_remote", "_belongs_to", "_get_privkey", "x509_minion_id", "ca_cert", "x509_salt_call_cli", "ca_key_enc", "x509_pkidir", "x509_salt_run_cli", "test_privkey_new_with_prereq_pkcs12", "test_certificate_managed_remote_no_changes", "x509_salt_master", "ca_minion_id", "existing_cert", "x509_data", "ca_key", "x509_master_config"], "function_calls": ["iter", "next", "load_pem_private_key", "_belongs_to", "tuple", "ValueError", "int", "_get_privkey", "str", "random_string", "Path", "isinstance", "_get_cert", "_signed_by", "load_der_private_key"], "class_names": [], "class_method_calls": ["request.param", "cx509.load_pem_x509_certificate", "tmp_path_factory.mktemp", "p.read_bytes", "x509_salt_master.salt_minion_daemon", "x509_salt_master.salt_run_cli", "x509_salt_minion.salt_call_cli", "cryptography.__version__", "pytest.fixture", "salt_factories.salt_master_daemon", "cx509.Certificate", "salt_call_cli.run", "ret.data", "logging.getLogger", "cx509.load_der_x509_certificate", "pytest.helpers", "cert_args.update", "cert_cur.serial_number", "base64.b64decode", "pytest.mark", "x509_salt_call_cli.run", "new_file.exists", "x509util.load_privkey", "x.startswith", "pk.encode", "x509util.is_pair", "cert_new.serial_number", "cert.encode", "pk_file.exists", "x509util.verify_signature", "x509_salt_master.is_running", "ret.returncode", "shutil.rmtree", "new_file.read_text", "x509_salt_master.state_tree", "passphrase.encode", "p.exists", "pkcs7.load_pem_pkcs7_certificates", "cert.subject", "pkcs12.load_pkcs12", "cert_or_pubkey.public_key", "pkcs7.load_der_pkcs7_certificates", "pk_args.update", "factory.salt_call_cli", "factory.started"]}, "test_yumpkg.py": {"libraries": ["salt.modules.cmdmod", "os", "salt.modules.pkg_resource", "salt.modules.rpm_lowpkg", "salt.exceptions.MinionError", "salt.modules.yumpkg", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "salt.exceptions.SaltInvocationError", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.Mock", "tests.support.mock.patch", "tests.support.mock.call", "configparser"], "function_names": ["test_list_repo_pkgs_with_options", "test_call_yum_with_kwargs", "test_verify_kwargs", "test_get_repo_with_existent_repo", "test_normalize_basedir_str", "test__virtual_non_yum_system", "test_pkg_hold_dnf", "test_group_list", "test_list_pkgs_no_context", "test_get_copr_repo", "test_list_repo_pkgs_attribute_error", "test_hold_empty", "test_file_list", "test_group_install", "test_list_patches", "test_install_no_pkg_params", "test_pkg_update_dnf", "test_install_with_epoch", "yum_and_dnf", "test_remove_not_installed", "test_hold_already_held", "test_get_yum_config", "test_remove_with_epoch_and_arch_info", "test_services_need_restart_no_dnf_output", "test_download_failed", "test_get_yum_config_value_none", "test__virtual_normal", "test_hold_fails", "test_download_unlink_error", "test_normalize_basedir_error", "test_owner_not_owned", "test_call_yum_in_scope", "test_purge_not_installed", "test_list_downloaded", "test_unhold_test_true", "test_unhold_pkgs_and_sources_error", "test_latest_version_nonzero_retcode", "test_download_to_purge", "configure_loader_modules", "test_list_installed_patches", "test_group_info", "test_strip_headers", "test_unhold_already_unheld", "test_remove_error", "test_group_install_non_list_include", "test_download_missing_yumdownloader", "test__virtual_exception", "test_services_need_restart", "test_unhold_empty", "test_group_install_already_present", "test_list_pkgs_with_attr_multiple_versions", "test_info_installed_with_all_versions", "test_parse_repo_file_error", "test_file_dict", "test_download", "test_owner_empty", "test_get_repo_with_non_existent_repo", "test_hold_pkgs_sources", "test_unhold_fails", "test_list_upgrades_dnf", "test_install_minion_error", "list_repos_var", "test_download_error_no_packages", "test_list_patches_refresh", "test_remove_with_wildcard", "_add_data", "test_list_upgrades_yum", "test_group_install_include", "test_group_install_no_groups", "test_install_error_reporting", "test_latest_version_with_options", "test_remove_with_epoch", "test_latest_version_no_names", "test_list_upgrades_refresh", "test_list_pkgs", "test_refresh_db_with_options", "test__virtual_no_yum", "test_get_hold", "test_clean_metadata_with_options", "test_verify_args", "test_modified", "test_services_need_restart_requires_dnf", "test_owner_not_owned_single", "test_get_yum_config_no_main", "test_group_install_non_list_skip", "test_pkg_hold_yum", "test_unhold_pkgs_sources", "test_get_yum_config_unreadable", "test_upgrade_with_options", "test_list_repo_pkgs_byrepo", "test_services_need_restart_requires_systemd", "test_call_yum_default", "test_get_yum_config_no_config", "test_hold_pkgs_and_sources_error", "test_hold_test_true", "test_pkg_hold_tdnf", "test_upgrade_available", "test_get_options", "test_remove_retcode_error", "test_59705_version_as_accidental_float_should_become_text", "test_upgrade_error", "test_list_pkgs_with_attr", "test_list_upgrades_error", "fake_parse", "test__virtual_yumpkg_api", "test_group_install_non_list_groups", "test_61003_pkg_should_not_fail_when_target_not_in_old_pkgs", "test_del_repo_single_file", "test_del_repo_error", "test_group_install_skip", "test_install_with_options", "test_normalize_name_noarch"], "function_calls": ["MagicMock", "Mock", "patch", "call", "sorted", "len"], "class_names": [], "class_method_calls": ["yumpkg.parse_arch", "yumpkg.__virtual__", "yumpkg.upgrade", "list_pkgs_context_mock.assert_not_called", "yumpkg.__salt__", "yumpkg.list_installed_patches", "cmd.assert_called_once_with", "logging.getLogger", "data.setdefault", "pkg_resource.__grains__", "systemd_mock.assert_has_calls", "yumpkg._strip_headers", "pytest.raises", "yumpkg._parse_repo_file", "pkgs.get", "kwargs.get", "yumpkg.file_list", "expected.sort", "yumpkg.__context__", "yumpkg.services_need_restart", "expected.keys", "yumpkg._get_yum_config", "yumpkg.info_installed", "yumpkg.owner", "cmd.mock_calls", "installed.items", "yum_call.assert_any_call", "pytest.mark", "expected.append", "pytest.fail", "yumpkg.group_list", "list_pkgs_context_mock.reset_mock", "yumpkg.list_upgrades", "mock.assert_called_once_with", "cmdmod.run_all", "yum_call.call_count", "cmd_mock.mock_calls", "cmd_mock.assert_called_once_with", "yumpkg.list_pkgs", "yumpkg.hold", "cmd_mod.assert_called_once_with", "yumpkg.purge", "yumpkg.__opts__", "pkg_resource.__salt__", "yumpkg.list_patches", "yumpkg.verify", "mock_verify.assert_called_once_with", "rpm.version_cmp", "patch.object", "mock_run.assert_called_once_with", "exc_info.value", "yumpkg.download", "configparser.ConfigParser", "yumpkg.__grains__", "pkg_resource.format_pkg_list", "yumpkg._call_yum", "yumpkg._get_hold", "yumpkg.file_dict", "cmd_mock.assert_not_called", "yumpkg.upgrade_available", "pytest.skip", "yumpkg._get_copr_repo", "cmd_mock.reset_mock", "pkgs.items", "yumpkg.list_repo_pkgs", "yumpkg.install", "request.param", "yumpkg.clean_metadata", "pytest.fixture", "caplog.text", "yumpkg._get_options", "yumpkg.refresh_db", "yumpkg.remove", "yumpkg.update", "yumpkg._normalize_basedir", "yumpkg.latest_version", "yum_call.assert_called_once_with", "configparser.MissingSectionHeaderError", "yumpkg.get_repo", "yumpkg.group_info", "salt.utils", "patch.dict", "yumpkg.normalize_name", "yumpkg.list_downloaded", "os.linesep", "yumpkg._get_yum_config_value", "yumpkg.modified", "yumpkg.unhold", "yumpkg.del_repo", "yumpkg.group_install"]}, "test_check_perms.py": {"libraries": ["salt.modules.win_file", "salt.exceptions.CommandExecutionError", "salt.utils.win_dacl", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_check_perms_set_owner_test_true", "test_file", "test_check_perms_inheritance_false", "test_check_perms_reset_test_true", "test_check_perms_inheritance_true", "test_check_perms_grant", "test_check_perms_reset", "test_check_perms_set_owner", "test_check_perms_inheritance_false_test_true", "test_check_perms_deny_test_true", "test_check_perms_grant_test_true", "test_check_perms_deny", "test_check_perms_issue_43328"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["win_dacl.check_perms", "pytest.helpers", "pytest.fixture", "pytest.mark", "win_dacl.set_perms", "win_dacl.set_permissions", "pytest.raises", "patch.dict", "test_file.parent", "win_dacl.set_inheritance", "win_file.__opts__", "win_file.check_perms"]}, "test_stat.py": {"libraries": ["salt.modules.win_file", "salt.exceptions.CommandExecutionError", "salt.utils.win_dacl", "salt.utils.files", "pytest", "salt.utils.path"], "function_names": ["test_stats_issue_43328", "configure_loader_modules", "test_stat", "test_file"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.fixture", "pytest.mark", "pytest.raises", "win_file.stats", "salt.utils", "test_file.parent"]}, "test_audit_settings_module.py": {"libraries": ["os", "pytest"], "function_names": ["test_auditing_case_names", "legacy_auditing_not_defined", "clean_adv_audit", "lgpo", "enable_legacy_auditing", "test_auditing", "test_enable_legacy_audit_policy"], "function_calls": [], "class_names": [], "class_method_calls": ["lgpo.set_computer_policy", "os.environ", "lgpo.get_policy", "modules.lgpo", "pytest.fixture", "pytest.mark", "os.remove", "os.path"]}, "test_get_policy.py": {"libraries": ["os", "salt.modules.win_file", "salt.modules.win_lgpo", "salt.grains.core", "salt.utils.win_dacl", "salt.utils.files", "pathlib", "pytest", "logging", "copy"], "function_names": ["configure_loader_modules", "test_id", "checkbox_policy", "test_id_full_return_ids_hierarchical", "test_name_full_return_ids", "test_checkboxes", "test_name", "test_id_full_return_full_names", "test_name_return_full_names_hierarchical", "test_name_full_return_full_names", "test_id_full_return_ids", "osrelease", "clean_comp"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "win_lgpo.get_policy", "win_lgpo.set_computer_policy", "pytest.skip", "win_file.makedirs_", "pytest.fixture", "pytest.mark", "win_dacl.set_perms", "win_file.file_exists", "pathlib.Path", "salt.grains", "key.format", "os.getenv", "grains.get", "reg_pol.unlink", "copy.copy"]}, "test_get_policy_info.py": {"libraries": ["pytest", "packaging.version", "platform"], "function_names": ["lgpo", "_parse_platform_version", "test_62058_whitespace", "test_61859"], "function_calls": ["_parse_platform_version"], "class_names": [], "class_method_calls": ["platform.version", "platform.system", "modules.lgpo", "pytest.fixture", "pytest.mark", "lgpo.get_policy_info", "version.parse"]}, "test_registry_policy.py": {"libraries": ["salt.utils.win_reg", "pytest"], "function_names": ["lgpo", "test_reg_policy"], "function_calls": [], "class_names": [], "class_method_calls": ["lgpo.set_computer_policy", "modules.lgpo", "pytest.fixture", "pytest.mark", "salt.utils"]}, "test_auth.py": {"libraries": ["salt.utils.vault.client", "salt.utils.vault.leases", "salt.utils.vault.auth", "salt.utils.vault", "pytest", "salt.utils.vault.cache", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["token", "secret_id", "token_invalid", "token_store_empty_first", "test_approle_auth_get_token_store_available", "test_token_auth_update_token", "token_store", "test_token_auth_unrenewable_token", "test_approle_auth_is_valid", "test_token_auth_invalid_token", "test_approle_allows_no_secret_id", "test_token_auth_uninitialized", "test_approle_auth_get_token_store_empty", "token_unrenewable", "test_approle_auth_get_token_invalid", "approle", "test_approle_auth_used_locally_configured", "uncached", "test_approle_auth_get_token_login", "client", "test_approle_auth_used_num_uses", "test_token_auth_replace_token", "secret_id_invalid", "approle_invalid", "token_store_empty", "test_token_auth_used_num_uses", "cached_token", "test_token_auth_cached"], "function_calls": ["patch", "isinstance", "Mock"], "class_names": [], "class_method_calls": ["auth.update_token", "request.param", "store.is_valid", "uncached.store", "uncached.exists", "login.assert_not_called", "login.assert_called_once", "token.with_renewed", "login.return_value", "token_store_empty_first.replace_token", "pytest.fixture", "cache.get", "token_store.get_token", "auth.get_token", "uncached.get", "auth.replace_token", "auth.is_renewable", "cache.exists", "vclient.VaultClient", "pytest.mark", "pytest.raises", "client.post", "role.is_valid", "store.get_token", "kwargs.get", "token_store.is_valid", "vauth.VaultAppRoleAuth", "token.is_valid", "vault.VaultException", "request.getfixturevalue", "auth.is_valid", "vleases.VaultSecretId", "uncached.flush", "vault.VaultAuthExpired", "vault.LocalVaultSecretId", "vauth.VaultAppRole", "vcache.VaultAuthCache", "vleases.VaultToken", "auth.token", "approle.is_valid", "approle.secret_id", "vauth.VaultTokenAuth", "auth.used", "vauth.InvalidVaultToken", "old_token.duration"]}, "test_auth_pam.py": {"libraries": ["tornado.httpclient.HTTPError", "pytest", "urllib.parse"], "function_names": ["auth_creds"], "function_calls": [], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.mark", "pytest.raises", "exc.value", "response.code", "http_client.fetch", "urllib.parse"]}, "test_cors.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["app"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["app.wsgi_application", "pytest.fixture", "response.code", "http_client.fetch", "response.headers"]}, "test_external_auth_syntax.py": {"libraries": ["salt.utils.json", "pytest", "attr", "salt.utils.yaml", "salt.netapi.rest_tornado.saltnado", "tests.support.netapi", "urllib.parse"], "function_names": ["_set_pam", "app_urls", "external_auth", "auth_creds", "_set_auto", "http_server", "client_config", "external_auth_ids", "netapi_account"], "function_calls": ["ExternalAuthConfig"], "class_names": ["ExternalAuthConfig"], "class_method_calls": ["netapi.TestsTornadoHttpServer", "request.param", "pytest.fixture", "attr.ib", "netapi_account.password", "external_auth.eauth", "saltnado.SaltAuthHandler", "external_auth.pam", "urllib.parse", "pytest.helpers", "auto.default", "pytest.mark", "external_auth.expected_perms", "pam.default", "salt.utils", "response.body", "netapi_account.username", "value.fixture_id", "self.pam_key", "external_auth.auto", "response.code", "attr.s", "http_client.fetch", "self.pam_config"]}, "test_in_formats.py": {"libraries": ["salt.utils.json", "pytest", "salt.utils.yaml", "tests.support.mock.patch", "urllib.parse"], "function_names": ["app", "token", "client_headers"], "function_calls": ["patch"], "class_names": [], "class_method_calls": ["urllib.parse", "app.wsgi_application", "pytest.fixture", "pytest.mark", "io_loop.run_sync", "response.code", "salt.utils", "http_client.fetch", "response.body", "response.headers"]}, "test_out_formats.py": {"libraries": ["tornado.httpclient.HTTPError", "pytest"], "function_names": ["app"], "function_calls": [], "class_names": [], "class_method_calls": ["app.wsgi_application", "pytest.fixture", "pytest.raises", "exc.value", "http_client.fetch", "response.headers"]}, "test_auth_handler.py": {"libraries": ["salt.utils.json", "tornado.httpclient.HTTPError", "pytest", "salt.utils.yaml", "salt.netapi.rest_tornado.saltnado", "urllib.parse"], "function_names": ["app_urls"], "function_calls": ["set"], "class_names": [], "class_method_calls": ["urllib.parse", "subtests.test", "auth_creds.items", "pytest.fixture", "pytest.mark", "bad_creds.append", "pytest.raises", "exc.value", "response.code", "salt.utils", "http_client.fetch", "response.body", "saltnado.SaltAuthHandler", "response.headers"]}, "test_auth_handler_pam.py": {"libraries": ["salt.utils.json", "tornado.httpclient.HTTPError", "pytest", "salt.utils.yaml", "salt.netapi.rest_tornado.saltnado", "urllib.parse"], "function_names": ["app_urls", "auth_creds"], "function_calls": ["set"], "class_names": [], "class_method_calls": ["urllib.parse", "subtests.test", "pytest.fixture", "pytest.mark", "pytest.raises", "response.code", "exc.value", "salt.utils", "http_client.fetch", "response.body", "saltnado.SaltAuthHandler", "response.headers"]}, "test_base_api_handler.py": {"libraries": ["salt.utils.json", "tornado.httpclient.HTTPError", "pytest", "salt.utils.yaml", "salt.netapi.rest_tornado.saltnado", "urllib.parse"], "function_names": ["post", "app_urls", "get", "echo_stuff"], "function_calls": ["len", "isinstance", "getattr"], "class_names": ["StubHandler"], "class_method_calls": ["pytest.fixture", "saltnado.AUTH_COOKIE_NAME", "urllib.parse", "response.headers", "subtests.test", "saltnado.BaseSaltAPIHandler", "pytest.raises", "self.write", "app.mod_opts", "exc.value", "salt.utils", "response.body", "self.finish", "self.serialize", "response.code", "self.echo_stuff", "http_client.fetch", "error.value", "saltnado.AUTH_TOKEN_HEADER"]}, "test_event_listener.py": {"libraries": ["salt.utils.event", "tests.support.events.eventpublisher_process", "pytest", "logging", "salt.netapi.rest_tornado.saltnado", "asyncio"], "function_names": ["__init__", "_check_skip", "sock_dir"], "function_calls": ["str", "Request", "eventpublisher_process", "len"], "class_names": ["Request"], "class_method_calls": ["pytest.fixture", "event_future.done", "request_future_1.result", "request_future_2.done", "log.info", "event_listener.tag_map", "event_future.result", "logging.getLogger", "saltnado.TimeoutException", "me.fire_event", "event_listener.timeout_map", "pytest.mark", "event_listener.clean_by_request", "pytest.raises", "self._finished", "event_listener.get_event", "request_future_2.result", "dummy_request_future_2.done", "salt.utils", "event_listener.request_map", "request_future_1.done", "dummy_request_future_2.result", "dummy_request_future_1.done", "dummy_request_future_1.result", "saltnado.EventListener", "asyncio.sleep"]}, "test_run_handler.py": {"libraries": ["salt.utils.json", "salt.netapi.rest_tornado.saltnado", "pytest"], "function_names": ["app_urls"], "function_calls": [], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.mark", "salt.utils", "http_client.fetch", "response.body", "saltnado.RunSaltAPIHandler"]}, "test_utils.py": {"libraries": ["tornado.concurrent", "salt.netapi.rest_tornado.saltnado"], "function_names": [], "function_calls": ["range"], "class_names": [], "class_method_calls": ["tornado.concurrent", "futures.append", "any_.result", "any_.done", "saltnado.Any"]}, "test_webhooks_handler.py": {"libraries": ["tornado", "salt.utils.json", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "salt.netapi.rest_tornado.saltnado", "urllib.parse"], "function_names": ["app_urls"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["patch.dict", "get_event.return_value", "response.effective_url", "pytest.fixture", "tornado.version", "http_client.fetch", "response.code", "salt.utils", "saltnado.WebhookSaltAPIHandler", "event.fire_event", "app.mod_opts", "urllib.parse"]}, "test_websockets_handler.py": {"libraries": ["tornado.websocket.websocket_connect", "salt.utils.json", "tornado.httpclient.HTTPRequest", "tornado.httpclient.HTTPError", "salt.netapi.rest_tornado", "hashlib", "pytest", "salt.utils.yaml", "salt.config.DEFAULT_HASH_TYPE", "urllib.parse"], "function_names": ["app", "http_server_port"], "function_calls": ["getattr", "websocket_connect", "HTTPRequest", "len"], "class_names": [], "class_method_calls": ["http_server.port", "ws.close", "rest_tornado.get_application", "pytest.fixture", "pytest.mark", "pytest.raises", "exc.value", "response.body", "salt.utils", "client_config.setdefault", "http_client.fetch", "ws.write_message", "app.mod_opts", "client_config.get", "urllib.parse"]}, "test_hg_pillar.py": {"libraries": ["hglib", "salt.pillar.hg_pillar", "pathlib.Path", "pytest", "tempfile", "shutil"], "function_names": ["configure_loader_modules", "test_ext_pillar", "hg_setup_and_teardown"], "function_calls": ["bytes", "Path"], "class_names": [], "class_method_calls": ["to.as_posix", "tempdir.cleanup", "pytest.fixture", "tempdirPath.as_uri", "tempdirPath.as_posix", "frm.as_posix", "hglib.open", "tempdir.name", "tempsubdir.mkdir", "pytest.mark", "tempsubdir3.mkdir", "repo.bookmark", "repo.add", "to2.as_posix", "shutil.copy", "hg_pillar.ext_pillar", "tempfile.TemporaryDirectory", "hglib.init", "tempsubdir2.mkdir", "repo.tag", "repo.commit", "repo.branch"]}, "test_etcd_pillar.py": {"libraries": ["tests.support.mock.create_autospec", "salt.utils.etcd_util", "tests.support.mock.MagicMock", "salt.pillar.etcd_pillar", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "instance", "test_ext_pillar", "etcd_client_mock"], "function_calls": ["patch", "create_autospec", "MagicMock"], "class_names": [], "class_method_calls": ["etcd_pillar.ext_pillar", "mocked_client.return_value", "pytest.fixture", "etcd_util.EtcdBase", "instance.tree"]}, "test_top.py": {"libraries": ["salt.pillar", "pytest"], "function_names": ["test_pillar_top_compound_match"], "function_calls": [], "class_names": [], "class_method_calls": ["ret.get", "salt.pillar", "pytest.helpers", "pytest.mark", "salt_master.config", "sub_ret.get", "pillar_obj.compile_pillar", "sub_pillar_obj.compile_pillar"]}, "test_etcd_return.py": {"libraries": ["tests.support.mock.create_autospec", "salt.utils.etcd_util", "salt.utils.json", "salt.utils.jid", "salt.returners.etcd_return", "tests.support.mock.call", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "copy"], "function_names": ["configure_loader_modules", "test_get_fun", "test_get_jid", "instance", "test_get_minions", "test__get_conn", "etcd_config", "test_get_load", "profile_name", "etcd_client_mock", "test_save_load", "test_prep_jid", "test_get_jids", "returner_root", "test_returner"], "function_calls": ["MagicMock", "patch", "call", "len", "create_autospec"], "class_names": [], "class_method_calls": ["etcd_return.get_fun", "pytest.fixture", "etcd_return.get_jid", "patch.object", "etcd_return.get_minions", "dest.format", "copy.deepcopy", "etcd_util.EtcdBase", "etcd_return.get_load", "instance.set", "etcd_return.__opts__", "salt.utils", "patch.dict", "etcd_return.save_load", "instance.get", "etcd_return.get_jids", "mocked_client.return_value", "etcd_return.returner", "etcd_return._get_conn", "etcd_return.prep_jid"]}, "test_winrepo.py": {"libraries": ["os", "salt.states.winrepo", "salt.syspaths.BASE_FILE_ROOTS_DIR", "salt.config", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "salt.utils.path"], "function_names": ["configure_loader_modules", "test_genrepo_no_dir", "cmd", "test_genrepo_no_dir_force", "__init__", "test_genrepo"], "function_calls": ["patch", "MagicMock"], "class_names": ["RunnerClient", "MockRunnerClient"], "class_method_calls": ["os.sep", "pytest.fixture", "expected.update", "salt.config", "salt.utils", "winrepo.__opts__", "patch.dict", "winrepo.genrepo", "patch.object"]}, "test_etcd_db.py": {"libraries": ["tests.support.mock.create_autospec", "salt.utils.etcd_util", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch", "salt.sdb.etcd_db"], "function_names": ["test_get", "configure_loader_modules", "instance", "test__get_conn", "etcd_client_mock", "test_set", "test_delete"], "function_calls": ["patch", "hasattr", "create_autospec", "MagicMock"], "class_names": [], "class_method_calls": ["logging.getLogger", "mocked_client.return_value", "etcd_db.set_", "pytest.fixture", "etcd_util.EtcdBase", "etcd_db.delete", "etcd_db._get_conn", "instance.set", "pytest.raises", "instance.delete", "instance.get", "etcd_db.get"]}, "test_masterless_tops.py": {"libraries": ["pathlib.Path", "tests.support.runtests.RUNTIME_VARS", "pytest"], "function_names": ["test_masterless_master_tops", "minion_config_overrides", "_master_tops_test"], "function_calls": ["Path"], "class_names": [], "class_method_calls": ["pytest.helpers", "RUNTIME_VARS.FILES", "loaders.modules", "pytest.fixture"]}, "test_bootstrap.py": {"libraries": ["salt.exceptions.CommandExecutionError", "pytest"], "function_names": ["test_unbootstrapped_installed_test_true", "test_bootstrapped_version_test_true", "clean", "test_bootstrapped", "test_unbootstrapped_clean", "chocolatey_mod", "chocolatey", "test_bootstrapped_test_true", "test_unbootstrapped_installed", "test_bootstrapped_version", "installed"], "function_calls": [], "class_names": [], "class_method_calls": ["chocolatey.unbootstrapped", "ret.comment", "chocolatey_mod.unbootstrap", "chocolatey_mod.chocolatey_version", "chocolatey_mod.bootstrap", "pytest.fixture", "pytest.mark", "ret.result", "chocolatey.bootstrapped", "modules.chocolatey", "states.chocolatey"]}, "test_post_20.py": {"libraries": ["salt.utils.win_reg", "os", "pathlib", "pytest", "salt.utils.path"], "function_names": ["vim", "test_installed_version_existing_capitalization", "clean", "test_installed_version", "everything", "chocolatey_mod", "chocolatey", "test_uninstalled", "test_upgraded", "test_installed_latest", "install", "uninstall"], "function_calls": ["uninstall", "str", "install"], "class_names": [], "class_method_calls": ["chocolatey.upgraded", "chocolatey_mod.version", "pytest.fixture", "states.chocolatey", "choco_pkg.parent", "chocolatey.uninstalled", "choco_script.parent", "pytest.helpers", "pytest.mark", "modules.environ", "env_var.lower", "chocolatey_mod.uninstall", "chocolatey_mod.install", "chocolatey.installed", "pathlib.Path", "modules.chocolatey", "salt.utils", "modules.file", "os.environ", "choco_script.exists", "modules.cmd", "modules.archive", "modules.win_path", "modules.cp"]}, "test_pre_20.py": {"libraries": ["salt.utils.win_reg", "os", "pathlib", "pytest", "salt.utils.path"], "function_names": ["vim", "test_installed_version_existing_capitalization", "clean", "test_installed_version", "everything", "chocolatey_mod", "chocolatey", "test_uninstalled", "test_upgraded", "test_installed_latest", "install", "uninstall"], "function_calls": ["uninstall", "str", "install"], "class_names": [], "class_method_calls": ["chocolatey.upgraded", "chocolatey_mod.version", "pytest.fixture", "states.chocolatey", "choco_pkg.parent", "chocolatey.uninstalled", "choco_script.parent", "pytest.helpers", "pytest.mark", "modules.environ", "env_var.lower", "chocolatey_mod.uninstall", "chocolatey_mod.install", "chocolatey.installed", "pathlib.Path", "modules.chocolatey", "salt.utils", "modules.file", "os.environ", "choco_script.exists", "modules.cmd", "modules.archive", "modules.win_path", "modules.cp"]}, "test__check_directory_win.py": {"libraries": ["salt.states.file", "pytest", "salt.utils.win_dacl"], "function_names": ["test__check_directory_win_deny_perms_basic_no_applies_to", "configure_loader_modules", "test__check_directory_win_inheritance", "test__check_directory_reset_no_non_inherited_users", "test__check_directory_win_deny_perms_advanced", "test__check_directory_win_grant_perms_advanced", "test__check_directory_win_grant_perms_basic", "test__check_directory_win_grant_perms_basic_existing_user", "test__check_directory_win_deny_perms_advanced_existing_user", "test__check_directory_win_grant_perms_basic_no_applies_to", "test__check_directory_win_owner", "test__check_directory_reset_non_inherited_users_grant", "test__check_directory_win_deny_perms_basic_existing_user", "test__check_directory_reset_non_inherited_users_deny", "test__check_directory_win_inheritance_false", "test__check_directory_win_deny_perms_basic", "test__check_directory_win_grant_perms_advanced_existing_user"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["win_dacl.set_permissions", "file._check_directory_win", "pytest.fixture", "pytest.mark"]}, "test_absent.py": {"libraries": ["os", "salt.serializers.json", "salt.serializers.python", "salt.states.file", "salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "logging", "salt.serializers.plist", "salt.serializers.yaml", "salt.serializers.msgpack", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_absent"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["logging.getLogger", "yamlserializer.serialize", "filestate.__opts__", "plistserializer.serialize", "ret.update", "pytest.fixture", "jsonserializer.serialize", "filestate.__salt__", "msgpackserializer.serialize", "filestate.absent", "os.path", "patch.dict", "pythonserializer.serialize", "patch.object"]}, "test_accumulated.py": {"libraries": ["textwrap", "pytest"], "function_names": ["test_issue_60426", "test_issue_11003_immutable_lazy_proxy_sum", "test_issue_8343_accumulated_require_in"], "function_calls": [], "class_names": [], "class_method_calls": ["modules.state", "contents.index", "tmp_path.joinpath", "pytest.helpers", "textwrap.dedent", "pytest.mark", "target_path.is_file", "state_run.result", "target_path.read_text", "name.read_text", "block_contents.remove"]}, "test_append.py": {"libraries": ["pytest", "attr", "time", "logging"], "function_names": ["test_grains_append", "append_grain_module", "test_grains_append_val_is_list", "test_grains_remove_add", "test_grains_append_val_already_present", "append_grain"], "function_calls": ["AppendGrain", "range", "wait_for_pillar_refresh_complete"], "class_names": ["AppendGrain"], "class_method_calls": ["append_grain_module.key", "logging.getLogger", "grain.key", "append_grain.key", "pytest.fixture", "pytest.mark", "ret.returncode", "attr.ib", "time.time", "append_grain.value", "attr.s", "salt_call_cli.run", "ret.data"]}, "test_blockreplace.py": {"libraries": ["os", "salt.utils.stringutils", "textwrap", "salt.utils.platform", "pytest"], "function_names": ["test_append", "test_prepend_append_newline", "test_matching_block_and_marker_not_after_newline_no_append_newline", "test_non_matching_block_no_append_newline", "test_issue_49043", "test_prepend_auto_line_separator", "test_non_matching_block", "test_non_matching_block_and_marker_not_after_newline_append_newline", "line_breaks_ids", "strip_ending_linebreak_ids", "test_prepend", "test_append_auto_line_separator", "test_matching_block_and_marker_not_after_newline", "test_non_matching_block_and_marker_not_after_newline", "test_append_no_append_newline", "test_matching_block_append_newline", "test_non_matching_block_and_marker_not_after_newline_no_append_newline", "test_non_matching_block_append_newline", "test_prepend_no_append_newline", "test_matching_block_and_marker_not_after_newline_append_newline", "test_matching_block", "test_matching_block_no_append_newline", "test_append_append_newline"], "function_calls": ["str"], "class_names": ["BlockreplaceParts"], "class_method_calls": ["BlockreplaceParts.marker_start", "BlockreplaceParts.with_matching_block_and_extra_newline", "BlockreplaceParts.without_block_explicit_windows_newlines", "BlockreplaceParts.with_matching_block", "file.blockreplace", "name.touch", "name.read_bytes", "BlockreplaceParts.with_block_prepended_explicit_posix_newlines", "BlockreplaceParts.with_block_appended_explicit_windows_newlines", "pytest.helpers", "pytest.mark", "BlockreplaceParts.marker_end", "name.read_text", "BlockreplaceParts.content_explicit_posix_newlines", "pytest.skip", "BlockreplaceParts.with_non_matching_block", "ret.result", "textwrap.dedent", "content.rstrip", "ret.changes", "salt.utils", "BlockreplaceParts.without_block_explicit_posix_newlines", "name.write_text", "BlockreplaceParts.with_matching_block_and_marker_end_not_after_newline", "os.environ", "BlockreplaceParts.with_non_matching_block_and_marker_end_not_after_newline", "BlockreplaceParts.with_block_appended_explicit_posix_newlines", "BlockreplaceParts.without_block", "BlockreplaceParts.content", "BlockreplaceParts.with_block_prepended_explicit_windows_newlines", "BlockreplaceParts.content_explicit_windows_newlines"]}, "test_cached.py": {"libraries": ["secrets", "salt.states.file", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_cached_present_test_true", "test_cached_present_no_source_hash_test_true", "test_cached_present_different_hash_test_true", "test_cached_test_true"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.mark", "secrets.token_hex", "file.__salt__", "patch.dict", "file.cached", "file.__opts__"]}, "test_comment.py": {"libraries": ["os", "salt.serializers.json", "salt.utils.win_functions", "salt.utils.json", "salt.serializers.python", "salt.states.file", "tests.support.mock.mock_open", "salt.utils.files", "salt.utils.platform", "salt.utils.yaml", "tests.support.mock.MagicMock", "pytest", "logging", "salt.serializers.plist", "salt.serializers.yaml", "salt.serializers.msgpack", "tests.support.mock.patch"], "function_names": ["test_uncomment", "configure_loader_modules", "test_comment"], "function_calls": ["MagicMock", "mock_open"], "class_names": [], "class_method_calls": ["logging.getLogger", "yamlserializer.serialize", "filestate.comment", "filestate.__opts__", "plistserializer.serialize", "pytest.fixture", "ret.update", "jsonserializer.serialize", "filestate.__salt__", "msgpackserializer.serialize", "os.path", "salt.utils", "patch.dict", "filestate.uncomment", "pythonserializer.serialize", "patch.object"]}, "test_copy.py": {"libraries": ["os", "salt.serializers.json", "salt.utils.win_functions", "salt.utils.json", "salt.serializers.python", "salt.states.file", "salt.utils.files", "salt.utils.platform", "salt.utils.yaml", "tests.support.mock.MagicMock", "pytest", "logging", "salt.serializers.plist", "salt.serializers.yaml", "salt.serializers.msgpack", "tests.support.mock.patch", "shutil"], "function_names": ["test_copy_test_mode_user_group_not_present", "configure_loader_modules", "test_copy"], "function_calls": ["str", "MagicMock"], "class_names": [], "class_method_calls": ["filestate.copy_", "logging.getLogger", "yamlserializer.serialize", "filestate.__opts__", "plistserializer.serialize", "ret.update", "pytest.fixture", "filestate.__salt__", "jsonserializer.serialize", "msgpackserializer.serialize", "os.path", "salt.utils", "patch.dict", "pythonserializer.serialize", "patch.object"]}, "test_directory.py": {"libraries": ["os", "salt.serializers.json", "salt.utils.win_functions", "salt.utils.json", "salt.serializers.python", "salt.states.file", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.utils.platform", "salt.utils.yaml", "tests.support.mock.MagicMock", "pytest", "logging", "salt.serializers.plist", "salt.serializers.yaml", "salt.serializers.msgpack", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_directory", "test_directory_test_mode_user_group_not_present"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["logging.getLogger", "yamlserializer.serialize", "filestate.__opts__", "name.replace", "plistserializer.serialize", "ret.update", "pytest.fixture", "filestate.__salt__", "jsonserializer.serialize", "filestate.directory", "msgpackserializer.serialize", "os.path", "salt.utils", "patch.dict", "pythonserializer.serialize", "patch.object"]}, "test_directory_win.py": {"libraries": ["os", "salt.utils.win_functions", "pytest", "salt.utils.win_dacl"], "function_names": ["test_directory_existing", "test_directory_existing_existing_user", "test_directory_existing_reset", "test_directory_new", "test_directory_new_reset_no_inherit", "test_directory_existing_no_inherit", "test_directory_existing_reset_no_inherit", "test_directory_new_no_inherit", "test_directory_new_reset"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["win_functions.get_current_user", "win_dacl.get_inheritance", "win_dacl.get_permissions", "pytest.mark", "file.directory", "win_dacl.set_permissions", "os.path"]}, "test_keyvalue.py": {"libraries": ["salt.serializers.json", "collections", "salt.serializers.python", "tests.support.helpers.dedent", "salt.states.file", "pytest", "logging", "salt.serializers.plist", "salt.serializers.yaml", "salt.serializers.msgpack"], "function_names": ["configure_loader_modules", "test_file_keyvalue_not_dict", "test_file_keyvalue_empty", "test_file_keyvalue_key_values", "test_file_keyvalue_create_if_missing"], "function_calls": ["str", "dedent"], "class_names": [], "class_method_calls": ["logging.getLogger", "yamlserializer.serialize", "filestate.keyvalue", "collections.OrderedDict", "tempfile.read_text", "pytest.helpers", "plistserializer.serialize", "tempfile.exists", "pytest.fixture", "jsonserializer.serialize", "msgpackserializer.serialize", "tempfile.unlink", "pythonserializer.serialize"]}, "test_line.py": {"libraries": ["pytest"], "function_names": ["test_issue_48557"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["tempfile.read_text", "file.line", "ret.result", "tempfile.write_text", "pytest.mark"]}, "test_managed.py": {"libraries": ["os", "salt.serializers.json", "salt.utils.win_functions", "salt.utils.json", "salt.serializers.python", "salt.states.file", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.utils.platform", "salt.utils.yaml", "tests.support.mock.MagicMock", "pytest", "logging", "salt.serializers.plist", "salt.serializers.yaml", "salt.serializers.msgpack", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_managed", "test_sources_source_hash_check", "test_managed_test_mode_user_group_not_present", "test_file_managed_should_fall_back_to_binary"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["plistserializer.serialize", "pytest.fixture", "jsonserializer.serialize", "ret.update", "os.path", "patch.object", "logging.getLogger", "ret.pop", "filestate.__opts__", "pytest.mark", "filestate._http_ftp_check", "mock_manage.call_args", "filestate.__salt__", "salt.utils", "patch.dict", "pythonserializer.serialize", "yamlserializer.serialize", "msgpackserializer.serialize", "filestate.managed"]}, "test_patch.py": {"libraries": ["os", "salt.utils.versions.Version", "textwrap", "types", "salt.utils.platform", "salt.utils.versions", "re", "pathlib", "pytest", "salt.utils.hashutils"], "function_names": ["test_patch_single_file_remote_source", "test_patch_single_file_remote_source_template", "test_patch_saltenv", "files", "test_patch_test_mode", "test_patch_single_file_failure", "patches", "test_patch_single_file_template", "__init__", "_check_min_patch_version", "test_patch_single_file", "test_patch_directory_template", "test_patch_directory_remote_source_template", "test_patch_directory", "test_patch_directory_remote_source", "test_patch_directory_failure", "test_patch_strip_parsing"], "function_calls": ["str", "Version", "Patches"], "class_names": ["Patches"], "class_method_calls": ["ret.comment", "self.numbers_patch", "self.numbers_patch_template_hash", "self.numbers_patch_name", "self.math_patch_path", "self.all_patch_template_hash", "re.search", "self.all_patch_template", "self.all_patch_name", "ret.returncode", "patches.all_patch_template", "patches_dir.mkdir", "subtests.test", "shell.run", "pytest.mark", "patches.all_patch", "self.all_patch_template_name", "self.webserver_root", "patches.all_patch_hash", "ret.result", "self.numbers_patch_template_http", "pathlib.Path", "patches.math_patch", "self.numbers_patch_http", "self.numbers_patch_hash", "reject_file.name", "self.all_patch_hash", "all_patch.write_text", "patches.numbers_patch", "self.all_patch_path", "patches.math_patch_http", "file.patch", "ret.stdout", "patches.math_patch_hash", "self.math_patch_template_path", "self.all_patch_template_http", "patches.math_patch_template_http", "self.math_patch_template_hash", "pytest.helpers", "self.all_patch", "numbers_patch.read_text", "self.math_patch_http", "self.math_patch_name", "pytest.skip", "types.SimpleNamespace", "textwrap.dedent", "patches.all_patch_http", "ret.changes", "self.all_patch_http", "self.numbers_patch_template", "math_patch.read_text", "math_patch_template.read_text", "patches.all_patch_template_hash", "numbers_patch_template.read_text", "self.math_patch_template_http", "numbers_patch.write_text", "pytest.fixture", "patches.math_patch_template_hash", "self.numbers_patch_template_name", "patches.all_patch_template_http", "numbers_patch_template.write_text", "patches.numbers_patch_template", "self.math_patch", "self.math_patch_template_name", "math_patch.write_text", "self.all_patch_template_path", "self.math_patch_hash", "webserver.root", "self.numbers_patch_path", "self.webserver", "files.numbers", "files.math", "salt.utils", "os.environ", "self.numbers_patch_template_path", "math_patch_template.write_text", "self.math_patch_template", "pytest.xfail", "files.base_dir", "all_patch_template.write_text"]}, "test_prepend.py": {"libraries": ["os", "salt.serializers.json", "salt.utils.win_functions", "salt.utils.json", "salt.serializers.python", "salt.states.file", "tests.support.mock.mock_open", "salt.utils.files", "salt.utils.platform", "salt.utils.yaml", "tests.support.mock.MagicMock", "pytest", "logging", "salt.serializers.plist", "salt.serializers.yaml", "salt.serializers.msgpack", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_prepend"], "function_calls": ["MagicMock", "mock_open"], "class_names": [], "class_method_calls": ["logging.getLogger", "ret.pop", "yamlserializer.serialize", "filestate.__opts__", "patch.object", "plistserializer.serialize", "ret.update", "pytest.fixture", "filestate.__salt__", "jsonserializer.serialize", "msgpackserializer.serialize", "filestate.__utils__", "salt.utils", "os.path", "patch.dict", "pythonserializer.serialize", "filestate.prepend"]}, "test_pruned.py": {"libraries": ["os", "salt.states.file", "salt.utils.platform", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_pruned_success", "test_pruned_clean", "directory_name", "test_pruned_test"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["logging.getLogger", "os.sep", "filestate.pruned", "filestate.__opts__", "pytest.fixture", "filestate.__salt__", "salt.utils", "patch.dict"]}, "test_recurse.py": {"libraries": ["stat", "pytest"], "function_names": ["test_recurse_clean", "test_recurse_specific_env_in_url", "test_recurse_clean_specific_env", "test_test_recurse_specific_env", "test_recurse_issue_40578", "test_recurse_specific_env", "test_recurse_template", "test_recurse", "test_issue_2726_mode_kwarg", "test_recurse_issue_34945"], "function_calls": ["str", "sorted", "oct"], "class_names": [], "class_method_calls": ["name.iterdir", "scene_32_dst.read_text", "scene_36_dst.write_text", "scene_32_src.read_text", "file.recurse", "src_dir.mkdir", "name.exists", "scene_dst.read_text", "scene_34_dst.is_dir", "p.name", "pytest.helpers", "scene_src.read_text", "src_file.parent", "scene_32_dst.joinpath", "pytest.mark", "src_dir.joinpath", "scene_32_dst.write_text", "modules.state", "name.is_dir", "ret.result", "state_run.comment", "scene_36_dst.is_file", "scene_36_dst.joinpath", "name.stat", "scene_34_dst.mkdir", "scene_33_dst.is_dir", "src_file.write_text", "stat.S_IMODE", "scene_dst.is_file", "scene_32_dst.is_dir", "src_dir.stat", "scene_33_dst.is_file", "name.mkdir", "scene_34_dst.is_file", "scene_36_src.read_text", "scene_33_dst.mkdir", "scene_36_dst.read_text", "scene_36_dst.is_dir", "state_run.result", "scene_32_dst.is_file", "strayfile.exists", "strayfile.write_text"]}, "test_rename.py": {"libraries": ["os", "salt.serializers.json", "salt.serializers.python", "salt.states.file", "salt.utils.platform", "tests.support.mock.MagicMock", "pytest", "logging", "salt.serializers.plist", "salt.serializers.yaml", "salt.serializers.msgpack", "tests.support.mock.patch", "shutil"], "function_names": ["configure_loader_modules", "test_rename"], "function_calls": ["str", "MagicMock", "patch"], "class_names": [], "class_method_calls": ["logging.getLogger", "yamlserializer.serialize", "filestate.__opts__", "plistserializer.serialize", "filestate.rename", "ret.update", "pytest.fixture", "filestate.__salt__", "jsonserializer.serialize", "msgpackserializer.serialize", "filestate.CommandExecutionError", "os.path", "salt.utils", "patch.dict", "pythonserializer.serialize", "patch.object"]}, "test_serialize.py": {"libraries": ["json", "salt.serializers.plist", "pytest", "logging", "salt.serializers.configparser"], "function_names": ["test_serializer_plist_binary_file_open", "test_serialize_check_cmd", "test_serialize", "test_serializer_deserializer_opts", "test_serializer_plist_file_open"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.serializers", "json.loads", "path_test.read_text", "log.debug", "ret.result", "pytest.mark", "ret.filtered", "name.read_bytes", "file.serialize", "name.read_text"]}, "test_uncomment.py": {"libraries": ["pytest"], "function_names": ["test_uncomment"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["ret.result", "file.uncomment", "pytest.mark", "name.read_text", "name.write_text"]}, "test_centos.py": {"libraries": ["pytest", "logging"], "function_names": ["copr_pkgrepo_with_comments_name", "test_copr_pkgrepo_with_comments", "pkgrepo", "test_pkgrepo_managed_absent", "centos_state_tree", "pkgrepo_with_comments_name", "test_pkgrepo_with_comments"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "modules.state", "pkgrepo.absent", "subtests.test", "pytest.helpers", "pytest.skip", "ret.comment", "states.pkgrepo", "ret.result", "pytest.fixture", "pytest.mark", "ret.changes", "state.result", "pkgrepo.managed", "kwargs.copy", "ret.failed"]}, "test_debian.py": {"libraries": ["sys", "glob", "os", "salt.utils.files", "tests.conftest.CODE_DIR", "tests.support.mock.patch", "pathlib", "sysconfig.get_path", "logging", "pytest", "tests.support.mock.MagicMock", "attr", "aptsources.sourceslist", "salt.modules.aptpkg", "shutil"], "function_names": ["test_adding_repo_file_arch", "ubuntu_state_tree", "system_aptsources", "pkgrepo", "test_repo_present_absent_no_trailing_slash_uri", "multiple_comps_repo_file_backports", "_default_alt_repo", "trailing_slash_repo_file", "test_pkgrepo_with_architectures", "repo_uri", "repo", "test_repo_present_absent_no_trailing_slash_uri_add_slash", "test_adding_repo_file_signedby", "test_managed_multiple_comps", "test_adding_repo_file", "_run", "system_aptsources_ids", "test_pkgrepo_managed_absent", "test_adding_repo_file_signedby_fail_key_keyid", "test_adding_repo_file_signedby_fail_key_keyurl", "_default_key_file", "multiple_comps_repo_file_caconical", "_default_repo_file", "test_adding_repo_file_signedby_keyserver", "sources_list_file", "_default_key_url", "test_adding_repo_file_keyserver_key_url", "_default_fullname", "test_adding_repo_file_signedby_invalid_name", "test_repo_absent_existing_repo_trailing_slash_uri", "test_adding_repo_file_signedby_alt_file", "test_adding_repo_file_cdrom", "_default_repo_content", "test_repo_present_absent_trailing_slash_uri", "_get_arch", "multiple_comps_state_tree"], "function_calls": ["MagicMock", "Repo", "patch", "_run", "list", "str", "get_path", "_get_arch"], "class_names": ["Repo"], "class_method_calls": ["pkgrepo.absent", "request.param", "self.signedby", "ret.comment", "value.title", "log.debug", "pytest.fixture", "repo.key_file", "attr.ib", "shutil.copyfile", "key_url.default", "repo.key_url", "log.info", "os.path", "shutil.copytree", "request.node", "repo_content.default", "key_file.is_file", "name.format", "logging.getLogger", "key_file.default", "subtests.test", "self.sources_list_file", "pytest.helpers", "key_file.parent", "state.changes", "pytest.mark", "sys.modules", "repo_file.write_text", "self.key_root", "alt_repo.default", "key.is_file", "modules.state", "copied_paths.append", "repo.repo_content", "pytest.skip", "states.pkgrepo", "ret.result", "path.exists", "self.fullname", "key.unlink", "file_content.strip", "pathlib.Path", "shutil.rmtree", "sourceslist.__file__", "ret.changes", "salt.utils", "repo.repo_file", "repo_file.default", "self.grains", "ret.failed", "os.unlink", "path.unlink", "glob.glob", "repo_file.exists", "self.alt_repo", "os.remove", "fullname.default", "state.result", "attr.s", "sys.version_info", "pkgrepo.managed", "file_content.endswith", "fp.read"]}, "test_cluster.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.rabbitmq_cluster", "pytest"], "function_names": ["test_joined", "configure_loader_modules"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["rabbitmq_cluster.__salt__", "rabbitmq_cluster.__opts__", "ret.update", "pytest.fixture", "rabbitmq_cluster.joined", "patch.dict"]}, "test_plugin.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.states.rabbitmq_plugin"], "function_names": ["test_enabled", "configure_loader_modules", "test_disabled"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["rabbitmq_plugin.__salt__", "ret.update", "pytest.fixture", "rabbitmq_plugin.disabled", "rabbitmq_plugin.__opts__", "patch.dict", "rabbitmq_plugin.enabled"]}, "test_policy.py": {"libraries": ["salt.states.rabbitmq_policy", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["rabbitmq_policy.__opts__", "ret.update", "rabbitmq_policy.present", "pytest.fixture", "rabbitmq_policy.absent", "patch.dict", "rabbitmq_policy.__salt__"]}, "test_upstream.py": {"libraries": ["salt.modules.rabbitmq", "salt.states.rabbitmq_upstream", "pytest", "logging"], "function_names": ["configure_loader_modules", "test_absent"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "rabbitmq.upstream_exists", "rabbitmq_upstream.absent", "pytest.fixture", "pytest.mark", "rabbitmq.list_user_permissions", "pytest.importorskip"]}, "test_vhost.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.rabbitmq_vhost", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["rabbitmq_vhost.present", "rabbitmq_vhost.__salt__", "rabbitmq_vhost.absent", "pytest.fixture", "rabbitmq_vhost.__opts__", "patch.dict"]}, "test_docker_container.py": {"libraries": ["os", "salt._compat.ipaddress", "random", "salt.modules.config.DEFAULTS", "subprocess", "salt.exceptions.CommandExecutionError", "salt.utils.files", "tests.support.runtests.RUNTIME_VARS", "pytest", "logging", "salt.utils.network", "attr", "saltfactories.utils.random_string", "salt.utils.path", "shutil"], "function_names": ["test_static_ip_one_network", "test_running_with_no_predefined_volume", "__enter__", "_network", "test_run_with_onlyif", "_gateway", "test_running_networks", "test_run_with_unless", "test_running_start_false_with_replace", "_net", "test_running_explicit_networks", "test_running_with_removed_argument", "test_running_image_name", "test_run_replace", "__exit__", "add", "test_running_start_false_without_replace", "test_run_failhard", "network", "_enable_ipv6", "compressed_subnet", "test_running_with_port_bindings", "test_run_with_creates", "docker_container", "networks", "test_running_with_argument_collision", "test_env_with_running_container", "test_absent_with_stopped_container", "test_run_force", "container_name", "_name", "test_running_with_invalid_input", "test_run_bg", "test_absent_with_running_container", "__rand_indexes", "image", "_ip_arg", "test_running_with_ignore_collisions", "arg_map", "test_running_no_changes_hostname_network", "_test_running", "__getitem__", "test_running_with_no_predefined_ports", "test_running_start_true", "test_running_updated_image_id"], "function_calls": ["Network", "range", "dict", "Exception", "bool", "list", "str", "enumerate", "Networks", "sorted", "random_string", "ValueError", "network"], "class_names": ["Network", "Networks"], "class_method_calls": ["log.error", "network.enable_ipv6", "tmp_path_factory.mktemp", "y.name", "self.net", "network.ip_arg", "log.debug", "ret.comment", "net.__exit__", "docker_container.running", "pytest.fixture", "expected.extend", "net.__enter__", "attr.ib", "process.returncode", "docker_container.absent", "enable_ipv6.default", "os.path", "good_file1.touch", "networks.add", "states.docker_container", "logging.getLogger", "docker_container.run", "random.sample", "subtests.test", "net.ip_arg", "pytest.mark", "container_netinfo.items", "self.subnet", "modules.docker", "self.enable_ipv6", "subprocess.run", "pytest.fail", "net.name", "attr.Factory", "net.arg_map", "RUNTIME_VARS.BASE_FILES", "networks.nets", "ipaddress.ip_network", "pytest.skip", "self.nets", "name.default", "_rand_indexes.default", "ip_arg.default", "ret.result", "subprocess.STDOUT", "shutil.rmtree", "netdefs.append", "network.name", "process.stdout", "ret.changes", "autoip_config.items", "salt.utils", "self._rand_indexes", "good_file2.touch", "connected_networks.keys", "gateway.default", "self.compressed_subnet", "self.docker_exec_mod", "net.default", "self.gateway", "attr.s", "x.name", "subprocess.PIPE", "self.name"]}, "test_docker_network.py": {"libraries": ["salt._compat.ipaddress", "random", "salt.exceptions.CommandExecutionError", "salt.utils.files", "functools", "pytest", "logging", "salt.utils.network", "saltfactories.utils.random_string", "salt.utils.path"], "function_names": ["__enter__", "test_present_with_custom_ipv6", "container", "existing_network_with_container", "test_present", "test_present_scope", "test_present_with_custom_ipv4", "test_absent", "test_present_labels", "__exit__", "test_present_with_reconnect", "test_present_attachable", "test_present_enable_ipv6", "network", "existing_network", "test_present_ingress", "gateway", "docker_network", "test_absent_with_disconnected_container", "test_present_internal", "arg_map", "test_absent_when_not_present", "test_bridge_dupname_update", "subnet", "__init__", "__getitem__", "test_present_with_containers", "docker"], "function_calls": ["Network", "range", "bool", "str", "random_string", "ValueError", "network"], "class_names": ["Network", "CreateNetwork"], "class_method_calls": ["self.kwargs", "docker.inspect_network", "ipv6_net2.gateway", "self.docker_module", "self.net", "ret.comment", "pytest.fixture", "salt_factories.get_container", "self.network", "functools.partial", "docker_network.present", "existing_network_with_container.name", "grains.get", "ipv4_net.gateway", "logging.getLogger", "random.sample", "net.subnet", "pytest.mark", "states.docker_network", "factory.started", "modules.docker", "ipv6_net2.subnet", "net1.subnet", "net.name", "docker_network.absent", "ipv6_net1.gateway", "pytest.skip", "ipaddress.ip_network", "ret.result", "net1.name", "ipv4_net.name", "ret.changes", "salt.utils", "net2.gateway", "ipv4_net.subnet", "self._rand_indexes", "pytest.importorskip", "ipv6_net1.subnet", "self.ip_arg", "docker.connect_container_to_network", "net2.subnet", "net1.gateway", "container.name", "existing_network.name", "self.name"]}, "test_module.py": {"libraries": ["salt.states.module", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "inspect.FullArgSpec", "logging", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_run_state_apply_result_false", "test_module_run_hidden_varargs", "test_run_service_status_dead", "test_call_function_ordered_and_named_args", "test_run_typed_return", "setup_loader_modules", "test_run_unexpected_keywords", "test_module_run_test_true", "test_run_batch_call", "_mocked_func_args", "tearDownClass", "test_call_function_ordered_args", "test_run_42270", "test_run_args", "_mocked_func_named", "test_run_missing_arg", "test_call_function_named_args", "_mocked_none_return", "test_run_module_not_available", "test_module_run_missing_arg", "test_run_module_not_available_testmode", "test_run_none_return", "test_module_run_module_not_available", "test_func", "test_run_42270_kwargs_to_args", "test_run_testmode", "test_run_module_noop", "setUpClass", "test_run_correct_arg"], "function_calls": ["patch", "FullArgSpec", "MagicMock", "list"], "class_names": ["ModuleStateTest"], "class_method_calls": ["module._call_function", "logging.getLogger", "self.bspec", "module.__salt__", "self.assertEqual", "patch.dict", "self.aspec", "log.debug", "module.__opts__", "self.assertTrue", "self.assertFalse", "module.run", "cls.aspec", "module._legacy_run", "self.fail", "cls.bspec", "self.assertIn"]}, "test_npm.py": {"libraries": ["tests.support.mock.create_autospec", "salt.states.npm", "salt.exceptions.CommandExecutionError", "salt.modules.npm", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["fake_install", "configure_loader_modules", "test_when_install_does_not_error_installed_should_be_true", "test_bootstrap", "test_removed", "test_installed", "test_cache_cleaned"], "function_calls": ["create_autospec", "MagicMock"], "class_names": [], "class_method_calls": ["npm.removed", "request.param", "npm.bootstrap", "npm.__salt__", "npm.installed", "npmmod.install", "pytest.fixture", "ret.update", "npm.__opts__", "pkg_ret.update", "npmmod.list_", "patch.dict", "npm.cache_cleaned"]}, "test_pip_state.py": {"libraries": ["sys", "os", "salt.version", "tests.support.mixins.SaltReturnAssertsMixin", "tests.support.unit.TestCase", "tests.support.runtests.RUNTIME_VARS", "salt.states.pip_state", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch", "salt.utils.path"], "function_names": ["test_pip_purge_method_without_pip", "test_install_in_editable_mode", "test_pip_purge_method_with_pip", "test_has_exceptions_mod_function", "test_install_requirements_parsing", "test_install_requirements_custom_pypi", "setup_loader_modules", "test_install_with_specified_user", "test_has_internal_exceptions_mod_function", "test_install_requirements_custom_pypi_changes"], "function_calls": ["patch", "object", "MagicMock"], "class_names": ["PipStateTest", "PipStateUtilsTest"], "class_method_calls": ["log.debug", "pip_state.installed", "reqf.write", "os.path", "pip.__version__", "logging.getLogger", "pip_state.pip_has_exceptions_mod", "self.assertInSaltComment", "pip_state._from_line", "self.assertSaltTrueReturn", "sys.modules", "pip_state.__opts__", "pip_state.pip_has_internal_exceptions_mod", "self.assertSaltNoneReturn", "RUNTIME_VARS.TMP_STATE_TREE", "self.assertInSaltReturn", "pip_state.purge_pip", "salt.utils", "patch.dict", "mock_modules.pop", "pip_state.__salt__", "pytest.importorskip", "self.assertSaltFalseReturn"]}, "test_pkgrepo.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.pkgrepo", "pytest"], "function_names": ["configure_loader_modules", "test_update_key_url", "test_new_key_url", "test_managed_insecure_key"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["pytest.fixture", "patch.dict", "pkgrepo.managed", "kwargs.copy", "pkgrepo.__salt__"]}, "test_svn.py": {"libraries": ["os", "salt.states.svn", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_latest_trust_failures", "test_export", "test_latest", "test_dirty"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["svn.dirty", "svn.__opts__", "svn.latest", "pytest.fixture", "os.path", "svn_diff_mock.assert_called_with", "patch.dict", "svn.__salt__", "patch.object", "svn.export"]}, "test_zookeeper.py": {"libraries": ["saltfactories.utils.random_string", "pytest", "logging"], "function_names": ["test_zookeeper_absent", "minion_config_overrides", "test_zookeeper_present_acls_and_profile", "test_zookeeper_acls", "zookeeper_container", "test_zookeeper_present", "zookeeper_port", "zookeeper"], "function_calls": ["random_string"], "class_names": [], "class_method_calls": ["logging.getLogger", "zookeeper.acls", "zookeeper_container.get_host_port_binding", "ret.result", "pytest.fixture", "pytest.mark", "salt_factories.get_container", "states.zookeeper", "ret.changes", "zookeeper.present", "zookeeper.absent", "container.started", "pytest.importorskip"]}, "test_admx_policy.py": {"libraries": ["os", "salt.modules.win_file", "salt.modules.win_lgpo", "salt.utils.win_dacl", "salt.states.win_lgpo", "pathlib", "pytest", "logging"], "function_names": ["configure_loader_modules", "clean_comp", "test_allow_telemetry_subsequent_runs"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["logging.getLogger", "cachedir.mkdir", "lgpo_mod.get_policy", "lgpo_mod.get_policy_info", "win_file.makedirs_", "lgpo_mod.set_", "pytest.fixture", "pytest.mark", "win_dacl.set_perms", "win_file.file_exists", "pathlib.Path", "lgpo.set_", "lgpo_mod.set_computer_policy", "os.getenv", "reg_pol.unlink"]}, "test_adv_audit_settings_state.py": {"libraries": ["salt.modules.win_lgpo", "salt.loader", "salt.states.win_lgpo", "tests.support.sminion.create_sminion", "pytest"], "function_names": ["configure_loader_modules", "set_policy", "disable_legacy_auditing", "test_failure", "test_no_auditing", "clear_policy", "test_success", "_test_adv_auditing", "test_success_and_failure"], "function_calls": ["_test_adv_auditing", "create_sminion"], "class_names": [], "class_method_calls": ["win_lgpo_module.set_computer_policy", "salt_minion.functions", "win_lgpo_module.get_policy", "win_lgpo_module._get_advaudit_value", "pytest.fixture", "pytest.mark", "salt.loader", "win_lgpo_state.set_"]}, "test_audit_settings_state.py": {"libraries": ["os", "salt.modules.win_lgpo", "salt.loader", "salt.states.win_lgpo", "tests.support.sminion.create_sminion", "pytest"], "function_names": ["configure_loader_modules", "set_policy", "test_failure", "clean_adv_audit", "_test_auditing", "enable_legacy_auditing", "test_no_auditing", "clear_policy", "test_success", "test_success_and_failure"], "function_calls": ["create_sminion", "_test_auditing"], "class_names": [], "class_method_calls": ["os.environ", "win_lgpo_module.set_computer_policy", "salt_minion.functions", "win_lgpo_module.get_policy", "salt.loader", "pytest.fixture", "pytest.mark", "win_lgpo_module._get_secedit_data", "os.remove", "os.path", "win_lgpo_state.set_"]}, "test_rights_assignment.py": {"libraries": ["salt.modules.win_lgpo", "salt.loader", "salt.states.win_lgpo", "pytest", "tests.support.mock.patch"], "function_names": ["stage_single", "test_cumulative_rights_assignments_exists", "test_cumulative_rights_assignments_resolve_name_exists_test_true", "test_non_cumulative_rights_assignments_resolve_name_exists", "test_non_cumulative_rights_assignments_exists_test_true", "test_cumulative_rights_assignments_exists_test_true", "test_non_cumulative_rights_assignments", "test_cumulative_rights_assignments", "test_non_cumulative_rights_assignments_resolve_name_test_true", "test_cumulative_rights_assignments_resolve_name", "configure_loader_modules", "test_cumulative_rights_assignments_resolve_name_test_true", "test_non_cumulative_rights_assignments_test_true", "test_cumulative_rights_assignments_test_true", "test_non_cumulative_rights_assignments_resolve_name", "stage_multiple", "test_non_cumulative_rights_assignments_resolve_name_exists_test_true", "test_cumulative_rights_assignments_resolve_name_exists", "test_non_cumulative_rights_assignments_exists"], "function_calls": ["sorted"], "class_names": [], "class_method_calls": ["win_lgpo_module.set_computer_policy", "win_lgpo_module.get_policy", "salt.loader", "pytest.fixture", "pytest.mark", "win_lgpo_state.__opts__", "patch.dict", "win_lgpo_state.set_"]}, "test_crypt.py": {"libraries": ["salt.utils.crypt", "Cryptodome.Random", "pytest", "Crypto.Random", "tests.support.mock.patch", "M2Crypto"], "function_names": ["test_pem_finger_file_line_endings", "test_pem_finger_sha512", "test_reinit_crypto", "test_pem_finger_key", "pub_key_data", "test_random"], "function_calls": ["patch", "str"], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.mark", "salt.utils", "key_file.write_bytes", "line_ending.join"]}, "test_fileclient_reuse.py": {"libraries": ["salt.state", "salt.loader", "salt.utils.jinja", "salt.utils.cache", "pytest", "salt.pillar", "tests.support.mock.patch"], "function_names": ["test_pillar_tops", "mock_cached_loader", "test_highstate", "__init__", "test_pillar_render"], "function_calls": ["patch", "super"], "class_names": ["CacheLoader"], "class_method_calls": ["pillar.render_pillar", "mock_cached_loader.kwargs", "salt.pillar", "pillar.client", "salt.state", "pytest.fixture", "salt.loader", "temp_salt_master.pillar_tree", "highstate.render_highstate", "temp_salt_minion.id", "temp_salt_master.state_tree", "salt.utils", "mock_cached_loader.calls", "pillar.get_tops", "highstate.client", "self.__class__", "temp_salt_master.config"]}, "test_payload.py": {"libraries": ["salt.exceptions", "salt.utils.immutabletypes", "salt.payload", "salt.utils.odict.OrderedDict", "salt.defaults._Constant", "datetime", "logging", "zmq", "copy", "salt.utils.msgpack"], "function_names": ["test_package", "test_list_nested_odicts", "test_raw_vs_encoding_none", "test_raw_vs_encoding_utf8", "assert_no_ordered_dict", "test_immutable_set_dump_load", "test_SREQ_set_tcp_keepalive", "test_immutable_dict_dump_load", "test_mixed_dump_load", "test_recursive_dump_load_with_identical_non_recursive_types", "test_datetime_dump_load", "test_odict_dump_load", "test_constants", "test_SREQ_init", "test_immutable_list_dump_load", "test_unpackage", "test_format_payload", "test_recursive_dump_load", "test_SREQ_socket", "test_verylong_dump_load"], "function_calls": ["AssertionError", "assert_no_ordered_dict", "dict", "_Constant", "OrderedDict", "isinstance"], "class_names": [], "class_method_calls": ["data.values", "zmq.TCP_KEEPALIVE", "immutabletypes.ImmutableDict", "req.master", "zmq.TCP_KEEPALIVE_INTVL", "salt.payload", "zmq.TCP_KEEPALIVE_IDLE", "req._socket", "logging.getLogger", "req.socket", "copy.deepcopy", "immutabletypes.ImmutableList", "zmq.Context", "req.poller", "req.id_", "zmq.Socket", "immutabletypes.ImmutableSet", "salt.utils", "zmq.Poller", "req.linger", "datetime.datetime", "idata.copy", "req.opts", "zmq.TCP_KEEPALIVE_CNT", "req.context"]}, "test_version.py": {"libraries": ["salt.version", "salt.version.SaltStackVersion", "salt.version.system_information", "salt.version.versions_report", "salt.version.SaltVersionsInfo", "re", "pytest", "tests.support.mock.MagicMock", "tests.support.mock.patch"], "function_names": ["test_sha", "test_versions_report_includes_salt_extensions", "test_unparsable_version_from_name", "test_system_version_windows", "test_string_new_version", "test_versions_report_no_extensions_available", "test_version_repr", "test_discover_version", "test_system_version_osx", "test_system_version_linux", "test_string_new_version_minor_as_string", "test_version_comparison", "test_unparsable_version", "test_string_new_version_minor", "test_parsed_version_name", "test_bugfix_string", "test_info_old_version", "test_full_info", "test_version_report_lines", "test_noc_info", "test_full_info_all_versions", "test_string_old_version", "test_version_parsing", "test_previous_and_next_releases", "test_info_new_version"], "function_calls": ["MagicMock", "repr", "patch", "SaltStackVersion", "list", "str", "int", "getattr", "system_information", "len", "versions_report"], "class_names": [], "class_method_calls": ["SaltVersionsInfo.current_release", "SaltVersionsInfo.NEPTUNIUM", "ret.bugfix", "SaltStackVersion.git_sha_regex", "SaltVersionsInfo.CALIFORNIUM", "versions_report_ret.index", "SaltVersionsInfo.previous_release", "salt.version", "ret.minor", "saltstack_version.full_info_all_versions", "ver.string", "ver.minor", "pytest.mark", "pytest.raises", "saltstack_version.string", "SaltVersionsInfo.BERKELIUM", "SaltStackVersion.parse", "SaltVersionsInfo.URANIUM", "line.split", "ver.info", "ver.name", "SaltStackVersion.from_name", "SaltVersionsInfo.PLUTONIUM", "re.compile", "ret.info", "SaltVersionsInfo.EINSTEINIUM", "ver.bugfix", "saltstack_version.full_info", "saltstack_version.noc_info", "patch.multiple", "STRIP_INITIAL_NON_NUMBERS_REGEX.search", "SaltVersionsInfo.next_release"]}, "test_pub_server_channel.py": {"libraries": ["contextlib.contextmanager", "os", "tornado.ioloop", "salt.transport.zeromq", "time", "random", "salt.utils.process", "tests.support.pytest.transport.PubServerChannelProcess", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "logging", "saltfactories.utils.random_string", "copy", "asyncio"], "function_names": ["run", "channel_publisher_manager", "__init__", "generate_msg_list", "test_zeromq_filtering_broadcast", "test_zeromq_filtering_minion", "test_zeromq_filtering_syndic"], "function_calls": ["MagicMock", "range", "patch", "channel_publisher_manager", "dict", "enumerate", "PubServerChannelProcess", "generate_msg_list", "random_string", "len", "set", "PubServerChannelSender"], "class_names": ["PubServerChannelSender"], "class_method_calls": ["loop.start", "tornado.ioloop", "msg_list.append", "salt_master.config", "os.path", "salt.payload", "server.publish_payload", "logging.getLogger", "salt.transport", "server.publish", "copy.deepcopy", "pytest.mark", "minions_list.append", "p.join", "time.sleep", "time.monotonic", "c.run", "random.shuffle", "server_channel.collector", "process_list.append", "self.payload_list", "salt_minion.id", "server.close", "server_channel.pub_server_channel", "salt.utils", "server.publisher", "salt_minion.config", "loop.add_callback", "loop.stop", "io_loop.add_callback", "p.start", "expect.difference", "self._run", "payloads.append", "self.pub_server_channel", "asyncio.sleep"]}, "test_subscriber.py": {"libraries": ["salt.channel.server", "tornado.gen", "salt.transport.ipc", "salt.utils.platform", "tornado.locks", "pathlib", "pytest", "attr"], "function_names": ["__enter__", "_publisher_default", "__exit__", "new_client", "ipc_socket_path", "_subscriber_default", "channel"], "function_calls": ["reply_func", "str", "IPCTester"], "class_names": ["PayloadHandler", "IPCTester"], "class_method_calls": ["channel.publish", "pytest.fixture", "attr.ib", "self.payloads", "self.server", "_socket_path.unlink", "publisher.default", "salt.transport", "channel.read", "pytest.mark", "_socket_path.exists", "subscriber.default", "self.publisher", "self.io_loop", "attr.Factory", "self.socket_path", "tornado.gen", "pathlib.Path", "channel.subscriber", "salt.utils", "self.subscriber", "self.payload_ack", "attr.s", "locks.Condition"]}, "test_publish_server.py": {"libraries": ["salt.transport", "asyncio"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["event.wait", "salt.transport", "pub_client.connect", "pub_server.close", "messages.append", "pub_server.publish", "event.set", "asyncio.wait_for", "asyncio.Event", "pub_server.pre_fork", "pub_client.close", "pub_client.on_recv", "asyncio.sleep"]}, "test_request_server.py": {"libraries": ["salt.utils.process", "salt.transport", "pytest", "asyncio"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["salt.transport", "req_server.post_fork", "req_client.close", "req_client.send", "req_server._started", "req_server.close", "req_server.pre_fork", "pytest.fail", "requests.append", "asyncio.sleep"]}, "test_load_balanced_server.py": {"libraries": ["threading", "time", "salt.transport.tcp", "multiprocessing", "socket", "pytest", "asyncio"], "function_names": ["handler", "run_loop", "test_tcp_load_balancer_server"], "function_calls": ["check_test", "print"], "class_names": [], "class_method_calls": ["socket.socket", "thread.join", "io_loop.start", "salt.transport", "server.close", "messages.append", "server.run", "worker.close", "sock.connect", "threading.Thread", "multiprocessing.Queue", "pytest.mark", "time.sleep", "sock.send", "time.monotonic", "io_loop.run_sync", "asyncio.sleep", "thread.start"]}, "test_message_client.py": {"libraries": ["tornado.iostream", "salt.transport.tcp", "tornado.gen", "tornado.tcpserver", "salt.utils.msgpack", "pytest", "logging", "asyncio"], "function_names": ["client", "server", "config"], "function_calls": ["TestServer", "len"], "class_names": ["TestServer"], "class_method_calls": ["log.error", "self.disconnect", "config.copy", "pytest.fixture", "client.connect", "log.info", "logging.getLogger", "tornado.iostream", "salt.transport", "server.listen", "server.send", "stream.write", "stream.close", "server.stop", "tornado.gen", "client.on_recv", "salt.utils", "server.disconnect", "received.append", "tornado.tcpserver", "client.close", "self.send", "asyncio.sleep"]}, "test_pub_server.py": {"libraries": ["os", "tornado.gen", "salt.transport.tcp", "time"], "function_names": ["remove_presence_callback", "presence_callback"], "function_calls": [], "class_names": [], "class_method_calls": ["server.publish_payload", "io_loop.add_callback", "salt.transport", "server.close", "publishes.append", "server.publish", "tornado.gen", "client.on_recv", "client.connect", "time.monotonic", "os.path", "server.publisher", "client.close", "payloads.append", "minion_opts.update", "server.pub_server"]}, "test_request_client.py": {"libraries": ["salt.transport.zeromq", "tornado.gen", "zmq.eventloop.zmqstream", "pytest", "zmq", "pytestshellutils.utils.ports"], "function_names": ["req_handler", "port"], "function_calls": [], "class_names": [], "class_method_calls": ["ctx.socket", "salt.transport", "tornado.gen", "zmq.REP", "pytest.fixture", "pytestshellutils.utils", "stream.send", "request_client.send", "stream.on_recv_stream", "request_client.close", "zmq.Context", "zmq.eventloop", "socket.bind", "request_client.socket"]}, "test_namespaced_function.py": {"libraries": ["sys", "warnings", "tests.conftest.CODE_DIR", "pytest", "logging", "salt.utils.functools.namespaced_function"], "function_names": ["preserve_context", "test_namespacing", "foo", "test_deprecated_preserve_context_kwarg", "test_deprecated_defaults_kwarg", "preserve_context_ids"], "function_calls": ["str", "namespaced_function", "isinstance", "globals"], "class_names": [], "class_method_calls": ["logging.getLogger", "request.param", "sys.executable", "ret.data", "pytest.helpers", "shell.run", "warnings.catch_warnings", "pytest.fixture", "ret.returncode", "log.warning", "warnings.simplefilter"]}, "test_gitfs.py": {"libraries": ["salt.fileserver.gitfs", "tornado.ioloop", "salt.utils.files", "salt.utils.platform", "tests.support.unit.TestCase", "tests.support.mixins.AdaptedConfigurationTestCaseMixin", "pytest", "salt.utils.gitfs", "tempfile", "salt.utils.path"], "function_names": ["tearDown", "test_get_cachedir_basename", "test_git_provider_mp_lock", "test_git_provider_mp_clear_lock_timeout", "envs", "fetch", "init_remote", "setUp", "test_update_by_id_and_name", "test_git_provider_mp_clear_lock", "__init__", "test_git_provider_mp_lock_timeout", "setUpClass", "test_update_by_name", "test_update_all", "_clear_instance_map"], "function_calls": ["super", "_clear_instance_map", "len"], "class_names": ["TestGitBase", "MockedProvider"], "class_method_calls": ["self.provider", "self.assertRaises", "tornado.ioloop", "self.fetched", "self.main_class", "remote.fetched", "provider._master_lock", "self.assertEqual", "pytest.mark", "self.get_temp_config", "self.assertFalse", "self.gitdir", "provider.clear_lock", "self._tmp_dir", "self.repo", "self.opts", "salt.utils", "tempfile.TemporaryDirectory", "provider.lock", "salt.fileserver", "self.assertTrue"]}, "test_pillar.py": {"libraries": ["salt.exceptions", "os", "salt.utils.stringutils", "textwrap", "salt.utils.files.fopen", "tests.support.runtests.RUNTIME_VARS", "salt.config", "tests.support.mock.MagicMock", "pytest", "logging", "salt.fileclient", "tempfile", "tests.support.mock.patch", "shutil"], "function_names": ["test_pillar_send_extra_minion_data_from_config", "test_ext_pillar_with_extra_minion_data_val_elem", "test_pillar_file_client_master_remote", "get_state", "cache_file", "test_ext_pillar_no_extra_minion_data_val_dict", "test_ext_pillar_no_extra_minion_data_val_list", "test_missing_include", "test_ext_pillar_no_extra_minion_data_val_elem", "test_ext_pillar_with_extra_minion_data_val_dict", "test_subkey_in_opts_added_to_pillar", "test_non_existent_intermediate_opt_in_add_to_pillar", "test_includes_override_sls", "_run_test", "test_ext_pillar_with_extra_minion_data_val_list", "grains", "test_compile_pillar_disk_cache", "test_ext_pillar_first", "test_malformed_pillar_sls", "tmp_pki", "test_multiple_keys_in_opts_added_to_pillar", "test_compile_pillar_memory_cache", "test_pillarenv_from_saltenv", "_setup_test_topfile_sls_pillar_match", "test_include", "test_relative_include", "_setup_test_topfile_sls", "list_states", "_setup_test_include_sls", "test_malformed_add_to_pillar", "test_topfile_order", "test_get_opts_in_pillar_override_call", "__init__", "test_non_existent_leaf_opt_in_add_to_pillar"], "function_calls": ["MagicMock", "type", "_setup_test_topfile_sls", "_setup_test_include_sls", "patch", "dict", "str", "join", "NotImplementedError", "print", "MockFileclient", "_setup_test_topfile_sls_pillar_match", "fopen", "_run_test"], "class_names": ["MockFileclient"], "class_method_calls": ["sub_with_init_dot_sls.name", "mock_channel.crypted_transfer_decode_dictentry", "pillar.cache", "self.cache_file", "pillar.extra_minion_data", "self.get_state", "pytest.fixture", "master_opts.update", "generic_minion_file.flush", "top_file.flush", "os.path", "pillar.matchers", "ssh_minion_file.name", "patch.object", "pillar.pillar_override", "sub2_sls.write", "sub_with_slashes_sls.name", "logging.getLogger", "sub_wildcard_1_sls.name", "sub_with_slashes_sls.write", "pillar.compile_pillar", "mock_list_states.return_value", "excinfo.exception", "sub1_sls.name", "tempfile.NamedTemporaryFile", "sub2_sls.name", "pillar.opts", "pytest.raises", "ssh_file.flush", "generic_file.name", "self.list_states", "salt.pillar", "sub_with_init_dot_sls.flush", "generic_file.flush", "pillar.render_pillar", "ssh_minion_file.write", "init_sls.write", "os.makedirs", "tempfile.mkdtemp", "sub_wildcard_1_sls.flush", "RUNTIME_VARS.TMP", "init_sls.flush", "mock_ext_pillar_func.assert_called_once_with", "pillar.pillarenv", "init_sls.name", "generic_file.write", "sub_with_init_dot_sls.write", "compile_template.return_value", "pillar.client", "sub_with_slashes_sls.flush", "shutil.rmtree", "textwrap.dedent", "sub1_sls.flush", "salt.fileclient", "salt.utils", "mock_get_extra_minion_data.assert_called_once_with", "salt.exceptions", "sub1_sls.write", "sub2_sls.flush", "sub_wildcard_1_sls.write", "top_file.name", "compile_template.side_effect", "ssh_file.name", "mock_ext_pillar_func.reset_mock", "top_file.write", "generic_minion_file.write", "generic_minion_file.name", "ssh_file.write", "pillar._external_pillar_data", "ssh_minion_file.flush"]}, "test_cache.py": {"libraries": ["time", "tests.support.mock.ANY", "tests.support.mock.patch", "salt.utils.vault", "pytest", "salt.utils.vault.cache", "tests.support.mock.Mock", "salt.cache", "copy"], "function_names": ["cached_outdated", "test_exists", "test_get_config_cache_uncached", "test_get_config_other_cached", "context", "cached", "time_stopped", "test_get_cached_outdated", "test_get", "test_get_cached", "config", "test_reload", "test_get_cache_bank", "data", "test_flush_cbank", "test_get_config_context_cached", "ckey", "test_flush_exceptions_with_get", "uncached", "test_flush", "cbank", "test_get_cached_valid_for", "test_get_cached_not_outdated", "test_store", "test_get_uncached", "test_flush_exceptions_with_flush", "cached_invalid_flush", "test_expire_events_with_get", "test_get_cached_from_context", "test_get_cached_invalid"], "function_calls": ["patch", "bool", "Mock"], "class_names": ["TestVaultLeaseCache", "TestVaultAuthCache", "TestVaultConfigCache", "TestVaultCache"], "class_method_calls": ["flush.assert_called_once", "request.param", "vault.cache", "uncached.store", "cache.store", "cached_outdated.flush", "cached_invalid_flush.assert_called_once", "pytest.fixture", "cache.get", "res.config", "vault.VaultLease", "uncached.contains", "cache._load", "cache.cache", "vcache._get_cache_bank", "store.assert_called_once", "cache_factory.return_value", "vault.VaultToken", "cached.updated", "cache.exists", "vcache.VaultCache", "store.assert_called_once_with", "cache.config", "copy.deepcopy", "pytest.mark", "token.to_dict", "flush.assert_called_once_with", "pytest.raises", "vcache.VaultConfigCache", "salt.cache", "cache.contains", "cached.fetch", "cached.return_value", "vcache.VaultLeaseCache", "rld.assert_called_once_with", "time.time", "vault.VaultAuthExpired", "vault.VaultConfigExpired", "cache.updated", "cache.ttl", "lease_.to_dict", "vcache.VaultAuthCache", "cached_outdated.fetch", "events.assert_called_once_with", "flush.assert_not_called", "cache.fetch", "cache.flush", "cached.flush", "cached_outdated.updated", "cached.contains"]}, "test_etcd_util.py": {"libraries": ["salt.utils.etcd_util", "etcd", "urllib3.exceptions.MaxRetryError", "urllib3.exceptions.ReadTimeoutError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_read", "use_v2", "test_get", "test_tree", "test_write", "_version_id", "test_update", "client_name", "test_rm", "write_return", "test_expand", "test_ls", "test_watch", "test_flatten"], "function_calls": ["MagicMock", "iter", "patch", "MaxRetryError", "delattr", "ReadTimeoutError"], "class_names": [], "class_method_calls": ["etcd_client.range", "request.param", "etcd.EtcdRootReadOnly", "etcd.EtcdValueError", "etcd_util.HAS_ETCD_V2", "etcd_util.EtcdUtilWatchTimeout", "c1.__iter__", "etcd.EtcdDirNotEmpty", "mock.side_effect", "etcd_client.put", "pytest.fixture", "etcd_util.HAS_ETCD_V3", "write_mock.side_effect", "etcd_client.write", "client.rm", "mock.assert_any_call", "client.set", "result.get", "patch.object", "client._flatten", "c2.__iter__", "write_mock.call_count", "etcd_client.read", "get_mock.return_value", "pytest.raises", "mock.return_value", "client.tree", "etcd_util.get_conn", "etcd.EtcdKeyNotFound", "etcd.EtcdNotDir", "pytest.skip", "client.write", "mock.assert_called_with", "etcd_util.Etcd3DirectoryException", "watcher_mock.watch_once", "client.get", "tree_mock.assert_called_with", "client._expand", "etcd.EtcdNotFile", "client.read", "etcd.EtcdConnectionFailed", "client.ls", "etcd_client.delete_range", "etcd_return.kvs", "tree_mock.return_value", "client.watch", "etcd_client.delete", "client.update", "result.pop"]}, "test_extension_deprecation.py": {"libraries": ["salt.utils.decorators.extension_deprecation.extension_deprecation_message", "warnings"], "function_names": ["test_extension_deprecation", "get_configured_provider", "salt_func"], "function_calls": ["issubclass", "get_configured_provider", "extension_deprecation_message", "str", "len", "salt_func"], "class_names": [], "class_method_calls": ["warnings.catch_warnings"]}, "test_jinja.py": {"libraries": ["collections.OrderedDict", "salt.utils.templates.render_jinja_tmpl", "re", "pytest", "salt.exceptions.SaltRenderError", "tests.support.mock.patch"], "function_names": ["test_render_tojson_sorted", "test_render_sanity", "test_render_evaluate", "test_render_cve_2021_25283", "test_render_variable", "test_undefined_error_context", "test_render_evaluate_multi", "test_render_tojson_unsorted"], "function_calls": ["OrderedDict", "render_jinja_tmpl"], "class_names": [], "class_method_calls": ["re.MULTILINE", "re.compile", "pytest.raises", "re.DOTALL", "patch.dict"]}, "test_job.py": {"libraries": ["tests.support.unit.TestCase", "salt.utils.job", "tests.support.mock.patch", "salt.minion"], "function_names": ["test_store_job_exception_handled", "__init__", "raise_exception", "return_mock_jobs"], "function_calls": ["patch", "Exception"], "class_names": ["MockMasterMinion", "JobTest"], "class_method_calls": ["MockMasterMinion.returners", "self.assertLogs", "MockMasterMinion.opts", "salt.minion", "self.mock_jobs_cache", "patch.dict", "logged.output", "job.store_job", "patch.object", "self.assertIn"]}, "test_process.py": {"libraries": ["os", "threading", "time", "salt._logging", "salt.utils.process", "multiprocessing", "psutil", "salt.utils.platform", "tests.support.unit.TestCase", "functools", "io", "logging", "signal", "pytest", "tempfile", "tests.support.mock.patch"], "function_names": ["test_process_does_not_exist", "test_callbacks", "children", "__enter__", "_die", "test_simple_claim_no_psutil", "test_kill", "test_dup2_no_fileno", "no_op_target", "test_callbacks_called_when_run_overridden", "test_counter", "pid_setting_target", "run_forever_target", "incr", "spin", "test_signal_processing_regression_test", "setUp", "pid", "run", "__exit__", "wait_for_proc", "test_daemonize_if", "test_random_processes", "_incr", "test_full_queue", "test_simple_claim", "null_target", "wrapper", "incr_counter", "test_process_list_cleanup", "test_process", "process_target", "test_signal_processing_handle_signals_called", "test_process_list_process", "test_multiple_processes", "target", "test_this_process", "die", "claim", "stop", "_spin", "Process", "run_forever_sub_target", "kill_target_sub_proc", "test_restarting", "event_target", "test_process_children_do_not_exist", "__init__", "test_basic", "test_process_list_thread"], "function_calls": ["iter", "next", "range", "setattr", "MyProcess", "patch", "CMORProcessHelper", "super", "Exception"], "class_names": ["TestDup2", "CMORProcessHelper", "MyProcess", "TestProcessCallbacks", "TestProcessList", "TestSignalHandlingProcessCallbacks", "TestSignalHandlingProcess", "TestClaimMantleOfResponsibility", "TestGetProcessInfo", "TestProcessManager", "TestProcess", "TestThreadPool", "TestCheckMantleOfResponsibility"], "class_method_calls": ["f1.fileno", "sig_handled.is_set", "multiprocessing.Event", "self.test_process", "self.assertIn", "logging.getLogger", "self.cmor_test_file_path", "proc.evt", "self.assertFalse", "sh_proc.join", "self.stop", "p1.pid", "proc.run", "signal.SIGKILL", "self.addCleanup", "signal.SIGTERM", "tempfile.mkstemp", "dup_mock.called", "self.process_target", "self._lock", "sh_proc.start", "pool.fire_async", "plist.processes", "event.set", "val.value", "proc.register_finalize_method", "self.assertEqual", "p.join", "pytest.mark", "self._ret_queue", "time.sleep", "multiprocessing.Value", "evt.is_set", "self._process", "process_manager.check_children", "self.wait_for_proc", "time.time", "multiprocessing.Process", "io.UnsupportedOperation", "os.fork", "self.spin_basic", "os.kill", "sig_handled.set", "self.spin_kill", "ls1.assert_called", "thread.start", "proc2.join", "self._queue", "self.assertRaises", "self.assertIsInstance", "multiprocessing.Queue", "sh_proc.is_alive", "os.getpid", "psutil.NoSuchProcess", "self.assertIsNotNone", "self.assertIsNone", "self._running", "self.Process", "pytest.skip", "evt.set", "threading.Thread", "ls2.assert_called", "psutil.Process", "ret_queue.put", "self.die_restarting", "p.start", "event.wait", "pool._job_queue", "proc.join", "sh_proc.evt", "process_manager.terminate", "self.evt", "sh_proc.run", "proc2.start", "proc.is_alive", "raw_process_info.name", "p2.claim", "self.target", "process_manager._process_map", "io.StringIO", "process_manager.add_process", "self.pid_setting_target", "func.__name__", "threading.Lock", "plist.cleanup", "self.incr_counter", "salt.utils", "plist.add", "self.kill_target_sub_proc", "thread.is_alive", "self.run_forever_sub_target", "self.children", "functools.wraps", "self.run_forever_target", "os.unlink", "p1.claim", "proc.start", "ls3.assert_called", "counter.value", "queue.get", "self.assertTrue", "os.close", "proc2.is_alive", "raw_process_info.create_time", "signal.SIGINT"]}, "test__getgrall.py": {"libraries": ["pytest", "grp", "salt.utils.user", "textwrap.dedent"], "function_names": ["test__getgrall", "test__getgrall_bad_format", "etc_group"], "function_calls": ["str", "dedent"], "class_names": [], "class_method_calls": ["etcgrp.parent", "etc_group.open", "pytest.fixture", "grp.struct_group", "etc_group.parent", "pytest.raises", "salt.utils", "pytest.importorskip", "_fp.write", "etcgrp.write_text"]}, "test_chugid_and_umask.py": {"libraries": ["os", "salt.utils.user", "subprocess", "functools", "pathlib", "pytest", "tempfile"], "function_names": ["test_chugid_and_group", "test_chugid", "account_2", "_check_skip", "account_1"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["testfile.exists", "account_2.info", "pytest.fixture", "account_1.group", "functools.partial", "tmp_path.chmod", "account_1.info", "pytest.helpers", "pytest.mark", "testfile_stat.st_gid", "subprocess.run", "os.chown", "testfile.stat", "account_1.username", "account_2.username", "ret.returncode", "pathlib.Path", "salt.utils", "tempfile.TemporaryDirectory", "testfile_stat.st_uid"]}, "test_get_group_dict.py": {"libraries": ["salt.utils.user", "salt.utils.platform", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["test_get_group_dict_with_improper_duplicate_root_group"], "function_calls": ["patch"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.utils", "pytest.mark"]}, "test_get_group_list.py": {"libraries": ["salt.utils.platform", "salt.utils.user", "pytest", "logging"], "function_names": ["test_get_group_list_with_duplicate_gid_group", "user", "dupegroup"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "pytest.helpers", "dupegroup.name", "user.group", "pytest.fixture", "pytest.mark", "salt.utils", "user.username"]}, "test_get_name.py": {"libraries": ["salt.exceptions", "win32security", "pytest", "salt.utils.win_dacl"], "function_names": ["test_get_name", "test_get_name_virtual_account", "test_get_name_pysid_obj", "test_get_name_capability_sid", "test_get_name_error"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.exceptions", "pytest.mark", "win32security.ConvertStringSidToSid", "pytest.raises", "exc.value", "salt.utils"]}, "test_get_sid.py": {"libraries": ["pywintypes", "win32security", "pytest", "salt.utils.win_dacl"], "function_names": ["test_get_sid"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["win32security.LookupAccountSid", "pywintypes.SIDType", "salt.utils", "pytest.mark"]}, "test_get_sid_string.py": {"libraries": ["pywintypes", "pytest", "salt.utils.win_dacl"], "function_names": ["test_get_sid_string"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["pywintypes.SIDType", "salt.utils", "pytest.mark"]}, "test_yamllint.py": {"libraries": ["salt.utils.versions", "pathlib.Path", "salt.utils.yamllint", "pytest"], "function_names": ["test_input_bytes", "test_bad_yaml", "test_config", "test_version", "test_good_yaml", "test_has_yamllint"], "function_calls": ["str", "Path"], "class_names": [], "class_method_calls": ["yamllint.lint", "yamllint.version", "yamllint.has_yamllint", "pytest.mark", "versions.version_cmp"]}, "test_jid_logging.py": {"libraries": ["salt._logging.DFLT_LOG_FMT_JID", "tests.support.helpers.PRE_PYTEST_SKIP", "logging"], "function_names": ["test_jid_in_logs"], "function_calls": [], "class_names": [], "class_method_calls": ["caplog.at_level", "caplog.handler", "caplog.text", "ret.returncode", "logging.Formatter", "logging.DEBUG", "salt_call_cli.run", "DFLT_LOG_FMT_JID.split", "ret.data"]}, "test_logging.py": {"libraries": ["os", "salt._logging.impl", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_logfile_handler", "test_get_logging_level_from_string", "test_in_mainprocess", "test_lowest_log_level", "log_nameToLevel"], "function_calls": ["patch", "MagicMock", "log_nameToLevel"], "class_names": [], "class_method_calls": ["log_impl.setup_logfile_handler", "logging.getLogger", "log_impl.set_lowest_log_level", "log_impl.get_logging_level_from_string", "log_impl.set_lowest_log_level_by_opts", "caplog.at_level", "logging.WARNING", "pytest.fixture", "caplog.clear", "pytest.mark", "caplog.text", "log_impl.is_logfile_handler_configured", "_nameToLevel.get", "log_impl.in_mainprocess", "os.getpid", "log_impl.get_lowest_log_level"]}, "test_multiple_processes_logging.py": {"libraries": ["time", "types.SimpleNamespace", "salt.utils.platform", "_pytest.pytester.LineMatcher", "pathlib", "pytest", "saltfactories.utils.random_string"], "function_names": ["logging_master", "matches", "test_multiple_processes_logging_stderr", "test_multiple_processes_logging_log_file"], "function_calls": ["SimpleNamespace", "LineMatcher", "random_string"], "class_names": [], "class_method_calls": ["logging_master.ret", "logging_master.log_file", "logging_master.process_pid", "factory.terminate", "pytest.fixture", "salt_factories.salt_master_daemon", "pytest.mark", "factory.started", "factory.pid", "time.sleep", "pathlib.Path", "salt.utils", "factory.config", "matcher.fnmatch_lines_random"]}, "test_matcher.py": {"libraries": ["salt.defaults.exitcodes", "pathlib", "pytest"], "function_names": ["test_compound_pillar", "test_compound_list_and_pcre_minion", "test_compound_not_grain", "test_list", "test_coumpound_pcre_grain_regex", "test_salt_documentation_too_many_arguments", "test_compound_not_sub_minion", "test_compound_and_not_grain", "test_compound_pillar_pcre", "pillar_tree", "test_grains_targeting_os_running", "test_nodegroup_list", "test_compound_pcre_grain_and_grain", "test_ipcidr", "test_salt_documentation", "test_pillar", "test_grains_targeting_minion_id_disconnected", "test_compound_nodegroup", "test_grains_targeting_minion_id_running", "test_nodegroup", "_check_skip", "test_compound_all_and_not_grains", "test_glob", "test_compound_min_with_grain", "test_grain", "test_regex", "test_regrain", "test_compound_grain_regex", "test_static", "test_repillar"], "function_calls": [], "class_names": [], "class_method_calls": ["salt_cli.id", "pytest.helpers", "salt_minion.id", "minions_pki_dir.joinpath", "salt_sub_minion.id", "ret.stderr", "pytest.fixture", "pytest.mark", "ret.returncode", "salt_cli.run", "pathlib.Path", "salt_master.config", "salt_master.pillar_tree", "salt.defaults", "ret.stdout", "ret.data"]}, "test_salt_auth.py": {"libraries": ["pytest", "logging"], "function_names": ["test_pam_auth_valid_group", "salt_auth_account_1", "test_pam_auth_invalid_user", "salt_auth_account_2", "test_pam_auth_valid_user"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt_auth_account_2.username", "salt_minion.id", "pytest.fixture", "pytest.mark", "ret.returncode", "salt_auth_account_2.password", "salt_cli.run", "salt_auth_account_1.username", "salt_auth_account_1.password", "ret.stdout", "ret.data"]}, "test_salt_call.py": {"libraries": ["subprocess", "pytest", "pytestskipmarkers.utils.platform"], "function_names": ["test_salt_call", "test_salt_call_local_sys_doc_none", "test_salt_call_local", "test_salt_call_local_sys_doc_aliases", "test_salt_call_cmd_run_id_runas", "test_sls", "state_name"], "function_calls": ["str", "iter", "next"], "class_names": [], "class_method_calls": ["pkg_tests_account.username", "platform.is_darwin", "platform.is_windows", "pytest.fixture", "ret.returncode", "pytest.mark", "caplog.text", "salt_master.state_tree", "pkg_tests_account.info", "subprocess.run", "salt_call_cli.run", "ret.stdout", "ret.data"]}, "test_salt_cp.py": {"libraries": ["os", "salt.utils.files", "tests.support.runtests.RUNTIME_VARS", "pathlib", "pytest", "logging"], "function_names": ["test_cp_testfile", "dest_testfile", "source_testfile"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["logging.getLogger", "RUNTIME_VARS.BASE_FILES", "salt_cp_cli.run", "RUNTIME_VARS.TMP", "salt_minion.id", "rfh.read", "src.resolve", "pytest.fixture", "ret.returncode", "pytest.mark", "dst.unlink", "pathlib.Path", "os.path", "salt.utils", "dst.exists", "ret.data"]}, "test_salt_key.py": {"libraries": ["pytest"], "function_names": ["test_salt_key"], "function_calls": [], "class_names": [], "class_method_calls": ["salt_minion.id", "salt_key_cli.run", "ret.data", "pytest.mark"]}, "test_salt_minion.py": {"libraries": ["pytest"], "function_names": ["test_salt_minion_ping", "test_salt_minion_setproctitle"], "function_calls": [], "class_names": [], "class_method_calls": ["salt_minion.id", "ret.returncode", "pytest.mark", "salt_cli.run", "ret.data"]}, "test_salt_proxy.py": {"libraries": ["salt.beacons.salt_proxy", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_salt_proxy_not_running", "test_salt_proxy_running", "test_empty_config", "test_non_list_config"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["salt_proxy.beacon", "pytest.fixture", "salt_proxy.validate", "salt_proxy.__salt__", "patch.dict"]}, "test_salt_run.py": {"libraries": ["salt.utils.files", "salt.utils.platform", "re", "pytest", "salt.utils.yaml", "salt.utils.pycrypto", "salt.defaults.exitcodes"], "function_names": ["test_exit_status_correct_usage", "test_salt_run_with_eauth_bad_passwd", "salt_run_cli", "test_in_docs", "test_exit_status_unknown_argument", "test_not_in_docs", "test_salt_run_with_eauth_all_args", "test_salt_run_with_wrong_eauth", "test_salt_documentation_too_many_arguments"], "function_calls": [], "class_names": [], "class_method_calls": ["salt_eauth_account.password", "ret.stderr", "pytest.fixture", "pytest.mark", "ret.returncode", "salt_eauth_account.username", "re.search", "salt_master.salt_run_cli", "salt.defaults", "ret.stdout", "ret.data", "salt_run_cli.run"]}, "test_salt_syndic.py": {"libraries": ["os", "time", "tests.support.helpers.PRE_PYTEST_SKIP", "pytest", "logging", "pytestshellutils.exceptions.FactoryNotStarted", "tests.support.helpers.PRE_PYTEST_SKIP_REASON", "saltfactories.utils.random_string", "salt.defaults.exitcodes"], "function_names": ["test_exit_status_correct_usage", "test_exit_status_unknown_user", "test_exit_status_unknown_argument", "syndic_id"], "function_calls": ["random_string"], "class_names": [], "class_method_calls": ["factory.start", "logging.getLogger", "os.unlink", "factory.terminate", "log.debug", "pytest.fixture", "pytest.mark", "salt_master.salt_syndic_daemon", "ret.returncode", "time.sleep", "pytest.raises", "factory.before_start_callbacks", "exc.value", "os.path", "salt_master.config", "factory.is_running", "salt.defaults"]}, "test_syndic_eauth.py": {"libraries": ["time", "tests.conftest.CODE_DIR", "json", "pytest", "logging"], "function_names": ["test_invalid_eauth_user_should_not_be_able_to_do_anything", "docker_minion_a1", "all_the_docker", "docker_syndic_b", "docker_minion_b2", "docker_minion", "eauth_valid_commands", "eauth_valid_arguments", "test_eauth_user_should_be_able_to_target_valid_minions_with_valid_commands_comprehensively", "json_output_to_dict", "syndic_network", "docker_master", "test_eauth_user_with_invalid_comprehensive_targeting_should_auth_failure", "container_python_version", "container_image_name", "test_eauth_user_should_not_be_able_to_target_valid_minions_with_valid_commands_and_invalid_arguments", "config", "docker_minion_b1", "test_root_user_should_be_able_to_call_any_and_all_minions_with_any_and_all_commands", "valid_comprehensive_minion_targeting", "eauth_invalid_arguments", "valid_eauth_comprehensive_minion_targeting", "test_eauth_user_should_not_be_able_to_target_valid_minions_with_invalid_commands", "all_the_commands", "eauth_invalid_commands", "test_eauth_user_should_not_be_able_to_target_invalid_minions", "test_root_should_be_able_to_use_comprehensive_targeting", "docker_minion_a2", "eauth_valid_minions", "eauth_blocked_minions", "docker_minions", "all_the_minions", "test_eauth_user_should_be_able_to_target_valid_minions_with_valid_command", "invalid_comprehensive_minion_targeting", "comprehensive_minion_targeting", "docker_syndic_a"], "function_calls": ["str", "sorted", "json_output_to_dict", "set", "isinstance"], "class_names": [], "class_method_calls": ["dir_.mkdir", "request.param", "tmp_path_factory.mktemp", "syndic_b_minion_config_path.write_text", "docker.from_env", "pytest.fixture", "salt_factories.get_container", "minion.run", "log.info", "syndic_b_master_config_path.write_text", "res.data", "container.started", "logging.getLogger", "minion_config_path.write_text", "json.loads", "s.run", "minion_b2_config_path.write_text", "res.returncode", "pytest.mark", "master_config_path.write_text", "time.sleep", "minion_a1_config_path.write_text", "res.stderr", "docker.errors", "docker_master.run", "container.run", "output.replace", "pytest.skip", "network.remove", "minion_b1_config_path.write_text", "res.stdout", "network.name", "ret.returncode", "time.time", "pytest.importorskip", "docker.types", "syndic_a_minion_config_path.write_text", "_.strip", "minion_a2_config_path.write_text", "syndic_a_master_config_path.write_text", "client.networks"]}, "test_runner.py": {"libraries": ["salt.states.saltmod", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_test_mode", "configure_loader_modules", "test_runner"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["saltmod.runner", "saltmod.__salt__", "pytest.fixture", "saltmod.__opts__", "patch.dict"]}, "test_basic_cluster.py": {"libraries": ["salt.utils.event"], "function_names": ["test_basic_cluster_minion_1_from_master_3", "test_basic_cluster_event", "test_basic_cluster_minion_1", "test_basic_cluster_minion_1_from_master_2", "test_basic_cluster_setup"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["salt.utils", "key_path.name", "event2.get_event", "cluster_master_1.salt_cli", "found.append", "cluster_master_2.config", "cluster_master_2.salt_run_cli", "peers_path.iterdir", "cluster_master_2.salt_cli", "cli1.run", "event1.fire_event", "cluster_master_3.salt_cli", "cli.run", "cluster_master_1.salt_run_cli", "cli2.run", "ret.stdout", "ret.data", "found.sort"]}, "test_masterapi.py": {"libraries": ["os", "salt.utils.stringutils", "subprocess", "salt.utils.files", "tests.support.runtests.RUNTIME_VARS", "pytest", "stat", "shutil"], "function_names": ["autosign_file_path", "setup_autosign_files", "test_autosign_grains_fail", "autosign_grains_dir", "test_autosign_grains_accept", "test_ufw_allow", "autosign_file_permissions"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["stat.S_IWUSR", "f.write", "pytest.fixture", "stat.S_IRUSR", "shutil.copyfile", "salt_master.config", "os.path", "out.decode", "salt_call_cli.run", "pytest.mark", "stat.S_IRGRP", "salt_key_cli.run", "os.makedirs", "salt_minion.id", "pytest.skip", "shutil.rmtree", "salt.utils", "stat.S_IROTH", "err.decode", "proc.communicate", "subprocess.Popen", "RUNTIME_VARS.FILES", "os.chmod", "subprocess.PIPE"]}, "test_memory_leak.py": {"libraries": ["time", "psutil", "multiprocessing.Process", "pytest", "multiprocessing.Manager"], "function_names": ["_func", "file_add_delete_sls", "test_memory_leak"], "function_calls": ["Manager", "range", "Process", "len"], "class_names": [], "class_method_calls": ["proc.start", "salt_minion.id", "done_flag.append", "proc.join", "manager.list", "pytest.fixture", "pytest.mark", "salt_master.state_tree", "salt_cli.run", "time.sleep", "psutil.virtual_memory", "pytest.fail", "data.append", "usg.available", "usg.total"]}, "test_clear_funcs.py": {"libraries": ["os", "time", "salt.channel.client", "salt.utils.user", "salt.utils.files", "salt.utils.platform", "salt.config", "pathlib", "pytest", "logging", "attr", "salt.master"], "function_names": ["test_clearfuncs_config", "test_fileroots_write", "_default_key", "test_fileroots_read", "clear_channel", "test_pub_not_allowed", "test_auth_info_not_allowed", "_default_key_file", "_default_username", "_default_key_path", "client_config", "test_token", "user_info"], "function_calls": ["str", "UserInfo", "hasattr", "list"], "class_names": ["UserInfo"], "class_method_calls": ["username.default", "good_target.unlink", "self.key_file", "user_info.key", "log.debug", "salt_master.config_dir", "good_file_path.unlink", "pytest.fixture", "attr.ib", "tokensdir.is_dir", "salt_master.config", "os.path", "good_file_path.exists", "salt.master", "log.warning", "logging.getLogger", "key_file.default", "salt_master.id", "user.split", "time.sleep", "clear_channel.send", "pytest.fail", "relative_key_path.resolve", "self.key_path", "bad_target.unlink", "keyfd.read", "key.default", "salt_minion.id", "seen_records.append", "evil_file_path.exists", "state_tree_root_dir.parent", "user.startswith", "user_info.username", "user_info.key_path", "tempfile.exists", "pathlib.Path", "time.time", "logging.ERROR", "self.username", "evil_file_path.unlink", "salt.utils", "salt_minion.config", "event_listener.get_events", "bad_target.exists", "caplog.records", "caplog.at_level", "self.master_config", "key_path.default", "attr.s", "good_target.exists", "opts.update", "salt.channel"]}, "test_peer.py": {"libraries": ["saltfactories.utils.random_string", "pytest", "shutil"], "function_names": ["peer_salt_minion_2", "test_peer_communication_limited_target_allowed", "peer_salt_master_config", "peer_salt_minion_3", "test_peer_communication_denied", "pillar_state_tree", "peer_salt_minion_1", "test_peer_communication", "test_peer_communication_limited_target_denied", "peer_salt_master"], "function_calls": ["str", "range", "random_string"], "class_names": [], "class_method_calls": ["peer_salt_master.salt_minion_daemon", "tmp_path_factory.mktemp", "request.getfixturevalue", "peer_salt_master.is_running", "peer_salt_minion_1.salt_call_cli", "pytest.fixture", "peer_salt_minion_1.id", "salt_factories.salt_master_daemon", "peer_salt_minion_2.id", "ret.returncode", "pytest.mark", "shutil.rmtree", "factory.started", "factory.salt_call_cli", "cli.run", "salt_call_cli.run", "ret.data"]}, "test_job_return.py": {"libraries": ["os", "subprocess", "salt.utils.platform", "pytest", "shutil"], "function_names": ["salt_master_2", "salt_minion_1", "test_job_return", "salt_master_1"], "function_calls": [], "class_names": [], "class_method_calls": ["salt_master_2.salt_run_cli", "run_1.run", "pytest.fixture", "salt_factories.salt_master_daemon", "shutil.copyfile", "salt_master_1.config", "os.path", "factory.config", "subprocess.check_output", "ret.stdout", "ret.data", "request.config", "pytest.mark", "salt_master_1.salt_cli", "salt_minion_1.id", "salt_master_2.config", "line.split", "salt_master_1.salt_run_cli", "salt.utils", "cli.run", "salt_master_1.salt_minion_daemon", "run_2.run", "factory.started"]}, "test_reauth.py": {"libraries": ["os", "threading", "time", "pytest", "logging"], "function_names": ["test_reauth", "minion_func", "timeout"], "function_calls": ["int"], "class_names": [], "class_method_calls": ["log.debug", "salt_master.start", "minion_proc.join", "pytest.fixture", "logging.getLogger", "pytest.mark", "salt_master.id", "time.sleep", "salt_cli.run", "minion_proc.start", "event_listener.wait_for_events", "salt_minion.id", "threading.Thread", "salt_minion.terminate", "time.time", "event_listener.get_events", "salt_master.terminate", "os.environ", "salt_minion.started"]}, "test_return_retries.py": {"libraries": ["salt.utils.files", "saltfactories.utils.random_string", "pytest", "time"], "function_names": ["test_publish_retry", "salt_minion_retry", "test_pillar_timeout"], "function_calls": ["isinstance", "range", "random_string"], "class_names": [], "class_method_calls": ["fp.write", "pytest.fixture", "master.salt_minion_daemon", "salt_master.stopped", "salt_run_cli.run", "salt_minion_retry.id", "pytest.helpers", "minion1.started", "rtn.stdout", "factory.after_terminate", "pytest.mark", "minion3.started", "factory.id", "salt_cli.run", "time.sleep", "master.started", "salt_master.salt_minion_daemon", "salt.utils", "cli.run", "minion2.started", "minion4.started", "salt_master_factory.salt_master_daemon", "proc.data", "master.state_tree", "proc.returncode", "master.salt_cli", "factory.started"]}, "test_modules.py": {"libraries": ["pytest"], "function_names": ["test_sync_all", "test_sync_all_whitelist", "test_sync_all_blacklist", "test_sync_all_blacklist_and_whitelist", "refresh_pillar"], "function_calls": [], "class_names": [], "class_method_calls": ["pytest.fixture", "ret.returncode", "pytest.mark", "salt_call_cli.run", "ret.data"]}, "test_wheel.py": {"libraries": ["salt.states.saltmod", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_test_mode", "configure_loader_modules", "test_wheel", "test_test_error_in_return"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["saltmod.wheel", "saltmod.__salt__", "pytest.fixture", "saltmod.__opts__", "mock.assert_called_once", "patch.dict"]}, "test_state_pillar_errors.py": {"libraries": ["saltfactories.utils.functional.StateResult", "textwrap", "pytest"], "function_names": ["test_state_apply_continues_after_pillar_error_is_fixed", "reset_pillar", "test_state_apply_aborts_on_pillar_error", "testfile_path"], "function_calls": ["StateResult"], "class_names": [], "class_method_calls": ["shell_result.data", "state_result.changes", "pytest.helpers", "salt_minion.id", "textwrap.dedent", "pytest.fixture", "pytest.mark", "ret.returncode", "salt_cli.run", "shell_result.returncode", "salt_call_cli.run", "ret.data", "state_result.result"]}, "test_state_state_events.py": {"libraries": ["pytest", "time", "logging"], "function_names": ["configure_state_tree", "state_event_tag", "test_highstate_state_events", "test_sls_id_state_events", "test_sls_state_events"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt_minion.id", "state_event_tag.format", "pytest.fixture", "ret.returncode", "salt_master.id", "salt_master.state_tree", "time.time", "matched_events.found_all_events", "event_listener.wait_for_events", "salt_call_cli.run", "ret.data"]}, "test_state_test.py": {"libraries": ["logging"], "function_names": ["test_failing_sls", "test_failing_sls_compound", "test_issue_62590"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt_minion.id", "salt_master.state_tree", "ret.returncode", "salt_cli.run", "caplog.messages", "ret.data"]}, "test_beacons.py": {"libraries": ["salt.utils.beacons", "logging"], "function_names": ["test_list_to_dict", "test_remove_hidden_options"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["logging.getLogger", "beacons.remove_hidden_options", "beacons.list_to_dict"]}, "test_event.py": {"libraries": ["os", "tornado.iostream", "time", "salt.utils.stringutils", "salt.utils.event", "tests.support.events.eventpublisher_process", "pathlib.Path", "salt.utils.event.SaltEvent", "salt.config", "pytest", "zmq", "stat", "tests.support.events.eventsender_process", "tests.support.mock.patch"], "function_names": ["test_event_matching_regex", "test_event_many", "test_event_matching", "_assert_got_event", "test_master_pub_permissions", "test_event_matching_all_when_tag_is_None", "test_event_subscriptions_cache_regex", "test_event_no_timeout", "test_event_many_backlog", "test_event_nested_sub_all", "test_send_master_event", "test_event_single", "test_event_multiple_clients", "test_event_subscription_cache", "test_event_matching_all", "test_event_single_no_block", "sock_dir", "test_event_not_subscribed", "test_event_timeout", "test_connect_pull_should_error_log_on_other_errors", "test_event_single_wait_0_no_block_False", "test_connect_pull_should_debug_log_on_StreamClosedError"], "function_calls": ["range", "eventsender_process", "_assert_got_event", "bool", "str", "SaltEvent", "isinstance", "getattr", "Path", "eventpublisher_process"], "class_names": [], "class_method_calls": ["me.get_event", "sock_dir_path.mkdir", "os.lstat", "pytest.fixture", "stat.S_IRUSR", "mock_log_debug.mock_calls", "patch.object", "me1.get_event", "tornado.iostream", "me.fire_event", "me.subscribe", "pytest.mark", "event.connect_pull", "stat.S_IRGRP", "time.sleep", "me.fire_master", "mock_log_error.mock_calls", "assertMsg.format", "mock_pusher.connect", "me2.get_event", "call.args", "time.time", "salt.utils", "stat.S_IROTH", "me1.fire_event", "mock_log_debug.assert_not_called"]}, "test_mac_sysctl.py": {"libraries": ["salt.modules.mac_sysctl", "salt.exceptions.CommandExecutionError", "tests.support.mock.mock_open", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "tests.support.mock.DEFAULT"], "function_names": ["test_get", "configure_loader_modules", "test_persist_no_conf_success", "test_persist_no_conf_failure", "test_persist_success", "test_assign_cmd_failed", "test_assign"], "function_calls": ["MagicMock", "IOError", "patch", "len", "mock_open"], "class_names": [], "class_method_calls": ["m_open.writelines_calls", "mac_sysctl.assign", "m_open.write_calls", "pytest.fixture", "pytest.raises", "mac_sysctl.persist", "mac_sysctl.get", "mac_sysctl.__salt__", "patch.dict", "m_open.filehandles"]}, "test_rpmbuild_pkgbuild.py": {"libraries": ["textwrap", "subprocess", "tests.support.runtests.RUNTIME_VARS", "re", "pathlib", "logging", "pytest", "shutil"], "function_names": ["gpg_agent_ids", "gpg_agent", "pillar_tree", "_testrpm_signed", "test_make_repo", "repodir", "gpghome"], "function_calls": ["str", "int", "_testrpm_signed", "tuple"], "class_names": [], "class_method_calls": ["gpg_pkg_key_pub_path.write_text", "request.param", "log.debug", "pytest.fixture", "gpg_pkg_key_pub_path.chmod", "test_repomd_xml_path.is_file", "gpg_version_proc.stdout", "_repodir.mkdir", "salt_call_cli.run", "subprocess.CalledProcessError", "ret.data", "re.M", "logging.getLogger", "gpg_pkg_key_pem_path.chmod", "pytest.helpers", "rpm_chk_sign.decode", "gpg_pkg_key_pem_path.write_text", "pytest.mark", "agentconf.write_text", "_gpghome.mkdir", "subprocess.run", "shutil.copy", "test_repodata_path.is_dir", "salt_minion.id", "pytest.skip", "gpgconf.write_text", "ret.returncode", "pathlib.Path", "pidof_gpg_agent.stdout", "textwrap.indent", "re.compile", "_gpghome.chmod", "subprocess.PIPE", "CHECK_KEYID_OK.search", "subprocess.Popen", "RUNTIME_VARS.FILES", "GPG_TEST_KEY_ID.lower"]}, "test_useradd.py": {"libraries": ["pwd", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "pytest", "tests.support.mixins.LoaderModuleMockMixin", "salt.modules.useradd", "tests.support.mock.patch"], "function_names": ["test_getent", "test_list_users", "test_getent_user", "test_info", "tearDownClass", "test_list_groups", "test_build_gecos_field", "setUpClass", "setup_loader_modules"], "function_calls": ["patch", "MagicMock"], "class_names": ["UserAddTestCase"], "class_method_calls": ["useradd.list_groups", "test_gecos.pop", "self.assertEqual", "cls.mock_pwall", "useradd.list_users", "pytest.mark", "self.mock_pwall", "useradd._build_gecos", "pwd.struct_passwd", "self.assertTrue", "useradd.info", "useradd.getent", "patch.object"]}, "test_virt.py": {"libraries": ["salt.states.virt", "tests.support.mock.mock_open", "salt.utils.files", "tests.support.unit.TestCase", "salt.exceptions.SaltInvocationError", "tests.support.runtests.RUNTIME_VARS", "tests.support.mock.MagicMock", "tests.support.mixins.LoaderModuleMockMixin", "tempfile", "tests.support.mock.patch", "shutil"], "function_names": ["test_keys_with_state", "get_error_message", "test_pool_deleted", "test_keys_with_all_options", "test_volume_defined", "test_pool_defined", "test_keys_with_expiration_days", "test_keys", "tearDownClass", "setUpClass", "setup_loader_modules", "test_pool_running"], "function_calls": ["MagicMock", "patch", "str", "LibvirtMock", "mock_open"], "class_names": ["libvirtError", "LibvirtMock", "LibvirtTestCase"], "class_method_calls": ["self.assertDictEqual", "cls.pki_dir", "ret.update", "virt.keys", "virt.volume_defined", "define_mock.assert_called_once_with", "virt.pool_deleted", "patch.object", "define_mock.assert_not_called", "virt.pool_running", "self.mock_libvirt", "self.assertRaisesRegex", "virt.__opts__", "self.pki_dir", "virt.__salt__", "tempfile.mkdtemp", "RUNTIME_VARS.TMP", "shutil.rmtree", "salt.utils", "patch.dict", "self.addCleanup", "define_mock.reset_mock", "virt.pool_defined"]}, "test_arg_kwarg.py": {"libraries": ["salt.utils.json", "pytest", "urllib.parse"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["low1.copy", "urllib.parse", "_low.pop", "subtests.test", "pytest.mark", "response.code", "salt.utils", "http_client.fetch", "response.body", "low2.copy", "response.headers"]}, "test_jobs.py": {"libraries": ["salt.runners.jobs", "tests.support.mock.patch", "pytest", "salt.minion"], "function_names": ["configure_loader_modules", "__init__", "test_list_jobs_with_search_target", "return_mock_jobs"], "function_calls": [], "class_names": ["MockMasterMinion"], "class_method_calls": ["jobs.list_jobs", "patch.object", "pytest.fixture", "salt.minion"]}, "test_run.py": {"libraries": ["tornado.httpclient.HTTPError", "pytest", "urllib.parse"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["pytest.mark", "pytest.raises", "response.code", "exc.value", "http_client.fetch", "response.body", "urllib.parse"]}, "test_webhook_disable_auth.py": {"libraries": ["pytest", "urllib.parse"], "function_names": ["client_config"], "function_calls": [], "class_names": [], "class_method_calls": ["http_client.fetch", "response.code", "pytest.fixture", "urllib.parse"]}, "test_events_api_handler.py": {"libraries": ["functools.partial", "salt.netapi.rest_tornado.saltnado", "pytest", "asyncio"], "function_names": ["on_event", "app_urls"], "function_calls": ["partial", "len"], "class_names": [], "class_method_calls": ["tag.startswith", "data.startswith", "io_loop.spawn_callback", "pytest.fixture", "pytest.mark", "event.splitlines", "saltnado.EventsSaltAPIHandler", "event.strip", "asyncio.sleep", "http_client.fetch", "app.event_listener", "event.decode", "events_fired.append"]}, "test_jobs_api_handler.py": {"libraries": ["salt.utils.json", "salt.netapi.rest_tornado.saltnado", "pytest"], "function_names": ["app_urls"], "function_calls": ["isinstance", "next", "iter"], "class_names": [], "class_method_calls": ["subtests.test", "saltnado.JobsSaltAPIHandler", "response_obj.keys", "pytest.fixture", "pytest.mark", "salt.utils", "http_client.fetch", "response.body", "response_obj.values"]}, "test_minions_api_handler.py": {"libraries": ["salt.utils.json", "tornado.httpclient.HTTPError", "salt.netapi.rest_tornado.saltnado", "pytest"], "function_names": ["app_urls"], "function_calls": ["range", "sorted", "len", "isinstance", "print"], "class_names": [], "class_method_calls": ["salt_minion.id", "salt_sub_minion.id", "pytest.fixture", "pytest.mark", "pytest.raises", "saltnado.MinionSaltAPIHandler", "exc.value", "salt.utils", "http_client.fetch", "response.body", "app.event_listener"]}, "test_root_handler.py": {"libraries": ["salt.utils.json", "tornado.httpclient.HTTPError", "salt.netapi.rest_tornado.saltnado", "pytest"], "function_names": ["app_urls"], "function_calls": ["sorted", "len"], "class_names": [], "class_method_calls": ["salt_minion.id", "salt_sub_minion.id", "saltnado.SaltAPIHandler", "pytest.fixture", "pytest.mark", "pytest.raises", "response.code", "exc.value", "salt.utils", "http_client.fetch", "response.body"]}, "test_run_api_handler.py": {"libraries": ["salt.utils.json", "salt.netapi.rest_tornado.saltnado", "pytest"], "function_names": ["app_urls"], "function_calls": ["sorted"], "class_names": [], "class_method_calls": ["salt_minion.id", "salt_sub_minion.id", "pytest.fixture", "pytest.mark", "salt.utils", "http_client.fetch", "response.body", "saltnado.RunSaltAPIHandler"]}, "test_ssh_client.py": {"libraries": ["tests.support.helpers.Webserver", "tests.support.helpers.SaveRequestsPostHandler", "salt.netapi", "salt.exceptions.SaltInvocationError", "pytest", "salt.exceptions.EauthAuthenticationError", "logging", "tests.support.mock.patch"], "function_names": ["test_ssh_auth_valid", "rosters_dir", "test_ssh_unauthenticated", "webserver_root", "test_ssh_auth_token", "test_ssh_cve_2021_3197_a", "test_extra_mods", "test_ssh_auth_invalid", "webserver_handler", "test_ssh_authenticated_raw_shell_disabled", "client_config", "test_ssh_disabled", "test_ssh_unauthenticated_raw_shell_curl", "client", "salt_auth_account_1", "test_ssh_unauthenticated_raw_shell_touch", "test_ssh_auth_invalid_acl", "test_ssh_cve_2021_3197_b", "webserver", "test_shell_inject_remote_port_forwards", "test_shell_inject_ssh_priv", "test_ssh_auth_bypass", "test_ssh", "test_shell_inject_ssh_options", "test_shell_inject_ssh_port", "test_shell_inject_tgt", "ssh_priv_key"], "function_calls": ["str", "Webserver"], "class_names": [], "class_method_calls": ["salt.netapi", "pytest.fixture", "client.run", "client.loadauth", "salt_auto_account.password", "salt_auth_account_1.username", "client.opts", "salt_auto_account.username", "exploited_path.exists", "logging.getLogger", "badfile.exists", "pytest.mark", "pytest.raises", "webserver.handler", "path.exists", "webserver.web_root", "patch.dict", "salt_auth_account_1.password", "salt_ssh_roster_file.parent", "webserver_handler.received_requests", "sshd_server.config_dir"]}, "test_pillar_cache.py": {"libraries": ["pytest"], "function_names": ["test_pillar_cache_refresh", "test_pillar_cache_items", "pillar_cache_tree_no_refresh", "test_pillar_cache_passes_extra_minion_data", "pillar_cache_tree"], "function_calls": [], "class_names": [], "class_method_calls": ["pytest.helpers", "pytest.fixture", "ret.returncode", "pillar_salt_call_cli.run", "ret.data", "pillar_salt_minion.id"]}, "test_fileclient.py": {"libraries": ["tests.support.mock.patch", "salt.config", "tests.support.mock.MagicMock", "salt.fileclient"], "function_names": ["test_fsclient_master_no_fs_update", "test_fsclient_masterless_fs_update"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["fileclient.FSClient", "salt.config", "client.channel"]}, "test_pillar_include.py": {"libraries": ["pytest"], "function_names": ["pillar_include_tree", "test_pillar_include_already_included", "test_pillar_glob_include", "test_pillar_include"], "function_calls": [], "class_names": [], "class_method_calls": ["pytest.helpers", "salt_minion.id", "pytest.fixture", "ret.returncode", "salt_call_cli.run", "ret.data"]}, "test_deltaproxy.py": {"libraries": ["pytest", "logging"], "function_names": ["test_can_it_ping_all", "test_can_it_ping", "skip_on_tcp_transport", "test_list_pkgs_all", "test_config_get", "test_schedule_list", "test_install_pkgs", "test_grains_items", "test_service_start", "test_remove_pkgs_all", "test_state_apply", "proxy_id", "test_service_list", "test_schedule_add_list_all", "test_state_highstate", "test_list_pkgs", "test_service_stop", "test_upgrade", "proxy_ids", "test_schedule_add_list", "test_service_get_all", "test_install_pkgs_all", "test_remove_pkgs"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "request.param", "request.config", "list_ret.data", "pytest.helpers", "pytest.skip", "pytest.fixture", "pytest.mark", "salt_master.state_tree", "salt_cli.run", "install_ret.data", "ret.data"]}, "test_shell.py": {"libraries": ["importlib", "salt.client.ssh.shell", "subprocess", "types", "tests.support.mock.PropertyMock", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch", "tests.support.mock.call"], "function_names": ["_mock_bin_paths", "test_ssh_shell_key_gen", "test_gen_key_uses_custom_ssh_keygen_path", "keys", "test_ssh_shell_send_makedirs_failure_returns_immediately", "test_ssh_command_execution_uses_custom_path", "test_ssh_shell_exec_cmd_waits_for_term_close_before_reading_exit_status", "test_ssh_shell_exec_cmd_returns_status_code_with_highest_bit_set_if_process_dies", "test_ssh_shell_exec_cmd", "test_ssh_shell_send_makedirs_on_relative_filename_skips_exec", "test_scp_command_execution_uses_custom_path", "_exec_cmd"], "function_calls": ["any", "type", "MagicMock", "setattr", "patch", "PropertyMock", "str", "call"], "class_names": [], "class_method_calls": ["term._closed", "mock_which.side_effect", "term.signalstatus", "pytest.fixture", "caplog.text", "cmd.mock_calls", "subprocess.check_output", "patch.object", "_shell.send", "term.recv", "_shell.exec_cmd", "shl.send", "shell.Shell", "pytest.mark", "_shell.passwd", "logging.WARNING", "shl.exec_cmd", "shell.gen_key", "mock_run_cmd.call_args", "types.SimpleNamespace", "keys.priv_key", "cmd.startswith", "caplog.at_level", "term.close", "ret.decode", "importlib.reload", "mock_call.call_args", "keys.pub_key", "term.exitstatus", "_shell._cmd_str"]}, "test_simple.py": {"libraries": ["pytest", "logging"], "function_names": ["test_can_it_ping", "test_service_list", "test_service_get_all", "test_state_highstate", "test_install_pkgs", "test_list_pkgs", "test_grains_items", "test_service_stop", "test_upgrade", "test_service_start", "test_state_apply", "test_remove_pkgs"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt_proxy.id", "salt_master.state_tree", "pytest.mark", "salt_cli.run", "ret.data"]}, "test_reactor.py": {"libraries": ["glob", "os", "salt.utils.reactor", "textwrap", "salt.loader", "tests.support.mock.mock_open", "salt.utils.files", "tests.support.unit.TestCase", "salt.utils.yaml", "tests.support.mixins.AdaptedConfigurationTestCaseMixin", "codecs", "logging", "tests.support.mock.MagicMock", "salt.utils.data", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["test_local", "test_caller", "test_cmd", "test_wheel", "tearDownClass", "test_list_reactors", "setUpClass", "test_runner", "test_reactions"], "function_calls": ["mock_open", "MagicMock", "Mock"], "class_names": ["TestReactWrap", "TestReactor"], "class_method_calls": ["log.debug", "cls.reaction_map", "os.path", "cls.render_pipe", "patch.object", "logging.getLogger", "self.reactor", "self.assertEqual", "self.render_pipe", "reactor.ReactWrap", "salt.loader", "textwrap.dedent", "cls.get_temp_config", "salt.utils", "salt.template", "reactor.Reactor", "cls.wrap", "cls.reactor", "cls.opts", "thread_pool.fire_async", "self.reaction_map", "self.wrap"]}, "test_toml.py": {"libraries": ["salt.serializers.tomlmod", "salt.renderers.tomlmod", "pytest"], "function_names": ["test_toml_render_string"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.renderers", "salt.serializers", "pytest.mark"]}, "test_noop_return.py": {"libraries": ["logging"], "function_names": ["test_noop_return"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "caplog.at_level", "salt_minion.id", "caplog.text", "salt_cli.run", "logging.DEBUG"]}, "test_events.py": {"libraries": ["time", "salt.netapi.rest_cherrypy.app", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "__init__", "test__is_valid_token", "test__is_valid_token_expired", "get_token"], "function_calls": ["patch", "MockCherryPy", "MagicMock"], "class_names": ["MockCherryPy", "MockResolver"], "class_method_calls": ["pytest.fixture", "time.time", "cherrypy_app.Events", "events.resolver", "patch.object", "events._is_valid_token"]}, "test_orchestrate.py": {"libraries": ["pytest"], "function_names": ["test_orchestrate_batch_with_failhard_error", "test_orchestrate_subset", "test_orchestrate_nested", "test_orchestrate_retcode", "test_orchestrate_target_does_not_exist", "test_orchestrate_target_exists", "_check_skip", "test_orchestrate_with_mine", "test_orchestrate_state_output_with_salt_function", "test_orchestrate_state_and_function_failure", "test_orchestrate_salt_function_return_false_failure", "test_orchestrate_output"], "function_calls": ["len"], "class_names": [], "class_method_calls": ["pytest.helpers", "salt_minion.id", "data.values", "ret.stdout", "testfile.exists", "salt_sub_minion.id", "salt_master.state_tree", "ret.returncode", "pytest.mark", "salt_master.id", "line.strip", "pytest.fail", "to_check.remove", "ret.data", "salt_run_cli.run"]}, "test_nacl.py": {"libraries": ["os", "salt.utils.files", "salt.utils.nacl", "pytest", "salt.modules.config", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_keygen", "test_enc_sk_file", "test_keygen_sk_file", "test_dec_sk_file", "test_fips_mode", "test_dec_keyfile", "test_keygen_keyfile", "test_enc_keyfile"], "function_calls": ["patch", "isinstance", "str"], "class_names": [], "class_method_calls": ["nacl.dec", "pytest.helpers", "wfhpub.write", "pytest.fixture", "config.get", "nacl.enc", "wfh.write", "salt.utils", "os.path", "nacl.keygen", "pytest.importorskip"]}, "test_pillar_override.py": {"libraries": ["salt.utils.dictupdate", "json", "pytest"], "function_names": ["_assert_pillar", "_assert_basic", "test_pillar_is_only_rendered_once_without_overrides", "test_state_sls_id", "test_state_top", "test_state_show_sls", "override", "_show_pillar_state", "test_pillar_is_rerendered_with_overrides", "test_state_highstate", "test_state_show_low_sls", "test_state_sls", "base", "test_state_single"], "function_calls": ["_assert_basic", "iter", "next", "len", "isinstance", "_assert_pillar"], "class_names": [], "class_method_calls": ["json.loads", "pytest.helpers", "salt_ssh_cli.run", "pytest.fixture", "ret.returncode", "pytest.mark", "caplog.text", "salt.utils", "ret.data"]}, "test_pillar_override_template.py": {"libraries": ["salt.utils.dictupdate", "json", "pytest"], "function_names": ["test_it", "base", "_write_pillar_state", "override"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["json.loads", "tmp_path_factory.mktemp", "pytest.helpers", "salt_ssh_cli.run", "pytest.fixture", "pytest.mark", "ret.returncode", "salt.utils", "_write_pillar_state.read_text", "_write_pillar_state.exists", "ret.data"]}, "test_retcode_highstate_verification_requisite_fail.py": {"libraries": ["salt.defaults.exitcodes.EX_AGGREGATE", "pytest"], "function_names": ["state_tree_req_fail", "test_it"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["pytest.helpers", "salt_ssh_cli.run", "pytest.fixture", "ret.returncode", "pytest.mark", "ret.data"]}, "test_retcode_highstate_verification_structure_fail.py": {"libraries": ["salt.defaults.exitcodes.EX_AGGREGATE", "pytest"], "function_names": ["state_tree_structure_fail", "test_it"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["pytest.helpers", "salt_ssh_cli.run", "pytest.fixture", "ret.returncode", "pytest.mark", "ret.data"]}, "test_retcode_pillar_render_exception.py": {"libraries": ["salt.defaults.exitcodes.EX_AGGREGATE", "pytest"], "function_names": ["pillar_tree_render_fail", "test_it"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["pytest.helpers", "salt_ssh_cli.run", "pytest.fixture", "ret.returncode", "pytest.mark", "ret.data"]}, "test_retcode_render_exception.py": {"libraries": ["salt.defaults.exitcodes.EX_AGGREGATE", "pytest"], "function_names": ["test_state_single", "test_it", "state_tree_render_fail"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["pytest.helpers", "salt_ssh_cli.run", "pytest.fixture", "ret.returncode", "pytest.mark", "ret.data"]}, "test_retcode_render_module_exception.py": {"libraries": ["salt.defaults.exitcodes.EX_AGGREGATE", "pytest"], "function_names": ["test_it", "state_tree_render_module_exception"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["pytest.helpers", "salt_ssh_cli.run", "pytest.fixture", "ret.returncode", "pytest.mark", "ret.data"]}, "test_retcode_run_fail.py": {"libraries": ["salt.defaults.exitcodes.EX_AGGREGATE", "pytest"], "function_names": ["test_it", "state_tree_run_fail"], "function_calls": ["isinstance", "next", "iter"], "class_names": [], "class_method_calls": ["pytest.helpers", "salt_ssh_cli.run", "pytest.fixture", "ret.returncode", "pytest.mark", "ret.data"]}, "test_retcode_state_run_remote_exception.py": {"libraries": ["salt.defaults.exitcodes.EX_AGGREGATE", "pytest"], "function_names": ["test_it", "state_tree_remote_exception_mod", "state_tree_remote_exception"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["pytest.helpers", "salt_ssh_cli.run", "pytest.fixture", "ret.returncode", "pytest.mark", "ret.data", "salt_run_cli.run"]}, "test_with_import_dir.py": {"libraries": ["pytest"], "function_names": ["test_state_with_import_dir"], "function_calls": [], "class_names": [], "class_method_calls": ["salt_ssh_cli.run", "ret.returncode", "ret.data", "pytest.mark"]}, "test_deploy.py": {"libraries": ["salt.defaults.exitcodes.EX_AGGREGATE", "salt.utils.files", "pathlib", "pytest", "salt.utils.yaml", "shutil"], "function_names": ["remote_exception_wrap_mod", "test_set_path", "test_thin_dir", "test_wrapper_unwrapped_command_parsing_failure", "invalid_return_exe_mod", "test_retcode_json_decode_error", "test_custom_utils_are_present_on_target", "utils_dependent_module", "test_tty", "test_wipe", "test_retcode_invalid_return", "test_ping", "thin_dir", "remote_parsing_failure_wrap_mod", "test_wrapper_unwrapped_command_exception", "test_retcode_exe_run_exception", "test_wrapper_unwrapped_command_invalid_return", "test_retcode_exe_run_fail", "invalid_json_exe_mod"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["thin_dir.joinpath", "pytest.helpers", "salt_ssh_cli.run", "pytest.fixture", "ret.returncode", "pytest.mark", "shutil.rmtree", "pathlib.Path", "thin_dir.is_dir", "salt_master.state_tree", "thin_dir.exists", "salt_master.config", "salt.utils", "ret.data", "salt_run_cli.run"]}, "test_jinja_mods.py": {"libraries": ["saltfactories.utils.functional.StateResult", "pytest"], "function_names": ["test_echo"], "function_calls": ["StateResult"], "class_names": [], "class_method_calls": ["pytest.helpers", "salt_ssh_cli.run", "pytest.mark", "result.comment", "ret.data"]}, "test_log.py": {"libraries": ["salt._logging.impl.SaltLoggingClass", "tests.support.helpers.TstSuiteLoggingHandler", "salt._logging.handlers.StreamHandler", "io", "logging"], "function_names": ["raise_exception_on_purpose", "test_exc_info_on_loglevel", "test_issue_2853_regex_TypeError"], "function_calls": ["AssertionError", "StreamHandler", "TstSuiteLoggingHandler", "SaltLoggingClass", "raise_exception_on_purpose"], "class_names": [], "class_method_calls": ["stream1.getvalue", "logging.INFO", "log.removeHandler", "log.error", "handler2.setLevel", "io.StringIO", "stream2.getvalue", "logging.ERROR", "log.addHandler", "handler1.setLevel", "logging.DEBUG"]}, "test_master.py": {"libraries": ["tests.support.unit.TestCase", "salt.utils.master", "tests.support.mock.patch"], "function_names": ["test_get_minion_pillar_doesnotexist", "test_get_minion_pillar", "test_get_minion_pillar_notgt"], "function_calls": ["patch"], "class_names": ["MasterPillarUtilTestCase"], "class_method_calls": ["salt.utils", "pillar.get_minion_pillar"]}, "test_pillar_compilation.py": {"libraries": ["textwrap", "subprocess", "pytestshellutils.utils.processes.ProcessResult", "pathlib", "pytest", "logging", "shutil"], "function_names": ["gpg_pillar_yaml", "pillar_setup", "test_saltutil_runner", "_assert_saltutil_runner_pillar", "_assert_gpg_pillar", "test_gpg_pillar", "gpg_homedir", "test_key", "test_saltutil_runner_orch", "test_gpg_pillar_orch"], "function_calls": ["ProcessResult", "_assert_saltutil_runner_pillar", "_assert_gpg_pillar", "str", "isinstance"], "class_names": [], "class_method_calls": ["salt_master.config_dir", "log.debug", "pytest.fixture", "proc.stdout", "subprocess.CalledProcessError", "ret.data", "salt_run_cli.run", "logging.getLogger", "pytest.helpers", "salt_ssh_cli.run", "pytest.mark", "proc.stderr", "salt_ssh_cli.roster_file", "subprocess.run", "proc.args", "salt_minion.id", "subprocess.STDOUT", "textwrap.dedent", "ret.returncode", "shutil.rmtree", "pathlib.Path", "salt_ssh_cli.client_key", "proc.returncode", "salt_ssh_cli.target_host", "_gpg_homedir.mkdir", "subprocess.PIPE"]}, "test_pre_flight.py": {"libraries": ["os", "subprocess", "pwd", "salt.utils.files", "yaml", "pathlib", "pytest", "grp", "saltfactories.utils.random_string", "shutil"], "function_names": ["test_ssh_pre_flight_script", "test_ssh_pre_flight", "_create_roster", "test_ssh_run_pre_flight_failure", "test_ssh_run_pre_flight_args", "_custom_roster", "test_ssh_pre_flight_perms", "test_ssh_run_pre_flight_target_file_perms", "result", "test_ssh_run_pre_flight_args_prevent_injection", "account", "test_ssh_run_pre_flight", "demote"], "function_calls": ["str", "demote", "_custom_roster", "random_string"], "class_names": [], "class_method_calls": ["test_script_1.exists", "fp.write", "pytest.fixture", "ret.stdout", "ret.data", "_file.is_file", "os.stat", "tmp_preflight.write_text", "pytest.helpers", "salt_ssh_cli.run", "pytest.mark", "salt_ssh_cli.roster_file", "test_script_2.unlink", "preflight.write_text", "os.chown", "pwd.getpwuid", "fp_.write", "os.setgroups", "os.getuid", "os.setuid", "script.is_file", "ret.returncode", "shutil.rmtree", "preflight.name", "pathlib.Path", "roster_data.items", "run_script.write_text", "thin_dir.exists", "test_script_2.exists", "salt.utils", "preflight.chmod", "test_script_1.unlink", "yaml.safe_dump", "_file.unlink", "os.setgid", "grp.getgrgid", "injected_file.is_file", "data.split", "os.getgid", "subprocess.Popen", "run_script.chmod", "account.info", "fp.read"]}, "test_py_versions.py": {"libraries": ["time", "socket", "tests.support.helpers.Keys", "pytest", "logging", "saltfactories.utils.random_string"], "function_names": ["test_py36_target", "ssh_port", "check_container_started", "salt_ssh_cli", "ssh_keys", "ssh_docker_container", "salt_ssh_roster_file"], "function_calls": ["str", "Keys", "random_string"], "class_names": [], "class_method_calls": ["ssh_docker_container.get_host_port_binding", "ssh_docker_container.is_running", "salt_master.config_dir", "sock.close", "pytest.fixture", "salt_factories.get_container", "container.is_running", "ssh_keys.pub", "container.started", "ret.stdout", "ssh_keys.priv_path", "ret.data", "logging.getLogger", "pytest.helpers", "salt_ssh_cli.run", "container.get_check_ports", "pytest.mark", "time.sleep", "salt_master.salt_ssh_cli", "pytest.skip", "sock.connect", "ret.returncode", "container.container_start_check", "time.time", "salt_master.is_running", "pytest.importorskip", "socket.socket"]}, "test_raw.py": {"libraries": ["pytest"], "function_names": ["test_ssh_raw"], "function_calls": [], "class_names": [], "class_method_calls": ["salt_ssh_cli.run", "ret.returncode", "ret.data", "pytest.mark"]}, "test_slsutil.py": {"libraries": ["salt.exceptions", "io.StringIO", "tests.support.mock.MagicMock", "pytest", "logging", "salt.modules.slsutil", "tests.support.mock.patch"], "function_names": ["dummy_function", "test_dir_exists", "master_files", "test_path_exists", "test_deserialize", "test__get_serializer_fn", "configure_loader_modules", "test_merge", "test_update", "master_dirs", "test__set_context", "test_serialize", "test_banner", "test_file_exists", "test_findup", "test_boolstr", "test_merge_all", "check_banner", "test_renderer"], "function_calls": ["StringIO", "MagicMock", "patch", "str", "check_banner", "len"], "class_names": [], "class_method_calls": ["slsutil.deserialize", "slsutil.boolstr", "pytest.fixture", "line.endswith", "slsutil.merge_all", "slsutil.__utils__", "slsutil.findup", "slsutil._get_serialize_fn", "patch.object", "logging.getLogger", "slsutil.renderer", "slsutil.file_exists", "pytest.raises", "slsutil.merge", "slsutil.__context__", "slsutil.update", "slsutil.dir_exists", "slsutil.serialize", "commentchar.strip", "slsutil.banner", "exc.value", "patch.dict", "slsutil.path_exists", "salt.exceptions", "slsutil.__salt__", "line.startswith", "ret.splitlines", "slsutil._set_context"]}, "test_ssh_setup.py": {"libraries": ["sys", "os", "time", "subprocess", "pytestshellutils.utils.processes.ProcessResult", "tests.support.helpers.Keys", "pytestshellutils.utils.processes.terminate_process", "pytest", "logging", "signal", "tempfile", "saltfactories.utils.random_string"], "function_names": ["ssh_sub_container", "ssh_port", "ssh_container", "ssh_sub_port", "salt_ssh_cli", "ssh_container_name", "ssh_sub_container_name", "ssh_keys", "ssh_password", "test_setup", "salt_ssh_roster_file"], "function_calls": ["ProcessResult", "Keys", "str", "round", "random_string", "terminate_process"], "class_names": [], "class_method_calls": ["terminal_stderr.read", "proc._translate_newlines", "salt_master.config_dir", "log.debug", "pytest.fixture", "salt_factories.get_container", "salt_ssh_cli.cmdline", "container.started", "terminal_stdout.close", "ret.data", "sys.stdout", "ret.stdout", "logging.getLogger", "ssh_keys.priv_path", "pytest.helpers", "salt_ssh_cli.run", "tempfile.SpooledTemporaryFile", "pytest.mark", "ssh_container.get_host_port_binding", "time.sleep", "pytest.fail", "salt_master.salt_ssh_cli", "terminal_stdout.read", "proc.args", "terminal_stderr.close", "terminal_stdout.flush", "terminal_stderr.seek", "ret.returncode", "proc.poll", "subprocess.TimeoutExpired", "time.time", "proc.pid", "proc.wait", "salt_master.is_running", "ssh_sub_container.is_running", "pytest.importorskip", "terminal_stderr.flush", "ssh_sub_container.get_host_port_binding", "os.kill", "proc.returncode", "terminal_stdout.seek", "proc.communicate", "subprocess.Popen", "sys.stderr", "ssh_container.is_running", "signal.SIGINT"]}, "test_terraform.py": {"libraries": ["salt.roster.terraform", "pathlib", "pytest", "salt.utils.roster_matcher", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_correct_handler_called_new", "test_defaults_new_matching", "pki_dir", "test_correct_handler_called_old", "test_default_matching", "test_default_output", "roster_file_new", "test_defaults_new", "roster_file"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["roster_matcher.targets", "_new.assert_called_once", "terraform.targets", "terraform.__opts__", "_old.assert_called_once", "pytest.fixture", "pathlib.Path", "_new.assert_not_called", "_old.assert_not_called", "patch.dict", "patch.object"]}, "test_beacon.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.beacon", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["beacon.absent", "beacon.__opts__", "pytest.fixture", "ret.update", "patch.dict", "beacon.__salt__", "beacon.present"]}, "test_cron.py": {"libraries": ["tests.support.unit.TestCase", "salt.states.cron", "tests.support.mock.MagicMock", "io", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch", "salt.modules.cron"], "function_names": ["test_remove", "get_crontab", "test_present_unspecial_after_special", "test_present_special_after_unspecial", "test_existing_unmanaged_jobs_are_made_managed", "test_multiline_comments_are_updated", "set_crontab", "test_present", "test_present_special", "test_existing_duplicate_unmanaged_jobs_are_merged_and_given_id", "test_existing_noid_jobs_are_updated_with_identifier", "setup_loader_modules", "setUp", "write_crontab"], "function_calls": ["patch", "MagicMock", "super"], "class_names": ["CronTestCase"], "class_method_calls": ["cron.present", "patcher.stop", "a.strip", "cronmod.rm_job", "cronmod.set_special", "self.assertEqual", "self.set_crontab", "cronmod.set_job", "io.StringIO", "cron.absent", "self.assertMultiLineEqual", "self.write_crontab", "self.get_crontab", "patcher.start", "self._crontab", "cronmod.rm_special", "patch.dict", "self.addCleanup", "cron.__opts__", "cronmod.list_tab", "cron._check_cron"]}, "test_include.py": {"libraries": ["pytest", "logging"], "function_names": ["test_issue_65080", "test_issue_65080_multiple_includes", "test_issue_64111", "test_issue_65080_saltenv"], "function_calls": ["base_tf", "tf", "prod_tf"], "class_names": [], "class_method_calls": ["logging.getLogger", "salt_master.state_tree", "ret.returncode", "pytest.mark", "salt_call_cli.run", "ret.data"]}, "test_ini_manage.py": {"libraries": ["salt.modules.ini_manage", "os", "salt.utils.odict.OrderedDict", "salt.states.ini_manage", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "copy"], "function_names": ["configure_loader_modules", "test_options_present", "test_options_present_true_file", "test_options_absent", "sections", "test_sections_absent", "test_options_present_true_no_file", "test_sections_present"], "function_calls": ["str", "MagicMock", "OrderedDict"], "class_names": [], "class_method_calls": ["ini_manage.options_present", "mod_ini_manage.__opts__", "ini_manage.options_absent", "ini_manage.__salt__", "ini_manage.sections_absent", "mod_ini_manage.set_option", "copy.deepcopy", "pytest.fixture", "ret.update", "ini_manage.sections_present", "os.path", "patch.dict", "ini_manage.__opts__", "mod_ini_manage.get_ini"]}, "test_templates.py": {"libraries": ["os", "pytest"], "function_names": ["test_issue_62372", "test_issue_60083"], "function_calls": ["str", "len", "list"], "class_names": [], "class_method_calls": ["pytest.helpers", "os.path", "salt_call_cli.run", "ret.stdout", "ret.data"]}, "test_pillar_roots.py": {"libraries": ["saltfactories.utils.random_string", "pytest"], "function_names": ["test_cvr_2021_25282_subdir", "test_write", "test_cvr_2021_25282", "pillar_file_path", "test_write_subdir"], "function_calls": ["random_string"], "class_names": [], "class_method_calls": ["ret.find", "testfile.exists", "client.cmd", "pillar_file_path.is_file", "pillar_file_path.name", "pytest.fixture", "pytest.mark", "pillar_file_path.parent", "salt_master.pillar_tree", "testfile.unlink"]}, "test_salt_downgrade.py": {"libraries": ["psutil", "packaging.version", "pytest", "pytestskipmarkers.utils.platform"], "function_names": ["test_salt_downgrade"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["proc.name", "use_lib.stderr", "platform.is_windows", "install_salt.bin_dir", "psutil.process_iter", "salt_call_cli.run", "ret.stdout", "ret.data", "install_salt.install", "install_salt.classic", "install_salt.artifact_version", "install_salt.proc", "install_salt.install_dir", "new_pid.append", "install.returncode", "packaging.version", "pytest.skip", "install_salt.package_python_version", "proc.cmdline", "ret.returncode", "proc.pid", "old_pid.append", "platform.is_darwin", "install_salt.downgrade", "install_salt.prev_version"]}, "test_pkg_download.py": {"libraries": ["os", "pytestskipmarkers.utils.platform", "contextlib", "pathlib", "pytest", "logging", "packaging.version", "shutil"], "function_names": ["install_dir", "get_salt_release", "onedir_install_path", "setup_debian_family", "salt_test_command", "package_type", "setup_macos", "salt_release", "test_download", "get_repo_subpath_params", "get_salt_test_commands", "repo_subpath", "_setup_system", "root_url", "setup_windows", "gpg_key_name", "setup_redhat_family"], "function_calls": ["get_salt_release", "setup_debian_family", "str", "setup_macos", "len", "setup_windows", "get_repo_subpath_params", "get_salt_test_commands", "setup_redhat_family"], "class_names": [], "class_method_calls": ["request.param", "tmp_path_factory.mktemp", "log.debug", "platform.is_windows", "pytest.fixture", "arch.lower", "log.info", "package_type.lower", "log.warning", "salt_sources_path.write_text", "logging.getLogger", "pytest.helpers", "shell.run", "pytest.mark", "pytest.fail", "os.getenv", "packaging.version", "contextlib.contextmanager", "ret.returncode", "shutil.rmtree", "pathlib.Path", "arch.upper", "platform.is_darwin", "os.environ", "params.append", "current_release.major"]}, "test_check_imports.py": {"libraries": ["pytestskipmarkers.utils.platform", "subprocess", "saltfactories.utils.functional.MultiStateResult", "pytest", "logging"], "function_names": ["test_check_imports", "state_name"], "function_calls": ["str", "MultiStateResult"], "class_names": [], "class_method_calls": ["logging.getLogger", "platform.is_darwin", "salt_minion.id", "platform.is_windows", "pytest.fixture", "pytest.mark", "ret.returncode", "salt_master.state_tree", "salt_cli.run", "state_ret.result", "subprocess.run", "ret.data"]}, "test_clean_zmq_teardown.py": {"libraries": ["textwrap", "pathlib", "pytest", "logging", "shutil"], "function_names": ["_skip_on_non_relenv", "test_check_no_import_error"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["logging.getLogger", "pytest.skip", "log.debug", "textwrap.dedent", "pytest.fixture", "pytest.mark", "shutil.rmtree", "pathlib.Path", "breaks_tree.mkdir", "salt_master.config", "salt_call_cli.run", "output.stderr", "install_salt.relenv"]}, "test_enabled_disabled.py": {"libraries": ["pytest", "pytestskipmarkers.utils.platform"], "function_names": ["test_services"], "function_calls": [], "class_names": [], "class_method_calls": ["platform.is_darwin", "salt_minion.id", "pytest.mark", "salt_cli.run", "pytest.fail", "ret.stdout", "install_salt.distro_id"]}, "test_help.py": {"libraries": ["subprocess"], "function_names": ["test_help"], "function_calls": ["str", "len"], "class_names": [], "class_method_calls": ["install_salt.proc", "install_salt.binary_paths", "subprocess.PIPE", "ret.returncode", "ret.stdout"]}, "test_logrotate_config.py": {"libraries": ["packaging.version", "pathlib", "pytest"], "function_names": ["logrotate_config_file", "test_logrotate_config", "test_issue_65231_etc_logrotate_salt_dir_removed"], "function_calls": [], "class_names": [], "class_method_calls": ["pytest.skip", "path.exists", "logrotate_config_file.owner", "pytest.fixture", "pytest.mark", "logrotate_config_file.is_file", "path.is_dir", "pathlib.Path", "logrotate_config_file.group", "install_salt.prev_version", "packaging.version"]}, "test_multi_minion.py": {"libraries": ["os", "psutil", "subprocess", "pathlib", "pytest", "packaging.version"], "function_names": ["_skip_on_less_than_3006_1", "test_install_master", "mm_script", "test_install_prefix", "test_script_present", "test_install_start", "test_install", "test_install_log_level", "mm_conf"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["install_salt.ssm_bin", "conf_file.read_text", "pytest.skip", "p.info", "ret.stderr", "packaging.version", "pytest.fixture", "pytest.mark", "ret.returncode", "psutil.process_iter", "pathlib.Path", "subprocess.run", "os.getenv", "conf_file.exists", "mm_script.exists", "install_salt.version"]}, "test_pip_upgrade.py": {"libraries": ["subprocess", "pytest", "logging"], "function_names": ["test_pip_install"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "install_salt.binary_paths", "pytest.skip", "ret.stdout", "ret.returncode", "pytest.mark", "line.lower", "pytest.fail", "log.info", "subprocess.run", "salt_call_cli.run", "get_latest.data", "log.warning"]}, "test_python.py": {"libraries": ["textwrap", "subprocess", "pytest"], "function_names": ["test_python_script", "python_script_bin", "check_python_file", "test_python_script_exception"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["install_salt.classic", "install_salt.binary_paths", "install_salt.proc", "ret.stderr", "pytest.fixture", "ret.returncode", "pytest.mark", "textwrap.dedent", "script_path.write_text", "subprocess.PIPE", "install_salt.relenv"]}, "test_salt_api.py": {"libraries": ["pytest"], "function_names": ["test_salt_api"], "function_calls": [], "class_names": [], "class_method_calls": ["api_request.post", "pytest.mark"]}, "test_salt_exec.py": {"libraries": ["pytest", "sys.platform"], "function_names": ["cat_file", "test_salt_cmd_run", "test_salt_list_users"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["salt_minion.id", "platform.startswith", "fp.write_text", "pytest.fixture", "pytest.mark", "salt_cli.run", "ret.stdout"]}, "test_salt_grains.py": {"libraries": ["packaging.version", "pytest"], "function_names": ["test_grains_setval_key_val", "test_grains_package_onedir", "test_grains_items", "test_grains_item_os", "test_grains_item_pythonversion"], "function_calls": [], "class_names": [], "class_method_calls": ["salt_minion.id", "pytest.skip", "pytest.mark", "salt_cli.run", "packaging.version", "install_salt.version", "ret.data"]}, "test_salt_output.py": {"libraries": ["pytest"], "function_names": ["test_salt_output"], "function_calls": [], "class_names": [], "class_method_calls": ["salt_minion.id", "pytest.mark", "salt_cli.run", "ret.stdout", "ret.data"]}, "test_salt_pillar.py": {"libraries": ["subprocess", "pytest", "pytestskipmarkers.utils.platform"], "function_names": ["pillar_name", "test_salt_pillar"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["platform.is_darwin", "salt_minion.id", "platform.is_windows", "pytest.fixture", "ret.returncode", "pytest.mark", "salt_cli.run", "subprocess.run", "salt_master.pillar_tree", "ret.data"]}, "test_salt_state_file.py": {"libraries": ["pytestskipmarkers.utils.platform", "subprocess", "types", "saltfactories.utils.functional.MultiStateResult", "pytest"], "function_names": ["test_salt_state_file", "files", "state_name"], "function_calls": ["str", "MultiStateResult"], "class_names": [], "class_method_calls": ["platform.is_darwin", "salt_minion.id", "pytest.skip", "state_return.result", "files.fpath_1", "files.fpath_2", "types.SimpleNamespace", "pytest.fixture", "pytest.mark", "ret.returncode", "salt_master.state_tree", "salt_cli.run", "platform.is_windows", "subprocess.run", "files.fpath_3", "ret.stdout", "ret.data"]}, "test_salt_ufw.py": {"libraries": ["pathlib", "pytest"], "function_names": ["test_salt_ufw"], "function_calls": [], "class_names": [], "class_method_calls": ["ret.data", "pytest.skip", "ufw_master_path.exists", "pytest.mark", "ret.returncode", "pathlib.Path", "salt_master.is_running", "ufw_master_path.is_file", "salt_call_cli.run", "ret.stdout", "install_salt.distro_id"]}, "test_salt_user.py": {"libraries": ["sys", "os", "psutil", "saltfactories.utils.tempfiles.temp_directory", "subprocess", "pathlib", "pytest", "packaging.version"], "function_names": ["test_pkg_paths", "pkg_paths_salt_user", "test_salt_user_home", "test_salt_user_master", "test_salt_user_group", "pkg_paths", "_skip_on_non_relenv", "pkg_paths_salt_user_exclusions", "test_paths_log_rotation", "test_salt_user_shell"], "function_calls": ["str", "temp_directory"], "class_names": [], "class_method_calls": ["temp_dir_path_4.is_dir", "os.walk", "temp_dir_path_3.is_dir", "f.write", "pkg_path.exists", "pytest.fixture", "proc.stdout", "file_path.owner", "log_path.exists", "salt_master.stopped", "salt_call_cli.run", "install_salt.version", "install_salt.conf_dir", "salt_master.started", "log_path.stat", "pytest.mark", "temp_dir_path_0.is_dir", "path.joinpath", "log_path.open", "subprocess.run", "packaging.version", "file_path.group", "pkg_tests_account.username", "salt_user_subdirs.extend", "temp_dir_path_1.is_dir", "pytest.skip", "proc.username", "log_path.owner", "psutil.Process", "ret.returncode", "pathlib.Path", "path.owner", "salt_master.is_running", "salt_master.pid", "install_salt.relenv", "proc.returncode", "logr_conf_path.exists", "sys.version_info", "temp_dir_path_2.is_dir", "install_salt.distro_id", "path.group"]}, "test_ssm.py": {"libraries": ["os", "pytest"], "function_names": ["test_ssm_present"], "function_calls": [], "class_names": [], "class_method_calls": ["install_salt.ssm_bin", "os.path", "pytest.mark"]}, "test_systemd_config.py": {"libraries": ["subprocess", "pytest"], "function_names": ["test_system_config"], "function_calls": [], "class_names": [], "class_method_calls": ["subprocess.call", "pytest.mark"]}, "test_salt_upgrade.py": {"libraries": ["psutil", "packaging.version", "pytest", "pytestskipmarkers.utils.platform"], "function_names": ["test_salt_upgrade"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["proc.name", "use_lib.stderr", "platform.is_windows", "psutil.process_iter", "salt_call_cli.run", "ret.data", "install_salt.install", "install_salt.artifact_version", "new_pid.append", "install.returncode", "packaging.version", "pytest.skip", "install_salt.package_python_version", "proc.cmdline", "ret.returncode", "proc.pid", "old_pid.append", "install_salt.relenv", "install_salt.upgrade"]}, "test_minion_blackout.py": {"libraries": ["pytest", "logging"], "function_names": ["_check_skip", "test_blackout_nonwhitelist", "test_blackout_whitelist", "test_blackout"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "blackout.enter_blackout", "ret.returncode", "pytest.mark", "salt_cli.run", "salt_minion_1.id", "ret.stdout", "ret.data"]}, "test_with_versions.py": {"libraries": ["salt.utils.platform", "tests.support.runtests.RUNTIME_VARS", "pathlib", "pytest", "logging", "saltfactories.daemons.container.SaltMinion", "saltfactories.utils.random_string"], "function_names": ["artifacts_path", "compat_salt_version", "_get_test_versions_ids", "populated_state_tree", "minion_id", "test_highstate", "test_cp", "minion_image_name", "package_name", "cp_file_source", "test_ping", "salt_minion"], "function_calls": ["iter", "next", "str", "random_string", "isinstance"], "class_names": [], "class_method_calls": ["request.param", "salt_cp_cli.run", "pytest.fixture", "salt_master.config", "ret.data", "logging.getLogger", "cp_file_source.read_text", "pytest.helpers", "cp_file_dest.read_text", "factory.after_terminate", "pytest.mark", "factory.id", "salt_cli.run", "salt_master.salt_minion_daemon", "RUNTIME_VARS.BASE_FILES", "salt_minion.id", "ret.returncode", "pathlib.Path", "salt.utils", "pytest.importorskip", "source.read_text", "factory.started"]}, "test_salt_as_daemons.py": {"libraries": ["pytestshellutils.exceptions.FactoryNotStarted", "subprocess", "pytest", "time"], "function_names": ["test_salt_minion_as_daemon", "test_salt_master_as_daemon"], "function_calls": ["range"], "class_names": [], "class_method_calls": ["salt_minion_factory.cmdline", "pytest.skip", "pytest.mark", "subprocess.Popen", "salt_master_factory.cmdline", "time.sleep", "salt_master_factory.impl", "salt_minion_factory.started", "salt_minion_factory.impl", "subprocess.PIPE", "salt_master_factory.started"]}, "test_failover_master.py": {"libraries": ["os", "time", "pytest", "logging", "shutil"], "function_names": ["test_pki", "test_return_to_assigned_master", "test_failover_to_second_master", "test_minions_alive_with_no_master", "test_minion_reconnection"], "function_calls": ["run_salt_cmds", "len"], "class_names": [], "class_method_calls": ["events.missed", "log.debug", "caplog.text", "shutil.copyfile", "os.path", "factory.config", "salt_mm_failover_minion_1.stopped", "salt_mm_failover_master_1.id", "salt_mm_failover_minion_1.is_running", "logging.getLogger", "salt_mm_failover_master_2.id", "salt_mm_failover_master_1.config", "pytest.mark", "salt_mm_failover_master_1.stopped", "event.tag", "salt_mm_failover_master_2.stopped", "event_listener.wait_for_events", "events.matches", "salt_mm_failover_minion_2.stopped", "pytest.skip", "time.time", "salt_mm_failover_master_1.salt_minion_daemon", "caplog.at_level", "salt_mm_failover_minion_1.id", "salt_mm_failover_master_2.is_running", "salt_mm_failover_minion_2.id", "salt_mm_failover_minion_2.is_running", "salt_mm_failover_master_2.config", "salt_mm_failover_minion_1.config", "logging.DEBUG", "factory.started"]}, "test_inotify.py": {"libraries": ["os", "salt.utils.files", "salt.beacons.inotify", "pytest", "logging", "pyinotify"], "function_names": ["test_files_none_config", "configure_loader_modules", "test_dir_no_auto_add", "test__get_notifier", "test_dir_recurse_auto_add", "_close_inotify", "test_file_open", "test_dir_recurse", "test_dir_auto_add", "test_files_list_config", "test_multi_files_exclude", "test_empty_config", "test_non_list_config"], "function_calls": ["str", "len"], "class_names": [], "class_method_calls": ["logging.getLogger", "inotify.close", "pytest.fixture", "pytest.mark", "os.remove", "os.mkdir", "os.path", "salt.utils", "inotify.beacon", "inotify._get_notifier", "inotify.__context__", "inotify.validate"]}, "test_multimaster.py": {"libraries": ["pytestshellutils.exceptions.FactoryNotStarted", "pytest", "time", "logging"], "function_names": ["test_stopped_second_master", "test_basic_command_return", "test_stopped_first_master", "test_minion_reconnection_attempts"], "function_calls": ["run_salt_cmds", "ensure_connections", "len"], "class_names": [], "class_method_calls": ["salt_mm_master_2.id", "logging.getLogger", "salt_mm_minion_1.id", "start_events.missed", "salt_mm_master_2.stopped", "salt_mm_minion_1.start", "salt_mm_minion_1.is_running", "salt_mm_master_1.id", "salt_mm_master_1.stopped", "pytest.mark", "time.time", "salt_mm_minion_1.terminate", "pytest.raises", "salt_mm_minion_2.is_running", "start_events.matches", "event_listener.wait_for_events", "salt_mm_minion_1.started"]}, "test_offline_master.py": {"libraries": ["pytest", "time"], "function_names": ["wait_for_minion", "test_minion_hangs_on_master_failure_50814"], "function_calls": ["TimeoutError"], "class_names": [], "class_method_calls": ["salt_mm_master_2.id", "salt_mm_minion_1.id", "salt_mm_master_1.id", "salt_mm_master_1.stopped", "salt_mm_master_1.is_running", "mm_master_2_salt_cli.run", "pytest.mark", "ret.returncode", "time.sleep", "time.time", "salt_cli.run", "matched_events.found_all_events", "salt_mm_master_1.after_start", "event_listener.wait_for_events", "salt_mm_master_1.salt_cli", "ret.data"]}, "test_performance.py": {"libraries": ["sys", "os", "salt.version.SaltVersionsInfo", "tests.conftest.CODE_DIR", "pytest", "logging", "pytestshellutils.utils.ports", "saltfactories.daemons.container.SaltMaster", "saltfactories.daemons.container.SaltMinion", "saltfactories.utils.random_string", "shutil"], "function_names": ["_install_salt_in_container", "prev_version", "prev_salt_run_cli", "curr_master_id", "perf_state_name", "curr_version", "_gather_durations", "prev_master_id", "curr_minion_id", "prev_container_image", "prev_minion", "prev_salt_key_cli", "prev_salt_cli", "prev_master", "curr_master", "curr_minion", "test_performance", "prev_minion_id", "curr_salt_key_cli", "curr_sls", "curr_salt_cli", "prev_sls", "curr_container_image", "curr_salt_run_cli"], "function_calls": ["range", "str", "_gather_durations", "random_string", "isinstance"], "class_names": [], "class_method_calls": ["SaltVersionsInfo.current_release", "ports.get_unused_localhost_port", "log.debug", "sls_contents.format", "pytest.fixture", "conf_dir.mkdir", "salt_factories.salt_master_daemon", "location.parent", "curr_master.salt_cli", "curr_master.id", "shutil.copytree", "factory.python_executable", "os.path", "ret.stdout", "ret.data", "SaltVersionsInfo.previous_release", "logging.getLogger", "request.config", "pytest.helpers", "curr_master.salt_minion_daemon", "shell.run", "factory.before_start", "curr_master.salt_key_cli", "prev_minion.id", "prev_master.salt_cli", "pytest.mark", "factory.after_terminate", "curr_minion.id", "prev_master.salt_minion_daemon", "factory.id", "salt_factories.get_root_dir_for_daemon", "container.run", "prev_master.salt_key_cli", "prev_master.run", "curr_master.config", "pytest.skip", "prev_master.config", "ret.returncode", "curr_master.run", "prev_master.id", "curr_salt_cli.cmdline", "os.environ", "prev_master.salt_run_cli", "curr_master.salt_run_cli", "prev_salt_cli.cmdline", "sys.version_info", "factory.started"]}, "test_man.py": {"libraries": ["salt.modules.virtualenv_mod.KNOWN_BINARY_NAMES", "os", "salt.utils.platform", "pytest", "pprint"], "function_names": ["test_man_pages"], "function_calls": ["str", "set", "sorted", "list"], "class_names": [], "class_method_calls": ["pprint.pformat", "venv.venv_dir", "os.walk", "manpage.rsplit", "manpage_fns.remove", "pytest.mark", "venv.venv_python", "failed.setdefault", "salt.utils", "venv.run", "fp_.read"]}, "test_minion_swarm.py": {"libraries": ["random", "salt.utils.platform", "pytest"], "function_names": ["swarm_timeout", "test_ping", "test_ping_one"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["random.choice", "pytest.fixture", "ret.returncode", "pytest.mark", "minion.id", "salt_cli.run", "salt.utils", "ret.data"]}, "test_deferred_stream_handler.py": {"libraries": ["sys", "salt._logging.handlers.DeferredStreamHandler", "time", "multiprocessing", "subprocess", "tests.support.helpers.dedent", "tests.support.runtests.RUNTIME_VARS", "pytestshellutils.utils.processes.terminate_process", "tests.support.helpers.CaptureOutput", "pytest", "logging", "signal", "salt._logging.impl.set_lowest_log_level", "salt.utils.nb_popen.NonBlockingPopen"], "function_names": ["test_deferred_write_on_sigint", "test_deferred_write_on_atexit", "test_deferred_write_on_flush", "test_sync_with_handlers", "_deferred_write_on_flush_proc_target", "_sync_with_handlers_proc_target"], "function_calls": ["set_lowest_log_level", "terminate_process", "str", "NonBlockingPopen", "CaptureOutput", "dedent", "DeferredStreamHandler"], "class_names": [], "class_method_calls": ["RUNTIME_VARS.CODE_DIR", "proc.recv_err", "log.debug", "script_path.write_text", "handler.flush", "logging.Formatter", "log.info", "logging.getLogger", "logger.info", "logging.StreamHandler", "pytest.mark", "proc.recv", "time.sleep", "pytest.fail", "proc.exitcode", "sys.stderr", "proc.poll", "time.time", "multiprocessing.Process", "proc.pid", "stds.stderr", "sys.executable", "proc.start", "handler.sync_with_handlers", "signal.SIGINT", "proc.join", "logging.root", "proc.send_signal", "stds.stdout", "logging.DEBUG", "subprocess.PIPE", "handler.setFormatter"]}, "test_ldap.py": {"libraries": ["salt.utils.oset.OrderedSet", "salt.states.ldap", "pytest", "logging", "salt.utils.stringutils.to_bytes", "attr", "copy"], "function_names": ["dummy_add", "__enter__", "test_managed_empty", "test_managed_deletenonexistattrinnonexistentry", "test_managed_simplereplace", "test_managed_deletenonexistattr", "test_managed_replace_attr", "test_managed_repeated_values", "__exit__", "_test_helper_success_add", "test_managed_deletenonexistentry", "dummy_connect", "no_change_complex_db", "test_managed_deleteentry", "dummy_modify", "db", "configure_loader_modules", "complex_db", "_test_helper_success", "_test_helper_add", "_test_helper_nochange", "test_managed_deleteattr", "test_managed_add_attr", "test_managed_no_net_change", "dummy_delete", "dump_db", "test_managed_add_attr_delete_others", "test_managed_add_entry", "dummy_change", "__init__", "dummy_search", "_test_helper"], "function_calls": ["to_bytes", "LdapDB", "_test_helper_success", "list", "ValueError", "_test_helper_add", "_test_helper_success_add", "_test_helper_nochange", "_dummy_ctx", "_test_helper", "len", "OrderedSet"], "class_names": ["LdapDB", "_dummy_ctx"], "class_method_calls": ["to_delete.add", "db.dummy_connect", "db.dummy_search", "self.db", "new.setdefault", "old.get", "pytest.fixture", "init_db.db", "attr.ib", "expected_db.items", "db.dummy_change", "directives.append", "replace.items", "db.dummy_delete", "new.pop", "logging.getLogger", "db.dump_db", "expected_ret.setdefault", "dn_to_delete.add", "e.pop", "copy.deepcopy", "existing_vals.add", "new.get", "db.dummy_add", "db.dummy_modify", "attributes.items", "all_attrs.update", "db.db", "attr.Factory", "e.setdefault", "init_db.dump_db", "attrs.items", "expected_db.get", "vals.extend", "existing_vals.remove", "add_items.items", "expected_db.pop", "self.dummy_modify", "vals.sort", "attr.s", "salt.states", "expected_db.setdefault"]}, "test_pam.py": {"libraries": ["salt.modules.pam", "tests.support.mock.patch", "pytest", "tests.support.mock.mock_open"], "function_names": ["configure_loader_modules", "MOCK_FILE", "test_read_file"], "function_calls": ["patch", "mock_open"], "class_names": [], "class_method_calls": ["pam.read_file", "pytest.fixture"]}, "test_rest.py": {"libraries": ["salt.auth.rest", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_auth_nouser", "test_fetch_call_failed", "test_fetch_call_success_dict_none", "test_auth_ok", "test_acl_without_merge", "test_auth_nouserandpass", "test_acl_merge", "test_auth_nopass", "test_rest_auth_config", "test_fetch_call_success_dict_acl", "test_acl_no_merge", "test_acl_unauthorized"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["rest.fetch", "pytest.fixture", "rest._rest_auth_setup", "rest.acl", "rest.auth"]}, "test_adb.py": {"libraries": ["tests.support.mock.Mock", "salt.beacons.adb", "tests.support.mock.patch", "pytest"], "function_names": ["test_device_low_battery_equal", "test_invalid_states", "test_non_list_config", "test_device_state_change", "test_with_startup", "test_device_battery_charged", "test_with_user", "test_multiple_devices", "test_no_devices", "test_device_state", "test_empty_config", "test_with_adb_command", "configure_loader_modules", "test_no_adb_command", "test_no_devices_no_repeat", "test_device_repeat_multi", "test_device_low_battery", "test_weird_batteries", "test_device_missing", "test_device_no_repeat_capacity_increase", "test_device_no_repeat", "test_device_no_repeat_with_not_found_state", "test_multiple_batteries", "test_multiple_low_batteries", "test_device_battery_not_found", "test_no_devices_with_different_states"], "function_calls": ["patch", "Mock"], "class_names": [], "class_method_calls": ["adb.beacon", "pytest.fixture", "adb.__virtual__", "adb.__salt__", "mock.return_value", "patch.dict", "adb.validate", "mock.assert_called_once_with"]}, "test_avahi_announce.py": {"libraries": ["salt.beacons.avahi_announce", "pytest"], "function_names": ["configure_loader_modules", "test_empty_config", "test_non_list_config"], "function_calls": [], "class_names": [], "class_method_calls": ["avahi_announce.validate", "pytest.fixture"]}, "test_bonjour_announce.py": {"libraries": ["pytest", "salt.beacons.bonjour_announce"], "function_names": ["configure_loader_modules", "test_empty_config", "test_non_list_config"], "function_calls": [], "class_names": [], "class_method_calls": ["bonjour_announce.validate", "pytest.fixture"]}, "test_btmp.py": {"libraries": ["dateutil.parser", "salt.beacons.btmp", "tests.support.mock.mock_open", "datetime", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_match_time", "test_invalid_users", "test_no_match", "test_invalid_groups", "test_match_group", "test_default_invalid_time_range", "test_groups_invalid_time_range", "test_empty_config", "test_match", "test_non_list_config", "test_users_invalid_time_range"], "function_calls": ["MagicMock", "next", "iter", "patch", "mock_open"], "class_names": [], "class_method_calls": ["logging.getLogger", "datetime.datetime", "btmp.validate", "btmp.beacon", "btmp.BTMP", "pytest.fixture", "pytest.mark", "m_open.filehandles"]}, "test_cert_info.py": {"libraries": ["tests.support.mock.mock_open", "salt.beacons.cert_info", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["test_cert_information", "configure_loader_modules", "test_empty_config", "test_non_list_config"], "function_calls": ["patch", "mock_open"], "class_names": [], "class_method_calls": ["logging.getLogger", "cert_info.beacon", "pytest.fixture", "cert_info.validate"]}, "test_diskusage.py": {"libraries": ["salt.beacons.diskusage", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.Mock", "tests.support.mock.patch", "collections.namedtuple"], "function_names": ["test_diskusage_windows_lowercase", "configure_loader_modules", "test_diskusage_match", "test_diskusage_match_regex", "test_diskusage_nomatch", "stub_disk_partition", "test_diskusage_windows_match_regex", "windows_stub_disk_partition", "test_diskusage_match_no_percent", "test_diskusage_windows_double_slash", "stub_disk_usage", "test_diskusage_windows_single_slash", "test_empty_config", "test_non_list_config", "windows_stub_disk_usage"], "function_calls": ["patch", "MagicMock", "namedtuple", "Mock"], "class_names": [], "class_method_calls": ["diskusage.validate", "diskusage.beacon", "pytest.fixture"]}, "test_glxinfo.py": {"libraries": ["salt.beacons.glxinfo", "tests.support.mock.Mock", "tests.support.mock.patch", "pytest"], "function_names": ["configure_loader_modules", "test_screen_state_change", "test_screen_state_no_repeat", "test_screen_state", "test_no_user", "test_no_glxinfo_command", "test_screen_state_missing", "test_non_list_config", "test_with_glxinfo_command"], "function_calls": ["patch", "Mock"], "class_names": [], "class_method_calls": ["glxinfo.__virtual__", "pytest.fixture", "glxinfo.beacon", "mock.return_value", "patch.dict", "glxinfo.validate", "glxinfo.__salt__", "mock.assert_called_once_with"]}, "test_haproxy.py": {"libraries": ["salt.beacons.haproxy", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_threshold_reached", "test_threshold_not_reached", "test_no_servers", "test_empty_config", "test_non_list_config"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["haproxy.beacon", "haproxy.validate", "haproxy.__salt__", "pytest.fixture", "patch.dict"]}, "test_journald.py": {"libraries": ["salt.beacons.journald", "uuid.UUID", "datetime", "pytest", "logging", "salt.utils.data", "tests.support.mock.Mock"], "function_names": ["get_next", "configure_loader_modules", "get_previous", "test_journald_match", "test_empty_config", "seek_tail", "test_non_list_config"], "function_calls": ["UUID", "SystemdJournaldMock"], "class_names": ["SystemdJournaldMock"], "class_method_calls": ["logging.getLogger", "datetime.datetime", "journald.validate", "datetime.timedelta", "pytest.fixture", "self.returned_once", "salt.utils", "journald.beacon"]}, "test_load.py": {"libraries": ["salt.beacons.load", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_empty_config", "test_non_list_config", "test_load_match"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["load.beacon", "load.validate", "pytest.fixture", "pytest.mark"]}, "test_log_beacon.py": {"libraries": ["tests.support.mock.mock_open", "tests.support.mock.patch", "pytest", "salt.beacons.log_beacon"], "function_names": ["configure_loader_modules", "stub_log_entry", "test_empty_config", "test_non_list_config", "test_log_match"], "function_calls": ["patch", "mock_open"], "class_names": [], "class_method_calls": ["log_beacon.beacon", "stub_log_entry.rstrip", "log_beacon.validate", "pytest.fixture"]}, "test_memusage.py": {"libraries": ["salt.beacons.memusage", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "collections.namedtuple"], "function_names": ["configure_loader_modules", "stub_memory_usage", "test_memusage_nomatch", "test_empty_config", "test_non_list_config", "test_memusage_match"], "function_calls": ["patch", "MagicMock", "namedtuple"], "class_names": [], "class_method_calls": ["memusage.beacon", "pytest.fixture", "memusage.validate"]}, "test_network_info.py": {"libraries": ["salt.beacons.network_info", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "collections.namedtuple"], "function_names": ["configure_loader_modules", "test_network_info_greater_than", "test_network_info_equal", "stub_net_io_counters", "test_empty_config", "test_non_list_config"], "function_calls": ["patch", "MagicMock", "namedtuple"], "class_names": [], "class_method_calls": ["network_info.beacon", "pytest.fixture", "network_info.validate"]}, "test_network_settings.py": {"libraries": ["pyroute2.NDB", "salt.beacons.network_settings", "pyroute2.ndb.compat.ipdb_interfaces_view", "pyroute2.IPDB", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_interface", "test_wildcard_interface", "test_non_list_config", "test_interface_dict_fields_old", "by_name", "__init__", "test_empty_config", "test_interface_no_change", "test_interface_dict_fields_new"], "function_calls": ["MagicMock", "ipdb_interfaces_view", "patch", "NDB", "IPDB"], "class_names": ["MockIPClass"], "class_method_calls": ["self.kwargs", "logging.getLogger", "network_settings.beacon", "network_settings.ATTRS", "ipdb.interfaces", "self.args", "network_settings._copy_interfaces_info", "pytest.fixture", "pytest.mark", "network_settings.validate", "patch.object"]}, "test_ps.py": {"libraries": ["time", "psutil", "utmp", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "salt.exceptions.SaltInvocationError", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.utils.data", "tests.support.mock.Mock", "collections.namedtuple", "tests.support.mock.call", "salt.modules.ps"], "function_names": ["__enter__", "raise_exception", "cpu_times", "test_status_when_no_filter_is_provided_then_raise_invocation_error", "test_swap_memory", "test__get_proc_status", "create_time", "test_lsof", "username", "stub_user", "test_pkill", "cmdline", "test_virtual_memory", "test_psaux", "test__status_when_some_matching_processes_then_only_correct_info_should_be_returned", "test_network_io_counters", "test__virtual__no_psutil", "test_netstat", "test__status_when_process_is_found_with_matching_status_then_proc_info_should_be_returned", "pid", "test__status_when_no_matching_processes_then_no_results_should_be_returned", "test_disk_partitions", "__exit__", "status", "test_boot_time", "test_total_physical_memory", "test_proc_info_access_denied", "test__get_proc_name", "test_status_when_access_denied_from_psutil_it_should_CommandExecutionError", "_get_proc_name", "configure_loader_modules", "sample_process", "test_cpu_percent", "name", "test_num_cpus", "test__get_proc_create_time", "test_top", "test_get_users", "test_proc_info_attribute_error", "test_kill_pid", "mocked_proc", "test_get_pid_list", "test__get_proc_username", "test_status_when_access_denied_from_psutil_then_raise_exception", "test_disk_io_counters", "test_ss", "test_cpu_times", "_get_proc_pid", "test_pgrep", "test_disk_usage", "test_top_zombie_process", "stub_memory_usage", "test_proc_info_no_such_process", "test_proc_info", "__init__", "test__get_proc_cmdline", "test_disk_partition_usage", "test_status_when_no_status_is_provided_then_raise_invocation_error", "test_pgrep_regex"], "function_calls": ["_get_proc_name", "MagicMock", "Mock", "patch", "DummyProcess", "scputimes", "call", "AttributeError", "namedtuple", "len", "smem_info", "float"], "class_names": ["DummyProcess"], "class_method_calls": ["self._create_time", "send_signal_mock.call_args", "self._name", "mock_boot_time.side_effect", "mock_total_physical_memory.return_value", "ps._get_proc_name", "ps.netstat", "ps.disk_usage", "ps._get_proc_create_time", "pytest.raises", "ps.cpu_percent", "ps.kill_pid", "ps.swap_memory", "self._pid", "mock_name.side_effect", "psutil.AccessDenied", "mock_create_time.side_effect", "ps.__virtual__", "pytest.mark", "ps._get_proc_cmdline", "mock__psutil_windows.proc_username", "ps.boot_time", "time.time", "proc.pid", "ps.disk_partitions", "status.decode", "mock_username.side_effect", "top_proc._cpu_times", "salt.modules", "ps.pkill", "ps._get_proc_status", "self._status", "self._username", "ps.total_physical_memory", "ps.cpu_times", "mock_cpu_count.return_value", "ps.num_cpus", "patch.object", "ps.ss", "psutil.NoSuchProcess", "ps.network_io_counters", "psutil.Process", "self._cpu_times", "ps._get_proc_username", "ps.disk_io_counters", "mock_cmdline.side_effect", "ps.lsof", "salt.exceptions", "ps.psaux", "ps.virtual_memory", "ps.__salt__", "mock_memory_info.side_effect", "proc.name", "self._cmdline", "mocked_proc.username", "pytest.fixture", "mocked_proc.pid", "ps.get_pid_list", "psutil.ZombieProcess", "stub_memory_usage.total", "mock_status.side_effect", "psutil.pids", "ps.top", "mock_cpu_times.side_effect", "proc.as_dict", "ps.pgrep", "mock_total_physical_memory.side_effect", "salt.utils", "ps.disk_partition_usage", "patch.dict", "proc.info", "mocked_proc.send_signal", "mock_cpu_count.side_effect", "important_data.update", "mocked_proc.cmdline", "mock_process.side_effect", "mocked_proc.name", "ps.get_users"]}, "test_salt_monitor.py": {"libraries": ["salt.beacons.salt_monitor", "pytest"], "function_names": ["configure_loader_modules", "test_beacon", "mock_test_version", "test_validate", "mock_test_ping", "mock_test_false", "mock_test"], "function_calls": ["enumerate"], "class_names": [], "class_method_calls": ["salt_monitor.beacon", "salt_monitor.validate", "pytest.fixture"]}, "test_sensehat.py": {"libraries": ["salt.beacons.sensehat", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_sensehat_pressure_match", "test_sensehat_temperature_match_range", "test_sensehat_no_match", "test_empty_config", "test_sensehat_temperature_match", "test_sensehat_humidity_match", "test_non_list_config"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["sensehat.beacon", "sensehat.validate", "pytest.fixture"]}, "test_smartos_imgadm.py": {"libraries": ["salt.modules.smartos_imgadm._parse_image_meta", "salt.modules.smartos_imgadm", "pytest"], "function_names": ["configure_loader_modules", "test_parse_image_meta_orphan", "test_parse_image_meta_native", "image_native", "image_zvol", "image_orphan", "test_parse_image_meta_zvol", "test_parse_image_meta_lx", "image_lx", "image_docker", "test_parse_image_meta_docker"], "function_calls": ["_parse_image_meta"], "class_names": [], "class_method_calls": ["pytest.fixture"]}, "test_smartos_vmadm.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.beacons.smartos_vmadm"], "function_names": ["configure_loader_modules", "mock_vm_none", "mock_vm_two_started", "test_complex", "test_created_nostartup", "test_created_startup", "test_created", "mock_vm_one", "mock_clean_state", "test_non_list_config", "test_deleted", "mock_vm_two_stopped"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["vmadm.VMADM_STATE", "vmadm.beacon", "pytest.fixture", "vmadm.validate", "patch.dict", "vmadm.__salt__"]}, "test_swapusage.py": {"libraries": ["tests.support.mock.MagicMock", "pytest", "salt.beacons.swapusage", "tests.support.mock.patch", "collections.namedtuple"], "function_names": ["configure_loader_modules", "test_swapusage_nomatch", "stub_swap_usage", "test_empty_config", "test_swapusage_match", "test_non_list_config"], "function_calls": ["patch", "MagicMock", "namedtuple"], "class_names": [], "class_method_calls": ["swapusage.beacon", "swapusage.validate", "pytest.fixture"]}, "test_telegram_bot_msg.py": {"libraries": ["time", "salt.beacons.telegram_bot_msg", "datetime", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_validate_empty_config", "test_validate_missing_token_config", "test_validate_config_not_list_in_accept_from", "test_validate_valid_config", "test_call_telegram_returning_updates", "test_call_telegram_return_no_updates_for_user", "test_validate_missing_accept_from_config", "test_call_no_updates"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["telegram.User", "logging.getLogger", "telegram.Update", "datetime.datetime", "telegram_api.Bot", "telegram.Message", "message.to_dict", "log.debug", "telegram_bot_msg.beacon", "pytest.fixture", "telegram.Chat", "inst.get_updates", "time.mktime", "telegram_bot_msg.validate", "pytest.importorskip"]}, "test_twilio_txt_msg.py": {"libraries": ["salt.beacons.twilio_txt_msg", "twilio", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_validate_empty_config", "test_validate_dictionary_config", "test_validate_missing_config_item", "list", "delete", "__init__", "test_receive_message", "create"], "function_calls": ["MockMessages", "MagicMock", "super", "MockTwilioRestClient", "tuple", "int", "MockTwilioRestException", "MockSMS"], "class_names": ["MockTwilioRestClient", "MockSMS", "MockMessages", "MockTwilioRestException"], "class_method_calls": ["self.sid", "self.num_segments", "twilio.__version_info__", "self.date_created", "pytest.fixture", "self.flag", "twilio_txt_msg.beacon", "msg.from_", "self.messages", "msg.body", "patch.object", "logging.getLogger", "self.sms", "self.code", "self.msg", "self.to", "pytest.mark", "msg.to", "self.num_media", "self.price_unit", "twilio_txt_msg.validate", "self.date_sent", "self.body", "self.status", "self.price", "self.from_"]}, "test_watchdog.py": {"libraries": ["os", "time", "salt.beacons.watchdog", "salt.utils.files", "salt.utils.platform", "pytest"], "function_names": ["configure_loader_modules", "test_file_create", "_close_watchdog", "check_events", "test_file_create_in_directory", "test_file_deleted", "test_file_moved", "test_trigger_all_possible_events", "test_empty_config", "create", "test_file_modified", "assertValid"], "function_calls": ["range", "check_events", "str", "int", "len", "create", "assertValid"], "class_names": [], "class_method_calls": ["watchdog.validate", "events.pop", "f.write", "watchdog.close", "os.fsync", "pytest.fixture", "pytest.mark", "os.remove", "time.sleep", "salt.utils", "watchdog.HAS_WATCHDOG", "watchdog.beacon", "os.rename"]}, "test_wtmp.py": {"libraries": ["salt.beacons.wtmp", "dateutil.parser", "tests.support.mock.mock_open", "datetime", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_match_time", "test_invalid_users", "test_no_match", "test_invalid_groups", "test_match_group", "test_default_invalid_time_range", "test_groups_invalid_time_range", "test_empty_config", "test_match", "test_non_list_config", "test_users_invalid_time_range"], "function_calls": ["MagicMock", "next", "iter", "patch", "mock_open"], "class_names": [], "class_method_calls": ["logging.getLogger", "wtmp.WTMP", "wtmp.validate", "datetime.datetime", "log.debug", "wtmp.beacon", "pytest.fixture", "pytest.mark", "m_open.filehandles"]}, "test_mysql_cache.py": {"libraries": ["salt.exceptions.SaltCacheError", "tests.support.mock.MagicMock", "salt.cache.mysql_cache", "pytest", "logging", "tests.support.mock.patch", "tests.support.mock.call"], "function_names": ["configure_loader_modules", "test_flush", "test_init_client", "test_create_table", "test_fetch", "test_run_query", "test_store"], "function_calls": ["patch", "call", "MagicMock", "str"], "class_names": [], "class_method_calls": ["mysql_cache._create_table", "mock_connect.return_value", "mysql_cache.__context__", "mysql_cache._init_client", "pytest.fixture", "mysql_cache.MySQLdb", "patch.object", "logging.getLogger", "exc_info.value", "mysql_cache.flush", "mock_run_query.assert_has_calls", "pytest.mark", "pytest.raises", "pytest.fail", "mysql_cache.store", "mock_run_query.return_value", "call.cursor", "patch.dict", "cursor.fetchone", "mysql_cache.fetch", "mysql_cache.run_query", "mock_connection.cursor", "mysql_cache.__opts__", "mock_connect.assert_has_calls"]}, "test_daemons.py": {"libraries": ["multiprocessing", "salt.cli.daemons", "tests.support.mock.MagicMock", "logging", "tests.support.mock.patch"], "function_names": ["_proxy_exec_test", "_minion_exec_test", "reset", "has_message", "_master_exec_test", "_create_master", "test_master_prepare_cluster", "test_minion_daemon_hash_type_verified", "info", "test_proxy_minion_daemon_hash_type_verified", "_syndic_exec_test", "_create_proxy_minion", "test_master_skip_prepare", "warning", "_multiproc_exec_test", "__init__", "_create_syndic", "test_master_daemon_hash_type_verified", "test_master_prepare", "_create_minion", "test_syndic_daemon_hash_type_verified"], "function_calls": ["MagicMock", "_create_proxy_minion", "setattr", "patch", "LoggerMock", "_create_master", "_multiproc_exec_test", "str", "_create_syndic", "_create_minion"], "class_names": ["LoggerMock"], "class_method_calls": ["log.exception", "cache_dir.exists", "sock_dir.exists", "cluster_dir.exists", "obj.minion", "self.messages", "_logger.has_message", "logging.getLogger", "_logger.messages", "pki_dir.exists", "sqlite_dir.exists", "m_parent.recv", "master.config", "multiprocessing.Pipe", "salt.cli", "self.reset", "child_pipe.close", "obj.config", "syndic_dir.exists", "master.verify_environment", "multiprocessing.Process", "log_str.find", "p_.join", "p_.start", "child_pipe.send", "_logger.reset", "token_dir.exists"]}, "test_password.py": {"libraries": ["salt.client.ssh", "salt.utils.files", "salt.utils.thin", "salt.utils.yaml", "salt.config", "tests.support.mock.MagicMock", "pytest", "salt.roster", "salt.client.ssh.client", "tests.support.mock.patch", "salt.utils.path"], "function_names": ["test_password_failure"], "function_calls": ["str", "MagicMock", "next", "patch"], "class_names": [], "class_method_calls": ["ssh.SSH", "pytest.mark", "pytest.raises", "client.run", "client.run_iter", "salt.utils", "temp_salt_master.config", "display_output.assert_called_once_with"]}, "test_return_events.py": {"libraries": ["salt.client.ssh", "salt.utils.files", "salt.utils.thin", "salt.utils.yaml", "salt.config", "tests.support.mock.MagicMock", "pytest", "salt.roster", "salt.client.ssh.client", "tests.support.mock.patch", "salt.utils.path"], "function_names": ["test_not_missing_fun_calling_wfuncs"], "function_calls": ["MagicMock", "next", "patch", "str", "len"], "class_names": [], "class_method_calls": ["ssh.SSH", "client.event", "pytest.mark", "client.run", "client.run_iter", "salt.utils", "temp_salt_master.config", "display_output.assert_called_once_with"]}, "test_roster_defaults.py": {"libraries": ["salt.utils.files", "salt.utils.thin", "salt.utils.yaml", "salt.config", "tests.support.mock.MagicMock", "pytest", "salt.roster", "salt.client.ssh.client", "tests.support.mock.patch", "salt.utils.path"], "function_names": ["roster", "test_roster_defaults_flat"], "function_calls": ["patch", "MagicMock", "str"], "class_names": [], "class_method_calls": ["fp_.write", "roster.targets", "pytest.fixture", "root_dir.mkdir", "salt.config", "salt.utils", "salt.roster"]}, "test_single.py": {"libraries": ["importlib", "salt.client.ssh", "salt.client.ssh.shell", "textwrap.dedent", "tests.support.mock.call", "salt.utils.files", "salt.utils.platform", "salt.utils.thin", "salt.utils.yaml", "salt.config", "re", "pytest", "logging", "salt.roster", "tests.support.mock.MagicMock", "salt.client.ssh.client", "tests.support.mock.patch", "salt.utils.path"], "function_names": ["test_ssh_single__cmd_str_sudo_passwd_user", "test_run_ssh_pre_flight_shutil_fails", "test_run_ssh_pre_flight_no_connect", "test_run_ssh_pre_flight", "test_ssh_single__cmd_str", "test_run_with_pre_flight", "test_ssh_single__cmd_str_sudo", "test_run_ssh_pre_flight_permission_denied", "test_run_with_pre_flight_thin_dir_exists", "test_cmd_run_not_set_path", "mock_bin_paths", "_check_skip", "test_run_with_pre_flight_args", "test_run_with_pre_flight_with_args", "target", "test_run_with_pre_flight_script_doesnot_exist", "test_cmd_block_python_version_error", "opts", "test_ssh_single__cmd_str_sudo_passwd", "test_execute_script", "test_shim_cmd_copy_fails", "test_run_with_pre_flight_stderr", "test_cmd_run_set_path", "test_single_opts", "test_shim_cmd", "test_run_ssh_pre_flight_connect", "test_ssh_single__cmd_str_sudo_user"], "function_calls": ["MagicMock", "IOError", "patch", "str", "call", "dedent"], "class_names": [], "class_method_calls": ["mock_which.side_effect", "mock_flight.assert_called", "pytest.fixture", "caplog.text", "send_mock.assert_not_called", "mock_cmd.assert_called", "re.search", "logging.getLogger", "single.cmd_block", "mock_flight.assert_not_called", "pytest.mark", "send_mock.call_args_list", "pre_flight_script.write_text", "mock_cmd.call_count", "single.shell", "single._cmd_str", "caplog.handler", "mock_exec_cmd.assert_not_called", "mock_exec_cmd.assert_called", "single.run", "mock_tmp.return_value", "single.execute_script", "salt.utils", "mock_cmd.assert_not_called", "caplog.at_level", "ssh.Single", "pre_flight.write_text", "importlib.reload", "single.shim_cmd", "logging.TRACE", "mock_cmd.call_args_list", "mock_exec_cmd.mock_calls", "tmp_file.name", "single.run_ssh_pre_flight"]}, "test_ssh_classes.py": {"libraries": ["saltfactories.utils.tempfiles.temp_directory", "salt.exceptions.SaltClientError", "salt.client.ssh.__init__", "tests.support.mock.MagicMock", "pytest", "logging", "salt.exceptions.SaltSystemExit", "tests.support.mock.patch"], "function_names": ["test_salt_refs", "test_convert_args", "test_ssh_class"], "function_calls": ["MagicMock", "patch", "OSError", "str", "temp_directory"], "class_names": [], "class_method_calls": ["logging.getLogger", "err.value", "dunder_ssh._convert_args", "pytest.mark", "pytest.raises", "dunder_ssh.salt_refs", "dunder_ssh.SSH", "temp_dir.is_dir"]}, "test_parse_ret.py": {"libraries": ["salt.client.ssh.wrapper", "pytest"], "function_names": ["test_parse_ret_permission_denied_because_of_permissions", "test_parse_ret_permission_denied_scp"], "function_calls": [], "class_names": [], "class_method_calls": ["wrap.SSHPermissionDeniedError", "pytest.raises", "exc.value", "wrap.parse_ret", "pytest.fail", "wrap.SSHCommandExecutionError"]}, "test_init.py": {"libraries": ["salt.client", "salt.exceptions.SaltInvocationError", "pytest"], "function_names": ["test_prep_pub_kwargs", "test_prep_pub", "test_prep_pub_compound", "test_resolve_nodegroup", "test_get_local_client", "test_local_client_get_timeout", "test_prep_pub_nodegroup", "test_prep_pub_ext_job_cache_existing", "local_client", "test_resolve_nodegroup_error", "test_get_local_client_mopts", "test_prep_pub_order_masters", "test_prep_pub_compound_nodegroup", "test_prep_pub_ext_job_cache"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["local_client._resolve_nodegroup", "local_client._get_timeout", "local_client._prep_pub", "salt.client", "pytest.fixture", "pytest.mark", "local_client.opts", "pytest.raises", "local_client.salt_user"]}, "test_netapi.py": {"libraries": ["salt.client.netapi", "tests.support.mock.Mock", "tests.support.mock.patch", "logging"], "function_names": ["test_run_netapi_can_take_process_kwargs", "test_run_log"], "function_calls": ["Mock"], "class_names": [], "class_method_calls": ["logging.INFO", "mock_process.add_process", "caplog.at_level", "salt.client", "caplog.text", "netapi.run", "salt.utils", "patch.object"]}, "test_hetzner.py": {"libraries": ["salt.exceptions.SaltCloudSystemExit", "salt.cloud.clouds.hetzner", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.exceptions.SaltCloudException"], "function_names": ["test_avail_locations", "test_stop", "test_create_location", "test_reboot", "locations", "test_show_instance", "test_list_ssh_keys", "test_create_volumes", "test_destroy", "test_object_to_dict", "sizes", "test_list_nodes", "test_avail_images_action", "configure_loader_modules", "test_wait_until", "test_start", "test_resize", "test_connect_client", "test_list_nodes_full", "ssh_keys", "images", "test_create", "test_dependencies", "test_virtual", "test_create_networks", "test_create_datacenter", "vm", "test_avail_sizes", "__init__", "test_ssh_keys", "test_config_loading"], "function_calls": ["MagicMock", "IndexError", "super", "setattr", "patch", "list", "ModelMock", "set", "map"], "class_names": ["ModelMock"], "class_method_calls": ["connect.return_value", "hetzner.start", "config_values.issubset", "mock.attr1", "cloud_config.call_args_list", "args.kwargs", "hetzner.__virtualname__", "pytest.fixture", "hetzner.wait_until", "sizes.values", "server.power_on", "hetzner.__virtual__", "mock.name", "server.power_off", "hetzner._connect_client", "mock.attr2", "hetzner.stop", "self.model", "hetzner.hcloud", "hetzner._object_to_dict", "pytest.mark", "pytest.raises", "hetzner.list_nodes_full", "hetzner.avail_locations", "show_instance.side_effect", "server.delete", "ssh_keys.values", "hetzner.destroy", "hetzner.reboot", "hetzner.get_dependencies", "config.return_value", "wait.assert_called_once_with", "dependency.return_value", "server.change_type", "hetzner.list_nodes", "hetzner.create", "self.items", "mock.private_net", "mock.id", "hetzner.show_instance", "private_net_mock.ip", "hetzner.avail_images", "locations.values", "mock.public_net", "hetzner.avail_sizes", "images.values", "hetzner.list_ssh_keys", "show_instance.return_value", "wait.reset_mock", "hetzner.HAS_HCLOUD", "wait.return_value", "wait.assert_not_called", "server.reboot", "mock.labels", "hetzner.resize"]}, "test_joyent.py": {"libraries": ["salt.cloud.clouds.joyent", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_query_instance_init", "vm_", "test_query_instance_ready", "_fake_wait_for_ip", "test_query_instance_has_ip"], "function_calls": ["patch", "isinstance", "check_for_ip_fn", "MagicMock"], "class_names": [], "class_method_calls": ["joyent.__utils__", "joyent.HAS_REQUIRED_CRYPTO", "pytest.fixture", "pytest.mark", "joyent.query_instance", "patch.object"]}, "test_opennebula.py": {"libraries": ["lxml.etree", "salt.exceptions.SaltCloudSystemExit", "tests.support.mock.MagicMock", "salt.exceptions.SaltCloudNotFound", "salt.cloud.clouds.opennebula", "pytest", "tests.support.mock.patch"], "function_names": ["test_vm_disk_snapshot_revert_no_snapshot_id", "test_vn_free_ar_no_vn_id_or_vn_name", "test_get_template_id_success", "test_secgroup_info_no_secgroup_id_or_name", "test_vn_add_ar_no_vn_id_or_vn_name", "test_image_clone_no_name", "test_vm_disk_snapshot_revert_no_disk_id", "test_vm_monitoring_action_error", "test_vm_attach_nic_no_data_or_path", "test_vm_attach_no_data_or_path", "test_vn_info_function_error", "test_vn_add_ar_no_path_or_data", "test_template_clone_no_name", "test_vn_delete_function_error", "test_get_vn_id_success", "test_vm_attach_nic_action_error", "test_secgroup_delete_function_error", "test_image_snapshot_flatten_function_error", "test_secgroup_allocate_no_data_or_path", "test_list_vns_action", "test_image_update_function_error", "test_image_allocate_no_path_or_data", "test_vm_disk_save_no_image_name", "test_vm_disk_snapshot_delete_no_snapshot_id", "test_vm_snapshot_create_no_snapshot_name", "test_avail_sizes_action", "test_vm_allocate_function_error", "test_list_nodes_action", "test_template_instantiate_no_vm_name", "test_get_template_id_not_found", "test_template_delete_function_error", "test__get_xml", "test_list_templates_action", "test_vn_hold_no_vn_id_or_vn_name", "test_template_instantiate_no_template_id_or_template_name", "test_get_location_not_found", "test_vm_snapshot_revert_no_snapshot_id", "test_vm_update_no_data_or_path", "test_start_error", "test_image_update_no_data_or_path", "test_destroy_function_error", "test_reboot_error", "test_get_secgroup_id_no_name", "test_template_update_bad_update_type_value", "test_vm_detach_no_disk_id", "test_get_secgroup_id_action", "test_get_vn_id_not_found", "test_vn_allocate_no_data_or_path", "test_get_host_id_action", "test_vn_hold_function_error", "test_vm_attach_action_error", "test_secgroup_update_no_data_or_path", "test_secgroup_clone_function_error", "test_image_snapshot_flatten_no_snapshot_id", "test_vm_resize_action_error", "test_get_image_id_no_name", "test_template_allocate_function_error", "test_image_snapshot_flatten_no_image_name_or_image_id", "test_image_delete_function_error", "test_template_clone_no_template_name_or_template_id", "test_secgroup_update_bad_update_type_value", "test_avail_images_action", "test_image_snapshot_revert_no_snapshot_id", "configure_loader_modules", "test_vm_resize_no_data_or_path", "test_show_instance_success", "test_get_image_success", "test_image_snapshot_revert_no_image_name_or_image_id", "test_vm_disk_snapshot_delete_action_error", "test_vm_detach_action_error", "test_vm_snapshot_create_action_error", "test_get_host_id_not_found", "test_get_cluster_id_success", "test_get_vm_id_action", "test_get_datastore_id_not_found", "test_vn_add_ar_function_error", "test_get_template_id_action", "test_get_cluster_id_not_found", "test_vn_reserve_no_data_or_path", "test_vn_free_ar_no_ar_id", "test_list_nodes_select_action", "test_get_datastore_id_action", "test_template_update_no_template_id_or_template_name", "test_image_allocate_function_error", "test_image_update_bad_update_type_value", "test_get_image_id_action", "test_secgroup_allocate_function_error", "test_image_info_no_image_id_or_image_name", "test_template_instantiate_function_error", "test_vm_disk_snapshot_create_action_error", "test_vm_disk_snapshot_create_no_disk_id", "test_vn_release_no_vn_id_or_vn_name", "test_image_snapshot_delete_function_error", "test_vn_release_no_data_or_path", "test_vm_disk_snapshot_delete_no_disk_id", "test_image_snapshot_delete_no_image_name_or_image_id", "test_vm_update_bad_update_type_value", "test_vm_info_action_error", "test_template_update_function_error", "test_vn_delete_no_vn_id_or_name", "test_get_datastore_id_no_name", "test_get_cluster_id_action", "test_get_secgroup_id_success", "test_image_snapshot_delete_no_snapshot_id", "test_get_vm_id_no_name", "test_get_host_id_success", "test_get_cluster_id_no_name", "test_vm_disk_save_no_disk_id", "test_get_vn_id_no_name", "test_image_clone_success", "test_vm_allocate_no_data_or_path", "test_secgroup_delete_no_secgroup_id_or_name", "test_list_hosts_action", "test_vm_snapshot_revert_action_error", "test_get_image_id_success", "test_image_allocate_no_name_or_datastore_id", "test_secgroup_clone_no_secgroup_id_or_secgroup_name", "test_image_delete_no_name_or_image_id", "test_vm_migrate_action_error", "test_get_secgroup_id_not_found", "test_vm_snapshot_delete_no_snapshot_id", "test_vn_reserve_function_error", "test_get_location_success", "test_template_clone_function_error", "test_image_update_no_update_type", "test_vm_action_no_action", "test_secgroup_update_function_error", "test_list_nodes_full_action", "test_vm_update_no_update_type", "test_avail_sizes", "test_image_persist_no_persist", "test_image_info_function_error", "test_get_vm_id_not_found", "test_secgroup_update_no_update_type", "test_vm_migrate_no_host_id_or_host_name", "test_vn_reserve_no_vn_id_or_vn_name", "test_vm_deploy_action_error", "test_get_image_id_not_found", "test_image_clone_function_error", "test_vm_detach_nic_action_error", "test_vm_detach_nic_no_nic_id", "test_vn_hold_no_data_or_path", "test_list_datastores_action", "test_get_template_id_no_name", "test_vm_deploy_no_host_id_or_host_name", "test_image_snapshot_revert_function_error", "test_image_persist_function_error", "test_vm_snapshot_delete_action_error", "test_vn_allocate_function_error", "test_vm_action_error", "test_avail_locations_action", "test_vm_disk_snapshot_revert_action_error", "test_get_image_not_found", "test_secgroup_info_function_error", "test_get_vn_id_action", "test_list_security_groups_action", "test_list_clusters_action", "test_vm_disk_save_action_error", "test_image_clone_no_image_id_or_image_name", "test_template_delete_no_name_or_template_id", "test_secgroup_update_no_secgroup_id_or_secgroup_name", "test_get_vm_id_success", "test_vm_disk_snapshot_create_no_description", "test_vn_release_function_error", "test_image_persist_no_name_or_image_id", "test_stop_error", "test_vm_migrate_no_datastore_id_or_datastore_name", "test_get_datastore_id_success", "test_show_instance_action_error", "test_vn_info_no_vn_id_or_vn_name", "test_template_allocate_no_data_or_path", "test_secgroup_clone_no_name", "test_vm_update_action_error", "test_vn_free_ar_function_error", "test_get_host_id_no_name", "test_template_update_no_data_or_path", "test_image_update_no_image_id_or_image_name"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["opennebula.list_nodes_select", "opennebula.vn_hold", "opennebula.image_snapshot_revert", "opennebula.list_datastores", "opennebula.vm_monitoring", "opennebula.vn_info", "pytest.raises", "opennebula.vm_snapshot_delete", "opennebula.get_cluster_id", "opennebula.vm_attach", "opennebula.template_delete", "opennebula.image_persistent", "opennebula.template_allocate", "opennebula.list_vns", "opennebula.avail_sizes", "opennebula.image_update", "opennebula.list_nodes", "opennebula.template_update", "opennebula.get_secgroup_id", "opennebula.vm_migrate", "opennebula.list_nodes_full", "opennebula.vm_snapshot_create", "opennebula.vm_disk_save", "opennebula.secgroup_allocate", "pytest.mark", "opennebula.start", "opennebula.vn_add_ar", "opennebula.vm_detach_nic", "opennebula.vn_reserve", "opennebula.get_datastore_id", "opennebula.get_vn_id", "opennebula.list_clusters", "opennebula.list_hosts", "opennebula.secgroup_delete", "opennebula.image_snapshot_delete", "opennebula.vn_delete", "opennebula.image_snapshot_flatten", "opennebula.list_security_groups", "opennebula.vn_release", "opennebula.secgroup_clone", "opennebula.get_host_id", "opennebula.image_info", "opennebula.vm_resize", "opennebula.image_clone", "opennebula.vm_allocate", "opennebula.image_delete", "opennebula.template_instantiate", "opennebula.get_image", "opennebula.vn_allocate", "opennebula.vm_update", "opennebula.vm_snapshot_revert", "opennebula.destroy", "opennebula.secgroup_update", "opennebula.vm_disk_snapshot_delete", "opennebula.vn_free_ar", "opennebula.secgroup_info", "opennebula.vm_detach", "opennebula.vm_action", "pytest.fixture", "opennebula.get_location", "opennebula.template_clone", "opennebula.list_templates", "opennebula.vm_info", "opennebula.image_allocate", "opennebula.avail_images", "opennebula.vm_attach_nic", "opennebula.vm_deploy", "opennebula.vm_disk_snapshot_revert", "opennebula.show_instance", "opennebula.get_image_id", "opennebula.vm_disk_snapshot_create", "opennebula.avail_locations", "opennebula.get_vm_id", "opennebula.stop", "opennebula._get_xml", "opennebula.get_template_id", "opennebula.reboot"]}, "test_proxmox.py": {"libraries": ["salt.cloud.clouds.proxmox", "textwrap", "requests", "tests.support.mock.ANY", "salt.config", "tests.support.mock.MagicMock", "pytest", "io", "tests.support.mock.patch", "tests.support.mock.call", "urllib"], "function_names": ["test__reconfigure_clone_net_hdd", "test__import_api_v6", "test__reconfigure_clone_params", "provider_config", "test__stringlist_to_dictionary", "test_find_agent_ips", "test_clone", "test__authenticate_failure", "test__dictionary_to_stringlist", "_test__import_api", "test_clone_pool", "test__import_api_v7", "test__authenticate_with_custom_port", "test_creation_failure_logging", "configure_loader_modules", "mock_query_response", "test_clone_id", "test__authenticate_success", "profile", "vm"], "function_calls": ["MagicMock", "AssertionError", "patch", "_test__import_api", "list", "call", "sorted", "set"], "class_names": [], "class_method_calls": ["response.status_code", "requests.Response", "missing.remove", "pytest.fixture", "mock_query.assert_any_call", "proxmox.create", "patch.object", "urllib.parse", "requests_get_mock.return_value", "response.text", "response.raw", "properties.keys", "properties.items", "response.raise_for_status", "mock_query.assert_called_once_with", "query.assert_not_called", "pytest.raises", "io.BytesIO", "requests.exceptions", "record.message", "query_calls.append", "mock_query.assert_has_calls", "proxmox._import_api", "response.reason", "textwrap.dedent", "proxmox.ticket", "proxmox._dictionary_to_stringlist", "proxmox._reconfigure_clone", "requests_post_mock.assert_called_with", "vm_.update", "query.assert_any_call", "proxmox.__opts__", "proxmox._find_agent_ip", "mock_query.reset_mock", "config.is_profile_configured", "caplog.records", "mock_wait_for_state.assert_called_with", "proxmox.csrf", "proxmox.api", "proxmox.create_node", "proxmox._authenticate", "option.endswith", "proxmox._stringlist_to_dictionary"]}, "test_qingcloud.py": {"libraries": ["salt.cloud.clouds.qingcloud", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_qingcloud_verify_ssl"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["pytest.fixture", "mock_requests.return_value", "qingcloud.__opts__", "patch.dict", "qingcloud.query", "mock_requests.call_args_list"]}, "test_saltify.py": {"libraries": ["salt.client", "tests.support.mock.ANY", "salt.cloud.clouds.saltify", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_saltify_destroy", "test_create_no_deploy", "test_avail_locations", "test_create_and_deploy", "test_saltify_reboot", "test_avail_sizes", "test_list_nodes", "test_avail_images", "test_create_no_ssh_host", "test_create_wake_on_lan"], "function_calls": ["patch", "MagicMock", "list"], "class_names": [], "class_method_calls": ["saltify.destroy", "saltify.avail_locations", "saltify.avail_sizes", "mock_sleep.assert_any_call", "saltify.create", "mock_cmd.assert_called_once_with", "salt.client", "mm_cmd.assert_called_with", "saltify.list_nodes", "pytest.fixture", "saltify.avail_images", "lcl.cmd", "saltify.reboot", "patch.dict", "saltify.__opts__", "testlist.sort"]}, "test_scaleway.py": {"libraries": ["salt.utils.json", "tests.support.mock.MagicMock", "pytest", "salt.cloud.clouds.scaleway", "tests.support.mock.patch", "copy"], "function_names": ["configure_loader_modules", "profile", "__init__", "__getitem__", "test_query"], "function_calls": ["KeyError", "MagicMock", "DummyRequest"], "class_names": ["DummyRequest"], "class_method_calls": ["self.response", "patch.dict", "pytest.fixture", "http_query.reset_mock", "scaleway.query", "scaleway.__utils__", "salt.utils", "self.status_code", "http_query.assert_called_once_with", "patch.object", "copy.copy"]}, "test_xen.py": {"libraries": ["salt.cloud.clouds.xen", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_get_configured_provider_bad", "test_get_vm_multiple", "test_get_configured_provider_auth", "test_get_dependencies", "test_get_vm", "test_get_dependencies_no_xenapi"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["logging.getLogger", "xen.__opts__", "XenAPI.xenapi", "xen._get_dependencies", "vms.keys", "xen.get_configured_provider", "pytest.fixture", "xen._get_vm", "patch.dict"]}, "test_clone_from_snapshot.py": {"libraries": ["salt.exceptions.SaltCloudSystemExit", "pyVmomi.vim", "pyVim.connect.Disconnect", "pyVmomi.vmodl", "salt.cloud.clouds.vmware", "tests.support.mock.MagicMock", "pytest", "pyVim.connect.SmartConnect"], "function_names": ["test_copy_all_disks_full_clone", "test_quick_linked_clone", "_test_clone_type", "test_flatten_all_all_disks_full_clone", "test_current_state_linked_clone", "test_raises_error_for_invalid_disk_move_type"], "function_calls": ["MagicMock", "_test_clone_type"], "class_names": [], "class_method_calls": ["vmware.COPY_ALL_DISKS_FULL_CLONE", "clone_spec.location", "vmware.QUICK_LINKED_CLONE", "vmware.FLATTEN_DISK_FULL_CLONE", "vim.vm", "obj_ref2.snapshot", "vmware.handle_snapshot", "pytest.mark", "vmware.CURRENT_STATE_LINKED_CLONE", "pytest.raises", "clone_spec2.location", "obj_ref.snapshot"]}, "test_map.py": {"libraries": ["os", "salt.config", "salt.cloud", "pytest", "logging", "tests.support.mock.MagicMock", "tests.support.mock.patch"], "function_names": ["test_cloud_map_merge_conf", "test_cloud_map_delete_non_existing_profile", "salt_cloud_config_file"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["logging.INFO", "caplog.at_level", "pytest.fixture", "pytest.mark", "caplog.text", "cloud_map.delete_map", "salt.config", "salt.cloud", "os.path", "pytest.fail", "cloud_map.map_data", "opts.update", "salt_master_factory.config_dir"]}, "test__validate_opts.py": {"libraries": ["salt.config", "pytest"], "function_names": ["test_none_int_types", "test_int_types", "test_list_types", "test_dict_bool_types", "test_dict_types", "test_none_bool_types", "test_bool_int_types", "test_str_tuple_types", "test_bool_types", "test_str_bool_types", "test_none_str_types", "test_float_types", "test_str_list_types", "test_str_int_types", "test_str_dict_types", "test_str_types", "test_dict_bool_none_types", "test_dict_list_types"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.config", "pytest.mark"]}, "test_master_config.py": {"libraries": ["tests.support.mock.patch", "salt.config", "tests.support.mock.MagicMock"], "function_names": ["test_apply_for_cluster", "test_apply_default_for_cluster", "test___cli_path_is_expanded", "test_apply_no_cluster_id"], "function_calls": ["patch", "isinstance", "MagicMock"], "class_names": [], "class_method_calls": ["expand_mock.called", "salt.config"]}, "test_minion_config.py": {"libraries": ["tests.support.mock.patch", "salt.config", "tests.support.mock.MagicMock"], "function_names": ["test___cli_path_is_expanded"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["expand_mock.called", "salt.config"]}, "test_crypt_cryptodome.py": {"libraries": ["os", "salt.crypt", "tests.support.mock.mock_open", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.MockCall", "tests.support.mock.patch", "M2Crypto"], "function_names": ["is_file", "test_verify_signature", "test_gen_keys", "test_bad_key", "test_gen_keys_with_passphrase", "test_sign_message", "test_sign_message_with_passphrase"], "function_calls": ["MagicMock", "patch", "MockCall", "str", "real_is_file", "mock_open"], "class_names": [], "class_method_calls": ["RSA.importKey", "logging.getLogger", "salt.crypt", "pytest.mark", "os.path", "patch.multiple", "path.startswith", "m_open.calls", "key.can_encrypt", "pytest.importorskip"]}, "test_crypt_m2crypto.py": {"libraries": ["os", "salt.crypt", "salt.utils.stringutils", "tests.support.mock.mock_open", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_verify_signature", "test_m2_bad_key", "test_m2_verify_signature", "test_m2crypto_sign_bytes_47124", "test_encrypt_decrypt_bin", "test_m2_gen_keys", "test_m2_encrypt_decrypt_bin", "test_gen_keys", "test_m2_sign_message_with_passphrase", "test_m2crypto_sign_unicode_47124", "test_gen_keys_with_passphrase", "test_m2crypto_verify_bytes_47124", "test_m2crypto_verify_unicode_47124", "test_sign_message", "test_sign_message_with_passphrase"], "function_calls": ["patch", "MagicMock", "callback", "mock_open"], "class_names": [], "class_method_calls": ["os.sep", "save_pub.assert_not_called", "salt.crypt", "key.check_key", "save_pem.assert_called_once_with", "save_pub.assert_called_once_with", "pytest.mark", "save_pem.call_args", "salt.utils", "M2Crypto.BIO", "M2Crypto.RSA", "save_pem.assert_not_called", "pytest.importorskip"]}, "test_auto_key.py": {"libraries": ["salt.daemons.masterapi", "contextlib", "salt.utils.platform", "salt.config", "tests.support.mock.MagicMock", "pytest", "io", "stat", "tests.support.mock.patch"], "function_names": ["test_check_autosign_grains_accept", "test_check_permissions_others_can_write", "test_check_permissions_group_can_write_permissive", "test_check_autosign_grains_no_grains", "local_funcs", "test_check_permissions_windows", "test_check_permissions_only_owner_can_write_root", "test_check_autosign_grains_invalid_file_permissions", "test_check_permissions_only_owner_can_write", "test_check_permissions_group_can_write_permissive_root_not_in_group", "os_stat_mock", "test_check_autosign_grains_accept_not", "auto_key", "test_check_permissions_group_can_write_not_permissive", "test_func", "patch_check_permissions", "_test_check_autosign_grains", "test_check_autosign_grains_no_autosign_grains_dir", "test_check_permissions_group_can_write_permissive_root_in_group", "gen_permissions"], "function_calls": ["MagicMock", "patch", "test_func", "_test_check_autosign_grains", "getattr", "patch_check_permissions", "gen_permissions"], "class_names": [], "class_method_calls": ["auto_key.opts", "fstats.get", "pytest.fixture", "c.upper", "io.StringIO", "auto_key.check_permissions", "pytest.mark", "mock_open.call_count", "mock_permissions.call_count", "masterapi.LocalFuncs", "contextlib.contextmanager", "auto_key.check_autosign_grains", "mock_walk.call_count", "salt.utils", "masterapi.AutoKey", "fmode.st_gid", "stats.get", "fmode.st_mode", "salt.config"]}, "test_local_funcs.py": {"libraries": ["salt.utils.platform", "salt.config", "tests.support.mock.MagicMock", "pytest", "salt.daemons.masterapi", "tests.support.mock.patch"], "function_names": ["test_wheel_token_authorization_error", "test_publish_eauth_authorization_error", "test_publish_cmd_blacklisted", "test_publish_user_authorization_error", "check_keys", "test_publish_user_is_blacklisted", "test_runner_token_not_authenticated", "test_publish_token_authorization_error", "test_runner_eauth_authorization_error", "test_publish_user_not_authenticated", "test_publish_token_not_authenticated", "test_wheel_eauth_authorization_error", "test_runner_token_authorization_error", "local_funcs", "check_local_funcs", "test_dual_key_auth", "test_wheel_eauth_salt_invocation_error", "test_wheel_user_not_authenticated", "test_publish_eauth_not_authenticated", "test_wheel_token_not_authenticated", "test_wheel_eauth_not_authenticated", "test_publish_user_authenticated_missing_auth_list", "test_wheel_token_salt_invocation_error", "test_runner_eauth_not_authenticated", "test_runner_eauth_salt_invocation_error", "test_dual_key_auth_sudo", "test_runner_token_salt_invocation_error"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["check_local_funcs.publish", "local_funcs.runner", "pytest.fixture", "pytest.mark", "salt.config", "local_funcs.publish", "masterapi.LocalFuncs", "local_funcs.wheel"]}, "test_remote_funcs.py": {"libraries": ["salt.utils.platform", "salt.config", "tests.support.mock.MagicMock", "pytest", "salt.daemons.masterapi", "tests.support.mock.patch"], "function_names": ["store", "test_mine_get_acl_rejected", "fetch", "test_mine_get_pre_nitrogen_compat", "funcs", "test_mine_get_dict_list", "__init__", "test_mine_get_acl_allowed", "test_mine_get", "test_mine_get_dict_str"], "function_calls": ["MagicMock", "patch", "dict", "FakeCache", "test_mine_get"], "class_names": ["FakeCache"], "class_method_calls": ["funcs._mine_get", "masterapi.RemoteFuncs", "pytest.fixture", "pytest.mark", "funcs.cache", "salt.utils", "temp_salt_master.config", "salt.cache", "self.data"]}, "test_engines.py": {"libraries": ["salt.utils.process", "salt.engines", "tests.support.unit.TestCase", "salt.config", "pytest", "logging", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_engine_module", "setup_loader_modules"], "function_calls": ["len"], "class_names": ["EngineTestCase"], "class_method_calls": ["logging.getLogger", "patch.dict", "self.assertEqual", "process_manager._process_map", "engines.__opts__", "salt.engines", "pytest.mark", "process_manager.kill_children", "salt.config", "salt.utils", "self.addCleanup", "process_manager.stop_restarting"]}, "test_libvirt_events.py": {"libraries": ["salt.engines.libvirt_events", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_get_domain_event_detail", "configure_loader_modules", "test_get_libvirt_enum_string_subprefix", "test_event_skipped", "test_event_filtered", "test_event_register", "test_get_libvirt_enum_string_underscores", "mock_libvirt"], "function_calls": ["patch", "getattr", "MagicMock", "len"], "class_names": [], "class_method_calls": ["mock_libvirt.VIR_DOMAIN_EVENT_ID_LIFECYCLE", "mock_libvirt.VIR_NODE_DEVICE_EVENT_ID_UPDATE", "mock_libvirt.VIR_DOMAIN_EVENT_ID_REBOOT", "pytest.fixture", "mock_libvirt.VIR_DOMAIN_EVENT_DEFINED", "mock_libvirt.openReadOnly", "mock_cnx.storagePoolEventRegisterAny", "mock_libvirt.VIR_PREFIX_NONE", "mock_libvirt.VIR_DOMAIN_EVENT_DEFINED_ADDED", "libvirt_events.CALLBACK_DEFS", "libvirt_events._nodedev_event_lifecycle_cb", "libvirt_events._get_libvirt_enum_string", "mock_libvirt.VIR_PREFIX_SUB_FOOBAR", "mock_libvirt.VIR_DOMAIN_EVENT_CRASHED", "mock_cnx.domainEventRegisterAny", "mock_libvirt.VIR_PREFIX_SUB_BAR", "libvirt_events._nodedev_event_update_cb", "mock_libvirt.VIR_PREFIX_ONE", "mock_libvirt.virEventRunDefaultImpl", "mock_libvirt.VIR_DOMAIN_EVENT_CRASHED_PANICKED", "libvirt_events.start", "mock_libvirt.mock_add_spec", "mock_libvirt.VIR_NODE_DEVICE_EVENT_ID_LIFECYCLE", "mock_libvirt.VIR_PREFIX_FOO", "mock_libvirt.VIR_PREFIX_SUB_FOO", "mock_libvirt.VIR_PREFIX_BAR_FOO", "mock_libvirt.VIR_STORAGE_POOL_EVENT_ID_LIFECYCLE", "counts.items", "libvirt_events.REGISTER_FUNCTIONS", "mock_libvirt.getVersion", "libvirt_events._pool_event_lifecycle_cb", "mock_cnx.close", "mock_libvirt.VIR_DOMAIN_EVENT_UNDEFINED", "libvirt_events._get_domain_event_detail", "mock_libvirt.VIR_STORAGE_POOL_EVENT_ID_REFRESH", "mock_libvirt.VIR_PREFIX_TWO", "libvirt_events._network_event_lifecycle_cb", "mock_libvirt.VIR_NETWORK_EVENT_ID_LIFECYCLE", "mock_cnx.networkEventRegisterAny", "libvirt_events._pool_event_refresh_cb", "libvirt_events._domain_event_lifecycle_cb", "mock_cnx.nodeDeviceEventRegisterAny", "mock_cnx.networkEventDeregisterAny", "mock_libvirt.VIR_DOMAIN_EVENT_DEFINED_UPDATED"]}, "test_script.py": {"libraries": ["sys", "contextlib", "salt.exceptions.CommandExecutionError", "salt.engines.script", "pytest", "logging", "signal", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["test__read_stdout", "test_onchange_no_change_no_output", "test__read_stdout_terminates_properly", "new_tag", "test_multiple", "_timeout", "test_start_onchange_no_change_multiple", "configure_loader_modules", "test_start", "raw_event", "_check_skip", "serializer", "timeout", "test_start_onchange_with_change", "event_send", "proc", "test_start_onchange_new_tag", "test__get_serializer", "handler", "new_event", "event"], "function_calls": ["next", "TimeoutError", "patch", "Mock", "timeout"], "class_names": ["TestStart"], "class_method_calls": ["raw_event.side_effect", "event_send.assert_called_once_with", "script._get_serializer", "pytest.fixture", "event_send.call_count", "popen.return_value", "sys.platform", "log.warning", "logging.getLogger", "signal.SIGALRM", "pytest.mark", "pytest.raises", "signal.alarm", "script.__salt__", "event_send.assert_any_call", "contextlib.contextmanager", "event_send.assert_called_with", "pytest.skip", "script.start", "get_master.return_value", "serializer.deserialize", "proc.pid", "proc.wait", "patch.dict", "script._read_stdout", "popen_mock.stdout", "signal.signal", "get_serializer.return_value"]}, "test_slack.py": {"libraries": ["salt.utils.slack", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_query"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["logging.getLogger", "slack.query", "pytest.fixture"]}, "test_slack_bolt_engine.py": {"libraries": ["tests.support.mock.MagicMock", "pytest", "salt.engines.slack_bolt_engine", "tests.support.mock.patch", "tests.support.mock.call"], "function_names": ["configure_loader_modules", "test_control_message_target", "__enter__", "chat_postMessage", "__exit__", "slack_client", "cmd_async", "files_upload", "test_run_commands_from_slack_async", "__init__", "test_run_command_async", "connect", "message", "asynchronous"], "function_calls": ["MockSlackBoltAppClient", "MockLocalClient", "MagicMock", "MockSlackBoltApp", "MockRunnerClient", "patch", "MockSlackBoltSocketMode", "call"], "class_names": ["MockSlackBoltAppClient", "MockLocalClient", "MockSlackBoltApp", "MockRunnerClient", "MockSlackBoltSocketMode"], "class_method_calls": ["self.kwargs", "slack_bolt_engine.HAS_SLACKBOLT", "slack_client.run_command_async", "runner_client_asynchronous.assert_has_calls", "slack_client.run_commands_from_slack_async", "pytest.fixture", "slack_client.control_message_target", "mock_event_send.asser_has_calls", "local_client_cmd_async.assert_has_calls", "patch.object", "self.proxy", "pytest.mark", "slack_bolt_engine.__opts__", "self.logger", "slack_bolt_engine.SlackClient", "app_client_chat_postMessage.asser_has_calls", "patch.dict", "self.client", "self.args", "app_client_files_upload.asser_has_calls", "slack_bolt_engine.__salt__"]}, "test_sqs_events.py": {"libraries": ["salt.engines.sqs_events", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_minion_message_fires", "mock_sqs", "test_no_queue_present", "sample_msg", "test_master_message_fires"], "function_calls": ["MagicMock", "patch", "sample_msg", "all", "len"], "class_names": [], "class_method_calls": ["fake_msg.delete", "sqs_events.HAS_BOTO", "sqs_events.__salt__", "pytest.fixture", "sqs_events._process_queue", "mock_fire.called", "fake_msg.get_body", "pytest.mark", "mock_sqs.queue", "x.delete", "patch.dict", "mock_logging.warning"]}, "test_stalekey.py": {"libraries": ["salt.engines.stalekey", "tests.support.mock.mock_open", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "cmd", "test__delete_keys", "__init__", "test__write_presence", "test__read_presence"], "function_calls": ["patch", "MagicMock", "mock_open"], "class_names": ["MockWheel"], "class_method_calls": ["logging.getLogger", "stalekey._read_presence", "stalekey._write_presence", "pytest.fixture", "stalekey._delete_keys"]}, "test_splay.py": {"libraries": ["salt.executors.splay", "pytest"], "function_names": ["configure_loader_modules", "test__get_hash"], "function_calls": [], "class_names": [], "class_method_calls": ["splay_exec._get_hash", "pytest.fixture"]}, "test_fileclient_cache.py": {"libraries": ["errno", "os", "salt.utils.files", "pytest", "logging", "salt.fileclient", "tests.support.mock.patch", "shutil"], "function_names": ["test_cache_dir", "test_cache_dir_with_alternate_cachedir_and_absolute_path", "cache_root", "_get_file_roots", "_setup", "fs_root", "test_cache_file", "test_cache_dir_with_alternate_cachedir_and_relative_path", "_check", "_saltenvs", "configure_loader_modules", "_salt", "_external", "mocked_opts", "_new_dir", "test_cache_dest", "test_cache_file_with_alternate_cachedir_and_relative_path", "_subdir_files", "test_cache_file_with_alternate_cachedir_and_absolute_path"], "function_calls": ["_get_file_roots", "_salt", "_external", "_subdir_files", "_new_dir", "_check", "_saltenvs"], "class_names": [], "class_method_calls": ["log.debug", "pytest.fixture", "os.path", "exc.errno", "client.cache_file", "logging.getLogger", "client.cache_dir", "errno.EEXIST", "fileclient.__opts__", "fp_.read", "os.makedirs", "fp_.write", "shutil.rmtree", "salt.utils", "patch.dict", "minion_opts.copy", "fileclient.get_file_client", "client.cache_dest", "patched_opts.update"]}, "test_gitfs_config.py": {"libraries": ["salt.fileserver.gitfs", "salt.utils.gitfs.GITPYTHON_VERSION", "tornado.ioloop", "salt.utils.win_functions", "textwrap", "salt.utils.files", "salt.utils.platform", "pytest", "salt.utils.gitfs.GITPYTHON_MINVER", "salt.utils.gitfs", "salt.utils.yaml", "tests.support.mock.patch", "git"], "function_names": ["test_per_saltenv_config", "configure_loader_modules", "clear_instance_map"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["git_fs.remotes", "tornado.ioloop", "textwrap.dedent", "pytest.fixture", "pytest.mark", "gitfs.PER_REMOTE_ONLY", "salt.utils", "patch.dict", "gitfs.PER_REMOTE_OVERRIDES", "gitfs.__opts__"]}, "test_s3fs.py": {"libraries": ["os", "moto.mock_s3", "boto3", "salt.fileserver.s3fs", "salt.utils.s3", "yaml", "pytest"], "function_names": ["configure_loader_modules", "verify_cache", "bucket", "s3", "test_update", "make_keys", "test_ignore_pickle_load_exceptions", "aws_creds", "test_s3_hash", "test_cache_round_trip"], "function_calls": ["make_keys", "verify_cache", "mock_s3"], "class_names": [], "class_method_calls": ["s3fs._read_buckets_cache_file", "s3.delete_object", "pytest.fixture", "f.read", "os.path", "yaml.dump", "s3fs._write_buckets_cache_file", "pytest.mark", "s3fs.update", "conn.put_object", "conn.create_bucket", "s3fs.file_hash", "keys.items", "boto3.client", "s3fs._get_buckets_cache_filename", "salt.utils", "expected.items", "s3fs._get_cached_file_name", "s3fs.S3_HASH_TYPE"]}, "test_svnfs.py": {"libraries": ["salt.fileserver.svnfs", "tests.support.mock.patch", "pytest"], "function_names": ["test_env_is_exposed_blacklist", "configure_loader_modules", "test_env_is_exposed"], "function_calls": [], "class_names": [], "class_method_calls": ["patch.dict", "svnfs._env_is_exposed", "svnfs.__opts__", "pytest.fixture"]}, "test_core_windows_platform_data.py": {"libraries": ["salt.grains.core", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["test__windows_platform_data_computer_system", "test__windows_platform_data_operating_system", "test__windows_platform_data_bios", "test__windows_platform_data_computer_system_product", "test__windows_platform_data_baseboard", "test__windows_platform_data_timezone", "test__windows_platform_data_index_errors"], "function_calls": ["patch", "MagicMock", "Mock"], "class_names": [], "class_method_calls": ["core._windows_platform_data", "pytest.mark", "patch.object", "pytest.importorskip"]}, "test_disks.py": {"libraries": ["salt.grains.disks", "textwrap", "tests.support.mock.mock_open", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test__windows_disks_retcode", "configure_loader_modules", "test__linux_disks", "test__windows_disks"], "function_calls": ["patch", "MagicMock", "mock_open"], "class_names": [], "class_method_calls": ["mock_run_all.assert_called_once_with", "disks.__salt__", "textwrap.dedent", "pytest.fixture", "disks._windows_disks", "patch.dict", "disks._linux_disks"]}, "test_esxi.py": {"libraries": ["salt.modules.vsphere", "salt.states.esxi", "tests.support.case.TestCase", "tests.support.mock.MagicMock", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["esxi_cmd_wrapper", "setup_loader_modules", "test_certificate_verify"], "function_calls": ["patch", "MagicMock"], "class_names": ["TestCertificateVerify"], "class_method_calls": ["http_query_mock.assert_called_once_with", "vsphere.upload_ssh_key", "esxi.ssh_configured", "esxi.__salt__", "patch.dict"]}, "test_fibre_channel.py": {"libraries": ["tests.support.mock.patch", "salt.grains.fibre_channel", "tests.support.mock.MagicMock", "tests.support.mock.mock_open"], "function_names": ["test_windows_fibre_channel_wwns_grains", "test_linux_fibre_channel_wwns_grains"], "function_calls": ["patch", "MagicMock", "mock_open"], "class_names": [], "class_method_calls": ["fibre_channel._linux_wwns", "fibre_channel._windows_wwns"]}, "test_iscsi.py": {"libraries": ["errno", "salt.grains.iscsi", "textwrap", "tests.support.mock.mock_open", "tests.support.mock.MagicMock", "tests.support.mock.patch"], "function_names": ["test_linux_iqn_no_iscsii_initiator", "test_aix_iscsi_iqn_grains", "test_linux_iscsi_iqn_grains", "test_linux_iqn_non_root", "test_windows_iscsi_iqn_grains"], "function_calls": ["MagicMock", "IOError", "patch", "len", "isinstance", "mock_open"], "class_names": [], "class_method_calls": ["_grains.get", "errno.EPERM", "iscsi._windows_iqn", "textwrap.dedent", "iscsi._linux_iqn", "errno.ENOENT", "iscsi.log", "iscsi._aix_iqn"]}, "test_lvm.py": {"libraries": ["salt.states.lvm", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "salt.exceptions.ArgumentValueError"], "function_names": ["configure_loader_modules", "test_pv_present", "test_pv_absent", "test_lv_present_with_force", "test_lv_present_with_reduce_without_force", "test_lv_absent", "test_lv_present_with_valid_suffixes", "test_lv_present_with_percentage_extents", "test_lv_present_with_increase", "lv02", "lv01", "test_lv_present_with_invalid_suffixes", "test_lv_present_with_same_size", "test_lv_present_with_reduce_with_force", "test_vg_present", "test_vg_absent", "test_lv_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["lvm.lv_present", "lvm.__salt__", "lvm.__opts__", "pytest.fixture", "ret.update", "lvm.pv_absent", "lvm.vg_present", "pytest.raises", "lvm.vg_absent", "patch.dict", "lvm.pv_present", "lvm.lv_absent"]}, "test_mdata.py": {"libraries": ["tests.support.mock.Mock", "tests.support.mock.patch", "pytest", "salt.grains.mdata"], "function_names": ["configure_loader_modules", "test_user_mdata_empty_list", "test_sdc_mdata", "test_sdc_mdata_missing_cmd_both", "test_sdc_mdata_missing_cmd_one", "test_user_mdata_missing_cmd_one", "test_user_mdata_missing_cmd_both", "test_user_mdata"], "function_calls": ["patch", "Mock"], "class_names": [], "class_method_calls": ["mdata._sdc_mdata", "mdata._user_mdata", "pytest.fixture", "patch.dict", "mdata.__salt__"]}, "test_metadata.py": {"libraries": ["tests.support.mock.create_autospec", "salt.grains.metadata", "tests.support.mock.MagicMock", "pytest", "logging", "salt.utils.http", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "settimeout", "mock_http", "test_metadata_refresh_token", "test_metadata_search", "test_metadata_virtual", "connect_ex", "__init__"], "function_calls": ["patch", "create_autospec", "MagicMock", "MockSocketClass"], "class_names": ["MockSocketClass"], "class_method_calls": ["logging.getLogger", "metadata.__virtual__", "pytest.fixture", "metadata.metadata", "patch.dict", "http.query", "metadata.__context__", "metadata._refresh_token"]}, "test_metadata_gce.py": {"libraries": ["tests.support.mock.create_autospec", "salt.grains.metadata_gce", "pytest", "logging", "salt.utils.http", "tests.support.mock.patch"], "function_names": ["test_metadata_virtual", "configure_loader_modules", "test_metadata_gce_search", "mock_http"], "function_calls": ["patch", "create_autospec"], "class_names": [], "class_method_calls": ["logging.getLogger", "metadata.__virtual__", "pytest.fixture", "metadata.metadata", "http.query"]}, "test_napalm.py": {"libraries": ["tests.support.napalm", "salt.proxy.napalm", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_call", "configure_loader_modules", "test_initialized", "test_get_device", "test_init", "test_fns", "test_alive", "mock_get_device", "test_shutdown", "test_opts", "test_ping", "test_grains_refresh", "test_get_grains"], "function_calls": ["patch", "mock_get_device", "MagicMock"], "class_names": [], "class_method_calls": ["napalm_proxy.shutdown", "napalm_proxy.init", "napalm_proxy.initialized", "patch.dict", "napalm_proxy.alive", "napalm_proxy.call", "napalm_proxy.get_device", "pytest.fixture", "napalm_proxy.ping", "napalm_proxy.fns", "napalm_proxy.grains_refresh", "napalm_test_support.TEST_FACTS", "napalm_test_support.TEST_ARP_TABLE", "napalm_proxy.__context__", "napalm_test_support.MockNapalmDevice", "napalm_proxy.get_grains"]}, "test_nvme.py": {"libraries": ["errno", "salt.grains.nvme", "textwrap", "tests.support.mock.mock_open", "tests.support.mock.patch"], "function_names": ["test_linux_nqn_non_root", "test_linux_nqn_no_nvme_initiator", "test_linux_nvme_nqn_grains"], "function_calls": ["IOError", "patch", "len", "isinstance", "mock_open"], "class_names": [], "class_method_calls": ["errno.EPERM", "nvme.log", "textwrap.dedent", "nvme._linux_nqn", "errno.ENOENT"]}, "test_package.py": {"libraries": ["os", "salt.utils.package"], "function_names": ["test_pkg_type"], "function_calls": [], "class_names": [], "class_method_calls": ["os.environ", "salt.utils"]}, "test_pending_reboot.py": {"libraries": ["salt.grains.pending_reboot", "tests.support.mock.patch"], "function_names": ["test_pending_reboot_true", "test_pending_reboot_false"], "function_calls": ["patch"], "class_names": [], "class_method_calls": ["pending_reboot.pending_reboot"]}, "test_smartos.py": {"libraries": ["salt.states.smartos", "salt.utils.odict.OrderedDict", "tests.support.mock.patch", "pytest"], "function_names": ["test_parse_vmconfig_vrrp", "configure_loader_modules", "test_config_present_does_not_exist"], "function_calls": ["patch", "OrderedDict"], "class_names": [], "class_method_calls": ["smartos.config_present", "smartos._parse_vmconfig", "pytest.fixture"]}, "test_context.py": {"libraries": ["salt.utils.json", "tests.support.unit.TestCase", "salt.utils.context.NamespacedDictWrapper"], "function_names": ["test_json_dumps_multiple_key", "test_single_key", "test_json_dumps_single_key", "test_multiple_key", "setUp"], "function_calls": ["NamespacedDictWrapper"], "class_names": ["NamespacedDictWrapperTests"], "class_method_calls": ["self._dict", "salt.utils", "self.assertEqual"]}, "test_lazy.py": {"libraries": ["sys", "salt.loader.lazy", "salt.loader.context", "salt.loader", "salt.utils.files", "pytest"], "function_names": ["test_loaded_methods_are_loaded_func", "test_loaded_modules_are_loaded_mods", "test_loader_pack_always_has_opts", "test_loaders_convert_context_to_values", "test_loader_pack_opts_not_overwritten", "test_loaders_create_named_loader_contexts", "test_missing_loader_from_salt_internal_loaders", "test_loaders_have_uniq_context", "loader_dir"], "function_calls": ["str", "isinstance", "myasync"], "class_names": [], "class_method_calls": ["func.func", "loader.pack", "loader_1._load_all", "pytest.helpers", "loader_2.pack", "loader_2._load_all", "loader_1.pack", "module.__context__", "salt.loader", "pytest.fixture", "mod.set_context", "func.__module__", "mod.mod", "sys.modules", "pytest.raises", "loader_1.mod_a", "wrapped_module.__context__", "loader_1.opts"]}, "test_loading_modules.py": {"libraries": ["salt.loader.lazy", "salt.loader", "salt.modules.boto_vpc", "salt.modules.virt", "pytest"], "function_names": ["test_load_virt", "minion_mods", "test_load_boto_vpc"], "function_calls": ["isinstance"], "class_names": [], "class_method_calls": ["salt.loader", "pytest.fixture", "pytest.mark", "salt.modules", "pytest.fail"]}, "test_sentry_mod.py": {"libraries": ["tests.support.mock.patch", "salt.log_handlers.sentry_mod", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test___virtual___success", "sentry_handler", "test___virtual___fail", "test_setup_handlers_disabled_bypass_dunders"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["grains_loader.assert_not_called", "salt_loader.assert_not_called", "salt.log_handlers", "pytest.fixture"]}, "test_confirm_top.py": {"libraries": ["salt.config", "salt.loader", "pytest"], "function_names": ["matchers", "test_sanity"], "function_calls": ["match"], "class_names": [], "class_method_calls": ["salt.loader", "pytest.fixture"]}, "test_trans_tar.py": {"libraries": ["tests.support.mock.MagicMock", "pytest", "logging", "salt.modules.dockermod", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "fake_run", "test_trans_tar_should_have_grains_in_sls_opts_including_pillar_override"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["logging.getLogger", "fake_trans_tar.call_args", "expected_grains.items", "fake_get_pillar.compile_pillar", "log.debug", "expected_pillars.update", "docker_mod.sls", "pytest.fixture", "expected_pillars.items"]}, "test_file_basics.py": {"libraries": ["salt.modules.cmdmod", "os", "salt.modules.file", "salt.utils.stringutils", "salt.loader", "salt.modules.config", "salt.utils.files", "salt.utils.platform", "salt.config", "tests.support.mock.MagicMock", "pytest", "logging", "salt.utils.data", "tests.support.mock.patch", "tests.support.mock.call", "shutil"], "function_names": ["test_hardlink_working", "tfile", "test_hardlink_sanity", "test_symlink_lexists_called_follow_symlinks_false", "test_source_list_for_list_returns_existing_file", "test_source_list_for_list_returns_file_from_dict_via_http", "test_source_list_use_requests", "test_source_list_for_list_returns_file_from_other_env", "a_hardlink", "test_source_list_for_list_returns_local_file_proto_from_dict", "test_source_list_for_list_returns_existing_local_file_slash", "a_link", "configure_loader_modules", "myfile", "list_master", "test_source_list_for_list_returns_file_from_dict", "tmp_sub_dir", "test_hardlink_numlinks", "test_symlink_already_in_desired_state", "test_source_list_for_list_returns_existing_local_file_proto", "test_source_list_for_list_returns_local_file_slash_from_dict"], "function_calls": ["MagicMock", "patch", "list", "str", "call"], "class_names": [], "class_method_calls": ["filemod.link", "fp.write", "filemod.__salt__", "exists.reset_mock", "pytest.fixture", "lexists.reset_mock", "directory.mkdir", "http_query.return_value", "logging.getLogger", "os.stat", "filemod.source_list", "exists.assert_called", "lexists.assert_called", "pytest.mark", "remove.return_value", "filemod.symlink", "cmdmod.run", "path.exists", "shutil.rmtree", "salt.utils", "patch.dict", "configmod.manage_mode", "os.symlink", "http_query.mock_calls", "cmdmod.run_all", "lexists.assert_not_called", "os.remove", "exists.assert_not_called"]}, "test_file_block_replace.py": {"libraries": ["salt.modules.cmdmod", "os", "salt.modules.file", "salt.utils.stringutils", "textwrap", "salt.modules.win_file", "salt.loader", "salt.exceptions.CommandExecutionError", "salt.utils.win_dacl", "salt.utils.files", "salt.utils.platform", "salt.config", "tests.support.mock.MagicMock", "pytest", "logging", "salt.utils.data", "tests.support.mock.patch", "shutil"], "function_names": ["test_replace_append_newline_at_eof", "configure_loader_modules", "test_replace_insert_before", "multiline_file", "test_replace_partial_marked_lines", "test_replace_multiline", "test_replace_insert_after", "test_backup", "test_replace_prepend", "multiline_string", "subdir", "test_show_changes", "test_unfinished_block_exception", "test_dry_run", "test_no_modifications", "test_replace_append"], "function_calls": ["str", "isinstance", "MagicMock"], "class_names": [], "class_method_calls": ["pytest.fixture", "ret.update", "filemod.blockreplace", "tfile2.read", "os.path", "patch.object", "logging.getLogger", "os.stat", "tfile.name", "tfile.flush", "pytest.raises", "ret.startswith", "win_file.check_perms", "file_handle.write", "win_dacl.check_perms", "cmdmod.run", "subdir.mkdir", "textwrap.dedent", "shutil.rmtree", "tfile.write", "salt.utils", "os.unlink", "cmdmod.run_all", "os.linesep", "filemod.check_perms", "os.remove", "multiline_string.splitlines", "fp.read"]}, "test_file_chattr.py": {"libraries": ["salt.modules.cmdmod", "salt.modules.file", "textwrap", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_chattr_version_should_return_version_from_tune2fs", "test_chattr_version_returns_None_if_no_tune2fs_exists", "_common_patches", "test_chattr_has_extended_attrs_should_return_False_if_chattr_version_is_None", "test_chattr_has_extended_attrs_should_return_False_if_version_is_equal_threshold", "test_if_tune2fs_has_no_version_version_should_be_None", "test_check_perms_should_report_no_attr_changes_if_there_are_none", "fake_cmd", "test_on_aix_chattr_version_should_be_None_even_if_tune2fs_exists", "test_chattr_has_extended_attrs_should_return_False_if_version_is_too_low", "test_chattr_has_extended_attrs_should_return_True_if_version_is_above_threshold", "test_check_perms_should_report_attrs_new_and_old_if_they_changed"], "function_calls": ["patch", "MagicMock", "Mock"], "class_names": [], "class_method_calls": ["logging.getLogger", "mock_run.assert_not_called", "cmdmod.run", "filemod.__salt__", "actual_ret.get", "pytest.fixture", "pytest.mark", "textwrap.dedent", "filemod.check_perms", "filemod.AttrChanges", "filemod._chattr_version", "patch.dict", "filemod._chattr_has_extended_attrs"]}, "test_file_check.py": {"libraries": ["os", "salt.modules.file", "getpass", "salt.utils.files", "salt.utils.platform", "pytest", "logging", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["a_link", "configure_loader_modules", "get_link_perms", "test_check_managed_follow_symlinks", "tfile", "test_check_file_meta_follow_symlinks", "fake_chown", "test_check_perms_user_group_name_and_id", "test_check_managed_changes_follow_symlinks"], "function_calls": ["str", "Mock", "patch", "get_link_perms"], "class_names": [], "class_method_calls": ["logging.getLogger", "filemod.check_file_meta", "filemod.check_managed", "fp.write", "pytest.fixture", "pytest.mark", "input.items", "filemod.check_perms", "os.remove", "getpass.getuser", "salt.utils", "os.chmod", "stat_out.update", "filemod.check_managed_changes", "os.symlink"]}, "test_file_comment_line.py": {"libraries": ["salt.modules.cmdmod", "os", "salt.modules.file", "salt.utils.stringutils", "textwrap", "salt.loader", "salt.modules.config", "salt.utils.files", "salt.utils.platform", "salt.config", "tests.support.mock.MagicMock", "pytest", "logging", "salt.utils.data", "shutil"], "function_names": ["configure_loader_modules", "test_comment", "multiline_file", "test_comment_different_character", "multiline_string", "test_uncomment", "test_comment_line", "test_comment_not_found"], "function_calls": ["str", "MagicMock"], "class_names": [], "class_method_calls": ["logging.getLogger", "file_handle.write", "cmdmod.run_all", "os.linesep", "filemod.comment", "cmdmod.run", "filemod.uncomment", "textwrap.dedent", "pytest.fixture", "shutil.rmtree", "filemod.comment_line", "salt.utils", "configmod.manage_mode", "multiline_string.splitlines", "fp.read"]}, "test_file_grep.py": {"libraries": ["salt.modules.cmdmod", "os", "salt.modules.file", "salt.utils.stringutils", "textwrap", "salt.loader", "salt.modules.config", "salt.utils.files", "salt.utils.platform", "salt.exceptions.SaltInvocationError", "salt.config", "tests.support.mock.MagicMock", "pytest", "logging", "salt.utils.data", "shutil"], "function_names": ["test_grep_query_exists_with_opt", "configure_loader_modules", "multiline_file", "test_grep_query_not_exists_opt", "test_grep_query_exists_wildcard", "test_grep_file_not_exists_wildcard", "multiline_string", "test_grep_query_not_exists", "test_grep_query_too_many_opts", "test_grep_query_exists"], "function_calls": ["str", "MagicMock"], "class_names": [], "class_method_calls": ["logging.getLogger", "file_handle.write", "cmdmod.run_all", "os.linesep", "cmdmod.run", "filemod.grep", "textwrap.dedent", "pytest.fixture", "shutil.rmtree", "pytest.mark", "pytest.raises", "salt.utils", "configmod.manage_mode", "multiline_string.splitlines"]}, "test_file_line.py": {"libraries": ["salt.modules.cmdmod", "os", "salt.modules.file", "salt.utils.stringutils", "salt.loader", "salt.modules.config", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.utils.platform", "tests.support.mock.mock_open", "tests.support.mock.DEFAULT", "salt.config", "tests.support.mock.MagicMock", "pytest", "logging", "salt.utils.data", "tests.support.mock.patch", "shutil"], "function_names": ["test_insert_with_after_and_before_with_no_location_should_indent_to_match_before_indent", "test_ensure_with_before_and_missing_content_should_add_it", "test_line_insert_duplicate_ensure_after", "test_line_insert_start", "test_if_mode_is_replace_and_match_is_set_then_it_should_replace_the_first_match", "test_ensure_with_existing_but_different_line_should_set_the_line", "test_ensure_with_too_many_before_should_CommandExecutionError", "test_line_insert_ensure_beforeafter_twolines", "test_line_insert_duplicate_ensure_before", "test_insert_should_work_just_like_ensure_on_before", "test_ensure_with_after_and_too_many_before_should_CommandExecutionError", "test_line_modecheck_failure", "test_if_not_location_or_after_but_before_then_line_should_be_inserted_before_before", "test_ensure_with_after_and_existing_content_should_return_same_lines", "_get_body", "test_line_assert_exception_pattern", "test_if_not_location_or_after_but_before_and_before_has_more_than_one_it_should_CommandExecutionError", "test_ensure_with_too_many_after_should_CommandExecutionError", "test_line_insert_ensure_beforeafter_rangelines", "test_insert_with_after_should_ignore_line_endings_on_comparison", "test_line_insert_end", "test_if_not_location_or_before_but_after_and_indent_False_then_line_should_be_inserted_after_after_without_indent", "test_if_location_is_not_set_but_before_and_after_are_then_line_should_appear_as_the_line_before_before", "configure_loader_modules", "test_delete_line_in_empty_file", "test_if_not_location_or_before_but_after_then_line_should_be_inserted_after_after", "test_if_location_is_end_of_file_and_indent_is_True_then_line_should_match_previous_indent", "test_line_insert_before", "test_line_insert_ensure_before_first_line", "test_set_line_should_raise_command_execution_error_with_no_mode", "test_if_delete_or_replace_is_called_with_empty_lines_it_should_warn_and_return_empty_body", "__getattr__", "test_if_mode_is_insert_and_no_lines_then_the_content_should_have_os_linesep_added", "test_if_not_location_or_after_but_before_and_indent_False_then_line_should_be_inserted_before_before_without_indent", "test_insert_after_the_last_line_should_work", "test_ensure_with_before_and_too_many_after_should_CommandExecutionError", "test_ensure_with_before_and_after_that_already_contains_the_line_should_return_original_info", "test_line_insert_after_pattern", "test_line_insert_before_after", "test_if_mode_is_replace_and_indent_is_true_then_it_should_match_indention_of_existing_line", "test_if_mode_is_delete_and_not_before_after_or_match_then_content_should_be_used_to_delete_line", "test_if_content_is_none_and_mode_is_valid_but_not_delete_it_should_raise_command_execution_error", "test_line_insert_after_no_pattern", "test_if_not_location_but_before_and_after_and_more_than_one_before_it_should_CommandExecutionError", "test_line_insert_no_location_no_before_no_after", "test_line_no_content", "test_if_mode_is_insert_and_no_location_before_or_after_then_it_should_raise_command_execution_error", "test_if_not_location_or_before_and_no_after_in_lines_it_should_CommandExecutionError", "anyattr", "test_ensure_without_before_and_after_should_CommandExecutionError", "test_if_not_location_but_before_and_after_and_more_than_one_after_it_should_CommandExecutionError", "test_insert_should_work_just_like_ensure_on_after", "__call__", "test_ensure_with_after_and_missing_content_should_add_it", "test_line_insert_ensure_after", "test_line_delete", "test_ensure_with_before_and_existing_content_should_return_same_lines", "test_line_insert_ensure_before", "test_set_line_should_raise_command_execution_error_with_unknown_mode", "test_insert_before_the_first_line_should_work", "test_if_mode_is_replace_and_not_before_after_or_match_and_content_exists_then_lines_should_not_change", "test_if_mode_is_replace_and_indent_is_false_then_it_should_just_use_content", "test_if_mode_is_insert_and_location_is_start_it_should_insert_content_at_start", "test_if_not_location_or_after_and_no_before_in_lines_it_should_CommandExecutionError", "test_if_mode_is_insert_and_lines_have_eol_then_inserted_line_should_have_matching_eol", "test_ensure_with_too_many_lines_between_before_and_after_should_CommandExecutionError", "test_line_replace", "test_insert_with_before_should_ignore_line_endings_on_comparison", "test_line_insert_ensure_beforeafter_twolines_exists", "test_ensure_with_after_and_content_at_the_end_should_not_add_duplicate", "test_if_not_location_or_before_but_after_and_after_has_more_than_one_it_should_CommandExecutionError", "get_body", "tempfile_name", "test_line_delete_no_match", "test_if_location_is_end_of_empty_file_then_it_should_just_be_content", "test_ensure_with_no_lines_between_before_and_after_should_insert_a_line", "test_line_insert_multi_line_content_after_unicode"], "function_calls": ["MagicMock", "DummyStat", "patch", "get_body", "str", "AnyAttr", "len", "mock_open"], "class_names": ["AnyAttr", "DummyStat"], "class_method_calls": ["atomic_open_mock.filehandles", "pytest.fixture", "logging.getLogger", "err.value", "exc_info.value", "content.splitlines", "expected.pop", "filemod._set_line", "_log.warning", "pytest.mark", "pytest.raises", "fake_warn.assert_called_with", "cmdmod.run", "subdir.mkdir", "file_content.split", "cm.value", "shutil.rmtree", "salt.utils", "configmod.manage_mode", "cmdmod.run_all", "os.linesep", "filemod.line"]}, "test_file_lsattr.py": {"libraries": ["salt.modules.cmdmod", "salt.modules.file", "textwrap", "salt.exceptions.SaltInvocationError", "pytest", "logging", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_SaltInvocationError_should_be_raised_when_file_is_missing", "_common_patches", "test_on_aix_lsattr_should_be_None", "test_if_lsattr_is_missing_it_should_return_None", "test_if_chattr_version_is_less_than_required_flags_should_ignore_extended", "test_if_chattr_version_is_high_enough_then_extended_flags_should_be_returned", "test_if_supports_extended_but_there_are_no_flags_then_none_should_be_returned"], "function_calls": ["patch", "set", "Mock"], "class_names": [], "class_method_calls": ["logging.getLogger", "cmdmod.run", "filemod.__salt__", "filemod.lsattr", "pytest.fixture", "textwrap.dedent", "pytest.raises", "patch.dict"]}, "test_file_module.py": {"libraries": ["salt.utils.files", "logging", "salt.modules.file", "salt.utils.stringutils", "tests.support.mock.patch", "salt.modules.cmdmod", "os", "textwrap", "salt.loader", "re", "tests.support.mock.MagicMock", "salt.modules.config", "salt.utils.jinja.SaltCacheLoader", "salt.utils.data", "salt.utils.platform", "salt.config", "pytest", "tests.support.mock.Mock", "shutil"], "function_names": ["__enter__", "test_group_to_gid_int", "sed_content", "test_cmp_attrs_extents_flag", "subdir", "test_check_file_meta_binary_contents", "test_append_newline_at_eof", "readlines", "test_patch", "test_patch_dir", "test_apply_template_on_contents", "__exit__", "test_file_move_disallow_copy_and_unlink", "test__get_flags", "test_check_file_meta_no_lsattr", "configure_loader_modules", "test_extract_hash", "test_get_diff", "test_user_to_uid_int", "__init__", "test_patch_dry_run", "test_sed_limit_escaped", "test_stats"], "function_calls": ["MagicMock", "MockFopen", "DummyStat", "Mock", "patch", "str"], "class_names": ["MockFopen", "DummyStat"], "class_method_calls": ["changes.added", "filemod.__salt__", "filemod._cmp_attrs", "pytest.fixture", "m_lsattr.return_value", "filemod.group_to_gid", "filemod.move", "filemod.get_diff", "filemod.stats", "m_which.return_value", "mock_shutil_move.assert_called_once", "filemod.append", "patch.object", "re.MULTILINE", "logging.getLogger", "mockself.path", "tfile.name", "filemod._get_flags", "tfile.flush", "text2.encode", "pytest.mark", "newfile.read", "x.split", "mock_os_rename.assert_called_once", "filemod.extract_hash", "filemod.sed", "cmdmod.run", "subdir.mkdir", "filemod.patch", "filemod.__opts__", "textwrap.dedent", "m_stats.return_value", "shutil.rmtree", "tfile.write", "sed_content.replace", "mock_shutil_move.assert_not_called", "filemod.__utils__", "salt.utils", "patch.dict", "re.IGNORECASE", "tfile.seek", "configmod.manage_mode", "filemod.check_file_meta", "os.linesep", "cmdmod.run_all", "cmd_mock.assert_called_once_with", "changes.removed", "mock_shutil_move.reset_mock", "text1.encode", "os.remove", "filemod.user_to_uid", "filemod.apply_template_on_contents", "mock_os_rename.assert_not_called", "tfile2.read"]}, "test_file_rmdir.py": {"libraries": ["salt.modules.file", "salt.exceptions.SaltInvocationError", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_file_rmdir_not_absolute_path_exception", "test_file_rmdir_success_return", "test_file_rmdir_not_found_exception", "test_file_rmdir_failure_return"], "function_calls": ["patch", "MagicMock", "OSError"], "class_names": [], "class_method_calls": ["logging.getLogger", "pytest.raises", "pytest.fixture", "filemod.rmdir"]}, "test_file_selinux.py": {"libraries": ["salt.modules.cmdmod", "os", "salt.modules.file", "salt.utils.stringutils", "salt.loader", "salt.utils.files", "salt.utils.platform", "salt.config", "tests.support.mock.MagicMock", "pytest", "logging", "salt.utils.data", "tests.support.mock.patch", "shutil"], "function_names": ["test_file_check_perms", "configure_loader_modules", "test_selinux_setcontext_persist", "test_selinux_setcontext", "tfile2", "test_selinux_setcontext_persist_change", "subdir", "test_selinux_getcontext", "tfile1", "tfile3"], "function_calls": ["str", "MagicMock", "patch"], "class_names": [], "class_method_calls": ["cmdmod.retcode", "logging.getLogger", "filemod.set_selinux_context", "cmdmod.run_all", "cmdmod.run", "subdir.mkdir", "pytest.fixture", "pytest.mark", "shutil.rmtree", "filemod.check_perms", "os.remove", "salt.modules", "salt.utils", "m_which.return_value", "filemod.get_selinux_context"]}, "test_bgp.py": {"libraries": ["pytest", "salt.runners.bgp"], "function_names": ["configure_loader_modules", "test_neighbors"], "function_calls": [], "class_names": [], "class_method_calls": ["bgp.HAS_NAPALM", "bgp.neighbors", "pytest.fixture", "pytest.mark"]}, "test_formula.py": {"libraries": ["textwrap", "tests.support.mock.MagicMock", "salt.modules.napalm_formula", "pytest", "salt.utils.immutabletypes.freeze", "tests.support.mock.patch"], "function_names": ["test_container_path", "configure_loader_modules", "test_setval", "set_model", "test_render_fields", "test_defaults", "test_render_field_junos", "set_defaults", "test_render_field"], "function_calls": ["freeze", "set", "MagicMock", "patch"], "class_names": [], "class_method_calls": ["napalm_formula.render_field", "napalm_formula.setval", "napalm_formula.defaults", "textwrap.dedent", "pytest.fixture", "napalm_formula.container_path", "napalm_formula.render_fields", "set_defaults.copy", "patch.dict", "set_model.copy", "napalm_formula.__grains__"]}, "test_mod.py": {"libraries": ["tests.support.napalm", "salt.modules.napalm_mod", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_config_kwargs_none", "test_config_kwargs_https_and_port", "test_config_kwargs_https_no_port", "test_config_kwargs_http_no_port", "test_config_kwargs_empty", "test_config_kwargs_werid_transport_port", "test_config_kwargs_http_and_port"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["logging.getLogger", "napalm_test_support.true", "pytest.fixture", "napalm_test_support.get_managed_file", "napalm_mod.pyeapi_nxos_api_args", "napalm_test_support.join", "napalm_test_support.random_hash"]}, "test_netacl.py": {"libraries": ["tests.support.napalm", "salt.modules.napalm_netacl", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_load_filter_config", "configure_loader_modules", "test_load_policy_config", "test_load_term_config", "test_get_filter_pillar", "mock_capirca_filter_config", "mock_capirca_policy_config", "mock_net_load_config", "mock_capirca_get_term_pillar", "mock_capirca_get_filter_pillar", "test_get_term_pillar", "mock_capirca_term_config"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["napalm_test_support.TEST_TERM_CONFIG", "napalm_acl.load_filter_config", "napalm_test_support.MockNapalmDevice", "napalm_test_support.true", "napalm_acl.get_term_pillar", "pytest.fixture", "napalm_acl.get_filter_pillar", "napalm_test_support.get_managed_file", "napalm_acl.load_policy_config", "napalm_acl.load_term_config", "napalm_test_support.join", "napalm_test_support.random_hash"]}, "test_ntp.py": {"libraries": ["salt.states.ntp", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_managed", "configure_loader_modules"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["ntp.__opts__", "ntp.__salt__", "ntp.managed", "ret.update", "pytest.fixture", "patch.dict"]}, "test_route.py": {"libraries": ["tests.support.napalm", "salt.modules.napalm_route", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "mock_net_load", "test_show"], "function_calls": ["patch", "MagicMock", "ValueError"], "class_names": [], "class_method_calls": ["napalm_route.show", "napalm_test_support.true", "pytest.fixture", "napalm_test_support.get_managed_file", "napalm_test_support.MockNapalmDevice", "napalm_test_support.TEST_ROUTE", "napalm_test_support.join", "napalm_test_support.random_hash"]}, "test_snmp.py": {"libraries": ["tests.support.napalm", "salt.modules.napalm_network", "salt.modules.napalm_snmp", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_remove_config", "test_update_config", "test_config"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["napalm_test_support.TEST_SNMP_INFO", "napalm_snmp.update_config", "napalm_network.load_template", "napalm_test_support.true", "pytest.fixture", "napalm_test_support.get_managed_file", "napalm_snmp.remove_config", "napalm_test_support.MockNapalmDevice", "napalm_snmp.config", "napalm_test_support.join", "napalm_test_support.random_hash"]}, "test_initial_pillar.py": {"libraries": ["salt.modules.state", "tests.support.mock.patch", "salt.loader.context"], "function_names": ["test_get_initial_pillar"], "function_calls": ["patch"], "class_names": [], "class_method_calls": ["salt.modules", "salt.loader", "ctx.named_context"]}, "test_top_file_merge.py": {"libraries": ["salt.modules.state", "salt.utils.json", "textwrap", "salt.state", "salt.utils.files", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_merge_strategy_same_default_top_foo", "limited_base_top_file", "test_merge_strategy_merge_all_state_top_saltenv_foo", "test_merge_strategy_same_state_top_saltenv_base", "cachedir", "saltenv_roots", "test_merge_strategy_merge_all_alternate_env_order", "test_merge_strategy_same_state_top_saltenv_foo", "configure_loader_modules", "test_merge_strategy_same_limited_base", "test_merge_strategy_same_state_top_saltenv_baz", "test_merge_strategy_merge", "base_top_file", "state_tree", "test_merge_strategy_merge_state_top_saltenv_foo", "test_merge_strategy_merge_all_state_top_saltenv_base", "show_top", "saltenvs", "test_merge_strategy_merge_state_top_saltenv_base", "dunder_opts", "fileserver_root", "test_merge_strategy_same", "test_merge_strategy_merge_limited_base", "test_merge_strategy_merge_all"], "function_calls": ["str", "MagicMock", "show_top"], "class_names": [], "class_method_calls": ["dunder_opts.update", "state.__opts__", "saltenv_roots.items", "fp_.write", "salt_minion_factory.config", "salt.state", "pytest.fixture", "pytest.mark", "textwrap.dedent", "state.show_top", "salt.utils", "patch.dict", "patch.object", "path.mkdir"]}, "test_acme.py": {"libraries": ["salt.states.acme", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_cert_fresh_certificate", "test_cert_renew_certificate_test", "test_cert_fresh_certificate_test", "test_cert_no_changes_test", "test_cert_no_changes", "test_cert_renew_certificate"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["acme.__opts__", "acme.cert", "pytest.fixture", "patch.dict", "acme.__salt__"]}, "test_aix_status.py": {"libraries": ["salt.modules.status", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_netdev"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["logging.getLogger", "netstats_out.assert_any_call", "status.__grains__", "netstats_out.call_count", "status.__salt__", "pytest.fixture", "status.netdev", "patch.dict"]}, "test_aixpkg.py": {"libraries": ["os", "salt.modules.aixpkg", "salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch", "salt.modules.pkg_resource"], "function_names": ["configure_loader_modules", "test_remove_failure", "test_install_fail_dnf_try_fileset", "test_install_non_rpm_using_dnf_gen_error", "lslpp_out", "test_upgrade_available_valid", "test_remove_dnf", "test_list_pkgs_no_context", "test_remove_fileset", "test_version_with_valid_names", "test_list_pkgs", "test_install_rpm_using_dnf", "test_install_fileset_with_bff_extension", "test_install_fileset_with_rte_extension", "_add_data", "test_upgrade_available_none", "test_install_fail_dnf_try_fileset_with_error", "test_version_with_invalid_names"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["dnf_installp_call.assert_called_with", "aixpkg.install", "pytest.fixture", "list_pkgs_context_mock.assert_not_called", "lslpp_call.assert_any_call", "os.path", "aixpkg.version", "ver_chk.assert_called_with", "dnf_installp_call.assert_any_call", "patch.object", "aixpkg.__salt__", "logging.getLogger", "exc_info.value", "dnf_call.call_count", "data.setdefault", "pkg_resource.format_pkg_list", "pytest.raises", "pkgs.get", "installp_call.call_count", "list_pkgs_context_mock.reset_mock", "ver_chk.call_count", "aixpkg.remove", "pkg_resource.sort_pkglist", "aixpkg.upgrade_available", "patch.dict", "dnf_installp_call.call_count", "os.linesep", "aixpkg.__grains__", "ver_chk.assert_any_call", "installp_call.assert_any_call", "aixpkg.list_pkgs", "dnf_call.assert_any_call", "lslpp_call.call_count"]}, "test_apache.py": {"libraries": ["salt.states.apache", "tests.support.mock.mock_open", "salt.utils.files", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_configfile"], "function_calls": ["patch", "MagicMock", "mock_open"], "class_names": [], "class_method_calls": ["apache.configfile", "apache.__salt__", "apache.__opts__", "pytest.fixture", "ret.update", "salt.utils", "patch.dict", "patch.object"]}, "test_artifactory.py": {"libraries": ["salt.states.artifactory", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_downloaded_test_true", "test_downloaded"], "function_calls": ["MagicMock", "Exception"], "class_names": [], "class_method_calls": ["artifactory.downloaded", "artifactory.__salt__", "pytest.fixture", "artifactory.__opts__", "patch.dict", "patch.object"]}, "test_at.py": {"libraries": ["salt.states.at", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["ret_test.update", "ret_nojobs.update", "patch.dict", "ret_user.update", "at.present", "pytest.fixture", "ret_limit.update", "mock_atatrm_tag.update", "ret_tag.update", "at.__opts__", "mock_atatrm_nojobs.update", "at.absent", "at.__salt__"]}, "test_augeas_cfg.py": {"libraries": ["salt.modules.augeas_cfg", "salt.exceptions.SaltInvocationError", "tests.support.mock.MagicMock", "pytest", "augeas.Augeas", "tests.support.mock.patch"], "function_names": ["test_execute_value_error", "configure_loader_modules", "test_get", "test_remove", "test_setvalue_uneven_path", "test_tree", "test_execute_io_error", "test_remove_io_runtime_error", "test_ls", "test_setvalue_io_error", "test_match", "test_setvalue_one_prefix", "test_match_runtime_error", "test_setvalue", "test_execute"], "function_calls": ["IOError", "MagicMock", "RuntimeError"], "class_names": [], "class_method_calls": ["augeas_cfg.remove", "augeas_cfg.tree", "augeas_cfg.execute", "augeas_cfg.get", "pytest.fixture", "pytest.mark", "augeas_cfg.setvalue", "pytest.raises", "augeas_cfg.match", "augeas_cfg.ls", "augeas_cfg.HAS_AUGEAS", "patch.object"]}, "test_baredoc.py": {"libraries": ["salt.modules.baredoc", "tests.support.paths.SALT_CODE_DIR", "pytest"], "function_names": ["test_baredoc_state_docs_multiple_args", "configure_loader_modules", "test_baredoc_module_docs_multiple_args", "test_baredoc_list_modules_args", "test_baredoc_module_docs", "test_baredoc_module_docs_single_arg", "test_baredoc_state_docs_single_arg", "test_baredoc_list_modules", "test_baredoc_list_modules_single_and_alias", "test_baredoc_list_states_args", "test_baredoc_list_states", "test_baredoc_state_docs", "test_baredoc_list_states_single"], "function_calls": [], "class_names": [], "class_method_calls": ["pytest.fixture", "baredoc.list_states", "baredoc.module_docs", "baredoc.list_modules", "baredoc.state_docs"]}, "test_bigip.py": {"libraries": ["tests.support.mock.MagicMock", "pytest", "logging", "salt.modules.bigip", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "__init__", "test__build_session_verify_ssl"], "function_calls": ["patch", "MagicMock", "RequestsSession"], "class_names": ["RequestsSession"], "class_method_calls": ["bigip._build_session", "logging.getLogger", "requests_session.auth", "pytest.fixture", "self.headers", "self.auth", "self.verify", "requests_session.verify"]}, "test_bluez_bluetooth.py": {"libraries": ["salt.utils.validate.net", "salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "salt.modules.bluez_bluetooth", "tests.support.mock.patch"], "function_names": ["test_unblock", "configure_loader_modules", "test_noscan", "test_unpair", "test_address_", "test_power", "test_start", "test_stop", "test_discoverable", "test_version", "test_block", "test_scan", "__init__", "discover_devices", "test_pair"], "function_calls": ["MagicMock", "MockBluetooth"], "class_names": ["MockBluetooth"], "class_method_calls": ["bluez.stop", "bluez.start", "bluez.block", "bluez.version", "bluez.noscan", "bluez.__salt__", "bluez.pair", "bluez.power", "bluez.unblock", "pytest.fixture", "bluez.discoverable", "bluez.address_", "pytest.raises", "salt.utils", "bluez.unpair", "patch.dict", "bluez.scan", "patch.object"]}, "test_boto_dynamodb.py": {"libraries": ["salt.states.boto_dynamodb", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["boto_dynamodb.absent", "boto_dynamodb.__salt__", "boto_dynamodb.present", "ret.update", "pytest.fixture", "patch.dict", "boto_dynamodb.__opts__"]}, "test_boto_elbv2.py": {"libraries": ["tests.support.mock.patch", "salt.modules.boto_elbv2", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test___virtual_has_boto_reqs_false", "test___virtual_has_boto_reqs_true"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["pytest.fixture", "boto_elbv2.__virtual__"]}, "test_boto_ssm.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.modules.boto_ssm"], "function_names": ["configure_loader_modules", "test___virtual_has_boto_reqs_false", "test___virtual_has_boto_reqs_true"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["boto_ssm.__virtual__", "pytest.fixture"]}, "test_bridge.py": {"libraries": ["tests.support.mock.patch", "salt.modules.bridge", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_addif", "configure_loader_modules", "test_add", "test_stp", "test_interfaces", "test_find_interfaces", "test_delif", "test_list_", "test_show", "test_delete"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["bridge.show", "bridge.add", "bridge.delete", "bridge.addif", "pytest.fixture", "bridge.__grains__", "bridge.list_", "bridge.find_interfaces", "patch.dict", "bridge.interfaces", "bridge.delif", "bridge.stp", "patch.object"]}, "test_btrfs.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.utils.platform", "salt.states.btrfs", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_subvolume_created_exists_set_default_no_force", "test_properties_default_root_subvolume", "test_properties_device_fail", "test_diff_properties_fails", "test_properties_subvolume_not_exists", "test_subvolume_created_exists_unset_cow", "test_properties_subvolume_fail", "test_properties_enable_ro_subvolume", "test_subvolume_created_exists_was_default", "test__is_cow", "test_subvolume_created_exists_set_default", "test_properties_test", "test__mount_fails", "test_subvolume_created", "test_subvolume_created_exists_test", "test__set_default", "test_diff_properties_enable_ro", "configure_loader_modules", "test_diff_properties_emty_na", "test__is_default_not_default", "test_diff_properties_only_enable_ro", "test_subvolume_created_fails", "test_diff_properties_disable_ro", "test__umount", "test__unset_cow", "test__mount", "test_subvolume_created_fails_directory", "test__is_default", "test_subvolume_created_exists_no_cow", "test__mount_use_default", "test_subvolume_created_exists", "test_subvolume_created_exists_decorator", "test__is_cow_not_cow"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["btrfs._mount", "btrfs.__opts__", "btrfs.__states__", "btrfs.__utils__", "pytest.fixture", "exists.assert_called_with", "btrfs._umount", "pytest.mark", "pytest.raises", "umount.assert_called_once", "umount.assert_called_with", "btrfs._unset_cow", "mount.assert_called_once", "umount.assert_not_called", "btrfs._is_cow", "btrfs._set_default", "salt.utils", "patch.dict", "btrfs.properties", "mkdtemp.assert_called_once", "btrfs._is_default", "btrfs._diff_properties", "btrfs.__salt__", "btrfs.subvolume_created"]}, "test_cassandra_cql.py": {"libraries": ["ssl", "salt.exceptions.CommandExecutionError", "salt.modules.cassandra_cql", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["test_cql_query", "test_invalid_protocol_version", "test_create_keyspace", "test_info", "test_list_permissions", "test_grant_permission", "test_valid_async_args", "test_list_column_families", "test_returns_opts_if_specified", "test_keyspace_exists", "configure_loader_modules", "test_list_keyspaces", "test_drop_keyspace", "test_list_users", "test_cql_query_with_prepare", "test_unspecified_opts", "test_create_user", "test_valid_asynchronous_args", "test_version"], "function_calls": ["MagicMock", "bool"], "class_names": [], "class_method_calls": ["cassandra_cql.__salt__", "pytest.fixture", "caplog.text", "cassandra_cql.list_users", "cassandra_cql.cql_query_with_prepare", "cassandra_cql._get_ssl_opts", "cassandra_cql.drop_keyspace", "cassandra_cql.cql_query", "patch.object", "logging.getLogger", "cassandra_cql.HAS_DRIVER", "cassandra_cql.grant_permission", "err.value", "cassandra_cql.keyspace_exists", "pytest.mark", "mock_execute_async.assert_called_once", "pytest.raises", "cassandra_cql.version", "cassandra_cql.__context__", "cassandra_cql.list_permissions", "cassandra_cql.create_user", "cassandra_cql.list_column_families", "ssl.PROTOCOL_TLSv1", "cassandra_cql.list_keyspaces", "cassandra_cql.create_keyspace", "patch.dict", "caplog.records", "record.levelname", "cassandra_cql.info"]}, "test_chroot.py": {"libraries": ["sys", "salt.loader.context", "salt.exceptions.CommandExecutionError", "salt.utils.platform", "salt.modules.chroot", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_in_chroot", "test_exist", "test_call_fails_salt_thin", "test_call_fails_untar", "test_highstate", "test_create", "test_call_success_parameters", "test_call_success", "test__create_and_execute_salt_state", "test_sls", "test_call_fails_input_validation"], "function_calls": ["patch", "MagicMock", "ValueError"], "class_names": [], "class_method_calls": ["isdir.side_effect", "SSHHighState.return_value", "chroot.sls", "pytest.fixture", "mkdtemp.return_value", "makedirs.assert_called", "makedirs.assert_not_called", "chroot.exist", "pytest.mark", "pytest.raises", "SSHHighState.render_highstate", "_create_and_execute_salt_state.assert_called_once", "chroot.__salt__", "SSHHighState.state", "exist.return_value", "chroot.__opts__", "_create_and_execute_salt_state.return_value", "chroot.__utils__", "salt.loader", "fopen.read", "chroot._create_and_execute_salt_state", "patch.dict", "chroot.create", "get_sls_opts.return_value", "chroot.call", "chroot.highstate", "chroot.in_chroot", "sys.version_info", "fopen.return_value"]}, "test_composer.py": {"libraries": ["salt.states.composer", "tests.support.mock.MagicMock", "pytest", "salt.exceptions.SaltException", "tests.support.mock.patch"], "function_names": ["test_installed", "configure_loader_modules", "test_update"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["composer.update", "composer.__salt__", "composer.__opts__", "ret.update", "pytest.fixture", "patch.dict", "composer.installed"]}, "test_cpan.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.modules.cpan"], "function_names": ["configure_loader_modules", "test_remove_nopan_error", "test_install_error", "test_remove_unexist_error", "test_show_mock", "test_remove_noninstalled_error", "test_install", "test_list", "test_show", "test_remove", "test_show_config"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["cpan.__salt__", "cpan.show", "cpan.show_config", "cpan.install", "pytest.fixture", "cpan.remove", "patch.dict", "patch.object", "cpan.list_"]}, "test_cryptdev.py": {"libraries": ["tests.support.mock.patch", "salt.modules.cryptdev", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_active"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["caplog.text", "pytest.fixture", "caplog.clear", "cryptdev.active", "patch.dict", "cryptdev.__salt__"]}, "test_daemontools.py": {"libraries": ["os", "salt.modules.daemontools", "salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_term", "test_full_restart", "test_reload_", "test_start", "test_stop", "test_get_all", "test_status", "test_available", "test_restart", "test_missing"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["daemontools.available", "daemontools.stop", "daemontools.reload_", "patch.dict", "daemontools.__salt__", "pytest.fixture", "daemontools.status", "pytest.raises", "daemontools.missing", "daemontools.term", "daemontools.get_all", "daemontools.start", "patch.object", "daemontools.restart"]}, "test_ddns.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.ddns", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["ddns.__opts__", "ddns.__salt__", "pytest.fixture", "ret.update", "ddns.present", "ddns.absent", "patch.dict"]}, "test_deb_apache.py": {"libraries": ["salt.modules.deb_apache", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_a2ensite", "test_a2ensite_enabled", "test_a2enmod_exception", "test_a2dismod_exception", "test_a2enconf_notfound", "test_check_site_enabled_default", "test_a2enconf", "test_check_site_enabled_false", "test_check_conf_enabled_false", "test_a2ensite_exception", "test_a2dissite_exception", "test_a2enmod_enabled", "test_a2enmod", "test_a2ensite_notfound", "test_a2disconf_notfound", "test_a2dissite_notfound", "configure_loader_modules", "test_a2disconf", "test_a2dismod_notfound", "test_a2enconf_enabled", "test_a2dissite", "test_check_conf_enabled", "test_a2disconf_exception", "test_a2disconf_disabled", "test_a2dissite_disabled", "test_a2enconf_exception", "test_a2dismod", "test_a2enmod_notfound", "test_a2dismod_disabled", "test_check_mod_enabled", "test_check_mod_enabled_false", "test_check_site_enabled"], "function_calls": ["patch", "MagicMock", "Exception", "str"], "class_names": [], "class_method_calls": ["deb_apache.check_site_enabled", "deb_apache.a2dismod", "deb_apache.__salt__", "deb_apache.a2ensite", "pytest.fixture", "deb_apache.check_conf_enabled", "deb_apache.a2dissite", "deb_apache.a2enmod", "deb_apache.a2disconf", "patch.dict", "deb_apache.a2enconf", "deb_apache.check_mod_enabled"]}, "test_deb_postgres.py": {"libraries": ["pytest", "salt.modules.deb_postgres", "logging", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_cluster_create_with_initdb_options", "test_parse_pg_lsclusters", "test_cluster_exists", "test_cluster_create", "test_cluster_delete", "test_cluster_list", "test_cluster_create_with_float", "get_lscuster"], "function_calls": ["patch", "isinstance", "Mock"], "class_names": [], "class_method_calls": ["deb_postgres.__salt__", "logging.getLogger", "deb_postgres.cluster_remove", "deb_postgres.cluster_exists", "pytest.fixture", "pytest.mark", "deb_postgres._parse_pg_lscluster", "deb_postgres.cluster_create", "deb_postgres.cluster_list"]}, "test_debconfmod.py": {"libraries": ["salt.states.debconfmod", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_set", "test_set_file"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["ret.update", "pytest.fixture", "debconfmod.__salt__", "debconfmod.set", "patch.dict", "debconfmod.set_file", "debconfmod.__opts__"]}, "test_debian_ip.py": {"libraries": ["collections.OrderedDict", "salt.modules.debian_ip", "salt.utils.odict.OrderedDict", "salt.utils.files", "jinja2.exceptions", "tests.support.mock.MagicMock", "pytest", "tempfile", "tests.support.mock.patch"], "function_names": ["test_down", "test_when_opts_are_in_data_sorted_opt_keys_should_be_added", "test_when_adapters_only_contains_source_then_source_should_be_returned", "test_parse_interfaces", "test_build_bond_data", "test_get_interface", "test_build_network_settings", "test_get_bond", "configure_loader_modules", "test_get_network_settings", "test_when_data_in_adapters_and_no_inet_or_inet6_in_data_segment_then_original_data_should_be_returned", "test_get_routes", "test_build_routes", "test_interfaces", "test_up", "test_when_no_adapters_are_passed_to_filter_none_should_be_returned", "test_build_routes_exception", "test_error_message_network_should_process_non_str_expected", "test_when_data_is_missing_from_adapters_they_should_not_be_in_result", "test_build_bond_exception", "test_error_message_iface_should_process_non_str_expected", "test_build_interface", "test_apply_network_settings", "test_build_bond"], "function_calls": ["patch", "odict", "MagicMock", "str"], "class_names": [], "class_method_calls": ["fh.writelines", "pytest.fixture", "jinja2.exceptions", "debian_ip._error_msg_iface", "debian_ip.down", "patch.object", "debian_ip.build_routes", "debian_ip._parse_interfaces", "tfile.name", "msg.endswith", "jinja2.Environment", "tempfile.NamedTemporaryFile", "pytest.mark", "debian_ip.__salt__", "pytest.raises", "debian_ip.apply_network_settings", "debian_ip._filter_malformed_interfaces", "debian_ip.get_routes", "debian_ip.__grains__", "iface.get", "debian_ip.get_network_settings", "no_inet_data_adapters.update", "debian_ip.get_interface", "debian_ip._error_msg_network", "salt.utils", "patch.dict", "debian_ip.build_interface", "debian_ip.up", "souce_only_adapters.copy", "debian_ip.get_bond", "debian_ip.build_network_settings", "debian_ip.build_bond"]}, "test_debian_service.py": {"libraries": ["salt.modules.debian_service", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "tests.support.mock.DEFAULT"], "function_names": ["configure_loader_modules", "test_reload_", "test_disabled", "test_start", "test_stop", "test_disable", "test_get_disabled", "test_enabled", "test_force_reload", "test_get_all", "test_status", "test_get_enabled", "test_enable", "test_available", "test_restart", "test_missing"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["pytest.fixture", "patch.object", "debian_service.get_all", "debian_service.__salt__", "debian_service.restart", "debian_service.get_enabled", "mock.return_value", "debian_service.enable", "debian_service.get_disabled", "debian_service.start", "debian_service.disabled", "debian_service.force_reload", "debian_service.disable", "patch.dict", "mock.assert_called_once_with", "debian_service.available", "debian_service.status", "debian_service.enabled", "debian_service.stop", "debian_service.reload_", "debian_service.missing"]}, "test_devinfo.py": {"libraries": ["textwrap", "tests.support.mock.patch", "salt.modules.devinfo", "pytest"], "function_names": ["test__hwinfo_parse_full_bios", "udev_info", "test__hwinfo_parse_full_video", "test__hwinfo_parse_full_nic", "test__hwinfo_parse_full_unknown", "test__hwinfo_parse_full_mouse", "test__hwinfo_parse_full_ethernet", "test__hwinfo_parse_full_disk", "test__hwinfo_parse_full_system", "test__hwinfo_parse_full_cpu", "configure_loader_modules", "test__hwinfo_parse_full_bridge", "test_devices", "test__hwinfo_parse_full_floppy", "test__hwinfo_parse_full_keyboard", "test__hwinfo_parse_full_network", "test_match", "test__hwinfo_parse_full_memory", "test__hwinfo_parse_short", "test_udev", "test__hwinfo_parse_full_storage"], "function_calls": [], "class_names": [], "class_method_calls": ["devinfo._hwinfo_parse_short", "devinfo._hwinfo_parse_full", "devinfo.__salt__", "devinfo._match", "devinfo._udev", "textwrap.dedent", "pytest.fixture", "devinfo.filter_", "devinfo.__grains__", "patch.dict"]}, "test_devmap.py": {"libraries": ["salt.modules.devmap", "tests.support.mock.MagicMock", "pytest", "os.path", "tests.support.mock.patch"], "function_names": ["test_multipath_flush", "configure_loader_modules", "test_multipath_list"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["devmap.__salt__", "devmap.multipath_list", "pytest.fixture", "os.path", "patch.dict", "devmap.multipath_flush", "patch.object"]}, "test_dig.py": {"libraries": ["salt.modules.dig", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_check_ip_ipv6_valid", "configure_loader_modules", "__call__", "test_aaaa", "test_check_ip_ipv6", "test_spf", "test_check_ip", "test_dig_cname_none_found", "test_ns", "test_check_ip_neg", "test_ptr", "test_spf_redir", "test_mx", "test_dig_cname_found", "test_a", "test_check_ip_empty", "test_spf_include"], "function_calls": ["patch", "MagicMock", "SpfValues"], "class_names": ["SpfValues"], "class_method_calls": ["dig.CNAME", "dig.AAAA", "dig.ptr", "dig.__salt__", "dig.MX", "dig.NS", "pytest.fixture", "dig.A", "dig.check_ip", "patch.dict", "dig.SPF", "_spf_values.get"]}, "test_djangomod.py": {"libraries": ["salt.modules.djangomod", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_django_admin_cli_migrate", "configure_loader_modules", "test_syncdb", "test_django_admin_cli_collectstatic", "test_django_admin_cli_command_with_kwargs_ignore_dunder", "test_migrate", "test_createsuperuser", "test_django_admin_cli_command", "test_django_admin_cli_createsuperuser", "no_test_loaddata", "test_loaddata", "test_django_admin_cli_command_with_args", "test_django_admin_cli_syncdb", "test_django_admin_cli_command_with_kwargs", "test_command", "test_django_admin_cli_syncdb_migrate", "test_collectstatic"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["djangomod.__salt__", "djangomod.loaddata", "djangomod.syncdb", "djangomod.migrate", "pytest.fixture", "mock.assert_called_with", "mock.call_count", "djangomod.command", "patch.dict", "djangomod.createsuperuser", "djangomod.collectstatic", "mock.assert_called_once_with"]}, "test_dnsmasq.py": {"libraries": ["os", "textwrap", "salt.exceptions.CommandExecutionError", "tests.support.mock.mock_open", "tests.support.mock.MagicMock", "pytest", "salt.modules.dnsmasq", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_get_config", "test_set_config", "test_parse_dnamasq", "test_version", "test_parse_dnsmasq_no_file", "test_set_config_filter_pub_kwargs", "test_fullversion"], "function_calls": ["patch", "MagicMock", "mock_open"], "class_names": [], "class_method_calls": ["dnsmasq._parse_dnamasq", "dnsmasq.set_config", "dnsmasq.get_config", "dnsmasq.version", "pytest.fixture", "textwrap.dedent", "dnsmasq.fullversion", "pytest.raises", "patch.dict", "dnsmasq.__salt__", "patch.object"]}, "test_dnsutil.py": {"libraries": ["salt.modules.dnsutil", "salt.utils.stringutils", "tests.support.mock.mock_open", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["mock_hosts_file", "mock_writes_list", "configure_loader_modules", "test_to_seconds_hour", "mock_soa_zone", "test_to_seconds_week", "test_to_seconds_empty", "test_to_seconds_day", "mock_hosts_file_rtn", "test_parse_hosts", "test_to_seconds_large", "test_hosts_remove", "test_hosts_append"], "function_calls": ["patch", "MagicMock", "mock_open", "len"], "class_names": [], "class_method_calls": ["dnsutil.hosts_append", "dnsutil._to_seconds", "dnsutil.hosts_remove", "m_open.write_calls", "pytest.fixture", "salt.utils", "dnsutil.parse_hosts"]}, "test_dpkg_lowpkg.py": {"libraries": ["salt.modules.dpkg_lowpkg", "os", "tests.support.mock.mock_open", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["tearDown", "configure_loader_modules", "test_file_list", "test_bin_pkg_info_spaces", "test_get_pkg_license", "test_info", "setUp", "test_bin_pkg_info_no_spaces", "test_file_dict", "test_unpurge", "test_list_pkgs", "test_unpurge_empty_package", "dpkg_L_side_effect"], "function_calls": ["patch", "MagicMock", "mock_open"], "class_names": [], "class_method_calls": ["dpkg.file_list", "dpkg.__grains__", "dpkg_lowpkg_logger.level", "pytest.fixture", "dpkg.__salt__", "os.path", "dpkg.unpurge", "patch.object", "license_read_mock.calls", "logging.getLogger", "dpkg.file_dict", "dpkg.list_pkgs", "dpkg.bin_pkg_info", "dpkg_lowpkg_logger.setLevel", "self.level", "patch.dict", "dpkg._get_pkg_license", "os.linesep", "dpkg.info", "logging.FATAL"]}, "test_drac.py": {"libraries": ["salt.states.drac", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present", "test_network"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["drac.present", "ret.update", "pytest.fixture", "drac.network", "patch.dict", "drac.__salt__", "drac.absent", "drac.__opts__"]}, "test_drbd.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.modules.drbd"], "function_names": ["test_overview", "configure_loader_modules", "test_status"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["drbd.overview", "drbd.status", "pytest.fixture", "drbd.__salt__", "patch.dict"]}, "test_environ.py": {"libraries": ["os", "salt.modules.environ", "salt.utils.platform", "salt.states.environ", "tests.support.mock.MagicMock", "pytest", "salt.modules.reg", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_setenv_permanent", "test_setenv_unset_multi", "test_setenv_test_mode", "test_setenv_int", "test_setenv_unset", "test_setenv", "test_setenv_clearall", "test_setenv_clearall_with_unset", "test_setenv_dict"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["envstate.os", "os.environ", "envstate.__utils__", "envmodule.__utils__", "pytest.fixture", "pytest.mark", "envmodule.setenv", "envstate.__opts__", "salt.utils", "patch.dict", "envstate.setenv"]}, "test_esxcluster.py": {"libraries": ["salt.exceptions", "salt.proxy.esxcluster", "jsonschema", "tests.support.mock.MagicMock", "pytest", "salt.config.schemas.esxcluster.EsxclusterProxySchema", "tests.support.mock.patch"], "function_names": ["opts_sspi", "configure_loader_modules", "test_invalid_proxy_input_error", "test_no_username", "test_esxcluster_schema", "test_merge", "test_no_principal", "test_find_credentials", "test_details_userpass", "test_no_passwords", "test_details_sspi", "opts_userpass", "test_no_domain"], "function_calls": ["patch", "MagicMock", "EsxclusterProxySchema"], "class_names": [], "class_method_calls": ["esxcluster.__pillar__", "mock_merge.assert_called_once_with", "salt.exceptions", "opts_sspi.copy", "opts_userpass.copy", "esxcluster.DETAILS", "pytest.fixture", "mock_find_credentials.assert_called_once_with", "esxcluster.init", "mock_json_validate.assert_called_once_with", "pytest.mark", "excinfo.value", "pytest.raises", "jsonschema.exceptions", "patch.dict"]}, "test_esxdatacenter.py": {"libraries": ["salt.states.esxdatacenter", "salt.exceptions.CommandExecutionError", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["tearDown", "test_dc_name_esxdatacenter_proxy", "test_state_raise_command_execution_error_test_mode", "test_get_service_instance", "test_create_datacenter", "test_nothing_to_be_done_test_mode", "test_state_get_service_instance_raise_command_execution_error", "test_dc_name_different_proxy", "test_state_raise_command_execution_error_after_si", "test_create_datacenter_test_mode", "setup_loader_modules", "setUp", "test_list_datacenters"], "function_calls": ["CommandExecutionError", "MagicMock", "delattr"], "class_names": ["DatacenterConfiguredTestCase"], "class_method_calls": ["self.assertDictEqual", "esxdatacenter.__opts__", "mock_disconnect.assert_called_once_with", "self.assertEqual", "patcher.stop", "self.addCleanup", "patcher.start", "mock_list_datacenters.assert_called_once_with", "self.mock_si", "mock_create_datacenter.assert_called_once_with", "esxdatacenter.datacenter_configured", "patch.dict", "mock_disconnect.call_count", "self.mock_dc", "mock_get_service_instance.assert_called_once_with", "esxdatacenter.__salt__"]}, "test_ethtool.py": {"libraries": ["salt.states.ethtool", "salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_ethtool_pause"], "function_calls": ["CommandExecutionError", "MagicMock"], "class_names": [], "class_method_calls": ["ethtool.__salt__", "pytest.fixture", "ethtool.__opts__", "mock_set.assert_not_called", "patch.dict", "mock_set.assert_called_once_with", "mock_set.reset_mock", "ethtool.pause"]}, "test_extfs.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.modules.extfs", "pytest"], "function_names": ["configure_loader_modules", "test_attributes", "test_tune", "test_mkfs", "test_blocks", "test_dump"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["extfs.dump", "extfs.tune", "pytest.fixture", "extfs.attributes", "extfs.mkfs", "extfs.blocks", "patch.dict", "extfs.__salt__"]}, "test_firewalld.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.firewalld", "pytest"], "function_names": ["configure_loader_modules", "test_masquerade"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["patch.dict", "firewalld.present", "firewalld.__dict__", "pytest.fixture"]}, "test_freebsd_sysctl.py": {"libraries": ["salt.modules.freebsd_sysctl", "salt.modules.systemd_service", "tests.support.helpers.dedent", "salt.exceptions.CommandExecutionError", "tests.support.mock.mock_open", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_get", "configure_loader_modules", "test_persist_updated_tunable", "test_persist_updated", "test_persist_in_memory", "test_assign_failed", "test_persist_no_conf_failure", "test_show", "test_assign_success", "test_persist_nochange"], "function_calls": ["patch", "dedent", "MagicMock", "mock_open"], "class_names": [], "class_method_calls": ["freebsd_sysctl.show", "pytest.fixture", "freebsd_sysctl.assign", "pytest.raises", "freebsd_sysctl.__salt__", "freebsd_sysctl.persist", "patch.dict", "freebsd_sysctl.get"]}, "test_genesis.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.modules.genesis", "pytest"], "function_names": ["configure_loader_modules", "test_pack", "test_avail_platforms", "test_bootstrap", "test_unpack"], "function_calls": ["patch", "MagicMock", "Exception", "repr"], "class_names": [], "class_method_calls": ["genesis.avail_platforms", "genesis.pack", "genesis.__salt__", "genesis.bootstrap", "pytest.fixture", "pacman_patch.assert_called_with", "patch.dict", "genesis.unpack", "patch.object"]}, "test_gentoo_service.py": {"libraries": ["salt.modules.gentoo_service", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "tests.support.mock.call"], "function_names": ["test_reload_", "test_stop", "test_getall", "test_service_list_parser", "test_disabled", "test_disable", "test_restart", "test_enable", "configure_loader_modules", "test_get_enabled_single_runlevel", "test_start", "test_enabled", "__services", "test_get_enabled_filters_out_disabled_services", "test_get_disabled", "test_status", "test_get_enabled_with_multiple_runlevels", "test_available", "test_zap", "test_missing"], "function_calls": ["call", "len", "MagicMock", "__services"], "class_names": [], "class_method_calls": ["rc_update_mock.side_effect", "rc_update_mock.assert_called_once_with", "rc_update_mock.call_count", "gentoo_service.stop", "pytest.fixture", "gentoo_service.missing", "patch.object", "gentoo_service.get_disabled", "gentoo_service.disable", "gentoo_service.start", "rc_update_mock.assert_has_calls", "gentoo_service.enabled", "rc_update_mock.reset_mock", "gentoo_service.__salt__", "gentoo_service.get_all", "gentoo_service.status", "gentoo_service.restart", "gentoo_service.reload_", "gentoo_service.disabled", "patch.dict", "gentoo_service.get_enabled", "mock.assert_called_once_with", "gentoo_service.zap", "gentoo_service.available", "gentoo_service.enable"]}, "test_glassfish.py": {"libraries": ["salt.modules.glassfish", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["test__api_delete", "configure_loader_modules", "test__api_post", "test__api_get"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["logging.getLogger", "glassfish._api_get", "glassfish._api_post", "post_mock.assert_called_once_with", "get_mock.assert_called_once_with", "pytest.fixture", "glassfish._api_delete", "glassfish.DEFAULT_SERVER", "delete_mock.assert_called_once_with"]}, "test_glusterfs.py": {"libraries": ["salt.states.glusterfs", "tests.support.mock.MagicMock", "pytest", "salt.utils.network", "tests.support.mock.patch", "salt.utils.cloud"], "function_names": ["configure_loader_modules", "test_volume_present", "test_op_version", "test_max_op_version", "test_add_volume_bricks", "test_started", "test_peered"], "function_calls": ["MagicMock", "sorted"], "class_names": [], "class_method_calls": ["mock_info.side_effect", "mock_get_version.return_value", "mock_set_version.return_value", "glusterfs.max_op_version", "glusterfs.__opts__", "pytest.fixture", "mock_get_max_op_version.return_value", "ret.update", "mock_list.return_value", "patch.object", "glusterfs.started", "mock_status.side_effect", "mock_peer.return_value", "glusterfs.peered", "glusterfs.op_version", "glusterfs.volume_present", "mock_status.return_value", "mock_list.side_effect", "salt.utils", "patch.dict", "glusterfs.__salt__", "mock_info.return_value", "mock_host_ips.return_value", "glusterfs.add_volume_bricks", "mock_create.return_value"]}, "test_gnomedesktop.py": {"libraries": ["salt.states.gnomedesktop", "pytest"], "function_names": ["test_desktop_lockdown", "configure_loader_modules", "test_wm_preferences", "test_desktop_interface"], "function_calls": [], "class_names": [], "class_method_calls": ["gnomedesktop.wm_preferences", "gnomedesktop.desktop_interface", "pytest.fixture", "gnomedesktop.desktop_lockdown"]}, "test_google_chat.py": {"libraries": ["salt.modules.google_chat", "tests.support.mock.patch", "pytest"], "function_names": ["configure_loader_modules", "test_send_message_failure", "mocked_http_query", "test_send_message_success", "mocked_http_query_failure"], "function_calls": [], "class_names": [], "class_method_calls": ["patch.dict", "gchat.__utils__", "gchat.send_message", "pytest.fixture"]}, "test_grub_legacy.py": {"libraries": ["errno", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "tests.support.mock.mock_open", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "salt.modules.grub_legacy"], "function_names": ["test_version", "configure_loader_modules", "test_conf"], "function_calls": ["patch", "MagicMock", "mock_open", "IOError"], "class_names": [], "class_method_calls": ["errno.EACCES", "grub_legacy.version", "grub_legacy.conf", "pytest.fixture", "grub_legacy.__salt__", "pytest.raises", "salt.utils", "patch.dict", "patch.object"]}, "test_guestfs.py": {"libraries": ["tests.support.mock.MagicMock", "pytest", "salt.modules.guestfs", "tests.support.mock.patch", "tests.support.mock.call"], "function_names": ["test_umount", "configure_loader_modules", "test_mount"], "function_calls": ["patch", "call", "MagicMock"], "class_names": [], "class_method_calls": ["run_mock.reset_mock", "run_mock.call_args_list", "pytest.fixture", "pytest.mark", "run_mock.assert_called_once_with", "makedirs_mock.assert_called_once", "guestfs.umount", "guestfs.__salt__", "patch.dict", "makedirs_mock.assert_not_called", "guestfs.mount"]}, "test_hadoop.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.modules.hadoop", "pytest"], "function_names": ["configure_loader_modules", "test_dfs_absent", "test_namenode_format", "test_dfs", "test_version", "test_dfs_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["hadoop.dfs_absent", "hadoop.namenode_format", "hadoop.dfs", "hadoop.dfs_present", "pytest.fixture", "hadoop.__salt__", "hadoop.version", "patch.dict", "patch.object"]}, "test_haproxyconn.py": {"libraries": ["salt.modules.haproxyconn", "pytest"], "function_names": ["test_enable_server", "test_wait_state_false", "test_show_frontends", "test_get_weight", "test_list_backends", "test_list_frontends", "sendCmd", "getWeight", "listServers", "test_list_servers", "configure_loader_modules", "test_set_weight", "test_disable_server", "disableServer", "test_wait_state_true", "test_get_backend", "test_show_backends", "showFrontends", "showBackends", "__init__", "enableServer"], "function_calls": ["Mockhaproxy", "Mockcmds", "sorted"], "class_names": ["MockHaConn", "Mockhaproxy", "Mockcmds"], "class_method_calls": ["haproxyconn.list_servers", "haproxyconn.disable_server", "self.ha_cmd", "haproxyconn.list_frontends", "pytest.fixture", "haproxyconn.show_backends", "haproxyconn.get_backend", "self.objectify", "self.backend", "self.weight", "haproxyconn.set_weight", "self.server", "haproxyconn.show_frontends", "haproxyconn.list_backends", "haproxyconn.enable_server", "haproxyconn.get_weight", "haproxyconn.wait_state", "self.cmds"]}, "test_hashutil.py": {"libraries": ["salt.modules.hashutil", "tests.support.mock.patch", "pytest"], "function_names": ["configure_loader_modules", "test_sha256_digest", "test_hmac_signature", "test_base64_encodestring", "the_string_sha512", "test_hmac_compute", "the_string", "the_string_base64", "test_md5_digest", "the_string_hmac_compute", "the_string_md5", "the_string_hmac", "the_string_sha256", "test_github_signature", "test_sha512_digest", "test_github_signature_uses_hmac_compare_digest", "test_base64_decodestring", "the_string_github"], "function_calls": ["patch"], "class_names": [], "class_method_calls": ["hashutil.hmac_compute", "hashutil.base64_encodestring", "hashutil.sha512_digest", "hashutil.md5_digest", "hashutil.sha256_digest", "hmac_compare.assert_called_once", "pytest.fixture", "pytest.mark", "hashutil.hmac_signature", "hashutil.github_signature", "hashutil.base64_decodestring"]}, "test_helm.py": {"libraries": ["salt.states.helm", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_repo_updated_is_testing", "test_release_present_is_testing", "test_repo_managed_import_failed_repo_manage", "test_repo_updated_import_failed", "test_repo_managed_is_testing", "test_release_absent_success", "test_release_present_import_failed_helm_status", "test_repo_updated_success", "test_release_present_import_failed_helm_upgrade", "test_repo_updated_failed", "test_repo_managed_success", "test_repo_managed_success_with_update", "test_release_absent_error", "configure_loader_modules", "test_release_present_import_failed_helm_install", "test_release_absent_import_failed_helm_status", "test_repo_managed_import_failed_repo_update", "test_release_absent_is_testing", "test_release_absent_import_failed_helm_uninstall", "test_repo_managed_failed"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["helm.__opts__", "result_wanted.update", "helm.release_absent", "pytest.fixture", "helm.repo_updated", "helm.repo_managed", "patch.dict", "helm.__salt__", "helm.release_present"]}, "test_hg.py": {"libraries": ["os", "salt.states.hg", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_latest_no_update_no_changes", "test_latest_update_changes", "test_latest_no_update_changes", "test_latest"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["pytest.fixture", "hg.latest", "hg.__salt__", "os.path", "patch.dict", "update_mock.called", "hg.__opts__", "patch.object"]}, "test_ilo.py": {"libraries": ["salt.modules.file", "salt.modules.ilo", "tests.support.mock.MagicMock", "pytest", "tempfile", "tests.support.mock.patch"], "function_names": ["test_execute_cmd", "test_enable_ssh", "test_delete_ssh_key", "test_get_user", "test_change_password", "test_configure_network", "test_set_http_port", "test_set_ssh_key", "test_list_users_info", "test_delete_user", "test_set_https_port", "test_disable_dhcp", "configure_loader_modules", "test_global_settings", "test_network", "test_list_users", "test_change_username", "test_disable_ssh", "test_set_ssh_port", "test_create_user", "test_configure_snmp", "test_enable_dhcp"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["ilo.__salt__", "pytest.fixture", "ilo.list_users", "ilo.delete_ssh_key", "patch.object", "ilo.network", "ilo.change_password", "ilo.disable_ssh", "ilo.get_user", "ilo.enable_ssh", "ilo.configure_network", "ilo.configure_snmp", "ilo.global_settings", "ilo.set_https_port", "ilo.set_http_port", "patch.dict", "tempfile.gettempdir", "ilo.set_ssh_key", "ilo.change_username", "ilo.list_users_info", "ilo.delete_user", "ilo.disable_dhcp", "salt.modules", "ilo.set_ssh_port", "ilo.enable_dhcp", "ilo.create_user"]}, "test_incron.py": {"libraries": ["salt.states.incron", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["incron.__opts__", "ret.update", "pytest.fixture", "incron.__salt__", "incron.absent", "incron.present", "patch.dict"]}, "test_introspect.py": {"libraries": ["tests.support.mock.patch", "salt.modules.introspect", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_running_service_owners", "test_service_highstate", "test_enabled_service_owners"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["introspect.__salt__", "introspect.service_highstate", "pytest.fixture", "introspect.running_service_owners", "patch.dict", "introspect.enabled_service_owners"]}, "test_iosconfig.py": {"libraries": ["salt.utils.odict.OrderedDict", "textwrap", "salt.modules.iosconfig", "pytest"], "function_names": ["candidate_config", "configure_loader_modules", "merge_config", "test_tree", "test_merge_text", "test_merge_diff", "test_merge_tree", "running_config", "test_clean", "test_diff_text"], "function_calls": ["OrderedDict"], "class_names": [], "class_method_calls": ["expected_diff.splitlines", "iosconfig.clean", "iosconfig.diff_text", "textwrap.dedent", "pytest.fixture", "iosconfig.merge_text", "iosconfig.merge_diff", "iosconfig.tree", "iosconfig.merge_tree", "diff.splitlines"]}, "test_iptables.py": {"libraries": ["tests.support.mock.MagicMock", "salt.utils.state", "pytest", "salt.states.iptables", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_append", "test_insert", "test_set_policy", "test_flush", "test_delete", "test_chain_absent", "test_chain_present", "test_mod_aggregate"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["iptables.append", "iptables.mod_aggregate", "iptables.chain_present", "mock_get_saved_rules.mock_calls", "iptables.delete", "iptables.flush", "pytest.fixture", "ret.update", "iptables.__opts__", "iptables.set_policy", "state_utils.gen_tag", "iptables.chain_absent", "patch.dict", "mock_save.mock_calls", "iptables.__salt__", "patch.object", "iptables.insert"]}, "test_junos.py": {"libraries": ["salt.proxy.junos", "jxmlease", "jnpr.junos.device.Device", "tests.support.mock.ANY", "jnpr.junos.exception.ConnectError", "pytest", "io", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "opts", "test_init", "test_init_err", "test_alive"], "function_calls": ["patch"], "class_names": [], "class_method_calls": ["junos.alive", "junos.init", "pytest.fixture", "pytest.mark", "junos.thisproxy", "mock_connect.assert_called_with", "io.BytesIO", "mock_connect.side_effect"]}, "test_keyboard.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.states.keyboard"], "function_names": ["configure_loader_modules", "test_xorg", "test_system"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["keyboard.system", "ret.update", "keyboard.__salt__", "pytest.fixture", "patch.dict", "keyboard.__opts__", "keyboard.xorg"]}, "test_kmod.py": {"libraries": ["salt.states.kmod", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_present", "test_present_multi", "test_absent", "test_absent_multi"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["kmod.__salt__", "pytest.fixture", "ret.update", "call_ret.pop", "patch.dict", "kmod.absent", "kmod.__opts__", "kmod.present"]}, "test_kubeadm.py": {"libraries": ["salt.modules.kubeadm", "salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_config_images_list_error", "test_alpha_kubelet_config_enable_dynamic_params", "test_config_upload_from_file_params", "test_alpha_certs_renew_params", "test_config_print_init_defaults_error", "test_config_view_params", "test_alpha_kubeconfig_user_error", "test_config_images_pull_params", "test_config_migrate", "test_config_upload_from_file", "test_reset_error", "test_token_delete_error", "test_token_list_multiple_lines", "test_token_delete_params", "test_init_error", "test_config_view_error", "test_alpha_selfhosting_pivot_error", "test_token_list_broken_lines", "test_config_print_join_defaults", "test_config_print_join_defaults_params", "test_join", "test_config_print_init_defaults", "test_token_list_params", "test_token_create_error", "test_config_images_list_params", "test_alpha_kubeconfig_user_params", "test_alpha_kubeconfig_user", "test_config_upload_from_flags_error", "test_config_images_pull", "test_join_params", "test_token_generate", "test_config_print_init_defaults_params", "test_token_list_error", "test_alpha_selfhosting_pivot_params", "test_init_params", "test_config_images_list", "test_token_generate_params", "test_alpha_selfhosting_pivot", "test_config_view", "test_join_error", "configure_loader_modules", "test_version_params", "test_token_delete", "test_alpha_kubelet_config_download_error", "test_alpha_kubelet_config_enable_dynamic", "test_token_create_params", "test_alpha_kubelet_config_download_params", "test_token_list", "test_config_migrate_params", "test_alpha_certs_renew", "test_config_upload_from_file_error", "test_reset", "test_token_generate_error", "test_config_migrate_error", "test_config_upload_from_flags", "test_config_images_pull_error", "test_reset_params", "test_alpha_kubelet_config_download", "test_token_create", "test_init", "test_version", "test_alpha_certs_renew_error", "test_config_upload_from_flags_params", "test_token_empty", "test_alpha_kubelet_config_enable_dynamic_error", "test_config_print_join_defaults_error"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["pytest.fixture", "kubeadm.alpha_kubelet_config_download", "kubeadm.alpha_kubelet_config_enable_dynamic", "kubeadm.__salt__", "kubeadm.config_print_join_defaults", "kubeadm.alpha_certs_renew", "kubeadm.config_view", "kubeadm.init", "kubeadm.token_create", "kubeadm.config_upload_from_file", "pytest.raises", "kubeadm.alpha_selfhosting_pivot", "kubeadm.config_images_list", "kubeadm.token_delete", "kubeadm.reset", "kubeadm.token_generate", "kubeadm.config_upload_from_flags", "kubeadm.token_list", "kubeadm.version", "patch.dict", "kubeadm.config_images_pull", "kubeadm.alpha_kubeconfig_user", "kubeadm.config_print_init_defaults", "kubeadm.join", "kubeadm.config_migrate"]}, "test_launchctl_service.py": {"libraries": ["salt.modules.launchctl_service", "salt.utils.stringutils", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_stop", "test_start", "test_get_all", "test_status", "test_available", "test_restart", "test_missing"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["launchctl.available", "launchctl.__salt__", "launchctl.status", "launchctl.restart", "pytest.fixture", "launchctl.get_all", "salt.utils", "launchctl.start", "patch.dict", "launchctl.missing", "patch.object", "launchctl.stop"]}, "test_ldapmod.py": {"libraries": ["salt.modules.ldapmod", "time", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "__init__", "test_search", "search_s"], "function_calls": ["MagicMock", "MockConnect"], "class_names": ["MockConnect"], "class_method_calls": ["self.attrs", "self.scope", "ldapmod.__salt__", "pytest.fixture", "self._filter", "ldapmod.search", "self.bdn", "patch.dict", "patch.object"]}, "test_linux_lvm.py": {"libraries": ["salt.modules.linux_lvm", "tests.support.mock.MagicMock", "pytest", "os.path", "tests.support.mock.patch"], "function_names": ["test_lvresize", "test_lvcreate_extra_arguments_no_parameter", "test_pvresize", "test_lvextend", "test_pvcreate", "test_lvcreate_with_force", "test_vgextend", "test_lvdisplay", "test_pvdisplay", "test_vgdisplay", "configure_loader_modules", "test_pvremove_not_pv", "test_lvremove", "test_pvcreate_existing_pvs", "test_pvremove", "test_lvcreate_invalid_extra_parameter", "test_vgremove", "test_pvresize_not_pv", "test_vgcreate", "test_version", "test_fullversion", "test_lvcreate"], "function_calls": ["patch", "MagicMock", "all", "len"], "class_names": [], "class_method_calls": ["linux_lvm.lvremove", "pytest.fixture", "linux_lvm.vgextend", "linux_lvm.lvcreate", "linux_lvm.version", "os.path", "patch.object", "linux_lvm.vgremove", "linux_lvm.vgcreate", "linux_lvm.vgdisplay", "mock.call_args", "linux_lvm.pvremove", "linux_lvm.fullversion", "linux_lvm.lvextend", "linux_lvm.pvcreate", "linux_lvm.lvresize", "mock.assert_called_with", "linux_lvm.pvdisplay", "linux_lvm.lvdisplay", "patch.dict", "cmd_mock.call_count", "linux_lvm.pvresize", "linux_lvm.__salt__"]}, "test_linux_service.py": {"libraries": ["os", "salt.modules.linux_service", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_reload_", "test_start", "test_stop", "test_run", "test_get_all", "test_status", "test_available", "test_restart", "test_missing"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["service.available", "service.reload_", "service.__salt__", "service.run", "service.stop", "pytest.fixture", "service.status", "service.get_all", "os.path", "patch.dict", "service.start", "service.restart", "patch.object", "service.missing"]}, "test_linux_sysctl.py": {"libraries": ["salt.modules.linux_sysctl", "os", "salt.modules.systemd_service", "salt.utils.files.fopen", "salt.exceptions.CommandExecutionError", "tests.support.mock.mock_open", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_show_config_file", "test_persist_value_with_tabs_new_file", "test_persist_value_with_spaces_already_set", "test_persist_no_conf_failure", "test_persist_value_with_spaces_already_configured", "test_sanitize_sysctl_value_int", "test_assign_success", "test_get", "test_persist_parsing_file", "test_persist_value_with_spaces_update_config", "test_persist_int", "test_persist_read_conf_success", "configure_loader_modules", "test_show", "test_get_no_sysctl_binary", "test_sanitize_sysctl_value", "test_persist_no_conf_success", "test_persist_value_with_spaces_new_file", "test_assign_proc_sys_failed", "test_assign_cmd_failed"], "function_calls": ["MagicMock", "patch", "mock_open", "OSError", "str", "fopen"], "class_names": [], "class_method_calls": ["linux_sysctl.persist", "linux_sysctl.show", "linux_sysctl.get", "fopen_mock.assert_called_once", "mock_asn_cmd.assert_called_once_with", "pytest.fixture", "linux_sysctl.__context__", "os.path", "systemd.__context__", "mock_run.assert_called_once_with", "mock_run_all.assert_called_once_with", "pytest.mark", "config_file.write", "pytest.raises", "linux_sysctl._sanitize_sysctl_value", "mock_run_all.assert_not_called", "linux_sysctl.assign", "mock_cmd.assert_called_once_with", "patch.dict", "mock_cmd.assert_not_called", "config_file.read", "mock_run.assert_not_called", "linux_sysctl.__salt__", "m_open.write_calls"]}, "test_locate.py": {"libraries": ["salt.modules.locate", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_version", "test_updatedb", "test_stats", "test_locate"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["locate.version", "locate.stats", "locate.updatedb", "pytest.fixture", "locate.locate", "patch.dict", "locate.__salt__"]}, "test_logadm.py": {"libraries": ["salt.modules.logadm", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_remove", "test_show_conf", "test_rotate"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["logadm.__salt__", "logadm.show_conf", "pytest.fixture", "logadm.remove", "patch.dict", "logadm.rotate", "patch.object"]}, "test_logrotate.py": {"libraries": ["salt.modules.logrotate", "salt.exceptions.SaltInvocationError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_get", "configure_loader_modules", "test_set_failed", "test_show_conf", "test_set_setting", "test_set", "PARSE_CONF", "test_set_setting_failed"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["logrotate.set_", "logrotate.__salt__", "logrotate.get", "log_mock.warn", "pytest.fixture", "logrotate.show_conf", "log_mock.debug", "pytest.raises", "patch.dict", "patch.object"]}, "test_lvs.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.modules.lvs"], "function_names": ["configure_loader_modules", "test_clear", "test_edit_service", "test_add_service", "test_check_server", "test_get_rules", "test_delete_service", "test_delete_server", "test_add_server", "test_list_", "test_zero", "test_check_service", "test_edit_server"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["lvs.zero", "lvs.__salt__", "lvs.add_server", "lvs.list_", "lvs.add_service", "lvs.get_rules", "lvs.check_service", "pytest.fixture", "lvs.edit_server", "lvs.check_server", "lvs.clear", "lvs.delete_server", "patch.dict", "lvs.edit_service", "lvs.delete_service", "patch.object"]}, "test_macpackage.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.macpackage", "pytest"], "function_names": ["configure_loader_modules", "test_installed_pkg_version_succeeds", "test_installed_dmg", "test_installed_pkg_exists", "test_installed_app_exists", "test_unmounted_dir_cleans_up", "test_installed_pkg_version_fails", "test_failed_unmount_leaves_dir", "test_installed_app", "test_installed_pkg", "test_installed_app_dmg", "test_installed_pkg_only_if_pass", "test_installed_app_dmg_exists", "test_installed_dmg_exists"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["get_pkg_id_mock.called", "cmd_mock.assert_called_once_with", "rmtree_mock.assert_not_called", "patch.dict", "macpackage.__salt__", "rmtree_mock.assert_called_once_with", "exists_mock.return_value", "get_pkg_id_mock.assert_called_once_with", "pytest.fixture", "pytest.mark", "install_mock.called", "mount_mock.assert_called_once_with", "installed_mock.called", "install_mock.assert_called_once_with", "macpackage.installed", "installed_mock.assert_called_once_with", "unmount_mock.assert_called_once_with"]}, "test_mandrill.py": {"libraries": ["salt.modules.mandrill", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_deprecation_58640", "configure_loader_modules", "test_send", "fn_test_send"], "function_calls": ["send", "MagicMock", "str"], "class_names": [], "class_method_calls": ["mandrill.send", "pytest.fixture", "pytest.raises", "mandrill.HAS_REQUESTS", "patch.object"]}, "test_mdadm_raid.py": {"libraries": ["salt.states.mdadm_raid", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["mdadm.__salt__", "mdadm.absent", "pytest.fixture", "mdadm.__opts__", "mdadm.present", "patch.dict"]}, "test_mod_random.py": {"libraries": ["salt.modules.mod_random", "hashlib", "salt.exceptions.SaltInvocationError", "re", "pytest", "salt.exceptions.SaltException", "salt.utils.pycrypto", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_str_encode", "_test_hashlib", "test_shadow_hash", "test_get_str", "test_hash"], "function_calls": ["hasattr", "_test_hashlib", "len"], "class_names": [], "class_method_calls": ["mod_random.hash", "mod_random.get_str", "pytest.fixture", "pytest.mark", "mod_random.str_encode", "pytest.raises", "salt.utils", "mod_random.shadow_hash", "patch.object", "re.search"]}, "test_modjk.py": {"libraries": ["salt.states.modjk", "pytest"], "function_names": ["test_worker_recover", "test_worker_stopped", "test_worker_disabled", "list_not_str", "test_worker_activated"], "function_calls": [], "class_names": [], "class_method_calls": ["modjk.worker_disabled", "modjk.worker_recover", "ret.update", "pytest.fixture", "modjk.worker_stopped", "modjk.worker_activated"]}, "test_mongodb.py": {"libraries": ["salt.modules.mongodb", "pymongo", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_find", "test_user_exists", "test_user_remove", "test_db_exists", "command", "delete_one", "list_collection_names", "test_db_list", "test_user_list", "test_user_remove_exception", "test_collections_list", "test_insert", "test_user_create_exception", "list_database_names", "configure_loader_modules", "test_user_grant_roles", "test_user_roles_exists", "insert_many", "test_user_revoke_roles", "find", "test_user_create", "test_collection_create", "test_version", "__init__", "authenticate", "drop_database", "test_remove", "create_collection"], "function_calls": ["MagicMock", "MockPyMongoCollection", "patch", "MockMongoConnect", "MockInsertResult", "MockPyMongoDatabase", "MockDeleteResult"], "class_names": ["MockPyMongoCollection", "MockMongoConnect", "MockInsertResult", "MockPyMongoDatabase", "MockDeleteResult"], "class_method_calls": ["self.kwargs", "mongodb.user_grant_roles", "mongodb.user_list", "mongodb.version", "pytest.fixture", "mongodb.collection_create", "self.my_collection", "self.acknowledged", "patch.object", "self.deleted_count", "self.inserted_ids", "pytest.mark", "mongodb.insert", "mongodb.remove", "collection_delete_one_mock.acknowledged", "mongodb.__salt__", "mongodb.user_create", "mongodb.db_list", "collection_delete_one_mock.raw_result", "collection_delete_one_mock.deleted_count", "patch.dict", "mongodb.user_roles_exists", "mongodb.find", "self.args", "mongodb.collections_list", "mongodb.db_exists", "mongodb.user_remove", "mongodb.user_revoke_roles", "pymongo.errors", "mongodb.user_exists", "self.raw_result"]}, "test_monit.py": {"libraries": ["salt.modules.monit", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_monitor", "test_id", "test_unmonitor", "test_start", "test_stop", "test_validate", "test_version", "test_summary", "test_status", "test_reload", "test_configtest", "test_reset_id", "test_restart"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["monit.id_", "monit.validate", "monit.version", "monit.configtest", "monit.start", "pytest.fixture", "monit.__salt__", "monit.monitor", "monit.summary", "monit.stop", "monit.status", "monit.restart", "patch.dict", "monit.unmonitor", "monit.reload_"]}, "test_moosefs.py": {"libraries": ["salt.modules.moosefs", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_dirinfo", "test_fileinfo", "test_getgoal", "test_mounts"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["moosefs.dirinfo", "pytest.fixture", "moosefs.fileinfo", "moosefs.mounts", "patch.dict", "moosefs.__salt__", "moosefs.getgoal"]}, "test_mount.py": {"libraries": ["os", "salt.states.mount", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_mount_opts_change_lazy_umount", "test_fstab_absent_test_absent", "test_fstab_absent_aix_present", "test_mounted", "test_mod_watch", "test_fstab_present_aix_test_present", "test_fstab_present_test_new", "test_unmounted", "test_fstab_present_present", "test_fstab_present_test_error", "test__convert_to_device_token", "test_fstab_absent_absent", "test_fstab_present_change", "test_fstab_present_test_present", "configure_loader_modules", "test__convert_to_token_device", "test__convert_to_fast_token", "test_fstab_present_aix_present", "test_fstab_absent_macos_present", "test_fstab_present_fail", "test_fstab_present_test_change", "test_fstab_absent_test_present", "test_fstab_present_macos_present", "test__convert_to_fast_device", "test_fstab_present_macos_test_present", "test__convert_to_device_none", "test_bind_mount_copy_active_opts", "test_swap", "test_fstab_present_new_no_mount", "test_fstab_absent_present", "test_fstab_absent_macos_test_absent", "test_fstab_absent_aix_test_absent", "test_mounted_multiple_mounts", "test_fstab_present_new", "test__convert_to_fast_none"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["mount.fstab_absent", "pytest.fixture", "ret.update", "mount.fstab_present", "os.path", "patch.object", "mount.mod_watch", "mount.__salt__", "pytest.mark", "mount._convert_to", "set_fstab_mock.assert_called_with", "mount.__opts__", "name.replace", "mount.unmounted", "patch.dict", "mount.swap", "mount.__grains__", "mount.mounted", "mock_set_fstab.assert_called_with"]}, "test_msteams.py": {"libraries": ["salt.modules.msteams", "tests.support.mock.MagicMock", "pytest", "salt.modules.config", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_post_card"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["http_mock.assert_called_once_with", "pytest.fixture", "config.get", "msteams.post_card", "minion_opts.update"]}, "test_munin.py": {"libraries": ["salt.modules.munin", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_list_plugins", "configure_loader_modules", "test_run", "test_run_all"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["munin.run", "munin.list_plugins", "munin.__salt__", "pytest.fixture", "munin.run_all", "patch.dict"]}, "test_nagios.py": {"libraries": ["os", "salt.modules.nagios", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_list_plugins", "test_run_pillar", "test_run", "test_retcode", "test_run_all_pillar", "test_run_all", "test_retcode_pillar"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["nagios.retcode", "nagios.run_all", "nagios.run_pillar", "nagios.run", "nagios.__salt__", "nagios.retcode_pillar", "nagios.run_all_pillar", "pytest.fixture", "nagios.list_plugins", "patch.dict", "patch.object"]}, "test_nexus.py": {"libraries": ["salt.states.nexus", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_downloaded"], "function_calls": ["MagicMock", "Exception"], "class_names": [], "class_method_calls": ["nexus.downloaded", "pytest.fixture", "nexus.__salt__", "patch.dict", "patch.object"]}, "test_nfs3.py": {"libraries": ["tests.support.mock.mock_open", "tests.support.mock.MagicMock", "pytest", "salt.modules.nfs3", "tests.support.mock.patch"], "function_names": ["test_del_export", "configure_loader_modules", "test_list_exports"], "function_calls": ["patch", "MagicMock", "mock_open"], "class_names": [], "class_method_calls": ["nfs3.list_exports", "nfs3.del_export", "patch.object", "pytest.fixture"]}, "test_nftables.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.states.nftables"], "function_names": ["configure_loader_modules", "test_append", "test_insert", "test_set_policy", "test_table_absent", "test_flush", "test_table_present", "test_delete", "test_chain_absent", "test_chain_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["nftables.set_policy", "nftables.chain_present", "nftables.__opts__", "nftables.table_absent", "nftables.append", "nftables.insert", "ret.update", "pytest.fixture", "nftables.flush", "nftables.delete", "nftables.chain_absent", "patch.dict", "nftables.table_present", "nftables.__salt__", "patch.object"]}, "test_openbsd_sysctl.py": {"libraries": ["salt.modules.openbsd_sysctl", "salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_get", "configure_loader_modules", "test_assign_cmd_eperm", "test_assign_cmd_failed", "test_assign"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["pytest.fixture", "openbsd_sysctl.get", "pytest.raises", "openbsd_sysctl.__salt__", "patch.dict", "openbsd_sysctl.assign"]}, "test_openbsdpkg.py": {"libraries": ["salt.modules.openbsdpkg", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "tests.support.mock.call"], "function_names": ["configure_loader_modules", "__call__", "test_list_pkgs_no_context", "test_upgrade_not_available", "__init__", "test_install_pkgs", "test_list_pkgs", "_add_data", "test_upgrade", "test_upgrade_available"], "function_calls": ["patch", "call", "MagicMock", "ListPackages"], "class_names": ["ListPackages"], "class_method_calls": ["openbsdpkg.__salt__", "openbsdpkg.list_pkgs", "pytest.fixture", "list_pkgs_context_mock.reset_mock", "list_pkgs_context_mock.assert_not_called", "run_all_mock.call_count", "openbsdpkg.install", "run_stdout_mock.assert_called_once_with", "patch.dict", "self._iteration", "openbsdpkg.upgrade", "openbsdpkg.upgrade_available", "patch.object", "run_all_mock.assert_has_calls"]}, "test_openbsdrcctl_service.py": {"libraries": ["salt.modules.openbsdrcctl_service", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_disabled", "test_enabled", "rcctl", "retcode_mock", "test_status", "test_available"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["stdout_mock.reset_mock", "retcode_mock.return_value", "openbsdrcctl.disabled", "openbsdrcctl.__salt__", "openbsdrcctl.available", "pytest.fixture", "retcode_mock.assert_called_with", "openbsdrcctl.status", "patch.dict", "patch.object", "openbsdrcctl.enabled"]}, "test_openscap.py": {"libraries": ["salt.modules.openscap", "subprocess", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_openscap_xccdf_eval_success", "test_new_openscap_xccdf_eval_evaluation_error", "test_openscap_xccdf_eval_success_with_failing_rules", "test_new_openscap_xccdf_eval_success_with_extra_ovalfiles", "test_openscap_xccdf_eval_success_ignore_unknown_params", "test_openscap_xccdf_eval_evaluation_error", "policy_file", "test_openscap_xccdf_eval_fail_no_profile", "test_new_openscap_xccdf_eval_success", "test_openscap_xccdf_eval_evaluation_unknown_error", "test_openscap_xccdf_eval_fail_not_implemented_action", "test_new_openscap_xccdf_eval_success_with_failing_rules"], "function_calls": ["patch", "MagicMock", "str", "Mock"], "class_names": [], "class_method_calls": ["random_temp_dir.mkdir", "openscap.subprocess", "pytest.fixture", "openscap.shutil", "openscap.xccdf", "openscap.__salt__", "openscap.xccdf_eval", "openscap.tempfile", "subprocess.PIPE"]}, "test_openvswitch.py": {"libraries": ["tests.support.mock.patch", "salt.modules.openvswitch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_bridge_to_vlan", "test_db_set", "test_bridge_create_with_parent_may_exist", "test_db_get", "test_bridge_create_may_exist", "test_bridge_to_parent", "test_bridge_create_may_not_exist"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["openvswitch.bridge_to_parent", "openvswitch.bridge_to_vlan", "openvswitch.bridge_create", "mock.assert_called_with", "pytest.fixture", "openvswitch.db_set", "patch.dict", "openvswitch.__salt__", "openvswitch.db_get"]}, "test_oracle.py": {"libraries": ["os", "salt.modules.oracle", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_show_pillar", "test_version", "test_show_dbs", "test_show_env", "test_run_query", "test_client_version"], "function_calls": ["object", "MagicMock"], "class_names": [], "class_method_calls": ["oracle.show_dbs", "oracle.run_query", "oracle.show_env", "mock_connect.cursor", "pytest.fixture", "oracle.__salt__", "oracle.client_version", "oracle.version", "patch.dict", "patch.object", "oracle.show_pillar"]}, "test_osquery.py": {"libraries": ["salt.modules.osquery", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_deb_packages", "test_osquery_info_with_attrs", "test_deb_packages_with_attrs", "test_version", "test_kernel_modules_with_attrs", "test_kernel_modules", "test_osquery_info"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["osquery.kernel_modules", "osquery.__grains__", "osquery.deb_packages", "osquery.version", "pytest.fixture", "osquery.osquery_info", "patch.dict", "patch.object"]}, "test_pacmanpkg.py": {"libraries": ["salt.utils.systemd", "salt.modules.pacmanpkg", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_group_info", "test_pacman_install_sysupgrade_flag", "cmdlist", "test_group_list", "test_list_pkgs_no_context", "test_group_diff", "test_list_pkgs", "test_list_pkgs_as_list"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["stringifymock.assert_called_with", "pacman.__salt__", "pacman.group_list", "pacman.list_pkgs", "pacman.install", "pkgs.setdefault", "stringifymock.call_count", "pytest.fixture", "list_pkgs_context_mock.reset_mock", "list_pkgs_context_mock.assert_not_called", "sortmock.assert_called_with", "salt.utils", "patch.dict", "pacman.group_diff", "patch.object", "pacman.group_info"]}, "test_pagerduty.py": {"libraries": ["salt.states.pagerduty", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_create_event"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["ret.update", "pagerduty.__opts__", "pytest.fixture", "pagerduty.create_event", "pagerduty.__salt__", "patch.dict"]}, "test_parallels.py": {"libraries": ["salt.modules.parallels", "textwrap", "salt.exceptions.CommandExecutionError", "salt.exceptions.SaltInvocationError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test__validate_snap_name", "test__normalize_args", "test_exists", "test_stop", "test_prlctl", "test_prlsrvctl", "test_clone", "test_snapshot_id_to_name", "test_snapshot_name_to_id", "test_delete", "test_restart", "configure_loader_modules", "test_revert_snapshot", "_validate_ret", "test_start", "test_list_vms", "test_list_snapshots", "test_reset", "test__find_guids", "test_snapshot", "test_exec_", "test_status", "test_delete_snapshot"], "function_calls": ["MagicMock", "_validate_ret", "patch", "tuple", "sorted", "isinstance"], "class_names": [], "class_method_calls": ["mock_templ.assert_called_once_with", "mock_snap_name.assert_called_once_with", "mock_snap_non_strict.assert_called_once_with", "pytest.fixture", "mock_complex.assert_called_once_with", "mock_prlctl.assert_called_once_with", "mock_clone.assert_called_once_with", "parallels.clone", "parallels.exec_", "patch.object", "mock_stop.assert_called_once_with", "user_fcn.assert_called_once_with", "cap_fcn.assert_called_once_with", "mock_linked.assert_called_once_with", "parallels._find_guids", "pytest.raises", "parallels.start", "mock_snap.assert_called_once_with", "parallels.status", "parallels.prlsrvctl", "set_fcn.assert_called_once_with", "parallels.snapshot_name_to_id", "mock_delete.assert_called_once_with", "mock_delete.assert_any_call", "parallels.revert_snapshot", "exec_fcn.assert_called_once_with", "parallels.list_snapshots", "parallels.restart", "textwrap.dedent", "parallels.snapshot_id_to_name", "parallels.list_vms", "parallels.reset", "parallels.stop", "mock_kill.assert_called_once_with", "patch.dict", "info_fcn.assert_called_once_with", "usb_fcn.assert_called_once_with", "parallels.delete", "mock_template.assert_called_once_with", "mock_plain.assert_called_once_with", "mock_start.assert_called_once_with", "parallels.delete_snapshot", "parallels.prlctl", "mock_name.assert_called_once_with", "mock_snap_symb.assert_called_once_with", "parallels._normalize_args", "mock_snap_numb.assert_called_once_with", "parallels._validate_snap_name", "parallels.exists", "mock_info.assert_called_once_with", "parallels.snapshot", "parallels.__salt__"]}, "test_pcs.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.modules.pcs"], "function_names": ["test_data", "configure_loader_modules", "test_item_show_set_itemid_config", "test_item_show_set_itemid_constraint", "test_auth", "test_item_show_set_itemid", "test_cib_push", "__init__", "test_item_show_config_defaults", "test_is_auth", "test_cluster_setup", "test_cluster_destroy", "test_item_create", "test_cluster_node_add", "test_is_auth_old"], "function_calls": ["TstData", "MagicMock"], "class_names": ["TstData"], "class_method_calls": ["pytest.fixture", "self.password", "test_data.password", "test_data.extra_args", "exp_cmd.append", "test_data.username", "test_data.nodea", "pcs.item_show", "pcs.is_auth", "self.extra_args", "pytest.mark", "exp_cmd.extend", "pcs.cluster_setup", "test_data.cluster_name", "test_data.nodeb", "self.nodea", "self.cluster_name", "test_data.nodes", "pcs.cluster_node_add", "pcs.__salt__", "self.nodeb", "self.cib_filename", "self.username", "self.nodes", "patch.dict", "pcs.item_create", "pcs.cib_push", "test_data.cib_filename", "mock_cmd.call_args_list", "pcs.cluster_destroy", "pcs.auth"]}, "test_pdbedit.py": {"libraries": ["salt.modules.pdbedit", "hashlib", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "pytest", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_version", "test_generate_nt_hash", "setup_loader_modules", "_md4_supported"], "function_calls": ["patch", "MagicMock", "_md4_supported"], "class_names": ["PdbeditTestCase"], "class_method_calls": ["hashlib.new", "pdbedit.__virtual__", "pdbedit.generate_nt_hash", "self.assertEqual", "pytest.mark"]}, "test_pecl.py": {"libraries": ["salt.states.pecl", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_installed", "configure_loader_modules", "test_removed"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["pecl.removed", "pecl.__salt__", "pecl.__opts__", "ret.update", "pytest.fixture", "pecl.installed", "patch.dict"]}, "test_pf.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.modules.pf", "pytest"], "function_names": ["test_loglevel_openbsd", "test_load_noop", "test_table_show", "test_table_no_changes", "test_enable_when_disabled", "test_show_rules", "test_loglevel_freebsd", "test_table_expire", "test_disable_when_enabled", "test_disable_when_disabled", "configure_loader_modules", "test_table", "test_flush", "test_enable_when_enabled", "test_table_add_addresses", "test_flush_capital", "test_table_test_address", "test_load", "test_table_delete_addresses", "test_table_zero", "test_flush_without_changes", "test_show_tables", "test_show_states"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["pf.disable", "pf.__salt__", "pf.loglevel", "pf.table", "mock_cmd.assert_called_once_with", "pytest.fixture", "pf.show", "pf.flush", "pf.load", "pf.__grains__", "patch.dict", "pf.enable"]}, "test_pkg_resource.py": {"libraries": ["salt.exceptions.SaltInvocationError", "yaml", "salt.utils.yaml", "tests.support.mock.MagicMock", "pytest", "salt.utils.data", "tests.support.mock.patch", "salt.modules.pkg_resource"], "function_names": ["configure_loader_modules", "test_format_pkg_list_with_attr", "test_sort_pkglist", "test_format_pkg_list_no_attr", "test_pack_sources", "test_stringify", "test_parse_targets", "test_version", "test_version_compare", "test_repack_pkgs", "test_add_pkg", "test_version_clean", "test_check_extra_requirements"], "function_calls": ["patch", "MagicMock", "StopIteration", "sorted"], "class_names": [], "class_method_calls": ["mock_next.side_effect", "pytest.fixture", "yaml.parser", "pkg_resource.__salt__", "patch.object", "pkg_resource.add_pkg", "pkg_resource.version", "pkg_resource._repack_pkgs", "pkg_resource.__grains__", "pkg_resource.format_pkg_list", "name_arch_mapping.get", "pytest.raises", "pkg_resource.parse_targets", "pkg_resource.version_compare", "pkg_resource.pack_sources", "pkg_resource.version_clean", "pkg_resource.sort_pkglist", "pkg_resource.stringify", "patch.dict", "salt.utils", "pkg_resource.check_extra_requirements"]}, "test_pkgin.py": {"libraries": ["os", "salt.modules.pkgin", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_latest_version", "test_search", "test_file_dict"], "function_calls": ["patch", "MagicMock", "str"], "class_names": [], "class_method_calls": ["os.linesep", "pkgin.file_dict", "pkgin.search", "pytest.fixture", "patch.dict", "pkgin.latest_version", "pkgin.__salt__"]}, "test_pkgng.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.pkgng", "pytest"], "function_names": ["configure_loader_modules", "test_update_packaging_site"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["patch.dict", "pkgng.update_packaging_site", "pkgng.__salt__", "pytest.fixture"]}, "test_pkgutil.py": {"libraries": ["salt.modules.pkgutil", "salt.utils.pkg", "salt.exceptions.MinionError", "salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["test_refresh_db", "configure_loader_modules", "test_list_upgrades", "test_purge", "test_version", "test_list_pkgs_no_context", "test_latest_version", "test_install", "test_list_pkgs", "test_upgrade", "test_remove", "test_upgrade_available"], "function_calls": ["MagicMock", "Mock"], "class_names": [], "class_method_calls": ["pkgutil.__context__", "pytest.fixture", "list_pkgs_context_mock.assert_not_called", "patch.object", "pkgutil.upgrade", "pytest.raises", "pkgutil.purge", "pkgutil.remove", "pkgutil.list_upgrades", "pkgutil.version", "list_pkgs_context_mock.reset_mock", "salt.utils", "pkgutil.refresh_db", "pkgutil.__salt__", "pkgutil.install", "patch.dict", "pkgutil.upgrade_available", "pkgutil.latest_version", "pkgutil.list_pkgs"]}, "test_portage_config.py": {"libraries": ["tests.support.mock.patch", "salt.states.portage_config", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_flags", "configure_loader_modules", "test_mod_init"], "function_calls": ["patch", "MagicMock", "Exception"], "class_names": [], "class_method_calls": ["ret.update", "pytest.fixture", "portage_config.mod_init", "portage_config.flags", "patch.dict", "portage_config.__salt__"]}, "test_postfix.py": {"libraries": ["salt.modules.postfix", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_set_main", "test_requeue", "test_show_master", "test_show_main", "test_show_queue", "test_hold", "test_set_master", "test_unhold", "test_delete"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["postfix.show_queue", "postfix.unhold", "postfix.set_main", "postfix.requeue", "postfix.__salt__", "pytest.fixture", "postfix.set_master", "postfix.show_main", "postfix.delete", "postfix.hold", "patch.dict", "postfix.show_master", "patch.object"]}, "test_postgres.py": {"libraries": ["tests.support.mock.patch", "pytest", "salt.returners.postgres"], "function_names": ["test_save_load_with_bytes", "test_returner_with_bytes"], "function_calls": [], "class_names": [], "class_method_calls": ["postgres.save_load", "postgres.returner", "patch.object", "pytest.fail"]}, "test_poudriere.py": {"libraries": ["os", "salt.modules.poudriere", "tests.support.mock.mock_open", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_list_jails", "configure_loader_modules", "test_list_ports", "test_is_jail", "test_info_jail", "test_parse_config", "test_version", "test_delete_jail", "test_update_ports_tree", "test_make_pkgng_aware", "test_create_jail", "test_update_jail", "test_bulk_build", "test_create_ports_tree"], "function_calls": ["patch", "MagicMock", "mock_open"], "class_names": [], "class_method_calls": ["poudriere.parse_config", "poudriere.info_jail", "poudriere.is_jail", "pytest.fixture", "poudriere.list_jails", "poudriere.list_ports", "poudriere.create_jail", "poudriere.update_ports_tree", "poudriere.create_ports_tree", "poudriere.update_jail", "os.path", "poudriere.__salt__", "patch.dict", "poudriere.version", "poudriere.delete_jail", "poudriere.bulk_build", "patch.object", "poudriere.make_pkgng_aware"]}, "test_powerpath.py": {"libraries": ["salt.states.powerpath", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_license_absent", "test_license_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["powerpath.license_absent", "powerpath.license_present", "powerpath.__opts__", "ret.update", "pytest.fixture", "powerpath.__salt__", "patch.dict"]}, "test_proxy.py": {"libraries": ["tests.support.unit.TestCase", "salt.utils.proxy", "tests.support.mock.patch"], "function_names": ["test_is_proxytype_false", "test_is_proxytype_not_proxy", "test_is_proxytype_true"], "function_calls": ["patch"], "class_names": ["ProxyUtilsTestCase"], "class_method_calls": ["self.assertTrue", "salt.utils", "self.assertFalse"]}, "test_puppet.py": {"libraries": ["errno", "os", "salt.exceptions.CommandExecutionError", "tests.support.mock.mock_open", "salt.utils.files", "salt.modules.puppet", "salt.utils.args", "pytest", "tests.support.mock.MagicMock", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "puppet_config", "test_noop", "test_run", "test_disable", "test_facts", "test_status", "test_summary", "test_plugin_sync", "test_fact", "test_enable"], "function_calls": ["patch", "MagicMock", "mock_open", "IOError"], "class_names": [], "class_method_calls": ["errno.EACCES", "puppet.plugin_sync", "puppet.facts", "puppet.status", "puppet.run", "pytest.fixture", "puppet.noop", "puppet.enable", "puppet.fact", "pytest.raises", "salt.utils", "os.path", "patch.dict", "puppet.summary", "puppet.__salt__", "puppet.disable", "patch.object", "m_open.side_effect"]}, "test_purefa.py": {"libraries": ["tests.support.mock.create_autospec", "salt.modules.purefa", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "tests.support.mock.call"], "function_names": ["configure_loader_modules", "fake_set_host", "test_when_nqn_is_provided_and_adding_is_successful_then_result_should_be_True", "patch_get_system", "test_when_nqn_is_not_anything_set_host_should_not_have_addnqnlist_called", "test_when_nqn_is_provided_and_adding_is_successful_then_set_host_should_have_addqnlist", "test_when_nqn_is_not_then_host_update_should_not_call_set_host", "test_when_nqn_is_correctly_provided_it_should_be_set_on_the_host", "test_when_nqn_is_correctly_provided_result_should_be_True", "test_when_nqn_is_provided_but_set_host_fails_then_creation_should_be_rolled_back", "fake_delete_host", "test_when_nqn_fails_result_should_be_False"], "function_calls": ["patch", "call", "MagicMock", "create_autospec"], "class_names": [], "class_method_calls": ["fake_delete_host.assert_called_with", "purefa.host_update", "purefa._get_host", "fake_pure_storage.PureError", "pytest.fixture", "pytest.mark", "fake_set_host.assert_has_calls", "patch_get_system.return_value", "purefa.host_create", "call.kwargs", "purefa.purestorage", "fake_set_host.mock_calls", "fake_set_host.side_effect"]}, "test_purefb.py": {"libraries": ["tests.support.mock.patch", "salt.modules.purefb", "pytest"], "function_names": ["configure_loader_modules", "test_fs_extend", "test_fs_delete", "test_fs_create", "test_snap_create", "test_snap_delete", "test_snap_eradicate", "test_fs_eradicate"], "function_calls": [], "class_names": [], "class_method_calls": ["purefb.fs_delete", "purefb.snap_delete", "pytest.fixture", "purefb.fs_create", "purefb.fs_eradicate", "purefb.fs_extend", "purefb.snap_create", "patch.object", "purefb.snap_eradicate"]}, "test_pw_group.py": {"libraries": ["salt.modules.pw_group", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_add", "test_getent", "test_chgid", "test_info", "test_delete"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["pw_group.add", "pw_group.delete", "pw_group.grinfo", "pw_group.__salt__", "pytest.fixture", "pytest.mark", "pw_group.info", "pw_group.getent", "pw_group.chgid", "pw_group.__context__", "patch.dict", "patch.object"]}, "test_pyenv.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.pyenv", "pytest"], "function_names": ["test_installed", "configure_loader_modules", "test_absent", "test_install_pyenv"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["pyenv.absent", "pyenv.__salt__", "ret.update", "pytest.fixture", "pyenv.installed", "pyenv.install_pyenv", "patch.dict", "pyenv.__opts__"]}, "test_qemu_img.py": {"libraries": ["salt.modules.qemu_img", "os", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_make_image"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["qemu_img.make_image", "pytest.fixture", "os.path", "patch.dict", "qemu_img.__salt__", "patch.object"]}, "test_qemu_nbd.py": {"libraries": ["glob", "salt.modules.qemu_nbd", "tests.support.mock.MagicMock", "pytest", "os.path", "tempfile", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_clear", "test_connect", "test_init", "test_mount"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["os.sep", "qemu_nbd.__salt__", "qemu_nbd.init", "qemu_nbd.mount", "pytest.fixture", "pytest.mark", "qemu_nbd.clear", "os.path", "patch.dict", "tempfile.gettempdir", "patch.object", "qemu_nbd.connect"]}, "test_rbenv.py": {"libraries": ["salt.states.rbenv", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_installed", "configure_loader_modules", "test_absent", "test_install_rbenv"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["rbenv.__salt__", "ret.update", "pytest.fixture", "rbenv.installed", "rbenv.absent", "patch.dict", "rbenv.__opts__", "rbenv.install_rbenv"]}, "test_rdp.py": {"libraries": ["salt.states.rdp", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_enabled", "configure_loader_modules", "test_disabled"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["rdp.enabled", "ret.update", "pytest.fixture", "rdp.__salt__", "patch.dict", "rdp.__opts__", "rdp.disabled"]}, "test_rebootmgr.py": {"libraries": ["salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "salt.modules.rebootmgr", "tests.support.mock.patch"], "function_names": ["test_get_window", "test_reboot_invalid", "test_lock_machine_id", "test_set_max_group", "test_unlock", "test_is_active", "test_unlock_machine_id_group", "test_set_window", "test_lock_machine_id_group", "test_reboot", "test_set_max", "test_reboot_order", "test_unlock_machine_id", "test_get_group", "configure_loader_modules", "test_set_strategy", "test_set_strategy_default", "test_set_strategy_invalid", "test_cancel", "test_set_group", "test_get_strategy", "test_version", "test_lock", "test_status"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["rebootmgr.__salt__", "rebootmgr.is_active", "rebootmgr.reboot", "rebootmgr.version", "rebootmgr.cancel", "rebootmgr.get_strategy", "rebootmgr.set_window", "rebootmgr.unlock", "rebootmgr.get_window", "pytest.fixture", "rebootmgr.set_group", "rebootmgr.get_group", "rebootmgr.set_strategy", "pytest.raises", "rebootmgr.status", "patch.dict", "rebootmgr.lock", "rebootmgr.set_max"]}, "test_redismod.py": {"libraries": ["salt.states.redismod", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_string", "configure_loader_modules", "test_absent"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["redismod.absent", "ret.update", "pytest.fixture", "redismod.__salt__", "patch.dict", "redismod.string"]}, "test_restartcheck.py": {"libraries": ["salt.modules.cmdmod", "tests.support.mock.create_autospec", "os", "tests.support.paths.SALT_CODE_DIR", "salt.modules.systemd_service", "tests.support.mock.ANY", "tests.support.mock.MagicMock", "pytest", "io", "salt.modules.restartcheck", "tests.support.mock.patch", "salt.utils.path", "salt.modules.system"], "function_names": ["test_when_nisysapi_conf_d_path_does_not_exist_then_sysapi_changed_should_be_False", "test_when_nisysapi_path_exists_and_nilrt_files_changed_then_sysapi_changed_nilrt_should_be_True", "test_when_timestamp_file_exists_but_not_md5sum_file_then_file_changed_nilrt_should_be_True", "test_when_timestamp_file_does_not_exist_then_file_changed_nilrt_should_be_True", "test_valid_deleted_file_psth_inode", "test_valid_deleted_file_run", "test_when_nisysapi_conf_d_path_does_exist_and_count_file_exists_and_count_is_same_as_files_in_conf_d_path_but_no_nilrt_files_changed_then_sysapi_changed_should_be_False", "test_valid_deleted_file_home", "test_valid_deleted_file_deleted", "test_valid_command", "test_valid_command_b", "test_when_nilinuxrt_and_not_kernel_modules_changed_or_sysapi_files_changed_and_not_reboot_required_witnessed_then_no_reboot_should_be_required", "test_valid_deleted_file_icon_theme_cache", "test_valid_deleted_file_tmp", "test_kernel_versions_ubuntu", "test_valid_deleted_file_var_lib_nagios3_spool", "test_valid_deleted_file_var_cache_fontconfig", "test_valid_deleted_file_var_local_tmp", "test_valid_deleted_file_var_lib_nagios3_spool_checkresults", "test_valid_deleted_file_dev_zero", "test_when_nisysapi_conf_d_path_does_exist_and_count_file_exists_and_count_is_same_as_files_in_conf_d_path_and_file_changed_nilrt_then_sysapi_changed_should_be_True", "test_valid_deleted_file_var_run", "test_kernel_versions_redhat", "configure_loader_modules", "test_kernel_versions_debian", "test_valid_deleted_file_var_lib_vdr", "conf_d_not_exists", "fake_file_changed", "test_valid_deleted_file_dev_pts", "test_valid_deleted_file_sysv", "test_valid_deleted_file_var_log", "test_when_nisysapi_conf_d_path_does_exist_and_count_file_exists_and_count_is_different_than_files_in_conf_d_path_then_sysapi_changed_should_be_True", "test_when_nilinuxrt_and_not_kernel_modules_changed_or_sysapi_files_changed_and_reboot_required_witnessed_then_reboot_should_be_required", "test_valid_deleted_file_var_tmp", "test_valid_deleted_file_aio", "test_valid_deleted_file_dev_shm", "test_when_nisysapi_conf_d_path_does_exist_and_no_restart_check_file_exists_then_sysapi_changed_should_be_True", "test_valid_deleted_file_usr_lib_locale", "test_valid_deleted_file_drm", "test_valid_deleted_file_var_local_run", "test_valid_deleted_file_var_lib_postgresql", "test_valid_deleted_file_var_local_log", "timestamp_not_exists"], "function_calls": ["patch", "MagicMock", "create_autospec", "list"], "class_names": [], "class_method_calls": ["filename.endswith", "pytest.fixture", "os.path", "popen_mock.return_value", "restartcheck._valid_deleted_file", "restartcheck._kernel_versions_debian", "restartcheck._file_changed_nilrt", "io.StringIO", "pytest.mark", "pytest.raises", "restartcheck.__salt__", "cmdmod.run", "restartcheck.restartcheck", "salt.utils", "service.get_running", "patch.dict", "restartcheck._sysapi_changed_nilrt", "services.keys", "restartcheck.__grains__", "restartcheck._kernel_versions_redhat", "services.values", "system.get_reboot_required_witnessed", "popen_mock.assert_called_with"]}, "test_restconf.py": {"libraries": ["salt.utils.odict.OrderedDict", "tests.support.mock.MagicMock", "pytest", "salt.states.restconf", "tests.support.mock.patch"], "function_names": ["test_config_manage_nochanges_testmode", "configure_loader_modules", "test_fail_config_manage_blank_path", "test_fail_config_manage_blank_method", "test_fail_config_manage_blank_config", "mocking_dunder_opts_test_mode_true", "test_config_manage_nochanges_realmode", "test_config_manage_haschanges_realmode_404", "test_config_manage_haschanges_testmode", "mocking_dunder_salt_restconf_setdata_response_404", "mocking_dunder_salt_restconf_setdata_response_200", "test_config_manage_haschanges_realmode_200", "fake_path_response_primary_blank", "test_fail_config_manage_blank_name", "mocking_dunder_opts_test_mode_false"], "function_calls": ["type", "MagicMock", "dict", "str", "OrderedDict", "len"], "class_names": [], "class_method_calls": ["restconf.config_manage", "restconf.__opts__", "pytest.fixture", "patch.dict", "restconf.__salt__"]}, "test_ret.py": {"libraries": ["salt.loader", "salt.modules.ret", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_get_fun", "test_get_minions", "test_get_jids", "test_get_jid"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["ret.get_jids", "ret.get_fun", "ret.get_jid", "salt.loader", "pytest.fixture", "ret.get_minions", "patch.object"]}, "test_rh_service.py": {"libraries": ["textwrap", "tests.support.mock.MagicMock", "pytest", "salt.modules.rh_service", "tests.support.mock.patch"], "function_names": ["_m_bool", "test_stop", "test__chkconfig_is_enabled", "test_get_all", "test_disabled", "test_disable", "test_reload", "test_restart", "configure_loader_modules", "test_start", "_m_lst", "test_enabled", "test_get_enabled", "_m_ret", "RET", "test_get_disabled", "test_status", "test_enable", "test_available", "test_missing"], "function_calls": ["_m_ret", "MagicMock", "_m_bool", "_m_lst"], "class_names": [], "class_method_calls": ["rh_service.disable", "rh_service.__salt__", "pytest.fixture", "patch.object", "rh_service.start", "rh_service.get_all", "rh_service.get_enabled", "rh_service._chkconfig_is_enabled", "rh_service.stop", "rh_service.disabled", "textwrap.dedent", "rh_service.status", "rh_service.reload_", "patch.dict", "rh_service.enabled", "rh_service.missing", "rh_service.enable", "rh_service.get_disabled", "rh_service.restart", "rh_service.available"]}, "test_riak.py": {"libraries": ["tests.support.mock.patch", "pytest", "salt.modules.riak"], "function_names": ["configure_loader_modules", "test_test", "test_cluster_plan", "test_start", "test_stop", "test_cluster_join", "test_member_status", "test_cluster_leave", "test_services", "test_status", "test_cluster_commit"], "function_calls": [], "class_names": [], "class_method_calls": ["riak.stop", "riak.cluster_leave", "riak.start", "riak.cluster_join", "riak.services", "pytest.fixture", "riak.cluster_commit", "riak.status", "riak.test", "riak.member_status", "patch.object", "riak.cluster_plan"]}, "test_rpm_lowpkg.py": {"libraries": ["salt.modules.cmdmod", "salt.modules.rpm_lowpkg", "textwrap", "rpm", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "salt.utils.path", "rpm_vercmp"], "function_names": ["test_checksum_root", "test_version_cmp_rpmdev_vercmp", "test___virtual___with_no_rpm", "test___virtual___openeuler", "test_file_dict", "test_verify", "test___virtual___issabel_pbx", "test_owner", "test_info", "test_list_pkgs_root", "test_version_cmp_python", "configure_loader_modules", "test_file_list", "_called_with_root", "test_verify_root", "test_owner_root", "test_list_pkgs", "test_checksum", "test_version_cmp_rpm", "test_version_cmp_rpm_all_libraries", "test_file_list_root", "test_version_cmp_rpmutils", "test___virtual___virtuozzo", "test_file_dict_root"], "function_calls": ["patch", "_called_with_root", "isinstance", "MagicMock"], "class_names": [], "class_method_calls": ["pytest.fixture", "rpm.list_pkgs", "mock_label.called", "rpm.info", "rpm.version_cmp", "rpm.__virtual__", "rpm.file_list", "pytest.mark", "mock.call_args", "rpm.checksum", "mock_version_cmp.called", "rpm.__salt__", "rpm.verify", "pytest.skip", "textwrap.dedent", "rpm.__grains__", "salt.utils", "rpm.file_dict", "patch.dict", "cmd.startswith", "mock_rpmUtils.miscutils", "salt.modules", "rpm.owner", "mock__salt__.called", "mock_log.warning"]}, "test_rsync.py": {"libraries": ["salt.states.rsync", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_syncronized_test_true", "test_syncronized_failed", "test_syncronized"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["rsync.__salt__", "pytest.fixture", "rsync.synchronized", "patch.dict", "rsync.__opts__"]}, "test_rvm.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.states.rvm"], "function_names": ["configure_loader_modules", "test_installed_with_opts", "test__check_rvm", "test_installed_with_env", "test_gemset_present", "test_installed", "test__check_ruby", "test__check_and_install_ruby"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["rvm._check_and_install_ruby", "mock_install_ruby.assert_called_once_with", "rvm._check_ruby", "rvm.installed", "rvm._check_rvm", "patch.object", "mock_method.return_value", "pytest.fixture", "mock.call_count", "gemset_create.assert_called_once_with", "rvm.gemset_present", "rvm.__salt__", "patch.dict", "mock.assert_called_once_with"]}, "test_s3.py": {"libraries": ["salt.pillar.s3", "tests.support.mock.mock_open", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_refresh_buckets_cache_file", "configure_loader_modules"], "function_calls": ["patch", "MagicMock", "range", "mock_open"], "class_names": [], "class_method_calls": ["s3_pillar.S3Credentials", "s3_pillar.__utils__", "s3_pillar._refresh_buckets_cache_file", "mock_return_first.append", "pytest.fixture", "patch.dict", "mock_return_second.append"]}, "test_s6.py": {"libraries": ["os", "tests.support.mock.MagicMock", "pytest", "salt.modules.s6", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_term", "test_full_restart", "test_start", "test_stop", "test_get_all", "test_status", "test_reload", "test_available", "test_restart", "test_missing"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["s6.missing", "s6.available", "s6.start", "s6.get_all", "s6.restart", "pytest.fixture", "s6.stop", "s6.full_restart", "s6.__salt__", "patch.dict", "s6.term", "s6.status", "patch.object", "s6.reload_"]}, "test_salt_version.py": {"libraries": ["salt.version", "salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "salt.modules.salt_version", "tests.support.mock.patch"], "function_names": ["test_less_than_with_equal_codename", "test_less_than_with_older_codename", "test_less_than_success", "test_equal_older_codename", "test_equal_newer_codename", "test_check_release_cmp_success", "test_greater_than_with_equal_codename", "test_get_release_number_unassigned", "test_greater_than_success_new_version_with_dot", "test_equal_success", "test_less_than_do_not_crash_when_input_is_a_number", "test_less_than_success_new_version", "test_get_release_number_success", "test_greater_than_success", "test_equal_success_new_version_with_dot", "test_equal_success_new_version", "test_greater_than_success_new_version", "test_get_release_number_success_new_version_with_dot", "test_less_than_success_new_version_with_dot", "test_get_release_number_success_new_version", "test_greater_than_unassigned", "test_greater_than_with_newer_codename", "test_mocked_objects", "test_less_than_with_unassigned_codename", "test_get_release_number_no_codename", "test_check_release_cmp_no_codename", "test_equal_older_codename_new_version"], "function_calls": ["MagicMock", "patch", "str", "len", "isinstance"], "class_names": [], "class_method_calls": ["salt.version", "k.lower", "sv.new_version", "salt_version.equal", "salt_version.less_than", "pytest.raises", "sv.string", "salt_version._check_release_cmp", "salt_version.get_release_number", "salt_version.greater_than"]}, "test_saltcloudmod.py": {"libraries": ["salt.utils.json", "salt.modules.saltcloudmod", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_create"], "function_calls": ["MagicMock", "ValueError"], "class_names": [], "class_method_calls": ["pytest.fixture", "saltcloudmod.__salt__", "salt.utils", "patch.dict", "patch.object", "saltcloudmod.create"]}, "test_schedule.py": {"libraries": ["pytz.exceptions", "salt.utils.schedule", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_default_tz_offset_exc", "test_correct_tz_offset", "test_default_tz_offset"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["pytz.exceptions", "pytest.mark", "salt.utils", "s.time_offset"]}, "test_scsi.py": {"libraries": ["os", "copy", "salt.modules.scsi", "pytest", "tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.utils.path"], "function_names": ["test_rescan_all", "configure_loader_modules", "test_ls_"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["scsi.ls_", "scsi.__salt__", "copy.deepcopy", "pytest.fixture", "scsi.rescan_all", "salt.utils", "os.path", "patch.dict", "patch.object"]}, "test_seed.py": {"libraries": ["os", "salt.modules.seed", "salt.utils.odict", "salt.utils.files", "tests.support.mock.MagicMock", "pytest", "uuid", "tests.support.mock.patch", "shutil"], "function_names": ["test_mkconfig_odict", "configure_loader_modules", "test_apply_", "test_prep_bootstrap"], "function_calls": ["MagicMock", "OSError"], "class_names": [], "class_method_calls": ["seed.apply_", "os.sep", "seed.prep_bootstrap", "patch.object", "seed.__salt__", "pytest.fixture", "pytest.mark", "umount_mock.assert_called_once_with", "pytest.raises", "os.path", "salt.utils", "patch.dict", "seed.__opts__", "seed.mkconfig", "fic.read"]}, "test_selinux.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.selinux", "pytest"], "function_names": ["test_port_policy_present", "configure_loader_modules", "test_mode", "test_boolean", "test_port_policy_absent"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["selinux.__salt__", "selinux.port_policy_absent", "selinux.mode", "selinux.port_policy_present", "pytest.fixture", "pytest.mark", "ret.update", "selinux.__opts__", "selinux.boolean", "patch.dict"]}, "test_sensors.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.modules.sensors", "pytest"], "function_names": ["configure_loader_modules", "test_sense"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["patch.dict", "sensors.__salt__", "sensors.sense", "pytest.fixture"]}, "test_serverdensity_device.py": {"libraries": ["salt.states.serverdensity_device", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_monitored"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["patch.multiple", "serverdensity_device.monitored", "ret.update", "pytest.fixture"]}, "test_servicenow.py": {"libraries": ["salt.modules.servicenow", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_module_creation", "test_non_structured_query_kwarg", "__init__", "test_non_structured_query_kwarg_multi", "get", "test_non_structured_query"], "function_calls": ["MagicMock", "len"], "class_names": ["MockServiceNowClient"], "class_method_calls": ["servicenow._get_client", "servicenow.non_structured_query", "servicenow.HAS_LIBS", "pytest.fixture"]}, "test_slackware_service.py": {"libraries": ["os", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "salt.modules.slackware_service"], "function_names": ["test_if_a_rc_service_file_not_in_rcd_is_not_listed_as_available", "test_if_executable_bit_is_set_when_enable_a_disabled_service", "test_if_an_enabled_service_is_not_disabled", "test_service_reload_", "test_if_a_disabled_service_is_not_enabled", "test_service_restart", "test_service_status", "test_service_start", "test_if_a_rc_service_file_in_rcd_is_listed_as_available", "test_if_only_not_executable_rc_files_are_returned_by_get_disabled", "configure_loader_modules", "test_service_force_reload", "test_if_only_executable_rc_files_are_returned_by_get_enabled", "test_if_a_rc_service_file_in_rcd_is_not_listed_as_missing", "test_service_stop", "test_if_executable_bit_is_unset_when_disable_an_enabled_service", "mocked_rcd", "test_if_a_rc_service_file_not_in_rcd_is_listed_as_missing", "test_get_all_rc_services_minus_system_and_config_files"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["pytest.fixture", "slackware_service.enabled", "slackware_service.status", "slackware_service.get_all", "slackware_service.start", "slackware_service.restart", "os.stat_result", "slackware_service.force_reload", "slackware_service.get_disabled", "slackware_service.__salt__", "slackware_service.reload_", "patch.dict", "os_chmod.assert_called_with", "slackware_service.enable", "slackware_service.available", "slackware_service.disable", "slackware_service.disabled", "slackware_service.missing", "slackware_service.get_enabled", "slackware_service.stop"]}, "test_smf_service.py": {"libraries": ["salt.modules.smf_service", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_get_running", "test_reload_", "test_get_stopped", "test_disabled", "test_start", "test_stop", "test_disable", "test_enabled", "test_get_disabled", "test_get_all", "test_status", "test_get_enabled", "test_enable", "test_available", "test_restart", "test_missing"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["smf.get_stopped", "smf.get_all", "pytest.fixture", "smf.enable", "smf.__salt__", "smf.reload_", "smf.get_enabled", "smf.restart", "smf.enabled", "patch.object", "smf.get_disabled", "smf.disabled", "smf.start", "smf.get_running", "patch.dict", "smf.disable", "smf.status", "smf.missing", "smf.stop", "smf.available"]}, "test_smtp.py": {"libraries": ["tests.support.mock.patch", "salt.states.smtp", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_send_msg"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["smtp.__opts__", "pytest.fixture", "smtp.__salt__", "smtp.send_msg", "patch.dict"]}, "test_solaris_shadow.py": {"libraries": ["spwd", "textwrap.dedent", "tests.support.mock.MagicMock", "pytest", "salt.modules.solaris_shadow", "io", "pwd", "tests.support.mock.patch"], "function_names": ["has_not_shadow_file", "configure_loader_modules", "fake_spnam", "test_when_swpd_module_exists_and_no_results_then_results_should_be_empty", "test_when_set_password_and_name_in_shadow_then_password_should_be_changed_for_that_user", "test_set_password_should_return_False_if_passwd_in_info_is_different_than_new_password", "fake_fopen_has_etc_shadow", "test_when_name_in_etc_shadow_passwd_should_be_in_info", "test_when_set_password_and_not_has_shadow_ret_should_be_empty_dict", "test_when_pwd_fallback_is_used_and_no_name_exists_results_should_be_empty", "test_when_etc_shadow_exists_but_name_not_in_shadow_passwd_field_should_be_empty", "test_when_etc_shadow_does_not_exist_info_should_be_empty_except_for_name", "has_shadow_file", "fopen", "has_spwd", "test_when_spwd_module_exists_results_should_be_returned_from_getspnam", "fake_pwnam", "has_not_spwd"], "function_calls": ["patch", "dedent", "MagicMock"], "class_names": [], "class_method_calls": ["fake_output_shadow_file.close", "contents.split", "fake_spnam.return_value", "solaris_shadow.set_password", "io.StringIO", "pytest.fixture", "pytest.mark", "io.BytesIO", "solaris_shadow.__salt__", "contents.encode", "patch.dict", "solaris_shadow.info", "fake_fopen_has_etc_shadow.getvalue", "fake_pwnam.return_value", "fake_pwnam.side_effect", "patch.object", "fake_spnam.side_effect"]}, "test_solarisipspkg.py": {"libraries": ["sys", "salt.modules.solarisipspkg", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "pytest", "tests.support.mixins.LoaderModuleMockMixin", "salt.utils.data", "tests.support.mock.patch", "salt.modules.pkg_resource"], "function_names": ["test_install_dict_pkgs_no_version_validate_cmd", "test_install_dict_pkgs_no_version", "test_install_already_installed_single_pkg", "test_install_list_pkgs", "test_install_single_package", "check_param", "test_install_list_pkgs_validate_cmd", "test_install_dict_pkgs_with_version", "test_install_dict_pkgs_with_version_validate_cmd", "setup_loader_modules"], "function_calls": ["MagicMock"], "class_names": ["IpsTestCase"], "class_method_calls": ["self.assertEqual", "solarisips.__salt__", "self.opts", "solarisips.install", "salt.loader", "pytest.mark", "salt.config", "salt.utils", "patch.dict", "patch.object", "sys.platform"]}, "test_solarispkg.py": {"libraries": ["tests.support.mock.ANY", "salt.modules.solarispkg", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch", "tests.support.mock.call"], "function_names": ["test_install_single_named_package", "configure_loader_modules", "test_install_single_named_package_global_zone_boolean", "test_install_single_named_package_global_zone_text", "__call__", "__init__", "_add_data", "test_list_pkgs", "test_remove_single_named_package"], "function_calls": ["patch", "call", "MagicMock", "ListPackages"], "class_names": ["ListPackages"], "class_method_calls": ["logging.getLogger", "solarispkg.install", "solarispkg.list_pkgs", "pytest.fixture", "run_mock.assert_called_once_with", "solarispkg.__salt__", "run_all_mock.call_count", "solarispkg.remove", "patch.dict", "self._iteration", "run_all_mock.assert_has_calls"]}, "test_solr.py": {"libraries": ["os", "tests.support.mock.MagicMock", "pytest", "salt.modules.solr", "tests.support.mock.patch"], "function_names": ["test_set_is_polling", "test_backup", "test_delta_import", "test_signal", "test_reload_core", "test_import_status", "test_abort_import", "test_is_replication_enabled", "configure_loader_modules", "test_replication_details", "test_lucene_version", "test_full_import", "test_reload_import_config", "test_ping", "test_core_status", "test_set_replication_enabled", "test_version", "test_match_index_versions", "test_optimize"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["solr.full_import", "solr.optimize", "solr.import_status", "pytest.fixture", "solr.abort_import", "solr.replication_details", "os.path", "solr.set_replication_enabled", "patch.object", "solr.is_replication_enabled", "solr.__salt__", "solr.signal", "solr.__opts__", "solr.delta_import", "patch.dict", "solr.backup", "solr.reload_core", "solr.version", "solr.ping", "solr.set_is_polling", "solr.match_index_versions", "solr.reload_import_config", "solr.core_status", "solr.lucene_version"]}, "test_suse_ip.py": {"libraries": ["os", "salt.modules.suse_ip", "jinja2.exceptions", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "copy"], "function_names": ["test_build_interface_bond_mode_2", "test_build_interface_bond_mode_6", "test_down", "test__parse_settings_eth_hwaddr_and_macaddr", "test__parse_settings_eth_hwaddr", "_validate_miimon_conf", "test_apply_network_settings", "_test_mode_0_or_2", "test_build_interface_bond_slave", "test__parse_settings_eth_macaddr", "test_build_interface_bond_mode_5", "_get_bonding_opts", "test_build_network_settings", "test_get_interface", "test_build_interface_bond_mode_4", "configure_loader_modules", "test_get_network_settings", "test_get_routes", "test_build_interface_bond_mode_1", "test_build_routes", "test_up", "test__parse_settings_eth_ethtool_channels", "test_error_message_network_should_process_non_str_expected", "test_build_interface_bond_mode_3", "_validate_miimon_downdelay", "test_build_interface_bond_mode_0", "test_error_message_iface_should_process_non_str_expected", "test_build_interface", "_check_common_opts_bond"], "function_calls": ["_validate_miimon_conf", "MagicMock", "Exception", "_test_mode_0_or_2", "str", "_validate_miimon_downdelay", "sorted", "_check_common_opts_bond", "_get_bonding_opts"], "class_names": [], "class_method_calls": ["kwargs.pop", "suse_ip.apply_network_settings", "pytest.fixture", "jinja2.exceptions", "suse_ip._error_msg_iface", "os.path", "suse_ip.get_routes", "suse_ip.__grains__", "patch.object", "suse_ip.build_routes", "suse_ip.up", "msg.endswith", "jinja2.Environment", "pytest.raises", "suse_ip._error_msg_network", "suse_ip.get_network_settings", "line.split", "suse_ip.build_interface", "patch.dict", "cmd_run.assert_called_once_with", "suse_ip.down", "suse_ip.build_network_settings", "suse_ip.__salt__", "suse_ip._parse_settings_eth", "suse_ip.get_interface", "line.startswith", "copy.copy"]}, "test_swift.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.modules.swift", "pytest"], "function_names": ["test_delete", "configure_loader_modules", "test_put", "test_get"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["swift.get", "pytest.fixture", "swift.put", "swift.delete", "patch.object"]}, "test_sysbench.py": {"libraries": ["salt.modules.sysbench", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_fileio", "test_ping", "test_threads", "test_memory", "test_mutex", "test_cpu"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["sysbench.__salt__", "sysbench.mutex", "sysbench.threads", "pytest.fixture", "sysbench.fileio", "sysbench.cpu", "sysbench.memory", "patch.dict", "patch.object", "sysbench.ping"]}, "test_syslog_ng.py": {"libraries": ["os", "salt.modules.syslog_ng", "salt.states.syslog_ng", "salt.utils.files", "tests.support.unit.TestCase", "salt.utils.yaml", "re", "tests.support.mock.MagicMock", "tests.support.mixins.LoaderModuleMockMixin", "tempfile", "tests.support.mock.patch"], "function_names": ["test_generate_global_options_config", "test_generate_short_form_statement", "test_generate_rewrite_config", "test_generate_tcp_source_config", "_config_generator_template", "test_generate_source_config", "test_generate_given_config", "test_started_state_generate_valid_cli_command", "test_generate_filter_config", "test_generate_log_config", "test_generate_template_config", "remove_whitespaces", "setup_loader_modules", "test_write_config"], "function_calls": ["remove_whitespaces", "MagicMock"], "class_names": ["SyslogNGTestCase"], "class_method_calls": ["syslog_ng.__salt__", "syslog_ng_module.config", "f.read", "syslog_ng_module.set_config_file", "self.assertIn", "syslog_ng_module.write_version", "syslog_ng_module.write_config", "self.assertEqual", "syslog_ng_module.reload_", "syslog_ng_module.start", "syslog_ng_module.__salt__", "source.strip", "syslog_ng.config", "syslog_ng.started", "self._config_generator_template", "salt.utils", "patch.dict", "tempfile.mkstemp", "syslog_ng_module.stop", "command.endswith", "os.remove", "self.assertTrue", "os.close", "re.sub"]}, "test_systemd_service.py": {"libraries": ["os", "salt.utils.systemd", "salt.modules.systemd_service", "salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["unit_name", "test_firstboot", "test_execs", "test_firstboot_error", "systemctl_status_gte_231", "test_get_all", "list_unit_files", "test_firstboot_params", "configure_loader_modules", "mock_true", "test_get_static", "mock_run_all_failure", "test_show", "mock_success", "mock_false", "test_get_enabled", "mock_failure", "test_change_state", "mock_run_all_success", "mock_empty_list", "test_mask_unmask", "test_get_disabled", "mock_none", "test_systemctl_reload", "test_available", "systemctl_status", "test_missing"], "function_calls": ["patch", "func", "MagicMock", "getattr"], "class_names": [], "class_method_calls": ["systemctl_command.extend", "systemd.get_all", "pytest.fixture", "os.path", "systemd.firstboot", "action.rstrip", "mock_run_all_failure.assert_called_with", "systemd.__context__", "patch.object", "systemd.execs", "systemd.show", "systemd.systemctl_reload", "pytest.mark", "pytest.raises", "mock_run_all_success.assert_called_with", "systemd.unmask_", "x.replace", "systemd.__salt__", "systemd.get_enabled", "salt.utils", "systemd.get_static", "patch.dict", "systemd.get_disabled", "systemd.INITSCRIPT_PATH", "systemd.available", "systemctl_command.append", "systemd.missing", "mock_not_run.call_count"]}, "test_telegram.py": {"libraries": ["salt.modules.telegram", "tests.support.mock.Mock", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "delete", "json", "test_post_message", "get", "put"], "function_calls": ["MagicMock", "RequestResponseMock", "Mock", "RequestMock", "RequestPutResponseMock"], "class_names": ["RequestPutResponseMock", "RequestResponseMock", "RequestMock"], "class_method_calls": ["self.kwargs", "telegram.post_message", "self.args", "pytest.fixture"]}, "test_textfsm_mod.py": {"libraries": ["salt.modules.textfsm_mod", "tests.support.mock.mock_open", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_extract_cache_file_raw_text_get_file_str_false", "test_index_platform_name_grains_output_specified_no_attribute", "test_index_platform_name_grains_no_output_specified", "test_index_platform_name_grains_output_false", "test_index_not_clitable", "test_index_no_textsm_path", "test_index_platform_name_grains_output_specified", "test_extract_cache_file_false", "test_index_platform_name_grains_no_cachedir", "test_extract_cache_file_raw_text_exception", "test_extract_cache_file_raw_text_false", "test_index_no_platform", "test_extract_cache_file_valid", "test_index_no_platform_name_grains", "test_dunder_virtual"], "function_calls": ["patch", "MagicMock", "mock_open"], "class_names": [], "class_method_calls": ["textfsm_mod.__opts__", "textfsm_mod.index", "textfsm_mod.extract", "textfsm_mod.__grains__", "pytest.fixture", "textfsm_mod.clitable", "textfsm.clitable", "patch.dict", "textfsm_mod.__virtual__", "textfsm_mod.__salt__", "patch.object", "pytest.importorskip"]}, "test_tomcat.py": {"libraries": ["salt.modules.tomcat", "tests.support.mock.MagicMock", "pytest", "salt.states.tomcat", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_war_deployed_no_version", "test_undeployed", "test_wait", "test_mod_watch", "test_war_deployed"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["tomcat.war_deployed", "tomcat.mod_watch", "tomcat.__opts__", "tomcat.wait", "ret.update", "pytest.fixture", "tomcat.__salt__", "patch.dict", "tomcatmod.extract_war_version", "tomcat.undeployed"]}, "test_transactional_update.py": {"libraries": ["salt.modules.state", "salt.loader.context", "salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "salt.modules.transactional_update", "tests.support.mock.patch"], "function_names": ["test__global_params_no_self_update_continue", "test_rollback_snapshot_str", "test_in_transaction", "test_run_string", "test_single_queue_true", "test_transactional_transactional", "test_pending_transaction", "test__global_params_self_update", "test_call_success_reboot", "test_run_error", "test_commands_with_global_params", "test__pkg_params_no_packages", "test_rollback_snapshot_number", "test_sls_queue_false_failing", "test_pkg_commands", "test__global_params_no_self_update_snapshot", "test__pkg_params_args", "test_sls", "test_rollback_last", "test_highstate_queue_true", "test__pkg_params_pkgs", "configure_loader_modules", "test_rollback_error", "test_highstate_queue_false_failing", "test_single", "test_single_queue_false_failing", "test_call_fails_function", "test_call_success_no_reboot", "test__global_params_no_self_update", "test_call_success_parameters", "test_sls_queue_true", "test_call_fails_input_validation", "test__pkg_params_pkg", "test_highstate", "test__pkg_params_pkg_pkgs", "test_rollback_default", "test_run_array", "test_pending_transaction_in_transaction"], "function_calls": ["patch", "MagicMock", "ValueError", "getattr"], "class_names": [], "class_method_calls": ["tu.run", "pytest.fixture", "reboot_mock.assert_called_once", "tu.in_transaction", "pending_transaction_mock.assert_called_once", "cmd.replace", "tu._pkg_params", "pytest.mark", "pytest.raises", "tu.sls", "tu._global_params", "tu.__utils__", "tu.pending_transaction", "tu.transactional", "statemod.__salt__", "tu.__salt__", "salt.loader", "in_transaction_mock.return_value", "patch.dict", "cmd.startswith", "tu.call", "tu.rollback", "tu.single", "tu.highstate"]}, "test_tuned.py": {"libraries": ["salt.modules.tuned", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_none", "test_profile_valid", "test_profile_noexist", "test_off", "test_active_balanced", "test_v_241", "test_v_271", "test_profile_invalid", "test_v_2110_with_warnings"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["tuned.off", "tuned.__salt__", "pytest.fixture", "tuned.profile", "tuned.active", "patch.dict", "tuned.list_"]}, "test_udev.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.modules.udev", "pytest"], "function_names": ["test_normalize_info", "configure_loader_modules", "test_info", "test_exportdb"], "function_calls": ["enumerate", "MagicMock"], "class_names": [], "class_method_calls": ["ret.get", "udev.info", "pytest.fixture", "udev.__salt__", "d_section.get", "udev._normalize_info", "udev.exportdb", "patch.dict", "data.get"]}, "test_uptime.py": {"libraries": ["tests.support.mock.Mock", "salt.modules.uptime", "salt.exceptions.CommandExecutionError", "pytest"], "function_names": ["configure_loader_modules", "request_mock", "test_checks_list", "test_checks_delete", "delete", "json", "test_checks_create", "test_checks_exists", "get", "put"], "function_calls": ["RequestPutResponseMock", "Mock", "RequestResponseMock", "RequestMock"], "class_names": ["RequestPutResponseMock", "RequestResponseMock", "RequestMock"], "class_method_calls": ["self.kwargs", "self.args", "uptime.checks_list", "pytest.fixture", "request_mock.args", "pytest.raises", "uptime.create", "uptime.check_exists", "uptime.delete"]}, "test_uwsgi.py": {"libraries": ["tests.support.mock.MagicMock", "salt.modules.uwsgi", "pytest", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_uwsgi_stats"], "function_calls": ["patch", "MagicMock", "Mock"], "class_names": [], "class_method_calls": ["uwsgi.__salt__", "uwsgi.stats", "pytest.fixture", "patch.dict", "mock.assert_called_once_with"]}, "test_vagrant.py": {"libraries": ["salt.exceptions", "salt.modules.vagrant", "salt.utils.platform", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_vagrant_destroy", "test_vagrant_init_arg_override", "test_vagrant_start", "test_vagrant_get_vm_info_not_found", "local_opts", "test_vagrant_get_vm_info", "test_vagrant_get_ssh_config_fails", "test_vagrant_init_positional", "test_vagrant_init_dict"], "function_calls": ["str", "dict", "MagicMock"], "class_names": [], "class_method_calls": ["salt.exceptions", "vagrant.destroy", "mock_cmd.assert_called_with", "vagrant.__salt__", "pytest.fixture", "vagrant.start", "mock_sdb.assert_any_call", "testdict.copy", "pytest.raises", "resp.startswith", "vagrant.get_vm_info", "patch.dict", "vagrant.init", "vagrant.get_ssh_config", "vagrant.__utils__", "mock_sdb.assert_called_with"]}, "test_varnish.py": {"libraries": ["salt.modules.varnish", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_param_show", "test_purge", "test_ban_list", "test_version", "test_ban", "test_param_set"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["varnish.ban_list", "varnish.__salt__", "varnish.param_set", "varnish.ban", "pytest.fixture", "varnish.version", "varnish.purge", "varnish.param_show", "patch.dict", "patch.object"]}, "test_vmctl.py": {"libraries": ["salt.modules.vmctl", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_stop_when_running", "test_load", "test_start_existing_vm", "test_stop_when_stopped", "test_start_new_vm", "test_reset_all", "test_reset_vms", "test_reset", "test_status", "test_reload", "test_status_single", "test_create_disk", "test_reset_switches"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["vmctl.reload", "vmctl.__salt__", "vmctl.status", "vmctl.stop", "mock_cmd.assert_called_once_with", "pytest.fixture", "vmctl.load", "vmctl.start", "patch.dict", "vmctl.create_disk", "vmctl.reset"]}, "test_webutil.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.states.webutil"], "function_names": ["configure_loader_modules", "test_new_user_error", "test_no_htpasswd_file_and_user_doesnt_exist", "test_new_user_success", "test_user_exists_already"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["htpasswd_file.is_file", "pytest.fixture", "patch.dict", "htpasswd.__salt__", "htpasswd.user_exists"]}, "test_win_appx.py": {"libraries": ["salt.states.win_appx", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_absent_missing", "configure_loader_modules", "test_absent_missing_after_test", "test_absent", "test_absent_test_true"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["win_appx.__opts__", "pytest.fixture", "pytest.mark", "win_appx.__salt__", "patch.dict", "win_appx.absent"]}, "test_win_disk.py": {"libraries": ["salt.modules.win_disk", "pytest"], "function_names": ["configure_loader_modules", "__init__", "test_usage", "GetLogicalDrives"], "function_calls": ["MockWindll", "MockCtypes", "MockKernel32"], "class_names": ["MockWindll", "MockCtypes", "MockKernel32"], "class_method_calls": ["win_disk.usage", "self.windll", "self.kernel32", "pytest.fixture"]}, "test_win_dism.py": {"libraries": ["tests.support.mock.patch", "salt.states.win_dism", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_package_removed", "test_feature_removed", "test_kb_removed", "test_kb_removed_not_installed", "test_feature_installed_installed", "test_package_installed", "test_capability_installed_installed", "test_kb_removed_test", "test_package_installed_installed", "test_capability_removed", "test_capability_removed_removed", "test_feature_removed_removed", "test_package_installed_failure", "configure_loader_modules", "test_feature_removed_failure", "test_package_removed_failure", "test_feature_installed_failure", "test_capability_removed_failure", "test_feature_installed", "test_package_removed_removed", "test_kb_removed_failed", "test_capability_installed_failure", "test_capability_installed"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["dism.feature_installed", "dism.capability_removed", "pytest.fixture", "dism.package_installed", "mock_remove.assert_called_once_with", "mock_removed.assert_called_once_with", "mock_installed.assert_called_with", "mock_remove.called", "dism.capability_installed", "mock_add.assert_called_once_with", "patch.dict", "mock_add.called", "dism.feature_removed", "dism.__salt__", "mock_removed.assert_called_with", "dism.kb_removed", "dism.__opts__", "mock_installed.assert_called_once_with", "dism.package_removed"]}, "test_win_event.py": {"libraries": ["salt.modules.win_event", "datetime", "pytest"], "function_names": ["test_query_level_eventid", "test_query_records", "test_get", "test_query_last_hour", "test_count", "test__to_bytes_utf8", "test_get_filtered_event_type", "test_get_filtered_year_none", "test_query", "test_clear", "test__raw_time", "test_query_raw", "test_get_filtered", "test_clear_backup", "test__to_bytes_cp1252", "test_get_filtered_event_id", "test_get_filtered_year", "test_query_level", "application_events"], "function_calls": ["str", "isinstance", "len"], "class_names": [], "class_method_calls": ["win_event.add", "win_event.query", "win_event.get_filtered", "datetime.datetime", "win_event._to_bytes", "pytest.fixture", "pytest.mark", "backup_log.exists", "win_event.count", "win_event.clear", "win_event.get", "win_event._raw_time"]}, "test_win_file.py": {"libraries": ["os", "salt.modules.win_file", "salt.utils.user", "salt.exceptions.CommandExecutionError", "salt.utils.win_dacl", "re", "pytest", "tests.support.mock.patch"], "function_names": ["test_user_to_uid", "test_version_missing_directory", "test_chown", "test_get_pgid_error", "test__get_version_type_driver", "test_version_missing_file", "test_version_details_missing_directory", "test__get_version_dll", "test__get_version_exe", "test__virtual__not_windows", "test_mkdir", "test_get_user", "test_is_link_false", "test__virtual__no_dacl", "test_get_user_error", "test_version_details_exe", "test_group_to_gid", "test_chpgrp", "configure_loader_modules", "test_get_uid_error", "test_user_to_uid_none", "test_uid_to_user", "test__get_version_type_font", "test_version_details_dll", "test__get_version_type_application", "test_check_perms", "test_get_uid", "test_get_pgid", "test_set_perms", "test_is_link_true", "test__get_version_sys", "test__get_version_type_virtual_device", "test_uid_to_user_empty", "test_version_details_sys", "test__get_version_os", "test_group_to_gid_empty", "test_version_details_missing_file", "test_stats_mode"], "function_calls": ["patch", "str"], "class_names": [], "class_method_calls": ["test_file.touch", "pytest.fixture", "win_file._get_version", "win_file.stats", "win_file.get_user", "win_file.__opts__", "test_dir.mkdir", "pytest.mark", "pytest.raises", "os.getenv", "win_file.get_pgid", "win_file.chown", "win_file.set_perms", "win_file.check_perms", "regex.search", "win_file.group_to_gid", "win_file._get_version_os", "test_link.symlink_to", "win_file._get_version_type", "win_file.version_details", "win_file.mkdir", "salt.utils", "win_file.version", "patch.dict", "test_source.touch", "win_file.get_uid", "win_file.uid_to_user", "re.compile", "win_file.get_pgroup", "win_file.user_to_uid", "win_file.chpgrp", "win_file.is_link", "win_file.__virtual__"]}, "test_win_iis.py": {"libraries": ["salt.states.win_iis", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_container_settings_password_redacted_test_true", "test_webconfiguration_settings_collection_failure", "test_container_settings_password_redacted", "test_webconfiguration_settings_no_settings", "__base_webconfiguration_ret", "test_container_settings_password_redacted_failures", "test_webconfiguration_settings_collection"], "function_calls": ["__base_webconfiguration_ret", "MagicMock"], "class_names": [], "class_method_calls": ["win_iis.__opts__", "win_iis.__salt__", "pytest.fixture", "win_iis.webconfiguration_settings", "patch.dict", "win_iis.container_setting"]}, "test_win_lgpo_reg.py": {"libraries": ["salt.utils.files", "salt.exceptions.CommandExecutionError", "salt.utils.win_lgpo_reg", "pytest"], "function_names": ["test_reg_pol_to_dict_invalid_type", "test_dict_to_reg_pol_reg_multi_sz", "test_reg_pol_to_dict_reg_multi_sz_empty", "test_dict_to_reg_pol_reg_sz", "test_dict_to_reg_pol_reg_dword", "test_reg_pol_to_dict_empty", "test_dict_to_reg_pol_empty", "test_issue_56769_windows_line_endings", "test_dict_to_reg_pol_reg_multi_sz_empty_list_value", "test_reg_pol_to_dict_reg_multi_sz", "test_reg_pol_to_dict_empty_invalid", "test_dict_to_reg_pol_reg_multi_sz_list_single_value", "test_reg_pol_to_dict_reg_qword", "test_issue_56769_unix_line_endings", "test_dict_to_reg_pol_reg_qword", "test_dict_to_reg_pol_reg_expand_sz", "test_dict_to_reg_pol_reg_multi_sz_empty_list", "test_issue_56769_mixed_line_endings", "test_dict_to_reg_pol_invalid_type", "test_reg_pol_to_dict_reg_sz", "test_reg_pol_to_dict_reg_dword", "test_dict_to_reg_pol_reg_multi_sz_none", "test_dict_to_reg_pol_too_big", "test_reg_pol_to_dict_reg_expand_sz"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["win_lgpo_reg.dict_to_reg_pol", "fp.write", "pytest.helpers", "pytest.mark", "gpt_ini.encode", "pytest.raises", "win_lgpo_reg.write_reg_pol_data", "salt.utils", "win_lgpo_reg.reg_pol_to_dict", "fp.read"]}, "test_win_licence.py": {"libraries": ["salt.modules.win_license", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_info", "test_uninstall", "test_install", "test_installed", "test_activate", "test_installed_diff", "test_licensed"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["win_license.activate", "win_license.licensed", "pytest.fixture", "win_license.info", "win_license.__salt__", "win_license.uninstall", "patch.dict", "win_license.install", "mock.assert_called_once_with", "win_license.installed"]}, "test_win_network.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.utils.win_network"], "function_names": ["mock_wins", "mock_anycast", "mock_ip_base", "mock_gateway", "mock_unicast", "mock_dns", "test_get_network_info", "test__get_network_interfaces_no_error", "test__get_base_properties_undefined_adapter", "__init__", "mock_multicast", "test__get_base_properties_tap_adapter", "ToString", "test_get_interface_info_dot_net", "GetPhysicalAddress"], "function_calls": ["Interface", "MagicMock", "str", "len", "PhysicalAddress"], "class_names": ["PhysicalAddress", "Interface"], "class_method_calls": ["self.Id", "self.PhysicalAddress", "patch.object", "win_network.get_interface_info_dot_net", "self.Name", "pytest.fixture", "pytest.mark", "win_network._get_network_interfaces", "self.Description", "self.NetworkInterfaceType", "self.IsReceiveOnly", "win_network._get_base_properties", "self.OperationalStatus", "win_network.get_interface_info", "self.address"]}, "test_win_path.py": {"libraries": ["tests.support.mock.MagicMock", "pytest", "salt.states.win_path", "tests.support.mock.Mock", "tests.support.mock.patch", "copy"], "function_names": ["test_exists_add_no_index_failure_exception", "_mock", "test_exists_change_negative_index_success", "_test_exists_add_already_present", "test_exists_add_no_index_already_present_test_mode", "test_exists_add_index_already_present", "test_exists_add_no_index_already_present", "test_absent", "test_exists_add_no_index_failure", "test_exists_change_negative_index_test_mode", "test_exists_change_index_success", "test_exists_change_negative_index_failure", "configure_loader_modules", "name", "test_exists_change_index_test_mode", "test_exists_change_index_add_exception", "test_exists_invalid_index", "test_exists_change_index_failure", "test_exists_change_negative_index_add_exception", "test_exists_add_no_index_success", "test_exists_add_index_already_present_test_mode"], "function_calls": ["MagicMock", "_mock", "Mock", "_test_exists_add_already_present", "Exception", "len"], "class_names": [], "class_method_calls": ["rehash_mock.assert_not_called", "current_path.insert", "rehash_mock.assert_called_once", "add_mock.assert_called_once_with", "pytest.fixture", "rehash_mock.assert_called_once_with", "add_mock.assert_not_called", "win_path.__salt__", "copy.deepcopy", "current_path.append", "win_path.absent", "patch.dict", "win_path.__opts__", "win_path.exists"]}, "test_win_pki.py": {"libraries": ["salt.states.win_pki", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_remove_cert", "test_import_cert"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["win_pki.remove_cert", "win_pki.__salt__", "pytest.fixture", "patch.dict", "win_pki.__opts__", "win_pki.import_cert"]}, "test_win_powercfg.py": {"libraries": ["salt.states.win_powercfg", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_set_monitor_already_set", "test_set_monitor_test_true_with_change", "test_fail_invalid_power", "test_set_monitor", "test_fail_invalid_setting"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["pytest.fixture", "powercfg.__opts__", "powercfg.set_timeout", "patch.dict", "powercfg.__salt__"]}, "test_win_psget.py": {"libraries": ["tests.support.mock.patch", "salt.modules.win_psget", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_avail_modules", "bootstrap_ps_str", "test_bootstrap", "avail_modules_ps_str"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["win_psget.__salt__", "pytest.fixture", "win_psget.avail_modules", "patch.dict", "win_psget.bootstrap"]}, "test_win_service.py": {"libraries": ["tests.support.unit.TestCase", "salt.utils.win_service", "pytest"], "function_names": ["test_import", "test_info"], "function_calls": ["isinstance", "Exception"], "class_names": ["WinServiceImportTestCase", "WinServiceTestCase"], "class_method_calls": ["win_service.info", "self.assertEqual", "self.assertIn", "pytest.mark"]}, "test_win_shadow.py": {"libraries": ["salt.modules.win_shadow", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_info", "test_set_password"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["pytest.fixture", "win_shadow.info", "win_shadow.__salt__", "win_shadow.set_password", "patch.dict"]}, "test_win_snmp.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.win_snmp", "pytest"], "function_names": ["configure_loader_modules", "test_auth_traps_enabled", "test_agent_settings", "test_community_names"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["win_snmp.agent_settings", "win_snmp.__opts__", "kwargs.items", "win_snmp.community_names", "win_snmp.auth_traps_enabled", "pytest.fixture", "win_snmp.__salt__", "patch.dict"]}, "test_win_status.py": {"libraries": ["sys", "tests.support.mock.ANY", "tests.support.unit.TestCase", "wmi", "salt.modules.win_status", "pytest", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["test_process_user_is_set", "test_process_user_domain_is_set", "test_process_name_is_set", "test_process_user_is_utf8", "add_process", "call_procs", "test_cmd_is_empty_string", "test_process_key_is_pid", "test_process_cmd_is_utf8", "__init__", "test_process_name_is_utf8", "test_process_count", "test_error_logged_if_process_get_owner_fails", "test_user_is_set", "setUp", "test_process_cmd_is_set", "test_process_user_domain_is_utf8"], "function_calls": ["patch", "set", "len", "Mock"], "class_names": ["TestProcsBase", "TestProcsUnicodeAttributes", "TestProcsCount", "TestProcsWMIGetOwnerAccessDeniedWorkaround", "TestEmptyCommandLine", "TestProcsWMIGetOwnerErrorsAreLogged", "TestProcsAttributes"], "class_method_calls": ["self.proc", "self._expected_domain", "patch.object", "WMI.win32_process", "log.warning", "self.expected_error_code", "self.expected_user", "self.assertEqual", "self.assertSetEqual", "process.CommandLine", "pytest.mark", "status.HAS_WMI", "process.ProcessId", "self.call_procs", "self.__processes", "process.GetOwner", "self.add_process", "sys.stdin", "status.procs", "self.ustr", "self.result", "self._expected_name", "TestCase.__init__", "self._expected_cmd", "process.Name", "self._expected_user", "self.expected_domain"]}, "test_win_system.py": {"libraries": ["os", "salt.utils.win_system", "tests.support.unit.TestCase", "pytest", "tests.support.mock.patch"], "function_names": ["test_get_pending_reboot_true_1", "test_get_pending_update", "test_get_pending_servermanager_true", "test_get_pending_servermanager_false_1", "test_get_pending_dvd_reboot_true", "test_get_reboot_required_witnessed_false_1", "test_get_reboot_required_witnessed_true", "test_get_pending_reboot_details", "test_get_pending_component_servicing_true_1", "test_get_pending_update_exe_volatile_false_2", "test_get_pending_reboot_details_true", "test_get_pending_update_true_1", "test_get_pending_computer_name_none", "test_get_reboot_required_witnessed_false_2", "test_get_pending_update_exe_volatile_true_1", "test_get_computer_name", "test_set_reboot_required_witnessed", "test_get_pending_file_rename_true_1", "test_get_pending_file_rename_false_1", "test_get_pending_file_rename_false_2", "test_get_computer_name_fail", "test_get_pending_update_true_2", "test_get_pending_servermanager_false_2", "test_get_pending_computer_name", "test_import", "test_get_pending_domain_join_true_2", "test_get_pending_reboot_true_2", "test_get_pending_domain_join", "test_get_pending_computer_name_false", "test_get_pending_reboot", "test_get_pending_component_servicing_true_2", "test_get_pending_component_servicing", "test_get_pending_update_exe_volatile_false_1", "test_get_pending_dvd_reboot", "test_get_pending_component_servicing_true_3", "test_get_pending_domain_join_true_1"], "function_calls": ["patch", "isinstance", "Exception"], "class_names": ["WinSystemTestCase", "WinSystemImportTestCase"], "class_method_calls": ["self.assertDictEqual", "win_system.REBOOT_REQUIRED_NAME", "win_system.set_reboot_required_witnessed", "win_system.get_pending_domain_join", "win_system.get_pending_dvd_reboot", "self.assertEqual", "win_system.get_reboot_required_witnessed", "pytest.mark", "win_system.get_pending_servermanager", "self.assertFalse", "win_system.get_pending_reboot_details", "self.assertIsNone", "win_system.get_pending_component_servicing", "win_system.MINION_VOLATILE_KEY", "win_system.get_pending_reboot", "win_system.get_pending_update", "win_system.get_pending_update_exe_volatile", "sv.assert_called_once_with", "win_system.get_pending_computer_name", "os.environ", "win_system.get_computer_name", "self.assertTrue", "win_system.get_pending_file_rename"]}, "test_win_timezone.py": {"libraries": ["salt.modules.win_timezone", "salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_zone_compare", "test_get_hwclock", "test_get_zone_normal_dstoff", "test_get_offset", "test_get_zone_all", "test_get_zone_normal_dstoff_issue", "test_get_zone_normal", "test_set_zone", "test_get_zonecode", "test_set_hwclock", "test_get_zone_unknown", "test_get_zone_error"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["win_timezone.get_hwclock", "win_timezone.get_offset", "win_timezone.mapper", "win_timezone.set_zone", "win_timezone.get_zone", "pytest.fixture", "pytest.mark", "win_timezone.get_zonecode", "win_timezone.zone_compare", "pytest.raises", "win_timezone.HAS_PYTZ", "patch.dict", "win_timezone.__salt__", "win_timezone.set_hwclock"]}, "test_win_wua.py": {"libraries": ["salt.utils.platform", "salt.utils.win_update", "tests.support.mock.MagicMock", "salt.states.win_wua", "pytest", "tests.support.mock.patch", "collections.namedtuple"], "function_names": ["configure_loader_modules", "update_records_identity", "updates_list", "test_installed_already_installed", "count", "updates_summary", "test_removed_test_mode", "test_uptodate_test_mode", "test_uptodate", "test_uptodate_no_updates", "test_removed", "updates_list_none", "test_installed_no_updates", "test_installed", "__init__", "test_installed_test_mode", "update_records", "updates"], "function_calls": ["update_records_identity", "MagicMock", "patch", "NoUpdates", "namedtuple", "len", "update_records"], "class_names": ["Updates", "NoUpdates"], "class_method_calls": ["mock_wua.search", "self.updates", "fake_updates.list", "mock_wua.updates", "win_wua.installed", "pytest.fixture", "mock_updates.list", "win_update.WindowsUpdateAgent", "fake_wua_updates.list", "win_wua.uptodate", "patch.object", "pytest.mark", "fake_wua.updates", "wua._updates", "mock_updates.count", "salt.utils", "patch.dict", "win_wua.removed", "win_wua.__opts__"]}, "test_win_wusa.py": {"libraries": ["salt.exceptions.SaltInvocationError", "tests.support.mock.MagicMock", "pytest", "salt.states.win_wusa", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_installed_failed", "test_uninstalled_failed", "test_installed_existing", "test_installed_test_true", "test_installed_cache_fail", "test_uninstalled", "kb", "test_uninstalled_test_true", "test_installed", "test_uninstalled_non_existing", "test_installed_no_source"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["excinfo.exception", "wusa.installed", "wusa.__salt__", "wusa.__opts__", "pytest.fixture", "wusa.uninstalled", "pytest.raises", "patch.dict"]}, "test_xapi_virt.py": {"libraries": ["tests.support.mock.mock_open", "salt.modules.xapi_virt", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_stop", "test_resume", "test_vm_state", "test_vm_netstats", "test_is_hyper", "test_reboot", "test_vm_cputime", "test_setvcpus", "test_get_nics", "test_pause", "test_freemem", "test_get_macs", "configure_loader_modules", "test_start", "test_vm_diskstats", "test_vcpu_pin", "test_freecpu", "test_reset", "test_get_disks", "test_full_info", "test_shutdown", "login_with_password", "test_list_domains", "test_migrate", "__init__", "test_setmem", "test_vm_info", "logout"], "function_calls": ["patch", "MagicMock", "Mockxapi", "mock_open"], "class_names": ["Session", "session", "xenapi", "Mockxapi"], "class_method_calls": ["xapi.get_macs", "xapi.start", "pytest.fixture", "xapi.setmem", "xapi.vm_netstats", "patch.object", "xapi.freecpu", "xapi.migrate", "xapi.freemem", "xapi.is_hyper", "xapi.setvcpus", "xapi.shutdown", "xapi.list_domains", "xapi.vm_cputime", "xapi.pause", "xapi.vm_state", "xapi.get_disks", "xapi.get_nics", "xapi.__grains__", "xapi.full_info", "xapi.stop", "xapi.vm_diskstats", "xapi.vcpu_pin", "xapi.reboot", "mock_read.side_effect", "patch.dict", "xapi.resume", "xapi.reset", "xapi.__salt__", "xapi.vm_info"]}, "test_xfs.py": {"libraries": ["salt.modules.xfs", "textwrap", "pytest"], "function_names": ["configure_loader_modules", "test_blkid_output", "test_parse_xfs_info"], "function_calls": [], "class_names": [], "class_method_calls": ["textwrap.dedent", "pytest.fixture", "xfs._parse_xfs_info", "xfs._blkid_output", "pytest.mark"]}, "test_xml.py": {"libraries": ["salt.states.xml", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_value_already_present", "test_value_update_invalid_xpath", "test_value_update", "test_value_update_test"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["patch.dict", "xml.value_present", "xml.__salt__", "pytest.fixture"]}, "test_yaml.py": {"libraries": ["salt.sdb.yaml", "tests.support.mock.patch", "tests.support.mock.MagicMock"], "function_names": ["test_nested", "test_plaintext", "test_encrypted"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["sdb.get"]}, "test_zabbix.py": {"libraries": ["salt.modules.zabbix", "pytest", "salt.modules.config", "salt.exceptions.SaltException", "tests.support.mock.patch"], "function_names": ["test_usergroup_create", "test_compare_params", "test_user_exists", "test__login_getting_flat_parameters_from_config", "test__login_getting_nested_parameters_from_config", "test_user_delete", "test_get_obj_id_by_params_fail", "test_get_object_id_by_params", "test_get_mediatype", "query_return", "test_user_addmedia_v40", "run_query_bad", "mock_apiinfo_version", "test_compare_params_rollback", "test_user_list", "test_usergroup_exists", "conn_args", "test_host_inventory_get_with_a_missing_host", "test_user_get", "test_usergroup_list", "_query_return", "run_query_ok", "test_substitute_params", "test_user_update_v32", "test_user_getmedia", "mock_run_query", "test_host_inventory_set_with_inventory_mode", "configure_loader_modules", "test_apiinfo_version", "test__login_getting_empty_parameters_from_config", "test_user_addmedia", "mock__login", "test_usergroup_delete", "test_user_deletemedia_v40", "mock_login", "test_host_inventory_get_with_disabled_inventory", "test_substitute_params_fail", "test_compare_params_fail", "set_zabbix_version", "_set_zabbix_version", "test_usergroup_get", "_mock_params", "mock__query", "test_user_create", "test_user_update", "test_user_deletemedia", "test_host_inventory_set", "test_usergroup_update", "test_host_inventory_get"], "function_calls": ["query_return", "set_zabbix_version"], "class_names": [], "class_method_calls": ["pytest.fixture", "zabbix.get_object_id_by_params", "mock__query.assert_called_with", "zabbix.user_exists", "zabbix.apiinfo_version", "patch.object", "zabbix.user_addmedia", "zabbix.user_delete", "zabbix.substitute_params", "zabbix._login", "pytest.raises", "config.get", "monkeypatch.setattr", "zabbix.__pillar__", "zabbix.usergroup_update", "zabbix.usergroup_create", "zabbix.usergroup_get", "zabbix.compare_params", "zabbix.mediatype_get", "zabbix.usergroup_list", "zabbix.user_create", "zabbix.user_getmedia", "zabbix.usergroup_delete", "zabbix.host_inventory_set", "patch.dict", "login_exception.strerror", "zabbix.user_get", "zabbix.usergroup_exists", "zabbix.user_list", "zabbix.user_update", "zabbix.host_inventory_get", "zabbix.user_deletemedia"]}, "test_zenoss.py": {"libraries": ["salt.modules.zenoss", "tests.support.mock.MagicMock", "pytest", "salt.modules.config", "tests.support.mock.patch", "tests.support.mock.call"], "function_names": ["configure_loader_modules", "test_zenoss_session"], "function_calls": ["patch", "call", "MagicMock"], "class_names": [], "class_method_calls": ["config.__opts__", "config.option", "zenoss._session", "pytest.fixture", "mock_http.call_args_list", "patch.dict"]}, "test_zfs.py": {"libraries": ["salt.utils.odict.OrderedDict", "salt.utils.zfs", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "tests.support.mock.patch", "tests.support.zfs.ZFSMockData"], "function_names": ["test_parse_command_result_success", "test_parse_command_result_fail_message", "setUp", "test_from_str_squote_space", "test_from_bool_on", "test_from_bool_alt_no", "test_from_str_none", "test_parse_command_result_fail_message_nolabel", "test_from_bool_off", "test_from_numeric_int", "test_to_bool_false", "test_to_str_squote_space", "test_zfs_command_none_target", "test_zpool_command_property", "test_zfs_command_flag", "test_to_size_int_decimal", "test_from_size_none", "test_to_str_space", "test_from_str_space", "test_is_bookmark_snapshot", "test_is_snapshot_filesystem", "test_zpool_command_opt_list", "test_to_numeric_passthrough", "test_zfs_command_multi_property_value", "test_to_bool_none", "test_to_bool_alt_passthrough", "test_to_str_none", "test_zfs_command_flag_opt", "test_from_numeric_none", "test_to_bool_alt_none", "test_zfs_command_property_value", "test_is_snapshot_bookmark", "test_zfs_command_fs_props_with_space", "test_from_numeric_str", "test_zfs_command_target", "test_zpool_command_property_value", "test_from_bool_alt_none", "test_zfs_command_fs_props", "test_to_size_none", "test_to_size_str_absolute", "test_from_bool_alt_passthrough", "test_parse_command_result_fail", "test_zpool_command_opt", "test_zpool_command_flag_opt", "test_zfs_command_property", "test_is_supported", "test_to_size_int_absolute", "test_to_bool_alt_true", "test_from_size_absolute", "test_zfs_command_simple", "test_to_bool_alt_false", "test_to_bool_true", "test_from_numeric_passthrough", "test_from_bool_alt_yes", "test_parse_command_result_nolabel", "test_zpool_command_target", "test_property_data_zfs", "test_to_numeric_int", "test_from_str_dquote_space", "test_from_bool_none", "test_to_size_passthrough", "test_from_size_passthrough", "test_is_dataset_bookmark", "test_to_numeric_none", "test_zfs_command_opt", "test_property_data_zpool", "test_from_str_passthrough", "test_zfs_command_target_with_space", "test_is_bookmark_filesystem", "test_parse_command_result_success_nolabel", "test_from_size_decimal", "test_to_str_passthrough", "test_is_dataset_filesystem", "test_zpool_command_target_with_space", "test_is_snapshot_snapshot", "test_from_bool_passthrough", "test_to_numeric_str", "test_zpool_command_simple", "test_is_bookmark_bookmark", "test_to_bool_passthrough", "test_to_size_str_decimal", "test_is_dataset_snapshot"], "function_calls": ["patch", "ZFSMockData", "MagicMock", "OrderedDict"], "class_names": ["ZfsUtilsTestCase"], "class_method_calls": ["mock_data.pmap_exec_zfs", "zfs.zpool_command", "zfs.to_bool_alt", "zfs.from_numeric", "zfs.to_numeric", "zfs.parse_command_result", "self.pmap_zfs", "patch.object", "mock_data.pmap_exec_zpool", "self.assertEqual", "zfs.to_str", "zfs.from_str", "self.assertFalse", "self.pmap_exec_zpool", "zfs.is_snapshot", "zfs.is_bookmark", "zfs.property_data_zpool", "zfs.to_bool", "mock_data.pmap_zfs", "zfs.from_bool_alt", "self.addCleanup", "zfs.property_data_zfs", "zfs.is_dataset", "zfs.from_size", "zfs.is_supported", "zfs.from_bool", "zfs.zfs_command", "self.pmap_zpool", "mock_data.pmap_zpool", "self.assertTrue", "self.pmap_exec_zfs", "zfs.to_size"]}, "test_zfs_solaris10.py": {"libraries": ["salt.modules.zfs", "salt.loader", "salt.utils.zfs", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "tests.support.zfs.ZFSMockData"], "function_names": ["utils_patch", "configure_loader_modules", "test_get_success_solaris"], "function_calls": ["patch", "MagicMock", "ZFSMockData"], "class_names": [], "class_method_calls": ["salt.loader", "pytest.fixture", "pytest.mark", "zfs.__salt__", "zfs.get", "run_all_mock.assert_called_once_with", "patch.dict"]}, "test_zfs_solaris11.py": {"libraries": ["salt.modules.zfs", "salt.loader", "salt.utils.zfs", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "tests.support.zfs.ZFSMockData"], "function_names": ["utils_patch", "configure_loader_modules", "test_get_success_solaris"], "function_calls": ["patch", "MagicMock", "ZFSMockData"], "class_names": [], "class_method_calls": ["salt.loader", "pytest.fixture", "pytest.mark", "zfs.__salt__", "zfs.get", "run_all_mock.assert_called_once_with", "patch.dict"]}, "test_znc.py": {"libraries": ["salt.modules.znc", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_version", "test_rehashconf", "test_buildmod_module", "test_dumpconf", "test_buildmod"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["znc.__salt__", "znc.dumpconf", "pytest.fixture", "znc.buildmod", "znc.rehashconf", "znc.version", "patch.dict", "patch.object"]}, "test_zpool.py": {"libraries": ["salt.states.zpool", "salt.utils.odict.OrderedDict", "salt.loader", "salt.utils.zfs", "salt.config", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "tests.support.zfs.ZFSMockData"], "function_names": ["utils_patch", "configure_loader_modules", "test_absent_exporty_pool", "test_present_import_fail", "test_present_create_success", "test_present_update_nochange_success", "test_absent_destroy_pool", "test_present_import_success", "test_present_create_passthrough_fail", "test_present_create_fail", "test_present_update_success", "test_absent_without_pool", "test_absent_busy"], "function_calls": ["MagicMock", "OrderedDict", "ZFSMockData"], "class_names": [], "class_method_calls": ["zpool.__utils__", "salt.loader", "pytest.fixture", "pytest.mark", "zpool.__salt__", "zpool.absent", "zpool.present", "zpool.__opts__", "patch.dict"]}, "test_zypperpkg.py": {"libraries": ["errno", "os", "salt.utils.pkg", "salt.exceptions.CommandExecutionError", "tests.support.mock.mock_open", "salt.utils.files", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "io", "salt.modules.pkg_resource", "salt.modules.zypperpkg", "xml.dom.minidom", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.Mock", "tests.support.mock.patch", "tests.support.mock.call", "configparser"], "function_names": ["test_list_pkgs_with_attr_multiple_versions", "test__get_installed_patterns_with_alias", "test__clean_cache_filled", "test_info_installed_with_all_versions", "test_info_installed", "test_wildcard_to_query_multiple_asterisk", "test_repo_noadd_mod_noref", "test_download", "test_info_installed_with_non_ascii_char", "test_repo_add_mod_name", "setup_loader_modules", "setUp", "test_list_products", "test_wildcard_to_query_noversion", "test_rpm_lock_acquirable", "test_refresh_db", "test_install_advisory_patch_ok", "test_list_downloaded", "test_repo_noadd_modbaseurl_ref", "test_repo_add_nomod_ref", "test_wildcard_to_query_match_all", "test_wildcard_to_query_unsupported_operators", "test_zypper_caller", "test_repo_value_info", "test_list_pkgs_no_context", "test_install_advisory_patch_failure", "test__clean_cache_empty", "_add_data", "test__get_installed_patterns", "test_wildcard_to_query_typecheck", "test_upgrade_available", "tearDown", "test_rpm_lock_does_not_exist", "test_list_downloaded_with_kwargs", "test_list_upgrades", "test_upgrade_kernel", "test_is_rpm_lock_no_error", "test_repo_add_mod_noref", "test_repo_noadd_nomod_ref", "test_list_pkgs_with_attr", "test_install_with_downloadonly_already_downloaded", "test_install_product_ok", "test_list_pkgs", "test_wildcard_to_query_usage", "test_list_patches", "test_list_patterns", "get_test_data", "test_install_with_downloadonly", "test_rpm_lock_not_acquirable", "test_wildcard_to_query_exact_match_at_beginning", "test_list_upgrades_error_handling", "__call__", "test_repo_add_mod_ref", "test_wildcard_to_query_condition_preservation", "test_repo_add_nomod_noref", "test_info_available", "test_remove_purge", "__getattr__", "__init__", "test_latest_version", "test_repo_noadd_mod_ref", "test_repo_noadd_nomod_noref", "test_wildcard_to_query_exact_match_at_end", "test_services_need_restart"], "function_calls": ["any", "get_test_data", "MagicMock", "type", "Mock", "patch", "ListPackages", "RunSniffer", "dict", "OSError", "list", "call", "ZyppCallMock", "len", "zypper_mock", "isinstance", "mock_open"], "class_names": ["ListPackages", "RunSniffer", "ZyppCallMock", "ZypperTestCase"], "class_method_calls": ["self._stdout", "self.new_repo_config", "lockf_mock.call_count", "list_pkgs_context_mock.assert_not_called", "result.get", "prod.get", "self.assertIn", "data.setdefault", "zypper.__zypper__", "patch.multiple", "zypper._get_installed_patterns", "zypper_mock.assert_called_with", "self.calls", "self.assertFalse", "pkgs.get", "self.zypper_patcher_config", "zypper.info_installed", "wcard._get_scope_versions", "self._pkgs", "dom.getElementsByTagName", "refreshmock.assert_called_once_with", "rfh.read", "zypper_mock.assert_called_once_with", "self._packages", "repos_cfg.readfp", "zypper.list_downloaded", "zypper.list_pkgs", "installed.items", "zypper._get_repo_info", "repos_cfg.sections", "cmd_run_all.assert_has_calls", "self.assertEqual", "zypper.list_products", "zypper.refresh_db", "list_pkgs_context_mock.reset_mock", "zypper.upgrade_available", "zypper.list_upgrades", "self.assertDictEqual", "self.assertRaises", "self._stderr", "wcard.name", "zypper.remove", "pkg_resource.__salt__", "patch.object", "self.assertCountEqual", "configparser.ConfigParser", "zypper.mod_repo", "self.assertRaisesRegex", "pkg_resource.format_pkg_list", "lockf_mock.assert_called", "minidom.parseString", "self._retcode", "zypper.latest_version", "zypper.info_available", "wcard._get_available_versions", "zypper.services_need_restart", "get_visible_patterns.return_value", "pkgs.items", "zypper.parse_arch", "zypper.Wildcard", "mock_path_exists.assert_called_with", "zypper.__context__", "zypper.install", "os.path", "zypper.download", "available.items", "wcard.version", "sniffer.calls", "io.StringIO", "self.__return_value", "zypper.__grains__", "salt.utils", "zypper.list_patches", "patch.dict", "zypper._clean_cache", "diff.get", "os.linesep", "zypper.__salt__", "zypper.list_patterns", "self.assertTrue", "_zpr.nolock", "errno.EAGAIN"]}, "test_domain.py": {"libraries": ["salt.states.virt", "salt.exceptions.CommandExecutionError", "tests.pytests.unit.states.virt.helpers.domain_update_call", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_rebooted_error", "test_defined_no_change", "test_rebooted_not_existing", "test_running_update_error", "test_running_definition_error", "test_defined_update_error", "test_stopped_not_existing", "test_defined_update_definition_error", "test_running_start_error", "test_powered_off", "configure_loader_modules", "test_defined_new_with_connection", "test_snapshot_error", "test_powered_off_error", "test_running_no_change", "test_stopped_error", "test_snapshot", "test_powered_off_not_existing", "test_defined_update", "test_running_define", "test_stopped", "test_running_update", "test_rebooted", "test_snapshot_not_existing"], "function_calls": ["CommandExecutionError", "MagicMock", "domain_update_call"], "class_names": [], "class_method_calls": ["pytest.fixture", "ret.update", "stop_mock.assert_called_with", "virt.rebooted", "snapshot_mock.assert_called_with", "virt.powered_off", "start_mock.assert_called_with", "shutdown_mock.assert_called_with", "start_mock.assert_not_called", "virt.__opts__", "pytest.mark", "update_mock.assert_not_called", "virt.stopped", "virt.__salt__", "virt.defined", "update_mock.call_args_list", "virt.snapshot", "shutdown_mock.assert_not_called", "patch.dict", "start_mock.assert_called", "virt.libvirt", "init_mock.assert_called_with", "reboot_mock.assert_not_called", "snapshot_mock.assert_not_called", "init_mock.assert_not_called", "virt.running", "stop_mock.assert_not_called", "reboot_mock.assert_called_with"]}, "test_helpers.py": {"libraries": ["salt.utils.vault.helpers", "datetime.datetime", "tests.support.mock.patch", "pytest"], "function_names": ["test_timestring_map", "test_get_salt_run_type", "test_iso_to_timestamp_polyfill", "test_expand_pattern_lists"], "function_calls": ["patch", "datetime"], "class_names": [], "class_method_calls": ["hlp._get_salt_run_type", "hlp.SALT_RUNTYPE_MINION_REMOTE", "hlp.timestring_map", "hlp.SALT_RUNTYPE_MASTER", "d.side_effect", "hlp.iso_to_timestamp", "pytest.mark", "hlp.SALT_RUNTYPE_MASTER_PEER_RUN", "hlp.SALT_RUNTYPE_MINION_LOCAL", "hlp.expand_pattern_lists", "d.fromisoformat", "hlp.SALT_RUNTYPE_MASTER_IMPERSONATING"]}, "test__policy_info.py": {"libraries": ["salt.modules.cmdmod", "salt.modules.win_file", "salt.modules.win_lgpo", "socket", "salt.exceptions.CommandExecutionError", "win32security", "pytest", "tests.support.mock.patch"], "function_names": ["test_seconds_to_minutes", "test_sidConversion_no_conversion", "test_string_put_transform", "test_multi_string_put_transform", "test_binary_enable_zero_disable_one_reverse_conversion", "test_encode_string_error", "test_encode_string", "test_dasd_reverse_conversion", "test_powershell_script_order_reverse_conversion", "test_sidConversion_administrator", "test_strip_quotes", "test_usernamesToSidObjects_string_list", "test_seconds_to_days", "test_dict_lookup_bitwise_add", "test_dasd_conversion", "configure_loader_modules", "test_powershell_script_order_conversion", "test_usernamesToSidObjects_empty_value", "test_multi_string_get_transform", "test_sidConversion_everyone", "test_binary_enable_zero_disable_one_conversion", "test_days_to_seconds", "test_in_range_inclusive", "test_usernamesToSidObjects_string_list_error", "test_add_quotes", "test_minutes_to_seconds", "test_notEmpty", "test__virtual__", "test_dict_lookup", "pol_info", "test_driver_signing_reg_reverse_conversion", "test_driver_signing_reg_conversion"], "function_calls": ["patch", "chr"], "class_names": [], "class_method_calls": ["pol_info._string_put_transform", "pol_info._add_quotes", "socket.gethostname", "pol_info._seconds_to_minutes", "win_lgpo._policy_info", "pol_info._days_to_seconds", "pytest.fixture", "ws.ConvertStringSidToSid", "pol_info._dict_lookup_bitwise_add", "win_lgpo.__virtual__", "pol_info._multi_string_put_transform", "patch.object", "pol_info._driver_signing_reg_reverse_conversion", "pol_info._dasd_reverse_conversion", "pol_info._in_range_inclusive", "pol_info._powershell_script_order_conversion", "pytest.mark", "pytest.raises", "pol_info._powershell_script_order_reverse_conversion", "pol_info._notEmpty", "pol_info._dict_lookup", "pol_info._sidConversion", "win_lgpo._encode_string", "pol_info._seconds_to_days", "pol_info._binary_enable_zero_disable_one_conversion", "pol_info._multi_string_get_transform", "pol_info._strip_quotes", "pol_info._driver_signing_reg_conversion", "pol_info._dasd_conversion", "salt.modules", "pol_info._usernamesToSidObjects", "pol_info._minutes_to_seconds", "pol_info._binary_enable_zero_disable_one_reverse_conversion", "ws.LookupAccountName"]}, "test_admx_policies.py": {"libraries": ["glob", "os", "salt.modules.win_file", "requests", "salt.grains.core", "salt.modules.win_lgpo", "salt.utils.win_dacl", "salt.utils.files", "re", "pathlib", "logging", "zipfile", "pytest", "tests.support.mock.patch", "shutil"], "function_names": ["configure_loader_modules", "test__load_policy_definitions", "test_set_user_policy", "_test_set_computer_policy", "test_set_computer_policy_multiple_policies", "clean_user", "test_clear_policy_cache", "test_set_computer_policy", "test_set_computer_policy_windows_update", "_test_set_user_policy", "osrelease", "clean_comp", "lgpo_bin"], "function_calls": ["_test_set_user_policy", "_test_set_computer_policy", "str"], "class_names": [], "class_method_calls": ["cachedir.mkdir", "the_policy.update", "the_policy_check_disabled.append", "f.write", "log.debug", "pytest.fixture", "zip_file.unlink", "win_file.file_exists", "lgpo_bin.unlink", "clean_comp.unlink", "os.path", "grains.get", "ret.stdout", "re.search", "re.MULTILINE", "logging.getLogger", "the_policy_check_enabled.append", "win_file.makedirs_", "shell.run", "pytest.mark", "win_dacl.set_perms", "win_lgpo.get_policy_info", "salt.grains", "win_lgpo.clear_policy_cache", "os.getenv", "fh.write", "win_lgpo.set_user_policy", "win_lgpo.__opts__", "r.content", "ret.returncode", "shutil.rmtree", "pathlib.Path", "salt.utils", "patch.dict", "re.IGNORECASE", "reg_pol.unlink", "win_lgpo.set_computer_policy", "glob.glob", "file.lower", "z.extract", "requests.get", "lgpo_bin.rename", "zipfile.ZipFile", "os.remove", "lgpo_bin.name", "win_lgpo._load_policy_definitions", "z.namelist", "win_lgpo.__context__"]}, "test_adv_audit.py": {"libraries": ["salt.utils.win_lgpo_auditpol", "salt.modules.win_file", "salt.modules.win_lgpo", "salt.exceptions.CommandExecutionError", "salt.utils.win_dacl", "tests.support.sminion.create_sminion", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["test_get_value", "configure_loader_modules", "set_policy", "disable_legacy_auditing", "test_set_value_error", "test_set_value_log_messages", "test_get_defaults", "clear_policy"], "function_calls": ["create_sminion", "MagicMock"], "class_names": [], "class_method_calls": ["cachedir.mkdir", "pytest.fixture", "caplog.text", "win_file.file_exists", "win_file.remove", "win_lgpo._get_advaudit_value", "patch.object", "win_lgpo._get_advaudit_defaults", "win_file.makedirs_", "pytest.mark", "win_dacl.set_perms", "win_file.write", "pytest.raises", "auditpol.get_auditpol_dump", "auditpol.set_setting", "win_lgpo.get_policy", "win_file.copy", "salt_minion.functions", "patch.dict", "win_lgpo.set_computer_policy", "caplog.at_level", "win_lgpo.__utils__", "logging.DEBUG", "win_lgpo._set_advaudit_value", "win_lgpo.__context__"]}, "test_defined_policies.py": {"libraries": ["salt.utils.win_reg", "salt.modules.win_file", "salt.modules.win_lgpo", "pytest"], "function_names": ["configure_loader_modules", "test_vuln_channel_allow_not_defined", "test_ldap_channel_binding_never", "test_ldap_channel_binding_when_supported", "test_ldap_channel_binding_not_defined", "test_vuln_channel_allow", "test_ldap_channel_binding_always"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["win_reg.value_exists", "win_lgpo.set_computer_policy", "win_reg.read_value", "win_file.makedirs_", "pytest.fixture", "cache_dir.mkdir", "pytest.mark", "win_file.file_exists", "win_reg.set_value", "win_reg.delete_value"]}, "test_mechanisms.py": {"libraries": ["salt.modules.cmdmod", "salt.utils.win_reg", "os", "salt.utils.win_lgpo_auditpol", "salt.modules.win_file", "salt.modules.win_lgpo", "salt.utils.win_dacl", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_script_ini", "test_secedit", "test_netsh", "test_lsa_rights", "test_adv_audit", "test_registry", "_test_mechanism", "test_net_user_modal"], "function_calls": ["patch", "_test_mechanism", "str"], "class_names": [], "class_method_calls": ["cachedir.mkdir", "os.environ", "win_lgpo_auditpol.get_auditpol_dump", "cmdmod.run", "win_reg.read_value", "win_lgpo._policy_info", "win_file.makedirs_", "pytest.fixture", "pytest.mark", "win_dacl.set_perms", "win_file.file_exists", "os.remove", "win_file.write", "win_lgpo._get_policy_info_setting", "os.path", "win_file.remove", "policy_data.policies"]}, "test_netsh.py": {"libraries": ["salt.exceptions.CommandExecutionError", "tests.support.mock.patch", "pytest", "salt.utils.win_lgpo_netsh"], "function_names": ["test_set_firewall_logging_filename_local", "test_set_firewall_state_local_on", "test_set_firewall_logging_allowed_local_enable", "test_set_firewall_settings_consecrules_local_enable", "test_get_settings_logging_local", "test_set_firewall_settings_notification_local_notconfigured", "test_set_firewall_settings_fwrules_lgpo_notconfigured", "test_get_all_settings_local", "test_set_firewall_state_local_notconfigured", "test_set_firewall_settings_outbound_local", "test_set_firewall_settings_unicast_local_disable", "test_get_settings_state_local", "test_set_firewall_settings_notification_local_enable", "test_set_firewall_settings_fwrules_local_enable", "test_get_settings_state_lgpo", "test_set_firewall_settings_notification_lgpo_notconfigured", "test_set_firewall_settings_inbound_local_notconfigured", "test_set_firewall_settings_inbound_lgpo_notconfigured", "test_set_firewall_logging_allowed_lgpo_notconfigured", "test_set_firewall_logging_maxfilesize_local", "test_get_settings_firewallpolicy_lgpo", "test_get_settings_settings_local", "test_set_firewall_logging_dropped_local_enable", "test_get_settings_firewallpolicy_lgpo_issue_57591", "test_get_settings_logging_lgpo", "test_set_firewall_settings_inbound_local", "test_get_settings_firewallpolicy_local", "test_get_settings_settings_lgpo", "test_get_all_settings_lgpo", "test_set_firewall_settings_remotemgmt_local_enable", "test_set_firewall_state_lgpo_notconfigured", "test_get_all_profiles_lgpo", "test_get_all_profiles_local", "test_set_firewall_logging_allowed_local_notconfigured"], "function_calls": [], "class_names": [], "class_method_calls": ["win_lgpo_netsh.get_all_profiles", "win_lgpo_netsh.get_settings", "win_lgpo_netsh.set_state", "win_lgpo_netsh.set_firewall_settings", "pytest.mark", "win_lgpo_netsh.set_logging_settings", "win_lgpo_netsh.get_all_settings", "pytest.raises", "win_lgpo_netsh.set_settings", "patch.object"]}, "test_point_print_enabled.py": {"libraries": ["salt.modules.cmdmod", "salt.utils.win_reg", "salt.utils.win_lgpo_auditpol", "salt.modules.win_file", "salt.modules.win_lgpo", "salt.utils.win_dacl", "pytest"], "function_names": ["configure_loader_modules", "test_enabled_full_names", "_get_policy_adm_setting", "test_enabled", "test_enabled_hierarchical", "test_full_names_hierarchical"], "function_calls": ["str", "_get_policy_adm_setting"], "class_names": [], "class_method_calls": ["cachedir.mkdir", "win_lgpo.set_computer_policy", "win_lgpo_auditpol.get_auditpol_dump", "cmdmod.run", "win_reg.read_value", "win_file.makedirs_", "win_lgpo._get_policy_adm_setting", "pytest.fixture", "pytest.mark", "win_dacl.set_perms", "win_file.file_exists", "win_file.write", "win_lgpo.set_", "win_lgpo._lookup_admin_template", "win_file.remove"]}, "test_point_print_nc.py": {"libraries": ["salt.modules.cmdmod", "salt.utils.win_reg", "salt.utils.win_lgpo_auditpol", "salt.modules.win_file", "salt.modules.win_lgpo", "salt.grains.core", "salt.loader", "salt.utils.stringutils", "salt.utils.win_dacl", "salt.utils.files", "salt.states.win_lgpo", "salt.utils.platform", "salt.config", "pytest"], "function_names": ["configure_loader_modules", "test_not_configured_full_names", "test_not_configured", "test_not_configured_full_names_hierarchical", "_get_policy_adm_setting", "test_not_configured_hierarchical"], "function_calls": ["str", "_get_policy_adm_setting"], "class_names": [], "class_method_calls": ["cachedir.mkdir", "win_lgpo_auditpol.get_auditpol_dump", "cmdmod.run", "win_reg.read_value", "win_file.makedirs_", "pytest.fixture", "pytest.mark", "win_dacl.set_perms", "win_file.file_exists", "win_file.write", "salt.modules", "win_file.remove"]}, "test_policy_info.py": {"libraries": ["salt.modules.win_file", "salt.modules.win_lgpo", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_get_policy_id_full_return", "test_transform_value_registry_not_set", "test_get_policy_id", "test_get_policy_name_full_return", "test_validate_setting_not_list_or_dict", "test_get_policy_name", "test_get_policy_id_full_return_full_names_hierarchical", "test_get_adml_display_name_bad_name", "configure_loader_modules", "test_get_policy_id_full_return_ids", "test_get_adml_display_name_no_results", "test_validate_setting_not_in_list", "test_get_policy_id_full_return_ids_hierarchical", "test_del_account_rights_error", "test_transform_value_missing_type", "test_get_policy_name_full_return_ids", "test_validate_setting_no_function", "test_add_account_rights_error", "test_validate_setting_in_list", "test_transform_value_registry"], "function_calls": ["patch", "MagicMock", "str"], "class_names": [], "class_method_calls": ["win_lgpo._delAccountRights", "win_lgpo.get_policy", "cachedir.mkdir", "win_file.makedirs_", "win_lgpo._getAdmlDisplayName", "pytest.fixture", "pytest.mark", "win_lgpo._validateSetting", "win_file.file_exists", "win_lgpo._transform_value", "win_lgpo._addAccountRights", "patch.object"]}, "test_policy_info_functions.py": {"libraries": ["salt.modules.win_lgpo", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["test__encode_string", "test__multi_string_get_transform_invalid", "test__encode_string_empty_string", "test__multi_string_put_transform_none", "test__multi_string_put_transform_list_from_string", "test__regexSearchKeyValueCombo_disabled", "test__multi_string_get_transform_list", "test__getAdmlDisplayName", "test__encode_string_none", "test__regexSearchKeyValueCombo_enabled", "test__multi_string_put_transform_invalid", "test__encode_string_error", "test__multi_string_put_transform_list", "test__regexSearchKeyValueCombo_not_configured", "test__multi_string_get_transform_none"], "function_calls": ["chr", "MagicMock", "Mock"], "class_names": [], "class_method_calls": ["win_lgpo._policy_info", "win_lgpo._encode_string", "win_lgpo._getAdmlDisplayName", "pytest.mark", "pytest.raises", "obj_xpath.text", "patch.object", "win_lgpo._regexSearchKeyValueCombo"]}, "test_policy_resources.py": {"libraries": ["salt.modules.cmdmod", "salt.utils.win_reg", "salt.utils.win_lgpo_auditpol", "salt.modules.win_file", "salt.modules.win_lgpo", "salt.utils.win_dacl", "pytest"], "function_names": ["test__getAdmlPresentationRefId", "configure_loader_modules", "test__getAdmlPresentationRefId_result_text_is_none"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["cachedir.mkdir", "win_lgpo._get_policy_resources", "win_lgpo_auditpol.get_auditpol_dump", "cmdmod.run", "win_reg.read_value", "win_file.makedirs_", "pytest.fixture", "pytest.mark", "win_dacl.set_perms", "win_file.file_exists", "win_file.write", "win_file.remove", "win_lgpo._getAdmlPresentationRefId"]}, "test_reg_pol.py": {"libraries": ["salt.modules.win_lgpo", "pytest"], "function_names": ["reg_pol_dword", "test_get_data_from_reg_pol_data"], "function_calls": ["chr"], "class_names": [], "class_method_calls": ["win_lgpo._getDataFromRegPolData", "pytest.fixture", "pytest.mark"]}, "test_secedit.py": {"libraries": ["salt.modules.cmdmod", "salt.modules.win_file", "salt.modules.win_lgpo", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_get_secedit_value_not_defined", "test_write_secedit_data_import_fail", "test_load_secedit_data", "test_get_secedit_data_existing_context", "test_get_secedit_data", "test_get_secedit_value", "test_write_secedit_data_configure_fail"], "function_calls": ["str", "MagicMock"], "class_names": [], "class_method_calls": ["cachedir.mkdir", "cmd.run", "win_lgpo._load_secedit_data", "caplog.at_level", "win_lgpo._get_secedit_data", "win_lgpo._get_secedit_value", "win_file.remove", "win_lgpo._write_secedit_data", "pytest.fixture", "pytest.mark", "caplog.text", "win_file.file_exists", "win_lgpo.__salt__", "patch.dict", "logging.DEBUG", "x.strip", "win_lgpo.__context__"]}, "test_secedit_policy.py": {"libraries": ["salt.modules.cmdmod", "salt.modules.win_file", "salt.modules.win_lgpo", "salt.utils.files", "re", "pytest", "saltfactories.utils.random_string"], "function_names": ["configure_loader_modules", "test_secedit_policy"], "function_calls": ["str", "random_string"], "class_names": [], "class_method_calls": ["lgpo.set_computer_policy", "cmdmod.retcode", "cachedir.mkdir", "re.MULTILINE", "win_file.makedirs_", "shell.run", "pytest.fixture", "pytest.mark", "ret.returncode", "win_file.file_exists", "reader.read", "salt.utils", "win_file.remove", "re.IGNORECASE", "re.search"]}, "test_login.py": {"libraries": ["salt.netapi.rest_cherrypy.app", "types.SimpleNamespace", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "mk_token", "test__login_rest_returns_perms", "__init__", "test__loigin_rest_match_token", "_is_master_running", "get_token"], "function_calls": ["patch", "SimpleNamespace", "MagicMock", "MockCherryPy"], "class_names": ["MockCherryPy", "MockNetapiClient", "MockResolver"], "class_method_calls": ["login.POST", "cherrypy_app.Login", "pytest.fixture"]}, "test_base_handler.py": {"libraries": ["time", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "salt.netapi.rest_tornado.saltnado"], "function_names": ["test__verify_auth", "test__verify_auth_expired", "arg_mock"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["base_handler.application", "base_handler._verify_auth", "pytest.fixture", "saltnado_app.BaseSaltAPIHandler", "time.time", "mock.opts", "patch.object"]}, "test_highstate.py": {"libraries": ["salt.output.highstate", "salt.utils.stringutils", "pytest", "logging", "tests.support.mock.patch", "copy"], "function_names": ["test_nested_output", "configure_loader_modules", "test_when_orchestrator_output_retcode_in_data_the_retcode_should_be_removed", "test_when_more_than_one_local_master_retcode_should_not_be_removed", "test__compress_ids_not_dict", "test_output_comment_is_not_unicode", "test_pct_summary_output", "test__compress_ids", "test__compress_ids_multiple_module_functions", "test_when_data_is_dict_with_return_key_and_return_value_has_data_key_and_data_dict_has_one_dict_element_with_jid_and_fun_keys_and_return_value_is_None_then_output_should_return_literal_None_string", "test_summary_output", "json_data", "test_parallel_summary_output", "test_when_data_result_is_None_output_should_be_string_None", "test_default_output", "test_when_data_is_dict_with_return_key_and_return_value_has_data_key_and_data_dict_has_one_dict_element_with_jid_and_fun_keys_and_return_value_is_int_or_str_that_value_should_be_returned"], "function_calls": ["patch"], "class_names": [], "class_method_calls": ["highstate._compress_ids", "logging.getLogger", "pytest.fixture", "pytest.mark", "copy.deepcopy", "highstate.__opts__", "salt.utils", "minion_opts.update", "highstate.output"]}, "test_highstate_terse.py": {"libraries": ["salt.output.highstate", "re", "pytest", "logging"], "function_names": ["configure_loader_modules", "test_terse_output"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "pytest.fixture", "minion_opts.update", "highstate.output", "re.search"]}, "test_json_out.py": {"libraries": ["salt.utils.stringutils", "tests.support.mock.patch", "salt.output.json_out", "pytest"], "function_names": ["configure_loader_modules", "test_unicode_output", "test_negative_zero_output", "test_negative_int_output", "test_indent_output", "test_pretty_output", "data", "test_default_output"], "function_calls": [], "class_names": [], "class_method_calls": ["json_out.output", "json_out.__opts__", "pytest.fixture", "salt.utils", "patch.dict"]}, "test_nested.py": {"libraries": ["salt.output.nested", "pytest"], "function_names": ["configure_loader_modules", "test_output_with_retcode", "test_output_with_colors", "test_output_with_indent", "test_display_with_integer_keys", "data"], "function_calls": [], "class_names": [], "class_method_calls": ["nest.display", "nested.NestDisplay", "nested.output", "pytest.fixture"]}, "test_table_out.py": {"libraries": ["salt.output.table_out", "salt.utils.stringutils", "pytest"], "function_names": ["test_output", "configure_loader_modules", "data"], "function_calls": [], "class_names": [], "class_method_calls": ["table_out.output", "salt.utils", "pytest.fixture"]}, "test_yaml_out.py": {"libraries": ["tests.support.mock.patch", "salt.output.yaml_out", "pytest"], "function_names": ["configure_loader_modules", "test_negative_int_output", "data", "test_default_output"], "function_calls": [], "class_names": [], "class_method_calls": ["patch.dict", "yaml.output", "yaml.__opts__", "pytest.fixture"]}, "test_consul_pillar.py": {"libraries": ["salt.pillar.consul_pillar", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_non_expansion", "test_value_parsing", "base_pillar_data", "test_dict_merge", "test_pillar_data", "test_connection", "test_blank_root", "test_pillar_nest"], "function_calls": ["MagicMock", "isinstance", "sorted"], "class_names": [], "class_method_calls": ["consul_pillar.consul", "consul_pillar.get_conn", "pytest.fixture", "pytest.mark", "consul_pillar.__salt__", "consul_pillar.ext_pillar", "consul_pillar.consul_fetch", "consul_pillar.__opts__", "patch.dict", "consul_pillar.dict_merge", "patch.object"]}, "test_csvpillar.py": {"libraries": ["tests.support.mock.patch", "salt.pillar.csvpillar", "tests.support.mock.mock_open"], "function_names": ["test_002_load_utf8_csv_namespc", "test_001_load_utf8_csv"], "function_calls": ["patch", "mock_open"], "class_names": [], "class_method_calls": ["csvpillar.ext_pillar"]}, "test_extra_minion_data_in_pillar.py": {"libraries": ["tests.support.mock.MagicMock", "salt.pillar.extra_minion_data_in_pillar", "pytest"], "function_names": ["configure_loader_modules", "test_include_all", "test_include_specific_keys", "test_extra_values_none_or_empty", "extra_minion_data"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["extra_minion_data_in_pillar.ext_pillar", "pytest.fixture"]}, "test_file_tree.py": {"libraries": ["os", "salt.pillar.file_tree", "salt.utils.stringutils", "salt.utils.files", "pathlib", "pytest", "tests.support.mock.MagicMock", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "parent_pillar_content", "test_relative_path", "dev_pillar_content", "test_file_tree_bytes", "base_pillar_content", "minion_id", "test_parent_path", "test_absolute_path", "test_no_pillarenv", "pillar_path"], "function_calls": ["patch", "MagicMock", "AssertionError", "str"], "class_names": [], "class_method_calls": ["caplog.records", "file_tree.ext_pillar", "filename.parent", "record.levelname", "pytest.fixture", "pathlib.Path", "filename.write_text", "os.path", "patch.dict", "record.message", "salt.utils", "file_tree.__opts__"]}, "test_http_json_pillar.py": {"libraries": ["salt.utils.json", "salt.modules.http", "salt.pillar.http_json", "pytest"], "function_names": ["configure_loader_modules", "test_ext_pillar_namespace", "test_ext_pillar_can_take_http_query_kwargs"], "function_calls": [], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.mark", "httpserver.url_for", "httpserver.expect_request", "salt.utils", "http_json.ext_pillar", "http.query"]}, "test_http_yaml_pillar.py": {"libraries": ["salt.utils.json", "salt.modules.http", "salt.pillar.http_yaml", "pytest"], "function_names": ["configure_loader_modules", "test_ext_pillar_can_take_http_query_kwargs"], "function_calls": [], "class_names": [], "class_method_calls": ["pytest.fixture", "pytest.mark", "httpserver.url_for", "http_yaml.ext_pillar", "httpserver.expect_request", "salt.utils", "http.query"]}, "test_mongo.py": {"libraries": ["salt.exceptions", "salt.pillar.mongo", "tests.support.mock.patch", "pytest"], "function_names": ["configure_loader_modules", "test_config_exception"], "function_calls": [], "class_names": [], "class_method_calls": ["salt.exceptions", "pytest.fixture", "mongo.ext_pillar", "pytest.raises", "mongo.__opts__", "patch.dict"]}, "test_netbox.py": {"libraries": ["pynetbox", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "pytest", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch", "tests.support.mock.call", "salt.modules.netbox"], "function_names": ["mocked_clean_kwargs_filter", "test_filter_url", "mocked_clean_kwargs_get", "test_get_by_name", "test_get_by_id", "test_token_present", "test_filter_by_site", "test_get_secret", "setup_loader_modules"], "function_calls": ["patch", "call", "MagicMock"], "class_names": ["NetBoxTestCase"], "class_method_calls": ["self.assertEqual", "mock.mock_calls", "netbox._strip_url_field", "pytest.mark", "mock.call_args", "netbox.__utils__", "self.assertTrue", "netbox.get_", "patch.dict", "netbox.filter_"]}, "test_nodegroups.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.pillar.nodegroups"], "function_names": ["configure_loader_modules", "fake_pillar_name", "fake_minion_id", "test_succeeds", "fake_nodegroups", "_side_effect", "_runner"], "function_calls": ["patch", "MagicMock", "_runner"], "class_names": [], "class_method_calls": ["nodegroups.ext_pillar", "group_sel.find", "pytest.fixture"]}, "test_pepa.py": {"libraries": ["salt.pillar.pepa", "salt.utils.odict.OrderedDict", "collections.OrderedDict"], "function_names": ["test_repeated_keys"], "function_calls": ["OrderedDict"], "class_names": [], "class_method_calls": ["pepa.key_value_to_tree"]}, "test_pillar_ldap.py": {"libraries": ["salt.utils.stringutils", "salt.pillar.pillar_ldap"], "function_names": ["test__conf_returns_str_from_unicode_default", "test__conf_defaults_to_none", "test__config_returns_str"], "function_calls": [], "class_names": [], "class_method_calls": ["pillar_ldap._config", "salt.utils"]}, "test_saltclass.py": {"libraries": ["salt.pillar.saltclass", "pytest"], "function_names": ["configure_loader_modules", "test_succeeds", "minion_id", "temp_saltclass_tree", "test_list_expansion_succeeds"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["dirname.mkdir", "minion_node_file.write_text", "roles_dir.mkdir", "nginx_subdir.mkdir", "default_init.write_text", "pytest.fixture", "default_dir.mkdir", "pytest.fail", "nodes_dir.mkdir", "classes_dir.mkdir", "saltclass.ext_pillar"]}, "test_sql_base.py": {"libraries": ["tests.support.mock.MagicMock", "pytest", "salt.pillar.sql_base"], "function_names": ["test_process_results_as_json", "_get_cursor", "_db_name"], "function_calls": ["MagicMock", "FakeExtPillar"], "class_names": ["FakeExtPillar"], "class_method_calls": ["return_data.process_fields", "return_data.result", "pytest.mark", "return_data.enter_root", "sql_base.SqlBaseExtPillar", "return_data.as_list", "return_data.with_lists", "return_data.as_json", "return_data.process_results"]}, "test_sqlcipher.py": {"libraries": ["salt.pillar.sqlcipher"], "function_names": ["test_005_extract_queries_bogus_kwargs", "test_135_process_results_overwrite_depth_1", "test_124_process_results_depth_3", "test_132_process_results_merge_depth_0", "test_021_process_fields", "test_201_process_results_complexity_multiresults", "test_202_process_results_complexity_as_list", "test_125_process_results_depth_4", "test_206_process_results_complexity_as_list_mismatch_depth_weird_order", "test_302_process_results_with_lists_consecutive", "test_301_process_results_with_lists", "test_122_process_results_depth_1", "test_001_extract_queries_list", "test_207_process_results_complexity_roots_collision", "test_208_process_results_complexity_collision_mismatch_depth_reversed", "test_203_process_results_complexity_as_list_deeper", "test_204_process_results_complexity_as_list_mismatch_depth", "test_123_process_results_depth_2", "test_002_extract_queries_kwarg", "test_133_process_results_overwrite_depth_0", "test_205_process_results_complexity_as_list_mismatch_depth_reversed", "test_209_process_results_complexity_collision_mismatch_depth_weird_order", "test_011_enter_root", "test_136_process_results_merge_depth_2", "test_004_extract_queries_bogus_list", "test_134_process_results_deepmerge_depth_0", "test_20A_process_results_complexity_as_list_vary", "test_111_process_results_legacy", "test_121_process_results_depth_0", "test_131_process_results_overwrite_legacy_multiple", "test_003_extract_queries_mixed", "test_137_process_results_overwrite_depth_2", "test_112_process_results_legacy_multiple", "test_207_process_results_complexity_collision_mismatch_depth"], "function_calls": ["tuple", "sorted"], "class_names": [], "class_method_calls": ["return_data.process_fields", "return_data.depth", "return_data.result", "return_data.focus", "return_data.enter_root", "return_data.extract_queries", "return_data.as_list", "return_data.with_lists", "return_data.num_fields", "sqlcipher.SQLCipherExtPillar", "return_data.process_results"]}, "test_sqlite3.py": {"libraries": ["tests.support.unit.TestCase", "tests.support.mixins.LoaderModuleMockMixin", "salt.modules.sqlite3"], "function_names": ["setup_loader_modules", "test_indices", "cursor", "test_sqlite_version", "fetchall", "test_version", "__init__", "test_fetch", "test_indexes", "execute", "test_modify", "connect", "test_tables"], "function_calls": ["MockSqlite3"], "class_names": ["Sqlite3TestCase", "MockSqlite3"], "class_method_calls": ["sqlite3.modify", "self.assertEqual", "sqlite3.version", "sqlite3.tables", "sqlite3.indexes", "sqlite3.sqlite_version", "self.assertTrue", "sqlite3.indices", "self.assertFalse", "self.isolation_level", "self.dbase", "sqlite3.fetch"]}, "test_stack.py": {"libraries": ["tests.support.mock.patch", "salt.pillar.stack", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_extpillar_stack1", "__call__", "test_extpillar_stack_exceptions", "mock_stack_pillar"], "function_calls": ["patch", "MagicMock", "MockJinja", "mock_stack_pillar"], "class_names": ["MockJinja"], "class_method_calls": ["stack.ext_pillar", "pytest.raises", "pytest.fixture"]}, "test_nxos_nxapi.py": {"libraries": ["tests.support.mock.create_autospec", "tests.unit.modules.nxos.nxos_grains.n9k_grains", "salt.proxy.nxos", "pytest", "salt.utils.nxos", "tests.support.mock.patch", "tests.unit.modules.nxos.nxos_show_cmd_output.n9k_show_ver_list"], "function_names": ["test_initialized", "test_init_bad_connection_type", "test_init_opts_none", "test__ping_nxapi", "test_grains_refresh", "test__init_nxapi", "test__initialized_nxapi", "test_grains", "configure_loader_modules", "test__nxapi_request_ssh_return", "test__nxapi_request_connect", "test__shutdown_nxapi", "test_bad__init_nxapi", "test_ping", "test_sendline", "test_grains_cache_set", "test_proxy_config_save_config", "test_init", "test_check_virtual", "test_proxy_config"], "function_calls": ["patch", "create_autospec"], "class_names": ["NXAPIException"], "class_method_calls": ["log.error", "nxos_proxy.DEVICE_DETAILS", "pytest.fixture", "grains.return_value", "nxos_utils.nxapi_request", "nxos_proxy._nxapi_request", "nxos_proxy.ping", "patch.object", "init_nxapi.return_value", "nxos_proxy.initialized", "initialized_nxapi.return_value", "nxapi_request.return_value", "pytest.raises", "nxos_proxy._shutdown_nxapi", "nxos_proxy.grains", "nxapi_request.assert_called_with", "nxos_proxy.grains_refresh", "nxos_proxy.sendline", "nxos_proxy.init", "nxos_proxy.__virtual__", "nxos_proxy.proxy_config", "nxos_proxy._ping_nxapi", "ping_nxapi.return_value", "nxos_proxy._initialized_nxapi", "nxos_proxy._init_nxapi"]}, "test_nxos_ssh.py": {"libraries": ["tests.unit.modules.nxos.nxos_grains.n9k_grains", "salt.exceptions.CommandExecutionError", "salt.proxy.nxos", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "tests.unit.modules.nxos.nxos_show_cmd_output.n9k_show_ver_list"], "function_names": ["test__parse_output_for_errors", "configure_loader_modules", "test_sendline", "test__initialized_ssh", "test_initialized", "test_proxy_config_save_config", "test_proxy_config_error", "test_init", "test_grains", "test__init_ssh_device_details", "test__init_ssh_prompt", "test__init_ssh_raise_exception", "test_init_opts_none", "test__init_ssh_opts", "test_proxy_config", "test_ping"], "function_calls": ["patch", "SSHConnection", "MagicMock"], "class_names": ["SSHException"], "class_method_calls": ["nxos_proxy._init_ssh", "log.error", "pytest.fixture", "init_ssh.return_value", "nxos_proxy._worker_name", "nxos_proxy.ping", "nxos_proxy.initialized", "SSHConnection.side_effect", "pytest.raises", "nxos_proxy._initialized_ssh", "nxos_proxy.grains", "ping_ssh.return_value", "sendline_ssh.return_value", "initialized_ssh.return_value", "patch.dict", "nxos_proxy.__opts__", "nxos_proxy.sendline", "nxos_proxy.init", "SSHConnection.call_args", "nxos_proxy.proxy_config", "nxos_proxy._parse_output_for_errors"]}, "test_cimc.py": {"libraries": ["salt.exceptions", "salt.proxy.cimc", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["http_query_response", "configure_loader_modules", "opts", "test_logout", "test_init_with_ssl", "_get_expected_verify_ssl", "verify_ssl", "test_init", "test_grains", "test_logon", "test_set_config_modify", "test_ping", "test__validate_response_code", "test_grains_refresh"], "function_calls": ["_get_expected_verify_ssl", "MagicMock", "patch", "enumerate"], "class_names": [], "class_method_calls": ["request.param", "cimc.DETAILS", "log.debug", "pytest.fixture", "cimc.grains_refresh", "patch.object", "logging.getLogger", "http_query_mock.mock_calls", "call.kwargs", "pytest.raises", "cimc.__utils__", "cimc.init", "data.startswith", "cimc.logout", "cimc.grains", "cimc.logon", "mock_logout.assert_called_once_with", "patch.dict", "cimc.set_config_modify", "cimc._validate_response_code", "salt.exceptions", "cimc.ping"]}, "test_netmiko_px.py": {"libraries": ["saltfactories.utils.random_string", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "logging", "salt.proxy.netmiko_px", "copy"], "function_names": ["configure_loader_modules", "test_init_skip_connect_on_init_true", "raise_exception", "proxy_minion_config", "test_init_connection_timeout", "test_initialized", "test_init_skip_connect_on_init_false", "is_alive", "test_alive", "proxy_minion_config_module", "test_make_con", "test_check_virtual", "send_config_set", "test_ping", "test_make_con_raise_exception"], "function_calls": ["ExpectedException", "MagicMock", "random_string"], "class_names": ["ExpectedException", "MockNetmikoConnection"], "class_method_calls": ["logging.getLogger", "netmiko_proxy.alive", "subtests.test", "netmiko_proxy.make_con", "netmiko_proxy.ping", "netmiko_proxy.initialized", "copy.deepcopy", "pytest.fixture", "netmiko_proxy.init", "pytest.raises", "salt_master_factory.salt_proxy_minion_daemon", "factory.config", "netmiko_proxy.__context__", "netmiko_proxy.__virtual__", "patch.object"]}, "test_panos.py": {"libraries": ["salt.proxy.panos", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "tests.support.mock.call"], "function_names": ["configure_loader_modules", "test_init", "opts"], "function_calls": ["call", "MagicMock"], "class_names": [], "class_method_calls": ["pytest.fixture", "panos.DETAILS", "panos.__utils__", "panos.init", "mock_http.call_args_list", "patch.dict"]}, "test_ssh_sample.py": {"libraries": ["saltfactories.utils.random_string", "salt.utils.vt.TerminalException", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "logging", "salt.proxy.ssh_sample", "copy"], "function_names": ["configure_loader_modules", "sendline", "test_package_list", "proxy_minion_config", "test_package_install", "test_initialized", "test_init", "test_grains", "test_fns", "__init__", "proxy_minion_config_module", "test_ping", "test_grains_refresh"], "function_calls": ["patch", "MagicMock", "MockSSHConnection", "random_string"], "class_names": ["MockSSHConnection"], "class_method_calls": ["logging.getLogger", "ssh_sample_proxy.__context__", "ssh_sample_proxy.package_install", "ssh_sample_proxy.__opts__", "ssh_sample_proxy.ping", "ssh_sample_proxy.package_list", "ssh_sample_proxy.grains_refresh", "copy.deepcopy", "pytest.fixture", "ssh_sample_proxy.initialized", "ssh_sample_proxy.fns", "ssh_sample_proxy.init", "salt_master_factory.salt_proxy_minion_daemon", "factory.config", "patch.dict", "patch.object", "ssh_sample_proxy.grains"]}, "test_aws_kms.py": {"libraries": ["salt.exceptions", "cryptography.fernet", "botocore.session", "botocore.stub", "salt.renderers.aws_kms", "tests.support.mock.MagicMock", "pytest", "botocore.exceptions", "tests.support.mock.patch"], "function_names": ["test__cfg_data_key", "test__session_profile", "plaintext_secret", "test__session_noprofile", "test__plaintext_data_key", "encrypted_data_key", "region_name", "test_render", "aws_profile", "test__kms", "test__decrypt_object", "plaintext_data_key", "test__decrypt_ciphertext", "configure_loader_modules", "test__api_decrypt_badkey", "base64_data_key", "test__base64_plaintext_data_key", "test__session_noregion", "test__api_decrypt", "test__kms_noregion", "test__cfg_data_key_no_key"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["aws_kms._decrypt_object", "api_decrypt.assert_called_once", "plaintext_secret.encode", "pytest.fixture", "aws_kms._kms", "aws_kms._base64_plaintext_data_key", "client.assert_called_with", "aws_kms.__salt__", "botocore.exceptions", "patch.object", "aws_kms._plaintext_data_key", "aws_kms._cfg_data_key", "session.side_effect", "pytest.mark", "pytest.raises", "config.get", "aws_kms.render", "kms_getter.return_value", "kms_client.decrypt", "patch.dict", "aws_kms.__opts__", "salt.exceptions", "aws_kms._session", "aws_kms._decrypt_ciphertext", "fernet.Fernet", "session.assert_called_with", "aws_kms._api_decrypt"]}, "test_pass.py": {"libraries": ["salt.exceptions", "os", "importlib", "salt.utils.files", "tests.support.mock.MagicMock", "pytest", "tempfile", "tests.support.mock.patch", "shutil"], "function_names": ["configure_loader_modules", "pass_executable", "test_strict_fetch_fail", "test_strict_fetch_secret_with_whitespaces", "pass_executable_invalid_utf8", "test_env", "test_strict_fetch_pass_path_with_spaces", "test_passthrough", "test_strict_fetch_passthrough", "pass_executable_error", "test_utf8", "test_invalid_utf8", "test_utf8_error", "test_strict_fetch"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["salt.exceptions", "popen_mock.return_value", "tempfile.mkdtemp", "pass_.__opts__", "f.write", "pass_.__dict__", "popen_mock.call_args_list", "pytest.fixture", "pytest.mark", "shutil.rmtree", "importlib.import_module", "pytest.raises", "os.path", "pass_.render", "patch.dict", "salt.utils", "os.chmod", "pass_.Popen"]}, "test_stateconf.py": {"libraries": ["os", "salt.loader", "salt.config", "pytest", "os.path", "io", "salt.exceptions.SaltRenderError", "attr"], "function_names": ["test_dot_state_id_in_requisites", "test_multilevel_relative_include_with_requisites", "test_adding_state_name_arg_for_dot_state_id", "__call__", "test_goal_state_generation", "test_states_declared_with_shorthand_no_args", "renderer", "test_sls_dir", "test_state_prefix", "test_multilevel_relative_include_beyond_top_level", "test_relative_include_with_requisites", "test_start_state_generation", "test_relative_include_and_extend", "test_slsdir", "test_state_config", "test_implicit_require_with_goal_state"], "function_calls": ["iter", "next", "Renderer", "dict", "renderer", "list", "enumerate", "str", "len", "set", "isinstance"], "class_names": ["Renderer"], "class_method_calls": ["os.sep", "i.values", "salt.loader", "self.tmp_path", "pytest.fixture", "pytest.mark", "attr.ib", "cache_dir.mkdir", "pytest.raises", "salt.config", "state_tree_dir.mkdir", "attr.s", "io.StringIO"]}, "test_yamlex.py": {"libraries": ["salt.serializers.yamlex", "salt.config.minion_config", "salt.state", "pytest", "salt.template.compile_template_str"], "function_names": ["test_basic", "configure_loader_modules", "render", "test_complex"], "function_calls": ["minion_config", "render", "compile_template_str"], "class_names": [], "class_method_calls": ["_state.opts", "yamlex.available", "_config.update", "salt.state", "pytest.fixture", "pytest.mark", "_state.rend"]}, "test_local_cache.py": {"libraries": ["os", "time", "salt.returners.local_cache", "salt.utils.jid", "salt.utils.files", "salt.utils.platform", "pytest", "logging", "salt.utils.job", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "_add_job", "jid_dir", "add_job", "test_not_clean_new_jobs", "_check_dir_files", "tmp_cache_dir", "test_clean_old_jobs", "jobs_dir", "pki_dir", "job_cache_dir_files", "test_empty_jid_dir", "test_override_clean_jobs", "test_override_clean_jobs_seconds"], "function_calls": ["str", "_check_dir_files", "add_job"], "class_names": [], "class_method_calls": ["dirname.mkdir", "logging.getLogger", "os.rename", "log.debug", "pytest.fixture", "pytest.mark", "new_jid_dir.mkdir", "empty_jid_dir.append", "time.sleep", "local_cache.clean_old_jobs", "salt.utils", "os.path", "patch.dict", "local_cache.__opts__"]}, "test_local_cache_clean_old_jobs.py": {"libraries": ["os", "time", "salt.returners.local_cache", "salt.utils.jid", "salt.utils.files", "salt.utils.platform", "tests.support.mock.MagicMock", "pytest", "salt.utils.job", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "tmp_jid_dir", "test_clean_old_jobs_empty_jid_dir_remains", "tmp_cache_dir", "test_clean_old_jobs_no_jid_root", "test_clean_old_jobs_empty_jid_dir_removed", "test_clean_old_jobs_jid_file_is_cleaned", "_make_tmp_jid_dirs", "test_clean_old_jobs_jid_file_corrupted", "make_tmp_jid_dirs"], "function_calls": ["MagicMock", "patch", "str", "len", "make_tmp_jid_dirs"], "class_names": [], "class_method_calls": ["os.sep", "dir_name.mkdir", "temp_dir.mkdir", "jid_file_path.write_text", "pytest.fixture", "os.listdir", "time.sleep", "tmp_jid_dir.mkdir", "local_cache.clean_old_jobs", "salt.utils", "patch.dict", "jid_file.rpartition", "os.path", "jid_dir.rpartition", "local_cache.__opts__"]}, "test_elasticsearch_return.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.returners.elasticsearch_return"], "function_names": ["configure_loader_modules", "test__virtual_no_elasticsearch", "test__virtual_with_elasticsearch"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["patch.dict", "elasticsearch_return.__virtual__", "elasticsearch_return.__salt__", "pytest.fixture"]}, "test_highstate_return.py": {"libraries": ["salt.returners.highstate_return", "salt.utils.files", "json", "pytest", "io"], "function_names": ["configure_loader_modules", "test_pipe_in_name", "output_file", "test_generate_table_should_correctly_escape_html_characters_when_data_contains_both_list_and_dict"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["highstate.returner", "highstate._generate_html_table", "io.StringIO", "pytest.fixture", "out.seek", "salt.utils", "out.read", "json.load"]}, "test_mongo_future_return.py": {"libraries": ["salt.exceptions", "salt.utils.versions.Version", "salt.returners.mongo_future_return", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_config_exception"], "function_calls": ["patch", "Version"], "class_names": [], "class_method_calls": ["salt.exceptions", "pytest.fixture", "mongo.returner", "pytest.raises", "mongo.__opts__", "patch.dict"]}, "test_nagios_nrdp_return.py": {"libraries": ["salt.returners.nagios_nrdp_return", "xml.etree.ElementTree"], "function_names": ["test_prepare_xml", "test_escaped_xml"], "function_calls": [], "class_names": [], "class_method_calls": ["ET.fromstring", "nagios_nrdp_return._prepare_xml", "checkresult.find", "root.find"]}, "test_pgjsonb.py": {"libraries": ["salt.returners.pgjsonb", "psycopg2.extras", "tests.support.mock.MagicMock", "pytest", "psycopg2", "tests.support.mock.patch", "tests.support.mock.call"], "function_names": ["configure_loader_modules", "test_clean_old_jobs_archive", "test_save_load_with_bytes", "test_clean_old_jobs_purge", "test_returner_with_bytes"], "function_calls": ["call", "MagicMock"], "class_names": [], "class_method_calls": ["json_mock.assert_called_with", "pgjsonb.clean_old_jobs", "pgjsonb.HAS_PG", "pytest.fixture", "pytest.mark", "psycopg2.extras", "pgjsonb.save_load", "pgjsonb.__salt__", "pgjsonb.__opts__", "json_mock.assert_has_calls", "patch.dict", "patch.object", "pgjsonb.returner"]}, "test_postgres_local_cache.py": {"libraries": ["salt.returners.postgres_local_cache", "json", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_returner_unicode_exception", "test_returner"], "function_calls": ["str", "MagicMock", "isinstance"], "class_names": [], "class_method_calls": ["postgres_local_cache.returner", "connect_mock.mock_calls", "json.loads", "call.args", "pytest.fixture", "patch.object"]}, "test_redis_return.py": {"libraries": ["tests.support.helpers.patch", "salt.returners.redis_return", "pytest"], "function_names": ["configure_loader_modules", "test_when_platform_is_proxy_and_no_opts_are_set_fallback_values_should_be_used", "clean_REDIS_POOL", "mock_returner_options", "test_when_platform_is_proxy_redis_should_use_opts_values", "proxy_platform", "mock_strict_redis", "non_proxy_platform", "test_when_platform_is_not_proxy_it_should_use_returner_opts"], "function_calls": ["patch"], "class_names": [], "class_method_calls": ["mock_strict_redis.assert_called_once_with", "redis_return.__opts__", "pytest.fixture", "redis_return._get_serv", "patch.dict", "redis_return.REDIS_POOL", "patch.object"]}, "test_sentry_return.py": {"libraries": ["salt.returners.sentry_return"], "function_names": ["test_get_message"], "function_calls": [], "class_names": [], "class_method_calls": ["sentry._get_message"]}, "test_slack_webhook_return.py": {"libraries": ["tests.support.mock.patch", "salt.returners.slack_webhook_return", "pytest"], "function_names": ["webhook", "author_icon", "ret", "configure_loader_modules", "expected_payload", "test_generate_payload_for_state_apply", "test_event_return", "evnt_ret", "show_tasks", "minion_name", "test_no_webhook", "test_generate_payload_for_test_ping", "test_returner"], "function_calls": ["patch"], "class_names": [], "class_method_calls": ["slack_webhook._generate_payload", "pytest.fixture", "slack_webhook.returner", "slack_webhook._generate_report", "slack_webhook.event_return", "slack_webhook.__opts__", "patch.dict", "slack_webhook.__grains__"]}, "test_smtp_return.py": {"libraries": ["gnupg", "tests.support.mock.MagicMock", "salt.returners.smtp_return", "pytest", "salt.utils.jinja.SaltCacheLoader", "tests.support.mock.patch"], "function_names": ["test_returner_no_gnupg", "configure_loader_modules", "test_returner_gnupg", "_test_returner"], "function_calls": ["patch", "_test_returner", "MagicMock"], "class_names": [], "class_method_calls": ["smtp.returner", "mocked_smtplib.return_value", "pytest.fixture", "pytest.mark", "patch.object"]}, "test_splunk_return.py": {"libraries": ["salt.returners.splunk", "json", "tests.support.mock.MagicMock", "pytest", "salt.modules.config", "tests.support.mock.patch"], "function_names": ["test_verify_event_returner", "configure_loader_modules", "test_verify_ssl", "test_verify_ssl_defaults_to_true"], "function_calls": ["MagicMock", "range", "patch", "str", "len"], "class_names": [], "class_method_calls": ["splunk.__opts__", "json.loads", "splunk.event_return", "requests_post.call_args_list", "pytest.fixture", "config.get", "payload.copy", "patch.dict", "splunk.returner"]}, "test_syslog_return.py": {"libraries": ["salt.returners.syslog_return", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_syslog_returner_unicode"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["syslog.HAS_SYSLOG", "syslog.returner", "pytest.fixture", "pytest.mark", "pytest.fail"]}, "test_telegram_return.py": {"libraries": ["salt.returners.telegram_return", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_returner"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["patch.dict", "telegram.returner", "pytest.fixture"]}, "test_ansible.py": {"libraries": ["salt.loader", "pytest", "tests.support.mock.patch", "salt.roster.ansible", "shutil"], "function_names": ["configure_loader_modules", "expected_targets_return", "test_docs_script", "expected_docs_targets_return", "roster_opts", "test_script", "test_ini", "test_yml", "test_docs_ini", "roster_dir", "test_virtual_returns_False_if_ansible_inventory_doesnt_exist"], "function_calls": ["str", "patch"], "class_names": [], "class_method_calls": ["tmp_path_factory.mktemp", "pytest.helpers", "ansible.__virtual__", "salt.loader", "pytest.fixture", "pytest.mark", "py_roster.chmod", "shutil.rmtree", "script_roster.chmod", "patch.dict", "ansible.targets", "temp_salt_master.config", "ansible.__opts__"]}, "test_clustershell.py": {"libraries": ["socket", "salt.roster.clustershell", "ClusterShell.NodeSet.NodeSet", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_targets"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["mock_nodeset.NodeSet", "mock_socket.gethostbyname", "pytest.mark", "patch.dict", "salt.roster"]}, "test_dir.py": {"libraries": ["salt.loader", "salt.roster.dir", "salt.config", "pytest", "logging"], "function_names": ["expected", "configure_loader_modules", "test_basic_list", "test_empty", "create_roster_files", "test_roster_domain", "_test_match", "test_nomatch", "test_badfile_logging", "test_badfile", "test_basic_re", "roster_domain", "test_basic_glob"], "function_calls": ["str", "dict", "_test_match", "len"], "class_names": [], "class_method_calls": ["ret.items", "caplog.at_level", "dir_.targets", "pytest.helpers", "salt.loader", "pytest.fixture", "caplog.text", "pytest.fail", "salt_master_factory.config", "expected.keys", "logging.WARNING"]}, "test_scan.py": {"libraries": ["salt.roster.scan", "socket", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_multiple_networks", "test_malformed_ip", "test_multiple_with_malformed", "test_multiple_ips", "test_multiple_no_connection", "test_single_network", "test_single_ip"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["scan_.targets", "socket_mock.connect", "socket.error", "pytest.fixture"]}, "test_ssh_config.py": {"libraries": ["collections", "textwrap", "tests.support.mock.mock_open", "pytest", "salt.roster.sshconfig", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "mock_fp", "all_", "target_def", "abc_glob", "test_abc_glob", "test_all", "target_abc", "target_abc123"], "function_calls": ["patch", "mock_open"], "class_names": [], "class_method_calls": ["textwrap.dedent", "sshconfig.targets", "collections.OrderedDict", "pytest.fixture"]}, "test_sshknownhosts.py": {"libraries": ["salt.roster.sshknownhosts", "salt.loader", "salt.config", "pytest", "tests.support.mock.patch"], "function_names": ["GLOB_DICT", "ALL_DICT", "configure_loader_modules", "known_hosts", "test_pcre", "PCRE_DICT", "test_glob", "test_all"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["pytest.helpers", "salt.loader", "pytest.fixture", "salt_master_factory.config", "sshknownhosts.targets", "patch.dict", "sshknownhosts.__opts__"]}, "test_asam.py": {"libraries": ["salt.runners.asam", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_add_platform", "test_list_platforms", "test_list_platform_sets", "test_remove_platform"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["logging.getLogger", "asam.list_platform_sets", "asam.add_platform", "pytest.fixture", "asam.list_platforms", "asam.remove_platform", "requests_mock.assert_called_with"]}, "test_net.py": {"libraries": ["tests.support.unit.TestCase", "salt.utils.validate.net"], "function_names": ["test_ipv4_addr", "test_ipv6_addr"], "function_calls": [], "class_names": ["ValidateNetTestCase"], "class_method_calls": ["self.assertTrue", "net.ipv6_addr", "net.ipv4_addr", "self.assertFalse"]}, "test_queue.py": {"libraries": ["salt.runners.queue", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_insert_runner", "test_process_runner"], "function_calls": ["str", "MagicMock"], "class_names": [], "class_method_calls": ["test_stdout_print.assert_called_once_with", "queue_mod.process_runner", "queue_pop.assert_called_once_with", "queue_mod.__salt__", "pytest.fixture", "pytest.mark", "queue_insert.assert_called_once_with", "queue_mod.insert_runner", "patch.dict", "patch.object"]}, "test_spacewalk.py": {"libraries": ["tests.support.mock.Mock", "tests.support.mock.patch", "tests.support.mock.call", "salt.runners.spacewalk"], "function_names": ["test_api_command_accepts_nested_namespace", "test_api_command_must_have_namespace", "test_api_command_accepts_single_namespace"], "function_calls": ["call", "Mock"], "class_names": [], "class_method_calls": ["spacewalk.api", "getattr_mock.assert_has_calls", "patch.object"]}, "test_token_auth_deprecated.py": {"libraries": ["salt.utils.vault.client", "tests.support.mock.ANY", "salt.utils.vault", "pytest", "logging", "tests.support.mock.Mock", "tests.support.mock.patch", "salt.runners.vault"], "function_names": ["configure_loader_modules", "policies", "client", "validate_sig", "auth", "test_generate_token_ttl", "test_generate_token_uses", "test_generate_token_exception", "test_generate_token_no_matching_policies", "test_generate_token", "test_generate_token_permission_denied"], "function_calls": ["patch", "isinstance", "Exception", "Mock"], "class_names": [], "class_method_calls": ["logging.getLogger", "vaultutil.VaultPermissionDeniedError", "vault.generate_token", "log.debug", "pytest.fixture", "pytest.mark", "client_mock.post", "client.post", "vclient.AuthenticatedVaultClient", "policies.return_value"]}, "test_serializers.py": {"libraries": ["salt.serializers.json", "salt.serializers.yaml.EncryptedString", "salt.serializers.yamlex", "salt.serializers.python", "salt.utils.odict.OrderedDict", "jinja2", "textwrap.dedent", "salt.serializers.SerializationError", "salt.utils.platform", "yaml", "salt.serializers.keyvalue", "pytest", "salt.serializers.plist", "salt.serializers.tomlmod", "salt.serializers.yaml", "salt.serializers.msgpack", "salt.serializers.configparser"], "function_names": ["test_serialize_plist", "test_serialize_yaml", "test_compare_sls_vs_yaml_with_jinja", "test_serialize_keyvalue", "test_serialize_binary_plist", "test_serialize_python", "test_sls_repr", "test_serialize_json", "test_sls_aggregate", "test_compare_sls_vs_yaml", "test_serialize_keyvalue_separator", "test_serialize_keyvalue_quoting", "test_msgpack", "test_configparser", "test_serialize_toml", "test_serialize_sls", "convert", "test_serialize_keyvalue_list_of_lists", "test_serialize_complex_sls", "test_sls_micking_file_merging", "test_sls_reset"], "function_calls": ["EncryptedString", "convert", "repr", "str", "OrderedDict", "dedent", "isinstance", "hasattr"], "class_names": [], "class_method_calls": ["yaml.serialize", "json.serialize", "yaml.available", "msgpack.deserialize", "keyvalue.deserialize", "yamlex.available", "tomlmod.serialize", "SKIP_MESSAGE.format", "tomlmod.deserialize", "msgpack.serialize", "json.available", "json.deserialize", "yamlex.serialize", "yaml.deserialize", "plist.available", "python.serialize", "plist.deserialize", "jinja2.Environment", "yamlex.deserialize", "pytest.mark", "configparser.deserialize", "obj.copy", "env.from_string", "configparser.serialize", "yamlex.merge_recursive", "salt.utils", "plist.serialize", "keyvalue.serialize", "msgpack.available", "configparser.available", "tomlmod.HAS_TOML", "python.available"]}, "test_pkgfiles.py": {"libraries": ["salt.spm.pkgfiles.local", "salt.syspaths", "tests.support.mock.MagicMock", "pathlib", "pytest"], "function_names": ["__init__", "configure_loader_modules", "test_install_file"], "function_calls": ["str", "MockTar", "MagicMock"], "class_names": ["MockTar"], "class_method_calls": ["spm.install_file", "pytest.fixture", "pathlib.Path", "salt.syspaths", "self.path", "self.name"]}, "test_global_state_conditions.py": {"libraries": ["salt.config", "salt.state", "pytest", "logging"], "function_names": ["test_global_state_conditions_no_match", "test_global_state_conditions_match", "minion_config", "test_global_state_conditions_match_one_of_many", "test_global_state_conditions_unconfigured"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "salt.state", "pytest.fixture", "pytest.mark", "state_obj._match_global_state_conditions"]}, "test_multi_env_highstate.py": {"libraries": ["salt.exceptions", "os", "salt.state", "salt.utils.files", "salt.utils.platform", "pytest", "logging"], "function_names": ["test_lazy_avail_states_dynamic", "highstate", "base_state_tree_dir", "test_lazy_avail_states_other", "test_lazy_avail_states_multi", "test_lazy_avail_states_base", "root_dir", "cache_dir", "other_state_tree_dir"], "function_calls": ["str", "dict"], "class_names": [], "class_method_calls": ["logging.getLogger", "os.makedirs", "pytest.helpers", "highstate.avail", "salt.state", "pytest.fixture", "pytest.mark", "temp_salt_minion.config", "os.path", "_highstate.push_active", "opts.update", "temp_salt_master.config"]}, "test_reactor_compiler.py": {"libraries": ["salt.utils.odict.OrderedDict", "salt.state", "salt.minion", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["test_compiler_pad_funcs", "test_compiler_verify_high_sls_requisites", "test_compiler_render_template_doesnotexist", "test_compiler_pad_funcs_short_sls", "test_compiler_render_template", "test_compiler_verify_high_short_sls"], "function_calls": ["str", "set", "MagicMock", "OrderedDict"], "class_names": [], "class_method_calls": ["logging.getLogger", "comp.pad_funcs", "fp.write", "mminion.rend", "comp.verify_high", "pytest.mark", "salt.minion", "salt.state", "mock_pad.assert_not_called", "salt.utils", "patch.object", "comp.render_template"]}, "test_state_basic.py": {"libraries": ["salt.utils.odict.OrderedDict", "salt.state", "pytest"], "function_names": ["test_state_args_id_not_high", "test_state_args_state_not_high", "test_state_args"], "function_calls": ["set", "OrderedDict"], "class_names": [], "class_method_calls": ["salt.state", "pytest.mark"]}, "test_state_compiler.py": {"libraries": ["salt.exceptions", "salt.state", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.utils.platform", "tests.support.mock.MagicMock", "pytest", "logging", "win32file", "tests.support.mock.patch"], "function_names": ["test_verify_onlyif_parse_deep_return", "test_verify_unless_parse_slots", "test_load_modules_dict", "test_verify_creates_list", "test_verify_unless_list_cmd_valid", "test_verify_unless_cmd_error", "test_verify_onlyif_parse", "test_verify_unless_list_cmd_different_order", "test_render_requisite_require_disabled", "test_aggregate_requisites", "test_call_chunk_sub_state_run", "test_verify_onlyif_cmd_args", "test_check_refresh_pillar", "test_verify_onlyif_list_cmd_invalid", "test_load_modules_list", "test_verify_unless_parse", "test_verify_retry_parsing", "test_load_modules_pkg", "test_render_error_on_invalid_requisite", "test_verify_onlyif_list_cmd", "test_format_log_list", "test_render_requisite_require_in_disabled", "test_check_refresh_grains", "_expand_win_path", "test_verify_onlyif_cmd_error", "test_format_log_non_ascii_character", "test_verify_creates", "test_verify_onlyif_cmd_opts_exclude", "test_mod_aggregate", "test_module_refresh_typeerror", "test_module_refresh_runtimeerror", "test_verify_high_too_many_functions_declared_error_message", "test_verify_unless_parse_deep_return", "test_verify_onlyif_list_cmd_different_order", "test_verify_onlyif_parse_slots", "test_verify_onlyif_list_cmd_valid", "test_verify_unless_list_cmd_invalid", "test_verify_unless_list_cmd"], "function_calls": ["any", "MagicMock", "next", "iter", "RuntimeError", "patch", "_expand_win_path", "str", "TypeError", "CommandExecutionError", "set", "verifier", "isinstance"], "class_names": [], "class_method_calls": ["fp.write", "state_obj.states", "salt.state", "caplog.text", "low_data.get", "state_obj.module_refresh", "mock_refresh.assert_called_once", "state_obj._run_check_unless", "patch.object", "state_obj.call_high", "mock_importlib.side_effect", "logging.getLogger", "ret.get", "state_obj._run_check", "state_obj._run_check_creates", "pytest.mark", "state_obj._aggregate_requisites", "pytest.raises", "mock_raw_mod.assert_not_called", "state_obj._run_check_onlyif", "state_obj.verify_high", "state_obj._mod_aggregate", "win32file.GetLongPathName", "state_obj.functions", "state_obj.check_refresh", "state_obj.call", "salt.utils", "patch.dict", "state_obj.opts", "mock.assert_called_once_with", "logging.INFO", "state_obj.load_modules", "salt.exceptions", "caplog.at_level", "state_obj.call_chunk", "logging.DEBUG", "path_mock.return_value"]}, "test_state_format_slots.py": {"libraries": ["salt.exceptions", "salt.state", "salt.utils.files", "salt.utils.platform", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["test_format_slots_no_slots", "test_format_slots_dict_arg", "test_slot_traverse_dict", "test_slot_append", "test_format_slots_liststr_arg", "test_format_slots_kwarg", "test_format_slots_multi", "test_format_slots_malformed", "test_format_slots_arg", "test_format_slots_listdict_arg", "state_obj", "test_format_slots_parallel"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["logging.getLogger", "mock_a.assert_called_once_with", "mock_c.assert_called_once_with", "mock.assert_not_called", "mock_d.assert_called_once_with", "state_obj.functions", "pytest.fixture", "pytest.mark", "salt.state", "state_obj.jid", "state_obj.format_slots", "mock_b.assert_called_once_with", "sls_data.copy", "res.items", "patch.dict", "mock.assert_called_once_with", "state_obj.call_high"]}, "test_state_highstate.py": {"libraries": ["textwrap", "salt.utils.odict.OrderedDict", "salt.state", "pytest", "logging", "salt.utils.odict.DefaultOrderedDict"], "function_names": ["test_top_matches_with_string", "state_tree_dir", "test_dont_extend_in_excluded_sls_file", "test_verify_tops", "test_verify_tops_not_dict", "test_verify_tops_sls_not_list", "highstate", "test_verify_tops_match", "test_top_matches_with_list", "test_compile_state_usage", "test_matches_whitelist", "test_verify_tops_match_none", "test_find_sls_ids_with_exclude", "root_dir", "test_matches_whitelist_with_string", "test_compile_state_usage_empty_topfile", "cache_dir", "test_verify_tops_env_empty"], "function_calls": ["str", "dict", "DefaultOrderedDict", "OrderedDict"], "class_names": [], "class_method_calls": ["logging.getLogger", "pytest.helpers", "highstate.state", "highstate.compile_state_usage", "highstate.top_matches", "salt.state", "pytest.fixture", "pytest.mark", "textwrap.dedent", "temp_salt_minion.config", "highstate.render_highstate", "highstate.verify_tops", "highstate.matches_whitelist", "_highstate.push_active", "opts.update", "temp_salt_master.config", "highstate.get_top"]}, "test_state_options.py": {"libraries": ["salt.state", "pytest", "itertools"], "function_names": ["__init__", "test_state_aggregate_option_behavior", "master_opts"], "function_calls": ["enumerate", "state_obj", "MockBaseHighStateClient"], "class_names": ["MockBaseHighStateClient"], "class_method_calls": ["state_obj.client", "master_opts.copy", "self.opts", "salt.state", "pytest.fixture", "pytest.mark", "itertools.permutations"]}, "test_state_returns.py": {"libraries": ["salt.utils.decorators.state", "pytest", "logging"], "function_names": ["test_state_output_check_changes_is_dict", "test_state_output_unifier_comment_is_not_list", "test_state_output_check_return_is_dict", "test_state_output_unifier_result_converted_to_false", "test_state_output_check_return_has_nrc", "test_state_output_unifier_result_converted_to_true"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "statedecorators.OutputUnifier", "pytest.mark"]}, "test_sub_state_returns.py": {"libraries": ["salt.utils.decorators.state", "pytest", "logging"], "function_names": ["test_sub_state_output_unifier_result_converted_to_false", "test_sub_state_output_check_changes_is_dict", "test_sub_state_output_unifier_comment_is_not_list", "test_sub_state_output_check_return_has_nrc", "test_sub_state_output_unifier_result_converted_to_true", "test_sub_state_output_check_return_is_dict"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "statedecorators.OutputUnifier", "pytest.mark"]}, "test_conf.py": {"libraries": ["salt.states.apache_conf", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_enabled", "configure_loader_modules", "test_disabled"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["apache_conf.disabled", "ret.update", "apache_conf.__salt__", "pytest.fixture", "apache_conf.enabled", "apache_conf.__opts__", "patch.dict"]}, "test_site.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.apache_site", "pytest"], "function_names": ["test_enabled", "configure_loader_modules", "test_disabled"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["apache_site.__salt__", "ret.update", "pytest.fixture", "apache_site.__opts__", "patch.dict", "apache_site.enabled", "apache_site.disabled"]}, "test__clean_dir.py": {"libraries": ["salt.states.file", "pytest"], "function_names": ["test_win_back_slash", "test_win_back_slash_mixed_cased", "test_win_forward_slash", "test_normal", "test_win_forward_slash_mixed_case"], "function_calls": [], "class_names": [], "class_method_calls": ["file._clean_dir", "pytest.mark"]}, "test_filestate.py": {"libraries": ["salt.utils.json", "salt.serializers.python", "salt.utils.files", "logging", "salt.serializers.yaml", "salt.serializers.json", "salt.states.file", "salt.exceptions.CommandExecutionError", "tests.support.mock.mock_open", "pprint", "tests.support.mock.patch", "os", "tests.support.mock.MagicMock", "salt.serializers.msgpack", "msgpack", "salt.utils.win_functions", "plistlib", "salt.utils.platform", "pytest", "salt.serializers.plist", "salt.utils.yaml", "tests.support.mock.Mock"], "function_names": ["test_recurse_test_mode_user_group_not_present", "configure_loader_modules", "test_mknod", "test_contents_pillar_doesnt_add_more_newlines", "test_blockreplace", "test_exists", "test_accumulated", "test_touch", "returner", "test_contents_and_contents_pillar", "test_recurse", "test_serialize_into_managed_file", "test_mod_run_check_cmd", "test_serialize", "test_replace", "test_missing"], "function_calls": ["MagicMock", "Mock", "patch", "TypeError", "mock_open"], "class_names": [], "class_method_calls": ["msgpack.packb", "filestate.__low__", "filestate.serialize", "filestate.accumulated", "plistserializer.serialize", "ret.update", "pytest.fixture", "filestate.exists", "filestate.missing", "jsonserializer.serialize", "os.path", "filestate.recurse", "patch.object", "pprint.pformat", "logging.getLogger", "filestate.__opts__", "plistlib.loads", "returner.call_args", "filestate.replace", "name.replace", "filestate.mod_run_check_cmd", "mock_serializer.reset_mock", "filestate.__salt__", "filestate.touch", "mock_serializer.assert_called_with", "returner.returned", "salt.utils", "patch.dict", "pythonserializer.serialize", "filestate.__serializers__", "yamlserializer.serialize", "os.linesep", "filestate.blockreplace", "msgpackserializer.serialize", "filestate.managed", "filestate.mknod"]}, "test_find_keep_files.py": {"libraries": ["salt.states.file", "pytest", "logging"], "function_names": ["test__clean_dir_win32", "test__find_keep_files_win32", "test__find_keep_files_darwin", "test__find_keep_files_unix"], "function_calls": ["sorted", "list"], "class_names": [], "class_method_calls": ["logging.getLogger", "filestate._clean_dir", "filestate._find_keep_files", "pytest.mark"]}, "test_hardlink.py": {"libraries": ["os", "salt.serializers.json", "salt.utils.win_functions", "salt.utils.json", "salt.serializers.python", "salt.states.file", "salt.exceptions.CommandExecutionError", "salt.utils.files", "salt.utils.platform", "salt.utils.yaml", "tests.support.mock.MagicMock", "pytest", "logging", "salt.serializers.plist", "salt.serializers.yaml", "salt.serializers.msgpack", "tests.support.mock.patch"], "function_names": ["test_hardlink", "configure_loader_modules", "return_val"], "function_calls": ["str", "dict", "MagicMock", "return_val"], "class_names": [], "class_method_calls": ["logging.getLogger", "yamlserializer.serialize", "fp.write", "filestate.__opts__", "res.update", "plistserializer.serialize", "pytest.fixture", "pytest.mark", "filestate.__salt__", "jsonserializer.serialize", "msgpackserializer.serialize", "filestate.hardlink", "os.path", "salt.utils", "patch.dict", "pythonserializer.serialize", "patch.object"]}, "test_mod_beacon.py": {"libraries": ["salt.modules.beacons", "salt.states.file", "salt.utils.event.SaltEvent", "tests.support.mock.MagicMock", "salt.states.beacon", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_mod_beacon_file", "test_mod_beacon_unsupported", "test_mod_beacon_directory", "test_mod_beacon_beacon_false"], "function_calls": ["str", "MagicMock"], "class_names": [], "class_method_calls": ["beaconmod.list_", "beaconstate.present", "filestate.mod_beacon", "beaconstate.__salt__", "patch.object", "filestate.__states__", "beaconmod.__opts__", "beaconmod.list_available", "pytest.fixture", "pytest.mark", "filestate.__salt__", "beaconmod.add", "patch.dict", "beaconmod.__salt__"]}, "test_private_functions.py": {"libraries": ["os", "salt.utils.win_functions", "salt.modules.file", "salt.utils.json", "salt.states.file", "salt.utils.files", "salt.utils.platform", "pytest", "logging", "salt.utils.yaml"], "function_names": ["configure_loader_modules", "test__check_directory", "create_files"], "function_calls": ["range", "str", "create_files", "oct", "set"], "class_names": [], "class_method_calls": ["logging.getLogger", "filestate._check_directory", "pytest.fixture", "pytest.mark", "os.mkdir", "os.path", "salt.utils", "filemod.stats", "os.chmod", "os.symlink"]}, "test_retention_schedule.py": {"libraries": ["os", "salt.serializers.json", "datetime.datetime", "dateutil.relativedelta.relativedelta", "salt.serializers.python", "time.mktime", "salt.states.file", "tests.support.mock.MagicMock", "pytest", "logging", "salt.serializers.plist", "re", "salt.serializers.yaml", "salt.serializers.msgpack", "tests.support.mock.patch", "tests.support.mock.call"], "function_names": ["configure_loader_modules", "lstat_side_effect", "run_checks", "test_retention_schedule", "generate_fake_files"], "function_calls": ["mktime", "MagicMock", "relativedelta", "run_checks", "list", "call", "len", "datetime", "sorted", "generate_fake_files", "isdir", "NotImplementedError", "set"], "class_names": [], "class_method_calls": ["starting.year", "plistserializer.serialize", "pytest.fixture", "jsonserializer.serialize", "os.path", "starting.day", "every.years", "every.months", "patch.object", "logging.getLogger", "mock_readdir.assert_has_calls", "fake_files.append", "filestate.__opts__", "filestate.retention_schedule", "pytest.mark", "every.minutes", "mock_remove.assert_has_calls", "starting.month", "new_retains.add", "filestate.__salt__", "re.match", "every.hours", "patch.dict", "pythonserializer.serialize", "yamlserializer.serialize", "mock_readdir.assert_called_once_with", "starting.hour", "every.days", "ts.strftime", "msgpackserializer.serialize", "mock_remove.reset_mock", "datetime.strptime", "mock_readdir.reset_mock"]}, "test_tidied.py": {"libraries": ["os", "datetime.datetime", "salt.utils.win_functions", "salt.utils.json", "datetime.timedelta", "salt.states.file", "salt.utils.files", "salt.utils.platform", "tests.support.mock.PropertyMock", "tests.support.mock.MagicMock", "pytest", "logging", "salt.utils.yaml", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_tidied_rmlinks", "test_tidied_age_size_args_AND_operator_age_not_size", "test_tidied_age_size_args_AND_operator_size_not_age", "test_tidied_filenotfound", "test_tidied_age_size_args_AND_operator_age_not_size_age_only", "test__bad_input", "test_tidied_with_exclude", "test_tidied_with_full_path_exclude", "test_tidied_age_size_args_AND_operator_size_and_age", "test__tidied", "test_tidied_age_size_args_AND_operator_size_not_age_size_only"], "function_calls": ["type", "MagicMock", "patch", "timedelta", "PropertyMock", "str"], "class_names": [], "class_method_calls": ["mylstat.st_mode", "pytest.fixture", "os.path", "mylstat.st_size", "remove.reset_mock", "logging.getLogger", "os.sep", "filestate.__opts__", "datetime.utcfromtimestamp", "today_delta.days", "filestate.__salt__", "filestate.tidied", "salt.utils", "patch.dict", "mystat.st_size", "name.mkdir", "mylstat.st_atime", "mock_st_mode.reset_mock", "mystat.st_atime", "datetime.today", "today_delta.total_seconds", "remove.call_count"]}, "test_database.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.states.postgres_database"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["postgres_database.__salt__", "postgres_database.present", "ret.update", "pytest.fixture", "postgres_database.__opts__", "patch.dict", "postgres_database.absent"]}, "test_grants.py": {"libraries": ["salt.states.mysql_grants", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["mysql_grants.present", "mysql_grants.__salt__", "mysql_grants.__opts__", "ret.update", "pytest.fixture", "patch.dict", "mysql_grants.absent", "patch.object"]}, "test_query.py": {"libraries": ["os", "salt.modules.mysql", "salt.states.mysql_query", "pytest", "logging", "tests.support.mock.MagicMock", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "cursor", "test_run", "autocommit", "__init__", "test_run_multiple_statements"], "function_calls": ["MagicMock", "patch", "MockMySQLConnect", "str", "len"], "class_names": ["MockMySQLConnect"], "class_method_calls": ["self.kwargs", "logging.getLogger", "self.args", "mysql_mod.__salt__", "mysql_mod.query", "pytest.fixture", "ret.update", "mock_connect.mock_calls", "pymysql.install_as_MySQLdb", "mysql_query.__salt__", "os.path", "patch.dict", "mysql_query.__opts__", "mysql_query.run", "patch.object", "pytest.importorskip"]}, "test_extension.py": {"libraries": ["salt.states.postgres_extension", "salt.modules.postgres", "pytest", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_absent_failed", "test_presenttest", "test_present_failed", "test_absent_failedtest", "test_present", "test_absent"], "function_calls": ["Mock"], "class_names": [], "class_method_calls": ["postgresmod._EXTENSION_TO_MOVE", "postgres_extension.__salt__", "postgres_extension.present", "pytest.fixture", "postgres_extension.absent", "postgres_extension.__opts__", "postgresmod._EXTENSION_INSTALLED", "patch.dict", "postgresmod._EXTENSION_NOT_INSTALLED"]}, "test_group.py": {"libraries": ["salt.states.group", "salt.utils.odict.OrderedDict", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_absent", "setup_loader_modules", "test_present"], "function_calls": ["MagicMock", "OrderedDict"], "class_names": ["GroupTestCase"], "class_method_calls": ["self.assertDictEqual", "group.present", "group.__salt__", "ret.update", "group.absent", "patch.dict", "group.__opts__", "patch.object"]}, "test_initdb.py": {"libraries": ["tests.support.mock.patch", "salt.states.postgres_initdb", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_present_non_existing_fail", "test_present_non_existing_pass", "test_present_existing"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["postgres_initdb.__opts__", "postgres_initdb.__salt__", "ret.update", "pytest.fixture", "postgres_initdb.present", "patch.dict"]}, "test_language.py": {"libraries": ["salt.states.postgres_language", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent_non_existing", "test_present_non_existing_fail", "test_absent_existing", "test_present_non_existing_pass", "test_present_existing"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["postgres_language.__salt__", "ret.update", "pytest.fixture", "postgres_language.present", "postgres_language.__opts__", "patch.dict", "postgres_language.absent"]}, "test_privileges.py": {"libraries": ["salt.states.postgres_privileges", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent_group", "test_absent_table", "test_present_group", "test_present_table"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["postgres_privileges.absent", "ret.update", "pytest.fixture", "postgres_privileges.present", "patch.dict", "postgres_privileges.__opts__", "postgres_privileges.__salt__"]}, "test_schema.py": {"libraries": ["salt.utils.json", "salt.utils.versions.Version", "salt.utils.stringutils", "rfc3987", "strict_rfc3339", "tests.support.unit.TestCase", "salt.utils.schema", "pytest", "jsonschema.exceptions", "salt.utils.yaml", "jsonschema", "copy"], "function_names": ["test_both_complex_complex_schema_all_items_valid", "test_allof_config", "test_allof_config_validation", "test_number_config", "test_hostname_config_validation", "test_hostname_config", "test_array_config_validation", "test_anyof_config_validation", "test_integer_config_validation", "test_dict_complex_definition_schema", "test_complex_complex_schema_item_hungry_valid", "test_complex_complex_schema_item_missing_required_hungry", "test_complex_schema_item_thirsty_invalid", "test_complex_definition_schema", "test_string_config_validation", "test_complex_complex_schema_item_inner_thirsty_invalid", "test_complex_schema_item_definition", "test_datetime_config", "test_email_config", "test_configuration_items_order", "test_uri_config", "test_complex_complex_schema_item_hungry_invalid", "test_item_name_override_class_attrname", "test_ipv4_config", "test_optional_requirements_config_validation", "test_config_name_override_class_attrname", "test_complex_complex_schema_item_definition", "test_ipv6_config_validation", "test_array_config", "test_dict_config_validation", "test_oneof_config", "test_boolean_config_validation", "test_oneof_config_validation", "test_not_config", "test_ipv4_config_validation", "test_email_config_validation", "test_number_config_validation", "test_ipv6_config", "test_boolean_config", "test_configuration_subclass_inherits_items", "test_secret_config", "test_uri_config_validation", "test_complex_complex_definition_schema", "test_complex_schema_item_thirsty_valid", "test_anyof_config", "test_one_of_complex_definition_schema", "test_array_complex_definition_schema", "test_complex_schema_item_serialize", "test_optional_requirements_config", "test_not_config_validation", "test_dict_config", "test_datetime_config_validation", "test_string_config", "test_integer_config"], "function_calls": ["ComplexSchemaItem", "Version", "Requirements", "Props", "AgesConfig", "TestDictComplexDefinitionsSchema", "TestArrayComplexDefinitionsSchema", "Three", "SSHKeyFileSchema", "HowManyConfig", "TestOneOfComplexDefinitionsSchema", "TestComplexDefinitionsSchema", "ComplexComplexSchemaItem", "SSHKeyNamesSchema", "TestConf", "SubClassedConfig", "TestComplexComplexDefinitionsSchema"], "class_names": ["One", "HowManyConfig", "TestArrayComplexDefinitionsSchema", "ConfigTestCase", "TestOneOfComplexDefinitionsSchema", "ComplexSchemaItem", "Requirements", "AgesConfig", "Three", "SSHKeyFileSchema", "Requirements3", "TestConf2", "SSHKeyNamesSchema", "Requirements4", "MergedConfigClass", "Final", "ComplexSchemaTestCase", "TestComplexDefinitionsSchema", "ComplexComplexSchemaItem", "TestConf", "TestComplexComplexDefinitionsSchema", "Requirements2", "TestDictComplexDefinitionsSchema", "BaseRequirements", "BaseConfig", "SubClassedConfig", "Props"], "class_method_calls": ["item.serialize", "self.obj", "schema.HostnameItem", "schema.DictItem", "item.items", "self.assertIn", "schema.Schema", "schema.ComplexSchemaItem", "schema.IPv6Item", "complex_obj.get_definition", "schema.DateTimeItem", "item.pattern", "item.max_items", "item.unique_items", "item.min_length", "obj.serialize", "self.complex_schema", "i.serialize", "jsonschema.__version__", "schema.IntegerItem", "schema.NumberItem", "item.item", "self.array_schema", "SSHKeyFileSchema.as_requirements_item", "SSHKeyNamesSchema.as_requirements_item", "MergedConfigClass.serialize", "item.additional_items", "self.one_of_schema", "schema.UriItem", "self.assertEqual", "excinfo.exception", "item.default", "pytest.mark", "Requirements2.serialize", "self.fail", "item.min_items", "self.dict_schema", "Requirements.serialize", "schema.DefinitionsSchema", "HowManyConfig.serialize", "schema.SecretItem", "string_item.description", "schema.RequirementsItem", "TestConf2.serialize", "self.assertDictEqual", "self.assertRaises", "schema.Null", "AgesConfig.serialize", "schema.StringItem", "schema.BooleanItem", "schema.EMailItem", "Requirements3.serialize", "integer_item.title", "schema.IPv4Item", "schema.AllOfItem", "self.assertDictContainsSubset", "item.format", "item.minimum", "self.schema", "obj.get_definition", "Final.serialize", "self.complex_obj", "schema.AnyOfItem", "jsonschema.validate", "item.multiple_of", "item.title", "schema.OneOfItem", "jsonschema.FormatChecker", "schema.ArrayItem", "copy.deepcopy", "schema.NotItem", "item.maximum", "integer_item.description", "salt.utils", "SubClassedConfig.serialize", "Requirements4.serialize", "item.max_length", "TestConf.serialize", "string_item.title", "jsonschema.exceptions", "item.description"]}, "test_function.py": {"libraries": ["salt.states.saltmod", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_arg", "configure_loader_modules", "test_function", "test_function_ssh", "test_fail_minions", "test_ret_kwargs", "test_subset", "test_failhard", "test_function_when_no_minions_match", "test_ret_config", "test_exception_raised", "test_batch"], "function_calls": ["str", "MagicMock", "Exception"], "class_names": [], "class_method_calls": ["ret.pop", "expected.pop", "saltmod.__salt__", "pytest.fixture", "saltmod.__opts__", "expected.update", "mock.assert_called_once", "mock.call_args", "cmd_mock.call_args", "patch.dict", "saltmod.function"]}, "test_parallel_runners.py": {"libraries": ["salt.exceptions", "salt.states.saltmod", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_exception", "test_runners", "test_failed"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["ret.pop", "salt.exceptions", "expected.pop", "saltmod.__salt__", "pytest.fixture", "patch.dict", "saltmod.parallel_runners"]}, "test_wait_for_event.py": {"libraries": ["salt.states.saltmod", "tests.support.mock.MagicMock", "pytest", "salt.utils.state", "tests.support.mock.patch", "copy"], "function_names": ["configure_loader_modules", "__enter__", "get_event", "test_list_single_event", "__exit__", "test_test_mode", "__init__", "test_wait_for_event"], "function_calls": ["patch", "MockedEvent", "MagicMock"], "class_names": ["MockedEvent"], "class_method_calls": ["saltmod.wait_for_event", "self._data", "pytest.fixture", "saltmod.__opts__", "mocked_event.flag", "ret.update", "self.flag", "expected.update", "copy.deepcopy", "salt.utils", "patch.dict", "patch.object", "self.full"]}, "test_alias.py": {"libraries": ["salt.states.alias", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_present_set_target_failed", "test_present_has_target", "test_present_has_not_target_test", "test_absent_not_gone_test", "test_absent_rm_alias_failed", "test_present_set_target", "test_absent_rm_alias", "test_absent_already_gone"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["alias.present", "alias.__opts__", "alias.__salt__", "pytest.fixture", "patch.dict", "alias.absent"]}, "test_augeas.py": {"libraries": ["os", "tests.support.mock.mock_open", "salt.states.augeas", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["setup_func", "configure_loader_modules", "test_change_non_list_changes", "test_change_in_test_mode", "test_change_no_context_with_full_path_fail", "test_change_with_context_without_old_file", "test_change_non_list_load_path", "test_change_with_context_without_full_path_fail", "test_change_no_context_without_full_path_invalid_change", "test_change_no_context_with_full_path_multiple_files", "test_change_no_context_with_full_path_pass", "test_change_no_context_without_full_path_invalid_cmd", "test_change_no_context_without_full_path"], "function_calls": ["patch", "dict", "MagicMock"], "class_names": [], "class_method_calls": ["setup_func.mock_method_map", "ret.update", "pytest.fixture", "augeas.__salt__", "os.path", "augeas.change", "patch.dict", "patch.object", "augeas.__opts__"]}, "test_aws_sqs.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.aws_sqs", "pytest"], "function_names": ["test_exists", "configure_loader_modules", "test_absent"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["aws_sqs.exists", "aws_sqs.absent", "aws_sqs.__opts__", "ret.update", "pytest.fixture", "patch.dict", "aws_sqs.__salt__"]}, "test_blockdev.py": {"libraries": ["os", "tests.support.mock.MagicMock", "pytest", "salt.states.blockdev", "tests.support.mock.Mock", "tests.support.mock.patch", "salt.utils.path"], "function_names": ["test_tuned", "configure_loader_modules", "test__checkblk", "test_formatted"], "function_calls": ["MagicMock", "Mock"], "class_names": [], "class_method_calls": ["cmd_mock.assert_called_once_with", "blockdev.formatted", "ret.update", "pytest.fixture", "blockdev.__opts__", "blockdev._checkblk", "blockdev.tuned", "os.path", "salt.utils", "patch.dict", "blockdev.__salt__", "patch.object"]}, "test_boto_asg.py": {"libraries": ["salt.states.boto_asg", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["magic_side_effect", "configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock", "isinstance"], "class_names": [], "class_method_calls": ["boto_asg.__opts__", "boto_asg.present", "boto_asg.__salt__", "boto_asg.absent", "ret.update", "pytest.fixture", "boto_asg.__utils__", "patch.dict"]}, "test_boto_cloudfront.py": {"libraries": ["textwrap", "salt.loader", "salt.states.boto_cloudfront", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "copy"], "function_names": ["configure_loader_modules", "test_present_update_config_and_tags", "test_present_correct_state", "base_ret_with", "test_present_from_scratch", "test_present_distribution_retrieval_error"], "function_calls": ["base_ret_with", "MagicMock"], "class_names": [], "class_method_calls": ["comment.format", "boto_cloudfront.present", "salt.loader", "copy.deepcopy", "pytest.fixture", "textwrap.dedent", "new_ret.update", "patch.multiple"]}, "test_boto_cloudtrail.py": {"libraries": ["salt.modules.boto_cloudtrail", "string", "boto3", "random", "salt.utils.versions.Version", "botocore.exceptions.ClientError", "salt.loader", "tests.support.unit.TestCase", "salt.config", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch", "boto"], "function_names": ["test_that_when_getting_status_it_returns_the_dict_of_properties_returns_false", "test_that_when_updating_a_trail_fails_the_update_trail_method_returns_error", "test_that_when_removing_tags_succeeds_the_remove_tags_method_returns_true", "test_that_when_checking_if_a_trail_exists_and_a_trail_does_not_exist_the_trail_exists_method_returns_false", "test_that_when_stopping_logging_succeeds_the_stop_logging_method_returns_true", "test_that_when_adding_tags_fails_the_add_tags_method_returns_false", "test_that_when_deleting_a_trail_succeeds_the_delete_trail_method_returns_true", "_has_required_boto", "test_that_when_listing_tags_fails_the_list_tags_method_returns_false", "test_that_when_checking_if_a_trail_exists_and_a_trail_exists_the_trail_exists_method_returns_true", "setup_loader_modules", "test_that_when_listing_trail_fails_the_list_trail_method_returns_error", "setUp", "test_that_when_stop_logging_fails_the_stop_logging_method_returns_false", "test_that_when_getting_status_on_client_error_it_returns_error", "test_that_when_deleting_a_trail_fails_the_delete_trail_method_returns_false", "test_that_when_updating_a_trail_succeeds_the_update_trail_method_returns_true", "test_that_when_checking_if_a_trail_exists_and_boto3_returns_an_error_the_trail_exists_method_returns_error", "test_that_when_adding_tags_succeeds_the_add_tags_method_returns_true", "test_that_when_removing_tags_fails_the_remove_tags_method_returns_false", "test_that_when_describing_trail_it_returns_the_dict_of_properties_returns_false", "test_that_when_listing_tags_succeeds_the_list_tags_method_returns_true", "test_that_when_describing_trail_it_returns_the_dict_of_properties_returns_true", "test_that_when_creating_a_trail_succeeds_the_create_trail_method_returns_true", "test_that_when_getting_status_it_returns_the_dict_of_properties_returns_true", "test_that_when_starting_logging_succeeds_the_start_logging_method_returns_true", "test_that_when_start_logging_fails_the_start_logging_method_returns_false", "test_that_when_describing_trail_on_client_error_it_returns_error", "test_that_when_creating_a_trail_fails_the_create_trail_method_returns_error", "test_that_when_listing_trails_succeeds_the_list_trails_method_returns_true", "test_that_when_listing_trail_fails_the_list_trail_method_returns_false"], "function_calls": ["Version", "MagicMock", "super", "range", "patch", "dict", "ClientError", "_has_required_boto"], "class_names": ["BotoCloudTrailTestCase", "BotoCloudTrailTestCaseBase", "BotoCloudTrailTestCaseMixin"], "class_method_calls": ["boto_cloudtrail.__init__", "error_message.format", "boto_cloudtrail.stop_logging", "random.choice", "boto_cloudtrail.exists", "self.patcher", "result.get", "boto_cloudtrail.list", "boto_cloudtrail.remove_tags", "boto_cloudtrail.list_tags", "logging.getLogger", "boto_cloudtrail.create", "self.assertEqual", "boto_cloudtrail.describe", "pytest.mark", "mock_session.return_value", "boto_cloudtrail.delete", "self.assertFalse", "boto3.__version__", "self.conn", "string.ascii_lowercase", "self.opts", "salt.loader", "boto_cloudtrail.update", "boto_cloudtrail.add_tags", "self.addCleanup", "boto_cloudtrail.status", "patch.dict", "boto_cloudtrail.start_logging", "boto_cloudtrail.__salt__", "string.digits", "session_instance.client", "self.assertTrue", "salt.config"]}, "test_boto_cloudwatch_alarm.py": {"libraries": ["tests.support.mock.patch", "salt.states.boto_cloudwatch_alarm", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["boto_cloudwatch_alarm.__salt__", "boto_cloudwatch_alarm.absent", "boto_cloudwatch_alarm.__opts__", "ret.update", "pytest.fixture", "patch.dict", "boto_cloudwatch_alarm.present"]}, "test_boto_cloudwatch_event.py": {"libraries": ["string", "boto3", "random", "botocore.exceptions.ClientError", "salt.loader", "tests.support.unit.TestCase", "salt.modules.boto_cloudwatch_event", "salt.config", "tests.support.mock.MagicMock", "pytest", "logging", "botocore.__version__", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch", "boto"], "function_names": ["test_that_when_removing_targets_succeeds_the_remove_targets_method_returns_true", "test_that_when_checking_if_a_rule_exists_and_a_rule_does_not_exist_the_exists_method_returns_false", "test_that_when_creating_a_rule_succeeds_the_create_rule_method_returns_true", "_has_required_boto", "setup_loader_modules", "test_that_when_putting_targets_fails_the_put_targets_method_returns_error", "setUp", "test_that_when_putting_targets_succeeds_the_put_target_method_returns_no_failures", "test_that_when_removing_targets_fails_the_remove_targets_method_returns_error", "test_that_when_creating_a_rule_fails_the_create_method_returns_error", "test_that_when_checking_if_a_rule_exists_and_a_rule_exists_the_rule_exists_method_returns_true", "test_that_when_describing_rule_and_boto3_returns_error_the_describe_method_returns_error", "test_that_when_deleting_a_rule_fails_the_delete_method_returns_error", "test_that_when_listing_targets_and_rule_exists_the_list_targets_method_returns_targets", "test_that_when_describing_rule_and_rule_does_not_exists_the_describe_method_returns_none", "test_that_when_deleting_a_rule_succeeds_the_delete_method_returns_true", "test_that_when_listing_targets_and_rule_does_not_exist_the_list_targets_method_returns_error", "test_that_when_checking_if_a_rule_exists_and_boto3_returns_an_error_the_rule_exists_method_returns_error", "test_that_when_describing_rule_and_rule_exists_the_describe_rule_method_returns_rule"], "function_calls": ["MagicMock", "super", "range", "patch", "dict", "ClientError", "_has_required_boto"], "class_names": ["BotoCloudWatchEventTestCaseBase", "BotoCloudWatchEventTestCaseMixin", "BotoCloudWatchEventTestCase"], "class_method_calls": ["boto_cloudwatch_event.describe", "error_message.format", "random.choice", "self.patcher", "result.get", "boto_cloudwatch_event.exists", "boto_cloudwatch_event.put_targets", "logging.getLogger", "boto_cloudwatch_event.delete", "self.assertEqual", "self.assertNotEqual", "pytest.mark", "mock_session.return_value", "self.assertFalse", "boto_cloudwatch_event.remove_targets", "self.assertIsNone", "boto_cloudwatch_event.__init__", "self.conn", "string.ascii_lowercase", "self.opts", "salt.loader", "self.addCleanup", "boto_cloudwatch_event.create_or_update", "boto_cloudwatch_event.list_targets", "string.digits", "session_instance.client", "self.assertTrue", "salt.config"]}, "test_boto_ec2.py": {"libraries": ["salt.states.boto_ec2", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_key_absent", "test_key_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["boto_ec2.__salt__", "boto_ec2.__opts__", "ret.update", "pytest.fixture", "boto_ec2.key_present", "patch.dict", "boto_ec2.key_absent"]}, "test_boto_elasticache.py": {"libraries": ["tests.support.mock.patch", "salt.states.boto_elasticache", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present", "test_creategroup"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["boto_elasticache.creategroup", "boto_elasticache.absent", "boto_elasticache.present", "ret.update", "pytest.fixture", "pytest.mark", "patch.dict", "boto_elasticache.__salt__", "boto_elasticache.__opts__"]}, "test_boto_elasticsearch_domain.py": {"libraries": ["string", "salt.modules.boto_elasticsearch_domain", "boto3", "random", "salt.utils.versions.Version", "botocore.exceptions.ClientError", "salt.loader", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch", "copy"], "function_names": ["test_that_when_updating_a_domain_succeeds_the_update_domain_method_returns_true", "test_that_when_removing_tags_succeeds_the_remove_tags_method_returns_true", "test_that_when_adding_tags_fails_the_add_tags_method_returns_false", "_has_required_boto", "test_that_when_listing_tags_fails_the_list_tags_method_returns_false", "setup_loader_modules", "setUp", "test_that_when_checking_domain_status_and_a_domain_exists_the_domain_status_method_returns_info", "test_that_when_checking_if_a_domain_exists_and_boto3_returns_an_error_the_domain_exists_method_returns_error", "test_that_when_deleting_a_domain_fails_the_delete_domain_method_returns_false", "test_that_when_adding_tags_succeeds_the_add_tags_method_returns_true", "test_that_when_removing_tags_fails_the_remove_tags_method_returns_false", "test_that_when_listing_tags_succeeds_the_list_tags_method_returns_true", "test_that_when_creating_a_domain_fails_the_create_domain_method_returns_error", "test_that_when_updating_a_domain_fails_the_update_domain_method_returns_error", "test_that_when_describing_domain_on_client_error_it_returns_error", "test_that_when_creating_a_domain_succeeds_the_create_domain_method_returns_true", "test_that_when_deleting_a_domain_succeeds_the_delete_domain_method_returns_true", "test_that_when_describing_domain_it_returns_the_dict_of_properties_returns_true", "test_that_when_checking_if_a_domain_exists_and_a_domain_exists_the_domain_exists_method_returns_true", "test_that_when_checking_domain_status_and_boto3_returns_an_error_the_domain_status_method_returns_error", "test_that_when_checking_if_a_domain_exists_and_a_domain_does_not_exist_the_domain_exists_method_returns_false"], "function_calls": ["Version", "MagicMock", "super", "range", "patch", "dict", "ClientError", "_has_required_boto"], "class_names": ["BotoElasticsearchDomainTestCase", "BotoElasticsearchDomainTestCaseMixin", "BotoElasticsearchDomainTestCaseBase"], "class_method_calls": ["boto_elasticsearch_domain.__init__", "error_message.format", "boto_elasticsearch_domain.create", "random.choice", "self.patcher", "boto_elasticsearch_domain.delete", "result.get", "boto_elasticsearch_domain.exists", "desired_ret.pop", "log.warning", "boto_elasticsearch_domain.remove_tags", "logging.getLogger", "self.assertEqual", "domain_ret.items", "pytest.mark", "mock_session.return_value", "self.assertFalse", "boto3.__version__", "self.conn", "string.ascii_lowercase", "self.opts", "boto_elasticsearch_domain.update", "salt.loader", "self.addCleanup", "boto_elasticsearch_domain.add_tags", "args.update", "boto_elasticsearch_domain.list_tags", "string.digits", "session_instance.client", "self.assertTrue", "salt.config", "boto_elasticsearch_domain.describe", "copy.copy", "boto_elasticsearch_domain.status"]}, "test_boto_elb.py": {"libraries": ["moto.mock_ec2_deprecated", "pkg_resources", "os.path", "logging", "copy.deepcopy", "tests.support.unit.TestCase", "tests.support.runtests.RUNTIME_VARS", "tests.support.mock.patch", "sys", "salt.loader", "tests.support.mock.MagicMock", "moto.mock_elb_deprecated", "boto", "salt.utils.versions.Version", "salt.modules.boto_elb", "salt.config", "pytest", "tests.support.mixins.LoaderModuleMockMixin", "boto.ec2.elb"], "function_names": ["stub_function", "test_deregister_instances_valid_id_string", "test_deregister_instances_valid_id_list", "setup_loader_modules", "test_register_instances_valid_id_result_true", "test_register_instances_valid_id_string", "test_get_elb_config", "test_deregister_instances_valid_id_result_true", "mock_elb_deprecated", "mock_ec2_deprecated", "_has_required_moto", "setUp"], "function_calls": ["Version", "MagicMock", "patch", "deepcopy", "_has_required_moto"], "class_names": ["BotoElbTestCase"], "class_method_calls": ["zone.name", "boto_elb.get_elb_config", "log.debug", "os.path", "pkg_resources.get_distribution", "self.assertIn", "logging.getLogger", "boto_elb.__virtual__", "self.assertEqual", "pytest.mark", "conn_elb.create_load_balancer", "instance.id", "expected_instances.remove", "reservations.instances", "RUNTIME_VARS.TESTS_DIR", "load_balancer.register_instances", "load_balancer_refreshed.instances", "boto_elb.register_instances", "conn_ec2.run_instances", "boto.ec2", "conn_elb.get_all_load_balancers", "salt.loader", "boto_elb.deregister_instances", "conn_ec2.get_all_zones", "boto.ENDPOINTS_PATH", "salt.config", "TestCase.setUp", "sys.version_info"]}, "test_boto_iam_role.py": {"libraries": ["salt.states.boto_iam_role", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["boto_iam_role.__salt__", "boto_iam_role.__opts__", "ret.update", "pytest.fixture", "patch.dict", "boto_iam_role.absent", "boto_iam_role.present"]}, "test_boto_iot.py": {"libraries": ["string", "boto3", "salt.modules.boto_iot", "random", "salt.utils.versions.Version", "botocore.exceptions.ClientError", "salt.loader", "tests.support.unit.TestCase", "salt.config", "tests.support.mock.MagicMock", "pytest", "logging", "botocore.__version__", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch", "boto"], "function_names": ["test_that_when_describing_thing_type_and_boto3_returns_error_an_error_the_describe_thing_type_method_returns_error", "test_that_when_creating_a_thing_type_succeeds_the_create_thing_type_method_returns_true", "test_that_when_deprecating_a_thing_type_succeeds_the_deprecate_thing_type_method_returns_true", "test_that_when_checking_if_a_policy_version_exists_and_a_policy_version_exists_the_policy_version_exists_method_returns_true", "test_that_when_detach_principal_policy_succeeds_the_detach_principal_policy_method_returns_true", "test_that_when_list_principal_policies_fails_the_list_principal_policies_method_returns_error", "test_that_when_creating_a_topic_rule_fails_the_create_topic_rule_method_returns_error", "test_that_when_describing_topic_rule_on_client_error_it_returns_error", "test_that_when_listing_topic_rules_fails_the_list_topic_rules_method_returns_error", "test_that_when_checking_if_a_policy_exists_and_a_policy_does_not_exist_the_policy_exists_method_returns_false", "test_that_when_creating_a_policy_version_succeeds_the_create_policy_version_method_returns_true", "test_that_when_listing_policy_versions_fails_the_list_policy_versions_method_returns_error", "test_that_when_listing_topic_rules_succeeds_the_list_topic_rules_method_returns_true", "_has_required_boto", "test_that_when_set_default_policy_version_fails_the_set_default_policy_version_method_returns_error", "setup_loader_modules", "setUp", "test_that_when_deprecating_a_thing_type_fails_the_deprecate_thing_type_method_returns_error", "test_that_when_checking_if_a_thing_type_exists_and_boto3_returns_an_error_the_thing_type_exists_method_returns_error", "test_that_when_describing_policy_on_client_error_it_returns_error", "test_that_when_checking_if_a_policy_version_exists_and_a_policy_version_does_not_exist_the_policy_version_exists_method_returns_false", "test_that_when_checking_if_a_rule_exists_and_a_rule_does_not_exist_the_topic_rule_exists_method_returns_false", "test_that_when_describing_policy_version_it_returns_the_dict_of_properties_returns_false", "test_that_when_deleting_a_policy_fails_the_delete_policy_method_returns_false", "test_that_when_deleting_a_policy_version_succeeds_the_delete_policy_version_method_returns_true", "test_that_when_deleting_a_policy_version_fails_the_delete_policy_version_method_returns_false", "test_that_when_attach_principal_policy_version_fails_the_attach_principal_policy_version_method_returns_error", "test_that_when_creating_a_thing_type_fails_the_create_thing_type_method_returns_error", "test_that_when_deleting_a_policy_succeeds_the_delete_policy_method_returns_true", "test_that_when_listing_policy_fails_the_list_policy_method_returns_error", "test_that_when_replacing_a_topic_rule_succeeds_the_replace_topic_rule_method_returns_true", "test_that_when_listing_policies_succeeds_the_list_policies_method_returns_true", "test_that_when_listing_policy_versions_fails_the_list_policy_versions_method_returns_false", "test_that_when_deleting_a_topic_rule_succeeds_the_delete_topic_rule_method_returns_true", "test_that_when_checking_if_a_policy_exists_and_a_policy_exists_the_policy_exists_method_returns_true", "test_that_when_describing_topic_rule_it_returns_the_dict_of_properties_returns_true", "test_that_when_setting_default_policy_version_succeeds_the_set_default_policy_version_method_returns_true", "test_that_when_describing_policy_it_returns_the_dict_of_properties_returns_true", "test_that_when_checking_if_a_thing_type_exists_and_a_thing_type_exists_the_thing_type_exists_method_returns_true", "test_that_when_describing_thing_type_and_thing_type_does_not_exists_the_describe_thing_type_method_returns_none", "test_that_when_describing_policy_version_on_client_error_it_returns_error", "test_that_when_deleting_a_thing_type_succeeds_the_delete_thing_type_method_returns_true", "test_that_when_deleting_a_thing_type_fails_the_delete_thing_type_method_returns_error", "test_that_when_listing_policy_fails_the_list_policy_method_returns_false", "test_that_when_listing_policy_versions_succeeds_the_list_policy_versions_method_returns_true", "test_that_when_detach_principal_policy_version_fails_the_detach_principal_policy_version_method_returns_error", "test_that_when_checking_if_a_thing_type_exists_and_a_thing_type_does_not_exist_the_thing_type_exists_method_returns_false", "test_that_when_checking_if_a_topic_rule_exists_and_boto3_returns_an_error_the_topic_rule_exists_method_returns_error", "test_that_when_creating_a_policy_version_fails_the_create_policy_version_method_returns_error", "test_that_when_creating_a_policy_fails_the_create_policy_method_returns_error", "test_that_when_replacing_a_topic_rule_fails_the_replace_topic_rule_method_returns_error", "test_that_when_describing_policy_it_returns_the_dict_of_properties_returns_false", "test_that_when_checking_if_a_topic_rule_exists_and_a_topic_rule_exists_the_topic_rule_exists_method_returns_true", "test_that_when_checking_if_a_policy_exists_and_boto3_returns_an_error_the_policy_exists_method_returns_error", "test_that_when_creating_a_policy_succeeds_the_create_policy_method_returns_true", "test_that_when_checking_if_a_policy_version_exists_and_boto3_returns_an_error_the_policy_version_exists_method_returns_error", "test_that_when_attach_principal_policy_succeeds_the_attach_principal_policy_method_returns_true", "test_that_when_creating_a_topic_rule_succeeds_the_create_topic_rule_method_returns_true", "test_that_when_deleting_a_topic_rule_fails_the_delete_topic_rule_method_returns_false", "test_that_when_list_principal_policies_succeeds_the_list_principal_policies_method_returns_true", "test_that_when_describing_thing_type_and_thing_type_exists_the_describe_thing_type_method_returns_thing_type", "test_that_when_describing_policy_version_it_returns_the_dict_of_properties_returns_true"], "function_calls": ["Version", "MagicMock", "super", "range", "patch", "dict", "ClientError", "_has_required_boto"], "class_names": ["BotoIoTTestCaseBase", "BotoIoTTestCaseMixin", "BotoIoTPolicyTestCase", "BotoIoTThingTypeTestCase", "BotoIoTTopicRuleTestCase"], "class_method_calls": ["error_message.format", "random.choice", "boto_iot.list_policies", "boto_iot.policy_exists", "boto_iot.policy_version_exists", "self.patcher", "result.get", "boto_iot.describe_policy", "boto_iot.detach_principal_policy", "logging.getLogger", "boto_iot.create_policy", "self.assertEqual", "boto_iot.create_policy_version", "pytest.mark", "mock_session.return_value", "boto_iot.thing_type_exists", "boto_iot.delete_topic_rule", "self.assertFalse", "boto_iot.delete_thing_type", "boto_iot.deprecate_thing_type", "boto3.__version__", "self.conn", "boto_iot.create_thing_type", "string.ascii_lowercase", "boto_iot.__init__", "self.opts", "boto_iot.describe_policy_version", "boto_iot.attach_principal_policy", "boto_iot.topic_rule_exists", "salt.loader", "boto_iot.delete_policy_version", "boto_iot.list_principal_policies", "boto_iot.describe_thing_type", "self.addCleanup", "boto_iot.list_topic_rules", "boto_iot.create_topic_rule", "boto_iot.delete_policy", "string.digits", "boto_iot.set_default_policy_version", "session_instance.client", "boto_iot.replace_topic_rule", "self.assertTrue", "boto_iot.list_policy_versions", "boto_iot.describe_topic_rule", "salt.config"]}, "test_boto_kinesis.py": {"libraries": ["salt.states.boto_kinesis", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_stream_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["boto_kinesis.present", "ret.update", "pytest.fixture", "boto_kinesis.absent", "boto_kinesis.__opts__", "boto_kinesis.__salt__", "patch.dict"]}, "test_boto_lambda.py": {"libraries": ["string", "salt.modules.boto_lambda", "logging", "botocore.exceptions.ClientError", "boto3", "salt.utils.stringutils", "tempfile.NamedTemporaryFile", "tests.support.unit.TestCase", "salt.exceptions.SaltInvocationError", "botocore.__version__", "tests.support.mock.patch", "os", "salt.loader", "tests.support.mock.MagicMock", "random", "salt.utils.versions.Version", "salt.config", "pytest", "tests.support.mixins.LoaderModuleMockMixin"], "function_names": ["test_that_when_describing_event_source_mapping_it_returns_the_dict_of_properties_returns_true", "__enter__", "test_that_when_updating_an_alias_succeeds_the_update_alias_method_returns_true", "test_that_when_checking_if_an_event_source_mapping_exists_and_the_event_source_mapping_exists_the_event_source_mapping_exists_method_returns_true", "test_that_when_listing_mapping_ids_succeeds_the_get_event_source_mapping_ids_method_returns_true", "test_that_when_describing_function_it_returns_the_dict_of_properties_returns_true", "test_that_when_creating_an_event_source_mapping_fails_the_create_event_source_mapping_method_returns_error", "test_that_when_checking_if_an_event_source_mapping_exists_and_the_event_source_mapping_does_not_exist_the_event_source_mapping_exists_method_returns_false", "test_that_when_describing_function_it_returns_the_dict_of_properties_returns_false", "test_that_when_creating_an_alias_fails_the_create_alias_method_returns_error", "test_that_when_deleting_an_alias_succeeds_the_delete_alias_method_returns_true", "_has_required_boto", "test_that_when_deleting_an_alias_fails_the_delete_alias_method_returns_false", "setup_loader_modules", "setUp", "test_that_when_deleting_an_event_source_mapping_without_identifier_the_delete_event_source_mapping_method_raises_saltinvocationexception", "test_that_when_listing_event_source_mapping_ids_fails_the_get_event_source_mapping_ids_method_returns_error", "test_that_when_updating_function_code_fails_the_update_function_method_returns_error", "__exit__", "test_that_when_updating_function_code_from_s3_succeeds_the_update_function_method_returns_true", "test_that_when_listing_function_versions_succeeds_the_list_function_versions_method_returns_true", "test_that_when_creating_a_function_from_zipfile_succeeds_the_create_function_method_returns_true", "test_that_when_deleting_an_event_source_mapping_fails_the_delete_event_source_mapping_method_returns_false", "test_that_when_creating_a_mapping_succeeds_the_create_event_source_mapping_method_returns_true", "test_that_when_listing_event_source_mapping_ids_fails_the_get_event_source_mapping_ids_versions_method_returns_false", "test_that_when_creating_an_alias_succeeds_the_create_alias_method_returns_true", "test_that_when_describing_lambda_on_client_error_it_returns_error", "test_that_when_updating_function_code_without_code_raises_a_salt_invocation_error", "test_that_when_checking_if_a_function_exists_and_a_function_does_not_exist_the_function_exists_method_returns_false", "test_that_when_updating_an_alias_fails_the_update_alias_method_returns_error", "test_that_when_creating_a_function_fails_the_create_function_method_returns_error", "test_that_when_updating_an_event_source_mapping_fails_the_update_event_source_mapping_method_returns_error", "test_that_when_deleting_a_function_fails_the_delete_function_method_returns_false", "test_that_when_deleting_an_event_source_mapping_by_UUID_succeeds_the_delete_event_source_mapping_method_returns_true", "test_that_when_checking_if_an_alias_exists_and_the_alias_exists_the_alias_exists_method_returns_true", "test_that_when_checking_if_an_event_source_mapping_exists_and_boto3_returns_an_error_the_event_source_mapping_exists_method_returns_error", "test_that_when_updating_function_code_from_zipfile_succeeds_the_update_function_method_returns_true", "test_that_when_creating_a_function_from_s3_succeeds_the_create_function_method_returns_true", "test_that_when_checking_if_an_alias_exists_and_boto3_returns_an_error_the_alias_exists_method_returns_error", "test_that_when_describing_alias_it_returns_the_dict_of_properties_returns_false", "test_that_when_deleting_an_event_source_mapping_by_name_succeeds_the_delete_event_source_mapping_method_returns_true", "test_that_when_checking_if_an_alias_exists_and_the_alias_does_not_exist_the_alias_exists_method_returns_false", "test_that_when_describing_event_source_mapping_it_returns_the_dict_of_properties_returns_false", "test_that_when_checking_if_a_function_exists_and_boto3_returns_an_error_the_function_exists_method_returns_error", "test_that_when_checking_if_a_function_exists_and_a_function_exists_the_function_exists_method_returns_true", "test_that_when_listing_function_versions_fails_the_list_function_versions_method_returns_error", "test_that_when_creating_a_function_without_code_raises_a_salt_invocation_error", "test_that_when_deleting_a_function_succeeds_the_delete_function_method_returns_true", "test_that_when_updating_a_function_fails_the_update_function_method_returns_error", "test_that_when_updating_a_function_succeeds_the_update_function_method_returns_true", "test_that_when_creating_a_function_with_zipfile_and_s3_raises_a_salt_invocation_error", "test_that_when_describing_event_source_mapping_on_client_error_it_returns_error", "test_that_when_updating_an_event_source_mapping_succeeds_the_update_event_source_mapping_method_returns_true", "test_that_when_listing_function_versions_fails_the_list_function_versions_method_returns_false", "test_that_when_describing_alias_it_returns_the_dict_of_properties_returns_true"], "function_calls": ["Version", "MagicMock", "super", "range", "patch", "dict", "ClientError", "TempZipFile", "NamedTemporaryFile", "_has_required_boto"], "class_names": ["BotoLambdaFunctionTestCase", "BotoLambdaEventSourceMappingTestCase", "BotoLambdaTestCaseBase", "TempZipFile", "BotoLambdaAliasTestCase", "BotoLambdaTestCaseMixin"], "class_method_calls": ["error_message.format", "boto_lambda.get_event_source_mapping_ids", "random.choice", "boto_lambda.delete_alias", "self.patcher", "result.get", "boto_lambda.delete_event_source_mapping", "boto_lambda.describe_function", "logging.getLogger", "boto_lambda.delete_function", "self.assertEqual", "boto_lambda.update_alias", "boto_lambda.describe_alias", "self.assertRaisesRegex", "pytest.mark", "mock_session.return_value", "boto_lambda.create_alias", "boto_lambda.update_function_config", "func_exists_result.get", "self.assertFalse", "self.zipfile", "boto_lambda.update_event_source_mapping", "lambda_creation_result.get", "boto3.__version__", "self.conn", "tmp.name", "string.ascii_lowercase", "boto_lambda.create_function", "self.opts", "salt.loader", "boto_lambda.update_function_code", "salt.utils", "boto_lambda.__salt__", "self.addCleanup", "patch.dict", "boto_lambda.function_exists", "boto_lambda.create_event_source_mapping", "tmp.write", "boto_lambda.list_function_versions", "string.digits", "boto_lambda.event_source_mapping_exists", "session_instance.client", "os.remove", "self.assertTrue", "boto_lambda.alias_exists", "salt.config", "boto_lambda.__init__", "boto_lambda.describe_event_source_mapping"]}, "test_boto_lc.py": {"libraries": ["salt.states.boto_lc", "salt.exceptions.SaltInvocationError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["boto_lc.present", "boto_lc.__opts__", "boto_lc.absent", "pytest.fixture", "ret.update", "pytest.raises", "patch.dict", "boto_lc.__salt__"]}, "test_boto_route53.py": {"libraries": ["sys", "boto", "moto.mock_route53_deprecated", "pkg_resources", "salt.loader", "boto.route53.exception.DNSServerError", "salt.utils.versions", "tests.support.unit.TestCase", "tests.support.runtests.RUNTIME_VARS", "salt.config", "tests.support.mock.MagicMock", "os.path", "logging", "pytest", "tests.support.mixins.LoaderModuleMockMixin", "salt.modules.boto_route53", "tests.support.mock.patch", "collections.namedtuple"], "function_names": ["tearDown", "stub_function", "test_create_healthcheck", "setup_loader_modules", "test_add_record", "mock_route53_deprecated", "test_delete_record", "test_zone_exists", "test_get_record", "__init__", "_has_required_moto", "setUp", "test_update_record"], "function_calls": ["MagicMock", "setattr", "DummyConn", "Exception", "namedtuple", "delattr", "_has_required_moto", "DNSServerError"], "class_names": ["BotoRoute53TestCase", "DummyConn", "BotoRoute53RetryTestCase"], "class_method_calls": ["boto_route53.delete_record", "conn.get_zone", "os.path", "pkg_resources.get_distribution", "zone.add_record", "patch.object", "boto_route53.__virtual__", "logging.getLogger", "boto_route53.__init__", "self._fatal_error", "self.assertEqual", "conn.create_health_check", "zone.update_record", "pytest.mark", "RUNTIME_VARS.TESTS_DIR", "boto_route53.get_record", "boto_route53.update_record", "self.opts", "salt.loader", "boto_route53.zone_exists", "zone.find_records", "salt.utils", "boto_route53.create_healthcheck", "zone.delete_record", "kwargs.items", "boto_route53.add_record", "zone.id", "boto.ENDPOINTS_PATH", "salt.config", "boto_route53._get_conn", "TestCase.setUp", "self._retryable_error", "sys.version_info"]}, "test_boto_s3_bucket.py": {"libraries": ["salt.modules.boto_s3_bucket", "string", "boto3", "random", "salt.utils.versions.Version", "botocore.exceptions.ClientError", "salt.loader", "copy.deepcopy", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch", "boto"], "function_names": ["test_that_when_deleting_replication_fails_the_delete_replication_method_returns_error", "test_that_when_deleting_policy_fails_the_delete_policy_method_returns_error", "test_that_when_deleting_replication_succeeds_the_delete_replication_method_returns_true", "test_that_when_putting_cors_fails_the_put_cors_method_returns_error", "test_that_when_putting_versioning_succeeds_the_put_versioning_method_returns_true", "test_that_when_putting_website_succeeds_the_put_website_method_returns_true", "test_that_when_deleting_cors_succeeds_the_delete_cors_method_returns_true", "test_that_when_putting_versioning_fails_the_put_versioning_method_returns_error", "test_that_when_putting_tagging_fails_the_put_tagging_method_returns_error", "test_that_when_deleting_lifecycle_configuration_succeeds_the_delete_lifecycle_configuration_method_returns_true", "test_that_when_putting_cors_succeeds_the_put_cors_method_returns_true", "test_that_when_listing_bucket_fails_the_list_bucket_method_returns_error", "_has_required_boto", "test_that_when_putting_notification_configuration_fails_the_put_notification_configuration_method_returns_error", "setup_loader_modules", "setUp", "test_that_when_putting_lifecycle_configuration_fails_the_put_lifecycle_configuration_method_returns_error", "test_that_when_putting_replication_fails_the_put_replication_method_returns_error", "test_that_when_checking_if_a_bucket_exists_and_boto3_returns_an_error_the_bucket_exists_method_returns_error", "test_that_when_putting_request_payment_succeeds_the_put_request_payment_method_returns_true", "test_that_when_creating_a_bucket_succeeds_the_create_bucket_method_returns_true", "test_that_when_describing_bucket_on_client_error_it_returns_error", "test_that_when_putting_logging_succeeds_the_put_logging_method_returns_true", "test_that_when_deleting_policy_succeeds_the_delete_policy_method_returns_true", "test_that_when_putting_request_payment_fails_the_put_request_payment_method_returns_error", "test_that_when_checking_if_a_bucket_exists_and_a_bucket_exists_the_bucket_exists_method_returns_true", "test_that_when_putting_tagging_succeeds_the_put_tagging_method_returns_true", "test_that_when_listing_buckets_succeeds_the_list_buckets_method_returns_true", "test_that_when_putting_policy_succeeds_the_put_policy_method_returns_true", "test_that_when_putting_replication_succeeds_the_put_replication_method_returns_true", "test_that_when_creating_a_bucket_fails_the_create_bucket_method_returns_error", "test_that_when_putting_acl_succeeds_the_put_acl_method_returns_true", "test_that_when_checking_if_a_bucket_exists_and_a_bucket_does_not_exist_the_bucket_exists_method_returns_false", "test_that_when_putting_website_fails_the_put_website_method_returns_error", "test_that_when_deleting_website_fails_the_delete_website_method_returns_error", "test_that_when_deleting_a_bucket_fails_the_delete_bucket_method_returns_false", "test_that_when_putting_logging_fails_the_put_logging_method_returns_error", "test_that_when_describing_bucket_it_returns_the_dict_of_properties_returns_true", "test_that_when_deleting_a_bucket_succeeds_the_delete_bucket_method_returns_true", "test_that_when_deleting_tagging_fails_the_delete_tagging_method_returns_error", "test_that_when_putting_policy_fails_the_put_policy_method_returns_error", "test_that_when_listing_bucket_fails_the_list_bucket_method_returns_false", "test_that_when_deleting_website_succeeds_the_delete_website_method_returns_true", "test_that_when_describing_bucket_it_returns_the_dict_of_properties_returns_false", "test_that_when_deleting_tagging_succeeds_the_delete_tagging_method_returns_true", "test_that_when_deleting_cors_fails_the_delete_cors_method_returns_error", "test_that_when_putting_acl_fails_the_put_acl_method_returns_error", "test_that_when_putting_notification_configuration_succeeds_the_put_notification_configuration_method_returns_true", "test_that_when_putting_lifecycle_configuration_succeeds_the_put_lifecycle_configuration_method_returns_true", "test_that_when_deleting_lifecycle_configuration_fails_the_delete_lifecycle_configuration_method_returns_error"], "function_calls": ["Version", "MagicMock", "super", "range", "patch", "list", "ClientError", "deepcopy", "getattr", "_has_required_boto"], "class_names": ["BotoS3BucketTestCase", "BotoS3BucketTestCaseBase", "BotoS3BucketTestCaseMixin"], "class_method_calls": ["error_message.format", "config_ret.items", "random.choice", "boto_s3_bucket.put_tagging", "boto_s3_bucket.__init__", "boto_s3_bucket.describe", "self.patcher", "boto_s3_bucket.put_logging", "result.get", "log.info", "logging.getLogger", "self.assertEqual", "boto_s3_bucket.delete_website", "boto_s3_bucket.delete", "boto_s3_bucket.put_acl", "boto_s3_bucket.delete_policy", "pytest.mark", "mock_session.return_value", "boto_s3_bucket.delete_tagging", "boto_s3_bucket.delete_lifecycle_configuration", "self.assertFalse", "boto_s3_bucket.put_replication", "boto3.__version__", "self.conn", "boto_s3_bucket.put_policy", "string.ascii_lowercase", "self.opts", "boto_s3_bucket.put_cors", "salt.loader", "self.addCleanup", "boto_s3_bucket.put_lifecycle_configuration", "boto_s3_bucket.exists", "boto_s3_bucket.delete_replication", "boto_s3_bucket.put_versioning", "boto_s3_bucket.put_request_payment", "boto_s3_bucket.put_website", "string.digits", "session_instance.client", "boto_s3_bucket.create", "self.assertTrue", "salt.config", "boto_s3_bucket.list", "boto_s3_bucket.delete_cors", "boto_s3_bucket.put_notification_configuration"]}, "test_boto_secgroup.py": {"libraries": ["sys", "string", "boto.ec2", "random", "salt.utils.versions.Version", "salt.utils.odict.OrderedDict", "moto.mock_ec2_deprecated", "salt.loader", "copy.deepcopy", "tests.support.unit.TestCase", "tests.support.runtests.RUNTIME_VARS", "salt.config", "os.path", "pytest", "salt.modules.boto_secgroup", "tests.support.mixins.LoaderModuleMockMixin", "boto"], "function_names": ["_random_group_id", "test_create_ec2_vpc", "test_delete_group_ec2_classic", "_has_required_boto", "setup_loader_modules", "setUp", "test_create_ec2_classic", "test_get_group_id_ec2_classic", "test_delete_group_name_ec2_vpc", "test_exists_false_group_id", "test_exists_true_name_classic", "test__split_rules", "test_exists_true_group_id", "test_exists_false_name_vpc", "test_exists_true_name_vpc", "stub_function", "_random_group_name", "test_exists_false_name_classic", "test_get_group_id_ec2_vpc", "test_get_config_single_rule_group_name", "mock_ec2_deprecated", "test__get_conn_true"], "function_calls": ["Version", "_random_group_name", "super", "range", "_random_group_id", "deepcopy", "OrderedDict", "_has_required_boto"], "class_names": ["BotoSecgroupTestCase"], "class_method_calls": ["random.choice", "group.name", "salt_conn.__class__", "os.path", "group.description", "boto_secgroup.delete", "expected_groups.remove", "self.assertEqual", "conn.__class__", "group_classic.id", "pytest.mark", "boto_secgroup.__virtual__", "RUNTIME_VARS.TESTS_DIR", "conn.create_security_group", "self.assertFalse", "boto_secgroup._split_rules", "random.randrange", "boto_secgroup._get_conn", "boto_secgroup.exists", "string.ascii_lowercase", "boto.ec2", "salt.loader", "boto.__version__", "conn.get_all_security_groups", "boto_secgroup.create", "group_vpc.id", "boto.ENDPOINTS_PATH", "self.assertTrue", "boto_secgroup.get_group_id", "salt.config", "group.id", "boto_secgroup.get_config", "sys.version_info", "group.authorize"]}, "test_boto_sqs.py": {"libraries": ["textwrap", "salt.loader", "salt.config", "tests.support.mock.MagicMock", "pytest", "salt.states.boto_sqs", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["boto_sqs.absent", "boto_sqs.__salt__", "salt.loader", "pytest.fixture", "ret.update", "textwrap.dedent", "base_ret.copy", "boto_sqs.present", "patch.dict", "boto_sqs.__opts__"]}, "test_chef.py": {"libraries": ["tests.support.mock.create_autospec", "salt.states.chef", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "salt.modules.chef"], "function_names": ["configure_loader_modules", "successful_unchanged_output", "test_when_not_testing_and_unsuccessful_output_result_should_be_False", "not_test_mode", "unsuccessful_output", "test_when_not_testing_and_successful_unchanged_output_result_should_be_True", "test_mode", "test_when_testing_and_successful_changed_output_result_should_be_None", "test_when_not_testing_and_successful_changed_output_result_should_be_True", "test_when_testing_and_successful_unchanged_output_result_should_be_True", "unchanged_output", "changed_output", "successful_changed_output", "test_solo", "chef_state_and_mock_mod", "test_client"], "function_calls": ["MagicMock", "create_autospec", "state"], "class_names": [], "class_method_calls": ["request.param", "mock_mod.return_value", "chef.__opts__", "pytest.fixture", "ret.update", "chef.__salt__", "chef.client", "salt.modules", "patch.dict", "chef.solo"]}, "test_docker_image.py": {"libraries": ["tests.support.mock.MagicMock", "pytest", "salt.states.docker_image", "salt.modules.dockermod", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_present_and_force", "test_present_already_local"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["patch.dict", "docker_state.__dict__", "docker_state.present", "pytest.fixture"]}, "test_docker_volume.py": {"libraries": ["salt.states.docker_volume", "pytest", "salt.modules.dockermod", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_present_with_another_driver", "test_present_wo_existing_volumes", "test_present", "create_volume", "remove_volume", "test_absent"], "function_calls": ["len", "Mock"], "class_names": [], "class_method_calls": ["volumes.append", "docker_state.absent", "pytest.fixture", "docker_state.__dict__", "docker_remove_volume.assert_called_with", "docker_state.present", "volumes.remove", "patch.dict", "docker_create_volume.assert_called_with"]}, "test_elasticsearch.py": {"libraries": ["salt.exceptions.CommandExecutionError", "tests.support.unit.TestCase", "salt.exceptions.SaltInvocationError", "tests.support.mock.MagicMock", "salt.modules.elasticsearch", "pytest", "tests.support.mock.patch"], "function_names": ["test_cluster_get_settings_succeess", "close", "test_index_close_failure", "test_alias_get_failure", "test_ping_failure", "test_node_info_failure", "test_alias_exists", "test_alias_delete", "test_document_delete", "test_index_template_delete_failure", "test_node_info", "test_alias_get", "test_mapping_get_not", "test_info", "test_document_create", "delete", "put_template", "test_pipeline_get", "test_index_get_failure", "test_index_create_not_shards", "test_index_get_not", "test_index_close", "test_search_template_get_failure", "test_mapping_delete_failure", "test_document_delete_failure", "test_index_delete_failure", "test_index_template_create", "test_pipeline_create_wrong_version", "test_search_template_get_not", "test_pipeline_get_wrong_version", "open", "test_index_create", "get_mapping", "test_index_open_not", "index", "test_index_template_get_not", "test_index_get_settings", "test_index_exists", "test_index_exists_failure", "exists_alias", "test_index_get_settings_not_exists", "test_mapping_delete_not", "create", "test_pipeline_simulate_failure", "get", "test_mapping_create", "test_document_exists_failure", "test_mapping_get_failure", "test_index_put_settings_not_exists", "test_index_template_exists_failure", "test_get_settings_failure", "exists_template", "info", "delete_template", "get_template", "test_index_delete_not", "test_index_delete", "test_index_open", "test_info_failure", "test_index_close_not", "es_return_true", "test_ping", "test_index_create_not", "test_index_exists_not", "test_alias_delete_unack", "test_flush_synced_succeess", "test_mapping_delete", "test_document_get", "test_cluster_health", "test_search_template_create_failure", "test_cluster_get_settings_failure", "test_alias_get_not", "test_document_exists", "test_search_template_get", "test_cluster_put_settings_failure", "test_pipeline_simulate_wrong_version", "test_search_template_delete_not_exists", "es_raise_command_execution_error", "get_pipeline", "test_cluster_put_settings_succeess", "test_index_template_get_failure", "test_pipeline_create_failure", "test_pipeline_delete_wrong_version", "test_search_template_create_not", "put_mapping", "test_index_create_no_shards", "simulate", "test_index_template_exists", "test_index_template_exists_not", "test_index_template_delete", "get_alias", "stats", "delete_alias", "test_document_get_failure", "test_document_get_not", "test_pipeline_create", "delete_pipeline", "test_pipeline_create_not", "test_cluster_put_settings_nobody", "delete_mapping", "test_document_exists_not", "test_index_template_get", "put_pipeline", "test_search_template_delete", "test_pipeline_get_failure", "test_index_put_settings_failure", "health", "test_pipeline_delete_failure", "test_cluster_health_failure", "test_search_template_create", "test_pipeline_simulate", "test_pipeline_delete_not", "test_cluster_stats_failure", "test_cluster_stats", "test_flush_synced_failure", "test_alias_exists_not", "test_document_create_failure", "test_alias_create_failure", "test_index_template_create_failure", "test_pipeline_get_not", "test_alias_create_unack", "test_pipeline_delete", "test_index_template_create_not", "test_alias_delete_failure", "test_index_create_failure", "test_index_get", "test_search_template_delete_failure", "test_alias_exists_failure", "test_alias_create", "test_mapping_create_not", "exists", "test_index_open_failure", "test_search_template_delete_not", "test_index_put_settings", "test_mapping_get", "test_index_template_delete_not", "put_alias", "test_mapping_create_failure"], "function_calls": ["TransportError", "MagicMock", "MockElastic", "MockElasticNodes", "NotFoundError", "MockElasticIndices", "MockElasticCluster", "CommandExecutionError", "MockElasticIngest"], "class_names": ["MockElastic", "MockElasticNodes", "MockElasticIndices", "ElasticsearchTestCase", "MockElasticCluster", "MockElasticIngest"], "class_method_calls": ["self.assertDictEqual", "self.assertRaises", "elasticsearch.cluster_health", "elasticsearch.alias_get", "elasticsearch.document_exists", "elasticsearch.pipeline_create", "_es_module.NotFoundError", "elasticsearch.cluster_get_settings", "elasticsearch.search_template_get", "elasticsearch.cluster_stats", "elasticsearch.index_put_settings", "elasticsearch.alias_exists", "elasticsearch.index_exists", "patch.object", "elasticsearch.ping", "elasticsearch.mapping_delete", "elasticsearch.mapping_create", "self.assertListEqual", "self.assertIs", "elasticsearch.document_create", "self.assertFalse", "fake_es.cluster", "elasticsearch.index_template_get", "elasticsearch.document_delete", "elasticsearch.index_create", "fake_es.indices", "elasticsearch.index_delete", "elasticsearch.node_info", "elasticsearch.index_template_create", "elasticsearch.pipeline_simulate", "_es_module.TransportError", "self.es_return_true", "elasticsearch.alias_delete", "elasticsearch.search_template_create", "elasticsearch.alias_create", "elasticsearch.index_template_delete", "elasticsearch.index_open", "elasticsearch.search_template_delete", "pytest.importorskip", "elasticsearch.mapping_get", "elasticsearch.index_close", "elasticsearch.flush_synced", "elasticsearch.index_get", "elasticsearch.document_get", "elasticsearch.pipeline_get", "self.es_raise_command_execution_error", "self.assertTrue", "elasticsearch.index_get_settings", "elasticsearch.index_template_exists", "elasticsearch.info", "elasticsearch.pipeline_delete", "elasticsearch.cluster_put_settings"]}, "test_eselect.py": {"libraries": ["salt.states.eselect", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_set_"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["eselect.set_", "ret.update", "pytest.fixture", "eselect.__salt__", "patch.dict"]}, "test_grafana.py": {"libraries": ["salt.utils.json", "salt.exceptions.SaltInvocationError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch", "salt.states.grafana"], "function_names": ["configure_loader_modules", "test_dashboard_present", "test_dashboard_absent"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["grafana.dashboard_present", "grafana.__opts__", "patch.object", "pytest.fixture", "ret.update", "pytest.raises", "salt.utils", "patch.dict", "grafana.__salt__", "grafana.dashboard_absent"]}, "test_grafana_datasource.py": {"libraries": ["salt.states.grafana_datasource", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_absent", "test_present", "mock_json_response"], "function_calls": ["patch", "MagicMock", "mock_json_response", "Mock"], "class_names": [], "class_method_calls": ["grafana_datasource.present", "response.json", "rdelete.call_count", "pytest.fixture", "data.update", "rpost.assert_called_once_with", "grafana_datasource.absent", "rdelete.assert_called_once_with", "grafana_datasource._get_json_data", "rput.assert_called_once_with"]}, "test_influxdb08_database.py": {"libraries": ["salt.states.influxdb08_database", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["influxdb08_database.__opts__", "influxdb08_database.present", "influxdb08_database.absent", "influxdb08_database.__salt__", "pytest.fixture", "ret.update", "patch.dict"]}, "test_influxdb08_user.py": {"libraries": ["salt.states.influxdb08_user", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["influxdb08_user.__opts__", "influxdb08_user.absent", "influxdb08_user.__salt__", "pytest.fixture", "ret.update", "influxdb08_user.present", "patch.dict"]}, "test_influxdb_continuous_query.py": {"libraries": ["tests.support.mock.create_autospec", "salt.modules.influxdbmod", "pytest", "salt.states.influxdb_continuous_query", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_when_present_is_called_it_should_pass_client_args_to_create_module"], "function_calls": ["create_autospec"], "class_names": [], "class_method_calls": ["influx_module.create_continuous_query", "pytest.fixture", "pytest.mark", "influx.present", "patch.dict", "influx_module.continuous_query_exists", "influx.__salt__"]}, "test_ipmi.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.ipmi", "pytest"], "function_names": ["test_user_present", "configure_loader_modules", "test_boot_device", "test_power", "test_user_absent"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["ret.update", "pytest.fixture", "ipmi.user_present", "ipmi.boot_device", "ipmi.power", "ipmi.__opts__", "ipmi.__salt__", "patch.dict", "ipmi.user_absent"]}, "test_jboss7.py": {"libraries": ["salt.modules.jboss7", "salt.utils.odict.OrderedDict", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "tests.support.mixins.LoaderModuleMockMixin"], "function_names": ["test_create_datasource_format_int_value_when_int", "test_read_datasource", "test_update_datasource", "cli_command_response", "test_create_simple_binding", "test_create_simple_binding_with_backslash", "test_read_binding", "test_create_datasource_format_boolean_value_when_boolean", "test_update_binding_with_backslash", "test_create_datasource_all_properties_included", "test_update_binding", "setup_loader_modules", "test_create_datasource_format_boolean_value_when_string", "test_create_datasource_format_int_value_when_string"], "function_calls": ["MagicMock", "OrderedDict"], "class_names": ["JBoss7TestCase"], "class_method_calls": ["jboss7.create_datasource", "self.jboss_config", "jboss7.read_simple_binding", "self.assertEqual", "jboss7.update_simple_binding", "self.org_run_operation", "jboss7.create_simple_binding", "jboss7.update_datasource", "jboss7.read_datasource", "self.addCleanup"]}, "test_kapacitor.py": {"libraries": ["salt.modules.kapacitor", "salt.utils.json", "tests.support.unit.TestCase", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["test_enable_task", "test_get_task_not_found", "test_define_task", "test_delete_task", "test_disable_task", "test_get_task_success", "setup_loader_modules"], "function_calls": ["patch", "Mock"], "class_names": ["KapacitorTestCase"], "class_method_calls": ["kapacitor.__salt__", "self.assertEqual", "cmd_mock.assert_called_once_with", "http_mock.assert_called_once_with", "kapacitor.define_task", "kapacitor.delete_task", "kapacitor.disable_task", "salt.utils", "patch.dict", "self.__class__", "kapacitor.enable_task", "kapacitor.get_task"]}, "test_kernelpkg.py": {"libraries": ["salt.states.kernelpkg", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_latest_active_at_latest", "test_latest_wait", "kernel_list", "test_latest_installed_at_latest", "test_latest_active_with_changes", "test_latest_installed_with_changes", "state_name"], "function_calls": ["MagicMock", "isinstance"], "class_names": [], "class_method_calls": ["kernelpkg.latest_active", "kernelpkg.__salt__", "kernelpkg.latest_installed", "kernelpkg.latest_wait", "kernelpkg.__opts__", "pytest.fixture", "patch.dict"]}, "test_keystore.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.keystore", "pytest"], "function_names": ["configure_loader_modules", "test_cert_update", "test_force_remove", "test_new_file", "test_cert_update_no_sha1_fingerprint_in_x509", "test_cert_already_present"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["pytest.fixture", "keystore.managed", "keystore.__salt__", "patch.dict", "keystore.__opts__"]}, "test_kubernetes.py": {"libraries": ["contextlib.contextmanager", "base64", "salt.utils.stringutils", "tests.support.mock.MagicMock", "pytest", "salt.modules.kubernetesmod", "tests.support.mock.patch", "salt.states.kubernetes"], "function_names": ["mock_func", "test_configmap_present__replace", "test_configmap_present__fail", "test_secret_present__exists", "test_node_label_absent__noop", "make_namespace", "make_node_labels", "test_secret_absent__delete", "test_configmap_absent__noop_test_true", "test_configmap_present__create", "make_ret_dict", "test_configmap_absent__noop", "test_secret_present__create", "test_namespace_absent__noop_test_true", "test_node_label_present__add_test_true", "test_namespace_present__create_test_true", "test_node_label_present__already_set", "test_secret_present__create_test_true", "test_node_label_present__update_test_true", "test_namespace_present__noop_test_true", "test_namespace_absent__delete_status_phase_terminating", "test_secret_present__create_no_data", "test_secret_absent__delete_test_true", "test_node_label_present__add", "test_configmap_absent", "test_node_label_absent__noop_test_true", "test_secret_present__fail", "test_namespace_absent__delete_error", "configure_loader_modules", "test_secret_absent__noop_test_true", "test_node_label_absent__delete", "test_configmap_absent__test_true", "test_namespace_present__noop", "make_secret", "test_configmap_present__create_test_true", "test_namespace_absent__delete_test_true", "test_namespace_absent__delete_status_terminating", "test_namespace_absent__delete_code_200", "test_node_label_present__update", "test_configmap_present__create_no_data", "test_namespace_absent__noop", "make_configmap", "test_namespace_present__create", "test_node_label_absent__delete_test_true", "test_configmap_present__replace_test_true", "test_secret_present__exists_test_true", "test_secret_absent__noop", "make_node"], "function_calls": ["MagicMock", "mock_func", "make_configmap", "make_namespace", "make_ret_dict", "make_node_labels", "make_secret", "make_node"], "class_names": [], "class_method_calls": ["node_data.update", "pytest.fixture", "kubernetes.__opts__", "namespace_data.copy", "kubernetes.namespace_absent", "kind.lower", "kubernetes.configmap_absent", "kubernetes.secret_absent", "deleted.update", "kubernetes.configmap_present", "pytest.mark", "new_cm.update", "kubernetes.node_label_present", "kubernetes.namespace_present", "kubernetes.node_label_absent", "new_secret.update", "salt.utils", "patch.dict", "secret.copy", "kubernetesmod.HAS_LIBS", "base64.b64encode", "kubernetes.secret_present", "cm.copy", "kubernetes.__salt__", "namespace_data.update"]}, "test_layman.py": {"libraries": ["salt.states.layman", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["layman.__salt__", "layman.absent", "layman.present", "layman.__opts__", "ret.update", "pytest.fixture", "patch.dict"]}, "test_libcloud_dns.py": {"libraries": ["tests.support.unit.TestCase", "salt.modules.libcloud_dns", "tests.support.mock.MagicMock", "pytest", "tests.support.mixins.LoaderModuleMockMixin"], "function_names": ["__init__", "setup_loader_modules", "test_module_creation", "get_mock_driver"], "function_calls": ["MagicMock", "MockDNSDriver"], "class_names": ["LibcloudDnsModuleTestCase", "MockDNSDriver"], "class_method_calls": ["libcloud_dns.HAS_LIBCLOUD", "libcloud_dns._get_driver", "self.assertFalse", "pytest.mark"]}, "test_locale.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.locale", "pytest"], "function_names": ["configure_loader_modules", "test_present", "test_system"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["pytest.fixture", "locale.present", "locale.__salt__", "patch.dict", "locale.__opts__", "locale.system"]}, "test_lvs_server.py": {"libraries": ["salt.states.lvs_server", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["lvs_server.__opts__", "ret.update", "pytest.fixture", "lvs_server.__salt__", "lvs_server.present", "lvs_server.absent", "patch.dict"]}, "test_lvs_service.py": {"libraries": ["salt.states.lvs_service", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["lvs_service.present", "ret.update", "pytest.fixture", "lvs_service.__opts__", "lvs_service.absent", "patch.dict", "lvs_service.__salt__"]}, "test_makeconf.py": {"libraries": ["salt.states.makeconf", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["makeconf.__salt__", "makeconf.absent", "ret.update", "pytest.fixture", "makeconf.present", "patch.dict"]}, "test_memcached.py": {"libraries": ["salt.modules.memcached", "salt.exceptions.CommandExecutionError", "tests.support.unit.TestCase", "salt.exceptions.SaltInvocationError", "tests.support.mock.MagicMock", "tests.support.mock.patch"], "function_names": ["incr", "get", "test_get", "test_status_false", "test_decrement_exist", "delete", "test_increment_exist", "test_delete", "add", "test_replace", "test_decrement_none", "test_increment_none", "test_add", "decr", "test_decrement", "replace", "test_increment", "__init__", "test_set", "test_status", "set", "get_stats"], "function_calls": ["MockMemcache", "SaltInvocationError", "MagicMock", "isinstance"], "class_names": ["MockMemcache", "MemcachedTestCase"], "class_method_calls": ["self.assertDictEqual", "self.value", "self.assertRaises", "memcached.replace", "memcached.status", "memcached.get", "self.assertEqual", "memcached.delete", "self.time", "memcached.add", "self.assertTrue", "memcached.set_", "self.min_compress_len", "self.assertFalse", "memcached.increment", "memcached.decrement", "patch.object", "self.key"]}, "test_modjk_worker.py": {"libraries": ["tests.support.mock.patch", "salt.states.modjk_worker", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_stop", "test_activate", "test_disable"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["modjk_worker.disable", "modjk_worker.activate", "modjk_worker.stop", "ret.update", "pytest.fixture", "patch.dict", "modjk_worker.__salt__"]}, "test_mongodb_database.py": {"libraries": ["salt.states.mongodb_database", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["ret.update", "pytest.fixture", "mongodb_database.__opts__", "mongodb_database.absent", "patch.dict", "mongodb_database.__salt__"]}, "test_mongodb_user.py": {"libraries": ["salt.states.mongodb_user", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["mongodb_user.absent", "mongodb_user.present", "ret.update", "pytest.fixture", "mongodb_user.__salt__", "patch.dict", "mongodb_user.__opts__"]}, "test_net_napalm_yang.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.net_napalm_yang", "pytest"], "function_names": ["test_managed", "configure_loader_modules", "test_configured"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["load_config.called", "netyang.__opts__", "file_remove.called", "pytest.fixture", "netyang.__salt__", "netyang.managed", "temp_file.called", "netyang.configured", "parse.called", "patch.dict", "compliance_report.called"]}, "test_netconfig.py": {"libraries": ["salt.states.netconfig", "salt.modules.napalm_network", "salt.utils.files", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_managed_test_is_true", "configure_loader_modules", "test_replace_pattern_test_is_true"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["netconfig.replace_pattern", "pytest.fixture", "netconfig.managed", "mock_update_config.call_args_list", "net_mod.load_config", "mock_loaded_ret.call_args_list", "salt.utils", "patch.dict", "net_mod.replace_pattern", "mock_net_replace_pattern.call_args_list", "patch.object", "netconfig.__salt__", "netconfig.__opts__"]}, "test_nxos.py": {"libraries": ["tests.unit.modules.nxos.nxos_grains.n9k_grains", "tests.unit.modules.nxos.nxos_config.save_running_config", "tests.unit.modules.nxos.nxos_config.unset_role", "tests.unit.modules.nxos.nxos_show_run.n9k_show_running_inc_username_list", "tests.unit.modules.nxos.nxos_show_cmd_output.n9k_get_user_output", "tests.unit.modules.nxos.nxos_config.initial_config_file", "tests.unit.modules.nxos.nxos_config.config_result_file", "tests.unit.modules.nxos.nxos_show_cmd_output.n9k_show_ver_list", "tests.unit.modules.nxos.nxos_config.config_input_file", "tests.unit.modules.nxos.nxos_show_run.n9k_show_running_config_list", "tests.unit.modules.nxos.nxos_config.modified_config", "salt.modules.file", "tests.unit.modules.nxos.nxos_config.initial_config", "tests.unit.modules.nxos.nxos_config.template_engine_file_str", "salt.modules.nxos", "salt.exceptions.CommandExecutionError", "tests.unit.modules.nxos.nxos_config.config_result", "tests.support.unit.TestCase", "salt.exceptions.SaltInvocationError", "tests.unit.modules.nxos.nxos_show_cmd_output.n9k_show_user_account_list", "tests.support.mock.patch", "tests.support.mock.create_autospec", "tests.unit.modules.nxos.nxos_show_cmd_output.n9k_show_ver_int_list", "tests.support.mock.MagicMock", "tests.unit.modules.nxos.nxos_show_run.n9k_running_config", "tests.unit.modules.nxos.nxos_show_cmd_output.n9k_show_user_account", "tests.unit.modules.nxos.nxos_config.set_role", "tests.unit.modules.nxos.nxos_config.template_engine_file_str_file", "tests.unit.modules.nxos.nxos_show_cmd_output.n9k_show_ver_int_list_structured", "pytest", "tests.support.mixins.LoaderModuleMockMixin", "tests.unit.modules.nxos.nxos_show_cmd_output.n9k_show_ver", "salt.utils.nxos", "salt.utils.pycrypto", "salt.modules.cp", "tests.unit.modules.nxos.nxos_config.modified_config_file"], "function_names": ["test_sendline_invalid_method", "test_configure_device", "test_check_role_false", "test_check_password_password_encrypted_true", "test_get_roles_user_configured_no_role", "test_config_commands_string", "test_find_single_match", "test_set_password_role_none", "test_add_config", "test_check_password_password_nxos_comment", "test_remove_user", "test_unset_role", "test_set_password_blowfish_crypt", "setup_loader_modules", "test_delete_config", "test_system_info", "test_grains_refresh", "test_set_password_enc_true", "test_set_password_enc_false_cs_set", "test_find_multiple_matches", "test_replace_full_match_true", "test_config_commands", "test_grains", "test_nxapi_request_proxy", "test_config_commands_template_none", "test_check_password_password_encrypted_true_negative", "test_config_nxos_error_ssh", "test_show_nxapi", "test_show_raw_text_invalid", "test_get_roles_user_configured", "test_config_file_error2", "test_show_raw_text_true_multiple_commands", "test_replace", "test_get_roles_user_not_configured", "test_show_run", "test_show_ver", "test_show_nxapi_structured", "test_ping_native_minion", "test_nxapi_request_no_proxy", "test_config_file_error1", "test_get_user_configured", "test_check_role_true", "test_grains_get_cache", "test_nxapi_config_failure", "test_show_raw_text_true", "test_config_file", "test_save_running_config", "test_sendline_valid_method_nxapi_uds", "test_check_password_return_none", "test_replace_no_match", "test_set_role", "test_nxapi_config", "test_ping_proxy", "test_cmd_any_function", "test_set_password_enc_false_cs_none", "test_cmd_function_absent", "test_check_password_password_encrypted_false", "test_check_virtual", "test_sendline_valid_method_proxy", "test_commands_error"], "function_calls": ["patch", "create_autospec", "MagicMock", "len"], "class_names": ["NxosTestCase"], "class_method_calls": ["nxos_module.cmd", "nxos_module.check_role", "self.assertRaises", "nxos_module.check_password", "mock_cmd.return_value", "nxos_module.system_info", "nxos_module.grains", "nxos_module.grains_refresh", "nxos_utils.nxapi_request", "nxos_module.config", "nxos_module.add_config", "patch.object", "self.assertIn", "nxos_module.sendline", "nxos_module.__virtual__", "self.assertEqual", "nxos_module.find", "nxos_module.delete_config", "pytest.mark", "nxos_module.DEVICE_DETAILS", "nxos_utils.system_info", "self.assertFalse", "nxos_module._configure_device", "nxos_module.replace", "self.assertIsNone", "nxos_module.set_password", "mock_request.assert_called_with", "file_module.apply_template_on_contents", "nxos_module.ping", "nxos_module.save_running_config", "nxos_module.show", "nxos_module.set_role", "cp_module.get_file_str", "nxos_module._nxapi_config", "config.assert_called_with", "nxos_module.__utils__", "nxos_module.__proxy__", "patch.dict", "salt.utils", "nxos_module._nxapi_request", "mock_request.return_value", "nxos_module.remove_user", "nxos_module.get_user", "nxos_module.__salt__", "self.assertTrue", "nxos_module.unset_role", "expected_result.sort", "nxos_module.get_roles", "result.sort", "nxos_module.show_ver", "nxos_module.show_run"]}, "test_openstack_config.py": {"libraries": ["salt.exceptions.CommandExecutionError", "salt.modules.openstack_config", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_get", "setup_loader_modules", "test_set", "test_delete"], "function_calls": ["patch", "MagicMock"], "class_names": ["OpenstackConfigTestCase"], "class_method_calls": ["self.assertRaises", "openstack_config.get", "patch.dict", "self.assertEqual", "patcher.stop", "openstack_config.set_", "patcher.start", "openstack_config.__salt__", "self.addCleanup", "openstack_config.delete"]}, "test_openvswitch_bridge.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.states.openvswitch_bridge"], "function_names": ["configure_loader_modules", "test_present_with_parent_not_existing", "test_present_no_parent_existing_no_parent", "test_present_with_parent_existing_with_parent", "test_present_no_parent_not_existing", "test_present_no_parent_existing_with_parent"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["openvswitch_bridge.present", "create_mock.assert_not_called", "create_mock.assert_called_with", "pytest.fixture", "patch.dict", "openvswitch_bridge.__salt__"]}, "test_openvswitch_db.py": {"libraries": ["salt.states.openvswitch_db", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_managed_matching_entry_present", "configure_loader_modules", "test_managed_different_entry_present", "test_managed_no_entry_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["openvswitch_db.managed", "set_mock.assert_not_called", "openvswitch_db.__salt__", "get_mock.assert_called_with", "pytest.fixture", "patch.dict", "set_mock.assert_called_with"]}, "test_openvswitch_port.py": {"libraries": ["salt.states.openvswitch_port", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["openvswitch_port.present", "ret.update", "pytest.fixture", "patch.dict", "openvswitch_port.__salt__"]}, "test_ports.py": {"libraries": ["os", "salt.states.ports", "salt.exceptions.SaltInvocationError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_installed", "configure_loader_modules", "__init__"], "function_calls": ["MockModule", "MagicMock", "MockContext", "MockSys"], "class_names": ["MockModule", "MockContext", "MockSys"], "class_method_calls": ["ports.installed", "ports.__salt__", "self.modules", "pytest.fixture", "ret.update", "os.path", "patch.dict", "ports.__opts__", "patch.object"]}, "test_pyrax_queues.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.pyrax_queues", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["pyrax_queues.__opts__", "ret.update", "pytest.fixture", "pyrax_queues.absent", "patch.dict", "pyrax_queues.__salt__", "pyrax_queues.present"]}, "test_quota.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.quota", "pytest"], "function_names": ["configure_loader_modules", "test_mode"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["quota.mode", "quota.__salt__", "ret.update", "pytest.fixture", "patch.dict", "quota.__opts__"]}, "test_splunk_search.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.splunk_search", "pytest"], "function_names": ["configure_loader_modules", "test_absent", "test_present"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["splunk_search.__opts__", "ret.update", "pytest.fixture", "splunk_search.absent", "splunk_search.present", "splunk_search.__salt__", "patch.dict"]}, "test_sysfs.py": {"libraries": ["salt.states.sysfs", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_if_the_sysfs_attribute_exists", "configure_loader_modules", "test_set_new_value_with_success", "test_already_set", "test_set_new_value_with_failure", "test_name_is_an_object_and_not_an_attribute", "test_set_new_value_with_test_equals_true"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["sysfs.__salt__", "sysfs.__opts__", "pytest.fixture", "sysfs.present", "patch.dict"]}, "test_vbox_guest.py": {"libraries": ["salt.states.vbox_guest", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["assert_method", "configure_loader_modules", "test_additions_removed", "test_grantaccess_to_sharedfolders", "test_additions_installed"], "function_calls": ["assert_method", "MagicMock"], "class_names": [], "class_method_calls": ["vbox_guest.grant_access_to_shared_folders_to", "vbox_guest.__opts__", "vbox_guest.__salt__", "ret.update", "pytest.fixture", "patch.dict", "vbox_guest.additions_removed", "vbox_guest.additions_installed"]}, "test_win_lgpo.py": {"libraries": ["salt.utils.stringutils", "salt.loader", "salt.utils.platform", "salt.states.win_lgpo", "salt.config", "pytest", "tests.support.mock.patch", "copy"], "function_names": ["test_old_element_naming_style", "configure_loader_modules", "test_invalid_elements", "policy_clear", "test_current_element_naming_style", "test_current_element_naming_style_true", "test__compare_policies_dict", "test_old_element_naming_style_true", "test__compare_policies_string", "test__compare_policies_list", "test__compare_policies_integer", "policy_set", "test_invalid_elements_true"], "function_calls": [], "class_names": [], "class_method_calls": ["win_lgpo._convert_to_unicode", "win_lgpo.__opts__", "salt.loader", "pytest.fixture", "pytest.mark", "copy.deepcopy", "win_lgpo.set_", "win_lgpo._compare_policies", "patch.dict"]}, "test_win_license.py": {"libraries": ["salt.states.win_license", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_installed_activate_fail", "configure_loader_modules", "test_installed_install_fail", "test_installed_activated", "test_installed_not_activated", "test_activate"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["info_mock.assert_called_once_with", "activate_mock.assert_called_once_with", "win_license.activate", "install_mock.called", "pytest.fixture", "win_license.__salt__", "install_mock.assert_called_once_with", "patch.dict", "activate_mock.called"]}, "test_xmpp.py": {"libraries": ["tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "salt.states.xmpp"], "function_names": ["configure_loader_modules", "test_send_msg"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["xmpp.send_msg", "xmpp.__salt__", "ret.update", "pytest.fixture", "xmpp.__opts__", "patch.dict"]}, "test_zk_concurrency.py": {"libraries": ["tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.states.zk_concurrency", "pytest"], "function_names": ["test_min_party", "configure_loader_modules", "test_lock", "test_unlock"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["zk_concurrency.min_party", "zk_concurrency.__salt__", "zk_concurrency.unlock", "ret.update", "pytest.fixture", "zk_concurrency.lock", "zk_concurrency.__opts__", "patch.dict"]}, "test_action.py": {"libraries": ["salt.states.zabbix_action", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "input_params", "test_absent_test_mode", "diff_params", "test_present_create", "test_present_update", "side_effect_run_query", "existing_obj_diff", "test_absent", "test_present_exists", "existing_obj"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["zabbix_action.present", "zabbix_action.absent", "pytest.fixture", "zabbix_action.__salt__", "patch.dict", "zabbix_action.__opts__"]}, "test_template.py": {"libraries": ["salt.state", "tests.support.mock.MagicMock", "pytest", "io", "tests.support.mock.patch", "salt.template"], "function_names": ["render_dict", "test_check_render_pipe_str", "_get_rend", "test_compile_template_preserves_windows_newlines", "test_compile_template_str_mkstemp_cleanup", "test_compile_template_bad_type", "test_check_renderer_blacklisting"], "function_calls": ["patch", "_get_rend", "MagicMock"], "class_names": [], "class_method_calls": ["_state.opts", "template.compile_template_str", "unlinked.assert_called_once", "salt.state", "pytest.fixture", "io.StringIO", "template.compile_template", "template.check_render_pipe_str", "input_data_windows.replace", "_state.rend"]}, "test_valuemap.py": {"libraries": ["tests.support.mock.patch", "salt.states.zabbix_valuemap", "tests.support.mock.MagicMock", "pytest"], "function_names": ["configure_loader_modules", "input_params", "test_absent_test_mode", "diff_params", "test_present_create", "test_present_update", "side_effect_run_query", "existing_obj_diff", "test_absent", "test_present_exists", "existing_obj"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["zabbix_valuemap.__salt__", "zabbix_valuemap.__opts__", "zabbix_valuemap.present", "pytest.fixture", "patch.dict", "zabbix_valuemap.absent"]}, "test__init__.py": {"libraries": ["sys"], "function_names": ["test_salt_system_encoding"], "function_calls": [], "class_names": [], "class_method_calls": ["sys.getdefaultencoding"]}, "test_acl.py": {"libraries": ["salt.acl", "pytest"], "function_names": ["configure_loader_modules", "test_user_is_blacklisted", "test_cmd_is_blacklisted", "test_user_is_whitelisted", "test_cmd_is_whitelisted", "blacklist", "whitelist"], "function_calls": [], "class_names": [], "class_method_calls": ["client_acl.user_is_whitelisted", "client_acl.user_is_blacklisted", "acl.PublisherACL", "pytest.fixture", "client_acl.cmd_is_blacklisted", "client_acl.cmd_is_whitelisted"]}, "test_minion.py": {"libraries": ["salt.utils.minion", "tests.support.mock.mock_open", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "logging", "tests.support.mock.patch"], "function_names": ["test__read_proc_file_multiprocessing_false", "test__read_proc_file_multiprocessing_true"], "function_calls": ["patch", "FakeThreadingClass", "MagicMock", "mock_open"], "class_names": ["MinionUtilTestCase", "FakeThreadingClass"], "class_method_calls": ["logging.getLogger", "fake_thread.name", "salt.utils", "self.assertEqual"]}, "test_proxy_minion.py": {"libraries": ["textwrap", "tests.support.mock.patch", "salt.config", "tests.support.mock.MagicMock", "pytest", "saltfactories.utils.random_string", "copy"], "function_names": ["test_post_master_init_metaproxy_called", "test_proxy_config_default_include"], "function_calls": ["patch", "MagicMock", "str", "random_string"], "class_names": [], "class_method_calls": ["proxy_minion.destroy", "mock_metaproxy_call.calls", "proxy_minion._handle_decoded_payload", "proxy_minion._post_master_init", "proxy_conf_d.mkdir", "pytest.mark", "salt.minion", "textwrap.dedent", "salt.config", "wfh.write", "salt.utils", "mock_opts.update", "proxy_minion.jid_queue", "copy.copy"]}, "test_pytest_pass_fail.py": {"libraries": ["pytest"], "function_names": ["test_should_always_fail", "test_should_always_pass"], "function_calls": [], "class_names": [], "class_method_calls": ["pytest.mark"]}, "test_request_channel.py": {"libraries": ["tornado.ioloop", "multiprocessing", "logging", "salt.master.SMaster", "M2Crypto.RSA", "Cryptodome.Cipher.PKCS1_OAEP", "salt.utils.stringutils", "uuid", "tests.support.mock.patch", "os", "Crypto.Cipher.PKCS1_OAEP", "time", "salt.utils.process", "salt.channel.client", "tornado.gen", "tests.support.mock.MagicMock", "threading", "salt.channel.server", "ctypes", "salt.crypt", "salt.transport.zeromq", "pytest", "asyncio"], "function_names": ["__enter__", "test_badload", "test_serverside_exception", "__exit__", "test_req_chan_decode_data_dict_entry_v1", "_handle_payload", "mocksend", "test_req_server_chan_encrypt_v1", "test_req_server_chan_encrypt_v2", "pki_dir", "run_loop_in_thread", "__init__", "test_master_uri", "test_payload_handling_exception", "test_clear_req_channel_master_uri_override"], "function_calls": ["MagicMock", "MockSaltMinionMaster", "patch", "dict", "Exception", "str"], "class_names": ["MockSaltMinionMaster"], "class_method_calls": ["mapriv.unlink", "tornado.ioloop", "pcrypt.loads", "master_opts.update", "client._package_load", "client.auth", "client.opts", "logging.getLogger", "mimaspriv.write_text", "asyncio.set_event_loop", "server._auth", "pytest.raises", "madir.joinpath", "temp_salt_master.config", "cipher.encrypt", "MINION_PRIV_KEY.strip", "self.process_manager", "mapriv.write_text", "tornado.gen", "auth.crypticle", "MINION_PUB_KEY.strip", "salt.crypt", "_mock.side_effect", "MASTER_SIGNING_PUB.strip", "excinfo.value", "key.private_decrypt", "client.close", "_pki_dir.mkdir", "mipriv.write_text", "salt.daemons", "loop.asyncio_loop", "salt.payload", "salt.transport", "loop.close", "pytest.mark", "temp_salt_minion.config", "time.sleep", "ctypes.c_char", "PKCS1_OAEP.new", "evt.is_set", "server.cache_cli", "mipub.write_text", "real_transport.close", "channel.transport", "maspriv.write_text", "MASTER_PUB_KEY.strip", "cls.mock", "server.master_key", "MASTER_SIGNING_PRIV.strip", "uuid.uuid4", "fp.read", "threading.Event", "self.server_channel", "self.channel", "patch.object", "server._encrypt_private", "self.io_loop", "SMaster.secrets", "misdir.mkdir", "pub.public_encrypt", "server.close", "evt.set", "server._decode_payload", "threading.Thread", "auth.mpub", "minion_opts.update", "pki_dir.joinpath", "salt.exceptions", "auth._crypticle", "MASTER2_PRIV_KEY.strip", "maspub.write_text", "multiprocessing.Array", "self.evt", "self.server_thread", "opts.update", "salt.channel", "asyncio.sleep", "loop.start", "mapub.unlink", "minion_master.mock", "pytest.fixture", "MASTER_PRIV_KEY.strip", "cipher.decrypt", "auth.get_keys", "os.path", "server.opts", "misdir.joinpath", "self._handle_payload", "server.auto_key", "client.transport", "client.crypted_transfer_decode_dictentry", "pcrypt.dumps", "RSA.pkcs1_oaep_padding", "salt.utils", "mimapriv.write_text", "loop.add_callback", "loop.stop", "midir.mkdir", "minion_master.channel", "MASTER2_PUB_KEY.strip", "mapub.write_text", "madir.mkdir"]}, "test_scripts.py": {"libraries": ["salt.scripts._pip_args", "salt.scripts._pip_environment", "pytest"], "function_names": ["test_pip_environment_pypath_nix", "test_pip_environment_pypath_win", "test_pip_args_installing_without_target", "test_pip_args_installing_with_target", "test_pip_environment_no_pypath", "test_pip_args_not_installing"], "function_calls": ["_pip_args", "_pip_environment"], "class_names": [], "class_method_calls": ["pytest.mark"]}, "test_syspaths.py": {"libraries": ["salt.syspaths", "tests.support.mock.patch", "pytest"], "function_names": ["test__get_windows_root_dir_no_reg_default", "test__get_windows_root_dir_expand_reg", "test__get_windows_root_dir_no_reg_old_exists", "test__get_windows_root_dir_no_expand_reg"], "function_calls": ["patch"], "class_names": [], "class_method_calls": ["salt.syspaths", "pytest.mark"]}, "test_ext_nodes.py": {"libraries": ["salt.utils.stringutils", "textwrap", "subprocess", "salt.tops.ext_nodes", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["configure_loader_modules", "test_ext_nodes_with_environment", "test_ext_nodes"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["ext_nodes.top", "textwrap.dedent", "pytest.fixture", "run_mock.assert_called_once_with", "run_mock.return_value", "salt.utils", "patch.object"]}, "test_base.py": {"libraries": ["pytest", "salt.transport.base", "tests.support.mock.patch", "ssl"], "function_names": ["test_unclosed_warning", "test_ssl_context_opts", "test_ssl_context_legacy_opts"], "function_calls": ["patch"], "class_names": [], "class_method_calls": ["ctx.load_verify_locations", "salt.transport", "ctx.verify_mode", "ctx.load_cert_chain", "pytest.mark", "transport._connect_called", "ssl.VerifyFlags", "ctx.verify_flags", "pytest.warns", "ssl.VerifyMode", "mock.verify_flags", "transport.connect", "transport._closing", "ctx.check_hostname"]}, "test_ipc.py": {"libraries": ["errno", "salt.exceptions", "os", "threading", "tornado.ioloop", "tornado.testing", "tornado.gen", "salt.transport.ipc", "salt.utils.platform", "tests.support.runtests.RUNTIME_VARS", "tornado.iostream.StreamClosedError", "salt.config", "pytest", "logging"], "function_names": ["_get_pub_channel", "tearDown", "test_sync_reading", "close_server", "test_async_reading_streamclosederror", "handler", "_get_sub_channel", "setUp", "test_multi_client_reading"], "function_calls": ["super", "len"], "class_names": ["IPCMessagePubSubCase"], "class_method_calls": ["evt.wait", "threading.Event", "watchdog.start", "self.wait", "os.path", "client1.close", "exc.errno", "logging.getLogger", "salt.transport", "self.assertEqual", "client2.read_async", "pytest.mark", "call_cnt.append", "self.stop", "self.io_loop", "self.socket_path", "client1.read_async", "self.pub_channel", "RUNTIME_VARS.TMP", "self.opts", "client2.read_sync", "evt.set", "sub_channel.connect", "threading.Thread", "errno.EBADF", "os.mkdir", "client1.read_sync", "client2.close", "pub_channel.start", "self._get_sub_channel", "os.unlink", "self._get_pub_channel", "tornado.testing", "self.sub_channel"]}, "test_publish_client.py": {"libraries": ["tornado.ioloop", "aiohttp", "time", "salt.crypt", "salt.transport.tcp", "salt.transport.zeromq", "salt.utils.stringutils", "socket", "hashlib", "salt.transport.ws", "tests.support.mock.MagicMock", "pytest", "logging", "zmq", "tests.support.mock.patch", "asyncio"], "function_names": ["test_zeromq_async_pub_channel_filtering_decode_message_no_match", "transport_ids", "transport", "test_zeromq_async_pub_channel_filtering_decode_message"], "function_calls": ["MagicMock", "TimeoutError", "patch", "dict", "recv", "Exception", "str"], "class_names": [], "class_method_calls": ["request.param", "tornado.ioloop", "sock.accept", "patch_socket.mock_calls", "zmq.BACKLOG", "log.debug", "sock.close", "pytest.fixture", "zmq.PUB", "client.connect", "site.start", "salt.payload", "runner.setup", "conn.send", "transport.connect", "patch.object", "logging.getLogger", "aiohttp.web", "client.recv", "salt.transport", "zmq.LINGER", "pytest.mark", "transport._decode_messages", "time.monotonic", "socket.AF_INET", "temp_salt_master.config", "socket.SO_REUSEADDR", "ctx.term", "socket.SOL_SOCKET", "sock.listen", "hashlib.sha1", "client._ws", "ctx.socket", "ws.prepare", "ws.send_bytes", "temp_salt_minion.id", "asyncio.create_task", "client._session", "salt.utils", "socket.SOCK_STREAM", "socket.socket", "sock.bind", "client._stream", "client._socket", "io_loop.spawn_callback", "zmq.asyncio", "sock.setsockopt", "sock.send", "sock.setblocking", "client.close", "zmq.SNDHWM", "task.result", "asyncio.sleep"]}, "test_tcp.py": {"libraries": ["tornado.concurrent", "salt.exceptions", "threading", "tornado.ioloop", "salt.channel.server", "salt.utils.process", "salt.channel.client", "tornado.gen", "salt.utils.platform", "tornado.testing.AsyncTestCase", "salt.config", "tests.support.mixins.AdaptedConfigurationTestCaseMixin", "pytest", "logging", "tests.unit.transport.mixins.run_loop_in_thread", "pytestshellutils.utils.ports"], "function_names": ["tearDown", "handle_pub", "_handle_payload", "tearDownClass", "test_basic", "setUpClass", "setUp"], "function_calls": ["dict", "super", "Exception"], "class_names": ["AsyncPubServerTest"], "class_method_calls": ["self.assertRaises", "ports.get_unused_localhost_port", "threading.Event", "tornado.ioloop", "self.wait", "cls.server_channel", "cls.io_loop", "self.channel", "self.server_channel", "cls.minion_config", "logging.getLogger", "self.failureException", "self.assertEqual", "pytest.mark", "cls._handle_payload", "self.stop", "cls.stop", "self.io_loop", "self.pub_channel", "connect_future.add_done_callback", "cls.process_manager", "cls.get_temp_config", "threading.Thread", "self.minion_opts", "failures.append", "self.pub", "salt.utils", "cls.server_thread", "self._start_handlers", "connect_future.result", "cls.req_server_channel", "cls.master_config", "salt.channel"]}, "test_zeromq.py": {"libraries": ["salt.utils.zeromq", "tests.support.unit.TestCase", "salt.exceptions.SaltSystemExit", "pytest", "zmq", "tests.support.mock.patch"], "function_names": ["test_check_ipc_length"], "function_calls": ["patch", "hasattr"], "class_names": ["UtilsTestCase"], "class_method_calls": ["self.assertRaises", "salt.utils", "pytest.mark"]}, "test_custom_extensions.py": {"libraries": ["salt.utils.templates.render_jinja_tmpl", "salt.utils.json", "salt.utils.files", "jinja2.exceptions", "salt.modules.match", "salt.utils.jinja.SerializerExtension", "salt.utils.stringutils", "jinja2.Environment", "salt.utils.decorators.jinja.JinjaFilter", "salt.utils.jinja.ensure_sequence_filter", "itertools", "salt.exceptions.SaltRenderError", "pprint", "timelib", "salt.utils.dateutils", "os", "jinja2.DictLoader", "salt.loader", "re", "ast", "salt.utils.odict.OrderedDict", "pytest", "salt.utils.yaml"], "function_names": ["test_unique_tuple", "test_sha512", "test_load_yaml_template", "test_sequence", "test_is_ipv6", "test_load_json_template", "test_regex_replace", "test_serialize_yaml", "test_serialize_yaml_unicode", "test_unique_list", "test_catalog", "test_to_bool", "test_camel_to_snake_case", "test_snake_to_camel_case", "test_method_call", "test_regex_match", "test_network_size", "test_load_json", "test_flatten_simple", "test_zip_longest", "test_is_ip", "test_serialize_python", "test_json_query", "test_unique_string", "test_extend_dict_key_value", "test_compress", "test_load_text_template", "test_dict_to_sls_yaml_params", "test_ipwrap", "test_load_yaml", "test_update_dict_key_value", "test_serialize_json", "test_regex_search", "test_random_sample", "test_quote", "test_flatten_single_level", "test_symmetric_difference", "test_uuid", "test_avg", "test_network_hosts", "test_sha256", "configure_loader_modules", "test_load_tag", "test_is_ipv4", "test_ipv6", "test_base64_encode", "test_set_dict_key_value", "test_permutations", "test_regex_escape", "test_append_dict_key_value", "local_salt", "test_combinations_with_replacement", "minion_opts", "test_max", "test_profile", "test_difference", "test_md5", "test_flatten_preserve_nulls", "test_combinations", "test_random_shuffle", "test_ifelse", "test_intersect", "test_product", "test_serialize_yaml_str", "test_zip", "test_http_query", "test_hmac", "test_nested_structures", "test_union", "test_ipv4", "test_base64_decode", "test_min", "test_ipaddr"], "function_calls": ["type", "Environment", "dict", "DictLoader", "list", "str", "OrderedDict", "sorted", "set", "isinstance", "render_jinja_tmpl"], "class_names": [], "class_method_calls": ["pytest.fixture", "httpserver.url_for", "os.path", "itertools.permutations", "pprint.pformat", "ast.literal_eval", "pytest.mark", "exceptions.TemplateRuntimeError", "pytest.raises", "httpserver.expect_request", "exceptions.TemplateSyntaxError", "JinjaFilter.salt_jinja_filters", "exceptions.TemplateNotFound", "env.get_template", "env.from_string", "salt.utils", "minion_opts.update", "env.filters", "re.escape"]}, "test_dot_notation_looup.py": {"libraries": ["salt.utils.dateutils", "salt.utils.json", "salt.utils.stringutils", "salt.loader", "salt.utils.files", "salt.utils.jinja.SaltCacheLoader", "salt.utils.yaml", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["test_normlookup", "render", "test_dotlookup", "test_shadowed_dict_method"], "function_calls": ["render", "Mock", "jinja"], "class_names": [], "class_method_calls": ["_render.get", "patch.object", "salt.loader"]}, "test_get_template.py": {"libraries": ["salt.utils.dateutils", "os", "salt.utils.templates.render_jinja_tmpl", "timelib", "salt.utils.json", "salt.utils.stringutils", "salt.loader", "salt.utils.files", "builtins", "datetime", "pytest", "logging", "tests.support.mock.MagicMock", "salt.exceptions.SaltRenderError", "salt.utils.jinja.SaltCacheLoader", "salt.utils.yaml", "tests.support.mock.patch", "salt.utils.templates.JINJA"], "function_names": ["test_render_with_undefined_variable_unicode", "test_macro_additional_log_for_undefined", "test_get_context_at_bottom_of_file", "test_get_context_with_marker", "get_file", "test_saltenv", "test_render_with_utf8_syntax_error", "test_non_ascii", "test_non_ascii_encoding", "test_macro_additional_log_for_generalexc", "non_ascii", "test_fallback_noloader", "test_fallback", "test_render_with_undefined_variable_utf8", "local_salt", "test_render_with_syntax_error", "minion_opts", "test_strftime", "test_render_with_undefined_variable", "test_relative_include", "test_get_context_has_enough_context", "test_macro_additional_log_syntaxerror", "test_get_context_2_context_lines", "test_get_context_at_top_of_file", "__init__"], "function_calls": ["MagicMock", "MockFileClient", "dict", "str", "JINJA", "render_jinja_tmpl"], "class_names": ["MockFileClient"], "class_method_calls": ["logging.getLogger", "fp_.read", "os.linesep", "datetime.datetime", "pytest.helpers", "patch.object", "pytest.fixture", "pytest.mark", "pytest.raises", "fc.requests", "mock_file_client.requests", "salt.utils", "os.path", "self.requests", "non_ascii_file.write_bytes", "minion_opts.update", "loader._file_client", "fp.read"]}, "test_jinja_default_options.py": {"libraries": ["salt.utils.dateutils", "os", "salt.utils.templates.render_jinja_tmpl", "salt.utils.json", "salt.utils.stringutils", "salt.utils.files", "pytest", "salt.utils.yaml"], "function_names": ["test_statement_prefix", "test_comment_prefix", "minion_opts", "local_salt"], "function_calls": ["str", "dict", "render_jinja_tmpl"], "class_names": [], "class_method_calls": ["os.path", "minion_opts.update", "pytest.fixture"]}, "test_salt_cache_loader.py": {"libraries": ["salt.utils.dateutils", "os", "salt.utils.json", "salt.utils.stringutils", "jinja2.Environment", "salt.utils.files", "jinja2.exceptions", "tests.support.mock.MagicMock", "jinja2.TemplateNotFound", "pytest", "salt.utils.jinja.SaltCacheLoader", "salt.utils.yaml", "tests.support.mock.patch", "tests.support.mock.call"], "function_names": ["test_cache_loader_passed_file_client", "test_get_source_template_doesnt_exist", "test_searchpath_bad_pillar_rend", "test_include_context", "test_get_source_no_environment", "get_test_saltenv", "test_cached_file_client", "test_file_client_kwarg", "test_searchpath", "hello_include", "get_loader", "test_searchpath_pillar_rend", "hello_simple", "test_relative_import", "test_import", "test_get_source_template_removed", "test_check_cache_miss", "relative_rmacro", "test_include", "minion_opts", "test_check_cache_hit", "run_command", "relative_rhello", "test_get_source_relative_no_tpldir", "relative_rescape", "test_mockclient", "relative_dir", "test_no_destroy_method_on_file_client"], "function_calls": ["MagicMock", "get_loader", "uptodate", "patch", "Environment", "SaltCacheLoader", "get_test_saltenv", "str", "len"], "class_names": [], "class_method_calls": ["call.destroy", "loader.get_source", "pytest.fixture", "mock_file_client.opts", "os.path", "hello_simple.unlink", "relative_dir.mkdir", "loader._close_file_client", "patch.object", "pytest.helpers", "cache_mock.assert_called_once", "pytest.raises", "file_client.opts", "loader._file_client", "loader_b._file_client", "loader.check_cache", "loader.searchpath", "exceptions.TemplateNotFound", "loader.destroy", "cache_mock.assert_not_called", "loader_a._file_client", "new_file_client.mock_calls", "minion_opts.update", "template.render", "os.linesep", "tmpl.render", "jinja.get_template", "relative_rhello.relative_to", "file_client.mock_calls", "fc.requests"]}, "test_daemon_mixin.py": {"libraries": ["tests.support.mock.ANY", "tests.support.mock.MagicMock", "pytest", "logging", "salt.utils.parsers", "tests.support.mock.patch"], "function_names": ["test_pid_deleted_oserror_as_non_root", "test_pid_deleted_oserror_as_root", "test_pid_file_deletion", "daemon_mixin"], "function_calls": ["patch", "MagicMock", "OSError", "format"], "class_names": [], "class_method_calls": ["daemon_mixin.config", "daemon_mixin._mixin_before_exit", "unlink_mock.assert_called_once", "mixin.config", "pytest.fixture", "log_mock.debug", "salt.utils", "unlink_mock.call_count", "logging.DEBUG", "log_mock.info"]}, "test_log_parsers.py": {"libraries": ["os", "salt._logging", "salt.utils.jid", "salt.utils.platform", "salt.syspaths", "salt.config", "tests.support.mock.MagicMock", "pytest", "logging", "pprint", "salt.utils.parsers", "tests.support.mock.patch"], "function_names": ["__enter__", "test_get_log_file_level_default", "config_func", "shutdown_logfile_handler", "is_console_handler_configured", "log_impl", "is_extended_logging_configured", "test_get_log_level_config", "logfile_config_setting_name", "__exit__", "log_file", "testing_config", "test_get_log_file_default", "shutdown_console_handler", "log_cli_parser", "setup_logging", "test_get_log_file_level_cli", "get_logging_options_dict", "setup_console_handler", "loglevel_config_setting_name", "test_log_created", "setup_temp_handler", "shutdown_extended_logging", "test_verify_log_warning_logged", "setup_log_granular_levels", "set_logging_options_dict", "default_config", "is_logfile_handler_configured", "test_get_log_file_cli", "setup_extended_logging", "test_get_log_level_default", "_destroy", "parser", "logfile_loglevel_config_setting_name", "test_get_log_file_config", "__init__", "setup_logfile_handler", "root_dir", "test_get_console_log_level_with_file_log_level", "test_get_log_file_level_config", "test_get_log_level_cli", "args", "test_callbacks_uniqueness"], "function_calls": ["MagicMock", "LogImplMock", "patch", "parser", "str", "len", "dir", "callable", "getattr"], "class_names": ["LogImplMock"], "class_method_calls": ["self.config", "request.param", "name.startswith", "default_config.copy", "salt._logging", "log.debug", "self.is_console_handler_configured", "pytest.fixture", "self.is_extended_logging_configured", "instance.get_option", "caplog.messages", "os.path", "self._console_handler_configured", "log_file_name.rsplit", "pprint.pformat", "logging.getLogger", "os.sep", "opts.get", "self.log_level_console", "self.original_config", "self.setup_log_granular_levels", "self.log_file", "instance.parse_args", "self.get_logging_options_dict", "logging_options.copy", "log_impl.temp_log_level", "self.setup_extended_logging", "log_impl.log_level_logfile", "log_impl.log_level_console", "self._extended_logging_configured", "salt.utils", "self.setup_console_handler", "testing_config.update", "self._real_set_logging_options_dict", "log_impl.log_file", "self._destroy", "instance.options", "caplog.at_level", "self._logfile_handler_configured", "self.setup_logfile_handler", "self._real_get_logging_options_dict", "self.log_level_logfile", "self.temp_log_level", "salt.config", "patch.multiple", "logging.DEBUG", "log_impl.config", "self._real_setup_logfile_handler", "self.is_logfile_handler_configured"]}, "test_saltfile_mixin.py": {"libraries": ["salt.exceptions", "optparse", "pytest", "tests.support.helpers.patched_environ", "salt.utils.parsers", "tests.support.mock.patch", "shutil"], "function_names": ["test_saltfile_in_environment", "test_saltfile_user_home", "test_saltfile_unusual_option", "test_bad_saltfile_option", "test_saltfile_cli_override", "test_saltfile_cwd_doesnt_exist", "parser", "test_saltfile_without_prog_name", "_mixin_setup", "__init__", "test_saltfile", "test_saltfile_cwd", "saltfile", "test_bad_saltfile", "test_saltfile_option"], "function_calls": ["patched_environ", "patch", "MockSaltfileParser", "str", "print"], "class_names": ["MockSaltfileParser"], "class_method_calls": ["self.config", "fp.touch", "self.output_options_group", "eu_mock.assert_called_with", "parser.parse_args", "pytest.fixture", "self.add_option", "optparse.OptionGroup", "cwd_mock.assert_called_once", "saltfile.write_text", "pytest.raises", "shutil.copy", "group.add_option", "salt.utils", "self.get_prog_name", "self.add_option_group", "salt.exceptions", "fake_dir.mkdir", "salt_subdir.mkdir", "parser.option_list", "parser.options"]}, "test_error.py": {"libraries": ["dateutil.parser", "tests.support.mock.MagicMock", "pytest", "logging", "croniter", "tests.support.mock.patch"], "function_names": ["test_eval_once_invalid_datestring", "test_eval_cron_invalid", "test_eval_skip_during_range_invalid_date", "test_eval_skip_during_range_not_dict", "test_eval_skip_during_range_end_before_start", "test_eval_whens_grain_not_dict", "test_eval_when_invalid_date"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["logging.getLogger", "dateutil.parser", "schedule.eval", "pytest.mark", "schedule.job_status", "schedule.opts"]}, "test_eval.py": {"libraries": ["salt.utils.schedule", "dateutil.parser", "time", "random", "salt.utils.platform", "datetime", "tests.support.mock.MagicMock", "pytest", "logging", "croniter", "tests.support.mock.patch"], "function_names": ["test_eval_once", "test_eval", "test_eval_days", "test_eval_enabled", "test_eval_multiple_whens", "test_eval_when_splay_in_past", "test_eval_enabled_key", "test_eval_cron_loop_interval", "test_eval_loop_interval", "test_eval_cron", "test_eval_hours", "test_eval_when_splay", "test_eval_seconds", "test_eval_disabled_seconds", "test_eval_after", "test_eval_splay_global", "test_eval_disabled_hours", "test_eval_global_disabled_job_enabled", "test_eval_disabled_minutes", "test_eval_splay_range", "test_eval_until", "test_eval_run_on_start", "test_eval_multiple_whens_loop_interval", "test_eval_once_loop_interval", "test_eval_minutes", "test_eval_splay", "_check_last_run", "test_eval_whens", "test_eval_disabled"], "function_calls": ["MagicMock", "range", "patch", "len", "_check_last_run"], "class_names": [], "class_method_calls": ["logging.getLogger", "datetime.datetime", "dateutil.parser", "datetime.timedelta", "schedule.eval", "pytest.mark", "schedule.delete_job", "time.sleep", "schedule.job_status", "random.randint", "salt.utils", "patch.dict", "schedule.opts"]}, "test_maxrunning.py": {"libraries": ["dateutil.parser", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["test_maxrunning_master", "test_maxrunning_minion"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["logging.getLogger", "dateutil_parser.parse", "schedule._check_max_running", "pytest.mark", "schedule.opts"]}, "test_postpone.py": {"libraries": ["dateutil.parser", "datetime", "pytest", "logging"], "function_names": ["test_postpone"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "dateutil.parser", "run_time.strftime", "schedule.postpone_job", "datetime.timedelta", "schedule.eval", "pytest.mark", "schedule.job_status", "schedule.opts"]}, "test_run_job.py": {"libraries": ["logging"], "function_names": ["test_run_job"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "schedule.opts", "schedule.job_status", "schedule.run_job"]}, "test_skip.py": {"libraries": ["dateutil.parser", "pytest", "logging"], "function_names": ["test_run_after_skip_range", "test_run_seconds_skip", "test_skip_during_range", "test_skip", "test_skip_during_range_global", "test_skip_during_range_invalid_datestring"], "function_calls": [], "class_names": [], "class_method_calls": ["logging.getLogger", "dateutil.parser", "run_time.strftime", "schedule.eval", "pytest.mark", "schedule.skip_job", "schedule.job_status", "schedule.opts"]}, "test_cheetah.py": {"libraries": ["salt.utils.templates.render_cheetah_tmpl", "pytest"], "function_names": ["test_render_sanity", "test_render_evaluate", "test_render_evaluate_xml", "test_render_variable", "test_render_evaluate_text"], "function_calls": ["render_cheetah_tmpl"], "class_names": [], "class_method_calls": ["res.strip", "pytest.importorskip"]}, "test_genshi.py": {"libraries": ["pytest", "salt.utils.templates.render_genshi_tmpl"], "function_names": ["test_render_sanity", "test_render_evaluate", "test_render_variable_replace", "test_render_variable", "test_render_evaluate_condition"], "function_calls": ["render_genshi_tmpl"], "class_names": [], "class_method_calls": ["pytest.importorskip"]}, "test_mako.py": {"libraries": ["salt.utils.mako.SaltMakoTemplateLookup", "pytest", "tests.support.mock.Mock", "tests.support.mock.patch", "tests.support.mock.call"], "function_names": ["test_mako_template_lookup"], "function_calls": ["patch", "SaltMakoTemplateLookup", "Mock"], "class_names": [], "class_method_calls": ["call.destroy", "loader.destroy", "loader.file_client", "pytest.fail", "file_client.mock_calls", "loader._file_client", "pytest.importorskip"]}, "test_wempy.py": {"libraries": ["salt.utils.templates.render_wempy_tmpl", "pytest"], "function_names": ["test_render_wempy_evaluate", "test_render_wempy_evaluate_multi", "test_render_wempy_sanity", "test_render_wempy_variable"], "function_calls": ["render_wempy_tmpl"], "class_names": [], "class_method_calls": ["pytest.importorskip"]}, "test_wrap_tmpl_func.py": {"libraries": ["pathlib.PurePosixPath", "salt.utils.templates.wrap_tmpl_func", "salt.utils.templates.generate_sls_context", "pathlib.PurePath", "pytest", "logging", "tests.support.mock.patch"], "function_names": ["test_generate_sls_context__two_level_init_implicit", "test_generate_sls_context__two_level_repeating", "__call__", "test_sls_context_call", "test_generate_sls_context__backslash_in_path", "test_generate_sls_context__one_level_init_implicit", "test_generate_sls_context__top_level", "test_generate_sls_context__one_level", "test_generate_sls_context__one_level_init_explicit", "test_generate_sls_context__two_level", "test_sls_context_no_call", "test_generate_sls_context__one_level_repeating", "_test_generated_sls_context", "test_generate_sls_context__two_level_init_explicit"], "function_calls": ["PurePath", "patch", "wrap_tmpl_func", "MockRender", "str", "PurePosixPath", "wrapped", "_test_generated_sls_context", "generate_sls_context"], "class_names": ["MockRender"], "class_method_calls": ["tmplpath.startswith", "logging.getLogger", "generate_sls_context.assert_called_with", "pytest.mark", "self.context", "self.tmplpath", "generate_sls_context.assert_not_called", "slsfile.parent", "slsfile.write_text", "self.tplstr"]}, "test_args.py": {"libraries": ["salt.exceptions.SaltInvocationError", "tests.support.mock.DEFAULT", "salt.utils.args", "pytest", "logging", "tests.support.mock.patch", "collections.namedtuple"], "function_names": ["foo2", "foo", "test_format_call_mimic_typeerror_exceptions", "dummy_func_varargs_keywords", "dummy_func_nodefault", "test_arg_lookup", "test_parse_function_brackets_in_quotes", "dummy_func_annotations", "test_parse_kwarg", "test_parse_function_malformed_not_fun_def", "test_parse_function_kwargs_only", "test_argspec_report", "test_test_mode", "test_parse_function_args_kwargs", "dummy_func", "test_arguments_regex", "test_parse_function_malformed_no_name", "test_get_function_argspec", "test_clean_kwargs", "_yamlify_arg", "test_parse_function_wrong_bracket_style", "test_yamlify_arg", "_test_spec", "test_condition_input_string", "test_parse_function_quotes", "test_format_call", "__call__", "test_parse_function_args_only", "test_format_call_simple_args", "test_parse_function_brackets_unbalanced", "__init__", "test_parse_function_no_args", "dummy_func_default"], "function_calls": ["patch", "DummyClass", "dict", "str", "namedtuple", "isinstance", "_yamlify_arg", "_ArgSpec"], "class_names": ["DummyClass"], "class_method_calls": ["logging.getLogger", "arg_lookup.return_value", "log.debug", "pytest.raises", "get_function_argspec.return_value", "salt.utils"]}, "test_aws.py": {"libraries": ["os", "datetime.datetime", "time", "requests", "datetime.timedelta", "salt.utils.aws", "pytest_timeout.DEFAULT_METHOD", "tests.support.mock.MagicMock", "io", "pytest", "tests.support.helpers.patched_environ", "tests.support.mock.patch"], "function_names": ["_cleanup", "handle_get_mock", "test_get_metadata_imdsv1", "test_creds_with_role_arn_should_always_call_assumed_creds", "test_assumed_creds_not_updating_dictionary_while_iterating", "test_assumed_creds_deletes_expired_key", "handle_get_metadata_mock", "test_get_metadata_imdsv2"], "function_calls": ["patch", "MagicMock", "patched_environ", "timedelta"], "class_names": [], "class_method_calls": ["k.startswith", "response.status_code", "requests.Response", "aws.assumed_creds", "put_response.reason", "aws.creds", "response_metadata.json", "pytest.fixture", "put_response.raw", "time.mktime", "patch.object", "response.raw", "put_response.status_code", "aws.__AssumeCache__", "pytest.mark", "response_metadata.text", "io.BytesIO", "response_mock.json", "aws.get_metadata", "response.reason", "aws.IROLE_CODE", "mock_token.encode", "patch.dict", "mock_get_metadata.call_count", "os.environ", "datetime.utcnow", "response_mock.status_code", "result.text", "response_metadata.status_code"]}, "test_compat.py": {"libraries": ["salt.utils.compat", "pytest"], "function_names": ["test_cmp_int_x_less_than_y", "test_cmp_dict_x_equals_y", "test_cmp_dict_x_not_equals_int_y", "test_cmp_int_x_equals_y", "test_cmp_dict_x_not_equals_y", "test_cmp_int_x_greater_than_y"], "function_calls": [], "class_names": [], "class_method_calls": ["pytest.raises", "salt.utils"]}, "test_dictdiffer.py": {"libraries": ["salt.utils.dictdiffer", "pytest"], "function_names": ["test_changed", "test_unchanged", "test_diffs", "test_changes_str", "test_new_values", "test_removed", "differ", "test_old_values", "test_changed_without_ignore_unset_values", "test_added"], "function_calls": ["bool"], "class_names": [], "class_method_calls": ["x.replace", "differ.removed", "request.param", "differ.changed", "differ.changes_str", "pytest.fixture", "pytest.mark", "differ.new_values", "ignore_missing.pop", "differ.added", "differ.old_values", "differ.ignore_unset_values", "differ.diffs", "differ.unchanged", "dictdiffer.RecursiveDictDiffer"]}, "test_listdiffer.py": {"libraries": ["salt.utils.dictdiffer.RecursiveDictDiffer", "salt.utils.listdiffer.list_diff", "pytest"], "function_names": ["test_remove_diff_intersect", "test_intersect", "test_changes_str2", "test_diffs", "test_changed_all", "test_changes_str", "test_new_list", "test_new_values", "test_changed_intersect", "test_current_list", "test_remove_diff_removed", "get_new_list", "test_removed", "get_list_diff", "test_old_values", "get_old_list", "test_added"], "function_calls": ["list_diff", "len"], "class_names": [], "class_method_calls": ["get_list_diff.removed", "get_list_diff.remove_diff", "get_list_diff.current_list", "get_list_diff.changed", "RecursiveDictDiffer.NONE_VALUE", "get_list_diff.added", "pytest.fixture", "get_list_diff.diffs", "get_list_diff.intersect", "get_list_diff.old_values", "get_list_diff.changes_str2", "get_list_diff.new_list", "get_list_diff.changes_str", "get_list_diff.new_values"]}, "test_minions.py": {"libraries": ["tests.support.unit.TestCase", "salt.utils.minions", "tests.support.mock.patch", "tests.support.mock.MagicMock"], "function_names": ["test_nodegroup_comp", "test_parse_grains_target", "test_spec_check", "test_parse_pillar_pcre_target", "test_parse_subnet_target", "test_parse_multiword_target", "test_simple_expression_nodegroup", "test_simple_nodegroup", "test_simple_recurse", "test_parse_minion_pcre_target", "test_parse_list_target", "test_circular_nodegroup_reference", "test_parse_range_target", "setUp", "test_parse_nodegroup_target", "test_auth_check", "test_parse_grains_pcre_target"], "function_calls": ["patch", "MagicMock"], "class_names": ["CkMinionsTestCase", "TargetParseTestCase", "NodegroupCompTest", "MinionsTestCase"], "class_method_calls": ["self.assertDictEqual", "self.assertEqual", "self.assertListEqual", "self.assertTrue", "self.assertFalse", "salt.utils", "self.ckminions"]}, "test_msgpack.py": {"libraries": ["sys", "os", "salt.utils.odict.OrderedDict", "tests.support.unit.TestCase", "struct", "inspect", "io.BytesIO", "pytest", "pprint", "salt.utils.msgpack"], "function_names": ["_test_buffered_base", "sanitized", "_test_decode_binary", "_test_unpack_array_header_from_file", "test_array_size", "_test_get_buffer", "test_buffered_base_unpack", "_hook", "_test_ignore_unicode_errors", "_test_unpacker_ext_hook", "test_Packer", "_test_pack_unicode", "_test_pack_float", "test_Unpacker", "hook", "test_buffered_base_pack", "_test_strict_unicode_unpack", "_check", "test_manual_reset", "test_binary_function_compatibility", "pair_hook", "no_fail_run", "_test_unpacker_hook_refcnt", "_test_base", "test_exceptions", "test_max_buffer_size", "test_function_aliases", "_test_pack_bytes", "_test_pair_list", "test_map_size", "test_version", "__init__", "_test_pack_byte_arrays", "_test_ignore_errors_pack", "_test_odict"], "function_calls": ["range", "sanitized", "list", "int", "pack_func", "MyUnpacker", "OrderedDict", "unpack_func", "hasattr", "bytearray", "super", "str", "dir", "isinstance", "dict", "BytesIO", "test", "getattr", "set"], "class_names": ["MyUnpacker", "TestMsgpack"], "class_method_calls": ["msgpack.packb", "self.assertRaises", "self._test_strict_unicode_unpack", "bio.write", "self._test_pack_unicode", "self._test_decode_binary", "self._test_pair_list", "self.assertIsInstance", "self._check", "self._test_unpacker_ext_hook", "inspect.isfunction", "up.feed", "msgpack.unpack", "msgpack.unpackb", "self._test_unpack_array_header_from_file", "self._test_unpacker_hook_refcnt", "packer.getbuffer", "packer.pack_map_header", "pprint.pformat", "inspect.getfile", "func_name.__name__", "self.assertEqual", "self._test_ignore_errors_pack", "struct.pack", "self.assertNotEqual", "buffer.read", "pytest.mark", "unpacker.feed", "x.startswith", "self.assertFalse", "packer.bytes", "unpacker.read_array_header", "self.fail", "unpacker.unpack", "strm.getvalue", "self.assertGreater", "self._test_ignore_unicode_errors", "strm.write", "msgpack.Packer", "packer.pack", "packer.pack_array_header", "result.append", "bio.seek", "self.no_fail_run", "test_func.__name__", "self.assertGreaterEqual", "self._test_odict", "self._test_get_buffer", "self._test_pack_float", "salt.utils", "packer.pack_map_pairs", "unpacked.decode", "self.subTest", "packer.reset", "pytest.importorskip", "functions.append", "self._test_pack_bytes", "up.unpack", "BytesIO.read", "sys.getrefcount", "os.urandom", "self._test_base", "self.skipTest", "self.assertTrue", "self._hook", "self._test_buffered_base", "self._test_pack_byte_arrays", "msgpack.pack", "msgpack.Unpacker", "buffer.getvalue"]}, "test_platform.py": {"libraries": ["salt.utils.platform", "subprocess", "tests.support.mock.patch"], "function_names": ["test_linux_distribution"], "function_calls": ["patch"], "class_names": [], "class_method_calls": ["subprocess.CalledProcessError", "salt.utils"]}, "test_pycrypto.py": {"libraries": ["string", "contextlib", "salt.utils.platform", "salt.exceptions.SaltInvocationError", "re", "pytest", "logging", "salt.utils.pycrypto", "tests.support.mock.patch"], "function_names": ["test_gen_hash_passlib", "test_gen_hash_no_lib", "test_gen_hash_crypt_no_arguments", "test_gen_hash_passlib_no_arguments", "test_gen_hash_passlib_default_algorithm", "test_secure_password", "test_secure_password_all_chars", "test_secure_password_all_chars_no_has_random", "test_gen_hash_crypt", "test_gen_hash_selection", "test_gen_hash_crypt_default_algorithm", "test_gen_hash_crypt_warning", "algorithm", "test_secure_password_no_has_random"], "function_calls": ["patch", "len"], "class_names": [], "class_method_calls": ["request.param", "string.punctuation", "caplog.text", "pytest.fixture", "gh_passlib.assert_called_once", "check.search", "gh_crypt.reset_mock", "gh_crypt.assert_not_called", "pytest.mark", "check_printable.search", "pytest.raises", "logging.WARNING", "string.ascii_lowercase", "gh_crypt.assert_called_once", "check_whitespace.search", "salt.utils", "string.printable", "string.ascii_uppercase", "string.whitespace", "re.compile", "caplog.at_level", "string.digits", "contextlib.suppress", "gh_passlib.assert_not_called", "re.escape"]}, "test_pyobjects.py": {"libraries": ["salt.state", "salt.utils.files", "logging", "salt.utils.pyobjects.Registry", "tempfile", "tests.support.unit.TestCase", "tests.support.runtests.RUNTIME_VARS", "uuid", "os", "textwrap", "salt.utils.pyobjects.DuplicateState", "salt.template.compile_template", "salt.utils.pyobjects.State", "salt.utils.pyobjects.InvalidFunction", "salt.utils.odict.OrderedDict", "jinja2", "salt.utils.pyobjects.StateFactory", "salt.config", "pytest", "salt.utils.pyobjects.SaltObject", "shutil"], "function_names": ["render_and_assert", "test_context_manager", "test_invalid_function", "add_dup", "attr_fail", "test_factory_serialization", "times2", "test_map", "render", "test_sls_imports", "setUp", "samba_with_grains", "test_requisite_implicit_list", "test_random_password", "test_duplicates", "test_import_random_password", "tearDownClass", "tearDown", "do_render", "_test", "build_map", "test_extend", "assert_equal", "assert_not_equal", "test_salt_object", "test_include", "test_salt_data", "test_import_scope", "test_map_with_priority", "test_serialization", "test_basic", "setUpClass", "write_template_file"], "function_calls": ["render_and_assert", "AssertionError", "super", "f", "dict", "StateFactory", "add_dup", "State", "compile_template", "str", "OrderedDict", "SaltObject"], "class_names": ["MapBuilder", "StateTests", "MapTests", "SaltObjectTests", "RendererMixin", "RendererTests"], "class_method_calls": ["self.assertDictEqual", "self.config", "Registry.empty", "self.assertRaises", "state.rend", "self.centos_attrs", "f.write", "log.debug", "self.state_tree_dir", "salt.state", "Salt.fail", "state.opts", "os.path", "self.samba_with_grains", "self.recursive_map_template", "logging.getLogger", "self.centos_grains", "self.assertEqual", "cls.recursive_map_template", "pytest.mark", "self.pydmesg_salt_expected", "self.recursive_import_template", "os.makedirs", "tempfile.mkdtemp", "RUNTIME_VARS.TMP", "cls.File", "self.debian_grains", "self.assert_equal", "self.build_map", "textwrap.dedent", "shutil.rmtree", "self.pydmesg_expected", "self.File", "salt.utils", "Service.running", "self.write_template_file", "self.render", "self.cache_dir", "self.debian_attrs", "self.root_dir", "Salt.math", "self.ubuntu_grains", "jinja2.Template", "Registry.salt_data", "self.assert_not_equal", "cls.recursive_import_template", "Registry.states", "salt.config", "self.ubuntu_attrs", "self.pydmesg_kwargs", "uuid.uuid4"]}, "test_rsax931.py": {"libraries": ["fnmatch", "glob", "ctypes.util", "os", "sys", "ctypes", "salt.utils.rsax931._find_libcrypto", "salt.utils.rsax931._load_libcrypto", "platform", "salt.utils.platform", "pytest", "salt.utils.rsax931.RSAX931Signer", "salt.utils.rsax931.RSAX931Verifier", "tests.support.mock.patch"], "function_names": ["test_find_libcrypto_darwin_pip_install", "hello_world", "test_find_libcrypto_smartos", "test_find_libcrypto_unsupported", "test_find_libcrypto_darwin_pip_install_venv", "test_find_libcrypto_with_system_before_catalina", "test_load_libcrypto", "mock_glob", "test_find_libcrypto_win32", "hello_world_sig", "privkey_data", "mock_getenv", "test_find_libcrypto_aix", "test_find_libcrypto_darwin_onedir", "pubkey_data", "test_find_libcrypto_darwin_catalina", "test_find_libcrypto_sunos", "test_verifier", "test_glob", "test_getenv", "test_find_libcrypto_darwin_bigsur_packaged", "test_signer"], "function_calls": ["RSAX931Verifier", "hasattr", "patch", "mock_glob", "_load_libcrypto", "saved_getenv", "isinstance", "_find_libcrypto", "RSAX931Signer"], "class_names": [], "class_method_calls": ["managed_paths.items", "ctypes.util", "sys.executable", "os.environ", "ctypes.CDLL", "verifier.verify", "signer.sign", "env.get", "fnmatch.fnmatch", "pytest.fixture", "pytest.mark", "pytest.raises", "mock_glob.assert_any_call", "os.path", "salt.utils", "patch.dict", "os.getenv", "patch.object"]}, "test_stringutils.py": {"libraries": ["salt.utils.stringutils", "textwrap", "builtins", "re", "pytest", "tests.support.unit.LOREM_IPSUM", "tests.support.mock.patch"], "function_names": ["test_is_binary", "test_expr_match", "single_double_txt", "test_to_num", "test_to_str", "test_get_context_at_bottom_of_file", "test_to_unicode_multi_encoding", "test_to_none", "test_contains_whitespace", "unicode", "test_get_context_with_marker", "single_txt", "test_check_whitelist_blacklist", "test_check_include_exclude_regex", "test_double_quotes", "match", "double_txt", "test_single_and_double_quotes", "latin1_unicode", "test_to_bytes", "test_check_include_exclude_exclude_include", "test_get_context", "test_build_whitespace_split_regex", "test_to_unicode", "eggs", "test_human_to_bytes", "test_get_context_has_enough_context", "test_get_context_2_context_lines", "test_check_include_exclude_empty", "test_single_quotes", "test_get_context_at_top_of_file", "test_issue_2227", "test_check_include_exclude_exclude_list", "single_double_same_line_txt", "test_check_include_exclude_exclude", "test_human_to_bytes_edge_cases"], "function_calls": ["range", "chr", "len", "set", "isinstance", "bytearray"], "class_names": [], "class_method_calls": ["vals.append", "LATIN1_UNICODE.encode", "pytest.fixture", "textwrap.dedent", "pytest.mark", "LOREM_IPSUM.split", "pytest.raises", "salt.utils", "UNICODE.encode", "unit.upper", "patch.object", "re.search"]}, "test_thin.py": {"libraries": ["salt.utils.json", "salt.utils.thin", "tests.support.helpers.VirtualEnv", "salt.utils.hashutils", "tempfile", "salt.utils.stringutils", "tests.support.unit.TestCase", "tests.support.runtests.RUNTIME_VARS", "pathlib", "tests.support.mock.patch", "copy", "sys", "os", "tests.support.helpers.TstSuiteLoggingHandler", "tests.support.mock.MagicMock", "salt.utils.stringutils.to_bytes", "salt.exceptions", "tarfile", "jinja2", "salt.utils.platform", "pytest", "shutil"], "function_names": ["test_get_tops_python_exclude", "test_gte", "test_thin_dir", "test_pack_alternatives_auto_detect", "test_gen_thin_compression_fallback_py3", "test_get_ext_tops_config_pass", "test_get_ext_tops_dependency_config_check", "test_gen_thin_fails_ancient_python_version", "test_get_salt_call_script", "test_min_sum", "test_get_ext_namespaces_empty", "setUp", "test_get_tops", "test_thin_sum", "test_thin_path", "test_get_tops_python", "test_gen_thin_control_files_written_access_denied_cwd", "_popen", "test_get_ext_tops_cfg_wrong_interpreter", "test_get_tops_so_mods", "test_gen_thin_main_content_files_written_py3", "test_gen_thin_ext_alternative_content_files_written_py3", "test_get_ext_namespaces_failure", "test_pack_alternatives_empty_dependencies", "test_get_tops_extra_mods", "patch_if", "test_pack_alternatives_exclude", "tearDown", "test_get_supported_py_config_ext_tops", "test_get_supported_py_config_base_tops", "test_gen_thin_control_files_written_py3", "_version_info", "test_get_ext_tops_cfg_missing_interpreter", "inner", "test_get_ext_tops_cfg_interpreter", "test_add_dep_path", "test_pack_alternatives_not_normalized", "test_pack_alternatives", "_tarfile", "test_pack_alternatives_path_doesnot_exist", "test_get_ext_tops_cfg_missing_dependencies", "test_get_ext_namespaces", "test_get_supported_py_config_typecheck"], "function_calls": ["MagicMock", "type", "range", "patch", "TstSuiteLoggingHandler", "_popen", "VirtualEnv", "VersionInfo", "_tarfile", "enumerate", "str", "len", "isinstance", "sorted", "_version_info", "patch_if", "bts"], "class_names": ["VersionInfo", "SSHThinTestCase"], "class_method_calls": ["tf.open", "exp_files.extend", "self.tar", "self.assertIn", "pytest.raises", "self.assertFalse", "thin.salt", "self._tarfile", "venv.venv_dir", "os.makedirs", "self.jinja_fp", "ret.returncode", "venv.run", "thin._add_dependency", "thin.gte", "thin.log", "files.index", "line.replace", "sys.version_info", "vi.minor", "files.append", "RUNTIME_VARS.CODE_DIR", "base_tops.extend", "thin.get_tops", "thin._get_ext_namespaces", "self.exp_files", "thin.get_ext_tops", "tops.append", "self.assertEqual", "pytest.mark", "thin.get_tops_python", "self.digest", "RUNTIME_VARS.TMP", "fp_.write", "shutil.rmtree", "pathlib.Path", "self.exp_ret", "self.tops", "vi.major", "proc.returncode", "self.ext_conf", "thin.gen_thin", "thin._get_supported_py_config", "venv.venv_python", "self.exc_libs", "os.sep", "self.assertListEqual", "log_handler.messages", "files.pop", "spec.append", "top.rsplit", "thin.zipfile", "thin._pack_alternative", "top.find", "tempfile.gettempdir", "data.get", "salt.exceptions", "line.startswith", "thin.thin_sum", "thin.min_sum", "thin.thin_path", "exp_ret.pop", "os.path", "thin._get_salt_call", "ret.items", "err.value", "copy.deepcopy", "tar.close", "tarfile.open", "self.fake_libs", "thin.sys", "RUNTIME_VARS.SALT_CODE_DIR", "salt.utils", "exp_ret.items", "os.linesep", "self._popen", "self.assertTrue", "proc.communicate", "jinja2.__file__", "tar.extractall", "thin.tarfile"]}, "test_versions.py": {"libraries": ["sys", "salt.modules.cmdmod", "packaging.version.InvalidVersion", "salt.version", "warnings", "salt.utils.versions.Version", "salt.utils.versions.LooseVersion", "datetime", "pytest", "salt.utils.versions", "tests.support.mock.patch"], "function_names": ["test_warn_until_date_bad_strptime_format", "test_compare", "test_warn_until_warning_raised", "test_warn_until_bad_version_name_raises_runtime_error", "test_cmp_strict", "raise_named_version_warning", "test_kwargs_warn_until_warning_raised", "test_warn_until_good_version_argument", "test_warn_until_date_warning_raised", "test_kwargs_warn_until", "test_cmp", "test_prerelease", "raise_warning"], "function_calls": ["Version", "AssertionError", "LooseVersion", "raise_named_version_warning", "str", "len", "raise_warning"], "class_names": [], "class_method_calls": ["sys.maxsize", "version.pre", "salt.version", "kwargs.pop", "datetime.datetime", "subtests.test", "vrs.major", "log_mock.error", "warnings.catch_warnings", "pytest.mark", "datetime.date", "pytest.raises", "warnings.filterwarnings", "salt.utils", "vrs.formatted_version", "version.release", "patch.object"]}, "test_vt.py": {"libraries": ["sys", "os", "salt.utils.vt", "tests.support.paths.CODE_DIR", "time", "random", "salt.utils.stringutils", "subprocess", "salt.utils.files", "salt.utils.platform", "tests.support.unit.TestCase", "functools", "io", "pytest", "salt.utils"], "function_names": ["stdout_fileno_available", "test_split_multibyte_characters_shiftjis", "generate_multibyte_stderr_shiftjis", "test_isalive_while_theres_data_to_read", "wrapper_fixStdOutErrFileNoIfNeeded", "fixStdOutErrFileNoIfNeeded", "test_issue_10404_ptys_not_released", "current_pty_count", "test_vt_size", "generate_multibyte_stdout_unicode", "generate_multibyte_stdout_shiftjis", "generate_multibyte_stderr_unicode", "test_split_multibyte_characters_unicode"], "function_calls": ["stdout_fileno_available", "range", "current_pty_count", "str", "int", "func"], "class_names": ["VTTestCase"], "class_method_calls": ["os.sys", "terminal.recv", "random.choice", "terminal.wait", "terminal.getwinsize", "os.path", "sys.stdout", "term.recv", "term.isalive", "self.assertEqual", "VTTestCase.generate_multibyte_stdout_shiftjis", "pytest.mark", "time.sleep", "self.assertFalse", "self.assertIsNone", "stdout.strip", "self.fail", "VTTestCase.generate_multibyte_stderr_unicode", "VTTestCase.generate_multibyte_stdout_unicode", "io.UnsupportedOperation", "salt.utils", "functools.wraps", "terminal.has_unread_data", "os.environ", "sys.executable", "buffer_o.strip", "fh_.read", "term.close", "terminal.close", "term.has_unread_data", "self.skipTest", "self.assertTrue", "proc.communicate", "subprocess.Popen", "VTTestCase.generate_multibyte_stderr_shiftjis", "subprocess.PIPE"]}, "test_win_functions.py": {"libraries": ["salt.utils.win_functions", "tests.support.unit.TestCase", "win32net", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_get_user_groups_system", "test_get_user_groups_sid", "test_get_user_groups_unknown_dc", "test_get_user_groups", "test_get_user_groups_unavailable_dc", "test_escape_argument_path_with_space", "test_escape_argument_with_space", "test_get_user_groups_error", "test_escape_argument_simple_path", "test_get_user_groups_missing_permission", "test_broadcast_setting_change", "test_escape_argument_simple"], "function_calls": ["patch", "WinError", "MagicMock"], "class_names": ["WinError", "WinFunctionsTestCase"], "class_method_calls": ["self.assertRaises", "self.assertEqual", "self.assertListEqual", "win_functions.get_user_groups", "win_functions.escape_argument", "pytest.mark", "win_functions.broadcast_setting_change", "win_error.winerror", "self.assertTrue", "win32net.error"]}, "test_win_pwsh.py": {"libraries": ["salt.utils.win_pwsh", "salt.exceptions.CommandExecutionError", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_run_dict_empty_return", "test_run_dict_missing_retcode", "test_run_dict_stderr", "test_run_dict_json_string", "test_run_dict_retcode_not_zero", "test_run_dict_invalid_json", "test_run_dict"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["exc_info.value", "win_pwsh.run_dict", "pytest.raises", "pytest.mark"]}, "test_win_reg.py": {"libraries": ["salt.utils.win_reg", "win32api", "salt.utils.stringutils", "salt.exceptions.CommandExecutionError", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest", "saltfactories.utils.random_string"], "function_names": ["test_value_exists_invalid_hive", "test_value_exists_no_vname", "test_list_values_access_denied", "test_read_value_non_existing", "test_list_values_invalid_hive", "test_read_value_non_existing_key", "test_key_exists_existing", "test_read_value_invalid_hive", "test_set_value_unicode_value", "test_set_value_invalid_hive", "fake_key", "test_list_values_existing", "test_read_value_unknown_key_error", "test_read_value_existing", "test_delete_value_non_existing", "test_value_exists_non_existing", "test_delete_key_recursive_failed_to_open_key", "test_broadcast_change_fail", "test_cast_vdata_reg_sz", "test_value_exists_unknown_key_error", "test_list_keys_access_denied", "unicode_value", "test_set_value_reg_dword", "test_delete_key_recursive_failed_to_delete", "test_list_keys_non_existing", "test_list_keys_invalid_hive", "test_cast_vdata_reg_multi_sz", "test_broadcast_change_success", "test_delete_value", "test_delete_value_unicode", "test_delete_key_recursive_key_not_found", "test_cast_vdata_reg_expand_sz", "test_read_value_access_denied", "test_set_value_reg_qword", "test_value_exists_empty_default_value", "test_list_keys_unknown_key_error", "test_delete_value_unicode_key", "test_cast_vdata_reg_binary", "test_read_value_multi_sz_empty_list", "test_key_exists_invalid_hive", "test_list_values_non_existing", "unicode_key", "test_delete_key_recursive_unicode", "test_value_exists_existing", "test_read_value_default", "test_set_value_type_error", "test__to_unicode_int", "test_key_exists_unknown_key_error", "test_delete_key_recursive_too_close", "test_key_exists_non_existing", "test_delete_value_unicode_vname", "test_set_value_default", "test_delete_value_invalid_hive", "test_set_value_value_error", "test_set_value", "test_set_value_system_error", "test_cast_vdata_reg_dword", "test_set_value_open_create_failure", "test_delete_key_recursive", "test_value_exists_key_not_exist", "test_delete_value_unknown_error", "test_set_value_unicode_key", "test_read_value_unknown_value_error", "test_list_values_unknown_key_error", "test_cast_vdata_reg_qword", "test_delete_key_recursive_invalid_hive", "test_list_keys_existing"], "function_calls": ["MagicMock", "patch", "SystemError", "TypeError", "random_string", "isinstance", "WindowsError", "ValueError"], "class_names": [], "class_method_calls": ["win_reg.value_exists", "win_reg.read_value", "keys.append", "win32api.error", "win_reg.delete_key_recursive", "win_reg.list_values", "pytest.fixture", "pytest.mark", "win_reg.list_keys", "pytest.raises", "win_reg.cast_vdata", "win_reg.set_value", "win_reg.delete_value", "win_reg.key_exists", "win_reg.broadcast_change", "win_reg._to_unicode", "salt.utils"]}, "test_win_update.py": {"libraries": ["salt.utils.win_update", "tests.support.mock.patch", "tests.support.mock.MagicMock", "pytest"], "function_names": ["test_installed_updates_all_installed", "test_installed_updates_some_installed", "test_installed_no_updates_installed", "test_installed_no_updates"], "function_calls": ["patch", "MagicMock"], "class_names": [], "class_method_calls": ["wua.installed", "wua._updates", "pytest.mark", "installed_updates.updates", "win_update.WindowsUpdateAgent", "patch.object"]}, "test_xmlutil.py": {"libraries": ["tests.support.unit.TestCase", "xml.etree.ElementTree", "salt.utils.xmlutil"], "function_names": ["test_xml_case_a_legacy", "test_xml_case_d_full", "test_xml_case_d_legacy", "setUp", "test_xml_case_c_legacy", "test_xml_case_d", "test_xml_case_a", "test_xml_case_b_legacy", "test_xml_case_c_full", "test_xml_case_e_full", "test_xml_case_f", "test_xml_case_b_full", "test_xml_case_f_full", "test_xml_case_e", "test_xml_case_b", "test_xml_case_c", "test_xml_case_f_legacy", "test_xml_case_a_full", "test_xml_case_e_legacy"], "function_calls": [], "class_names": ["XMLUtilTestCase"], "class_method_calls": ["self.assertEqual", "ET.fromstring", "xml.to_dict", "self.cases"]}, "test_factory.py": {"libraries": ["salt.utils.vault.client", "salt.exceptions", "tests.support.mock.ANY", "salt.utils.vault", "pytest", "salt.utils.vault.factory", "tests.pytests.unit.utils.vault.conftest._mock_json_response", "tests.support.mock.MagicMock", "salt.utils.vault.cache", "tests.support.mock.Mock", "tests.support.mock.patch", "copy"], "function_names": ["test_query_master_merges_unwrapped_result", "test_get_authd_client_renews_token", "fetch_token", "cached", "token", "build_exception_first", "saltutil_runner", "test_clear_cache", "cbank", "test_get_connection_config_update_server", "raise_unwrap", "test_parse_config_ensures_necessary_values", "test_clear_cache_clears_client_from_context", "local", "test_build_authd_client", "test_fetch_secret_id_uncached", "opts", "build_fails", "client_valid", "client_invalid", "client_renewable", "test_get_connection_config_uncached", "test_fetch_token_local_cached_changed", "test_get_authd_client_fails", "test_query_master_local_verify_does_not_interfere_with_expected_server", "test_get_authd_client_exception", "clear_cache", "test_query_master_merges_misc_data_recursively", "build_renewable", "test_query_master_validates_response", "test_get_authd_client_unrenewable_new_token", "uncached", "test_get_connection_config_update_auth_method", "publish_runner", "b64encode_sig", "test_query_master_merges_nested_unwrapped_result", "client_renewable_max_ttl", "salt_crypt", "test_build_revocation_client_never_calls_master_for_config", "fetch_secret_id", "test_fetch_token_local", "test_fetch_token_config_location", "build_invalid_first", "remote", "secret_id", "_assert_not_updated", "test_fetch_token_uncached", "test_build_revocation_client_never_calls_master_for_token", "test_query_master_invalidates_cache_when_expected_server_differs", "_cache", "test_parse_config_respects_local_verify", "test_fetch_secret_id_config_location", "test_get_connection_config_local", "conn_config", "unwrap_client", "test_get_connection_config_location", "test_get_authd_client_unwrap_exception", "test_fetch_token_cached", "test_fetch_token_uncached_single_use", "test_query_master_invalidates_cache_when_requested_by_master", "test_get_authd_client_renewable_token_max_ttl_insufficient", "test_get_connection_config_update_bind_secret_id", "test_use_local_config", "build_succeeds", "rec", "test_get_connection_config_update", "test_get_connection_config_update_cache_backend", "test_get_authd_client_succeeds", "test_get_connection_config_cached", "build_renewable_max_ttl", "test_query_master_uses_correct_module", "test_fetch_secret_id_local", "test_fetch_token_uncached_embedded", "config", "test_fetch_secret_id_uncached_single_use", "test_get_connection_config_update_role_id", "test_query_master_merges_misc_data", "test_fetch_secret_id_cached", "test_get_config_recognizes_old_config", "test_get_authd_client_invalid", "build_unrenewable", "client_unrenewable"], "function_calls": ["MagicMock", "Mock", "patch", "_mock_json_response", "rec", "cached", "remote", "getattr", "isinstance"], "class_names": ["TestBuildAuthdClient", "TestBuildRevocationClient", "TestFetchToken", "TestGetConnectionConfig", "TestQueryMaster", "TestGetAuthdClient", "TestFetchSecretId"], "class_method_calls": ["fetch_token.return_value", "clear_cache.assert_called_once", "cached.get", "build_succeeds.call_count", "client.auth", "build_exception_first.call_count", "publish_runner.assert_called_once", "client.token_renew", "pytest.raises", "publish_runner.assert_not_called", "publish_runner.return_value", "vault.clear_cache", "token.get", "vcache.VaultAuthCache", "build.side_effect", "path.split", "events.assert_called_once_with", "misc_data.split", "remote.return_value", "unwrap_client.unwrap", "factory._use_local_config", "saltutil_runner.assert_called_once", "factory._get_connection_config", "query.return_value", "query.assert_not_called", "pytest.mark", "clear_cache.assert_not_called", "conn_config.return_value", "saltutil_runner.return_value", "factory._fetch_token", "token.return_value", "approle.get", "remote.assert_not_called", "fetch_secret_id.assert_not_called", "vault.VaultConfigExpired", "saltutil_runner.assert_not_called", "unauthd_client_mock.token_lookup", "client.token_valid", "build.return_value", "unwrap_client.assert_called_once_with", "cache.get", "cache.return_value", "vault.VaultSecretId", "vclient.AuthenticatedVaultClient", "remote.assert_called_once_with", "cache_factory.return_value", "runner.return_value", "factory._fetch_secret_id", "unwrap_client.return_value", "unauthd_client_mock.unwrap", "context.get", "local.assert_called_once", "clear_cache.assert_called_once_with", "unwrap_client.assert_not_called", "cfactory.return_value", "fetch_secret_id.return_value", "salt.exceptions", "build_fails.side_effect", "cbank.return_value", "remote.assert_called", "remote.assert_called_once", "factory.parse_config", "cached.flush", "factory.VaultUnwrapException", "request.param", "uncached.store", "factory._build_authd_client", "pytest.fixture", "caplog.text", "uncached.get", "revoc.return_value", "ptr.get", "vault.VaultToken", "clear.return_value", "copy.deepcopy", "cache.side_effect", "vcache.VaultConfigCache", "client_invalid.token_valid", "factory.TOKEN_CKEY", "cached.store", "unauthd_client_mock.get_config", "build_invalid_first.call_count", "factory._query_master", "factory._build_revocation_client", "vault.get_authd_client", "parts.pop", "factory.CLIENT_CKEY", "fetch_secret_id.assert_called_once", "self._assert_not_updated"]}, "test_kv.py": {"libraries": ["salt.utils.vault.client", "requests.models", "salt.utils.vault.kv", "salt.utils.vault", "pytest", "tests.support.mock.MagicMock", "salt.utils.vault.cache", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["test_vault_kv_list", "test_vault_kv_read", "no_kv_info", "test_vault_kv_delete", "test_vault_kv_delete_versions", "test_kv_wrapper_raises_perm_exceptions_when_configured", "test_vault_kv_patch", "kvv2_response", "metadata_nocache", "paths", "test_kv_wrapper_handles_perm_exceptions", "test_get_secret_path_metadata_lookup_request_error", "path", "test_vault_kv_is_v2_no_cache", "kvv1_response", "kvv1_info", "kvv2", "kv_list_response", "kv_meta", "test_vault_kv_is_v2_cached", "test_vault_kv_destroy", "test_get_secret_path_metadata_lookup_unexpected_response", "kvv2_info", "test_parse_versions_raises_exception_when_unparsable", "test_vault_kv_write", "test_vault_kv_nuke", "kvv2_meta_response", "kv_meta_cached", "kvv1_meta_response", "test_parse_versions", "kvv1"], "function_calls": ["MagicMock", "Mock", "patch", "int", "getattr", "func", "isinstance"], "class_names": ["TestKVV1", "TestKVV2"], "class_method_calls": ["request.param", "kvv1.write", "kvv1.list", "client.delete", "kv_meta_cached.metadata_cache", "kvv1.read", "requests.models", "pytest.fixture", "cache.get", "caplog.text", "resp_mm.reason", "kvv1.patch", "vclient.AuthenticatedVaultClient", "kvv1.destroy", "client.list", "kv_meta_cached.is_v2", "kvv1.client", "vcache.VaultCache", "wrapper.rstrip", "vkv.VaultKV", "pytest.mark", "pytest.raises", "kvv2.delete", "kv_meta_cached.client", "kvv2.client", "kv_meta.is_v2", "client.post", "kvv2.write", "args.append", "cache.assert_called_once", "kvv2._parse_versions", "resp_mm.status_code", "kv.client", "client.patch", "kvv2._get_secret_path_metadata", "request.getfixturevalue", "client.get", "vault.VaultPermissionDeniedError", "kvv1.delete", "resp_mm.json", "kvv1.nuke", "kvv2.destroy", "kvv2.read", "kvv2.nuke", "kvv2.list", "kv_meta.metadata_cache", "kvv2.patch", "getkv.return_value", "vault.VaultInvocationError", "vclient.VaultPermissionDeniedError", "getkv.side_effect", "kv_meta.client"]}, "test_leases.py": {"libraries": ["salt.utils.vault.client", "salt.utils.vault.leases", "salt.utils.vault", "pytest", "salt.utils.vault.cache", "tests.support.mock.Mock", "tests.support.mock.patch", "tests.support.mock.call"], "function_names": ["test_vault_token_is_valid_accounts_for_num_uses", "lease_renewed_extended_response", "test_get_valid_renew_increment", "test_get_valid_renew_valid_for", "test_vault_approle_secret_id_is_valid_accounts_for_num_uses", "time_stopped", "store_valid", "test_vault_lease_creation_time_normalization", "test_vault_token_is_valid_accounts_for_time", "test_get_valid_not_flush", "test_get_valid_renew_default_period", "store", "test_get_valid_not_renew", "test_get_valid_renew_increment_insufficient", "test_get_cached_valid", "test_vault_lease_is_valid_accounts_for_time", "test_get_uncached_or_invalid", "test_vault_approle_secret_id_is_valid_accounts_for_time", "lease_renewed_response"], "function_calls": ["patch", "call", "Mock"], "class_names": ["TestLeaseStore"], "class_method_calls": ["res.is_valid", "request.param", "leases.LeaseStore", "pytest.fixture", "cache.get", "vault.VaultSecretId", "vclient.AuthenticatedVaultClient", "store.get", "vault.VaultToken", "cache.exists", "store_valid.client", "store.client", "pytest.mark", "res.creation_time", "leases.VaultLease", "vcache.VaultLeaseCache", "store_valid.cache", "store.cache", "pytest.param", "store_valid.expire_events", "store_valid.get", "res.is_valid_for"]}, "test_clean_path.py": {"libraries": ["salt.utils.verify"], "function_names": ["test_clean_path_valid", "test_clean_path_invalid"], "function_calls": ["str"], "class_names": [], "class_method_calls": ["salt.utils"]}, "test_clean_path_link.py": {"libraries": ["salt.utils.verify", "pytest", "ctypes"], "function_names": ["test_clean_path_symlinked_src", "setup_links", "symlink", "__call__", "__init__", "test_clean_path_symlinked_tgt"], "function_calls": ["Symlink", "symlink", "str"], "class_names": ["Symlink"], "class_method_calls": ["ctypes.c_ubyte", "ctypes.c_uint32", "ctypes.c_wchar_p", "self._csl", "ctypes.WinError", "pytest.fixture", "from_path.symlink_to", "salt.utils", "source.is_dir", "ctypes.windll"]}, "test_verify.py": {"libraries": ["sys", "tempfile", "os", "salt.utils.verify", "resource", "getpass", "socket", "salt.utils.files", "pathlib", "pytest", "logging", "win32file", "zmq", "stat", "tests.support.mock.patch"], "function_names": ["flush", "_stat", "test_valid_id_exception_handler", "test_verify_env_race_condition", "test_verify_env", "test_verify_socket", "test_valid_id_pathsep", "test_user", "test_no_user", "write", "__init__", "test_zmq_verify", "_chown", "test_max_open_files", "test_zmq_verify_insufficient"], "function_calls": ["AssertionError", "range", "patch", "FileNotFoundError", "str", "FakeWriter"], "class_names": ["FakeWriter"], "class_method_calls": ["stat.S_IRWXO", "stat.S_IRWXG", "mock_stat.assert_any_call", "resource.setrlimit", "getpass.getuser", "caplog.messages", "self.errors", "dir_stat.st_mode", "patch.object", "sys.platform", "logmsg_crash.format", "logging.getLogger", "os.stat", "logging.DEBUG", "mock_chown.assert_any_call", "keys_dir.mkdir", "writer.output", "os.stat_result", "pytest.mark", "pytest.raises", "win32file._getmaxstdio", "win32file._setmaxstdio", "caplog.record_tuples", "tempfile.mkdtemp", "logmsg_dbg.format", "fp_.write", "pytest.skip", "os.getuid", "logmsg_chk.format", "err.errno", "pathlib.Path", "salt.utils", "dir_stat.st_uid", "resource.RLIMIT_NOFILE", "stat.S_IRWXU", "caplog.at_level", "resource.getrlimit", "socket.has_ipv6", "pathsep.join", "var_dir.exists", "sys.stderr", "self.output"]}, "test_verify_logs.py": {"libraries": ["os", "salt.utils.verify", "getpass", "pathlib", "pytest", "tests.support.mock.MagicMock", "tests.support.mock.patch"], "function_names": ["test_verify_log", "test_verify_log_files_file_scheme", "test_verify_logs_filter", "test_insecure_log", "test_verify_log_files", "test_verify_log_files_udp_scheme", "test_verify_log_files_tcp_scheme"], "function_calls": ["str", "MagicMock"], "class_names": [], "class_method_calls": ["mock_trace.assert_called_once_with", "os.getcwd", "path.exists", "mock_none.assert_called_once_with", "mock_cheese.assert_called_once_with", "pytest.mark", "pathlib.Path", "mock_info.call_count", "getpass.getuser", "salt.utils", "patch.object"]}, "test_auditpol.py": {"libraries": ["salt.modules.cmdmod", "salt.utils.win_lgpo_auditpol", "random", "salt.utils.platform", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_get_settings", "configure_loader_modules", "test_get_setting", "test_set_setting_invalid_setting", "settings", "test_set_setting", "test_get_auditpol_dump", "test_get_settings_invalid_category", "test_get_setting_invalid_name", "test_set_setting_invalid_value"], "function_calls": ["MagicMock"], "class_names": [], "class_method_calls": ["name.lower", "win_lgpo_auditpol.get_auditpol_dump", "random.choice", "k.lower", "mock_set.reset_mock", "pytest.fixture", "pytest.mark", "salt.modules", "line.lower", "pytest.raises", "win_lgpo_auditpol.settings", "mock_set.assert_called_once_with", "win_lgpo_auditpol.set_setting", "win_lgpo_auditpol.get_setting", "patch.object", "win_lgpo_auditpol.get_settings", "win_lgpo_auditpol._get_valid_names"]}, "test_file_roots.py": {"libraries": ["salt.wheel.file_roots", "pathlib", "pytest"], "function_names": ["test_find", "test_read", "test_write_prod", "test_find_in_subdir", "test_write_invalid_path", "test_list_env", "test_list_roots", "test_read_prod", "test_find_binary", "_make_temp_root_file", "test_read_binary", "base_root_1", "test_write_make_new_subdir", "prod_list_env", "prod_root_2", "configure_loader_modules", "base_root_2", "test_find_prod", "base_list_env", "test_read_in_subdir", "test_write_index", "test_write_invalid_env", "prod_root_1", "test_write_subdir", "test_write_invalid_index", "test_write", "test_find_does_not_exist", "test_list_env_prod", "populated_roots", "test_write_invalid_absolute_path"], "function_calls": ["str", "_make_temp_root_file"], "class_names": [], "class_method_calls": ["file_roots.write", "full_path.write_bytes", "file_roots.read", "pytest.fixture", "full_path.parent", "full_path.write_text", "pathlib.Path", "file_roots.list_env", "file_roots.find", "file_roots.list_roots", "path.mkdir"]}, "runtests.py": {"libraries": ["os", "salt.utils.win_functions", "salt.utils.platform", "logging", "salt.utils.immutabletypes.freeze", "pwd", "tests.support.paths", "salt.utils.path", "shutil"], "function_names": ["to_dict", "recursive_copytree", "__iter__", "__setattr__", "merge", "__init__", "__getattribute__", "this_user", "lock"], "function_calls": ["freeze", "RuntimeError", "dict", "RuntimeVars", "getattr", "this_user"], "class_names": ["RuntimeVars", "RootsDict"], "class_method_calls": ["paths.TMP_PRODENV_STATE_TREE", "os.walk", "paths.TMP_PRODENV_PILLAR_TREE", "log.debug", "paths.TMP_SCRIPT_DIR", "self._vars", "os.path", "data.items", "logging.getLogger", "os.sep", "paths.TMP", "object.__getattribute__", "src_path.replace", "os.stat", "paths.ENGINES_DIR", "paths.CODE_DIR", "self._locked", "paths.PILLAR_DIR", "paths.TMP_SYNDIC_MINION_CONF_DIR", "os.makedirs", "pwd.getpwuid", "paths.TESTS_DIR", "paths.SALT_CODE_DIR", "paths.FILES", "paths.TMP_SSH_CONF_DIR", "os.getuid", "object.__setattr__", "paths.SYS_TMP_DIR", "paths.TMP_ROOT_DIR", "salt.utils", "paths.CONF_DIR", "paths.PROD_FILES", "paths.TMP_SYNDIC_MASTER_CONF_DIR", "os.environ", "paths.LOG_HANDLERS_DIR", "paths.TMP_SUB_MINION_CONF_DIR", "paths.TMP_CONF_DIR", "paths.BASE_FILES", "paths.TMP_STATE_TREE", "paths.TMP_PILLAR_TREE", "shutil.copy2", "self.__class__", "paths.TMP_MINION_CONF_DIR"]}, "salt-tcpdump.py": {"libraries": ["sys", "pcapy", "time", "socket", "struct.unpack", "argparse"], "function_names": ["ip", "parse_ip", "run", "convert_ip_port", "add_args", "filter_new_cons", "parse_ether", "main", "__init__", "hex2dec", "remove_empty", "parse_args", "proc_tcp", "parse_tcp"], "function_calls": ["SaltNetstat", "vars", "next", "unpack", "filter_new_cons", "main", "str", "open", "len", "int", "print", "PCAPParser", "ArgParser"], "class_names": ["SaltNetstat", "PCAPParser", "ArgParser"], "class_method_calls": ["array.split", "sys.exit", "flags.append", "argparse.ArgumentParser", "self.parse_ether", "self.add_args", "self.ip", "self.iface", "ips_auth.append", "self.hex2dec", "pcapy.open_live", "time.sleep", "socket.ntohs", "self.parse_ip", "line.split", "self.main_parser", "tcp_f.readlines", "cap.next", "time.time", "ips_push.append", "socket.inet_ntoa", "content.pop", "self.convert_ip_port", "self.proc_tcp", "self.remove_empty", "self.parse_tcp"]}, "saltsh.py": {"libraries": ["sys", "os", "salt.runner", "readline", "atexit", "salt.client", "salt.output", "code.InteractiveConsole", "jinja2", "salt.loader", "salt.utils.yaml", "builtins", "salt.config", "pprint", "salt.pillar"], "function_names": ["get_salt_vars", "savehist", "main", "JINJA", "salt_outputter"], "function_calls": ["get_salt_vars", "locals", "InteractiveConsole", "main"], "class_names": [], "class_method_calls": ["sys.displayhook", "__opts__.get", "atexit.register", "os.environ", "jinja2.Template", "readline.read_history_file", "salt.output", "builtins._", "readline.set_history_length", "saltrepl.interact", "salt.loader", "salt.config", "os.path", "readline.write_history_file", "salt.pillar", "sys.stdout"]}, "case.py": {"libraries": ["salt.runner", "salt.utils.json", "datetime.timedelta", "salt.spm", "salt.utils.files", "logging", "tempfile", "tests.support.helpers.RedirectStdStreams", "salt.output", "tests.support.unit.TestCase", "tests.support.runtests.RUNTIME_VARS", "json", "io", "sys", "os", "tests.support.mixins.SaltClientTestCaseMixin", "time", "textwrap", "subprocess", "tests.support.cli_scripts.ScriptPathMixin", "pytestshellutils.utils.processes.terminate_process", "re", "tests.support.mixins.AdaptedConfigurationTestCaseMixin", "errno", "datetime.datetime", "salt.utils.platform", "salt.config", "pytest", "salt.utils.yaml"], "function_names": ["_spm_config", "get_opts", "run_script", "run_cloud", "_check_state_return", "confirm", "minion_run", "custom_roster", "run_spm", "status", "_spm_client", "run_call", "wait_for_all_jobs", "run_state", "run_run", "run_function", "run_key", "run_ssh", "format_return", "run_cp", "detach_from_parent_group", "run_salt", "_spm_build_files", "_spm_create_update_repo", "error", "__init__", "run_run_plus", "_arg_str", "mkdir_p"], "function_calls": ["dict", "terminate_process", "list", "SPMTestUserInterface", "format_return", "tuple", "log_func", "timedelta", "str", "len", "RedirectStdStreams", "isinstance"], "class_names": ["SSHCase", "SPMCase", "ClientCase", "ModuleCase", "SPMTestUserInterface", "SyndicCase", "ShellCase"], "class_method_calls": ["jids.append", "self._check_state_return", "self.RUN_TIMEOUT", "salt.spm", "process.pid", "tmp_file.read", "self.clients", "logging.getLogger", "tempfile.SpooledTemporaryFile", "self._arg_str", "kwargs.get", "runner.jid", "os.makedirs", "sys.path", "self.formula_dir", "self.formula_sls_dir", "self.run_script", "self._tmp_spm", "self.run_call", "sys.version_info", "subprocess.PIPE", "kwargs.pop", "RUNTIME_VARS.CODE_DIR", "fp.write", "self.get_script_path", "process.returncode", "json.loads", "client.cmd", "pytest.mark", "time.sleep", "out.splitlines", "errno.EEXIST", "self.fail", "tempfile.mkdtemp", "RUNTIME_VARS.TMP", "process.terminate", "runner.run", "RUNTIME_VARS.TMP_CONF_DIR", "match.group", "subprocess.Popen", "self.ui", "self.formula_file", "self._status", "log.error", "self._error", "self.run_function", "python_path_entries.insert", "exc.errno", "python_path_entries.remove", "datetime.now", "STATE_FUNCTION_RUNNING_RE.match", "os.setpgrp", "stderr.splitlines", "textwrap.dedent", "RUNTIME_VARS.TMP_MINION_CONF_DIR", "kwargs.items", "opts_arg.append", "salt.config", "client._close", "opts.update", "python_path_entries.extend", "self.config", "salt.runner", "self._confirm", "log.debug", "client.run", "os.path", "process.poll", "salt.output", "tmp_file.seek", "self.run_spm", "process.stderr", "io.StringIO", "tmp_file.close", "self.get_temp_config", "os.pathsep", "self._spm_client", "self.formula_sls", "stdout.splitlines", "RUNTIME_VARS.TMP_SSH_CONF_DIR", "self.get_config_file_path", "ret.append", "process.stdout", "salt.utils", "self.client", "re.compile", "os.environ", "process.communicate", "os.remove", "self.run_ssh", "python_path_env_var.split", "tmp_file.name"]}, "cli_scripts.py": {"libraries": ["os", "tests.support.runtests.RUNTIME_VARS", "saltfactories.utils.cli_scripts.generate_script", "logging"], "function_names": ["get_script_path"], "function_calls": ["get_script_path", "generate_script", "str"], "class_names": ["ScriptPathMixin"], "class_method_calls": ["logging.getLogger", "os.makedirs", "RUNTIME_VARS.CODE_DIR", "os.environ", "RUNTIME_VARS.TMP_SCRIPT_DIR", "script_name.replace", "log.info", "os.path"]}, "mock.py": {"libraries": ["fnmatch", "mock.Mock", "mock.FILTER_DIR", "mock.call", "mock.DEFAULT", "mock.MagicMock", "salt.utils.stringutils", "mock.PropertyMock", "mock.__version__", "mock.sentinel", "mock.create_autospec", "mock.NonCallableMock", "copy", "sys", "mock", "mock.NonCallableMagicMock", "mock.ANY", "errno", "mock.AsyncMock", "mock.patch"], "function_names": ["_read", "__enter__", "writelines_calls", "__str__", "__repr__", "_readline", "__iter__", "run", "__exit__", "_write", "_readlines", "_iterate_read_data", "_writelines", "stdout", "tell", "__check_read_data", "__call__", "_seek", "__init__", "__eq__", "write_calls", "stderr"], "function_calls": ["any", "type", "sum", "next", "repr", "Mock", "RuntimeError", "MockCall", "OSError", "list", "tuple", "int", "MockFH", "TypeError", "len", "isinstance"], "class_names": ["MockTimedProc", "MockCall", "_Process", "MockOpen", "MockFH"], "class_method_calls": ["self.kwargs", "self._stdout", "self.binary_mode", "self.mode", "self.read", "self.seek", "other.args", "self._stderr", "self.filename", "matched_contents.pop", "fh_.write_calls", "self.read_data", "self.__read_data_ok", "ret.extend", "self.__check_read_data", "self.__loc", "self.call_count", "fh_.writelines_calls", "self.read_data_iter", "self.pid", "self.readline", "self._iterate_read_data", "self._write", "content_type.__name__", "mock.__version__", "self.calls", "self.read_mode", "self.process", "self.write", "kwargs.get", "self._readlines", "self._readline", "self.__repr__", "self.call", "read_data.split", "self._read", "self._Process", "self.empty_string", "salt.utils", "errno.ENOENT", "self._seek", "self.args", "self.returncode", "self.readlines", "other.kwargs", "fnmatch.fnmatch", "self.filehandles", "self.close", "self._writelines", "self.write_mode", "part.isdigit", "self.writelines", "copy.copy"]}, "paths.py": {"libraries": ["sys", "os", "re", "logging", "salt", "tempfile", "salt.utils.path"], "function_names": ["list_test_mods"], "function_calls": ["len"], "class_names": [], "class_method_calls": ["logging.getLogger", "TESTS_DIR.startswith", "re.compile", "os.sep", "os.environ", "sys.path", "test_re.match", "os.path", "CODE_DIR.replace", "salt.__file__", "salt.utils", "sys.version_info", "tempfile.gettempdir", "sys.platform"]}, "etcd.py": {"libraries": ["enum", "time", "salt.utils.etcd_util.HAS_ETCD_V2", "requests", "salt.utils.etcd_util.HAS_ETCD_V3", "requests.exceptions", "pytest", "saltfactories.utils.random_string"], "function_names": ["etcd_container_image_name", "etcd_profile", "confirm_container_started", "etcd_port", "etcd_container", "etcd_static_port", "etcd_version", "profile_name", "etcd_version_ids", "etcd_container_name"], "function_calls": ["tuple", "random_string"], "class_names": ["EtcdVersion"], "class_method_calls": ["request.param", "response.json", "pytest.fixture", "salt_factories.get_container", "container.started", "EtcdVersion.v2", "response.text", "enum.Enum", "enum_value.value", "container.get_host_port_binding", "time.sleep", "requests.exceptions", "pytest.skip", "container.container_start_check", "etcd_container.get_host_port_binding", "time.time", "EtcdVersion.v3_v2_mode", "requests.get", "EtcdVersion.v3"]}, "formulas.py": {"libraries": ["functools", "pathlib", "zipfile", "pytest", "attr", "shutil"], "function_names": ["__exit__", "with_default_paths", "__enter__", "_default_url"], "function_calls": [], "class_names": ["SaltStackFormula"], "class_method_calls": ["self.url", "pytest.helpers", "self.state_tree_path", "self.tag", "self.tmp_path", "zipfile.ZipFile", "attr.ib", "pathlib.Path", "functools.partial", "attr.s", "zip_obj.extractall", "url.default", "target_path.exists", "self.name", "shutil.move"]}, "loader.py": {"libraries": ["tools.precommit.SALT_INTERNAL_LOADERS_PATHS", "pathlib", "ptscripts.command_group", "ast", "ptscripts.Context", "tools.utils"], "function_names": ["check_virtual"], "function_calls": ["str", "command_group", "isinstance", "list"], "class_names": [], "class_method_calls": ["target.id", "path.name", "ast.Name", "ast.parse", "tools.utils", "ctx.exit", "node.value", "ast.Assign", "ast.FunctionDef", "fpath.suffix", "SALT_CODE_DIR.rglob", "cgroup.command", "funcdef.name", "ctx.error", "pathlib.Path", "fpath.resolve", "module.body", "node.targets", "path.relative_to", "path.read_text"]}, "transport.py": {"libraries": ["tornado.ioloop", "multiprocessing", "hashlib", "salt.payload", "logging", "salt.master", "tornado.iostream", "salt.utils.stringutils", "zmq", "salt.utils.msgpack", "time", "salt.utils.process", "pytestshellutils.utils.processes.terminate_process", "queue", "salt.exceptions", "salt.channel.server", "ctypes", "salt.crypt", "socket", "pytest"], "function_names": ["close", "_rotate_secrets", "__enter__", "_handle_signals", "run", "__exit__", "transport", "publish", "__init__", "_setup_listener", "_teardown_listener"], "function_calls": ["Collector", "super", "RecvError", "Exception", "list", "len", "print", "terminate_process", "hasattr"], "class_names": ["Collector", "PubServerChannelProcess", "RecvError"], "class_method_calls": ["tornado.ioloop", "self.publish", "self.interface", "multiprocessing.Event", "salt.master", "logging.getLogger", "self.manager", "self.unpacker", "self.end", "self._teardown_listener", "self._recv", "self.gotone", "multiprocessing.Manager", "socket.AF_INET", "hashlib.sha1", "self.hard_timeout", "self.zmq_filtering", "self.process_manager", "self.start", "self.transport", "salt.crypt", "self.aes_key", "self.pub_server_channel", "log.exception", "ctypes.c_longlong", "log.info", "self.stop_running", "salt.payload", "tornado.iostream", "zmq.LINGER", "time.sleep", "multiprocessing.Value", "self.ctx", "pytest.fail", "ctypes.c_char", "self._rotate_secrets", "queue.Empty", "time.time", "zmq.SUBSCRIBE", "crypticle.loads", "self._setup_listener", "socket.socket", "self.minion_config", "ioloop.run_sync", "self.name", "log.error", "multiprocessing.Queue", "zmq.NOBLOCK", "self.collector", "zmq.Context", "log.trace", "self._closing", "sock.connect", "self.sock", "self.stopped", "self.pub_uri", "socket.SOCK_STREAM", "salt.exceptions", "multiprocessing.Array", "zmq.SUB", "self._run", "salt.channel", "self.port", "loop.start", "log.debug", "self.timeout", "self.collector_kwargs", "self.queue", "self.started", "self.hexid", "self.results", "zmq.ZMQError", "self.join", "salt.utils", "loop.add_callback", "self.running", "loop.stop", "self.master_config", "self.close", "self.terminate"]}, "sminion.py": {"libraries": ["fnmatch", "sys", "os", "salt.utils.stringutils", "salt.minion", "hashlib", "tests.support.runtests.RUNTIME_VARS", "logging", "salt.utils.path", "shutil"], "function_names": ["create_sminion", "check_required_sminion_attributes", "build_minion_opts"], "function_calls": ["setattr", "list", "sminion_cls", "getattr", "create_sminion", "build_minion_opts", "set", "hasattr"], "class_names": [], "class_method_calls": ["not_available_items.add", "RUNTIME_VARS.RUNNING_TESTS_USER", "hashed_minion_id.update", "hashed_minion_id.hexdigest", "RUNTIME_VARS.TMP_PILLAR_TREE", "log.info", "os.path", "shutil.copytree", "item.startswith", "create_sminion.__cached_minions__", "logging.getLogger", "required_salt_items.remove", "cached_not_available_items.add", "initial_conf_file.startswith", "os.pathsep", "RUNTIME_VARS.TMP_ROOT_DIR", "RUNTIME_VARS.TMP_PRODENV_STATE_TREE", "hashlib.sha1", "RUNTIME_VARS.TMP_STATE_TREE", "os.makedirs", "sys.base_prefix", "RUNTIME_VARS.TMP", "fnmatch.filter", "salt.minion", "virtualenv_binary.startswith", "salt.utils", "path_items.remove", "build_minion_opts.__cached_opts__", "sys.real_prefix", "minion_opts.update", "os.environ", "sminion_cls.__name__", "path.split", "salt.config", "opts_cache.get", "RUNTIME_VARS.FILES"]}, "unit.py": {"libraries": ["sys", "unittest.case.SkipTest", "os", "unittest.TestLoader", "unittest.expectedFailure", "unittest.skipIf", "psutil", "unittest.TestResult", "types", "unittest.case._id", "unittest.TestCase", "unittest.TextTestResult", "inspect", "logging", "unittest.skip", "unittest.TextTestRunner", "unittest.TestSuite"], "function_names": ["stopTest", "run", "startTest", "_tearDownPreviousClass", "_handleClassSetUp", "repack_state_returns", "_handleModuleFixture", "shortDescription"], "function_calls": ["super", "issubclass", "setattr", "delattr", "str", "dir", "getattr", "isinstance", "hasattr"], "class_names": ["TestCase", "TextTestRunner", "TestSuite", "TestLoader", "TextTestResult"], "class_method_calls": ["previousClass.__name__", "name.startswith", "log.debug", "klass.__unittest_skip__", "psutil.process_iter", "types.FunctionType", "psutil.STATUS_ZOMBIE", "self.maxDiff", "log.warning", "logging.getLogger", "_TestCase.shortDescription", "test.id", "self._prerun_instance_attributes", "sys.modules", "x.split", "proc.status", "klass.__module__", "previousClass._prerun_class_attributes", "inspect.isclass", "psutil.virtual_memory", "os.environ", "self.__class__", "test.__class__", "state_ret.items", "psutil.cpu_percent"]}, "win_installer.py": {"libraries": ["hashlib", "requests"], "function_names": ["url", "latest_installer_name", "download_and_verify"], "function_calls": ["url", "Exception"], "class_names": [], "class_method_calls": ["fp.write", "resp.iter_content", "resp.text", "requests.get", "resp.status_code", "hashlib.md5", "md5hsh.update", "md5hsh.hexdigest"]}, "xmlunit.py": {"libraries": ["xmlrunner.runner", "xmlrunner.result", "io", "logging"], "function_names": ["flush", "stopTest", "run", "startTest", "write", "_make_result", "writable", "__init__", "writelines", "fileno"], "function_calls": ["len", "isinstance", "super", "_XMLTestResult"], "class_names": ["XMLTestRunner", "_DuplicateWriter", "_XMLTestResult"], "class_method_calls": ["logging.getLogger", "self._first", "self.descriptions", "log.debug", "self.verbosity", "test.id", "self.stream", "self.elapsed_times", "io.TextIOBase", "xmlrunner.runner", "xmlrunner.result", "self._second"]}, "test_ipaddress.py": {"libraries": ["sys", "salt._compat.ipaddress", "pickle", "tests.support.unit.TestCase", "functools", "weakref", "re", "operator", "contextlib", "pytest", "tests.support.unit.skipIf"], "function_names": ["assertNetmaskError", "test_ip_network", "test_split_netmask", "testCompressIPv6Address", "test_pickle", "test_subnet_of_mixed_types", "setUp", "test_bad_v4_part_in", "test_subnet_of", "test_same_type_ordering", "test_valid_netmask", "testNetworkComparison", "testTeredo", "assertBadSplit", "testPacked", "testSubnetFailsForNegativeCidrDiff", "testInterfaceComparison", "testGetNetmask", "testGetSupernet", "testGetIp", "testIPv4Net", "testGetSupernet4", "testWithStar", "test_mixed_type_equality", "assertBadOctet", "testIPv6NetworkHelpers", "test_weakref", "testIPv6Tuple", "__eq__", "test_bad_address_split_v6_too_many_parts_with_double_colon", "testIpFromPacked", "assertBadAddressPart", "testZeroNetmask", "test_network_passed_as_address", "testSubnetFailsForLargeCidrDiff", "testGetNetwork", "testAddrExclude", "testHosts", "test_netmask_in_tuple_errors", "test_no_mask", "__lt__", "test_scoped_ipv6_equality", "test_large_ints_rejected", "test_octet_length", "testInvalidIntToBytes", "testsixtofour", "assertFactoryError", "testCopyConstructor", "testGetitem", "test_supernet_of", "factory", "testReservedIpv6", "test_bad_packed_length", "test_netmask_errors", "test_foreign_type_equality", "testSlash32Constructor", "test_int", "test_leading_zeros", "testGetScopeId", "testExplodeShortHandIpStr", "testContains", "test_bad_address_split_v6_too_many_parts", "test_format", "test_mixed_type_key", "test_same_type_equality", "testGetSubnetForSingle128", "test_invalid_characters", "assertCleanError", "test_not_an_index_issue15559", "testIpv4Mapped", "testGetBroadcast", "testSubnet2", "testSlash0Constructor", "testIPBases", "pickle_test", "test_bad_address_split", "test_negative_ints_rejected", "testEmbeddedIpv4", "test_empty_address", "test_octet_limit", "test_blank_scope_id", "test_mixed_type_ordering", "assertBadNetmask", "test_ip_address", "assertAddressError", "testNth", "test_bad_address_split_v6_leading_colon", "test_bad_address_split_v6_trailing_colon", "testInternals", "test_bad_address_split_v6_repeated_double_colon", "testGetSubnets3", "test_v4_with_v6_scoped_equality", "testNotEqual", "testOverlaps", "testSummarizing", "assertBadAddress", "testFancySubnetting", "version", "testV4HashIsNotConstant", "testMaxPrefixLength", "test_foreign_type_ordering", "testIPVersion", "assertBadLength", "testGetSubnets", "test_incompatible_versions", "testGetSubnetForSingle32", "testSupernetFailsForLargeCidrDiff", "test_ip_interface", "assertBadPart", "test_bad_address_split_v6_not_enough_parts", "testNetworkElementCaching", "testIpType", "testIPv4NetworkHelpers", "testHash", "testRepr", "testIntRepresentation", "test_containment", "test_floats_rejected", "test_part_length", "test_address_errors", "test_empty_octet", "test_bad_address_split_v6_too_many_colons", "test_invalid_scope_id_with_percent", "testGetSupernet3", "testReversePointer", "testIpFromInt", "testIPv4Tuple", "testGetPrefixlen", "testV6HashIsNotConstant", "testIPv6AddressTooLarge", "testForceVersion", "testEqual", "testAddressIntMath", "testGetNum_Addresses", "__gt__", "testCollapsing", "testSlash128Constructor", "testReservedIpv4", "test_packed", "assertInstancesEqual", "testStrictNetworks", "testAddressComparison"], "function_calls": ["type", "range", "assertBadPart", "assertBadAddressPart", "list", "int", "address", "_LARGEST", "summarize", "assertBadNetmask", "str", "sorted", "IPv7Address", "assertBadSplit", "isinstance", "factory", "repr", "assertBadAddress", "object", "skipIf", "format", "assertBadOctet", "hash", "assertBadLength", "zip", "len", "_SMALLEST"], "class_names": ["ComparisonTests", "AddressTestCase_v4", "BaseTestCase", "CommonTestMixin_v6", "NetworkTestCase_v6", "IpaddrUnitTest", "NetmaskTestMixin_v4", "AddressTestCase_v6", "InterfaceTestCase_v4", "InterfaceTestCase_v6", "IPv7Address", "CommonTestMixin_v4", "CommonTestMixin", "NetworkTestCase_v4", "_LARGEST", "FactoryFunctionErrors", "NetmaskTestMixin_v6", "_SMALLEST"], "class_method_calls": ["ipv4.ip", "test_addresses.items", "self.ipv6_network", "ipaddress.IPV4LENGTH", "ip2.compare_networks", "net.compressed", "self.v6intf", "self.assertIn", "net.hostmask", "obj.__eq__", "self.ipv4_network", "ipv4.network_address", "v6addr.__lt__", "self.assertNotEqual", "ipaddress._count_righthand_zero_bits", "self.assertLess", "self.assertFalse", "self.assertCleanError", "v4mapped_ipv6.ip", "net.with_prefixlen", "v4net.__lt__", "v6net.__lt__", "self.v4addr2", "self.v4net", "ipaddress.get_mixed_type_key", "addr2.exploded", "addr4.exploded", "self.subTest", "ipv6.__gt__", "addr2.reverse_pointer", "ipv6.network_address", "ipaddress.IPv6Network", "self.ipv4_interface", "self.pickle_test", "self.ipv6_interface", "self.assertNotIn", "ipv6_zero_netmask._prefix_from_prefix_string", "re.escape", "self.assertFactoryError", "sys.version_info", "self.v6_objects", "v4net.__gt__", "net.with_netmask", "self.v4_objects", "self.v6addr_scoped", "ipaddress.v6_int_to_packed", "ipaddress.collapse_addresses", "ip1._get_networks_key", "ipaddress.IPv4Address", "self.ipv4_address", "addr1.address_exclude", "addr.split", "ipv6_scoped_zero_netmask.network", "self.assertEqual", "ipv4_address2.__hash__", "addr.prefixlen", "pickle.loads", "ipv6_network.hosts", "self.objects_with_scoped", "pytest.mark", "ipaddress.v4_int_to_packed", "self.v4intf2", "net.netmask", "self.v6net2", "self.v6intf_scoped", "self.assertGreater", "contextlib.contextmanager", "self.ipv6_scoped_address", "net._string_from_ip_int", "self.v4intf", "ip.subnets", "self.v6net_scoped", "self.factory", "ipaddress.IPv6Address", "ipaddress.IPv4Interface", "bytes.fromhex", "ipv6_address2.__hash__", "self.v6_scoped_objects", "ipaddress.IPv6Interface", "scoped_net.netmask", "ip3._get_networks_key", "self.objects", "self.assertRaises", "self.v6intf2", "ip3.compare_networks", "self.v6net", "pickle.HIGHEST_PROTOCOL", "self.v4net2", "ipaddress.IPV6LENGTH", "ip1.__lt__", "v6net.__gt__", "v6net_scoped.__gt__", "ipaddress.NetmaskValueError", "pickle.dumps", "ipaddress.IPv4Network", "v4addr.__gt__", "self.ipv6_scoped_network", "v4addr.__lt__", "teredo_addr.teredo", "self.assertIs", "self.assertRaisesRegex", "ipv6_scoped.network_address", "self.v6_addresses", "self.assertLessEqual", "ipaddress._find_address_range", "self.v4addr", "self.assertGreaterEqual", "self.assertNetmaskError", "ipv6_zero_netmask.network", "ipv4.__gt__", "ipv6_scoped_network.hosts", "addr1.exploded", "self.v6intf2_scoped", "ip2.__lt__", "self.v4_addresses", "v6addr.__gt__", "v6net_scoped.__lt__", "unsorted.sort", "v6addr_scoped.__gt__", "self.v6addr2", "weakref.ref", "bad_addr.sixtofour", "ipaddress.ip_interface", "self.v6addr2_scoped", "operator.index", "self.ipv6_scoped_interface", "functools.total_ordering", "ip_scoped.subnets", "ipv6_scoped_zero_netmask._prefix_from_prefix_string", "obj.__ne__", "ipv4.__lt__", "ipv4_zero_netmask._prefix_from_prefix_string", "addr3.exploded", "sixtofouraddr.sixtofour", "ipv6_network.subnets", "self.assertInstancesEqual", "self.assertAddressError", "net.prefixlen", "ip1.compare_networks", "v6addr_scoped.__lt__", "ipaddress.AddressValueError", "ipv6.__lt__", "self.ipv6_address", "net.with_hostmask", "ipaddress.ip_network", "other2.overlaps", "v4compat_ipv6.ip", "self.v6addr", "ipv4_address1.__hash__", "scoped_net.hostmask", "ipaddress.summarize_address_range", "ipv4_zero_netmask.network", "exc.exception", "ipaddress.ip_address", "self.v6_scoped_addresses", "addr1.reverse_pointer", "ipv6_address1.__hash__", "self.assertTrue", "self.v6net2_scoped"]}, "test_collector.py": {"libraries": ["os", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "tests.support.helpers.no_symlinks", "pytest", "salt.modules.inspectlib.collector.Inspector", "tests.support.mock.patch"], "function_names": ["test_get_unmanaged_files", "test_pkg_get", "test_file_tree", "setUp", "test_env_loader"], "function_calls": ["no_symlinks", "MagicMock", "patch", "tuple", "Inspector"], "class_names": ["InspectorCollectorTestCase"], "class_method_calls": ["os.sep", "self.assertEqual", "patcher.stop", "patcher.start", "inspector.grains_core", "pytest.mark", "inspector.pidfile", "pth.replace", "inspector._get_cfg_pkgs", "buff.append", "os.path", "self.addCleanup", "inspector._get_all_files", "inspector._get_unmanaged_files", "patch.object", "tree_result.append", "inspector.dbfile"]}, "test_fsdb.py": {"libraries": ["salt.modules.inspectlib.entities.CsvDBEntity", "salt.utils.odict.OrderedDict", "salt.modules.inspectlib.fsdb.CsvDB", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "io", "tests.support.mock.patch"], "function_names": ["test_get_obj_matching", "__enter__", "test_get_obj_less_than", "test_list_databases", "test_open", "test_close", "setUp", "test_get_object", "mock_open", "test_get_obj_equals", "test_delete_object", "__exit__", "test_obj_validation", "write", "test_create_table", "test_criteria", "store", "test_add_object", "test_get_obj_more_than", "test_update_object", "test_obj_serialization", "__init__"], "function_calls": ["MagicMock", "InterceptedCsvDB", "type", "cmp", "iter", "patch", "Writable", "list", "tuple", "FoobarEntity", "len", "CsvDB", "OrderedDict", "sorted", "mock_open"], "class_names": ["FoobarEntity", "Writable", "InspectorFSDBTestCase", "InterceptedCsvDB"], "class_method_calls": ["obj.foo", "gzip_mock_open.call_args_list", "csvdb.list", "csvdb.delete", "patcher.stop", "self.foo", "csvdb._tables", "obj._serialize", "csvdb.create_table_from_object", "obj.spam", "csvdb.close", "csvdb.update", "self.bar", "self.assertEqual", "io.StringIO", "io.FileIO", "csvdb.list_tables", "writable.data", "mock.return_value", "obj.bar", "handle.__enter__", "csvdb.open", "csvdb._validate_object", "self._remained", "patcher.start", "CsvDB.__init__", "self.addCleanup", "csvdb.get", "obj.pi", "self.data", "elm.split", "csvdb.is_closed", "csvdb.store", "csvdb.flush", "handle.write", "self.spam", "csvdb._remained"]}, "nxos_config.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "nxos_grains.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "nxos_n36k.py": {"libraries": ["tests.unit.modules.nxos.nxos_platform.NXOSPlatform"], "function_names": [], "function_calls": [], "class_names": ["N36KPlatform"], "class_method_calls": []}, "nxos_n3k.py": {"libraries": ["tests.unit.modules.nxos.nxos_platform.NXOSPlatform"], "function_names": [], "function_calls": [], "class_names": ["N3KPlatform"], "class_method_calls": []}, "nxos_n5k.py": {"libraries": ["tests.unit.modules.nxos.nxos_platform.NXOSPlatform"], "function_names": [], "function_calls": [], "class_names": ["N5KPlatform"], "class_method_calls": []}, "nxos_n7k.py": {"libraries": ["tests.unit.modules.nxos.nxos_platform.NXOSPlatform"], "function_names": [], "function_calls": [], "class_names": ["N7KPlatform"], "class_method_calls": []}, "nxos_n93k.py": {"libraries": ["tests.unit.modules.nxos.nxos_platform.NXOSPlatform"], "function_names": [], "function_calls": [], "class_names": ["N93KPlatform"], "class_method_calls": []}, "nxos_n93klxc.py": {"libraries": ["tests.unit.modules.nxos.nxos_platform.NXOSPlatform"], "function_names": [], "function_calls": [], "class_names": ["N93KLXCPlatform"], "class_method_calls": []}, "nxos_n95k.py": {"libraries": ["tests.unit.modules.nxos.nxos_platform.NXOSPlatform"], "function_names": [], "function_calls": [], "class_names": ["N95KPlatform"], "class_method_calls": []}, "nxos_platform.py": {"libraries": ["string.Template", "re"], "function_names": ["__init__", "templatize", "version_from_image"], "function_calls": ["Template"], "class_names": ["NXOSPlatform"], "class_method_calls": ["self.ckimage", "self.ckversion", "self.install_all_non_disruptive_success", "re.search", "self.cimage", "match_object.group", "self.nversion", "self.cversion", "self.show_install_all_impact", "self.show_install_all_impact_non_disruptive", "self.version_from_image", "self.upgrade_required", "kwargs.get", "self.nimage", "self.nkversion", "self.nkimage", "match_object.groups", "self.install_all_disruptive_success", "self.templatize", "self.show_install_all_impact_no_module_data"]}, "nxos_show_cmd_output.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "nxos_show_run.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "test_boto3_elasticsearch.py": {"libraries": ["string", "boto3", "salt.modules.boto3_elasticsearch", "random", "salt.utils.versions.Version", "botocore.exceptions.ClientError", "textwrap", "salt.loader", "tests.support.unit.TestCase", "datetime", "tests.support.mock.MagicMock", "pytest", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_describe_elasticsearch_domains_error", "test_get_upgrade_status_error", "test_list_domain_names_positive", "test_create_elasticsearch_domain_positive", "test_add_tags_error", "test_update_domain_error", "test_get_upgrade_history_positive", "test_upgrade_elasticsearch_domain_positive", "test_update_domain_positive", "test_describe_reserved_elasticsearch_instance_offerings_positive", "test_upgrade_elasticsearch_domain_error", "test_get_upgrade_history_error", "test_describe_elasticsearch_instance_type_limits_error", "test_remove_tag_error", "test_list_elasticsearch_instance_types_error", "setup_loader_modules", "setUp", "test_list_domain_names_error", "test_list_elasticsearch_versions_positive", "test_describe_elasticsearch_domain_positive", "test_get_compatible_elasticsearch_versions_error", "test_list_tags_error", "test_get_compatible_elasticsearch_versions_positive", "test_purchase_reserved_elasticsearch_instance_offering_error", "test_create_elasticsearch_domain_error", "test_start_elasticsearch_service_software_update_error", "test_describe_elasticsearch_domains_positive", "test_describe_elasticsearch_domain_config_error", "test_add_tags_default", "test_add_tags_positive", "test_cancel_elasticsearch_service_software_update_error", "test_describe_reserved_elasticsearch_instances_error", "test_get_upgrade_status_positive", "test_list_tags_positive", "test_describe_elasticsearch_domain_config_positive", "__virtual__", "test_delete_elasticsearch_service_role_positive", "test_cancel_elasticsearch_service_software_update_positive", "test_describe_reserved_elasticsearch_instances_positive", "test_delete_elasticsearch_service_role_error", "test_describe_reserved_elasticsearch_instance_offerings_error", "test_start_elasticsearch_service_software_update_positive", "test_describe_elasticsearch_domain_error", "test_delete_domain_error", "test_purchase_reserved_elasticsearch_instance_offering_positive", "test_describe_elasticsearch_instance_type_limits_positive", "test_delete_domain_positive", "test_list_elasticsearch_instance_types_positive", "test_remove_tags_positive", "test_list_elasticsearch_versions_error"], "function_calls": ["Version", "MagicMock", "super", "range", "patch", "ClientError"], "class_names": ["Boto3ElasticsearchTestCase"], "class_method_calls": ["boto3_elasticsearch.list_elasticsearch_versions", "boto3_elasticsearch.purchase_reserved_elasticsearch_instance_offering", "random.choice", "boto3_elasticsearch.update_elasticsearch_domain_config", "self.patcher", "boto3_elasticsearch.delete_elasticsearch_domain", "result.get", "boto3_elasticsearch.list_elasticsearch_instance_types", "self.paginator", "patch.object", "boto3_elasticsearch.cancel_elasticsearch_service_software_update", "ERROR_MESSAGE.format", "boto3_elasticsearch.list_domain_names", "self.assertEqual", "boto3_elasticsearch.get_upgrade_status", "pytest.mark", "mock_session.return_value", "self.assertFalse", "boto3.__version__", "self.conn", "boto3_elasticsearch.list_tags", "string.ascii_lowercase", "self.opts", "boto3_elasticsearch.describe_elasticsearch_instance_type_limits", "boto3_elasticsearch.get_compatible_elasticsearch_versions", "boto3_elasticsearch.upgrade_elasticsearch_domain", "salt.loader", "textwrap.dedent", "boto3_elasticsearch.describe_elasticsearch_domain_config", "boto3_elasticsearch.create_elasticsearch_domain", "boto3_elasticsearch.__init__", "self.addCleanup", "boto3_elasticsearch.remove_tags", "boto3_elasticsearch.start_elasticsearch_service_software_update", "kwargs.update", "boto3_elasticsearch.describe_elasticsearch_domains", "boto3_elasticsearch.get_upgrade_history", "datetime.datetime", "session_instance.configure_mock", "boto3_elasticsearch.describe_reserved_elasticsearch_instances", "boto3_elasticsearch.add_tags", "boto3_elasticsearch.delete_elasticsearch_service_role", "string.digits", "salt.config", "boto3_elasticsearch.describe_elasticsearch_domain", "boto3_elasticsearch.describe_reserved_elasticsearch_instance_offerings"]}, "test_boto3_route53.py": {"libraries": ["string", "boto3", "random", "salt.utils.versions.Version", "salt.loader", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "pytest", "tests.support.mixins.LoaderModuleMockMixin", "salt.modules.boto3_route53", "tests.support.mock.patch"], "function_names": ["test_get_resource_records", "setup_loader_modules", "setUp", "__virtual__"], "function_calls": ["Version", "MagicMock", "super", "range", "patch"], "class_names": ["Boto3Route53TestCase"], "class_method_calls": ["string.ascii_lowercase", "session_instance.configure_mock", "self.assertEqual", "self.opts", "patch.object", "random.choice", "boto3_route53.get_resource_records", "salt.loader", "string.digits", "pytest.mark", "self.patcher", "mock_session.return_value", "salt.config", "boto3_route53.__init__", "self.addCleanup", "self.paginator", "boto3.__version__", "self.conn"]}, "test_boto_apigateway.py": {"libraries": ["string", "salt.utils.files", "datetime", "logging", "botocore.exceptions.ClientError", "boto3", "tests.support.unit.TestCase", "tests.support.mock.patch", "os", "salt.loader", "tests.support.mock.MagicMock", "salt.states.boto_apigateway", "tests.unit.modules.test_boto_apigateway.BotoApiGatewayTestCaseMixin", "random", "salt.utils.versions.Version", "salt.config", "botocore", "pytest", "tests.support.mixins.LoaderModuleMockMixin", "salt.utils.yaml"], "function_names": ["test_usage_plan_present_if_there_is_no_such_plan_and_test_option_is_set", "__enter__", "test_absent_when_stage_is_valid_and_only_one_stage_is_associated_to_deployment", "test_usage_plan_association_absent_if_detaching_association_fails", "test_usage_plan_association_absent_if_describe_fails", "test_usage_plan_present_if_plan_is_there_and_needs_updates_but_update_fails", "test_present_when_stage_is_to_associate_to_new_deployment", "test_absent_when_rest_api_does_not_exist", "_has_required_boto", "test_usage_plan_absent_if_IOError_is_raised", "test_present_when_stage_associating_to_new_deployment_errored_on_put_method", "setup_loader_modules", "setUp", "test_absent_when_nuke_api_and_no_more_stages_deployments_remain", "test_usage_plan_present_if_ValueError_is_raised", "test_usage_plan_absent_if_describe_fails", "test_usage_plan_association_present_if_plan_is_not_present", "test_usage_plan_present_if_plan_has_been_updated", "test_usage_plan_association_absent_success", "test_present_when_stage_associating_to_new_deployment_errored_on_resource_creation", "__exit__", "test_present_when_stage_associating_to_new_deployment_errored_on_lambda_function_lookup", "test_usage_plan_present_if_describe_fails", "test_absent_when_stage_is_invalid", "test_present_when_stage_associating_to_new_deployment_errored_on_model_creation", "test_usage_plan_association_absent_if_ValueError_is_raised", "test_absent_when_nuke_api_and_other_stages_deployments_exist", "test_present_when_swagger_file_is_invalid", "test_usage_plan_absent_if_plan_has_been_deleted", "tearDownClass", "test_usage_plan_association_present_if_io_error_is_thrown", "test_absent_when_failing_to_delete_a_deployment_no_longer_associated_with_any_stages", "test_present_when_stage_associating_to_new_deployment_errored_on_put_integration", "test_present_when_stage_is_already_at_desired_deployment_and_needs_stage_variables_update", "test_usage_plan_association_absent_if_plan_is_not_present", "test_present_when_stage_associating_to_new_deployment_errored_on_put_integration_response", "test_usage_plan_association_present_success", "test_usage_plan_present_if_IOError_is_raised", "test_absent_when_stage_is_valid_and_two_stages_are_associated_to_deployment", "test_present_when_stage_exists_and_is_to_associate_to_existing_deployment", "test_usage_plan_present_if_plan_is_there_and_needs_updates_but_test_is_set", "test_usage_plan_present_if_plan_has_been_created", "test_present_when_stage_associating_to_new_deployment_errored_on_api_creation", "test_usage_plan_absent_if_plan_is_not_present", "test_usage_plan_association_present_if_describe_fails", "test_usage_plan_association_present_if_value_error_is_thrown", "test_usage_plan_association_absent_if_plan_has_no_associations", "test_usage_plan_absent_if_plan_is_present_but_delete_fails", "test_usage_plan_association_absent_if_multiple_plans_with_the_same_name_exist", "test_present_when_stage_associating_to_new_deployment_errored_on_put_method_response", "test_usage_plan_present_if_create_usage_plan_fails", "test_usage_plan_association_present_if_multiple_plans_with_the_same_name_exist", "test_usage_plan_absent_if_ValueError_is_raised", "test_usage_plan_association_absent_if_plan_has_no_specific_association", "__init__", "test_usage_plan_association_absent_if_IOError_is_raised", "_has_required_botocore", "test_present_when_stage_is_already_at_desired_deployment", "setUpClass", "test_usage_plan_association_present_if_association_already_exists", "test_usage_plan_absent_if_plan_is_present_but_test_option_is_set", "test_usage_plan_present_if_plan_is_there_and_needs_no_updates", "test_usage_plan_association_present_if_update_fails"], "function_calls": ["Version", "MagicMock", "range", "repr", "TempSwaggerFile", "patch", "IOError", "dict", "ClientError", "_has_required_botocore", "_has_required_boto", "ValueError"], "class_names": ["BotoApiGatewayUsagePlanAssociationTestCase", "BotoApiGatewayTestCase", "BotoApiGatewayUsagePlanTestCase", "TempSwaggerFile", "BotoApiGatewayStateTestCaseBase"], "class_method_calls": ["random.choice", "patcher.stop", "boto_apigateway.__salt__", "result.get", "boto_apigateway.usage_plan_association_present", "self.salt_states", "self.assertIn", "logging.getLogger", "self.assertIs", "self.assertEqual", "pytest.mark", "mock_session.return_value", "self.assertFalse", "botocore.__version__", "boto_apigateway.usage_plan_association_absent", "boto3.__version__", "self.conn", "self.assertIsNot", "string.ascii_lowercase", "self.opts", "self.funcs", "patcher.start", "salt.loader", "self.swaggerfile", "boto_apigateway.usage_plan_present", "salt.utils", "self.addCleanup", "patch.dict", "boto_apigateway.usage_plan_absent", "datetime.datetime", "TempSwaggerFile._tmp_swagger_dict", "string.digits", "self.assertNotIn", "boto_apigateway.__opts__", "session_instance.client", "os.remove", "self.assertTrue", "self.swaggerdict", "salt.config", "cls.opts"]}, "test_boto_cognitoidentity.py": {"libraries": ["string", "tests.unit.modules.test_boto_cognitoidentity.BotoCognitoIdentityTestCaseMixin", "boto3", "random", "salt.utils.versions.Version", "botocore.exceptions.ClientError", "salt.loader", "tests.support.unit.TestCase", "salt.config", "tests.support.mock.MagicMock", "pytest", "logging", "tests.support.mixins.LoaderModuleMockMixin", "salt.states.boto_cognitoidentity", "tests.support.mock.patch"], "function_names": ["test_absent_when_removeallmatched_is_false_and_multiple_pools_matched", "_has_required_boto", "setup_loader_modules", "test_present_when_failing_to_create_a_new_identity_pool", "setUp", "tearDownClass", "test_absent_when_a_single_pool_exists", "test_present_when_failing_to_set_identity_pool_roles", "_get_identity_pool_roles_side_effect", "test_present_when_failing_to_update_an_existing_identity_pool", "test_absent_when_failing_to_describe_identity_pools", "_describe_identity_pool_side_effect", "test_absent_when_erroring_on_delete_identity_pool", "test_present_when_multiple_pools_with_same_name_exist", "test_absent_when_pool_does_not_exist", "test_present_when_failing_to_describe_identity_pools", "test_absent_when_multiple_pool_exists_and_removeallmatched_flag_is_true", "test_present_when_pool_name_does_not_exist", "test_present_when_pool_name_exists", "test_present_when_failing_to_get_identity_pool_roles", "setUpClass"], "function_calls": ["Version", "MagicMock", "range", "patch", "dict", "ClientError", "_has_required_boto"], "class_names": ["BotoCognitoIdentityTestCase", "BotoCognitoIdentityStateTestCaseBase"], "class_method_calls": ["random.choice", "self.patcher", "result.get", "self.salt_states", "self.assertIn", "logging.getLogger", "self.assertEqual", "pytest.mark", "mock_session.return_value", "kwargs.get", "boto3.__version__", "self.conn", "string.ascii_lowercase", "self.opts", "self.funcs", "salt.loader", "self.addCleanup", "patch.dict", "self._describe_identity_pool_side_effect", "string.digits", "session_instance.client", "self.assertTrue", "salt.config", "cls.opts"]}, "test_boto_vpc.py": {"libraries": ["sys", "string", "boto3", "random", "salt.utils.versions.Version", "moto.mock_ec2_deprecated", "tests.unit.modules.test_boto_vpc.BotoVpcTestCaseMixin", "boto.exception.BotoServerError", "tests.support.unit.TestCase", "tests.support.runtests.RUNTIME_VARS", "salt.config", "salt.utils.botomod", "pytest", "os.path", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch", "salt.states.boto_vpc", "boto"], "function_names": ["test_present_when_vpc_does_not_exist", "test_absent_when_vpc_exists", "_has_required_boto", "setup_loader_modules", "setUp", "test_absent_when_vpc_does_not_exist", "tearDownClass", "_create_resource", "test_present_with_subnets", "test_absent_when_resource_does_not_exist", "test_absent_with_failure", "test_present_when_resource_exists", "test_present_with_failure", "test_present_when_resource_does_not_exist", "test_present_with_routes", "test_present_when_vpc_exists", "stub_function", "test_absent_when_resource_exists", "setUpClass", "mock_ec2_deprecated"], "function_calls": ["Version", "_create", "range", "patch", "getattr", "_has_required_boto", "set", "BotoServerError"], "class_names": ["BotoVpcTestCase", "BotoVpcInternetGatewayTestCase", "BotoVpcSubnetsTestCase", "BotoVpcStateTestCaseBase", "BotoVpcRouteTableTestCase", "BotoVpcResourceTestCaseMixin"], "class_method_calls": ["self._create_vpc", "vpc.id", "self._create_internet_gateway", "random.choice", "self._create_resource", "botomod.__salt__", "os.path", "self.salt_states", "self.extra_kwargs", "self.assertEqual", "dhcp_options_parameters.update", "pytest.mark", "igw.id", "RUNTIME_VARS.TESTS_DIR", "self.assertFalse", "self.backend_delete", "string.ascii_lowercase", "self.opts", "self.funcs", "salt.loader", "boto.__version__", "self.backend_create", "self._create_subnet", "self.addCleanup", "patch.dict", "subnet2.id", "string.digits", "boto.ENDPOINTS_PATH", "self.assertTrue", "salt.config", "cls.opts", "subnet1.id", "sys.version_info", "self.resource_type"]}, "test_bsd_shadow.py": {"libraries": ["tests.support.unit.TestCase", "tests.support.mock.MagicMock", "re", "pytest", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_set_expire", "test_set_password", "test_info", "test_del_password", "test_set_change", "test_gen_password", "setup_loader_modules"], "function_calls": ["MagicMock"], "class_names": ["BSDShadowTest"], "class_method_calls": ["shadow.info", "self.assertEqual", "shadow.set_password", "shadow.set_expire", "shadow.__salt__", "pytest.mark", "self.assertTrue", "re.match", "patch.dict", "shadow.set_change", "shadow.del_password", "usermod_mock.assert_called_once_with", "shadow.gen_password", "pytest.importorskip"]}, "test_heat.py": {"libraries": ["os", "salt.states.heat", "salt.modules.file", "salt.modules.win_file", "salt.utils.platform", "tests.support.unit.TestCase", "tests.support.runtests.RUNTIME_VARS", "tests.support.mock.MagicMock", "tests.support.mixins.LoaderModuleMockMixin", "tests.unit.modules.test_heat", "tests.support.mock.patch", "salt.modules.heat"], "function_names": ["test_heat_deployed", "test_heat_deployed_environment_error", "test_heat_deployed_environment", "setup_loader_modules", "setUp"], "function_calls": ["patch", "MagicMock"], "class_names": ["HeatTestCase"], "class_method_calls": ["file_.get_managed", "RUNTIME_VARS.BASE_FILES", "file_.manage_file", "RUNTIME_VARS.TMP", "file_.check_perms", "tests.unit", "salt.modules", "self.patch_check", "heat.__salt__", "heat.deployed", "patch.dict", "salt.utils", "os.path", "win_file.check_perms"]}, "test_influxdb08mod.py": {"libraries": ["tests.support.unit.TestCase", "tests.support.mock.patch", "salt.modules.influxdb08mod", "tests.support.mock.MagicMock"], "function_names": ["test_user_exists", "test_user_remove", "test_db_exists", "test_retention_policy_get", "create_database", "test_db_list", "test_user_list", "delete_database", "get_list_users", "update_cluster_admin_password", "test_retention_policy_add", "update_database_user_password", "delete_cluster_admin", "test_query", "get_list_cluster_admins", "switch_database", "get_list_database", "test_db_remove", "test_db_create", "query", "delete_database_user", "test_user_chpass", "test_retention_policy_modify"], "function_calls": ["MagicMock", "MockInfluxDBClient"], "class_names": ["InfluxTestCase", "MockInfluxDBClient"], "class_method_calls": ["influx08.query", "influx08.user_remove", "client.alter_retention_policy", "patch.object", "influx08.user_chpass", "self.assertEqual", "self.assertListEqual", "influx08.retention_policy_get", "self.assertFalse", "influx08.db_exists", "client.create_retention_policy", "influx08.user_exists", "influx08.db_create", "influx08.retention_policy_alter", "client.get_list_retention_policies", "influx08.user_list", "influx08.db_list", "influx08.retention_policy_add", "self.assertTrue", "influx08.db_remove"]}, "test_jboss7_cli.py": {"libraries": ["salt.modules.jboss7_cli", "salt.exceptions.CommandExecutionError", "tests.support.unit.TestCase", "re", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_parse_nested_dictionary", "test_parse_flat_dictionary", "test_run_operation_no_code_error", "test_escaping_operation_with_backslashes_and_quotes", "test_all_datasource_properties", "test_controller_authentication", "setup_loader_modules", "test_multiline_strings_with_escaped_quotes", "test_handling_other_cmd_error", "command_response", "test_operation_execution", "test_datasource_complete_resource_description", "get_last_cli_command", "test_matches_cli_output", "test_handling_jboss_error", "test_numbers_without_quotes", "__get_cli_command", "test_controller_without_authentication", "test_handling_cmd_not_exists", "test_handling_double_backslash_in_return_values", "test_datasource_resource_one_attribute_description", "run_all", "test_parse_all_datatypes", "clear", "get_last_command", "test_run_operation_wflyctl_error", "test_not_matches_cli_output", "test_parse_string_after_dict", "__init__"], "function_calls": ["patch", "CmdMock", "str", "len"], "class_names": ["JBoss7CliTestCase", "CmdMock"], "class_method_calls": ["self.cmd", "re.DOTALL", "jboss7_cli._is_cli_output", "self.commands", "self.assertEqual", "self.assertFalse", "self.assertIsNone", "self.fail", "m.group", "self.cli_commands", "jboss7_cli._parse", "self.addCleanup", "self.default_response", "command_re.search", "re.compile", "self.jboss_config", "self.__get_cli_command", "self.command_response_func", "jboss7_cli.run_operation", "self.assertTrue", "jboss7_cli.run_command"]}, "test_k8s.py": {"libraries": ["base64", "time", "salt.utils.json", "salt.modules.k8s", "hashlib", "salt.utils.files", "tests.support.unit.TestCase", "pytest", "subprocess.Popen", "subprocess.PIPE"], "function_names": ["test_create_limit_range", "test_get_limit_ranges", "test_create_resource_quota", "test_get_namespaces", "test_delete_secret", "test_update_limit_range", "test_create_namespace", "test_get_decoded_secret", "test_get_resource_quotas", "test_get_one_limit_range", "test_update_secret", "test_get_one_namespace", "test_get_one_secret", "test_create_secret", "test_get_one_resource_quota", "test_update_resource_quota", "setUp", "test_get_secrets"], "function_calls": ["range", "str", "Popen", "len", "isinstance"], "class_names": ["TestK8SNamespace", "TestK8SResourceQuotas", "TestK8SLimitRange", "TestK8SSecrets"], "class_method_calls": ["f.write", "k8s.create_secret", "self.request", "k8s.get_resource_quotas", "hash.update", "self.assertEqual", "pytest.mark", "time.sleep", "res.get", "k8s.get_limit_ranges", "hashlib.sha1", "hash.hexdigest", "time.time", "salt.utils", "k8s.update_secret", "k8s.delete_secret", "base64.b64encode", "k8s.create_resource_quota", "kubectl_out.get", "base64.encodestring", "self.assertTrue", "k8s.get_secrets", "names.append", "proc.communicate", "k8s.create_limit_range", "k8s.create_namespace", "self.name", "k8s.get_namespaces"]}, "test_kernelpkg_linux_apt.py": {"libraries": ["salt.modules.kernelpkg_linux_apt", "salt.exceptions.CommandExecutionError", "tests.support.kernelpkg.KernelPkgTestCase", "tests.support.unit.TestCase", "re", "pytest", "tests.support.mock.MagicMock", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_list_installed_none", "test_remove_error", "test_list_installed", "test_remove_success", "setUpClass", "setup_loader_modules"], "function_calls": ["CommandExecutionError", "MagicMock"], "class_names": ["AptKernelPkgTestCase"], "class_method_calls": ["self.assertRaises", "self.LATEST", "self.assertListEqual", "cls.LATEST", "version.group", "kernelpkg._package_prefix", "cls.KERNEL_LIST", "pytest.mark", "self.PACKAGE_DICT", "self.KERNEL_LIST", "cls.PACKAGE_DICT", "re.match", "patch.dict", "patch.object", "self._kernelpkg", "self.assertIn"]}, "test_kernelpkg_linux_yum.py": {"libraries": ["salt.exceptions.CommandExecutionError", "tests.support.kernelpkg.KernelPkgTestCase", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "pytest", "tests.support.mixins.LoaderModuleMockMixin", "salt.modules.kernelpkg_linux_yum", "tests.support.mock.patch", "salt.modules.yumpkg"], "function_names": ["test_list_installed_none", "test_list_installed", "test_remove_success", "test_remove_error", "setup_loader_modules"], "function_calls": ["MagicMock"], "class_names": ["YumKernelPkgTestCase"], "class_method_calls": ["self.assertRaises", "self.assertListEqual", "self.OS_ARCH", "pkg.normalize_name", "pytest.mark", "self.KERNEL_LIST", "self.OS_NAME", "patch.dict", "self.OS_MAJORRELEASE", "patch.object", "self._kernelpkg", "self.assertIn"]}, "test_kubernetesmod.py": {"libraries": ["contextlib.contextmanager", "os", "salt.utils.files", "salt.utils.platform", "tests.support.unit.TestCase", "pytest", "tests.support.mixins.LoaderModuleMockMixin", "salt.modules.kubernetesmod", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["test_setup_kubeconfig_file", "setup_loader_modules", "test_enforce_only_strings_dict", "test_pods", "test_adding_change_cause_annotation", "settings", "test_delete_deployments", "test_services", "test_nodes", "test_setup_kubeconfig_data_overwrite", "test_node_labels", "test_create_deployments", "test_deployments", "mock_kubernetes_library"], "function_calls": ["Mock", "patch", "getattr", "func", "mock_kubernetes_library"], "class_names": ["KubernetesTestCase"], "class_method_calls": ["mock_kubernetes_lib.config", "kubernetes.node_labels", "os.path", "kubernetes.services", "self.assertEqual", "pytest.mark", "kubernetes.nodes", "data.namespace", "kubernetes._cleanup", "check_path.lower", "kubernetes.HAS_LIBS", "mock_node.return_value", "mock_kubernetes_lib.client", "kubernetes.delete_deployment", "kubernetes._setup_conn", "data.annotations", "salt.utils", "patch.dict", "kubernetes.create_deployment", "data.get", "self.settings", "kcfg.read", "kubernetes.deployments", "os.environ", "kubernetes.pods", "data.name", "kubernetes.__salt__", "self.assertTrue", "kubernetes.kubernetes"]}, "test_libcloud_compute.py": {"libraries": ["libcloud.compute.base.NodeLocation", "libcloud.compute.base.BaseDriver", "logging", "libcloud.compute.base.StorageVolume", "libcloud.compute.base.StorageVolumeState", "libcloud.compute.base.NodeState", "tests.support.unit.TestCase", "tests.support.mock.patch", "libcloud.compute.base.KeyPair", "libcloud", "libcloud.compute.base.NodeSize", "tests.support.mock.MagicMock", "salt.utils.versions.Version", "salt.modules.libcloud_compute", "libcloud.compute.base.VolumeSnapshot", "libcloud.compute.base.NodeImage", "pytest", "libcloud.compute.base.Node", "tests.support.mixins.LoaderModuleMockMixin"], "function_names": ["test_create_volume_snapshot_named", "test_delete_image", "test_get_key_pair", "test_import_key_string", "delete_image", "delete_key_pair", "test_destroy_volume", "test_list_images_in_location", "test_list_sizes", "test_create_volume", "get_image", "list_nodes", "test_delete_key_pair", "_validate_size", "create_volume", "create_image", "setup_loader_modules", "test_import_key_file", "create_volume_snapshot", "test_destroy_volume_snapshot", "list_images", "destroy_volume_snapshot", "test_create_volume_snapshot", "create_key_pair", "_validate_node", "copy_image", "test_copy_image", "test_list_nodes", "destroy_volume", "test_reboot_node_invalid", "test_list_locations", "test_destroy_node_invalid", "test_list_volumes", "test_create_volume_in_location", "test_get_image", "test_list_sizes_location", "detach_volume", "test_detatch_volume", "test_list_volume_snapshots", "test_attach_volume", "test_create_image", "test_destroy_node", "get_key_pair", "_validate_volume", "import_key_pair_from_string", "test_list_key_pairs", "_validate_key_pair", "list_sizes", "reboot_node", "_validate_image", "list_locations", "test_create_key_pair", "test_module_creation", "import_key_pair_from_file", "_validate_location", "destroy_node", "_validate_volume_snapshot", "list_volume_snapshots", "__init__", "attach_volume", "list_key_pairs", "test_list_images", "test_reboot_node", "list_volumes"], "function_calls": ["Version", "NodeSize", "MagicMock", "NodeImage", "patch", "Node", "NodeLocation", "ImportError", "MockComputeDriver", "len", "KeyPair", "hasattr", "VolumeSnapshot", "StorageVolume"], "class_names": ["LibcloudComputeModuleTestCase", "MockComputeDriver"], "class_method_calls": ["self._TEST_VOLUME", "self._TEST_SIZE", "libcloud_compute.destroy_node", "self.assertRaises", "self._validate_location", "NodeState.RUNNING", "libcloud_compute.HAS_LIBCLOUD", "libcloud_compute.list_key_pairs", "self._TEST_NODE", "libcloud_compute.list_volume_snapshots", "self._validate_node", "libcloud_compute.delete_image", "self._validate_volume", "self._validate_image", "StorageVolumeState.AVAILABLE", "logging.getLogger", "self._TEST_KEY_PAIR", "libcloud_compute.get_key_pair", "self.assertEqual", "libcloud_compute.delete_key_pair", "location.country", "pytest.mark", "self.assertFalse", "libcloud.__version__", "node_image.id", "volume.id", "libcloud_compute.reboot_node", "libcloud_compute.detach_volume", "libcloud_compute.get_image", "node.id", "snapshot.id", "libcloud_compute.destroy_volume_snapshot", "location.id", "libcloud_compute.import_key_pair", "key_pair.name", "self._validate_volume_snapshot", "libcloud_compute.destroy_volume", "libcloud_compute.create_volume_snapshot", "libcloud_compute.list_locations", "libcloud_compute.list_images", "self._validate_size", "libcloud_compute.create_key_pair", "self._TEST_IMAGE", "self._TEST_VOLUME_SNAPSHOT", "libcloud_compute.create_volume", "self._validate_key_pair", "libcloud_compute.list_sizes", "self._TEST_LOCATION", "libcloud_compute.attach_volume", "libcloud_compute._get_driver", "libcloud_compute.list_nodes", "logging.CRITICAL", "self.assertTrue", "libcloud_compute.create_image", "libcloud_compute.list_volumes", "libcloud_compute.copy_image"]}, "test_libcloud_loadbalancer.py": {"libraries": ["libcloud.loadbalancer.base.LoadBalancer", "libcloud.loadbalancer.base.Algorithm", "libcloud.loadbalancer.base.Member", "libcloud.loadbalancer.base.BaseDriver", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "pytest", "salt.modules.libcloud_loadbalancer", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_balancer_detach_member", "list_balancers", "get_balancer", "test_list_balancers", "setup_loader_modules", "test_destroy_balancer", "destroy_balancer", "test_list_balancer_members", "test_get_balancer", "test_get_balancer_by_name", "balancer_attach_member", "balancer_list_members", "get_mock_driver", "test_balancer_attach_member", "create_balancer", "test_create_balancer_custom_algorithm", "test_create_balancer", "test_module_creation", "_validate_balancer", "balancer_detach_member", "__init__", "list_protocols", "test_list_protocols", "_validate_member"], "function_calls": ["MagicMock", "LoadBalancer", "patch", "len", "MockLBDriver", "isinstance", "Member"], "class_names": ["MockLBDriver", "LibcloudLoadBalancerModuleTestCase"], "class_method_calls": ["libcloud_loadbalancer.get_balancer", "self._validate_balancer", "libcloud_loadbalancer.create_balancer", "libcloud_loadbalancer.list_balancer_members", "libcloud_loadbalancer._get_driver", "self._TEST_BALANCER", "libcloud_loadbalancer.list_balancers", "self.assertEqual", "libcloud_loadbalancer.balancer_attach_member", "pytest.mark", "libcloud_loadbalancer.get_balancer_by_name", "self.assertFalse", "libcloud_loadbalancer.list_protocols", "self._validate_member", "self._TEST_MEMBER", "libcloud_loadbalancer.HAS_LIBCLOUD", "member.id", "balancer.id", "self.assertTrue", "libcloud_loadbalancer.destroy_balancer", "libcloud_loadbalancer.balancer_detach_member"]}, "test_libcloud_storage.py": {"libraries": ["libcloud.storage.base.Object", "tests.support.unit.TestCase", "salt.modules.libcloud_storage", "libcloud.storage.base.BaseDriver", "tests.support.mock.MagicMock", "pytest", "libcloud.storage.base.Container", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["get_container_object", "test_module_creation", "test_list_containers", "test_list_container_objects", "get_mock_driver", "list_containers", "create_container", "test_get_container_object", "__init__", "get_container", "test_create_container", "setup_loader_modules", "list_container_objects", "test_get_container"], "function_calls": ["MagicMock", "patch", "Object", "MockStorageDriver", "len", "Container"], "class_names": ["MockStorageDriver", "LibcloudStorageModuleTestCase"], "class_method_calls": ["self.assertEqual", "self._TEST_OBJECT", "libcloud_storage.list_containers", "libcloud_storage.create_container", "pytest.mark", "libcloud_storage.get_container_object", "libcloud_storage.HAS_LIBCLOUD", "libcloud_storage.get_container", "self.assertFalse", "libcloud_storage._get_driver", "container.name", "libcloud_storage.list_container_objects", "self._TEST_CONTAINER"]}, "test_napalm_probes.py": {"libraries": ["salt.modules.napalm_probes", "tests.support.napalm", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_set_probes", "mock_net_load", "test_probes_results", "test_delete_probes", "tearDownClass", "test_schedule_probes", "setUpClass", "test_probes_config", "setup_loader_modules"], "function_calls": ["patch", "MagicMock", "ValueError"], "class_names": ["NapalmProbesModuleTestCase"], "class_method_calls": ["self._test_delete_probes", "napalm_test_support.TEST_TERM_CONFIG", "patcher.stop", "napalm_probes.schedule_probes", "cls._test_delete_probes", "self._test_schedule_probes", "napalm_test_support.join", "cls._test_probes", "napalm_probes.set_probes", "napalm_test_support.MockNapalmDevice", "self._test_probes", "napalm_probes.delete_probes", "napalm_test_support.TEST_PROBES_CONFIG", "patcher.start", "napalm_test_support.true", "self.addCleanup", "napalm_probes.results", "napalm_test_support.random_hash", "napalm_probes.config", "napalm_test_support.get_managed_file", "napalm_test_support.TEST_PROBES_RESULTS", "cls._test_schedule_probes"]}, "test_napalm_yang_mod.py": {"libraries": ["salt.modules.napalm_yang_mod", "tests.support.napalm", "salt.modules.napalm_network", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "salt.utils.immutabletypes.freeze", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_get_config", "diff", "test_compliance_report", "mock_net_load_config", "Root", "__init__", "test_parse", "tearDownClass", "setUpClass", "test_diff", "setup_loader_modules", "test_diff_list", "test_load_config"], "function_calls": ["freeze", "MagicMock", "MockNapalmYangModels", "patch", "MockUtils", "MockNapalmYangModel", "MockNapalmYangModule"], "class_names": ["MockNapalmYangModels", "NapalmYangModModuleTestCase", "MockUtils", "MockNapalmYangModel", "MockNapalmYangModule"], "class_method_calls": ["napalm_yang_mod.load_config", "cls._test_diff", "patcher.stop", "napalm_network.load_template", "napalm_yang_mod.compliance_report", "napalm_test_support.join", "self.base", "self._test_config", "self.models", "cls._test_config", "self.test_diff", "napalm_test_support.MockNapalmDevice", "patcher.start", "napalm_test_support.true", "napalm_yang_mod.parse", "self.utils", "napalm_yang_mod.diff", "self.addCleanup", "self._test_diff", "napalm_test_support.random_hash", "napalm_yang_mod.get_config", "napalm_test_support.get_managed_file"]}, "test_netmiko_mod.py": {"libraries": ["tests.support.unit.TestCase", "tests.support.mock.MagicMock", "logging", "tests.support.mixins.LoaderModuleMockMixin", "salt.modules.netmiko_mod", "tests.support.mock.patch"], "function_names": ["mock_netmiko_conn", "setup_loader_modules", "is_alive", "mock_netmiko_args", "mock_prepare_connection", "test_virtual", "test_send_config", "__init__", "send_config_set", "mock_file_apply_template_on_contents"], "function_calls": ["patch", "MockNetmikoConnection", "mock_netmiko_args", "MagicMock"], "class_names": ["MockNetmikoConnection", "NetmikoTestCase"], "class_method_calls": ["logging.getLogger", "ret.get", "netmiko_mod.__opts__", "self.assertEqual", "netmiko_mod.__virtual__", "netmiko_mod.send_config", "self.password", "netmiko_mod.__proxy__", "self.assertTrue", "self.user", "patch.dict", "patch.object"]}, "test_netscaler.py": {"libraries": ["salt.modules.netscaler", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["get_servername", "get_state", "test_service_enable", "_get_message", "test_server_update", "set_ipaddress", "test_servicegroup_delete", "set_servicetype", "test_server_delete", "test_server_enabled", "test_server_enable", "test_vser_sergrp_delete", "test_vserver_sslcert_exists", "get_servicegroupname", "test_vser_sergrp_exists", "test_servicegroup_exists", "dumps", "login", "get", "setup_loader_modules", "test_vserver_sslcert_delete", "test_servicegroup_server_exists", "disable_server", "test_servicegroup_server_add", "enable", "get_ipv46", "delete", "set_servicegroupname", "test_sergrp_server_disable", "test_server_add", "set_port", "add", "set_ipv46", "test_service_up", "test_server_exists", "test_vserver_servicegroup_add", "get_svrstate", "update", "get_port", "set_name", "test_servicegroup_server_delete", "test_vserver_sslcert_add", "get_servers", "test_vserver_exists", "enable_server", "test_servicegroup_add", "set_servername", "test_server_disable", "get_servicetype", "loads", "get_certkeyname", "test_vserver_add", "disable", "test_service_exists", "test_service_disable", "_set_message", "set_vservername", "test_vserver_delete", "__init__", "set_certkeyname", "test_servicegroup_server_enable", "test_servicegroup_server_up", "logout", "get_ipaddress"], "function_calls": ["MockNSServer", "MockNSSSLVServerSSLCertKeyBinding", "MagicMock", "super", "MockNSService", "MockNSServiceGroupServerBinding", "MockNSServiceGroup", "property", "MockNSLBVServer", "MockNSLBVServerServiceGroupBinding"], "class_names": ["MockNSServer", "MockNSSSLVServerSSLCertKeyBinding", "MockNSNitro", "MockNSService", "NetscalerTestCase", "MockNSServiceGroupServerBinding", "MockJson", "MockNSServiceGroup", "MockNSNitroError", "MockNSLBVServer", "MockNSLBVServerServiceGroupBinding"], "class_method_calls": ["netscaler.server_add", "netscaler.servicegroup_add", "netscaler.vserver_exists", "self.flag", "netscaler.__salt__", "netscaler.server_enable", "netscaler.servicegroup_server_exists", "self._message", "patch.object", "netscaler.server_update", "self.sg_name", "netscaler.servicegroup_server_delete", "netscaler.vserver_servicegroup_exists", "netscaler.vserver_servicegroup_delete", "netscaler.service_disable", "netscaler.servicegroup_server_enable", "netscaler.servicegroup_exists", "netscaler.service_exists", "self.assertFalse", "netscaler.service_up", "netscaler.vserver_sslcert_add", "netscaler.vserver_sslcert_delete", "netscaler.server_disable", "netscaler.servicegroup_server_up", "patch.dict", "netscaler.servicegroup_server_add", "netscaler.servicegroup_delete", "netscaler.server_enabled", "netscaler.server_exists", "MockNSNitro.flag", "netscaler.vserver_servicegroup_add", "MockNSServer.flag", "self.assertTrue", "netscaler.vserver_add", "netscaler.server_delete", "netscaler.service_enable", "netscaler.vserver_sslcert_exists", "netscaler.servicegroup_server_disable", "netscaler.vserver_delete", "self.message"]}, "test_neutron.py": {"libraries": ["tests.support.unit.TestCase", "tests.support.mixins.LoaderModuleMockMixin", "salt.modules.neutron", "tests.support.mock.MagicMock"], "function_names": ["test_list_vpnservices", "show_subnet", "delete_floatingip", "test_show_router", "delete_subnet", "show_security_group_rule", "delete_ipsec_site_connection", "test_remove_interface_router", "test_show_network", "test_update_quota", "show_floatingip", "list_ipsec_site_connections", "test_list_floatingips", "test_update_network", "test_create_network", "test_add_interface_router", "test_show_port", "show_ipsecpolicy", "update_vpnservice", "delete_vpnservice", "show_ikepolicy", "create_subnet", "create_port", "create_network", "show_ipsec_site_connection", "list_security_groups", "test_create_vpnservice", "show_network", "test_delete_security_group", "test_show_security_group_rule", "test_update_floatingip", "create_ipsec_site_connection", "test_add_gateway_router", "show_router", "delete_router", "test_show_subnet", "update_network", "test_delete_ipsecpolicy", "test_list_networks", "create_router", "show_security_group", "test_update_router", "update_security_group", "test_delete_quota", "update_quota", "test_show_ipsec_site_connection", "test_show_ipsecpolicy", "list_ports", "update_subnet", "list_security_group_rules", "remove_interface_router", "test_create_security_group_rule", "test_delete_subnet", "list_ikepolicies", "test_create_port", "create_floatingip", "list_networks", "add_gateway_router", "test_delete_network", "test_delete_security_group_rule", "test_show_ikepolicy", "test_update_security_group", "delete_ikepolicy", "show_quota", "create_ikepolicy", "create_ipsecpolicy", "test_list_routers", "create_security_group_rule", "test_list_quotas", "delete_security_group", "test_get_quotas_tenant", "delete_port", "show_port", "test_list_security_group_rules", "test_list_ikepolicies", "list_subnets", "test_create_ikepolicy", "get_quotas_tenant", "test_create_security_group", "test_show_floatingip", "list_floatingips", "test_delete_ipsec_site", "test_create_router", "remove_gateway_router", "delete_network", "list_extensions", "test_show_vpnservice", "test_delete_ikepolicy", "test_list_ipsec_site", "test_remove_gateway_router", "test_list_subnets", "test_delete_vpnservice", "test_list_ports", "add_interface_router", "show_vpnservice", "test_list_extensions", "test_delete_router", "test_update_vpnservice", "test_update_subnet", "test_show_quota", "test_list_security_groups", "create_security_group", "setup_loader_modules", "list_ipsecpolicies", "test_delete_port", "test_create_ipsec_site", "delete_quota", "test_show_security_group", "update_floatingip", "test_create_ipsecpolicy", "delete_ipsecpolicy", "update_port", "delete_security_group_rule", "test_list_ipsecpolicies", "list_quotas", "test_create_subnet", "create_vpnservice", "test_delete_floatingip", "update_router", "test_update_port", "list_vpnservices", "test_create_floatingip", "list_routers"], "function_calls": ["MagicMock", "MockNeutron"], "class_names": ["MockNeutron", "NeutronTestCase"], "class_method_calls": ["neutron.create_subnet", "neutron.show_port", "neutron.add_gateway_router", "neutron.list_extensions", "neutron.list_routers", "neutron.update_security_group", "neutron.list_security_group_rules", "neutron.show_ipsec_site_connection", "neutron.delete_ipsec_site_connection", "neutron.delete_security_group", "neutron.list_ipsec_site_connections", "neutron.create_port", "neutron.update_router", "neutron.create_ipsec_site_connection", "neutron.show_ipsecpolicy", "neutron.create_floatingip", "neutron.create_security_group_rule", "neutron.list_ipsecpolicies", "neutron.create_ikepolicy", "neutron.list_subnets", "neutron.show_network", "neutron.list_vpnservices", "neutron.update_vpnservice", "neutron.show_floatingip", "neutron.create_ipsecpolicy", "neutron.create_router", "neutron.delete_security_group_rule", "neutron.list_quotas", "neutron.delete_network", "neutron.delete_floatingip", "neutron.delete_ikepolicy", "neutron.show_security_group", "neutron.list_security_groups", "neutron.show_vpnservice", "neutron.list_ports", "neutron.delete_port", "neutron.create_security_group", "neutron.remove_interface_router", "neutron.show_router", "neutron.remove_gateway_router", "neutron.show_security_group_rule", "neutron.update_port", "neutron.create_network", "neutron.delete_quota", "neutron.update_quota", "neutron.delete_router", "neutron.get_quotas_tenant", "neutron.add_interface_router", "neutron.update_floatingip", "neutron.list_ikepolicies", "neutron.create_vpnservice", "neutron.delete_ipsecpolicy", "neutron.show_ikepolicy", "neutron.delete_subnet", "neutron.delete_vpnservice", "neutron.show_subnet", "neutron.update_network", "self.assertTrue", "neutron.update_subnet", "neutron.show_quota", "neutron.list_networks", "neutron.list_floatingips"]}, "test_nova.py": {"libraries": ["salt.modules.nova", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_keypair_list", "test_resume", "test_volume_detach", "test_secgroup_create", "test_flavor_delete", "test_image_list", "test_volume_attach", "setup_loader_modules", "test_server_list", "test_volume_list", "test_boot", "test_delete", "test_server_show", "test_server_list_detailed", "test_volume_create", "test_volume_show", "test_image_meta_set", "test_flavor_create", "test_show", "test_server_by_name", "test_keypair_delete", "test_secgroup_delete", "test_suspend", "test_image_meta_delete", "test_flavor_list", "test_volume_delete", "test_lock", "test_list_", "test_secgroup_list", "test_keypair_add"], "function_calls": ["patch", "MagicMock"], "class_names": ["NovaTestCase"], "class_method_calls": ["nova.secgroup_delete", "nova.lock", "nova.server_list", "nova.image_meta_set", "nova.show", "nova.image_meta_delete", "patcher.stop", "nova.server_show", "nova.volume_show", "nova.delete", "patch.object", "nova.keypair_delete", "nova.list_", "nova.volume_attach", "nova.image_list", "nova.keypair_list", "self.assertEqual", "nova.secgroup_list", "nova.volume_create", "patcher.start", "nova.server_list_detailed", "nova.flavor_delete", "self.addCleanup", "nova.flavor_list", "nova.resume", "nova.volume_delete", "nova.volume_list", "nova.volume_detach", "nova.keypair_add", "nova.secgroup_create", "nova.flavor_create", "self.mock_auth", "nova.suspend", "self.assertTrue", "nova.server_by_name", "nova.boot"]}, "test_nxos_upgrade.py": {"libraries": ["tests.unit.modules.nxos.nxos_n5k.N5KPlatform", "tests.unit.modules.nxos.nxos_n95k.N95KPlatform", "salt.exceptions.NxosError", "salt.exceptions.CommandExecutionError", "salt.modules.nxos_upgrade", "tests.support.unit.TestCase", "tests.unit.modules.nxos.nxos_n93klxc.N93KLXCPlatform", "tests.unit.modules.nxos.nxos_n36k.N36KPlatform", "tests.support.mock.MagicMock", "tests.unit.modules.nxos.nxos_n3k.N3KPlatform", "tests.unit.modules.nxos.nxos_n93k.N93KPlatform", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch", "tests.unit.modules.nxos.nxos_n7k.N7KPlatform"], "function_names": ["test_upgrade_internal_server_error_500", "test_upgrade_show_install_all_impact_no_module_data", "test_upgrade_invalid_command", "setup_loader_modules", "test_upgrade_input_validation", "test_check_upgrade_impact_internal_server_error_400_in_progress", "test_check_upgrade_impact_backend_processing_error_500", "test_check_upgrade_impact_non_disruptive_success", "test_upgrade_NxosError_Exception2", "test_check_upgrade_impact_disruptive_success", "tearDown", "test_upgrade_install_all_disruptive", "test_check_upgrade_impact_input_validation", "test_check_upgrade_impact_internal_server_error_500", "test_upgrade_install_in_progress_terminal_dont_ask", "assert_platform_upgrade", "test_upgrade_install_in_progress_sans_terminal_dont_ask", "test_upgrade_install_all_non_disruptive", "test_upgrade_CommandExecutionError_Exception", "test_check_upgrade_impact_internal_server_error_400_invalid_command", "test_upgrade_NxosError_Exception", "test_upgrade_CommandExecutionError_Exception2", "test_upgrade_install_in_progress"], "function_calls": ["MagicMock", "N93KLXCPlatform", "N5KPlatform", "N93KPlatform", "bool", "NxosError", "N7KPlatform", "N3KPlatform", "N36KPlatform", "CommandExecutionError", "N95KPlatform"], "class_names": ["NxosUpgradeTestCase"], "class_method_calls": ["platform.nkimage", "self.platform_list", "platform.nimage", "platform.backend_processing_error_500", "platform.show_install_all_impact_in_progress", "self.assert_platform_upgrade", "platform.show_install_all_impact_non_disruptive", "platform.internal_server_error_500", "platform.install_all_non_disruptive_success", "platform.upgrade_required", "platform.cimage", "nxos_upgrade.upgrade", "platform.install_all_disruptive_success", "platform.chassis", "patch.dict", "platform.show_install_all_impact", "platform.bad_request_client_error_400_invalid_command_dict", "nxos_upgrade.check_upgrade_impact", "platform.bad_request_client_error_400_in_progress_dict", "platform.show_install_all_impact_no_module_data", "nxos_upgrade.__salt__", "platform.invalid_command"]}, "test_parted_partition.py": {"libraries": ["salt.exceptions.CommandExecutionError", "tests.support.unit.TestCase", "salt.modules.parted_partition", "tests.support.mock.MagicMock", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_probe_wo_args", "test_list__valid_unit_valid_cmd_output", "parted_print_output", "test_list__bad_partition", "test_list__valid_legacy_cmd_output", "test__is_fstype", "test_virtual_bails_without_partprobe", "test_list__empty_cmd_output", "test_mkpart_without_fstype", "setup_loader_modules", "test_virtual_bails_without_parted", "test_list__valid_cmd_output", "test_list__valid_unit_chs_valid_cmd_output", "test_virtual_bails_without_lsblk", "test_list__without_device", "test_list__valid_unit_valid_legacy_cmd_output", "test_list__bad_label_info", "test_disk_set", "test_mkpartfs_to_mkpart", "test_virtual_bails_on_windows", "test_disk_toggle", "test_virtual", "test_probe_w_single_arg", "test_list__bad_header", "test_xfs_fstypes", "test_list__invalid_unit", "test_list__valid_unit_empty_cmd_output", "test_btrfs_fstypes", "test_probe_w_multiple_args"], "function_calls": ["patch", "MagicMock"], "class_names": ["PartedTestCase"], "class_method_calls": ["parted.probe", "parted.mkpart", "self.assertRaises", "parted.list_", "parted.disk_toggle", "self.assertEqual", "self.cmdrun_stdout", "parted.disk_set", "parted._is_fstype", "parted.mkfs", "self.assertFalse", "self.addCleanup", "self.cmdrun", "self.fail", "parted.mkpartfs", "self.parted_print_output", "parted.__virtual__"]}, "test_random_org.py": {"libraries": ["salt.modules.random_org", "tests.support.unit.TestCase", "pytest", "tornado.httpclient.HTTPClient", "tests.support.mixins.LoaderModuleMockMixin"], "function_names": ["test_generateuuids", "test_generateintegers", "test_generatedecimalfractions", "test_generatestrings", "check_status", "test_getusage", "test_generateblobs", "setup_loader_modules", "setUp", "test_generategaussians"], "function_calls": ["check_status", "HTTPClient"], "class_names": ["RandomOrgTestCase"], "class_method_calls": ["self.assertDictEqual", "random_org.generateBlobs", "pytest.mark", "random_org.generateStrings", "random_org.generateDecimalFractions", "self.skipTest", "random_org.getUsage", "random_org.generateUUIDs", "random_org.generateIntegers", "random_org.generateGaussians"]}, "test_rh_ip.py": {"libraries": ["tests.support.mock.create_autospec", "os", "salt.modules.systemd_service", "tests.support.unit.TestCase", "jinja2.exceptions", "salt.modules.rh_ip", "tests.support.mock.MagicMock", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch", "copy"], "function_names": ["test_build_interface_bond_mode_2", "test_build_interface_bond_mode_6", "test_down", "test__parse_settings_eth_hwaddr_and_macaddr", "setup_loader_modules", "test__parse_settings_eth_hwaddr", "_validate_miimon_conf", "test_apply_network_settings", "_test_mode_0_or_2", "test_build_interface_bond_slave", "test__parse_settings_eth_macaddr", "test_build_interface_bond_mode_5", "_get_bonding_opts", "test_build_network_settings", "test_get_interface", "test_get_network_settings", "test_get_routes", "test_build_interface_bond_mode_1", "test_build_interface_bond_mode_4_xmit", "test_build_routes", "test_build_interface_bond_mode_4_lacp", "test_up", "test_build_interface_team", "test_build_interface_teamport", "test__parse_settings_eth_ethtool_channels", "test_error_message_network_should_process_non_str_expected", "test_build_interface_bond_mode_3", "_validate_miimon_downdelay", "test_build_interface_bond_mode_0", "test_error_message_iface_should_process_non_str_expected", "test_build_interface", "_check_common_opts_bond"], "function_calls": ["MagicMock", "range", "Exception", "str", "sorted", "create_autospec"], "class_names": ["RhipTestCase"], "class_method_calls": ["self.assertRaises", "kwargs.pop", "self._get_bonding_opts", "self._test_mode_0_or_2", "copy.copy", "rh_ip.get_network_settings", "rh_ip._error_msg_iface", "rh_ip.__salt__", "os.path", "jinja2.exceptions", "rh_ip.get_interface", "rh_ip.build_routes", "patch.object", "rh_ip.__grains__", "self.assertIn", "rh_ip._error_msg_network", "self._check_common_opts_bond", "self.assertEqual", "msg.endswith", "jinja2.Environment", "service_mod.restart", "rh_ip.build_network_settings", "line.split", "patch.dict", "self._validate_miimon_conf", "rh_ip.build_interface", "rh_ip._parse_settings_eth", "rh_ip.get_routes", "rh_ip.down", "rh_ip.up", "line.startswith", "self.assertTrue", "mock_service.assert_called_with", "rh_ip.apply_network_settings", "self._validate_miimon_downdelay"]}, "test_snapper.py": {"libraries": ["tests.support.helpers.with_tempfile", "salt.exceptions.CommandExecutionError", "tests.support.mock.mock_open", "salt.modules.snapper", "salt.utils.platform", "salt.utils.files", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "pytest", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_undo_jid", "test__get_jid_snapshots", "test_changed_files", "setup_loader_modules", "test_status_to_string", "test_undo", "test__get_num_interval", "test_diff_text_file", "test_delete_snapshot_id_fail", "test_create_snapshot", "test_set_config", "test_list_snapshots", "test_diff_text_files", "test_create_config", "test_get_config", "test_modify_snapshot", "test_run", "test__is_text_file", "test_list_configs", "test__snapshot_to_data", "test_status", "test_delete_snapshot_id_success", "test_get_snapshot", "test_diff_binary_files"], "function_calls": ["patch", "MagicMock", "mock_open", "with_tempfile"], "class_names": ["SnapperTestCase", "DBusException"], "class_method_calls": ["snapper.delete_snapshot", "self.assertDictEqual", "self.assertRaises", "snapper.changed_files", "snapper.create_config", "snapper._snapshot_to_data", "set_config_mock.assert_called_with", "snapper.get_snapshot", "snapper._is_text_file", "wfh.write", "snapper.get_config", "snapper.set_config", "snapper.diff", "self.assertCountEqual", "self.assertEqual", "self.assertListEqual", "self.assertNotEqual", "set_config_mock.called", "pytest.mark", "snapper.status", "snapper.status_to_string", "snapper.run", "snapper.list_configs", "snapper.__salt__", "salt.utils", "patch.dict", "snapper.modify_snapshot", "snapper.undo", "snapper.create_snapshot", "snapper._get_num_interval", "snapper._get_jid_snapshots", "snapper.list_snapshots", "self.assertNotIn", "dbus_mock.configure_mock", "snapper.undo_jid"]}, "test_sysmod.py": {"libraries": ["tests.support.unit.TestCase", "tests.support.mixins.LoaderModuleMockMixin", "salt.modules.sysmod", "tests.support.mock.patch"], "function_names": ["test_list_functions", "functions", "test_runner_argspec", "setup_loader_modules", "render", "test_list_state_functions", "test_state_argspec", "test_doc", "test_list_runners", "set_module_docstring", "test_list_state_modules", "test_list_returner_functions", "tearDownClass", "test_list_modules", "test_list_returners", "test_returner_doc", "returners", "test_list_runner_functions", "test_list_renderers", "test_argspec", "test_renderer_doc", "test_reload_modules", "test_returner_argspec", "test_runner_doc", "__init__", "test_state_doc", "setUpClass"], "function_calls": ["MockDocstringable", "Mockrunner", "patch", "Mockstate", "Mockloader", "list", "sorted", "delattr", "set"], "class_names": ["Runner", "MockDocstringable", "Mockrunner", "Mockloader", "Mockstate", "State", "SysmodTestCase"], "class_method_calls": ["self.assertDictEqual", "self.__doc__", "sysmod.renderer_doc", "sysmod.list_returner_functions", "sysmod.state_argspec", "self._statedocstrings", "cls._modules", "sysmod.list_modules", "sysmod.runner_doc", "self._functions", "sysmod.list_runners", "sysmod.list_returners", "self.assertListEqual", "self._modules", "mock.set_module_docstring", "func.split", "cls._functions", "sysmod.__salt__", "self.salt_dunder", "sysmod.state_doc", "sysmod.runner_argspec", "self.__globals__", "sysmod.doc", "sysmod.returner_doc", "sysmod.list_functions", "cls.runner_patcher", "cls.state_patcher", "Mockstate.State", "cls.loader_patcher", "cls._statedocstrings", "cls.salt_dunder", "sysmod.reload_modules", "self.assertTrue", "sysmod.list_state_functions", "sysmod.returner_argspec", "sysmod.argspec", "sysmod.list_renderers", "sysmod.list_runner_functions", "sysmod.list_state_modules", "self._docstrings", "cls._docstrings"]}, "test_twilio_notify.py": {"libraries": ["salt.modules.twilio_notify", "tests.support.unit.TestCase", "twilio", "tests.support.mock.MagicMock", "pytest", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_send_sms", "__init__", "setup_loader_modules", "create"], "function_calls": ["MockMessages", "MagicMock", "super", "MockTwilioRestClient", "tuple", "int", "MockTwilioRestException", "MockSMS"], "class_names": ["MockMessages", "TwilioNotifyTestCase", "MockTwilioRestClient", "MockTwilioRestException", "MockSMS"], "class_method_calls": ["self.sid", "self.assertDictEqual", "self.num_segments", "twilio.__version_info__", "self.date_created", "self.flag", "msg.from_", "self.messages", "msg.body", "patch.object", "self.sms", "self.code", "self.msg", "self.to", "pytest.mark", "msg.to", "twilio_notify.send_sms", "MockMessages.flag", "self.price_unit", "self.date_sent", "self.body", "self.status", "self.price", "self.from_"]}, "test_vsphere.py": {"libraries": ["salt.modules.vsphere", "salt.exceptions.VMwareSaltError", "pyVmomi.vim", "salt.exceptions.CommandExecutionError", "com.vmware.vapi.std_client.DynamicID", "tests.support.unit.TestCase", "salt.exceptions.VMwareObjectRetrievalError", "pyVmomi.vmodl", "salt.utils.vmware", "salt.utils.args", "pytest", "tests.support.mock.MagicMock", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.Mock", "tests.support.mock.patch", "tests.support.mock.call", "salt.exceptions.ArgumentValueError"], "function_names": ["test_returned_value", "test_no_cluster_raises_argument_value_error", "test_get_firewall_status_host_list_bad_retcode", "test_get_firewall_status_success", "test_supported_proxies", "test_vcenter_proxy_details", "setUp", "test_get_firewall_status_esxi_hosts_not_list", "test_unsupported_proxy_details", "test_supported_proxes", "test_enable_firewall_ruleset_esxi_hosts_not_list", "test_rename_datastore_call", "test_disk_not_found_safety_checks_set", "test_multiple_datastores_found", "test_reset_syslog_config_success", "test_get_coredump_network_config_esxi_hosts_not_list", "test_reset_syslog_config_host_list_bad_retcode", "test_get_service_instance_call", "test_remove_datastore_call", "test_list_attached_tags_client", "test_datastore_not_found", "test_delete_tag_category_client", "test_coredump_network_enable_esxi_hosts_not_list", "test_disk_group_not_found_safety_checks_set", "test_delete_tag_client_none", "test_defined_datacenter_names", "test_is_connection_to_a_vcenter_raises_vmware_salt_error", "test_is_connection_to_a_vcenter_call_default_service_instance", "test_set_coredump_network_config_bad_retcode", "test_defined_service_instance", "test_vcenter_proxy_details_verify_ssl", "test_list_tags_client", "test_get_coredump_network_config_host_list_bad_retcode", "test_scsi_address_to_disk_id_map", "test_default_service_instance", "test_service_instance_kwargs_parameter_passthrough", "test_attach_tags_client", "test_esxi_proxy_host_details", "test_list_tag_categories_client", "test_esxdatacenter_proxy_return", "test_reset_syslog_config_params_success", "test_get_firewall_status_host_list_success", "test_reset_syslog_config_params_no_valid_reset", "test_set_coredump_network_config_host_list_bad_retcode", "test_set_syslog_config_host_list_firewall_bad_retcode", "test_get_coredump_network_config_bad_retcode", "test_get_syslog_config_esxi_hosts_not_list", "test_connected_to_esxi", "test_get_coredump_network_config_host_list_success", "test_get_syslog_config_host_list_success", "test_output", "test_get_syslog_config_success", "test_service_instance_positional_parameter_with_default_value", "test_get_disk_groups", "test_get_datacenter_call", "test_no_service_instance_or_kwargs_parameters", "test_get_disks", "test__get_cluster_dict_call", "test_get_client_verify_ssl_false_ca_bundle", "test_get_datastore_call", "test_get_client_verify_ssl_false", "test_set_syslog_config_firewall_bad_retcode", "test_reset_syslog_config_invalid_config_param", "test_esxcluster_proxy_details", "test_get_client_ca_bundle", "test_set_syslog_config_host_list_firewall_success", "test_esxi_proxy_vcenter_details", "test_service_instance_kwargs_parameter_no_value", "test_get_client", "test_get_ssh_key", "test_vcenter_proxy_return", "test_set_syslog_config_firewall_success", "test_supported_proxy", "test_esxdatacenter_proxy_details", "test_is_connection_to_a_vcenter_call_explicit_service_instance", "test_set_coredump_network_config_host_list_success", "test_no_disk_id_or_scsi_address", "test_set_syslog_config_helper_success", "test_delete_tag_client", "test_create_tag_client_none", "test_list_tag_categories_client_none", "test_set_syslog_config_helper_bad_retcode", "test_service_instance_named_parameter_with_default_value", "test_output_false", "test_remove_disk_group_data_accessibility_false", "test_coredump_network_enable_host_list_bad_retcode", "test_set_syslog_config_esxi_hosts_not_list_firewall", "test_reset_syslog_config_host_list_success", "test_upload_ssh_key", "test_get_managed_object_name_calls", "test_get_syslog_config_host_list_bad_retcode", "test_attach_tags_client_none", "test_erase_disk_partitions", "test_reset_syslog_config_success_all_configs", "test_delete_tag_category_client_none", "test_get_diskgroups", "test_remove_capacity_from_diskgroup_data_evacuation_false", "test_create_tag_client", "test_get_cluster_call", "test_get_no_datastores", "test_scsi_address_not_found", "test_get_datastores_call", "test_diskgroup_not_found", "test_reset_syslog_config_success_multiple_configs", "test_set_coredump_network_config_esxi_hosts_not_list", "test_service_instance_positional_parameter_no_default_value", "test_reset_syslog_config_bad_retcode", "test__get_proxy_target_call", "test_returned_array", "test_create_tag_category_client_none", "test_list_attached_tags_client_none", "test_disconnect_call", "test___get_proxy_connection_details_call", "test_esxcluster_proxy_return", "test_default_params", "test_output_true", "test_set_syslog_config_esxi_hosts_not_list", "test_get_proxy_target", "test_remove_disk_group", "test_validate", "setup_loader_modules", "test_syslog_service_reload_esxi_hosts_not_list", "mock_function", "test_reset_syslog_config_esxi_hosts_not_list", "test_coredump_network_enable_bad_retcode", "test_list_tags_client_verify_ssl", "test_invalid_schema_validation", "test_unsupported_proxy", "test_get_syslog_config_bad_retcode", "test_remove_capacity_from_diskgroup", "tearDown", "test_reset_syslog_config_params_error", "test_is_connection_to_a_vcenter_raises_non_vmware_salt_error", "test_coredump_network_enable_success", "test_set_coredump_network_config_success", "test_list_tags_client_none", "test_coredump_network_enable_host_list_success", "test_service_instance_named_parameter_no_value", "test_get_coredump_network_config_success", "test_get_firewall_status_bad_retcode", "test_reset_syslog_config_no_syslog_config", "test_set_syslog_config_helper_no_valid_reset", "test_success_output", "test_create_tag_category_client"], "function_calls": ["MagicMock", "setattr", "Mock", "patch", "mock_function", "Exception", "str", "call", "delattr", "VMwareSaltError"], "class_names": ["GetsServiceInstanceViaProxyTestCase", "VsphereTestCase", "CreateDatacenterTestCase", "RenameDatastoreTestCase", "EraseDiskPartitionsTestCase", "TestCertificateVerify", "DisconnectTestCase", "GetProxyTypeTestCase", "_GetProxyTargetTestCase", "RemoveDatastoreTestCase", "TestVSphereTagging", "ListClusterTestCase", "TestVcenterConnectionTestCase", "ListDatacentersViaProxyTestCase", "SupportsProxiesTestCase", "RemoveCapacityFromDiskgroupTestCase", "RemoveDiskgroupTestCase", "GetServiceInstanceViaProxyTestCase", "_GetProxyConnectionDetailsTestCase"], "class_method_calls": ["get_vsphere_client.call_args_list", "vsphere.get_proxy_type", "vsphere.enable_firewall_ruleset", "vsphere._gets_service_instance_via_proxy", "self.esxcluster_details", "vsphere._reset_syslog_config_params", "self.list_attached_tags_return", "self.mock_target", "vsphere.remove_datastore", "vsphere.create_datacenter", "self.assertFalse", "mock_disconnect.call_count", "vsphere.test_vcenter_connection", "mock_ca.assert_called_once", "self.vcenter_details", "mock_test_proxy_target.assert_called_once_with", "vsphere.delete_tag_category", "mock_ca.call_args_list", "mock_get_scsi_addr_to_lun.assert_called_once_with", "self.addCleanup", "self.mock_get_datacenter", "mock__get_proxy_connection_details.assert_called_once_with", "vsphere._get_proxy_target", "mock_create_datacenter.assert_called_once_with", "self.create_tag_category", "mock_get_disks.assert_called_once_with", "vsphere.list_tag_categories", "mock_get_datastores.assert_called_once_with", "self.mock_rename_datastore", "self.esxi_host_details", "self.mock_host", "self.delete_tag_category", "self.details", "self.assertEqual", "excinfo.exception", "pytest.mark", "vsphere._supports_proxies", "vsphere.list_attached_tags", "self.delete_tag", "self.mock_get_cluster", "self.mock_disk3", "self.mock_cl", "vsphere.get_syslog_config", "mock_disconnect.assert_called_once_with", "mock_remove_diskgroup.assert_called_once_with", "vsphere._get_proxy_connection_details", "mock_client.call_args_list", "mock_is_connection_to_a_vcenter.assert_called_once_with", "self.list_tags_return", "self.esxi_vcenter_details", "vsphere._set_syslog_config_helper", "get_proxy_type.assert_called_once", "self.assertDictEqual", "mock_get_managed_object_name.assert_has_calls", "self.assertRaises", "vsphere.__pillar__", "self.create_tag", "patcher.stop", "vsphere.remove_diskgroup", "mock_remove_datastore.assert_called_once_with", "self.mock_ds", "vsphere.list_datacenters_via_proxy", "vsphere.get_firewall_status", "vsphere.remove_capacity_from_diskgroup", "vsphere._get_client", "self.mock_get_datastores", "patch.object", "self.mock_erase_disk_partitions", "self.mock_disk1", "vsphere.syslog_service_reload", "vsphere.get_coredump_network_config", "get_service_instance.assert_called_once", "vsphere.reset_syslog_config", "mock_get_service_instance.call_count", "self.mock_ds_ref", "vsphere.set_coredump_network_config", "self.mock_dc", "vsphere.coredump_network_enable", "http_query_mock.assert_called_once_with", "self.esxdatacenter_details", "vsphere.disconnect", "mock_get_diskgroups.assert_called_once_with", "vsphere.jsonschema", "vsphere.list_cluster", "self.mock_details2", "self.mock_si", "vsphere.get_service_instance_via_proxy", "vsphere.create_tag", "mock_get_service_instance.assert_called_once_with", "vsphere.erase_disk_partitions", "vsphere.__salt__", "mock_schema_validate.assert_called_once_with", "self.list_tag_categories_return", "vsphere.delete_tag", "vsphere.set_syslog_config", "vsphere.upload_ssh_key", "vsphere.list_tags", "vsphere.create_tag_category", "self.mock_schema", "mock_get_datacenters.assert_called_once_with", "vsphere.HAS_JSONSCHEMA", "mock_remove_capacity_from_diskgroup.assert_called_once_with", "self.mock__get_cluster_dict", "self.mock_details1", "vsphere.rename_datastore", "get_proxy_connection.assert_called_once", "patcher.start", "mock_details.assert_called_once", "self.mock_get_root_folder", "vsphere.attach_tag", "salt.utils", "patch.dict", "self.mock_disk2", "self.func_attrs", "mock_ca.assert_not_called", "self.mock_diskgroup", "mock__get_proxy_target.assert_called_once_with", "self.assertTrue", "vsphere.get_ssh_key", "get_vsphere_client.assert_called_once", "self.mock_root"]}, "test_win_groupadd.py": {"libraries": ["salt.utils.win_functions", "tests.support.helpers.TstSuiteLoggingHandler", "pywintypes", "tests.support.unit.TestCase", "salt.modules.win_groupadd", "tests.support.mock.MagicMock", "pytest", "tests.support.mixins.LoaderModuleMockMixin", "pythoncom", "tests.support.mock.Mock", "tests.support.mock.patch", "win32com"], "function_names": ["Delete", "test_add_group_exists", "test_list_groups_context", "members", "test_deluser_no_user", "test_members_correct_membership", "test_members_group_does_not_exist", "test__get_group_object", "setup_loader_modules", "test_members", "test_getent", "test_add_error", "test_info", "test_adduser", "Add", "test_deluser_group_does_not_exist", "test_list_groups", "test_adduser_group_does_not_exist", "test_delete", "test_members_fail_to_add", "test_delete_error", "test_members_fail_to_remove", "test_add", "test_deluser_error", "test_delete_no_group", "test__get_all_groups", "test_getent_context", "__init__", "test_deluser", "Create", "Remove", "test_adduser_error", "test_adduser_already_exists", "test__get_computer_object"], "function_calls": ["CompObj", "MagicMock", "Mock", "patch", "TstSuiteLoggingHandler", "GroupObj", "MockGroupObj", "MockMember", "isinstance"], "class_names": ["CompObj", "GroupObj", "WinGroupTestCase", "MockMember", "MockGroupObj"], "class_method_calls": ["self.assertDictEqual", "win_groupadd._get_computer_object", "self._members", "win_groupadd._get_all_groups", "self.Name", "win_groupadd.delete", "obj_group_mock.assert_called_once_with", "self.sam_mock", "patch.object", "win_groupadd.adduser", "self.assertIn", "self.assertListEqual", "win_groupadd.__salt__", "win_groupadd.members", "pytest.mark", "self.assertFalse", "win_groupadd.deluser", "com_obj.GetObject", "win_groupadd.__context__", "win_groupadd.getent", "win_groupadd.add", "pywintypes.com_error", "win_groupadd.info", "salt.utils", "patch.dict", "handler.messages", "self.assertTrue", "win_groupadd._get_group_object", "self.ADSPath", "win_groupadd.list_groups"]}, "test_zcbuildout.py": {"libraries": ["salt.modules.cmdmod", "os", "salt.modules.zcbuildout", "tests.unit.modules.test_zcbuildout.Base", "tests.support.runtests.RUNTIME_VARS", "pytest", "tests.unit.modules.test_zcbuildout.KNOWN_VIRTUALENV_BINARY_NAMES", "salt.modules.virtualenv_mod", "salt.utils.path", "salt.states.zcbuildout"], "function_names": ["test_installed", "test_quiet", "setup_loader_modules", "test_error"], "function_calls": [], "class_names": ["BuildoutTestCase"], "class_method_calls": ["os.listdir", "os.path", "modbuildout.buildout", "os.sep", "modbuildout.upgrade_bootstrap", "cmd.run", "self.assertEqual", "cmd.retcode", "pytest.mark", "self.rdir", "RUNTIME_VARS.SHELL_FALSE_PATH", "self.assertFalse", "RUNTIME_VARS.SHELL_TRUE_PATH", "cmd.run_all", "self.ppy_st", "self.tdir", "self.py_st", "buildout.installed", "salt.modules", "self.skipTest", "self.assertTrue"]}, "test_saltnado.py": {"libraries": ["tornado", "tornado.testing", "tests.support.mock.MagicMock", "tests.support.mock.patch", "salt.netapi.rest_tornado.saltnado"], "function_names": ["test_when_is_finished_then_all_collected_data_should_be_returned", "test_if_timed_out_after_events_return_then_result_should_contain_event_result_data", "test_when_event_finally_finishes_and_returned_minion_not_in_minions_it_should_be_set_to_False", "test_when_is_timed_out_then_all_collected_data_should_be_returned", "test_when_min_wait_time_has_not_passed_then_disbatch_should_not_return_expected_data_until_time_has_passed", "test_if_is_finished_after_events_return_then_result_should_contain_event_result_data", "test_when_an_event_times_out_then_we_should_not_enter_an_infinite_loop", "setUp", "test_when_is_finished_but_not_is_timed_out_then_timed_out_should_not_be_set_to_done", "fancy_get_event", "test_when_event_times_out_and_minion_is_not_running_minion_data_should_not_be_set", "boop", "test_when_disbatch_has_already_finished_then_finishing_should_not_fail", "capture_minions", "test_when_is_finished_times_out_before_event_finishes_result_should_be_True", "test_when_is_finished_is_set_before_events_return_then_no_data_should_be_returned", "test_when_is_finished_any_other_futures_should_be_canceled", "test_when_min_wait_time_and_nothing_todo_any_other_futures_should_be_canceled", "test_when_event_returns_early_and_finally_times_out_result_should_be_True", "test_when_event_finally_finishes_and_returned_minion_already_in_minions_it_should_not_be_changed", "test_when_minions_all_return_then_all_collected_data_should_be_returned", "test_when_event_finishes_but_is_finished_is_done_then_result_should_be_True", "test_when_is_finished_times_out_before_event_finishes_event_should_have_result_set_to_None", "fake_sleep", "test_when_event_times_out_and_minion_is_not_running_result_should_be_True", "test_when_min_wait_time_and_all_completed_but_not_is_timed_out_then_timed_out_should_not_be_set_to_done", "test_if_finished_before_any_events_return_then_result_should_be_empty_dictionary", "test_when_is_timed_out_is_set_before_other_events_are_completed_then_result_should_be_empty_dictionary", "toggle_is_finished", "test_when_disbatch_has_already_finished_then_writing_return_should_not_fail", "abort", "test_when_things_are_completed_but_not_timed_out_then_timed_out_event_should_not_be_done", "completer", "test_if_wait_timer_is_not_done_even_though_results_are_then_data_should_not_yet_be_returned", "test_when_is_timed_out_any_other_futures_should_be_canceled"], "function_calls": ["MagicMock", "iter", "super", "range", "next", "patch", "abort", "orig_sleep", "enumerate", "object", "str", "all", "len"], "class_names": ["TestJobNotRunning", "TestGetMinionReturns", "TestDisbatchLocal"], "class_method_calls": ["self.assertDictEqual", "events_by_id.get", "actual_return_event.set_result", "e.result", "fut.set_exception", "no_data_event.set_result", "patch.object", "saltnado.TimeoutException", "event.done", "self.assertIs", "times_out_later.set_result", "saltnado.SaltAPIHandler", "self.handler", "self.assertFalse", "self.assertIsNone", "self.mock", "kwargs.get", "is_finished.set_result", "self.io_loop", "event.set_result", "is_timed_out.done", "f.set_result", "is_timed_out.set_result", "is_finished.done", "tornado.gen", "patch.dict", "wrong_future.result", "completed_event.set_result", "fut.done", "xxx.set_result", "finished.set_exception", "wait_timer.set_result", "empty_return_event.set_result", "finished.set_result", "tornado.testing", "times_out_later.done", "timed_out_event.set_exception", "self.assertTrue", "min_wait_time.set_result", "f.set_exception"]}, "test_loop.py": {"libraries": ["tests.support.unit.TestCase", "salt.states.loop", "tests.support.mock.MagicMock", "pytest", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_until_without_args_or_kwargs", "test_until_without_args", "test_eval_exceptions", "test_immediate_success", "test_until", "test_no_eval_exceptions", "test_retried_success", "test_test_mode", "test_retried_failure", "_check_skip", "setup_loader_modules", "setUp", "test_until_without_kwargs", "test_immediate_failure"], "function_calls": ["type", "KeyError", "MagicMock", "range"], "class_names": ["LoopTestCaseNoEval", "LoopTestCase"], "class_method_calls": ["self.assertDictEqual", "self.assertRaises", "patch.dict", "self.condition", "self.timeout", "self.m_args", "pytest.mark", "self.period", "salt.loader", "self.func", "salt.config", "salt.states", "self.m_kwargs", "self.mock"]}, "test_mock.py": {"libraries": ["errno", "salt.utils.stringutils", "textwrap", "tests.support.mock.mock_open", "salt.utils.files", "tests.support.unit.TestCase", "logging", "salt.utils.data", "tests.support.mock.patch"], "function_names": ["test_read", "test_readline_readlines", "test_read_for_loop", "_test_read_for_loop", "_test_readlines_multifile", "test_open", "test_read_explicit_size", "_test_read_explicit_size_larger_than_file_size", "_test_readline_readlines", "test_read_data_converted_to_dict", "_test_read_readline", "test_writelines", "tearDown", "test_read_data_list", "_get_values", "test_read_data_list_bytes", "_test_read_explicit_size", "test_readlines", "_test_read", "test_write", "test_tell", "test_read_explicit_size_larger_than_file_size", "test_read_readline", "setUpClass"], "function_calls": ["sum", "IOError", "patch", "delattr", "Exception", "str", "len", "getattr", "isinstance", "mock_open"], "class_names": ["MockOpenMixin", "MockOpenTestCase"], "class_method_calls": ["fh.readlines", "cls.contents_bytes", "log.debug", "cls.answers_bytes_lines", "self.questions_str_lines", "cls.normalized_read_data_as_list", "cls.questions_str", "logging.getLogger", "self.answers_bytes_lines", "cls.questions", "fh.readline", "self.read_data_as_list", "cls.answers_bytes", "self.questions_str", "cls.questions_bytes", "cls.answers_lines", "cls.contents", "cls.answers", "cls.answers_str_lines", "self.contents", "cls.read_data_as_list", "self.questions_bytes", "self._test_read", "m_open.read_data", "cls.questions_bytes_lines", "fh.read", "self._test_readlines_multifile", "textwrap.dedent", "self._get_values", "cls.answers_str", "self.fh", "salt.utils", "cls.questions_lines", "self.fh2", "self.fh3", "self._test_read_explicit_size_larger_than_file_size", "errno.EACCES", "self.normalized_read_data_as_list", "self._test_readline_readlines", "self.questions", "self.answers_str_lines", "self.answers_str", "self.answers_bytes", "self._test_read_readline", "cls.questions_str_lines", "self._test_read_explicit_size", "cls.read_data_as_list_bytes", "self.contents_bytes", "self.questions_bytes_lines", "self._test_read_for_loop", "self.read_data_as_list_bytes"]}, "test_module_names.py": {"libraries": ["fnmatch", "os", "tests.support.paths.list_test_mods", "salt.utils.stringutils", "tests.support.unit.TestCase", "tests.support.runtests.RUNTIME_VARS", "salt.utils.path"], "function_names": ["test_module_name", "_format_errors", "test_module_name_source_match", "_match_dirs"], "function_calls": ["any", "list_test_mods", "_format_errors", "tuple", "len"], "class_names": ["BadTestModuleNamesTestCase"], "class_method_calls": ["fnmatch.fnmatchcase", "RUNTIME_VARS.CODE_DIR", "stem.split", "reldir.endswith", "os.path", "os.sep", "reldir.startswith", "fname.endswith", "self.assertEqual", "mod_name.rsplit", "RUNTIME_VARS.SALT_CODE_DIR", "errors.append", "salt.utils", "filename.split", "bad_names.append", "path.rsplit", "fname.startswith", "stem.replace", "self._match_dirs"]}, "test_virtualname.py": {"libraries": ["os", "tests.support.unit.TestCase", "tests.support.runtests.RUNTIME_VARS", "logging", "importlib.util"], "function_names": ["is_file", "_import_module", "_check_modules", "__init__", "test_check_virtualname"], "function_calls": ["hasattr"], "class_names": ["FakeEntry", "VirtualNameTestCase"], "class_method_calls": ["errors.extend", "logging.getLogger", "module.__virtualname__", "name.startswith", "self._is_file", "RUNTIME_VARS.SALT_CODE_DIR", "log.critical", "self._check_modules", "self._import_module", "os.listdir", "ret.append", "os.path", "self.path", "spec.loader", "name.endswith", "self.name", "importlib.util"]}, "test_zypp_plugins.py": {"libraries": ["imp", "os", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "pytest", "zypp_plugin.BogusIO", "tests.support.mock.patch"], "function_names": ["test_drift_detector"], "function_calls": ["patch", "MagicMock", "str", "BogusIO"], "class_names": ["ZyppPluginsTestCase"], "class_method_calls": ["self.assertEqual", "bogus_io.path", "drift._get_checksum", "pytest.mark", "imp.load_source", "os.path", "drift.PLUGINEND", "drift._get_mtime", "zyppnotify.DriftDetector", "bogus_io.mode"]}, "test_aggregation.py": {"libraries": ["salt.utils.aggregation.Scalar", "tests.support.unit.TestCase", "salt.utils.aggregation.aggregate", "salt.utils.aggregation.Map"], "function_names": ["test_merging", "test_introspection", "test_nested", "test_instruction"], "function_calls": ["aggregate", "Map", "Scalar"], "class_names": ["TestAggregation"], "class_method_calls": []}, "test_asynchronous.py": {"libraries": ["tornado.testing", "tornado.testing.AsyncTestCase", "salt.utils.asynchronous", "tornado.gen"], "function_names": ["sleep", "test_double", "test_helpers", "__init__", "test_basic_wrap", "test_double_sameloop"], "function_calls": ["HelperB", "HelperA"], "class_names": ["HelperB", "HelperA", "TestSyncWrapper"], "class_method_calls": ["asynchronous.SyncWrapper", "sync.sleep", "tornado.testing", "tornado.gen", "self.assertTrue", "hb.sleep", "self.a", "self.assertFalse", "ha.sleep"]}, "test_boto3mod.py": {"libraries": ["string", "boto3", "random", "salt.utils.versions.Version", "botocore.exceptions.ClientError", "salt.loader", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "pytest", "salt.utils.boto3mod", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["test_set_and_get_after_invalidation_returns_none", "test_set_and_get_with_explicit_auth_params", "test_set_and_get_with_no_auth_params", "test_set_and_get_with_different_region_returns_none", "test_partial", "setup_loader_modules", "setUp"], "function_calls": ["Version", "MagicMock", "super", "range", "patch", "cache_id", "ClientError"], "class_names": ["Boto3modTestCase"], "class_method_calls": ["boto3mod.cache_id", "random.choice", "boto3mod.cache_id_func", "self.patcher", "self.conn_parameters", "self.paginator", "self.resource_id", "self.assertEqual", "self.not_found_error", "pytest.mark", "mock_session.return_value", "self.resource_name", "boto3.__version__", "self.conn", "string.ascii_lowercase", "self.opts", "self.addCleanup", "self.service", "session_instance.configure_mock", "string.digits", "self.region", "salt.config", "self.secret_key"]}, "test_botomod.py": {"libraries": ["os", "boto3", "boto.exception", "salt.utils.versions.Version", "boto.exception.BotoServerError", "pkg_resources", "tests.support.unit.TestCase", "salt.exceptions.SaltInvocationError", "tests.support.runtests.RUNTIME_VARS", "moto.mock_ec2", "salt.utils.botomod", "pytest", "salt.utils.boto3mod", "tests.support.mock.MagicMock", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch", "boto"], "function_names": ["test_set_and_get_after_invalidation_returns_none", "_has_required_boto3", "_has_required_boto", "setup_loader_modules", "test_exception_message_with_no_body", "test_conn_is_cached", "test_conn_is_cache_with_profile", "test_set_and_get_with_explicit_auth_params", "test_error_message", "mock_ec2", "test_get_conn_error_raises_command_execution_error", "test_set_and_get_with_different_region_returns_none", "test_context_conflict_between_boto_and_boto3_utils", "test_partial", "test_exception_message_with_no_error_in_body", "_has_required_moto", "stub_function", "test_get_conn_with_no_auth_params_raises_invocation_error", "test_set_and_get_with_no_auth_params"], "function_calls": ["Version", "get_conn", "MagicMock", "patch", "cache_id", "str", "_has_required_boto3", "id", "_has_required_boto", "BotoServerError"], "class_names": ["BotoBoto3CacheContextCollisionTest", "BotoUtilsTestCaseBase", "BotoUtilsCacheIdTestCase", "BotoUtilsGetErrorTestCase", "BotoUtilsGetConnTestCase"], "class_method_calls": ["self.assertRaises", "boto3mod.get_connection", "os.path", "botomod.get_error", "pkg_resources.get_distribution", "self.assertEqual", "self.assertNotEqual", "pytest.mark", "RUNTIME_VARS.TESTS_DIR", "botomod.__context__", "boto3.__version__", "boto.exception", "boto.__version__", "botomod.assign_funcs", "boto3mod.assign_funcs", "botomod.cache_id", "botomod.get_connection", "boto.ENDPOINTS_PATH", "self.assertTrue", "botomod.get_connection_func", "botomod.cache_id_func"]}, "test_color.py": {"libraries": ["tests.support.unit.TestCase", "salt.utils.color"], "function_names": ["test_get_colors"], "function_calls": ["str"], "class_names": ["ColorUtilsTestCase"], "class_method_calls": ["self.assertDictContainsSubset", "salt.utils", "self.assertEqual"]}, "test_configcomparer.py": {"libraries": ["tests.support.unit.TestCase", "copy", "salt.utils.configcomparer"], "function_names": ["test_compare_and_update_config"], "function_calls": [], "class_names": ["UtilConfigcomparerTestCase"], "class_method_calls": ["self.base_config", "configcomparer.compare_and_update_config", "copy.deepcopy", "self.assertEqual"]}, "test_configparser.py": {"libraries": ["errno", "os", "salt.utils.configparser", "salt.utils.stringutils", "salt.utils.files", "salt.utils.platform", "tests.support.unit.TestCase", "tests.support.runtests.RUNTIME_VARS", "logging", "copy"], "function_names": ["tearDown", "test_get", "fix_indent", "test_remove_option_regexp", "test_read_space_indent", "_test_write", "test_remove_option", "test_write", "test_replace_option", "test_write_binary", "tearDownClass", "get_lines", "test_add_section", "test_set_new_option", "test_set_multivar", "setUp"], "function_calls": ["enumerate"], "class_names": ["TestGitConfigParser"], "class_method_calls": ["self.assertRaises", "self.conf", "os.path", "exc.errno", "logging.getLogger", "self.assertEqual", "expected.insert", "self.new_config", "self.assertFalse", "cls.orig_config", "self._test_write", "self.remote", "fp_.read", "RUNTIME_VARS.TMP", "fp_.write", "self.get_lines", "salt.utils", "errno.ENOENT", "os.linesep", "self.fix_indent", "os.remove", "self.assertTrue", "self.orig_config", "copy.copy"]}, "test_dateutils.py": {"libraries": ["salt.utils.dateutils", "timelib", "tests.support.unit.TestCase", "datetime", "pytest", "tests.support.mock.patch"], "function_names": ["test_strftime", "test_date_cast"], "function_calls": ["patch"], "class_names": ["DateutilsTestCase"], "class_method_calls": ["datetime.datetime", "self.assertEqual", "pytest.mark", "self.skipTest", "salt.utils"]}, "test_dicttrim.py": {"libraries": ["tests.support.unit.TestCase", "salt.utils.dicttrim", "logging"], "function_names": ["setUp", "test_trim_dict"], "function_calls": [], "class_names": ["DictTrimTestCase", "RecursiveDictTrimTestCase"], "class_method_calls": ["logging.getLogger", "self.new_dict", "dicttrimmer.trim_dict", "self.assertEqual", "self.old_dict"]}, "test_dictupdate.py": {"libraries": ["salt.utils.odict.OrderedDict", "tests.support.unit.TestCase", "salt.exceptions.SaltInvocationError", "salt.utils.dictupdate", "copy"], "function_names": ["test_deep_set_overwrite", "test_deep_update", "test_deep_append", "test_deep_set_ordered_dicts", "test_merge_overwrite_missing_source_key", "test_deep_set_create", "test_update", "test_merge_aggregate_traditional", "test_deep_extend", "test_deep_extend_illegal_source", "test_deep_update_illegal_update", "test_deep_extend_illegal_addition", "test_merge_list_traditional", "test_merge_list_append", "test_merge_overwrite_traditional"], "function_calls": ["type", "OrderedDict"], "class_names": ["UtilDictupdateTestCase", "UtilDictMergeTestCase", "UtilDeepDictUpdateTestCase"], "class_method_calls": ["dictupdate.append_dict_key_value", "self.dict1", "dictupdate.extend_dict_key_value", "self.assertEqual", "dictupdate.update", "dictupdate.update_dict_key_value", "self.assertRaisesRegex", "copy.deepcopy", "dictupdate.merge_overwrite", "dictupdate.merge_list", "dictupdate.set_dict_key_value"]}, "test_dns.py": {"libraries": ["logging", "salt.utils.dns.lookup", "salt._compat.ipaddress", "salt.utils.dns._data2rec", "salt.utils.dns._data2rec_group", "salt.utils.dns._lookup_drill", "salt.utils.dns._tree", "tests.support.unit.TestCase", "salt.utils.dns._to_port", "salt.utils.dns._lookup_dig", "tests.support.mock.patch", "salt.modules.cmdmod", "salt.utils.dns", "textwrap", "salt.utils.dns._lookup_host", "tests.support.mock.MagicMock", "salt.utils.dns._weighted_order", "salt.utils.dns._lookup_gai", "socket", "salt.utils.odict.OrderedDict", "salt.utils.dns._lookup_nslookup", "pytest"], "function_names": ["test_tree", "test_drill", "_mock_cmd_ret", "test_gai", "test_nslookup", "test_weight", "test_host", "test_data2rec", "test_dig", "_test_cmd_lookup", "test_dig_options", "test_lookup_with_servers", "test_port", "test_data2group"], "function_calls": ["lookup_cb", "_data2rec_group", "MagicMock", "_to_port", "dict", "_weighted_order", "_data2rec", "list", "enumerate", "int", "_lookup_gai", "zip", "OrderedDict", "all", "_tree", "lookup", "isinstance"], "class_names": ["DNShelpersCase", "DNSlookupsCase"], "class_method_calls": ["self.assertRaises", "rights.items", "self.RESULTS", "socket.gaierror", "ipaddress.IPv4Address", "self.CMD_RET", "patch.object", "logging.getLogger", "self.assertEqual", "self._test_cmd_lookup", "self.assertNotEqual", "pytest.mark", "tres.update", "right.items", "test_res.append", "self._mock_cmd_ret", "textwrap.dedent", "salt.utils", "patch.dict", "test_res.update", "rec_d.items", "RES_TMPL.format", "secure.items", "salt.modules", "self.assertTrue"]}, "test_doc.py": {"libraries": ["tests.support.unit.TestCase", "salt.utils.doc"], "function_names": ["test_parse_docstring"], "function_calls": [], "class_names": ["DocUtilsTestCase"], "class_method_calls": ["self.assertDictEqual", "salt.utils"]}, "test_environment.py": {"libraries": ["tests.support.unit.TestCase", "salt.utils.environment"], "function_names": ["test_get_module_environment_vname_found", "test_get_module_environment_opts", "test_get_module_environment_pillar_override", "test_get_module_environment_mname_found", "test_get_module_environment_vname_overridden", "test_get_module_environment_sname_found", "test_get_module_environment_empty", "test_get_module_environment_pillars"], "function_calls": ["isinstance"], "class_names": ["UtilsTestCase"], "class_method_calls": ["salt.utils"]}, "test_extend.py": {"libraries": ["os", "salt.utils.files", "tests.support.unit.TestCase", "datetime.date", "tests.support.runtests.RUNTIME_VARS", "salt.utils.extend", "pytest", "tests.support.mock.MagicMock", "tests.support.mock.patch", "shutil"], "function_names": ["tearDown", "test_run", "setUp"], "function_calls": ["patch"], "class_names": ["ExtendTestCase"], "class_method_calls": ["RUNTIME_VARS.CODE_DIR", "self.assertEqual", "test_f.read", "os.chdir", "date.today", "pytest.mark", "shutil.rmtree", "self.starting_dir", "self.assertTrue", "self.out", "self.assertFalse", "os.getcwd", "os.path", "salt.utils"]}, "test_filebuffer.py": {"libraries": ["os", "tests.support.unit.TestCase", "salt.utils.filebuffer.InvalidFileMode", "salt.utils.filebuffer.BufferedReader", "tests.support.paths.BASE_FILES"], "function_names": ["find_value", "test_issue_51309", "test_read_only_mode"], "function_calls": ["BufferedReader", "find_value"], "class_names": ["TestFileBuffer"], "class_method_calls": ["text.strip", "self.assertRaises", "self.assertTrue", "os.path"]}, "test_find.py": {"libraries": ["sys", "os", "salt.utils.files", "tests.support.unit.TestCase", "tests.support.runtests.RUNTIME_VARS", "salt.utils.find", "pytest", "stat", "tempfile", "shutil"], "function_names": ["test_group_option_match", "test_find", "test_regex_option_match", "test_owner_option_requires", "test_type_option_requires", "test_grep_option_match_dev_null", "setUp", "test_grep_option_requires", "test_owner_option_match", "test_print_option_execute", "test_print_option_defaults", "test_print_user", "test_parse_size", "tearDown", "test_size_option_requires", "test_mtime_option_requires", "test_iregex_option_match", "test_name_option_match", "test_type_option_match", "test_print_group", "test_grep_option_match_regular_file", "test_mtime_option_match", "test_parse_interval", "test_print_md5", "test_init", "test_iname_option_match", "test_option_requires", "test_group_option_requires", "test_print_option_requires", "test_size_option_match"], "function_calls": ["str", "super", "range", "list"], "class_names": ["TestGrepOption", "TestPrintOption", "TestFind", "TestFinder"], "class_method_calls": ["self.assertRaises", "stat.S_IFSOCK", "option.match", "find._REQUIRES_STAT", "stat.S_IFIFO", "self.tmpdir", "finder.actions", "os.path", "stat.S_IFBLK", "option.requires", "stat.S_IFLNK", "sys.platform", "os.stat", "self.assertEqual", "self.assertIs", "pytest.mark", "finder.find", "tempfile.mkdtemp", "option.need_stat", "RUNTIME_VARS.TMP", "fp_.write", "option.execute", "shutil.rmtree", "option.fmt", "salt.utils", "sys.maxsize", "stat.S_IFDIR", "finder.criteria", "option.print_title", "stat.S_IFCHR", "stat.S_IFREG", "find._REQUIRES_CONTENTS"]}, "test_hashutils.py": {"libraries": ["salt.utils.hashutils", "tests.support.unit.TestCase", "pytest"], "function_names": ["test_sha256_digest", "test_hmac_signature", "test_base64_b64decode", "test_base64_encodestring", "test_hmac_compute", "test_base64_b64encode", "test_get_hash_exception", "test_sha512_digest", "test_base64_decodestring", "test_md5_digest"], "function_calls": [], "class_names": ["HashutilsTestCase"], "class_method_calls": ["self.assertRaises", "self.bytes_hmac_compute", "self.str", "self.str_md5", "self.str_b64encode_result", "self.bytes_sha512", "self.str_hmac_compute", "self.bytes_b64encode_result", "self.str_sha256", "self.bytes_sha256", "self.assertEqual", "self.bytes_hmac_challenge", "pytest.mark", "self.bytes", "self.str_sha512", "self.hmac_secret", "self.str_encodestring_result", "salt.utils", "self.bytes_encodestring_result", "self.str_hmac_challenge", "self.assertTrue", "self.bytes_md5"]}, "test_immutabletypes.py": {"libraries": ["tests.support.unit.TestCase", "salt.utils.immutabletypes"], "function_names": ["test_immutablelist_imutability", "test_immutablelist_sum", "test_immutabledict_imutability", "test_freeze_list_sum"], "function_calls": [], "class_names": ["ImmutableTypesTestCase"], "class_method_calls": ["immutabletypes.freeze", "self.assertRaises", "immutabletypes.ImmutableList", "self.assertEqual"]}, "test_jid.py": {"libraries": ["os", "salt.utils.jid", "tests.support.unit.TestCase", "datetime", "tests.support.mock.patch"], "function_names": ["test_deprecation_58225", "test_jid_to_time", "test_is_jid", "test_gen_jid"], "function_calls": ["patch", "str"], "class_names": ["JidTestCase"], "class_method_calls": ["self.assertRaises", "datetime.datetime", "self.assertEqual", "self.assertTrue", "self.assertFalse", "salt.utils", "os.getpid"]}, "test_json.py": {"libraries": ["salt.utils.json", "salt.utils.stringutils", "textwrap", "tests.support.helpers.with_tempfile", "salt.utils.files", "salt.utils.platform", "tests.support.unit.TestCase", "tests.support.unit.LOREM_IPSUM"], "function_names": ["test_dump_load", "test_find_json", "test_dumps_loads"], "function_calls": ["with_tempfile"], "class_names": ["JSONTestCase"], "class_method_calls": ["self.assertDictEqual", "self.serialized_indent4", "self.assertRaises", "fp_.read", "self.assertEqual", "self.serialized", "fp_.write", "textwrap.dedent", "x.rstrip", "salt.utils", "ret.splitlines", "self.data"]}, "test_kickstart.py": {"libraries": ["tests.support.unit.TestCase", "salt.utils.kickstart"], "function_names": ["test_clean_args"], "function_calls": [], "class_names": ["KickstartTestCase"], "class_method_calls": ["kickstart.clean_args"]}, "test_locales.py": {"libraries": ["tests.support.unit.TestCase", "importlib", "tests.support.mock.patch", "salt.utils.locales"], "function_names": ["test_normalize_locale", "test_split_locale", "test_join_locale", "test_get_encodings"], "function_calls": ["patch"], "class_names": ["TestLocales"], "class_method_calls": ["self.assertDictEqual", "self.assertEqual", "locales.normalize_locale", "locales.get_encodings", "importlib.reload", "locales.join_locale", "locales.split_locale", "self.assertIn"]}, "test_mac_utils.py": {"libraries": ["salt.modules.cmdmod", "xml.parsers.expat", "os", "tests.support.mock.MockTimedProc", "plistlib", "salt.utils.mac_utils", "subprocess", "salt.exceptions.CommandExecutionError", "tests.support.mock.mock_open", "salt.utils.platform", "tests.support.unit.TestCase", "salt.exceptions.SaltInvocationError", "tests.support.mock.MagicMock", "pytest", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch"], "function_names": ["_run_available_services", "test_available_services_broken_symlink", "test_available_services_result", "test_bootout_retcode_36_success", "test_execute_return_success_command_succeeded", "test_available_services_binary_plist", "test_available_services_expat_error", "setup_loader_modules", "test_parse_return_no_delimiter", "test_validate_enabled_0", "test_available_services_dirs", "walk_side_effect", "test_parse_return_space", "test_validate_enabled_off", "test_not_bootout_retcode_36_fail", "test_execute_return_success_not_supported", "_get_walk_side_effects", "test_execute_return_success_command_failed", "test_validate_enabled_non_zero", "test_validate_enabled_bad_string", "test_validate_enabled_true", "test_launchctl_error", "test_available_services_value_error", "test_git_is_stub", "test_launchctl", "test_validate_enabled_false", "test_validate_enabled_on", "test_bootout_retcode_99_fail", "test_launchctl_return_stdout", "test_parse_return_new_line", "test_git_is_not_stub", "test_available_services_invalid_file", "test_execute_return_result_command_succeeded", "test_execute_return_result_command_failed"], "function_calls": ["_run_available_services", "MagicMock", "range", "patch", "MockTimedProc", "_get_walk_side_effects", "len", "mock_open"], "class_names": ["MacUtilsTestCase"], "class_method_calls": ["mock_listdir.return_value", "self.assertRaises", "xml.parsers", "os.path", "mac_utils.launchctl", "subprocess.CalledProcessError", "patch.object", "mac_utils._available_services", "mock_isdir.return_value", "os.sep", "self.assertEqual", "results.get", "pytest.mark", "mock_load.side_effect", "mac_utils.parse_return", "mac_utils.git_is_stub", "cmd._run_all_quiet", "mac_utils.execute_return_success", "mock_exists.side_effect", "exc.message", "salt.utils", "plistlib.InvalidFileException", "mac_utils.execute_return_result", "mac_utils.validate_enabled", "mock_exists.return_value", "mock_os_walk.side_effect"]}, "test_path.py": {"libraries": ["sys", "os", "posixpath", "salt.utils.compat", "ntpath", "platform", "types", "salt.utils.platform", "tests.support.unit.TestCase", "tests.support.mock.patch", "pytest", "tempfile", "salt.exceptions.CommandNotFoundError", "salt.utils.path"], "function_names": ["test_windows_paths", "test_nix_paths", "test_mixed_unicode_and_binary", "test_windows_paths_patched_path_module", "test_missing_binary_in_linux", "test_existing_binary_in_windows", "__unpatch_path", "test_check_or_die", "test_existing_binary_in_linux", "test_missing_binary_in_windows", "test_existing_binary_in_windows_pathext", "test_sanitize_win_path", "__patch_path", "test_which_bin", "test_join"], "function_calls": ["enumerate", "patch", "exec", "list"], "class_names": ["PathJoinTestCase", "PathTestCase", "TestWhich"], "class_method_calls": ["platform.system", "self.__unpatch_path", "sys.builtin_module_names", "os.path", "osaccess.side_effect", "os.sep", "isfile.side_effect", "pytest.mark", "sys.modules", "pytest.raises", "modules.index", "module.__dict__", "types.ModuleType", "self.WIN_PATHS", "modules.append", "salt.utils", "patch.dict", "self.BUILTIN_MODULES", "self.NIX_PATHS", "is_windows_mock.return_value", "os.environ", "self.__patch_path", "self.PLATFORM_FUNC", "modules.pop"]}, "test_pbm.py": {"libraries": ["salt.exceptions.VMwareRuntimeError", "pyVmomi.pbm", "salt.exceptions.VMwareApiError", "pyVmomi.vim", "tests.support.unit.TestCase", "tests.support.mock.PropertyMock", "pyVmomi.vmodl", "tests.support.mock.MagicMock", "pytest", "logging", "salt.utils.pbm", "tests.support.mock.patch", "salt.exceptions.VMwareObjectRetrievalError"], "function_names": ["test_retrieve_policies_raises_vim_fault", "test_placement_solver_raises_runtime_fault", "test_return_cap_definitions", "test_placement_solver_raises_vim_fault", "test_create_policy", "test_return_filtered_policies", "test_query_default_requirement_profile_raises_runtime_fault", "test_assign_default_requirement_profile", "test_create_policy_raises_no_permissions", "setUp", "test_create_policy_raises_vim_fault", "test_retrieve_policy_ids", "test_return_profile_manager", "test_retrieve_policies_raises_no_permissions", "test_retrieve_policies_raises_runtime_fault", "test_fetch_capabilities_raises_no_permissions", "test_get_placement_hub", "test_get_res_type", "test_retrieve_policies", "test_return_all_policies", "test_pbm_si", "test_no_policy_refs", "tearDown", "test_placement_solver_raises_no_permissions", "test_get_new_service_stub", "test_query_default_requirement_profile_raises_no_permissions", "test_return_policy_ref", "test_retrieve_policy_ids_raises_vim_fault", "test_fetch_capabilities", "test_retrieve_policy_ids_raises_runtime_fault", "test_query_default_requirement_profile", "test_fetch_capabilities_raises_vim_fault", "test_assign_default_requirement_profile_raises_vim_fault", "test_profile_manager_raises_vim_fault", "test_fetch_capabilities_raises_runtime_fault", "test_return_policies", "test_assign_default_requirement_profile_raises_runtime_fault", "test_get_policies_by_id", "test_assign_default_requirement_profile_raises_no_permissions", "test_retrieve_policy_ids_raises_no_permissions", "test_profile_manager_raises_no_permissions", "test_profile_manager_raises_runtime_fault", "test_create_policy_raises_runtime_fault", "test_query_default_requirement_profile_raises_vim_fault"], "function_calls": ["type", "MagicMock", "range", "patch", "PropertyMock", "delattr"], "class_names": ["CreateStoragePolicyTestCase", "GetPlacementSolverTestCase", "AssignDefaultStoragePolicyToDatastoreTestCase", "GetCapabilityDefinitionsTestCase", "UpdateStoragePolicyTestCase", "GetDefaultStoragePolicyOfDatastoreTestCase", "GetPoliciesByIdTestCase", "GetStoragePoliciesTestCase", "GetProfileManagerTestCase"], "class_method_calls": ["self.mock_policy_ids", "self.assertRaises", "self.mock_policies", "self.policy_ids", "patcher.stop", "self.mock_ds", "vmodl.RuntimeFault", "logging.getLogger", "self.mock_stub", "mock_get_policies_by_id.assert_called_once_with", "mock_retrieve_policy_ids.assert_called_once_with", "self.assertEqual", "excinfo.exception", "exc.privilegeId", "pytest.mark", "mock_get_placement_hub.assert_called_once_with", "self.mock_policy_id", "self.mock_res_type", "self.mock_hub", "mock_obj.name", "self.mock_policy_refs", "self.mock_policy_spec", "patcher.start", "self.mock_cap_cats", "pbm.profile", "self.mock_prof_mgr", "salt.utils", "self.addCleanup", "self.mock_pbm_si", "mock_assign_prof.assert_called_once_with", "mock_get_new_service_stub.assert_called_once_with", "self.mock_content", "vim.fault", "mock_get_pbm_si.assert_called_once_with", "self.mock_si", "mock_get_res_type.assert_called_once_with", "mock_query_prof.assert_called_once_with", "exc.msg", "self.mock_policy"]}, "test_roster_matcher.py": {"libraries": ["os", "salt.loader", "tests.support.unit.TestCase", "tests.support.runtests.RUNTIME_VARS", "salt.config", "pytest", "salt.utils.roster_matcher", "tests.support.mixins"], "function_names": ["test_get_data", "test_ret_comma_delimited_string_minions", "test_ret_comma_delimited_string_nodegroup_minions", "test_ret_oops_minions", "test_ret_pcre_minions", "test_ret_range_minions", "test_ret_glob_minions", "test_ret_literal_list_minions", "test_ret_literal_list_nodegroup_minions", "test_ret_no_range_installed_minions", "setup_loader_modules"], "function_calls": [], "class_names": ["RosterMatcherTestCase"], "class_method_calls": ["RUNTIME_VARS.TMP_CONF_DIR", "self.assertRaises", "mixins.LoaderModuleMockMixin", "self.assertEqual", "self.assertNotIn", "salt.loader", "pytest.mark", "salt.config", "salt.utils", "roster_matcher.get_data", "os.path", "self.fail", "self.assertIn"]}, "test_sanitizers.py": {"libraries": ["tests.support.unit.TestCase", "salt.utils.sanitizers.clean", "salt.utils.sanitizers.mask_args_value"], "function_names": ["test_sanitized_trim", "test_sanitized_hostname", "test_value_masked", "test_value_not_masked", "test_sanitized_filename"], "function_calls": ["type", "mask_args_value"], "class_names": ["SanitizersTestCase"], "class_method_calls": ["clean.hostname", "clean.trim", "clean.filename"]}, "test_ssdp.py": {"libraries": ["salt.utils.stringutils", "tests.support.unit.TestCase", "salt.utils.ssdp", "datetime", "tests.support.mock.MagicMock", "tests.support.mock.patch"], "function_names": ["test_datagram_signature_bad", "get_ssdp_discovery_server", "test_base_avail", "test_datagram_signature_outdated_timestamp_quiet", "exception_generic", "get_ssdp_factory", "test_get_masters_map_error_handling", "test_base_protocol_settings", "test_base_self_ip", "test_attr_check", "test_datagram_signature_wrong_timestamp_reply", "test_query", "test_datagram_signature_correct_timestamp_reply", "test_get_masters_map", "test_transport_sendto_success", "test_transport_sendto_retry", "test_datagram_signature_wrong_timestamp_quiet", "get_socket_mock", "test_config_detached", "test_discover_timestamp_error", "test_datagram_signature_outdated_timestamp_reply", "test_run", "test_discover_general_error", "test_config_passed", "get_ssdp_discovery_client", "__init__", "read", "exception_attr_error", "test_discover_no_masters"], "function_calls": ["MagicMock", "patch", "Exception", "str", "AttributeError", "len", "zip", "getattr", "hasattr"], "class_names": ["Resource", "SSDPClientTestCase", "SSDPBaseTestCase", "Mocks", "SSDPServerTestCase", "SSDPFactoryTestCase"], "class_method_calls": ["base.get_self_ip", "srv.create_datagram_endpoint", "datetime.timedelta", "sock_mock.socket", "clnt.discover", "srv._config", "base._is_available", "io.get_event_loop", "clnt.log", "io.ported", "loop.run_until_complete", "clnt._socket", "patch.object", "sock_mock.gethostname", "self.get_ssdp_factory", "clnt._collect_masters_map", "ssdp.SSDPDiscoveryClient", "srv.run", "loop.close", "trnsp.close", "sck.getsockname", "ssdp.time", "transport.sendto", "factory.datagram_received", "self.get_socket_mock", "fake_resource.pool", "factory.my_ip", "clnt._config", "self.pool", "ssdp.SSDPBase", "factory._sendto", "srv.log", "salt.utils", "factory.log", "factory.disable_hidden", "self.get_ssdp_discovery_client", "clnt._query", "SSDPBaseTestCase.exception_generic", "sock_mock.gethostbyname", "ssdp.SSDPFactory", "datetime.datetime", "ssdp.SSDPDiscoveryServer", "self.get_ssdp_discovery_server", "SSDPBaseTestCase.exception_attr_error", "factory.transport", "base.DEFAULTS", "SSDPClientTestCase.Resource", "fake_resource.read"]}, "test_systemd.py": {"libraries": ["errno", "salt.utils.systemd", "subprocess", "tests.support.unit.TestCase", "salt.exceptions.SaltInvocationError", "tests.support.mock.Mock", "tests.support.mock.patch"], "function_names": ["test_version_generated_from_git_describe", "test_version_invalid_context", "test_pid_to_service_systemctl_invalid_pid", "test_has_scope_systemd205", "test_pid_to_service_systemctl_valid_pid", "_booted_effect", "test_booted_return_from_context", "test_pid_to_service_dbus_valid_pid", "test_version_parse_problem", "test_version_return_from_context", "test_booted_invalid_context", "test_has_scope_invalid_context", "test_has_scope_version_parse_problem", "test_has_scope_no_systemd", "test_has_scope_systemd204", "test_booted", "test_not_booted", "test_has_scope_systemd206", "test_version", "test_pid_to_service_dbus_invalid_pid", "_not_booted_effect"], "function_calls": ["patch", "OSError", "DBusException", "Mock"], "class_names": ["SystemdTestCase", "DBusException"], "class_method_calls": ["self.assertRaises", "popen_mock.return_value", "self.assertEqual", "self.assertIsNone", "dbus_interface_get_mock.assert_called_with", "dbus_mock.DBusException", "dbus_mock.Interface", "_systemd.pid_to_service", "_systemd.version", "self.assertTrue", "_systemd.has_scope", "_systemd.booted", "self.assertFalse", "dbus_mock.GetUnitByPID", "errno.ENOENT", "subprocess.CalledProcessError"]}, "test_timed_subprocess.py": {"libraries": ["tests.support.unit.TestCase", "salt.utils.timed_subprocess"], "function_names": ["test_timedproc_with_shell_true_and_list_args"], "function_calls": [], "class_names": ["TestTimedSubprocess"], "class_method_calls": ["timed_subprocess.TimedProc"]}, "test_url.py": {"libraries": ["salt.utils.url", "salt.utils.platform", "tests.support.unit.TestCase", "tests.support.mock.MagicMock", "tests.support.mock.patch"], "function_names": ["test_unescape_windows", "test_is_escaped_generic_url", "test_create_url_with_backslash_in_path", "test_is_escaped_unescaped_url", "test_validate_invalid", "test_strip_url_without_scheme", "test_http_basic_auth", "test_unescape_escaped_url", "test_create_url_saltenv", "test_escape_unescaped_path", "test_redact_non_auth_output", "test_escape_generic_url", "test_escape_escaped_url", "test_unescape_escaped_path", "test_unescape_generic_url", "test_escape_unescaped_url", "test_is_escaped_escaped_path", "test_parse_path", "test_create_url", "test_split_env", "test_add_env", "test_strip_url_with_scheme", "test_escape_escaped_path", "test_escape_windows", "test_is_escaped_windows", "test_create_url_saltenv_with_backslash_in_path", "test_parse_salt_url", "test_add_env_not_salt", "test_validate_valid", "test_is_escaped_escaped_url", "test_unescape_unescaped_path", "test_redact_http_basic_auth", "test_parse_salt_saltenv", "test_unescape_unescaped_url", "test_http_basic_auth_https_only", "test_is_escaped_unescaped_path", "test_split_env_non_salt"], "function_calls": ["patch", "MagicMock"], "class_names": ["UrlTestCase"], "class_method_calls": ["self.assertRaises", "self.assertEqual", "self.assertTrue", "self.assertFalse", "salt.utils", "expected.replace"]}, "test_vsan.py": {"libraries": ["salt.exceptions.VMwareRuntimeError", "salt.exceptions.VMwareApiError", "pyVmomi.vim", "tests.support.unit.TestCase", "tests.support.mock.PropertyMock", "pyVmomi.vmodl", "salt.utils.vsan", "pytest", "logging", "tests.support.mock.MagicMock", "tests.support.mixins.LoaderModuleMockMixin", "tests.support.mock.patch", "salt.exceptions.VMwareObjectRetrievalError"], "function_names": ["test_initialize_disk_mapping_raise_method_not_found", "test_wait_for_tasks_call", "test_remove_disk_mapping", "test_get_hostname", "test_remove_disk_mapping_raise_runtime_fault", "test__wait_for_tasks_call", "test_initialize_disk_mapping_raise_vim_fault", "test_api_version_raises_no_permission", "test_remove_disk_mapping_raise_no_permission", "test_empty_mors_result", "test_cluster_reconfig_raises_vim_fault", "test_VsanClusterGetConfig_raises_runtime_fault", "test_get_mors_with_properties", "test_remove_disk_mapping_raise_vim_fault", "test_cluster_reconfig_raises_vmodl_runtime_error", "test_api_version_raises_vim_fault", "test_initialize_disk_mapping_raise_runtime_fault", "test_VsanClusterGetConfig_call", "setup_loader_modules", "setUp", "test_wait_for_tasks_raises_no_permission", "test_api_version_raises_runtime_fault", "test_get_vsan_cluster_config_system_call", "test_ssl_default_context_loaded", "test_initialize_disk_mapping", "test_return", "test_GetVsanVcMos_call", "test_maintenance_mode_evacuate_all_data", "test_vsan_spec_hybrid", "test_get_cluster_name_call", "test_initialize_disk_mapping_raise_no_permission", "test_maintenance_mode_no_action", "test_get_service_instance_call", "tearDown", "test_remove_disk_raise_vim_fault", "test_VsanClusterGetConfig_raises_vim_fault", "test_cluster_reconfig_call", "test_remove_disk", "test_valid_mors_result", "test_wait_for_tasks_raises_vim_fault", "test_hostname_argument", "test_wait_for_tasks", "test_vsan_spec_all_flash", "test__wait_for_tasks", "test_unsupported_api_version", "test_ssl_default_context_not_loaded", "test_remove_disk_raise_no_permission", "test_get_managed_object_name_call", "test_VsanClusterGetConfig_raises_no_permission", "test_cluster_reconfig_raises_no_permission", "test_wait_for_tasks_raises_vmodl_runtime_error", "test_traversal_spec", "test_result", "test_supported_api_version", "test_remove_disk_raise_runtime_fault"], "function_calls": ["type", "MagicMock", "patch", "PropertyMock", "delattr"], "class_names": ["RemoveCapacityFromDiskGroup", "CreateDiskgroupTestCase", "VsanSupportedTestCase", "GetClusterVsanInfoTestCase", "_WaitForTasks", "RemoveDiskgroup", "ReconfigureClusterVsanTestCase", "GetHostVsanSystemTestCase", "GetVsanDiskManagementSystemTestCase", "AddCapacityToDiskGroupTestCase", "GetVsanClusterConfigSystemTestCase"], "class_method_calls": ["mock_traversal_spec.assert_called_once_with", "self.assertRaises", "mock_get_managed_object_name.call_count", "vsan._wait_for_tasks", "mock___wait_for_tasks.assert_called_once_with", "self.mock_cache_disk", "vsan.add_capacity_to_diskgroup", "patcher.stop", "mock_get_mors.assert_called_once_with", "mock_vsan_sys.VsanClusterGetConfig", "mock_wait_for_tasks.assert_called_once_with", "self.mock_get_vsan_conf_sys", "err.privilegeId", "vsan.get_vsan_disk_management_system", "self.mock_tasks", "vsan.reconfigure_cluster_vsan", "vmodl.RuntimeFault", "self.mock_cl_reconf", "vsan.get_cluster_vsan_info", "self.mock_spec", "logging.getLogger", "vmodl.fault", "err.msg", "self.assertEqual", "self.mock_cap_disk1", "vsan.get_host_vsan_system", "vsan.ssl", "excinfo.exception", "exc.privilegeId", "pytest.mark", "self.mock_ret", "self.mock_remove_disk_mapping", "vsan.create_diskgroup", "vim.HostSystem", "self.assertFalse", "self.mock_cl_ref", "self.mock_host_vsan_system", "self.mock_context", "vim.HostVsanSystem", "vim.VsanHostDecommissionModeObjectAction", "mock_get_vsan_vc_mos.assert_called_once_with", "vsan.HAS_PYVSAN", "vsan.remove_capacity_from_diskgroup", "patcher.start", "mock_wait_for_task.assert_called_once_with", "self.mock_traversal_spec", "self.addCleanup", "self.mock_host_ref", "vsan.get_vsan_cluster_config_system", "get_managed_object_name_mock.assert_called_once_with", "self.mock_vsan_system", "self.mock_vsan_disk_mgmt_system", "self.mock_diskgroup", "self.mock_cl_vsan_spec", "vsan.remove_diskgroup", "vsan.vsan_supported", "self.mock_create_default_context", "mock_get_vsan_cl_syst.assert_called_once_with", "self.mock_remove_disk", "vim.fault", "self.mock_si", "mock_get_managed_object_name.assert_called_once_with", "self.assertTrue", "self.mock_initialise_disk_mapping", "self.mock_cap_disk2", "get_service_instance_from_managed_object_mock.assert_called_once_with", "mock_si.content", "vsan.sys", "exc.msg", "err.method", "self.mock_task"]}, "test_win_chcp.py": {"libraries": ["tests.support.unit.TestCase", "salt.exceptions.CodePageError", "salt.utils.win_chcp", "pytest"], "function_names": ["tearDown", "test_get_and_set_code_page", "tearDownClass", "test_bad_page_code", "setUpClass", "setUp"], "function_calls": ["int"], "class_names": ["CHCPTest"], "class_method_calls": ["self.assertRaises", "self.assertEqual", "cls._chcp_code", "pytest.mark", "win_chcp.chcp", "win_chcp.get_codepage_id", "self._chcp_code", "win_chcp.set_codepage_id"]}, "test_win_dotnet.py": {"libraries": ["tests.support.unit.TestCase", "salt.utils.win_dotnet", "tests.support.mock.MagicMock", "pytest", "tests.support.mock.patch"], "function_names": ["test_versions", "test_version_not_atleast_473", "test_version_atleast_47", "test_version_atleast_35", "test_versions_details", "test_versions_list", "setUp", "test_version_atleast_472"], "function_calls": ["patch", "MagicMock"], "class_names": ["WinDotNetTestCase"], "class_method_calls": ["self.assertDictEqual", "win_dotnet.versions", "self.assertListEqual", "self.mock_reg_read", "self.mock_reg_list", "win_dotnet.versions_list", "self.mock_reg_exists", "pytest.mark", "win_dotnet.versions_details", "self.assertTrue", "self.assertFalse", "win_dotnet.version_at_least"]}, "test_win_osinfo.py": {"libraries": ["sys", "tests.support.unit.TestCase", "pytest", "salt.utils.win_osinfo"], "function_names": ["test_get_join_info", "test_get_os_version_info"], "function_calls": ["int", "isinstance"], "class_names": ["WinOsInfo"], "class_method_calls": ["win_osinfo.get_join_info", "sys_info.minor", "sys_info.platform", "sys.getwindowsversion", "self.assertEqual", "sys_info.build", "pytest.mark", "self.assertTrue", "sys_info.major", "win_osinfo.get_os_version_info", "self.assertIn"]}, "test_win_pdh.py": {"libraries": ["salt.utils.win_pdh", "pywintypes", "tests.support.unit.TestCase", "pytest", "tests.support.mock.patch"], "function_names": ["test_list_counters", "test_get_all_counters", "test_list_instances", "test_get_counters_no_data_to_return", "test_build_counter_list", "test_get_counter", "test_list_objects", "test_get_counters"], "function_calls": ["patch", "isinstance"], "class_names": ["WinPdhTestCase"], "class_method_calls": ["mock_query.side_effect", "pywintypes.error", "self.assertEqual", "win_pdh.list_objects", "win_pdh.list_counters", "win_pdh.get_counter", "counter.path", "pytest.mark", "resulting_paths.append", "self.assertTrue", "win_pdh.list_instances", "win_pdh.build_counter_list", "win_pdh.Counter", "win_pdh.get_counters", "win_pdh.get_all_counters"]}, "test_yamldumper.py": {"libraries": ["tests.support.unit.TestCase", "salt.utils.yamldumper"], "function_names": ["test_yaml_safe_dump", "test_yaml_dump"], "function_calls": [], "class_names": ["YamlDumperTestCase"], "class_method_calls": ["exp_yaml.replace", "salt.utils"]}, "test_yamlencoding.py": {"libraries": ["tests.support.unit.TestCase", "salt.utils.yamlencoding", "salt.utils.yaml"], "function_names": ["test_yaml_encode", "test_yaml_squote_doesNotAddNewLines", "test_yaml_dquote", "test_yaml_squote", "test_yaml_dquote_doesNotAddNewLines"], "function_calls": ["set"], "class_names": ["YamlEncodingTestCase"], "class_method_calls": ["self.assertRaises", "self.assertNotIn", "salt.utils", "self.assertEqual"]}, "test_yamlloader.py": {"libraries": ["salt.utils.yamlloader.yaml", "textwrap", "tests.support.mock.mock_open", "salt.utils.files", "tests.support.unit.TestCase", "salt.utils.yamlloader.SaltYamlSafeLoader", "tests.support.mock.patch", "yaml.constructor.ConstructorError"], "function_names": ["test_yaml_merge", "test_not_yaml_monkey_patching", "render_yaml", "test_yaml_basics", "test_yaml_with_plain_scalars", "test_yaml_duplicates"], "function_calls": ["patch", "hasattr", "SaltYamlSafeLoader", "mock_open"], "class_names": ["YamlLoaderTestCase"], "class_method_calls": ["self.assertRaises", "self.assertEqual", "yaml.CSafeLoader", "yaml.SafeLoader", "textwrap.dedent", "salt.utils", "self.render_yaml"]}, "wheeltest.py": {"libraries": ["salt.wheel", "salt.auth", "salt.config", "optparse", "pprint"], "function_names": ["__init__", "parse", "__eauth", "run"], "function_calls": ["parse", "Wheeler"], "class_names": ["Wheeler"], "class_method_calls": ["salt.wheel", "resolver.cli", "self.opts", "options.__dict__", "parser.parse_args", "self.__eauth", "pprint.pprint", "salt.auth", "wheeler.run", "self.wheel", "arg.split", "salt.config", "parser.add_option", "optparse.OptionParser"]}, "zypp_plugin.py": {"libraries": [], "function_names": ["close", "__enter__", "__call__", "__exit__", "write", "main", "__init__", "ack", "__str__"], "function_calls": ["list"], "class_names": ["Plugin", "BogusIO"], "class_method_calls": ["self.mode", "self.content", "self.close", "self.path", "self.closed"]}, "changelog.py": {"libraries": ["sys", "ptscripts.models.VirtualEnvPipConfig", "__future__.annotations", "re", "pathlib", "logging", "ptscripts.command_group", "ptscripts.Context", "tools.utils"], "function_names": ["check_changelog_entries"], "function_calls": ["VirtualEnvPipConfig", "command_group"], "class_names": [], "class_method_calls": ["CHANGELOG_ENTRY_RE.match", "logging.getLogger", "re.compile", "ctx.exit", "changelog_entries_path.relative_to", "changelog.command", "path.name", "CHANGELOG_LIKE_RE.match", "ctx.error", "pathlib.Path", "path.suffix", "path.relative_to", "sys.version_info", "tools.utils"]}, "ci.py": {"libraries": ["typing.TYPE_CHECKING", "typing.NotRequired", "logging", "tools.utils", "boto3", "typing_extensions.NotRequired", "tools.utils.gh", "yaml", "json", "pathlib", "ptscripts.Context", "typing.TypedDict", "sys", "os", "time", "ptscripts.command_group", "typing.Any", "random", "__future__.annotations", "typing_extensions.TypedDict", "shutil"], "function_names": ["get_testing_releases", "_get_pr_test_labels_from_api", "pkg_matrix", "get_releases", "matrix", "define_jobs", "get_release_changelog_target", "define_testrun", "get_pr_test_labels", "_get_pr_test_labels_from_event_payload", "runner_types", "print_gh_event", "process_changed_files", "define_cache_seed", "upload_coverage", "_filter_test_labels"], "function_calls": ["any", "_get_pr_test_labels_from_api", "range", "command_group", "list", "str", "open", "len", "sorted", "print", "set", "_get_pr_test_labels_from_event_payload", "TestRun", "_filter_test_labels"], "class_names": ["TestRun"], "class_method_calls": ["available.difference_update", "name.startswith", "ctx.info", "ret.json", "codecov_args.extend", "ctx.web", "adjusted_versions.append", "name.split", "distro_slug.split", "ret.stderr", "fpath.name", "ctx.warn", "version.major", "wfh.write", "json.dumps", "fpath.stem", "labels.extend", "ctx.console", "tools.utils", "ret.stdout", "logging.getLogger", "ctx.exit", "json.loads", "jobs.items", "selected.add", "ctx.print", "changed_files.exists", "test_labels.append", "files.add", "parsed_salt_version.minor", "page_iterator.search", "_splits.get", "s3.get_paginator", "selected_changed_files.append", "ret.reason", "testrun_changed_files_path.relative_to", "time.sleep", "ret.status_code", "reports_path.glob", "ctx.debug", "shutil.which", "paginator.paginate", "available.clear", "ctx.run", "boto3.client", "testrun_changed_files_path.name", "changed_files.read_text", "testing_releases.append", "yaml.safe_load", "ret.returncode", "ctx.error", "key.endswith", "pathlib.Path", "web.get", "random.randint", "web.headers", "distro_slug.startswith", "gh_event.get", "_matrix.append", "loaded_data.remove", "fpath.startswith", "available.update", "changed_files_contents.items", "os.environ", "prefix.replace", "available.remove", "ctx.console_stdout", "testrun_changed_files_path.write_text", "ci.command", "sys.stderr", "sys.version_info"]}, "docs.py": {"libraries": ["os", "collections", "__future__.annotations", "pathlib", "ast", "re", "ptscripts.command_group", "ptscripts.Context", "tools.utils"], "function_names": ["check_stubs", "build_python_module_paths", "build_docs_paths", "build_file_list", "check_module_indexes", "check_stray", "check_inline_markup", "check", "check_virtual", "build_path_cache"], "function_calls": ["check_stubs", "build_python_module_paths", "command_group", "build_docs_paths", "build_file_list", "check_stray", "tuple", "check_inline_markup", "check_module_indexes", "str", "list", "sorted", "len", "set", "isinstance", "check_virtual", "build_path_cache"], "class_names": [], "class_method_calls": ["path.resolve", "strpath.endswith", "module_index_block.group", "ctx.info", "SALT_CODE_DIR.joinpath", "path.name", "strpath.startswith", "p.relative_to", "module.name", "re.VERBOSE", "python_package.rglob", "stub_path.relative_to", "ast.parse", "tools.utils", "re.search", "path_parts.pop", "os.sep", "path.parts", "ctx.exit", "ast.get_docstring", "ast.FunctionDef", "fpath.suffix", "re.findall", "SALT_CODE_DIR.rglob", "module.parts", "cgroup.command", "funcdef.name", "collections.Counter", "path.exists", "ctx.error", "pathlib.Path", "_files.append", "module.stem", "module.parent", "fpath.resolve", "modules.add", "module.body", "parts.pop", "path.relative_to", "stub_path.exists", "path.read_text"]}, "gh.py": {"libraries": ["fnmatch", "sys", "os", "typing.TYPE_CHECKING", "tools.utils.ExitCode", "__future__.annotations", "pathlib", "zipfile", "ptscripts.Context", "tempfile", "tools.utils", "shutil"], "function_names": ["download_artifact", "get_github_token", "discover_run_id", "download_nox_artifact", "download_onedir_artifact", "download_pkgs_artifact"], "function_calls": ["download_artifact", "get_github_token", "sorted", "len", "set"], "class_names": [], "class_method_calls": ["ctx.info", "ret.json", "artifacts_path.exists", "ctx.web", "found_artifact_path.suffix", "artifacts_path.relative_to", "listed_artifacts.add", "ctx.warn", "os.path", "tools.utils", "sys.platform", "ExitCode.OK", "ret.stdout", "ctx.exit", "ctx.print", "checksum_algo.upper", "ret.reason", "artifacts_path.mkdir", "ret.status_code", "ctx.debug", "platform.title", "shutil.which", "ctx.run", "ExitCode.SOFT_FAIL", "ret.returncode", "ctx.error", "pathlib.Path", "web.get", "web.headers", "artifacts_path.joinpath", "tempfile.gettempdir", "zfile.extractall", "os.environ", "slug.startswith", "fnmatch.fnmatch", "zipfile.ZipFile", "ExitCode.FAIL"]}, "create.py": {"libraries": ["typing.TYPE_CHECKING", "hashlib", "tools.utils.Version", "logging", "tools.utils", "tools.utils.repo.create_top_level_repo_path", "boto3", "json", "pathlib", "ptscripts.Context", "tools.utils.parse_versions", "os", "tools.utils.repo.get_repo_json_file_contents", "textwrap", "ptscripts.command_group", "datetime.datetime", "tools.utils.repo.create_full_repo_path", "__future__.annotations", "tools.pkg", "shutil"], "function_names": ["macos", "_create_onedir_based_repo", "_get_file_checksum", "src", "rpm", "windows", "_get_remote_versions", "_create_repo_file", "debian", "onedir"], "function_calls": ["Version", "create_top_level_repo_path", "_create_onedir_based_repo", "command_group", "list", "int", "_create_repo_file", "bytearray", "str", "_get_remote_versions", "len", "isinstance", "_get_file_checksum", "parse_versions", "open", "create_full_repo_path", "getattr", "memoryview", "get_repo_json_file_contents"], "class_names": [], "class_method_calls": ["remote_path.endswith", "create_repo_path.resolve", "ctx.info", "s3.list_objects", "fpath.name", "shutil.copyfile", "version.major", "hashlib.file_digest", "create_repo_path.iterdir", "log.info", "json.dumps", "ftp_archive_config_file.write_text", "wfh.write", "ret.stdout", "tools.utils", "path.mkdir", "logging.getLogger", "latest_link.unlink", "ctx.exit", "ctx.print", "versions.append", "minor_repo_json_path.write_text", "fpath.open", "digest.update", "create_repo_path.mkdir", "repo_json_path.write_text", "create_repo_path.write_text", "latest_link.symlink_to", "major_link.exists", "major_link.unlink", "create.command", "shutil.which", "fpath.suffix", "latest_link.relative_to", "sha256sum.stdout", "rfh.readinto", "ctx.run", "boto3.client", "incoming.iterdir", "v.major", "repo_file_path.relative_to", "link.symlink_to", "major_link.symlink_to", "textwrap.dedent", "fpath.suffixes", "ctx.error", "pathlib.Path", "dpath.name", "fpath.is_file", "create_repo_path.name", "hash_name.upper", "pool_path.mkdir", "os.environ", "datetime.utcnow", "distro.capitalize", "path.parent", "major_link.relative_to", "versions.sort", "digest.hexdigest", "latest_link.exists", "release_file.write_bytes", "create_repo_path.parent", "minor_repo_json_path.relative_to"]}, "docstrings.py": {"libraries": ["sys", "os", "typing.TYPE_CHECKING", "subprocess", "tools.precommit.SALT_INTERNAL_LOADERS_PATHS", "__future__.annotations", "re", "pathlib", "ast", "ptscripts.command_group", "ptscripts.Context", "tools.utils"], "function_names": ["_check_cli_example_proper_formatting", "_check_valid_versions_on_docstrings", "annotate", "check_docstrings", "_check_cli_example_present"], "function_calls": ["_check_valid_versions_on_docstrings", "_check_cli_example_proper_formatting", "RuntimeError", "annotate", "command_group", "list", "str", "open", "_check_cli_example_present", "isinstance"], "class_names": [], "class_method_calls": ["CLI_EXAMPLE_PRESENT_RE.search", "path.write_text", "ctx.warn", "wfh.write", "ast.parse", "tools.utils", "version.split", "funcdef.body", "re.MULTILINE", "ctx.exit", "CLI_EXAMPLE_PROPER_FORMATTING_RE.search", "ctx.print", "ast.get_docstring", "bad_versions.append", "vs.strip", "message.rstrip", "subprocess.run", "ast.FunctionDef", "fpath.suffix", "CHECK_VALID_VERSION_RE.finditer", "funcname.startswith", "SALT_CODE_DIR.rglob", "cgroup.command", "funcdef.name", "ret.returncode", "ctx.error", "MISSING_DOCSTRINGS.get", "pathlib.Path", "salt_modules_relpath.parent", "funcdef.lineno", "fpath.resolve", "re.compile", "os.environ", "sys.executable", "MISSING_EXAMPLES.get", "module.body", "match.group", "path.relative_to", "path.read_text"]}, "filemap.py": {"libraries": ["yaml", "re", "pathlib", "ptscripts.command_group", "ptscripts.Context", "tools.utils"], "function_names": ["_match_to_test_file", "check", "_check_matches"], "function_calls": ["_match_to_test_file", "command_group", "_check_matches", "str"], "class_names": [], "class_method_calls": ["path.relative_to", "match.split", "FILENAME_MAP_PATH.read_text", "ctx.exit", "tests_path.joinpath", "filematch.exists", "cgroup.command", "yaml.safe_load", "ctx.error", "pathlib.Path", "re.match", "filename_map.items", "filerule.exists", "tools.utils"]}, "workflows.py": {"libraries": ["sys", "tools.utils.MacOS", "typing.TYPE_CHECKING", "tools.utils.Windows", "jinja2.Environment", "typing.cast", "jinja2.StrictUndefined", "__future__.annotations", "ptscripts.command_group", "logging", "tools.utils.Linux", "typing_extensions.TypedDict", "ptscripts.Context", "typing.TypedDict", "tools.utils", "jinja2.FileSystemLoader", "shutil"], "function_names": ["generate_workflows", "iter", "append", "__init__", "actionlint", "__bool__"], "function_calls": ["FileSystemLoader", "Linux", "MacOS", "Environment", "command_group", "NeedsTracker", "bool", "cast", "str", "sorted", "PlatformDefinitions", "set", "isinstance", "Windows"], "class_names": ["NeedsTracker", "PlatformDefinitions"], "class_method_calls": ["ctx.info", "ctx.warn", "template_path.name", "key.replace", "tools.utils", "logging.getLogger", "ctx.exit", "win.arch", "workflow_name.lower", "self._needs", "win.slug", "workflow_path.write_text", "mac.arch", "rendered_template.rstrip", "workflow_path.relative_to", "mac.runner", "shutil.which", "ctx.run", "env.get_template", "cgroup.command", "cmdline.append", "details.get", "ret.returncode", "build_rpms_listing.append", "win.display_name", "rpm_os_versions.items", "build_debs_listing.append", "mac.slug", "mac.display_name", "slug.startswith", "workflows.items", "slug.endswith", "shared_context.items", "loaded_template.render", "template_path.relative_to", "slug.split", "sys.version_info"]}, "release.py": {"libraries": ["os", "boto3", "time", "tools.utils.repo", "virustotal3.core", "__future__.annotations", "json", "pathlib", "ptscripts.command_group", "logging", "botocore.exceptions.ClientError", "ptscripts.Context", "tempfile", "tools.utils"], "function_names": ["download_onedir_artifact", "upload_artifacts", "upload_virustotal"], "function_calls": ["str", "command_group", "sorted"], "class_names": [], "class_method_calls": ["progress.update", "files_to_upload.append", "log.exception", "ctx.info", "s3.list_objects", "archive_path.stat", "s3.head_object", "repo_release_files_path.name", "arch.lower", "fpath.name", "os.path", "s3.upload_file", "tools.utils", "logging.getLogger", "ctx.exit", "json.loads", "local_release_files_path.read_text", "s3.delete_objects", "to_delete_paths.extend", "time.sleep", "local_release_files_path.open", "fpath.suffix", "platform.lower", "fpath.stat", "boto3.client", "salt_version.startswith", "repo_release_files_path.as_posix", "ctx.error", "objects.append", "pathlib.Path", "release.command", "local_download_file.open", "archive_path.parent", "s3.download_fileobj", "tempfile.TemporaryDirectory", "os.environ", "download_file.as_posix", "vt.upload", "virustotal3.core", "exc.response", "archive_path.exists", "artifacts_path.iterdir", "to_upload_paths.append", "download_file.name", "progress.add_task", "archive_path.open"]}, "download.py": {"libraries": ["typing.TYPE_CHECKING", "tools.utils.gh", "__future__.annotations", "pathlib", "ptscripts.command_group", "logging", "ptscripts.Context", "tools.utils"], "function_names": ["download_onedir_artifact", "download_artifact", "download_nox_artifact", "download_pkgs_artifact"], "function_calls": ["str", "command_group", "sorted"], "class_names": [], "class_method_calls": ["logging.getLogger", "ctx.exit", "download.command", "ctx.info", "pathlib.Path", "tools.utils"]}, "repo.py": {"libraries": ["sys", "datetime.datetime", "boto3", "__future__.annotations", "json", "pathlib", "botocore.exceptions.ClientError", "ptscripts.Context", "typing.Any", "tools.utils"], "function_names": ["create_top_level_repo_path", "__call__", "__init__", "create_full_repo_path", "get_repo_json_file_contents"], "function_calls": ["str", "create_top_level_repo_path", "UpdateProgress", "print"], "class_names": ["UpdateProgress"], "class_method_calls": ["repo_json_path.relative_to", "self.task", "ctx.info", "s3.head_object", "repo_json_path.open", "tools.utils", "ctx.print", "create_repo_path.relative_to", "create_repo_path.mkdir", "latest_nightly_symlink.symlink_to", "boto3.client", "pathlib.Path", "create_repo_path.name", "json.load", "latest_nightly_symlink.exists", "s3.download_fileobj", "self.progress", "datetime.utcnow", "exc.response", "ctx.chdir", "progress.add_task", "sys.stderr", "sys.version_info", "create_repo_path.parent"]}, "vm.py": {"libraries": ["typing.TYPE_CHECKING", "typing.cast", "platform", "hashlib", "logging", "botocore.exceptions.ClientError", "functools.lru_cache", "tools.utils", "requests.exceptions.ConnectTimeout", "boto3", "rich.progress.TextColumn", "boto3.resources.factory.ec2.Instance", "json", "pathlib", "pprint", "ptscripts.Context", "sys", "os", "time", "textwrap", "subprocess", "rich.progress.TaskProgressColumn", "ptscripts.command_group", "rich.progress.Progress", "attr", "datetime.datetime", "rich.progress.Column", "rich.progress.TimeRemainingColumn", "rich.progress.BarColumn", "__future__.annotations", "shutil"], "function_names": ["_state_dir_default", "_config_default", "destroy", "install_dependencies", "compress_dependencies", "download_dependencies", "id", "write_and_upload_dot_env", "pre_archive_cleanup", "__attrs_post_init__", "state", "create", "get_ec2_resource", "testplan", "get_remote_tempdir", "__repr__", "rsync", "create_xml_coverage_reports", "run", "tempdir", "create_progress_bar", "_ssh_config_file_default", "write_state", "ssh_command_args", "list_vms", "read_state", "ssh", "_filter_instances_by_state", "run_nox", "combine_coverage", "download_artifacts", "is_windows", "upload_path", "get_remote_upload_path", "_get_instances_by_key", "upload_checkout", "ec2", "test", "decompress_dependencies", "is_running", "sync_cache", "write_ssh_config"], "function_calls": ["command_group", "VM", "list", "Progress", "int", "AMIConfig", "TimeRemainingColumn", "str", "sorted", "create_progress_bar", "_filter_instances_by_state", "dict", "TaskProgressColumn", "lru_cache", "TextColumn", "_get_instances_by_key", "cast", "BarColumn", "Column"], "class_names": ["AMIConfig", "VM"], "class_method_calls": ["progress.update", "exc.returncode", "vm_write.write_state", "ret.stderr", "instance_id_path.unlink", "vm.create", "_ssh_command_args.extend", "STATE_DIR.iterdir", "write_env_filepath.unlink", "subprocess.CalledProcessError", "client.describe_security_groups", "sys.platform", "log.log", "logging.getLogger", "instance_id_path.exists", "vm.compress_dependencies", "cached_instances.copy", "sg.vpc_id", "shutil.which", "STATE_DIR.exists", "boto3.client", "self.ssh_config_file", "to_remove.items", "state_dir.default", "ret.returncode", "ctx.error", "proc.poll", "self.get_ec2_resource", "logging.INFO", "source.replace", "self.ssh_command_args", "client.describe_launch_templates", "self.upload_path", "self.run", "progress.add_task", "client.describe_launch_template_versions", "vpc.subnets", "subprocess.PIPE", "self.write_ssh_config", "vm_write.instance", "platform.uname", "ctx.info", "vm.create_xml_coverage_reports", "security_group_ids.extend", "ctx.warn", "log.info", "remote_path.replace", "ssh_config_file.default", "log.warning", "pprint.pformat", "ctx.exit", "vm.download_dependencies", "web.put", "instance.id", "vm.download_artifacts", "time.sleep", "self.ctx", "cmd.extend", "AMIConfig.__annotations__", "progress.stop", "ref.split", "state_path.name", "instance_id_path.read_text", "cached_id.strip", "ec2_region_path.write_text", "instance.state", "response.get", "vm.decompress_dependencies", "cmd.insert", "shutil.rmtree", "pathlib.Path", "time.time", "self.write_and_upload_dot_env", "remote_command.append", "instance_id_path.write_text", "to_write.items", "datetime.utcnow", "vm.destroy", "proc.returncode", "ec2_region_path.read_text", "vm.combine_coverage", "subprocess.Popen", "logging.DEBUG", "proc.kill", "self.name", "log.error", "subnet.available_ip_address_count", "vm.run_nox", "self.get_remote_tempdir", "rsync_flags.append", "ctx.web", "attr.ib", "json.dumps", "vm.add_argument", "tools.utils", "ret.stdout", "ctx.parser", "instance.private_ip_address", "vm.upload_checkout", "ec2_region_path.exists", "proc.stderr", "write_env_filepath.write_text", "self.run_nox", "self.is_running", "logging.NOTSET", "self.is_windows", "textwrap.dedent", "tags.append", "self.region_name", "boto3.resource", "env.items", "ec2.instances", "hashlib.sha256", "extra_info.items", "self.ec2", "self.id", "instance.image_id", "attr.s", "subnets.items", "rsync_remote_path.replace", "ret.text", "self.config", "vpc.id", "env.append", "vm.command", "state_dir.mkdir", "self.rsync", "self.get_remote_upload_path", "log.debug", "self.instance", "self.state", "proc.stdout", "pathlib.PureWindowsPath", "os.path", "instance.tags", "config.default", "_ssh_command_args.append", "stderr.lower", "remote_command.extend", "vm.install_dependencies", "_instance.state", "tag.get", "subprocess.TimeoutExpired", "web.get", "proc.wait", "subnet.tags", "os.environ", "STATE_DIR.relative_to", "vm.run", "key.startswith", "self.write_state", "subnet.id", "self.state_dir", "self.read_state", "sep.join"]}}